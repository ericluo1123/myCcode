

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 15 16:55:13 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2
    80                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	psect	text66,local,class=CODE,merge=1,delta=2
    89                           	psect	text67,local,class=CODE,merge=1,delta=2
    90                           	psect	text68,local,class=CODE,merge=1,delta=2
    91                           	psect	text69,local,class=CODE,merge=1,delta=2
    92                           	psect	text70,local,class=CODE,merge=1,delta=2
    93                           	psect	text71,local,class=CODE,merge=1,delta=2
    94                           	psect	text72,local,class=CODE,merge=1,delta=2
    95                           	psect	text73,local,class=CODE,merge=1,delta=2
    96                           	psect	text74,local,class=CODE,merge=1,delta=2
    97                           	psect	text75,local,class=CODE,merge=1,delta=2
    98                           	psect	text76,local,class=CODE,merge=1,delta=2
    99                           	psect	text77,local,class=CODE,merge=1,delta=2
   100                           	psect	text78,local,class=CODE,merge=1,delta=2
   101                           	psect	text79,local,class=CODE,merge=1,delta=2
   102                           	psect	text80,local,class=CODE,merge=1,delta=2
   103                           	psect	text81,local,class=CODE,merge=1,delta=2
   104                           	psect	text82,local,class=CODE,merge=1,delta=2
   105                           	psect	text83,local,class=CODE,merge=1,delta=2
   106                           	psect	text84,local,class=CODE,merge=1,delta=2
   107                           	psect	text85,local,class=CODE,merge=1,delta=2
   108                           	psect	text86,local,class=CODE,merge=1,delta=2
   109                           	psect	text87,local,class=CODE,merge=1,delta=2
   110                           	psect	text88,local,class=CODE,merge=1,delta=2
   111                           	psect	text89,local,class=CODE,merge=1,delta=2
   112                           	psect	text90,local,class=CODE,merge=1,delta=2
   113                           	psect	text91,local,class=CODE,merge=1,delta=2
   114                           	psect	text92,local,class=CODE,merge=1,delta=2
   115                           	psect	text93,local,class=CODE,merge=1,delta=2
   116                           	psect	text94,local,class=CODE,merge=1,delta=2
   117                           	psect	text95,local,class=CODE,merge=1,delta=2
   118                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text97,local,class=CODE,merge=1,delta=2
   120                           	psect	text98,local,class=CODE,merge=1,delta=2
   121                           	psect	text99,local,class=CODE,merge=1,delta=2
   122                           	psect	text100,local,class=CODE,merge=1,delta=2
   123                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text102,local,class=CODE,merge=1,delta=2
   125                           	psect	text103,local,class=CODE,merge=1,delta=2
   126                           	psect	text104,local,class=CODE,merge=1,delta=2
   127                           	psect	text105,local,class=CODE,merge=1,delta=2
   128                           	psect	text106,local,class=CODE,merge=1,delta=2
   129                           	psect	text107,local,class=CODE,merge=1,delta=2
   130                           	psect	text108,local,class=CODE,merge=1,delta=2
   131                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text110,local,class=CODE,merge=1,delta=2
   133                           	psect	text111,local,class=CODE,merge=1,delta=2
   134                           	psect	text112,local,class=CODE,merge=1,delta=2
   135                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text114,local,class=CODE,merge=1,delta=2
   137                           	psect	text115,local,class=CODE,merge=1,delta=2
   138                           	psect	text116,local,class=CODE,merge=1,delta=2
   139                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text118,local,class=CODE,merge=1,delta=2
   141                           	psect	text119,local,class=CODE,merge=1,delta=2
   142                           	psect	text120,local,class=CODE,merge=1,delta=2
   143                           	psect	text121,local,class=CODE,merge=1,delta=2
   144                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	intentry,global,class=CODE,delta=2
   151                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   158                           	dabs	1,0x7E,2
   159  0000                     	;# 
   160  0001                     	;# 
   161  0002                     	;# 
   162  0003                     	;# 
   163  0004                     	;# 
   164  0005                     	;# 
   165  0006                     	;# 
   166  0007                     	;# 
   167  0008                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0016                     	;# 
   180  0017                     	;# 
   181  0018                     	;# 
   182  0019                     	;# 
   183  001A                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0095                     	;# 
   193  0096                     	;# 
   194  0097                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009B                     	;# 
   199  009C                     	;# 
   200  009D                     	;# 
   201  009E                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0116                     	;# 
   206  0117                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  018D                     	;# 
   210  018E                     	;# 
   211  0191                     	;# 
   212  0191                     	;# 
   213  0192                     	;# 
   214  0193                     	;# 
   215  0193                     	;# 
   216  0194                     	;# 
   217  0195                     	;# 
   218  0196                     	;# 
   219  0197                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019C                     	;# 
   227  019C                     	;# 
   228  019D                     	;# 
   229  019E                     	;# 
   230  019F                     	;# 
   231  020D                     	;# 
   232  0210                     	;# 
   233  0211                     	;# 
   234  0211                     	;# 
   235  0212                     	;# 
   236  0212                     	;# 
   237  0213                     	;# 
   238  0213                     	;# 
   239  0214                     	;# 
   240  0214                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0215                     	;# 
   244  0216                     	;# 
   245  0216                     	;# 
   246  0217                     	;# 
   247  0217                     	;# 
   248  0291                     	;# 
   249  0291                     	;# 
   250  0292                     	;# 
   251  0293                     	;# 
   252  0298                     	;# 
   253  0298                     	;# 
   254  0299                     	;# 
   255  029A                     	;# 
   256  0394                     	;# 
   257  0395                     	;# 
   258  0396                     	;# 
   259  0FE4                     	;# 
   260  0FE5                     	;# 
   261  0FE6                     	;# 
   262  0FE7                     	;# 
   263  0FE8                     	;# 
   264  0FE9                     	;# 
   265  0FEA                     	;# 
   266  0FEB                     	;# 
   267  0FED                     	;# 
   268  0FEE                     	;# 
   269  0FEF                     	;# 
   270  0000                     	;# 
   271  0001                     	;# 
   272  0002                     	;# 
   273  0003                     	;# 
   274  0004                     	;# 
   275  0005                     	;# 
   276  0006                     	;# 
   277  0007                     	;# 
   278  0008                     	;# 
   279  0009                     	;# 
   280  000A                     	;# 
   281  000B                     	;# 
   282  000C                     	;# 
   283  000D                     	;# 
   284  000E                     	;# 
   285  0010                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0090                     	;# 
   301  0091                     	;# 
   302  0092                     	;# 
   303  0095                     	;# 
   304  0096                     	;# 
   305  0097                     	;# 
   306  0099                     	;# 
   307  009A                     	;# 
   308  009B                     	;# 
   309  009B                     	;# 
   310  009C                     	;# 
   311  009D                     	;# 
   312  009E                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0197                     	;# 
   331  0199                     	;# 
   332  019A                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019B                     	;# 
   337  019C                     	;# 
   338  019C                     	;# 
   339  019D                     	;# 
   340  019E                     	;# 
   341  019F                     	;# 
   342  020D                     	;# 
   343  0210                     	;# 
   344  0211                     	;# 
   345  0211                     	;# 
   346  0212                     	;# 
   347  0212                     	;# 
   348  0213                     	;# 
   349  0213                     	;# 
   350  0214                     	;# 
   351  0214                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0215                     	;# 
   355  0216                     	;# 
   356  0216                     	;# 
   357  0217                     	;# 
   358  0217                     	;# 
   359  0291                     	;# 
   360  0291                     	;# 
   361  0292                     	;# 
   362  0293                     	;# 
   363  0298                     	;# 
   364  0298                     	;# 
   365  0299                     	;# 
   366  029A                     	;# 
   367  0394                     	;# 
   368  0395                     	;# 
   369  0396                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  0010                     	;# 
   397  0011                     	;# 
   398  0012                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0016                     	;# 
   402  0017                     	;# 
   403  0018                     	;# 
   404  0019                     	;# 
   405  001A                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  008C                     	;# 
   409  008D                     	;# 
   410  008E                     	;# 
   411  0090                     	;# 
   412  0091                     	;# 
   413  0092                     	;# 
   414  0095                     	;# 
   415  0096                     	;# 
   416  0097                     	;# 
   417  0099                     	;# 
   418  009A                     	;# 
   419  009B                     	;# 
   420  009B                     	;# 
   421  009C                     	;# 
   422  009D                     	;# 
   423  009E                     	;# 
   424  010C                     	;# 
   425  010D                     	;# 
   426  010E                     	;# 
   427  0116                     	;# 
   428  0117                     	;# 
   429  011D                     	;# 
   430  018C                     	;# 
   431  018D                     	;# 
   432  018E                     	;# 
   433  0191                     	;# 
   434  0191                     	;# 
   435  0192                     	;# 
   436  0193                     	;# 
   437  0193                     	;# 
   438  0194                     	;# 
   439  0195                     	;# 
   440  0196                     	;# 
   441  0197                     	;# 
   442  0199                     	;# 
   443  019A                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019B                     	;# 
   448  019C                     	;# 
   449  019C                     	;# 
   450  019D                     	;# 
   451  019E                     	;# 
   452  019F                     	;# 
   453  020D                     	;# 
   454  0210                     	;# 
   455  0211                     	;# 
   456  0211                     	;# 
   457  0212                     	;# 
   458  0212                     	;# 
   459  0213                     	;# 
   460  0213                     	;# 
   461  0214                     	;# 
   462  0214                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0215                     	;# 
   466  0216                     	;# 
   467  0216                     	;# 
   468  0217                     	;# 
   469  0217                     	;# 
   470  0291                     	;# 
   471  0291                     	;# 
   472  0292                     	;# 
   473  0293                     	;# 
   474  0298                     	;# 
   475  0298                     	;# 
   476  0299                     	;# 
   477  029A                     	;# 
   478  0394                     	;# 
   479  0395                     	;# 
   480  0396                     	;# 
   481  0FE4                     	;# 
   482  0FE5                     	;# 
   483  0FE6                     	;# 
   484  0FE7                     	;# 
   485  0FE8                     	;# 
   486  0FE9                     	;# 
   487  0FEA                     	;# 
   488  0FEB                     	;# 
   489  0FED                     	;# 
   490  0FEE                     	;# 
   491  0FEF                     	;# 
   492  0000                     	;# 
   493  0001                     	;# 
   494  0002                     	;# 
   495  0003                     	;# 
   496  0004                     	;# 
   497  0005                     	;# 
   498  0006                     	;# 
   499  0007                     	;# 
   500  0008                     	;# 
   501  0009                     	;# 
   502  000A                     	;# 
   503  000B                     	;# 
   504  000C                     	;# 
   505  000D                     	;# 
   506  000E                     	;# 
   507  0010                     	;# 
   508  0011                     	;# 
   509  0012                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0016                     	;# 
   513  0017                     	;# 
   514  0018                     	;# 
   515  0019                     	;# 
   516  001A                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  008C                     	;# 
   520  008D                     	;# 
   521  008E                     	;# 
   522  0090                     	;# 
   523  0091                     	;# 
   524  0092                     	;# 
   525  0095                     	;# 
   526  0096                     	;# 
   527  0097                     	;# 
   528  0099                     	;# 
   529  009A                     	;# 
   530  009B                     	;# 
   531  009B                     	;# 
   532  009C                     	;# 
   533  009D                     	;# 
   534  009E                     	;# 
   535  010C                     	;# 
   536  010D                     	;# 
   537  010E                     	;# 
   538  0116                     	;# 
   539  0117                     	;# 
   540  011D                     	;# 
   541  018C                     	;# 
   542  018D                     	;# 
   543  018E                     	;# 
   544  0191                     	;# 
   545  0191                     	;# 
   546  0192                     	;# 
   547  0193                     	;# 
   548  0193                     	;# 
   549  0194                     	;# 
   550  0195                     	;# 
   551  0196                     	;# 
   552  0197                     	;# 
   553  0199                     	;# 
   554  019A                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019B                     	;# 
   559  019C                     	;# 
   560  019C                     	;# 
   561  019D                     	;# 
   562  019E                     	;# 
   563  019F                     	;# 
   564  020D                     	;# 
   565  0210                     	;# 
   566  0211                     	;# 
   567  0211                     	;# 
   568  0212                     	;# 
   569  0212                     	;# 
   570  0213                     	;# 
   571  0213                     	;# 
   572  0214                     	;# 
   573  0214                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0215                     	;# 
   577  0216                     	;# 
   578  0216                     	;# 
   579  0217                     	;# 
   580  0217                     	;# 
   581  0291                     	;# 
   582  0291                     	;# 
   583  0292                     	;# 
   584  0293                     	;# 
   585  0298                     	;# 
   586  0298                     	;# 
   587  0299                     	;# 
   588  029A                     	;# 
   589  0394                     	;# 
   590  0395                     	;# 
   591  0396                     	;# 
   592  0FE4                     	;# 
   593  0FE5                     	;# 
   594  0FE6                     	;# 
   595  0FE7                     	;# 
   596  0FE8                     	;# 
   597  0FE9                     	;# 
   598  0FEA                     	;# 
   599  0FEB                     	;# 
   600  0FED                     	;# 
   601  0FEE                     	;# 
   602  0FEF                     	;# 
   603  0000                     	;# 
   604  0001                     	;# 
   605  0002                     	;# 
   606  0003                     	;# 
   607  0004                     	;# 
   608  0005                     	;# 
   609  0006                     	;# 
   610  0007                     	;# 
   611  0008                     	;# 
   612  0009                     	;# 
   613  000A                     	;# 
   614  000B                     	;# 
   615  000C                     	;# 
   616  000D                     	;# 
   617  000E                     	;# 
   618  0010                     	;# 
   619  0011                     	;# 
   620  0012                     	;# 
   621  0015                     	;# 
   622  0016                     	;# 
   623  0016                     	;# 
   624  0017                     	;# 
   625  0018                     	;# 
   626  0019                     	;# 
   627  001A                     	;# 
   628  001B                     	;# 
   629  001C                     	;# 
   630  008C                     	;# 
   631  008D                     	;# 
   632  008E                     	;# 
   633  0090                     	;# 
   634  0091                     	;# 
   635  0092                     	;# 
   636  0095                     	;# 
   637  0096                     	;# 
   638  0097                     	;# 
   639  0099                     	;# 
   640  009A                     	;# 
   641  009B                     	;# 
   642  009B                     	;# 
   643  009C                     	;# 
   644  009D                     	;# 
   645  009E                     	;# 
   646  010C                     	;# 
   647  010D                     	;# 
   648  010E                     	;# 
   649  0116                     	;# 
   650  0117                     	;# 
   651  011D                     	;# 
   652  018C                     	;# 
   653  018D                     	;# 
   654  018E                     	;# 
   655  0191                     	;# 
   656  0191                     	;# 
   657  0192                     	;# 
   658  0193                     	;# 
   659  0193                     	;# 
   660  0194                     	;# 
   661  0195                     	;# 
   662  0196                     	;# 
   663  0197                     	;# 
   664  0199                     	;# 
   665  019A                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019B                     	;# 
   670  019C                     	;# 
   671  019C                     	;# 
   672  019D                     	;# 
   673  019E                     	;# 
   674  019F                     	;# 
   675  020D                     	;# 
   676  0210                     	;# 
   677  0211                     	;# 
   678  0211                     	;# 
   679  0212                     	;# 
   680  0212                     	;# 
   681  0213                     	;# 
   682  0213                     	;# 
   683  0214                     	;# 
   684  0214                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0215                     	;# 
   688  0216                     	;# 
   689  0216                     	;# 
   690  0217                     	;# 
   691  0217                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0298                     	;# 
   697  0298                     	;# 
   698  0299                     	;# 
   699  029A                     	;# 
   700  0394                     	;# 
   701  0395                     	;# 
   702  0396                     	;# 
   703  0FE4                     	;# 
   704  0FE5                     	;# 
   705  0FE6                     	;# 
   706  0FE7                     	;# 
   707  0FE8                     	;# 
   708  0FE9                     	;# 
   709  0FEA                     	;# 
   710  0FEB                     	;# 
   711  0FED                     	;# 
   712  0FEE                     	;# 
   713  0FEF                     	;# 
   714  0000                     	;# 
   715  0001                     	;# 
   716  0002                     	;# 
   717  0003                     	;# 
   718  0004                     	;# 
   719  0005                     	;# 
   720  0006                     	;# 
   721  0007                     	;# 
   722  0008                     	;# 
   723  0009                     	;# 
   724  000A                     	;# 
   725  000B                     	;# 
   726  000C                     	;# 
   727  000D                     	;# 
   728  000E                     	;# 
   729  0010                     	;# 
   730  0011                     	;# 
   731  0012                     	;# 
   732  0015                     	;# 
   733  0016                     	;# 
   734  0016                     	;# 
   735  0017                     	;# 
   736  0018                     	;# 
   737  0019                     	;# 
   738  001A                     	;# 
   739  001B                     	;# 
   740  001C                     	;# 
   741  008C                     	;# 
   742  008D                     	;# 
   743  008E                     	;# 
   744  0090                     	;# 
   745  0091                     	;# 
   746  0092                     	;# 
   747  0095                     	;# 
   748  0096                     	;# 
   749  0097                     	;# 
   750  0099                     	;# 
   751  009A                     	;# 
   752  009B                     	;# 
   753  009B                     	;# 
   754  009C                     	;# 
   755  009D                     	;# 
   756  009E                     	;# 
   757  010C                     	;# 
   758  010D                     	;# 
   759  010E                     	;# 
   760  0116                     	;# 
   761  0117                     	;# 
   762  011D                     	;# 
   763  018C                     	;# 
   764  018D                     	;# 
   765  018E                     	;# 
   766  0191                     	;# 
   767  0191                     	;# 
   768  0192                     	;# 
   769  0193                     	;# 
   770  0193                     	;# 
   771  0194                     	;# 
   772  0195                     	;# 
   773  0196                     	;# 
   774  0197                     	;# 
   775  0199                     	;# 
   776  019A                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019B                     	;# 
   781  019C                     	;# 
   782  019C                     	;# 
   783  019D                     	;# 
   784  019E                     	;# 
   785  019F                     	;# 
   786  020D                     	;# 
   787  0210                     	;# 
   788  0211                     	;# 
   789  0211                     	;# 
   790  0212                     	;# 
   791  0212                     	;# 
   792  0213                     	;# 
   793  0213                     	;# 
   794  0214                     	;# 
   795  0214                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0215                     	;# 
   799  0216                     	;# 
   800  0216                     	;# 
   801  0217                     	;# 
   802  0217                     	;# 
   803  0291                     	;# 
   804  0291                     	;# 
   805  0292                     	;# 
   806  0293                     	;# 
   807  0298                     	;# 
   808  0298                     	;# 
   809  0299                     	;# 
   810  029A                     	;# 
   811  0394                     	;# 
   812  0395                     	;# 
   813  0396                     	;# 
   814  0FE4                     	;# 
   815  0FE5                     	;# 
   816  0FE6                     	;# 
   817  0FE7                     	;# 
   818  0FE8                     	;# 
   819  0FE9                     	;# 
   820  0FEA                     	;# 
   821  0FEB                     	;# 
   822  0FED                     	;# 
   823  0FEE                     	;# 
   824  0FEF                     	;# 
   825  0000                     	;# 
   826  0001                     	;# 
   827  0002                     	;# 
   828  0003                     	;# 
   829  0004                     	;# 
   830  0005                     	;# 
   831  0006                     	;# 
   832  0007                     	;# 
   833  0008                     	;# 
   834  0009                     	;# 
   835  000A                     	;# 
   836  000B                     	;# 
   837  000C                     	;# 
   838  000D                     	;# 
   839  000E                     	;# 
   840  0010                     	;# 
   841  0011                     	;# 
   842  0012                     	;# 
   843  0015                     	;# 
   844  0016                     	;# 
   845  0016                     	;# 
   846  0017                     	;# 
   847  0018                     	;# 
   848  0019                     	;# 
   849  001A                     	;# 
   850  001B                     	;# 
   851  001C                     	;# 
   852  008C                     	;# 
   853  008D                     	;# 
   854  008E                     	;# 
   855  0090                     	;# 
   856  0091                     	;# 
   857  0092                     	;# 
   858  0095                     	;# 
   859  0096                     	;# 
   860  0097                     	;# 
   861  0099                     	;# 
   862  009A                     	;# 
   863  009B                     	;# 
   864  009B                     	;# 
   865  009C                     	;# 
   866  009D                     	;# 
   867  009E                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0116                     	;# 
   872  0117                     	;# 
   873  011D                     	;# 
   874  018C                     	;# 
   875  018D                     	;# 
   876  018E                     	;# 
   877  0191                     	;# 
   878  0191                     	;# 
   879  0192                     	;# 
   880  0193                     	;# 
   881  0193                     	;# 
   882  0194                     	;# 
   883  0195                     	;# 
   884  0196                     	;# 
   885  0197                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019C                     	;# 
   893  019C                     	;# 
   894  019D                     	;# 
   895  019E                     	;# 
   896  019F                     	;# 
   897  020D                     	;# 
   898  0210                     	;# 
   899  0211                     	;# 
   900  0211                     	;# 
   901  0212                     	;# 
   902  0212                     	;# 
   903  0213                     	;# 
   904  0213                     	;# 
   905  0214                     	;# 
   906  0214                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0215                     	;# 
   910  0216                     	;# 
   911  0216                     	;# 
   912  0217                     	;# 
   913  0217                     	;# 
   914  0291                     	;# 
   915  0291                     	;# 
   916  0292                     	;# 
   917  0293                     	;# 
   918  0298                     	;# 
   919  0298                     	;# 
   920  0299                     	;# 
   921  029A                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0FE4                     	;# 
   926  0FE5                     	;# 
   927  0FE6                     	;# 
   928  0FE7                     	;# 
   929  0FE8                     	;# 
   930  0FE9                     	;# 
   931  0FEA                     	;# 
   932  0FEB                     	;# 
   933  0FED                     	;# 
   934  0FEE                     	;# 
   935  0FEF                     	;# 
   936  0000                     	;# 
   937  0001                     	;# 
   938  0002                     	;# 
   939  0003                     	;# 
   940  0004                     	;# 
   941  0005                     	;# 
   942  0006                     	;# 
   943  0007                     	;# 
   944  0008                     	;# 
   945  0009                     	;# 
   946  000A                     	;# 
   947  000B                     	;# 
   948  000C                     	;# 
   949  000D                     	;# 
   950  000E                     	;# 
   951  0010                     	;# 
   952  0011                     	;# 
   953  0012                     	;# 
   954  0015                     	;# 
   955  0016                     	;# 
   956  0016                     	;# 
   957  0017                     	;# 
   958  0018                     	;# 
   959  0019                     	;# 
   960  001A                     	;# 
   961  001B                     	;# 
   962  001C                     	;# 
   963  008C                     	;# 
   964  008D                     	;# 
   965  008E                     	;# 
   966  0090                     	;# 
   967  0091                     	;# 
   968  0092                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0097                     	;# 
   972  0099                     	;# 
   973  009A                     	;# 
   974  009B                     	;# 
   975  009B                     	;# 
   976  009C                     	;# 
   977  009D                     	;# 
   978  009E                     	;# 
   979  010C                     	;# 
   980  010D                     	;# 
   981  010E                     	;# 
   982  0116                     	;# 
   983  0117                     	;# 
   984  011D                     	;# 
   985  018C                     	;# 
   986  018D                     	;# 
   987  018E                     	;# 
   988  0191                     	;# 
   989  0191                     	;# 
   990  0192                     	;# 
   991  0193                     	;# 
   992  0193                     	;# 
   993  0194                     	;# 
   994  0195                     	;# 
   995  0196                     	;# 
   996  0197                     	;# 
   997  0199                     	;# 
   998  019A                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019B                     	;# 
  1003  019C                     	;# 
  1004  019C                     	;# 
  1005  019D                     	;# 
  1006  019E                     	;# 
  1007  019F                     	;# 
  1008  020D                     	;# 
  1009  0210                     	;# 
  1010  0211                     	;# 
  1011  0211                     	;# 
  1012  0212                     	;# 
  1013  0212                     	;# 
  1014  0213                     	;# 
  1015  0213                     	;# 
  1016  0214                     	;# 
  1017  0214                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0215                     	;# 
  1021  0216                     	;# 
  1022  0216                     	;# 
  1023  0217                     	;# 
  1024  0217                     	;# 
  1025  0291                     	;# 
  1026  0291                     	;# 
  1027  0292                     	;# 
  1028  0293                     	;# 
  1029  0298                     	;# 
  1030  0298                     	;# 
  1031  0299                     	;# 
  1032  029A                     	;# 
  1033  0394                     	;# 
  1034  0395                     	;# 
  1035  0396                     	;# 
  1036  0FE4                     	;# 
  1037  0FE5                     	;# 
  1038  0FE6                     	;# 
  1039  0FE7                     	;# 
  1040  0FE8                     	;# 
  1041  0FE9                     	;# 
  1042  0FEA                     	;# 
  1043  0FEB                     	;# 
  1044  0FED                     	;# 
  1045  0FEE                     	;# 
  1046  0FEF                     	;# 
  1047  0000                     	;# 
  1048  0001                     	;# 
  1049  0002                     	;# 
  1050  0003                     	;# 
  1051  0004                     	;# 
  1052  0005                     	;# 
  1053  0006                     	;# 
  1054  0007                     	;# 
  1055  0008                     	;# 
  1056  0009                     	;# 
  1057  000A                     	;# 
  1058  000B                     	;# 
  1059  000C                     	;# 
  1060  000D                     	;# 
  1061  000E                     	;# 
  1062  0010                     	;# 
  1063  0011                     	;# 
  1064  0012                     	;# 
  1065  0015                     	;# 
  1066  0016                     	;# 
  1067  0016                     	;# 
  1068  0017                     	;# 
  1069  0018                     	;# 
  1070  0019                     	;# 
  1071  001A                     	;# 
  1072  001B                     	;# 
  1073  001C                     	;# 
  1074  008C                     	;# 
  1075  008D                     	;# 
  1076  008E                     	;# 
  1077  0090                     	;# 
  1078  0091                     	;# 
  1079  0092                     	;# 
  1080  0095                     	;# 
  1081  0096                     	;# 
  1082  0097                     	;# 
  1083  0099                     	;# 
  1084  009A                     	;# 
  1085  009B                     	;# 
  1086  009B                     	;# 
  1087  009C                     	;# 
  1088  009D                     	;# 
  1089  009E                     	;# 
  1090  010C                     	;# 
  1091  010D                     	;# 
  1092  010E                     	;# 
  1093  0116                     	;# 
  1094  0117                     	;# 
  1095  011D                     	;# 
  1096  018C                     	;# 
  1097  018D                     	;# 
  1098  018E                     	;# 
  1099  0191                     	;# 
  1100  0191                     	;# 
  1101  0192                     	;# 
  1102  0193                     	;# 
  1103  0193                     	;# 
  1104  0194                     	;# 
  1105  0195                     	;# 
  1106  0196                     	;# 
  1107  0197                     	;# 
  1108  0199                     	;# 
  1109  019A                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019B                     	;# 
  1114  019C                     	;# 
  1115  019C                     	;# 
  1116  019D                     	;# 
  1117  019E                     	;# 
  1118  019F                     	;# 
  1119  020D                     	;# 
  1120  0210                     	;# 
  1121  0211                     	;# 
  1122  0211                     	;# 
  1123  0212                     	;# 
  1124  0212                     	;# 
  1125  0213                     	;# 
  1126  0213                     	;# 
  1127  0214                     	;# 
  1128  0214                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0215                     	;# 
  1132  0216                     	;# 
  1133  0216                     	;# 
  1134  0217                     	;# 
  1135  0217                     	;# 
  1136  0291                     	;# 
  1137  0291                     	;# 
  1138  0292                     	;# 
  1139  0293                     	;# 
  1140  0298                     	;# 
  1141  0298                     	;# 
  1142  0299                     	;# 
  1143  029A                     	;# 
  1144  0394                     	;# 
  1145  0395                     	;# 
  1146  0396                     	;# 
  1147  0FE4                     	;# 
  1148  0FE5                     	;# 
  1149  0FE6                     	;# 
  1150  0FE7                     	;# 
  1151  0FE8                     	;# 
  1152  0FE9                     	;# 
  1153  0FEA                     	;# 
  1154  0FEB                     	;# 
  1155  0FED                     	;# 
  1156  0FEE                     	;# 
  1157  0FEF                     	;# 
  1158  0000                     	;# 
  1159  0001                     	;# 
  1160  0002                     	;# 
  1161  0003                     	;# 
  1162  0004                     	;# 
  1163  0005                     	;# 
  1164  0006                     	;# 
  1165  0007                     	;# 
  1166  0008                     	;# 
  1167  0009                     	;# 
  1168  000A                     	;# 
  1169  000B                     	;# 
  1170  000C                     	;# 
  1171  000D                     	;# 
  1172  000E                     	;# 
  1173  0010                     	;# 
  1174  0011                     	;# 
  1175  0012                     	;# 
  1176  0015                     	;# 
  1177  0016                     	;# 
  1178  0016                     	;# 
  1179  0017                     	;# 
  1180  0018                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  008C                     	;# 
  1186  008D                     	;# 
  1187  008E                     	;# 
  1188  0090                     	;# 
  1189  0091                     	;# 
  1190  0092                     	;# 
  1191  0095                     	;# 
  1192  0096                     	;# 
  1193  0097                     	;# 
  1194  0099                     	;# 
  1195  009A                     	;# 
  1196  009B                     	;# 
  1197  009B                     	;# 
  1198  009C                     	;# 
  1199  009D                     	;# 
  1200  009E                     	;# 
  1201  010C                     	;# 
  1202  010D                     	;# 
  1203  010E                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  011D                     	;# 
  1207  018C                     	;# 
  1208  018D                     	;# 
  1209  018E                     	;# 
  1210  0191                     	;# 
  1211  0191                     	;# 
  1212  0192                     	;# 
  1213  0193                     	;# 
  1214  0193                     	;# 
  1215  0194                     	;# 
  1216  0195                     	;# 
  1217  0196                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  019A                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019B                     	;# 
  1225  019C                     	;# 
  1226  019C                     	;# 
  1227  019D                     	;# 
  1228  019E                     	;# 
  1229  019F                     	;# 
  1230  020D                     	;# 
  1231  0210                     	;# 
  1232  0211                     	;# 
  1233  0211                     	;# 
  1234  0212                     	;# 
  1235  0212                     	;# 
  1236  0213                     	;# 
  1237  0213                     	;# 
  1238  0214                     	;# 
  1239  0214                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0215                     	;# 
  1243  0216                     	;# 
  1244  0216                     	;# 
  1245  0217                     	;# 
  1246  0217                     	;# 
  1247  0291                     	;# 
  1248  0291                     	;# 
  1249  0292                     	;# 
  1250  0293                     	;# 
  1251  0298                     	;# 
  1252  0298                     	;# 
  1253  0299                     	;# 
  1254  029A                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  0FE4                     	;# 
  1259  0FE5                     	;# 
  1260  0FE6                     	;# 
  1261  0FE7                     	;# 
  1262  0FE8                     	;# 
  1263  0FE9                     	;# 
  1264  0FEA                     	;# 
  1265  0FEB                     	;# 
  1266  0FED                     	;# 
  1267  0FEE                     	;# 
  1268  0FEF                     	;# 
  1269  0000                     	;# 
  1270  0001                     	;# 
  1271  0002                     	;# 
  1272  0003                     	;# 
  1273  0004                     	;# 
  1274  0005                     	;# 
  1275  0006                     	;# 
  1276  0007                     	;# 
  1277  0008                     	;# 
  1278  0009                     	;# 
  1279  000A                     	;# 
  1280  000B                     	;# 
  1281  000C                     	;# 
  1282  000D                     	;# 
  1283  000E                     	;# 
  1284  0010                     	;# 
  1285  0011                     	;# 
  1286  0012                     	;# 
  1287  0015                     	;# 
  1288  0016                     	;# 
  1289  0016                     	;# 
  1290  0017                     	;# 
  1291  0018                     	;# 
  1292  0019                     	;# 
  1293  001A                     	;# 
  1294  001B                     	;# 
  1295  001C                     	;# 
  1296  008C                     	;# 
  1297  008D                     	;# 
  1298  008E                     	;# 
  1299  0090                     	;# 
  1300  0091                     	;# 
  1301  0092                     	;# 
  1302  0095                     	;# 
  1303  0096                     	;# 
  1304  0097                     	;# 
  1305  0099                     	;# 
  1306  009A                     	;# 
  1307  009B                     	;# 
  1308  009B                     	;# 
  1309  009C                     	;# 
  1310  009D                     	;# 
  1311  009E                     	;# 
  1312  010C                     	;# 
  1313  010D                     	;# 
  1314  010E                     	;# 
  1315  0116                     	;# 
  1316  0117                     	;# 
  1317  011D                     	;# 
  1318  018C                     	;# 
  1319  018D                     	;# 
  1320  018E                     	;# 
  1321  0191                     	;# 
  1322  0191                     	;# 
  1323  0192                     	;# 
  1324  0193                     	;# 
  1325  0193                     	;# 
  1326  0194                     	;# 
  1327  0195                     	;# 
  1328  0196                     	;# 
  1329  0197                     	;# 
  1330  0199                     	;# 
  1331  019A                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019B                     	;# 
  1336  019C                     	;# 
  1337  019C                     	;# 
  1338  019D                     	;# 
  1339  019E                     	;# 
  1340  019F                     	;# 
  1341  020D                     	;# 
  1342  0210                     	;# 
  1343  0211                     	;# 
  1344  0211                     	;# 
  1345  0212                     	;# 
  1346  0212                     	;# 
  1347  0213                     	;# 
  1348  0213                     	;# 
  1349  0214                     	;# 
  1350  0214                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0215                     	;# 
  1354  0216                     	;# 
  1355  0216                     	;# 
  1356  0217                     	;# 
  1357  0217                     	;# 
  1358  0291                     	;# 
  1359  0291                     	;# 
  1360  0292                     	;# 
  1361  0293                     	;# 
  1362  0298                     	;# 
  1363  0298                     	;# 
  1364  0299                     	;# 
  1365  029A                     	;# 
  1366  0394                     	;# 
  1367  0395                     	;# 
  1368  0396                     	;# 
  1369  0FE4                     	;# 
  1370  0FE5                     	;# 
  1371  0FE6                     	;# 
  1372  0FE7                     	;# 
  1373  0FE8                     	;# 
  1374  0FE9                     	;# 
  1375  0FEA                     	;# 
  1376  0FEB                     	;# 
  1377  0FED                     	;# 
  1378  0FEE                     	;# 
  1379  0FEF                     	;# 
  1380  0000                     	;# 
  1381  0001                     	;# 
  1382  0002                     	;# 
  1383  0003                     	;# 
  1384  0004                     	;# 
  1385  0005                     	;# 
  1386  0006                     	;# 
  1387  0007                     	;# 
  1388  0008                     	;# 
  1389  0009                     	;# 
  1390  000A                     	;# 
  1391  000B                     	;# 
  1392  000C                     	;# 
  1393  000D                     	;# 
  1394  000E                     	;# 
  1395  0010                     	;# 
  1396  0011                     	;# 
  1397  0012                     	;# 
  1398  0015                     	;# 
  1399  0016                     	;# 
  1400  0016                     	;# 
  1401  0017                     	;# 
  1402  0018                     	;# 
  1403  0019                     	;# 
  1404  001A                     	;# 
  1405  001B                     	;# 
  1406  001C                     	;# 
  1407  008C                     	;# 
  1408  008D                     	;# 
  1409  008E                     	;# 
  1410  0090                     	;# 
  1411  0091                     	;# 
  1412  0092                     	;# 
  1413  0095                     	;# 
  1414  0096                     	;# 
  1415  0097                     	;# 
  1416  0099                     	;# 
  1417  009A                     	;# 
  1418  009B                     	;# 
  1419  009B                     	;# 
  1420  009C                     	;# 
  1421  009D                     	;# 
  1422  009E                     	;# 
  1423  010C                     	;# 
  1424  010D                     	;# 
  1425  010E                     	;# 
  1426  0116                     	;# 
  1427  0117                     	;# 
  1428  011D                     	;# 
  1429  018C                     	;# 
  1430  018D                     	;# 
  1431  018E                     	;# 
  1432  0191                     	;# 
  1433  0191                     	;# 
  1434  0192                     	;# 
  1435  0193                     	;# 
  1436  0193                     	;# 
  1437  0194                     	;# 
  1438  0195                     	;# 
  1439  0196                     	;# 
  1440  0197                     	;# 
  1441  0199                     	;# 
  1442  019A                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019B                     	;# 
  1447  019C                     	;# 
  1448  019C                     	;# 
  1449  019D                     	;# 
  1450  019E                     	;# 
  1451  019F                     	;# 
  1452  020D                     	;# 
  1453  0210                     	;# 
  1454  0211                     	;# 
  1455  0211                     	;# 
  1456  0212                     	;# 
  1457  0212                     	;# 
  1458  0213                     	;# 
  1459  0213                     	;# 
  1460  0214                     	;# 
  1461  0214                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0215                     	;# 
  1465  0216                     	;# 
  1466  0216                     	;# 
  1467  0217                     	;# 
  1468  0217                     	;# 
  1469  0291                     	;# 
  1470  0291                     	;# 
  1471  0292                     	;# 
  1472  0293                     	;# 
  1473  0298                     	;# 
  1474  0298                     	;# 
  1475  0299                     	;# 
  1476  029A                     	;# 
  1477  0394                     	;# 
  1478  0395                     	;# 
  1479  0396                     	;# 
  1480  0FE4                     	;# 
  1481  0FE5                     	;# 
  1482  0FE6                     	;# 
  1483  0FE7                     	;# 
  1484  0FE8                     	;# 
  1485  0FE9                     	;# 
  1486  0FEA                     	;# 
  1487  0FEB                     	;# 
  1488  0FED                     	;# 
  1489  0FEE                     	;# 
  1490  0FEF                     	;# 
  1491  0000                     	;# 
  1492  0001                     	;# 
  1493  0002                     	;# 
  1494  0003                     	;# 
  1495  0004                     	;# 
  1496  0005                     	;# 
  1497  0006                     	;# 
  1498  0007                     	;# 
  1499  0008                     	;# 
  1500  0009                     	;# 
  1501  000A                     	;# 
  1502  000B                     	;# 
  1503  000C                     	;# 
  1504  000D                     	;# 
  1505  000E                     	;# 
  1506  0010                     	;# 
  1507  0011                     	;# 
  1508  0012                     	;# 
  1509  0015                     	;# 
  1510  0016                     	;# 
  1511  0016                     	;# 
  1512  0017                     	;# 
  1513  0018                     	;# 
  1514  0019                     	;# 
  1515  001A                     	;# 
  1516  001B                     	;# 
  1517  001C                     	;# 
  1518  008C                     	;# 
  1519  008D                     	;# 
  1520  008E                     	;# 
  1521  0090                     	;# 
  1522  0091                     	;# 
  1523  0092                     	;# 
  1524  0095                     	;# 
  1525  0096                     	;# 
  1526  0097                     	;# 
  1527  0099                     	;# 
  1528  009A                     	;# 
  1529  009B                     	;# 
  1530  009B                     	;# 
  1531  009C                     	;# 
  1532  009D                     	;# 
  1533  009E                     	;# 
  1534  010C                     	;# 
  1535  010D                     	;# 
  1536  010E                     	;# 
  1537  0116                     	;# 
  1538  0117                     	;# 
  1539  011D                     	;# 
  1540  018C                     	;# 
  1541  018D                     	;# 
  1542  018E                     	;# 
  1543  0191                     	;# 
  1544  0191                     	;# 
  1545  0192                     	;# 
  1546  0193                     	;# 
  1547  0193                     	;# 
  1548  0194                     	;# 
  1549  0195                     	;# 
  1550  0196                     	;# 
  1551  0197                     	;# 
  1552  0199                     	;# 
  1553  019A                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019B                     	;# 
  1558  019C                     	;# 
  1559  019C                     	;# 
  1560  019D                     	;# 
  1561  019E                     	;# 
  1562  019F                     	;# 
  1563  020D                     	;# 
  1564  0210                     	;# 
  1565  0211                     	;# 
  1566  0211                     	;# 
  1567  0212                     	;# 
  1568  0212                     	;# 
  1569  0213                     	;# 
  1570  0213                     	;# 
  1571  0214                     	;# 
  1572  0214                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0215                     	;# 
  1576  0216                     	;# 
  1577  0216                     	;# 
  1578  0217                     	;# 
  1579  0217                     	;# 
  1580  0291                     	;# 
  1581  0291                     	;# 
  1582  0292                     	;# 
  1583  0293                     	;# 
  1584  0298                     	;# 
  1585  0298                     	;# 
  1586  0299                     	;# 
  1587  029A                     	;# 
  1588  0394                     	;# 
  1589  0395                     	;# 
  1590  0396                     	;# 
  1591  0FE4                     	;# 
  1592  0FE5                     	;# 
  1593  0FE6                     	;# 
  1594  0FE7                     	;# 
  1595  0FE8                     	;# 
  1596  0FE9                     	;# 
  1597  0FEA                     	;# 
  1598  0FEB                     	;# 
  1599  0FED                     	;# 
  1600  0FEE                     	;# 
  1601  0FEF                     	;# 
  1602  0000                     	;# 
  1603  0001                     	;# 
  1604  0002                     	;# 
  1605  0003                     	;# 
  1606  0004                     	;# 
  1607  0005                     	;# 
  1608  0006                     	;# 
  1609  0007                     	;# 
  1610  0008                     	;# 
  1611  0009                     	;# 
  1612  000A                     	;# 
  1613  000B                     	;# 
  1614  000C                     	;# 
  1615  000D                     	;# 
  1616  000E                     	;# 
  1617  0010                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0015                     	;# 
  1621  0016                     	;# 
  1622  0016                     	;# 
  1623  0017                     	;# 
  1624  0018                     	;# 
  1625  0019                     	;# 
  1626  001A                     	;# 
  1627  001B                     	;# 
  1628  001C                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0095                     	;# 
  1636  0096                     	;# 
  1637  0097                     	;# 
  1638  0099                     	;# 
  1639  009A                     	;# 
  1640  009B                     	;# 
  1641  009B                     	;# 
  1642  009C                     	;# 
  1643  009D                     	;# 
  1644  009E                     	;# 
  1645  010C                     	;# 
  1646  010D                     	;# 
  1647  010E                     	;# 
  1648  0116                     	;# 
  1649  0117                     	;# 
  1650  011D                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0191                     	;# 
  1655  0191                     	;# 
  1656  0192                     	;# 
  1657  0193                     	;# 
  1658  0193                     	;# 
  1659  0194                     	;# 
  1660  0195                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0199                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019F                     	;# 
  1674  020D                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  0212                     	;# 
  1679  0212                     	;# 
  1680  0213                     	;# 
  1681  0213                     	;# 
  1682  0214                     	;# 
  1683  0214                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0215                     	;# 
  1687  0216                     	;# 
  1688  0216                     	;# 
  1689  0217                     	;# 
  1690  0217                     	;# 
  1691  0291                     	;# 
  1692  0291                     	;# 
  1693  0292                     	;# 
  1694  0293                     	;# 
  1695  0298                     	;# 
  1696  0298                     	;# 
  1697  0299                     	;# 
  1698  029A                     	;# 
  1699  0394                     	;# 
  1700  0395                     	;# 
  1701  0396                     	;# 
  1702  0FE4                     	;# 
  1703  0FE5                     	;# 
  1704  0FE6                     	;# 
  1705  0FE7                     	;# 
  1706  0FE8                     	;# 
  1707  0FE9                     	;# 
  1708  0FEA                     	;# 
  1709  0FEB                     	;# 
  1710  0FED                     	;# 
  1711  0FEE                     	;# 
  1712  0FEF                     	;# 
  1713  0000                     	;# 
  1714  0001                     	;# 
  1715  0002                     	;# 
  1716  0003                     	;# 
  1717  0004                     	;# 
  1718  0005                     	;# 
  1719  0006                     	;# 
  1720  0007                     	;# 
  1721  0008                     	;# 
  1722  0009                     	;# 
  1723  000A                     	;# 
  1724  000B                     	;# 
  1725  000C                     	;# 
  1726  000D                     	;# 
  1727  000E                     	;# 
  1728  0010                     	;# 
  1729  0011                     	;# 
  1730  0012                     	;# 
  1731  0015                     	;# 
  1732  0016                     	;# 
  1733  0016                     	;# 
  1734  0017                     	;# 
  1735  0018                     	;# 
  1736  0019                     	;# 
  1737  001A                     	;# 
  1738  001B                     	;# 
  1739  001C                     	;# 
  1740  008C                     	;# 
  1741  008D                     	;# 
  1742  008E                     	;# 
  1743  0090                     	;# 
  1744  0091                     	;# 
  1745  0092                     	;# 
  1746  0095                     	;# 
  1747  0096                     	;# 
  1748  0097                     	;# 
  1749  0099                     	;# 
  1750  009A                     	;# 
  1751  009B                     	;# 
  1752  009B                     	;# 
  1753  009C                     	;# 
  1754  009D                     	;# 
  1755  009E                     	;# 
  1756  010C                     	;# 
  1757  010D                     	;# 
  1758  010E                     	;# 
  1759  0116                     	;# 
  1760  0117                     	;# 
  1761  011D                     	;# 
  1762  018C                     	;# 
  1763  018D                     	;# 
  1764  018E                     	;# 
  1765  0191                     	;# 
  1766  0191                     	;# 
  1767  0192                     	;# 
  1768  0193                     	;# 
  1769  0193                     	;# 
  1770  0194                     	;# 
  1771  0195                     	;# 
  1772  0196                     	;# 
  1773  0197                     	;# 
  1774  0199                     	;# 
  1775  019A                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019B                     	;# 
  1780  019C                     	;# 
  1781  019C                     	;# 
  1782  019D                     	;# 
  1783  019E                     	;# 
  1784  019F                     	;# 
  1785  020D                     	;# 
  1786  0210                     	;# 
  1787  0211                     	;# 
  1788  0211                     	;# 
  1789  0212                     	;# 
  1790  0212                     	;# 
  1791  0213                     	;# 
  1792  0213                     	;# 
  1793  0214                     	;# 
  1794  0214                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0215                     	;# 
  1798  0216                     	;# 
  1799  0216                     	;# 
  1800  0217                     	;# 
  1801  0217                     	;# 
  1802  0291                     	;# 
  1803  0291                     	;# 
  1804  0292                     	;# 
  1805  0293                     	;# 
  1806  0298                     	;# 
  1807  0298                     	;# 
  1808  0299                     	;# 
  1809  029A                     	;# 
  1810  0394                     	;# 
  1811  0395                     	;# 
  1812  0396                     	;# 
  1813  0FE4                     	;# 
  1814  0FE5                     	;# 
  1815  0FE6                     	;# 
  1816  0FE7                     	;# 
  1817  0FE8                     	;# 
  1818  0FE9                     	;# 
  1819  0FEA                     	;# 
  1820  0FEB                     	;# 
  1821  0FED                     	;# 
  1822  0FEE                     	;# 
  1823  0FEF                     	;# 
  1824  0000                     	;# 
  1825  0001                     	;# 
  1826  0002                     	;# 
  1827  0003                     	;# 
  1828  0004                     	;# 
  1829  0005                     	;# 
  1830  0006                     	;# 
  1831  0007                     	;# 
  1832  0008                     	;# 
  1833  0009                     	;# 
  1834  000A                     	;# 
  1835  000B                     	;# 
  1836  000C                     	;# 
  1837  000D                     	;# 
  1838  000E                     	;# 
  1839  0010                     	;# 
  1840  0011                     	;# 
  1841  0012                     	;# 
  1842  0015                     	;# 
  1843  0016                     	;# 
  1844  0016                     	;# 
  1845  0017                     	;# 
  1846  0018                     	;# 
  1847  0019                     	;# 
  1848  001A                     	;# 
  1849  001B                     	;# 
  1850  001C                     	;# 
  1851  008C                     	;# 
  1852  008D                     	;# 
  1853  008E                     	;# 
  1854  0090                     	;# 
  1855  0091                     	;# 
  1856  0092                     	;# 
  1857  0095                     	;# 
  1858  0096                     	;# 
  1859  0097                     	;# 
  1860  0099                     	;# 
  1861  009A                     	;# 
  1862  009B                     	;# 
  1863  009B                     	;# 
  1864  009C                     	;# 
  1865  009D                     	;# 
  1866  009E                     	;# 
  1867  010C                     	;# 
  1868  010D                     	;# 
  1869  010E                     	;# 
  1870  0116                     	;# 
  1871  0117                     	;# 
  1872  011D                     	;# 
  1873  018C                     	;# 
  1874  018D                     	;# 
  1875  018E                     	;# 
  1876  0191                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0193                     	;# 
  1880  0193                     	;# 
  1881  0194                     	;# 
  1882  0195                     	;# 
  1883  0196                     	;# 
  1884  0197                     	;# 
  1885  0199                     	;# 
  1886  019A                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019B                     	;# 
  1891  019C                     	;# 
  1892  019C                     	;# 
  1893  019D                     	;# 
  1894  019E                     	;# 
  1895  019F                     	;# 
  1896  020D                     	;# 
  1897  0210                     	;# 
  1898  0211                     	;# 
  1899  0211                     	;# 
  1900  0212                     	;# 
  1901  0212                     	;# 
  1902  0213                     	;# 
  1903  0213                     	;# 
  1904  0214                     	;# 
  1905  0214                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0215                     	;# 
  1909  0216                     	;# 
  1910  0216                     	;# 
  1911  0217                     	;# 
  1912  0217                     	;# 
  1913  0291                     	;# 
  1914  0291                     	;# 
  1915  0292                     	;# 
  1916  0293                     	;# 
  1917  0298                     	;# 
  1918  0298                     	;# 
  1919  0299                     	;# 
  1920  029A                     	;# 
  1921  0394                     	;# 
  1922  0395                     	;# 
  1923  0396                     	;# 
  1924  0FE4                     	;# 
  1925  0FE5                     	;# 
  1926  0FE6                     	;# 
  1927  0FE7                     	;# 
  1928  0FE8                     	;# 
  1929  0FE9                     	;# 
  1930  0FEA                     	;# 
  1931  0FEB                     	;# 
  1932  0FED                     	;# 
  1933  0FEE                     	;# 
  1934  0FEF                     	;# 
  1935  0000                     	;# 
  1936  0001                     	;# 
  1937  0002                     	;# 
  1938  0003                     	;# 
  1939  0004                     	;# 
  1940  0005                     	;# 
  1941  0006                     	;# 
  1942  0007                     	;# 
  1943  0008                     	;# 
  1944  0009                     	;# 
  1945  000A                     	;# 
  1946  000B                     	;# 
  1947  000C                     	;# 
  1948  000D                     	;# 
  1949  000E                     	;# 
  1950  0010                     	;# 
  1951  0011                     	;# 
  1952  0012                     	;# 
  1953  0015                     	;# 
  1954  0016                     	;# 
  1955  0016                     	;# 
  1956  0017                     	;# 
  1957  0018                     	;# 
  1958  0019                     	;# 
  1959  001A                     	;# 
  1960  001B                     	;# 
  1961  001C                     	;# 
  1962  008C                     	;# 
  1963  008D                     	;# 
  1964  008E                     	;# 
  1965  0090                     	;# 
  1966  0091                     	;# 
  1967  0092                     	;# 
  1968  0095                     	;# 
  1969  0096                     	;# 
  1970  0097                     	;# 
  1971  0099                     	;# 
  1972  009A                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0116                     	;# 
  1982  0117                     	;# 
  1983  011D                     	;# 
  1984  018C                     	;# 
  1985  018D                     	;# 
  1986  018E                     	;# 
  1987  0191                     	;# 
  1988  0191                     	;# 
  1989  0192                     	;# 
  1990  0193                     	;# 
  1991  0193                     	;# 
  1992  0194                     	;# 
  1993  0195                     	;# 
  1994  0196                     	;# 
  1995  0197                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019D                     	;# 
  2005  019E                     	;# 
  2006  019F                     	;# 
  2007  020D                     	;# 
  2008  0210                     	;# 
  2009  0211                     	;# 
  2010  0211                     	;# 
  2011  0212                     	;# 
  2012  0212                     	;# 
  2013  0213                     	;# 
  2014  0213                     	;# 
  2015  0214                     	;# 
  2016  0214                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0216                     	;# 
  2021  0216                     	;# 
  2022  0217                     	;# 
  2023  0217                     	;# 
  2024  0291                     	;# 
  2025  0291                     	;# 
  2026  0292                     	;# 
  2027  0293                     	;# 
  2028  0298                     	;# 
  2029  0298                     	;# 
  2030  0299                     	;# 
  2031  029A                     	;# 
  2032  0394                     	;# 
  2033  0395                     	;# 
  2034  0396                     	;# 
  2035  0FE4                     	;# 
  2036  0FE5                     	;# 
  2037  0FE6                     	;# 
  2038  0FE7                     	;# 
  2039  0FE8                     	;# 
  2040  0FE9                     	;# 
  2041  0FEA                     	;# 
  2042  0FEB                     	;# 
  2043  0FED                     	;# 
  2044  0FEE                     	;# 
  2045  0FEF                     	;# 
  2046  0000                     	;# 
  2047  0001                     	;# 
  2048  0002                     	;# 
  2049  0003                     	;# 
  2050  0004                     	;# 
  2051  0005                     	;# 
  2052  0006                     	;# 
  2053  0007                     	;# 
  2054  0008                     	;# 
  2055  0009                     	;# 
  2056  000A                     	;# 
  2057  000B                     	;# 
  2058  000C                     	;# 
  2059  000D                     	;# 
  2060  000E                     	;# 
  2061  0010                     	;# 
  2062  0011                     	;# 
  2063  0012                     	;# 
  2064  0015                     	;# 
  2065  0016                     	;# 
  2066  0016                     	;# 
  2067  0017                     	;# 
  2068  0018                     	;# 
  2069  0019                     	;# 
  2070  001A                     	;# 
  2071  001B                     	;# 
  2072  001C                     	;# 
  2073  008C                     	;# 
  2074  008D                     	;# 
  2075  008E                     	;# 
  2076  0090                     	;# 
  2077  0091                     	;# 
  2078  0092                     	;# 
  2079  0095                     	;# 
  2080  0096                     	;# 
  2081  0097                     	;# 
  2082  0099                     	;# 
  2083  009A                     	;# 
  2084  009B                     	;# 
  2085  009B                     	;# 
  2086  009C                     	;# 
  2087  009D                     	;# 
  2088  009E                     	;# 
  2089  010C                     	;# 
  2090  010D                     	;# 
  2091  010E                     	;# 
  2092  0116                     	;# 
  2093  0117                     	;# 
  2094  011D                     	;# 
  2095  018C                     	;# 
  2096  018D                     	;# 
  2097  018E                     	;# 
  2098  0191                     	;# 
  2099  0191                     	;# 
  2100  0192                     	;# 
  2101  0193                     	;# 
  2102  0193                     	;# 
  2103  0194                     	;# 
  2104  0195                     	;# 
  2105  0196                     	;# 
  2106  0197                     	;# 
  2107  0199                     	;# 
  2108  019A                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019B                     	;# 
  2113  019C                     	;# 
  2114  019C                     	;# 
  2115  019D                     	;# 
  2116  019E                     	;# 
  2117  019F                     	;# 
  2118  020D                     	;# 
  2119  0210                     	;# 
  2120  0211                     	;# 
  2121  0211                     	;# 
  2122  0212                     	;# 
  2123  0212                     	;# 
  2124  0213                     	;# 
  2125  0213                     	;# 
  2126  0214                     	;# 
  2127  0214                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0215                     	;# 
  2131  0216                     	;# 
  2132  0216                     	;# 
  2133  0217                     	;# 
  2134  0217                     	;# 
  2135  0291                     	;# 
  2136  0291                     	;# 
  2137  0292                     	;# 
  2138  0293                     	;# 
  2139  0298                     	;# 
  2140  0298                     	;# 
  2141  0299                     	;# 
  2142  029A                     	;# 
  2143  0394                     	;# 
  2144  0395                     	;# 
  2145  0396                     	;# 
  2146  0FE4                     	;# 
  2147  0FE5                     	;# 
  2148  0FE6                     	;# 
  2149  0FE7                     	;# 
  2150  0FE8                     	;# 
  2151  0FE9                     	;# 
  2152  0FEA                     	;# 
  2153  0FEB                     	;# 
  2154  0FED                     	;# 
  2155  0FEE                     	;# 
  2156  0FEF                     	;# 
  2157                           
  2158                           	psect	idataBANK4
  2159  1E53                     __pidataBANK4:	
  2160                           
  2161                           ;initializer for __product
  2162  1E53  3463               	retlw	99
  2163  1E54  3402               	retlw	2
  2164  1E55  3400               	retlw	0
  2165  1E56  3400               	retlw	0
  2166  1E57  3400               	retlw	0
  2167  1E58  3400               	retlw	0
  2168  1E59  3400               	retlw	0
  2169  1E5A  3400               	retlw	0
  2170  1E5B  3400               	retlw	0
  2171  1E5C  3400               	retlw	0
  2172  1E5D  3400               	retlw	0
  2173  1E5E  3400               	retlw	0
  2174  1E5F  34FF               	retlw	255
  2175  1E60  34FF               	retlw	255
  2176  1E61  34FF               	retlw	255
  2177  1E62  3400               	retlw	0
  2178  1E63  3400               	retlw	0
  2179  1E64  3400               	retlw	0
  2180  1E65  3400               	retlw	0
  2181  1E66  3400               	retlw	0
  2182  1E67  3400               	retlw	0
  2183  1E68  3400               	retlw	0
  2184  1E69  3400               	retlw	0
  2185  1E6A  3400               	retlw	0
  2186  1E6B  3400               	retlw	0
  2187  1E6C  3400               	retlw	0
  2188  1E6D  3400               	retlw	0
  2189  1E6E  3400               	retlw	0
  2190  1E6F  3400               	retlw	0
  2191  1E70  3400               	retlw	0
  2192  1E71  3400               	retlw	0
  2193  1E72  3400               	retlw	0
  2194                           
  2195                           	psect	stringtext
  2196  1000                     __pstringtext:	
  2197  1000                     _CC2500_registers_address:	
  2198  1000  3403               	retlw	3
  2199  1001  3416               	retlw	22
  2200  1002  3417               	retlw	23
  2201  1003  341E               	retlw	30
  2202  1004  341F               	retlw	31
  2203  1005  3420               	retlw	32
  2204  1006  342A               	retlw	42
  2205  1007  342B               	retlw	43
  2206  1008  340B               	retlw	11
  2207  1009  340C               	retlw	12
  2208  100A  340D               	retlw	13
  2209  100B  340E               	retlw	14
  2210  100C  340F               	retlw	15
  2211  100D  3410               	retlw	16
  2212  100E  3411               	retlw	17
  2213  100F  3412               	retlw	18
  2214  1010  3413               	retlw	19
  2215  1011  3414               	retlw	20
  2216  1012  340A               	retlw	10
  2217  1013  3415               	retlw	21
  2218  1014  3421               	retlw	33
  2219  1015  3422               	retlw	34
  2220  1016  3418               	retlw	24
  2221  1017  3419               	retlw	25
  2222  1018  341A               	retlw	26
  2223  1019  341B               	retlw	27
  2224  101A  341C               	retlw	28
  2225  101B  341D               	retlw	29
  2226  101C  3423               	retlw	35
  2227  101D  3424               	retlw	36
  2228  101E  3425               	retlw	37
  2229  101F  3426               	retlw	38
  2230  1020  3429               	retlw	41
  2231  1021  342C               	retlw	44
  2232  1022  342D               	retlw	45
  2233  1023  342E               	retlw	46
  2234  1024  3400               	retlw	0
  2235  1025  3401               	retlw	1
  2236  1026  3402               	retlw	2
  2237  1027  3407               	retlw	7
  2238  1028  3408               	retlw	8
  2239  1029  3409               	retlw	9
  2240  102A  3406               	retlw	6
  2241  102B  3404               	retlw	4
  2242  102C  3405               	retlw	5
  2243  102D  3427               	retlw	39
  2244  102E  3428               	retlw	40
  2245  102F                     __end_of_CC2500_registers_address:	
  2246  102F                     _CC2500_rfSettings:	
  2247  102F  3407               	retlw	7
  2248  1030  3407               	retlw	7
  2249  1031  3430               	retlw	48
  2250  1032  3487               	retlw	135
  2251  1033  346B               	retlw	107
  2252  1034  34F8               	retlw	248
  2253  1035  347F               	retlw	127
  2254  1036  343F               	retlw	63
  2255  1037  3409               	retlw	9
  2256  1038  3400               	retlw	0
  2257  1039  345C               	retlw	92
  2258  103A  34A7               	retlw	167
  2259  103B  3462               	retlw	98
  2260  103C  3486               	retlw	134
  2261  103D  3483               	retlw	131
  2262  103E  3403               	retlw	3
  2263  103F  3422               	retlw	34
  2264  1040  34F8               	retlw	248
  2265  1041  3400               	retlw	0
  2266  1042  3444               	retlw	68
  2267  1043  34B6               	retlw	182
  2268  1044  3410               	retlw	16
  2269  1045  3418               	retlw	24
  2270  1046  341D               	retlw	29
  2271  1047  341C               	retlw	28
  2272  1048  34C7               	retlw	199
  2273  1049  3400               	retlw	0
  2274  104A  34B2               	retlw	178
  2275  104B  34EA               	retlw	234
  2276  104C  340A               	retlw	10
  2277  104D  3400               	retlw	0
  2278  104E  3411               	retlw	17
  2279  104F  3459               	retlw	89
  2280  1050  3488               	retlw	136
  2281  1051  3431               	retlw	49
  2282  1052  340B               	retlw	11
  2283  1053  342F               	retlw	47
  2284  1054  342E               	retlw	46
  2285  1055  3406               	retlw	6
  2286  1056  3404               	retlw	4
  2287  1057  3405               	retlw	5
  2288  1058  3400               	retlw	0
  2289  1059  3430               	retlw	48
  2290  105A  34D3               	retlw	211
  2291  105B  3491               	retlw	145
  2292  105C  3441               	retlw	65
  2293  105D  3400               	retlw	0
  2294  105E                     __end_of_CC2500_rfSettings:	
  2295  105E                     _CC2500_patable_vaule:	
  2296  105E  34FE               	retlw	254
  2297  105F  34FE               	retlw	254
  2298  1060  34FE               	retlw	254
  2299  1061  34FE               	retlw	254
  2300  1062  34FE               	retlw	254
  2301  1063  34FE               	retlw	254
  2302  1064  34FE               	retlw	254
  2303  1065  34FE               	retlw	254
  2304  1066                     __end_of_CC2500_patable_vaule:	
  2305                           
  2306                           	psect	nvCOMMON
  2307  0079                     __pnvCOMMON:	
  2308  0079                     _product:	
  2309  0079                     	ds	1
  2310  000C                     _PORTA	set	12
  2311  000D                     _PORTB	set	13
  2312  000E                     _PORTC	set	14
  2313  0018                     _T1CON	set	24
  2314  0017                     _TMR1H	set	23
  2315  0016                     _TMR1L	set	22
  2316  005F                     _GIE	set	95
  2317  005B                     _IOCIE	set	91
  2318  0058                     _IOCIF	set	88
  2319  005E                     _PEIE	set	94
  2320  0060                     _RA0	set	96
  2321  0063                     _RA3	set	99
  2322  0064                     _RA4	set	100
  2323  0066                     _RA6	set	102
  2324  0067                     _RA7	set	103
  2325  0068                     _RB0	set	104
  2326  0069                     _RB1	set	105
  2327  006A                     _RB2	set	106
  2328  006B                     _RB3	set	107
  2329  006C                     _RB4	set	108
  2330  006D                     _RB5	set	109
  2331  0070                     _RC0	set	112
  2332  0071                     _RC1	set	113
  2333  0072                     _RC2	set	114
  2334  0074                     _RC4	set	116
  2335  0075                     _RC5	set	117
  2336  0077                     _RC7	set	119
  2337  0088                     _TMR1IF	set	136
  2338  009D                     _ADCON0	set	157
  2339  009E                     _ADCON1	set	158
  2340  009C                     _ADRESH	set	156
  2341  009B                     _ADRESL	set	155
  2342  0099                     _OSCCON	set	153
  2343  008C                     _TRISA	set	140
  2344  008D                     _TRISB	set	141
  2345  008E                     _TRISC	set	142
  2346  0097                     _WDTCON	set	151
  2347  04E9                     _GO_nDONE	set	1257
  2348  0488                     _TMR1IE	set	1160
  2349  0117                     _FVRCON	set	279
  2350  010C                     _LATA	set	268
  2351  010D                     _LATB	set	269
  2352  010E                     _LATC	set	270
  2353  018C                     _ANSELA	set	396
  2354  018D                     _ANSELB	set	397
  2355  018E                     _ANSELC	set	398
  2356  0192                     _PMADRH	set	402
  2357  0191                     _PMADRL	set	401
  2358  0196                     _PMCON2	set	406
  2359  0194                     _PMDATH	set	404
  2360  0193                     _PMDATL	set	403
  2361  0CAE                     _CFGS	set	3246
  2362  0CAC                     _FREE	set	3244
  2363  0CAD                     _LWLO	set	3245
  2364  0CA8                     _RD	set	3240
  2365  0CA9                     _WR	set	3241
  2366  0CAA                     _WREN	set	3242
  2367  1069                     _WPUB1	set	4201
  2368  106A                     _WPUB2	set	4202
  2369  0396                     _IOCBF	set	918
  2370  0395                     _IOCBN	set	917
  2371  0394                     _IOCBP	set	916
  2372  1CB2                     _IOCBF2	set	7346
  2373                           
  2374                           ; #config settings
  2375  0000                     
  2376                           	psect	cinit
  2377  0015                     start_initialization:	
  2378  0015                     __initialization:	
  2379                           
  2380                           ; Clear objects allocated to BITCOMMON
  2381  0015  01F8               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2382                           
  2383                           ; Clear objects allocated to COMMON
  2384  0016  01F5               	clrf	__pbssCOMMON& (0+127)
  2385  0017  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
  2386  0018  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
  2387                           
  2388                           ; Clear objects allocated to BANK0
  2389  0019  01EF               	clrf	__pbssBANK0& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  001A  30A0               	movlw	low __pbssBANK1
  2393  001B  0084               	movwf	4
  2394  001C  3000               	movlw	high __pbssBANK1
  2395  001D  0085               	movwf	5
  2396  001E  3048               	movlw	72
  2397  001F  319A  2242  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  0022  3020               	movlw	low __pbssBANK2
  2401  0023  0084               	movwf	4
  2402  0024  3001               	movlw	high __pbssBANK2
  2403  0025  0085               	movwf	5
  2404  0026  304E               	movlw	78
  2405  0027  319A  2242  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  002A  30A0               	movlw	low __pbssBANK3
  2409  002B  0084               	movwf	4
  2410  002C  3001               	movlw	high __pbssBANK3
  2411  002D  0085               	movwf	5
  2412  002E  304F               	movlw	79
  2413  002F  319A  2242  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  0032  3020               	movlw	low __pbssBANK4
  2417  0033  0084               	movwf	4
  2418  0034  3002               	movlw	high __pbssBANK4
  2419  0035  0085               	movwf	5
  2420  0036  3025               	movlw	37
  2421  0037  319A  2242  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  003A  3053               	movlw	low __pidataBANK4
  2425  003B  0084               	movwf	4
  2426  003C  309E               	movlw	(high __pidataBANK4)| (0+128)
  2427  003D  0085               	movwf	5
  2428  003E  3045               	movlw	low __pdataBANK4
  2429  003F  0086               	movwf	6
  2430  0040  3002               	movlw	high __pdataBANK4
  2431  0041  0087               	movwf	7
  2432  0042  3020               	movlw	32
  2433  0043  319A  223C         	fcall	init_ram
  2434  0045                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  0045                     __end_of__initialization:	
  2438  0045  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  0046  0020               	movlb	0
  2440  0047  3197  2F48         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssCOMMON
  2443  03C0                     __pbitbssCOMMON:	
  2444  03C0                     _Receive_OK:	
  2445  03C0                     	ds	1
  2446  03C1                     _Transceive_OK:	
  2447  03C1                     	ds	1
  2448                           
  2449                           	psect	bssCOMMON
  2450  0075                     __pbssCOMMON:	
  2451  0075                     _DelayOff:	
  2452  0075                     	ds	1
  2453  0076                     _DimmerLightsIntr:	
  2454  0076                     	ds	1
  2455  0077                     _Sw:	
  2456  0077                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006F                     __pbssBANK0:	
  2460  006F                     _DimmerLights:	
  2461  006F                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _myMain:	
  2466  00A0                     	ds	14
  2467  00AE                     _Buz1:	
  2468  00AE                     	ds	12
  2469  00BA                     _RF1:	
  2470  00BA                     	ds	12
  2471  00C6                     _Dimmer:	
  2472  00C6                     	ds	3
  2473  00C9                     _CRC:	
  2474  00C9                     	ds	1
  2475  00CA                     _DimmerLights11:	
  2476  00CA                     	ds	1
  2477  00CB                     _DimmerLights22:	
  2478  00CB                     	ds	1
  2479  00CC                     _DimmerLightsIntrIOC:	
  2480  00CC                     	ds	1
  2481  00CD                     _LED:	
  2482  00CD                     	ds	1
  2483  00CE                     _RSSI:	
  2484  00CE                     	ds	1
  2485  00CF                     _Rx_Length:	
  2486  00CF                     	ds	1
  2487  00D0                     _SPI0Buffer:	
  2488  00D0                     	ds	1
  2489  00D1                     _SwDetect:	
  2490  00D1                     	ds	1
  2491  00D2                     _Tx_Length:	
  2492  00D2                     	ds	1
  2493  00D3                     _r_address:	
  2494  00D3                     	ds	1
  2495  00D4                     _r_data:	
  2496  00D4                     	ds	1
  2497  00D5                     _s_data:	
  2498  00D5                     	ds	1
  2499  00D6                     _Temp:	
  2500  00D6                     	ds	18
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _Timer1:	
  2505  0120                     	ds	3
  2506  0123                     _RF_Count:	
  2507  0123                     	ds	2
  2508  0125                     _WDT:	
  2509  0125                     	ds	2
  2510  0127                     _Load:	
  2511  0127                     	ds	46
  2512  0155                     _DimmerLights1:	
  2513  0155                     	ds	17
  2514  0166                     _VarErrLED:	
  2515  0166                     	ds	4
  2516  016A                     _VarLED1:	
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	bssBANK3
  2520  01A0                     __pbssBANK3:	
  2521  01A0                     _RF_Data:	
  2522  01A0                     	ds	30
  2523  01BE                     _DimmerLights2:	
  2524  01BE                     	ds	17
  2525  01CF                     _Sw1:	
  2526  01CF                     	ds	9
  2527  01D8                     _Sw2:	
  2528  01D8                     	ds	9
  2529  01E1                     _DlySw1:	
  2530  01E1                     	ds	5
  2531  01E6                     _DlySw2:	
  2532  01E6                     	ds	5
  2533  01EB                     _VarLED2:	
  2534  01EB                     	ds	4
  2535                           
  2536                           	psect	bssBANK4
  2537  0220                     __pbssBANK4:	
  2538  0220                     _Memory:	
  2539  0220                     	ds	37
  2540                           
  2541                           	psect	dataBANK4
  2542  0245                     __pdataBANK4:	
  2543  0245                     __product:	
  2544  0245                     	ds	32
  2545                           
  2546                           	psect	clrtext
  2547  1A42                     clear_ram0:	
  2548                           ;	Called with FSR0 containing the base address, and
  2549                           ;	WREG with the size to clear
  2550                           
  2551  1A42  0064               	clrwdt	;clear the watchdog before getting into this loop
  2552  1A43                     clrloop0:	
  2553  1A43  0180               	clrf	0	;clear RAM location pointed to by FSR
  2554  1A44  3101               	addfsr 0,1
  2555  1A45  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2556  1A46  2A43               	goto	clrloop0	;have we reached the end yet?
  2557  1A47  3400               	retlw	0	;all done for this memory range, return
  2558                           
  2559                           	psect	inittext
  2560  1A3C                     init_ram:	
  2561  1A3C  00FE               	movwf	126
  2562  1A3D                     initloop:	
  2563  1A3D  0012               	moviw fsr0++
  2564  1A3E  001E               	movwi fsr1++
  2565  1A3F  0BFE               	decfsz	126,f
  2566  1A40  2A3D               	goto	initloop
  2567  1A41  3400               	retlw	0
  2568                           
  2569                           	psect	cstackBANK4
  2570  0265                     __pcstackBANK4:	
  2571  0265                     setRF_Main@loop_f:	
  2572                           
  2573                           ; 1 bytes @ 0x0
  2574  0265                     	ds	1
  2575  0266                     setRF_Main@Receive_OK:	
  2576                           
  2577                           ; 1 bytes @ 0x1
  2578  0266                     	ds	1
  2579  0267                     setRF_Main@error:	
  2580                           
  2581                           ; 1 bytes @ 0x2
  2582  0267                     	ds	1
  2583  0268                     ?_main:	
  2584  0268                     main@argc:	
  2585                           ; 2 bytes @ 0x3
  2586                           
  2587                           
  2588                           ; 2 bytes @ 0x3
  2589  0268                     	ds	2
  2590  026A                     main@argv:	
  2591                           
  2592                           ; 2 bytes @ 0x5
  2593  026A                     	ds	2
  2594                           
  2595                           	psect	cstackBANK1
  2596  00E8                     __pcstackBANK1:	
  2597  00E8                     setDimmerLights_ErrorClose@count:	
  2598  00E8                     Exception_Main@count:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601                           
  2602                           ; 1 bytes @ 0x0
  2603  00E8                     	ds	1
  2604  00E9                     setDimmerLights_ErrorClose@lights:	
  2605  00E9                     Exception_Main@error:	
  2606                           ; 1 bytes @ 0x1
  2607                           
  2608                           
  2609                           ; 1 bytes @ 0x1
  2610  00E9                     	ds	1
  2611  00EA                     setDimmerLights_ErrorClose@i:	
  2612  00EA                     Exception_Main@i:	
  2613                           ; 2 bytes @ 0x2
  2614                           
  2615                           
  2616                           ; 2 bytes @ 0x2
  2617  00EA                     	ds	2
  2618  00EC                     getRxData@error:	
  2619  00EC                     Exception_Main@i_3619:	
  2620                           ; 1 bytes @ 0x4
  2621                           
  2622                           
  2623                           ; 2 bytes @ 0x4
  2624  00EC                     	ds	1
  2625  00ED                     ??_setRF_Main:	
  2626                           
  2627                           ; 0 bytes @ 0x5
  2628  00ED                     	ds	1
  2629  00EE                     Exception_Main@lights:	
  2630                           
  2631                           ; 1 bytes @ 0x6
  2632  00EE                     	ds	1
  2633                           
  2634                           	psect	cstackCOMMON
  2635  0070                     __pcstackCOMMON:	
  2636  0070                     ?_Timeout_Counter:	
  2637  0070                     ?_set_TimeoutCleared:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_WriteByte:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_WriteCommand:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ReadStatus:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ReadByte:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_PowerRST:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_InitSetREG:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_CC2500_InitPATable:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_CC2500_ClearTXFIFO:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_CC2500_ClearRXFIFO:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_CC2500_FrequencyCabr:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_CC2500_SIDLEMode:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_DlyOff_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_DlyOff_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_setDimmerLights_ErrorClose:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Initialization:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_Main:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setDimmerLights_Line:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setTxData:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_IOC_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_TMR1_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Flash_Memory_Write:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_Flash_Memory_Modify:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_WDT_Clearing:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_myMain_Initialization:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_Temp_Initialization:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_Load_Initialization:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_Switch_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_RF_Initialization:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_getLoad_AD:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_getTemp_AD:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_my_MainTimer:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_Temp_Main:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Load_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Switch_Main:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_RF_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_Exception_Main:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setLoad_AH_AL_Restore:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setTemp_Initialization:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setTemp_Main:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setRF_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_setRF_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_RF_RxDisable:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_getRxData:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_setLog_Code:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setControl_Lights_Table:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_setRFSW_Control:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_setRFSW_AdjControl:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_setRF_DimmerValue:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_setSw_Initialization:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_setSw_Main:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_Buzzer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_Buzzer_Main:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_CC2500_TxData:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_CC2500_RxData:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_CC2500_PowerOnInitial:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DelayOffPointSelect:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DelayOff_Initialization:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_DelayOff_Main:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerIntrIOCPointSelect:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ??_DimmerIntrIOCPointSelect:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerIntrPointSelect:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ??_DimmerIntrPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_setDimmerLights_IntrControl:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_DimmerLightsPointSelect:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_DimmerLights_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_setDimmerLights_SwOn:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_setDimmerLights_SwOff:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_setDimmerLights_AdjOn:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_DimmerLights_Main:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_setDimmerLights_AdjRF:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_LedPointSelect:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_LED_Initialization:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_LED_Main:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Mcu_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_ISR:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_setDimmerReClock:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_Flash_Memory_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Flash_Memory_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_Flash_Memory_Unlock:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_Flash_Memory_Erasing:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setMemory_Modify:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_setMemory_LoopSave:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_WDT_Main:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_setRF_Learn:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_TouchPower:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_SwPointSelect:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_DelayTimejudge:	
  2926                           ; 0 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_Allow_Condition:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_setPercentValue:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getPercentValue:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getRF_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getSw_KeyStatus:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getDelayOff_GO:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getDimmer_LoadGO:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDimmerLights_Line:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerLights_Status:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getAll_DimmerLights_AdjSw:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getDimmer_Load_Status:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getMain_Lights_Count:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976                           
  2977                           ; 1 bytes @ 0x0
  2978  0070                     	ds	1
  2979  0071                     DimmerIntrIOCPointSelect@lights:	
  2980  0071                     DimmerIntrPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983                           
  2984                           ; 1 bytes @ 0x1
  2985  0071                     	ds	1
  2986  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2987  0072                     ??_setDimmerLights_IntrControl:	
  2988                           ; 0 bytes @ 0x2
  2989                           
  2990  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2991                           ; 0 bytes @ 0x2
  2992                           
  2993                           
  2994                           ; 1 bytes @ 0x2
  2995  0072                     	ds	1
  2996  0073                     ??_IOC_ISR:	
  2997  0073                     ??_setDimmerReClock:	
  2998                           ; 0 bytes @ 0x3
  2999                           
  3000  0073                     setDimmerLights_IntrControl@lights:	
  3001                           ; 0 bytes @ 0x3
  3002                           
  3003                           
  3004                           ; 1 bytes @ 0x3
  3005  0073                     	ds	1
  3006  0074                     ??_TMR1_ISR:	
  3007  0074                     ??_ISR:	
  3008                           ; 0 bytes @ 0x4
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0x4
  3012  0074                     	ds	1
  3013                           
  3014                           	psect	cstackBANK0
  3015  0020                     __pcstackBANK0:	
  3016  0020                     ??_Timeout_Counter:	
  3017  0020                     ??_set_TimeoutCleared:	
  3018                           ; 0 bytes @ 0x0
  3019                           
  3020  0020                     ??_CC2500_WriteByte:	
  3021                           ; 0 bytes @ 0x0
  3022                           
  3023  0020                     ??_CC2500_ReadByte:	
  3024                           ; 0 bytes @ 0x0
  3025                           
  3026  0020                     ?_DelayTime_1us:	
  3027                           ; 0 bytes @ 0x0
  3028                           
  3029  0020                     ??_getLoad_OK:	
  3030                           ; 0 bytes @ 0x0
  3031                           
  3032  0020                     ??_getMain_All_Error_Status:	
  3033                           ; 0 bytes @ 0x0
  3034                           
  3035  0020                     ??_getMain_LightsStatus:	
  3036                           ; 0 bytes @ 0x0
  3037                           
  3038  0020                     ??_setDimmerLights_Line:	
  3039                           ; 0 bytes @ 0x0
  3040                           
  3041  0020                     ??_setTxData:	
  3042                           ; 0 bytes @ 0x0
  3043                           
  3044  0020                     ??_Fosc_Set:	
  3045                           ; 0 bytes @ 0x0
  3046                           
  3047  0020                     ??_IO_Set:	
  3048                           ; 0 bytes @ 0x0
  3049                           
  3050  0020                     ??_TMR1_Set:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_ADC_Set:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_IOC_Set:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ??_WDT_Set:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_Flash_Memory_Read:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ?_setMemory_Data:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_Flash_Memory_Write:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_WDT_Clearing:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_myMain_Initialization:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_Temp_Initialization:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setLoad_AH_AL_Restore:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_setTemp_Initialization:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ??_setRF_Initialization:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_getRF_KeyStatus:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_getSw_KeyStatus:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Buzzer_Initialization:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_Buzzer_Main:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_DelayOffPointSelect:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_DimmerLightsPointSelect:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_getDimmer_LoadGO:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_getDimmerLights_Line:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_getDimmer_Load_Status:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_LedPointSelect:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Unlock:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ??_Flash_Memory_Erasing:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_setMemory_Modify:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_setMemory_LoopSave:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Main:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_getMain_Lights_Count:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_setRF_Learn:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_TouchPower:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_SwPointSelect:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ?___bmul:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ?_getBuz_GO:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0020                     ?_getAD:	
  3153                           ; 2 bytes @ 0x0
  3154                           
  3155  0020                     ?___wmul:	
  3156                           ; 2 bytes @ 0x0
  3157                           
  3158  0020                     ?___awdiv:	
  3159                           ; 2 bytes @ 0x0
  3160                           
  3161  0020                     ?___lwdiv:	
  3162                           ; 2 bytes @ 0x0
  3163                           
  3164  0020                     ?___ftpack:	
  3165                           ; 2 bytes @ 0x0
  3166                           
  3167  0020                     getDimmer_LoadGO@loadgo:	
  3168                           ; 3 bytes @ 0x0
  3169                           
  3170  0020                     setDimmerLights_Line@lights:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0020                     getDimmer_Load_Status@status:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0020                     getAD@adcon1:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0020                     setMemory_Data@data:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0020                     getMain_LightsStatus@status:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0020                     getMain_Lights_Count@count:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0020                     getLoad_OK@ok:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0020                     ___bmul@multiplicand:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0020                     DelayTime_1us@count:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0020                     ___wmul@multiplier:	
  3198                           ; 2 bytes @ 0x0
  3199                           
  3200  0020                     ___awdiv@divisor:	
  3201                           ; 2 bytes @ 0x0
  3202                           
  3203  0020                     ___lwdiv@divisor:	
  3204                           ; 2 bytes @ 0x0
  3205                           
  3206  0020                     ___ftpack@arg:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209                           
  3210                           ; 3 bytes @ 0x0
  3211  0020                     	ds	1
  3212  0021                     ??_setMemory_Data:	
  3213  0021                     ??_RF_Initialization:	
  3214                           ; 0 bytes @ 0x1
  3215                           
  3216  0021                     ??_Mcu_Initialization:	
  3217                           ; 0 bytes @ 0x1
  3218                           
  3219  0021                     ??___bmul:	
  3220                           ; 0 bytes @ 0x1
  3221                           
  3222  0021                     CC2500_WriteByte@loop_a:	
  3223                           ; 0 bytes @ 0x1
  3224                           
  3225  0021                     CC2500_ReadByte@loop_b:	
  3226                           ; 1 bytes @ 0x1
  3227                           
  3228  0021                     DelayOffPointSelect@sw:	
  3229                           ; 1 bytes @ 0x1
  3230                           
  3231  0021                     DimmerLightsPointSelect@lights:	
  3232                           ; 1 bytes @ 0x1
  3233                           
  3234  0021                     getDimmerLights_Line@line:	
  3235                           ; 1 bytes @ 0x1
  3236                           
  3237  0021                     LedPointSelect@led:	
  3238                           ; 1 bytes @ 0x1
  3239                           
  3240  0021                     Flash_Memory_Read@i:	
  3241                           ; 1 bytes @ 0x1
  3242                           
  3243  0021                     Flash_Memory_Write@i:	
  3244                           ; 1 bytes @ 0x1
  3245                           
  3246  0021                     setMemory_Modify@command:	
  3247                           ; 1 bytes @ 0x1
  3248                           
  3249  0021                     setMemory_LoopSave@command:	
  3250                           ; 1 bytes @ 0x1
  3251                           
  3252  0021                     getMain_Lights_Count@status3:	
  3253                           ; 1 bytes @ 0x1
  3254                           
  3255  0021                     setLoad_AH_AL_Restore@i:	
  3256                           ; 1 bytes @ 0x1
  3257                           
  3258  0021                     setRF_Learn@command:	
  3259                           ; 1 bytes @ 0x1
  3260                           
  3261  0021                     getRF_KeyStatus@key:	
  3262                           ; 1 bytes @ 0x1
  3263                           
  3264  0021                     SwPointSelect@sw:	
  3265                           ; 1 bytes @ 0x1
  3266                           
  3267  0021                     _getSw_KeyStatus$6247:	
  3268                           ; 1 bytes @ 0x1
  3269                           
  3270  0021                     _getMain_All_Error_Status$3603:	
  3271                           ; 1 bytes @ 0x1
  3272                           
  3273                           
  3274                           ; 2 bytes @ 0x1
  3275  0021                     	ds	1
  3276  0022                     ??_CC2500_WriteCommand:	
  3277  0022                     ??_CC2500_ReadStatus:	
  3278                           ; 0 bytes @ 0x2
  3279                           
  3280  0022                     ??_DelayTime_1us:	
  3281                           ; 0 bytes @ 0x2
  3282                           
  3283  0022                     ?_CC2500_WriteREG:	
  3284                           ; 0 bytes @ 0x2
  3285                           
  3286  0022                     ??_DlyOff_Initialization:	
  3287                           ; 0 bytes @ 0x2
  3288                           
  3289  0022                     ??_setDimmerLights_Initialization:	
  3290                           ; 0 bytes @ 0x2
  3291                           
  3292  0022                     ?_setLED:	
  3293                           ; 0 bytes @ 0x2
  3294                           
  3295  0022                     ??_setLED_Main:	
  3296                           ; 0 bytes @ 0x2
  3297                           
  3298  0022                     ??_Load_Initialization:	
  3299                           ; 0 bytes @ 0x2
  3300                           
  3301  0022                     ??_getBuz_GO:	
  3302                           ; 0 bytes @ 0x2
  3303                           
  3304  0022                     ??_getDelayOff_GO:	
  3305                           ; 0 bytes @ 0x2
  3306                           
  3307  0022                     ??_getDimmerLights_Status:	
  3308                           ; 0 bytes @ 0x2
  3309                           
  3310  0022                     ??_getAll_DimmerLights_AdjSw:	
  3311                           ; 0 bytes @ 0x2
  3312                           
  3313  0022                     CC2500_WriteREG@value:	
  3314                           ; 0 bytes @ 0x2
  3315                           
  3316  0022                     DlyOff_Initialization@sw:	
  3317                           ; 1 bytes @ 0x2
  3318                           
  3319  0022                     getDelayOff_GO@sw:	
  3320                           ; 1 bytes @ 0x2
  3321                           
  3322  0022                     getDimmerLights_Status@lights:	
  3323                           ; 1 bytes @ 0x2
  3324                           
  3325  0022                     setLED@command:	
  3326                           ; 1 bytes @ 0x2
  3327                           
  3328  0022                     Flash_Memory_Read@address:	
  3329                           ; 1 bytes @ 0x2
  3330                           
  3331  0022                     setMemory_Data@address:	
  3332                           ; 1 bytes @ 0x2
  3333                           
  3334  0022                     getMain_Lights_Count@status1:	
  3335                           ; 1 bytes @ 0x2
  3336                           
  3337  0022                     _getRF_KeyStatus$5261:	
  3338                           ; 1 bytes @ 0x2
  3339                           
  3340  0022                     _getSw_KeyStatus$6248:	
  3341                           ; 1 bytes @ 0x2
  3342                           
  3343  0022                     ___bmul@product:	
  3344                           ; 1 bytes @ 0x2
  3345                           
  3346  0022                     DelayTime_1us@i:	
  3347                           ; 1 bytes @ 0x2
  3348                           
  3349  0022                     ___wmul@multiplicand:	
  3350                           ; 2 bytes @ 0x2
  3351                           
  3352  0022                     ___awdiv@dividend:	
  3353                           ; 2 bytes @ 0x2
  3354                           
  3355  0022                     ___lwdiv@dividend:	
  3356                           ; 2 bytes @ 0x2
  3357                           
  3358                           
  3359                           ; 2 bytes @ 0x2
  3360  0022                     	ds	1
  3361  0023                     ??_CC2500_WriteREG:	
  3362  0023                     ??_setLED:	
  3363                           ; 0 bytes @ 0x3
  3364                           
  3365  0023                     ??_DelayOff_Initialization:	
  3366                           ; 0 bytes @ 0x3
  3367                           
  3368  0023                     ??_getAD:	
  3369                           ; 0 bytes @ 0x3
  3370                           
  3371  0023                     CC2500_WriteCommand@command:	
  3372                           ; 0 bytes @ 0x3
  3373                           
  3374  0023                     CC2500_ReadStatus@status_addr:	
  3375                           ; 1 bytes @ 0x3
  3376                           
  3377  0023                     getDelayOff_GO@go:	
  3378                           ; 1 bytes @ 0x3
  3379                           
  3380  0023                     setDimmerLights_Initialization@lights:	
  3381                           ; 1 bytes @ 0x3
  3382                           
  3383  0023                     getDimmerLights_Status@status:	
  3384                           ; 1 bytes @ 0x3
  3385                           
  3386  0023                     getAll_DimmerLights_AdjSw@count:	
  3387                           ; 1 bytes @ 0x3
  3388                           
  3389  0023                     setLED@led:	
  3390                           ; 1 bytes @ 0x3
  3391                           
  3392  0023                     getAD@adcon0:	
  3393                           ; 1 bytes @ 0x3
  3394                           
  3395  0023                     Flash_Memory_Read@ret:	
  3396                           ; 1 bytes @ 0x3
  3397                           
  3398  0023                     getMain_Lights_Count@status2:	
  3399                           ; 1 bytes @ 0x3
  3400                           
  3401  0023                     getSw_KeyStatus@status:	
  3402                           ; 1 bytes @ 0x3
  3403                           
  3404  0023                     ___bmul@multiplier:	
  3405                           ; 1 bytes @ 0x3
  3406                           
  3407  0023                     ___ftpack@exp:	
  3408                           ; 1 bytes @ 0x3
  3409                           
  3410  0023                     _getMain_All_Error_Status$3604:	
  3411                           ; 1 bytes @ 0x3
  3412                           
  3413                           
  3414                           ; 2 bytes @ 0x3
  3415  0023                     	ds	1
  3416  0024                     ??_CC2500_ClearTXFIFO:	
  3417  0024                     ??_CC2500_ClearRXFIFO:	
  3418                           ; 0 bytes @ 0x4
  3419                           
  3420  0024                     ??_CC2500_SIDLEMode:	
  3421                           ; 0 bytes @ 0x4
  3422                           
  3423  0024                     ??_DelayTimejudge:	
  3424                           ; 0 bytes @ 0x4
  3425                           
  3426  0024                     ??_setLED_Initialization:	
  3427                           ; 0 bytes @ 0x4
  3428                           
  3429  0024                     ??_Flash_Memory_Modify:	
  3430                           ; 0 bytes @ 0x4
  3431                           
  3432  0024                     ??_getLoad_AD:	
  3433                           ; 0 bytes @ 0x4
  3434                           
  3435  0024                     ??_getTemp_AD:	
  3436                           ; 0 bytes @ 0x4
  3437                           
  3438  0024                     ??_RF_RxDisable:	
  3439                           ; 0 bytes @ 0x4
  3440                           
  3441  0024                     ??_setSw_Initialization:	
  3442                           ; 0 bytes @ 0x4
  3443                           
  3444  0024                     ??_CC2500_TxData:	
  3445                           ; 0 bytes @ 0x4
  3446                           
  3447  0024                     ??_CC2500_RxData:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450  0024                     ??_DimmerLights_Initialization:	
  3451                           ; 0 bytes @ 0x4
  3452                           
  3453  0024                     ??___wmul:	
  3454                           ; 0 bytes @ 0x4
  3455                           
  3456  0024                     ??___awdiv:	
  3457                           ; 0 bytes @ 0x4
  3458                           
  3459  0024                     ??___lwdiv:	
  3460                           ; 0 bytes @ 0x4
  3461                           
  3462  0024                     CC2500_WriteREG@w_addr:	
  3463                           ; 0 bytes @ 0x4
  3464                           
  3465  0024                     setLED_Initialization@led:	
  3466                           ; 1 bytes @ 0x4
  3467                           
  3468  0024                     setLED_Main@led:	
  3469                           ; 1 bytes @ 0x4
  3470                           
  3471  0024                     setSw_Initialization@sw:	
  3472                           ; 1 bytes @ 0x4
  3473                           
  3474  0024                     getSw_KeyStatus@sw:	
  3475                           ; 1 bytes @ 0x4
  3476                           
  3477  0024                     ___ftpack@sign:	
  3478                           ; 1 bytes @ 0x4
  3479                           
  3480  0024                     getBuz_GO@i:	
  3481                           ; 1 bytes @ 0x4
  3482                           
  3483  0024                     DelayTime_1us@j:	
  3484                           ; 2 bytes @ 0x4
  3485                           
  3486  0024                     getAll_DimmerLights_AdjSw@i:	
  3487                           ; 2 bytes @ 0x4
  3488                           
  3489  0024                     ___wmul@product:	
  3490                           ; 2 bytes @ 0x4
  3491                           
  3492                           
  3493                           ; 2 bytes @ 0x4
  3494  0024                     	ds	1
  3495  0025                     ??_CC2500_InitSetREG:	
  3496  0025                     ??_CC2500_InitPATable:	
  3497                           ; 0 bytes @ 0x5
  3498                           
  3499  0025                     ??_Switch_Initialization:	
  3500                           ; 0 bytes @ 0x5
  3501                           
  3502  0025                     ??___ftpack:	
  3503                           ; 0 bytes @ 0x5
  3504                           
  3505  0025                     ??_LED_Initialization:	
  3506                           ; 0 bytes @ 0x5
  3507                           
  3508  0025                     ??_LED_Main:	
  3509                           ; 0 bytes @ 0x5
  3510                           
  3511  0025                     CC2500_TxData@loop_e:	
  3512                           ; 0 bytes @ 0x5
  3513                           
  3514  0025                     CC2500_RxData@loop_f:	
  3515                           ; 1 bytes @ 0x5
  3516                           
  3517  0025                     Flash_Memory_Modify@i:	
  3518                           ; 1 bytes @ 0x5
  3519                           
  3520  0025                     getMain_All_Error_Status@command:	
  3521                           ; 1 bytes @ 0x5
  3522                           
  3523  0025                     getTemp_AD@channel:	
  3524                           ; 1 bytes @ 0x5
  3525                           
  3526  0025                     ___awdiv@counter:	
  3527                           ; 1 bytes @ 0x5
  3528                           
  3529  0025                     ___lwdiv@counter:	
  3530                           ; 1 bytes @ 0x5
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0x5
  3534  0025                     	ds	1
  3535  0026                     ??_CC2500_PowerRST:	
  3536  0026                     ??_CC2500_FrequencyCabr:	
  3537                           ; 0 bytes @ 0x6
  3538                           
  3539  0026                     ??_Flash_Memory_Main:	
  3540                           ; 0 bytes @ 0x6
  3541                           
  3542  0026                     CC2500_InitSetREG@temp1:	
  3543                           ; 0 bytes @ 0x6
  3544                           
  3545  0026                     CC2500_InitPATable@temp:	
  3546                           ; 1 bytes @ 0x6
  3547                           
  3548  0026                     DelayTimejudge@i:	
  3549                           ; 1 bytes @ 0x6
  3550                           
  3551  0026                     getAll_DimmerLights_AdjSw@adjsw:	
  3552                           ; 1 bytes @ 0x6
  3553                           
  3554  0026                     getMain_All_Error_Status@status:	
  3555                           ; 1 bytes @ 0x6
  3556                           
  3557  0026                     getLoad_AD@channel:	
  3558                           ; 1 bytes @ 0x6
  3559                           
  3560  0026                     ___awdiv@sign:	
  3561                           ; 1 bytes @ 0x6
  3562                           
  3563  0026                     ___lwdiv@quotient:	
  3564                           ; 1 bytes @ 0x6
  3565                           
  3566                           
  3567                           ; 2 bytes @ 0x6
  3568  0026                     	ds	1
  3569  0027                     ??_getDimmerLights_Allow_Condition:	
  3570  0027                     CC2500_InitSetREG@temp2:	
  3571                           ; 0 bytes @ 0x7
  3572                           
  3573  0027                     CC2500_InitPATable@loop_d:	
  3574                           ; 1 bytes @ 0x7
  3575                           
  3576  0027                     DelayTimejudge@j:	
  3577                           ; 1 bytes @ 0x7
  3578                           
  3579  0027                     getLoad_AD@k:	
  3580                           ; 1 bytes @ 0x7
  3581                           
  3582  0027                     ___awdiv@quotient:	
  3583                           ; 1 bytes @ 0x7
  3584                           
  3585                           
  3586                           ; 2 bytes @ 0x7
  3587  0027                     	ds	1
  3588  0028                     ?___awtoft:	
  3589  0028                     CC2500_InitSetREG@loop_c:	
  3590                           ; 3 bytes @ 0x8
  3591                           
  3592  0028                     DelayTimejudge@k:	
  3593                           ; 1 bytes @ 0x8
  3594                           
  3595  0028                     _getDimmerLights_Allow_Condition$2327:	
  3596                           ; 1 bytes @ 0x8
  3597                           
  3598  0028                     getLoad_AD@j:	
  3599                           ; 1 bytes @ 0x8
  3600                           
  3601  0028                     ___awtoft@c:	
  3602                           ; 1 bytes @ 0x8
  3603                           
  3604                           
  3605                           ; 2 bytes @ 0x8
  3606  0028                     	ds	1
  3607  0029                     ?_setBuz:	
  3608  0029                     ??_CC2500_PowerOnInitial:	
  3609                           ; 0 bytes @ 0x9
  3610                           
  3611  0029                     DelayTimejudge@value:	
  3612                           ; 0 bytes @ 0x9
  3613                           
  3614  0029                     _getDimmerLights_Allow_Condition$2328:	
  3615                           ; 1 bytes @ 0x9
  3616                           
  3617  0029                     getLoad_AD@i:	
  3618                           ; 1 bytes @ 0x9
  3619                           
  3620  0029                     setBuz@time:	
  3621                           ; 1 bytes @ 0x9
  3622                           
  3623                           
  3624                           ; 2 bytes @ 0x9
  3625  0029                     	ds	1
  3626  002A                     getDimmerLights_Allow_Condition@lights:	
  3627                           
  3628                           ; 1 bytes @ 0xA
  3629  002A                     	ds	1
  3630  002B                     ??_setBuz:	
  3631  002B                     ??___awtoft:	
  3632                           ; 0 bytes @ 0xB
  3633                           
  3634  002B                     getDimmerLights_Allow_Condition@allow:	
  3635                           ; 0 bytes @ 0xB
  3636                           
  3637                           
  3638                           ; 1 bytes @ 0xB
  3639  002B                     	ds	1
  3640  002C                     ??_setDimmerLights_AdjOn:	
  3641  002C                     setBuz@count:	
  3642                           ; 0 bytes @ 0xC
  3643                           
  3644  002C                     setDimmerLights_AdjOn@sw:	
  3645                           ; 1 bytes @ 0xC
  3646                           
  3647                           
  3648                           ; 1 bytes @ 0xC
  3649  002C                     	ds	1
  3650  002D                     ??_my_MainTimer:	
  3651  002D                     ??_setDimmerLights_SwOn:	
  3652                           ; 0 bytes @ 0xD
  3653                           
  3654  002D                     ___awtoft@sign:	
  3655                           ; 0 bytes @ 0xD
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0xD
  3659  002D                     	ds	1
  3660  002E                     ?___ftdiv:	
  3661  002E                     ?___ftmul:	
  3662                           ; 3 bytes @ 0xE
  3663                           
  3664  002E                     setDimmerLights_SwOn@idle:	
  3665                           ; 3 bytes @ 0xE
  3666                           
  3667  002E                     ___ftdiv@f2:	
  3668                           ; 1 bytes @ 0xE
  3669                           
  3670  002E                     ___ftmul@f1:	
  3671                           ; 3 bytes @ 0xE
  3672                           
  3673                           
  3674                           ; 3 bytes @ 0xE
  3675  002E                     	ds	1
  3676  002F                     setDimmerLights_SwOn@sw:	
  3677                           
  3678                           ; 1 bytes @ 0xF
  3679  002F                     	ds	2
  3680  0031                     ___ftdiv@f1:	
  3681  0031                     ___ftmul@f2:	
  3682                           ; 3 bytes @ 0x11
  3683                           
  3684                           
  3685                           ; 3 bytes @ 0x11
  3686  0031                     	ds	3
  3687  0034                     ??___ftdiv:	
  3688  0034                     ??___ftmul:	
  3689                           ; 0 bytes @ 0x14
  3690                           
  3691                           
  3692                           ; 0 bytes @ 0x14
  3693  0034                     	ds	4
  3694  0038                     ___ftdiv@cntr:	
  3695  0038                     ___ftmul@exp:	
  3696                           ; 1 bytes @ 0x18
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x18
  3700  0038                     	ds	1
  3701  0039                     ___ftdiv@f3:	
  3702  0039                     ___ftmul@f3_as_product:	
  3703                           ; 3 bytes @ 0x19
  3704                           
  3705                           
  3706                           ; 3 bytes @ 0x19
  3707  0039                     	ds	3
  3708  003C                     ___ftdiv@exp:	
  3709  003C                     ___ftmul@cntr:	
  3710                           ; 1 bytes @ 0x1C
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x1C
  3714  003C                     	ds	1
  3715  003D                     ___ftdiv@sign:	
  3716  003D                     ___ftmul@sign:	
  3717                           ; 1 bytes @ 0x1D
  3718                           
  3719                           
  3720                           ; 1 bytes @ 0x1D
  3721  003D                     	ds	1
  3722  003E                     ?___ftneg:	
  3723  003E                     ___ftneg@f1:	
  3724                           ; 3 bytes @ 0x1E
  3725                           
  3726                           
  3727                           ; 3 bytes @ 0x1E
  3728  003E                     	ds	3
  3729  0041                     ??___ftneg:	
  3730  0041                     ?___ftadd:	
  3731                           ; 0 bytes @ 0x21
  3732                           
  3733  0041                     ___ftadd@f1:	
  3734                           ; 3 bytes @ 0x21
  3735                           
  3736                           
  3737                           ; 3 bytes @ 0x21
  3738  0041                     	ds	3
  3739  0044                     ___ftadd@f2:	
  3740                           
  3741                           ; 3 bytes @ 0x24
  3742  0044                     	ds	3
  3743  0047                     ??___ftadd:	
  3744                           
  3745                           ; 0 bytes @ 0x27
  3746  0047                     	ds	4
  3747  004B                     ___ftadd@sign:	
  3748                           
  3749                           ; 1 bytes @ 0x2B
  3750  004B                     	ds	1
  3751  004C                     ___ftadd@exp2:	
  3752                           
  3753                           ; 1 bytes @ 0x2C
  3754  004C                     	ds	1
  3755  004D                     ___ftadd@exp1:	
  3756                           
  3757                           ; 1 bytes @ 0x2D
  3758  004D                     	ds	1
  3759  004E                     ?___fttol:	
  3760  004E                     ___fttol@f1:	
  3761                           ; 4 bytes @ 0x2E
  3762                           
  3763                           
  3764                           ; 3 bytes @ 0x2E
  3765  004E                     	ds	4
  3766  0052                     ??___fttol:	
  3767                           
  3768                           ; 0 bytes @ 0x32
  3769  0052                     	ds	4
  3770  0056                     ___fttol@sign1:	
  3771                           
  3772                           ; 1 bytes @ 0x36
  3773  0056                     	ds	1
  3774  0057                     ___fttol@lval:	
  3775                           
  3776                           ; 4 bytes @ 0x37
  3777  0057                     	ds	4
  3778  005B                     ___fttol@exp1:	
  3779                           
  3780                           ; 1 bytes @ 0x3B
  3781  005B                     	ds	1
  3782  005C                     ??_setPercentValue:	
  3783  005C                     ??_getPercentValue:	
  3784                           ; 0 bytes @ 0x3C
  3785                           
  3786                           
  3787                           ; 0 bytes @ 0x3C
  3788  005C                     	ds	2
  3789  005E                     getPercentValue@value:	
  3790  005E                     setPercentValue@value:	
  3791                           ; 1 bytes @ 0x3E
  3792                           
  3793                           
  3794                           ; 1 bytes @ 0x3E
  3795  005E                     	ds	1
  3796  005F                     getPercentValue@i:	
  3797  005F                     setPercentValue@i:	
  3798                           ; 3 bytes @ 0x3F
  3799                           
  3800                           
  3801                           ; 3 bytes @ 0x3F
  3802  005F                     	ds	3
  3803  0062                     ?_setProductData:	
  3804  0062                     ??_setDimmerLights_AdjRF:	
  3805                           ; 0 bytes @ 0x42
  3806                           
  3807  0062                     ??_Flash_Memory_Initialization:	
  3808                           ; 0 bytes @ 0x42
  3809                           
  3810  0062                     setProductData@value:	
  3811                           ; 0 bytes @ 0x42
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x42
  3815  0062                     	ds	1
  3816  0063                     ??_setProductData:	
  3817  0063                     setDimmerLights_AdjRF@lights:	
  3818                           ; 0 bytes @ 0x43
  3819                           
  3820  0063                     Flash_Memory_Initialization@i:	
  3821                           ; 1 bytes @ 0x43
  3822                           
  3823                           
  3824                           ; 1 bytes @ 0x43
  3825  0063                     	ds	2
  3826  0065                     setProductData@address:	
  3827                           
  3828                           ; 1 bytes @ 0x45
  3829  0065                     	ds	1
  3830  0066                     ?_setRF_DimmerLights:	
  3831  0066                     ??_Load_Main:	
  3832                           ; 0 bytes @ 0x46
  3833                           
  3834  0066                     ??_setTemp_Main:	
  3835                           ; 0 bytes @ 0x46
  3836                           
  3837  0066                     ??_setLog_Code:	
  3838                           ; 0 bytes @ 0x46
  3839                           
  3840  0066                     ??_setRF_DimmerValue:	
  3841                           ; 0 bytes @ 0x46
  3842                           
  3843  0066                     ?_setDelayOff_GO:	
  3844                           ; 0 bytes @ 0x46
  3845                           
  3846  0066                     setDelayOff_GO@command:	
  3847                           ; 0 bytes @ 0x46
  3848                           
  3849  0066                     setRF_DimmerLights@on:	
  3850                           ; 1 bytes @ 0x46
  3851                           
  3852                           
  3853                           ; 1 bytes @ 0x46
  3854  0066                     	ds	1
  3855  0067                     ??_setRF_DimmerLights:	
  3856  0067                     setDelayOff_GO@value:	
  3857                           ; 0 bytes @ 0x47
  3858                           
  3859  0067                     setRF_DimmerValue@lights:	
  3860                           ; 1 bytes @ 0x47
  3861                           
  3862                           
  3863                           ; 1 bytes @ 0x47
  3864  0067                     	ds	1
  3865  0068                     ??_setRFSW_AdjControl:	
  3866  0068                     ??_setDelayOff_GO:	
  3867                           ; 0 bytes @ 0x48
  3868                           
  3869  0068                     Load_Main@error:	
  3870                           ; 0 bytes @ 0x48
  3871                           
  3872  0068                     setTemp_Main@error:	
  3873                           ; 1 bytes @ 0x48
  3874                           
  3875                           
  3876                           ; 1 bytes @ 0x48
  3877  0068                     	ds	1
  3878  0069                     ??_Temp_Main:	
  3879  0069                     setDelayOff_GO@sw:	
  3880                           ; 0 bytes @ 0x49
  3881                           
  3882  0069                     Load_Main@Load_Status:	
  3883                           ; 1 bytes @ 0x49
  3884                           
  3885  0069                     setRF_DimmerLights@status:	
  3886                           ; 1 bytes @ 0x49
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x49
  3890  0069                     	ds	1
  3891  006A                     ??_setDimmerLights_SwOff:	
  3892  006A                     setDimmerLights_SwOff@sw:	
  3893                           ; 0 bytes @ 0x4A
  3894                           
  3895  006A                     setRFSW_AdjControl@status:	
  3896                           ; 1 bytes @ 0x4A
  3897                           
  3898  006A                     setRF_DimmerLights@lights:	
  3899                           ; 1 bytes @ 0x4A
  3900                           
  3901  006A                     Load_Main@i:	
  3902                           ; 1 bytes @ 0x4A
  3903                           
  3904                           
  3905                           ; 2 bytes @ 0x4A
  3906  006A                     	ds	1
  3907  006B                     ??_setDimmerLights_ErrorClose:	
  3908  006B                     ?_setDimmerLights:	
  3909                           ; 0 bytes @ 0x4B
  3910                           
  3911  006B                     ?_setDimmerLights_Adj:	
  3912                           ; 0 bytes @ 0x4B
  3913                           
  3914  006B                     ??_Exception_Main:	
  3915                           ; 0 bytes @ 0x4B
  3916                           
  3917  006B                     ??_setRFSW_Control:	
  3918                           ; 0 bytes @ 0x4B
  3919                           
  3920  006B                     ??_setSw_Main:	
  3921                           ; 0 bytes @ 0x4B
  3922                           
  3923  006B                     setDimmerLights@status:	
  3924                           ; 0 bytes @ 0x4B
  3925                           
  3926  006B                     setDimmerLights_Adj@status:	
  3927                           ; 1 bytes @ 0x4B
  3928                           
  3929  006B                     setRFSW_AdjControl@sw:	
  3930                           ; 1 bytes @ 0x4B
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x4B
  3934  006B                     	ds	1
  3935  006C                     ??_DlyOff_Main:	
  3936  006C                     ??_setDimmerLights:	
  3937                           ; 0 bytes @ 0x4C
  3938                           
  3939  006C                     ??_setDimmerLights_Adj:	
  3940                           ; 0 bytes @ 0x4C
  3941                           
  3942  006C                     setRFSW_Control@status:	
  3943                           ; 0 bytes @ 0x4C
  3944                           
  3945                           
  3946                           ; 1 bytes @ 0x4C
  3947  006C                     	ds	1
  3948  006D                     setDimmerLights@lights:	
  3949  006D                     setDimmerLights_Adj@lights:	
  3950                           ; 1 bytes @ 0x4D
  3951                           
  3952  006D                     setRFSW_Control@sw:	
  3953                           ; 1 bytes @ 0x4D
  3954                           
  3955  006D                     setSw_Main@sw:	
  3956                           ; 1 bytes @ 0x4D
  3957                           
  3958                           
  3959                           ; 1 bytes @ 0x4D
  3960  006D                     	ds	1
  3961  006E                     ??_setDimmerLights_Main:	
  3962  006E                     ??_Switch_Main:	
  3963                           ; 0 bytes @ 0x4E
  3964                           
  3965  006E                     ??_getRxData:	
  3966                           ; 0 bytes @ 0x4E
  3967                           
  3968  006E                     ??_setControl_Lights_Table:	
  3969                           ; 0 bytes @ 0x4E
  3970                           
  3971  006E                     DlyOff_Main@sw:	
  3972                           ; 0 bytes @ 0x4E
  3973                           
  3974  006E                     setDimmerLights_Main@lights:	
  3975                           ; 1 bytes @ 0x4E
  3976                           
  3977                           
  3978                           ; 1 bytes @ 0x4E
  3979  006E                     	ds	1
  3980  006F                     ??_RF_Main:	
  3981  006F                     ??_DelayOff_Main:	
  3982                           ; 0 bytes @ 0x4F
  3983                           
  3984  006F                     ??_DimmerLights_Main:	
  3985                           ; 0 bytes @ 0x4F
  3986                           
  3987  006F                     ??_main:	
  3988                           ; 0 bytes @ 0x4F
  3989                           
  3990                           
  3991                           	psect	maintext
  3992  1748                     __pmaintext:	
  3993                           ; 0 bytes @ 0x4F
  3994 ;;
  3995 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3996 ;;
  3997 ;; *************** function _main *****************
  3998 ;; Defined at:
  3999 ;;		line 7 in file "../src/Main_B1.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  argc            2    3[BANK4 ] int 
  4002 ;;  argv            2    5[BANK4 ] PTR PTR unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    3[BANK4 ] int 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 17F/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels required when called:   15
  4020 ;; This function calls:
  4021 ;;		_Buzzer_Initialization
  4022 ;;		_Buzzer_Main
  4023 ;;		_CC2500_PowerOnInitial
  4024 ;;		_DelayOff_Initialization
  4025 ;;		_DelayOff_Main
  4026 ;;		_DimmerLights_Initialization
  4027 ;;		_DimmerLights_Main
  4028 ;;		_Exception_Main
  4029 ;;		_Flash_Memory_Initialization
  4030 ;;		_Flash_Memory_Main
  4031 ;;		_LED_Initialization
  4032 ;;		_LED_Main
  4033 ;;		_Load_Initialization
  4034 ;;		_Load_Main
  4035 ;;		_Mcu_Initialization
  4036 ;;		_RF_Initialization
  4037 ;;		_RF_Main
  4038 ;;		_Switch_Initialization
  4039 ;;		_Switch_Main
  4040 ;;		_Temp_Initialization
  4041 ;;		_Temp_Main
  4042 ;;		_WDT_Main
  4043 ;;		_getLoad_AD
  4044 ;;		_getTemp_AD
  4045 ;;		_myMain_Initialization
  4046 ;;		_my_MainTimer
  4047 ;; This function is called by:
  4048 ;;		Startup code after reset
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _main
  4054  1748                     _main:	
  4055                           
  4056                           ;Main_B1.c: 8: myMain_Initialization();
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4060  1748  319B  2350  3197   	fcall	_myMain_Initialization
  4061                           
  4062                           ;Main_B1.c: 9: Mcu_Initialization();
  4063  174B  319B  23D8  3197   	fcall	_Mcu_Initialization
  4064                           
  4065                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4066  174E  3186  26D7  3197   	fcall	_Flash_Memory_Initialization
  4067                           
  4068                           ;Main_B1.c: 11: LED_Initialization();
  4069  1751  319A  22DB  3197   	fcall	_LED_Initialization
  4070                           
  4071                           ;Main_B1.c: 12: Buzzer_Initialization();
  4072  1754  319A  2210  3197   	fcall	_Buzzer_Initialization
  4073                           
  4074                           ;Main_B1.c: 14: ;;
  4075                           ;Main_B1.c: 15: Temp_Initialization();
  4076  1757  319A  2219  3197   	fcall	_Temp_Initialization
  4077                           
  4078                           ;Main_B1.c: 16: Load_Initialization();
  4079  175A  319A  2231  3197   	fcall	_Load_Initialization
  4080                           
  4081                           ;Main_B1.c: 17: ;;
  4082                           ;Main_B1.c: 18: DelayOff_Initialization();
  4083  175D  319A  2257  3197   	fcall	_DelayOff_Initialization
  4084                           
  4085                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4086  1760  319C  2470  3197   	fcall	_DimmerLights_Initialization
  4087                           
  4088                           ;Main_B1.c: 21: ;;
  4089                           ;Main_B1.c: 22: ;;
  4090                           ;Main_B1.c: 23: ;;
  4091                           ;Main_B1.c: 24: Switch_Initialization();
  4092  1763  319B  2317  3197   	fcall	_Switch_Initialization
  4093                           
  4094                           ;Main_B1.c: 25: RF_Initialization();
  4095  1766  319A  2213  3197   	fcall	_RF_Initialization
  4096                           
  4097                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4098  1769  319C  24D5  3197   	fcall	_CC2500_PowerOnInitial
  4099  176C                     l11009:	
  4100                           ;Main_B1.c: 27: ;;
  4101                           ;Main_B1.c: 28: ;;
  4102                           ;Main_B1.c: 30: while (1) {
  4103                           
  4104                           
  4105                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4106  176C  0021               	movlb	1	; select bank1
  4107  176D  1C20               	btfss	_myMain^(0+128),0
  4108  176E  2F77               	goto	l11013
  4109                           
  4110                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4111  176F  3005               	movlw	5
  4112  1770  318A  22EA  3197   	fcall	_getLoad_AD
  4113                           
  4114                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4115  1773  3009               	movlw	9
  4116  1774  3192  222B  3197   	fcall	_getTemp_AD
  4117  1777                     l11013:	
  4118                           
  4119                           ;Main_B1.c: 57: }
  4120                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4121  1777  0022               	movlb	2	; select bank2
  4122  1778  1C20               	btfss	_Timer1^(0+256),0
  4123  1779  2F6C               	goto	l11009
  4124                           
  4125                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4126  177A  1020               	bcf	_Timer1^(0+256),0
  4127                           
  4128                           ;Main_B1.c: 96: my_MainTimer();
  4129  177B  3192  22EA  3197   	fcall	_my_MainTimer
  4130                           
  4131                           ;Main_B1.c: 97: WDT_Main();
  4132  177E  319B  23EA  3197   	fcall	_WDT_Main
  4133                           
  4134                           ;Main_B1.c: 98: ;;
  4135                           ;Main_B1.c: 99: ;;
  4136                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4137  1781  0021               	movlb	1	; select bank1
  4138  1782  1C20               	btfss	_myMain^(0+128),0
  4139  1783  2F6C               	goto	l11009
  4140                           
  4141                           ;Main_B1.c: 101: Flash_Memory_Main();
  4142  1784  3191  210F  3197   	fcall	_Flash_Memory_Main
  4143                           
  4144                           ;Main_B1.c: 103: LED_Main();
  4145  1787  319A  22E7  3197   	fcall	_LED_Main
  4146                           
  4147                           ;Main_B1.c: 104: Buzzer_Main();
  4148  178A  3187  27B3  3197   	fcall	_Buzzer_Main
  4149                           
  4150                           ;Main_B1.c: 106: ;;
  4151                           ;Main_B1.c: 107: Temp_Main();
  4152  178D  3187  27FD  3197   	fcall	_Temp_Main
  4153                           
  4154                           ;Main_B1.c: 108: Load_Main();
  4155  1790  3180  2049  3197   	fcall	_Load_Main
  4156                           
  4157                           ;Main_B1.c: 109: ;;
  4158                           ;Main_B1.c: 111: ;;
  4159                           ;Main_B1.c: 112: DimmerLights_Main();
  4160  1793  319A  226F  3197   	fcall	_DimmerLights_Main
  4161                           
  4162                           ;Main_B1.c: 113: Switch_Main();
  4163  1796  319A  22AC  3197   	fcall	_Switch_Main
  4164                           
  4165                           ;Main_B1.c: 114: ;;
  4166                           ;Main_B1.c: 115: ;;
  4167                           ;Main_B1.c: 117: RF_Main();
  4168  1799  319A  2216  3197   	fcall	_RF_Main
  4169                           
  4170                           ;Main_B1.c: 118: DelayOff_Main();
  4171  179C  319A  225F  3197   	fcall	_DelayOff_Main
  4172                           
  4173                           ;Main_B1.c: 119: ;;
  4174                           ;Main_B1.c: 120: ;;
  4175                           ;Main_B1.c: 121: Exception_Main();
  4176  179F  3185  25F7  3197   	fcall	_Exception_Main
  4177  17A2  2F6C               	goto	l11009
  4178  17A3                     __end_of_main:	
  4179                           ;Main_B1.c: 128: }
  4180                           ;Main_B1.c: 129: }
  4181                           ;Main_B1.c: 163: }
  4182                           ;Main_B1.c: 164: return (0);
  4183                           ;	Return value of _main is never used
  4184                           
  4185                           
  4186                           	psect	text1
  4187  12EA                     __ptext1:	
  4188 ;; *************** function _my_MainTimer *****************
  4189 ;; Defined at:
  4190 ;;		line 185 in file "../src/Main_B1.c"
  4191 ;; Parameters:    Size  Location     Type
  4192 ;;		None
  4193 ;; Auto vars:     Size  Location     Type
  4194 ;;		None
  4195 ;; Return value:  Size  Location     Type
  4196 ;;		None               void
  4197 ;; Registers used:
  4198 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4199 ;; Tracked objects:
  4200 ;;		On entry : 0/0
  4201 ;;		On exit  : 0/0
  4202 ;;		Unchanged: 0/0
  4203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;Total ram usage:        1 bytes
  4209 ;; Hardware stack levels used:    1
  4210 ;; Hardware stack levels required when called:    7
  4211 ;; This function calls:
  4212 ;;		_setBuz
  4213 ;;		_setTxData
  4214 ;; This function is called by:
  4215 ;;		_main
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _my_MainTimer
  4221  12EA                     _my_MainTimer:	
  4222                           
  4223                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4224                           
  4225                           ;incstack = 0
  4226                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4227  12EA  0021               	movlb	1	; select bank1
  4228  12EB  1820               	btfsc	_myMain^(0+128),0
  4229  12EC  2B04               	goto	l10685
  4230                           
  4231                           ;Main_B1.c: 189: myMain.PowerCount++;
  4232  12ED  3001               	movlw	1
  4233  12EE  0020               	movlb	0	; select bank0
  4234  12EF  00AD               	movwf	??_my_MainTimer
  4235  12F0  082D               	movf	??_my_MainTimer,w
  4236  12F1  0021               	movlb	1	; select bank1
  4237  12F2  07A1               	addwf	(_myMain^(0+128)+1),f
  4238                           
  4239                           ;Main_B1.c: 190: if (myMain.PowerCount == 150) {
  4240  12F3  0821               	movf	(_myMain^(0+128)+1),w
  4241  12F4  3A96               	xorlw	150
  4242  12F5  1D03               	skipz
  4243  12F6  0008               	return
  4244                           
  4245                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4246  12F7  01A1               	clrf	(_myMain^(0+128)+1)
  4247                           
  4248                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4249  12F8  1420               	bsf	_myMain^(0+128),0
  4250                           
  4251                           ;Main_B1.c: 197: setBuz(3, 50);
  4252  12F9  3032               	movlw	50
  4253  12FA  0020               	movlb	0	; select bank0
  4254  12FB  00A9               	movwf	setBuz@time
  4255  12FC  3000               	movlw	0
  4256  12FD  00AA               	movwf	setBuz@time+1
  4257  12FE  3003               	movlw	3
  4258  12FF  3196  2696         	fcall	_setBuz
  4259                           
  4260                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4261  1301  0021               	movlb	1	; select bank1
  4262  1302  1620               	bsf	_myMain^(0+128),4
  4263                           
  4264                           ;Main_B1.c: 207: }
  4265                           ;Main_B1.c: 208: } else {
  4266  1303  0008               	return
  4267  1304                     l10685:	
  4268                           
  4269                           ;Main_B1.c: 209: myMain.PowerCount++;
  4270  1304  3001               	movlw	1
  4271  1305  0020               	movlb	0	; select bank0
  4272  1306  00AD               	movwf	??_my_MainTimer
  4273  1307  082D               	movf	??_my_MainTimer,w
  4274  1308  0021               	movlb	1	; select bank1
  4275  1309  07A1               	addwf	(_myMain^(0+128)+1),f
  4276                           
  4277                           ;Main_B1.c: 210: if (myMain.PowerCount == 100) {
  4278  130A  0821               	movf	(_myMain^(0+128)+1),w
  4279  130B  3A64               	xorlw	100
  4280  130C  1D03               	skipz
  4281  130D  2B12               	goto	l10693
  4282                           
  4283                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4284  130E  01A1               	clrf	(_myMain^(0+128)+1)
  4285                           
  4286                           ;Main_B1.c: 222: setTxData();
  4287  130F  318C  247D  3192   	fcall	_setTxData
  4288  1312                     l10693:	
  4289                           
  4290                           ;Main_B1.c: 226: }
  4291                           ;Main_B1.c: 228: myMain.Count1++;
  4292  1312  3001               	movlw	1
  4293  1313  0021               	movlb	1	; select bank1
  4294  1314  07A4               	addwf	(_myMain^(0+128)+4),f
  4295  1315  3000               	movlw	0
  4296  1316  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4297                           
  4298                           ;Main_B1.c: 229: if (myMain.Count1 == 100)
  4299  1317  3004               	movlw	4
  4300  1318  3EA0               	addlw	_myMain& (0+255)
  4301  1319  0086               	movwf	6
  4302  131A  0187               	clrf	7
  4303  131B  3F40               	moviw [0]fsr1
  4304  131C  3A64               	xorlw	100
  4305  131D  1D03               	skipz
  4306  131E  2B21               	goto	u12275
  4307  131F  3F41               	moviw [1]fsr1
  4308  1320  3A00               	xorlw	0
  4309  1321                     u12275:	
  4310  1321  1D03               	skipz
  4311  1322  0008               	return
  4312                           
  4313                           ;Main_B1.c: 230: {
  4314                           ;Main_B1.c: 231: myMain.Count1 = 0;
  4315  1323  01A4               	clrf	(_myMain^(0+128)+4)
  4316  1324  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4317                           
  4318                           ;Main_B1.c: 243: if (myMain.Flag) {
  4319  1325  1CA0               	btfss	_myMain^(0+128),1
  4320  1326  2B29               	goto	l1531
  4321                           
  4322                           ;Main_B1.c: 244: myMain.Flag = 0;
  4323  1327  10A0               	bcf	_myMain^(0+128),1
  4324                           
  4325                           ;Main_B1.c: 253: } else {
  4326  1328  0008               	return
  4327  1329                     l1531:	
  4328                           
  4329                           ;Main_B1.c: 254: myMain.Flag = 1;
  4330  1329  14A0               	bsf	_myMain^(0+128),1
  4331  132A  0008               	return
  4332  132B                     __end_of_my_MainTimer:	
  4333                           
  4334                           	psect	text2
  4335  1B50                     __ptext2:	
  4336 ;; *************** function _myMain_Initialization *****************
  4337 ;; Defined at:
  4338 ;;		line 170 in file "../src/Main_B1.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;		None
  4341 ;; Auto vars:     Size  Location     Type
  4342 ;;		None
  4343 ;; Return value:  Size  Location     Type
  4344 ;;		None               void
  4345 ;; Registers used:
  4346 ;;		wreg, fsr1l, fsr1h
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4355 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;Total ram usage:        1 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    5
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_main
  4363 ;; This function uses a non-reentrant model
  4364 ;;
  4365                           
  4366                           
  4367                           ;psect for function _myMain_Initialization
  4368  1B50                     _myMain_Initialization:	
  4369                           
  4370                           ;Main_B1.c: 173: product = &_product;
  4371                           
  4372                           ;incstack = 0
  4373                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4374  1B50  3045               	movlw	__product& (0+255)
  4375  1B51  0020               	movlb	0	; select bank0
  4376  1B52  00A0               	movwf	??_myMain_Initialization
  4377  1B53  0820               	movf	??_myMain_Initialization,w
  4378  1B54  00F9               	movwf	_product
  4379                           
  4380                           ;Main_B1.c: 174: product->Data[20] = 210;
  4381  1B55  30D2               	movlw	210
  4382  1B56  00A0               	movwf	??_myMain_Initialization
  4383  1B57  0879               	movf	_product,w
  4384  1B58  3E14               	addlw	20
  4385  1B59  0086               	movwf	6
  4386  1B5A  3002               	movlw	2	; select bank4/5
  4387  1B5B  0087               	movwf	7
  4388  1B5C  0820               	movf	??_myMain_Initialization,w
  4389  1B5D  0081               	movwf	1
  4390  1B5E  0008               	return
  4391  1B5F                     __end_of_myMain_Initialization:	
  4392                           
  4393                           	psect	text3
  4394  122B                     __ptext3:	
  4395 ;; *************** function _getTemp_AD *****************
  4396 ;; Defined at:
  4397 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  channel         1    wreg     unsigned char 
  4400 ;; Auto vars:     Size  Location     Type
  4401 ;;  channel         1    5[BANK0 ] unsigned char 
  4402 ;; Return value:  Size  Location     Type
  4403 ;;		None               void
  4404 ;; Registers used:
  4405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4406 ;; Tracked objects:
  4407 ;;		On entry : 0/0
  4408 ;;		On exit  : 0/0
  4409 ;;		Unchanged: 0/0
  4410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;Total ram usage:        2 bytes
  4416 ;; Hardware stack levels used:    1
  4417 ;; Hardware stack levels required when called:    7
  4418 ;; This function calls:
  4419 ;;		_getAD
  4420 ;; This function is called by:
  4421 ;;		_main
  4422 ;; This function uses a non-reentrant model
  4423 ;;
  4424                           
  4425                           
  4426                           ;psect for function _getTemp_AD
  4427  122B                     _getTemp_AD:	
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4431                           ;getTemp_AD@channel stored from wreg
  4432  122B  0020               	movlb	0	; select bank0
  4433  122C  00A5               	movwf	getTemp_AD@channel
  4434                           
  4435                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4436  122D  0021               	movlb	1	; select bank1
  4437  122E  1D56               	btfss	_Temp^(0+128),2
  4438  122F  0008               	return
  4439                           
  4440                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4441  1230  30F0               	movlw	240
  4442  1231  0020               	movlb	0	; select bank0
  4443  1232  00A4               	movwf	??_getTemp_AD
  4444  1233  0824               	movf	??_getTemp_AD,w
  4445  1234  00A0               	movwf	getAD@adcon1
  4446  1235  0825               	movf	getTemp_AD@channel,w
  4447  1236  319E  2633  3192   	fcall	_getAD
  4448  1239  0020               	movlb	0	; select bank0
  4449  123A  0821               	movf	?_getAD+1,w
  4450  123B  0021               	movlb	1	; select bank1
  4451  123C  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4452  123D  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4453  123E  0020               	movlb	0	; select bank0
  4454  123F  0820               	movf	?_getAD,w
  4455  1240  0021               	movlb	1	; select bank1
  4456  1241  01E2               	clrf	(_Temp^(0+128)+12)
  4457  1242  07E2               	addwf	(_Temp^(0+128)+12),f
  4458                           
  4459                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4460  1243  300C               	movlw	12
  4461  1244  3ED6               	addlw	_Temp& (0+255)
  4462  1245  0086               	movwf	6
  4463  1246  0187               	clrf	7
  4464  1247  0016               	moviw fsr1++
  4465  1248  0401               	iorwf	1,w
  4466  1249  1903               	skipnz
  4467  124A  0008               	return
  4468                           
  4469                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4470  124B  0863               	movf	((_Temp+1)^(0+128)+12),w
  4471  124C  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4472  124D  1D03               	skipz
  4473  124E  2A51               	goto	u12225
  4474  124F  0862               	movf	(_Temp^(0+128)+12),w
  4475  1250  025E               	subwf	(_Temp^(0+128)+8),w
  4476  1251                     u12225:	
  4477  1251  1803               	skipnc
  4478  1252  2A5A               	goto	l10667
  4479                           
  4480                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4481  1253  0863               	movf	((_Temp+1)^(0+128)+12),w
  4482  1254  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4483  1255  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4484  1256  0862               	movf	(_Temp^(0+128)+12),w
  4485  1257  01DE               	clrf	(_Temp^(0+128)+8)
  4486  1258  07DE               	addwf	(_Temp^(0+128)+8),f
  4487                           
  4488                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4489  1259  0008               	return
  4490  125A                     l10667:	
  4491  125A  0863               	movf	((_Temp+1)^(0+128)+12),w
  4492  125B  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4493  125C  1D03               	skipz
  4494  125D  2A60               	goto	u12235
  4495  125E  0862               	movf	(_Temp^(0+128)+12),w
  4496  125F  0260               	subwf	(_Temp^(0+128)+10),w
  4497  1260                     u12235:	
  4498  1260  1803               	skipnc
  4499  1261  0008               	return
  4500                           
  4501                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4502  1262  0863               	movf	((_Temp+1)^(0+128)+12),w
  4503  1263  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4504  1264  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4505  1265  0862               	movf	(_Temp^(0+128)+12),w
  4506  1266  01E0               	clrf	(_Temp^(0+128)+10)
  4507  1267  07E0               	addwf	(_Temp^(0+128)+10),f
  4508  1268  0008               	return
  4509  1269                     __end_of_getTemp_AD:	
  4510                           
  4511                           	psect	text4
  4512  0AEA                     __ptext4:	
  4513 ;; *************** function _getLoad_AD *****************
  4514 ;; Defined at:
  4515 ;;		line 15 in file "../src/OverLoad_B1.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  channel         1    wreg     unsigned char 
  4518 ;; Auto vars:     Size  Location     Type
  4519 ;;  channel         1    6[BANK0 ] unsigned char 
  4520 ;;  i               1    9[BANK0 ] unsigned char 
  4521 ;;  j               1    8[BANK0 ] unsigned char 
  4522 ;;  k               1    7[BANK0 ] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;Total ram usage:        6 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    7
  4539 ;; This function calls:
  4540 ;;		_getAD
  4541 ;; This function is called by:
  4542 ;;		_main
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           
  4547                           ;psect for function _getLoad_AD
  4548  0AEA                     _getLoad_AD:	
  4549                           
  4550                           ;incstack = 0
  4551                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4552                           ;getLoad_AD@channel stored from wreg
  4553  0AEA  0020               	movlb	0	; select bank0
  4554  0AEB  00A6               	movwf	getLoad_AD@channel
  4555                           
  4556                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4557  0AEC  01A9               	clrf	getLoad_AD@i
  4558  0AED  01A8               	clrf	getLoad_AD@j
  4559  0AEE  01A7               	clrf	getLoad_AD@k
  4560                           
  4561                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4562  0AEF  0022               	movlb	2	; select bank2
  4563  0AF0  1E27               	btfss	_Load^(0+256),4
  4564  0AF1  0008               	return
  4565                           
  4566                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4567  0AF2  30F3               	movlw	243
  4568  0AF3  0020               	movlb	0	; select bank0
  4569  0AF4  00A4               	movwf	??_getLoad_AD
  4570  0AF5  0824               	movf	??_getLoad_AD,w
  4571  0AF6  00A0               	movwf	getAD@adcon1
  4572  0AF7  0826               	movf	getLoad_AD@channel,w
  4573  0AF8  319E  2633  318A   	fcall	_getAD
  4574  0AFB  0020               	movlb	0	; select bank0
  4575  0AFC  0821               	movf	?_getAD+1,w
  4576  0AFD  0022               	movlb	2	; select bank2
  4577  0AFE  01C9               	clrf	((_Load+1)^(0+256)+33)
  4578  0AFF  07C9               	addwf	((_Load+1)^(0+256)+33),f
  4579  0B00  0020               	movlb	0	; select bank0
  4580  0B01  0820               	movf	?_getAD,w
  4581  0B02  0022               	movlb	2	; select bank2
  4582  0B03  01C8               	clrf	(_Load^(0+256)+33)
  4583  0B04  07C8               	addwf	(_Load^(0+256)+33),f
  4584                           
  4585                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4586  0B05  0020               	movlb	0	; select bank0
  4587  0B06  01A9               	clrf	getLoad_AD@i
  4588  0B07  3004               	movlw	4
  4589  0B08  0229               	subwf	getLoad_AD@i,w
  4590  0B09  1803               	btfsc	3,0
  4591  0B0A  2B38               	goto	l10637
  4592  0B0B                     l10625:	
  4593                           
  4594                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4595  0B0B  3529               	lslf	getLoad_AD@i,w
  4596  0B0C  3E32               	addlw	(_Load+11)& (0+255)
  4597  0B0D  0086               	movwf	6
  4598  0B0E  3001               	movlw	1	; select bank2/3
  4599  0B0F  0087               	movwf	7
  4600  0B10  3F40               	moviw [0]fsr1
  4601  0B11  00A4               	movwf	??_getLoad_AD
  4602  0B12  3F41               	moviw [1]fsr1
  4603  0B13  00A5               	movwf	??_getLoad_AD+1
  4604  0B14  0022               	movlb	2	; select bank2
  4605  0B15  0849               	movf	((_Load+1)^(0+256)+33),w
  4606  0B16  0020               	movlb	0	; select bank0
  4607  0B17  0225               	subwf	??_getLoad_AD+1,w
  4608  0B18  1D03               	skipz
  4609  0B19  2B1E               	goto	u12125
  4610  0B1A  0022               	movlb	2	; select bank2
  4611  0B1B  0848               	movf	(_Load^(0+256)+33),w
  4612  0B1C  0020               	movlb	0	; select bank0
  4613  0B1D  0224               	subwf	??_getLoad_AD,w
  4614  0B1E                     u12125:	
  4615  0B1E  1803               	skipnc
  4616  0B1F  2B30               	goto	l10633
  4617  0B20  08A8               	movf	getLoad_AD@j,f
  4618  0B21  1D03               	skipz
  4619  0B22  2B30               	goto	l10633
  4620                           
  4621                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4622  0B23  3529               	lslf	getLoad_AD@i,w
  4623  0B24  3E32               	addlw	(_Load+11)& (0+255)
  4624  0B25  0086               	movwf	6
  4625  0B26  3001               	movlw	1	; select bank2/3
  4626  0B27  0087               	movwf	7
  4627  0B28  0022               	movlb	2	; select bank2
  4628  0B29  0848               	movf	(_Load^(0+256)+33),w
  4629  0B2A  3FC0               	movwi [0]fsr1
  4630  0B2B  0849               	movf	((_Load+1)^(0+256)+33),w
  4631  0B2C  3FC1               	movwi [1]fsr1
  4632                           
  4633                           ;OverLoad_B1.c: 24: j = 1;
  4634  0B2D  0020               	movlb	0	; select bank0
  4635  0B2E  01A8               	clrf	getLoad_AD@j
  4636  0B2F  0AA8               	incf	getLoad_AD@j,f
  4637  0B30                     l10633:	
  4638  0B30  3001               	movlw	1
  4639  0B31  00A4               	movwf	??_getLoad_AD
  4640  0B32  0824               	movf	??_getLoad_AD,w
  4641  0B33  07A9               	addwf	getLoad_AD@i,f
  4642  0B34  3004               	movlw	4
  4643  0B35  0229               	subwf	getLoad_AD@i,w
  4644  0B36  1C03               	skipc
  4645  0B37  2B0B               	goto	l10625
  4646  0B38                     l10637:	
  4647                           
  4648                           ;OverLoad_B1.c: 25: }
  4649                           ;OverLoad_B1.c: 26: }
  4650                           ;OverLoad_B1.c: 27: if (j == 0) {
  4651  0B38  08A8               	movf	getLoad_AD@j,f
  4652  0B39  1D03               	skipz
  4653  0B3A  0008               	return
  4654                           
  4655                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4656  0B3B  01A9               	clrf	getLoad_AD@i
  4657  0B3C                     L1:	
  4658  0B3C  3004               	movlw	4
  4659  0B3D  0229               	subwf	getLoad_AD@i,w
  4660  0B3E  1803               	btfsc	3,0
  4661  0B3F  0008               	return
  4662                           
  4663                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4664  0B40  3529               	lslf	getLoad_AD@i,w
  4665  0B41  3E3C               	addlw	(_Load+21)& (0+255)
  4666  0B42  0086               	movwf	6
  4667  0B43  3001               	movlw	1	; select bank2/3
  4668  0B44  0087               	movwf	7
  4669  0B45  3F40               	moviw [0]fsr1
  4670  0B46  00A4               	movwf	??_getLoad_AD
  4671  0B47  3F41               	moviw [1]fsr1
  4672  0B48  00A5               	movwf	??_getLoad_AD+1
  4673  0B49  0825               	movf	??_getLoad_AD+1,w
  4674  0B4A  0022               	movlb	2	; select bank2
  4675  0B4B  0249               	subwf	((_Load+1)^(0+256)+33),w
  4676  0B4C  1D03               	skipz
  4677  0B4D  2B52               	goto	u12175
  4678  0B4E  0020               	movlb	0	; select bank0
  4679  0B4F  0824               	movf	??_getLoad_AD,w
  4680  0B50  0022               	movlb	2	; select bank2
  4681  0B51  0248               	subwf	(_Load^(0+256)+33),w
  4682  0B52                     u12175:	
  4683  0B52  1803               	skipnc
  4684  0B53  2B65               	goto	l10653
  4685  0B54  0020               	movlb	0	; select bank0
  4686  0B55  08A7               	movf	getLoad_AD@k,f
  4687  0B56  1D03               	skipz
  4688  0B57  2B65               	goto	l10653
  4689                           
  4690                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4691  0B58  3529               	lslf	getLoad_AD@i,w
  4692  0B59  3E3C               	addlw	(_Load+21)& (0+255)
  4693  0B5A  0086               	movwf	6
  4694  0B5B  3001               	movlw	1	; select bank2/3
  4695  0B5C  0087               	movwf	7
  4696  0B5D  0022               	movlb	2	; select bank2
  4697  0B5E  0848               	movf	(_Load^(0+256)+33),w
  4698  0B5F  3FC0               	movwi [0]fsr1
  4699  0B60  0849               	movf	((_Load+1)^(0+256)+33),w
  4700  0B61  3FC1               	movwi [1]fsr1
  4701                           
  4702                           ;OverLoad_B1.c: 31: k = 1;
  4703  0B62  0020               	movlb	0	; select bank0
  4704  0B63  01A7               	clrf	getLoad_AD@k
  4705  0B64  0AA7               	incf	getLoad_AD@k,f
  4706  0B65                     l10653:	
  4707  0B65  3001               	movlw	1
  4708  0B66  0020               	movlb	0	; select bank0
  4709  0B67  00A4               	movwf	??_getLoad_AD
  4710  0B68  0824               	movf	??_getLoad_AD,w
  4711  0B69  07A9               	addwf	getLoad_AD@i,f
  4712  0B6A  2B3C               	goto	L1
  4713  0B6B                     __end_of_getLoad_AD:	
  4714                           
  4715                           	psect	text5
  4716  1E33                     __ptext5:	
  4717 ;; *************** function _getAD *****************
  4718 ;; Defined at:
  4719 ;;		line 453 in file "../src/MCU_B1.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  adcon0          1    wreg     unsigned char 
  4722 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  2    0[BANK0 ] int 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4734 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4738 ;;Total ram usage:        4 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; Hardware stack levels required when called:    6
  4741 ;; This function calls:
  4742 ;;		_Timeout_Counter
  4743 ;;		_set_TimeoutCleared
  4744 ;; This function is called by:
  4745 ;;		_getLoad_AD
  4746 ;;		_getTemp_AD
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           
  4751                           ;psect for function _getAD
  4752  1E33                     _getAD:	
  4753                           
  4754                           ;incstack = 0
  4755                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4756                           ;getAD@adcon0 stored from wreg
  4757  1E33  0020               	movlb	0	; select bank0
  4758  1E34  00A3               	movwf	getAD@adcon0
  4759                           
  4760                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4761  1E35  0823               	movf	getAD@adcon0,w
  4762  1E36  0021               	movlb	1	; select bank1
  4763  1E37  009D               	movwf	29	;volatile
  4764                           
  4765                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4766  1E38  0020               	movlb	0	; select bank0
  4767  1E39  0820               	movf	getAD@adcon1,w
  4768  1E3A  0021               	movlb	1	; select bank1
  4769  1E3B  009E               	movwf	30	;volatile
  4770                           
  4771                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4772  1E3C  149D               	bsf	29,1	;volatile
  4773                           
  4774                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4775  1E3D  2E41               	goto	l10089
  4776  1E3E                     l10087:	
  4777                           
  4778                           ;MCU_B1.c: 458: Timeout_Counter();
  4779  1E3E  319C  24C0  319E   	fcall	_Timeout_Counter
  4780  1E41                     l10089:	
  4781  1E41  0021               	movlb	1	; select bank1
  4782  1E42  1C9D               	btfss	29,1	;volatile
  4783  1E43  2E46               	goto	l10093
  4784  1E44  1D2B               	btfss	(_myMain^(0+128)+11),2
  4785  1E45  2E3E               	goto	l10087
  4786  1E46                     l10093:	
  4787                           
  4788                           ;MCU_B1.c: 459: };
  4789                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4790  1E46  319A  222C         	fcall	_set_TimeoutCleared
  4791                           
  4792                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4793  1E48  0021               	movlb	1	; select bank1
  4794  1E49  081C               	movf	28,w	;volatile
  4795  1E4A  0020               	movlb	0	; select bank0
  4796  1E4B  01A1               	clrf	?_getAD+1
  4797  1E4C  07A1               	addwf	?_getAD+1,f
  4798  1E4D  0021               	movlb	1	; select bank1
  4799  1E4E  081B               	movf	27,w	;volatile
  4800  1E4F  0020               	movlb	0	; select bank0
  4801  1E50  01A0               	clrf	?_getAD
  4802  1E51  07A0               	addwf	?_getAD,f
  4803  1E52  0008               	return
  4804  1E53                     __end_of_getAD:	
  4805                           
  4806                           	psect	text6
  4807  1BEA                     __ptext6:	
  4808 ;; *************** function _WDT_Main *****************
  4809 ;; Defined at:
  4810 ;;		line 1097 in file "../src/MCU_B1.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;		None
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;		None
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, pclath, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    6
  4831 ;; This function calls:
  4832 ;;		_WDT_Clearing
  4833 ;; This function is called by:
  4834 ;;		_main
  4835 ;; This function uses a non-reentrant model
  4836 ;;
  4837                           
  4838                           
  4839                           ;psect for function _WDT_Main
  4840  1BEA                     _WDT_Main:	
  4841                           
  4842                           ;MCU_B1.c: 1098: if (WDT.Enable == 1) {
  4843                           
  4844                           ;incstack = 0
  4845                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4846  1BEA  0022               	movlb	2	; select bank2
  4847  1BEB  1C25               	btfss	_WDT^(0+256),0
  4848  1BEC  0008               	return
  4849                           
  4850                           ;MCU_B1.c: 1099: if (WDT.Timer-- > 0) {
  4851  1BED  3001               	movlw	1
  4852  1BEE  02A6               	subwf	(_WDT^(0+256)+1),f
  4853  1BEF  0826               	movf	(_WDT^(0+256)+1),w
  4854  1BF0  3AFF               	xorlw	255
  4855  1BF1  1903               	skipnz
  4856  1BF2  0008               	return
  4857                           
  4858                           ;MCU_B1.c: 1100: WDT.Timer = 100;
  4859  1BF3  3064               	movlw	100
  4860  1BF4  0020               	movlb	0	; select bank0
  4861  1BF5  00A0               	movwf	??_WDT_Main
  4862  1BF6  0820               	movf	??_WDT_Main,w
  4863  1BF7  0022               	movlb	2	; select bank2
  4864  1BF8  00A6               	movwf	(_WDT^(0+256)+1)
  4865                           
  4866                           ;MCU_B1.c: 1101: WDT_Clearing();
  4867  1BF9  3180  2002         	fcall	_WDT_Clearing
  4868  1BFB  0008               	return
  4869  1BFC                     __end_of_WDT_Main:	
  4870                           
  4871                           	psect	text7
  4872  0002                     __ptext7:	
  4873 ;; *************** function _WDT_Clearing *****************
  4874 ;; Defined at:
  4875 ;;		line 1107 in file "../src/MCU_B1.c"
  4876 ;; Parameters:    Size  Location     Type
  4877 ;;		None
  4878 ;; Auto vars:     Size  Location     Type
  4879 ;;		None
  4880 ;; Return value:  Size  Location     Type
  4881 ;;		None               void
  4882 ;; Registers used:
  4883 ;;		None
  4884 ;; Tracked objects:
  4885 ;;		On entry : 0/0
  4886 ;;		On exit  : 0/0
  4887 ;;		Unchanged: 0/0
  4888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4893 ;;Total ram usage:        0 bytes
  4894 ;; Hardware stack levels used:    1
  4895 ;; Hardware stack levels required when called:    5
  4896 ;; This function calls:
  4897 ;;		Nothing
  4898 ;; This function is called by:
  4899 ;;		_WDT_Main
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _WDT_Clearing
  4905  0002                     _WDT_Clearing:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _WDT_Clearing: []
  4909  0002  0064               	clrwdt	;# 
  4910  0003  0008               	return
  4911  0004                     __end_of_WDT_Clearing:	
  4912                           
  4913                           	psect	text8
  4914  07FD                     __ptext8:	
  4915 ;; *************** function _Temp_Main *****************
  4916 ;; Defined at:
  4917 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4918 ;; Parameters:    Size  Location     Type
  4919 ;;		None
  4920 ;; Auto vars:     Size  Location     Type
  4921 ;;		None
  4922 ;; Return value:  Size  Location     Type
  4923 ;;		None               void
  4924 ;; Registers used:
  4925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4926 ;; Tracked objects:
  4927 ;;		On entry : 0/0
  4928 ;;		On exit  : 0/0
  4929 ;;		Unchanged: 0/0
  4930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4935 ;;Total ram usage:        0 bytes
  4936 ;; Hardware stack levels used:    1
  4937 ;; Hardware stack levels required when called:    8
  4938 ;; This function calls:
  4939 ;;		_setTemp_Main
  4940 ;; This function is called by:
  4941 ;;		_main
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944                           
  4945                           
  4946                           ;psect for function _Temp_Main
  4947  07FD                     _Temp_Main:	
  4948                           
  4949                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4950                           
  4951                           ;incstack = 0
  4952                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4953  07FD  318D  25C1         	fcall	_setTemp_Main
  4954  07FF  0008               	return
  4955  0800                     __end_of_Temp_Main:	
  4956                           
  4957                           	psect	text9
  4958  0DC1                     __ptext9:	
  4959 ;; *************** function _setTemp_Main *****************
  4960 ;; Defined at:
  4961 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4962 ;; Parameters:    Size  Location     Type
  4963 ;;		None
  4964 ;; Auto vars:     Size  Location     Type
  4965 ;;  error           1   72[BANK0 ] unsigned char 
  4966 ;; Return value:  Size  Location     Type
  4967 ;;		None               void
  4968 ;; Registers used:
  4969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4970 ;; Tracked objects:
  4971 ;;		On entry : 0/0
  4972 ;;		On exit  : 0/0
  4973 ;;		Unchanged: 0/0
  4974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4977 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;Total ram usage:        3 bytes
  4980 ;; Hardware stack levels used:    1
  4981 ;; Hardware stack levels required when called:    7
  4982 ;; This function calls:
  4983 ;;		_getMain_All_Error_Status
  4984 ;;		_setBuz
  4985 ;;		_setProductData
  4986 ;; This function is called by:
  4987 ;;		_Temp_Main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _setTemp_Main
  4993  0DC1                     _setTemp_Main:	
  4994                           
  4995                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4999  0DC1  3000               	movlw	0
  5000  0DC2  3188  2000  318D   	fcall	_getMain_All_Error_Status
  5001  0DC5  0020               	movlb	0	; select bank0
  5002  0DC6  00E6               	movwf	??_setTemp_Main
  5003  0DC7  0866               	movf	??_setTemp_Main,w
  5004  0DC8  00E8               	movwf	setTemp_Main@error
  5005                           
  5006                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5007  0DC9  0021               	movlb	1	; select bank1
  5008  0DCA  1C56               	btfss	_Temp^(0+128),0
  5009  0DCB  2E6D               	goto	l1884
  5010                           
  5011                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5012  0DCC  1956               	btfsc	_Temp^(0+128),2
  5013  0DCD  2DDD               	goto	l10159
  5014                           
  5015                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5016  0DCE  3001               	movlw	1
  5017  0DCF  07D7               	addwf	(_Temp^(0+128)+1),f
  5018  0DD0  3000               	movlw	0
  5019  0DD1  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5020                           
  5021                           ;OverTemperature_B1.c: 67: if (Temp.Time >= 500) {
  5022  0DD2  3001               	movlw	1
  5023  0DD3  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5024  0DD4  30F4               	movlw	244
  5025  0DD5  1903               	skipnz
  5026  0DD6  0257               	subwf	(_Temp^(0+128)+1),w
  5027  0DD7  1C03               	skipc
  5028  0DD8  0008               	return
  5029                           
  5030                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5031  0DD9  01D7               	clrf	(_Temp^(0+128)+1)
  5032  0DDA  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5033                           
  5034                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5035  0DDB  1556               	bsf	_Temp^(0+128),2
  5036                           
  5037                           ;OverTemperature_B1.c: 70: }
  5038                           ;OverTemperature_B1.c: 71: } else {
  5039  0DDC  0008               	return
  5040  0DDD                     l10159:	
  5041                           
  5042                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5043  0DDD  3001               	movlw	1
  5044  0DDE  07D7               	addwf	(_Temp^(0+128)+1),f
  5045  0DDF  3000               	movlw	0
  5046  0DE0  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5047                           
  5048                           ;OverTemperature_B1.c: 73: if (Temp.Time >= 5) {
  5049  0DE1  3000               	movlw	0
  5050  0DE2  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5051  0DE3  3005               	movlw	5
  5052  0DE4  1903               	skipnz
  5053  0DE5  0257               	subwf	(_Temp^(0+128)+1),w
  5054  0DE6  1C03               	skipc
  5055  0DE7  0008               	return
  5056                           
  5057                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5058  0DE8  01D7               	clrf	(_Temp^(0+128)+1)
  5059  0DE9  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5060                           
  5061                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5062  0DEA  3008               	movlw	8
  5063  0DEB  3ED6               	addlw	_Temp& (0+255)
  5064  0DEC  0086               	movwf	6
  5065  0DED  0187               	clrf	7
  5066  0DEE  0016               	moviw fsr1++
  5067  0DEF  0401               	iorwf	1,w
  5068  0DF0  1903               	skipnz
  5069  0DF1  2E67               	goto	l1889
  5070  0DF2  300A               	movlw	10
  5071  0DF3  3ED6               	addlw	_Temp& (0+255)
  5072  0DF4  0086               	movwf	6
  5073  0DF5  0187               	clrf	7
  5074  0DF6  0016               	moviw fsr1++
  5075  0DF7  0401               	iorwf	1,w
  5076  0DF8  1903               	skipnz
  5077  0DF9  2E67               	goto	l1889
  5078                           
  5079                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5080  0DFA  1156               	bcf	_Temp^(0+128),2
  5081                           
  5082                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5083  0DFB  300A               	movlw	10
  5084  0DFC  3ED6               	addlw	_Temp& (0+255)
  5085  0DFD  0086               	movwf	6
  5086  0DFE  0187               	clrf	7
  5087  0DFF  3008               	movlw	8
  5088  0E00  3ED6               	addlw	_Temp& (0+255)
  5089  0E01  0084               	movwf	4
  5090  0E02  0185               	clrf	5
  5091  0E03  3F40               	moviw [0]fsr1
  5092  0E04  0700               	addwf	0,w
  5093  0E05  0020               	movlb	0	; select bank0
  5094  0E06  00E6               	movwf	??_setTemp_Main
  5095  0E07  3101               	addfsr 0,1
  5096  0E08  3F41               	moviw [1]fsr1
  5097  0E09  3D00               	addwfc	0,w
  5098  0E0A  00E7               	movwf	??_setTemp_Main+1
  5099  0E0B  36E7               	lsrf	??_setTemp_Main+1,f
  5100  0E0C  0CE6               	rrf	??_setTemp_Main,f
  5101  0E0D  0866               	movf	??_setTemp_Main,w
  5102  0E0E  0021               	movlb	1	; select bank1
  5103  0E0F  00DC               	movwf	(_Temp^(0+128)+6)
  5104  0E10  0020               	movlb	0	; select bank0
  5105  0E11  0867               	movf	??_setTemp_Main+1,w
  5106  0E12  0021               	movlb	1	; select bank1
  5107  0E13  00DD               	movwf	((_Temp+1)^(0+128)+6)
  5108                           
  5109                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5110  0E14  30C7               	movlw	199
  5111  0E15  00E4               	movwf	(_Temp^(0+128)+14)
  5112  0E16  3001               	movlw	1
  5113  0E17  00E5               	movwf	(_Temp^(0+128)+15)
  5114                           
  5115                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5116  0E18  309F               	movlw	159
  5117  0E19  00E6               	movwf	(_Temp^(0+128)+16)
  5118  0E1A  3001               	movlw	1
  5119  0E1B  00E7               	movwf	(_Temp^(0+128)+17)
  5120                           
  5121                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5122  0E1C  1CD6               	btfss	_Temp^(0+128),1
  5123  0E1D  2E3E               	goto	l10191
  5124                           
  5125                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5126  0E1E  0865               	movf	((_Temp+1)^(0+128)+14),w
  5127  0E1F  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5128  0E20  1D03               	skipz
  5129  0E21  2E24               	goto	u11325
  5130  0E22  0864               	movf	(_Temp^(0+128)+14),w
  5131  0E23  025C               	subwf	(_Temp^(0+128)+6),w
  5132  0E24                     u11325:	
  5133  0E24  1C03               	skipc
  5134  0E25  2E3C               	goto	l10189
  5135                           
  5136                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5137  0E26  3001               	movlw	1
  5138  0E27  0020               	movlb	0	; select bank0
  5139  0E28  00E6               	movwf	??_setTemp_Main
  5140  0E29  0866               	movf	??_setTemp_Main,w
  5141  0E2A  0021               	movlb	1	; select bank1
  5142  0E2B  07D9               	addwf	(_Temp^(0+128)+3),f
  5143                           
  5144                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5145  0E2C  3003               	movlw	3
  5146  0E2D  0259               	subwf	(_Temp^(0+128)+3),w
  5147  0E2E  1C03               	skipc
  5148  0E2F  2E54               	goto	l10203
  5149                           
  5150                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5151  0E30  01D9               	clrf	(_Temp^(0+128)+3)
  5152                           
  5153                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5154  0E31  10D6               	bcf	_Temp^(0+128),1
  5155                           
  5156                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5157  0E32  3064               	movlw	100
  5158  0E33  0020               	movlb	0	; select bank0
  5159  0E34  00A9               	movwf	setBuz@time
  5160  0E35  3000               	movlw	0
  5161  0E36  00AA               	movwf	setBuz@time+1
  5162  0E37  3002               	movlw	2
  5163  0E38  3196  2696  318D   	fcall	_setBuz
  5164                           
  5165                           ;OverTemperature_B1.c: 103: }
  5166                           ;OverTemperature_B1.c: 104: } else {
  5167  0E3B  2E54               	goto	l10203
  5168  0E3C                     l10189:	
  5169                           
  5170                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5171  0E3C  0021               	movlb	1	; select bank1
  5172  0E3D  2E53               	goto	l10201
  5173  0E3E                     l10191:	
  5174                           ;OverTemperature_B1.c: 106: }
  5175                           ;OverTemperature_B1.c: 107: } else {
  5176                           
  5177                           
  5178                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5179  0E3E  085D               	movf	((_Temp+1)^(0+128)+6),w
  5180  0E3F  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5181  0E40  1D03               	skipz
  5182  0E41  2E44               	goto	u11345
  5183  0E42  085C               	movf	(_Temp^(0+128)+6),w
  5184  0E43  0266               	subwf	(_Temp^(0+128)+16),w
  5185  0E44                     u11345:	
  5186  0E44  1C03               	skipc
  5187  0E45  2E53               	goto	l10201
  5188                           
  5189                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5190  0E46  3001               	movlw	1
  5191  0E47  0020               	movlb	0	; select bank0
  5192  0E48  00E6               	movwf	??_setTemp_Main
  5193  0E49  0866               	movf	??_setTemp_Main,w
  5194  0E4A  0021               	movlb	1	; select bank1
  5195  0E4B  07D9               	addwf	(_Temp^(0+128)+3),f
  5196                           
  5197                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5198  0E4C  3003               	movlw	3
  5199  0E4D  0259               	subwf	(_Temp^(0+128)+3),w
  5200  0E4E  1C03               	skipc
  5201  0E4F  2E54               	goto	l10203
  5202                           
  5203                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5204  0E50  01D9               	clrf	(_Temp^(0+128)+3)
  5205                           
  5206                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5207  0E51  14D6               	bsf	_Temp^(0+128),1
  5208                           
  5209                           ;OverTemperature_B1.c: 113: }
  5210                           ;OverTemperature_B1.c: 114: } else {
  5211  0E52  2E54               	goto	l10203
  5212  0E53                     l10201:	
  5213                           
  5214                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5215  0E53  01D9               	clrf	(_Temp^(0+128)+3)
  5216  0E54                     l10203:	
  5217                           
  5218                           ;OverTemperature_B1.c: 116: }
  5219                           ;OverTemperature_B1.c: 117: }
  5220                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5221  0E54  0021               	movlb	1	; select bank1
  5222  0E55  085D               	movf	((_Temp+1)^(0+128)+6),w
  5223  0E56  0020               	movlb	0	; select bank0
  5224  0E57  00E6               	movwf	??_setTemp_Main
  5225  0E58  0866               	movf	??_setTemp_Main,w
  5226  0E59  00E2               	movwf	setProductData@value
  5227  0E5A  3018               	movlw	24
  5228  0E5B  319B  2324  318D   	fcall	_setProductData
  5229                           
  5230                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5231  0E5E  0021               	movlb	1	; select bank1
  5232  0E5F  085C               	movf	(_Temp^(0+128)+6),w
  5233  0E60  0020               	movlb	0	; select bank0
  5234  0E61  00E6               	movwf	??_setTemp_Main
  5235  0E62  0866               	movf	??_setTemp_Main,w
  5236  0E63  00E2               	movwf	setProductData@value
  5237  0E64  3019               	movlw	25
  5238  0E65  319B  2324         	fcall	_setProductData
  5239  0E67                     l1889:	
  5240                           
  5241                           ;OverTemperature_B1.c: 135: }
  5242                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5243  0E67  0021               	movlb	1	; select bank1
  5244  0E68  01DE               	clrf	(_Temp^(0+128)+8)
  5245  0E69  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5246                           
  5247                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5248  0E6A  01E0               	clrf	(_Temp^(0+128)+10)
  5249  0E6B  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5250                           
  5251                           ;OverTemperature_B1.c: 138: }
  5252                           ;OverTemperature_B1.c: 139: }
  5253                           ;OverTemperature_B1.c: 141: } else {
  5254  0E6C  0008               	return
  5255  0E6D                     l1884:	
  5256                           
  5257                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5258  0E6D  1C20               	btfss	_myMain^(0+128),0
  5259  0E6E  0008               	return
  5260                           
  5261                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5262  0E6F  1456               	bsf	_Temp^(0+128),0
  5263  0E70  0008               	return
  5264  0E71                     __end_of_setTemp_Main:	
  5265                           
  5266                           	psect	text10
  5267  1A19                     __ptext10:	
  5268 ;; *************** function _Temp_Initialization *****************
  5269 ;; Defined at:
  5270 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5271 ;; Parameters:    Size  Location     Type
  5272 ;;		None
  5273 ;; Auto vars:     Size  Location     Type
  5274 ;;		None
  5275 ;; Return value:  Size  Location     Type
  5276 ;;		None               void
  5277 ;; Registers used:
  5278 ;;		status,2, status,0, pclath, cstack
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        0 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    6
  5291 ;; This function calls:
  5292 ;;		_setTemp_Initialization
  5293 ;; This function is called by:
  5294 ;;		_main
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _Temp_Initialization
  5300  1A19                     _Temp_Initialization:	
  5301                           
  5302                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5303                           
  5304                           ;incstack = 0
  5305                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5306  1A19  319A  220F         	fcall	_setTemp_Initialization
  5307  1A1B  0008               	return
  5308  1A1C                     __end_of_Temp_Initialization:	
  5309                           
  5310                           	psect	text11
  5311  1A0F                     __ptext11:	
  5312 ;; *************** function _setTemp_Initialization *****************
  5313 ;; Defined at:
  5314 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5315 ;; Parameters:    Size  Location     Type
  5316 ;;		None
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;		None
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		None
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:        0 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    5
  5335 ;; This function calls:
  5336 ;;		Nothing
  5337 ;; This function is called by:
  5338 ;;		_Temp_Initialization
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342                           
  5343                           ;psect for function _setTemp_Initialization
  5344  1A0F                     _setTemp_Initialization:	
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _setTemp_Initialization: []
  5348  1A0F  0008               	return
  5349  1A10                     __end_of_setTemp_Initialization:	
  5350                           
  5351                           	psect	text12
  5352  1AAC                     __ptext12:	
  5353 ;; *************** function _Switch_Main *****************
  5354 ;; Defined at:
  5355 ;;		line 72 in file "../src/Switch_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:   10
  5376 ;; This function calls:
  5377 ;;		_TouchPower
  5378 ;;		_setSw_Main
  5379 ;; This function is called by:
  5380 ;;		_main
  5381 ;; This function uses a non-reentrant model
  5382 ;;
  5383                           
  5384                           
  5385                           ;psect for function _Switch_Main
  5386  1AAC                     _Switch_Main:	
  5387                           
  5388                           ;Switch_B1.c: 75: setSw_Main(1);
  5389                           
  5390                           ;incstack = 0
  5391                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5392  1AAC  3001               	movlw	1
  5393  1AAD  3182  228D  319A   	fcall	_setSw_Main
  5394                           
  5395                           ;Switch_B1.c: 79: setSw_Main(2);
  5396  1AB0  3002               	movlw	2
  5397  1AB1  3182  228D  319A   	fcall	_setSw_Main
  5398                           
  5399                           ;Switch_B1.c: 87: TouchPower();
  5400  1AB4  3190  2066         	fcall	_TouchPower
  5401  1AB6  0008               	return
  5402  1AB7                     __end_of_Switch_Main:	
  5403                           
  5404                           	psect	text13
  5405  028D                     __ptext13:	
  5406 ;; *************** function _setSw_Main *****************
  5407 ;; Defined at:
  5408 ;;		line 121 in file "../src/Switch_B1.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  sw              1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  sw              1   77[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5425 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5426 ;;Total ram usage:        3 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    9
  5429 ;; This function calls:
  5430 ;;		_SwPointSelect
  5431 ;;		_getMain_All_Error_Status
  5432 ;;		_getSw_KeyStatus
  5433 ;;		_setBuz
  5434 ;;		_setDimmerLights_AdjOn
  5435 ;;		_setDimmerLights_SwOff
  5436 ;;		_setDimmerLights_SwOn
  5437 ;;		_setRF_Learn
  5438 ;; This function is called by:
  5439 ;;		_Switch_Main
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           
  5444                           ;psect for function _setSw_Main
  5445  028D                     _setSw_Main:	
  5446                           
  5447                           ;incstack = 0
  5448                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5449                           ;setSw_Main@sw stored from wreg
  5450  028D  0020               	movlb	0	; select bank0
  5451  028E  00ED               	movwf	setSw_Main@sw
  5452                           
  5453                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5454  028F  086D               	movf	setSw_Main@sw,w
  5455  0290  319C  2498  3182   	fcall	_SwPointSelect
  5456                           
  5457                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5458  0293  0877               	movf	_Sw,w
  5459  0294  0086               	movwf	6
  5460  0295  3001               	movlw	1	; select bank2/3
  5461  0296  0087               	movwf	7
  5462  0297  1C01               	btfss	1,0
  5463  0298  2BF7               	goto	l2659
  5464                           
  5465                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5466  0299  3000               	movlw	0
  5467  029A  3188  2000  3182   	fcall	_getMain_All_Error_Status
  5468  029D  3800               	iorlw	0
  5469  029E  1D03               	skipz
  5470  029F  2ABB               	goto	l10339
  5471                           
  5472                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5473  02A0  0A77               	incf	_Sw,w
  5474  02A1  0086               	movwf	6
  5475  02A2  3001               	movlw	1	; select bank2/3
  5476  02A3  0087               	movwf	7
  5477  02A4  1081               	bcf	1,1
  5478                           
  5479                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5480  02A5  0020               	movlb	0	; select bank0
  5481  02A6  086D               	movf	setSw_Main@sw,w
  5482  02A7  319D  25F4  3182   	fcall	_getSw_KeyStatus
  5483  02AA  3A01               	xorlw	1
  5484  02AB  3000               	movlw	0
  5485  02AC  1903               	skipnz
  5486  02AD  3001               	movlw	1
  5487  02AE  0020               	movlb	0	; select bank0
  5488  02AF  00EB               	movwf	??_setSw_Main
  5489  02B0  0877               	movf	_Sw,w
  5490  02B1  0086               	movwf	6
  5491  02B2  3001               	movlw	1	; select bank2/3
  5492  02B3  0087               	movwf	7
  5493  02B4  0DEB               	rlf	??_setSw_Main,f
  5494  02B5  0801               	movf	1,w
  5495  02B6  066B               	xorwf	??_setSw_Main,w
  5496  02B7  39FD               	andlw	-3
  5497  02B8  066B               	xorwf	??_setSw_Main,w
  5498  02B9  0081               	movwf	1
  5499                           
  5500                           ;Switch_B1.c: 128: } else {
  5501  02BA  2AD0               	goto	l2661
  5502  02BB                     l10339:	
  5503                           
  5504                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5505  02BB  0A77               	incf	_Sw,w
  5506  02BC  0086               	movwf	6
  5507  02BD  3001               	movlw	1	; select bank2/3
  5508  02BE  0087               	movwf	7
  5509  02BF  1881               	btfsc	1,1
  5510  02C0  2AD0               	goto	l2661
  5511                           
  5512                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5513  02C1  0A77               	incf	_Sw,w
  5514  02C2  0086               	movwf	6
  5515  02C3  3001               	movlw	1	; select bank2/3
  5516  02C4  0087               	movwf	7
  5517  02C5  1481               	bsf	1,1
  5518                           
  5519                           ;Switch_B1.c: 131: Sw->Touch = 0;
  5520  02C6  0877               	movf	_Sw,w
  5521  02C7  0086               	movwf	6
  5522  02C8  3001               	movlw	1	; select bank2/3
  5523  02C9  0087               	movwf	7
  5524  02CA  1081               	bcf	1,1
  5525                           
  5526                           ;Switch_B1.c: 132: Sw->Debounce = 1;
  5527  02CB  0877               	movf	_Sw,w
  5528  02CC  0086               	movwf	6
  5529  02CD  3001               	movlw	1	; select bank2/3
  5530  02CE  0087               	movwf	7
  5531  02CF  1501               	bsf	1,2
  5532  02D0                     l2661:	
  5533                           
  5534                           ;Switch_B1.c: 133: }
  5535                           ;Switch_B1.c: 134: }
  5536                           ;Switch_B1.c: 136: if (Sw->Touch == 1) {
  5537  02D0  0877               	movf	_Sw,w
  5538  02D1  0086               	movwf	6
  5539  02D2  3001               	movlw	1	; select bank2/3
  5540  02D3  0087               	movwf	7
  5541  02D4  1C81               	btfss	1,1
  5542  02D5  2BA0               	goto	l10389
  5543                           
  5544                           ;Switch_B1.c: 137: if (Sw->Debounce == 0) {
  5545  02D6  0877               	movf	_Sw,w
  5546  02D7  0086               	movwf	6
  5547  02D8  3001               	movlw	1	; select bank2/3
  5548  02D9  0087               	movwf	7
  5549  02DA  1901               	btfsc	1,2
  5550  02DB  2AFE               	goto	l10355
  5551                           
  5552                           ;Switch_B1.c: 138: Sw->DebounceTime++;
  5553  02DC  3001               	movlw	1
  5554  02DD  0020               	movlb	0	; select bank0
  5555  02DE  00EB               	movwf	??_setSw_Main
  5556  02DF  0877               	movf	_Sw,w
  5557  02E0  3E02               	addlw	2
  5558  02E1  0086               	movwf	6
  5559  02E2  3001               	movlw	1	; select bank2/3
  5560  02E3  0087               	movwf	7
  5561  02E4  086B               	movf	??_setSw_Main,w
  5562  02E5  0781               	addwf	1,f
  5563                           
  5564                           ;Switch_B1.c: 139: if (Sw->DebounceTime >= 5) {
  5565  02E6  0877               	movf	_Sw,w
  5566  02E7  3E02               	addlw	2
  5567  02E8  0086               	movwf	6
  5568  02E9  3001               	movlw	1	; select bank2/3
  5569  02EA  0087               	movwf	7
  5570  02EB  3005               	movlw	5
  5571  02EC  0201               	subwf	1,w
  5572  02ED  1C03               	skipc
  5573  02EE  0008               	return
  5574                           
  5575                           ;Switch_B1.c: 140: Sw->DebounceTime = 0;
  5576  02EF  0877               	movf	_Sw,w
  5577  02F0  3E02               	addlw	2
  5578  02F1  0086               	movwf	6
  5579  02F2  3001               	movlw	1	; select bank2/3
  5580  02F3  0087               	movwf	7
  5581  02F4  0181               	clrf	1
  5582                           
  5583                           ;Switch_B1.c: 141: Sw->Debounce = 1;
  5584  02F5  0877               	movf	_Sw,w
  5585  02F6  0086               	movwf	6
  5586  02F7  3001               	movlw	1	; select bank2/3
  5587  02F8  0087               	movwf	7
  5588  02F9  1501               	bsf	1,2
  5589                           
  5590                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  5591  02FA  086D               	movf	setSw_Main@sw,w
  5592  02FB  3192  2269         	fcall	_setDimmerLights_SwOn
  5593                           
  5594                           ;Switch_B1.c: 147: }
  5595                           ;Switch_B1.c: 148: } else {
  5596  02FD  0008               	return
  5597  02FE                     l10355:	
  5598                           
  5599                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  5600  02FE  0877               	movf	_Sw,w
  5601  02FF  0086               	movwf	6
  5602  0300  3001               	movlw	1	; select bank2/3
  5603  0301  0087               	movwf	7
  5604  0302  1981               	btfsc	1,3
  5605  0303  2B30               	goto	l10365
  5606                           
  5607                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  5608  0304  0877               	movf	_Sw,w
  5609  0305  3E03               	addlw	3
  5610  0306  0086               	movwf	6
  5611  0307  3001               	movlw	1	; select bank2/3
  5612  0308  0087               	movwf	7
  5613  0309  3001               	movlw	1
  5614  030A  0781               	addwf	1,f
  5615  030B  3141               	addfsr 1,1
  5616  030C  1803               	skipnc
  5617  030D  0A81               	incf	1,f
  5618                           
  5619                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= 150) {
  5620  030E  0877               	movf	_Sw,w
  5621  030F  3E03               	addlw	3
  5622  0310  0086               	movwf	6
  5623  0311  3001               	movlw	1	; select bank2/3
  5624  0312  0087               	movwf	7
  5625  0313  3F40               	moviw [0]fsr1
  5626  0314  0020               	movlb	0	; select bank0
  5627  0315  00EB               	movwf	??_setSw_Main
  5628  0316  3F41               	moviw [1]fsr1
  5629  0317  00EC               	movwf	??_setSw_Main+1
  5630  0318  3000               	movlw	0
  5631  0319  026C               	subwf	??_setSw_Main+1,w
  5632  031A  3096               	movlw	150
  5633  031B  1903               	skipnz
  5634  031C  026B               	subwf	??_setSw_Main,w
  5635  031D  1C03               	skipc
  5636  031E  0008               	return
  5637                           
  5638                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  5639  031F  0877               	movf	_Sw,w
  5640  0320  3E03               	addlw	3
  5641  0321  0086               	movwf	6
  5642  0322  3001               	movlw	1	; select bank2/3
  5643  0323  0087               	movwf	7
  5644  0324  3000               	movlw	0
  5645  0325  3FC0               	movwi [0]fsr1
  5646  0326  3FC1               	movwi [1]fsr1
  5647                           
  5648                           ;Switch_B1.c: 155: Sw->Hold1 = 1;
  5649  0327  0877               	movf	_Sw,w
  5650  0328  0086               	movwf	6
  5651  0329  3001               	movlw	1	; select bank2/3
  5652  032A  0087               	movwf	7
  5653  032B  1581               	bsf	1,3
  5654                           
  5655                           ;Switch_B1.c: 156: setDimmerLights_AdjOn(sw);
  5656  032C  086D               	movf	setSw_Main@sw,w
  5657  032D  3191  2145         	fcall	_setDimmerLights_AdjOn
  5658                           
  5659                           ;Switch_B1.c: 159: }
  5660                           ;Switch_B1.c: 160: } else {
  5661  032F  0008               	return
  5662  0330                     l10365:	
  5663                           
  5664                           ;Switch_B1.c: 161: if (Sw->Hold2 == 0) {
  5665  0330  0877               	movf	_Sw,w
  5666  0331  0086               	movwf	6
  5667  0332  3001               	movlw	1	; select bank2/3
  5668  0333  0087               	movwf	7
  5669  0334  1A01               	btfsc	1,4
  5670  0335  2B6E               	goto	l10379
  5671                           
  5672                           ;Switch_B1.c: 162: Sw->Hold2Time++;
  5673  0336  0877               	movf	_Sw,w
  5674  0337  3E05               	addlw	5
  5675  0338  0086               	movwf	6
  5676  0339  3001               	movlw	1	; select bank2/3
  5677  033A  0087               	movwf	7
  5678  033B  3001               	movlw	1
  5679  033C  0781               	addwf	1,f
  5680  033D  3141               	addfsr 1,1
  5681  033E  1803               	skipnc
  5682  033F  0A81               	incf	1,f
  5683                           
  5684                           ;Switch_B1.c: 163: if (Sw->Hold2Time >= 150) {
  5685  0340  0877               	movf	_Sw,w
  5686  0341  3E05               	addlw	5
  5687  0342  0086               	movwf	6
  5688  0343  3001               	movlw	1	; select bank2/3
  5689  0344  0087               	movwf	7
  5690  0345  3F40               	moviw [0]fsr1
  5691  0346  0020               	movlb	0	; select bank0
  5692  0347  00EB               	movwf	??_setSw_Main
  5693  0348  3F41               	moviw [1]fsr1
  5694  0349  00EC               	movwf	??_setSw_Main+1
  5695  034A  3000               	movlw	0
  5696  034B  026C               	subwf	??_setSw_Main+1,w
  5697  034C  3096               	movlw	150
  5698  034D  1903               	skipnz
  5699  034E  026B               	subwf	??_setSw_Main,w
  5700  034F  1C03               	skipc
  5701  0350  0008               	return
  5702                           
  5703                           ;Switch_B1.c: 164: Sw->Hold2Time = 0;
  5704  0351  0877               	movf	_Sw,w
  5705  0352  3E05               	addlw	5
  5706  0353  0086               	movwf	6
  5707  0354  3001               	movlw	1	; select bank2/3
  5708  0355  0087               	movwf	7
  5709  0356  3000               	movlw	0
  5710  0357  3FC0               	movwi [0]fsr1
  5711  0358  3FC1               	movwi [1]fsr1
  5712                           
  5713                           ;Switch_B1.c: 165: Sw->Hold2 = 1;
  5714  0359  0877               	movf	_Sw,w
  5715  035A  0086               	movwf	6
  5716  035B  3001               	movlw	1	; select bank2/3
  5717  035C  0087               	movwf	7
  5718  035D  1601               	bsf	1,4
  5719                           
  5720                           ;Switch_B1.c: 168: setRF_Learn(1);
  5721  035E  3001               	movlw	1
  5722  035F  319C  24AC  3182   	fcall	_setRF_Learn
  5723                           
  5724                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5725  0362  0021               	movlb	1	; select bank1
  5726  0363  1EA0               	btfss	_myMain^(0+128),5
  5727  0364  0008               	return
  5728                           
  5729                           ;Switch_B1.c: 171: setBuz(2, 100);
  5730  0365  3064               	movlw	100
  5731  0366  0020               	movlb	0	; select bank0
  5732  0367  00A9               	movwf	setBuz@time
  5733  0368  3000               	movlw	0
  5734  0369  00AA               	movwf	setBuz@time+1
  5735  036A  3002               	movlw	2
  5736  036B  3196  2696         	fcall	_setBuz
  5737                           
  5738                           ;Switch_B1.c: 172: }
  5739                           ;Switch_B1.c: 174: }
  5740                           ;Switch_B1.c: 175: } else {
  5741  036D  0008               	return
  5742  036E                     l10379:	
  5743                           
  5744                           ;Switch_B1.c: 176: if (Sw->Hold3 == 0) {
  5745  036E  0877               	movf	_Sw,w
  5746  036F  0086               	movwf	6
  5747  0370  3001               	movlw	1	; select bank2/3
  5748  0371  0087               	movwf	7
  5749  0372  1A81               	btfsc	1,5
  5750  0373  0008               	return
  5751                           
  5752                           ;Switch_B1.c: 177: Sw->Hold3Time++;
  5753  0374  0877               	movf	_Sw,w
  5754  0375  3E07               	addlw	7
  5755  0376  0086               	movwf	6
  5756  0377  3001               	movlw	1	; select bank2/3
  5757  0378  0087               	movwf	7
  5758  0379  3001               	movlw	1
  5759  037A  0781               	addwf	1,f
  5760  037B  3141               	addfsr 1,1
  5761  037C  1803               	skipnc
  5762  037D  0A81               	incf	1,f
  5763                           
  5764                           ;Switch_B1.c: 178: if (Sw->Hold3Time >= 300) {
  5765  037E  0877               	movf	_Sw,w
  5766  037F  3E07               	addlw	7
  5767  0380  0086               	movwf	6
  5768  0381  3001               	movlw	1	; select bank2/3
  5769  0382  0087               	movwf	7
  5770  0383  3F40               	moviw [0]fsr1
  5771  0384  0020               	movlb	0	; select bank0
  5772  0385  00EB               	movwf	??_setSw_Main
  5773  0386  3F41               	moviw [1]fsr1
  5774  0387  00EC               	movwf	??_setSw_Main+1
  5775  0388  3001               	movlw	1
  5776  0389  026C               	subwf	??_setSw_Main+1,w
  5777  038A  302C               	movlw	44
  5778  038B  1903               	skipnz
  5779  038C  026B               	subwf	??_setSw_Main,w
  5780  038D  1C03               	skipc
  5781  038E  0008               	return
  5782                           
  5783                           ;Switch_B1.c: 179: Sw->Hold3Time = 0;
  5784  038F  0877               	movf	_Sw,w
  5785  0390  3E07               	addlw	7
  5786  0391  0086               	movwf	6
  5787  0392  3001               	movlw	1	; select bank2/3
  5788  0393  0087               	movwf	7
  5789  0394  3000               	movlw	0
  5790  0395  3FC0               	movwi [0]fsr1
  5791  0396  3FC1               	movwi [1]fsr1
  5792                           
  5793                           ;Switch_B1.c: 180: Sw->Hold3 = 1;
  5794  0397  0877               	movf	_Sw,w
  5795  0398  0086               	movwf	6
  5796  0399  3001               	movlw	1	; select bank2/3
  5797  039A  0087               	movwf	7
  5798  039B  1681               	bsf	1,5
  5799                           
  5800                           ;Switch_B1.c: 183: setRF_Learn(0);
  5801  039C  3000               	movlw	0
  5802  039D  319C  24AC         	fcall	_setRF_Learn
  5803                           
  5804                           ;Switch_B1.c: 186: }
  5805                           ;Switch_B1.c: 187: }
  5806                           ;Switch_B1.c: 188: }
  5807                           ;Switch_B1.c: 189: }
  5808                           ;Switch_B1.c: 190: }
  5809                           ;Switch_B1.c: 191: } else {
  5810  039F  0008               	return
  5811  03A0                     l10389:	
  5812                           
  5813                           ;Switch_B1.c: 192: if (Sw->Debounce == 1) {
  5814  03A0  0877               	movf	_Sw,w
  5815  03A1  0086               	movwf	6
  5816  03A2  3001               	movlw	1	; select bank2/3
  5817  03A3  0087               	movwf	7
  5818  03A4  1D01               	btfss	1,2
  5819  03A5  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 193: Sw->DebounceTime++;
  5822  03A6  3001               	movlw	1
  5823  03A7  0020               	movlb	0	; select bank0
  5824  03A8  00EB               	movwf	??_setSw_Main
  5825  03A9  0877               	movf	_Sw,w
  5826  03AA  3E02               	addlw	2
  5827  03AB  0086               	movwf	6
  5828  03AC  3001               	movlw	1	; select bank2/3
  5829  03AD  0087               	movwf	7
  5830  03AE  086B               	movf	??_setSw_Main,w
  5831  03AF  0781               	addwf	1,f
  5832                           
  5833                           ;Switch_B1.c: 194: if (Sw->DebounceTime >= 5) {
  5834  03B0  0877               	movf	_Sw,w
  5835  03B1  3E02               	addlw	2
  5836  03B2  0086               	movwf	6
  5837  03B3  3001               	movlw	1	; select bank2/3
  5838  03B4  0087               	movwf	7
  5839  03B5  3005               	movlw	5
  5840  03B6  0201               	subwf	1,w
  5841  03B7  1C03               	skipc
  5842  03B8  0008               	return
  5843                           
  5844                           ;Switch_B1.c: 195: Sw->DebounceTime = 0;
  5845  03B9  0877               	movf	_Sw,w
  5846  03BA  3E02               	addlw	2
  5847  03BB  0086               	movwf	6
  5848  03BC  3001               	movlw	1	; select bank2/3
  5849  03BD  0087               	movwf	7
  5850  03BE  0181               	clrf	1
  5851                           
  5852                           ;Switch_B1.c: 196: Sw->Debounce = 0;
  5853  03BF  0877               	movf	_Sw,w
  5854  03C0  0086               	movwf	6
  5855  03C1  3001               	movlw	1	; select bank2/3
  5856  03C2  0087               	movwf	7
  5857  03C3  1101               	bcf	1,2
  5858                           
  5859                           ;Switch_B1.c: 197: Sw->Hold1Time = 0;
  5860  03C4  0877               	movf	_Sw,w
  5861  03C5  3E03               	addlw	3
  5862  03C6  0086               	movwf	6
  5863  03C7  3001               	movlw	1	; select bank2/3
  5864  03C8  0087               	movwf	7
  5865  03C9  3000               	movlw	0
  5866  03CA  3FC0               	movwi [0]fsr1
  5867  03CB  3FC1               	movwi [1]fsr1
  5868                           
  5869                           ;Switch_B1.c: 198: Sw->Hold1 = 0;
  5870  03CC  0877               	movf	_Sw,w
  5871  03CD  0086               	movwf	6
  5872  03CE  3001               	movlw	1	; select bank2/3
  5873  03CF  0087               	movwf	7
  5874  03D0  1181               	bcf	1,3
  5875                           
  5876                           ;Switch_B1.c: 199: Sw->Hold2Time = 0;
  5877  03D1  0877               	movf	_Sw,w
  5878  03D2  3E05               	addlw	5
  5879  03D3  0086               	movwf	6
  5880  03D4  3001               	movlw	1	; select bank2/3
  5881  03D5  0087               	movwf	7
  5882  03D6  3000               	movlw	0
  5883  03D7  3FC0               	movwi [0]fsr1
  5884  03D8  3FC1               	movwi [1]fsr1
  5885                           
  5886                           ;Switch_B1.c: 200: Sw->Hold2 = 0;
  5887  03D9  0877               	movf	_Sw,w
  5888  03DA  0086               	movwf	6
  5889  03DB  3001               	movlw	1	; select bank2/3
  5890  03DC  0087               	movwf	7
  5891  03DD  1201               	bcf	1,4
  5892                           
  5893                           ;Switch_B1.c: 201: Sw->Hold3Time = 0;
  5894  03DE  0877               	movf	_Sw,w
  5895  03DF  3E07               	addlw	7
  5896  03E0  0086               	movwf	6
  5897  03E1  3001               	movlw	1	; select bank2/3
  5898  03E2  0087               	movwf	7
  5899  03E3  3000               	movlw	0
  5900  03E4  3FC0               	movwi [0]fsr1
  5901  03E5  3FC1               	movwi [1]fsr1
  5902                           
  5903                           ;Switch_B1.c: 202: Sw->Hold3 = 0;
  5904  03E6  0877               	movf	_Sw,w
  5905  03E7  0086               	movwf	6
  5906  03E8  3001               	movlw	1	; select bank2/3
  5907  03E9  0087               	movwf	7
  5908  03EA  1281               	bcf	1,5
  5909                           
  5910                           ;Switch_B1.c: 204: if (SwDetect.Error == 0) {
  5911  03EB  0021               	movlb	1	; select bank1
  5912  03EC  1851               	btfsc	_SwDetect^(0+128),0
  5913  03ED  2BF3               	goto	l10415
  5914                           
  5915                           ;Switch_B1.c: 205: setDimmerLights_SwOff(sw);
  5916  03EE  0020               	movlb	0	; select bank0
  5917  03EF  086D               	movf	setSw_Main@sw,w
  5918  03F0  3194  2404  3182   	fcall	_setDimmerLights_SwOff
  5919  03F3                     l10415:	
  5920                           
  5921                           ;Switch_B1.c: 206: }
  5922                           ;Switch_B1.c: 209: setRF_Learn(0);
  5923  03F3  3000               	movlw	0
  5924  03F4  319C  24AC         	fcall	_setRF_Learn
  5925                           
  5926                           ;Switch_B1.c: 211: }
  5927                           ;Switch_B1.c: 212: }
  5928                           ;Switch_B1.c: 213: }
  5929                           ;Switch_B1.c: 214: } else {
  5930  03F6  0008               	return
  5931  03F7                     l2659:	
  5932                           
  5933                           ;Switch_B1.c: 215: if (myMain.PowerON == 1) {
  5934  03F7  0021               	movlb	1	; select bank1
  5935  03F8  1C20               	btfss	_myMain^(0+128),0
  5936  03F9  0008               	return
  5937                           
  5938                           ;Switch_B1.c: 216: Sw->Enable = 1;
  5939  03FA  0877               	movf	_Sw,w
  5940  03FB  0086               	movwf	6
  5941  03FC  3001               	movlw	1	; select bank2/3
  5942  03FD  0087               	movwf	7
  5943  03FE  1401               	bsf	1,0
  5944  03FF  0008               	return
  5945  0400                     __end_of_setSw_Main:	
  5946                           
  5947                           	psect	text14
  5948  1CAC                     __ptext14:	
  5949 ;; *************** function _setRF_Learn *****************
  5950 ;; Defined at:
  5951 ;;		line 23 in file "../src/RF_Control_B1.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  command         1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  command         1    1[BANK0 ] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5969 ;;Total ram usage:        2 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    5
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_setSw_Main
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           
  5980                           ;psect for function _setRF_Learn
  5981  1CAC                     _setRF_Learn:	
  5982                           
  5983                           ;incstack = 0
  5984                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5985                           ;setRF_Learn@command stored from wreg
  5986  1CAC  0020               	movlb	0	; select bank0
  5987  1CAD  00A1               	movwf	setRF_Learn@command
  5988                           
  5989                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5990  1CAE  0821               	movf	setRF_Learn@command,w
  5991  1CAF  3A01               	xorlw	1
  5992  1CB0  3000               	movlw	0
  5993  1CB1  1903               	skipnz
  5994  1CB2  3001               	movlw	1
  5995  1CB3  00A0               	movwf	??_setRF_Learn
  5996  1CB4  0EA0               	swapf	??_setRF_Learn,f
  5997  1CB5  0DA0               	rlf	??_setRF_Learn,f
  5998  1CB6  0DA0               	rlf	??_setRF_Learn,f
  5999  1CB7  0021               	movlb	1	; select bank1
  6000  1CB8  083A               	movf	_RF1^(0+128),w
  6001  1CB9  0020               	movlb	0	; select bank0
  6002  1CBA  0620               	xorwf	??_setRF_Learn,w
  6003  1CBB  39BF               	andlw	-65
  6004  1CBC  0620               	xorwf	??_setRF_Learn,w
  6005  1CBD  0021               	movlb	1	; select bank1
  6006  1CBE  00BA               	movwf	_RF1^(0+128)
  6007  1CBF  0008               	return
  6008  1CC0                     __end_of_setRF_Learn:	
  6009                           
  6010                           	psect	text15
  6011  1145                     __ptext15:	
  6012 ;; *************** function _setDimmerLights_AdjOn *****************
  6013 ;; Defined at:
  6014 ;;		line 453 in file "../src/Dimmer_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;  sw              1    wreg     unsigned char 
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;  sw              1   12[BANK0 ] unsigned char 
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;Total ram usage:        1 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    7
  6035 ;; This function calls:
  6036 ;;		_DimmerLightsPointSelect
  6037 ;;		_getDimmerLights_Allow_Condition
  6038 ;; This function is called by:
  6039 ;;		_setSw_Main
  6040 ;; This function uses a non-reentrant model
  6041 ;;
  6042                           
  6043                           
  6044                           ;psect for function _setDimmerLights_AdjOn
  6045  1145                     _setDimmerLights_AdjOn:	
  6046                           
  6047                           ;incstack = 0
  6048                           ; Regs used in _setDimmerLights_AdjOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6049                           ;setDimmerLights_AdjOn@sw stored from wreg
  6050  1145  0020               	movlb	0	; select bank0
  6051  1146  00AC               	movwf	setDimmerLights_AdjOn@sw
  6052                           
  6053                           ;Dimmer_B1.c: 454: DimmerLightsPointSelect(sw);
  6054  1147  082C               	movf	setDimmerLights_AdjOn@sw,w
  6055  1148  319B  23FC  3191   	fcall	_DimmerLightsPointSelect
  6056                           
  6057                           ;Dimmer_B1.c: 464: if (DimmerLights->Trigger == 0 && getDimmerLights_Allow_Condition(sw)
      +                           == 0) {
  6058  114B  0020               	movlb	0	; select bank0
  6059  114C  086F               	movf	_DimmerLights,w
  6060  114D  3E0A               	addlw	10
  6061  114E  0086               	movwf	6
  6062  114F  3001               	movlw	1	; select bank2/3
  6063  1150  0087               	movwf	7
  6064  1151  1881               	btfsc	1,1
  6065  1152  0008               	return
  6066  1153  082C               	movf	setDimmerLights_AdjOn@sw,w
  6067  1154  3193  236F  3191   	fcall	_getDimmerLights_Allow_Condition
  6068  1157  3800               	iorlw	0
  6069  1158  1D03               	skipz
  6070  1159  0008               	return
  6071                           
  6072                           ;Dimmer_B1.c: 465: if (DimmerLights->SwFlag == 1) {
  6073  115A  0020               	movlb	0	; select bank0
  6074  115B  086F               	movf	_DimmerLights,w
  6075  115C  3E0B               	addlw	11
  6076  115D  0086               	movwf	6
  6077  115E  3001               	movlw	1	; select bank2/3
  6078  115F  0087               	movwf	7
  6079  1160  1C81               	btfss	1,1
  6080  1161  0008               	return
  6081                           
  6082                           ;Dimmer_B1.c: 466: DimmerLights->SwAdj = 1;
  6083  1162  086F               	movf	_DimmerLights,w
  6084  1163  3E0B               	addlw	11
  6085  1164  0086               	movwf	6
  6086  1165  3001               	movlw	1	; select bank2/3
  6087  1166  0087               	movwf	7
  6088  1167  1501               	bsf	1,2
  6089                           
  6090                           ;Dimmer_B1.c: 467: DimmerLights->Status = 1;
  6091  1168  086F               	movf	_DimmerLights,w
  6092  1169  3E02               	addlw	2
  6093  116A  0086               	movwf	6
  6094  116B  3001               	movlw	1	; select bank2/3
  6095  116C  0087               	movwf	7
  6096  116D  1481               	bsf	1,1
  6097                           
  6098                           ;Dimmer_B1.c: 469: DimmerLights->TriggerAdj = 1;
  6099  116E  086F               	movf	_DimmerLights,w
  6100  116F  3E0A               	addlw	10
  6101  1170  0086               	movwf	6
  6102  1171  3001               	movlw	1	; select bank2/3
  6103  1172  0087               	movwf	7
  6104  1173  1581               	bsf	1,3
  6105                           
  6106                           ;Dimmer_B1.c: 470: DimmerLights->SwitchAdj = 1;
  6107  1174  086F               	movf	_DimmerLights,w
  6108  1175  3E0A               	addlw	10
  6109  1176  0086               	movwf	6
  6110  1177  3001               	movlw	1	; select bank2/3
  6111  1178  0087               	movwf	7
  6112  1179  1501               	bsf	1,2
  6113  117A  0008               	return
  6114  117B                     __end_of_setDimmerLights_AdjOn:	
  6115                           
  6116                           	psect	text16
  6117  1DF4                     __ptext16:	
  6118 ;; *************** function _getSw_KeyStatus *****************
  6119 ;; Defined at:
  6120 ;;		line 222 in file "../src/Switch_B1.c"
  6121 ;; Parameters:    Size  Location     Type
  6122 ;;  sw              1    wreg     unsigned char 
  6123 ;; Auto vars:     Size  Location     Type
  6124 ;;  sw              1    4[BANK0 ] unsigned char 
  6125 ;;  status          1    3[BANK0 ] unsigned char 
  6126 ;; Return value:  Size  Location     Type
  6127 ;;                  1    wreg      unsigned char 
  6128 ;; Registers used:
  6129 ;;		wreg, status,2
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6138 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6139 ;;Total ram usage:        5 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		Nothing
  6144 ;; This function is called by:
  6145 ;;		_setSw_Main
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           
  6150                           ;psect for function _getSw_KeyStatus
  6151  1DF4                     _getSw_KeyStatus:	
  6152                           
  6153                           ;incstack = 0
  6154                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6155                           ;getSw_KeyStatus@sw stored from wreg
  6156  1DF4  0020               	movlb	0	; select bank0
  6157  1DF5  00A4               	movwf	getSw_KeyStatus@sw
  6158                           
  6159                           ;Switch_B1.c: 223: char status = 0;
  6160  1DF6  01A3               	clrf	getSw_KeyStatus@status
  6161                           
  6162                           ;Switch_B1.c: 235: if (sw == 1) {
  6163  1DF7  0824               	movf	getSw_KeyStatus@sw,w
  6164  1DF8  3A01               	xorlw	1
  6165  1DF9  1D03               	skipz
  6166  1DFA  2E03               	goto	l9827
  6167                           
  6168                           ;Switch_B1.c: 236: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6169  1DFB  01A1               	clrf	_getSw_KeyStatus$6247
  6170  1DFC  0AA1               	incf	_getSw_KeyStatus$6247,f
  6171  1DFD  1F0C               	btfss	12,6	;volatile
  6172  1DFE  1A0C               	btfsc	12,4	;volatile
  6173  1DFF  2E01               	goto	l9825
  6174  1E00  01A1               	clrf	_getSw_KeyStatus$6247
  6175  1E01                     l9825:	
  6176  1E01  0821               	movf	_getSw_KeyStatus$6247,w
  6177  1E02  2E0E               	goto	L2
  6178  1E03                     l9827:	
  6179                           ;Switch_B1.c: 237: } else if (sw == 2) {
  6180                           
  6181  1E03  0824               	movf	getSw_KeyStatus@sw,w
  6182  1E04  3A02               	xorlw	2
  6183  1E05  1D03               	skipz
  6184  1E06  2E11               	goto	l9837
  6185                           
  6186                           ;Switch_B1.c: 238: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6187  1E07  01A2               	clrf	_getSw_KeyStatus$6248
  6188  1E08  0AA2               	incf	_getSw_KeyStatus$6248,f
  6189  1E09  1C0C               	btfss	12,0	;volatile
  6190  1E0A  188D               	btfsc	13,1	;volatile
  6191  1E0B  2E0D               	goto	l9835
  6192  1E0C  01A2               	clrf	_getSw_KeyStatus$6248
  6193  1E0D                     l9835:	
  6194  1E0D  0822               	movf	_getSw_KeyStatus$6248,w
  6195  1E0E                     L2:	
  6196  1E0E  00A0               	movwf	??_getSw_KeyStatus
  6197  1E0F  0820               	movf	??_getSw_KeyStatus,w
  6198  1E10  00A3               	movwf	getSw_KeyStatus@status
  6199  1E11                     l9837:	
  6200                           
  6201                           ;Switch_B1.c: 239: }
  6202                           ;Switch_B1.c: 246: return status;
  6203  1E11  0823               	movf	getSw_KeyStatus@status,w
  6204  1E12  0008               	return
  6205  1E13                     __end_of_getSw_KeyStatus:	
  6206                           
  6207                           	psect	text17
  6208  1C98                     __ptext17:	
  6209 ;; *************** function _SwPointSelect *****************
  6210 ;; Defined at:
  6211 ;;		line 25 in file "../src/Switch_B1.c"
  6212 ;; Parameters:    Size  Location     Type
  6213 ;;  sw              1    wreg     unsigned char 
  6214 ;; Auto vars:     Size  Location     Type
  6215 ;;  sw              1    1[BANK0 ] unsigned char 
  6216 ;; Return value:  Size  Location     Type
  6217 ;;		None               void
  6218 ;; Registers used:
  6219 ;;		wreg
  6220 ;; Tracked objects:
  6221 ;;		On entry : 0/0
  6222 ;;		On exit  : 0/0
  6223 ;;		Unchanged: 0/0
  6224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6229 ;;Total ram usage:        2 bytes
  6230 ;; Hardware stack levels used:    1
  6231 ;; Hardware stack levels required when called:    5
  6232 ;; This function calls:
  6233 ;;		Nothing
  6234 ;; This function is called by:
  6235 ;;		_setSw_Main
  6236 ;; This function uses a non-reentrant model
  6237 ;;
  6238                           
  6239                           
  6240                           ;psect for function _SwPointSelect
  6241  1C98                     _SwPointSelect:	
  6242                           
  6243                           ;incstack = 0
  6244                           ; Regs used in _SwPointSelect: [wreg]
  6245                           ;SwPointSelect@sw stored from wreg
  6246  1C98  0020               	movlb	0	; select bank0
  6247  1C99  00A1               	movwf	SwPointSelect@sw
  6248                           
  6249                           ;Switch_B1.c: 28: if (sw == 1) {
  6250  1C9A  0821               	movf	SwPointSelect@sw,w
  6251  1C9B  3A01               	xorlw	1
  6252  1C9C  1D03               	skipz
  6253  1C9D  2CA3               	goto	l9811
  6254                           
  6255                           ;Switch_B1.c: 29: Sw = &Sw1;
  6256  1C9E  30CF               	movlw	_Sw1& (0+255)
  6257  1C9F  00A0               	movwf	??_SwPointSelect
  6258  1CA0  0820               	movf	??_SwPointSelect,w
  6259  1CA1  00F7               	movwf	_Sw
  6260                           
  6261                           ;Switch_B1.c: 30: }
  6262  1CA2  0008               	return
  6263  1CA3                     l9811:	
  6264                           
  6265                           ;Switch_B1.c: 33: else if (sw == 2) {
  6266  1CA3  0821               	movf	SwPointSelect@sw,w
  6267  1CA4  3A02               	xorlw	2
  6268  1CA5  1D03               	skipz
  6269  1CA6  0008               	return
  6270                           
  6271                           ;Switch_B1.c: 34: Sw = &Sw2;
  6272  1CA7  30D8               	movlw	_Sw2& (0+255)
  6273  1CA8  00A0               	movwf	??_SwPointSelect
  6274  1CA9  0820               	movf	??_SwPointSelect,w
  6275  1CAA  00F7               	movwf	_Sw
  6276  1CAB  0008               	return
  6277  1CAC                     __end_of_SwPointSelect:	
  6278                           
  6279                           	psect	text18
  6280  1B17                     __ptext18:	
  6281 ;; *************** function _Switch_Initialization *****************
  6282 ;; Defined at:
  6283 ;;		line 46 in file "../src/Switch_B1.c"
  6284 ;; Parameters:    Size  Location     Type
  6285 ;;		None
  6286 ;; Auto vars:     Size  Location     Type
  6287 ;;		None
  6288 ;; Return value:  Size  Location     Type
  6289 ;;		None               void
  6290 ;; Registers used:
  6291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6292 ;; Tracked objects:
  6293 ;;		On entry : 0/0
  6294 ;;		On exit  : 0/0
  6295 ;;		Unchanged: 0/0
  6296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;Total ram usage:        0 bytes
  6302 ;; Hardware stack levels used:    1
  6303 ;; Hardware stack levels required when called:    8
  6304 ;; This function calls:
  6305 ;;		_TouchPower
  6306 ;;		_setSw_Initialization
  6307 ;; This function is called by:
  6308 ;;		_main
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           
  6313                           ;psect for function _Switch_Initialization
  6314  1B17                     _Switch_Initialization:	
  6315                           
  6316                           ;Switch_B1.c: 47: TouchPower();
  6317                           
  6318                           ;incstack = 0
  6319                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6320  1B17  3190  2066  319B   	fcall	_TouchPower
  6321                           
  6322                           ;Switch_B1.c: 49: WPUB1 = 0;
  6323  1B1A  0024               	movlb	4	; select bank4
  6324  1B1B  108D               	bcf	13,1	;volatile
  6325                           
  6326                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6327  1B1C  3001               	movlw	1
  6328  1B1D  319A  2287  319B   	fcall	_setSw_Initialization
  6329                           
  6330                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6331  1B20  3002               	movlw	2
  6332  1B21  319A  2287         	fcall	_setSw_Initialization
  6333  1B23  0008               	return
  6334  1B24                     __end_of_Switch_Initialization:	
  6335                           
  6336                           	psect	text19
  6337  1A87                     __ptext19:	
  6338 ;; *************** function _setSw_Initialization *****************
  6339 ;; Defined at:
  6340 ;;		line 93 in file "../src/Switch_B1.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  sw              1    wreg     unsigned char 
  6343 ;; Auto vars:     Size  Location     Type
  6344 ;;  sw              1    4[BANK0 ] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;		None               void
  6347 ;; Registers used:
  6348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;Total ram usage:        1 bytes
  6359 ;; Hardware stack levels used:    1
  6360 ;; Hardware stack levels required when called:    7
  6361 ;; This function calls:
  6362 ;;		_setLED
  6363 ;; This function is called by:
  6364 ;;		_Switch_Initialization
  6365 ;; This function uses a non-reentrant model
  6366 ;;
  6367                           
  6368                           
  6369                           ;psect for function _setSw_Initialization
  6370  1A87                     _setSw_Initialization:	
  6371                           
  6372                           ;incstack = 0
  6373                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6374                           ;setSw_Initialization@sw stored from wreg
  6375  1A87  0020               	movlb	0	; select bank0
  6376  1A88  00A4               	movwf	setSw_Initialization@sw
  6377                           
  6378                           ;Switch_B1.c: 94: setLED(sw, 1);
  6379  1A89  01A2               	clrf	setLED@command
  6380  1A8A  0AA2               	incf	setLED@command,f
  6381  1A8B  0824               	movf	setSw_Initialization@sw,w
  6382  1A8C  3195  2597         	fcall	_setLED
  6383  1A8E  0008               	return
  6384  1A8F                     __end_of_setSw_Initialization:	
  6385                           
  6386                           	psect	text20
  6387  1066                     __ptext20:	
  6388 ;; *************** function _TouchPower *****************
  6389 ;; Defined at:
  6390 ;;		line 10 in file "../src/Switch_B1.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;		None
  6395 ;; Return value:  Size  Location     Type
  6396 ;;		None               void
  6397 ;; Registers used:
  6398 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6399 ;; Tracked objects:
  6400 ;;		On entry : 0/0
  6401 ;;		On exit  : 0/0
  6402 ;;		Unchanged: 0/0
  6403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;Total ram usage:        0 bytes
  6409 ;; Hardware stack levels used:    1
  6410 ;; Hardware stack levels required when called:    6
  6411 ;; This function calls:
  6412 ;;		_Timeout_Counter
  6413 ;;		_set_TimeoutCleared
  6414 ;; This function is called by:
  6415 ;;		_Switch_Initialization
  6416 ;;		_Switch_Main
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _TouchPower
  6422  1066                     _TouchPower:	
  6423                           
  6424                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6425                           
  6426                           ;incstack = 0
  6427                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6428  1066  0020               	movlb	0	; select bank0
  6429  1067  1A8E               	btfsc	14,5	;volatile
  6430  1068  0008               	return
  6431                           
  6432                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6433  1069  0021               	movlb	1	; select bank1
  6434  106A  1C20               	btfss	_myMain^(0+128),0
  6435  106B  0008               	return
  6436  106C  2872               	goto	l10321
  6437  106D                     l2637:	
  6438                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6439                           
  6440                           
  6441                           ;Switch_B1.c: 14: RC5 = 1;
  6442  106D  0020               	movlb	0	; select bank0
  6443  106E  168E               	bsf	14,5	;volatile
  6444                           
  6445                           ;Switch_B1.c: 15: Timeout_Counter();
  6446  106F  319C  24C0  3190   	fcall	_Timeout_Counter
  6447  1072                     l10321:	
  6448  1072  0020               	movlb	0	; select bank0
  6449  1073  1A8E               	btfsc	14,5	;volatile
  6450  1074  2878               	goto	l10325
  6451  1075  0021               	movlb	1	; select bank1
  6452  1076  1D2B               	btfss	(_myMain^(0+128)+11),2
  6453  1077  286D               	goto	l2637
  6454  1078                     l10325:	
  6455                           
  6456                           ;Switch_B1.c: 16: }
  6457                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6458  1078  319A  222C         	fcall	_set_TimeoutCleared
  6459  107A  0008               	return
  6460  107B                     __end_of_TouchPower:	
  6461                           
  6462                           	psect	text21
  6463  1A16                     __ptext21:	
  6464 ;; *************** function _RF_Main *****************
  6465 ;; Defined at:
  6466 ;;		line 16 in file "../src/RF_Control_B1.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;		None               void
  6473 ;; Registers used:
  6474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6475 ;; Tracked objects:
  6476 ;;		On entry : 0/0
  6477 ;;		On exit  : 0/0
  6478 ;;		Unchanged: 0/0
  6479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;Total ram usage:        0 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:   14
  6487 ;; This function calls:
  6488 ;;		_setRF_Main
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           
  6495                           ;psect for function _RF_Main
  6496  1A16                     _RF_Main:	
  6497                           
  6498                           ;RF_Control_B1.c: 18: setRF_Main();
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6502  1A16  318F  2725         	fcall	_setRF_Main
  6503  1A18  0008               	return
  6504  1A19                     __end_of_RF_Main:	
  6505                           
  6506                           	psect	text22
  6507  0F25                     __ptext22:	
  6508 ;; *************** function _setRF_Main *****************
  6509 ;; Defined at:
  6510 ;;		line 52 in file "../src/RF_Control_B1.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  error           1    2[BANK4 ] unsigned char 
  6515 ;;  Receive_OK      1    1[BANK4 ] unsigned char 
  6516 ;;  loop_f          1    0[BANK4 ] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;		None               void
  6519 ;; Registers used:
  6520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6527 ;;      Locals:         0       0       0       0       0       3       0       0       0       0       0       0       
      +0       0
  6528 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Totals:         0       0       1       0       0       3       0       0       0       0       0       0       
      +0       0
  6530 ;;Total ram usage:        4 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; Hardware stack levels required when called:   13
  6533 ;; This function calls:
  6534 ;;		_CC2500_RxData
  6535 ;;		_CC2500_TxData
  6536 ;;		_CC2500_WriteCommand
  6537 ;;		_RF_RxDisable
  6538 ;;		_getBuz_GO
  6539 ;;		_getMain_All_Error_Status
  6540 ;;		_getRF_KeyStatus
  6541 ;;		_getRxData
  6542 ;; This function is called by:
  6543 ;;		_RF_Main
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           
  6548                           ;psect for function _setRF_Main
  6549  0F25                     _setRF_Main:	
  6550                           
  6551                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6552                           
  6553                           ;incstack = 0
  6554                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6555  0F25  0024               	movlb	4	; select bank4
  6556  0F26  01E5               	clrf	setRF_Main@loop_f^(0+512)
  6557  0F27  01E6               	clrf	setRF_Main@Receive_OK^(0+512)
  6558  0F28  01E7               	clrf	setRF_Main@error^(0+512)
  6559                           
  6560                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6561  0F29  0021               	movlb	1	; select bank1
  6562  0F2A  1C3A               	btfss	_RF1^(0+128),0
  6563  0F2B  2FFC               	goto	l2238
  6564                           
  6565                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6566  0F2C  319B  2380  318F   	fcall	_getBuz_GO
  6567  0F2F  0020               	movlb	0	; select bank0
  6568  0F30  0821               	movf	?_getBuz_GO+1,w
  6569  0F31  0420               	iorwf	?_getBuz_GO,w
  6570  0F32  1D03               	skipz
  6571  0F33  0008               	return
  6572                           
  6573                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6574  0F34  3000               	movlw	0
  6575  0F35  3188  2000  318F   	fcall	_getMain_All_Error_Status
  6576  0F38  3800               	iorlw	0
  6577  0F39  1D03               	skipz
  6578  0F3A  2F4C               	goto	l2240
  6579                           
  6580                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6581  0F3B  319B  2391  318F   	fcall	_getRF_KeyStatus
  6582  0F3E  3A01               	xorlw	1
  6583  0F3F  3000               	movlw	0
  6584  0F40  1903               	skipnz
  6585  0F41  3001               	movlw	1
  6586  0F42  0021               	movlb	1	; select bank1
  6587  0F43  00ED               	movwf	??_setRF_Main^(0+128)
  6588  0F44  0CED               	rrf	??_setRF_Main^(0+128),f
  6589  0F45  0CED               	rrf	??_setRF_Main^(0+128),f
  6590  0F46  083A               	movf	_RF1^(0+128),w
  6591  0F47  066D               	xorwf	??_setRF_Main^(0+128),w
  6592  0F48  397F               	andlw	-129
  6593  0F49  066D               	xorwf	??_setRF_Main^(0+128),w
  6594  0F4A  00BA               	movwf	_RF1^(0+128)
  6595                           
  6596                           ;RF_Control_B1.c: 65: } else {
  6597  0F4B  2F4E               	goto	l2241
  6598  0F4C                     l2240:	
  6599                           
  6600                           ;RF_Control_B1.c: 66: RF1.Key = 0;
  6601  0F4C  0021               	movlb	1	; select bank1
  6602  0F4D  13BA               	bcf	_RF1^(0+128),7
  6603  0F4E                     l2241:	
  6604                           
  6605                           ;RF_Control_B1.c: 67: }
  6606                           ;RF_Control_B1.c: 69: if (RF1.Key == 1 && RF1.Learn == 0) {
  6607  0F4E  1BBA               	btfsc	_RF1^(0+128),7
  6608  0F4F  1B3A               	btfsc	_RF1^(0+128),6
  6609  0F50  2F56               	goto	l2242
  6610                           
  6611                           ;RF_Control_B1.c: 70: RF1.Count = 0;
  6612  0F51  01BC               	clrf	(_RF1^(0+128)+2)
  6613  0F52  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6614                           
  6615                           ;RF_Control_B1.c: 71: RF1.Run = 1;
  6616  0F53  14BB               	bsf	(_RF1^(0+128)+1),1
  6617                           
  6618                           ;RF_Control_B1.c: 72: RF1.RxStatus = 0;
  6619  0F54  11BA               	bcf	_RF1^(0+128),3
  6620                           
  6621                           ;RF_Control_B1.c: 73: } else {
  6622  0F55  0008               	return
  6623  0F56                     l2242:	
  6624                           
  6625                           ;RF_Control_B1.c: 74: if (RF1.Run == 1 && RF1.Learn == 0) {
  6626  0F56  18BB               	btfsc	(_RF1^(0+128)+1),1
  6627  0F57  1B3A               	btfsc	_RF1^(0+128),6
  6628  0F58  2F6D               	goto	l10239
  6629                           
  6630                           ;RF_Control_B1.c: 75: RF1.Count++;
  6631  0F59  3001               	movlw	1
  6632  0F5A  07BC               	addwf	(_RF1^(0+128)+2),f
  6633  0F5B  3000               	movlw	0
  6634  0F5C  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6635                           
  6636                           ;RF_Control_B1.c: 76: if (RF1.Count == RF1.RunTime) {
  6637  0F5D  3002               	movlw	2
  6638  0F5E  3EBA               	addlw	_RF1& (0+255)
  6639  0F5F  0086               	movwf	6
  6640  0F60  0187               	clrf	7
  6641  0F61  3F40               	moviw [0]fsr1
  6642  0F62  0641               	xorwf	(_RF1^(0+128)+7),w
  6643  0F63  1D03               	skipz
  6644  0F64  2F67               	goto	u11445
  6645  0F65  3F41               	moviw [1]fsr1
  6646  0F66  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6647  0F67                     u11445:	
  6648  0F67  1D03               	skipz
  6649  0F68  2FC9               	goto	l10291
  6650                           
  6651                           ;RF_Control_B1.c: 77: RF1.Count = 0;
  6652  0F69  01BC               	clrf	(_RF1^(0+128)+2)
  6653  0F6A  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6654                           
  6655                           ;RF_Control_B1.c: 78: RF1.Run = 0;
  6656  0F6B  10BB               	bcf	(_RF1^(0+128)+1),1
  6657                           
  6658                           ;RF_Control_B1.c: 79: }
  6659                           ;RF_Control_B1.c: 80: } else {
  6660  0F6C  2FC9               	goto	l10291
  6661  0F6D                     l10239:	
  6662                           
  6663                           ;RF_Control_B1.c: 81: RF1.Count = 0;
  6664  0F6D  01BC               	clrf	(_RF1^(0+128)+2)
  6665  0F6E  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6666                           
  6667                           ;RF_Control_B1.c: 82: RF1.Run = 0;
  6668  0F6F  10BB               	bcf	(_RF1^(0+128)+1),1
  6669                           
  6670                           ;RF_Control_B1.c: 84: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6671  0F70  193A               	btfsc	_RF1^(0+128),2
  6672  0F71  1B3A               	btfsc	_RF1^(0+128),6
  6673  0F72  2F81               	goto	l2247
  6674                           
  6675                           ;RF_Control_B1.c: 85: RF1.TransceiveGO = 0;
  6676  0F73  113A               	bcf	_RF1^(0+128),2
  6677                           
  6678                           ;RF_Control_B1.c: 86: RF1.RxStatus = 0;
  6679  0F74  11BA               	bcf	_RF1^(0+128),3
  6680                           
  6681                           ;RF_Control_B1.c: 87: RF1.ReceiveGO = 0;
  6682  0F75  10BA               	bcf	_RF1^(0+128),1
  6683                           
  6684                           ;RF_Control_B1.c: 88: RF1.RunTime = 5;
  6685  0F76  3005               	movlw	5
  6686  0F77  00C1               	movwf	(_RF1^(0+128)+7)
  6687  0F78  3000               	movlw	0
  6688  0F79  00C2               	movwf	(_RF1^(0+128)+8)
  6689                           
  6690                           ;RF_Control_B1.c: 92: RF_RxDisable();
  6691  0F7A  319B  2341  318F   	fcall	_RF_RxDisable
  6692                           
  6693                           ;RF_Control_B1.c: 99: CC2500_TxData();
  6694  0F7D  3189  2155  318F   	fcall	_CC2500_TxData
  6695                           
  6696                           ;RF_Control_B1.c: 101: } else {
  6697  0F80  2FC9               	goto	l10291
  6698  0F81                     l2247:	
  6699                           
  6700                           ;RF_Control_B1.c: 103: if (RF1.RxStatus == 1) {
  6701  0F81  1DBA               	btfss	_RF1^(0+128),3
  6702  0F82  2FB8               	goto	l2249
  6703                           
  6704                           ;RF_Control_B1.c: 105: CC2500_RxData();
  6705  0F83  3188  2033  318F   	fcall	_CC2500_RxData
  6706                           
  6707                           ;RF_Control_B1.c: 107: if (RF1.ReceiveGO == 1) {
  6708  0F86  0021               	movlb	1	; select bank1
  6709  0F87  1CBA               	btfss	_RF1^(0+128),1
  6710  0F88  2FC9               	goto	l10291
  6711                           
  6712                           ;RF_Control_B1.c: 108: RF1.ReceiveGO = 0;
  6713  0F89  10BA               	bcf	_RF1^(0+128),1
  6714                           
  6715                           ;RF_Control_B1.c: 109: RF1.Correction = 0;
  6716  0F8A  12BB               	bcf	(_RF1^(0+128)+1),5
  6717                           
  6718                           ;RF_Control_B1.c: 110: RF1.CorrectionCounter = 0;
  6719  0F8B  01C4               	clrf	(_RF1^(0+128)+10)
  6720  0F8C  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6721                           
  6722                           ;RF_Control_B1.c: 121: getRxData();
  6723  0F8D  318B  23F2  318F   	fcall	_getRxData
  6724                           
  6725                           ;RF_Control_B1.c: 122: RF1.Run = 1;
  6726  0F90  0021               	movlb	1	; select bank1
  6727  0F91  14BB               	bsf	(_RF1^(0+128)+1),1
  6728                           
  6729                           ;RF_Control_B1.c: 124: if (RF1.Checked == 1) {
  6730  0F92  1DBB               	btfss	(_RF1^(0+128)+1),3
  6731  0F93  2FA1               	goto	l10275
  6732                           
  6733                           ;RF_Control_B1.c: 125: if (RF1.RunTime > 5) {
  6734  0F94  3000               	movlw	0
  6735  0F95  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6736  0F96  3006               	movlw	6
  6737  0F97  1903               	skipnz
  6738  0F98  0241               	subwf	(_RF1^(0+128)+7),w
  6739  0F99  1C03               	skipc
  6740  0F9A  2F9F               	goto	l10273
  6741                           
  6742                           ;RF_Control_B1.c: 126: RF1.RunTime = 5;
  6743  0F9B  3005               	movlw	5
  6744  0F9C  00C1               	movwf	(_RF1^(0+128)+7)
  6745  0F9D  3000               	movlw	0
  6746  0F9E  00C2               	movwf	(_RF1^(0+128)+8)
  6747  0F9F                     l10273:	
  6748                           
  6749                           ;RF_Control_B1.c: 127: }
  6750                           ;RF_Control_B1.c: 128: RF1.CheckCount = 0;
  6751  0F9F  01BE               	clrf	(_RF1^(0+128)+4)
  6752                           
  6753                           ;RF_Control_B1.c: 129: } else {
  6754  0FA0  2FC9               	goto	l10291
  6755  0FA1                     l10275:	
  6756                           
  6757                           ;RF_Control_B1.c: 130: RF1.CheckCount++;
  6758  0FA1  3001               	movlw	1
  6759  0FA2  00ED               	movwf	??_setRF_Main^(0+128)
  6760  0FA3  086D               	movf	??_setRF_Main^(0+128),w
  6761  0FA4  07BE               	addwf	(_RF1^(0+128)+4),f
  6762                           
  6763                           ;RF_Control_B1.c: 131: if (RF1.CheckCount == 2) {
  6764  0FA5  083E               	movf	(_RF1^(0+128)+4),w
  6765  0FA6  3A02               	xorlw	2
  6766  0FA7  1D03               	skipz
  6767  0FA8  2FC9               	goto	l10291
  6768                           
  6769                           ;RF_Control_B1.c: 132: RF1.CheckCount = 0;
  6770  0FA9  01BE               	clrf	(_RF1^(0+128)+4)
  6771                           
  6772                           ;RF_Control_B1.c: 133: RF1.CheckedCounter = 0;
  6773  0FAA  01BF               	clrf	(_RF1^(0+128)+5)
  6774  0FAB  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6775                           
  6776                           ;RF_Control_B1.c: 135: if (RF1.RunTime < (5 * 20)) {
  6777  0FAC  3000               	movlw	0
  6778  0FAD  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6779  0FAE  3064               	movlw	100
  6780  0FAF  1903               	skipnz
  6781  0FB0  0241               	subwf	(_RF1^(0+128)+7),w
  6782  0FB1  1803               	skipnc
  6783  0FB2  2FC9               	goto	l10291
  6784                           
  6785                           ;RF_Control_B1.c: 136: RF1.RunTime += 5;
  6786  0FB3  3005               	movlw	5
  6787  0FB4  07C1               	addwf	(_RF1^(0+128)+7),f
  6788  0FB5  3000               	movlw	0
  6789  0FB6  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  6790                           
  6791                           ;RF_Control_B1.c: 137: }
  6792                           ;RF_Control_B1.c: 138: }
  6793                           ;RF_Control_B1.c: 139: }
  6794                           ;RF_Control_B1.c: 140: }
  6795                           ;RF_Control_B1.c: 141: } else {
  6796  0FB7  2FC9               	goto	l10291
  6797  0FB8                     l2249:	
  6798                           
  6799                           ;RF_Control_B1.c: 143: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6800  0FB8  1DBA               	btfss	_RF1^(0+128),3
  6801  0FB9  18BA               	btfsc	_RF1^(0+128),1
  6802  0FBA  2FC9               	goto	l10291
  6803                           
  6804                           ;RF_Control_B1.c: 144: RF1.RxStatus = 1;
  6805  0FBB  15BA               	bsf	_RF1^(0+128),3
  6806                           
  6807                           ;RF_Control_B1.c: 145: RF1.Correction = 1;
  6808  0FBC  16BB               	bsf	(_RF1^(0+128)+1),5
  6809                           
  6810                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x36);
  6811  0FBD  3036               	movlw	54
  6812  0FBE  319D  254A  318F   	fcall	_CC2500_WriteCommand
  6813                           
  6814                           ;RF_Control_B1.c: 149: CC2500_WriteCommand(0x3A);
  6815  0FC1  303A               	movlw	58
  6816  0FC2  319D  254A  318F   	fcall	_CC2500_WriteCommand
  6817                           
  6818                           ;RF_Control_B1.c: 150: CC2500_WriteCommand(0x34);
  6819  0FC5  3034               	movlw	52
  6820  0FC6  319D  254A  318F   	fcall	_CC2500_WriteCommand
  6821  0FC9                     l10291:	
  6822                           
  6823                           ;RF_Control_B1.c: 151: }
  6824                           ;RF_Control_B1.c: 153: }
  6825                           ;RF_Control_B1.c: 154: }
  6826                           ;RF_Control_B1.c: 155: }
  6827                           ;RF_Control_B1.c: 157: if (RF1.RxStatus == 1) {
  6828  0FC9  0021               	movlb	1	; select bank1
  6829  0FCA  1DBA               	btfss	_RF1^(0+128),3
  6830  0FCB  2FEA               	goto	l10303
  6831                           
  6832                           ;RF_Control_B1.c: 158: RF1.CheckedCounter++;
  6833  0FCC  3001               	movlw	1
  6834  0FCD  07BF               	addwf	(_RF1^(0+128)+5),f
  6835  0FCE  3000               	movlw	0
  6836  0FCF  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  6837                           
  6838                           ;RF_Control_B1.c: 159: if (RF1.CheckedCounter == 100) {
  6839  0FD0  3005               	movlw	5
  6840  0FD1  3EBA               	addlw	_RF1& (0+255)
  6841  0FD2  0086               	movwf	6
  6842  0FD3  0187               	clrf	7
  6843  0FD4  3F40               	moviw [0]fsr1
  6844  0FD5  3A64               	xorlw	100
  6845  0FD6  1D03               	skipz
  6846  0FD7  2FDA               	goto	u11565
  6847  0FD8  3F41               	moviw [1]fsr1
  6848  0FD9  3A00               	xorlw	0
  6849  0FDA                     u11565:	
  6850  0FDA  1D03               	skipz
  6851  0FDB  2FEA               	goto	l10303
  6852                           
  6853                           ;RF_Control_B1.c: 160: RF1.CheckedCounter = 0;
  6854  0FDC  01BF               	clrf	(_RF1^(0+128)+5)
  6855  0FDD  01C0               	clrf	((_RF1+1)^(0+128)+5)
  6856                           
  6857                           ;RF_Control_B1.c: 161: RF1.CheckCount = 0;
  6858  0FDE  01BE               	clrf	(_RF1^(0+128)+4)
  6859                           
  6860                           ;RF_Control_B1.c: 162: if (RF1.RunTime > 5) {
  6861  0FDF  3000               	movlw	0
  6862  0FE0  0242               	subwf	((_RF1+1)^(0+128)+7),w
  6863  0FE1  3006               	movlw	6
  6864  0FE2  1903               	skipnz
  6865  0FE3  0241               	subwf	(_RF1^(0+128)+7),w
  6866  0FE4  1C03               	skipc
  6867  0FE5  2FEA               	goto	l10303
  6868                           
  6869                           ;RF_Control_B1.c: 163: RF1.RunTime -= 5;
  6870  0FE6  3005               	movlw	5
  6871  0FE7  02C1               	subwf	(_RF1^(0+128)+7),f
  6872  0FE8  3000               	movlw	0
  6873  0FE9  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  6874  0FEA                     l10303:	
  6875                           
  6876                           ;RF_Control_B1.c: 164: }
  6877                           ;RF_Control_B1.c: 165: }
  6878                           ;RF_Control_B1.c: 166: }
  6879                           ;RF_Control_B1.c: 167: if (RF1.Correction == 1) {
  6880  0FEA  1EBB               	btfss	(_RF1^(0+128)+1),5
  6881  0FEB  0008               	return
  6882                           
  6883                           ;RF_Control_B1.c: 168: RF1.CorrectionCounter++;
  6884  0FEC  3001               	movlw	1
  6885  0FED  07C4               	addwf	(_RF1^(0+128)+10),f
  6886  0FEE  3000               	movlw	0
  6887  0FEF  3DC5               	addwfc	((_RF1+1)^(0+128)+10),f
  6888                           
  6889                           ;RF_Control_B1.c: 169: if (RF1.CorrectionCounter >= 6000) {
  6890  0FF0  3017               	movlw	23
  6891  0FF1  0245               	subwf	((_RF1+1)^(0+128)+10),w
  6892  0FF2  3070               	movlw	112
  6893  0FF3  1903               	skipnz
  6894  0FF4  0244               	subwf	(_RF1^(0+128)+10),w
  6895  0FF5  1C03               	skipc
  6896  0FF6  0008               	return
  6897                           
  6898                           ;RF_Control_B1.c: 170: RF1.CorrectionCounter = 0;
  6899  0FF7  01C4               	clrf	(_RF1^(0+128)+10)
  6900  0FF8  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6901                           
  6902                           ;RF_Control_B1.c: 171: RF_RxDisable();
  6903  0FF9  319B  2341         	fcall	_RF_RxDisable
  6904                           
  6905                           ;RF_Control_B1.c: 172: }
  6906                           ;RF_Control_B1.c: 173: }
  6907                           ;RF_Control_B1.c: 174: }
  6908                           ;RF_Control_B1.c: 175: }
  6909                           ;RF_Control_B1.c: 182: } else {
  6910  0FFB  0008               	return
  6911  0FFC                     l2238:	
  6912                           
  6913                           ;RF_Control_B1.c: 183: if (myMain.PowerON == 1) {
  6914  0FFC  1C20               	btfss	_myMain^(0+128),0
  6915  0FFD  0008               	return
  6916                           
  6917                           ;RF_Control_B1.c: 184: RF1.Enable = 1;
  6918  0FFE  143A               	bsf	_RF1^(0+128),0
  6919  0FFF  0008               	return
  6920  1000                     __end_of_setRF_Main:	
  6921                           
  6922                           	psect	text23
  6923  0BF2                     __ptext23:	
  6924 ;; *************** function _getRxData *****************
  6925 ;; Defined at:
  6926 ;;		line 278 in file "../src/RF_Control_B1.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;  error           1    4[BANK1 ] unsigned char 
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Totals:         0       1       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;Total ram usage:        2 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:   12
  6947 ;; This function calls:
  6948 ;;		_getMain_All_Error_Status
  6949 ;;		_setControl_Lights_Table
  6950 ;;		_setLog_Code
  6951 ;;		_setTxData
  6952 ;; This function is called by:
  6953 ;;		_setRF_Main
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _getRxData
  6959  0BF2                     _getRxData:	
  6960                           
  6961                           ;RF_Control_B1.c: 279: char error = getMain_All_Error_Status(0);
  6962                           
  6963                           ;incstack = 0
  6964                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6965  0BF2  3000               	movlw	0
  6966  0BF3  3188  2000  318B   	fcall	_getMain_All_Error_Status
  6967  0BF6  0020               	movlb	0	; select bank0
  6968  0BF7  00EE               	movwf	??_getRxData
  6969  0BF8  086E               	movf	??_getRxData,w
  6970  0BF9  0021               	movlb	1	; select bank1
  6971  0BFA  00EC               	movwf	getRxData@error^(0+128)
  6972                           
  6973                           ;RF_Control_B1.c: 280: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6974  0BFB  0023               	movlb	3	; select bank3
  6975  0BFC  0820               	movf	_RF_Data^(0+384),w
  6976  0BFD  3AAA               	xorlw	170
  6977  0BFE  1D03               	skipz
  6978  0BFF  2C16               	goto	l9761
  6979  0C00  0821               	movf	(_RF_Data^(0+384)+1),w
  6980  0C01  3A01               	xorlw	1
  6981  0C02  1D03               	skipz
  6982  0C03  2C16               	goto	l9761
  6983                           
  6984                           ;RF_Control_B1.c: 282: product->Data[2] = 0x55;
  6985  0C04  3055               	movlw	85
  6986  0C05  0020               	movlb	0	; select bank0
  6987  0C06  00EE               	movwf	??_getRxData
  6988  0C07  0879               	movf	_product,w
  6989  0C08  3E02               	addlw	2
  6990  0C09  0086               	movwf	6
  6991  0C0A  3002               	movlw	2	; select bank4/5
  6992  0C0B  0087               	movwf	7
  6993  0C0C  086E               	movf	??_getRxData,w
  6994  0C0D  0081               	movwf	1
  6995                           
  6996                           ;RF_Control_B1.c: 283: setTxData();
  6997  0C0E  318C  247D         	fcall	_setTxData
  6998                           
  6999                           ;RF_Control_B1.c: 284: RF1.RunTime = 10;
  7000  0C10  300A               	movlw	10
  7001  0C11  0021               	movlb	1	; select bank1
  7002  0C12  00C1               	movwf	(_RF1^(0+128)+7)
  7003  0C13  3000               	movlw	0
  7004  0C14  00C2               	movwf	(_RF1^(0+128)+8)
  7005                           
  7006                           ;RF_Control_B1.c: 290: } else {
  7007  0C15  0008               	return
  7008  0C16                     l9761:	
  7009                           
  7010                           ;RF_Control_B1.c: 292: if (error == 0) {
  7011  0C16  0021               	movlb	1	; select bank1
  7012  0C17  08EC               	movf	getRxData@error^(0+128),f
  7013  0C18  1D03               	skipz
  7014  0C19  0008               	return
  7015                           
  7016                           ;RF_Control_B1.c: 293: if (RF1.Learn == 1) {
  7017  0C1A  1F3A               	btfss	_RF1^(0+128),6
  7018  0C1B  2C2C               	goto	l9773
  7019                           
  7020                           ;RF_Control_B1.c: 294: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7021  0C1C  0023               	movlb	3	; select bank3
  7022  0C1D  08A0               	movf	_RF_Data^(0+384),f
  7023  0C1E  1D03               	skipz
  7024  0C1F  2C29               	goto	l2291
  7025  0C20  0821               	movf	(_RF_Data^(0+384)+1),w
  7026  0C21  3A64               	xorlw	100
  7027  0C22  1D03               	skipz
  7028  0C23  2C29               	goto	l2291
  7029                           
  7030                           ;RF_Control_B1.c: 295: setLog_Code();
  7031  0C24  3190  20DB         	fcall	_setLog_Code
  7032                           
  7033                           ;RF_Control_B1.c: 296: RF1.Checked = 1;
  7034  0C26  0021               	movlb	1	; select bank1
  7035  0C27  15BB               	bsf	(_RF1^(0+128)+1),3
  7036                           
  7037                           ;RF_Control_B1.c: 297: } else {
  7038  0C28  0008               	return
  7039  0C29                     l2291:	
  7040                           
  7041                           ;RF_Control_B1.c: 298: RF1.Checked = 0;
  7042  0C29  0021               	movlb	1	; select bank1
  7043  0C2A  11BB               	bcf	(_RF1^(0+128)+1),3
  7044                           
  7045                           ;RF_Control_B1.c: 299: }
  7046                           ;RF_Control_B1.c: 300: } else {
  7047  0C2B  0008               	return
  7048  0C2C                     l9773:	
  7049                           
  7050                           ;RF_Control_B1.c: 301: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7051  0C2C  0023               	movlb	3	; select bank3
  7052  0C2D  08A0               	movf	_RF_Data^(0+384),f
  7053  0C2E  1D03               	skipz
  7054  0C2F  2C65               	goto	l9795
  7055  0C30  0821               	movf	(_RF_Data^(0+384)+1),w
  7056  0C31  3A02               	xorlw	2
  7057  0C32  1D03               	skipz
  7058  0C33  2C65               	goto	l9795
  7059                           
  7060                           ;RF_Control_B1.c: 303: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7061  0C34  082C               	movf	(_RF_Data^(0+384)+12),w
  7062  0C35  3AFF               	xorlw	255
  7063  0C36  1D03               	skipz
  7064  0C37  2C44               	goto	l9785
  7065  0C38  082D               	movf	(_RF_Data^(0+384)+13),w
  7066  0C39  3AFF               	xorlw	255
  7067  0C3A  1D03               	skipz
  7068  0C3B  2C44               	goto	l9785
  7069  0C3C  082E               	movf	(_RF_Data^(0+384)+14),w
  7070  0C3D  3AFF               	xorlw	255
  7071  0C3E  1D03               	skipz
  7072  0C3F  2C44               	goto	l9785
  7073                           
  7074                           ;RF_Control_B1.c: 304: __nop();
  7075  0C40  0000               	nop
  7076                           
  7077                           ;RF_Control_B1.c: 305: RF1.Checked = 0;
  7078  0C41  0021               	movlb	1	; select bank1
  7079  0C42  11BB               	bcf	(_RF1^(0+128)+1),3
  7080                           
  7081                           ;RF_Control_B1.c: 306: } else {
  7082  0C43  0008               	return
  7083  0C44                     l9785:	
  7084                           
  7085                           ;RF_Control_B1.c: 307: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7086  0C44  0879               	movf	_product,w
  7087  0C45  3E0C               	addlw	12
  7088  0C46  0086               	movwf	6
  7089  0C47  3002               	movlw	2	; select bank4/5
  7090  0C48  0087               	movwf	7
  7091  0C49  0023               	movlb	3	; select bank3
  7092  0C4A  082C               	movf	(_RF_Data^(0+384)+12),w
  7093  0C4B  0601               	xorwf	1,w
  7094  0C4C  1D03               	skipz
  7095  0C4D  0008               	return
  7096  0C4E  0879               	movf	_product,w
  7097  0C4F  3E0D               	addlw	13
  7098  0C50  0086               	movwf	6
  7099  0C51  3002               	movlw	2	; select bank4/5
  7100  0C52  0087               	movwf	7
  7101  0C53  082D               	movf	(_RF_Data^(0+384)+13),w
  7102  0C54  0601               	xorwf	1,w
  7103  0C55  1D03               	skipz
  7104  0C56  0008               	return
  7105  0C57  0879               	movf	_product,w
  7106  0C58  3E0E               	addlw	14
  7107  0C59  0086               	movwf	6
  7108  0C5A  3002               	movlw	2	; select bank4/5
  7109  0C5B  0087               	movwf	7
  7110  0C5C  082E               	movf	(_RF_Data^(0+384)+14),w
  7111  0C5D  0601               	xorwf	1,w
  7112  0C5E  1D03               	skipz
  7113  0C5F  0008               	return
  7114                           
  7115                           ;RF_Control_B1.c: 308: setControl_Lights_Table();
  7116  0C60  318A  2283         	fcall	_setControl_Lights_Table
  7117                           
  7118                           ;RF_Control_B1.c: 309: RF1.Checked = 1;
  7119  0C62  0021               	movlb	1	; select bank1
  7120  0C63  15BB               	bsf	(_RF1^(0+128)+1),3
  7121                           
  7122                           ;RF_Control_B1.c: 310: }
  7123                           ;RF_Control_B1.c: 311: }
  7124                           ;RF_Control_B1.c: 312: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7125  0C64  0008               	return
  7126  0C65                     l9795:	
  7127  0C65  0023               	movlb	3	; select bank3
  7128  0C66  0820               	movf	_RF_Data^(0+384),w
  7129  0C67  3AFF               	xorlw	255
  7130  0C68  1D03               	skipz
  7131  0C69  2C70               	goto	l9801
  7132  0C6A  0821               	movf	(_RF_Data^(0+384)+1),w
  7133  0C6B  3A02               	xorlw	2
  7134  0C6C  1D03               	skipz
  7135  0C6D  2C70               	goto	l9801
  7136                           
  7137                           ;RF_Control_B1.c: 313: __nop();
  7138  0C6E  0000               	nop
  7139                           
  7140                           ;RF_Control_B1.c: 314: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7141  0C6F  0008               	return
  7142  0C70                     l9801:	
  7143  0C70  0023               	movlb	3	; select bank3
  7144  0C71  08A0               	movf	_RF_Data^(0+384),f
  7145  0C72  1D03               	skipz
  7146  0C73  2C7A               	goto	l2301
  7147  0C74  0821               	movf	(_RF_Data^(0+384)+1),w
  7148  0C75  3A65               	xorlw	101
  7149  0C76  1D03               	skipz
  7150  0C77  2C7A               	goto	l2301
  7151                           
  7152                           ;RF_Control_B1.c: 315: __nop();
  7153  0C78  0000               	nop
  7154                           
  7155                           ;RF_Control_B1.c: 316: } else {
  7156  0C79  0008               	return
  7157  0C7A                     l2301:	
  7158                           
  7159                           ;RF_Control_B1.c: 317: RF1.Checked = 0;
  7160  0C7A  0021               	movlb	1	; select bank1
  7161  0C7B  11BB               	bcf	(_RF1^(0+128)+1),3
  7162                           
  7163                           ;RF_Control_B1.c: 325: ;
  7164                           
  7165                           ;RF_Control_B1.c: 318: }
  7166                           ;RF_Control_B1.c: 323: }
  7167                           ;RF_Control_B1.c: 324: } else {
  7168  0C7C  0008               	return
  7169  0C7D                     __end_of_getRxData:	
  7170                           
  7171                           	psect	text24
  7172  10DB                     __ptext24:	
  7173 ;; *************** function _setLog_Code *****************
  7174 ;; Defined at:
  7175 ;;		line 331 in file "../src/RF_Control_B1.c"
  7176 ;; Parameters:    Size  Location     Type
  7177 ;;		None
  7178 ;; Auto vars:     Size  Location     Type
  7179 ;;		None
  7180 ;; Return value:  Size  Location     Type
  7181 ;;		None               void
  7182 ;; Registers used:
  7183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7184 ;; Tracked objects:
  7185 ;;		On entry : 0/0
  7186 ;;		On exit  : 0/0
  7187 ;;		Unchanged: 0/0
  7188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7191 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7192 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7193 ;;Total ram usage:        1 bytes
  7194 ;; Hardware stack levels used:    1
  7195 ;; Hardware stack levels required when called:    7
  7196 ;; This function calls:
  7197 ;;		_setBuz
  7198 ;;		_setMemory_LoopSave
  7199 ;;		_setMemory_Modify
  7200 ;;		_setProductData
  7201 ;; This function is called by:
  7202 ;;		_getRxData
  7203 ;; This function uses a non-reentrant model
  7204 ;;
  7205                           
  7206                           
  7207                           ;psect for function _setLog_Code
  7208  10DB                     _setLog_Code:	
  7209                           
  7210                           ;RF_Control_B1.c: 332: RF1.Learn = 0;
  7211                           
  7212                           ;incstack = 0
  7213                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7214  10DB  0021               	movlb	1	; select bank1
  7215  10DC  133A               	bcf	_RF1^(0+128),6
  7216                           
  7217                           ;RF_Control_B1.c: 333: setProductData(12, RF_Data[12]);
  7218  10DD  0023               	movlb	3	; select bank3
  7219  10DE  082C               	movf	(_RF_Data^(0+384)+12),w
  7220  10DF  0020               	movlb	0	; select bank0
  7221  10E0  00E6               	movwf	??_setLog_Code
  7222  10E1  0866               	movf	??_setLog_Code,w
  7223  10E2  00E2               	movwf	setProductData@value
  7224  10E3  300C               	movlw	12
  7225  10E4  319B  2324  3190   	fcall	_setProductData
  7226                           
  7227                           ;RF_Control_B1.c: 334: setProductData(13, RF_Data[13]);
  7228  10E7  0023               	movlb	3	; select bank3
  7229  10E8  082D               	movf	(_RF_Data^(0+384)+13),w
  7230  10E9  0020               	movlb	0	; select bank0
  7231  10EA  00E6               	movwf	??_setLog_Code
  7232  10EB  0866               	movf	??_setLog_Code,w
  7233  10EC  00E2               	movwf	setProductData@value
  7234  10ED  300D               	movlw	13
  7235  10EE  319B  2324  3190   	fcall	_setProductData
  7236                           
  7237                           ;RF_Control_B1.c: 335: setProductData(14, RF_Data[14]);
  7238  10F1  0023               	movlb	3	; select bank3
  7239  10F2  082E               	movf	(_RF_Data^(0+384)+14),w
  7240  10F3  0020               	movlb	0	; select bank0
  7241  10F4  00E6               	movwf	??_setLog_Code
  7242  10F5  0866               	movf	??_setLog_Code,w
  7243  10F6  00E2               	movwf	setProductData@value
  7244  10F7  300E               	movlw	14
  7245  10F8  319B  2324  3190   	fcall	_setProductData
  7246                           
  7247                           ;RF_Control_B1.c: 336: setBuz(1, 100);
  7248  10FB  3064               	movlw	100
  7249  10FC  0020               	movlb	0	; select bank0
  7250  10FD  00A9               	movwf	setBuz@time
  7251  10FE  3000               	movlw	0
  7252  10FF  00AA               	movwf	setBuz@time+1
  7253  1100  3001               	movlw	1
  7254  1101  3196  2696  3190   	fcall	_setBuz
  7255                           
  7256                           ;RF_Control_B1.c: 337: if (myMain.First == 1) {
  7257  1104  0021               	movlb	1	; select bank1
  7258  1105  1EA0               	btfss	_myMain^(0+128),5
  7259  1106  290B               	goto	l2307
  7260                           
  7261                           ;RF_Control_B1.c: 338: setMemory_LoopSave(1);
  7262  1107  3001               	movlw	1
  7263  1108  319C  2435  3190   	fcall	_setMemory_LoopSave
  7264  110B                     l2307:	
  7265                           
  7266                           ;RF_Control_B1.c: 339: }
  7267                           ;RF_Control_B1.c: 340: setMemory_Modify(1);
  7268  110B  3001               	movlw	1
  7269  110C  319C  2422         	fcall	_setMemory_Modify
  7270  110E  0008               	return
  7271  110F                     __end_of_setLog_Code:	
  7272                           
  7273                           	psect	text25
  7274  1C35                     __ptext25:	
  7275 ;; *************** function _setMemory_LoopSave *****************
  7276 ;; Defined at:
  7277 ;;		line 1070 in file "../src/MCU_B1.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  command         1    wreg     unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  command         1    1[BANK0 ] unsigned char 
  7282 ;; Return value:  Size  Location     Type
  7283 ;;		None               void
  7284 ;; Registers used:
  7285 ;;		wreg, status,2, status,0
  7286 ;; Tracked objects:
  7287 ;;		On entry : 0/0
  7288 ;;		On exit  : 0/0
  7289 ;;		Unchanged: 0/0
  7290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;Total ram usage:        2 bytes
  7296 ;; Hardware stack levels used:    1
  7297 ;; Hardware stack levels required when called:    5
  7298 ;; This function calls:
  7299 ;;		Nothing
  7300 ;; This function is called by:
  7301 ;;		_setLog_Code
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _setMemory_LoopSave
  7307  1C35                     _setMemory_LoopSave:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7311                           ;setMemory_LoopSave@command stored from wreg
  7312  1C35  0020               	movlb	0	; select bank0
  7313  1C36  00A1               	movwf	setMemory_LoopSave@command
  7314                           
  7315                           ;MCU_B1.c: 1071: Memory.LoopSave = command == 1 ? 1 : 0;
  7316  1C37  0821               	movf	setMemory_LoopSave@command,w
  7317  1C38  3A01               	xorlw	1
  7318  1C39  3000               	movlw	0
  7319  1C3A  1903               	skipnz
  7320  1C3B  3001               	movlw	1
  7321  1C3C  00A0               	movwf	??_setMemory_LoopSave
  7322  1C3D  0DA0               	rlf	??_setMemory_LoopSave,f
  7323  1C3E  0DA0               	rlf	??_setMemory_LoopSave,f
  7324  1C3F  0024               	movlb	4	; select bank4
  7325  1C40  0844               	movf	(_Memory^(0+512)+36),w
  7326  1C41  0020               	movlb	0	; select bank0
  7327  1C42  0620               	xorwf	??_setMemory_LoopSave,w
  7328  1C43  39FB               	andlw	-5
  7329  1C44  0620               	xorwf	??_setMemory_LoopSave,w
  7330  1C45  0024               	movlb	4	; select bank4
  7331  1C46  00C4               	movwf	(_Memory^(0+512)+36)
  7332  1C47  0008               	return
  7333  1C48                     __end_of_setMemory_LoopSave:	
  7334                           
  7335                           	psect	text26
  7336  0A83                     __ptext26:	
  7337 ;; *************** function _setControl_Lights_Table *****************
  7338 ;; Defined at:
  7339 ;;		line 344 in file "../src/RF_Control_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        0 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:   11
  7360 ;; This function calls:
  7361 ;;		_setBuz
  7362 ;;		_setDimmerLights_ErrorClose
  7363 ;;		_setProductData
  7364 ;;		_setRFSW_AdjControl
  7365 ;;		_setRFSW_Control
  7366 ;;		_setTxData
  7367 ;; This function is called by:
  7368 ;;		_getRxData
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           
  7373                           ;psect for function _setControl_Lights_Table
  7374  0A83                     _setControl_Lights_Table:	
  7375                           
  7376                           ;RF_Control_B1.c: 345: switch (RF_Data[15]) {
  7377                           
  7378                           ;incstack = 0
  7379                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7380  0A83  2ACE               	goto	l9461
  7381  0A84                     l9445:	
  7382                           ;RF_Control_B1.c: 346: case 0x00:
  7383                           
  7384                           
  7385                           ;RF_Control_B1.c: 348: setDimmerLights_ErrorClose(255);
  7386  0A84  30FF               	movlw	255
  7387  0A85  3188  20F3  318A   	fcall	_setDimmerLights_ErrorClose
  7388                           
  7389                           ;RF_Control_B1.c: 350: setProductData(9, 0);
  7390  0A88  0020               	movlb	0	; select bank0
  7391  0A89  01E2               	clrf	setProductData@value
  7392  0A8A  3009               	movlw	9
  7393  0A8B  319B  2324  318A   	fcall	_setProductData
  7394                           
  7395                           ;RF_Control_B1.c: 351: setProductData(11, 0);
  7396  0A8E  0020               	movlb	0	; select bank0
  7397  0A8F  01E2               	clrf	setProductData@value
  7398  0A90  300B               	movlw	11
  7399  0A91  319B  2324  318A   	fcall	_setProductData
  7400                           
  7401                           ;RF_Control_B1.c: 352: setProductData(15, 0);
  7402  0A94  0020               	movlb	0	; select bank0
  7403  0A95  01E2               	clrf	setProductData@value
  7404  0A96  300F               	movlw	15
  7405  0A97  319B  2324  318A   	fcall	_setProductData
  7406                           
  7407                           ;RF_Control_B1.c: 353: setProductData(17, 0);
  7408  0A9A  0020               	movlb	0	; select bank0
  7409  0A9B  01E2               	clrf	setProductData@value
  7410  0A9C  3011               	movlw	17
  7411  0A9D  319B  2324  318A   	fcall	_setProductData
  7412                           
  7413                           ;RF_Control_B1.c: 354: setBuz(1, 100);
  7414  0AA0  3064               	movlw	100
  7415  0AA1  0020               	movlb	0	; select bank0
  7416  0AA2  00A9               	movwf	setBuz@time
  7417  0AA3  3000               	movlw	0
  7418  0AA4  00AA               	movwf	setBuz@time+1
  7419  0AA5  3001               	movlw	1
  7420  0AA6  3196  2696         	fcall	_setBuz
  7421                           
  7422                           ;RF_Control_B1.c: 356: break;
  7423  0AA8  0008               	return
  7424  0AA9                     l9449:	
  7425                           ;RF_Control_B1.c: 357: case 0x20:
  7426                           
  7427                           
  7428                           ;RF_Control_B1.c: 358: setProductData(9, 0);
  7429  0AA9  0020               	movlb	0	; select bank0
  7430  0AAA  01E2               	clrf	setProductData@value
  7431  0AAB  3009               	movlw	9
  7432  0AAC  319B  2324  318A   	fcall	_setProductData
  7433                           
  7434                           ;RF_Control_B1.c: 359: setProductData(11, 0);
  7435  0AAF  0020               	movlb	0	; select bank0
  7436  0AB0  01E2               	clrf	setProductData@value
  7437  0AB1  300B               	movlw	11
  7438  0AB2  319B  2324  318A   	fcall	_setProductData
  7439                           
  7440                           ;RF_Control_B1.c: 360: setProductData(17, 0);
  7441  0AB5  0020               	movlb	0	; select bank0
  7442  0AB6  01E2               	clrf	setProductData@value
  7443  0AB7  3011               	movlw	17
  7444  0AB8  319B  2324  318A   	fcall	_setProductData
  7445                           
  7446                           ;RF_Control_B1.c: 361: setTxData();
  7447  0ABB  318C  247D         	fcall	_setTxData
  7448                           
  7449                           ;RF_Control_B1.c: 362: break;
  7450  0ABD  0008               	return
  7451  0ABE                     l9451:	
  7452                           ;RF_Control_B1.c: 363: case 0x01:
  7453                           
  7454                           
  7455                           ;RF_Control_B1.c: 365: setRFSW_Control(1);
  7456  0ABE  3001               	movlw	1
  7457  0ABF  3194  2453         	fcall	_setRFSW_Control
  7458                           
  7459                           ;RF_Control_B1.c: 367: break;
  7460  0AC1  0008               	return
  7461  0AC2                     l9453:	
  7462                           ;RF_Control_B1.c: 368: case 0x02:
  7463                           
  7464                           
  7465                           ;RF_Control_B1.c: 370: setRFSW_Control(2);
  7466  0AC2  3002               	movlw	2
  7467  0AC3  3194  2453         	fcall	_setRFSW_Control
  7468                           
  7469                           ;RF_Control_B1.c: 377: break;
  7470                           
  7471                           ;RF_Control_B1.c: 373: case 0x03:
  7472                           
  7473                           ;RF_Control_B1.c: 372: break;
  7474  0AC5  0008               	return
  7475  0AC6                     l9455:	
  7476                           ;RF_Control_B1.c: 378: case 0x11:
  7477                           
  7478                           
  7479                           ;RF_Control_B1.c: 381: setRFSW_AdjControl(1);
  7480  0AC6  3001               	movlw	1
  7481  0AC7  3191  21ED         	fcall	_setRFSW_AdjControl
  7482                           
  7483                           ;RF_Control_B1.c: 384: break;
  7484  0AC9  0008               	return
  7485  0ACA                     l9457:	
  7486                           ;RF_Control_B1.c: 385: case 0x21:
  7487                           
  7488                           
  7489                           ;RF_Control_B1.c: 388: setRFSW_AdjControl(2);
  7490  0ACA  3002               	movlw	2
  7491  0ACB  3191  21ED         	fcall	_setRFSW_AdjControl
  7492                           
  7493                           ;RF_Control_B1.c: 399: }
  7494                           
  7495                           ;RF_Control_B1.c: 398: break;
  7496                           
  7497                           ;RF_Control_B1.c: 392: case 0x31:
  7498                           
  7499                           ;RF_Control_B1.c: 391: break;
  7500  0ACD  0008               	return
  7501  0ACE                     l9461:	
  7502  0ACE  0023               	movlb	3	; select bank3
  7503  0ACF  082F               	movf	(_RF_Data^(0+384)+15),w
  7504                           
  7505                           ; Switch size 1, requested type "space"
  7506                           ; Number of cases is 8, Range of values is 0 to 49
  7507                           ; switch strategies available:
  7508                           ; Name         Instructions Cycles
  7509                           ; simple_byte           25    13 (average)
  7510                           ; direct_byte          106     6 (fixed)
  7511                           ; jumptable            260     6 (fixed)
  7512                           ;	Chosen strategy is simple_byte
  7513  0AD0  3A00               	xorlw	0	; case 0
  7514  0AD1  1903               	skipnz
  7515  0AD2  2A84               	goto	l9445
  7516  0AD3  3A01               	xorlw	1	; case 1
  7517  0AD4  1903               	skipnz
  7518  0AD5  2ABE               	goto	l9451
  7519  0AD6  3A03               	xorlw	3	; case 2
  7520  0AD7  1903               	skipnz
  7521  0AD8  2AC2               	goto	l9453
  7522  0AD9  3A01               	xorlw	1	; case 3
  7523  0ADA  1903               	skipnz
  7524  0ADB  2AE9               	goto	l2321
  7525  0ADC  3A12               	xorlw	18	; case 17
  7526  0ADD  1903               	skipnz
  7527  0ADE  2AC6               	goto	l9455
  7528  0ADF  3A31               	xorlw	49	; case 32
  7529  0AE0  1903               	skipnz
  7530  0AE1  2AA9               	goto	l9449
  7531  0AE2  3A01               	xorlw	1	; case 33
  7532  0AE3  1903               	skipnz
  7533  0AE4  2ACA               	goto	l9457
  7534  0AE5  3A10               	xorlw	16	; case 49
  7535  0AE6  1903               	skipnz
  7536  0AE7  2AE9               	goto	l2321
  7537  0AE8  2AE9               	goto	l2321
  7538  0AE9                     l2321:	
  7539  0AE9  0008               	return
  7540  0AEA                     __end_of_setControl_Lights_Table:	
  7541                           
  7542                           	psect	text27
  7543  1453                     __ptext27:	
  7544 ;; *************** function _setRFSW_Control *****************
  7545 ;; Defined at:
  7546 ;;		line 426 in file "../src/RF_Control_B1.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  sw              1    wreg     unsigned char 
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  sw              1   77[BANK0 ] unsigned char 
  7551 ;;  status          1   76[BANK0 ] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;		None               void
  7554 ;; Registers used:
  7555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;Total ram usage:        3 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    9
  7568 ;; This function calls:
  7569 ;;		_getDelayOff_GO
  7570 ;;		_getDimmerLights_Status
  7571 ;;		_setBuz
  7572 ;;		_setDelayOff_GO
  7573 ;;		_setDimmerLights_SwOff
  7574 ;;		_setDimmerLights_SwOn
  7575 ;;		_setRF_DimmerLights
  7576 ;;		_setTxData
  7577 ;; This function is called by:
  7578 ;;		_setControl_Lights_Table
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _setRFSW_Control
  7584  1453                     _setRFSW_Control:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7588                           ;setRFSW_Control@sw stored from wreg
  7589  1453  0020               	movlb	0	; select bank0
  7590  1454  00ED               	movwf	setRFSW_Control@sw
  7591                           
  7592                           ;RF_Control_B1.c: 427: char status = 0;
  7593  1455  01EC               	clrf	setRFSW_Control@status
  7594                           
  7595                           ;RF_Control_B1.c: 430: if (RF_Data[16] == 0x80) {
  7596  1456  0023               	movlb	3	; select bank3
  7597  1457  0830               	movf	(_RF_Data^(0+384)+16),w
  7598  1458  3A80               	xorlw	128
  7599  1459  1D03               	skipz
  7600  145A  2C86               	goto	l9301
  7601                           
  7602                           ;RF_Control_B1.c: 431: setDelayOff_GO(sw, 1, RF_Data[17]);
  7603  145B  0020               	movlb	0	; select bank0
  7604  145C  01E6               	clrf	setDelayOff_GO@command
  7605  145D  0AE6               	incf	setDelayOff_GO@command,f
  7606  145E  0023               	movlb	3	; select bank3
  7607  145F  0831               	movf	(_RF_Data^(0+384)+17),w
  7608  1460  0020               	movlb	0	; select bank0
  7609  1461  00EB               	movwf	??_setRFSW_Control
  7610  1462  086B               	movf	??_setRFSW_Control,w
  7611  1463  00E7               	movwf	setDelayOff_GO@value
  7612  1464  086D               	movf	setRFSW_Control@sw,w
  7613  1465  3195  2544  3194   	fcall	_setDelayOff_GO
  7614                           
  7615                           ;RF_Control_B1.c: 432: if (getDimmerLights_Status(sw) == 1) {
  7616  1468  0020               	movlb	0	; select bank0
  7617  1469  086D               	movf	setRFSW_Control@sw,w
  7618  146A  319B  236F  3194   	fcall	_getDimmerLights_Status
  7619  146D  3A01               	xorlw	1
  7620  146E  1D03               	skipz
  7621  146F  2C95               	goto	l9305
  7622                           
  7623                           ;RF_Control_B1.c: 433: setBuz(1, 100);
  7624  1470  3064               	movlw	100
  7625  1471  0020               	movlb	0	; select bank0
  7626  1472  00A9               	movwf	setBuz@time
  7627  1473  3000               	movlw	0
  7628  1474  00AA               	movwf	setBuz@time+1
  7629  1475  3001               	movlw	1
  7630  1476  3196  2696  3194   	fcall	_setBuz
  7631                           
  7632                           ;RF_Control_B1.c: 434: status = 1;
  7633  1479  0020               	movlb	0	; select bank0
  7634  147A  01EC               	clrf	setRFSW_Control@status
  7635  147B  0AEC               	incf	setRFSW_Control@status,f
  7636                           
  7637                           ;RF_Control_B1.c: 435: setRF_DimmerLights(sw, 1);
  7638  147C  01E6               	clrf	setRF_DimmerLights@on
  7639  147D  0AE6               	incf	setRF_DimmerLights@on,f
  7640  147E  086D               	movf	setRFSW_Control@sw,w
  7641  147F  3196  26EF  3194   	fcall	_setRF_DimmerLights
  7642                           
  7643                           ;RF_Control_B1.c: 436: setTxData();
  7644  1482  318C  247D  3194   	fcall	_setTxData
  7645                           
  7646                           ;RF_Control_B1.c: 438: }
  7647                           ;RF_Control_B1.c: 439: } else {
  7648  1485  2C95               	goto	l9305
  7649  1486                     l9301:	
  7650                           
  7651                           ;RF_Control_B1.c: 441: if (getDelayOff_GO(sw) == 1) {
  7652  1486  0020               	movlb	0	; select bank0
  7653  1487  086D               	movf	setRFSW_Control@sw,w
  7654  1488  319B  235F  3194   	fcall	_getDelayOff_GO
  7655  148B  3A01               	xorlw	1
  7656  148C  1D03               	skipz
  7657  148D  2C95               	goto	l9305
  7658                           
  7659                           ;RF_Control_B1.c: 442: setDelayOff_GO(sw, 0, 0);
  7660  148E  0020               	movlb	0	; select bank0
  7661  148F  01E6               	clrf	setDelayOff_GO@command
  7662  1490  01E7               	clrf	setDelayOff_GO@value
  7663  1491  086D               	movf	setRFSW_Control@sw,w
  7664  1492  3195  2544  3194   	fcall	_setDelayOff_GO
  7665  1495                     l9305:	
  7666                           
  7667                           ;RF_Control_B1.c: 443: }
  7668                           ;RF_Control_B1.c: 445: }
  7669                           ;RF_Control_B1.c: 446: if (status == 0) {
  7670  1495  0020               	movlb	0	; select bank0
  7671  1496  08EC               	movf	setRFSW_Control@status,f
  7672  1497  1D03               	skipz
  7673  1498  0008               	return
  7674                           
  7675                           ;RF_Control_B1.c: 448: setDimmerLights_SwOn(sw);
  7676  1499  086D               	movf	setRFSW_Control@sw,w
  7677  149A  3192  2269  3194   	fcall	_setDimmerLights_SwOn
  7678                           
  7679                           ;RF_Control_B1.c: 449: setDimmerLights_SwOff(sw);
  7680  149D  0020               	movlb	0	; select bank0
  7681  149E  086D               	movf	setRFSW_Control@sw,w
  7682  149F  3194  2404         	fcall	_setDimmerLights_SwOff
  7683  14A1  0008               	return
  7684  14A2                     __end_of_setRFSW_Control:	
  7685                           
  7686                           	psect	text28
  7687  1269                     __ptext28:	
  7688 ;; *************** function _setDimmerLights_SwOn *****************
  7689 ;; Defined at:
  7690 ;;		line 405 in file "../src/Dimmer_B1.c"
  7691 ;; Parameters:    Size  Location     Type
  7692 ;;  sw              1    wreg     unsigned char 
  7693 ;; Auto vars:     Size  Location     Type
  7694 ;;  sw              1   15[BANK0 ] unsigned char 
  7695 ;;  idle            1   14[BANK0 ] unsigned char 
  7696 ;; Return value:  Size  Location     Type
  7697 ;;		None               void
  7698 ;; Registers used:
  7699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7700 ;; Tracked objects:
  7701 ;;		On entry : 0/0
  7702 ;;		On exit  : 0/0
  7703 ;;		Unchanged: 0/0
  7704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7706 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7707 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7708 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7709 ;;Total ram usage:        3 bytes
  7710 ;; Hardware stack levels used:    1
  7711 ;; Hardware stack levels required when called:    7
  7712 ;; This function calls:
  7713 ;;		_DimmerLightsPointSelect
  7714 ;;		_getDimmerLights_Allow_Condition
  7715 ;;		_setBuz
  7716 ;; This function is called by:
  7717 ;;		_setRFSW_Control
  7718 ;;		_setSw_Main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _setDimmerLights_SwOn
  7724  1269                     _setDimmerLights_SwOn:	
  7725                           
  7726                           ;incstack = 0
  7727                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7728                           ;setDimmerLights_SwOn@sw stored from wreg
  7729  1269  0020               	movlb	0	; select bank0
  7730  126A  00AF               	movwf	setDimmerLights_SwOn@sw
  7731                           
  7732                           ;Dimmer_B1.c: 406: DimmerLightsPointSelect(sw);
  7733  126B  082F               	movf	setDimmerLights_SwOn@sw,w
  7734  126C  319B  23FC  3192   	fcall	_DimmerLightsPointSelect
  7735                           
  7736                           ;Dimmer_B1.c: 407: char idle = getDimmerLights_Allow_Condition(sw);
  7737  126F  0020               	movlb	0	; select bank0
  7738  1270  082F               	movf	setDimmerLights_SwOn@sw,w
  7739  1271  3193  236F  3192   	fcall	_getDimmerLights_Allow_Condition
  7740  1274  0020               	movlb	0	; select bank0
  7741  1275  00AD               	movwf	??_setDimmerLights_SwOn
  7742  1276  082D               	movf	??_setDimmerLights_SwOn,w
  7743  1277  00AE               	movwf	setDimmerLights_SwOn@idle
  7744                           
  7745                           ;Dimmer_B1.c: 412: if (idle == 0) {
  7746  1278  08AE               	movf	setDimmerLights_SwOn@idle,f
  7747  1279  1D03               	skipz
  7748  127A  0008               	return
  7749                           
  7750                           ;Dimmer_B1.c: 413: DimmerLights->SwFlag = 1;
  7751  127B  086F               	movf	_DimmerLights,w
  7752  127C  3E0B               	addlw	11
  7753  127D  0086               	movwf	6
  7754  127E  3001               	movlw	1	; select bank2/3
  7755  127F  0087               	movwf	7
  7756  1280  1481               	bsf	1,1
  7757                           
  7758                           ;Dimmer_B1.c: 414: if (DimmerLights->Status == 0) {
  7759  1281  086F               	movf	_DimmerLights,w
  7760  1282  3E02               	addlw	2
  7761  1283  0086               	movwf	6
  7762  1284  3001               	movlw	1	; select bank2/3
  7763  1285  0087               	movwf	7
  7764  1286  1881               	btfsc	1,1
  7765  1287  2A9B               	goto	l9101
  7766                           
  7767                           ;Dimmer_B1.c: 415: DimmerLights->Status = 1;
  7768  1288  086F               	movf	_DimmerLights,w
  7769  1289  3E02               	addlw	2
  7770  128A  0086               	movwf	6
  7771  128B  3001               	movlw	1	; select bank2/3
  7772  128C  0087               	movwf	7
  7773  128D  1481               	bsf	1,1
  7774                           
  7775                           ;Dimmer_B1.c: 416: DimmerLights->Trigger = 1;
  7776  128E  086F               	movf	_DimmerLights,w
  7777  128F  3E0A               	addlw	10
  7778  1290  0086               	movwf	6
  7779  1291  3001               	movlw	1	; select bank2/3
  7780  1292  0087               	movwf	7
  7781  1293  1481               	bsf	1,1
  7782                           
  7783                           ;Dimmer_B1.c: 417: DimmerLights->Switch = 1;
  7784  1294  086F               	movf	_DimmerLights,w
  7785  1295  3E0A               	addlw	10
  7786  1296  0086               	movwf	6
  7787  1297  3001               	movlw	1	; select bank2/3
  7788  1298  0087               	movwf	7
  7789  1299  1401               	bsf	1,0
  7790                           
  7791                           ;Dimmer_B1.c: 418: } else {
  7792  129A  2AA1               	goto	l9103
  7793  129B                     l9101:	
  7794                           
  7795                           ;Dimmer_B1.c: 419: DimmerLights->Status = 0;
  7796  129B  086F               	movf	_DimmerLights,w
  7797  129C  3E02               	addlw	2
  7798  129D  0086               	movwf	6
  7799  129E  3001               	movlw	1	; select bank2/3
  7800  129F  0087               	movwf	7
  7801  12A0  1081               	bcf	1,1
  7802  12A1                     l9103:	
  7803                           
  7804                           ;Dimmer_B1.c: 420: }
  7805                           ;Dimmer_B1.c: 421: setBuz(1, 100);
  7806  12A1  3064               	movlw	100
  7807  12A2  00A9               	movwf	setBuz@time
  7808  12A3  3000               	movlw	0
  7809  12A4  00AA               	movwf	setBuz@time+1
  7810  12A5  3001               	movlw	1
  7811  12A6  3196  2696         	fcall	_setBuz
  7812  12A8  0008               	return
  7813  12A9                     __end_of_setDimmerLights_SwOn:	
  7814                           
  7815                           	psect	text29
  7816  11ED                     __ptext29:	
  7817 ;; *************** function _setRFSW_AdjControl *****************
  7818 ;; Defined at:
  7819 ;;		line 455 in file "../src/RF_Control_B1.c"
  7820 ;; Parameters:    Size  Location     Type
  7821 ;;  sw              1    wreg     unsigned char 
  7822 ;; Auto vars:     Size  Location     Type
  7823 ;;  sw              1   75[BANK0 ] unsigned char 
  7824 ;;  status          1   74[BANK0 ] unsigned char 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;		None               void
  7827 ;; Registers used:
  7828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7838 ;;Total ram usage:        4 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:   10
  7841 ;; This function calls:
  7842 ;;		_getDimmerLights_Status
  7843 ;;		_setMemory_Modify
  7844 ;;		_setProductData
  7845 ;;		_setRF_DimmerValue
  7846 ;;		_setTxData
  7847 ;; This function is called by:
  7848 ;;		_setControl_Lights_Table
  7849 ;; This function uses a non-reentrant model
  7850 ;;
  7851                           
  7852                           
  7853                           ;psect for function _setRFSW_AdjControl
  7854  11ED                     _setRFSW_AdjControl:	
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7858                           ;setRFSW_AdjControl@sw stored from wreg
  7859  11ED  0020               	movlb	0	; select bank0
  7860  11EE  00EB               	movwf	setRFSW_AdjControl@sw
  7861                           
  7862                           ;RF_Control_B1.c: 456: char status = 0;
  7863  11EF  01EA               	clrf	setRFSW_AdjControl@status
  7864                           
  7865                           ;RF_Control_B1.c: 458: status = getDimmerLights_Status(sw);
  7866  11F0  086B               	movf	setRFSW_AdjControl@sw,w
  7867  11F1  319B  236F  3191   	fcall	_getDimmerLights_Status
  7868  11F4  0020               	movlb	0	; select bank0
  7869  11F5  00E8               	movwf	??_setRFSW_AdjControl
  7870  11F6  0868               	movf	??_setRFSW_AdjControl,w
  7871  11F7  00EA               	movwf	setRFSW_AdjControl@status
  7872                           
  7873                           ;RF_Control_B1.c: 461: if (status == 1) {
  7874  11F8  086A               	movf	setRFSW_AdjControl@status,w
  7875  11F9  3A01               	xorlw	1
  7876  11FA  1D03               	skipz
  7877  11FB  2A06               	goto	l9319
  7878                           
  7879                           ;RF_Control_B1.c: 462: setMemory_Modify(1);
  7880  11FC  3001               	movlw	1
  7881  11FD  319C  2422  3191   	fcall	_setMemory_Modify
  7882                           
  7883                           ;RF_Control_B1.c: 463: setRF_DimmerValue(sw);
  7884  1200  0020               	movlb	0	; select bank0
  7885  1201  086B               	movf	setRFSW_AdjControl@sw,w
  7886  1202  3190  207B  3191   	fcall	_setRF_DimmerValue
  7887                           
  7888                           ;RF_Control_B1.c: 464: } else {
  7889  1205  2A17               	goto	l2333
  7890  1206                     l9319:	
  7891                           
  7892                           ;RF_Control_B1.c: 465: setProductData(9, product->Data[20 + sw]);
  7893  1206  0020               	movlb	0	; select bank0
  7894  1207  086B               	movf	setRFSW_AdjControl@sw,w
  7895  1208  3E14               	addlw	20
  7896  1209  0779               	addwf	_product,w
  7897  120A  00E8               	movwf	??_setRFSW_AdjControl
  7898  120B  0868               	movf	??_setRFSW_AdjControl,w
  7899  120C  0086               	movwf	6
  7900  120D  3002               	movlw	2	; select bank4/5
  7901  120E  0087               	movwf	7
  7902  120F  0801               	movf	1,w
  7903  1210  00E9               	movwf	??_setRFSW_AdjControl+1
  7904  1211  0869               	movf	??_setRFSW_AdjControl+1,w
  7905  1212  00E2               	movwf	setProductData@value
  7906  1213  3009               	movlw	9
  7907  1214  319B  2324  3191   	fcall	_setProductData
  7908  1217                     l2333:	
  7909                           
  7910                           ;RF_Control_B1.c: 466: }
  7911                           ;RF_Control_B1.c: 467: setProductData(17, product->Data[26 + sw]);
  7912  1217  0020               	movlb	0	; select bank0
  7913  1218  086B               	movf	setRFSW_AdjControl@sw,w
  7914  1219  3E1A               	addlw	26
  7915  121A  0779               	addwf	_product,w
  7916  121B  00E8               	movwf	??_setRFSW_AdjControl
  7917  121C  0868               	movf	??_setRFSW_AdjControl,w
  7918  121D  0086               	movwf	6
  7919  121E  3002               	movlw	2	; select bank4/5
  7920  121F  0087               	movwf	7
  7921  1220  0801               	movf	1,w
  7922  1221  00E9               	movwf	??_setRFSW_AdjControl+1
  7923  1222  0869               	movf	??_setRFSW_AdjControl+1,w
  7924  1223  00E2               	movwf	setProductData@value
  7925  1224  3011               	movlw	17
  7926  1225  319B  2324  3191   	fcall	_setProductData
  7927                           
  7928                           ;RF_Control_B1.c: 468: setTxData();
  7929  1228  318C  247D         	fcall	_setTxData
  7930  122A  0008               	return
  7931  122B                     __end_of_setRFSW_AdjControl:	
  7932                           
  7933                           	psect	text30
  7934  107B                     __ptext30:	
  7935 ;; *************** function _setRF_DimmerValue *****************
  7936 ;; Defined at:
  7937 ;;		line 473 in file "../src/RF_Control_B1.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;  lights          1    wreg     unsigned char 
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;  lights          1   71[BANK0 ] unsigned char 
  7942 ;; Return value:  Size  Location     Type
  7943 ;;		None               void
  7944 ;; Registers used:
  7945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7955 ;;Total ram usage:        2 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    9
  7958 ;; This function calls:
  7959 ;;		_setDimmerLights_AdjRF
  7960 ;;		_setProductData
  7961 ;; This function is called by:
  7962 ;;		_setRFSW_AdjControl
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           
  7967                           ;psect for function _setRF_DimmerValue
  7968  107B                     _setRF_DimmerValue:	
  7969                           
  7970                           ;incstack = 0
  7971                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7972                           ;setRF_DimmerValue@lights stored from wreg
  7973  107B  0020               	movlb	0	; select bank0
  7974  107C  00E7               	movwf	setRF_DimmerValue@lights
  7975                           
  7976                           ;RF_Control_B1.c: 474: if (RF_Data[9] > 0x64) {
  7977  107D  3065               	movlw	101
  7978  107E  0023               	movlb	3	; select bank3
  7979  107F  0229               	subwf	(_RF_Data^(0+384)+9),w
  7980  1080  1C03               	skipc
  7981  1081  2888               	goto	l9197
  7982                           
  7983                           ;RF_Control_B1.c: 475: RF_Data[9] = 0x64;
  7984  1082  3064               	movlw	100
  7985  1083  0020               	movlb	0	; select bank0
  7986  1084  00E6               	movwf	??_setRF_DimmerValue
  7987  1085  0866               	movf	??_setRF_DimmerValue,w
  7988  1086  0023               	movlb	3	; select bank3
  7989  1087  00A9               	movwf	(_RF_Data^(0+384)+9)
  7990  1088                     l9197:	
  7991                           
  7992                           ;RF_Control_B1.c: 476: }
  7993                           ;RF_Control_B1.c: 477: setProductData(9, RF_Data[9]);
  7994  1088  0829               	movf	(_RF_Data^(0+384)+9),w
  7995  1089  0020               	movlb	0	; select bank0
  7996  108A  00E6               	movwf	??_setRF_DimmerValue
  7997  108B  0866               	movf	??_setRF_DimmerValue,w
  7998  108C  00E2               	movwf	setProductData@value
  7999  108D  3009               	movlw	9
  8000  108E  319B  2324  3190   	fcall	_setProductData
  8001                           
  8002                           ;RF_Control_B1.c: 478: setProductData(11, lights);
  8003  1091  0020               	movlb	0	; select bank0
  8004  1092  0867               	movf	setRF_DimmerValue@lights,w
  8005  1093  00E6               	movwf	??_setRF_DimmerValue
  8006  1094  0866               	movf	??_setRF_DimmerValue,w
  8007  1095  00E2               	movwf	setProductData@value
  8008  1096  300B               	movlw	11
  8009  1097  319B  2324  3190   	fcall	_setProductData
  8010                           
  8011                           ;RF_Control_B1.c: 479: setProductData((20 + lights), RF_Data[9]);
  8012  109A  0023               	movlb	3	; select bank3
  8013  109B  0829               	movf	(_RF_Data^(0+384)+9),w
  8014  109C  0020               	movlb	0	; select bank0
  8015  109D  00E6               	movwf	??_setRF_DimmerValue
  8016  109E  0866               	movf	??_setRF_DimmerValue,w
  8017  109F  00E2               	movwf	setProductData@value
  8018  10A0  0867               	movf	setRF_DimmerValue@lights,w
  8019  10A1  3E14               	addlw	20
  8020  10A2  319B  2324  3190   	fcall	_setProductData
  8021                           
  8022                           ;RF_Control_B1.c: 480: setDimmerLights_AdjRF(lights);
  8023  10A5  0020               	movlb	0	; select bank0
  8024  10A6  0867               	movf	setRF_DimmerValue@lights,w
  8025  10A7  319E  26B8         	fcall	_setDimmerLights_AdjRF
  8026  10A9  0008               	return
  8027  10AA                     __end_of_setRF_DimmerValue:	
  8028                           
  8029                           	psect	text31
  8030  1EB8                     __ptext31:	
  8031 ;; *************** function _setDimmerLights_AdjRF *****************
  8032 ;; Defined at:
  8033 ;;		line 871 in file "../src/Dimmer_B1.c"
  8034 ;; Parameters:    Size  Location     Type
  8035 ;;  lights          1    wreg     unsigned char 
  8036 ;; Auto vars:     Size  Location     Type
  8037 ;;  lights          1   67[BANK0 ] unsigned char 
  8038 ;; Return value:  Size  Location     Type
  8039 ;;		None               void
  8040 ;; Registers used:
  8041 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8042 ;; Tracked objects:
  8043 ;;		On entry : 0/0
  8044 ;;		On exit  : 0/0
  8045 ;;		Unchanged: 0/0
  8046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8051 ;;Total ram usage:        2 bytes
  8052 ;; Hardware stack levels used:    1
  8053 ;; Hardware stack levels required when called:    8
  8054 ;; This function calls:
  8055 ;;		_DimmerLightsPointSelect
  8056 ;;		_getPercentValue
  8057 ;; This function is called by:
  8058 ;;		_setRF_DimmerValue
  8059 ;; This function uses a non-reentrant model
  8060 ;;
  8061                           
  8062                           
  8063                           ;psect for function _setDimmerLights_AdjRF
  8064  1EB8                     _setDimmerLights_AdjRF:	
  8065                           
  8066                           ;incstack = 0
  8067                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8068                           ;setDimmerLights_AdjRF@lights stored from wreg
  8069  1EB8  0020               	movlb	0	; select bank0
  8070  1EB9  00E3               	movwf	setDimmerLights_AdjRF@lights
  8071                           
  8072                           ;Dimmer_B1.c: 873: DimmerLightsPointSelect(lights);
  8073  1EBA  0863               	movf	setDimmerLights_AdjRF@lights,w
  8074  1EBB  319B  23FC  319E   	fcall	_DimmerLightsPointSelect
  8075                           
  8076                           ;Dimmer_B1.c: 874: DimmerLights->AdjRF = 1;
  8077  1EBE  0020               	movlb	0	; select bank0
  8078  1EBF  086F               	movf	_DimmerLights,w
  8079  1EC0  3E02               	addlw	2
  8080  1EC1  0086               	movwf	6
  8081  1EC2  3001               	movlw	1	; select bank2/3
  8082  1EC3  0087               	movwf	7
  8083  1EC4  1401               	bsf	1,0
  8084                           
  8085                           ;Dimmer_B1.c: 875: DimmerLights->Signal = 1;
  8086  1EC5  0A6F               	incf	_DimmerLights,w
  8087  1EC6  0086               	movwf	6
  8088  1EC7  3001               	movlw	1	; select bank2/3
  8089  1EC8  0087               	movwf	7
  8090  1EC9  1681               	bsf	1,5
  8091                           
  8092                           ;Dimmer_B1.c: 876: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8093  1ECA  0879               	movf	_product,w
  8094  1ECB  3E09               	addlw	9
  8095  1ECC  0086               	movwf	6
  8096  1ECD  3002               	movlw	2	; select bank4/5
  8097  1ECE  0087               	movwf	7
  8098  1ECF  0801               	movf	1,w
  8099  1ED0  318A  221E         	fcall	_getPercentValue
  8100  1ED2  0020               	movlb	0	; select bank0
  8101  1ED3  00E2               	movwf	??_setDimmerLights_AdjRF
  8102  1ED4  086F               	movf	_DimmerLights,w
  8103  1ED5  3E06               	addlw	6
  8104  1ED6  0086               	movwf	6
  8105  1ED7  3001               	movlw	1	; select bank2/3
  8106  1ED8  0087               	movwf	7
  8107  1ED9  0862               	movf	??_setDimmerLights_AdjRF,w
  8108  1EDA  0081               	movwf	1
  8109  1EDB  0008               	return
  8110  1EDC                     __end_of_setDimmerLights_AdjRF:	
  8111                           
  8112                           	psect	text32
  8113  0A1E                     __ptext32:	
  8114 ;; *************** function _getPercentValue *****************
  8115 ;; Defined at:
  8116 ;;		line 986 in file "../src/Dimmer_B1.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;  value           1    wreg     unsigned char 
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  value           1   62[BANK0 ] unsigned char 
  8121 ;;  i               3   63[BANK0 ] float 
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      unsigned char 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0, pclath, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8133 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8134 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8135 ;;Total ram usage:        6 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    7
  8138 ;; This function calls:
  8139 ;;		___awtoft
  8140 ;;		___ftadd
  8141 ;;		___ftdiv
  8142 ;;		___ftmul
  8143 ;;		___ftneg
  8144 ;;		___fttol
  8145 ;; This function is called by:
  8146 ;;		_setDimmerLights_AdjRF
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           
  8151                           ;psect for function _getPercentValue
  8152  0A1E                     _getPercentValue:	
  8153                           
  8154                           ;incstack = 0
  8155                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8156                           ;getPercentValue@value stored from wreg
  8157  0A1E  0020               	movlb	0	; select bank0
  8158  0A1F  00DE               	movwf	getPercentValue@value
  8159                           
  8160                           ;Dimmer_B1.c: 994: float i = ((char)(75*0.8)) - ((char)(15*0.8));
  8161  0A20  3000               	movlw	0
  8162  0A21  00DF               	movwf	getPercentValue@i
  8163  0A22  3040               	movlw	64
  8164  0A23  00E0               	movwf	getPercentValue@i+1
  8165  0A24  3042               	movlw	66
  8166  0A25  00E1               	movwf	getPercentValue@i+2
  8167                           
  8168                           ;Dimmer_B1.c: 995: i /= 100;
  8169  0A26  3000               	movlw	0
  8170  0A27  00AE               	movwf	___ftdiv@f2
  8171  0A28  30C8               	movlw	200
  8172  0A29  00AF               	movwf	___ftdiv@f2+1
  8173  0A2A  3042               	movlw	66
  8174  0A2B  00B0               	movwf	___ftdiv@f2+2
  8175  0A2C  085F               	movf	getPercentValue@i,w
  8176  0A2D  00B1               	movwf	___ftdiv@f1
  8177  0A2E  0860               	movf	getPercentValue@i+1,w
  8178  0A2F  00B2               	movwf	___ftdiv@f1+1
  8179  0A30  0861               	movf	getPercentValue@i+2,w
  8180  0A31  00B3               	movwf	___ftdiv@f1+2
  8181  0A32  318D  2518  318A   	fcall	___ftdiv
  8182  0A35  0020               	movlb	0	; select bank0
  8183  0A36  082E               	movf	?___ftdiv,w
  8184  0A37  00DF               	movwf	getPercentValue@i
  8185  0A38  082F               	movf	?___ftdiv+1,w
  8186  0A39  00E0               	movwf	getPercentValue@i+1
  8187  0A3A  0830               	movf	?___ftdiv+2,w
  8188  0A3B  00E1               	movwf	getPercentValue@i+2
  8189                           
  8190                           ;Dimmer_B1.c: 997: return (char) (((char)(75*0.8)) - ((100 - value) * i));
  8191  0A3C  085E               	movf	getPercentValue@value,w
  8192  0A3D  00DC               	movwf	??_getPercentValue
  8193  0A3E  01DD               	clrf	??_getPercentValue+1
  8194  0A3F  09DC               	comf	??_getPercentValue,f
  8195  0A40  09DD               	comf	??_getPercentValue+1,f
  8196  0A41  0ADC               	incf	??_getPercentValue,f
  8197  0A42  1903               	skipnz
  8198  0A43  0ADD               	incf	??_getPercentValue+1,f
  8199  0A44  085C               	movf	??_getPercentValue,w
  8200  0A45  3E64               	addlw	100
  8201  0A46  00A8               	movwf	___awtoft@c
  8202  0A47  3000               	movlw	0
  8203  0A48  3D5D               	addwfc	??_getPercentValue+1,w
  8204  0A49  00A9               	movwf	___awtoft@c+1
  8205  0A4A  319E  2673  318A   	fcall	___awtoft
  8206  0A4D  0020               	movlb	0	; select bank0
  8207  0A4E  0828               	movf	?___awtoft,w
  8208  0A4F  00B1               	movwf	___ftmul@f2
  8209  0A50  0829               	movf	?___awtoft+1,w
  8210  0A51  00B2               	movwf	___ftmul@f2+1
  8211  0A52  082A               	movf	?___awtoft+2,w
  8212  0A53  00B3               	movwf	___ftmul@f2+2
  8213  0A54  085F               	movf	getPercentValue@i,w
  8214  0A55  00AE               	movwf	___ftmul@f1
  8215  0A56  0860               	movf	getPercentValue@i+1,w
  8216  0A57  00AF               	movwf	___ftmul@f1+1
  8217  0A58  0861               	movf	getPercentValue@i+2,w
  8218  0A59  00B0               	movwf	___ftmul@f1+2
  8219  0A5A  318E  2671  318A   	fcall	___ftmul
  8220  0A5D  0020               	movlb	0	; select bank0
  8221  0A5E  082E               	movf	?___ftmul,w
  8222  0A5F  00BE               	movwf	___ftneg@f1
  8223  0A60  082F               	movf	?___ftmul+1,w
  8224  0A61  00BF               	movwf	___ftneg@f1+1
  8225  0A62  0830               	movf	?___ftmul+2,w
  8226  0A63  00C0               	movwf	___ftneg@f1+2
  8227  0A64  319A  228F  318A   	fcall	___ftneg
  8228  0A67  0020               	movlb	0	; select bank0
  8229  0A68  083E               	movf	?___ftneg,w
  8230  0A69  00C4               	movwf	___ftadd@f2
  8231  0A6A  083F               	movf	?___ftneg+1,w
  8232  0A6B  00C5               	movwf	___ftadd@f2+1
  8233  0A6C  0840               	movf	?___ftneg+2,w
  8234  0A6D  00C6               	movwf	___ftadd@f2+2
  8235  0A6E  3000               	movlw	0
  8236  0A6F  00C1               	movwf	___ftadd@f1
  8237  0A70  3070               	movlw	112
  8238  0A71  00C2               	movwf	___ftadd@f1+1
  8239  0A72  3042               	movlw	66
  8240  0A73  00C3               	movwf	___ftadd@f1+2
  8241  0A74  3185  2501  318A   	fcall	___ftadd
  8242  0A77  0020               	movlb	0	; select bank0
  8243  0A78  0841               	movf	?___ftadd,w
  8244  0A79  00CE               	movwf	___fttol@f1
  8245  0A7A  0842               	movf	?___ftadd+1,w
  8246  0A7B  00CF               	movwf	___fttol@f1+1
  8247  0A7C  0843               	movf	?___ftadd+2,w
  8248  0A7D  00D0               	movwf	___fttol@f1+2
  8249  0A7E  318B  236B         	fcall	___fttol
  8250  0A80  0020               	movlb	0	; select bank0
  8251  0A81  084E               	movf	?___fttol,w
  8252  0A82  0008               	return
  8253  0A83                     __end_of_getPercentValue:	
  8254                           
  8255                           	psect	text33
  8256  0E71                     __ptext33:	
  8257 ;; *************** function ___ftmul *****************
  8258 ;; Defined at:
  8259 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;  f1              3   14[BANK0 ] float 
  8262 ;;  f2              3   17[BANK0 ] float 
  8263 ;; Auto vars:     Size  Location     Type
  8264 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8265 ;;  sign            1   29[BANK0 ] unsigned char 
  8266 ;;  cntr            1   28[BANK0 ] unsigned char 
  8267 ;;  exp             1   24[BANK0 ] unsigned char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  3   14[BANK0 ] float 
  8270 ;; Registers used:
  8271 ;;		wreg, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:       16 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    6
  8284 ;; This function calls:
  8285 ;;		___ftpack
  8286 ;; This function is called by:
  8287 ;;		_getPercentValue
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           
  8292                           ;psect for function ___ftmul
  8293  0E71                     ___ftmul:	
  8294                           
  8295                           ;incstack = 0
  8296                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8297  0E71  0020               	movlb	0	; select bank0
  8298  0E72  082E               	movf	___ftmul@f1,w
  8299  0E73  00B4               	movwf	??___ftmul
  8300  0E74  082F               	movf	___ftmul@f1+1,w
  8301  0E75  00B5               	movwf	??___ftmul+1
  8302  0E76  0830               	movf	___ftmul@f1+2,w
  8303  0E77  00B6               	movwf	??___ftmul+2
  8304  0E78  1003               	clrc
  8305  0E79  0D35               	rlf	??___ftmul+1,w
  8306  0E7A  0D36               	rlf	??___ftmul+2,w
  8307  0E7B  00B7               	movwf	??___ftmul+3
  8308  0E7C  0837               	movf	??___ftmul+3,w
  8309  0E7D  00B8               	movwf	___ftmul@exp
  8310  0E7E  08B8               	movf	___ftmul@exp,f
  8311  0E7F  1D03               	skipz
  8312  0E80  2E88               	goto	l8765
  8313  0E81  3000               	movlw	0
  8314  0E82  00AE               	movwf	?___ftmul
  8315  0E83  3000               	movlw	0
  8316  0E84  00AF               	movwf	?___ftmul+1
  8317  0E85  3000               	movlw	0
  8318  0E86  00B0               	movwf	?___ftmul+2
  8319  0E87  0008               	return
  8320  0E88                     l8765:	
  8321  0E88  0831               	movf	___ftmul@f2,w
  8322  0E89  00B4               	movwf	??___ftmul
  8323  0E8A  0832               	movf	___ftmul@f2+1,w
  8324  0E8B  00B5               	movwf	??___ftmul+1
  8325  0E8C  0833               	movf	___ftmul@f2+2,w
  8326  0E8D  00B6               	movwf	??___ftmul+2
  8327  0E8E  1003               	clrc
  8328  0E8F  0D35               	rlf	??___ftmul+1,w
  8329  0E90  0D36               	rlf	??___ftmul+2,w
  8330  0E91  00B7               	movwf	??___ftmul+3
  8331  0E92  0837               	movf	??___ftmul+3,w
  8332  0E93  00BD               	movwf	___ftmul@sign
  8333  0E94  08BD               	movf	___ftmul@sign,f
  8334  0E95  1D03               	skipz
  8335  0E96  2E9E               	goto	l8771
  8336  0E97  3000               	movlw	0
  8337  0E98  00AE               	movwf	?___ftmul
  8338  0E99  3000               	movlw	0
  8339  0E9A  00AF               	movwf	?___ftmul+1
  8340  0E9B  3000               	movlw	0
  8341  0E9C  00B0               	movwf	?___ftmul+2
  8342  0E9D  0008               	return
  8343  0E9E                     l8771:	
  8344  0E9E  083D               	movf	___ftmul@sign,w
  8345  0E9F  3E7B               	addlw	123
  8346  0EA0  00B4               	movwf	??___ftmul
  8347  0EA1  0834               	movf	??___ftmul,w
  8348  0EA2  07B8               	addwf	___ftmul@exp,f
  8349  0EA3  082E               	movf	___ftmul@f1,w
  8350  0EA4  00B4               	movwf	??___ftmul
  8351  0EA5  082F               	movf	___ftmul@f1+1,w
  8352  0EA6  00B5               	movwf	??___ftmul+1
  8353  0EA7  0830               	movf	___ftmul@f1+2,w
  8354  0EA8  00B6               	movwf	??___ftmul+2
  8355  0EA9  3010               	movlw	16
  8356  0EAA                     u9225:	
  8357  0EAA  36B6               	lsrf	??___ftmul+2,f
  8358  0EAB  0CB5               	rrf	??___ftmul+1,f
  8359  0EAC  0CB4               	rrf	??___ftmul,f
  8360  0EAD  0B89               	decfsz	9,f
  8361  0EAE  2EAA               	goto	u9225
  8362  0EAF  0834               	movf	??___ftmul,w
  8363  0EB0  00B7               	movwf	??___ftmul+3
  8364  0EB1  0837               	movf	??___ftmul+3,w
  8365  0EB2  00BD               	movwf	___ftmul@sign
  8366  0EB3  0831               	movf	___ftmul@f2,w
  8367  0EB4  00B4               	movwf	??___ftmul
  8368  0EB5  0832               	movf	___ftmul@f2+1,w
  8369  0EB6  00B5               	movwf	??___ftmul+1
  8370  0EB7  0833               	movf	___ftmul@f2+2,w
  8371  0EB8  00B6               	movwf	??___ftmul+2
  8372  0EB9  3010               	movlw	16
  8373  0EBA                     u9235:	
  8374  0EBA  36B6               	lsrf	??___ftmul+2,f
  8375  0EBB  0CB5               	rrf	??___ftmul+1,f
  8376  0EBC  0CB4               	rrf	??___ftmul,f
  8377  0EBD  0B89               	decfsz	9,f
  8378  0EBE  2EBA               	goto	u9235
  8379  0EBF  0834               	movf	??___ftmul,w
  8380  0EC0  00B7               	movwf	??___ftmul+3
  8381  0EC1  0837               	movf	??___ftmul+3,w
  8382  0EC2  06BD               	xorwf	___ftmul@sign,f
  8383  0EC3  3080               	movlw	128
  8384  0EC4  00B4               	movwf	??___ftmul
  8385  0EC5  0834               	movf	??___ftmul,w
  8386  0EC6  05BD               	andwf	___ftmul@sign,f
  8387  0EC7  17AF               	bsf	___ftmul@f1+1,7
  8388  0EC8  17B2               	bsf	___ftmul@f2+1,7
  8389  0EC9  30FF               	movlw	255
  8390  0ECA  05B1               	andwf	___ftmul@f2,f
  8391  0ECB  30FF               	movlw	255
  8392  0ECC  05B2               	andwf	___ftmul@f2+1,f
  8393  0ECD  3000               	movlw	0
  8394  0ECE  05B3               	andwf	___ftmul@f2+2,f
  8395  0ECF  3000               	movlw	0
  8396  0ED0  00B9               	movwf	___ftmul@f3_as_product
  8397  0ED1  3000               	movlw	0
  8398  0ED2  00BA               	movwf	___ftmul@f3_as_product+1
  8399  0ED3  3000               	movlw	0
  8400  0ED4  00BB               	movwf	___ftmul@f3_as_product+2
  8401  0ED5  3007               	movlw	7
  8402  0ED6  00B4               	movwf	??___ftmul
  8403  0ED7  0834               	movf	??___ftmul,w
  8404  0ED8  00BC               	movwf	___ftmul@cntr
  8405  0ED9                     l8783:	
  8406  0ED9  1C2E               	btfss	___ftmul@f1,0
  8407  0EDA  2EE1               	goto	l8787
  8408  0EDB  0831               	movf	___ftmul@f2,w
  8409  0EDC  07B9               	addwf	___ftmul@f3_as_product,f
  8410  0EDD  0832               	movf	___ftmul@f2+1,w
  8411  0EDE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8412  0EDF  0833               	movf	___ftmul@f2+2,w
  8413  0EE0  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8414  0EE1                     l8787:	
  8415  0EE1  3001               	movlw	1
  8416  0EE2                     u9255:	
  8417  0EE2  36B0               	lsrf	___ftmul@f1+2,f
  8418  0EE3  0CAF               	rrf	___ftmul@f1+1,f
  8419  0EE4  0CAE               	rrf	___ftmul@f1,f
  8420  0EE5  0B89               	decfsz	9,f
  8421  0EE6  2EE2               	goto	u9255
  8422  0EE7  3001               	movlw	1
  8423  0EE8                     u9265:	
  8424  0EE8  35B1               	lslf	___ftmul@f2,f
  8425  0EE9  0DB2               	rlf	___ftmul@f2+1,f
  8426  0EEA  0DB3               	rlf	___ftmul@f2+2,f
  8427  0EEB  0B89               	decfsz	9,f
  8428  0EEC  2EE8               	goto	u9265
  8429  0EED  3001               	movlw	1
  8430  0EEE  02BC               	subwf	___ftmul@cntr,f
  8431  0EEF  1D03               	btfss	3,2
  8432  0EF0  2ED9               	goto	l8783
  8433  0EF1  3009               	movlw	9
  8434  0EF2  00B4               	movwf	??___ftmul
  8435  0EF3  0834               	movf	??___ftmul,w
  8436  0EF4  00BC               	movwf	___ftmul@cntr
  8437  0EF5                     l8795:	
  8438  0EF5  1C2E               	btfss	___ftmul@f1,0
  8439  0EF6  2EFD               	goto	l8799
  8440  0EF7  0831               	movf	___ftmul@f2,w
  8441  0EF8  07B9               	addwf	___ftmul@f3_as_product,f
  8442  0EF9  0832               	movf	___ftmul@f2+1,w
  8443  0EFA  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8444  0EFB  0833               	movf	___ftmul@f2+2,w
  8445  0EFC  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8446  0EFD                     l8799:	
  8447  0EFD  3001               	movlw	1
  8448  0EFE                     u9295:	
  8449  0EFE  36B0               	lsrf	___ftmul@f1+2,f
  8450  0EFF  0CAF               	rrf	___ftmul@f1+1,f
  8451  0F00  0CAE               	rrf	___ftmul@f1,f
  8452  0F01  0B89               	decfsz	9,f
  8453  0F02  2EFE               	goto	u9295
  8454  0F03  3001               	movlw	1
  8455  0F04                     u9305:	
  8456  0F04  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8457  0F05  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8458  0F06  0CB9               	rrf	___ftmul@f3_as_product,f
  8459  0F07  0B89               	decfsz	9,f
  8460  0F08  2F04               	goto	u9305
  8461  0F09  3001               	movlw	1
  8462  0F0A  02BC               	subwf	___ftmul@cntr,f
  8463  0F0B  1D03               	btfss	3,2
  8464  0F0C  2EF5               	goto	l8795
  8465  0F0D  0839               	movf	___ftmul@f3_as_product,w
  8466  0F0E  00A0               	movwf	___ftpack@arg
  8467  0F0F  083A               	movf	___ftmul@f3_as_product+1,w
  8468  0F10  00A1               	movwf	___ftpack@arg+1
  8469  0F11  083B               	movf	___ftmul@f3_as_product+2,w
  8470  0F12  00A2               	movwf	___ftpack@arg+2
  8471  0F13  0838               	movf	___ftmul@exp,w
  8472  0F14  00B4               	movwf	??___ftmul
  8473  0F15  0834               	movf	??___ftmul,w
  8474  0F16  00A3               	movwf	___ftpack@exp
  8475  0F17  083D               	movf	___ftmul@sign,w
  8476  0F18  00B5               	movwf	??___ftmul+1
  8477  0F19  0835               	movf	??___ftmul+1,w
  8478  0F1A  00A4               	movwf	___ftpack@sign
  8479  0F1B  3188  2092         	fcall	___ftpack
  8480  0F1D  0020               	movlb	0	; select bank0
  8481  0F1E  0820               	movf	?___ftpack,w
  8482  0F1F  00AE               	movwf	?___ftmul
  8483  0F20  0821               	movf	?___ftpack+1,w
  8484  0F21  00AF               	movwf	?___ftmul+1
  8485  0F22  0822               	movf	?___ftpack+2,w
  8486  0F23  00B0               	movwf	?___ftmul+2
  8487  0F24  0008               	return
  8488  0F25                     __end_of___ftmul:	
  8489                           
  8490                           	psect	text34
  8491  1C22                     __ptext34:	
  8492 ;; *************** function _setMemory_Modify *****************
  8493 ;; Defined at:
  8494 ;;		line 1064 in file "../src/MCU_B1.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  command         1    wreg     unsigned char 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  command         1    1[BANK0 ] unsigned char 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;		None               void
  8501 ;; Registers used:
  8502 ;;		wreg, status,2, status,0
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;Total ram usage:        2 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    5
  8515 ;; This function calls:
  8516 ;;		Nothing
  8517 ;; This function is called by:
  8518 ;;		_setLog_Code
  8519 ;;		_setRFSW_AdjControl
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           
  8524                           ;psect for function _setMemory_Modify
  8525  1C22                     _setMemory_Modify:	
  8526                           
  8527                           ;incstack = 0
  8528                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8529                           ;setMemory_Modify@command stored from wreg
  8530  1C22  0020               	movlb	0	; select bank0
  8531  1C23  00A1               	movwf	setMemory_Modify@command
  8532                           
  8533                           ;MCU_B1.c: 1065: Memory.Modify = command == 1 ? 1 : 0;
  8534  1C24  0821               	movf	setMemory_Modify@command,w
  8535  1C25  3A01               	xorlw	1
  8536  1C26  3000               	movlw	0
  8537  1C27  1903               	skipnz
  8538  1C28  3001               	movlw	1
  8539  1C29  00A0               	movwf	??_setMemory_Modify
  8540  1C2A  0024               	movlb	4	; select bank4
  8541  1C2B  0844               	movf	(_Memory^(0+512)+36),w
  8542  1C2C  0020               	movlb	0	; select bank0
  8543  1C2D  0620               	xorwf	??_setMemory_Modify,w
  8544  1C2E  39FE               	andlw	-2
  8545  1C2F  0620               	xorwf	??_setMemory_Modify,w
  8546  1C30  0024               	movlb	4	; select bank4
  8547  1C31  00C4               	movwf	(_Memory^(0+512)+36)
  8548                           
  8549                           ;MCU_B1.c: 1066: Memory.Time = 0;
  8550  1C32  01C2               	clrf	(_Memory^(0+512)+34)
  8551  1C33  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8552  1C34  0008               	return
  8553  1C35                     __end_of_setMemory_Modify:	
  8554                           
  8555                           	psect	text35
  8556  1B91                     __ptext35:	
  8557 ;; *************** function _getRF_KeyStatus *****************
  8558 ;; Defined at:
  8559 ;;		line 190 in file "../src/RF_Control_B1.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;		None
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  key             1    1[BANK0 ] unsigned char 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  1    wreg      unsigned char 
  8566 ;; Registers used:
  8567 ;;		wreg, status,2
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;Total ram usage:        3 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    5
  8580 ;; This function calls:
  8581 ;;		Nothing
  8582 ;; This function is called by:
  8583 ;;		_setRF_Main
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           
  8588                           ;psect for function _getRF_KeyStatus
  8589  1B91                     _getRF_KeyStatus:	
  8590                           
  8591                           ;RF_Control_B1.c: 191: char key = 0;
  8592                           
  8593                           ;incstack = 0
  8594                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8595  1B91  0020               	movlb	0	; select bank0
  8596  1B92  01A1               	clrf	getRF_KeyStatus@key
  8597                           
  8598                           ;RF_Control_B1.c: 197: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8599  1B93  01A2               	clrf	_getRF_KeyStatus$5261
  8600  1B94  0AA2               	incf	_getRF_KeyStatus$5261,f
  8601  1B95  1F0C               	btfss	12,6	;volatile
  8602  1B96  1A0C               	btfsc	12,4	;volatile
  8603  1B97  2B9C               	goto	l9737
  8604  1B98  1C0C               	btfss	12,0	;volatile
  8605  1B99  188D               	btfsc	13,1	;volatile
  8606  1B9A  2B9C               	goto	l9737
  8607  1B9B  01A2               	clrf	_getRF_KeyStatus$5261
  8608  1B9C                     l9737:	
  8609  1B9C  0822               	movf	_getRF_KeyStatus$5261,w
  8610  1B9D  00A0               	movwf	??_getRF_KeyStatus
  8611  1B9E  0820               	movf	??_getRF_KeyStatus,w
  8612  1B9F  00A1               	movwf	getRF_KeyStatus@key
  8613                           
  8614                           ;RF_Control_B1.c: 203: return key;
  8615  1BA0  0821               	movf	getRF_KeyStatus@key,w
  8616  1BA1  0008               	return
  8617  1BA2                     __end_of_getRF_KeyStatus:	
  8618                           
  8619                           	psect	text36
  8620  1B80                     __ptext36:	
  8621 ;; *************** function _getBuz_GO *****************
  8622 ;; Defined at:
  8623 ;;		line 82 in file "../src/Buzzer_B1.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;		None
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;  i               2    4[BANK0 ] int 
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  2    0[BANK0 ] int 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2, status,0
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8637 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8639 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8640 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8641 ;;Total ram usage:        6 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    5
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_setRF_Main
  8648 ;; This function uses a non-reentrant model
  8649 ;;
  8650                           
  8651                           
  8652                           ;psect for function _getBuz_GO
  8653  1B80                     _getBuz_GO:	
  8654                           
  8655                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8656                           
  8657                           ;incstack = 0
  8658                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8659  1B80  0021               	movlb	1	; select bank1
  8660  1B81  0C2E               	rrf	_Buz1^(0+128),w
  8661  1B82  3901               	andlw	1
  8662  1B83  0020               	movlb	0	; select bank0
  8663  1B84  00A2               	movwf	??_getBuz_GO
  8664  1B85  01A3               	clrf	??_getBuz_GO+1
  8665  1B86  0822               	movf	??_getBuz_GO,w
  8666  1B87  00A4               	movwf	getBuz_GO@i
  8667  1B88  0823               	movf	??_getBuz_GO+1,w
  8668  1B89  00A5               	movwf	getBuz_GO@i+1
  8669                           
  8670                           ;Buzzer_B1.c: 84: return i;
  8671  1B8A  0825               	movf	getBuz_GO@i+1,w
  8672  1B8B  01A1               	clrf	?_getBuz_GO+1
  8673  1B8C  07A1               	addwf	?_getBuz_GO+1,f
  8674  1B8D  0824               	movf	getBuz_GO@i,w
  8675  1B8E  01A0               	clrf	?_getBuz_GO
  8676  1B8F  07A0               	addwf	?_getBuz_GO,f
  8677  1B90  0008               	return
  8678  1B91                     __end_of_getBuz_GO:	
  8679                           
  8680                           	psect	text37
  8681  1B41                     __ptext37:	
  8682 ;; *************** function _RF_RxDisable *****************
  8683 ;; Defined at:
  8684 ;;		line 265 in file "../src/RF_Control_B1.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;		None
  8687 ;; Auto vars:     Size  Location     Type
  8688 ;;		None
  8689 ;; Return value:  Size  Location     Type
  8690 ;;		None               void
  8691 ;; Registers used:
  8692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8693 ;; Tracked objects:
  8694 ;;		On entry : 0/0
  8695 ;;		On exit  : 0/0
  8696 ;;		Unchanged: 0/0
  8697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8702 ;;Total ram usage:        0 bytes
  8703 ;; Hardware stack levels used:    1
  8704 ;; Hardware stack levels required when called:    7
  8705 ;; This function calls:
  8706 ;;		_CC2500_WriteCommand
  8707 ;; This function is called by:
  8708 ;;		_setRF_Main
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           
  8713                           ;psect for function _RF_RxDisable
  8714  1B41                     _RF_RxDisable:	
  8715                           
  8716                           ;RF_Control_B1.c: 266: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8717                           
  8718                           ;incstack = 0
  8719                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8720  1B41  0021               	movlb	1	; select bank1
  8721  1B42  18BA               	btfsc	_RF1^(0+128),1
  8722  1B43  2B46               	goto	l2283
  8723  1B44  1DBA               	btfss	_RF1^(0+128),3
  8724  1B45  0008               	return
  8725  1B46                     l2283:	
  8726                           
  8727                           ;RF_Control_B1.c: 267: RF1.RxStatus = 0;
  8728  1B46  11BA               	bcf	_RF1^(0+128),3
  8729                           
  8730                           ;RF_Control_B1.c: 268: RF1.ReceiveGO = 0;
  8731  1B47  10BA               	bcf	_RF1^(0+128),1
  8732                           
  8733                           ;RF_Control_B1.c: 269: CC2500_WriteCommand(0x36);
  8734  1B48  3036               	movlw	54
  8735  1B49  319D  254A  319B   	fcall	_CC2500_WriteCommand
  8736                           
  8737                           ;RF_Control_B1.c: 271: CC2500_WriteCommand(0x3A);
  8738  1B4C  303A               	movlw	58
  8739  1B4D  319D  254A         	fcall	_CC2500_WriteCommand
  8740  1B4F  0008               	return
  8741  1B50                     __end_of_RF_RxDisable:	
  8742                           
  8743                           	psect	text38
  8744  0955                     __ptext38:	
  8745 ;; *************** function _CC2500_TxData *****************
  8746 ;; Defined at:
  8747 ;;		line 32 in file "../src/CC2500_B1.c"
  8748 ;; Parameters:    Size  Location     Type
  8749 ;;		None
  8750 ;; Auto vars:     Size  Location     Type
  8751 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8752 ;; Return value:  Size  Location     Type
  8753 ;;		None               void
  8754 ;; Registers used:
  8755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8756 ;; Tracked objects:
  8757 ;;		On entry : 0/0
  8758 ;;		On exit  : 0/0
  8759 ;;		Unchanged: 0/0
  8760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8762 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8763 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8764 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8765 ;;Total ram usage:        2 bytes
  8766 ;; Hardware stack levels used:    1
  8767 ;; Hardware stack levels required when called:    7
  8768 ;; This function calls:
  8769 ;;		_CC2500_WriteByte
  8770 ;;		_CC2500_WriteCommand
  8771 ;;		_Timeout_Counter
  8772 ;;		_set_TimeoutCleared
  8773 ;; This function is called by:
  8774 ;;		_setRF_Main
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           
  8779                           ;psect for function _CC2500_TxData
  8780  0955                     _CC2500_TxData:	
  8781                           
  8782                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8783                           ;CC2500_B1.c: 35: RC4 = 0;
  8784                           
  8785                           ;incstack = 0
  8786                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8787  0955  0020               	movlb	0	; select bank0
  8788  0956  120E               	bcf	14,4	;volatile
  8789                           
  8790                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8791  0957  307F               	movlw	127
  8792  0958  00A4               	movwf	??_CC2500_TxData
  8793  0959  0824               	movf	??_CC2500_TxData,w
  8794  095A  0021               	movlb	1	; select bank1
  8795  095B  00D0               	movwf	_SPI0Buffer^(0+128)
  8796                           
  8797                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8798  095C  2960               	goto	l9473
  8799  095D                     l9471:	
  8800                           
  8801                           ;CC2500_B1.c: 38: Timeout_Counter();
  8802  095D  319C  24C0  3189   	fcall	_Timeout_Counter
  8803  0960                     l9473:	
  8804  0960  0020               	movlb	0	; select bank0
  8805  0961  1D0E               	btfss	14,2	;volatile
  8806  0962  2966               	goto	l9477
  8807  0963  0021               	movlb	1	; select bank1
  8808  0964  1D2B               	btfss	(_myMain^(0+128)+11),2
  8809  0965  295D               	goto	l9471
  8810  0966                     l9477:	
  8811                           
  8812                           ;CC2500_B1.c: 39: };
  8813                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8814  0966  319A  222C  3189   	fcall	_set_TimeoutCleared
  8815                           
  8816                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8817  0969  319D  2518  3189   	fcall	_CC2500_WriteByte
  8818                           
  8819                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8820  096C  0021               	movlb	1	; select bank1
  8821  096D  0852               	movf	_Tx_Length^(0+128),w
  8822  096E  0020               	movlb	0	; select bank0
  8823  096F  00A4               	movwf	??_CC2500_TxData
  8824  0970  0824               	movf	??_CC2500_TxData,w
  8825  0971  0021               	movlb	1	; select bank1
  8826  0972  00D0               	movwf	_SPI0Buffer^(0+128)
  8827                           
  8828                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8829  0973  319D  2518  3189   	fcall	_CC2500_WriteByte
  8830                           
  8831                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8832  0976  0020               	movlb	0	; select bank0
  8833  0977  01A5               	clrf	CC2500_TxData@loop_e
  8834  0978                     l9491:	
  8835  0978  0021               	movlb	1	; select bank1
  8836  0979  0852               	movf	_Tx_Length^(0+128),w
  8837  097A  0020               	movlb	0	; select bank0
  8838  097B  0225               	subwf	CC2500_TxData@loop_e,w
  8839  097C  1803               	btfsc	3,0
  8840  097D  2991               	goto	l255
  8841                           
  8842                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8843  097E  0825               	movf	CC2500_TxData@loop_e,w
  8844  097F  3EA0               	addlw	_RF_Data& (0+255)
  8845  0980  0086               	movwf	6
  8846  0981  3001               	movlw	1	; select bank3/4
  8847  0982  0087               	movwf	7
  8848  0983  0801               	movf	1,w
  8849  0984  00A4               	movwf	??_CC2500_TxData
  8850  0985  0824               	movf	??_CC2500_TxData,w
  8851  0986  0021               	movlb	1	; select bank1
  8852  0987  00D0               	movwf	_SPI0Buffer^(0+128)
  8853                           
  8854                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8855  0988  319D  2518  3189   	fcall	_CC2500_WriteByte
  8856  098B  3001               	movlw	1
  8857  098C  0020               	movlb	0	; select bank0
  8858  098D  00A4               	movwf	??_CC2500_TxData
  8859  098E  0824               	movf	??_CC2500_TxData,w
  8860  098F  07A5               	addwf	CC2500_TxData@loop_e,f
  8861  0990  2978               	goto	l9491
  8862  0991                     l255:	
  8863                           
  8864                           ;CC2500_B1.c: 48: }
  8865                           ;CC2500_B1.c: 49: RC4 = 1;
  8866  0991  160E               	bsf	14,4	;volatile
  8867                           
  8868                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8869  0992  3035               	movlw	53
  8870  0993  319D  254A  3189   	fcall	_CC2500_WriteCommand
  8871                           
  8872                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8873  0996  299A               	goto	l9497
  8874  0997                     l9495:	
  8875                           
  8876                           ;CC2500_B1.c: 52: Timeout_Counter();
  8877  0997  319C  24C0  3189   	fcall	_Timeout_Counter
  8878  099A                     l9497:	
  8879  099A  0020               	movlb	0	; select bank0
  8880  099B  180D               	btfsc	13,0	;volatile
  8881  099C  29A0               	goto	l9501
  8882  099D  0021               	movlb	1	; select bank1
  8883  099E  1D2B               	btfss	(_myMain^(0+128)+11),2
  8884  099F  2997               	goto	l9495
  8885  09A0                     l9501:	
  8886                           
  8887                           ;CC2500_B1.c: 53: };
  8888                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8889  09A0  319A  222C  3189   	fcall	_set_TimeoutCleared
  8890                           
  8891                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8892  09A3  29A7               	goto	l9505
  8893  09A4                     l9503:	
  8894                           
  8895                           ;CC2500_B1.c: 57: Timeout_Counter();
  8896  09A4  319C  24C0  3189   	fcall	_Timeout_Counter
  8897  09A7                     l9505:	
  8898  09A7  0020               	movlb	0	; select bank0
  8899  09A8  1C0D               	btfss	13,0	;volatile
  8900  09A9  29AD               	goto	l9509
  8901  09AA  0021               	movlb	1	; select bank1
  8902  09AB  1D2B               	btfss	(_myMain^(0+128)+11),2
  8903  09AC  29A4               	goto	l9503
  8904  09AD                     l9509:	
  8905                           
  8906                           ;CC2500_B1.c: 58: };
  8907                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8908  09AD  319A  222C  3189   	fcall	_set_TimeoutCleared
  8909                           
  8910                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8911  09B0  3036               	movlw	54
  8912  09B1  319D  254A  3189   	fcall	_CC2500_WriteCommand
  8913                           
  8914                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8915  09B4  303B               	movlw	59
  8916  09B5  319D  254A         	fcall	_CC2500_WriteCommand
  8917                           
  8918                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8919  09B7  14F8               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8920  09B8  0008               	return
  8921  09B9                     __end_of_CC2500_TxData:	
  8922                           
  8923                           	psect	text39
  8924  0833                     __ptext39:	
  8925 ;; *************** function _CC2500_RxData *****************
  8926 ;; Defined at:
  8927 ;;		line 70 in file "../src/CC2500_B1.c"
  8928 ;; Parameters:    Size  Location     Type
  8929 ;;		None
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;		None               void
  8934 ;; Registers used:
  8935 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;Total ram usage:        2 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    7
  8948 ;; This function calls:
  8949 ;;		_CC2500_ReadByte
  8950 ;;		_CC2500_ReadStatus
  8951 ;;		_CC2500_WriteByte
  8952 ;;		_Timeout_Counter
  8953 ;;		_set_TimeoutCleared
  8954 ;; This function is called by:
  8955 ;;		_setRF_Main
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           
  8960                           ;psect for function _CC2500_RxData
  8961  0833                     _CC2500_RxData:	
  8962                           
  8963                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8964                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8965                           
  8966                           ;incstack = 0
  8967                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8968  0833  303B               	movlw	59
  8969  0834  319E  26DC  3188   	fcall	_CC2500_ReadStatus
  8970                           
  8971                           ;CC2500_B1.c: 85: if (s_data != 0) {
  8972  0837  0021               	movlb	1	; select bank1
  8973  0838  0855               	movf	_s_data^(0+128),w
  8974  0839  1903               	btfsc	3,2
  8975  083A  0008               	return
  8976                           
  8977                           ;CC2500_B1.c: 86: RC4 = 0;
  8978  083B  0020               	movlb	0	; select bank0
  8979  083C  120E               	bcf	14,4	;volatile
  8980                           
  8981                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  8982  083D  30FF               	movlw	255
  8983  083E  00A4               	movwf	??_CC2500_RxData
  8984  083F  0824               	movf	??_CC2500_RxData,w
  8985  0840  0021               	movlb	1	; select bank1
  8986  0841  00D0               	movwf	_SPI0Buffer^(0+128)
  8987                           
  8988                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  8989  0842  2846               	goto	l9527
  8990  0843                     l9525:	
  8991                           
  8992                           ;CC2500_B1.c: 89: Timeout_Counter();
  8993  0843  319C  24C0  3188   	fcall	_Timeout_Counter
  8994  0846                     l9527:	
  8995  0846  0020               	movlb	0	; select bank0
  8996  0847  1D0E               	btfss	14,2	;volatile
  8997  0848  284C               	goto	l9531
  8998  0849  0021               	movlb	1	; select bank1
  8999  084A  1D2B               	btfss	(_myMain^(0+128)+11),2
  9000  084B  2843               	goto	l9525
  9001  084C                     l9531:	
  9002                           
  9003                           ;CC2500_B1.c: 90: };
  9004                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9005  084C  319A  222C  3188   	fcall	_set_TimeoutCleared
  9006                           
  9007                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9008  084F  319D  2518  3188   	fcall	_CC2500_WriteByte
  9009                           
  9010                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9011  0852  319D  259A  3188   	fcall	_CC2500_ReadByte
  9012                           
  9013                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9014  0855  0021               	movlb	1	; select bank1
  9015  0856  0850               	movf	_SPI0Buffer^(0+128),w
  9016  0857  0020               	movlb	0	; select bank0
  9017  0858  00A4               	movwf	??_CC2500_RxData
  9018  0859  0824               	movf	??_CC2500_RxData,w
  9019  085A  0021               	movlb	1	; select bank1
  9020  085B  00CF               	movwf	_Rx_Length^(0+128)
  9021                           
  9022                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9023  085C  0020               	movlb	0	; select bank0
  9024  085D  01A5               	clrf	CC2500_RxData@loop_f
  9025  085E                     l9547:	
  9026  085E  0021               	movlb	1	; select bank1
  9027  085F  084F               	movf	_Rx_Length^(0+128),w
  9028  0860  0020               	movlb	0	; select bank0
  9029  0861  0225               	subwf	CC2500_RxData@loop_f,w
  9030  0862  1803               	btfsc	3,0
  9031  0863  2877               	goto	l9549
  9032                           
  9033                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9034  0864  319D  259A  3188   	fcall	_CC2500_ReadByte
  9035                           
  9036                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9037  0867  0021               	movlb	1	; select bank1
  9038  0868  0850               	movf	_SPI0Buffer^(0+128),w
  9039  0869  0020               	movlb	0	; select bank0
  9040  086A  00A4               	movwf	??_CC2500_RxData
  9041  086B  0825               	movf	CC2500_RxData@loop_f,w
  9042  086C  3EA0               	addlw	_RF_Data& (0+255)
  9043  086D  0086               	movwf	6
  9044  086E  3001               	movlw	1	; select bank3/4
  9045  086F  0087               	movwf	7
  9046  0870  0824               	movf	??_CC2500_RxData,w
  9047  0871  0081               	movwf	1
  9048  0872  3001               	movlw	1
  9049  0873  00A4               	movwf	??_CC2500_RxData
  9050  0874  0824               	movf	??_CC2500_RxData,w
  9051  0875  07A5               	addwf	CC2500_RxData@loop_f,f
  9052  0876  285E               	goto	l9547
  9053  0877                     l9549:	
  9054                           
  9055                           ;CC2500_B1.c: 99: }
  9056                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9057  0877  319D  259A  3188   	fcall	_CC2500_ReadByte
  9058                           
  9059                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9060  087A  0021               	movlb	1	; select bank1
  9061  087B  0850               	movf	_SPI0Buffer^(0+128),w
  9062  087C  0020               	movlb	0	; select bank0
  9063  087D  00A4               	movwf	??_CC2500_RxData
  9064  087E  0824               	movf	??_CC2500_RxData,w
  9065  087F  0021               	movlb	1	; select bank1
  9066  0880  00CE               	movwf	_RSSI^(0+128)
  9067                           
  9068                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9069  0881  319D  259A         	fcall	_CC2500_ReadByte
  9070                           
  9071                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9072  0883  0021               	movlb	1	; select bank1
  9073  0884  0850               	movf	_SPI0Buffer^(0+128),w
  9074  0885  0020               	movlb	0	; select bank0
  9075  0886  00A4               	movwf	??_CC2500_RxData
  9076  0887  0824               	movf	??_CC2500_RxData,w
  9077  0888  0021               	movlb	1	; select bank1
  9078  0889  00C9               	movwf	_CRC^(0+128)
  9079                           
  9080                           ;CC2500_B1.c: 104: RC4 = 1;
  9081  088A  0020               	movlb	0	; select bank0
  9082  088B  160E               	bsf	14,4	;volatile
  9083                           
  9084                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9085  088C  0021               	movlb	1	; select bank1
  9086  088D  1BC9               	btfsc	_CRC^(0+128),7
  9087                           
  9088                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9089  088E  1478               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9090                           
  9091                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9092  088F  11BA               	bcf	_RF1^(0+128),3
  9093                           
  9094                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9095  0890  14BA               	bsf	_RF1^(0+128),1
  9096  0891  0008               	return
  9097  0892                     __end_of_CC2500_RxData:	
  9098                           
  9099                           	psect	text40
  9100  1EDC                     __ptext40:	
  9101 ;; *************** function _CC2500_ReadStatus *****************
  9102 ;; Defined at:
  9103 ;;		line 301 in file "../src/CC2500_B1.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  status_addr     1    wreg     unsigned char 
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;		None               void
  9110 ;; Registers used:
  9111 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9120 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9121 ;;Total ram usage:        2 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    6
  9124 ;; This function calls:
  9125 ;;		_CC2500_ReadByte
  9126 ;;		_CC2500_WriteByte
  9127 ;;		_Timeout_Counter
  9128 ;;		_set_TimeoutCleared
  9129 ;; This function is called by:
  9130 ;;		_CC2500_RxData
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           
  9135                           ;psect for function _CC2500_ReadStatus
  9136  1EDC                     _CC2500_ReadStatus:	
  9137                           
  9138                           ;incstack = 0
  9139                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9140                           ;CC2500_ReadStatus@status_addr stored from wreg
  9141  1EDC  0020               	movlb	0	; select bank0
  9142  1EDD  00A3               	movwf	CC2500_ReadStatus@status_addr
  9143                           
  9144                           ;CC2500_B1.c: 302: RC4 = 0;
  9145  1EDE  120E               	bcf	14,4	;volatile
  9146                           
  9147                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9148  1EDF  0823               	movf	CC2500_ReadStatus@status_addr,w
  9149  1EE0  3EC0               	addlw	192
  9150  1EE1  00A2               	movwf	??_CC2500_ReadStatus
  9151  1EE2  0822               	movf	??_CC2500_ReadStatus,w
  9152  1EE3  0021               	movlb	1	; select bank1
  9153  1EE4  00D0               	movwf	_SPI0Buffer^(0+128)
  9154                           
  9155                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9156  1EE5  2EE9               	goto	l9343
  9157  1EE6                     l9341:	
  9158                           
  9159                           ;CC2500_B1.c: 306: Timeout_Counter();
  9160  1EE6  319C  24C0  319E   	fcall	_Timeout_Counter
  9161  1EE9                     l9343:	
  9162  1EE9  0020               	movlb	0	; select bank0
  9163  1EEA  1D0E               	btfss	14,2	;volatile
  9164  1EEB  2EEF               	goto	l9347
  9165  1EEC  0021               	movlb	1	; select bank1
  9166  1EED  1D2B               	btfss	(_myMain^(0+128)+11),2
  9167  1EEE  2EE6               	goto	l9341
  9168  1EEF                     l9347:	
  9169                           
  9170                           ;CC2500_B1.c: 307: };
  9171                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9172  1EEF  319A  222C  319E   	fcall	_set_TimeoutCleared
  9173                           
  9174                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9175  1EF2  319D  2518  319E   	fcall	_CC2500_WriteByte
  9176                           
  9177                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9178  1EF5  319D  259A         	fcall	_CC2500_ReadByte
  9179                           
  9180                           ;CC2500_B1.c: 312: RC4 = 1;
  9181  1EF7  0020               	movlb	0	; select bank0
  9182  1EF8  160E               	bsf	14,4	;volatile
  9183                           
  9184                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9185  1EF9  0021               	movlb	1	; select bank1
  9186  1EFA  0850               	movf	_SPI0Buffer^(0+128),w
  9187  1EFB  0020               	movlb	0	; select bank0
  9188  1EFC  00A2               	movwf	??_CC2500_ReadStatus
  9189  1EFD  0822               	movf	??_CC2500_ReadStatus,w
  9190  1EFE  0021               	movlb	1	; select bank1
  9191  1EFF  00D5               	movwf	_s_data^(0+128)
  9192  1F00  0008               	return
  9193  1F01                     __end_of_CC2500_ReadStatus:	
  9194                           
  9195                           	psect	text41
  9196  1D9A                     __ptext41:	
  9197 ;; *************** function _CC2500_ReadByte *****************
  9198 ;; Defined at:
  9199 ;;		line 235 in file "../src/CC2500_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;		None               void
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        2 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    5
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_CC2500_RxData
  9224 ;;		_CC2500_ReadStatus
  9225 ;;		_CC2500_ReadREG
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           
  9230                           ;psect for function _CC2500_ReadByte
  9231  1D9A                     _CC2500_ReadByte:	
  9232                           
  9233                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9234                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9235                           
  9236                           ;incstack = 0
  9237                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9238  1D9A  0020               	movlb	0	; select bank0
  9239  1D9B  01A1               	clrf	CC2500_ReadByte@loop_b
  9240  1D9C                     L3:	
  9241  1D9C  3008               	movlw	8
  9242  1D9D  0221               	subwf	CC2500_ReadByte@loop_b,w
  9243  1D9E  1803               	btfsc	3,0
  9244  1D9F  0008               	return
  9245                           
  9246                           ;CC2500_B1.c: 238: RC1 = 1;
  9247  1DA0  148E               	bsf	14,1	;volatile
  9248                           
  9249                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9250  1DA1  1003               	clrc
  9251  1DA2  0021               	movlb	1	; select bank1
  9252  1DA3  0DD0               	rlf	_SPI0Buffer^(0+128),f
  9253                           
  9254                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9255  1DA4  0020               	movlb	0	; select bank0
  9256  1DA5  1D0E               	btfss	14,2	;volatile
  9257  1DA6  2DAA               	goto	l9245
  9258                           
  9259                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9260  1DA7  0021               	movlb	1	; select bank1
  9261  1DA8  1450               	bsf	_SPI0Buffer^(0+128),0
  9262  1DA9  2DB0               	goto	l9247
  9263  1DAA                     l9245:	
  9264                           
  9265                           ;CC2500_B1.c: 242: else
  9266                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9267  1DAA  30FE               	movlw	254
  9268  1DAB  0020               	movlb	0	; select bank0
  9269  1DAC  00A0               	movwf	??_CC2500_ReadByte
  9270  1DAD  0820               	movf	??_CC2500_ReadByte,w
  9271  1DAE  0021               	movlb	1	; select bank1
  9272  1DAF  05D0               	andwf	_SPI0Buffer^(0+128),f
  9273  1DB0                     l9247:	
  9274                           
  9275                           ;CC2500_B1.c: 244: RC1 = 0;
  9276  1DB0  0020               	movlb	0	; select bank0
  9277  1DB1  108E               	bcf	14,1	;volatile
  9278  1DB2  3001               	movlw	1
  9279  1DB3  00A0               	movwf	??_CC2500_ReadByte
  9280  1DB4  0820               	movf	??_CC2500_ReadByte,w
  9281  1DB5  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9282  1DB6  2D9C               	goto	L3
  9283  1DB7                     __end_of_CC2500_ReadByte:	
  9284                           
  9285                           	psect	text42
  9286  1A13                     __ptext42:	
  9287 ;; *************** function _RF_Initialization *****************
  9288 ;; Defined at:
  9289 ;;		line 9 in file "../src/RF_Control_B1.c"
  9290 ;; Parameters:    Size  Location     Type
  9291 ;;		None
  9292 ;; Auto vars:     Size  Location     Type
  9293 ;;		None
  9294 ;; Return value:  Size  Location     Type
  9295 ;;		None               void
  9296 ;; Registers used:
  9297 ;;		wreg, status,2, status,0, pclath, cstack
  9298 ;; Tracked objects:
  9299 ;;		On entry : 0/0
  9300 ;;		On exit  : 0/0
  9301 ;;		Unchanged: 0/0
  9302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;Total ram usage:        0 bytes
  9308 ;; Hardware stack levels used:    1
  9309 ;; Hardware stack levels required when called:    6
  9310 ;; This function calls:
  9311 ;;		_setRF_Initialization
  9312 ;; This function is called by:
  9313 ;;		_main
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           
  9318                           ;psect for function _RF_Initialization
  9319  1A13                     _RF_Initialization:	
  9320                           
  9321                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9322                           
  9323                           ;incstack = 0
  9324                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9325  1A13  319A  22A1         	fcall	_setRF_Initialization
  9326  1A15  0008               	return
  9327  1A16                     __end_of_RF_Initialization:	
  9328                           
  9329                           	psect	text43
  9330  1AA1                     __ptext43:	
  9331 ;; *************** function _setRF_Initialization *****************
  9332 ;; Defined at:
  9333 ;;		line 43 in file "../src/RF_Control_B1.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;		None
  9338 ;; Return value:  Size  Location     Type
  9339 ;;		None               void
  9340 ;; Registers used:
  9341 ;;		wreg
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9350 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    5
  9354 ;; This function calls:
  9355 ;;		Nothing
  9356 ;; This function is called by:
  9357 ;;		_RF_Initialization
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           
  9362                           ;psect for function _setRF_Initialization
  9363  1AA1                     _setRF_Initialization:	
  9364                           
  9365                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9366                           
  9367                           ;incstack = 0
  9368                           ; Regs used in _setRF_Initialization: [wreg]
  9369  1AA1  3015               	movlw	21
  9370  1AA2  0020               	movlb	0	; select bank0
  9371  1AA3  00A0               	movwf	??_setRF_Initialization
  9372  1AA4  0820               	movf	??_setRF_Initialization,w
  9373  1AA5  0021               	movlb	1	; select bank1
  9374  1AA6  00D2               	movwf	_Tx_Length^(0+128)
  9375                           
  9376                           ;RF_Control_B1.c: 46: RF1.RunTime = 5;
  9377  1AA7  3005               	movlw	5
  9378  1AA8  00C1               	movwf	(_RF1^(0+128)+7)
  9379  1AA9  3000               	movlw	0
  9380  1AAA  00C2               	movwf	(_RF1^(0+128)+8)
  9381  1AAB  0008               	return
  9382  1AAC                     __end_of_setRF_Initialization:	
  9383                           
  9384                           	psect	text44
  9385  1BD8                     __ptext44:	
  9386 ;; *************** function _Mcu_Initialization *****************
  9387 ;; Defined at:
  9388 ;;		line 30 in file "../src/MCU_B1.c"
  9389 ;; Parameters:    Size  Location     Type
  9390 ;;		None
  9391 ;; Auto vars:     Size  Location     Type
  9392 ;;		None
  9393 ;; Return value:  Size  Location     Type
  9394 ;;		None               void
  9395 ;; Registers used:
  9396 ;;		wreg, status,2, status,0, pclath, cstack
  9397 ;; Tracked objects:
  9398 ;;		On entry : 0/0
  9399 ;;		On exit  : 0/0
  9400 ;;		Unchanged: 0/0
  9401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9405 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9406 ;;Total ram usage:        0 bytes
  9407 ;; Hardware stack levels used:    1
  9408 ;; Hardware stack levels required when called:    6
  9409 ;; This function calls:
  9410 ;;		_ADC_Set
  9411 ;;		_Fosc_Set
  9412 ;;		_IOC_Set
  9413 ;;		_IO_Set
  9414 ;;		_TMR1_Set
  9415 ;;		_WDT_Set
  9416 ;; This function is called by:
  9417 ;;		_main
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _Mcu_Initialization
  9423  1BD8                     _Mcu_Initialization:	
  9424                           
  9425                           ;MCU_B1.c: 32: Fosc_Set();
  9426                           
  9427                           ;incstack = 0
  9428                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9429  1BD8  319A  2228  319B   	fcall	_Fosc_Set
  9430                           
  9431                           ;MCU_B1.c: 34: IO_Set();
  9432  1BDB  319D  2531  319B   	fcall	_IO_Set
  9433                           
  9434                           ;MCU_B1.c: 36: ;;
  9435                           ;MCU_B1.c: 38: TMR1_Set();
  9436  1BDE  319A  22FF  319B   	fcall	_TMR1_Set
  9437                           
  9438                           ;MCU_B1.c: 40: ADC_Set();
  9439  1BE1  319A  2248  319B   	fcall	_ADC_Set
  9440                           
  9441                           ;MCU_B1.c: 42: ;;
  9442                           ;MCU_B1.c: 44: ;;
  9443                           ;MCU_B1.c: 46: IOC_Set();
  9444  1BE4  319A  22F3  319B   	fcall	_IOC_Set
  9445                           
  9446                           ;MCU_B1.c: 48: ;;
  9447                           ;MCU_B1.c: 50: ;;
  9448                           ;MCU_B1.c: 52: WDT_Set();
  9449  1BE7  319B  230B         	fcall	_WDT_Set
  9450  1BE9  0008               	return
  9451  1BEA                     __end_of_Mcu_Initialization:	
  9452                           
  9453                           	psect	text45
  9454  1B0B                     __ptext45:	
  9455 ;; *************** function _WDT_Set *****************
  9456 ;; Defined at:
  9457 ;;		line 1083 in file "../src/MCU_B1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;Total ram usage:        1 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    5
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_Mcu_Initialization
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           
  9486                           ;psect for function _WDT_Set
  9487  1B0B                     _WDT_Set:	
  9488                           
  9489                           ;MCU_B1.c: 1090: WDTCON = 0b00010111;;
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _WDT_Set: [wreg]
  9493  1B0B  3017               	movlw	23
  9494  1B0C  0021               	movlb	1	; select bank1
  9495  1B0D  0097               	movwf	23	;volatile
  9496                           
  9497                           ;MCU_B1.c: 1092: WDT.Enable = 1;
  9498  1B0E  0022               	movlb	2	; select bank2
  9499  1B0F  1425               	bsf	_WDT^(0+256),0
  9500                           
  9501                           ;MCU_B1.c: 1093: WDT.Timer = 10;
  9502  1B10  300A               	movlw	10
  9503  1B11  0020               	movlb	0	; select bank0
  9504  1B12  00A0               	movwf	??_WDT_Set
  9505  1B13  0820               	movf	??_WDT_Set,w
  9506  1B14  0022               	movlb	2	; select bank2
  9507  1B15  00A6               	movwf	(_WDT^(0+256)+1)
  9508  1B16  0008               	return
  9509  1B17                     __end_of_WDT_Set:	
  9510                           
  9511                           	psect	text46
  9512  1AFF                     __ptext46:	
  9513 ;; *************** function _TMR1_Set *****************
  9514 ;; Defined at:
  9515 ;;		line 199 in file "../src/MCU_B1.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;		None
  9518 ;; Auto vars:     Size  Location     Type
  9519 ;;		None
  9520 ;; Return value:  Size  Location     Type
  9521 ;;		None               void
  9522 ;; Registers used:
  9523 ;;		wreg
  9524 ;; Tracked objects:
  9525 ;;		On entry : 0/0
  9526 ;;		On exit  : 0/0
  9527 ;;		Unchanged: 0/0
  9528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;Total ram usage:        0 bytes
  9534 ;; Hardware stack levels used:    1
  9535 ;; Hardware stack levels required when called:    5
  9536 ;; This function calls:
  9537 ;;		Nothing
  9538 ;; This function is called by:
  9539 ;;		_Mcu_Initialization
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function _TMR1_Set
  9545  1AFF                     _TMR1_Set:	
  9546                           
  9547                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _TMR1_Set: [wreg]
  9551  1AFF  3041               	movlw	65
  9552  1B00  0020               	movlb	0	; select bank0
  9553  1B01  0098               	movwf	24	;volatile
  9554                           
  9555                           ;MCU_B1.c: 201: TMR1H = (int)((65536-1480)/256);
  9556  1B02  30FA               	movlw	250
  9557  1B03  0097               	movwf	23	;volatile
  9558                           
  9559                           ;MCU_B1.c: 202: TMR1L = (int)((65536-1480)%256);
  9560  1B04  3038               	movlw	56
  9561  1B05  0096               	movwf	22	;volatile
  9562                           
  9563                           ;MCU_B1.c: 203: TMR1IE = 1;
  9564  1B06  0021               	movlb	1	; select bank1
  9565  1B07  1411               	bsf	17,0	;volatile
  9566                           
  9567                           ;MCU_B1.c: 204: PEIE = 1;
  9568  1B08  170B               	bsf	11,6	;volatile
  9569                           
  9570                           ;MCU_B1.c: 205: GIE = 1;
  9571  1B09  178B               	bsf	11,7	;volatile
  9572  1B0A  0008               	return
  9573  1B0B                     __end_of_TMR1_Set:	
  9574                           
  9575                           	psect	text47
  9576  1D31                     __ptext47:	
  9577 ;; *************** function _IO_Set *****************
  9578 ;; Defined at:
  9579 ;;		line 60 in file "../src/MCU_B1.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;		None
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;		None
  9584 ;; Return value:  Size  Location     Type
  9585 ;;		None               void
  9586 ;; Registers used:
  9587 ;;		wreg, status,2
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;Total ram usage:        0 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; Hardware stack levels required when called:    5
  9600 ;; This function calls:
  9601 ;;		Nothing
  9602 ;; This function is called by:
  9603 ;;		_Mcu_Initialization
  9604 ;; This function uses a non-reentrant model
  9605 ;;
  9606                           
  9607                           
  9608                           ;psect for function _IO_Set
  9609  1D31                     _IO_Set:	
  9610                           
  9611                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9612                           
  9613                           ;incstack = 0
  9614                           ; Regs used in _IO_Set: [wreg+status,2]
  9615  1D31  3077               	movlw	119
  9616  1D32  0021               	movlb	1	; select bank1
  9617  1D33  008C               	movwf	12	;volatile
  9618                           
  9619                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9620  1D34  3007               	movlw	7
  9621  1D35  008D               	movwf	13	;volatile
  9622                           
  9623                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9624  1D36  300C               	movlw	12
  9625  1D37  008E               	movwf	14	;volatile
  9626                           
  9627                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9628  1D38  0022               	movlb	2	; select bank2
  9629  1D39  018C               	clrf	12	;volatile
  9630                           
  9631                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9632  1D3A  3002               	movlw	2
  9633  1D3B  008D               	movwf	13	;volatile
  9634                           
  9635                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9636  1D3C  018E               	clrf	14	;volatile
  9637                           
  9638                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9639  1D3D  3022               	movlw	34
  9640  1D3E  0023               	movlb	3	; select bank3
  9641  1D3F  008C               	movwf	12	;volatile
  9642                           
  9643                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9644  1D40  018D               	clrf	13	;volatile
  9645                           
  9646                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9647  1D41  018E               	clrf	14	;volatile
  9648                           
  9649                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9650  1D42  3077               	movlw	119
  9651  1D43  0020               	movlb	0	; select bank0
  9652  1D44  008C               	movwf	12	;volatile
  9653                           
  9654                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9655  1D45  3007               	movlw	7
  9656  1D46  008D               	movwf	13	;volatile
  9657                           
  9658                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9659  1D47  300C               	movlw	12
  9660  1D48  008E               	movwf	14	;volatile
  9661  1D49  0008               	return
  9662  1D4A                     __end_of_IO_Set:	
  9663                           
  9664                           	psect	text48
  9665  1AF3                     __ptext48:	
  9666 ;; *************** function _IOC_Set *****************
  9667 ;; Defined at:
  9668 ;;		line 365 in file "../src/MCU_B1.c"
  9669 ;; Parameters:    Size  Location     Type
  9670 ;;		None
  9671 ;; Auto vars:     Size  Location     Type
  9672 ;;		None
  9673 ;; Return value:  Size  Location     Type
  9674 ;;		None               void
  9675 ;; Registers used:
  9676 ;;		wreg, status,2
  9677 ;; Tracked objects:
  9678 ;;		On entry : 0/0
  9679 ;;		On exit  : 0/0
  9680 ;;		Unchanged: 0/0
  9681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;Total ram usage:        0 bytes
  9687 ;; Hardware stack levels used:    1
  9688 ;; Hardware stack levels required when called:    5
  9689 ;; This function calls:
  9690 ;;		Nothing
  9691 ;; This function is called by:
  9692 ;;		_Mcu_Initialization
  9693 ;; This function uses a non-reentrant model
  9694 ;;
  9695                           
  9696                           
  9697                           ;psect for function _IOC_Set
  9698  1AF3                     _IOC_Set:	
  9699                           
  9700                           ;MCU_B1.c: 366: WPUB2 = 0;
  9701                           
  9702                           ;incstack = 0
  9703                           ; Regs used in _IOC_Set: [wreg+status,2]
  9704  1AF3  0024               	movlb	4	; select bank4
  9705  1AF4  110D               	bcf	13,2	;volatile
  9706                           
  9707                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9708  1AF5  0027               	movlb	7	; select bank7
  9709  1AF6  0194               	clrf	20	;volatile
  9710                           
  9711                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9712  1AF7  3004               	movlw	4
  9713  1AF8  0095               	movwf	21	;volatile
  9714                           
  9715                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
  9716  1AF9  0196               	clrf	22	;volatile
  9717                           
  9718                           ;MCU_B1.c: 393: IOCIE = 1;
  9719  1AFA  158B               	bsf	11,3	;volatile
  9720                           
  9721                           ;MCU_B1.c: 394: IOCIF = 0;
  9722  1AFB  100B               	bcf	11,0	;volatile
  9723                           
  9724                           ;MCU_B1.c: 395: PEIE = 1;
  9725  1AFC  170B               	bsf	11,6	;volatile
  9726                           
  9727                           ;MCU_B1.c: 396: GIE = 1;
  9728  1AFD  178B               	bsf	11,7	;volatile
  9729  1AFE  0008               	return
  9730  1AFF                     __end_of_IOC_Set:	
  9731                           
  9732                           	psect	text49
  9733  1A28                     __ptext49:	
  9734 ;; *************** function _Fosc_Set *****************
  9735 ;; Defined at:
  9736 ;;		line 56 in file "../src/MCU_B1.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;Total ram usage:        0 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    5
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_Mcu_Initialization
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _Fosc_Set
  9766  1A28                     _Fosc_Set:	
  9767                           
  9768                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9769                           
  9770                           ;incstack = 0
  9771                           ; Regs used in _Fosc_Set: [wreg]
  9772  1A28  3078               	movlw	120
  9773  1A29  0021               	movlb	1	; select bank1
  9774  1A2A  0099               	movwf	25	;volatile
  9775  1A2B  0008               	return
  9776  1A2C                     __end_of_Fosc_Set:	
  9777                           
  9778                           	psect	text50
  9779  1A48                     __ptext50:	
  9780 ;; *************** function _ADC_Set *****************
  9781 ;; Defined at:
  9782 ;;		line 419 in file "../src/MCU_B1.c"
  9783 ;; Parameters:    Size  Location     Type
  9784 ;;		None
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;		None
  9787 ;; Return value:  Size  Location     Type
  9788 ;;		None               void
  9789 ;; Registers used:
  9790 ;;		wreg
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9800 ;;Total ram usage:        0 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    5
  9803 ;; This function calls:
  9804 ;;		Nothing
  9805 ;; This function is called by:
  9806 ;;		_Mcu_Initialization
  9807 ;; This function uses a non-reentrant model
  9808 ;;
  9809                           
  9810                           
  9811                           ;psect for function _ADC_Set
  9812  1A48                     _ADC_Set:	
  9813                           
  9814                           ;MCU_B1.c: 420: ADCON1 = 0xf3;
  9815                           
  9816                           ;incstack = 0
  9817                           ; Regs used in _ADC_Set: [wreg]
  9818  1A48  30F3               	movlw	243
  9819  1A49  0021               	movlb	1	; select bank1
  9820  1A4A  009E               	movwf	30	;volatile
  9821                           
  9822                           ;MCU_B1.c: 421: FVRCON = 0xc1;
  9823  1A4B  30C1               	movlw	193
  9824  1A4C  0022               	movlb	2	; select bank2
  9825  1A4D  0097               	movwf	23	;volatile
  9826  1A4E  0008               	return
  9827  1A4F                     __end_of_ADC_Set:	
  9828                           
  9829                           	psect	text51
  9830  0049                     __ptext51:	
  9831 ;; *************** function _Load_Main *****************
  9832 ;; Defined at:
  9833 ;;		line 39 in file "../src/OverLoad_B1.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;  i               2   74[BANK0 ] int 
  9838 ;;  Load_Status     1   73[BANK0 ] unsigned char 
  9839 ;;  error           1   72[BANK0 ] unsigned char 
  9840 ;; Return value:  Size  Location     Type
  9841 ;;		None               void
  9842 ;; Registers used:
  9843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;Total ram usage:        6 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    7
  9856 ;; This function calls:
  9857 ;;		___lwdiv
  9858 ;;		___wmul
  9859 ;;		_getAll_DimmerLights_AdjSw
  9860 ;;		_getDimmer_LoadGO
  9861 ;;		_getDimmer_Load_Status
  9862 ;;		_getMain_All_Error_Status
  9863 ;;		_getMain_LightsStatus
  9864 ;;		_getMain_Lights_Count
  9865 ;;		_setLoad_AH_AL_Restore
  9866 ;;		_setProductData
  9867 ;; This function is called by:
  9868 ;;		_main
  9869 ;; This function uses a non-reentrant model
  9870 ;;
  9871                           
  9872                           
  9873                           ;psect for function _Load_Main
  9874  0049                     _Load_Main:	
  9875                           
  9876                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9880  0049  3000               	movlw	0
  9881  004A  3188  2000  3180   	fcall	_getMain_All_Error_Status
  9882  004D  0020               	movlb	0	; select bank0
  9883  004E  00E6               	movwf	??_Load_Main
  9884  004F  0866               	movf	??_Load_Main,w
  9885  0050  00E8               	movwf	Load_Main@error
  9886                           
  9887                           ;OverLoad_B1.c: 41: char Load_Status = 0;
  9888  0051  01E9               	clrf	Load_Main@Load_Status
  9889                           
  9890                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  9891  0052  0022               	movlb	2	; select bank2
  9892  0053  1C27               	btfss	_Load^(0+256),0
  9893  0054  2A87               	goto	l1715
  9894                           
  9895                           ;OverLoad_B1.c: 64: if (getMain_LightsStatus() == 0) {
  9896  0055  319C  240F  3180   	fcall	_getMain_LightsStatus
  9897  0058  3800               	iorlw	0
  9898  0059  1D03               	skipz
  9899  005A  285D               	goto	l10715
  9900                           
  9901                           ;OverLoad_B1.c: 65: Load.GO = 0;
  9902  005B  0022               	movlb	2	; select bank2
  9903  005C  2885               	goto	l10733
  9904  005D                     l10715:	
  9905                           ;OverLoad_B1.c: 66: } else {
  9906                           
  9907                           
  9908                           ;OverLoad_B1.c: 69: if (error == 0 && getAll_DimmerLights_AdjSw() == 0) {
  9909  005D  0020               	movlb	0	; select bank0
  9910  005E  08E8               	movf	Load_Main@error,f
  9911  005F  1D03               	skipz
  9912  0060  2882               	goto	l1718
  9913  0061  319F  27A4  3180   	fcall	_getAll_DimmerLights_AdjSw
  9914  0064  3800               	iorlw	0
  9915  0065  1D03               	skipz
  9916  0066  2882               	goto	l1718
  9917                           
  9918                           ;OverLoad_B1.c: 70: Load.GO = 1;
  9919  0067  0022               	movlb	2	; select bank2
  9920  0068  14A7               	bsf	_Load^(0+256),1
  9921                           
  9922                           ;OverLoad_B1.c: 72: Load_Status = getDimmer_Load_Status();
  9923  0069  319A  227F  3180   	fcall	_getDimmer_Load_Status
  9924  006C  0020               	movlb	0	; select bank0
  9925  006D  00E6               	movwf	??_Load_Main
  9926  006E  0866               	movf	??_Load_Main,w
  9927  006F  00E9               	movwf	Load_Main@Load_Status
  9928                           
  9929                           ;OverLoad_B1.c: 73: if (getDimmer_LoadGO() == 1) {
  9930  0070  319A  2277  3180   	fcall	_getDimmer_LoadGO
  9931  0073  3A01               	xorlw	1
  9932  0074  1D03               	skipz
  9933  0075  287D               	goto	l1719
  9934                           
  9935                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  9936  0076  0022               	movlb	2	; select bank2
  9937  0077  1DA7               	btfss	_Load^(0+256),3
  9938  0078  1BA7               	btfsc	_Load^(0+256),7
  9939  0079  2886               	goto	l1717
  9940                           
  9941                           ;OverLoad_B1.c: 75: Load.Run = 1;
  9942  007A  15A7               	bsf	_Load^(0+256),3
  9943                           
  9944                           ;OverLoad_B1.c: 76: Load.Count = 0;
  9945  007B  01D0               	clrf	(_Load^(0+256)+41)
  9946                           
  9947                           ;OverLoad_B1.c: 77: }
  9948                           ;OverLoad_B1.c: 78: } else {
  9949  007C  2886               	goto	l1717
  9950  007D                     l1719:	
  9951                           
  9952                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  9953  007D  0022               	movlb	2	; select bank2
  9954  007E  1FA7               	btfss	_Load^(0+256),7
  9955  007F  2886               	goto	l1717
  9956                           
  9957                           ;OverLoad_B1.c: 80: Load.OK = 0;
  9958  0080  13A7               	bcf	_Load^(0+256),7
  9959                           
  9960                           ;OverLoad_B1.c: 81: }
  9961                           ;OverLoad_B1.c: 82: }
  9962                           ;OverLoad_B1.c: 83: } else {
  9963  0081  2886               	goto	l1717
  9964  0082                     l1718:	
  9965                           
  9966                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  9967  0082  0022               	movlb	2	; select bank2
  9968  0083  1CA7               	btfss	_Load^(0+256),1
  9969  0084  2886               	goto	l1717
  9970  0085                     l10733:	
  9971                           
  9972                           ;OverLoad_B1.c: 85: Load.GO = 0;
  9973  0085  10A7               	bcf	_Load^(0+256),1
  9974  0086                     l1717:	
  9975                           
  9976                           ;OverLoad_B1.c: 86: }
  9977                           ;OverLoad_B1.c: 87: }
  9978                           ;OverLoad_B1.c: 89: }
  9979                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  9980  0086  1CA7               	btfss	_Load^(0+256),1
  9981  0087  2A2D               	goto	l1725
  9982                           
  9983                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  9984  0088  1527               	bsf	_Load^(0+256),2
  9985                           
  9986                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  9987  0089  1E27               	btfss	_Load^(0+256),4
  9988  008A  2A2B               	goto	l1726
  9989                           
  9990                           ;OverLoad_B1.c: 96: Load.Time++;
  9991  008B  3001               	movlw	1
  9992  008C  07A8               	addwf	(_Load^(0+256)+1),f
  9993  008D  3000               	movlw	0
  9994  008E  3DA9               	addwfc	((_Load+1)^(0+256)+1),f
  9995                           
  9996                           ;OverLoad_B1.c: 97: if (Load.Time >= 5) {
  9997  008F  3000               	movlw	0
  9998  0090  0229               	subwf	((_Load+1)^(0+256)+1),w
  9999  0091  3005               	movlw	5
 10000  0092  1903               	skipnz
 10001  0093  0228               	subwf	(_Load^(0+256)+1),w
 10002  0094  1C03               	skipc
 10003  0095  0008               	return
 10004                           
 10005                           ;OverLoad_B1.c: 98: Load.Time = 0;
 10006  0096  01A8               	clrf	(_Load^(0+256)+1)
 10007  0097  01A9               	clrf	((_Load+1)^(0+256)+1)
 10008                           
 10009                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 10010  0098  1227               	bcf	_Load^(0+256),4
 10011                           
 10012                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 10013  0099  3001               	movlw	1
 10014  009A  0020               	movlb	0	; select bank0
 10015  009B  00EA               	movwf	Load_Main@i
 10016  009C  3000               	movlw	0
 10017  009D  00EB               	movwf	Load_Main@i+1
 10018  009E  086B               	movf	Load_Main@i+1,w
 10019  009F  3A80               	xorlw	128
 10020  00A0  00E6               	movwf	??_Load_Main
 10021  00A1  3080               	movlw	128
 10022  00A2  0266               	subwf	??_Load_Main,w
 10023  00A3  1D03               	skipz
 10024  00A4  28A7               	goto	u12415
 10025  00A5  3004               	movlw	4
 10026  00A6  026A               	subwf	Load_Main@i,w
 10027  00A7                     u12415:	
 10028  00A7  1803               	btfsc	3,0
 10029  00A8  28DB               	goto	l10755
 10030  00A9                     l10749:	
 10031                           
 10032                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 10033  00A9  0020               	movlb	0	; select bank0
 10034  00AA  356A               	lslf	Load_Main@i,w
 10035  00AB  3E32               	addlw	(_Load+11)& (0+255)
 10036  00AC  0086               	movwf	6
 10037  00AD  3001               	movlw	1	; select bank2/3
 10038  00AE  0087               	movwf	7
 10039  00AF  3F40               	moviw [0]fsr1
 10040  00B0  00E6               	movwf	??_Load_Main
 10041  00B1  3F41               	moviw [1]fsr1
 10042  00B2  00E7               	movwf	??_Load_Main+1
 10043  00B3  0866               	movf	??_Load_Main,w
 10044  00B4  0022               	movlb	2	; select bank2
 10045  00B5  07AC               	addwf	(_Load^(0+256)+5),f
 10046  00B6  0020               	movlb	0	; select bank0
 10047  00B7  0867               	movf	??_Load_Main+1,w
 10048  00B8  0022               	movlb	2	; select bank2
 10049  00B9  3DAD               	addwfc	((_Load+1)^(0+256)+5),f
 10050                           
 10051                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 10052  00BA  0020               	movlb	0	; select bank0
 10053  00BB  356A               	lslf	Load_Main@i,w
 10054  00BC  3E3C               	addlw	(_Load+21)& (0+255)
 10055  00BD  0086               	movwf	6
 10056  00BE  3001               	movlw	1	; select bank2/3
 10057  00BF  0087               	movwf	7
 10058  00C0  3F40               	moviw [0]fsr1
 10059  00C1  00E6               	movwf	??_Load_Main
 10060  00C2  3F41               	moviw [1]fsr1
 10061  00C3  00E7               	movwf	??_Load_Main+1
 10062  00C4  0866               	movf	??_Load_Main,w
 10063  00C5  0022               	movlb	2	; select bank2
 10064  00C6  07AE               	addwf	(_Load^(0+256)+7),f
 10065  00C7  0020               	movlb	0	; select bank0
 10066  00C8  0867               	movf	??_Load_Main+1,w
 10067  00C9  0022               	movlb	2	; select bank2
 10068  00CA  3DAF               	addwfc	((_Load+1)^(0+256)+7),f
 10069  00CB  3001               	movlw	1
 10070  00CC  0020               	movlb	0	; select bank0
 10071  00CD  07EA               	addwf	Load_Main@i,f
 10072  00CE  3000               	movlw	0
 10073  00CF  3DEB               	addwfc	Load_Main@i+1,f
 10074  00D0  086B               	movf	Load_Main@i+1,w
 10075  00D1  3A80               	xorlw	128
 10076  00D2  00E6               	movwf	??_Load_Main
 10077  00D3  3080               	movlw	128
 10078  00D4  0266               	subwf	??_Load_Main,w
 10079  00D5  1D03               	skipz
 10080  00D6  28D9               	goto	u12425
 10081  00D7  3004               	movlw	4
 10082  00D8  026A               	subwf	Load_Main@i,w
 10083  00D9                     u12425:	
 10084  00D9  1C03               	skipc
 10085  00DA  28A9               	goto	l10749
 10086  00DB                     l10755:	
 10087                           
 10088                           ;OverLoad_B1.c: 104: }
 10089                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 10090  00DB  3003               	movlw	3
 10091  00DC  0020               	movlb	0	; select bank0
 10092  00DD  00A0               	movwf	___lwdiv@divisor
 10093  00DE  3000               	movlw	0
 10094  00DF  00A1               	movwf	___lwdiv@divisor+1
 10095  00E0  0022               	movlb	2	; select bank2
 10096  00E1  082D               	movf	((_Load+1)^(0+256)+5),w
 10097  00E2  0020               	movlb	0	; select bank0
 10098  00E3  01A3               	clrf	___lwdiv@dividend+1
 10099  00E4  07A3               	addwf	___lwdiv@dividend+1,f
 10100  00E5  0022               	movlb	2	; select bank2
 10101  00E6  082C               	movf	(_Load^(0+256)+5),w
 10102  00E7  0020               	movlb	0	; select bank0
 10103  00E8  01A2               	clrf	___lwdiv@dividend
 10104  00E9  07A2               	addwf	___lwdiv@dividend,f
 10105  00EA  3191  217B  3180   	fcall	___lwdiv
 10106  00ED  0020               	movlb	0	; select bank0
 10107  00EE  0821               	movf	?___lwdiv+1,w
 10108  00EF  0022               	movlb	2	; select bank2
 10109  00F0  01AD               	clrf	((_Load+1)^(0+256)+5)
 10110  00F1  07AD               	addwf	((_Load+1)^(0+256)+5),f
 10111  00F2  0020               	movlb	0	; select bank0
 10112  00F3  0820               	movf	?___lwdiv,w
 10113  00F4  0022               	movlb	2	; select bank2
 10114  00F5  01AC               	clrf	(_Load^(0+256)+5)
 10115  00F6  07AC               	addwf	(_Load^(0+256)+5),f
 10116                           
 10117                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 10118  00F7  3003               	movlw	3
 10119  00F8  0020               	movlb	0	; select bank0
 10120  00F9  00A0               	movwf	___lwdiv@divisor
 10121  00FA  3000               	movlw	0
 10122  00FB  00A1               	movwf	___lwdiv@divisor+1
 10123  00FC  0022               	movlb	2	; select bank2
 10124  00FD  082F               	movf	((_Load+1)^(0+256)+7),w
 10125  00FE  0020               	movlb	0	; select bank0
 10126  00FF  01A3               	clrf	___lwdiv@dividend+1
 10127  0100  07A3               	addwf	___lwdiv@dividend+1,f
 10128  0101  0022               	movlb	2	; select bank2
 10129  0102  082E               	movf	(_Load^(0+256)+7),w
 10130  0103  0020               	movlb	0	; select bank0
 10131  0104  01A2               	clrf	___lwdiv@dividend
 10132  0105  07A2               	addwf	___lwdiv@dividend,f
 10133  0106  3191  217B  3180   	fcall	___lwdiv
 10134  0109  0020               	movlb	0	; select bank0
 10135  010A  0821               	movf	?___lwdiv+1,w
 10136  010B  0022               	movlb	2	; select bank2
 10137  010C  01AF               	clrf	((_Load+1)^(0+256)+7)
 10138  010D  07AF               	addwf	((_Load+1)^(0+256)+7),f
 10139  010E  0020               	movlb	0	; select bank0
 10140  010F  0820               	movf	?___lwdiv,w
 10141  0110  0022               	movlb	2	; select bank2
 10142  0111  01AE               	clrf	(_Load^(0+256)+7)
 10143  0112  07AE               	addwf	(_Load^(0+256)+7),f
 10144                           
 10145                           ;OverLoad_B1.c: 107: setLoad_AH_AL_Restore();
 10146  0113  319D  257E  3180   	fcall	_setLoad_AH_AL_Restore
 10147                           
 10148                           ;OverLoad_B1.c: 109: if (Load.ADH > Load.ADL) {
 10149  0116  0022               	movlb	2	; select bank2
 10150  0117  082D               	movf	((_Load+1)^(0+256)+5),w
 10151  0118  022F               	subwf	((_Load+1)^(0+256)+7),w
 10152  0119  1D03               	skipz
 10153  011A  291D               	goto	u12435
 10154  011B  082C               	movf	(_Load^(0+256)+5),w
 10155  011C  022E               	subwf	(_Load^(0+256)+7),w
 10156  011D                     u12435:	
 10157  011D  1803               	skipnc
 10158  011E  0008               	return
 10159                           
 10160                           ;OverLoad_B1.c: 110: Load.AD = Load.ADH - Load.ADL;
 10161  011F  3005               	movlw	5
 10162  0120  3E27               	addlw	_Load& (0+255)
 10163  0121  0086               	movwf	6
 10164  0122  3001               	movlw	1	; select bank2/3
 10165  0123  0087               	movwf	7
 10166  0124  092E               	comf	(_Load^(0+256)+7),w
 10167  0125  0020               	movlb	0	; select bank0
 10168  0126  00E6               	movwf	??_Load_Main
 10169  0127  0022               	movlb	2	; select bank2
 10170  0128  092F               	comf	((_Load+1)^(0+256)+7),w
 10171  0129  0020               	movlb	0	; select bank0
 10172  012A  00E7               	movwf	??_Load_Main+1
 10173  012B  0AE6               	incf	??_Load_Main,f
 10174  012C  1903               	skipnz
 10175  012D  0AE7               	incf	??_Load_Main+1,f
 10176  012E  3F40               	moviw [0]fsr1
 10177  012F  0766               	addwf	??_Load_Main,w
 10178  0130  0022               	movlb	2	; select bank2
 10179  0131  00C6               	movwf	(_Load^(0+256)+31)
 10180  0132  3F41               	moviw [1]fsr1
 10181  0133  0020               	movlb	0	; select bank0
 10182  0134  3D67               	addwfc	??_Load_Main+1,w
 10183  0135  0022               	movlb	2	; select bank2
 10184  0136  00C7               	movwf	(_Load^(0+256)+32)
 10185                           
 10186                           ;OverLoad_B1.c: 111: Load.ADH = 0;
 10187  0137  01AC               	clrf	(_Load^(0+256)+5)
 10188  0138  01AD               	clrf	((_Load+1)^(0+256)+5)
 10189                           
 10190                           ;OverLoad_B1.c: 112: Load.ADL = 0;
 10191  0139  01AE               	clrf	(_Load^(0+256)+7)
 10192  013A  01AF               	clrf	((_Load+1)^(0+256)+7)
 10193                           
 10194                           ;OverLoad_B1.c: 113: Load.LightsCount = getMain_Lights_Count();
 10195  013B  319C  24EA  3180   	fcall	_getMain_Lights_Count
 10196  013E  0020               	movlb	0	; select bank0
 10197  013F  00E6               	movwf	??_Load_Main
 10198  0140  0866               	movf	??_Load_Main,w
 10199  0141  0022               	movlb	2	; select bank2
 10200  0142  00D3               	movwf	(_Load^(0+256)+44)
 10201                           
 10202                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 10203  0143  1DA7               	btfss	_Load^(0+256),3
 10204  0144  2995               	goto	l10793
 10205                           
 10206                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 10207  0145  3002               	movlw	2
 10208  0146  0250               	subwf	(_Load^(0+256)+41),w
 10209  0147  1803               	skipnc
 10210  0148  2995               	goto	l10793
 10211                           
 10212                           ;OverLoad_B1.c: 117: Load.Count++;
 10213  0149  3001               	movlw	1
 10214  014A  0020               	movlb	0	; select bank0
 10215  014B  00E6               	movwf	??_Load_Main
 10216  014C  0866               	movf	??_Load_Main,w
 10217  014D  0022               	movlb	2	; select bank2
 10218  014E  07D0               	addwf	(_Load^(0+256)+41),f
 10219                           
 10220                           ;OverLoad_B1.c: 118: if (Load.Count == 1) {
 10221  014F  0850               	movf	(_Load^(0+256)+41),w
 10222  0150  3A01               	xorlw	1
 10223  0151  1D03               	skipz
 10224  0152  295D               	goto	l10779
 10225                           
 10226                           ;OverLoad_B1.c: 119: Load.ErrorCountValue = 2;
 10227  0153  3002               	movlw	2
 10228  0154  0020               	movlb	0	; select bank0
 10229  0155  00E6               	movwf	??_Load_Main
 10230  0156  0866               	movf	??_Load_Main,w
 10231  0157  0022               	movlb	2	; select bank2
 10232  0158  00D2               	movwf	(_Load^(0+256)+43)
 10233                           
 10234                           ;OverLoad_B1.c: 120: Load.JudgeValue = (20*50);
 10235  0159  30E8               	movlw	232
 10236  015A  00CC               	movwf	(_Load^(0+256)+37)
 10237  015B  3003               	movlw	3
 10238  015C  2968               	goto	L4
 10239  015D                     l10779:	
 10240                           ;OverLoad_B1.c: 121: } else if (Load.Count == 2) {
 10241                           
 10242  015D  0850               	movf	(_Load^(0+256)+41),w
 10243  015E  3A02               	xorlw	2
 10244  015F  1D03               	skipz
 10245  0160  2995               	goto	l10793
 10246                           
 10247                           ;OverLoad_B1.c: 122: if (Load.LightsCount == 1) {
 10248  0161  0853               	movf	(_Load^(0+256)+44),w
 10249  0162  3A01               	xorlw	1
 10250  0163  1D03               	skipz
 10251  0164  296A               	goto	l10785
 10252                           
 10253                           ;OverLoad_B1.c: 123: Load.JudgeValue = (int)(1.1*50);
 10254  0165  3037               	movlw	55
 10255  0166  00CC               	movwf	(_Load^(0+256)+37)
 10256  0167  3000               	movlw	0
 10257  0168                     L4:	
 10258  0168  00CD               	movwf	(_Load^(0+256)+38)
 10259                           
 10260                           ;OverLoad_B1.c: 124: } else {
 10261  0169  2995               	goto	l10793
 10262  016A                     l10785:	
 10263                           
 10264                           ;OverLoad_B1.c: 125: if (Load_Status == 0) {
 10265  016A  0020               	movlb	0	; select bank0
 10266  016B  08E9               	movf	Load_Main@Load_Status,f
 10267  016C  1D03               	skipz
 10268  016D  2989               	goto	l10789
 10269                           
 10270                           ;OverLoad_B1.c: 126: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10271  016E  0022               	movlb	2	; select bank2
 10272  016F  0853               	movf	(_Load^(0+256)+44),w
 10273  0170  0020               	movlb	0	; select bank0
 10274  0171  00E6               	movwf	??_Load_Main
 10275  0172  01E7               	clrf	??_Load_Main+1
 10276  0173  0866               	movf	??_Load_Main,w
 10277  0174  00A0               	movwf	___wmul@multiplier
 10278  0175  0867               	movf	??_Load_Main+1,w
 10279  0176  00A1               	movwf	___wmul@multiplier+1
 10280  0177  3037               	movlw	55
 10281  0178  00A2               	movwf	___wmul@multiplicand
 10282  0179  3000               	movlw	0
 10283  017A  00A3               	movwf	___wmul@multiplicand+1
 10284  017B  319D  25B7  3180   	fcall	___wmul
 10285  017E  0020               	movlb	0	; select bank0
 10286  017F  0821               	movf	?___wmul+1,w
 10287  0180  0022               	movlb	2	; select bank2
 10288  0181  01CD               	clrf	((_Load+1)^(0+256)+37)
 10289  0182  07CD               	addwf	((_Load+1)^(0+256)+37),f
 10290  0183  0020               	movlb	0	; select bank0
 10291  0184  0820               	movf	?___wmul,w
 10292  0185  0022               	movlb	2	; select bank2
 10293  0186  01CC               	clrf	(_Load^(0+256)+37)
 10294  0187  07CC               	addwf	(_Load^(0+256)+37),f
 10295                           
 10296                           ;OverLoad_B1.c: 127: } else if (Load_Status == 1) {
 10297  0188  2995               	goto	l10793
 10298  0189                     l10789:	
 10299  0189  0020               	movlb	0	; select bank0
 10300  018A  0869               	movf	Load_Main@Load_Status,w
 10301  018B  3A01               	xorlw	1
 10302  018C  1D03               	skipz
 10303  018D  2995               	goto	l10793
 10304                           
 10305                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10306  018E  0022               	movlb	2	; select bank2
 10307  018F  0830               	movf	(_Load^(0+256)+9),w
 10308  0190  3E37               	addlw	55
 10309  0191  00CC               	movwf	(_Load^(0+256)+37)
 10310  0192  3000               	movlw	0
 10311  0193  3D31               	addwfc	((_Load+1)^(0+256)+9),w
 10312  0194  00CD               	movwf	((_Load+1)^(0+256)+37)
 10313  0195                     l10793:	
 10314                           
 10315                           ;OverLoad_B1.c: 129: }
 10316                           ;OverLoad_B1.c: 130: }
 10317                           ;OverLoad_B1.c: 131: }
 10318                           ;OverLoad_B1.c: 132: }
 10319                           ;OverLoad_B1.c: 133: }
 10320                           ;OverLoad_B1.c: 135: if (Load.AD >= Load.JudgeValue) {
 10321  0195  0022               	movlb	2	; select bank2
 10322  0196  084D               	movf	((_Load+1)^(0+256)+37),w
 10323  0197  0247               	subwf	((_Load+1)^(0+256)+31),w
 10324  0198  1D03               	skipz
 10325  0199  299C               	goto	u12515
 10326  019A  084C               	movf	(_Load^(0+256)+37),w
 10327  019B  0246               	subwf	(_Load^(0+256)+31),w
 10328  019C                     u12515:	
 10329  019C  1C03               	skipc
 10330  019D  29DB               	goto	l10813
 10331                           
 10332                           ;OverLoad_B1.c: 136: Load.ErrorCount++;
 10333  019E  3001               	movlw	1
 10334  019F  0020               	movlb	0	; select bank0
 10335  01A0  00E6               	movwf	??_Load_Main
 10336  01A1  0866               	movf	??_Load_Main,w
 10337  01A2  0022               	movlb	2	; select bank2
 10338  01A3  07D1               	addwf	(_Load^(0+256)+42),f
 10339                           
 10340                           ;OverLoad_B1.c: 137: if (Load.ErrorCount > Load.ErrorCountValue) {
 10341  01A4  0851               	movf	(_Load^(0+256)+42),w
 10342  01A5  0252               	subwf	(_Load^(0+256)+43),w
 10343  01A6  1803               	skipnc
 10344  01A7  0008               	return
 10345                           
 10346                           ;OverLoad_B1.c: 138: Load.ErrorCount = 0;
 10347  01A8  01D1               	clrf	(_Load^(0+256)+42)
 10348                           
 10349                           ;OverLoad_B1.c: 139: Load.ERROR = 1;
 10350  01A9  16A7               	bsf	_Load^(0+256),5
 10351                           
 10352                           ;OverLoad_B1.c: 153: setProductData(4, (Load.AD >> 8));
 10353  01AA  0847               	movf	((_Load+1)^(0+256)+31),w
 10354  01AB  0020               	movlb	0	; select bank0
 10355  01AC  00E6               	movwf	??_Load_Main
 10356  01AD  0866               	movf	??_Load_Main,w
 10357  01AE  00E2               	movwf	setProductData@value
 10358  01AF  3004               	movlw	4
 10359  01B0  319B  2324  3180   	fcall	_setProductData
 10360                           
 10361                           ;OverLoad_B1.c: 154: setProductData(5, Load.AD);
 10362  01B3  0022               	movlb	2	; select bank2
 10363  01B4  0846               	movf	(_Load^(0+256)+31),w
 10364  01B5  0020               	movlb	0	; select bank0
 10365  01B6  00E6               	movwf	??_Load_Main
 10366  01B7  0866               	movf	??_Load_Main,w
 10367  01B8  00E2               	movwf	setProductData@value
 10368  01B9  3005               	movlw	5
 10369  01BA  319B  2324  3180   	fcall	_setProductData
 10370                           
 10371                           ;OverLoad_B1.c: 155: setProductData(6, (Load.JudgeValue >> 8));
 10372  01BD  0022               	movlb	2	; select bank2
 10373  01BE  084D               	movf	((_Load+1)^(0+256)+37),w
 10374  01BF  0020               	movlb	0	; select bank0
 10375  01C0  00E6               	movwf	??_Load_Main
 10376  01C1  0866               	movf	??_Load_Main,w
 10377  01C2  00E2               	movwf	setProductData@value
 10378  01C3  3006               	movlw	6
 10379  01C4  319B  2324  3180   	fcall	_setProductData
 10380                           
 10381                           ;OverLoad_B1.c: 156: setProductData(7, Load.JudgeValue);
 10382  01C7  0022               	movlb	2	; select bank2
 10383  01C8  084C               	movf	(_Load^(0+256)+37),w
 10384  01C9  0020               	movlb	0	; select bank0
 10385  01CA  00E6               	movwf	??_Load_Main
 10386  01CB  0866               	movf	??_Load_Main,w
 10387  01CC  00E2               	movwf	setProductData@value
 10388  01CD  3007               	movlw	7
 10389  01CE  319B  2324  3180   	fcall	_setProductData
 10390                           
 10391                           ;OverLoad_B1.c: 157: setProductData(8, Load.LightsCount);
 10392  01D1  0022               	movlb	2	; select bank2
 10393  01D2  0853               	movf	(_Load^(0+256)+44),w
 10394  01D3  0020               	movlb	0	; select bank0
 10395  01D4  00E6               	movwf	??_Load_Main
 10396  01D5  0866               	movf	??_Load_Main,w
 10397  01D6  00E2               	movwf	setProductData@value
 10398  01D7  3008               	movlw	8
 10399  01D8  319B  2324         	fcall	_setProductData
 10400                           
 10401                           ;OverLoad_B1.c: 160: }
 10402                           ;OverLoad_B1.c: 161: } else {
 10403  01DA  0008               	return
 10404  01DB                     l10813:	
 10405                           
 10406                           ;OverLoad_B1.c: 162: Load.ErrorCount = 0;
 10407  01DB  0022               	movlb	2	; select bank2
 10408  01DC  01D1               	clrf	(_Load^(0+256)+42)
 10409                           
 10410                           ;OverLoad_B1.c: 163: if (Load.Run == 1) {
 10411  01DD  1DA7               	btfss	_Load^(0+256),3
 10412  01DE  0008               	return
 10413                           
 10414                           ;OverLoad_B1.c: 164: if (Load.OK == 0) {
 10415  01DF  1BA7               	btfsc	_Load^(0+256),7
 10416  01E0  0008               	return
 10417                           
 10418                           ;OverLoad_B1.c: 165: Load.SafeCount++;
 10419  01E1  3001               	movlw	1
 10420  01E2  0020               	movlb	0	; select bank0
 10421  01E3  00E6               	movwf	??_Load_Main
 10422  01E4  0866               	movf	??_Load_Main,w
 10423  01E5  0022               	movlb	2	; select bank2
 10424  01E6  07D4               	addwf	(_Load^(0+256)+45),f
 10425                           
 10426                           ;OverLoad_B1.c: 166: if (Load.SafeCount >= 3) {
 10427  01E7  3003               	movlw	3
 10428  01E8  0254               	subwf	(_Load^(0+256)+45),w
 10429  01E9  1C03               	skipc
 10430  01EA  0008               	return
 10431                           
 10432                           ;OverLoad_B1.c: 167: Load.SafeCount = 0;
 10433  01EB  01D4               	clrf	(_Load^(0+256)+45)
 10434                           
 10435                           ;OverLoad_B1.c: 168: Load.OK = 1;
 10436  01EC  17A7               	bsf	_Load^(0+256),7
 10437                           
 10438                           ;OverLoad_B1.c: 169: Load.Run = 0;
 10439  01ED  11A7               	bcf	_Load^(0+256),3
 10440                           
 10441                           ;OverLoad_B1.c: 170: Load.TotalLoad = Load.AD;
 10442  01EE  0847               	movf	((_Load+1)^(0+256)+31),w
 10443  01EF  01B1               	clrf	((_Load+1)^(0+256)+9)
 10444  01F0  07B1               	addwf	((_Load+1)^(0+256)+9),f
 10445  01F1  0846               	movf	(_Load^(0+256)+31),w
 10446  01F2  01B0               	clrf	(_Load^(0+256)+9)
 10447  01F3  07B0               	addwf	(_Load^(0+256)+9),f
 10448                           
 10449                           ;OverLoad_B1.c: 171: Load.ErrorCountValue = 3;
 10450  01F4  3003               	movlw	3
 10451  01F5  0020               	movlb	0	; select bank0
 10452  01F6  00E6               	movwf	??_Load_Main
 10453  01F7  0866               	movf	??_Load_Main,w
 10454  01F8  0022               	movlb	2	; select bank2
 10455  01F9  00D2               	movwf	(_Load^(0+256)+43)
 10456                           
 10457                           ;OverLoad_B1.c: 187: setProductData(4, (Load.AD >> 8));
 10458  01FA  0847               	movf	((_Load+1)^(0+256)+31),w
 10459  01FB  0020               	movlb	0	; select bank0
 10460  01FC  00E6               	movwf	??_Load_Main
 10461  01FD  0866               	movf	??_Load_Main,w
 10462  01FE  00E2               	movwf	setProductData@value
 10463  01FF  3004               	movlw	4
 10464  0200  319B  2324  3180   	fcall	_setProductData
 10465                           
 10466                           ;OverLoad_B1.c: 188: setProductData(5, Load.AD);
 10467  0203  0022               	movlb	2	; select bank2
 10468  0204  0846               	movf	(_Load^(0+256)+31),w
 10469  0205  0020               	movlb	0	; select bank0
 10470  0206  00E6               	movwf	??_Load_Main
 10471  0207  0866               	movf	??_Load_Main,w
 10472  0208  00E2               	movwf	setProductData@value
 10473  0209  3005               	movlw	5
 10474  020A  319B  2324  3180   	fcall	_setProductData
 10475                           
 10476                           ;OverLoad_B1.c: 189: setProductData(6, (Load.JudgeValue >> 8));
 10477  020D  0022               	movlb	2	; select bank2
 10478  020E  084D               	movf	((_Load+1)^(0+256)+37),w
 10479  020F  0020               	movlb	0	; select bank0
 10480  0210  00E6               	movwf	??_Load_Main
 10481  0211  0866               	movf	??_Load_Main,w
 10482  0212  00E2               	movwf	setProductData@value
 10483  0213  3006               	movlw	6
 10484  0214  319B  2324  3180   	fcall	_setProductData
 10485                           
 10486                           ;OverLoad_B1.c: 190: setProductData(7, Load.JudgeValue);
 10487  0217  0022               	movlb	2	; select bank2
 10488  0218  084C               	movf	(_Load^(0+256)+37),w
 10489  0219  0020               	movlb	0	; select bank0
 10490  021A  00E6               	movwf	??_Load_Main
 10491  021B  0866               	movf	??_Load_Main,w
 10492  021C  00E2               	movwf	setProductData@value
 10493  021D  3007               	movlw	7
 10494  021E  319B  2324  3180   	fcall	_setProductData
 10495                           
 10496                           ;OverLoad_B1.c: 191: setProductData(8, Load.LightsCount);
 10497  0221  0022               	movlb	2	; select bank2
 10498  0222  0853               	movf	(_Load^(0+256)+44),w
 10499  0223  0020               	movlb	0	; select bank0
 10500  0224  00E6               	movwf	??_Load_Main
 10501  0225  0866               	movf	??_Load_Main,w
 10502  0226  00E2               	movwf	setProductData@value
 10503  0227  3008               	movlw	8
 10504  0228  319B  2324         	fcall	_setProductData
 10505                           
 10506                           ;OverLoad_B1.c: 195: }
 10507                           ;OverLoad_B1.c: 196: }
 10508                           ;OverLoad_B1.c: 197: }
 10509                           ;OverLoad_B1.c: 198: }
 10510                           ;OverLoad_B1.c: 199: }
 10511                           ;OverLoad_B1.c: 200: }
 10512                           ;OverLoad_B1.c: 201: } else {
 10513  022A  0008               	return
 10514  022B                     l1726:	
 10515                           
 10516                           ;OverLoad_B1.c: 202: Load.ADtoGO = 1;
 10517  022B  1627               	bsf	_Load^(0+256),4
 10518                           
 10519                           ;OverLoad_B1.c: 203: }
 10520                           ;OverLoad_B1.c: 204: } else {
 10521  022C  0008               	return
 10522  022D                     l1725:	
 10523                           
 10524                           ;OverLoad_B1.c: 205: if (Load.LightsON == 1) {
 10525  022D  1D27               	btfss	_Load^(0+256),2
 10526  022E  2A75               	goto	l10867
 10527                           
 10528                           ;OverLoad_B1.c: 206: Load.LightsON = 0;
 10529  022F  1127               	bcf	_Load^(0+256),2
 10530                           
 10531                           ;OverLoad_B1.c: 208: Load.ADtoGO = 0;
 10532  0230  1227               	bcf	_Load^(0+256),4
 10533                           
 10534                           ;OverLoad_B1.c: 209: Load.Time = 0;
 10535  0231  01A8               	clrf	(_Load^(0+256)+1)
 10536  0232  01A9               	clrf	((_Load+1)^(0+256)+1)
 10537                           
 10538                           ;OverLoad_B1.c: 210: setLoad_AH_AL_Restore();
 10539  0233  319D  257E  3180   	fcall	_setLoad_AH_AL_Restore
 10540                           
 10541                           ;OverLoad_B1.c: 211: Load.LightsCount = 0;
 10542  0236  0022               	movlb	2	; select bank2
 10543  0237  01D3               	clrf	(_Load^(0+256)+44)
 10544                           
 10545                           ;OverLoad_B1.c: 213: Load.SafeCount = 0;
 10546  0238  01D4               	clrf	(_Load^(0+256)+45)
 10547                           
 10548                           ;OverLoad_B1.c: 215: Load.ADH = 0;
 10549  0239  01AC               	clrf	(_Load^(0+256)+5)
 10550  023A  01AD               	clrf	((_Load+1)^(0+256)+5)
 10551                           
 10552                           ;OverLoad_B1.c: 216: Load.ADL = 0;
 10553  023B  01AE               	clrf	(_Load^(0+256)+7)
 10554  023C  01AF               	clrf	((_Load+1)^(0+256)+7)
 10555                           
 10556                           ;OverLoad_B1.c: 218: Load.AD = 0;
 10557  023D  01C6               	clrf	(_Load^(0+256)+31)
 10558  023E  01C7               	clrf	((_Load+1)^(0+256)+31)
 10559                           
 10560                           ;OverLoad_B1.c: 219: Load.JudgeValue = 0;
 10561  023F  01CC               	clrf	(_Load^(0+256)+37)
 10562  0240  01CD               	clrf	((_Load+1)^(0+256)+37)
 10563                           
 10564                           ;OverLoad_B1.c: 220: Load.ErrorCount = 0;
 10565  0241  01D1               	clrf	(_Load^(0+256)+42)
 10566                           
 10567                           ;OverLoad_B1.c: 223: Load.Run = 0;
 10568  0242  11A7               	bcf	_Load^(0+256),3
 10569                           
 10570                           ;OverLoad_B1.c: 224: Load.OK = 0;
 10571  0243  13A7               	bcf	_Load^(0+256),7
 10572                           
 10573                           ;OverLoad_B1.c: 238: setProductData(4, (Load.AD >> 8));
 10574  0244  0847               	movf	((_Load+1)^(0+256)+31),w
 10575  0245  0020               	movlb	0	; select bank0
 10576  0246  00E6               	movwf	??_Load_Main
 10577  0247  0866               	movf	??_Load_Main,w
 10578  0248  00E2               	movwf	setProductData@value
 10579  0249  3004               	movlw	4
 10580  024A  319B  2324  3180   	fcall	_setProductData
 10581                           
 10582                           ;OverLoad_B1.c: 239: setProductData(5, Load.AD);
 10583  024D  0022               	movlb	2	; select bank2
 10584  024E  0846               	movf	(_Load^(0+256)+31),w
 10585  024F  0020               	movlb	0	; select bank0
 10586  0250  00E6               	movwf	??_Load_Main
 10587  0251  0866               	movf	??_Load_Main,w
 10588  0252  00E2               	movwf	setProductData@value
 10589  0253  3005               	movlw	5
 10590  0254  319B  2324  3180   	fcall	_setProductData
 10591                           
 10592                           ;OverLoad_B1.c: 240: setProductData(6, (Load.JudgeValue >> 8));
 10593  0257  0022               	movlb	2	; select bank2
 10594  0258  084D               	movf	((_Load+1)^(0+256)+37),w
 10595  0259  0020               	movlb	0	; select bank0
 10596  025A  00E6               	movwf	??_Load_Main
 10597  025B  0866               	movf	??_Load_Main,w
 10598  025C  00E2               	movwf	setProductData@value
 10599  025D  3006               	movlw	6
 10600  025E  319B  2324  3180   	fcall	_setProductData
 10601                           
 10602                           ;OverLoad_B1.c: 241: setProductData(7, Load.JudgeValue);
 10603  0261  0022               	movlb	2	; select bank2
 10604  0262  084C               	movf	(_Load^(0+256)+37),w
 10605  0263  0020               	movlb	0	; select bank0
 10606  0264  00E6               	movwf	??_Load_Main
 10607  0265  0866               	movf	??_Load_Main,w
 10608  0266  00E2               	movwf	setProductData@value
 10609  0267  3007               	movlw	7
 10610  0268  319B  2324  3180   	fcall	_setProductData
 10611                           
 10612                           ;OverLoad_B1.c: 242: setProductData(8, Load.LightsCount);
 10613  026B  0022               	movlb	2	; select bank2
 10614  026C  0853               	movf	(_Load^(0+256)+44),w
 10615  026D  0020               	movlb	0	; select bank0
 10616  026E  00E6               	movwf	??_Load_Main
 10617  026F  0866               	movf	??_Load_Main,w
 10618  0270  00E2               	movwf	setProductData@value
 10619  0271  3008               	movlw	8
 10620  0272  319B  2324  3180   	fcall	_setProductData
 10621  0275                     l10867:	
 10622                           
 10623                           ;OverLoad_B1.c: 245: }
 10624                           ;OverLoad_B1.c: 246: if (Load.ERROR == 1) {
 10625  0275  0022               	movlb	2	; select bank2
 10626  0276  1EA7               	btfss	_Load^(0+256),5
 10627  0277  0008               	return
 10628                           
 10629                           ;OverLoad_B1.c: 247: Load.ErrorTime++;
 10630  0278  3001               	movlw	1
 10631  0279  07AA               	addwf	(_Load^(0+256)+3),f
 10632  027A  3000               	movlw	0
 10633  027B  3DAB               	addwfc	((_Load+1)^(0+256)+3),f
 10634                           
 10635                           ;OverLoad_B1.c: 248: if (Load.ErrorTime >= 1000) {
 10636  027C  3003               	movlw	3
 10637  027D  022B               	subwf	((_Load+1)^(0+256)+3),w
 10638  027E  30E8               	movlw	232
 10639  027F  1903               	skipnz
 10640  0280  022A               	subwf	(_Load^(0+256)+3),w
 10641  0281  1C03               	skipc
 10642  0282  0008               	return
 10643                           
 10644                           ;OverLoad_B1.c: 249: Load.ErrorTime = 0;
 10645  0283  01AA               	clrf	(_Load^(0+256)+3)
 10646  0284  01AB               	clrf	((_Load+1)^(0+256)+3)
 10647                           
 10648                           ;OverLoad_B1.c: 250: Load.ERROR = 0;
 10649  0285  12A7               	bcf	_Load^(0+256),5
 10650                           
 10651                           ;OverLoad_B1.c: 251: }
 10652                           ;OverLoad_B1.c: 252: }
 10653                           ;OverLoad_B1.c: 253: }
 10654                           ;OverLoad_B1.c: 254: } else {
 10655  0286  0008               	return
 10656  0287                     l1715:	
 10657                           
 10658                           ;OverLoad_B1.c: 255: if (myMain.PowerON == 1) {
 10659  0287  0021               	movlb	1	; select bank1
 10660  0288  1C20               	btfss	_myMain^(0+128),0
 10661  0289  0008               	return
 10662                           
 10663                           ;OverLoad_B1.c: 256: Load.Enable = 1;
 10664  028A  0022               	movlb	2	; select bank2
 10665  028B  1427               	bsf	_Load^(0+256),0
 10666  028C  0008               	return
 10667  028D                     __end_of_Load_Main:	
 10668                           
 10669                           	psect	text52
 10670  1CEA                     __ptext52:	
 10671 ;; *************** function _getMain_Lights_Count *****************
 10672 ;; Defined at:
 10673 ;;		line 467 in file "../src/Main_B1.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;  status2         1    3[BANK0 ] unsigned char 
 10678 ;;  status1         1    2[BANK0 ] unsigned char 
 10679 ;;  status3         1    1[BANK0 ] unsigned char 
 10680 ;;  count           1    0[BANK0 ] unsigned char 
 10681 ;; Return value:  Size  Location     Type
 10682 ;;                  1    wreg      unsigned char 
 10683 ;; Registers used:
 10684 ;;		wreg, status,2, status,0
 10685 ;; Tracked objects:
 10686 ;;		On entry : 0/0
 10687 ;;		On exit  : 0/0
 10688 ;;		Unchanged: 0/0
 10689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;Total ram usage:        4 bytes
 10695 ;; Hardware stack levels used:    1
 10696 ;; Hardware stack levels required when called:    5
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_Load_Main
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           
 10705                           ;psect for function _getMain_Lights_Count
 10706  1CEA                     _getMain_Lights_Count:	
 10707                           
 10708                           ;Main_B1.c: 468: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10709                           
 10710                           ;incstack = 0
 10711                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10712  1CEA  0020               	movlb	0	; select bank0
 10713  1CEB  01A2               	clrf	getMain_Lights_Count@status1
 10714  1CEC  01A3               	clrf	getMain_Lights_Count@status2
 10715  1CED  01A1               	clrf	getMain_Lights_Count@status3
 10716  1CEE  01A0               	clrf	getMain_Lights_Count@count
 10717                           
 10718                           ;Main_B1.c: 472: status1 = DimmerLights1.StatusFlag == 1 ? 1 : 0;
 10719  1CEF  3000               	movlw	0
 10720  1CF0  0022               	movlb	2	; select bank2
 10721  1CF1  1956               	btfsc	(_DimmerLights1^(0+256)+1),2	;volatile
 10722  1CF2  3001               	movlw	1
 10723  1CF3  0020               	movlb	0	; select bank0
 10724  1CF4  00A2               	movwf	getMain_Lights_Count@status1
 10725                           
 10726                           ;Main_B1.c: 475: status2 = DimmerLights2.StatusFlag == 1 ? 1 : 0;
 10727  1CF5  3000               	movlw	0
 10728  1CF6  0023               	movlb	3	; select bank3
 10729  1CF7  193F               	btfsc	(_DimmerLights2^(0+384)+1),2	;volatile
 10730  1CF8  3001               	movlw	1
 10731  1CF9  0020               	movlb	0	; select bank0
 10732  1CFA  00A3               	movwf	getMain_Lights_Count@status2
 10733                           
 10734                           ;Main_B1.c: 493: return count = (status1 + status2 + status3);
 10735  1CFB  0822               	movf	getMain_Lights_Count@status1,w
 10736  1CFC  0723               	addwf	getMain_Lights_Count@status2,w
 10737  1CFD  0721               	addwf	getMain_Lights_Count@status3,w
 10738  1CFE  00A0               	movwf	getMain_Lights_Count@count
 10739  1CFF  0008               	return
 10740  1D00                     __end_of_getMain_Lights_Count:	
 10741                           
 10742                           	psect	text53
 10743  1A7F                     __ptext53:	
 10744 ;; *************** function _getDimmer_Load_Status *****************
 10745 ;; Defined at:
 10746 ;;		line 856 in file "../src/Dimmer_B1.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;		None
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;  status          1    0[BANK0 ] unsigned char 
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      unsigned char 
 10753 ;; Registers used:
 10754 ;;		wreg, status,2
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;Total ram usage:        1 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    5
 10767 ;; This function calls:
 10768 ;;		Nothing
 10769 ;; This function is called by:
 10770 ;;		_Load_Main
 10771 ;; This function uses a non-reentrant model
 10772 ;;
 10773                           
 10774                           
 10775                           ;psect for function _getDimmer_Load_Status
 10776  1A7F                     _getDimmer_Load_Status:	
 10777                           
 10778                           ;Dimmer_B1.c: 857: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 10779                           
 10780                           ;incstack = 0
 10781                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 10782  1A7F  3000               	movlw	0
 10783  1A80  0021               	movlb	1	; select bank1
 10784  1A81  19C6               	btfsc	_Dimmer^(0+128),3	;volatile
 10785  1A82  3001               	movlw	1
 10786  1A83  0020               	movlb	0	; select bank0
 10787  1A84  00A0               	movwf	getDimmer_Load_Status@status
 10788                           
 10789                           ;Dimmer_B1.c: 858: return status;
 10790  1A85  0820               	movf	getDimmer_Load_Status@status,w
 10791  1A86  0008               	return
 10792  1A87                     __end_of_getDimmer_Load_Status:	
 10793                           
 10794                           	psect	text54
 10795  1A77                     __ptext54:	
 10796 ;; *************** function _getDimmer_LoadGO *****************
 10797 ;; Defined at:
 10798 ;;		line 595 in file "../src/Dimmer_B1.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;		None
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;  loadgo          1    0[BANK0 ] unsigned char 
 10803 ;; Return value:  Size  Location     Type
 10804 ;;                  1    wreg      unsigned char 
 10805 ;; Registers used:
 10806 ;;		wreg, status,2
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;Total ram usage:        1 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; Hardware stack levels required when called:    5
 10819 ;; This function calls:
 10820 ;;		Nothing
 10821 ;; This function is called by:
 10822 ;;		_Load_Main
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           
 10827                           ;psect for function _getDimmer_LoadGO
 10828  1A77                     _getDimmer_LoadGO:	
 10829                           
 10830                           ;Dimmer_B1.c: 596: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 10831                           
 10832                           ;incstack = 0
 10833                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 10834  1A77  3000               	movlw	0
 10835  1A78  0021               	movlb	1	; select bank1
 10836  1A79  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 10837  1A7A  3001               	movlw	1
 10838  1A7B  0020               	movlb	0	; select bank0
 10839  1A7C  00A0               	movwf	getDimmer_LoadGO@loadgo
 10840                           
 10841                           ;Dimmer_B1.c: 597: return loadgo;
 10842  1A7D  0820               	movf	getDimmer_LoadGO@loadgo,w
 10843  1A7E  0008               	return
 10844  1A7F                     __end_of_getDimmer_LoadGO:	
 10845                           
 10846                           	psect	text55
 10847  1FA4                     __ptext55:	
 10848 ;; *************** function _getAll_DimmerLights_AdjSw *****************
 10849 ;; Defined at:
 10850 ;;		line 800 in file "../src/Dimmer_B1.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;		None
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  i               2    4[BANK0 ] int 
 10855 ;;  adjsw           1    6[BANK0 ] unsigned char 
 10856 ;;  count           1    3[BANK0 ] unsigned char 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;Total ram usage:        5 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    6
 10873 ;; This function calls:
 10874 ;;		_DimmerLightsPointSelect
 10875 ;; This function is called by:
 10876 ;;		_Load_Main
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           
 10881                           ;psect for function _getAll_DimmerLights_AdjSw
 10882  1FA4                     _getAll_DimmerLights_AdjSw:	
 10883                           
 10884                           ;Dimmer_B1.c: 801: char count = 2;
 10885                           
 10886                           ;incstack = 0
 10887                           ; Regs used in _getAll_DimmerLights_AdjSw: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10888  1FA4  3002               	movlw	2
 10889  1FA5  0020               	movlb	0	; select bank0
 10890  1FA6  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10891  1FA7  0822               	movf	??_getAll_DimmerLights_AdjSw,w
 10892  1FA8  00A3               	movwf	getAll_DimmerLights_AdjSw@count
 10893                           
 10894                           ;Dimmer_B1.c: 802: char adjsw = 0;
 10895  1FA9  01A6               	clrf	getAll_DimmerLights_AdjSw@adjsw
 10896                           
 10897                           ;Dimmer_B1.c: 804: for (int i = 0; i < count; i++) {
 10898  1FAA  01A4               	clrf	getAll_DimmerLights_AdjSw@i
 10899  1FAB  01A5               	clrf	getAll_DimmerLights_AdjSw@i+1
 10900  1FAC                     l9997:	
 10901  1FAC  0825               	movf	getAll_DimmerLights_AdjSw@i+1,w
 10902  1FAD  3A80               	xorlw	128
 10903  1FAE  00A2               	movwf	??_getAll_DimmerLights_AdjSw
 10904  1FAF  3080               	movlw	128
 10905  1FB0  0222               	subwf	??_getAll_DimmerLights_AdjSw,w
 10906  1FB1  1D03               	skipz
 10907  1FB2  2FB5               	goto	u11125
 10908  1FB3  0823               	movf	getAll_DimmerLights_AdjSw@count,w
 10909  1FB4  0224               	subwf	getAll_DimmerLights_AdjSw@i,w
 10910  1FB5                     u11125:	
 10911  1FB5  1803               	btfsc	3,0
 10912  1FB6  2FCE               	goto	l9999
 10913                           
 10914                           ;Dimmer_B1.c: 805: DimmerLightsPointSelect(i + 1);
 10915  1FB7  0020               	movlb	0	; select bank0
 10916  1FB8  0824               	movf	getAll_DimmerLights_AdjSw@i,w
 10917  1FB9  3E01               	addlw	1
 10918  1FBA  319B  23FC  319F   	fcall	_DimmerLightsPointSelect
 10919                           
 10920                           ;Dimmer_B1.c: 806: if (adjsw == 0) {
 10921  1FBD  0020               	movlb	0	; select bank0
 10922  1FBE  08A6               	movf	getAll_DimmerLights_AdjSw@adjsw,f
 10923  1FBF  1D03               	skipz
 10924  1FC0  2FC9               	goto	l9995
 10925                           
 10926                           ;Dimmer_B1.c: 807: adjsw = DimmerLights->AdjSw == 1 ? 1 : 0;
 10927  1FC1  0A6F               	incf	_DimmerLights,w
 10928  1FC2  0086               	movwf	6
 10929  1FC3  3001               	movlw	1	; select bank2/3
 10930  1FC4  0087               	movwf	7
 10931  1FC5  3000               	movlw	0
 10932  1FC6  1B01               	btfsc	1,6
 10933  1FC7  3001               	movlw	1
 10934  1FC8  00A6               	movwf	getAll_DimmerLights_AdjSw@adjsw
 10935  1FC9                     l9995:	
 10936  1FC9  3001               	movlw	1
 10937  1FCA  07A4               	addwf	getAll_DimmerLights_AdjSw@i,f
 10938  1FCB  3000               	movlw	0
 10939  1FCC  3DA5               	addwfc	getAll_DimmerLights_AdjSw@i+1,f
 10940  1FCD  2FAC               	goto	l9997
 10941  1FCE                     l9999:	
 10942                           
 10943                           ;Dimmer_B1.c: 808: }
 10944                           ;Dimmer_B1.c: 809: }
 10945                           ;Dimmer_B1.c: 810: return adjsw;
 10946  1FCE  0020               	movlb	0	; select bank0
 10947  1FCF  0826               	movf	getAll_DimmerLights_AdjSw@adjsw,w
 10948  1FD0  0008               	return
 10949  1FD1                     __end_of_getAll_DimmerLights_AdjSw:	
 10950                           
 10951                           	psect	text56
 10952  1DB7                     __ptext56:	
 10953 ;; *************** function ___wmul *****************
 10954 ;; Defined at:
 10955 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10958 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;  product         2    4[BANK0 ] unsigned int 
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  2    0[BANK0 ] unsigned int 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:        6 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    5
 10977 ;; This function calls:
 10978 ;;		Nothing
 10979 ;; This function is called by:
 10980 ;;		_Load_Main
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           
 10985                           ;psect for function ___wmul
 10986  1DB7                     ___wmul:	
 10987                           
 10988                           ;incstack = 0
 10989                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10990  1DB7  0020               	movlb	0	; select bank0
 10991  1DB8  01A4               	clrf	___wmul@product
 10992  1DB9  01A5               	clrf	___wmul@product+1
 10993  1DBA                     l10421:	
 10994  1DBA  1C20               	btfss	___wmul@multiplier,0
 10995  1DBB  2DC0               	goto	l2864
 10996  1DBC  0822               	movf	___wmul@multiplicand,w
 10997  1DBD  07A4               	addwf	___wmul@product,f
 10998  1DBE  0823               	movf	___wmul@multiplicand+1,w
 10999  1DBF  3DA5               	addwfc	___wmul@product+1,f
 11000  1DC0                     l2864:	
 11001  1DC0  3001               	movlw	1
 11002  1DC1                     u11835:	
 11003  1DC1  35A2               	lslf	___wmul@multiplicand,f
 11004  1DC2  0DA3               	rlf	___wmul@multiplicand+1,f
 11005  1DC3  0B89               	decfsz	9,f
 11006  1DC4  2DC1               	goto	u11835
 11007  1DC5  3001               	movlw	1
 11008  1DC6                     u11845:	
 11009  1DC6  36A1               	lsrf	___wmul@multiplier+1,f
 11010  1DC7  0CA0               	rrf	___wmul@multiplier,f
 11011  1DC8  0B89               	decfsz	9,f
 11012  1DC9  2DC6               	goto	u11845
 11013  1DCA  0821               	movf	___wmul@multiplier+1,w
 11014  1DCB  0420               	iorwf	___wmul@multiplier,w
 11015  1DCC  1D03               	skipz
 11016  1DCD  2DBA               	goto	l10421
 11017  1DCE  0825               	movf	___wmul@product+1,w
 11018  1DCF  01A1               	clrf	?___wmul+1
 11019  1DD0  07A1               	addwf	?___wmul+1,f
 11020  1DD1  0824               	movf	___wmul@product,w
 11021  1DD2  01A0               	clrf	?___wmul
 11022  1DD3  07A0               	addwf	?___wmul,f
 11023  1DD4  0008               	return
 11024  1DD5                     __end_of___wmul:	
 11025                           
 11026                           	psect	text57
 11027  117B                     __ptext57:	
 11028 ;; *************** function ___lwdiv *****************
 11029 ;; Defined at:
 11030 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;  divisor         2    0[BANK0 ] unsigned int 
 11033 ;;  dividend        2    2[BANK0 ] unsigned int 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  quotient        2    6[BANK0 ] unsigned int 
 11036 ;;  counter         1    5[BANK0 ] unsigned char 
 11037 ;; Return value:  Size  Location     Type
 11038 ;;                  2    0[BANK0 ] unsigned int 
 11039 ;; Registers used:
 11040 ;;		wreg, status,2, status,0
 11041 ;; Tracked objects:
 11042 ;;		On entry : 0/0
 11043 ;;		On exit  : 0/0
 11044 ;;		Unchanged: 0/0
 11045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11046 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11049 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11050 ;;Total ram usage:        8 bytes
 11051 ;; Hardware stack levels used:    1
 11052 ;; Hardware stack levels required when called:    5
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		_Load_Main
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           
 11061                           ;psect for function ___lwdiv
 11062  117B                     ___lwdiv:	
 11063                           
 11064                           ;incstack = 0
 11065                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11066  117B  0020               	movlb	0	; select bank0
 11067  117C  01A6               	clrf	___lwdiv@quotient
 11068  117D  01A7               	clrf	___lwdiv@quotient+1
 11069  117E  0821               	movf	___lwdiv@divisor+1,w
 11070  117F  0420               	iorwf	___lwdiv@divisor,w
 11071  1180  1903               	skipnz
 11072  1181  29AB               	goto	l10453
 11073  1182  01A5               	clrf	___lwdiv@counter
 11074  1183  0AA5               	incf	___lwdiv@counter,f
 11075  1184                     l10441:	
 11076  1184  1BA1               	btfsc	___lwdiv@divisor+1,7
 11077  1185  2990               	goto	l10443
 11078  1186  3001               	movlw	1
 11079  1187                     u11875:	
 11080  1187  35A0               	lslf	___lwdiv@divisor,f
 11081  1188  0DA1               	rlf	___lwdiv@divisor+1,f
 11082  1189  0B89               	decfsz	9,f
 11083  118A  2987               	goto	u11875
 11084  118B  3001               	movlw	1
 11085  118C  00A4               	movwf	??___lwdiv
 11086  118D  0824               	movf	??___lwdiv,w
 11087  118E  07A5               	addwf	___lwdiv@counter,f
 11088  118F  2984               	goto	l10441
 11089  1190                     l10443:	
 11090  1190  3001               	movlw	1
 11091  1191                     u11895:	
 11092  1191  35A6               	lslf	___lwdiv@quotient,f
 11093  1192  0DA7               	rlf	___lwdiv@quotient+1,f
 11094  1193  0B89               	decfsz	9,f
 11095  1194  2991               	goto	u11895
 11096  1195  0821               	movf	___lwdiv@divisor+1,w
 11097  1196  0223               	subwf	___lwdiv@dividend+1,w
 11098  1197  1D03               	skipz
 11099  1198  299B               	goto	u11905
 11100  1199  0820               	movf	___lwdiv@divisor,w
 11101  119A  0222               	subwf	___lwdiv@dividend,w
 11102  119B                     u11905:	
 11103  119B  1C03               	skipc
 11104  119C  29A2               	goto	l10449
 11105  119D  0820               	movf	___lwdiv@divisor,w
 11106  119E  02A2               	subwf	___lwdiv@dividend,f
 11107  119F  0821               	movf	___lwdiv@divisor+1,w
 11108  11A0  3BA3               	subwfb	___lwdiv@dividend+1,f
 11109  11A1  1426               	bsf	___lwdiv@quotient,0
 11110  11A2                     l10449:	
 11111  11A2  3001               	movlw	1
 11112  11A3                     u11915:	
 11113  11A3  36A1               	lsrf	___lwdiv@divisor+1,f
 11114  11A4  0CA0               	rrf	___lwdiv@divisor,f
 11115  11A5  0B89               	decfsz	9,f
 11116  11A6  29A3               	goto	u11915
 11117  11A7  3001               	movlw	1
 11118  11A8  02A5               	subwf	___lwdiv@counter,f
 11119  11A9  1D03               	btfss	3,2
 11120  11AA  2990               	goto	l10443
 11121  11AB                     l10453:	
 11122  11AB  0827               	movf	___lwdiv@quotient+1,w
 11123  11AC  01A1               	clrf	?___lwdiv+1
 11124  11AD  07A1               	addwf	?___lwdiv+1,f
 11125  11AE  0826               	movf	___lwdiv@quotient,w
 11126  11AF  01A0               	clrf	?___lwdiv
 11127  11B0  07A0               	addwf	?___lwdiv,f
 11128  11B1  0008               	return
 11129  11B2                     __end_of___lwdiv:	
 11130                           
 11131                           	psect	text58
 11132  1A31                     __ptext58:	
 11133 ;; *************** function _Load_Initialization *****************
 11134 ;; Defined at:
 11135 ;;		line 9 in file "../src/OverLoad_B1.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;		None
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;		None
 11140 ;; Return value:  Size  Location     Type
 11141 ;;		None               void
 11142 ;; Registers used:
 11143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11144 ;; Tracked objects:
 11145 ;;		On entry : 0/0
 11146 ;;		On exit  : 0/0
 11147 ;;		Unchanged: 0/0
 11148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;Total ram usage:        0 bytes
 11154 ;; Hardware stack levels used:    1
 11155 ;; Hardware stack levels required when called:    6
 11156 ;; This function calls:
 11157 ;;		_setLoad_AH_AL_Restore
 11158 ;; This function is called by:
 11159 ;;		_main
 11160 ;; This function uses a non-reentrant model
 11161 ;;
 11162                           
 11163                           
 11164                           ;psect for function _Load_Initialization
 11165  1A31                     _Load_Initialization:	
 11166                           
 11167                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11168                           
 11169                           ;incstack = 0
 11170                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11171  1A31  0022               	movlb	2	; select bank2
 11172  1A32  17A7               	bsf	_Load^(0+256),7
 11173                           
 11174                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11175  1A33  319D  257E         	fcall	_setLoad_AH_AL_Restore
 11176  1A35  0008               	return
 11177  1A36                     __end_of_Load_Initialization:	
 11178                           
 11179                           	psect	text59
 11180  1D7E                     __ptext59:	
 11181 ;; *************** function _setLoad_AH_AL_Restore *****************
 11182 ;; Defined at:
 11183 ;;		line 282 in file "../src/OverLoad_B1.c"
 11184 ;; Parameters:    Size  Location     Type
 11185 ;;		None
 11186 ;; Auto vars:     Size  Location     Type
 11187 ;;  i               1    1[BANK0 ] unsigned char 
 11188 ;; Return value:  Size  Location     Type
 11189 ;;		None               void
 11190 ;; Registers used:
 11191 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11192 ;; Tracked objects:
 11193 ;;		On entry : 0/0
 11194 ;;		On exit  : 0/0
 11195 ;;		Unchanged: 0/0
 11196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;Total ram usage:        2 bytes
 11202 ;; Hardware stack levels used:    1
 11203 ;; Hardware stack levels required when called:    5
 11204 ;; This function calls:
 11205 ;;		Nothing
 11206 ;; This function is called by:
 11207 ;;		_Load_Initialization
 11208 ;;		_Load_Main
 11209 ;; This function uses a non-reentrant model
 11210 ;;
 11211                           
 11212                           
 11213                           ;psect for function _setLoad_AH_AL_Restore
 11214  1D7E                     _setLoad_AH_AL_Restore:	
 11215                           
 11216                           ;OverLoad_B1.c: 283: char i;
 11217                           ;OverLoad_B1.c: 284: for (i = 0; i < 5; i++) {
 11218                           
 11219                           ;incstack = 0
 11220                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11221  1D7E  0020               	movlb	0	; select bank0
 11222  1D7F  01A1               	clrf	setLoad_AH_AL_Restore@i
 11223  1D80                     L5:	
 11224  1D80  3005               	movlw	5
 11225  1D81  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11226  1D82  1803               	btfsc	3,0
 11227  1D83  0008               	return
 11228                           
 11229                           ;OverLoad_B1.c: 285: Load.AH[i] = 0;
 11230  1D84  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11231  1D85  3E32               	addlw	(_Load+11)& (0+255)
 11232  1D86  0086               	movwf	6
 11233  1D87  3001               	movlw	1	; select bank2/3
 11234  1D88  0087               	movwf	7
 11235  1D89  3000               	movlw	0
 11236  1D8A  3FC0               	movwi [0]fsr1
 11237  1D8B  3FC1               	movwi [1]fsr1
 11238                           
 11239                           ;OverLoad_B1.c: 286: Load.AL[i] = 0xffff;
 11240  1D8C  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11241  1D8D  3E3C               	addlw	(_Load+21)& (0+255)
 11242  1D8E  0086               	movwf	6
 11243  1D8F  3001               	movlw	1	; select bank2/3
 11244  1D90  0087               	movwf	7
 11245  1D91  30FF               	movlw	255
 11246  1D92  3FC0               	movwi [0]fsr1
 11247  1D93  30FF               	movlw	255
 11248  1D94  3FC1               	movwi [1]fsr1
 11249  1D95  3001               	movlw	1
 11250  1D96  00A0               	movwf	??_setLoad_AH_AL_Restore
 11251  1D97  0820               	movf	??_setLoad_AH_AL_Restore,w
 11252  1D98  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11253  1D99  2D80               	goto	L5
 11254  1D9A                     __end_of_setLoad_AH_AL_Restore:	
 11255                           
 11256                           	psect	text60
 11257  1AE7                     __ptext60:	
 11258 ;; *************** function _LED_Main *****************
 11259 ;; Defined at:
 11260 ;;		line 47 in file "../src/LED_B1.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;		None               void
 11267 ;; Registers used:
 11268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;Total ram usage:        0 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    7
 11281 ;; This function calls:
 11282 ;;		_setLED_Main
 11283 ;; This function is called by:
 11284 ;;		_main
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _LED_Main
 11290  1AE7                     _LED_Main:	
 11291                           
 11292                           ;LED_B1.c: 53: setLED_Main(1);
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11296  1AE7  3001               	movlw	1
 11297  1AE8  3192  22A9  319A   	fcall	_setLED_Main
 11298                           
 11299                           ;LED_B1.c: 56: setLED_Main(2);
 11300  1AEB  3002               	movlw	2
 11301  1AEC  3192  22A9  319A   	fcall	_setLED_Main
 11302                           
 11303                           ;LED_B1.c: 62: setLED_Main(99);
 11304  1AEF  3063               	movlw	99
 11305  1AF0  3192  22A9         	fcall	_setLED_Main
 11306  1AF2  0008               	return
 11307  1AF3                     __end_of_LED_Main:	
 11308                           
 11309                           	psect	text61
 11310  12A9                     __ptext61:	
 11311 ;; *************** function _setLED_Main *****************
 11312 ;; Defined at:
 11313 ;;		line 221 in file "../src/LED_B1.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;  led             1    wreg     unsigned char 
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;  led             1    4[BANK0 ] unsigned char 
 11318 ;; Return value:  Size  Location     Type
 11319 ;;		None               void
 11320 ;; Registers used:
 11321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;Total ram usage:        3 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:    6
 11334 ;; This function calls:
 11335 ;;		_LedPointSelect
 11336 ;; This function is called by:
 11337 ;;		_LED_Main
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           
 11342                           ;psect for function _setLED_Main
 11343  12A9                     _setLED_Main:	
 11344                           
 11345                           ;incstack = 0
 11346                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11347                           ;setLED_Main@led stored from wreg
 11348  12A9  0020               	movlb	0	; select bank0
 11349  12AA  00A4               	movwf	setLED_Main@led
 11350                           
 11351                           ;LED_B1.c: 222: LedPointSelect(led);
 11352  12AB  0824               	movf	setLED_Main@led,w
 11353  12AC  319E  2613  3192   	fcall	_LedPointSelect
 11354                           
 11355                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11356  12AF  0021               	movlb	1	; select bank1
 11357  12B0  084D               	movf	_LED^(0+128),w
 11358  12B1  0086               	movwf	6
 11359  12B2  3001               	movlw	1	; select bank2/3
 11360  12B3  0087               	movwf	7
 11361  12B4  1C81               	btfss	1,1
 11362  12B5  0008               	return
 11363                           
 11364                           ;LED_B1.c: 224: LED->Time++;
 11365  12B6  0A4D               	incf	_LED^(0+128),w
 11366  12B7  0086               	movwf	6
 11367  12B8  3001               	movlw	1	; select bank2/3
 11368  12B9  0087               	movwf	7
 11369  12BA  3001               	movlw	1
 11370  12BB  0781               	addwf	1,f
 11371  12BC  3141               	addfsr 1,1
 11372  12BD  1803               	skipnc
 11373  12BE  0A81               	incf	1,f
 11374                           
 11375                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11376  12BF  0A4D               	incf	_LED^(0+128),w
 11377  12C0  0086               	movwf	6
 11378  12C1  3001               	movlw	1	; select bank2/3
 11379  12C2  0087               	movwf	7
 11380  12C3  3F40               	moviw [0]fsr1
 11381  12C4  0020               	movlb	0	; select bank0
 11382  12C5  00A2               	movwf	??_setLED_Main
 11383  12C6  3F41               	moviw [1]fsr1
 11384  12C7  00A3               	movwf	??_setLED_Main+1
 11385  12C8  3000               	movlw	0
 11386  12C9  0223               	subwf	??_setLED_Main+1,w
 11387  12CA  3032               	movlw	50
 11388  12CB  1903               	skipnz
 11389  12CC  0222               	subwf	??_setLED_Main,w
 11390  12CD  1C03               	skipc
 11391  12CE  0008               	return
 11392                           
 11393                           ;LED_B1.c: 226: LED->Time = 0;
 11394  12CF  0021               	movlb	1	; select bank1
 11395  12D0  0A4D               	incf	_LED^(0+128),w
 11396  12D1  0086               	movwf	6
 11397  12D2  3001               	movlw	1	; select bank2/3
 11398  12D3  0087               	movwf	7
 11399  12D4  3000               	movlw	0
 11400  12D5  3FC0               	movwi [0]fsr1
 11401  12D6  3FC1               	movwi [1]fsr1
 11402                           
 11403                           ;LED_B1.c: 228: if (led == 1) {
 11404  12D7  0020               	movlb	0	; select bank0
 11405  12D8  0824               	movf	setLED_Main@led,w
 11406  12D9  3A01               	xorlw	1
 11407                           
 11408                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11409  12DA  3008               	movlw	8
 11410  12DB  1903               	btfsc	3,2
 11411  12DC  068C               	xorwf	12,f
 11412                           
 11413                           ;LED_B1.c: 230: }
 11414                           ;LED_B1.c: 233: if (led == 2) {
 11415  12DD  0824               	movf	setLED_Main@led,w
 11416  12DE  3A02               	xorlw	2
 11417  12DF  1D03               	skipz
 11418  12E0  2AE3               	goto	l1049
 11419                           
 11420                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11421  12E1  3080               	movlw	128
 11422  12E2  068E               	xorwf	14,f
 11423  12E3                     l1049:	
 11424                           
 11425                           ;LED_B1.c: 235: }
 11426                           ;LED_B1.c: 243: if (led == 99) {
 11427  12E3  0824               	movf	setLED_Main@led,w
 11428  12E4  3A63               	xorlw	99
 11429  12E5  1D03               	skipz
 11430  12E6  0008               	return
 11431                           
 11432                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11433  12E7  3020               	movlw	32
 11434  12E8  068D               	xorwf	13,f
 11435  12E9  0008               	return
 11436  12EA                     __end_of_setLED_Main:	
 11437                           
 11438                           	psect	text62
 11439  1ADB                     __ptext62:	
 11440 ;; *************** function _LED_Initialization *****************
 11441 ;; Defined at:
 11442 ;;		line 31 in file "../src/LED_B1.c"
 11443 ;; Parameters:    Size  Location     Type
 11444 ;;		None
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;		None
 11447 ;; Return value:  Size  Location     Type
 11448 ;;		None               void
 11449 ;; Registers used:
 11450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:        0 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    8
 11463 ;; This function calls:
 11464 ;;		_setLED_Initialization
 11465 ;; This function is called by:
 11466 ;;		_main
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           
 11471                           ;psect for function _LED_Initialization
 11472  1ADB                     _LED_Initialization:	
 11473                           
 11474                           ;LED_B1.c: 33: setLED_Initialization(1);
 11475                           
 11476                           ;incstack = 0
 11477                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11478  1ADB  3001               	movlw	1
 11479  1ADC  319B  23C6  319A   	fcall	_setLED_Initialization
 11480                           
 11481                           ;LED_B1.c: 36: setLED_Initialization(2);
 11482  1ADF  3002               	movlw	2
 11483  1AE0  319B  23C6  319A   	fcall	_setLED_Initialization
 11484                           
 11485                           ;LED_B1.c: 42: setLED_Initialization(99);
 11486  1AE3  3063               	movlw	99
 11487  1AE4  319B  23C6         	fcall	_setLED_Initialization
 11488  1AE6  0008               	return
 11489  1AE7                     __end_of_LED_Initialization:	
 11490                           
 11491                           	psect	text63
 11492  1BC6                     __ptext63:	
 11493 ;; *************** function _setLED_Initialization *****************
 11494 ;; Defined at:
 11495 ;;		line 69 in file "../src/LED_B1.c"
 11496 ;; Parameters:    Size  Location     Type
 11497 ;;  led             1    wreg     unsigned char 
 11498 ;; Auto vars:     Size  Location     Type
 11499 ;;  led             1    4[BANK0 ] unsigned char 
 11500 ;; Return value:  Size  Location     Type
 11501 ;;		None               void
 11502 ;; Registers used:
 11503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11504 ;; Tracked objects:
 11505 ;;		On entry : 0/0
 11506 ;;		On exit  : 0/0
 11507 ;;		Unchanged: 0/0
 11508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11513 ;;Total ram usage:        1 bytes
 11514 ;; Hardware stack levels used:    1
 11515 ;; Hardware stack levels required when called:    7
 11516 ;; This function calls:
 11517 ;;		_LedPointSelect
 11518 ;;		_setLED
 11519 ;; This function is called by:
 11520 ;;		_LED_Initialization
 11521 ;; This function uses a non-reentrant model
 11522 ;;
 11523                           
 11524                           
 11525                           ;psect for function _setLED_Initialization
 11526  1BC6                     _setLED_Initialization:	
 11527                           
 11528                           ;incstack = 0
 11529                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11530                           ;setLED_Initialization@led stored from wreg
 11531  1BC6  0020               	movlb	0	; select bank0
 11532  1BC7  00A4               	movwf	setLED_Initialization@led
 11533                           
 11534                           ;LED_B1.c: 70: LedPointSelect(led);
 11535  1BC8  0824               	movf	setLED_Initialization@led,w
 11536  1BC9  319E  2613  319B   	fcall	_LedPointSelect
 11537                           
 11538                           ;LED_B1.c: 71: LED->Enable = 1;
 11539  1BCC  0021               	movlb	1	; select bank1
 11540  1BCD  084D               	movf	_LED^(0+128),w
 11541  1BCE  0086               	movwf	6
 11542  1BCF  3001               	movlw	1	; select bank2/3
 11543  1BD0  0087               	movwf	7
 11544  1BD1  1401               	bsf	1,0
 11545                           
 11546                           ;LED_B1.c: 72: setLED(led, 0);
 11547  1BD2  0020               	movlb	0	; select bank0
 11548  1BD3  01A2               	clrf	setLED@command
 11549  1BD4  0824               	movf	setLED_Initialization@led,w
 11550  1BD5  3195  2597         	fcall	_setLED
 11551  1BD7  0008               	return
 11552  1BD8                     __end_of_setLED_Initialization:	
 11553                           
 11554                           	psect	text64
 11555  110F                     __ptext64:	
 11556 ;; *************** function _Flash_Memory_Main *****************
 11557 ;; Defined at:
 11558 ;;		line 965 in file "../src/MCU_B1.c"
 11559 ;; Parameters:    Size  Location     Type
 11560 ;;		None
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;		None
 11563 ;; Return value:  Size  Location     Type
 11564 ;;		None               void
 11565 ;; Registers used:
 11566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;Total ram usage:        1 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    8
 11579 ;; This function calls:
 11580 ;;		_Flash_Memory_Modify
 11581 ;;		_getMain_LightsStatus
 11582 ;; This function is called by:
 11583 ;;		_main
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _Flash_Memory_Main
 11589  110F                     _Flash_Memory_Main:	
 11590                           
 11591                           ;MCU_B1.c: 966: if (Memory.Modify == 1) {
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11595  110F  0024               	movlb	4	; select bank4
 11596  1110  1C44               	btfss	(_Memory^(0+512)+36),0
 11597  1111  0008               	return
 11598                           
 11599                           ;MCU_B1.c: 967: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11600  1112  319C  240F  3191   	fcall	_getMain_LightsStatus
 11601  1115  3A00               	xorlw	0
 11602  1116  3000               	movlw	0
 11603  1117  1903               	skipnz
 11604  1118  3001               	movlw	1
 11605  1119  0020               	movlb	0	; select bank0
 11606  111A  00A6               	movwf	??_Flash_Memory_Main
 11607  111B  0DA6               	rlf	??_Flash_Memory_Main,f
 11608  111C  0024               	movlb	4	; select bank4
 11609  111D  0844               	movf	(_Memory^(0+512)+36),w
 11610  111E  0020               	movlb	0	; select bank0
 11611  111F  0626               	xorwf	??_Flash_Memory_Main,w
 11612  1120  39FD               	andlw	-3
 11613  1121  0626               	xorwf	??_Flash_Memory_Main,w
 11614  1122  0024               	movlb	4	; select bank4
 11615  1123  00C4               	movwf	(_Memory^(0+512)+36)
 11616                           
 11617                           ;MCU_B1.c: 968: if (Memory.GO == 1) {
 11618  1124  1CC4               	btfss	(_Memory^(0+512)+36),1
 11619  1125  293F               	goto	l1317
 11620                           
 11621                           ;MCU_B1.c: 969: Memory.Runtime = 1;
 11622  1126  15C4               	bsf	(_Memory^(0+512)+36),3
 11623                           
 11624                           ;MCU_B1.c: 970: Memory.Time++;
 11625  1127  3001               	movlw	1
 11626  1128  07C2               	addwf	(_Memory^(0+512)+34),f
 11627  1129  3000               	movlw	0
 11628  112A  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11629                           
 11630                           ;MCU_B1.c: 971: if (Memory.Time == 25) {
 11631  112B  3022               	movlw	34
 11632  112C  3E20               	addlw	_Memory& (0+255)
 11633  112D  0086               	movwf	6
 11634  112E  3002               	movlw	2	; select bank4/5
 11635  112F  0087               	movwf	7
 11636  1130  3F40               	moviw [0]fsr1
 11637  1131  3A19               	xorlw	25
 11638  1132  1D03               	skipz
 11639  1133  2936               	goto	u12065
 11640  1134  3F41               	moviw [1]fsr1
 11641  1135  3A00               	xorlw	0
 11642  1136                     u12065:	
 11643  1136  1D03               	skipz
 11644  1137  0008               	return
 11645                           
 11646                           ;MCU_B1.c: 972: Memory.Time = 0;
 11647  1138  01C2               	clrf	(_Memory^(0+512)+34)
 11648  1139  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11649                           
 11650                           ;MCU_B1.c: 973: Memory.Modify = 0;
 11651  113A  1044               	bcf	(_Memory^(0+512)+36),0
 11652                           
 11653                           ;MCU_B1.c: 974: Memory.GO = 0;
 11654  113B  10C4               	bcf	(_Memory^(0+512)+36),1
 11655                           
 11656                           ;MCU_B1.c: 975: Flash_Memory_Modify();
 11657  113C  3193  23B6         	fcall	_Flash_Memory_Modify
 11658                           
 11659                           ;MCU_B1.c: 976: }
 11660                           ;MCU_B1.c: 977: } else {
 11661  113E  0008               	return
 11662  113F                     l1317:	
 11663                           
 11664                           ;MCU_B1.c: 978: if (Memory.Runtime == 1) {
 11665  113F  1DC4               	btfss	(_Memory^(0+512)+36),3
 11666  1140  0008               	return
 11667                           
 11668                           ;MCU_B1.c: 979: Memory.Runtime = 0;
 11669  1141  11C4               	bcf	(_Memory^(0+512)+36),3
 11670                           
 11671                           ;MCU_B1.c: 980: Memory.Time = 0;
 11672  1142  01C2               	clrf	(_Memory^(0+512)+34)
 11673  1143  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11674  1144  0008               	return
 11675  1145                     __end_of_Flash_Memory_Main:	
 11676                           
 11677                           	psect	text65
 11678  13B6                     __ptext65:	
 11679 ;; *************** function _Flash_Memory_Modify *****************
 11680 ;; Defined at:
 11681 ;;		line 1038 in file "../src/MCU_B1.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  i               1    5[BANK0 ] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;Total ram usage:        2 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    7
 11702 ;; This function calls:
 11703 ;;		_Flash_Memory_Erasing
 11704 ;;		_Flash_Memory_Read
 11705 ;;		_Flash_Memory_Write
 11706 ;;		_setMemory_Data
 11707 ;; This function is called by:
 11708 ;;		_Flash_Memory_Main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _Flash_Memory_Modify
 11714  13B6                     _Flash_Memory_Modify:	
 11715                           
 11716                           ;MCU_B1.c: 1039: char i = 0;
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11720  13B6  0020               	movlb	0	; select bank0
 11721  13B7  01A5               	clrf	Flash_Memory_Modify@i
 11722                           
 11723                           ;MCU_B1.c: 1040: for (i = 0; i < 32; i++) {
 11724  13B8  01A5               	clrf	Flash_Memory_Modify@i
 11725  13B9  3020               	movlw	32
 11726  13BA  0225               	subwf	Flash_Memory_Modify@i,w
 11727  13BB  1803               	btfsc	3,0
 11728  13BC  2BD2               	goto	l10111
 11729  13BD                     l10105:	
 11730                           
 11731                           ;MCU_B1.c: 1041: Memory.Data[i] = Flash_Memory_Read(i);
 11732  13BD  0825               	movf	Flash_Memory_Modify@i,w
 11733  13BE  319D  2564  3193   	fcall	_Flash_Memory_Read
 11734  13C1  0020               	movlb	0	; select bank0
 11735  13C2  00A4               	movwf	??_Flash_Memory_Modify
 11736  13C3  0825               	movf	Flash_Memory_Modify@i,w
 11737  13C4  3E20               	addlw	_Memory& (0+255)
 11738  13C5  0086               	movwf	6
 11739  13C6  3002               	movlw	2	; select bank4/5
 11740  13C7  0087               	movwf	7
 11741  13C8  0824               	movf	??_Flash_Memory_Modify,w
 11742  13C9  0081               	movwf	1
 11743  13CA  3001               	movlw	1
 11744  13CB  00A4               	movwf	??_Flash_Memory_Modify
 11745  13CC  0824               	movf	??_Flash_Memory_Modify,w
 11746  13CD  07A5               	addwf	Flash_Memory_Modify@i,f
 11747  13CE  3020               	movlw	32
 11748  13CF  0225               	subwf	Flash_Memory_Modify@i,w
 11749  13D0  1C03               	skipc
 11750  13D1  2BBD               	goto	l10105
 11751  13D2                     l10111:	
 11752                           
 11753                           ;MCU_B1.c: 1042: }
 11754                           ;MCU_B1.c: 1043: setMemory_Data(0, product->Data[12]);
 11755  13D2  0879               	movf	_product,w
 11756  13D3  0086               	movwf	6
 11757  13D4  3002               	movlw	2	; select bank4/5
 11758  13D5  0087               	movwf	7
 11759  13D6  3002               	movlw	2	; select bank4/5
 11760  13D7  3F4C               	moviw [12]fsr1
 11761  13D8  00A0               	movwf	setMemory_Data@data
 11762  13D9  3000               	movlw	0
 11763  13DA  319A  22C3  3193   	fcall	_setMemory_Data
 11764                           
 11765                           ;MCU_B1.c: 1044: setMemory_Data(1, product->Data[13]);
 11766  13DD  0879               	movf	_product,w
 11767  13DE  0086               	movwf	6
 11768  13DF  3002               	movlw	2	; select bank4/5
 11769  13E0  0087               	movwf	7
 11770  13E1  3002               	movlw	2	; select bank4/5
 11771  13E2  3F4D               	moviw [13]fsr1
 11772  13E3  0020               	movlb	0	; select bank0
 11773  13E4  00A0               	movwf	setMemory_Data@data
 11774  13E5  3001               	movlw	1
 11775  13E6  319A  22C3  3193   	fcall	_setMemory_Data
 11776                           
 11777                           ;MCU_B1.c: 1045: setMemory_Data(2, product->Data[14]);
 11778  13E9  0879               	movf	_product,w
 11779  13EA  0086               	movwf	6
 11780  13EB  3002               	movlw	2	; select bank4/5
 11781  13EC  0087               	movwf	7
 11782  13ED  3002               	movlw	2	; select bank4/5
 11783  13EE  3F4E               	moviw [14]fsr1
 11784  13EF  0020               	movlb	0	; select bank0
 11785  13F0  00A0               	movwf	setMemory_Data@data
 11786  13F1  3002               	movlw	2
 11787  13F2  319A  22C3  3193   	fcall	_setMemory_Data
 11788                           
 11789                           ;MCU_B1.c: 1051: if (Memory.LoopSave == 1) {
 11790  13F5  0024               	movlb	4	; select bank4
 11791  13F6  1D44               	btfss	(_Memory^(0+512)+36),2
 11792  13F7  2BFC               	goto	l1340
 11793                           
 11794                           ;MCU_B1.c: 1052: Memory.LoopSave = 0;
 11795  13F8  1144               	bcf	(_Memory^(0+512)+36),2
 11796                           
 11797                           ;MCU_B1.c: 1053: myMain.FirstOpen = 0;
 11798  13F9  0021               	movlb	1	; select bank1
 11799  13FA  11A0               	bcf	_myMain^(0+128),3
 11800                           
 11801                           ;MCU_B1.c: 1054: myMain.First = 0;
 11802  13FB  12A0               	bcf	_myMain^(0+128),5
 11803  13FC                     l1340:	
 11804                           
 11805                           ;MCU_B1.c: 1056: }
 11806                           ;MCU_B1.c: 1057: GIE = 0;
 11807  13FC  138B               	bcf	11,7	;volatile
 11808                           
 11809                           ;MCU_B1.c: 1058: Flash_Memory_Erasing();
 11810  13FD  319A  22CF  3193   	fcall	_Flash_Memory_Erasing
 11811                           
 11812                           ;MCU_B1.c: 1059: Flash_Memory_Write();
 11813  1400  319F  27D1         	fcall	_Flash_Memory_Write
 11814                           
 11815                           ;MCU_B1.c: 1060: GIE = 1;
 11816  1402  178B               	bsf	11,7	;volatile
 11817  1403  0008               	return
 11818  1404                     __end_of_Flash_Memory_Modify:	
 11819                           
 11820                           	psect	text66
 11821  1ACF                     __ptext66:	
 11822 ;; *************** function _Flash_Memory_Erasing *****************
 11823 ;; Defined at:
 11824 ;;		line 1027 in file "../src/MCU_B1.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;		None
 11827 ;; Auto vars:     Size  Location     Type
 11828 ;;		None
 11829 ;; Return value:  Size  Location     Type
 11830 ;;		None               void
 11831 ;; Registers used:
 11832 ;;		wreg, status,2, status,0, pclath, cstack
 11833 ;; Tracked objects:
 11834 ;;		On entry : 0/0
 11835 ;;		On exit  : 0/0
 11836 ;;		Unchanged: 0/0
 11837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;Total ram usage:        0 bytes
 11843 ;; Hardware stack levels used:    1
 11844 ;; Hardware stack levels required when called:    6
 11845 ;; This function calls:
 11846 ;;		_Flash_Memory_Unlock
 11847 ;; This function is called by:
 11848 ;;		_Flash_Memory_Modify
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _Flash_Memory_Erasing
 11854  1ACF                     _Flash_Memory_Erasing:	
 11855                           
 11856                           ;MCU_B1.c: 1028: CFGS = 0;
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11860  1ACF  0023               	movlb	3	; select bank3
 11861  1AD0  1315               	bcf	21,6	;volatile
 11862                           
 11863                           ;MCU_B1.c: 1029: PMADRH = 0x30;
 11864  1AD1  3030               	movlw	48
 11865  1AD2  0092               	movwf	18	;volatile
 11866                           
 11867                           ;MCU_B1.c: 1030: PMADRL = 0x00;
 11868  1AD3  0191               	clrf	17	;volatile
 11869                           
 11870                           ;MCU_B1.c: 1031: FREE = 1;
 11871  1AD4  1615               	bsf	21,4	;volatile
 11872                           
 11873                           ;MCU_B1.c: 1032: WREN = 1;
 11874  1AD5  1515               	bsf	21,2	;volatile
 11875                           
 11876                           ;MCU_B1.c: 1033: Flash_Memory_Unlock();
 11877  1AD6  319A  2298         	fcall	_Flash_Memory_Unlock
 11878                           
 11879                           ;MCU_B1.c: 1034: WREN = 0;
 11880  1AD8  0023               	movlb	3	; select bank3
 11881  1AD9  1115               	bcf	21,2	;volatile
 11882  1ADA  0008               	return
 11883  1ADB                     __end_of_Flash_Memory_Erasing:	
 11884                           
 11885                           	psect	text67
 11886  06D7                     __ptext67:	
 11887 ;; *************** function _Flash_Memory_Initialization *****************
 11888 ;; Defined at:
 11889 ;;		line 924 in file "../src/MCU_B1.c"
 11890 ;; Parameters:    Size  Location     Type
 11891 ;;		None
 11892 ;; Auto vars:     Size  Location     Type
 11893 ;;  i               1   67[BANK0 ] unsigned char 
 11894 ;; Return value:  Size  Location     Type
 11895 ;;		None               void
 11896 ;; Registers used:
 11897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11898 ;; Tracked objects:
 11899 ;;		On entry : 0/0
 11900 ;;		On exit  : 0/0
 11901 ;;		Unchanged: 0/0
 11902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11907 ;;Total ram usage:        2 bytes
 11908 ;; Hardware stack levels used:    1
 11909 ;; Hardware stack levels required when called:    8
 11910 ;; This function calls:
 11911 ;;		_Flash_Memory_Read
 11912 ;;		_Flash_Memory_Write
 11913 ;;		_setMemory_Data
 11914 ;;		_setPercentValue
 11915 ;; This function is called by:
 11916 ;;		_main
 11917 ;; This function uses a non-reentrant model
 11918 ;;
 11919                           
 11920                           
 11921                           ;psect for function _Flash_Memory_Initialization
 11922  06D7                     _Flash_Memory_Initialization:	
 11923                           
 11924                           ;MCU_B1.c: 925: char i = 0;
 11925                           
 11926                           ;incstack = 0
 11927                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11928  06D7  0020               	movlb	0	; select bank0
 11929  06D8  01E3               	clrf	Flash_Memory_Initialization@i
 11930                           
 11931                           ;MCU_B1.c: 926: if (Flash_Memory_Read(31) == 0xaa) {
 11932  06D9  301F               	movlw	31
 11933  06DA  319D  2564  3186   	fcall	_Flash_Memory_Read
 11934  06DD  3AAA               	xorlw	170
 11935  06DE  1D03               	skipz
 11936  06DF  2F49               	goto	l10533
 11937                           
 11938                           ;MCU_B1.c: 927: product->Data[12] = Flash_Memory_Read(0);
 11939  06E0  3000               	movlw	0
 11940  06E1  319D  2564  3186   	fcall	_Flash_Memory_Read
 11941  06E4  0020               	movlb	0	; select bank0
 11942  06E5  00E2               	movwf	??_Flash_Memory_Initialization
 11943  06E6  0879               	movf	_product,w
 11944  06E7  3E0C               	addlw	12
 11945  06E8  0086               	movwf	6
 11946  06E9  3002               	movlw	2	; select bank4/5
 11947  06EA  0087               	movwf	7
 11948  06EB  0862               	movf	??_Flash_Memory_Initialization,w
 11949  06EC  0081               	movwf	1
 11950                           
 11951                           ;MCU_B1.c: 928: product->Data[13] = Flash_Memory_Read(1);
 11952  06ED  3001               	movlw	1
 11953  06EE  319D  2564  3186   	fcall	_Flash_Memory_Read
 11954  06F1  0020               	movlb	0	; select bank0
 11955  06F2  00E2               	movwf	??_Flash_Memory_Initialization
 11956  06F3  0879               	movf	_product,w
 11957  06F4  3E0D               	addlw	13
 11958  06F5  0086               	movwf	6
 11959  06F6  3002               	movlw	2	; select bank4/5
 11960  06F7  0087               	movwf	7
 11961  06F8  0862               	movf	??_Flash_Memory_Initialization,w
 11962  06F9  0081               	movwf	1
 11963                           
 11964                           ;MCU_B1.c: 929: product->Data[14] = Flash_Memory_Read(2);
 11965  06FA  3002               	movlw	2
 11966  06FB  319D  2564  3186   	fcall	_Flash_Memory_Read
 11967  06FE  0020               	movlb	0	; select bank0
 11968  06FF  00E2               	movwf	??_Flash_Memory_Initialization
 11969  0700  0879               	movf	_product,w
 11970  0701  3E0E               	addlw	14
 11971  0702  0086               	movwf	6
 11972  0703  3002               	movlw	2	; select bank4/5
 11973  0704  0087               	movwf	7
 11974  0705  0862               	movf	??_Flash_Memory_Initialization,w
 11975  0706  0081               	movwf	1
 11976                           
 11977                           ;MCU_B1.c: 935: i = setPercentValue(((char)(75*0.8)));
 11978  0707  303C               	movlw	60
 11979  0708  3189  21B9  3186   	fcall	_setPercentValue
 11980  070B  0020               	movlb	0	; select bank0
 11981  070C  00E2               	movwf	??_Flash_Memory_Initialization
 11982  070D  0862               	movf	??_Flash_Memory_Initialization,w
 11983  070E  00E3               	movwf	Flash_Memory_Initialization@i
 11984                           
 11985                           ;MCU_B1.c: 936: product->Data[21] = i;
 11986  070F  0863               	movf	Flash_Memory_Initialization@i,w
 11987  0710  00E2               	movwf	??_Flash_Memory_Initialization
 11988  0711  0879               	movf	_product,w
 11989  0712  3E15               	addlw	21
 11990  0713  0086               	movwf	6
 11991  0714  3002               	movlw	2	; select bank4/5
 11992  0715  0087               	movwf	7
 11993  0716  0862               	movf	??_Flash_Memory_Initialization,w
 11994  0717  0081               	movwf	1
 11995                           
 11996                           ;MCU_B1.c: 937: product->Data[22] = i;
 11997  0718  0863               	movf	Flash_Memory_Initialization@i,w
 11998  0719  00E2               	movwf	??_Flash_Memory_Initialization
 11999  071A  0879               	movf	_product,w
 12000  071B  3E16               	addlw	22
 12001  071C  0086               	movwf	6
 12002  071D  3002               	movlw	2	; select bank4/5
 12003  071E  0087               	movwf	7
 12004  071F  0862               	movf	??_Flash_Memory_Initialization,w
 12005  0720  0081               	movwf	1
 12006                           
 12007                           ;MCU_B1.c: 938: product->Data[23] = i;
 12008  0721  0863               	movf	Flash_Memory_Initialization@i,w
 12009  0722  00E2               	movwf	??_Flash_Memory_Initialization
 12010  0723  0879               	movf	_product,w
 12011  0724  3E17               	addlw	23
 12012  0725  0086               	movwf	6
 12013  0726  3002               	movlw	2	; select bank4/5
 12014  0727  0087               	movwf	7
 12015  0728  0862               	movf	??_Flash_Memory_Initialization,w
 12016  0729  0081               	movwf	1
 12017                           
 12018                           ;MCU_B1.c: 940: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12019  072A  0879               	movf	_product,w
 12020  072B  3E0C               	addlw	12
 12021  072C  0086               	movwf	6
 12022  072D  3002               	movlw	2	; select bank4/5
 12023  072E  0087               	movwf	7
 12024  072F  0801               	movf	1,w
 12025  0730  3AFF               	xorlw	255
 12026  0731  1D03               	skipz
 12027  0732  0008               	return
 12028  0733  0879               	movf	_product,w
 12029  0734  3E0D               	addlw	13
 12030  0735  0086               	movwf	6
 12031  0736  3002               	movlw	2	; select bank4/5
 12032  0737  0087               	movwf	7
 12033  0738  0801               	movf	1,w
 12034  0739  3AFF               	xorlw	255
 12035  073A  1D03               	skipz
 12036  073B  0008               	return
 12037  073C  0879               	movf	_product,w
 12038  073D  3E0E               	addlw	14
 12039  073E  0086               	movwf	6
 12040  073F  3002               	movlw	2	; select bank4/5
 12041  0740  0087               	movwf	7
 12042  0741  0801               	movf	1,w
 12043  0742  3AFF               	xorlw	255
 12044  0743  1D03               	skipz
 12045  0744  0008               	return
 12046                           
 12047                           ;MCU_B1.c: 941: myMain.FirstOpen = 1;
 12048  0745  0021               	movlb	1	; select bank1
 12049  0746  15A0               	bsf	_myMain^(0+128),3
 12050                           
 12051                           ;MCU_B1.c: 942: myMain.First = 1;
 12052  0747  16A0               	bsf	_myMain^(0+128),5
 12053                           
 12054                           ;MCU_B1.c: 943: }
 12055                           ;MCU_B1.c: 944: } else {
 12056  0748  0008               	return
 12057  0749                     l10533:	
 12058                           
 12059                           ;MCU_B1.c: 945: i = setPercentValue(((char)(75*0.8)));
 12060  0749  303C               	movlw	60
 12061  074A  3189  21B9  3186   	fcall	_setPercentValue
 12062  074D  0020               	movlb	0	; select bank0
 12063  074E  00E2               	movwf	??_Flash_Memory_Initialization
 12064  074F  0862               	movf	??_Flash_Memory_Initialization,w
 12065  0750  00E3               	movwf	Flash_Memory_Initialization@i
 12066                           
 12067                           ;MCU_B1.c: 946: setMemory_Data(0, 0xff);
 12068  0751  30FF               	movlw	255
 12069  0752  00E2               	movwf	??_Flash_Memory_Initialization
 12070  0753  0862               	movf	??_Flash_Memory_Initialization,w
 12071  0754  00A0               	movwf	setMemory_Data@data
 12072  0755  3000               	movlw	0
 12073  0756  319A  22C3  3186   	fcall	_setMemory_Data
 12074                           
 12075                           ;MCU_B1.c: 947: setMemory_Data(1, 0xff);
 12076  0759  30FF               	movlw	255
 12077  075A  0020               	movlb	0	; select bank0
 12078  075B  00E2               	movwf	??_Flash_Memory_Initialization
 12079  075C  0862               	movf	??_Flash_Memory_Initialization,w
 12080  075D  00A0               	movwf	setMemory_Data@data
 12081  075E  3001               	movlw	1
 12082  075F  319A  22C3  3186   	fcall	_setMemory_Data
 12083                           
 12084                           ;MCU_B1.c: 948: setMemory_Data(2, 0xff);
 12085  0762  30FF               	movlw	255
 12086  0763  0020               	movlb	0	; select bank0
 12087  0764  00E2               	movwf	??_Flash_Memory_Initialization
 12088  0765  0862               	movf	??_Flash_Memory_Initialization,w
 12089  0766  00A0               	movwf	setMemory_Data@data
 12090  0767  3002               	movlw	2
 12091  0768  319A  22C3  3186   	fcall	_setMemory_Data
 12092                           
 12093                           ;MCU_B1.c: 949: setMemory_Data(3, 0xff);
 12094  076B  30FF               	movlw	255
 12095  076C  0020               	movlb	0	; select bank0
 12096  076D  00E2               	movwf	??_Flash_Memory_Initialization
 12097  076E  0862               	movf	??_Flash_Memory_Initialization,w
 12098  076F  00A0               	movwf	setMemory_Data@data
 12099  0770  3003               	movlw	3
 12100  0771  319A  22C3  3186   	fcall	_setMemory_Data
 12101                           
 12102                           ;MCU_B1.c: 950: setMemory_Data(4, 0xff);
 12103  0774  30FF               	movlw	255
 12104  0775  0020               	movlb	0	; select bank0
 12105  0776  00E2               	movwf	??_Flash_Memory_Initialization
 12106  0777  0862               	movf	??_Flash_Memory_Initialization,w
 12107  0778  00A0               	movwf	setMemory_Data@data
 12108  0779  3004               	movlw	4
 12109  077A  319A  22C3  3186   	fcall	_setMemory_Data
 12110                           
 12111                           ;MCU_B1.c: 951: setMemory_Data(5, 0xff);
 12112  077D  30FF               	movlw	255
 12113  077E  0020               	movlb	0	; select bank0
 12114  077F  00E2               	movwf	??_Flash_Memory_Initialization
 12115  0780  0862               	movf	??_Flash_Memory_Initialization,w
 12116  0781  00A0               	movwf	setMemory_Data@data
 12117  0782  3005               	movlw	5
 12118  0783  319A  22C3  3186   	fcall	_setMemory_Data
 12119                           
 12120                           ;MCU_B1.c: 952: setMemory_Data(31, 0xaa);
 12121  0786  30AA               	movlw	170
 12122  0787  0020               	movlb	0	; select bank0
 12123  0788  00E2               	movwf	??_Flash_Memory_Initialization
 12124  0789  0862               	movf	??_Flash_Memory_Initialization,w
 12125  078A  00A0               	movwf	setMemory_Data@data
 12126  078B  301F               	movlw	31
 12127  078C  319A  22C3  3186   	fcall	_setMemory_Data
 12128                           
 12129                           ;MCU_B1.c: 953: product->Data[21] = i;
 12130  078F  0020               	movlb	0	; select bank0
 12131  0790  0863               	movf	Flash_Memory_Initialization@i,w
 12132  0791  00E2               	movwf	??_Flash_Memory_Initialization
 12133  0792  0879               	movf	_product,w
 12134  0793  3E15               	addlw	21
 12135  0794  0086               	movwf	6
 12136  0795  3002               	movlw	2	; select bank4/5
 12137  0796  0087               	movwf	7
 12138  0797  0862               	movf	??_Flash_Memory_Initialization,w
 12139  0798  0081               	movwf	1
 12140                           
 12141                           ;MCU_B1.c: 954: product->Data[22] = i;
 12142  0799  0863               	movf	Flash_Memory_Initialization@i,w
 12143  079A  00E2               	movwf	??_Flash_Memory_Initialization
 12144  079B  0879               	movf	_product,w
 12145  079C  3E16               	addlw	22
 12146  079D  0086               	movwf	6
 12147  079E  3002               	movlw	2	; select bank4/5
 12148  079F  0087               	movwf	7
 12149  07A0  0862               	movf	??_Flash_Memory_Initialization,w
 12150  07A1  0081               	movwf	1
 12151                           
 12152                           ;MCU_B1.c: 955: product->Data[23] = i;
 12153  07A2  0863               	movf	Flash_Memory_Initialization@i,w
 12154  07A3  00E2               	movwf	??_Flash_Memory_Initialization
 12155  07A4  0879               	movf	_product,w
 12156  07A5  3E17               	addlw	23
 12157  07A6  0086               	movwf	6
 12158  07A7  3002               	movlw	2	; select bank4/5
 12159  07A8  0087               	movwf	7
 12160  07A9  0862               	movf	??_Flash_Memory_Initialization,w
 12161  07AA  0081               	movwf	1
 12162                           
 12163                           ;MCU_B1.c: 956: GIE = 0;
 12164  07AB  138B               	bcf	11,7	;volatile
 12165                           
 12166                           ;MCU_B1.c: 957: Flash_Memory_Write();
 12167  07AC  319F  27D1         	fcall	_Flash_Memory_Write
 12168                           
 12169                           ;MCU_B1.c: 958: GIE = 1;
 12170  07AE  178B               	bsf	11,7	;volatile
 12171                           
 12172                           ;MCU_B1.c: 959: myMain.FirstOpen = 1;
 12173  07AF  0021               	movlb	1	; select bank1
 12174  07B0  15A0               	bsf	_myMain^(0+128),3
 12175                           
 12176                           ;MCU_B1.c: 960: myMain.First = 1;
 12177  07B1  16A0               	bsf	_myMain^(0+128),5
 12178  07B2  0008               	return
 12179  07B3                     __end_of_Flash_Memory_Initialization:	
 12180                           
 12181                           	psect	text68
 12182  1AC3                     __ptext68:	
 12183 ;; *************** function _setMemory_Data *****************
 12184 ;; Defined at:
 12185 ;;		line 1075 in file "../src/MCU_B1.c"
 12186 ;; Parameters:    Size  Location     Type
 12187 ;;  address         1    wreg     unsigned char 
 12188 ;;  data            1    0[BANK0 ] unsigned char 
 12189 ;; Auto vars:     Size  Location     Type
 12190 ;;  address         1    2[BANK0 ] unsigned char 
 12191 ;; Return value:  Size  Location     Type
 12192 ;;		None               void
 12193 ;; Registers used:
 12194 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12195 ;; Tracked objects:
 12196 ;;		On entry : 0/0
 12197 ;;		On exit  : 0/0
 12198 ;;		Unchanged: 0/0
 12199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12200 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12202 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;Total ram usage:        3 bytes
 12205 ;; Hardware stack levels used:    1
 12206 ;; Hardware stack levels required when called:    5
 12207 ;; This function calls:
 12208 ;;		Nothing
 12209 ;; This function is called by:
 12210 ;;		_Flash_Memory_Initialization
 12211 ;;		_Flash_Memory_Modify
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _setMemory_Data
 12217  1AC3                     _setMemory_Data:	
 12218                           
 12219                           ;incstack = 0
 12220                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12221                           ;setMemory_Data@address stored from wreg
 12222  1AC3  0020               	movlb	0	; select bank0
 12223  1AC4  00A2               	movwf	setMemory_Data@address
 12224                           
 12225                           ;MCU_B1.c: 1076: Memory.Data[address] = data;
 12226  1AC5  0820               	movf	setMemory_Data@data,w
 12227  1AC6  00A1               	movwf	??_setMemory_Data
 12228  1AC7  0822               	movf	setMemory_Data@address,w
 12229  1AC8  3E20               	addlw	_Memory& (0+255)
 12230  1AC9  0086               	movwf	6
 12231  1ACA  3002               	movlw	2	; select bank4/5
 12232  1ACB  0087               	movwf	7
 12233  1ACC  0821               	movf	??_setMemory_Data,w
 12234  1ACD  0081               	movwf	1
 12235  1ACE  0008               	return
 12236  1ACF                     __end_of_setMemory_Data:	
 12237                           
 12238                           	psect	text69
 12239  1FD1                     __ptext69:	
 12240 ;; *************** function _Flash_Memory_Write *****************
 12241 ;; Defined at:
 12242 ;;		line 1008 in file "../src/MCU_B1.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;		None
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;  i               1    1[BANK0 ] unsigned char 
 12247 ;; Return value:  Size  Location     Type
 12248 ;;		None               void
 12249 ;; Registers used:
 12250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12251 ;; Tracked objects:
 12252 ;;		On entry : 0/0
 12253 ;;		On exit  : 0/0
 12254 ;;		Unchanged: 0/0
 12255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;Total ram usage:        2 bytes
 12261 ;; Hardware stack levels used:    1
 12262 ;; Hardware stack levels required when called:    6
 12263 ;; This function calls:
 12264 ;;		_Flash_Memory_Unlock
 12265 ;; This function is called by:
 12266 ;;		_Flash_Memory_Initialization
 12267 ;;		_Flash_Memory_Modify
 12268 ;; This function uses a non-reentrant model
 12269 ;;
 12270                           
 12271                           
 12272                           ;psect for function _Flash_Memory_Write
 12273  1FD1                     _Flash_Memory_Write:	
 12274                           
 12275                           ;MCU_B1.c: 1009: char i = 0;
 12276                           
 12277                           ;incstack = 0
 12278                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12279  1FD1  0020               	movlb	0	; select bank0
 12280  1FD2  01A1               	clrf	Flash_Memory_Write@i
 12281                           
 12282                           ;MCU_B1.c: 1010: CFGS = 0;
 12283  1FD3  0023               	movlb	3	; select bank3
 12284  1FD4  1315               	bcf	21,6	;volatile
 12285                           
 12286                           ;MCU_B1.c: 1011: PMADRH = 0x30;
 12287  1FD5  3030               	movlw	48
 12288  1FD6  0092               	movwf	18	;volatile
 12289                           
 12290                           ;MCU_B1.c: 1012: PMDATH = 0;
 12291  1FD7  0194               	clrf	20	;volatile
 12292                           
 12293                           ;MCU_B1.c: 1013: FREE = 0;
 12294  1FD8  1215               	bcf	21,4	;volatile
 12295                           
 12296                           ;MCU_B1.c: 1014: LWLO = 1;
 12297  1FD9  1695               	bsf	21,5	;volatile
 12298                           
 12299                           ;MCU_B1.c: 1015: WREN = 1;
 12300  1FDA  1515               	bsf	21,2	;volatile
 12301                           
 12302                           ;MCU_B1.c: 1016: for (i = 0; i < 32; i++) {
 12303  1FDB  0020               	movlb	0	; select bank0
 12304  1FDC  01A1               	clrf	Flash_Memory_Write@i
 12305  1FDD  3020               	movlw	32
 12306  1FDE  0221               	subwf	Flash_Memory_Write@i,w
 12307  1FDF  1803               	btfsc	3,0
 12308  1FE0  2FF9               	goto	l1331
 12309  1FE1                     l9693:	
 12310                           
 12311                           ;MCU_B1.c: 1017: PMADRL = i;
 12312  1FE1  0821               	movf	Flash_Memory_Write@i,w
 12313  1FE2  0023               	movlb	3	; select bank3
 12314  1FE3  0091               	movwf	17	;volatile
 12315                           
 12316                           ;MCU_B1.c: 1018: PMDATL = Memory.Data[i];
 12317  1FE4  0020               	movlb	0	; select bank0
 12318  1FE5  0821               	movf	Flash_Memory_Write@i,w
 12319  1FE6  3E20               	addlw	_Memory& (0+255)
 12320  1FE7  0086               	movwf	6
 12321  1FE8  3002               	movlw	2	; select bank4/5
 12322  1FE9  0087               	movwf	7
 12323  1FEA  0801               	movf	1,w
 12324  1FEB  0023               	movlb	3	; select bank3
 12325  1FEC  0093               	movwf	19	;volatile
 12326                           
 12327                           ;MCU_B1.c: 1019: Flash_Memory_Unlock();
 12328  1FED  319A  2298  319F   	fcall	_Flash_Memory_Unlock
 12329  1FF0  3001               	movlw	1
 12330  1FF1  0020               	movlb	0	; select bank0
 12331  1FF2  00A0               	movwf	??_Flash_Memory_Write
 12332  1FF3  0820               	movf	??_Flash_Memory_Write,w
 12333  1FF4  07A1               	addwf	Flash_Memory_Write@i,f
 12334  1FF5  3020               	movlw	32
 12335  1FF6  0221               	subwf	Flash_Memory_Write@i,w
 12336  1FF7  1C03               	skipc
 12337  1FF8  2FE1               	goto	l9693
 12338  1FF9                     l1331:	
 12339                           
 12340                           ;MCU_B1.c: 1020: }
 12341                           ;MCU_B1.c: 1021: LWLO = 0;
 12342  1FF9  0023               	movlb	3	; select bank3
 12343  1FFA  1295               	bcf	21,5	;volatile
 12344                           
 12345                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12346  1FFB  319A  2298         	fcall	_Flash_Memory_Unlock
 12347                           
 12348                           ;MCU_B1.c: 1023: WREN = 0;
 12349  1FFD  0023               	movlb	3	; select bank3
 12350  1FFE  1115               	bcf	21,2	;volatile
 12351  1FFF  0008               	return
 12352  2000                     __end_of_Flash_Memory_Write:	
 12353                           
 12354                           	psect	text70
 12355  1A98                     __ptext70:	
 12356 ;; *************** function _Flash_Memory_Unlock *****************
 12357 ;; Defined at:
 12358 ;;		line 987 in file "../src/MCU_B1.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;		None
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;		None
 12363 ;; Return value:  Size  Location     Type
 12364 ;;		None               void
 12365 ;; Registers used:
 12366 ;;		wreg
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;Total ram usage:        0 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    5
 12379 ;; This function calls:
 12380 ;;		Nothing
 12381 ;; This function is called by:
 12382 ;;		_Flash_Memory_Write
 12383 ;;		_Flash_Memory_Erasing
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           
 12388                           ;psect for function _Flash_Memory_Unlock
 12389  1A98                     _Flash_Memory_Unlock:	
 12390                           
 12391                           ;MCU_B1.c: 988: PMCON2 = 0x55;
 12392                           
 12393                           ;incstack = 0
 12394                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12395  1A98  3055               	movlw	85
 12396  1A99  0023               	movlb	3	; select bank3
 12397  1A9A  0096               	movwf	22	;volatile
 12398                           
 12399                           ;MCU_B1.c: 989: PMCON2 = 0xaa;
 12400  1A9B  30AA               	movlw	170
 12401  1A9C  0096               	movwf	22	;volatile
 12402                           
 12403                           ;MCU_B1.c: 990: WR = 1;
 12404  1A9D  1495               	bsf	21,1	;volatile
 12405                           
 12406                           ;MCU_B1.c: 991: __nop();
 12407  1A9E  0000               	nop
 12408                           
 12409                           ;MCU_B1.c: 992: __nop();
 12410  1A9F  0000               	nop
 12411  1AA0  0008               	return
 12412  1AA1                     __end_of_Flash_Memory_Unlock:	
 12413                           
 12414                           	psect	text71
 12415  1D64                     __ptext71:	
 12416 ;; *************** function _Flash_Memory_Read *****************
 12417 ;; Defined at:
 12418 ;;		line 996 in file "../src/MCU_B1.c"
 12419 ;; Parameters:    Size  Location     Type
 12420 ;;  address         1    wreg     unsigned char 
 12421 ;; Auto vars:     Size  Location     Type
 12422 ;;  address         1    2[BANK0 ] unsigned char 
 12423 ;;  ret             1    3[BANK0 ] unsigned char 
 12424 ;;  i               1    1[BANK0 ] unsigned char 
 12425 ;; Return value:  Size  Location     Type
 12426 ;;                  1    wreg      unsigned char 
 12427 ;; Registers used:
 12428 ;;		wreg, status,2
 12429 ;; Tracked objects:
 12430 ;;		On entry : 0/0
 12431 ;;		On exit  : 0/0
 12432 ;;		Unchanged: 0/0
 12433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;Total ram usage:        4 bytes
 12439 ;; Hardware stack levels used:    1
 12440 ;; Hardware stack levels required when called:    5
 12441 ;; This function calls:
 12442 ;;		Nothing
 12443 ;; This function is called by:
 12444 ;;		_Flash_Memory_Initialization
 12445 ;;		_Flash_Memory_Modify
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           
 12450                           ;psect for function _Flash_Memory_Read
 12451  1D64                     _Flash_Memory_Read:	
 12452                           
 12453                           ;incstack = 0
 12454                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12455                           ;Flash_Memory_Read@address stored from wreg
 12456  1D64  0020               	movlb	0	; select bank0
 12457  1D65  00A2               	movwf	Flash_Memory_Read@address
 12458                           
 12459                           ;MCU_B1.c: 997: char i = 0, ret = 0;
 12460  1D66  01A1               	clrf	Flash_Memory_Read@i
 12461  1D67  01A3               	clrf	Flash_Memory_Read@ret
 12462                           
 12463                           ;MCU_B1.c: 998: PMADRH = 0x30;
 12464  1D68  3030               	movlw	48
 12465  1D69  0023               	movlb	3	; select bank3
 12466  1D6A  0092               	movwf	18	;volatile
 12467                           
 12468                           ;MCU_B1.c: 999: PMADRL = address;
 12469  1D6B  0020               	movlb	0	; select bank0
 12470  1D6C  0822               	movf	Flash_Memory_Read@address,w
 12471  1D6D  0023               	movlb	3	; select bank3
 12472  1D6E  0091               	movwf	17	;volatile
 12473                           
 12474                           ;MCU_B1.c: 1000: CFGS = 0;
 12475  1D6F  1315               	bcf	21,6	;volatile
 12476                           
 12477                           ;MCU_B1.c: 1001: RD = 1;
 12478  1D70  1415               	bsf	21,0	;volatile
 12479                           
 12480                           ;MCU_B1.c: 1002: i = PMDATH;
 12481  1D71  0814               	movf	20,w	;volatile
 12482  1D72  0020               	movlb	0	; select bank0
 12483  1D73  00A0               	movwf	??_Flash_Memory_Read
 12484  1D74  0820               	movf	??_Flash_Memory_Read,w
 12485  1D75  00A1               	movwf	Flash_Memory_Read@i
 12486                           
 12487                           ;MCU_B1.c: 1003: ret = PMDATL;
 12488  1D76  0023               	movlb	3	; select bank3
 12489  1D77  0813               	movf	19,w	;volatile
 12490  1D78  0020               	movlb	0	; select bank0
 12491  1D79  00A0               	movwf	??_Flash_Memory_Read
 12492  1D7A  0820               	movf	??_Flash_Memory_Read,w
 12493  1D7B  00A3               	movwf	Flash_Memory_Read@ret
 12494                           
 12495                           ;MCU_B1.c: 1004: return ret;
 12496  1D7C  0823               	movf	Flash_Memory_Read@ret,w
 12497  1D7D  0008               	return
 12498  1D7E                     __end_of_Flash_Memory_Read:	
 12499                           
 12500                           	psect	text72
 12501  05F7                     __ptext72:	
 12502 ;; *************** function _Exception_Main *****************
 12503 ;; Defined at:
 12504 ;;		line 510 in file "../src/Main_B1.c"
 12505 ;; Parameters:    Size  Location     Type
 12506 ;;		None
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  i               2    4[BANK1 ] int 
 12509 ;;  i               2    2[BANK1 ] int 
 12510 ;;  lights          1    6[BANK1 ] unsigned char 
 12511 ;;  error           1    1[BANK1 ] unsigned char 
 12512 ;;  count           1    0[BANK1 ] unsigned char 
 12513 ;; Return value:  Size  Location     Type
 12514 ;;		None               void
 12515 ;; Registers used:
 12516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;      Totals:         0       1       7       0       0       0       0       0       0       0       0       0       
      +0       0
 12526 ;;Total ram usage:        8 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    9
 12529 ;; This function calls:
 12530 ;;		_getDimmerLights_Line
 12531 ;;		_getDimmerLights_Status
 12532 ;;		_getMain_All_Error_Status
 12533 ;;		_getMain_LightsStatus
 12534 ;;		_setBuz
 12535 ;;		_setDimmerLights_SwOff
 12536 ;;		_setLED
 12537 ;; This function is called by:
 12538 ;;		_main
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function _Exception_Main
 12544  05F7                     _Exception_Main:	
 12545                           
 12546                           ;Main_B1.c: 511: char error = getMain_All_Error_Status(0);
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12550  05F7  3000               	movlw	0
 12551  05F8  3188  2000  3185   	fcall	_getMain_All_Error_Status
 12552  05FB  0020               	movlb	0	; select bank0
 12553  05FC  00EB               	movwf	??_Exception_Main
 12554  05FD  086B               	movf	??_Exception_Main,w
 12555  05FE  0021               	movlb	1	; select bank1
 12556  05FF  00E9               	movwf	Exception_Main@error^(0+128)
 12557                           
 12558                           ;Main_B1.c: 512: char lights = 0, count = 2;
 12559  0600  01EE               	clrf	Exception_Main@lights^(0+128)
 12560  0601  3002               	movlw	2
 12561  0602  0020               	movlb	0	; select bank0
 12562  0603  00EB               	movwf	??_Exception_Main
 12563  0604  086B               	movf	??_Exception_Main,w
 12564  0605  0021               	movlb	1	; select bank1
 12565  0606  00E8               	movwf	Exception_Main@count^(0+128)
 12566                           
 12567                           ;Main_B1.c: 513: if (myMain.Error_Run == 1) {
 12568  0607  1DAB               	btfss	(_myMain^(0+128)+11),3
 12569  0608  2E16               	goto	l10895
 12570                           
 12571                           ;Main_B1.c: 514: if (error == 0) {
 12572  0609  08E9               	movf	Exception_Main@error^(0+128),f
 12573  060A  1D03               	skipz
 12574  060B  0008               	return
 12575                           
 12576                           ;Main_B1.c: 515: myMain.Error_Run = 0;
 12577  060C  11AB               	bcf	(_myMain^(0+128)+11),3
 12578                           
 12579                           ;Main_B1.c: 520: setLED(99, 10);
 12580  060D  300A               	movlw	10
 12581  060E  0020               	movlb	0	; select bank0
 12582  060F  00EB               	movwf	??_Exception_Main
 12583  0610  086B               	movf	??_Exception_Main,w
 12584  0611  00A2               	movwf	setLED@command
 12585  0612  3063               	movlw	99
 12586  0613  3195  2597         	fcall	_setLED
 12587                           
 12588                           ;Main_B1.c: 522: }
 12589                           ;Main_B1.c: 523: } else {
 12590  0615  0008               	return
 12591  0616                     l10895:	
 12592                           
 12593                           ;Main_B1.c: 524: if (error != 0) {
 12594  0616  0021               	movlb	1	; select bank1
 12595  0617  0869               	movf	Exception_Main@error^(0+128),w
 12596  0618  1903               	btfsc	3,2
 12597  0619  0008               	return
 12598                           
 12599                           ;Main_B1.c: 525: myMain.Error_Run = 1;
 12600  061A  15AB               	bsf	(_myMain^(0+128)+11),3
 12601                           
 12602                           ;Main_B1.c: 528: setLED(99, 11);
 12603  061B  300B               	movlw	11
 12604  061C  0020               	movlb	0	; select bank0
 12605  061D  00EB               	movwf	??_Exception_Main
 12606  061E  086B               	movf	??_Exception_Main,w
 12607  061F  00A2               	movwf	setLED@command
 12608  0620  3063               	movlw	99
 12609  0621  3195  2597  3185   	fcall	_setLED
 12610                           
 12611                           ;Main_B1.c: 530: switch (error) {
 12612  0624  2ECC               	goto	l10943
 12613  0625                     l10901:	
 12614                           ;Main_B1.c: 531: case 2:
 12615                           
 12616                           
 12617                           ;Main_B1.c: 532: if (getMain_LightsStatus() == 1) {
 12618  0625  319C  240F  3185   	fcall	_getMain_LightsStatus
 12619  0628  3A01               	xorlw	1
 12620  0629  1D03               	skipz
 12621  062A  2E34               	goto	l10905
 12622                           
 12623                           ;Main_B1.c: 533: setBuz(10, 300);
 12624  062B  302C               	movlw	44
 12625  062C  0020               	movlb	0	; select bank0
 12626  062D  00A9               	movwf	setBuz@time
 12627  062E  3001               	movlw	1
 12628  062F  00AA               	movwf	setBuz@time+1
 12629  0630  300A               	movlw	10
 12630  0631  3196  2696  3185   	fcall	_setBuz
 12631  0634                     l10905:	
 12632                           
 12633                           ;Main_B1.c: 534: }
 12634                           ;Main_B1.c: 536: for (int i = 0; i < count; i++) {
 12635  0634  0021               	movlb	1	; select bank1
 12636  0635  01EA               	clrf	Exception_Main@i^(0+128)
 12637  0636  01EB               	clrf	(Exception_Main@i+1)^(0+128)
 12638  0637                     l10915:	
 12639  0637  086B               	movf	(Exception_Main@i+1)^(0+128),w
 12640  0638  3A80               	xorlw	128
 12641  0639  0020               	movlb	0	; select bank0
 12642  063A  00EB               	movwf	??_Exception_Main
 12643  063B  3080               	movlw	128
 12644  063C  026B               	subwf	??_Exception_Main,w
 12645  063D  1D03               	skipz
 12646  063E  2E42               	goto	u12655
 12647  063F  0021               	movlb	1	; select bank1
 12648  0640  0868               	movf	Exception_Main@count^(0+128),w
 12649  0641  026A               	subwf	Exception_Main@i^(0+128),w
 12650  0642                     u12655:	
 12651  0642  1803               	btfsc	3,0
 12652  0643  2E66               	goto	u12650
 12653                           
 12654                           ;Main_B1.c: 538: if (getDimmerLights_Status(i + 1) == 1) {
 12655  0644  0021               	movlb	1	; select bank1
 12656  0645  086A               	movf	Exception_Main@i^(0+128),w
 12657  0646  3E01               	addlw	1
 12658  0647  319B  236F  3185   	fcall	_getDimmerLights_Status
 12659  064A  3A01               	xorlw	1
 12660  064B  1D03               	skipz
 12661  064C  2E60               	goto	l10913
 12662                           
 12663                           ;Main_B1.c: 539: DimmerLights->SwFlag = 1;
 12664  064D  0020               	movlb	0	; select bank0
 12665  064E  086F               	movf	_DimmerLights,w
 12666  064F  3E0B               	addlw	11
 12667  0650  0086               	movwf	6
 12668  0651  3001               	movlw	1	; select bank2/3
 12669  0652  0087               	movwf	7
 12670  0653  1481               	bsf	1,1
 12671                           
 12672                           ;Main_B1.c: 540: DimmerLights->Status = 0;
 12673  0654  086F               	movf	_DimmerLights,w
 12674  0655  3E02               	addlw	2
 12675  0656  0086               	movwf	6
 12676  0657  3001               	movlw	1	; select bank2/3
 12677  0658  0087               	movwf	7
 12678  0659  1081               	bcf	1,1
 12679                           
 12680                           ;Main_B1.c: 541: setDimmerLights_SwOff(i + 1);
 12681  065A  0021               	movlb	1	; select bank1
 12682  065B  086A               	movf	Exception_Main@i^(0+128),w
 12683  065C  3E01               	addlw	1
 12684  065D  3194  2404  3185   	fcall	_setDimmerLights_SwOff
 12685  0660                     l10913:	
 12686  0660  3001               	movlw	1
 12687  0661  0021               	movlb	1	; select bank1
 12688  0662  07EA               	addwf	Exception_Main@i^(0+128),f
 12689  0663  3000               	movlw	0
 12690  0664  3DEB               	addwfc	(Exception_Main@i+1)^(0+128),f
 12691  0665  2E37               	goto	l10915
 12692  0666                     u12650:	
 12693  0666  0021               	movlb	1	; select bank1
 12694  0667  0008               	return
 12695  0668                     l10917:	
 12696                           ;Main_B1.c: 545: case 3:
 12697                           
 12698                           ;Main_B1.c: 542: }
 12699                           ;Main_B1.c: 543: }
 12700                           ;Main_B1.c: 544: break;
 12701                           
 12702                           
 12703                           ;Main_B1.c: 547: setBuz(5, 300);
 12704  0668  302C               	movlw	44
 12705  0669  0020               	movlb	0	; select bank0
 12706  066A  00A9               	movwf	setBuz@time
 12707  066B  3001               	movlw	1
 12708  066C  00AA               	movwf	setBuz@time+1
 12709  066D  3005               	movlw	5
 12710  066E  3196  2696  3185   	fcall	_setBuz
 12711                           
 12712                           ;Main_B1.c: 548: lights = getDimmerLights_Line();
 12713  0671  319C  2484  3185   	fcall	_getDimmerLights_Line
 12714  0674  0020               	movlb	0	; select bank0
 12715  0675  00EB               	movwf	??_Exception_Main
 12716  0676  086B               	movf	??_Exception_Main,w
 12717  0677  0021               	movlb	1	; select bank1
 12718  0678  00EE               	movwf	Exception_Main@lights^(0+128)
 12719                           
 12720                           ;Main_B1.c: 549: if (lights == 0) {
 12721  0679  08EE               	movf	Exception_Main@lights^(0+128),f
 12722  067A  1D03               	skipz
 12723  067B  2EAF               	goto	l10935
 12724                           
 12725                           ;Main_B1.c: 551: for (int i = 0; i < count; i++) {
 12726  067C  01EC               	clrf	Exception_Main@i_3619^(0+128)
 12727  067D  01ED               	clrf	(Exception_Main@i_3619+1)^(0+128)
 12728  067E                     l10933:	
 12729  067E  086D               	movf	(Exception_Main@i_3619+1)^(0+128),w
 12730  067F  3A80               	xorlw	128
 12731  0680  0020               	movlb	0	; select bank0
 12732  0681  00EB               	movwf	??_Exception_Main
 12733  0682  3080               	movlw	128
 12734  0683  026B               	subwf	??_Exception_Main,w
 12735  0684  1D03               	skipz
 12736  0685  2E89               	goto	u12685
 12737  0686  0021               	movlb	1	; select bank1
 12738  0687  0868               	movf	Exception_Main@count^(0+128),w
 12739  0688  026C               	subwf	Exception_Main@i_3619^(0+128),w
 12740  0689                     u12685:	
 12741  0689  1803               	btfsc	3,0
 12742  068A  2EAD               	goto	u12680
 12743                           
 12744                           ;Main_B1.c: 553: if (getDimmerLights_Status(i + 1) == 1) {
 12745  068B  0021               	movlb	1	; select bank1
 12746  068C  086C               	movf	Exception_Main@i_3619^(0+128),w
 12747  068D  3E01               	addlw	1
 12748  068E  319B  236F  3185   	fcall	_getDimmerLights_Status
 12749  0691  3A01               	xorlw	1
 12750  0692  1D03               	skipz
 12751  0693  2EA7               	goto	l10931
 12752                           
 12753                           ;Main_B1.c: 554: DimmerLights->SwFlag = 1;
 12754  0694  0020               	movlb	0	; select bank0
 12755  0695  086F               	movf	_DimmerLights,w
 12756  0696  3E0B               	addlw	11
 12757  0697  0086               	movwf	6
 12758  0698  3001               	movlw	1	; select bank2/3
 12759  0699  0087               	movwf	7
 12760  069A  1481               	bsf	1,1
 12761                           
 12762                           ;Main_B1.c: 555: DimmerLights->Status = 0;
 12763  069B  086F               	movf	_DimmerLights,w
 12764  069C  3E02               	addlw	2
 12765  069D  0086               	movwf	6
 12766  069E  3001               	movlw	1	; select bank2/3
 12767  069F  0087               	movwf	7
 12768  06A0  1081               	bcf	1,1
 12769                           
 12770                           ;Main_B1.c: 556: setDimmerLights_SwOff(i + 1);
 12771  06A1  0021               	movlb	1	; select bank1
 12772  06A2  086C               	movf	Exception_Main@i_3619^(0+128),w
 12773  06A3  3E01               	addlw	1
 12774  06A4  3194  2404  3185   	fcall	_setDimmerLights_SwOff
 12775  06A7                     l10931:	
 12776  06A7  3001               	movlw	1
 12777  06A8  0021               	movlb	1	; select bank1
 12778  06A9  07EC               	addwf	Exception_Main@i_3619^(0+128),f
 12779  06AA  3000               	movlw	0
 12780  06AB  3DED               	addwfc	(Exception_Main@i_3619+1)^(0+128),f
 12781  06AC  2E7E               	goto	l10933
 12782  06AD                     u12680:	
 12783  06AD  0021               	movlb	1	; select bank1
 12784  06AE  0008               	return
 12785  06AF                     l10935:	
 12786                           ;Main_B1.c: 557: }
 12787                           ;Main_B1.c: 558: }
 12788                           ;Main_B1.c: 559: } else {
 12789                           
 12790                           
 12791                           ;Main_B1.c: 561: if (getDimmerLights_Status(lights) == 1) {
 12792  06AF  0021               	movlb	1	; select bank1
 12793  06B0  086E               	movf	Exception_Main@lights^(0+128),w
 12794  06B1  319B  236F  3185   	fcall	_getDimmerLights_Status
 12795  06B4  3A01               	xorlw	1
 12796  06B5  1903               	btfsc	3,2
 12797  06B6  2EB9               	goto	l10937
 12798  06B7  0021               	movlb	1	; select bank1
 12799  06B8  0008               	return
 12800  06B9                     l10937:	
 12801                           
 12802                           ;Main_B1.c: 563: DimmerLights->SwFlag = 1;
 12803  06B9  0020               	movlb	0	; select bank0
 12804  06BA  086F               	movf	_DimmerLights,w
 12805  06BB  3E0B               	addlw	11
 12806  06BC  0086               	movwf	6
 12807  06BD  3001               	movlw	1	; select bank2/3
 12808  06BE  0087               	movwf	7
 12809  06BF  1481               	bsf	1,1
 12810                           
 12811                           ;Main_B1.c: 564: DimmerLights->Status = 0;
 12812  06C0  086F               	movf	_DimmerLights,w
 12813  06C1  3E02               	addlw	2
 12814  06C2  0086               	movwf	6
 12815  06C3  3001               	movlw	1	; select bank2/3
 12816  06C4  0087               	movwf	7
 12817  06C5  1081               	bcf	1,1
 12818                           
 12819                           ;Main_B1.c: 565: setDimmerLights_SwOff(lights);
 12820  06C6  0021               	movlb	1	; select bank1
 12821  06C7  086E               	movf	Exception_Main@lights^(0+128),w
 12822  06C8  3194  2404         	fcall	_setDimmerLights_SwOff
 12823  06CA  0021               	movlb	1	; select bank1
 12824  06CB  0008               	return
 12825  06CC                     l10943:	
 12826                           ;Main_B1.c: 569: }
 12827                           
 12828                           ;Main_B1.c: 566: }
 12829                           ;Main_B1.c: 567: }
 12830                           ;Main_B1.c: 568: break;
 12831                           
 12832  06CC  0021               	movlb	1	; select bank1
 12833  06CD  0869               	movf	Exception_Main@error^(0+128),w
 12834                           
 12835                           ; Switch size 1, requested type "space"
 12836                           ; Number of cases is 2, Range of values is 2 to 3
 12837                           ; switch strategies available:
 12838                           ; Name         Instructions Cycles
 12839                           ; simple_byte            7     4 (average)
 12840                           ; direct_byte           13     9 (fixed)
 12841                           ; jumptable            263     9 (fixed)
 12842                           ;	Chosen strategy is simple_byte
 12843  06CE  3A02               	xorlw	2	; case 2
 12844  06CF  1903               	skipnz
 12845  06D0  2E25               	goto	l10901
 12846  06D1  3A01               	xorlw	1	; case 3
 12847  06D2  1903               	skipnz
 12848  06D3  2E68               	goto	l10917
 12849  06D4  2ED6               	goto	l1593
 12850  06D5  0008               	return
 12851  06D6                     l1593:	
 12852  06D6  0008               	return
 12853  06D7                     __end_of_Exception_Main:	
 12854                           
 12855                           	psect	text73
 12856  1C84                     __ptext73:	
 12857 ;; *************** function _getDimmerLights_Line *****************
 12858 ;; Defined at:
 12859 ;;		line 704 in file "../src/Dimmer_B1.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;		None
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  line            1    1[BANK0 ] unsigned char 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;                  1    wreg      unsigned char 
 12866 ;; Registers used:
 12867 ;;		wreg, status,2
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        2 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    5
 12880 ;; This function calls:
 12881 ;;		Nothing
 12882 ;; This function is called by:
 12883 ;;		_Exception_Main
 12884 ;; This function uses a non-reentrant model
 12885 ;;
 12886                           
 12887                           
 12888                           ;psect for function _getDimmerLights_Line
 12889  1C84                     _getDimmerLights_Line:	
 12890                           
 12891                           ;Dimmer_B1.c: 705: char line = 0;
 12892                           
 12893                           ;incstack = 0
 12894                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 12895  1C84  0020               	movlb	0	; select bank0
 12896  1C85  01A1               	clrf	getDimmerLights_Line@line
 12897                           
 12898                           ;Dimmer_B1.c: 707: if (DimmerLights1.Line == 1) {
 12899  1C86  0022               	movlb	2	; select bank2
 12900  1C87  1F5F               	btfss	(_DimmerLights1^(0+256)+10),6	;volatile
 12901  1C88  2C8D               	goto	l842
 12902                           
 12903                           ;Dimmer_B1.c: 708: line = 1;
 12904  1C89  0020               	movlb	0	; select bank0
 12905  1C8A  01A1               	clrf	getDimmerLights_Line@line
 12906  1C8B  0AA1               	incf	getDimmerLights_Line@line,f
 12907                           
 12908                           ;Dimmer_B1.c: 709: }
 12909  1C8C  2C95               	goto	l843
 12910  1C8D                     l842:	
 12911                           
 12912                           ;Dimmer_B1.c: 712: else if (DimmerLights2.Line == 1) {
 12913  1C8D  0023               	movlb	3	; select bank3
 12914  1C8E  1F48               	btfss	(_DimmerLights2^(0+384)+10),6	;volatile
 12915  1C8F  2C95               	goto	l843
 12916                           
 12917                           ;Dimmer_B1.c: 713: line = 2;
 12918  1C90  3002               	movlw	2
 12919  1C91  0020               	movlb	0	; select bank0
 12920  1C92  00A0               	movwf	??_getDimmerLights_Line
 12921  1C93  0820               	movf	??_getDimmerLights_Line,w
 12922  1C94  00A1               	movwf	getDimmerLights_Line@line
 12923  1C95                     l843:	
 12924                           
 12925                           ;Dimmer_B1.c: 714: }
 12926                           ;Dimmer_B1.c: 721: return line;
 12927  1C95  0020               	movlb	0	; select bank0
 12928  1C96  0821               	movf	getDimmerLights_Line@line,w
 12929  1C97  0008               	return
 12930  1C98                     __end_of_getDimmerLights_Line:	
 12931                           
 12932                           	psect	text74
 12933  1A6F                     __ptext74:	
 12934 ;; *************** function _DimmerLights_Main *****************
 12935 ;; Defined at:
 12936 ;;		line 477 in file "../src/Dimmer_B1.c"
 12937 ;; Parameters:    Size  Location     Type
 12938 ;;		None
 12939 ;; Auto vars:     Size  Location     Type
 12940 ;;		None
 12941 ;; Return value:  Size  Location     Type
 12942 ;;		None               void
 12943 ;; Registers used:
 12944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12945 ;; Tracked objects:
 12946 ;;		On entry : 0/0
 12947 ;;		On exit  : 0/0
 12948 ;;		Unchanged: 0/0
 12949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;Total ram usage:        0 bytes
 12955 ;; Hardware stack levels used:    1
 12956 ;; Hardware stack levels required when called:   10
 12957 ;; This function calls:
 12958 ;;		_setDimmerLights_Main
 12959 ;; This function is called by:
 12960 ;;		_main
 12961 ;; This function uses a non-reentrant model
 12962 ;;
 12963                           
 12964                           
 12965                           ;psect for function _DimmerLights_Main
 12966  1A6F                     _DimmerLights_Main:	
 12967                           
 12968                           ;Dimmer_B1.c: 490: setDimmerLights_Main(1);
 12969                           
 12970                           ;incstack = 0
 12971                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12972  1A6F  3001               	movlw	1
 12973  1A70  3194  24A2  319A   	fcall	_setDimmerLights_Main
 12974                           
 12975                           ;Dimmer_B1.c: 494: setDimmerLights_Main(2);
 12976  1A73  3002               	movlw	2
 12977  1A74  3194  24A2         	fcall	_setDimmerLights_Main
 12978  1A76  0008               	return
 12979  1A77                     __end_of_DimmerLights_Main:	
 12980                           
 12981                           	psect	text75
 12982  14A2                     __ptext75:	
 12983 ;; *************** function _setDimmerLights_Main *****************
 12984 ;; Defined at:
 12985 ;;		line 504 in file "../src/Dimmer_B1.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  lights          1    wreg     unsigned char 
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;  lights          1   78[BANK0 ] unsigned char 
 12990 ;; Return value:  Size  Location     Type
 12991 ;;		None               void
 12992 ;; Registers used:
 12993 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13003 ;;Total ram usage:        1 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    9
 13006 ;; This function calls:
 13007 ;;		_DimmerLightsPointSelect
 13008 ;;		_getDimmerLights_Allow_Condition
 13009 ;;		_setDimmerLights
 13010 ;;		_setDimmerLights_Adj
 13011 ;; This function is called by:
 13012 ;;		_DimmerLights_Main
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           
 13017                           ;psect for function _setDimmerLights_Main
 13018  14A2                     _setDimmerLights_Main:	
 13019                           
 13020                           ;incstack = 0
 13021                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13022                           ;setDimmerLights_Main@lights stored from wreg
 13023  14A2  0020               	movlb	0	; select bank0
 13024  14A3  00EE               	movwf	setDimmerLights_Main@lights
 13025                           
 13026                           ;Dimmer_B1.c: 505: DimmerLightsPointSelect(lights);
 13027  14A4  086E               	movf	setDimmerLights_Main@lights,w
 13028  14A5  319B  23FC  3194   	fcall	_DimmerLightsPointSelect
 13029                           
 13030                           ;Dimmer_B1.c: 507: if (DimmerLights->Trigger == 1) {
 13031  14A8  0020               	movlb	0	; select bank0
 13032  14A9  086F               	movf	_DimmerLights,w
 13033  14AA  3E0A               	addlw	10
 13034  14AB  0086               	movwf	6
 13035  14AC  3001               	movlw	1	; select bank2/3
 13036  14AD  0087               	movwf	7
 13037  14AE  1C81               	btfss	1,1
 13038  14AF  2CD1               	goto	l9959
 13039                           
 13040                           ;Dimmer_B1.c: 508: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13041  14B0  086E               	movf	setDimmerLights_Main@lights,w
 13042  14B1  3193  236F  3194   	fcall	_getDimmerLights_Allow_Condition
 13043  14B4  3800               	iorlw	0
 13044  14B5  1D03               	skipz
 13045  14B6  0008               	return
 13046                           
 13047                           ;Dimmer_B1.c: 509: DimmerLights->Trigger = 0;
 13048  14B7  0020               	movlb	0	; select bank0
 13049  14B8  086F               	movf	_DimmerLights,w
 13050  14B9  3E0A               	addlw	10
 13051  14BA  0086               	movwf	6
 13052  14BB  3001               	movlw	1	; select bank2/3
 13053  14BC  0087               	movwf	7
 13054  14BD  1081               	bcf	1,1
 13055                           
 13056                           ;Dimmer_B1.c: 510: if (DimmerLights->Switch == 1) {
 13057  14BE  086F               	movf	_DimmerLights,w
 13058  14BF  3E0A               	addlw	10
 13059  14C0  0086               	movwf	6
 13060  14C1  3001               	movlw	1	; select bank2/3
 13061  14C2  0087               	movwf	7
 13062  14C3  1C01               	btfss	1,0
 13063  14C4  2CCB               	goto	l9957
 13064                           
 13065                           ;Dimmer_B1.c: 511: setDimmerLights(lights, 1);
 13066  14C5  01EB               	clrf	setDimmerLights@status
 13067  14C6  0AEB               	incf	setDimmerLights@status,f
 13068  14C7  086E               	movf	setDimmerLights_Main@lights,w
 13069  14C8  3194  24F2         	fcall	_setDimmerLights
 13070                           
 13071                           ;Dimmer_B1.c: 512: } else {
 13072  14CA  0008               	return
 13073  14CB                     l9957:	
 13074                           
 13075                           ;Dimmer_B1.c: 513: setDimmerLights(lights, 0);
 13076  14CB  0020               	movlb	0	; select bank0
 13077  14CC  01EB               	clrf	setDimmerLights@status
 13078  14CD  086E               	movf	setDimmerLights_Main@lights,w
 13079  14CE  3194  24F2         	fcall	_setDimmerLights
 13080                           
 13081                           ;Dimmer_B1.c: 514: }
 13082                           ;Dimmer_B1.c: 515: }
 13083                           ;Dimmer_B1.c: 516: } else {
 13084  14D0  0008               	return
 13085  14D1                     l9959:	
 13086                           
 13087                           ;Dimmer_B1.c: 517: if (DimmerLights->TriggerAdj == 1) {
 13088  14D1  0020               	movlb	0	; select bank0
 13089  14D2  086F               	movf	_DimmerLights,w
 13090  14D3  3E0A               	addlw	10
 13091  14D4  0086               	movwf	6
 13092  14D5  3001               	movlw	1	; select bank2/3
 13093  14D6  0087               	movwf	7
 13094  14D7  1D81               	btfss	1,3
 13095  14D8  0008               	return
 13096                           
 13097                           ;Dimmer_B1.c: 518: DimmerLights->TriggerAdj = 0;
 13098  14D9  086F               	movf	_DimmerLights,w
 13099  14DA  3E0A               	addlw	10
 13100  14DB  0086               	movwf	6
 13101  14DC  3001               	movlw	1	; select bank2/3
 13102  14DD  0087               	movwf	7
 13103  14DE  1181               	bcf	1,3
 13104                           
 13105                           ;Dimmer_B1.c: 519: if (DimmerLights->SwitchAdj == 1) {
 13106  14DF  086F               	movf	_DimmerLights,w
 13107  14E0  3E0A               	addlw	10
 13108  14E1  0086               	movwf	6
 13109  14E2  3001               	movlw	1	; select bank2/3
 13110  14E3  0087               	movwf	7
 13111  14E4  1D01               	btfss	1,2
 13112  14E5  2CEC               	goto	l9965
 13113                           
 13114                           ;Dimmer_B1.c: 520: setDimmerLights_Adj(lights, 1);
 13115  14E6  01EB               	clrf	setDimmerLights_Adj@status
 13116  14E7  0AEB               	incf	setDimmerLights_Adj@status,f
 13117  14E8  086E               	movf	setDimmerLights_Main@lights,w
 13118  14E9  3196  263E         	fcall	_setDimmerLights_Adj
 13119                           
 13120                           ;Dimmer_B1.c: 521: } else {
 13121  14EB  0008               	return
 13122  14EC                     l9965:	
 13123                           
 13124                           ;Dimmer_B1.c: 522: setDimmerLights_Adj(lights, 0);
 13125  14EC  0020               	movlb	0	; select bank0
 13126  14ED  01EB               	clrf	setDimmerLights_Adj@status
 13127  14EE  086E               	movf	setDimmerLights_Main@lights,w
 13128  14EF  3196  263E         	fcall	_setDimmerLights_Adj
 13129  14F1  0008               	return
 13130  14F2                     __end_of_setDimmerLights_Main:	
 13131                           
 13132                           	psect	text76
 13133  163E                     __ptext76:	
 13134 ;; *************** function _setDimmerLights_Adj *****************
 13135 ;; Defined at:
 13136 ;;		line 640 in file "../src/Dimmer_B1.c"
 13137 ;; Parameters:    Size  Location     Type
 13138 ;;  lights          1    wreg     unsigned char 
 13139 ;;  status          1   75[BANK0 ] unsigned char 
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;  lights          1   77[BANK0 ] unsigned char 
 13142 ;; Return value:  Size  Location     Type
 13143 ;;		None               void
 13144 ;; Registers used:
 13145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13151 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;Total ram usage:        3 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    8
 13158 ;; This function calls:
 13159 ;;		_setBuz
 13160 ;;		_setDimmerLights_Line
 13161 ;;		_setPercentValue
 13162 ;;		_setProductData
 13163 ;;		_setRF_DimmerLights
 13164 ;;		_setTxData
 13165 ;; This function is called by:
 13166 ;;		_setDimmerLights_Main
 13167 ;; This function uses a non-reentrant model
 13168 ;;
 13169                           
 13170                           
 13171                           ;psect for function _setDimmerLights_Adj
 13172  163E                     _setDimmerLights_Adj:	
 13173                           
 13174                           ;incstack = 0
 13175                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13176                           ;setDimmerLights_Adj@lights stored from wreg
 13177  163E  0020               	movlb	0	; select bank0
 13178  163F  00ED               	movwf	setDimmerLights_Adj@lights
 13179                           
 13180                           ;Dimmer_B1.c: 642: if (status == 1) {
 13181  1640  086B               	movf	setDimmerLights_Adj@status,w
 13182  1641  3A01               	xorlw	1
 13183  1642  1D03               	skipz
 13184  1643  2E56               	goto	l9635
 13185                           
 13186                           ;Dimmer_B1.c: 643: DimmerLights->AdjSw = 1;
 13187  1644  0A6F               	incf	_DimmerLights,w
 13188  1645  0086               	movwf	6
 13189  1646  3001               	movlw	1	; select bank2/3
 13190  1647  0087               	movwf	7
 13191  1648  1701               	bsf	1,6
 13192                           
 13193                           ;Dimmer_B1.c: 644: DimmerLights->Signal = 1;
 13194  1649  0A6F               	incf	_DimmerLights,w
 13195  164A  0086               	movwf	6
 13196  164B  3001               	movlw	1	; select bank2/3
 13197  164C  0087               	movwf	7
 13198  164D  1681               	bsf	1,5
 13199                           
 13200                           ;Dimmer_B1.c: 645: setBuz(1, 100);
 13201  164E  3064               	movlw	100
 13202  164F  00A9               	movwf	setBuz@time
 13203  1650  3000               	movlw	0
 13204  1651  00AA               	movwf	setBuz@time+1
 13205  1652  3001               	movlw	1
 13206  1653  3196  2696         	fcall	_setBuz
 13207                           
 13208                           ;Dimmer_B1.c: 646: } else if (status == 0) {
 13209  1655  0008               	return
 13210  1656                     l9635:	
 13211  1656  0020               	movlb	0	; select bank0
 13212  1657  08EB               	movf	setDimmerLights_Adj@status,f
 13213  1658  1D03               	skipz
 13214  1659  0008               	return
 13215                           
 13216                           ;Dimmer_B1.c: 647: Dimmer.Load_Status = 0;
 13217  165A  0021               	movlb	1	; select bank1
 13218  165B  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13219                           
 13220                           ;Dimmer_B1.c: 648: setDimmerLights_Line(lights);
 13221  165C  0020               	movlb	0	; select bank0
 13222  165D  086D               	movf	setDimmerLights_Adj@lights,w
 13223  165E  319D  2500  3196   	fcall	_setDimmerLights_Line
 13224                           
 13225                           ;Dimmer_B1.c: 649: DimmerLights->AdjSw = 0;
 13226  1661  0020               	movlb	0	; select bank0
 13227  1662  0A6F               	incf	_DimmerLights,w
 13228  1663  0086               	movwf	6
 13229  1664  3001               	movlw	1	; select bank2/3
 13230  1665  0087               	movwf	7
 13231  1666  1301               	bcf	1,6
 13232                           
 13233                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 0;
 13234  1667  0A6F               	incf	_DimmerLights,w
 13235  1668  0086               	movwf	6
 13236  1669  3001               	movlw	1	; select bank2/3
 13237  166A  0087               	movwf	7
 13238  166B  1281               	bcf	1,5
 13239                           
 13240                           ;Dimmer_B1.c: 652: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 13241  166C  086F               	movf	_DimmerLights,w
 13242  166D  3E04               	addlw	4
 13243  166E  0086               	movwf	6
 13244  166F  3001               	movlw	1	; select bank2/3
 13245  1670  0087               	movwf	7
 13246  1671  0801               	movf	1,w
 13247  1672  00EC               	movwf	??_setDimmerLights_Adj
 13248  1673  086F               	movf	_DimmerLights,w
 13249  1674  3E06               	addlw	6
 13250  1675  0086               	movwf	6
 13251  1676  3001               	movlw	1	; select bank2/3
 13252  1677  0087               	movwf	7
 13253  1678  086C               	movf	??_setDimmerLights_Adj,w
 13254  1679  0081               	movwf	1
 13255                           
 13256                           ;Dimmer_B1.c: 653: setProductData((20 + lights), setPercentValue(DimmerLights->DimmingVa
      +                          lue));
 13257  167A  086F               	movf	_DimmerLights,w
 13258  167B  3E04               	addlw	4
 13259  167C  0086               	movwf	6
 13260  167D  3001               	movlw	1	; select bank2/3
 13261  167E  0087               	movwf	7
 13262  167F  0801               	movf	1,w
 13263  1680  3189  21B9  3196   	fcall	_setPercentValue
 13264  1683  0020               	movlb	0	; select bank0
 13265  1684  00EC               	movwf	??_setDimmerLights_Adj
 13266  1685  086C               	movf	??_setDimmerLights_Adj,w
 13267  1686  00E2               	movwf	setProductData@value
 13268  1687  086D               	movf	setDimmerLights_Adj@lights,w
 13269  1688  3E14               	addlw	20
 13270  1689  319B  2324  3196   	fcall	_setProductData
 13271                           
 13272                           ;Dimmer_B1.c: 668: setRF_DimmerLights(lights, 1);
 13273  168C  0020               	movlb	0	; select bank0
 13274  168D  01E6               	clrf	setRF_DimmerLights@on
 13275  168E  0AE6               	incf	setRF_DimmerLights@on,f
 13276  168F  086D               	movf	setDimmerLights_Adj@lights,w
 13277  1690  3196  26EF  3196   	fcall	_setRF_DimmerLights
 13278                           
 13279                           ;Dimmer_B1.c: 669: setTxData();
 13280  1693  318C  247D         	fcall	_setTxData
 13281  1695  0008               	return
 13282  1696                     __end_of_setDimmerLights_Adj:	
 13283                           
 13284                           	psect	text77
 13285  14F2                     __ptext77:	
 13286 ;; *************** function _setDimmerLights *****************
 13287 ;; Defined at:
 13288 ;;		line 602 in file "../src/Dimmer_B1.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;  lights          1    wreg     unsigned char 
 13291 ;;  status          1   75[BANK0 ] unsigned char 
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;  lights          1   77[BANK0 ] unsigned char 
 13294 ;; Return value:  Size  Location     Type
 13295 ;;		None               void
 13296 ;; Registers used:
 13297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13304 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13306 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13307 ;;Total ram usage:        3 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:    8
 13310 ;; This function calls:
 13311 ;;		_setDimmerLights_Line
 13312 ;;		_setLED
 13313 ;;		_setPercentValue
 13314 ;;		_setProductData
 13315 ;;		_setRF_DimmerLights
 13316 ;;		_setTxData
 13317 ;; This function is called by:
 13318 ;;		_setDimmerLights_Main
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           
 13323                           ;psect for function _setDimmerLights
 13324  14F2                     _setDimmerLights:	
 13325                           
 13326                           ;incstack = 0
 13327                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13328                           ;setDimmerLights@lights stored from wreg
 13329  14F2  0020               	movlb	0	; select bank0
 13330  14F3  00ED               	movwf	setDimmerLights@lights
 13331                           
 13332                           ;Dimmer_B1.c: 610: if (status == 1) {
 13333  14F4  086B               	movf	setDimmerLights@status,w
 13334  14F5  3A01               	xorlw	1
 13335  14F6  1D03               	skipz
 13336  14F7  2D22               	goto	l9615
 13337                           
 13338                           ;Dimmer_B1.c: 611: DimmerLights->StatusFlag = 1;
 13339  14F8  0A6F               	incf	_DimmerLights,w
 13340  14F9  0086               	movwf	6
 13341  14FA  3001               	movlw	1	; select bank2/3
 13342  14FB  0087               	movwf	7
 13343  14FC  1501               	bsf	1,2
 13344                           
 13345                           ;Dimmer_B1.c: 612: Dimmer.Load_Status = 1;
 13346  14FD  0021               	movlb	1	; select bank1
 13347  14FE  15C6               	bsf	_Dimmer^(0+128),3	;volatile
 13348                           
 13349                           ;Dimmer_B1.c: 613: setDimmerLights_Line(lights);
 13350  14FF  0020               	movlb	0	; select bank0
 13351  1500  086D               	movf	setDimmerLights@lights,w
 13352  1501  319D  2500  3194   	fcall	_setDimmerLights_Line
 13353                           
 13354                           ;Dimmer_B1.c: 615: setLED(lights, 0);
 13355  1504  0020               	movlb	0	; select bank0
 13356  1505  01A2               	clrf	setLED@command
 13357  1506  086D               	movf	setDimmerLights@lights,w
 13358  1507  3195  2597  3194   	fcall	_setLED
 13359                           
 13360                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = ((char)(75*0.8));
 13361  150A  303C               	movlw	60
 13362  150B  0020               	movlb	0	; select bank0
 13363  150C  00EC               	movwf	??_setDimmerLights
 13364  150D  086F               	movf	_DimmerLights,w
 13365  150E  3E04               	addlw	4
 13366  150F  0086               	movwf	6
 13367  1510  3001               	movlw	1	; select bank2/3
 13368  1511  0087               	movwf	7
 13369  1512  086C               	movf	??_setDimmerLights,w
 13370  1513  0081               	movwf	1
 13371                           
 13372                           ;Dimmer_B1.c: 622: setProductData((20 + lights), setPercentValue(((char)(75*0.8))));
 13373  1514  303C               	movlw	60
 13374  1515  3189  21B9  3194   	fcall	_setPercentValue
 13375  1518  0020               	movlb	0	; select bank0
 13376  1519  00EC               	movwf	??_setDimmerLights
 13377  151A  086C               	movf	??_setDimmerLights,w
 13378  151B  00E2               	movwf	setProductData@value
 13379  151C  086D               	movf	setDimmerLights@lights,w
 13380  151D  3E14               	addlw	20
 13381  151E  319B  2324  3194   	fcall	_setProductData
 13382                           
 13383                           ;Dimmer_B1.c: 624: } else if (status == 0) {
 13384  1521  2D38               	goto	l9625
 13385  1522                     l9615:	
 13386  1522  0020               	movlb	0	; select bank0
 13387  1523  08EB               	movf	setDimmerLights@status,f
 13388  1524  1D03               	skipz
 13389  1525  2D38               	goto	l9625
 13390                           
 13391                           ;Dimmer_B1.c: 625: DimmerLights->StatusFlag = 0;
 13392  1526  0A6F               	incf	_DimmerLights,w
 13393  1527  0086               	movwf	6
 13394  1528  3001               	movlw	1	; select bank2/3
 13395  1529  0087               	movwf	7
 13396  152A  1101               	bcf	1,2
 13397                           
 13398                           ;Dimmer_B1.c: 626: Dimmer.Load_Status = 0;
 13399  152B  0021               	movlb	1	; select bank1
 13400  152C  11C6               	bcf	_Dimmer^(0+128),3	;volatile
 13401                           
 13402                           ;Dimmer_B1.c: 627: setDimmerLights_Line(0);
 13403  152D  3000               	movlw	0
 13404  152E  319D  2500  3194   	fcall	_setDimmerLights_Line
 13405                           
 13406                           ;Dimmer_B1.c: 629: setLED(lights, 1);
 13407  1531  0020               	movlb	0	; select bank0
 13408  1532  01A2               	clrf	setLED@command
 13409  1533  0AA2               	incf	setLED@command,f
 13410  1534  086D               	movf	setDimmerLights@lights,w
 13411  1535  3195  2597  3194   	fcall	_setLED
 13412  1538                     l9625:	
 13413                           
 13414                           ;Dimmer_B1.c: 631: }
 13415                           ;Dimmer_B1.c: 634: setRF_DimmerLights(lights, status);
 13416  1538  0020               	movlb	0	; select bank0
 13417  1539  086B               	movf	setDimmerLights@status,w
 13418  153A  00EC               	movwf	??_setDimmerLights
 13419  153B  086C               	movf	??_setDimmerLights,w
 13420  153C  00E6               	movwf	setRF_DimmerLights@on
 13421  153D  086D               	movf	setDimmerLights@lights,w
 13422  153E  3196  26EF  3194   	fcall	_setRF_DimmerLights
 13423                           
 13424                           ;Dimmer_B1.c: 635: setTxData();
 13425  1541  318C  247D         	fcall	_setTxData
 13426  1543  0008               	return
 13427  1544                     __end_of_setDimmerLights:	
 13428                           
 13429                           	psect	text78
 13430  0C7D                     __ptext78:	
 13431 ;; *************** function _setTxData *****************
 13432 ;; Defined at:
 13433 ;;		line 207 in file "../src/RF_Control_B1.c"
 13434 ;; Parameters:    Size  Location     Type
 13435 ;;		None
 13436 ;; Auto vars:     Size  Location     Type
 13437 ;;  i               1    0        unsigned char 
 13438 ;; Return value:  Size  Location     Type
 13439 ;;		None               void
 13440 ;; Registers used:
 13441 ;;		wreg, fsr1l, fsr1h
 13442 ;; Tracked objects:
 13443 ;;		On entry : 0/0
 13444 ;;		On exit  : 0/0
 13445 ;;		Unchanged: 0/0
 13446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13451 ;;Total ram usage:        1 bytes
 13452 ;; Hardware stack levels used:    1
 13453 ;; Hardware stack levels required when called:    5
 13454 ;; This function calls:
 13455 ;;		Nothing
 13456 ;; This function is called by:
 13457 ;;		_setDimmerLights
 13458 ;;		_setDimmerLights_Adj
 13459 ;;		_my_MainTimer
 13460 ;;		_getRxData
 13461 ;;		_setControl_Lights_Table
 13462 ;;		_setRFSW_Control
 13463 ;;		_setRFSW_AdjControl
 13464 ;; This function uses a non-reentrant model
 13465 ;;
 13466                           
 13467                           
 13468                           ;psect for function _setTxData
 13469  0C7D                     _setTxData:	
 13470                           
 13471                           ;RF_Control_B1.c: 208: char i;
 13472                           ;RF_Control_B1.c: 209: if (RF1.Enable == 1) {
 13473                           
 13474                           ;incstack = 0
 13475                           ; Regs used in _setTxData: [wregfsr1]
 13476  0C7D  0021               	movlb	1	; select bank1
 13477  0C7E  1C3A               	btfss	_RF1^(0+128),0
 13478  0C7F  0008               	return
 13479                           
 13480                           ;RF_Control_B1.c: 211: if (RF1.TransceiveGO == 0) {
 13481  0C80  193A               	btfsc	_RF1^(0+128),2
 13482  0C81  0008               	return
 13483                           
 13484                           ;RF_Control_B1.c: 212: RF1.TransceiveGO = 1;
 13485  0C82  153A               	bsf	_RF1^(0+128),2
 13486                           
 13487                           ;RF_Control_B1.c: 213: RF1.RunTime = 20;
 13488  0C83  3014               	movlw	20
 13489  0C84  00C1               	movwf	(_RF1^(0+128)+7)
 13490  0C85  3000               	movlw	0
 13491  0C86  00C2               	movwf	(_RF1^(0+128)+8)
 13492                           
 13493                           ;RF_Control_B1.c: 225: RF_Data[0] = 0x63;
 13494  0C87  3063               	movlw	99
 13495  0C88  0020               	movlb	0	; select bank0
 13496  0C89  00A0               	movwf	??_setTxData
 13497  0C8A  0820               	movf	??_setTxData,w
 13498  0C8B  0023               	movlb	3	; select bank3
 13499  0C8C  00A0               	movwf	_RF_Data^(0+384)
 13500                           
 13501                           ;RF_Control_B1.c: 226: RF_Data[1] = 0x02;
 13502  0C8D  3002               	movlw	2
 13503  0C8E  0020               	movlb	0	; select bank0
 13504  0C8F  00A0               	movwf	??_setTxData
 13505  0C90  0820               	movf	??_setTxData,w
 13506  0C91  0023               	movlb	3	; select bank3
 13507  0C92  00A1               	movwf	(_RF_Data^(0+384)+1)
 13508                           
 13509                           ;RF_Control_B1.c: 228: RF_Data[2] = product->Data[2];
 13510  0C93  0879               	movf	_product,w
 13511  0C94  0086               	movwf	6
 13512  0C95  3002               	movlw	2	; select bank4/5
 13513  0C96  0087               	movwf	7
 13514  0C97  3002               	movlw	2	; select bank4/5
 13515  0C98  3F42               	moviw [2]fsr1
 13516  0C99  00A2               	movwf	(_RF_Data^(0+384)+2)
 13517                           
 13518                           ;RF_Control_B1.c: 229: RF_Data[3] = product->Data[3];
 13519  0C9A  0879               	movf	_product,w
 13520  0C9B  0086               	movwf	6
 13521  0C9C  3002               	movlw	2	; select bank4/5
 13522  0C9D  0087               	movwf	7
 13523  0C9E  3002               	movlw	2	; select bank4/5
 13524  0C9F  3F43               	moviw [3]fsr1
 13525  0CA0  00A3               	movwf	(_RF_Data^(0+384)+3)
 13526                           
 13527                           ;RF_Control_B1.c: 230: RF_Data[4] = product->Data[4];
 13528  0CA1  0879               	movf	_product,w
 13529  0CA2  0086               	movwf	6
 13530  0CA3  3002               	movlw	2	; select bank4/5
 13531  0CA4  0087               	movwf	7
 13532  0CA5  3002               	movlw	2	; select bank4/5
 13533  0CA6  3F44               	moviw [4]fsr1
 13534  0CA7  00A4               	movwf	(_RF_Data^(0+384)+4)
 13535                           
 13536                           ;RF_Control_B1.c: 231: RF_Data[5] = product->Data[5];
 13537  0CA8  0879               	movf	_product,w
 13538  0CA9  0086               	movwf	6
 13539  0CAA  3002               	movlw	2	; select bank4/5
 13540  0CAB  0087               	movwf	7
 13541  0CAC  3002               	movlw	2	; select bank4/5
 13542  0CAD  3F45               	moviw [5]fsr1
 13543  0CAE  00A5               	movwf	(_RF_Data^(0+384)+5)
 13544                           
 13545                           ;RF_Control_B1.c: 232: RF_Data[6] = product->Data[6];
 13546  0CAF  0879               	movf	_product,w
 13547  0CB0  0086               	movwf	6
 13548  0CB1  3002               	movlw	2	; select bank4/5
 13549  0CB2  0087               	movwf	7
 13550  0CB3  3002               	movlw	2	; select bank4/5
 13551  0CB4  3F46               	moviw [6]fsr1
 13552  0CB5  00A6               	movwf	(_RF_Data^(0+384)+6)
 13553                           
 13554                           ;RF_Control_B1.c: 233: RF_Data[7] = product->Data[7];
 13555  0CB6  0879               	movf	_product,w
 13556  0CB7  0086               	movwf	6
 13557  0CB8  3002               	movlw	2	; select bank4/5
 13558  0CB9  0087               	movwf	7
 13559  0CBA  3002               	movlw	2	; select bank4/5
 13560  0CBB  3F47               	moviw [7]fsr1
 13561  0CBC  00A7               	movwf	(_RF_Data^(0+384)+7)
 13562                           
 13563                           ;RF_Control_B1.c: 234: RF_Data[8] = product->Data[8];
 13564  0CBD  0879               	movf	_product,w
 13565  0CBE  0086               	movwf	6
 13566  0CBF  3002               	movlw	2	; select bank4/5
 13567  0CC0  0087               	movwf	7
 13568  0CC1  3002               	movlw	2	; select bank4/5
 13569  0CC2  3F48               	moviw [8]fsr1
 13570  0CC3  00A8               	movwf	(_RF_Data^(0+384)+8)
 13571                           
 13572                           ;RF_Control_B1.c: 235: RF_Data[9] = product->Data[9];
 13573  0CC4  0879               	movf	_product,w
 13574  0CC5  0086               	movwf	6
 13575  0CC6  3002               	movlw	2	; select bank4/5
 13576  0CC7  0087               	movwf	7
 13577  0CC8  3002               	movlw	2	; select bank4/5
 13578  0CC9  3F49               	moviw [9]fsr1
 13579  0CCA  00A9               	movwf	(_RF_Data^(0+384)+9)
 13580                           
 13581                           ;RF_Control_B1.c: 236: RF_Data[10] = product->Data[10];
 13582  0CCB  0879               	movf	_product,w
 13583  0CCC  0086               	movwf	6
 13584  0CCD  3002               	movlw	2	; select bank4/5
 13585  0CCE  0087               	movwf	7
 13586  0CCF  3002               	movlw	2	; select bank4/5
 13587  0CD0  3F4A               	moviw [10]fsr1
 13588  0CD1  00AA               	movwf	(_RF_Data^(0+384)+10)
 13589                           
 13590                           ;RF_Control_B1.c: 237: RF_Data[11] = product->Data[11];
 13591  0CD2  0879               	movf	_product,w
 13592  0CD3  0086               	movwf	6
 13593  0CD4  3002               	movlw	2	; select bank4/5
 13594  0CD5  0087               	movwf	7
 13595  0CD6  3002               	movlw	2	; select bank4/5
 13596  0CD7  3F4B               	moviw [11]fsr1
 13597  0CD8  00AB               	movwf	(_RF_Data^(0+384)+11)
 13598                           
 13599                           ;RF_Control_B1.c: 238: RF_Data[12] = product->Data[12];
 13600  0CD9  0879               	movf	_product,w
 13601  0CDA  0086               	movwf	6
 13602  0CDB  3002               	movlw	2	; select bank4/5
 13603  0CDC  0087               	movwf	7
 13604  0CDD  3002               	movlw	2	; select bank4/5
 13605  0CDE  3F4C               	moviw [12]fsr1
 13606  0CDF  00AC               	movwf	(_RF_Data^(0+384)+12)
 13607                           
 13608                           ;RF_Control_B1.c: 239: RF_Data[13] = product->Data[13];
 13609  0CE0  0879               	movf	_product,w
 13610  0CE1  0086               	movwf	6
 13611  0CE2  3002               	movlw	2	; select bank4/5
 13612  0CE3  0087               	movwf	7
 13613  0CE4  3002               	movlw	2	; select bank4/5
 13614  0CE5  3F4D               	moviw [13]fsr1
 13615  0CE6  00AD               	movwf	(_RF_Data^(0+384)+13)
 13616                           
 13617                           ;RF_Control_B1.c: 240: RF_Data[14] = product->Data[14];
 13618  0CE7  0879               	movf	_product,w
 13619  0CE8  0086               	movwf	6
 13620  0CE9  3002               	movlw	2	; select bank4/5
 13621  0CEA  0087               	movwf	7
 13622  0CEB  3002               	movlw	2	; select bank4/5
 13623  0CEC  3F4E               	moviw [14]fsr1
 13624  0CED  00AE               	movwf	(_RF_Data^(0+384)+14)
 13625                           
 13626                           ;RF_Control_B1.c: 241: RF_Data[15] = product->Data[15];
 13627  0CEE  0879               	movf	_product,w
 13628  0CEF  0086               	movwf	6
 13629  0CF0  3002               	movlw	2	; select bank4/5
 13630  0CF1  0087               	movwf	7
 13631  0CF2  3002               	movlw	2	; select bank4/5
 13632  0CF3  3F4F               	moviw [15]fsr1
 13633  0CF4  00AF               	movwf	(_RF_Data^(0+384)+15)
 13634                           
 13635                           ;RF_Control_B1.c: 242: RF_Data[16] = product->Data[16];
 13636  0CF5  0879               	movf	_product,w
 13637  0CF6  0086               	movwf	6
 13638  0CF7  3002               	movlw	2	; select bank4/5
 13639  0CF8  0087               	movwf	7
 13640  0CF9  3002               	movlw	2	; select bank4/5
 13641  0CFA  3F50               	moviw [16]fsr1
 13642  0CFB  00B0               	movwf	(_RF_Data^(0+384)+16)
 13643                           
 13644                           ;RF_Control_B1.c: 243: RF_Data[17] = product->Data[17];
 13645  0CFC  0879               	movf	_product,w
 13646  0CFD  0086               	movwf	6
 13647  0CFE  3002               	movlw	2	; select bank4/5
 13648  0CFF  0087               	movwf	7
 13649  0D00  3002               	movlw	2	; select bank4/5
 13650  0D01  3F51               	moviw [17]fsr1
 13651  0D02  00B1               	movwf	(_RF_Data^(0+384)+17)
 13652                           
 13653                           ;RF_Control_B1.c: 244: RF_Data[18] = product->Data[18];
 13654  0D03  0879               	movf	_product,w
 13655  0D04  0086               	movwf	6
 13656  0D05  3002               	movlw	2	; select bank4/5
 13657  0D06  0087               	movwf	7
 13658  0D07  3002               	movlw	2	; select bank4/5
 13659  0D08  3F52               	moviw [18]fsr1
 13660  0D09  00B2               	movwf	(_RF_Data^(0+384)+18)
 13661                           
 13662                           ;RF_Control_B1.c: 245: RF_Data[19] = product->Data[19];
 13663  0D0A  0879               	movf	_product,w
 13664  0D0B  0086               	movwf	6
 13665  0D0C  3002               	movlw	2	; select bank4/5
 13666  0D0D  0087               	movwf	7
 13667  0D0E  3002               	movlw	2	; select bank4/5
 13668  0D0F  3F53               	moviw [19]fsr1
 13669  0D10  00B3               	movwf	(_RF_Data^(0+384)+19)
 13670                           
 13671                           ;RF_Control_B1.c: 246: RF_Data[20] = 210;
 13672  0D11  30D2               	movlw	210
 13673  0D12  0020               	movlb	0	; select bank0
 13674  0D13  00A0               	movwf	??_setTxData
 13675  0D14  0820               	movf	??_setTxData,w
 13676  0D15  0023               	movlb	3	; select bank3
 13677  0D16  00B4               	movwf	(_RF_Data^(0+384)+20)
 13678  0D17  0008               	return
 13679  0D18                     __end_of_setTxData:	
 13680                           
 13681                           	psect	text79
 13682  16EF                     __ptext79:	
 13683 ;; *************** function _setRF_DimmerLights *****************
 13684 ;; Defined at:
 13685 ;;		line 484 in file "../src/RF_Control_B1.c"
 13686 ;; Parameters:    Size  Location     Type
 13687 ;;  lights          1    wreg     unsigned char 
 13688 ;;  on              1   70[BANK0 ] unsigned char 
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;  lights          1   74[BANK0 ] unsigned char 
 13691 ;;  status          1   73[BANK0 ] unsigned char 
 13692 ;; Return value:  Size  Location     Type
 13693 ;;		None               void
 13694 ;; Registers used:
 13695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13696 ;; Tracked objects:
 13697 ;;		On entry : 0/0
 13698 ;;		On exit  : 0/0
 13699 ;;		Unchanged: 0/0
 13700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13701 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13704 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13705 ;;Total ram usage:        5 bytes
 13706 ;; Hardware stack levels used:    1
 13707 ;; Hardware stack levels required when called:    6
 13708 ;; This function calls:
 13709 ;;		_setProductData
 13710 ;; This function is called by:
 13711 ;;		_setDimmerLights
 13712 ;;		_setDimmerLights_Adj
 13713 ;;		_setRFSW_Control
 13714 ;; This function uses a non-reentrant model
 13715 ;;
 13716                           
 13717                           
 13718                           ;psect for function _setRF_DimmerLights
 13719  16EF                     _setRF_DimmerLights:	
 13720                           
 13721                           ;incstack = 0
 13722                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13723                           ;setRF_DimmerLights@lights stored from wreg
 13724  16EF  0020               	movlb	0	; select bank0
 13725  16F0  00EA               	movwf	setRF_DimmerLights@lights
 13726                           
 13727                           ;RF_Control_B1.c: 485: char status = 1;
 13728  16F1  01E9               	clrf	setRF_DimmerLights@status
 13729  16F2  0AE9               	incf	setRF_DimmerLights@status,f
 13730                           
 13731                           ;RF_Control_B1.c: 486: status <<= (lights - 1);
 13732  16F3  086A               	movf	setRF_DimmerLights@lights,w
 13733  16F4  3EFF               	addlw	-1
 13734  16F5  0A89               	incf	9,f
 13735  16F6  2EF9               	goto	u9910
 13736  16F7                     u9915:	
 13737  16F7  1003               	clrc
 13738  16F8  0DE9               	rlf	setRF_DimmerLights@status,f
 13739  16F9                     u9910:	
 13740  16F9  3EFF               	addlw	-1
 13741  16FA  1D03               	skipz
 13742  16FB  2EF7               	goto	u9915
 13743                           
 13744                           ;RF_Control_B1.c: 487: setProductData(11, lights);
 13745  16FC  086A               	movf	setRF_DimmerLights@lights,w
 13746  16FD  00E7               	movwf	??_setRF_DimmerLights
 13747  16FE  0867               	movf	??_setRF_DimmerLights,w
 13748  16FF  00E2               	movwf	setProductData@value
 13749  1700  300B               	movlw	11
 13750  1701  319B  2324  3196   	fcall	_setProductData
 13751                           
 13752                           ;RF_Control_B1.c: 495: setProductData(9, product->Data[20 + lights]);
 13753  1704  0020               	movlb	0	; select bank0
 13754  1705  086A               	movf	setRF_DimmerLights@lights,w
 13755  1706  3E14               	addlw	20
 13756  1707  0779               	addwf	_product,w
 13757  1708  00E7               	movwf	??_setRF_DimmerLights
 13758  1709  0867               	movf	??_setRF_DimmerLights,w
 13759  170A  0086               	movwf	6
 13760  170B  3002               	movlw	2	; select bank4/5
 13761  170C  0087               	movwf	7
 13762  170D  0801               	movf	1,w
 13763  170E  00E8               	movwf	??_setRF_DimmerLights+1
 13764  170F  0868               	movf	??_setRF_DimmerLights+1,w
 13765  1710  00E2               	movwf	setProductData@value
 13766  1711  3009               	movlw	9
 13767  1712  319B  2324  3196   	fcall	_setProductData
 13768                           
 13769                           ;RF_Control_B1.c: 496: setProductData(17, product->Data[26 + lights]);
 13770  1715  0020               	movlb	0	; select bank0
 13771  1716  086A               	movf	setRF_DimmerLights@lights,w
 13772  1717  3E1A               	addlw	26
 13773  1718  0779               	addwf	_product,w
 13774  1719  00E7               	movwf	??_setRF_DimmerLights
 13775  171A  0867               	movf	??_setRF_DimmerLights,w
 13776  171B  0086               	movwf	6
 13777  171C  3002               	movlw	2	; select bank4/5
 13778  171D  0087               	movwf	7
 13779  171E  0801               	movf	1,w
 13780  171F  00E8               	movwf	??_setRF_DimmerLights+1
 13781  1720  0868               	movf	??_setRF_DimmerLights+1,w
 13782  1721  00E2               	movwf	setProductData@value
 13783  1722  3011               	movlw	17
 13784  1723  319B  2324  3196   	fcall	_setProductData
 13785                           
 13786                           ;RF_Control_B1.c: 497: if (on == 1) {
 13787  1726  0020               	movlb	0	; select bank0
 13788  1727  0866               	movf	setRF_DimmerLights@on,w
 13789  1728  3A01               	xorlw	1
 13790  1729  1D03               	skipz
 13791  172A  2F39               	goto	l9135
 13792                           
 13793                           ;RF_Control_B1.c: 498: setProductData(15, (product->Data[15] | status));
 13794  172B  0879               	movf	_product,w
 13795  172C  3E0F               	addlw	15
 13796  172D  0086               	movwf	6
 13797  172E  3002               	movlw	2	; select bank4/5
 13798  172F  0087               	movwf	7
 13799  1730  0801               	movf	1,w
 13800  1731  0469               	iorwf	setRF_DimmerLights@status,w
 13801  1732  00E7               	movwf	??_setRF_DimmerLights
 13802  1733  0867               	movf	??_setRF_DimmerLights,w
 13803  1734  00E2               	movwf	setProductData@value
 13804  1735  300F               	movlw	15
 13805  1736  319B  2324         	fcall	_setProductData
 13806                           
 13807                           ;RF_Control_B1.c: 499: } else {
 13808  1738  0008               	return
 13809  1739                     l9135:	
 13810                           
 13811                           ;RF_Control_B1.c: 500: setProductData(15, (product->Data[15]&(~status)));
 13812  1739  0879               	movf	_product,w
 13813  173A  3E0F               	addlw	15
 13814  173B  0086               	movwf	6
 13815  173C  3002               	movlw	2	; select bank4/5
 13816  173D  0087               	movwf	7
 13817  173E  0020               	movlb	0	; select bank0
 13818  173F  0969               	comf	setRF_DimmerLights@status,w
 13819  1740  0501               	andwf	1,w
 13820  1741  00E7               	movwf	??_setRF_DimmerLights
 13821  1742  0867               	movf	??_setRF_DimmerLights,w
 13822  1743  00E2               	movwf	setProductData@value
 13823  1744  300F               	movlw	15
 13824  1745  319B  2324         	fcall	_setProductData
 13825  1747  0008               	return
 13826  1748                     __end_of_setRF_DimmerLights:	
 13827                           
 13828                           	psect	text80
 13829  09B9                     __ptext80:	
 13830 ;; *************** function _setPercentValue *****************
 13831 ;; Defined at:
 13832 ;;		line 1002 in file "../src/Dimmer_B1.c"
 13833 ;; Parameters:    Size  Location     Type
 13834 ;;  value           1    wreg     unsigned char 
 13835 ;; Auto vars:     Size  Location     Type
 13836 ;;  value           1   62[BANK0 ] unsigned char 
 13837 ;;  i               3   63[BANK0 ] float 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  1    wreg      unsigned char 
 13840 ;; Registers used:
 13841 ;;		wreg, status,2, status,0, pclath, cstack
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;Total ram usage:        6 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; Hardware stack levels required when called:    7
 13854 ;; This function calls:
 13855 ;;		___awtoft
 13856 ;;		___ftadd
 13857 ;;		___ftdiv
 13858 ;;		___ftneg
 13859 ;;		___fttol
 13860 ;; This function is called by:
 13861 ;;		_setDimmerLights
 13862 ;;		_setDimmerLights_Adj
 13863 ;;		_Flash_Memory_Initialization
 13864 ;; This function uses a non-reentrant model
 13865 ;;
 13866                           
 13867                           
 13868                           ;psect for function _setPercentValue
 13869  09B9                     _setPercentValue:	
 13870                           
 13871                           ;incstack = 0
 13872                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13873                           ;setPercentValue@value stored from wreg
 13874  09B9  0020               	movlb	0	; select bank0
 13875  09BA  00DE               	movwf	setPercentValue@value
 13876                           
 13877                           ;Dimmer_B1.c: 1010: float i = ((char)(75*0.8)) - ((char)(15*0.8));
 13878  09BB  3000               	movlw	0
 13879  09BC  00DF               	movwf	setPercentValue@i
 13880  09BD  3040               	movlw	64
 13881  09BE  00E0               	movwf	setPercentValue@i+1
 13882  09BF  3042               	movlw	66
 13883  09C0  00E1               	movwf	setPercentValue@i+2
 13884                           
 13885                           ;Dimmer_B1.c: 1011: i /= 100;
 13886  09C1  3000               	movlw	0
 13887  09C2  00AE               	movwf	___ftdiv@f2
 13888  09C3  30C8               	movlw	200
 13889  09C4  00AF               	movwf	___ftdiv@f2+1
 13890  09C5  3042               	movlw	66
 13891  09C6  00B0               	movwf	___ftdiv@f2+2
 13892  09C7  085F               	movf	setPercentValue@i,w
 13893  09C8  00B1               	movwf	___ftdiv@f1
 13894  09C9  0860               	movf	setPercentValue@i+1,w
 13895  09CA  00B2               	movwf	___ftdiv@f1+1
 13896  09CB  0861               	movf	setPercentValue@i+2,w
 13897  09CC  00B3               	movwf	___ftdiv@f1+2
 13898  09CD  318D  2518  3189   	fcall	___ftdiv
 13899  09D0  0020               	movlb	0	; select bank0
 13900  09D1  082E               	movf	?___ftdiv,w
 13901  09D2  00DF               	movwf	setPercentValue@i
 13902  09D3  082F               	movf	?___ftdiv+1,w
 13903  09D4  00E0               	movwf	setPercentValue@i+1
 13904  09D5  0830               	movf	?___ftdiv+2,w
 13905  09D6  00E1               	movwf	setPercentValue@i+2
 13906                           
 13907                           ;Dimmer_B1.c: 1013: return (char) (100 - ((((char)(75*0.8)) - value) / i));
 13908  09D7  085E               	movf	setPercentValue@value,w
 13909  09D8  00DC               	movwf	??_setPercentValue
 13910  09D9  01DD               	clrf	??_setPercentValue+1
 13911  09DA  09DC               	comf	??_setPercentValue,f
 13912  09DB  09DD               	comf	??_setPercentValue+1,f
 13913  09DC  0ADC               	incf	??_setPercentValue,f
 13914  09DD  1903               	skipnz
 13915  09DE  0ADD               	incf	??_setPercentValue+1,f
 13916  09DF  085C               	movf	??_setPercentValue,w
 13917  09E0  3E3C               	addlw	60
 13918  09E1  00A8               	movwf	___awtoft@c
 13919  09E2  3000               	movlw	0
 13920  09E3  3D5D               	addwfc	??_setPercentValue+1,w
 13921  09E4  00A9               	movwf	___awtoft@c+1
 13922  09E5  319E  2673  3189   	fcall	___awtoft
 13923  09E8  0020               	movlb	0	; select bank0
 13924  09E9  0828               	movf	?___awtoft,w
 13925  09EA  00B1               	movwf	___ftdiv@f1
 13926  09EB  0829               	movf	?___awtoft+1,w
 13927  09EC  00B2               	movwf	___ftdiv@f1+1
 13928  09ED  082A               	movf	?___awtoft+2,w
 13929  09EE  00B3               	movwf	___ftdiv@f1+2
 13930  09EF  085F               	movf	setPercentValue@i,w
 13931  09F0  00AE               	movwf	___ftdiv@f2
 13932  09F1  0860               	movf	setPercentValue@i+1,w
 13933  09F2  00AF               	movwf	___ftdiv@f2+1
 13934  09F3  0861               	movf	setPercentValue@i+2,w
 13935  09F4  00B0               	movwf	___ftdiv@f2+2
 13936  09F5  318D  2518  3189   	fcall	___ftdiv
 13937  09F8  0020               	movlb	0	; select bank0
 13938  09F9  082E               	movf	?___ftdiv,w
 13939  09FA  00BE               	movwf	___ftneg@f1
 13940  09FB  082F               	movf	?___ftdiv+1,w
 13941  09FC  00BF               	movwf	___ftneg@f1+1
 13942  09FD  0830               	movf	?___ftdiv+2,w
 13943  09FE  00C0               	movwf	___ftneg@f1+2
 13944  09FF  319A  228F  3189   	fcall	___ftneg
 13945  0A02  0020               	movlb	0	; select bank0
 13946  0A03  083E               	movf	?___ftneg,w
 13947  0A04  00C4               	movwf	___ftadd@f2
 13948  0A05  083F               	movf	?___ftneg+1,w
 13949  0A06  00C5               	movwf	___ftadd@f2+1
 13950  0A07  0840               	movf	?___ftneg+2,w
 13951  0A08  00C6               	movwf	___ftadd@f2+2
 13952  0A09  3000               	movlw	0
 13953  0A0A  00C1               	movwf	___ftadd@f1
 13954  0A0B  30C8               	movlw	200
 13955  0A0C  00C2               	movwf	___ftadd@f1+1
 13956  0A0D  3042               	movlw	66
 13957  0A0E  00C3               	movwf	___ftadd@f1+2
 13958  0A0F  3185  2501  3189   	fcall	___ftadd
 13959  0A12  0020               	movlb	0	; select bank0
 13960  0A13  0841               	movf	?___ftadd,w
 13961  0A14  00CE               	movwf	___fttol@f1
 13962  0A15  0842               	movf	?___ftadd+1,w
 13963  0A16  00CF               	movwf	___fttol@f1+1
 13964  0A17  0843               	movf	?___ftadd+2,w
 13965  0A18  00D0               	movwf	___fttol@f1+2
 13966  0A19  318B  236B         	fcall	___fttol
 13967  0A1B  0020               	movlb	0	; select bank0
 13968  0A1C  084E               	movf	?___fttol,w
 13969  0A1D  0008               	return
 13970  0A1E                     __end_of_setPercentValue:	
 13971                           
 13972                           	psect	text81
 13973  0B6B                     __ptext81:	
 13974 ;; *************** function ___fttol *****************
 13975 ;; Defined at:
 13976 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13977 ;; Parameters:    Size  Location     Type
 13978 ;;  f1              3   46[BANK0 ] float 
 13979 ;; Auto vars:     Size  Location     Type
 13980 ;;  lval            4   55[BANK0 ] unsigned long 
 13981 ;;  exp1            1   59[BANK0 ] unsigned char 
 13982 ;;  sign1           1   54[BANK0 ] unsigned char 
 13983 ;; Return value:  Size  Location     Type
 13984 ;;                  4   46[BANK0 ] long 
 13985 ;; Registers used:
 13986 ;;		wreg, status,2, status,0
 13987 ;; Tracked objects:
 13988 ;;		On entry : 0/0
 13989 ;;		On exit  : 0/0
 13990 ;;		Unchanged: 0/0
 13991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13992 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;Total ram usage:       14 bytes
 13997 ;; Hardware stack levels used:    1
 13998 ;; Hardware stack levels required when called:    5
 13999 ;; This function calls:
 14000 ;;		Nothing
 14001 ;; This function is called by:
 14002 ;;		_getPercentValue
 14003 ;;		_setPercentValue
 14004 ;; This function uses a non-reentrant model
 14005 ;;
 14006                           
 14007                           
 14008                           ;psect for function ___fttol
 14009  0B6B                     ___fttol:	
 14010                           
 14011                           ;incstack = 0
 14012                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14013  0B6B  0020               	movlb	0	; select bank0
 14014  0B6C  084E               	movf	___fttol@f1,w
 14015  0B6D  00D2               	movwf	??___fttol
 14016  0B6E  084F               	movf	___fttol@f1+1,w
 14017  0B6F  00D3               	movwf	??___fttol+1
 14018  0B70  0850               	movf	___fttol@f1+2,w
 14019  0B71  00D4               	movwf	??___fttol+2
 14020  0B72  1003               	clrc
 14021  0B73  0D53               	rlf	??___fttol+1,w
 14022  0B74  0D54               	rlf	??___fttol+2,w
 14023  0B75  00D5               	movwf	??___fttol+3
 14024  0B76  0855               	movf	??___fttol+3,w
 14025  0B77  00DB               	movwf	___fttol@exp1
 14026  0B78  08DB               	movf	___fttol@exp1,f
 14027  0B79  1D03               	skipz
 14028  0B7A  2B84               	goto	l8823
 14029  0B7B  3000               	movlw	0
 14030  0B7C  00D1               	movwf	?___fttol+3
 14031  0B7D  3000               	movlw	0
 14032  0B7E  00D0               	movwf	?___fttol+2
 14033  0B7F  3000               	movlw	0
 14034  0B80  00CF               	movwf	?___fttol+1
 14035  0B81  3000               	movlw	0
 14036  0B82  00CE               	movwf	?___fttol
 14037  0B83  0008               	return
 14038  0B84                     l8823:	
 14039  0B84  084E               	movf	___fttol@f1,w
 14040  0B85  00D2               	movwf	??___fttol
 14041  0B86  084F               	movf	___fttol@f1+1,w
 14042  0B87  00D3               	movwf	??___fttol+1
 14043  0B88  0850               	movf	___fttol@f1+2,w
 14044  0B89  00D4               	movwf	??___fttol+2
 14045  0B8A  3017               	movlw	23
 14046  0B8B                     u9345:	
 14047  0B8B  36D4               	lsrf	??___fttol+2,f
 14048  0B8C  0CD3               	rrf	??___fttol+1,f
 14049  0B8D  0CD2               	rrf	??___fttol,f
 14050  0B8E  0B89               	decfsz	9,f
 14051  0B8F  2B8B               	goto	u9345
 14052  0B90  0852               	movf	??___fttol,w
 14053  0B91  00D5               	movwf	??___fttol+3
 14054  0B92  0855               	movf	??___fttol+3,w
 14055  0B93  00D6               	movwf	___fttol@sign1
 14056  0B94  17CF               	bsf	___fttol@f1+1,7
 14057  0B95  30FF               	movlw	255
 14058  0B96  05CE               	andwf	___fttol@f1,f
 14059  0B97  30FF               	movlw	255
 14060  0B98  05CF               	andwf	___fttol@f1+1,f
 14061  0B99  3000               	movlw	0
 14062  0B9A  05D0               	andwf	___fttol@f1+2,f
 14063  0B9B  084E               	movf	___fttol@f1,w
 14064  0B9C  00D7               	movwf	___fttol@lval
 14065  0B9D  084F               	movf	___fttol@f1+1,w
 14066  0B9E  00D8               	movwf	___fttol@lval+1
 14067  0B9F  0850               	movf	___fttol@f1+2,w
 14068  0BA0  00D9               	movwf	___fttol@lval+2
 14069  0BA1  01DA               	clrf	___fttol@lval+3
 14070  0BA2  308E               	movlw	142
 14071  0BA3  02DB               	subwf	___fttol@exp1,f
 14072  0BA4  1FDB               	btfss	___fttol@exp1,7
 14073  0BA5  2BC2               	goto	l8843
 14074  0BA6  085B               	movf	___fttol@exp1,w
 14075  0BA7  3A80               	xorlw	128
 14076  0BA8  3E8F               	addlw	143
 14077  0BA9  1803               	skipnc
 14078  0BAA  2BB4               	goto	l8841
 14079  0BAB  3000               	movlw	0
 14080  0BAC  00D1               	movwf	?___fttol+3
 14081  0BAD  3000               	movlw	0
 14082  0BAE  00D0               	movwf	?___fttol+2
 14083  0BAF  3000               	movlw	0
 14084  0BB0  00CF               	movwf	?___fttol+1
 14085  0BB1  3000               	movlw	0
 14086  0BB2  00CE               	movwf	?___fttol
 14087  0BB3  0008               	return
 14088  0BB4                     l8841:	
 14089  0BB4  3001               	movlw	1
 14090  0BB5                     u9375:	
 14091  0BB5  36DA               	lsrf	___fttol@lval+3,f
 14092  0BB6  0CD9               	rrf	___fttol@lval+2,f
 14093  0BB7  0CD8               	rrf	___fttol@lval+1,f
 14094  0BB8  0CD7               	rrf	___fttol@lval,f
 14095  0BB9  0B89               	decfsz	9,f
 14096  0BBA  2BB5               	goto	u9375
 14097  0BBB  3001               	movlw	1
 14098  0BBC  00D2               	movwf	??___fttol
 14099  0BBD  0852               	movf	??___fttol,w
 14100  0BBE  07DB               	addwf	___fttol@exp1,f
 14101  0BBF  1903               	btfsc	3,2
 14102  0BC0  2BDB               	goto	l8853
 14103  0BC1  2BB4               	goto	l8841
 14104  0BC2                     l8843:	
 14105  0BC2  3018               	movlw	24
 14106  0BC3  025B               	subwf	___fttol@exp1,w
 14107  0BC4  1C03               	skipc
 14108  0BC5  2BD8               	goto	l8851
 14109  0BC6  3000               	movlw	0
 14110  0BC7  00D1               	movwf	?___fttol+3
 14111  0BC8  3000               	movlw	0
 14112  0BC9  00D0               	movwf	?___fttol+2
 14113  0BCA  3000               	movlw	0
 14114  0BCB  00CF               	movwf	?___fttol+1
 14115  0BCC  3000               	movlw	0
 14116  0BCD  00CE               	movwf	?___fttol
 14117  0BCE  0008               	return
 14118  0BCF                     l8849:	
 14119  0BCF  3001               	movlw	1
 14120  0BD0                     u9405:	
 14121  0BD0  35D7               	lslf	___fttol@lval,f
 14122  0BD1  0DD8               	rlf	___fttol@lval+1,f
 14123  0BD2  0DD9               	rlf	___fttol@lval+2,f
 14124  0BD3  0DDA               	rlf	___fttol@lval+3,f
 14125  0BD4  0B89               	decfsz	9,f
 14126  0BD5  2BD0               	goto	u9405
 14127  0BD6  3001               	movlw	1
 14128  0BD7  02DB               	subwf	___fttol@exp1,f
 14129  0BD8                     l8851:	
 14130  0BD8  08DB               	movf	___fttol@exp1,f
 14131  0BD9  1D03               	skipz
 14132  0BDA  2BCF               	goto	l8849
 14133  0BDB                     l8853:	
 14134  0BDB  0856               	movf	___fttol@sign1,w
 14135  0BDC  1903               	btfsc	3,2
 14136  0BDD  2BE9               	goto	l8857
 14137  0BDE  09D7               	comf	___fttol@lval,f
 14138  0BDF  09D8               	comf	___fttol@lval+1,f
 14139  0BE0  09D9               	comf	___fttol@lval+2,f
 14140  0BE1  09DA               	comf	___fttol@lval+3,f
 14141  0BE2  0AD7               	incf	___fttol@lval,f
 14142  0BE3  1903               	skipnz
 14143  0BE4  0AD8               	incf	___fttol@lval+1,f
 14144  0BE5  1903               	skipnz
 14145  0BE6  0AD9               	incf	___fttol@lval+2,f
 14146  0BE7  1903               	skipnz
 14147  0BE8  0ADA               	incf	___fttol@lval+3,f
 14148  0BE9                     l8857:	
 14149  0BE9  085A               	movf	___fttol@lval+3,w
 14150  0BEA  00D1               	movwf	?___fttol+3
 14151  0BEB  0859               	movf	___fttol@lval+2,w
 14152  0BEC  00D0               	movwf	?___fttol+2
 14153  0BED  0858               	movf	___fttol@lval+1,w
 14154  0BEE  00CF               	movwf	?___fttol+1
 14155  0BEF  0857               	movf	___fttol@lval,w
 14156  0BF0  00CE               	movwf	?___fttol
 14157  0BF1  0008               	return
 14158  0BF2                     __end_of___fttol:	
 14159                           
 14160                           	psect	text82
 14161  1A8F                     __ptext82:	
 14162 ;; *************** function ___ftneg *****************
 14163 ;; Defined at:
 14164 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 14165 ;; Parameters:    Size  Location     Type
 14166 ;;  f1              3   30[BANK0 ] float 
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;		None
 14169 ;; Return value:  Size  Location     Type
 14170 ;;                  3   30[BANK0 ] float 
 14171 ;; Registers used:
 14172 ;;		wreg
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14178 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;Total ram usage:        3 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    5
 14185 ;; This function calls:
 14186 ;;		Nothing
 14187 ;; This function is called by:
 14188 ;;		_getPercentValue
 14189 ;;		_setPercentValue
 14190 ;; This function uses a non-reentrant model
 14191 ;;
 14192                           
 14193                           
 14194                           ;psect for function ___ftneg
 14195  1A8F                     ___ftneg:	
 14196                           
 14197                           ;incstack = 0
 14198                           ; Regs used in ___ftneg: [wreg]
 14199  1A8F  0020               	movlb	0	; select bank0
 14200  1A90  0840               	movf	___ftneg@f1+2,w
 14201  1A91  043F               	iorwf	___ftneg@f1+1,w
 14202  1A92  043E               	iorwf	___ftneg@f1,w
 14203  1A93  1903               	skipnz
 14204  1A94  0008               	return
 14205  1A95  3080               	movlw	128
 14206  1A96  06C0               	xorwf	___ftneg@f1+2,f
 14207  1A97  0008               	return
 14208  1A98                     __end_of___ftneg:	
 14209                           
 14210                           	psect	text83
 14211  0D18                     __ptext83:	
 14212 ;; *************** function ___ftdiv *****************
 14213 ;; Defined at:
 14214 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14215 ;; Parameters:    Size  Location     Type
 14216 ;;  f2              3   14[BANK0 ] float 
 14217 ;;  f1              3   17[BANK0 ] float 
 14218 ;; Auto vars:     Size  Location     Type
 14219 ;;  f3              3   25[BANK0 ] float 
 14220 ;;  sign            1   29[BANK0 ] unsigned char 
 14221 ;;  exp             1   28[BANK0 ] unsigned char 
 14222 ;;  cntr            1   24[BANK0 ] unsigned char 
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  3   14[BANK0 ] float 
 14225 ;; Registers used:
 14226 ;;		wreg, status,2, status,0, pclath, cstack
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14232 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14236 ;;Total ram usage:       16 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    6
 14239 ;; This function calls:
 14240 ;;		___ftpack
 14241 ;; This function is called by:
 14242 ;;		_getPercentValue
 14243 ;;		_setPercentValue
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           
 14248                           ;psect for function ___ftdiv
 14249  0D18                     ___ftdiv:	
 14250                           
 14251                           ;incstack = 0
 14252                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14253  0D18  0020               	movlb	0	; select bank0
 14254  0D19  0831               	movf	___ftdiv@f1,w
 14255  0D1A  00B4               	movwf	??___ftdiv
 14256  0D1B  0832               	movf	___ftdiv@f1+1,w
 14257  0D1C  00B5               	movwf	??___ftdiv+1
 14258  0D1D  0833               	movf	___ftdiv@f1+2,w
 14259  0D1E  00B6               	movwf	??___ftdiv+2
 14260  0D1F  1003               	clrc
 14261  0D20  0D35               	rlf	??___ftdiv+1,w
 14262  0D21  0D36               	rlf	??___ftdiv+2,w
 14263  0D22  00B7               	movwf	??___ftdiv+3
 14264  0D23  0837               	movf	??___ftdiv+3,w
 14265  0D24  00BC               	movwf	___ftdiv@exp
 14266  0D25  08BC               	movf	___ftdiv@exp,f
 14267  0D26  1D03               	skipz
 14268  0D27  2D2F               	goto	l8723
 14269  0D28  3000               	movlw	0
 14270  0D29  00AE               	movwf	?___ftdiv
 14271  0D2A  3000               	movlw	0
 14272  0D2B  00AF               	movwf	?___ftdiv+1
 14273  0D2C  3000               	movlw	0
 14274  0D2D  00B0               	movwf	?___ftdiv+2
 14275  0D2E  0008               	return
 14276  0D2F                     l8723:	
 14277  0D2F  082E               	movf	___ftdiv@f2,w
 14278  0D30  00B4               	movwf	??___ftdiv
 14279  0D31  082F               	movf	___ftdiv@f2+1,w
 14280  0D32  00B5               	movwf	??___ftdiv+1
 14281  0D33  0830               	movf	___ftdiv@f2+2,w
 14282  0D34  00B6               	movwf	??___ftdiv+2
 14283  0D35  1003               	clrc
 14284  0D36  0D35               	rlf	??___ftdiv+1,w
 14285  0D37  0D36               	rlf	??___ftdiv+2,w
 14286  0D38  00B7               	movwf	??___ftdiv+3
 14287  0D39  0837               	movf	??___ftdiv+3,w
 14288  0D3A  00BD               	movwf	___ftdiv@sign
 14289  0D3B  08BD               	movf	___ftdiv@sign,f
 14290  0D3C  1D03               	skipz
 14291  0D3D  2D45               	goto	l8729
 14292  0D3E  3000               	movlw	0
 14293  0D3F  00AE               	movwf	?___ftdiv
 14294  0D40  3000               	movlw	0
 14295  0D41  00AF               	movwf	?___ftdiv+1
 14296  0D42  3000               	movlw	0
 14297  0D43  00B0               	movwf	?___ftdiv+2
 14298  0D44  0008               	return
 14299  0D45                     l8729:	
 14300  0D45  3000               	movlw	0
 14301  0D46  00B9               	movwf	___ftdiv@f3
 14302  0D47  3000               	movlw	0
 14303  0D48  00BA               	movwf	___ftdiv@f3+1
 14304  0D49  3000               	movlw	0
 14305  0D4A  00BB               	movwf	___ftdiv@f3+2
 14306  0D4B  3089               	movlw	137
 14307  0D4C  073D               	addwf	___ftdiv@sign,w
 14308  0D4D  00B4               	movwf	??___ftdiv
 14309  0D4E  0834               	movf	??___ftdiv,w
 14310  0D4F  02BC               	subwf	___ftdiv@exp,f
 14311  0D50  0831               	movf	___ftdiv@f1,w
 14312  0D51  00B4               	movwf	??___ftdiv
 14313  0D52  0832               	movf	___ftdiv@f1+1,w
 14314  0D53  00B5               	movwf	??___ftdiv+1
 14315  0D54  0833               	movf	___ftdiv@f1+2,w
 14316  0D55  00B6               	movwf	??___ftdiv+2
 14317  0D56  3010               	movlw	16
 14318  0D57                     u9145:	
 14319  0D57  36B6               	lsrf	??___ftdiv+2,f
 14320  0D58  0CB5               	rrf	??___ftdiv+1,f
 14321  0D59  0CB4               	rrf	??___ftdiv,f
 14322  0D5A  0B89               	decfsz	9,f
 14323  0D5B  2D57               	goto	u9145
 14324  0D5C  0834               	movf	??___ftdiv,w
 14325  0D5D  00B7               	movwf	??___ftdiv+3
 14326  0D5E  0837               	movf	??___ftdiv+3,w
 14327  0D5F  00BD               	movwf	___ftdiv@sign
 14328  0D60  082E               	movf	___ftdiv@f2,w
 14329  0D61  00B4               	movwf	??___ftdiv
 14330  0D62  082F               	movf	___ftdiv@f2+1,w
 14331  0D63  00B5               	movwf	??___ftdiv+1
 14332  0D64  0830               	movf	___ftdiv@f2+2,w
 14333  0D65  00B6               	movwf	??___ftdiv+2
 14334  0D66  3010               	movlw	16
 14335  0D67                     u9155:	
 14336  0D67  36B6               	lsrf	??___ftdiv+2,f
 14337  0D68  0CB5               	rrf	??___ftdiv+1,f
 14338  0D69  0CB4               	rrf	??___ftdiv,f
 14339  0D6A  0B89               	decfsz	9,f
 14340  0D6B  2D67               	goto	u9155
 14341  0D6C  0834               	movf	??___ftdiv,w
 14342  0D6D  00B7               	movwf	??___ftdiv+3
 14343  0D6E  0837               	movf	??___ftdiv+3,w
 14344  0D6F  06BD               	xorwf	___ftdiv@sign,f
 14345  0D70  3080               	movlw	128
 14346  0D71  00B4               	movwf	??___ftdiv
 14347  0D72  0834               	movf	??___ftdiv,w
 14348  0D73  05BD               	andwf	___ftdiv@sign,f
 14349  0D74  17B2               	bsf	___ftdiv@f1+1,7
 14350  0D75  30FF               	movlw	255
 14351  0D76  05B1               	andwf	___ftdiv@f1,f
 14352  0D77  30FF               	movlw	255
 14353  0D78  05B2               	andwf	___ftdiv@f1+1,f
 14354  0D79  3000               	movlw	0
 14355  0D7A  05B3               	andwf	___ftdiv@f1+2,f
 14356  0D7B  17AF               	bsf	___ftdiv@f2+1,7
 14357  0D7C  30FF               	movlw	255
 14358  0D7D  05AE               	andwf	___ftdiv@f2,f
 14359  0D7E  30FF               	movlw	255
 14360  0D7F  05AF               	andwf	___ftdiv@f2+1,f
 14361  0D80  3000               	movlw	0
 14362  0D81  05B0               	andwf	___ftdiv@f2+2,f
 14363  0D82  3018               	movlw	24
 14364  0D83  00B4               	movwf	??___ftdiv
 14365  0D84  0834               	movf	??___ftdiv,w
 14366  0D85  00B8               	movwf	___ftdiv@cntr
 14367  0D86                     l8743:	
 14368  0D86  3001               	movlw	1
 14369  0D87                     u9165:	
 14370  0D87  35B9               	lslf	___ftdiv@f3,f
 14371  0D88  0DBA               	rlf	___ftdiv@f3+1,f
 14372  0D89  0DBB               	rlf	___ftdiv@f3+2,f
 14373  0D8A  0B89               	decfsz	9,f
 14374  0D8B  2D87               	goto	u9165
 14375  0D8C  0830               	movf	___ftdiv@f2+2,w
 14376  0D8D  0233               	subwf	___ftdiv@f1+2,w
 14377  0D8E  1D03               	skipz
 14378  0D8F  2D96               	goto	u9175
 14379  0D90  082F               	movf	___ftdiv@f2+1,w
 14380  0D91  0232               	subwf	___ftdiv@f1+1,w
 14381  0D92  1D03               	skipz
 14382  0D93  2D96               	goto	u9175
 14383  0D94  082E               	movf	___ftdiv@f2,w
 14384  0D95  0231               	subwf	___ftdiv@f1,w
 14385  0D96                     u9175:	
 14386  0D96  1C03               	skipc
 14387  0D97  2D9F               	goto	l8751
 14388  0D98  082E               	movf	___ftdiv@f2,w
 14389  0D99  02B1               	subwf	___ftdiv@f1,f
 14390  0D9A  082F               	movf	___ftdiv@f2+1,w
 14391  0D9B  3BB2               	subwfb	___ftdiv@f1+1,f
 14392  0D9C  0830               	movf	___ftdiv@f2+2,w
 14393  0D9D  3BB3               	subwfb	___ftdiv@f1+2,f
 14394  0D9E  1439               	bsf	___ftdiv@f3,0
 14395  0D9F                     l8751:	
 14396  0D9F  3001               	movlw	1
 14397  0DA0                     u9185:	
 14398  0DA0  35B1               	lslf	___ftdiv@f1,f
 14399  0DA1  0DB2               	rlf	___ftdiv@f1+1,f
 14400  0DA2  0DB3               	rlf	___ftdiv@f1+2,f
 14401  0DA3  0B89               	decfsz	9,f
 14402  0DA4  2DA0               	goto	u9185
 14403  0DA5  3001               	movlw	1
 14404  0DA6  02B8               	subwf	___ftdiv@cntr,f
 14405  0DA7  1D03               	btfss	3,2
 14406  0DA8  2D86               	goto	l8743
 14407  0DA9  0839               	movf	___ftdiv@f3,w
 14408  0DAA  00A0               	movwf	___ftpack@arg
 14409  0DAB  083A               	movf	___ftdiv@f3+1,w
 14410  0DAC  00A1               	movwf	___ftpack@arg+1
 14411  0DAD  083B               	movf	___ftdiv@f3+2,w
 14412  0DAE  00A2               	movwf	___ftpack@arg+2
 14413  0DAF  083C               	movf	___ftdiv@exp,w
 14414  0DB0  00B4               	movwf	??___ftdiv
 14415  0DB1  0834               	movf	??___ftdiv,w
 14416  0DB2  00A3               	movwf	___ftpack@exp
 14417  0DB3  083D               	movf	___ftdiv@sign,w
 14418  0DB4  00B5               	movwf	??___ftdiv+1
 14419  0DB5  0835               	movf	??___ftdiv+1,w
 14420  0DB6  00A4               	movwf	___ftpack@sign
 14421  0DB7  3188  2092         	fcall	___ftpack
 14422  0DB9  0020               	movlb	0	; select bank0
 14423  0DBA  0820               	movf	?___ftpack,w
 14424  0DBB  00AE               	movwf	?___ftdiv
 14425  0DBC  0821               	movf	?___ftpack+1,w
 14426  0DBD  00AF               	movwf	?___ftdiv+1
 14427  0DBE  0822               	movf	?___ftpack+2,w
 14428  0DBF  00B0               	movwf	?___ftdiv+2
 14429  0DC0  0008               	return
 14430  0DC1                     __end_of___ftdiv:	
 14431                           
 14432                           	psect	text84
 14433  0501                     __ptext84:	
 14434 ;; *************** function ___ftadd *****************
 14435 ;; Defined at:
 14436 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;  f1              3   33[BANK0 ] float 
 14439 ;;  f2              3   36[BANK0 ] float 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;  exp1            1   45[BANK0 ] unsigned char 
 14442 ;;  exp2            1   44[BANK0 ] unsigned char 
 14443 ;;  sign            1   43[BANK0 ] unsigned char 
 14444 ;; Return value:  Size  Location     Type
 14445 ;;                  3   33[BANK0 ] float 
 14446 ;; Registers used:
 14447 ;;		wreg, status,2, status,0, pclath, cstack
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14453 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;Total ram usage:       13 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; Hardware stack levels required when called:    6
 14460 ;; This function calls:
 14461 ;;		___ftpack
 14462 ;; This function is called by:
 14463 ;;		_getPercentValue
 14464 ;;		_setPercentValue
 14465 ;; This function uses a non-reentrant model
 14466 ;;
 14467                           
 14468                           
 14469                           ;psect for function ___ftadd
 14470  0501                     ___ftadd:	
 14471                           
 14472                           ;incstack = 0
 14473                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14474  0501  0020               	movlb	0	; select bank0
 14475  0502  0841               	movf	___ftadd@f1,w
 14476  0503  00C7               	movwf	??___ftadd
 14477  0504  0842               	movf	___ftadd@f1+1,w
 14478  0505  00C8               	movwf	??___ftadd+1
 14479  0506  0843               	movf	___ftadd@f1+2,w
 14480  0507  00C9               	movwf	??___ftadd+2
 14481  0508  1003               	clrc
 14482  0509  0D48               	rlf	??___ftadd+1,w
 14483  050A  0D49               	rlf	??___ftadd+2,w
 14484  050B  00CA               	movwf	??___ftadd+3
 14485  050C  084A               	movf	??___ftadd+3,w
 14486  050D  00CD               	movwf	___ftadd@exp1
 14487  050E  0844               	movf	___ftadd@f2,w
 14488  050F  00C7               	movwf	??___ftadd
 14489  0510  0845               	movf	___ftadd@f2+1,w
 14490  0511  00C8               	movwf	??___ftadd+1
 14491  0512  0846               	movf	___ftadd@f2+2,w
 14492  0513  00C9               	movwf	??___ftadd+2
 14493  0514  1003               	clrc
 14494  0515  0D48               	rlf	??___ftadd+1,w
 14495  0516  0D49               	rlf	??___ftadd+2,w
 14496  0517  00CA               	movwf	??___ftadd+3
 14497  0518  084A               	movf	??___ftadd+3,w
 14498  0519  00CC               	movwf	___ftadd@exp2
 14499  051A  084D               	movf	___ftadd@exp1,w
 14500  051B  1903               	btfsc	3,2
 14501  051C  2D29               	goto	l8653
 14502  051D  084C               	movf	___ftadd@exp2,w
 14503  051E  024D               	subwf	___ftadd@exp1,w
 14504  051F  1803               	skipnc
 14505  0520  2D30               	goto	l8657
 14506  0521  034D               	decf	___ftadd@exp1,w
 14507  0522  3AFF               	xorlw	255
 14508  0523  074C               	addwf	___ftadd@exp2,w
 14509  0524  00C7               	movwf	??___ftadd
 14510  0525  3019               	movlw	25
 14511  0526  0247               	subwf	??___ftadd,w
 14512  0527  1C03               	skipc
 14513  0528  2D30               	goto	l8657
 14514  0529                     l8653:	
 14515  0529  0844               	movf	___ftadd@f2,w
 14516  052A  00C1               	movwf	?___ftadd
 14517  052B  0845               	movf	___ftadd@f2+1,w
 14518  052C  00C2               	movwf	?___ftadd+1
 14519  052D  0846               	movf	___ftadd@f2+2,w
 14520  052E  00C3               	movwf	?___ftadd+2
 14521  052F  0008               	return
 14522  0530                     l8657:	
 14523  0530  084C               	movf	___ftadd@exp2,w
 14524  0531  1903               	btfsc	3,2
 14525  0532  0008               	return
 14526  0533  084D               	movf	___ftadd@exp1,w
 14527  0534  024C               	subwf	___ftadd@exp2,w
 14528  0535  1803               	skipnc
 14529  0536  2D3F               	goto	l8663
 14530  0537  034C               	decf	___ftadd@exp2,w
 14531  0538  3AFF               	xorlw	255
 14532  0539  074D               	addwf	___ftadd@exp1,w
 14533  053A  00C7               	movwf	??___ftadd
 14534  053B  3019               	movlw	25
 14535  053C  0247               	subwf	??___ftadd,w
 14536  053D  1803               	btfsc	3,0
 14537  053E  0008               	return
 14538  053F                     l8663:	
 14539  053F  3006               	movlw	6
 14540  0540  00C7               	movwf	??___ftadd
 14541  0541  0847               	movf	??___ftadd,w
 14542  0542  00CB               	movwf	___ftadd@sign
 14543  0543  1BC3               	btfsc	___ftadd@f1+2,7
 14544  0544  17CB               	bsf	___ftadd@sign,7
 14545  0545  1BC6               	btfsc	___ftadd@f2+2,7
 14546  0546  174B               	bsf	___ftadd@sign,6
 14547  0547  17C2               	bsf	___ftadd@f1+1,7
 14548  0548  30FF               	movlw	255
 14549  0549  05C1               	andwf	___ftadd@f1,f
 14550  054A  30FF               	movlw	255
 14551  054B  05C2               	andwf	___ftadd@f1+1,f
 14552  054C  3000               	movlw	0
 14553  054D  05C3               	andwf	___ftadd@f1+2,f
 14554  054E  17C5               	bsf	___ftadd@f2+1,7
 14555  054F  30FF               	movlw	255
 14556  0550  05C4               	andwf	___ftadd@f2,f
 14557  0551  30FF               	movlw	255
 14558  0552  05C5               	andwf	___ftadd@f2+1,f
 14559  0553  3000               	movlw	0
 14560  0554  05C6               	andwf	___ftadd@f2+2,f
 14561  0555  084C               	movf	___ftadd@exp2,w
 14562  0556  024D               	subwf	___ftadd@exp1,w
 14563  0557  1803               	skipnc
 14564  0558  2D7B               	goto	l8685
 14565  0559                     l8675:	
 14566  0559  3001               	movlw	1
 14567  055A                     u8985:	
 14568  055A  35C4               	lslf	___ftadd@f2,f
 14569  055B  0DC5               	rlf	___ftadd@f2+1,f
 14570  055C  0DC6               	rlf	___ftadd@f2+2,f
 14571  055D  0B89               	decfsz	9,f
 14572  055E  2D5A               	goto	u8985
 14573  055F  3001               	movlw	1
 14574  0560  02CC               	subwf	___ftadd@exp2,f
 14575  0561  084C               	movf	___ftadd@exp2,w
 14576  0562  064D               	xorwf	___ftadd@exp1,w
 14577  0563  1903               	skipnz
 14578  0564  2D76               	goto	l8683
 14579  0565  3001               	movlw	1
 14580  0566  02CB               	subwf	___ftadd@sign,f
 14581  0567  084B               	movf	___ftadd@sign,w
 14582  0568  3907               	andlw	7
 14583  0569  1903               	btfsc	3,2
 14584  056A  2D76               	goto	l8683
 14585  056B  2D59               	goto	l8675
 14586  056C                     l8681:	
 14587  056C  3001               	movlw	1
 14588  056D                     u9015:	
 14589  056D  36C3               	lsrf	___ftadd@f1+2,f
 14590  056E  0CC2               	rrf	___ftadd@f1+1,f
 14591  056F  0CC1               	rrf	___ftadd@f1,f
 14592  0570  0B89               	decfsz	9,f
 14593  0571  2D6D               	goto	u9015
 14594  0572  3001               	movlw	1
 14595  0573  00C7               	movwf	??___ftadd
 14596  0574  0847               	movf	??___ftadd,w
 14597  0575  07CD               	addwf	___ftadd@exp1,f
 14598  0576                     l8683:	
 14599  0576  084D               	movf	___ftadd@exp1,w
 14600  0577  064C               	xorwf	___ftadd@exp2,w
 14601  0578  1903               	btfsc	3,2
 14602  0579  2DA0               	goto	l3054
 14603  057A  2D6C               	goto	l8681
 14604  057B                     l8685:	
 14605  057B  084D               	movf	___ftadd@exp1,w
 14606  057C  024C               	subwf	___ftadd@exp2,w
 14607  057D  1803               	skipnc
 14608  057E  2DA0               	goto	l3054
 14609  057F                     l8687:	
 14610  057F  3001               	movlw	1
 14611  0580                     u9045:	
 14612  0580  35C1               	lslf	___ftadd@f1,f
 14613  0581  0DC2               	rlf	___ftadd@f1+1,f
 14614  0582  0DC3               	rlf	___ftadd@f1+2,f
 14615  0583  0B89               	decfsz	9,f
 14616  0584  2D80               	goto	u9045
 14617  0585  3001               	movlw	1
 14618  0586  02CD               	subwf	___ftadd@exp1,f
 14619  0587  084C               	movf	___ftadd@exp2,w
 14620  0588  064D               	xorwf	___ftadd@exp1,w
 14621  0589  1903               	skipnz
 14622  058A  2D9C               	goto	l8695
 14623  058B  3001               	movlw	1
 14624  058C  02CB               	subwf	___ftadd@sign,f
 14625  058D  084B               	movf	___ftadd@sign,w
 14626  058E  3907               	andlw	7
 14627  058F  1903               	btfsc	3,2
 14628  0590  2D9C               	goto	l8695
 14629  0591  2D7F               	goto	l8687
 14630  0592                     l8693:	
 14631  0592  3001               	movlw	1
 14632  0593                     u9075:	
 14633  0593  36C6               	lsrf	___ftadd@f2+2,f
 14634  0594  0CC5               	rrf	___ftadd@f2+1,f
 14635  0595  0CC4               	rrf	___ftadd@f2,f
 14636  0596  0B89               	decfsz	9,f
 14637  0597  2D93               	goto	u9075
 14638  0598  3001               	movlw	1
 14639  0599  00C7               	movwf	??___ftadd
 14640  059A  0847               	movf	??___ftadd,w
 14641  059B  07CC               	addwf	___ftadd@exp2,f
 14642  059C                     l8695:	
 14643  059C  084D               	movf	___ftadd@exp1,w
 14644  059D  064C               	xorwf	___ftadd@exp2,w
 14645  059E  1D03               	skipz
 14646  059F  2D92               	goto	l8693
 14647  05A0                     l3054:	
 14648  05A0  1FCB               	btfss	___ftadd@sign,7
 14649  05A1  2DB2               	goto	l8699
 14650  05A2  30FF               	movlw	255
 14651  05A3  06C1               	xorwf	___ftadd@f1,f
 14652  05A4  30FF               	movlw	255
 14653  05A5  06C2               	xorwf	___ftadd@f1+1,f
 14654  05A6  30FF               	movlw	255
 14655  05A7  06C3               	xorwf	___ftadd@f1+2,f
 14656  05A8  3001               	movlw	1
 14657  05A9  07C1               	addwf	___ftadd@f1,f
 14658  05AA  3000               	movlw	0
 14659  05AB  1803               	skipnc
 14660  05AC  3001               	movlw	1
 14661  05AD  07C2               	addwf	___ftadd@f1+1,f
 14662  05AE  3000               	movlw	0
 14663  05AF  1803               	skipnc
 14664  05B0  3001               	movlw	1
 14665  05B1  07C3               	addwf	___ftadd@f1+2,f
 14666  05B2                     l8699:	
 14667  05B2  1F4B               	btfss	___ftadd@sign,6
 14668  05B3  2DC4               	goto	l8703
 14669  05B4  30FF               	movlw	255
 14670  05B5  06C4               	xorwf	___ftadd@f2,f
 14671  05B6  30FF               	movlw	255
 14672  05B7  06C5               	xorwf	___ftadd@f2+1,f
 14673  05B8  30FF               	movlw	255
 14674  05B9  06C6               	xorwf	___ftadd@f2+2,f
 14675  05BA  3001               	movlw	1
 14676  05BB  07C4               	addwf	___ftadd@f2,f
 14677  05BC  3000               	movlw	0
 14678  05BD  1803               	skipnc
 14679  05BE  3001               	movlw	1
 14680  05BF  07C5               	addwf	___ftadd@f2+1,f
 14681  05C0  3000               	movlw	0
 14682  05C1  1803               	skipnc
 14683  05C2  3001               	movlw	1
 14684  05C3  07C6               	addwf	___ftadd@f2+2,f
 14685  05C4                     l8703:	
 14686  05C4  01CB               	clrf	___ftadd@sign
 14687  05C5  0841               	movf	___ftadd@f1,w
 14688  05C6  07C4               	addwf	___ftadd@f2,f
 14689  05C7  0842               	movf	___ftadd@f1+1,w
 14690  05C8  3DC5               	addwfc	___ftadd@f2+1,f
 14691  05C9  0843               	movf	___ftadd@f1+2,w
 14692  05CA  3DC6               	addwfc	___ftadd@f2+2,f
 14693  05CB  1FC6               	btfss	___ftadd@f2+2,7
 14694  05CC  2DDF               	goto	l8713
 14695  05CD  30FF               	movlw	255
 14696  05CE  06C4               	xorwf	___ftadd@f2,f
 14697  05CF  30FF               	movlw	255
 14698  05D0  06C5               	xorwf	___ftadd@f2+1,f
 14699  05D1  30FF               	movlw	255
 14700  05D2  06C6               	xorwf	___ftadd@f2+2,f
 14701  05D3  3001               	movlw	1
 14702  05D4  07C4               	addwf	___ftadd@f2,f
 14703  05D5  3000               	movlw	0
 14704  05D6  1803               	skipnc
 14705  05D7  3001               	movlw	1
 14706  05D8  07C5               	addwf	___ftadd@f2+1,f
 14707  05D9  3000               	movlw	0
 14708  05DA  1803               	skipnc
 14709  05DB  3001               	movlw	1
 14710  05DC  07C6               	addwf	___ftadd@f2+2,f
 14711  05DD  01CB               	clrf	___ftadd@sign
 14712  05DE  0ACB               	incf	___ftadd@sign,f
 14713  05DF                     l8713:	
 14714  05DF  0844               	movf	___ftadd@f2,w
 14715  05E0  00A0               	movwf	___ftpack@arg
 14716  05E1  0845               	movf	___ftadd@f2+1,w
 14717  05E2  00A1               	movwf	___ftpack@arg+1
 14718  05E3  0846               	movf	___ftadd@f2+2,w
 14719  05E4  00A2               	movwf	___ftpack@arg+2
 14720  05E5  084D               	movf	___ftadd@exp1,w
 14721  05E6  00C7               	movwf	??___ftadd
 14722  05E7  0847               	movf	??___ftadd,w
 14723  05E8  00A3               	movwf	___ftpack@exp
 14724  05E9  084B               	movf	___ftadd@sign,w
 14725  05EA  00C8               	movwf	??___ftadd+1
 14726  05EB  0848               	movf	??___ftadd+1,w
 14727  05EC  00A4               	movwf	___ftpack@sign
 14728  05ED  3188  2092         	fcall	___ftpack
 14729  05EF  0020               	movlb	0	; select bank0
 14730  05F0  0820               	movf	?___ftpack,w
 14731  05F1  00C1               	movwf	?___ftadd
 14732  05F2  0821               	movf	?___ftpack+1,w
 14733  05F3  00C2               	movwf	?___ftadd+1
 14734  05F4  0822               	movf	?___ftpack+2,w
 14735  05F5  00C3               	movwf	?___ftadd+2
 14736  05F6  0008               	return
 14737  05F7                     __end_of___ftadd:	
 14738                           
 14739                           	psect	text85
 14740  1E73                     __ptext85:	
 14741 ;; *************** function ___awtoft *****************
 14742 ;; Defined at:
 14743 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14744 ;; Parameters:    Size  Location     Type
 14745 ;;  c               2    8[BANK0 ] int 
 14746 ;; Auto vars:     Size  Location     Type
 14747 ;;  sign            1   13[BANK0 ] unsigned char 
 14748 ;; Return value:  Size  Location     Type
 14749 ;;                  3    8[BANK0 ] float 
 14750 ;; Registers used:
 14751 ;;		wreg, status,2, status,0, pclath, cstack
 14752 ;; Tracked objects:
 14753 ;;		On entry : 0/0
 14754 ;;		On exit  : 0/0
 14755 ;;		Unchanged: 0/0
 14756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14757 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14759 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14760 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14761 ;;Total ram usage:        6 bytes
 14762 ;; Hardware stack levels used:    1
 14763 ;; Hardware stack levels required when called:    6
 14764 ;; This function calls:
 14765 ;;		___ftpack
 14766 ;; This function is called by:
 14767 ;;		_getPercentValue
 14768 ;;		_setPercentValue
 14769 ;; This function uses a non-reentrant model
 14770 ;;
 14771                           
 14772                           
 14773                           ;psect for function ___awtoft
 14774  1E73                     ___awtoft:	
 14775                           
 14776                           ;incstack = 0
 14777                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14778  1E73  0020               	movlb	0	; select bank0
 14779  1E74  01AD               	clrf	___awtoft@sign
 14780  1E75  1FA9               	btfss	___awtoft@c+1,7
 14781  1E76  2E7E               	goto	l8641
 14782  1E77  09A8               	comf	___awtoft@c,f
 14783  1E78  09A9               	comf	___awtoft@c+1,f
 14784  1E79  0AA8               	incf	___awtoft@c,f
 14785  1E7A  1903               	skipnz
 14786  1E7B  0AA9               	incf	___awtoft@c+1,f
 14787  1E7C  01AD               	clrf	___awtoft@sign
 14788  1E7D  0AAD               	incf	___awtoft@sign,f
 14789  1E7E                     l8641:	
 14790  1E7E  0828               	movf	___awtoft@c,w
 14791  1E7F  00A0               	movwf	___ftpack@arg
 14792  1E80  0829               	movf	___awtoft@c+1,w
 14793  1E81  00A1               	movwf	___ftpack@arg+1
 14794  1E82  01A2               	clrf	___ftpack@arg+2
 14795  1E83  308E               	movlw	142
 14796  1E84  00AB               	movwf	??___awtoft
 14797  1E85  082B               	movf	??___awtoft,w
 14798  1E86  00A3               	movwf	___ftpack@exp
 14799  1E87  082D               	movf	___awtoft@sign,w
 14800  1E88  00AC               	movwf	??___awtoft+1
 14801  1E89  082C               	movf	??___awtoft+1,w
 14802  1E8A  00A4               	movwf	___ftpack@sign
 14803  1E8B  3188  2092         	fcall	___ftpack
 14804  1E8D  0020               	movlb	0	; select bank0
 14805  1E8E  0820               	movf	?___ftpack,w
 14806  1E8F  00A8               	movwf	?___awtoft
 14807  1E90  0821               	movf	?___ftpack+1,w
 14808  1E91  00A9               	movwf	?___awtoft+1
 14809  1E92  0822               	movf	?___ftpack+2,w
 14810  1E93  00AA               	movwf	?___awtoft+2
 14811  1E94  0008               	return
 14812  1E95                     __end_of___awtoft:	
 14813                           
 14814                           	psect	text86
 14815  0892                     __ptext86:	
 14816 ;; *************** function ___ftpack *****************
 14817 ;; Defined at:
 14818 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14819 ;; Parameters:    Size  Location     Type
 14820 ;;  arg             3    0[BANK0 ] unsigned um
 14821 ;;  exp             1    3[BANK0 ] unsigned char 
 14822 ;;  sign            1    4[BANK0 ] unsigned char 
 14823 ;; Auto vars:     Size  Location     Type
 14824 ;;		None
 14825 ;; Return value:  Size  Location     Type
 14826 ;;                  3    0[BANK0 ] float 
 14827 ;; Registers used:
 14828 ;;		wreg, status,2, status,0
 14829 ;; Tracked objects:
 14830 ;;		On entry : 0/0
 14831 ;;		On exit  : 0/0
 14832 ;;		Unchanged: 0/0
 14833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14834 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14836 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14837 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14838 ;;Total ram usage:        8 bytes
 14839 ;; Hardware stack levels used:    1
 14840 ;; Hardware stack levels required when called:    5
 14841 ;; This function calls:
 14842 ;;		Nothing
 14843 ;; This function is called by:
 14844 ;;		___awtoft
 14845 ;;		___ftadd
 14846 ;;		___ftdiv
 14847 ;;		___ftmul
 14848 ;; This function uses a non-reentrant model
 14849 ;;
 14850                           
 14851                           
 14852                           ;psect for function ___ftpack
 14853  0892                     ___ftpack:	
 14854                           
 14855                           ;incstack = 0
 14856                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14857  0892  0020               	movlb	0	; select bank0
 14858  0893  0823               	movf	___ftpack@exp,w
 14859  0894  1903               	btfsc	3,2
 14860  0895  289B               	goto	l8591
 14861  0896  0822               	movf	___ftpack@arg+2,w
 14862  0897  0421               	iorwf	___ftpack@arg+1,w
 14863  0898  0420               	iorwf	___ftpack@arg,w
 14864  0899  1D03               	skipz
 14865  089A  28AC               	goto	l8597
 14866  089B                     l8591:	
 14867  089B  3000               	movlw	0
 14868  089C  00A0               	movwf	?___ftpack
 14869  089D  3000               	movlw	0
 14870  089E  00A1               	movwf	?___ftpack+1
 14871  089F  3000               	movlw	0
 14872  08A0  00A2               	movwf	?___ftpack+2
 14873  08A1  0008               	return
 14874  08A2                     l8595:	
 14875  08A2  3001               	movlw	1
 14876  08A3  00A5               	movwf	??___ftpack
 14877  08A4  0825               	movf	??___ftpack,w
 14878  08A5  07A3               	addwf	___ftpack@exp,f
 14879  08A6  3001               	movlw	1
 14880  08A7                     u8775:	
 14881  08A7  36A2               	lsrf	___ftpack@arg+2,f
 14882  08A8  0CA1               	rrf	___ftpack@arg+1,f
 14883  08A9  0CA0               	rrf	___ftpack@arg,f
 14884  08AA  0B89               	decfsz	9,f
 14885  08AB  28A7               	goto	u8775
 14886  08AC                     l8597:	
 14887  08AC  30FE               	movlw	254
 14888  08AD  0522               	andwf	___ftpack@arg+2,w
 14889  08AE  1903               	btfsc	3,2
 14890  08AF  28C5               	goto	l3025
 14891  08B0  28A2               	goto	l8595
 14892  08B1                     l8599:	
 14893  08B1  3001               	movlw	1
 14894  08B2  00A5               	movwf	??___ftpack
 14895  08B3  0825               	movf	??___ftpack,w
 14896  08B4  07A3               	addwf	___ftpack@exp,f
 14897  08B5  3001               	movlw	1
 14898  08B6  07A0               	addwf	___ftpack@arg,f
 14899  08B7  3000               	movlw	0
 14900  08B8  1803               	skipnc
 14901  08B9  3001               	movlw	1
 14902  08BA  07A1               	addwf	___ftpack@arg+1,f
 14903  08BB  3000               	movlw	0
 14904  08BC  1803               	skipnc
 14905  08BD  3001               	movlw	1
 14906  08BE  07A2               	addwf	___ftpack@arg+2,f
 14907  08BF  3001               	movlw	1
 14908  08C0                     u8795:	
 14909  08C0  36A2               	lsrf	___ftpack@arg+2,f
 14910  08C1  0CA1               	rrf	___ftpack@arg+1,f
 14911  08C2  0CA0               	rrf	___ftpack@arg,f
 14912  08C3  0B89               	decfsz	9,f
 14913  08C4  28C0               	goto	u8795
 14914  08C5                     l3025:	
 14915  08C5  30FF               	movlw	255
 14916  08C6  0522               	andwf	___ftpack@arg+2,w
 14917  08C7  1903               	btfsc	3,2
 14918  08C8  28D2               	goto	l8607
 14919  08C9  28B1               	goto	l8599
 14920  08CA                     l8605:	
 14921  08CA  3001               	movlw	1
 14922  08CB  02A3               	subwf	___ftpack@exp,f
 14923  08CC  3001               	movlw	1
 14924  08CD                     u8815:	
 14925  08CD  35A0               	lslf	___ftpack@arg,f
 14926  08CE  0DA1               	rlf	___ftpack@arg+1,f
 14927  08CF  0DA2               	rlf	___ftpack@arg+2,f
 14928  08D0  0B89               	decfsz	9,f
 14929  08D1  28CD               	goto	u8815
 14930  08D2                     l8607:	
 14931  08D2  1FA1               	btfss	___ftpack@arg+1,7
 14932  08D3  28CA               	goto	l8605
 14933  08D4  1823               	btfsc	___ftpack@exp,0
 14934  08D5  28DC               	goto	l3031
 14935  08D6  30FF               	movlw	255
 14936  08D7  05A0               	andwf	___ftpack@arg,f
 14937  08D8  307F               	movlw	127
 14938  08D9  05A1               	andwf	___ftpack@arg+1,f
 14939  08DA  30FF               	movlw	255
 14940  08DB  05A2               	andwf	___ftpack@arg+2,f
 14941  08DC                     l3031:	
 14942  08DC  1003               	clrc
 14943  08DD  0CA3               	rrf	___ftpack@exp,f
 14944  08DE  0823               	movf	___ftpack@exp,w
 14945  08DF  00A5               	movwf	??___ftpack
 14946  08E0  01A6               	clrf	??___ftpack+1
 14947  08E1  01A7               	clrf	??___ftpack+2
 14948  08E2  3010               	movlw	16
 14949  08E3                     u8845:	
 14950  08E3  35A5               	lslf	??___ftpack,f
 14951  08E4  0DA6               	rlf	??___ftpack+1,f
 14952  08E5  0DA7               	rlf	??___ftpack+2,f
 14953  08E6  0B89               	decfsz	9,f
 14954  08E7  28E3               	goto	u8845
 14955  08E8  0825               	movf	??___ftpack,w
 14956  08E9  04A0               	iorwf	___ftpack@arg,f
 14957  08EA  0826               	movf	??___ftpack+1,w
 14958  08EB  04A1               	iorwf	___ftpack@arg+1,f
 14959  08EC  0827               	movf	??___ftpack+2,w
 14960  08ED  04A2               	iorwf	___ftpack@arg+2,f
 14961  08EE  0824               	movf	___ftpack@sign,w
 14962  08EF  1903               	btfsc	3,2
 14963  08F0  0008               	return
 14964  08F1  17A2               	bsf	___ftpack@arg+2,7
 14965  08F2  0008               	return
 14966  08F3                     __end_of___ftpack:	
 14967                           
 14968                           	psect	text87
 14969  1597                     __ptext87:	
 14970 ;; *************** function _setLED *****************
 14971 ;; Defined at:
 14972 ;;		line 76 in file "../src/LED_B1.c"
 14973 ;; Parameters:    Size  Location     Type
 14974 ;;  led             1    wreg     unsigned char 
 14975 ;;  command         1    2[BANK0 ] unsigned char 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  led             1    3[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;		None               void
 14980 ;; Registers used:
 14981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:        2 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    6
 14994 ;; This function calls:
 14995 ;;		_LedPointSelect
 14996 ;; This function is called by:
 14997 ;;		_setDimmerLights
 14998 ;;		_setLED_Initialization
 14999 ;;		_Exception_Main
 15000 ;;		_setSw_Initialization
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           
 15005                           ;psect for function _setLED
 15006  1597                     _setLED:	
 15007                           
 15008                           ;incstack = 0
 15009                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15010                           ;setLED@led stored from wreg
 15011  1597  0020               	movlb	0	; select bank0
 15012  1598  00A3               	movwf	setLED@led
 15013                           
 15014                           ;LED_B1.c: 77: LedPointSelect(led);
 15015  1599  0823               	movf	setLED@led,w
 15016  159A  319E  2613  3195   	fcall	_LedPointSelect
 15017                           
 15018                           ;LED_B1.c: 78: if (command == 0) {
 15019  159D  0020               	movlb	0	; select bank0
 15020  159E  08A2               	movf	setLED@command,f
 15021  159F  1D03               	skipz
 15022  15A0  2DAE               	goto	l9383
 15023                           
 15024                           ;LED_B1.c: 80: if (led == 1) {
 15025  15A1  0823               	movf	setLED@led,w
 15026  15A2  3A01               	xorlw	1
 15027  15A3  1D03               	skipz
 15028  15A4  2DA6               	goto	l9375
 15029                           
 15030                           ;LED_B1.c: 84: RA3 = 1;
 15031  15A5  158C               	bsf	12,3	;volatile
 15032  15A6                     l9375:	
 15033                           
 15034                           ;LED_B1.c: 86: }
 15035                           ;LED_B1.c: 89: if (led == 2) {
 15036  15A6  0823               	movf	setLED@led,w
 15037  15A7  3A02               	xorlw	2
 15038  15A8  1903               	btfsc	3,2
 15039                           
 15040                           ;LED_B1.c: 93: RC7 = 1;
 15041  15A9  178E               	bsf	14,7	;volatile
 15042                           
 15043                           ;LED_B1.c: 95: }
 15044                           ;LED_B1.c: 107: if (led == 99) {
 15045  15AA  0823               	movf	setLED@led,w
 15046  15AB  3A63               	xorlw	99
 15047  15AC  1903               	btfsc	3,2
 15048                           
 15049                           ;LED_B1.c: 111: RB5 = 1;
 15050  15AD  168D               	bsf	13,5	;volatile
 15051  15AE                     l9383:	
 15052                           
 15053                           ;LED_B1.c: 113: }
 15054                           ;LED_B1.c: 115: }
 15055                           ;LED_B1.c: 116: if (command == 1) {
 15056  15AE  0822               	movf	setLED@command,w
 15057  15AF  3A01               	xorlw	1
 15058  15B0  1D03               	skipz
 15059  15B1  2DBF               	goto	l9397
 15060                           
 15061                           ;LED_B1.c: 118: if (led == 1) {
 15062  15B2  0823               	movf	setLED@led,w
 15063  15B3  3A01               	xorlw	1
 15064  15B4  1D03               	skipz
 15065  15B5  2DB7               	goto	l9389
 15066                           
 15067                           ;LED_B1.c: 122: RA3 = 0;
 15068  15B6  118C               	bcf	12,3	;volatile
 15069  15B7                     l9389:	
 15070                           
 15071                           ;LED_B1.c: 124: }
 15072                           ;LED_B1.c: 127: if (led == 2) {
 15073  15B7  0823               	movf	setLED@led,w
 15074  15B8  3A02               	xorlw	2
 15075  15B9  1903               	btfsc	3,2
 15076                           
 15077                           ;LED_B1.c: 131: RC7 = 0;
 15078  15BA  138E               	bcf	14,7	;volatile
 15079                           
 15080                           ;LED_B1.c: 133: }
 15081                           ;LED_B1.c: 145: if (led == 99) {
 15082  15BB  0823               	movf	setLED@led,w
 15083  15BC  3A63               	xorlw	99
 15084  15BD  1903               	btfsc	3,2
 15085                           
 15086                           ;LED_B1.c: 149: RB5 = 0;
 15087  15BE  128D               	bcf	13,5	;volatile
 15088  15BF                     l9397:	
 15089                           
 15090                           ;LED_B1.c: 151: }
 15091                           ;LED_B1.c: 153: }
 15092                           ;LED_B1.c: 154: if (command == 10) {
 15093  15BF  0822               	movf	setLED@command,w
 15094  15C0  3A0A               	xorlw	10
 15095  15C1  1D03               	skipz
 15096  15C2  2DDF               	goto	l9413
 15097                           
 15098                           ;LED_B1.c: 155: LED->GO = 0;
 15099  15C3  0021               	movlb	1	; select bank1
 15100  15C4  084D               	movf	_LED^(0+128),w
 15101  15C5  0086               	movwf	6
 15102  15C6  3001               	movlw	1	; select bank2/3
 15103  15C7  0087               	movwf	7
 15104  15C8  1081               	bcf	1,1
 15105                           
 15106                           ;LED_B1.c: 156: LED->Time = 0;
 15107  15C9  0A4D               	incf	_LED^(0+128),w
 15108  15CA  0086               	movwf	6
 15109  15CB  3001               	movlw	1	; select bank2/3
 15110  15CC  0087               	movwf	7
 15111  15CD  3000               	movlw	0
 15112  15CE  3FC0               	movwi [0]fsr1
 15113  15CF  3FC1               	movwi [1]fsr1
 15114                           
 15115                           ;LED_B1.c: 158: if (led == 1) {
 15116  15D0  0020               	movlb	0	; select bank0
 15117  15D1  0823               	movf	setLED@led,w
 15118  15D2  3A01               	xorlw	1
 15119  15D3  1D03               	skipz
 15120  15D4  2DD7               	goto	l9405
 15121                           
 15122                           ;LED_B1.c: 162: RA3 = 1;
 15123  15D5  158C               	bsf	12,3	;volatile
 15124                           
 15125                           ;LED_B1.c: 164: }
 15126  15D6  2DDB               	goto	l9409
 15127  15D7                     l9405:	
 15128                           
 15129                           ;LED_B1.c: 167: else if (led == 2) {
 15130  15D7  0823               	movf	setLED@led,w
 15131  15D8  3A02               	xorlw	2
 15132  15D9  1903               	btfsc	3,2
 15133                           
 15134                           ;LED_B1.c: 171: RC7 = 1;
 15135  15DA  178E               	bsf	14,7	;volatile
 15136  15DB                     l9409:	
 15137                           
 15138                           ;LED_B1.c: 173: }
 15139                           ;LED_B1.c: 185: if (led == 99) {
 15140  15DB  0823               	movf	setLED@led,w
 15141  15DC  3A63               	xorlw	99
 15142  15DD  1903               	btfsc	3,2
 15143                           
 15144                           ;LED_B1.c: 189: RB5 = 1;
 15145  15DE  168D               	bsf	13,5	;volatile
 15146  15DF                     l9413:	
 15147                           
 15148                           ;LED_B1.c: 191: }
 15149                           ;LED_B1.c: 193: }
 15150                           ;LED_B1.c: 194: if (command == 11) {
 15151  15DF  0822               	movf	setLED@command,w
 15152  15E0  3A0B               	xorlw	11
 15153  15E1  1D03               	skipz
 15154  15E2  0008               	return
 15155                           
 15156                           ;LED_B1.c: 195: LED->GO = 1;
 15157  15E3  0021               	movlb	1	; select bank1
 15158  15E4  084D               	movf	_LED^(0+128),w
 15159  15E5  0086               	movwf	6
 15160  15E6  3001               	movlw	1	; select bank2/3
 15161  15E7  0087               	movwf	7
 15162  15E8  1481               	bsf	1,1
 15163  15E9  0008               	return
 15164  15EA                     __end_of_setLED:	
 15165                           
 15166                           	psect	text88
 15167  1E13                     __ptext88:	
 15168 ;; *************** function _LedPointSelect *****************
 15169 ;; Defined at:
 15170 ;;		line 7 in file "../src/LED_B1.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;  led             1    wreg     unsigned char 
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;  led             1    1[BANK0 ] unsigned char 
 15175 ;; Return value:  Size  Location     Type
 15176 ;;		None               void
 15177 ;; Registers used:
 15178 ;;		wreg
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;Total ram usage:        2 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    5
 15191 ;; This function calls:
 15192 ;;		Nothing
 15193 ;; This function is called by:
 15194 ;;		_setLED_Initialization
 15195 ;;		_setLED
 15196 ;;		_setLED_Main
 15197 ;; This function uses a non-reentrant model
 15198 ;;
 15199                           
 15200                           
 15201                           ;psect for function _LedPointSelect
 15202  1E13                     _LedPointSelect:	
 15203                           
 15204                           ;incstack = 0
 15205                           ; Regs used in _LedPointSelect: [wreg]
 15206                           ;LedPointSelect@led stored from wreg
 15207  1E13  0020               	movlb	0	; select bank0
 15208  1E14  00A1               	movwf	LedPointSelect@led
 15209                           
 15210                           ;LED_B1.c: 9: if (led == 1) {
 15211  1E15  0821               	movf	LedPointSelect@led,w
 15212  1E16  3A01               	xorlw	1
 15213  1E17  1D03               	skipz
 15214  1E18  2E1E               	goto	l1014
 15215                           
 15216                           ;LED_B1.c: 10: LED = &VarLED1;
 15217  1E19  306A               	movlw	_VarLED1& (0+255)
 15218  1E1A  00A0               	movwf	??_LedPointSelect
 15219  1E1B  0820               	movf	??_LedPointSelect,w
 15220  1E1C  0021               	movlb	1	; select bank1
 15221  1E1D  00CD               	movwf	_LED^(0+128)
 15222  1E1E                     l1014:	
 15223                           
 15224                           ;LED_B1.c: 11: }
 15225                           ;LED_B1.c: 14: if (led == 2) {
 15226  1E1E  0020               	movlb	0	; select bank0
 15227  1E1F  0821               	movf	LedPointSelect@led,w
 15228  1E20  3A02               	xorlw	2
 15229  1E21  1D03               	skipz
 15230  1E22  2E28               	goto	l1015
 15231                           
 15232                           ;LED_B1.c: 15: LED = &VarLED2;
 15233  1E23  30EB               	movlw	_VarLED2& (0+255)
 15234  1E24  00A0               	movwf	??_LedPointSelect
 15235  1E25  0820               	movf	??_LedPointSelect,w
 15236  1E26  0021               	movlb	1	; select bank1
 15237  1E27  00CD               	movwf	_LED^(0+128)
 15238  1E28                     l1015:	
 15239                           
 15240                           ;LED_B1.c: 16: }
 15241                           ;LED_B1.c: 24: if (led == 99) {
 15242  1E28  0020               	movlb	0	; select bank0
 15243  1E29  0821               	movf	LedPointSelect@led,w
 15244  1E2A  3A63               	xorlw	99
 15245  1E2B  1D03               	skipz
 15246  1E2C  0008               	return
 15247                           
 15248                           ;LED_B1.c: 25: LED = &VarErrLED;
 15249  1E2D  3066               	movlw	_VarErrLED& (0+255)
 15250  1E2E  00A0               	movwf	??_LedPointSelect
 15251  1E2F  0820               	movf	??_LedPointSelect,w
 15252  1E30  0021               	movlb	1	; select bank1
 15253  1E31  00CD               	movwf	_LED^(0+128)
 15254  1E32  0008               	return
 15255  1E33                     __end_of_LedPointSelect:	
 15256                           
 15257                           	psect	text89
 15258  1D00                     __ptext89:	
 15259 ;; *************** function _setDimmerLights_Line *****************
 15260 ;; Defined at:
 15261 ;;		line 674 in file "../src/Dimmer_B1.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;  lights          1    wreg     unsigned char 
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  lights          1    0[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;		None               void
 15268 ;; Registers used:
 15269 ;;		wreg
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;Total ram usage:        1 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:    5
 15282 ;; This function calls:
 15283 ;;		Nothing
 15284 ;; This function is called by:
 15285 ;;		_setDimmerLights
 15286 ;;		_setDimmerLights_Adj
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _setDimmerLights_Line
 15292  1D00                     _setDimmerLights_Line:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setDimmerLights_Line: [wreg]
 15296                           ;setDimmerLights_Line@lights stored from wreg
 15297  1D00  0020               	movlb	0	; select bank0
 15298  1D01  00A0               	movwf	setDimmerLights_Line@lights
 15299                           
 15300                           ;Dimmer_B1.c: 675: Dimmer.LoadGO = 1;
 15301  1D02  0021               	movlb	1	; select bank1
 15302  1D03  1546               	bsf	_Dimmer^(0+128),2	;volatile
 15303                           
 15304                           ;Dimmer_B1.c: 677: DimmerLights1.Line = 0;
 15305  1D04  0022               	movlb	2	; select bank2
 15306  1D05  135F               	bcf	(_DimmerLights1^(0+256)+10),6	;volatile
 15307                           
 15308                           ;Dimmer_B1.c: 680: DimmerLights2.Line = 0;
 15309  1D06  0023               	movlb	3	; select bank3
 15310  1D07  1348               	bcf	(_DimmerLights2^(0+384)+10),6	;volatile
 15311                           
 15312                           ;Dimmer_B1.c: 686: if (lights == 1) {
 15313  1D08  0020               	movlb	0	; select bank0
 15314  1D09  0820               	movf	setDimmerLights_Line@lights,w
 15315  1D0A  3A01               	xorlw	1
 15316  1D0B  1D03               	skipz
 15317  1D0C  2D10               	goto	l9363
 15318                           
 15319                           ;Dimmer_B1.c: 687: DimmerLights1.Line = 1;
 15320  1D0D  0022               	movlb	2	; select bank2
 15321  1D0E  175F               	bsf	(_DimmerLights1^(0+256)+10),6	;volatile
 15322                           
 15323                           ;Dimmer_B1.c: 688: }
 15324  1D0F  0008               	return
 15325  1D10                     l9363:	
 15326                           
 15327                           ;Dimmer_B1.c: 691: else if (lights == 2) {
 15328  1D10  0020               	movlb	0	; select bank0
 15329  1D11  0820               	movf	setDimmerLights_Line@lights,w
 15330  1D12  3A02               	xorlw	2
 15331  1D13  1D03               	skipz
 15332  1D14  0008               	return
 15333                           
 15334                           ;Dimmer_B1.c: 692: DimmerLights2.Line = 1;
 15335  1D15  0023               	movlb	3	; select bank3
 15336  1D16  1748               	bsf	(_DimmerLights2^(0+384)+10),6	;volatile
 15337  1D17  0008               	return
 15338  1D18                     __end_of_setDimmerLights_Line:	
 15339                           
 15340                           	psect	text90
 15341  136F                     __ptext90:	
 15342 ;; *************** function _getDimmerLights_Allow_Condition *****************
 15343 ;; Defined at:
 15344 ;;		line 554 in file "../src/Dimmer_B1.c"
 15345 ;; Parameters:    Size  Location     Type
 15346 ;;  lights          1    wreg     unsigned char 
 15347 ;; Auto vars:     Size  Location     Type
 15348 ;;  lights          1   10[BANK0 ] unsigned char 
 15349 ;;  allow           1   11[BANK0 ] unsigned char 
 15350 ;; Return value:  Size  Location     Type
 15351 ;;                  1    wreg      unsigned char 
 15352 ;; Registers used:
 15353 ;;		wreg, status,2, status,0, pclath, cstack
 15354 ;; Tracked objects:
 15355 ;;		On entry : 0/0
 15356 ;;		On exit  : 0/0
 15357 ;;		Unchanged: 0/0
 15358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;Total ram usage:        5 bytes
 15364 ;; Hardware stack levels used:    1
 15365 ;; Hardware stack levels required when called:    6
 15366 ;; This function calls:
 15367 ;;		_getLoad_OK
 15368 ;;		_getMain_All_Error_Status
 15369 ;;		_getMain_LightsStatus
 15370 ;; This function is called by:
 15371 ;;		_setDimmerLights_SwOn
 15372 ;;		_setDimmerLights_AdjOn
 15373 ;;		_setDimmerLights_Main
 15374 ;; This function uses a non-reentrant model
 15375 ;;
 15376                           
 15377                           
 15378                           ;psect for function _getDimmerLights_Allow_Condition
 15379  136F                     _getDimmerLights_Allow_Condition:	
 15380                           
 15381                           ;incstack = 0
 15382                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 15383                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 15384  136F  0020               	movlb	0	; select bank0
 15385  1370  00AA               	movwf	getDimmerLights_Allow_Condition@lights
 15386                           
 15387                           ;Dimmer_B1.c: 555: char allow = 0;
 15388  1371  01AB               	clrf	getDimmerLights_Allow_Condition@allow
 15389                           
 15390                           ;Dimmer_B1.c: 561: if (Dimmer.LoadGO == 1) {
 15391  1372  0021               	movlb	1	; select bank1
 15392  1373  1D46               	btfss	_Dimmer^(0+128),2	;volatile
 15393  1374  2B90               	goto	l9059
 15394                           
 15395                           ;Dimmer_B1.c: 562: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 15396  1375  319A  2267  3193   	fcall	_getLoad_OK
 15397  1378  3A01               	xorlw	1
 15398  1379  1903               	skipnz
 15399  137A  2B88               	goto	l809
 15400  137B  3000               	movlw	0
 15401  137C  3188  2000  3193   	fcall	_getMain_All_Error_Status
 15402  137F  3800               	iorlw	0
 15403  1380  1D03               	skipz
 15404  1381  2B88               	goto	l809
 15405  1382  319C  240F  3193   	fcall	_getMain_LightsStatus
 15406  1385  3800               	iorlw	0
 15407  1386  1D03               	skipz
 15408  1387  2B8A               	goto	l9057
 15409  1388                     l809:	
 15410                           
 15411                           ;Dimmer_B1.c: 563: Dimmer.LoadGO = 0;
 15412  1388  0021               	movlb	1	; select bank1
 15413  1389  1146               	bcf	_Dimmer^(0+128),2	;volatile
 15414  138A                     l9057:	
 15415                           
 15416                           ;Dimmer_B1.c: 564: }
 15417                           ;Dimmer_B1.c: 565: allow = Dimmer.LoadGO == 0 ? 0 : 1;
 15418  138A  3000               	movlw	0
 15419  138B  0021               	movlb	1	; select bank1
 15420  138C  1946               	btfsc	_Dimmer^(0+128),2	;volatile
 15421  138D  3001               	movlw	1
 15422  138E  0020               	movlb	0	; select bank0
 15423  138F  00AB               	movwf	getDimmerLights_Allow_Condition@allow
 15424  1390                     l9059:	
 15425                           
 15426                           ;Dimmer_B1.c: 566: }
 15427                           ;Dimmer_B1.c: 571: if (allow == 0) {
 15428  1390  0020               	movlb	0	; select bank0
 15429  1391  08AB               	movf	getDimmerLights_Allow_Condition@allow,f
 15430  1392  1D03               	skipz
 15431  1393  2BB4               	goto	l9081
 15432                           
 15433                           ;Dimmer_B1.c: 572: if (lights == 1) {
 15434  1394  082A               	movf	getDimmerLights_Allow_Condition@lights,w
 15435  1395  3A01               	xorlw	1
 15436  1396  1D03               	skipz
 15437  1397  2BA3               	goto	l9071
 15438                           
 15439                           ;Dimmer_B1.c: 573: allow = DimmerLights2.TriggerAdj == 1 || DimmerLights2.AdjSw == 1 ? 1
      +                           : 0;
 15440  1398  01A8               	clrf	_getDimmerLights_Allow_Condition$2327
 15441  1399  0AA8               	incf	_getDimmerLights_Allow_Condition$2327,f
 15442  139A  0023               	movlb	3	; select bank3
 15443  139B  1DC8               	btfss	(_DimmerLights2^(0+384)+10),3	;volatile
 15444  139C  1B3F               	btfsc	(_DimmerLights2^(0+384)+1),6	;volatile
 15445  139D  2BA0               	goto	l9069
 15446  139E  0020               	movlb	0	; select bank0
 15447  139F  01A8               	clrf	_getDimmerLights_Allow_Condition$2327
 15448  13A0                     l9069:	
 15449  13A0  0020               	movlb	0	; select bank0
 15450  13A1  0828               	movf	_getDimmerLights_Allow_Condition$2327,w
 15451  13A2  2BB1               	goto	L6
 15452  13A3                     l9071:	
 15453                           ;Dimmer_B1.c: 574: } else if (lights == 2) {
 15454                           
 15455  13A3  082A               	movf	getDimmerLights_Allow_Condition@lights,w
 15456  13A4  3A02               	xorlw	2
 15457  13A5  1D03               	skipz
 15458  13A6  2BB4               	goto	l9081
 15459                           
 15460                           ;Dimmer_B1.c: 575: allow = DimmerLights1.TriggerAdj == 1 || DimmerLights1.AdjSw == 1 ? 1
      +                           : 0;
 15461  13A7  01A9               	clrf	_getDimmerLights_Allow_Condition$2328
 15462  13A8  0AA9               	incf	_getDimmerLights_Allow_Condition$2328,f
 15463  13A9  0022               	movlb	2	; select bank2
 15464  13AA  1DDF               	btfss	(_DimmerLights1^(0+256)+10),3	;volatile
 15465  13AB  1B56               	btfsc	(_DimmerLights1^(0+256)+1),6	;volatile
 15466  13AC  2BAF               	goto	l9079
 15467  13AD  0020               	movlb	0	; select bank0
 15468  13AE  01A9               	clrf	_getDimmerLights_Allow_Condition$2328
 15469  13AF                     l9079:	
 15470  13AF  0020               	movlb	0	; select bank0
 15471  13B0  0829               	movf	_getDimmerLights_Allow_Condition$2328,w
 15472  13B1                     L6:	
 15473  13B1  00A7               	movwf	??_getDimmerLights_Allow_Condition
 15474  13B2  0827               	movf	??_getDimmerLights_Allow_Condition,w
 15475  13B3  00AB               	movwf	getDimmerLights_Allow_Condition@allow
 15476  13B4                     l9081:	
 15477                           
 15478                           ;Dimmer_B1.c: 576: }
 15479                           ;Dimmer_B1.c: 577: }
 15480                           ;Dimmer_B1.c: 591: return allow;
 15481  13B4  082B               	movf	getDimmerLights_Allow_Condition@allow,w
 15482  13B5  0008               	return
 15483  13B6                     __end_of_getDimmerLights_Allow_Condition:	
 15484                           
 15485                           	psect	text91
 15486  1C0F                     __ptext91:	
 15487 ;; *************** function _getMain_LightsStatus *****************
 15488 ;; Defined at:
 15489 ;;		line 375 in file "../src/Main_B1.c"
 15490 ;; Parameters:    Size  Location     Type
 15491 ;;		None
 15492 ;; Auto vars:     Size  Location     Type
 15493 ;;  status          1    0[BANK0 ] unsigned char 
 15494 ;; Return value:  Size  Location     Type
 15495 ;;                  1    wreg      unsigned char 
 15496 ;; Registers used:
 15497 ;;		wreg, status,2, status,0
 15498 ;; Tracked objects:
 15499 ;;		On entry : 0/0
 15500 ;;		On exit  : 0/0
 15501 ;;		Unchanged: 0/0
 15502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;Total ram usage:        1 bytes
 15508 ;; Hardware stack levels used:    1
 15509 ;; Hardware stack levels required when called:    5
 15510 ;; This function calls:
 15511 ;;		Nothing
 15512 ;; This function is called by:
 15513 ;;		_getDimmerLights_Allow_Condition
 15514 ;;		_Flash_Memory_Main
 15515 ;;		_Exception_Main
 15516 ;;		_Load_Main
 15517 ;; This function uses a non-reentrant model
 15518 ;;
 15519                           
 15520                           
 15521                           ;psect for function _getMain_LightsStatus
 15522  1C0F                     _getMain_LightsStatus:	
 15523                           
 15524                           ;Main_B1.c: 376: char status = 0;
 15525                           
 15526                           ;incstack = 0
 15527                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 15528  1C0F  0020               	movlb	0	; select bank0
 15529  1C10  01A0               	clrf	getMain_LightsStatus@status
 15530                           
 15531                           ;Main_B1.c: 395: status = DimmerLights1.Status == 1 ? 1 : 0;
 15532  1C11  3000               	movlw	0
 15533  1C12  0022               	movlb	2	; select bank2
 15534  1C13  18D7               	btfsc	(_DimmerLights1^(0+256)+2),1	;volatile
 15535  1C14  3001               	movlw	1
 15536  1C15  0020               	movlb	0	; select bank0
 15537  1C16  00A0               	movwf	getMain_LightsStatus@status
 15538                           
 15539                           ;Main_B1.c: 396: if (status == 0) {
 15540  1C17  08A0               	movf	getMain_LightsStatus@status,f
 15541  1C18  1D03               	skipz
 15542  1C19  2C20               	goto	l8931
 15543                           
 15544                           ;Main_B1.c: 397: status = DimmerLights2.Status == 1 ? 1 : 0;
 15545  1C1A  3000               	movlw	0
 15546  1C1B  0023               	movlb	3	; select bank3
 15547  1C1C  18C0               	btfsc	(_DimmerLights2^(0+384)+2),1	;volatile
 15548  1C1D  3001               	movlw	1
 15549  1C1E  0020               	movlb	0	; select bank0
 15550  1C1F  00A0               	movwf	getMain_LightsStatus@status
 15551  1C20                     l8931:	
 15552                           
 15553                           ;Main_B1.c: 398: }
 15554                           ;Main_B1.c: 422: return status;
 15555  1C20  0820               	movf	getMain_LightsStatus@status,w
 15556  1C21  0008               	return
 15557  1C22                     __end_of_getMain_LightsStatus:	
 15558                           
 15559                           	psect	text92
 15560  0800                     __ptext92:	
 15561 ;; *************** function _getMain_All_Error_Status *****************
 15562 ;; Defined at:
 15563 ;;		line 426 in file "../src/Main_B1.c"
 15564 ;; Parameters:    Size  Location     Type
 15565 ;;  command         1    wreg     unsigned char 
 15566 ;; Auto vars:     Size  Location     Type
 15567 ;;  command         1    5[BANK0 ] unsigned char 
 15568 ;;  status          1    6[BANK0 ] unsigned char 
 15569 ;; Return value:  Size  Location     Type
 15570 ;;                  1    wreg      unsigned char 
 15571 ;; Registers used:
 15572 ;;		wreg, status,2, status,0
 15573 ;; Tracked objects:
 15574 ;;		On entry : 0/0
 15575 ;;		On exit  : 0/0
 15576 ;;		Unchanged: 0/0
 15577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15579 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15580 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15581 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15582 ;;Total ram usage:        7 bytes
 15583 ;; Hardware stack levels used:    1
 15584 ;; Hardware stack levels required when called:    5
 15585 ;; This function calls:
 15586 ;;		Nothing
 15587 ;; This function is called by:
 15588 ;;		_getDimmerLights_Allow_Condition
 15589 ;;		_Exception_Main
 15590 ;;		_Load_Main
 15591 ;;		_setTemp_Main
 15592 ;;		_setRF_Main
 15593 ;;		_getRxData
 15594 ;;		_setSw_Main
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598                           
 15599                           ;psect for function _getMain_All_Error_Status
 15600  0800                     _getMain_All_Error_Status:	
 15601                           
 15602                           ;incstack = 0
 15603                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15604                           ;getMain_All_Error_Status@command stored from wreg
 15605  0800  0020               	movlb	0	; select bank0
 15606  0801  00A5               	movwf	getMain_All_Error_Status@command
 15607                           
 15608                           ;Main_B1.c: 427: char status = 0;
 15609  0802  01A6               	clrf	getMain_All_Error_Status@status
 15610                           
 15611                           ;Main_B1.c: 438: if (status == 0 && command != 2) {
 15612  0803  08A6               	movf	getMain_All_Error_Status@status,f
 15613  0804  1D03               	skipz
 15614  0805  281A               	goto	l8911
 15615  0806  0825               	movf	getMain_All_Error_Status@command,w
 15616  0807  3A02               	xorlw	2
 15617  0808  1903               	skipnz
 15618  0809  281A               	goto	l8911
 15619                           
 15620                           ;Main_B1.c: 439: status = Temp.ERROR == 1 ? 2 : 0;
 15621  080A  0021               	movlb	1	; select bank1
 15622  080B  18D6               	btfsc	_Temp^(0+128),1
 15623  080C  2811               	goto	l8909
 15624  080D  0020               	movlb	0	; select bank0
 15625  080E  01A1               	clrf	_getMain_All_Error_Status$3603
 15626  080F  01A2               	clrf	_getMain_All_Error_Status$3603+1
 15627  0810  2816               	goto	l1558
 15628  0811                     l8909:	
 15629  0811  3002               	movlw	2
 15630  0812  0020               	movlb	0	; select bank0
 15631  0813  00A1               	movwf	_getMain_All_Error_Status$3603
 15632  0814  3000               	movlw	0
 15633  0815  00A2               	movwf	_getMain_All_Error_Status$3603+1
 15634  0816                     l1558:	
 15635  0816  0821               	movf	_getMain_All_Error_Status$3603,w
 15636  0817  00A0               	movwf	??_getMain_All_Error_Status
 15637  0818  0820               	movf	??_getMain_All_Error_Status,w
 15638  0819  00A6               	movwf	getMain_All_Error_Status@status
 15639  081A                     l8911:	
 15640                           
 15641                           ;Main_B1.c: 440: }
 15642                           ;Main_B1.c: 445: if (status == 0 && command != 3) {
 15643  081A  08A6               	movf	getMain_All_Error_Status@status,f
 15644  081B  1D03               	skipz
 15645  081C  2831               	goto	l1559
 15646  081D  0825               	movf	getMain_All_Error_Status@command,w
 15647  081E  3A03               	xorlw	3
 15648  081F  1903               	skipnz
 15649  0820  2831               	goto	l1559
 15650                           
 15651                           ;Main_B1.c: 446: status = Load.ERROR == 1 ? 3 : 0;
 15652  0821  0022               	movlb	2	; select bank2
 15653  0822  1AA7               	btfsc	_Load^(0+256),5
 15654  0823  2828               	goto	l8919
 15655  0824  0020               	movlb	0	; select bank0
 15656  0825  01A3               	clrf	_getMain_All_Error_Status$3604
 15657  0826  01A4               	clrf	_getMain_All_Error_Status$3604+1
 15658  0827  282D               	goto	l1563
 15659  0828                     l8919:	
 15660  0828  3003               	movlw	3
 15661  0829  0020               	movlb	0	; select bank0
 15662  082A  00A3               	movwf	_getMain_All_Error_Status$3604
 15663  082B  3000               	movlw	0
 15664  082C  00A4               	movwf	_getMain_All_Error_Status$3604+1
 15665  082D                     l1563:	
 15666  082D  0823               	movf	_getMain_All_Error_Status$3604,w
 15667  082E  00A0               	movwf	??_getMain_All_Error_Status
 15668  082F  0820               	movf	??_getMain_All_Error_Status,w
 15669  0830  00A6               	movwf	getMain_All_Error_Status@status
 15670  0831                     l1559:	
 15671                           
 15672                           ;Main_B1.c: 447: }
 15673                           ;Main_B1.c: 463: return status;
 15674  0831  0826               	movf	getMain_All_Error_Status@status,w
 15675  0832  0008               	return
 15676  0833                     __end_of_getMain_All_Error_Status:	
 15677                           
 15678                           	psect	text93
 15679  1A67                     __ptext93:	
 15680 ;; *************** function _getLoad_OK *****************
 15681 ;; Defined at:
 15682 ;;		line 262 in file "../src/OverLoad_B1.c"
 15683 ;; Parameters:    Size  Location     Type
 15684 ;;		None
 15685 ;; Auto vars:     Size  Location     Type
 15686 ;;  ok              1    0[BANK0 ] unsigned char 
 15687 ;; Return value:  Size  Location     Type
 15688 ;;                  1    wreg      unsigned char 
 15689 ;; Registers used:
 15690 ;;		wreg, status,2
 15691 ;; Tracked objects:
 15692 ;;		On entry : 0/0
 15693 ;;		On exit  : 0/0
 15694 ;;		Unchanged: 0/0
 15695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15697 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15699 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15700 ;;Total ram usage:        1 bytes
 15701 ;; Hardware stack levels used:    1
 15702 ;; Hardware stack levels required when called:    5
 15703 ;; This function calls:
 15704 ;;		Nothing
 15705 ;; This function is called by:
 15706 ;;		_getDimmerLights_Allow_Condition
 15707 ;; This function uses a non-reentrant model
 15708 ;;
 15709                           
 15710                           
 15711                           ;psect for function _getLoad_OK
 15712  1A67                     _getLoad_OK:	
 15713                           
 15714                           ;OverLoad_B1.c: 263: char ok = Load.OK == 1 ? 1 : 0;
 15715                           
 15716                           ;incstack = 0
 15717                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15718  1A67  3000               	movlw	0
 15719  1A68  0022               	movlb	2	; select bank2
 15720  1A69  1BA7               	btfsc	_Load^(0+256),7
 15721  1A6A  3001               	movlw	1
 15722  1A6B  0020               	movlb	0	; select bank0
 15723  1A6C  00A0               	movwf	getLoad_OK@ok
 15724                           
 15725                           ;OverLoad_B1.c: 264: return ok;
 15726  1A6D  0820               	movf	getLoad_OK@ok,w
 15727  1A6E  0008               	return
 15728  1A6F                     __end_of_getLoad_OK:	
 15729                           
 15730                           	psect	text94
 15731  1C70                     __ptext94:	
 15732 ;; *************** function _DimmerLights_Initialization *****************
 15733 ;; Defined at:
 15734 ;;		line 341 in file "../src/Dimmer_B1.c"
 15735 ;; Parameters:    Size  Location     Type
 15736 ;;		None
 15737 ;; Auto vars:     Size  Location     Type
 15738 ;;		None
 15739 ;; Return value:  Size  Location     Type
 15740 ;;		None               void
 15741 ;; Registers used:
 15742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15743 ;; Tracked objects:
 15744 ;;		On entry : 0/0
 15745 ;;		On exit  : 0/0
 15746 ;;		Unchanged: 0/0
 15747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;Total ram usage:        1 bytes
 15753 ;; Hardware stack levels used:    1
 15754 ;; Hardware stack levels required when called:    7
 15755 ;; This function calls:
 15756 ;;		_setDimmerLights_Initialization
 15757 ;; This function is called by:
 15758 ;;		_main
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function _DimmerLights_Initialization
 15764  1C70                     _DimmerLights_Initialization:	
 15765                           
 15766                           ;Dimmer_B1.c: 344: DimmerLights11 = &DimmerLights1;
 15767                           
 15768                           ;incstack = 0
 15769                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15770  1C70  3055               	movlw	_DimmerLights1& (0+255)
 15771  1C71  0020               	movlb	0	; select bank0
 15772  1C72  00A4               	movwf	??_DimmerLights_Initialization
 15773  1C73  0824               	movf	??_DimmerLights_Initialization,w
 15774  1C74  0021               	movlb	1	; select bank1
 15775  1C75  00CA               	movwf	_DimmerLights11^(0+128)
 15776                           
 15777                           ;Dimmer_B1.c: 345: setDimmerLights_Initialization(1);
 15778  1C76  3001               	movlw	1
 15779  1C77  3190  20AA  319C   	fcall	_setDimmerLights_Initialization
 15780                           
 15781                           ;Dimmer_B1.c: 349: DimmerLights22 = &DimmerLights2;
 15782  1C7A  30BE               	movlw	_DimmerLights2& (0+255)
 15783  1C7B  0020               	movlb	0	; select bank0
 15784  1C7C  00A4               	movwf	??_DimmerLights_Initialization
 15785  1C7D  0824               	movf	??_DimmerLights_Initialization,w
 15786  1C7E  0021               	movlb	1	; select bank1
 15787  1C7F  00CB               	movwf	_DimmerLights22^(0+128)
 15788                           
 15789                           ;Dimmer_B1.c: 350: setDimmerLights_Initialization(2);
 15790  1C80  3002               	movlw	2
 15791  1C81  3190  20AA         	fcall	_setDimmerLights_Initialization
 15792  1C83  0008               	return
 15793  1C84                     __end_of_DimmerLights_Initialization:	
 15794                           
 15795                           	psect	text95
 15796  10AA                     __ptext95:	
 15797 ;; *************** function _setDimmerLights_Initialization *****************
 15798 ;; Defined at:
 15799 ;;		line 365 in file "../src/Dimmer_B1.c"
 15800 ;; Parameters:    Size  Location     Type
 15801 ;;  lights          1    wreg     unsigned char 
 15802 ;; Auto vars:     Size  Location     Type
 15803 ;;  lights          1    3[BANK0 ] unsigned char 
 15804 ;; Return value:  Size  Location     Type
 15805 ;;		None               void
 15806 ;; Registers used:
 15807 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15808 ;; Tracked objects:
 15809 ;;		On entry : 0/0
 15810 ;;		On exit  : 0/0
 15811 ;;		Unchanged: 0/0
 15812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15816 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15817 ;;Total ram usage:        2 bytes
 15818 ;; Hardware stack levels used:    1
 15819 ;; Hardware stack levels required when called:    6
 15820 ;; This function calls:
 15821 ;;		_DimmerLightsPointSelect
 15822 ;; This function is called by:
 15823 ;;		_DimmerLights_Initialization
 15824 ;; This function uses a non-reentrant model
 15825 ;;
 15826                           
 15827                           
 15828                           ;psect for function _setDimmerLights_Initialization
 15829  10AA                     _setDimmerLights_Initialization:	
 15830                           
 15831                           ;incstack = 0
 15832                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15833                           ;setDimmerLights_Initialization@lights stored from wreg
 15834  10AA  0020               	movlb	0	; select bank0
 15835  10AB  00A3               	movwf	setDimmerLights_Initialization@lights
 15836                           
 15837                           ;Dimmer_B1.c: 367: DimmerLightsPointSelect(lights);
 15838  10AC  0823               	movf	setDimmerLights_Initialization@lights,w
 15839  10AD  319B  23FC  3190   	fcall	_DimmerLightsPointSelect
 15840                           
 15841                           ;Dimmer_B1.c: 369: DimmerLights->DimmingTimeValue = 7;
 15842  10B0  3007               	movlw	7
 15843  10B1  0020               	movlb	0	; select bank0
 15844  10B2  00A2               	movwf	??_setDimmerLights_Initialization
 15845  10B3  086F               	movf	_DimmerLights,w
 15846  10B4  3E08               	addlw	8
 15847  10B5  0086               	movwf	6
 15848  10B6  3001               	movlw	1	; select bank2/3
 15849  10B7  0087               	movwf	7
 15850  10B8  0822               	movf	??_setDimmerLights_Initialization,w
 15851  10B9  0081               	movwf	1
 15852                           
 15853                           ;Dimmer_B1.c: 374: DimmerLights->MaxmumValue = ((char)(75*0.8));
 15854  10BA  303C               	movlw	60
 15855  10BB  00A2               	movwf	??_setDimmerLights_Initialization
 15856  10BC  086F               	movf	_DimmerLights,w
 15857  10BD  3E06               	addlw	6
 15858  10BE  0086               	movwf	6
 15859  10BF  3001               	movlw	1	; select bank2/3
 15860  10C0  0087               	movwf	7
 15861  10C1  0822               	movf	??_setDimmerLights_Initialization,w
 15862  10C2  0081               	movwf	1
 15863                           
 15864                           ;Dimmer_B1.c: 375: DimmerLights->MinimumValue = ((char)(15*0.8));
 15865  10C3  300C               	movlw	12
 15866  10C4  00A2               	movwf	??_setDimmerLights_Initialization
 15867  10C5  086F               	movf	_DimmerLights,w
 15868  10C6  3E09               	addlw	9
 15869  10C7  0086               	movwf	6
 15870  10C8  3001               	movlw	1	; select bank2/3
 15871  10C9  0087               	movwf	7
 15872  10CA  0822               	movf	??_setDimmerLights_Initialization,w
 15873  10CB  0081               	movwf	1
 15874                           
 15875                           ;Dimmer_B1.c: 389: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15876  10CC  086F               	movf	_DimmerLights,w
 15877  10CD  3E06               	addlw	6
 15878  10CE  0086               	movwf	6
 15879  10CF  3001               	movlw	1	; select bank2/3
 15880  10D0  0087               	movwf	7
 15881  10D1  0801               	movf	1,w
 15882  10D2  00A2               	movwf	??_setDimmerLights_Initialization
 15883  10D3  086F               	movf	_DimmerLights,w
 15884  10D4  3E04               	addlw	4
 15885  10D5  0086               	movwf	6
 15886  10D6  3001               	movlw	1	; select bank2/3
 15887  10D7  0087               	movwf	7
 15888  10D8  0822               	movf	??_setDimmerLights_Initialization,w
 15889  10D9  0081               	movwf	1
 15890  10DA  0008               	return
 15891  10DB                     __end_of_setDimmerLights_Initialization:	
 15892                           
 15893                           	psect	text96
 15894  1A5F                     __ptext96:	
 15895 ;; *************** function _DelayOff_Main *****************
 15896 ;; Defined at:
 15897 ;;		line 41 in file "../src/DelayOff_B1.c"
 15898 ;; Parameters:    Size  Location     Type
 15899 ;;		None
 15900 ;; Auto vars:     Size  Location     Type
 15901 ;;		None
 15902 ;; Return value:  Size  Location     Type
 15903 ;;		None               void
 15904 ;; Registers used:
 15905 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15906 ;; Tracked objects:
 15907 ;;		On entry : 0/0
 15908 ;;		On exit  : 0/0
 15909 ;;		Unchanged: 0/0
 15910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15915 ;;Total ram usage:        0 bytes
 15916 ;; Hardware stack levels used:    1
 15917 ;; Hardware stack levels required when called:   11
 15918 ;; This function calls:
 15919 ;;		_DlyOff_Main
 15920 ;; This function is called by:
 15921 ;;		_main
 15922 ;; This function uses a non-reentrant model
 15923 ;;
 15924                           
 15925                           
 15926                           ;psect for function _DelayOff_Main
 15927  1A5F                     _DelayOff_Main:	
 15928                           
 15929                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15930                           
 15931                           ;incstack = 0
 15932                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15933  1A5F  3001               	movlw	1
 15934  1A60  3197  27A3  319A   	fcall	_DlyOff_Main
 15935                           
 15936                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15937  1A63  3002               	movlw	2
 15938  1A64  3197  27A3         	fcall	_DlyOff_Main
 15939  1A66  0008               	return
 15940  1A67                     __end_of_DelayOff_Main:	
 15941                           
 15942                           	psect	text97
 15943  17A3                     __ptext97:	
 15944 ;; *************** function _DlyOff_Main *****************
 15945 ;; Defined at:
 15946 ;;		line 61 in file "../src/DelayOff_B1.c"
 15947 ;; Parameters:    Size  Location     Type
 15948 ;;  sw              1    wreg     unsigned char 
 15949 ;; Auto vars:     Size  Location     Type
 15950 ;;  sw              1   78[BANK0 ] unsigned char 
 15951 ;; Return value:  Size  Location     Type
 15952 ;;		None               void
 15953 ;; Registers used:
 15954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15955 ;; Tracked objects:
 15956 ;;		On entry : 0/0
 15957 ;;		On exit  : 0/0
 15958 ;;		Unchanged: 0/0
 15959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15962 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15963 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15964 ;;Total ram usage:        3 bytes
 15965 ;; Hardware stack levels used:    1
 15966 ;; Hardware stack levels required when called:   10
 15967 ;; This function calls:
 15968 ;;		_DelayOffPointSelect
 15969 ;;		_setBuz
 15970 ;;		_setDimmerLights_ErrorClose
 15971 ;; This function is called by:
 15972 ;;		_DelayOff_Main
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           
 15977                           ;psect for function _DlyOff_Main
 15978  17A3                     _DlyOff_Main:	
 15979                           
 15980                           ;incstack = 0
 15981                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15982                           ;DlyOff_Main@sw stored from wreg
 15983  17A3  0020               	movlb	0	; select bank0
 15984  17A4  00EE               	movwf	DlyOff_Main@sw
 15985                           
 15986                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15987  17A5  086E               	movf	DlyOff_Main@sw,w
 15988  17A6  319C  245C  3197   	fcall	_DelayOffPointSelect
 15989                           
 15990                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15991  17A9  0875               	movf	_DelayOff,w
 15992  17AA  0086               	movwf	6
 15993  17AB  3001               	movlw	1	; select bank2/3
 15994  17AC  0087               	movwf	7
 15995  17AD  1C81               	btfss	1,1
 15996  17AE  0008               	return
 15997                           
 15998                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15999  17AF  0875               	movf	_DelayOff,w
 16000  17B0  3E02               	addlw	2
 16001  17B1  0086               	movwf	6
 16002  17B2  3001               	movlw	1	; select bank2/3
 16003  17B3  0087               	movwf	7
 16004  17B4  3001               	movlw	1
 16005  17B5  0781               	addwf	1,f
 16006  17B6  3141               	addfsr 1,1
 16007  17B7  1803               	skipnc
 16008  17B8  0A81               	incf	1,f
 16009                           
 16010                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 16011  17B9  0875               	movf	_DelayOff,w
 16012  17BA  3E02               	addlw	2
 16013  17BB  0086               	movwf	6
 16014  17BC  3001               	movlw	1	; select bank2/3
 16015  17BD  0087               	movwf	7
 16016  17BE  3F40               	moviw [0]fsr1
 16017  17BF  0020               	movlb	0	; select bank0
 16018  17C0  00EC               	movwf	??_DlyOff_Main
 16019  17C1  3F41               	moviw [1]fsr1
 16020  17C2  00ED               	movwf	??_DlyOff_Main+1
 16021  17C3  3017               	movlw	23
 16022  17C4  026D               	subwf	??_DlyOff_Main+1,w
 16023  17C5  3070               	movlw	112
 16024  17C6  1903               	skipnz
 16025  17C7  026C               	subwf	??_DlyOff_Main,w
 16026  17C8  1C03               	skipc
 16027  17C9  0008               	return
 16028                           
 16029                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16030  17CA  0875               	movf	_DelayOff,w
 16031  17CB  3E02               	addlw	2
 16032  17CC  0086               	movwf	6
 16033  17CD  3001               	movlw	1	; select bank2/3
 16034  17CE  0087               	movwf	7
 16035  17CF  3000               	movlw	0
 16036  17D0  3FC0               	movwi [0]fsr1
 16037  17D1  3FC1               	movwi [1]fsr1
 16038                           
 16039                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16040  17D2  3001               	movlw	1
 16041  17D3  00EC               	movwf	??_DlyOff_Main
 16042  17D4  0875               	movf	_DelayOff,w
 16043  17D5  3E04               	addlw	4
 16044  17D6  0086               	movwf	6
 16045  17D7  3001               	movlw	1	; select bank2/3
 16046  17D8  0087               	movwf	7
 16047  17D9  086C               	movf	??_DlyOff_Main,w
 16048  17DA  0781               	addwf	1,f
 16049                           
 16050                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16051  17DB  0875               	movf	_DelayOff,w
 16052  17DC  3E04               	addlw	4
 16053  17DD  0086               	movwf	6
 16054  17DE  3001               	movlw	1	; select bank2/3
 16055  17DF  0087               	movwf	7
 16056  17E0  0A75               	incf	_DelayOff,w
 16057  17E1  0084               	movwf	4
 16058  17E2  3001               	movlw	1	; select bank2/3
 16059  17E3  0085               	movwf	5
 16060  17E4  0800               	movf	0,w
 16061  17E5  0201               	subwf	1,w
 16062  17E6  1C03               	skipc
 16063  17E7  0008               	return
 16064                           
 16065                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16066  17E8  0875               	movf	_DelayOff,w
 16067  17E9  3E04               	addlw	4
 16068  17EA  0086               	movwf	6
 16069  17EB  3001               	movlw	1	; select bank2/3
 16070  17EC  0087               	movwf	7
 16071  17ED  0181               	clrf	1
 16072                           
 16073                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16074  17EE  0875               	movf	_DelayOff,w
 16075  17EF  0086               	movwf	6
 16076  17F0  3001               	movlw	1	; select bank2/3
 16077  17F1  0087               	movwf	7
 16078  17F2  1081               	bcf	1,1
 16079                           
 16080                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 16081  17F3  3064               	movlw	100
 16082  17F4  00A9               	movwf	setBuz@time
 16083  17F5  3000               	movlw	0
 16084  17F6  00AA               	movwf	setBuz@time+1
 16085  17F7  3001               	movlw	1
 16086  17F8  3196  2696  3197   	fcall	_setBuz
 16087                           
 16088                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 16089  17FB  0020               	movlb	0	; select bank0
 16090  17FC  086E               	movf	DlyOff_Main@sw,w
 16091  17FD  3188  20F3         	fcall	_setDimmerLights_ErrorClose
 16092  17FF  0008               	return
 16093  1800                     __end_of_DlyOff_Main:	
 16094                           
 16095                           	psect	text98
 16096  08F3                     __ptext98:	
 16097 ;; *************** function _setDimmerLights_ErrorClose *****************
 16098 ;; Defined at:
 16099 ;;		line 814 in file "../src/Dimmer_B1.c"
 16100 ;; Parameters:    Size  Location     Type
 16101 ;;  lights          1    wreg     unsigned char 
 16102 ;; Auto vars:     Size  Location     Type
 16103 ;;  lights          1    1[BANK1 ] unsigned char 
 16104 ;;  i               2    2[BANK1 ] int 
 16105 ;;  count           1    0[BANK1 ] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;		None               void
 16108 ;; Registers used:
 16109 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;Total ram usage:        5 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    9
 16122 ;; This function calls:
 16123 ;;		_DimmerLightsPointSelect
 16124 ;;		_getDimmerLights_Status
 16125 ;;		_setDimmerLights_SwOff
 16126 ;; This function is called by:
 16127 ;;		_DlyOff_Main
 16128 ;;		_setControl_Lights_Table
 16129 ;; This function uses a non-reentrant model
 16130 ;;
 16131                           
 16132                           
 16133                           ;psect for function _setDimmerLights_ErrorClose
 16134  08F3                     _setDimmerLights_ErrorClose:	
 16135                           
 16136                           ;incstack = 0
 16137                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16138                           ;setDimmerLights_ErrorClose@lights stored from wreg
 16139  08F3  0021               	movlb	1	; select bank1
 16140  08F4  00E9               	movwf	setDimmerLights_ErrorClose@lights^(0+128)
 16141                           
 16142                           ;Dimmer_B1.c: 815: if (lights == 255) {
 16143  08F5  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16144  08F6  3AFF               	xorlw	255
 16145  08F7  1D03               	skipz
 16146  08F8  2936               	goto	l9269
 16147                           
 16148                           ;Dimmer_B1.c: 820: char count = 2;
 16149  08F9  3002               	movlw	2
 16150  08FA  0020               	movlb	0	; select bank0
 16151  08FB  00EB               	movwf	??_setDimmerLights_ErrorClose
 16152  08FC  086B               	movf	??_setDimmerLights_ErrorClose,w
 16153  08FD  0021               	movlb	1	; select bank1
 16154  08FE  00E8               	movwf	setDimmerLights_ErrorClose@count^(0+128)
 16155                           
 16156                           ;Dimmer_B1.c: 825: for (int i = 0; i < count; i++) {
 16157  08FF  01EA               	clrf	setDimmerLights_ErrorClose@i^(0+128)
 16158  0900  01EB               	clrf	(setDimmerLights_ErrorClose@i+1)^(0+128)
 16159  0901                     l9267:	
 16160  0901  086B               	movf	(setDimmerLights_ErrorClose@i+1)^(0+128),w
 16161  0902  3A80               	xorlw	128
 16162  0903  0020               	movlb	0	; select bank0
 16163  0904  00EB               	movwf	??_setDimmerLights_ErrorClose
 16164  0905  3080               	movlw	128
 16165  0906  026B               	subwf	??_setDimmerLights_ErrorClose,w
 16166  0907  1D03               	skipz
 16167  0908  290C               	goto	u10055
 16168  0909  0021               	movlb	1	; select bank1
 16169  090A  0868               	movf	setDimmerLights_ErrorClose@count^(0+128),w
 16170  090B  026A               	subwf	setDimmerLights_ErrorClose@i^(0+128),w
 16171  090C                     u10055:	
 16172  090C  1803               	btfsc	3,0
 16173  090D  0008               	return
 16174                           
 16175                           ;Dimmer_B1.c: 826: DimmerLightsPointSelect(i + 1);
 16176  090E  0021               	movlb	1	; select bank1
 16177  090F  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 16178  0910  3E01               	addlw	1
 16179  0911  319B  23FC  3188   	fcall	_DimmerLightsPointSelect
 16180                           
 16181                           ;Dimmer_B1.c: 827: if (getDimmerLights_Status(i + 1) == 1) {
 16182  0914  0021               	movlb	1	; select bank1
 16183  0915  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 16184  0916  3E01               	addlw	1
 16185  0917  319B  236F  3188   	fcall	_getDimmerLights_Status
 16186  091A  3A01               	xorlw	1
 16187  091B  1D03               	skipz
 16188  091C  2930               	goto	l9265
 16189                           
 16190                           ;Dimmer_B1.c: 828: DimmerLights->SwFlag = 1;
 16191  091D  0020               	movlb	0	; select bank0
 16192  091E  086F               	movf	_DimmerLights,w
 16193  091F  3E0B               	addlw	11
 16194  0920  0086               	movwf	6
 16195  0921  3001               	movlw	1	; select bank2/3
 16196  0922  0087               	movwf	7
 16197  0923  1481               	bsf	1,1
 16198                           
 16199                           ;Dimmer_B1.c: 829: DimmerLights->Status = 0;
 16200  0924  086F               	movf	_DimmerLights,w
 16201  0925  3E02               	addlw	2
 16202  0926  0086               	movwf	6
 16203  0927  3001               	movlw	1	; select bank2/3
 16204  0928  0087               	movwf	7
 16205  0929  1081               	bcf	1,1
 16206                           
 16207                           ;Dimmer_B1.c: 830: setDimmerLights_SwOff(i + 1);
 16208  092A  0021               	movlb	1	; select bank1
 16209  092B  086A               	movf	setDimmerLights_ErrorClose@i^(0+128),w
 16210  092C  3E01               	addlw	1
 16211  092D  3194  2404  3188   	fcall	_setDimmerLights_SwOff
 16212  0930                     l9265:	
 16213  0930  3001               	movlw	1
 16214  0931  0021               	movlb	1	; select bank1
 16215  0932  07EA               	addwf	setDimmerLights_ErrorClose@i^(0+128),f
 16216  0933  3000               	movlw	0
 16217  0934  3DEB               	addwfc	(setDimmerLights_ErrorClose@i+1)^(0+128),f
 16218  0935  2901               	goto	l9267
 16219  0936                     l9269:	
 16220                           ;Dimmer_B1.c: 831: }
 16221                           ;Dimmer_B1.c: 832: }
 16222                           ;Dimmer_B1.c: 833: } else {
 16223                           
 16224                           
 16225                           ;Dimmer_B1.c: 834: DimmerLightsPointSelect(lights);
 16226  0936  0021               	movlb	1	; select bank1
 16227  0937  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16228  0938  319B  23FC  3188   	fcall	_DimmerLightsPointSelect
 16229                           
 16230                           ;Dimmer_B1.c: 835: if (getDimmerLights_Status(lights) == 1) {
 16231  093B  0021               	movlb	1	; select bank1
 16232  093C  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16233  093D  319B  236F  3188   	fcall	_getDimmerLights_Status
 16234  0940  3A01               	xorlw	1
 16235  0941  1D03               	skipz
 16236  0942  0008               	return
 16237                           
 16238                           ;Dimmer_B1.c: 836: DimmerLights->SwFlag = 1;
 16239  0943  0020               	movlb	0	; select bank0
 16240  0944  086F               	movf	_DimmerLights,w
 16241  0945  3E0B               	addlw	11
 16242  0946  0086               	movwf	6
 16243  0947  3001               	movlw	1	; select bank2/3
 16244  0948  0087               	movwf	7
 16245  0949  1481               	bsf	1,1
 16246                           
 16247                           ;Dimmer_B1.c: 837: DimmerLights->Status = 0;
 16248  094A  086F               	movf	_DimmerLights,w
 16249  094B  3E02               	addlw	2
 16250  094C  0086               	movwf	6
 16251  094D  3001               	movlw	1	; select bank2/3
 16252  094E  0087               	movwf	7
 16253  094F  1081               	bcf	1,1
 16254                           
 16255                           ;Dimmer_B1.c: 838: setDimmerLights_SwOff(lights);
 16256  0950  0021               	movlb	1	; select bank1
 16257  0951  0869               	movf	setDimmerLights_ErrorClose@lights^(0+128),w
 16258  0952  3194  2404         	fcall	_setDimmerLights_SwOff
 16259  0954  0008               	return
 16260  0955                     __end_of_setDimmerLights_ErrorClose:	
 16261                           
 16262                           	psect	text99
 16263  1404                     __ptext99:	
 16264 ;; *************** function _setDimmerLights_SwOff *****************
 16265 ;; Defined at:
 16266 ;;		line 426 in file "../src/Dimmer_B1.c"
 16267 ;; Parameters:    Size  Location     Type
 16268 ;;  sw              1    wreg     unsigned char 
 16269 ;; Auto vars:     Size  Location     Type
 16270 ;;  sw              1   74[BANK0 ] unsigned char 
 16271 ;; Return value:  Size  Location     Type
 16272 ;;		None               void
 16273 ;; Registers used:
 16274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16275 ;; Tracked objects:
 16276 ;;		On entry : 0/0
 16277 ;;		On exit  : 0/0
 16278 ;;		Unchanged: 0/0
 16279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16284 ;;Total ram usage:        1 bytes
 16285 ;; Hardware stack levels used:    1
 16286 ;; Hardware stack levels required when called:    8
 16287 ;; This function calls:
 16288 ;;		_DimmerLightsPointSelect
 16289 ;;		_getDelayOff_GO
 16290 ;;		_setDelayOff_GO
 16291 ;; This function is called by:
 16292 ;;		_setDimmerLights_ErrorClose
 16293 ;;		_Exception_Main
 16294 ;;		_setRFSW_Control
 16295 ;;		_setSw_Main
 16296 ;; This function uses a non-reentrant model
 16297 ;;
 16298                           
 16299                           
 16300                           ;psect for function _setDimmerLights_SwOff
 16301  1404                     _setDimmerLights_SwOff:	
 16302                           
 16303                           ;incstack = 0
 16304                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16305                           ;setDimmerLights_SwOff@sw stored from wreg
 16306  1404  0020               	movlb	0	; select bank0
 16307  1405  00EA               	movwf	setDimmerLights_SwOff@sw
 16308                           
 16309                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(sw);
 16310  1406  086A               	movf	setDimmerLights_SwOff@sw,w
 16311  1407  319B  23FC  3194   	fcall	_DimmerLightsPointSelect
 16312                           
 16313                           ;Dimmer_B1.c: 429: if (DimmerLights->SwFlag == 1) {
 16314  140A  0020               	movlb	0	; select bank0
 16315  140B  086F               	movf	_DimmerLights,w
 16316  140C  3E0B               	addlw	11
 16317  140D  0086               	movwf	6
 16318  140E  3001               	movlw	1	; select bank2/3
 16319  140F  0087               	movwf	7
 16320  1410  1C81               	btfss	1,1
 16321  1411  0008               	return
 16322                           
 16323                           ;Dimmer_B1.c: 430: DimmerLights->SwFlag = 0;
 16324  1412  086F               	movf	_DimmerLights,w
 16325  1413  3E0B               	addlw	11
 16326  1414  0086               	movwf	6
 16327  1415  3001               	movlw	1	; select bank2/3
 16328  1416  0087               	movwf	7
 16329  1417  1081               	bcf	1,1
 16330                           
 16331                           ;Dimmer_B1.c: 431: if (DimmerLights->Status == 1) {
 16332  1418  086F               	movf	_DimmerLights,w
 16333  1419  3E02               	addlw	2
 16334  141A  0086               	movwf	6
 16335  141B  3001               	movlw	1	; select bank2/3
 16336  141C  0087               	movwf	7
 16337  141D  1C81               	btfss	1,1
 16338  141E  2C39               	goto	l9115
 16339                           
 16340                           ;Dimmer_B1.c: 433: if (DimmerLights->SwAdj == 1) {
 16341  141F  086F               	movf	_DimmerLights,w
 16342  1420  3E0B               	addlw	11
 16343  1421  0086               	movwf	6
 16344  1422  3001               	movlw	1	; select bank2/3
 16345  1423  0087               	movwf	7
 16346  1424  1D01               	btfss	1,2
 16347  1425  0008               	return
 16348                           
 16349                           ;Dimmer_B1.c: 434: DimmerLights->SwAdj = 0;
 16350  1426  086F               	movf	_DimmerLights,w
 16351  1427  3E0B               	addlw	11
 16352  1428  0086               	movwf	6
 16353  1429  3001               	movlw	1	; select bank2/3
 16354  142A  0087               	movwf	7
 16355  142B  1101               	bcf	1,2
 16356                           
 16357                           ;Dimmer_B1.c: 436: DimmerLights->TriggerAdj = 1;
 16358  142C  086F               	movf	_DimmerLights,w
 16359  142D  3E0A               	addlw	10
 16360  142E  0086               	movwf	6
 16361  142F  3001               	movlw	1	; select bank2/3
 16362  1430  0087               	movwf	7
 16363  1431  1581               	bsf	1,3
 16364                           
 16365                           ;Dimmer_B1.c: 437: DimmerLights->SwitchAdj = 0;
 16366  1432  086F               	movf	_DimmerLights,w
 16367  1433  3E0A               	addlw	10
 16368  1434  0086               	movwf	6
 16369  1435  3001               	movlw	1	; select bank2/3
 16370  1436  0087               	movwf	7
 16371  1437  1101               	bcf	1,2
 16372                           
 16373                           ;Dimmer_B1.c: 438: }
 16374                           ;Dimmer_B1.c: 439: } else {
 16375  1438  0008               	return
 16376  1439                     l9115:	
 16377                           
 16378                           ;Dimmer_B1.c: 440: DimmerLights->Trigger = 1;
 16379  1439  086F               	movf	_DimmerLights,w
 16380  143A  3E0A               	addlw	10
 16381  143B  0086               	movwf	6
 16382  143C  3001               	movlw	1	; select bank2/3
 16383  143D  0087               	movwf	7
 16384  143E  1481               	bsf	1,1
 16385                           
 16386                           ;Dimmer_B1.c: 441: DimmerLights->Switch = 0;
 16387  143F  086F               	movf	_DimmerLights,w
 16388  1440  3E0A               	addlw	10
 16389  1441  0086               	movwf	6
 16390  1442  3001               	movlw	1	; select bank2/3
 16391  1443  0087               	movwf	7
 16392  1444  1001               	bcf	1,0
 16393                           
 16394                           ;Dimmer_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
 16395  1445  086A               	movf	setDimmerLights_SwOff@sw,w
 16396  1446  319B  235F  3194   	fcall	_getDelayOff_GO
 16397  1449  3A01               	xorlw	1
 16398  144A  1D03               	skipz
 16399  144B  0008               	return
 16400                           
 16401                           ;Dimmer_B1.c: 445: setDelayOff_GO(sw, 0, 0);
 16402  144C  0020               	movlb	0	; select bank0
 16403  144D  01E6               	clrf	setDelayOff_GO@command
 16404  144E  01E7               	clrf	setDelayOff_GO@value
 16405  144F  086A               	movf	setDimmerLights_SwOff@sw,w
 16406  1450  3195  2544         	fcall	_setDelayOff_GO
 16407  1452  0008               	return
 16408  1453                     __end_of_setDimmerLights_SwOff:	
 16409                           
 16410                           	psect	text100
 16411  1544                     __ptext100:	
 16412 ;; *************** function _setDelayOff_GO *****************
 16413 ;; Defined at:
 16414 ;;		line 83 in file "../src/DelayOff_B1.c"
 16415 ;; Parameters:    Size  Location     Type
 16416 ;;  sw              1    wreg     unsigned char 
 16417 ;;  command         1   70[BANK0 ] unsigned char 
 16418 ;;  value           1   71[BANK0 ] unsigned char 
 16419 ;; Auto vars:     Size  Location     Type
 16420 ;;  sw              1   73[BANK0 ] unsigned char 
 16421 ;; Return value:  Size  Location     Type
 16422 ;;		None               void
 16423 ;; Registers used:
 16424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16425 ;; Tracked objects:
 16426 ;;		On entry : 0/0
 16427 ;;		On exit  : 0/0
 16428 ;;		Unchanged: 0/0
 16429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16430 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16433 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;Total ram usage:        4 bytes
 16435 ;; Hardware stack levels used:    1
 16436 ;; Hardware stack levels required when called:    7
 16437 ;; This function calls:
 16438 ;;		_DelayOffPointSelect
 16439 ;;		_DelayTimejudge
 16440 ;;		_setProductData
 16441 ;; This function is called by:
 16442 ;;		_setDimmerLights_SwOff
 16443 ;;		_setRFSW_Control
 16444 ;; This function uses a non-reentrant model
 16445 ;;
 16446                           
 16447                           
 16448                           ;psect for function _setDelayOff_GO
 16449  1544                     _setDelayOff_GO:	
 16450                           
 16451                           ;incstack = 0
 16452                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16453                           ;setDelayOff_GO@sw stored from wreg
 16454  1544  0020               	movlb	0	; select bank0
 16455  1545  00E9               	movwf	setDelayOff_GO@sw
 16456                           
 16457                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16458  1546  0869               	movf	setDelayOff_GO@sw,w
 16459  1547  319C  245C  3195   	fcall	_DelayOffPointSelect
 16460                           
 16461                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16462  154A  0020               	movlb	0	; select bank0
 16463  154B  0866               	movf	setDelayOff_GO@command,w
 16464  154C  3A01               	xorlw	1
 16465  154D  3000               	movlw	0
 16466  154E  1903               	skipnz
 16467  154F  3001               	movlw	1
 16468  1550  00E8               	movwf	??_setDelayOff_GO
 16469  1551  0875               	movf	_DelayOff,w
 16470  1552  0086               	movwf	6
 16471  1553  3001               	movlw	1	; select bank2/3
 16472  1554  0087               	movwf	7
 16473  1555  0DE8               	rlf	??_setDelayOff_GO,f
 16474  1556  0801               	movf	1,w
 16475  1557  0668               	xorwf	??_setDelayOff_GO,w
 16476  1558  39FD               	andlw	-3
 16477  1559  0668               	xorwf	??_setDelayOff_GO,w
 16478  155A  0081               	movwf	1
 16479                           
 16480                           ;DelayOff_B1.c: 89: if (command == 1) {
 16481  155B  0866               	movf	setDelayOff_GO@command,w
 16482  155C  3A01               	xorlw	1
 16483  155D  1D03               	skipz
 16484  155E  2D82               	goto	l9033
 16485                           
 16486                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16487  155F  0867               	movf	setDelayOff_GO@value,w
 16488  1560  319F  277A  3195   	fcall	_DelayTimejudge
 16489  1563  0020               	movlb	0	; select bank0
 16490  1564  00E8               	movwf	??_setDelayOff_GO
 16491  1565  0A75               	incf	_DelayOff,w
 16492  1566  0086               	movwf	6
 16493  1567  3001               	movlw	1	; select bank2/3
 16494  1568  0087               	movwf	7
 16495  1569  0868               	movf	??_setDelayOff_GO,w
 16496  156A  0081               	movwf	1
 16497                           
 16498                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16499  156B  300F               	movlw	15
 16500  156C  0567               	andwf	setDelayOff_GO@value,w
 16501  156D  00E8               	movwf	??_setDelayOff_GO
 16502  156E  0868               	movf	??_setDelayOff_GO,w
 16503  156F  3A05               	xorlw	5
 16504  1570  1903               	skipnz
 16505  1571  2D76               	goto	l9027
 16506  1572  0867               	movf	setDelayOff_GO@value,w
 16507  1573  390F               	andlw	15
 16508  1574  1D03               	btfss	3,2
 16509  1575  2D7C               	goto	l9031
 16510  1576                     l9027:	
 16511  1576  3026               	movlw	38
 16512  1577  0267               	subwf	setDelayOff_GO@value,w
 16513  1578  1803               	skipnc
 16514  1579  2D7C               	goto	l9031
 16515                           
 16516                           ;DelayOff_B1.c: 92: setProductData(26 + sw, value);
 16517  157A  0867               	movf	setDelayOff_GO@value,w
 16518  157B  2D7E               	goto	L8
 16519  157C                     l9031:	
 16520                           ;DelayOff_B1.c: 93: } else {
 16521                           
 16522                           
 16523                           ;DelayOff_B1.c: 94: setProductData(26 + sw, 0x05);
 16524  157C  3005               	movlw	5
 16525  157D  0020               	movlb	0	; select bank0
 16526  157E                     L8:	
 16527  157E  00E8               	movwf	??_setDelayOff_GO
 16528  157F  0868               	movf	??_setDelayOff_GO,w
 16529  1580  00E2               	movwf	setProductData@value
 16530  1581  2D84               	goto	L7
 16531  1582                     l9033:	
 16532                           ;DelayOff_B1.c: 95: }
 16533                           ;DelayOff_B1.c: 96: } else {
 16534                           
 16535                           
 16536                           ;DelayOff_B1.c: 97: setProductData(sw + 26, 0);
 16537  1582  0020               	movlb	0	; select bank0
 16538  1583  01E2               	clrf	setProductData@value
 16539  1584                     L7:	
 16540  1584  0869               	movf	setDelayOff_GO@sw,w
 16541  1585  3E1A               	addlw	26
 16542  1586  319B  2324         	fcall	_setProductData
 16543                           
 16544                           ;DelayOff_B1.c: 98: }
 16545                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16546  1588  0875               	movf	_DelayOff,w
 16547  1589  3E02               	addlw	2
 16548  158A  0086               	movwf	6
 16549  158B  3001               	movlw	1	; select bank2/3
 16550  158C  0087               	movwf	7
 16551  158D  3000               	movlw	0
 16552  158E  3FC0               	movwi [0]fsr1
 16553  158F  3FC1               	movwi [1]fsr1
 16554                           
 16555                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16556  1590  0875               	movf	_DelayOff,w
 16557  1591  3E04               	addlw	4
 16558  1592  0086               	movwf	6
 16559  1593  3001               	movlw	1	; select bank2/3
 16560  1594  0087               	movwf	7
 16561  1595  0181               	clrf	1
 16562  1596  0008               	return
 16563  1597                     __end_of_setDelayOff_GO:	
 16564                           
 16565                           	psect	text101
 16566  1B24                     __ptext101:	
 16567 ;; *************** function _setProductData *****************
 16568 ;; Defined at:
 16569 ;;		line 592 in file "../src/Main_B1.c"
 16570 ;; Parameters:    Size  Location     Type
 16571 ;;  address         1    wreg     unsigned char 
 16572 ;;  value           1   66[BANK0 ] unsigned char 
 16573 ;; Auto vars:     Size  Location     Type
 16574 ;;  address         1   69[BANK0 ] unsigned char 
 16575 ;; Return value:  Size  Location     Type
 16576 ;;		None               void
 16577 ;; Registers used:
 16578 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16579 ;; Tracked objects:
 16580 ;;		On entry : 0/0
 16581 ;;		On exit  : 0/0
 16582 ;;		Unchanged: 0/0
 16583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16584 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16586 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;Total ram usage:        4 bytes
 16589 ;; Hardware stack levels used:    1
 16590 ;; Hardware stack levels required when called:    5
 16591 ;; This function calls:
 16592 ;;		Nothing
 16593 ;; This function is called by:
 16594 ;;		_setDelayOff_GO
 16595 ;;		_setDimmerLights
 16596 ;;		_setDimmerLights_Adj
 16597 ;;		_Load_Main
 16598 ;;		_setTemp_Main
 16599 ;;		_setLog_Code
 16600 ;;		_setControl_Lights_Table
 16601 ;;		_setRFSW_AdjControl
 16602 ;;		_setRF_DimmerValue
 16603 ;;		_setRF_DimmerLights
 16604 ;; This function uses a non-reentrant model
 16605 ;;
 16606                           
 16607                           
 16608                           ;psect for function _setProductData
 16609  1B24                     _setProductData:	
 16610                           
 16611                           ;incstack = 0
 16612                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 16613                           ;setProductData@address stored from wreg
 16614  1B24  0020               	movlb	0	; select bank0
 16615  1B25  00E5               	movwf	setProductData@address
 16616                           
 16617                           ;Main_B1.c: 593: product->Data[address] = value;
 16618  1B26  0862               	movf	setProductData@value,w
 16619  1B27  00E3               	movwf	??_setProductData
 16620  1B28  0865               	movf	setProductData@address,w
 16621  1B29  0779               	addwf	_product,w
 16622  1B2A  00E4               	movwf	??_setProductData+1
 16623  1B2B  0864               	movf	??_setProductData+1,w
 16624  1B2C  0086               	movwf	6
 16625  1B2D  3002               	movlw	2	; select bank4/5
 16626  1B2E  0087               	movwf	7
 16627  1B2F  0863               	movf	??_setProductData,w
 16628  1B30  0081               	movwf	1
 16629  1B31  0008               	return
 16630  1B32                     __end_of_setProductData:	
 16631                           
 16632                           	psect	text102
 16633  1F7A                     __ptext102:	
 16634 ;; *************** function _DelayTimejudge *****************
 16635 ;; Defined at:
 16636 ;;		line 112 in file "../src/DelayOff_B1.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;  value           1    wreg     unsigned char 
 16639 ;; Auto vars:     Size  Location     Type
 16640 ;;  value           1    9[BANK0 ] unsigned char 
 16641 ;;  k               1    8[BANK0 ] unsigned char 
 16642 ;;  j               1    7[BANK0 ] unsigned char 
 16643 ;;  i               1    6[BANK0 ] unsigned char 
 16644 ;; Return value:  Size  Location     Type
 16645 ;;                  1    wreg      unsigned char 
 16646 ;; Registers used:
 16647 ;;		wreg, status,2, status,0, pclath, cstack
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16657 ;;Total ram usage:        6 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    6
 16660 ;; This function calls:
 16661 ;;		___bmul
 16662 ;; This function is called by:
 16663 ;;		_setDelayOff_GO
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           
 16668                           ;psect for function _DelayTimejudge
 16669  1F7A                     _DelayTimejudge:	
 16670                           
 16671                           ;incstack = 0
 16672                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16673                           ;DelayTimejudge@value stored from wreg
 16674  1F7A  0020               	movlb	0	; select bank0
 16675  1F7B  00A9               	movwf	DelayTimejudge@value
 16676                           
 16677                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16678  1F7C  3005               	movlw	5
 16679  1F7D  00A4               	movwf	??_DelayTimejudge
 16680  1F7E  0824               	movf	??_DelayTimejudge,w
 16681  1F7F  00A6               	movwf	DelayTimejudge@i
 16682  1F80  01A7               	clrf	DelayTimejudge@j
 16683  1F81  01A8               	clrf	DelayTimejudge@k
 16684                           
 16685                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16686  1F82  3031               	movlw	49
 16687  1F83  0229               	subwf	DelayTimejudge@value,w
 16688  1F84  1803               	skipnc
 16689  1F85  2FA2               	goto	l8881
 16690                           
 16691                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16692  1F86  0829               	movf	DelayTimejudge@value,w
 16693  1F87  390F               	andlw	15
 16694  1F88  00A4               	movwf	??_DelayTimejudge
 16695  1F89  0824               	movf	??_DelayTimejudge,w
 16696  1F8A  00A7               	movwf	DelayTimejudge@j
 16697                           
 16698                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16699  1F8B  0829               	movf	DelayTimejudge@value,w
 16700  1F8C  00A4               	movwf	??_DelayTimejudge
 16701  1F8D  3004               	movlw	4
 16702  1F8E                     u9465:	
 16703  1F8E  36A4               	lsrf	??_DelayTimejudge,f
 16704  1F8F  0B89               	decfsz	9,f
 16705  1F90  2F8E               	goto	u9465
 16706  1F91  0824               	movf	??_DelayTimejudge,w
 16707  1F92  390F               	andlw	15
 16708  1F93  00A5               	movwf	??_DelayTimejudge+1
 16709  1F94  0825               	movf	??_DelayTimejudge+1,w
 16710  1F95  00A8               	movwf	DelayTimejudge@k
 16711                           
 16712                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16713  1F96  300A               	movlw	10
 16714  1F97  00A4               	movwf	??_DelayTimejudge
 16715  1F98  0824               	movf	??_DelayTimejudge,w
 16716  1F99  00A0               	movwf	___bmul@multiplicand
 16717  1F9A  0828               	movf	DelayTimejudge@k,w
 16718  1F9B  319B  23B4         	fcall	___bmul
 16719  1F9D  0020               	movlb	0	; select bank0
 16720  1F9E  0727               	addwf	DelayTimejudge@j,w
 16721  1F9F  00A5               	movwf	??_DelayTimejudge+1
 16722  1FA0  0825               	movf	??_DelayTimejudge+1,w
 16723  1FA1  00A6               	movwf	DelayTimejudge@i
 16724  1FA2                     l8881:	
 16725                           
 16726                           ;DelayOff_B1.c: 118: }
 16727                           ;DelayOff_B1.c: 139: return i;
 16728  1FA2  0826               	movf	DelayTimejudge@i,w
 16729  1FA3  0008               	return
 16730  1FA4                     __end_of_DelayTimejudge:	
 16731                           
 16732                           	psect	text103
 16733  1BB4                     __ptext103:	
 16734 ;; *************** function ___bmul *****************
 16735 ;; Defined at:
 16736 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16737 ;; Parameters:    Size  Location     Type
 16738 ;;  multiplier      1    wreg     unsigned char 
 16739 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16740 ;; Auto vars:     Size  Location     Type
 16741 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16742 ;;  product         1    2[BANK0 ] unsigned char 
 16743 ;; Return value:  Size  Location     Type
 16744 ;;                  1    wreg      unsigned char 
 16745 ;; Registers used:
 16746 ;;		wreg, status,2, status,0
 16747 ;; Tracked objects:
 16748 ;;		On entry : 0/0
 16749 ;;		On exit  : 0/0
 16750 ;;		Unchanged: 0/0
 16751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16752 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16756 ;;Total ram usage:        4 bytes
 16757 ;; Hardware stack levels used:    1
 16758 ;; Hardware stack levels required when called:    5
 16759 ;; This function calls:
 16760 ;;		Nothing
 16761 ;; This function is called by:
 16762 ;;		_DelayTimejudge
 16763 ;; This function uses a non-reentrant model
 16764 ;;
 16765                           
 16766                           
 16767                           ;psect for function ___bmul
 16768  1BB4                     ___bmul:	
 16769                           
 16770                           ;incstack = 0
 16771                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16772                           ;___bmul@multiplier stored from wreg
 16773  1BB4  0020               	movlb	0	; select bank0
 16774  1BB5  00A3               	movwf	___bmul@multiplier
 16775  1BB6  01A2               	clrf	___bmul@product
 16776  1BB7                     l8619:	
 16777  1BB7  1C23               	btfss	___bmul@multiplier,0
 16778  1BB8  2BBD               	goto	l8623
 16779  1BB9  0820               	movf	___bmul@multiplicand,w
 16780  1BBA  00A1               	movwf	??___bmul
 16781  1BBB  0821               	movf	??___bmul,w
 16782  1BBC  07A2               	addwf	___bmul@product,f
 16783  1BBD                     l8623:	
 16784  1BBD  1003               	clrc
 16785  1BBE  0DA0               	rlf	___bmul@multiplicand,f
 16786  1BBF  1003               	clrc
 16787  1BC0  0CA3               	rrf	___bmul@multiplier,f
 16788  1BC1  08A3               	movf	___bmul@multiplier,f
 16789  1BC2  1D03               	skipz
 16790  1BC3  2BB7               	goto	l8619
 16791  1BC4  0822               	movf	___bmul@product,w
 16792  1BC5  0008               	return
 16793  1BC6                     __end_of___bmul:	
 16794                           
 16795                           	psect	text104
 16796  1B5F                     __ptext104:	
 16797 ;; *************** function _getDelayOff_GO *****************
 16798 ;; Defined at:
 16799 ;;		line 105 in file "../src/DelayOff_B1.c"
 16800 ;; Parameters:    Size  Location     Type
 16801 ;;  sw              1    wreg     unsigned char 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  sw              1    2[BANK0 ] unsigned char 
 16804 ;;  go              1    3[BANK0 ] unsigned char 
 16805 ;; Return value:  Size  Location     Type
 16806 ;;                  1    wreg      unsigned char 
 16807 ;; Registers used:
 16808 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16809 ;; Tracked objects:
 16810 ;;		On entry : 0/0
 16811 ;;		On exit  : 0/0
 16812 ;;		Unchanged: 0/0
 16813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16818 ;;Total ram usage:        2 bytes
 16819 ;; Hardware stack levels used:    1
 16820 ;; Hardware stack levels required when called:    6
 16821 ;; This function calls:
 16822 ;;		_DelayOffPointSelect
 16823 ;; This function is called by:
 16824 ;;		_setDimmerLights_SwOff
 16825 ;;		_setRFSW_Control
 16826 ;; This function uses a non-reentrant model
 16827 ;;
 16828                           
 16829                           
 16830                           ;psect for function _getDelayOff_GO
 16831  1B5F                     _getDelayOff_GO:	
 16832                           
 16833                           ;incstack = 0
 16834                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16835                           ;getDelayOff_GO@sw stored from wreg
 16836  1B5F  0020               	movlb	0	; select bank0
 16837  1B60  00A2               	movwf	getDelayOff_GO@sw
 16838                           
 16839                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16840  1B61  0822               	movf	getDelayOff_GO@sw,w
 16841  1B62  319C  245C         	fcall	_DelayOffPointSelect
 16842                           
 16843                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16844  1B64  0875               	movf	_DelayOff,w
 16845  1B65  0086               	movwf	6
 16846  1B66  3001               	movlw	1	; select bank2/3
 16847  1B67  0087               	movwf	7
 16848  1B68  3000               	movlw	0
 16849  1B69  1881               	btfsc	1,1
 16850  1B6A  3001               	movlw	1
 16851  1B6B  0020               	movlb	0	; select bank0
 16852  1B6C  00A3               	movwf	getDelayOff_GO@go
 16853                           
 16854                           ;DelayOff_B1.c: 108: return go;
 16855  1B6D  0823               	movf	getDelayOff_GO@go,w
 16856  1B6E  0008               	return
 16857  1B6F                     __end_of_getDelayOff_GO:	
 16858                           
 16859                           	psect	text105
 16860  1B6F                     __ptext105:	
 16861 ;; *************** function _getDimmerLights_Status *****************
 16862 ;; Defined at:
 16863 ;;		line 725 in file "../src/Dimmer_B1.c"
 16864 ;; Parameters:    Size  Location     Type
 16865 ;;  lights          1    wreg     unsigned char 
 16866 ;; Auto vars:     Size  Location     Type
 16867 ;;  lights          1    2[BANK0 ] unsigned char 
 16868 ;;  status          1    3[BANK0 ] unsigned char 
 16869 ;; Return value:  Size  Location     Type
 16870 ;;                  1    wreg      unsigned char 
 16871 ;; Registers used:
 16872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16873 ;; Tracked objects:
 16874 ;;		On entry : 0/0
 16875 ;;		On exit  : 0/0
 16876 ;;		Unchanged: 0/0
 16877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;Total ram usage:        2 bytes
 16883 ;; Hardware stack levels used:    1
 16884 ;; Hardware stack levels required when called:    6
 16885 ;; This function calls:
 16886 ;;		_DimmerLightsPointSelect
 16887 ;; This function is called by:
 16888 ;;		_setDimmerLights_ErrorClose
 16889 ;;		_Exception_Main
 16890 ;;		_setRFSW_Control
 16891 ;;		_setRFSW_AdjControl
 16892 ;; This function uses a non-reentrant model
 16893 ;;
 16894                           
 16895                           
 16896                           ;psect for function _getDimmerLights_Status
 16897  1B6F                     _getDimmerLights_Status:	
 16898                           
 16899                           ;incstack = 0
 16900                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16901                           ;getDimmerLights_Status@lights stored from wreg
 16902  1B6F  0020               	movlb	0	; select bank0
 16903  1B70  00A2               	movwf	getDimmerLights_Status@lights
 16904                           
 16905                           ;Dimmer_B1.c: 726: DimmerLightsPointSelect(lights);
 16906  1B71  0822               	movf	getDimmerLights_Status@lights,w
 16907  1B72  319B  23FC         	fcall	_DimmerLightsPointSelect
 16908                           
 16909                           ;Dimmer_B1.c: 727: char status = DimmerLights->Status == 1 ? 1 : 0;
 16910  1B74  0020               	movlb	0	; select bank0
 16911  1B75  086F               	movf	_DimmerLights,w
 16912  1B76  3E02               	addlw	2
 16913  1B77  0086               	movwf	6
 16914  1B78  3001               	movlw	1	; select bank2/3
 16915  1B79  0087               	movwf	7
 16916  1B7A  3000               	movlw	0
 16917  1B7B  1881               	btfsc	1,1
 16918  1B7C  3001               	movlw	1
 16919  1B7D  00A3               	movwf	getDimmerLights_Status@status
 16920                           
 16921                           ;Dimmer_B1.c: 728: return status;
 16922  1B7E  0823               	movf	getDimmerLights_Status@status,w
 16923  1B7F  0008               	return
 16924  1B80                     __end_of_getDimmerLights_Status:	
 16925                           
 16926                           	psect	text106
 16927  1BFC                     __ptext106:	
 16928 ;; *************** function _DimmerLightsPointSelect *****************
 16929 ;; Defined at:
 16930 ;;		line 321 in file "../src/Dimmer_B1.c"
 16931 ;; Parameters:    Size  Location     Type
 16932 ;;  lights          1    wreg     unsigned char 
 16933 ;; Auto vars:     Size  Location     Type
 16934 ;;  lights          1    1[BANK0 ] unsigned char 
 16935 ;; Return value:  Size  Location     Type
 16936 ;;		None               void
 16937 ;; Registers used:
 16938 ;;		wreg
 16939 ;; Tracked objects:
 16940 ;;		On entry : 0/0
 16941 ;;		On exit  : 0/0
 16942 ;;		Unchanged: 0/0
 16943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;Total ram usage:        2 bytes
 16949 ;; Hardware stack levels used:    1
 16950 ;; Hardware stack levels required when called:    5
 16951 ;; This function calls:
 16952 ;;		Nothing
 16953 ;; This function is called by:
 16954 ;;		_setDimmerLights_Initialization
 16955 ;;		_setDimmerLights_SwOn
 16956 ;;		_setDimmerLights_SwOff
 16957 ;;		_setDimmerLights_AdjOn
 16958 ;;		_setDimmerLights_Main
 16959 ;;		_getDimmerLights_Status
 16960 ;;		_getAll_DimmerLights_AdjSw
 16961 ;;		_setDimmerLights_ErrorClose
 16962 ;;		_setDimmerLights_AdjRF
 16963 ;;		_setDimmerLights_Status
 16964 ;;		_setDimmerLights_GO
 16965 ;;		_setDimmerLights_MaxmumValue
 16966 ;;		_setDimmerLights_Trigger
 16967 ;;		_setDimmerLights_TriggerAdj
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           
 16972                           ;psect for function _DimmerLightsPointSelect
 16973  1BFC                     _DimmerLightsPointSelect:	
 16974                           
 16975                           ;incstack = 0
 16976                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16977                           ;DimmerLightsPointSelect@lights stored from wreg
 16978  1BFC  0020               	movlb	0	; select bank0
 16979  1BFD  00A1               	movwf	DimmerLightsPointSelect@lights
 16980                           
 16981                           ;Dimmer_B1.c: 323: if (lights == 1) {
 16982  1BFE  0821               	movf	DimmerLightsPointSelect@lights,w
 16983  1BFF  3A01               	xorlw	1
 16984  1C00  1D03               	skipz
 16985  1C01  2C06               	goto	l762
 16986                           
 16987                           ;Dimmer_B1.c: 324: DimmerLights = &DimmerLights1;
 16988  1C02  3055               	movlw	_DimmerLights1& (0+255)
 16989  1C03  00A0               	movwf	??_DimmerLightsPointSelect
 16990  1C04  0820               	movf	??_DimmerLightsPointSelect,w
 16991  1C05  00EF               	movwf	_DimmerLights
 16992  1C06                     l762:	
 16993                           
 16994                           ;Dimmer_B1.c: 325: }
 16995                           ;Dimmer_B1.c: 328: if (lights == 2) {
 16996  1C06  0821               	movf	DimmerLightsPointSelect@lights,w
 16997  1C07  3A02               	xorlw	2
 16998  1C08  1D03               	skipz
 16999  1C09  0008               	return
 17000                           
 17001                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights2;
 17002  1C0A  30BE               	movlw	_DimmerLights2& (0+255)
 17003  1C0B  00A0               	movwf	??_DimmerLightsPointSelect
 17004  1C0C  0820               	movf	??_DimmerLightsPointSelect,w
 17005  1C0D  00EF               	movwf	_DimmerLights
 17006  1C0E  0008               	return
 17007  1C0F                     __end_of_DimmerLightsPointSelect:	
 17008                           
 17009                           	psect	text107
 17010  1696                     __ptext107:	
 17011 ;; *************** function _setBuz *****************
 17012 ;; Defined at:
 17013 ;;		line 22 in file "../src/Buzzer_B1.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;  count           1    wreg     unsigned char 
 17016 ;;  time            2    9[BANK0 ] int 
 17017 ;; Auto vars:     Size  Location     Type
 17018 ;;  count           1   12[BANK0 ] unsigned char 
 17019 ;; Return value:  Size  Location     Type
 17020 ;;		None               void
 17021 ;; Registers used:
 17022 ;;		wreg, status,2, status,0, pclath, cstack
 17023 ;; Tracked objects:
 17024 ;;		On entry : 0/0
 17025 ;;		On exit  : 0/0
 17026 ;;		Unchanged: 0/0
 17027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;Total ram usage:        4 bytes
 17033 ;; Hardware stack levels used:    1
 17034 ;; Hardware stack levels required when called:    6
 17035 ;; This function calls:
 17036 ;;		___awdiv
 17037 ;; This function is called by:
 17038 ;;		_DlyOff_Main
 17039 ;;		_setDimmerLights_SwOn
 17040 ;;		_setDimmerLights_Adj
 17041 ;;		_my_MainTimer
 17042 ;;		_Exception_Main
 17043 ;;		_setTemp_Main
 17044 ;;		_setLog_Code
 17045 ;;		_setControl_Lights_Table
 17046 ;;		_setRFSW_Control
 17047 ;;		_setSw_Main
 17048 ;; This function uses a non-reentrant model
 17049 ;;
 17050                           
 17051                           
 17052                           ;psect for function _setBuz
 17053  1696                     _setBuz:	
 17054                           
 17055                           ;incstack = 0
 17056                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17057                           ;setBuz@count stored from wreg
 17058  1696  0020               	movlb	0	; select bank0
 17059  1697  00AC               	movwf	setBuz@count
 17060                           
 17061                           ;Buzzer_B1.c: 23: time /= 10;
 17062  1698  300A               	movlw	10
 17063  1699  00A0               	movwf	___awdiv@divisor
 17064  169A  3000               	movlw	0
 17065  169B  00A1               	movwf	___awdiv@divisor+1
 17066  169C  082A               	movf	setBuz@time+1,w
 17067  169D  01A3               	clrf	___awdiv@dividend+1
 17068  169E  07A3               	addwf	___awdiv@dividend+1,f
 17069  169F  0829               	movf	setBuz@time,w
 17070  16A0  01A2               	clrf	___awdiv@dividend
 17071  16A1  07A2               	addwf	___awdiv@dividend,f
 17072  16A2  3195  25EA  3196   	fcall	___awdiv
 17073  16A5  0020               	movlb	0	; select bank0
 17074  16A6  0821               	movf	?___awdiv+1,w
 17075  16A7  01AA               	clrf	setBuz@time+1
 17076  16A8  07AA               	addwf	setBuz@time+1,f
 17077  16A9  0820               	movf	?___awdiv,w
 17078  16AA  01A9               	clrf	setBuz@time
 17079  16AB  07A9               	addwf	setBuz@time,f
 17080                           
 17081                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17082  16AC  0021               	movlb	1	; select bank1
 17083  16AD  1C2E               	btfss	_Buz1^(0+128),0
 17084  16AE  0008               	return
 17085                           
 17086                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17087  16AF  18AE               	btfsc	_Buz1^(0+128),1
 17088  16B0  2EC7               	goto	l96
 17089                           
 17090                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17091  16B1  14AE               	bsf	_Buz1^(0+128),1
 17092                           
 17093                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17094  16B2  01AF               	clrf	(_Buz1^(0+128)+1)
 17095  16B3  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17096                           
 17097                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17098  16B4  0020               	movlb	0	; select bank0
 17099  16B5  082C               	movf	setBuz@count,w
 17100  16B6  00AB               	movwf	??_setBuz
 17101  16B7  082B               	movf	??_setBuz,w
 17102  16B8  0021               	movlb	1	; select bank1
 17103  16B9  00B1               	movwf	(_Buz1^(0+128)+3)
 17104                           
 17105                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17106  16BA  0020               	movlb	0	; select bank0
 17107  16BB  082A               	movf	setBuz@time+1,w
 17108  16BC  0021               	movlb	1	; select bank1
 17109  16BD  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17110  16BE  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17111  16BF  0020               	movlb	0	; select bank0
 17112  16C0  0829               	movf	setBuz@time,w
 17113  16C1  0021               	movlb	1	; select bank1
 17114  16C2  01B4               	clrf	(_Buz1^(0+128)+6)
 17115  16C3  07B4               	addwf	(_Buz1^(0+128)+6),f
 17116                           
 17117                           ;Buzzer_B1.c: 30: RB3 = 1;
 17118  16C4  0020               	movlb	0	; select bank0
 17119  16C5  158D               	bsf	13,3	;volatile
 17120                           
 17121                           ;Buzzer_B1.c: 31: } else {
 17122  16C6  0008               	return
 17123  16C7                     l96:	
 17124                           
 17125                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17126  16C7  19AE               	btfsc	_Buz1^(0+128),3
 17127  16C8  2EDB               	goto	l98
 17128                           
 17129                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17130  16C9  15AE               	bsf	_Buz1^(0+128),3
 17131                           
 17132                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17133  16CA  0020               	movlb	0	; select bank0
 17134  16CB  082C               	movf	setBuz@count,w
 17135  16CC  00AB               	movwf	??_setBuz
 17136  16CD  082B               	movf	??_setBuz,w
 17137  16CE  0021               	movlb	1	; select bank1
 17138  16CF  00B2               	movwf	(_Buz1^(0+128)+4)
 17139                           
 17140                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17141  16D0  0020               	movlb	0	; select bank0
 17142  16D1  082A               	movf	setBuz@time+1,w
 17143  16D2  0021               	movlb	1	; select bank1
 17144  16D3  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 17145  16D4  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 17146  16D5  0020               	movlb	0	; select bank0
 17147  16D6  0829               	movf	setBuz@time,w
 17148  16D7  0021               	movlb	1	; select bank1
 17149  16D8  01B6               	clrf	(_Buz1^(0+128)+8)
 17150  16D9  07B6               	addwf	(_Buz1^(0+128)+8),f
 17151                           
 17152                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17153  16DA  0008               	return
 17154  16DB                     l98:	
 17155  16DB  1A2E               	btfsc	_Buz1^(0+128),4
 17156  16DC  0008               	return
 17157                           
 17158                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17159  16DD  162E               	bsf	_Buz1^(0+128),4
 17160                           
 17161                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17162  16DE  0020               	movlb	0	; select bank0
 17163  16DF  082C               	movf	setBuz@count,w
 17164  16E0  00AB               	movwf	??_setBuz
 17165  16E1  082B               	movf	??_setBuz,w
 17166  16E2  0021               	movlb	1	; select bank1
 17167  16E3  00B3               	movwf	(_Buz1^(0+128)+5)
 17168                           
 17169                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17170  16E4  0020               	movlb	0	; select bank0
 17171  16E5  082A               	movf	setBuz@time+1,w
 17172  16E6  0021               	movlb	1	; select bank1
 17173  16E7  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 17174  16E8  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 17175  16E9  0020               	movlb	0	; select bank0
 17176  16EA  0829               	movf	setBuz@time,w
 17177  16EB  0021               	movlb	1	; select bank1
 17178  16EC  01B8               	clrf	(_Buz1^(0+128)+10)
 17179  16ED  07B8               	addwf	(_Buz1^(0+128)+10),f
 17180  16EE  0008               	return
 17181  16EF                     __end_of_setBuz:	
 17182                           
 17183                           	psect	text108
 17184  15EA                     __ptext108:	
 17185 ;; *************** function ___awdiv *****************
 17186 ;; Defined at:
 17187 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17188 ;; Parameters:    Size  Location     Type
 17189 ;;  divisor         2    0[BANK0 ] int 
 17190 ;;  dividend        2    2[BANK0 ] int 
 17191 ;; Auto vars:     Size  Location     Type
 17192 ;;  quotient        2    7[BANK0 ] int 
 17193 ;;  sign            1    6[BANK0 ] unsigned char 
 17194 ;;  counter         1    5[BANK0 ] unsigned char 
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  2    0[BANK0 ] int 
 17197 ;; Registers used:
 17198 ;;		wreg, status,2, status,0
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17204 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17205 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;Total ram usage:        9 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; Hardware stack levels required when called:    5
 17211 ;; This function calls:
 17212 ;;		Nothing
 17213 ;; This function is called by:
 17214 ;;		_setBuz
 17215 ;; This function uses a non-reentrant model
 17216 ;;
 17217                           
 17218                           
 17219                           ;psect for function ___awdiv
 17220  15EA                     ___awdiv:	
 17221                           
 17222                           ;incstack = 0
 17223                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17224  15EA  0020               	movlb	0	; select bank0
 17225  15EB  01A6               	clrf	___awdiv@sign
 17226  15EC  1FA1               	btfss	___awdiv@divisor+1,7
 17227  15ED  2DF5               	goto	l8951
 17228  15EE  09A0               	comf	___awdiv@divisor,f
 17229  15EF  09A1               	comf	___awdiv@divisor+1,f
 17230  15F0  0AA0               	incf	___awdiv@divisor,f
 17231  15F1  1903               	skipnz
 17232  15F2  0AA1               	incf	___awdiv@divisor+1,f
 17233  15F3  01A6               	clrf	___awdiv@sign
 17234  15F4  0AA6               	incf	___awdiv@sign,f
 17235  15F5                     l8951:	
 17236  15F5  1FA3               	btfss	___awdiv@dividend+1,7
 17237  15F6  2E00               	goto	l8957
 17238  15F7  09A2               	comf	___awdiv@dividend,f
 17239  15F8  09A3               	comf	___awdiv@dividend+1,f
 17240  15F9  0AA2               	incf	___awdiv@dividend,f
 17241  15FA  1903               	skipnz
 17242  15FB  0AA3               	incf	___awdiv@dividend+1,f
 17243  15FC  3001               	movlw	1
 17244  15FD  00A4               	movwf	??___awdiv
 17245  15FE  0824               	movf	??___awdiv,w
 17246  15FF  06A6               	xorwf	___awdiv@sign,f
 17247  1600                     l8957:	
 17248  1600  01A7               	clrf	___awdiv@quotient
 17249  1601  01A8               	clrf	___awdiv@quotient+1
 17250  1602  0821               	movf	___awdiv@divisor+1,w
 17251  1603  0420               	iorwf	___awdiv@divisor,w
 17252  1604  1903               	skipnz
 17253  1605  2E2F               	goto	l8979
 17254  1606  01A5               	clrf	___awdiv@counter
 17255  1607  0AA5               	incf	___awdiv@counter,f
 17256  1608                     l8967:	
 17257  1608  1BA1               	btfsc	___awdiv@divisor+1,7
 17258  1609  2E14               	goto	l8969
 17259  160A  3001               	movlw	1
 17260  160B                     u9595:	
 17261  160B  35A0               	lslf	___awdiv@divisor,f
 17262  160C  0DA1               	rlf	___awdiv@divisor+1,f
 17263  160D  0B89               	decfsz	9,f
 17264  160E  2E0B               	goto	u9595
 17265  160F  3001               	movlw	1
 17266  1610  00A4               	movwf	??___awdiv
 17267  1611  0824               	movf	??___awdiv,w
 17268  1612  07A5               	addwf	___awdiv@counter,f
 17269  1613  2E08               	goto	l8967
 17270  1614                     l8969:	
 17271  1614  3001               	movlw	1
 17272  1615                     u9615:	
 17273  1615  35A7               	lslf	___awdiv@quotient,f
 17274  1616  0DA8               	rlf	___awdiv@quotient+1,f
 17275  1617  0B89               	decfsz	9,f
 17276  1618  2E15               	goto	u9615
 17277  1619  0821               	movf	___awdiv@divisor+1,w
 17278  161A  0223               	subwf	___awdiv@dividend+1,w
 17279  161B  1D03               	skipz
 17280  161C  2E1F               	goto	u9625
 17281  161D  0820               	movf	___awdiv@divisor,w
 17282  161E  0222               	subwf	___awdiv@dividend,w
 17283  161F                     u9625:	
 17284  161F  1C03               	skipc
 17285  1620  2E26               	goto	l8975
 17286  1621  0820               	movf	___awdiv@divisor,w
 17287  1622  02A2               	subwf	___awdiv@dividend,f
 17288  1623  0821               	movf	___awdiv@divisor+1,w
 17289  1624  3BA3               	subwfb	___awdiv@dividend+1,f
 17290  1625  1427               	bsf	___awdiv@quotient,0
 17291  1626                     l8975:	
 17292  1626  3001               	movlw	1
 17293  1627                     u9635:	
 17294  1627  36A1               	lsrf	___awdiv@divisor+1,f
 17295  1628  0CA0               	rrf	___awdiv@divisor,f
 17296  1629  0B89               	decfsz	9,f
 17297  162A  2E27               	goto	u9635
 17298  162B  3001               	movlw	1
 17299  162C  02A5               	subwf	___awdiv@counter,f
 17300  162D  1D03               	btfss	3,2
 17301  162E  2E14               	goto	l8969
 17302  162F                     l8979:	
 17303  162F  0826               	movf	___awdiv@sign,w
 17304  1630  1903               	btfsc	3,2
 17305  1631  2E37               	goto	l8983
 17306  1632  09A7               	comf	___awdiv@quotient,f
 17307  1633  09A8               	comf	___awdiv@quotient+1,f
 17308  1634  0AA7               	incf	___awdiv@quotient,f
 17309  1635  1903               	skipnz
 17310  1636  0AA8               	incf	___awdiv@quotient+1,f
 17311  1637                     l8983:	
 17312  1637  0828               	movf	___awdiv@quotient+1,w
 17313  1638  01A1               	clrf	?___awdiv+1
 17314  1639  07A1               	addwf	?___awdiv+1,f
 17315  163A  0827               	movf	___awdiv@quotient,w
 17316  163B  01A0               	clrf	?___awdiv
 17317  163C  07A0               	addwf	?___awdiv,f
 17318  163D  0008               	return
 17319  163E                     __end_of___awdiv:	
 17320                           
 17321                           	psect	text109
 17322  1A57                     __ptext109:	
 17323 ;; *************** function _DelayOff_Initialization *****************
 17324 ;; Defined at:
 17325 ;;		line 26 in file "../src/DelayOff_B1.c"
 17326 ;; Parameters:    Size  Location     Type
 17327 ;;		None
 17328 ;; Auto vars:     Size  Location     Type
 17329 ;;		None
 17330 ;; Return value:  Size  Location     Type
 17331 ;;		None               void
 17332 ;; Registers used:
 17333 ;;		wreg, status,2, status,0, pclath, cstack
 17334 ;; Tracked objects:
 17335 ;;		On entry : 0/0
 17336 ;;		On exit  : 0/0
 17337 ;;		Unchanged: 0/0
 17338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17343 ;;Total ram usage:        0 bytes
 17344 ;; Hardware stack levels used:    1
 17345 ;; Hardware stack levels required when called:    7
 17346 ;; This function calls:
 17347 ;;		_DlyOff_Initialization
 17348 ;; This function is called by:
 17349 ;;		_main
 17350 ;; This function uses a non-reentrant model
 17351 ;;
 17352                           
 17353                           
 17354                           ;psect for function _DelayOff_Initialization
 17355  1A57                     _DelayOff_Initialization:	
 17356                           
 17357                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17358                           
 17359                           ;incstack = 0
 17360                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17361  1A57  3001               	movlw	1
 17362  1A58  319A  2236  319A   	fcall	_DlyOff_Initialization
 17363                           
 17364                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17365  1A5B  3002               	movlw	2
 17366  1A5C  319A  2236         	fcall	_DlyOff_Initialization
 17367  1A5E  0008               	return
 17368  1A5F                     __end_of_DelayOff_Initialization:	
 17369                           
 17370                           	psect	text110
 17371  1A36                     __ptext110:	
 17372 ;; *************** function _DlyOff_Initialization *****************
 17373 ;; Defined at:
 17374 ;;		line 56 in file "../src/DelayOff_B1.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;  sw              1    wreg     unsigned char 
 17377 ;; Auto vars:     Size  Location     Type
 17378 ;;  sw              1    2[BANK0 ] unsigned char 
 17379 ;; Return value:  Size  Location     Type
 17380 ;;		None               void
 17381 ;; Registers used:
 17382 ;;		wreg, status,2, status,0, pclath, cstack
 17383 ;; Tracked objects:
 17384 ;;		On entry : 0/0
 17385 ;;		On exit  : 0/0
 17386 ;;		Unchanged: 0/0
 17387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;Total ram usage:        1 bytes
 17393 ;; Hardware stack levels used:    1
 17394 ;; Hardware stack levels required when called:    6
 17395 ;; This function calls:
 17396 ;;		_DelayOffPointSelect
 17397 ;; This function is called by:
 17398 ;;		_DelayOff_Initialization
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           
 17403                           ;psect for function _DlyOff_Initialization
 17404  1A36                     _DlyOff_Initialization:	
 17405                           
 17406                           ;incstack = 0
 17407                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17408                           ;DlyOff_Initialization@sw stored from wreg
 17409  1A36  0020               	movlb	0	; select bank0
 17410  1A37  00A2               	movwf	DlyOff_Initialization@sw
 17411                           
 17412                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17413  1A38  0822               	movf	DlyOff_Initialization@sw,w
 17414  1A39  319C  245C         	fcall	_DelayOffPointSelect
 17415  1A3B  0008               	return
 17416  1A3C                     __end_of_DlyOff_Initialization:	
 17417                           
 17418                           	psect	text111
 17419  1C5C                     __ptext111:	
 17420 ;; *************** function _DelayOffPointSelect *****************
 17421 ;; Defined at:
 17422 ;;		line 7 in file "../src/DelayOff_B1.c"
 17423 ;; Parameters:    Size  Location     Type
 17424 ;;  sw              1    wreg     unsigned char 
 17425 ;; Auto vars:     Size  Location     Type
 17426 ;;  sw              1    1[BANK0 ] unsigned char 
 17427 ;; Return value:  Size  Location     Type
 17428 ;;		None               void
 17429 ;; Registers used:
 17430 ;;		wreg
 17431 ;; Tracked objects:
 17432 ;;		On entry : 0/0
 17433 ;;		On exit  : 0/0
 17434 ;;		Unchanged: 0/0
 17435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17439 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;Total ram usage:        2 bytes
 17441 ;; Hardware stack levels used:    1
 17442 ;; Hardware stack levels required when called:    5
 17443 ;; This function calls:
 17444 ;;		Nothing
 17445 ;; This function is called by:
 17446 ;;		_DlyOff_Initialization
 17447 ;;		_DlyOff_Main
 17448 ;;		_setDelayOff_GO
 17449 ;;		_getDelayOff_GO
 17450 ;; This function uses a non-reentrant model
 17451 ;;
 17452                           
 17453                           
 17454                           ;psect for function _DelayOffPointSelect
 17455  1C5C                     _DelayOffPointSelect:	
 17456                           
 17457                           ;incstack = 0
 17458                           ; Regs used in _DelayOffPointSelect: [wreg]
 17459                           ;DelayOffPointSelect@sw stored from wreg
 17460  1C5C  0020               	movlb	0	; select bank0
 17461  1C5D  00A1               	movwf	DelayOffPointSelect@sw
 17462                           
 17463                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17464  1C5E  0821               	movf	DelayOffPointSelect@sw,w
 17465  1C5F  3A01               	xorlw	1
 17466  1C60  1D03               	skipz
 17467  1C61  2C67               	goto	l8865
 17468                           
 17469                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17470  1C62  30E1               	movlw	_DlySw1& (0+255)
 17471  1C63  00A0               	movwf	??_DelayOffPointSelect
 17472  1C64  0820               	movf	??_DelayOffPointSelect,w
 17473  1C65  00F5               	movwf	_DelayOff
 17474                           
 17475                           ;DelayOff_B1.c: 11: }
 17476  1C66  0008               	return
 17477  1C67                     l8865:	
 17478                           
 17479                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17480  1C67  0821               	movf	DelayOffPointSelect@sw,w
 17481  1C68  3A02               	xorlw	2
 17482  1C69  1D03               	skipz
 17483  1C6A  0008               	return
 17484                           
 17485                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17486  1C6B  30E6               	movlw	_DlySw2& (0+255)
 17487  1C6C  00A0               	movwf	??_DelayOffPointSelect
 17488  1C6D  0820               	movf	??_DelayOffPointSelect,w
 17489  1C6E  00F5               	movwf	_DelayOff
 17490  1C6F  0008               	return
 17491  1C70                     __end_of_DelayOffPointSelect:	
 17492                           
 17493                           	psect	text112
 17494  1CD5                     __ptext112:	
 17495 ;; *************** function _CC2500_PowerOnInitial *****************
 17496 ;; Defined at:
 17497 ;;		line 119 in file "../src/CC2500_B1.c"
 17498 ;; Parameters:    Size  Location     Type
 17499 ;;		None
 17500 ;; Auto vars:     Size  Location     Type
 17501 ;;		None
 17502 ;; Return value:  Size  Location     Type
 17503 ;;		None               void
 17504 ;; Registers used:
 17505 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17506 ;; Tracked objects:
 17507 ;;		On entry : 0/0
 17508 ;;		On exit  : 0/0
 17509 ;;		Unchanged: 0/0
 17510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17515 ;;Total ram usage:        0 bytes
 17516 ;; Hardware stack levels used:    1
 17517 ;; Hardware stack levels required when called:    8
 17518 ;; This function calls:
 17519 ;;		_CC2500_ClearRXFIFO
 17520 ;;		_CC2500_ClearTXFIFO
 17521 ;;		_CC2500_FrequencyCabr
 17522 ;;		_CC2500_InitPATable
 17523 ;;		_CC2500_InitSetREG
 17524 ;;		_CC2500_PowerRST
 17525 ;;		_CC2500_SIDLEMode
 17526 ;; This function is called by:
 17527 ;;		_main
 17528 ;; This function uses a non-reentrant model
 17529 ;;
 17530                           
 17531                           
 17532                           ;psect for function _CC2500_PowerOnInitial
 17533  1CD5                     _CC2500_PowerOnInitial:	
 17534                           
 17535                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17536                           
 17537                           ;incstack = 0
 17538                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17539  1CD5  3193  232B  319C   	fcall	_CC2500_PowerRST
 17540                           
 17541                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17542  1CD8  319F  2750  319C   	fcall	_CC2500_InitSetREG
 17543                           
 17544                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17545  1CDB  319D  25D5  319C   	fcall	_CC2500_InitPATable
 17546                           
 17547                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17548  1CDE  319A  2220  319C   	fcall	_CC2500_ClearTXFIFO
 17549                           
 17550                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17551  1CE1  319A  221C  319C   	fcall	_CC2500_ClearRXFIFO
 17552                           
 17553                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17554  1CE4  319A  22B7  319C   	fcall	_CC2500_FrequencyCabr
 17555                           
 17556                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17557  1CE7  319A  2224         	fcall	_CC2500_SIDLEMode
 17558  1CE9  0008               	return
 17559  1CEA                     __end_of_CC2500_PowerOnInitial:	
 17560                           
 17561                           	psect	text113
 17562  1A24                     __ptext113:	
 17563 ;; *************** function _CC2500_SIDLEMode *****************
 17564 ;; Defined at:
 17565 ;;		line 209 in file "../src/CC2500_B1.c"
 17566 ;; Parameters:    Size  Location     Type
 17567 ;;		None
 17568 ;; Auto vars:     Size  Location     Type
 17569 ;;		None
 17570 ;; Return value:  Size  Location     Type
 17571 ;;		None               void
 17572 ;; Registers used:
 17573 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17574 ;; Tracked objects:
 17575 ;;		On entry : 0/0
 17576 ;;		On exit  : 0/0
 17577 ;;		Unchanged: 0/0
 17578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17583 ;;Total ram usage:        0 bytes
 17584 ;; Hardware stack levels used:    1
 17585 ;; Hardware stack levels required when called:    7
 17586 ;; This function calls:
 17587 ;;		_CC2500_WriteCommand
 17588 ;; This function is called by:
 17589 ;;		_CC2500_PowerOnInitial
 17590 ;; This function uses a non-reentrant model
 17591 ;;
 17592                           
 17593                           
 17594                           ;psect for function _CC2500_SIDLEMode
 17595  1A24                     _CC2500_SIDLEMode:	
 17596                           
 17597                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17598                           
 17599                           ;incstack = 0
 17600                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17601  1A24  3036               	movlw	54
 17602  1A25  319D  254A         	fcall	_CC2500_WriteCommand
 17603  1A27  0008               	return
 17604  1A28                     __end_of_CC2500_SIDLEMode:	
 17605                           
 17606                           	psect	text114
 17607  132B                     __ptext114:	
 17608 ;; *************** function _CC2500_PowerRST *****************
 17609 ;; Defined at:
 17610 ;;		line 132 in file "../src/CC2500_B1.c"
 17611 ;; Parameters:    Size  Location     Type
 17612 ;;		None
 17613 ;; Auto vars:     Size  Location     Type
 17614 ;;		None
 17615 ;; Return value:  Size  Location     Type
 17616 ;;		None               void
 17617 ;; Registers used:
 17618 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : 0/0
 17621 ;;		On exit  : 0/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;Total ram usage:        1 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    6
 17631 ;; This function calls:
 17632 ;;		_CC2500_WriteByte
 17633 ;;		_DelayTime_1us
 17634 ;;		_Timeout_Counter
 17635 ;;		_set_TimeoutCleared
 17636 ;; This function is called by:
 17637 ;;		_CC2500_PowerOnInitial
 17638 ;; This function uses a non-reentrant model
 17639 ;;
 17640                           
 17641                           
 17642                           ;psect for function _CC2500_PowerRST
 17643  132B                     _CC2500_PowerRST:	
 17644                           
 17645                           ;CC2500_B1.c: 133: RC1 = 0;
 17646                           
 17647                           ;incstack = 0
 17648                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17649  132B  0020               	movlb	0	; select bank0
 17650  132C  108E               	bcf	14,1	;volatile
 17651                           
 17652                           ;CC2500_B1.c: 134: RC0 = 0;
 17653  132D  100E               	bcf	14,0	;volatile
 17654                           
 17655                           ;CC2500_B1.c: 135: RC4 = 1;
 17656  132E  160E               	bsf	14,4	;volatile
 17657                           
 17658                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17659  132F  300A               	movlw	10
 17660  1330  00A0               	movwf	DelayTime_1us@count
 17661  1331  3000               	movlw	0
 17662  1332  00A1               	movwf	DelayTime_1us@count+1
 17663  1333  319F  2701  3193   	fcall	_DelayTime_1us
 17664                           
 17665                           ;CC2500_B1.c: 137: RC4 = 0;
 17666  1336  0020               	movlb	0	; select bank0
 17667  1337  120E               	bcf	14,4	;volatile
 17668                           
 17669                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17670  1338  300A               	movlw	10
 17671  1339  00A0               	movwf	DelayTime_1us@count
 17672  133A  3000               	movlw	0
 17673  133B  00A1               	movwf	DelayTime_1us@count+1
 17674  133C  319F  2701  3193   	fcall	_DelayTime_1us
 17675                           
 17676                           ;CC2500_B1.c: 139: RC4 = 1;
 17677  133F  0020               	movlb	0	; select bank0
 17678  1340  160E               	bsf	14,4	;volatile
 17679                           
 17680                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17681  1341  3028               	movlw	40
 17682  1342  00A0               	movwf	DelayTime_1us@count
 17683  1343  3000               	movlw	0
 17684  1344  00A1               	movwf	DelayTime_1us@count+1
 17685  1345  319F  2701  3193   	fcall	_DelayTime_1us
 17686                           
 17687                           ;CC2500_B1.c: 141: RC4 = 0;
 17688  1348  0020               	movlb	0	; select bank0
 17689  1349  120E               	bcf	14,4	;volatile
 17690                           
 17691                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17692  134A  3030               	movlw	48
 17693  134B  00A6               	movwf	??_CC2500_PowerRST
 17694  134C  0826               	movf	??_CC2500_PowerRST,w
 17695  134D  0021               	movlb	1	; select bank1
 17696  134E  00D0               	movwf	_SPI0Buffer^(0+128)
 17697                           
 17698                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17699  134F  2B53               	goto	l9855
 17700  1350                     l9853:	
 17701                           
 17702                           ;CC2500_B1.c: 144: Timeout_Counter();
 17703  1350  319C  24C0  3193   	fcall	_Timeout_Counter
 17704  1353                     l9855:	
 17705  1353  0020               	movlb	0	; select bank0
 17706  1354  1D0E               	btfss	14,2	;volatile
 17707  1355  2B59               	goto	l9859
 17708  1356  0021               	movlb	1	; select bank1
 17709  1357  1D2B               	btfss	(_myMain^(0+128)+11),2
 17710  1358  2B50               	goto	l9853
 17711  1359                     l9859:	
 17712                           
 17713                           ;CC2500_B1.c: 145: };
 17714                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17715  1359  319A  222C  3193   	fcall	_set_TimeoutCleared
 17716                           
 17717                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17718  135C  319D  2518  3193   	fcall	_CC2500_WriteByte
 17719                           
 17720                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17721  135F  2B63               	goto	l9865
 17722  1360                     l9863:	
 17723                           
 17724                           ;CC2500_B1.c: 149: Timeout_Counter();
 17725  1360  319C  24C0  3193   	fcall	_Timeout_Counter
 17726  1363                     l9865:	
 17727  1363  0020               	movlb	0	; select bank0
 17728  1364  1D0E               	btfss	14,2	;volatile
 17729  1365  2B69               	goto	l9869
 17730  1366  0021               	movlb	1	; select bank1
 17731  1367  1D2B               	btfss	(_myMain^(0+128)+11),2
 17732  1368  2B60               	goto	l9863
 17733  1369                     l9869:	
 17734                           
 17735                           ;CC2500_B1.c: 150: };
 17736                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17737  1369  319A  222C         	fcall	_set_TimeoutCleared
 17738                           
 17739                           ;CC2500_B1.c: 152: RC0 = 0;
 17740  136B  0020               	movlb	0	; select bank0
 17741  136C  100E               	bcf	14,0	;volatile
 17742                           
 17743                           ;CC2500_B1.c: 153: RC4 = 1;
 17744  136D  160E               	bsf	14,4	;volatile
 17745  136E  0008               	return
 17746  136F                     __end_of_CC2500_PowerRST:	
 17747                           
 17748                           	psect	text115
 17749  1F50                     __ptext115:	
 17750 ;; *************** function _CC2500_InitSetREG *****************
 17751 ;; Defined at:
 17752 ;;		line 159 in file "../src/CC2500_B1.c"
 17753 ;; Parameters:    Size  Location     Type
 17754 ;;		None
 17755 ;; Auto vars:     Size  Location     Type
 17756 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17757 ;;  temp2           1    7[BANK0 ] unsigned char 
 17758 ;;  temp1           1    6[BANK0 ] unsigned char 
 17759 ;; Return value:  Size  Location     Type
 17760 ;;		None               void
 17761 ;; Registers used:
 17762 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17763 ;; Tracked objects:
 17764 ;;		On entry : 0/0
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17769 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17772 ;;Total ram usage:        4 bytes
 17773 ;; Hardware stack levels used:    1
 17774 ;; Hardware stack levels required when called:    7
 17775 ;; This function calls:
 17776 ;;		_CC2500_WriteREG
 17777 ;; This function is called by:
 17778 ;;		_CC2500_PowerOnInitial
 17779 ;; This function uses a non-reentrant model
 17780 ;;
 17781                           
 17782                           
 17783                           ;psect for function _CC2500_InitSetREG
 17784  1F50                     _CC2500_InitSetREG:	
 17785                           
 17786                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17787                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17788                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17789                           
 17790                           ;incstack = 0
 17791                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17792  1F50  0020               	movlb	0	; select bank0
 17793  1F51  01A8               	clrf	CC2500_InitSetREG@loop_c
 17794  1F52                     L9:	
 17795  1F52  302F               	movlw	47
 17796  1F53  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17797  1F54  1803               	btfsc	3,0
 17798  1F55  0008               	return
 17799                           
 17800                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17801  1F56  0828               	movf	CC2500_InitSetREG@loop_c,w
 17802  1F57  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17803  1F58  0084               	movwf	4
 17804  1F59  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17805  1F5A  1803               	skipnc
 17806  1F5B  3E01               	addlw	1
 17807  1F5C  0085               	movwf	5
 17808  1F5D  0800               	movf	0,w	;code access
 17809  1F5E  00A5               	movwf	??_CC2500_InitSetREG
 17810  1F5F  0825               	movf	??_CC2500_InitSetREG,w
 17811  1F60  00A6               	movwf	CC2500_InitSetREG@temp1
 17812                           
 17813                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17814  1F61  0828               	movf	CC2500_InitSetREG@loop_c,w
 17815  1F62  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17816  1F63  0084               	movwf	4
 17817  1F64  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17818  1F65  1803               	skipnc
 17819  1F66  3E01               	addlw	1
 17820  1F67  0085               	movwf	5
 17821  1F68  0800               	movf	0,w	;code access
 17822  1F69  00A5               	movwf	??_CC2500_InitSetREG
 17823  1F6A  0825               	movf	??_CC2500_InitSetREG,w
 17824  1F6B  00A7               	movwf	CC2500_InitSetREG@temp2
 17825                           
 17826                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17827  1F6C  0827               	movf	CC2500_InitSetREG@temp2,w
 17828  1F6D  00A5               	movwf	??_CC2500_InitSetREG
 17829  1F6E  0825               	movf	??_CC2500_InitSetREG,w
 17830  1F6F  00A2               	movwf	CC2500_WriteREG@value
 17831  1F70  0826               	movf	CC2500_InitSetREG@temp1,w
 17832  1F71  319E  2695  319F   	fcall	_CC2500_WriteREG
 17833  1F74  3001               	movlw	1
 17834  1F75  0020               	movlb	0	; select bank0
 17835  1F76  00A5               	movwf	??_CC2500_InitSetREG
 17836  1F77  0825               	movf	??_CC2500_InitSetREG,w
 17837  1F78  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17838  1F79  2F52               	goto	L9
 17839  1F7A                     __end_of_CC2500_InitSetREG:	
 17840                           
 17841                           	psect	text116
 17842  1DD5                     __ptext116:	
 17843 ;; *************** function _CC2500_InitPATable *****************
 17844 ;; Defined at:
 17845 ;;		line 174 in file "../src/CC2500_B1.c"
 17846 ;; Parameters:    Size  Location     Type
 17847 ;;		None
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17850 ;;  temp            1    6[BANK0 ] unsigned char 
 17851 ;; Return value:  Size  Location     Type
 17852 ;;		None               void
 17853 ;; Registers used:
 17854 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;Total ram usage:        3 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    7
 17867 ;; This function calls:
 17868 ;;		_CC2500_WriteREG
 17869 ;; This function is called by:
 17870 ;;		_CC2500_PowerOnInitial
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           
 17875                           ;psect for function _CC2500_InitPATable
 17876  1DD5                     _CC2500_InitPATable:	
 17877                           
 17878                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17879                           ;CC2500_B1.c: 176: unsigned char temp;
 17880                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17881                           
 17882                           ;incstack = 0
 17883                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17884  1DD5  0020               	movlb	0	; select bank0
 17885  1DD6  01A7               	clrf	CC2500_InitPATable@loop_d
 17886  1DD7                     L10:	
 17887  1DD7  3008               	movlw	8
 17888  1DD8  0227               	subwf	CC2500_InitPATable@loop_d,w
 17889  1DD9  1803               	btfsc	3,0
 17890  1DDA  0008               	return
 17891                           
 17892                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17893  1DDB  0827               	movf	CC2500_InitPATable@loop_d,w
 17894  1DDC  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17895  1DDD  0084               	movwf	4
 17896  1DDE  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17897  1DDF  1803               	skipnc
 17898  1DE0  3E01               	addlw	1
 17899  1DE1  0085               	movwf	5
 17900  1DE2  0800               	movf	0,w	;code access
 17901  1DE3  00A5               	movwf	??_CC2500_InitPATable
 17902  1DE4  0825               	movf	??_CC2500_InitPATable,w
 17903  1DE5  00A6               	movwf	CC2500_InitPATable@temp
 17904                           
 17905                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17906  1DE6  0826               	movf	CC2500_InitPATable@temp,w
 17907  1DE7  00A5               	movwf	??_CC2500_InitPATable
 17908  1DE8  0825               	movf	??_CC2500_InitPATable,w
 17909  1DE9  00A2               	movwf	CC2500_WriteREG@value
 17910  1DEA  303E               	movlw	62
 17911  1DEB  319E  2695  319D   	fcall	_CC2500_WriteREG
 17912  1DEE  3001               	movlw	1
 17913  1DEF  0020               	movlb	0	; select bank0
 17914  1DF0  00A5               	movwf	??_CC2500_InitPATable
 17915  1DF1  0825               	movf	??_CC2500_InitPATable,w
 17916  1DF2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17917  1DF3  2DD7               	goto	L10
 17918  1DF4                     __end_of_CC2500_InitPATable:	
 17919                           
 17920                           	psect	text117
 17921  1E95                     __ptext117:	
 17922 ;; *************** function _CC2500_WriteREG *****************
 17923 ;; Defined at:
 17924 ;;		line 251 in file "../src/CC2500_B1.c"
 17925 ;; Parameters:    Size  Location     Type
 17926 ;;  w_addr          1    wreg     unsigned char 
 17927 ;;  value           1    2[BANK0 ] unsigned char 
 17928 ;; Auto vars:     Size  Location     Type
 17929 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17930 ;; Return value:  Size  Location     Type
 17931 ;;		None               void
 17932 ;; Registers used:
 17933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17934 ;; Tracked objects:
 17935 ;;		On entry : 0/0
 17936 ;;		On exit  : 0/0
 17937 ;;		Unchanged: 0/0
 17938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17939 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17942 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17943 ;;Total ram usage:        3 bytes
 17944 ;; Hardware stack levels used:    1
 17945 ;; Hardware stack levels required when called:    6
 17946 ;; This function calls:
 17947 ;;		_CC2500_WriteByte
 17948 ;;		_Timeout_Counter
 17949 ;;		_set_TimeoutCleared
 17950 ;; This function is called by:
 17951 ;;		_CC2500_InitSetREG
 17952 ;;		_CC2500_InitPATable
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           
 17957                           ;psect for function _CC2500_WriteREG
 17958  1E95                     _CC2500_WriteREG:	
 17959                           
 17960                           ;incstack = 0
 17961                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17962                           ;CC2500_WriteREG@w_addr stored from wreg
 17963  1E95  0020               	movlb	0	; select bank0
 17964  1E96  00A4               	movwf	CC2500_WriteREG@w_addr
 17965                           
 17966                           ;CC2500_B1.c: 252: RC4 = 0;
 17967  1E97  120E               	bcf	14,4	;volatile
 17968                           
 17969                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17970  1E98  0824               	movf	CC2500_WriteREG@w_addr,w
 17971  1E99  00A3               	movwf	??_CC2500_WriteREG
 17972  1E9A  0823               	movf	??_CC2500_WriteREG,w
 17973  1E9B  0021               	movlb	1	; select bank1
 17974  1E9C  00D0               	movwf	_SPI0Buffer^(0+128)
 17975                           
 17976                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17977  1E9D  2EA1               	goto	l9579
 17978  1E9E                     l9577:	
 17979                           
 17980                           ;CC2500_B1.c: 255: Timeout_Counter();
 17981  1E9E  319C  24C0  319E   	fcall	_Timeout_Counter
 17982  1EA1                     l9579:	
 17983  1EA1  0020               	movlb	0	; select bank0
 17984  1EA2  1D0E               	btfss	14,2	;volatile
 17985  1EA3  2EA7               	goto	l9583
 17986  1EA4  0021               	movlb	1	; select bank1
 17987  1EA5  1D2B               	btfss	(_myMain^(0+128)+11),2
 17988  1EA6  2E9E               	goto	l9577
 17989  1EA7                     l9583:	
 17990                           
 17991                           ;CC2500_B1.c: 256: };
 17992                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17993  1EA7  319A  222C  319E   	fcall	_set_TimeoutCleared
 17994                           
 17995                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17996  1EAA  319D  2518  319E   	fcall	_CC2500_WriteByte
 17997                           
 17998                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17999  1EAD  0020               	movlb	0	; select bank0
 18000  1EAE  0822               	movf	CC2500_WriteREG@value,w
 18001  1EAF  00A3               	movwf	??_CC2500_WriteREG
 18002  1EB0  0823               	movf	??_CC2500_WriteREG,w
 18003  1EB1  0021               	movlb	1	; select bank1
 18004  1EB2  00D0               	movwf	_SPI0Buffer^(0+128)
 18005                           
 18006                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 18007  1EB3  319D  2518         	fcall	_CC2500_WriteByte
 18008                           
 18009                           ;CC2500_B1.c: 262: RC4 = 1;
 18010  1EB5  0020               	movlb	0	; select bank0
 18011  1EB6  160E               	bsf	14,4	;volatile
 18012  1EB7  0008               	return
 18013  1EB8                     __end_of_CC2500_WriteREG:	
 18014                           
 18015                           	psect	text118
 18016  1AB7                     __ptext118:	
 18017 ;; *************** function _CC2500_FrequencyCabr *****************
 18018 ;; Defined at:
 18019 ;;		line 201 in file "../src/CC2500_B1.c"
 18020 ;; Parameters:    Size  Location     Type
 18021 ;;		None
 18022 ;; Auto vars:     Size  Location     Type
 18023 ;;		None
 18024 ;; Return value:  Size  Location     Type
 18025 ;;		None               void
 18026 ;; Registers used:
 18027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18028 ;; Tracked objects:
 18029 ;;		On entry : 0/0
 18030 ;;		On exit  : 0/0
 18031 ;;		Unchanged: 0/0
 18032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;Total ram usage:        0 bytes
 18038 ;; Hardware stack levels used:    1
 18039 ;; Hardware stack levels required when called:    7
 18040 ;; This function calls:
 18041 ;;		_CC2500_WriteCommand
 18042 ;;		_DelayTime_1us
 18043 ;; This function is called by:
 18044 ;;		_CC2500_PowerOnInitial
 18045 ;; This function uses a non-reentrant model
 18046 ;;
 18047                           
 18048                           
 18049                           ;psect for function _CC2500_FrequencyCabr
 18050  1AB7                     _CC2500_FrequencyCabr:	
 18051                           
 18052                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 18053                           
 18054                           ;incstack = 0
 18055                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18056  1AB7  3033               	movlw	51
 18057  1AB8  319D  254A  319A   	fcall	_CC2500_WriteCommand
 18058                           
 18059                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 18060  1ABB  30E8               	movlw	232
 18061  1ABC  0020               	movlb	0	; select bank0
 18062  1ABD  00A0               	movwf	DelayTime_1us@count
 18063  1ABE  3003               	movlw	3
 18064  1ABF  00A1               	movwf	DelayTime_1us@count+1
 18065  1AC0  319F  2701         	fcall	_DelayTime_1us
 18066  1AC2  0008               	return
 18067  1AC3                     __end_of_CC2500_FrequencyCabr:	
 18068                           
 18069                           	psect	text119
 18070  1F01                     __ptext119:	
 18071 ;; *************** function _DelayTime_1us *****************
 18072 ;; Defined at:
 18073 ;;		line 320 in file "../src/CC2500_B1.c"
 18074 ;; Parameters:    Size  Location     Type
 18075 ;;  count           2    0[BANK0 ] int 
 18076 ;; Auto vars:     Size  Location     Type
 18077 ;;  j               2    4[BANK0 ] unsigned int 
 18078 ;;  i               2    2[BANK0 ] unsigned int 
 18079 ;; Return value:  Size  Location     Type
 18080 ;;		None               void
 18081 ;; Registers used:
 18082 ;;		wreg, status,2
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18088 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18089 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18091 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;Total ram usage:        6 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    5
 18095 ;; This function calls:
 18096 ;;		Nothing
 18097 ;; This function is called by:
 18098 ;;		_CC2500_PowerRST
 18099 ;;		_CC2500_FrequencyCabr
 18100 ;; This function uses a non-reentrant model
 18101 ;;
 18102                           
 18103                           
 18104                           ;psect for function _DelayTime_1us
 18105  1F01                     _DelayTime_1us:	
 18106                           
 18107                           ;CC2500_B1.c: 321: unsigned int i, j;
 18108                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 18109                           
 18110                           ;incstack = 0
 18111                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 18112  1F01  3001               	movlw	1
 18113  1F02  0020               	movlb	0	; select bank0
 18114  1F03  00A2               	movwf	DelayTime_1us@i
 18115  1F04  3000               	movlw	0
 18116  1F05  00A3               	movwf	DelayTime_1us@i+1
 18117  1F06                     l366:	
 18118  1F06  0821               	movf	DelayTime_1us@count+1,w
 18119  1F07  0223               	subwf	DelayTime_1us@i+1,w
 18120  1F08  1D03               	skipz
 18121  1F09  2F0C               	goto	u10495
 18122  1F0A  0820               	movf	DelayTime_1us@count,w
 18123  1F0B  0222               	subwf	DelayTime_1us@i,w
 18124  1F0C                     u10495:	
 18125  1F0C  1803               	btfsc	3,0
 18126  1F0D  0008               	return
 18127                           
 18128                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 18129  1F0E  01A4               	clrf	DelayTime_1us@j
 18130  1F0F  01A5               	clrf	DelayTime_1us@j+1
 18131  1F10  3000               	movlw	0
 18132  1F11  0225               	subwf	DelayTime_1us@j+1,w
 18133  1F12  3002               	movlw	2
 18134  1F13  1903               	skipnz
 18135  1F14  0224               	subwf	DelayTime_1us@j,w
 18136  1F15  1803               	btfsc	3,0
 18137  1F16  2F22               	goto	l9571
 18138  1F17                     l9569:	
 18139  1F17  3001               	movlw	1
 18140  1F18  07A4               	addwf	DelayTime_1us@j,f
 18141  1F19  3000               	movlw	0
 18142  1F1A  3DA5               	addwfc	DelayTime_1us@j+1,f
 18143  1F1B  3000               	movlw	0
 18144  1F1C  0225               	subwf	DelayTime_1us@j+1,w
 18145  1F1D  3002               	movlw	2
 18146  1F1E  1903               	skipnz
 18147  1F1F  0224               	subwf	DelayTime_1us@j,w
 18148  1F20  1C03               	skipc
 18149  1F21  2F17               	goto	l9569
 18150  1F22                     l9571:	
 18151  1F22  3001               	movlw	1
 18152  1F23  07A2               	addwf	DelayTime_1us@i,f
 18153  1F24  3000               	movlw	0
 18154  1F25  3DA3               	addwfc	DelayTime_1us@i+1,f
 18155  1F26  2F06               	goto	l366
 18156  1F27                     __end_of_DelayTime_1us:	
 18157                           
 18158                           	psect	text120
 18159  1A20                     __ptext120:	
 18160 ;; *************** function _CC2500_ClearTXFIFO *****************
 18161 ;; Defined at:
 18162 ;;		line 187 in file "../src/CC2500_B1.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;		None
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;		None
 18167 ;; Return value:  Size  Location     Type
 18168 ;;		None               void
 18169 ;; Registers used:
 18170 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18171 ;; Tracked objects:
 18172 ;;		On entry : 0/0
 18173 ;;		On exit  : 0/0
 18174 ;;		Unchanged: 0/0
 18175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;Total ram usage:        0 bytes
 18181 ;; Hardware stack levels used:    1
 18182 ;; Hardware stack levels required when called:    7
 18183 ;; This function calls:
 18184 ;;		_CC2500_WriteCommand
 18185 ;; This function is called by:
 18186 ;;		_CC2500_PowerOnInitial
 18187 ;; This function uses a non-reentrant model
 18188 ;;
 18189                           
 18190                           
 18191                           ;psect for function _CC2500_ClearTXFIFO
 18192  1A20                     _CC2500_ClearTXFIFO:	
 18193                           
 18194                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 18195                           
 18196                           ;incstack = 0
 18197                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18198  1A20  303B               	movlw	59
 18199  1A21  319D  254A         	fcall	_CC2500_WriteCommand
 18200  1A23  0008               	return
 18201  1A24                     __end_of_CC2500_ClearTXFIFO:	
 18202                           
 18203                           	psect	text121
 18204  1A1C                     __ptext121:	
 18205 ;; *************** function _CC2500_ClearRXFIFO *****************
 18206 ;; Defined at:
 18207 ;;		line 194 in file "../src/CC2500_B1.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;		None
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;		None
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : 0/0
 18218 ;;		On exit  : 0/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18225 ;;Total ram usage:        0 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    7
 18228 ;; This function calls:
 18229 ;;		_CC2500_WriteCommand
 18230 ;; This function is called by:
 18231 ;;		_CC2500_PowerOnInitial
 18232 ;; This function uses a non-reentrant model
 18233 ;;
 18234                           
 18235                           
 18236                           ;psect for function _CC2500_ClearRXFIFO
 18237  1A1C                     _CC2500_ClearRXFIFO:	
 18238                           
 18239                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 18240                           
 18241                           ;incstack = 0
 18242                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18243  1A1C  303A               	movlw	58
 18244  1A1D  319D  254A         	fcall	_CC2500_WriteCommand
 18245  1A1F  0008               	return
 18246  1A20                     __end_of_CC2500_ClearRXFIFO:	
 18247                           
 18248                           	psect	text122
 18249  1D4A                     __ptext122:	
 18250 ;; *************** function _CC2500_WriteCommand *****************
 18251 ;; Defined at:
 18252 ;;		line 285 in file "../src/CC2500_B1.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;  command         1    wreg     unsigned char 
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;  command         1    3[BANK0 ] unsigned char 
 18257 ;; Return value:  Size  Location     Type
 18258 ;;		None               void
 18259 ;; Registers used:
 18260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;Total ram usage:        2 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    6
 18273 ;; This function calls:
 18274 ;;		_CC2500_WriteByte
 18275 ;;		_Timeout_Counter
 18276 ;;		_set_TimeoutCleared
 18277 ;; This function is called by:
 18278 ;;		_CC2500_TxData
 18279 ;;		_CC2500_ClearTXFIFO
 18280 ;;		_CC2500_ClearRXFIFO
 18281 ;;		_CC2500_FrequencyCabr
 18282 ;;		_CC2500_SIDLEMode
 18283 ;;		_setRF_Main
 18284 ;;		_RF_RxDisable
 18285 ;; This function uses a non-reentrant model
 18286 ;;
 18287                           
 18288                           
 18289                           ;psect for function _CC2500_WriteCommand
 18290  1D4A                     _CC2500_WriteCommand:	
 18291                           
 18292                           ;incstack = 0
 18293                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18294                           ;CC2500_WriteCommand@command stored from wreg
 18295  1D4A  0020               	movlb	0	; select bank0
 18296  1D4B  00A3               	movwf	CC2500_WriteCommand@command
 18297                           
 18298                           ;CC2500_B1.c: 286: RC4 = 0;
 18299  1D4C  120E               	bcf	14,4	;volatile
 18300                           
 18301                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 18302  1D4D  0823               	movf	CC2500_WriteCommand@command,w
 18303  1D4E  00A2               	movwf	??_CC2500_WriteCommand
 18304  1D4F  0822               	movf	??_CC2500_WriteCommand,w
 18305  1D50  0021               	movlb	1	; select bank1
 18306  1D51  00D0               	movwf	_SPI0Buffer^(0+128)
 18307                           
 18308                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18309  1D52  2D56               	goto	l9327
 18310  1D53                     l9325:	
 18311                           
 18312                           ;CC2500_B1.c: 290: Timeout_Counter();
 18313  1D53  319C  24C0  319D   	fcall	_Timeout_Counter
 18314  1D56                     l9327:	
 18315  1D56  0020               	movlb	0	; select bank0
 18316  1D57  1D0E               	btfss	14,2	;volatile
 18317  1D58  2D5C               	goto	l9331
 18318  1D59  0021               	movlb	1	; select bank1
 18319  1D5A  1D2B               	btfss	(_myMain^(0+128)+11),2
 18320  1D5B  2D53               	goto	l9325
 18321  1D5C                     l9331:	
 18322                           
 18323                           ;CC2500_B1.c: 291: };
 18324                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18325  1D5C  319A  222C  319D   	fcall	_set_TimeoutCleared
 18326                           
 18327                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18328  1D5F  319D  2518         	fcall	_CC2500_WriteByte
 18329                           
 18330                           ;CC2500_B1.c: 295: RC4 = 1;
 18331  1D61  0020               	movlb	0	; select bank0
 18332  1D62  160E               	bsf	14,4	;volatile
 18333  1D63  0008               	return
 18334  1D64                     __end_of_CC2500_WriteCommand:	
 18335                           
 18336                           	psect	text123
 18337  1A2C                     __ptext123:	
 18338 ;; *************** function _set_TimeoutCleared *****************
 18339 ;; Defined at:
 18340 ;;		line 283 in file "../src/Main_B1.c"
 18341 ;; Parameters:    Size  Location     Type
 18342 ;;		None
 18343 ;; Auto vars:     Size  Location     Type
 18344 ;;		None
 18345 ;; Return value:  Size  Location     Type
 18346 ;;		None               void
 18347 ;; Registers used:
 18348 ;;		status,2
 18349 ;; Tracked objects:
 18350 ;;		On entry : 0/0
 18351 ;;		On exit  : 0/0
 18352 ;;		Unchanged: 0/0
 18353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18358 ;;Total ram usage:        0 bytes
 18359 ;; Hardware stack levels used:    1
 18360 ;; Hardware stack levels required when called:    5
 18361 ;; This function calls:
 18362 ;;		Nothing
 18363 ;; This function is called by:
 18364 ;;		_CC2500_TxData
 18365 ;;		_CC2500_RxData
 18366 ;;		_CC2500_PowerRST
 18367 ;;		_CC2500_WriteREG
 18368 ;;		_CC2500_WriteCommand
 18369 ;;		_CC2500_ReadStatus
 18370 ;;		_getAD
 18371 ;;		_TouchPower
 18372 ;;		_CC2500_ReadREG
 18373 ;; This function uses a non-reentrant model
 18374 ;;
 18375                           
 18376                           
 18377                           ;psect for function _set_TimeoutCleared
 18378  1A2C                     _set_TimeoutCleared:	
 18379                           
 18380                           ;Main_B1.c: 284: myMain.Timeout = 0;
 18381                           
 18382                           ;incstack = 0
 18383                           ; Regs used in _set_TimeoutCleared: [status,2]
 18384  1A2C  0021               	movlb	1	; select bank1
 18385  1A2D  112B               	bcf	(_myMain^(0+128)+11),2
 18386                           
 18387                           ;Main_B1.c: 285: myMain.Timeout_Counter = 0;
 18388  1A2E  01AC               	clrf	(_myMain^(0+128)+12)
 18389  1A2F  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18390  1A30  0008               	return
 18391  1A31                     __end_of_set_TimeoutCleared:	
 18392                           
 18393                           	psect	text124
 18394  1CC0                     __ptext124:	
 18395 ;; *************** function _Timeout_Counter *****************
 18396 ;; Defined at:
 18397 ;;		line 274 in file "../src/Main_B1.c"
 18398 ;; Parameters:    Size  Location     Type
 18399 ;;		None
 18400 ;; Auto vars:     Size  Location     Type
 18401 ;;		None
 18402 ;; Return value:  Size  Location     Type
 18403 ;;		None               void
 18404 ;; Registers used:
 18405 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18406 ;; Tracked objects:
 18407 ;;		On entry : 0/0
 18408 ;;		On exit  : 0/0
 18409 ;;		Unchanged: 0/0
 18410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18415 ;;Total ram usage:        0 bytes
 18416 ;; Hardware stack levels used:    1
 18417 ;; Hardware stack levels required when called:    5
 18418 ;; This function calls:
 18419 ;;		Nothing
 18420 ;; This function is called by:
 18421 ;;		_CC2500_TxData
 18422 ;;		_CC2500_RxData
 18423 ;;		_CC2500_PowerRST
 18424 ;;		_CC2500_WriteREG
 18425 ;;		_CC2500_WriteCommand
 18426 ;;		_CC2500_ReadStatus
 18427 ;;		_getAD
 18428 ;;		_TouchPower
 18429 ;;		_CC2500_ReadREG
 18430 ;; This function uses a non-reentrant model
 18431 ;;
 18432                           
 18433                           
 18434                           ;psect for function _Timeout_Counter
 18435  1CC0                     _Timeout_Counter:	
 18436                           
 18437                           ;Main_B1.c: 275: myMain.Timeout_Counter++;
 18438                           
 18439                           ;incstack = 0
 18440                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18441  1CC0  3001               	movlw	1
 18442  1CC1  0021               	movlb	1	; select bank1
 18443  1CC2  07AC               	addwf	(_myMain^(0+128)+12),f
 18444  1CC3  3000               	movlw	0
 18445  1CC4  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18446                           
 18447                           ;Main_B1.c: 276: if (myMain.Timeout_Counter == 10000) {
 18448  1CC5  300C               	movlw	12
 18449  1CC6  3EA0               	addlw	_myMain& (0+255)
 18450  1CC7  0086               	movwf	6
 18451  1CC8  0187               	clrf	7
 18452  1CC9  3F40               	moviw [0]fsr1
 18453  1CCA  3A10               	xorlw	16
 18454  1CCB  1D03               	skipz
 18455  1CCC  2CCF               	goto	u9965
 18456  1CCD  3F41               	moviw [1]fsr1
 18457  1CCE  3A27               	xorlw	39
 18458  1CCF                     u9965:	
 18459  1CCF  1D03               	skipz
 18460  1CD0  0008               	return
 18461                           
 18462                           ;Main_B1.c: 277: myMain.Timeout_Counter = 0;
 18463  1CD1  01AC               	clrf	(_myMain^(0+128)+12)
 18464  1CD2  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18465                           
 18466                           ;Main_B1.c: 278: myMain.Timeout = 1;
 18467  1CD3  152B               	bsf	(_myMain^(0+128)+11),2
 18468  1CD4  0008               	return
 18469  1CD5                     __end_of_Timeout_Counter:	
 18470                           
 18471                           	psect	text125
 18472  1D18                     __ptext125:	
 18473 ;; *************** function _CC2500_WriteByte *****************
 18474 ;; Defined at:
 18475 ;;		line 219 in file "../src/CC2500_B1.c"
 18476 ;; Parameters:    Size  Location     Type
 18477 ;;		None
 18478 ;; Auto vars:     Size  Location     Type
 18479 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18480 ;; Return value:  Size  Location     Type
 18481 ;;		None               void
 18482 ;; Registers used:
 18483 ;;		wreg, status,2, status,0
 18484 ;; Tracked objects:
 18485 ;;		On entry : 0/0
 18486 ;;		On exit  : 0/0
 18487 ;;		Unchanged: 0/0
 18488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18493 ;;Total ram usage:        2 bytes
 18494 ;; Hardware stack levels used:    1
 18495 ;; Hardware stack levels required when called:    5
 18496 ;; This function calls:
 18497 ;;		Nothing
 18498 ;; This function is called by:
 18499 ;;		_CC2500_TxData
 18500 ;;		_CC2500_RxData
 18501 ;;		_CC2500_PowerRST
 18502 ;;		_CC2500_WriteREG
 18503 ;;		_CC2500_WriteCommand
 18504 ;;		_CC2500_ReadStatus
 18505 ;;		_CC2500_ReadREG
 18506 ;; This function uses a non-reentrant model
 18507 ;;
 18508                           
 18509                           
 18510                           ;psect for function _CC2500_WriteByte
 18511  1D18                     _CC2500_WriteByte:	
 18512                           
 18513                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18514                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18515                           
 18516                           ;incstack = 0
 18517                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18518  1D18  0020               	movlb	0	; select bank0
 18519  1D19  01A1               	clrf	CC2500_WriteByte@loop_a
 18520  1D1A                     L11:	
 18521  1D1A  3008               	movlw	8
 18522  1D1B  0221               	subwf	CC2500_WriteByte@loop_a,w
 18523  1D1C  1803               	btfsc	3,0
 18524  1D1D  0008               	return
 18525                           
 18526                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18527  1D1E  0021               	movlb	1	; select bank1
 18528  1D1F  1FD0               	btfss	_SPI0Buffer^(0+128),7
 18529  1D20  2D24               	goto	l322
 18530                           
 18531                           ;CC2500_B1.c: 223: RC0 = 1;
 18532  1D21  0020               	movlb	0	; select bank0
 18533  1D22  140E               	bsf	14,0	;volatile
 18534  1D23  2D26               	goto	l323
 18535  1D24                     l322:	
 18536                           
 18537                           ;CC2500_B1.c: 224: else
 18538                           ;CC2500_B1.c: 225: RC0 = 0;
 18539  1D24  0020               	movlb	0	; select bank0
 18540  1D25  100E               	bcf	14,0	;volatile
 18541  1D26                     l323:	
 18542                           
 18543                           ;CC2500_B1.c: 226: RC1 = 1;
 18544  1D26  148E               	bsf	14,1	;volatile
 18545                           
 18546                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18547  1D27  1003               	clrc
 18548  1D28  0021               	movlb	1	; select bank1
 18549  1D29  0DD0               	rlf	_SPI0Buffer^(0+128),f
 18550                           
 18551                           ;CC2500_B1.c: 228: RC1 = 0;
 18552  1D2A  0020               	movlb	0	; select bank0
 18553  1D2B  108E               	bcf	14,1	;volatile
 18554  1D2C  3001               	movlw	1
 18555  1D2D  00A0               	movwf	??_CC2500_WriteByte
 18556  1D2E  0820               	movf	??_CC2500_WriteByte,w
 18557  1D2F  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18558  1D30  2D1A               	goto	L11
 18559  1D31                     __end_of_CC2500_WriteByte:	
 18560                           
 18561                           	psect	text126
 18562  07B3                     __ptext126:	
 18563 ;; *************** function _Buzzer_Main *****************
 18564 ;; Defined at:
 18565 ;;		line 46 in file "../src/Buzzer_B1.c"
 18566 ;; Parameters:    Size  Location     Type
 18567 ;;		None
 18568 ;; Auto vars:     Size  Location     Type
 18569 ;;		None
 18570 ;; Return value:  Size  Location     Type
 18571 ;;		None               void
 18572 ;; Registers used:
 18573 ;;		wreg, status,2, status,0
 18574 ;; Tracked objects:
 18575 ;;		On entry : 0/0
 18576 ;;		On exit  : 0/0
 18577 ;;		Unchanged: 0/0
 18578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18583 ;;Total ram usage:        1 bytes
 18584 ;; Hardware stack levels used:    1
 18585 ;; Hardware stack levels required when called:    5
 18586 ;; This function calls:
 18587 ;;		Nothing
 18588 ;; This function is called by:
 18589 ;;		_main
 18590 ;; This function uses a non-reentrant model
 18591 ;;
 18592                           
 18593                           
 18594                           ;psect for function _Buzzer_Main
 18595  07B3                     _Buzzer_Main:	
 18596                           
 18597                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18598                           
 18599                           ;incstack = 0
 18600                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18601  07B3  0021               	movlb	1	; select bank1
 18602  07B4  1CAE               	btfss	_Buz1^(0+128),1
 18603  07B5  0008               	return
 18604                           
 18605                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18606  07B6  3001               	movlw	1
 18607  07B7  07AF               	addwf	(_Buz1^(0+128)+1),f
 18608  07B8  3000               	movlw	0
 18609  07B9  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18610                           
 18611                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18612  07BA  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18613  07BB  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18614  07BC  1D03               	skipz
 18615  07BD  2FC0               	goto	u11945
 18616  07BE  0834               	movf	(_Buz1^(0+128)+6),w
 18617  07BF  022F               	subwf	(_Buz1^(0+128)+1),w
 18618  07C0                     u11945:	
 18619  07C0  1C03               	skipc
 18620  07C1  0008               	return
 18621                           
 18622                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18623  07C2  01AF               	clrf	(_Buz1^(0+128)+1)
 18624  07C3  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18625                           
 18626                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18627  07C4  12AE               	bcf	_Buz1^(0+128),5
 18628  07C5  0020               	movlb	0	; select bank0
 18629  07C6  1D8D               	btfss	13,3	;volatile
 18630  07C7  2FCA               	goto	l10467
 18631  07C8  0021               	movlb	1	; select bank1
 18632  07C9  16AE               	bsf	_Buz1^(0+128),5
 18633  07CA                     l10467:	
 18634                           
 18635                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18636  07CA  0021               	movlb	1	; select bank1
 18637  07CB  1AAE               	btfsc	_Buz1^(0+128),5
 18638  07CC  2FF6               	goto	l106
 18639                           
 18640                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18641  07CD  08B1               	movf	(_Buz1^(0+128)+3),f
 18642  07CE  1D03               	skipz
 18643  07CF  2FF2               	goto	l107
 18644                           
 18645                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18646  07D0  1DAE               	btfss	_Buz1^(0+128),3
 18647  07D1  2FE0               	goto	l108
 18648                           
 18649                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18650  07D2  11AE               	bcf	_Buz1^(0+128),3
 18651                           
 18652                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18653  07D3  0832               	movf	(_Buz1^(0+128)+4),w
 18654  07D4  0020               	movlb	0	; select bank0
 18655  07D5  00A0               	movwf	??_Buzzer_Main
 18656  07D6  0820               	movf	??_Buzzer_Main,w
 18657  07D7  0021               	movlb	1	; select bank1
 18658  07D8  00B1               	movwf	(_Buz1^(0+128)+3)
 18659                           
 18660                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18661  07D9  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18662  07DA  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18663  07DB  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18664  07DC  0836               	movf	(_Buz1^(0+128)+8),w
 18665  07DD  01B4               	clrf	(_Buz1^(0+128)+6)
 18666  07DE  07B4               	addwf	(_Buz1^(0+128)+6),f
 18667                           
 18668                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18669  07DF  0008               	return
 18670  07E0                     l108:	
 18671  07E0  1E2E               	btfss	_Buz1^(0+128),4
 18672  07E1  2FF0               	goto	l110
 18673                           
 18674                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18675  07E2  122E               	bcf	_Buz1^(0+128),4
 18676                           
 18677                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18678  07E3  0833               	movf	(_Buz1^(0+128)+5),w
 18679  07E4  0020               	movlb	0	; select bank0
 18680  07E5  00A0               	movwf	??_Buzzer_Main
 18681  07E6  0820               	movf	??_Buzzer_Main,w
 18682  07E7  0021               	movlb	1	; select bank1
 18683  07E8  00B1               	movwf	(_Buz1^(0+128)+3)
 18684                           
 18685                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18686  07E9  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18687  07EA  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18688  07EB  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18689  07EC  0838               	movf	(_Buz1^(0+128)+10),w
 18690  07ED  01B4               	clrf	(_Buz1^(0+128)+6)
 18691  07EE  07B4               	addwf	(_Buz1^(0+128)+6),f
 18692                           
 18693                           ;Buzzer_B1.c: 62: } else {
 18694  07EF  0008               	return
 18695  07F0                     l110:	
 18696                           
 18697                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18698  07F0  10AE               	bcf	_Buz1^(0+128),1
 18699                           
 18700                           ;Buzzer_B1.c: 64: }
 18701                           ;Buzzer_B1.c: 65: } else {
 18702  07F1  0008               	return
 18703  07F2                     l107:	
 18704                           
 18705                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18706  07F2  16AE               	bsf	_Buz1^(0+128),5
 18707                           
 18708                           ;Buzzer_B1.c: 68: RB3 = 1;
 18709  07F3  0020               	movlb	0	; select bank0
 18710  07F4  158D               	bsf	13,3	;volatile
 18711                           
 18712                           ;Buzzer_B1.c: 69: }
 18713                           ;Buzzer_B1.c: 70: } else {
 18714  07F5  0008               	return
 18715  07F6                     l106:	
 18716                           
 18717                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18718  07F6  12AE               	bcf	_Buz1^(0+128),5
 18719                           
 18720                           ;Buzzer_B1.c: 73: RB3 = 0;
 18721  07F7  0020               	movlb	0	; select bank0
 18722  07F8  118D               	bcf	13,3	;volatile
 18723                           
 18724                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18725  07F9  3001               	movlw	1
 18726  07FA  0021               	movlb	1	; select bank1
 18727  07FB  02B1               	subwf	(_Buz1^(0+128)+3),f
 18728  07FC  0008               	return
 18729  07FD                     __end_of_Buzzer_Main:	
 18730                           
 18731                           	psect	text127
 18732  1A10                     __ptext127:	
 18733 ;; *************** function _Buzzer_Initialization *****************
 18734 ;; Defined at:
 18735 ;;		line 11 in file "../src/Buzzer_B1.c"
 18736 ;; Parameters:    Size  Location     Type
 18737 ;;		None
 18738 ;; Auto vars:     Size  Location     Type
 18739 ;;		None
 18740 ;; Return value:  Size  Location     Type
 18741 ;;		None               void
 18742 ;; Registers used:
 18743 ;;		None
 18744 ;; Tracked objects:
 18745 ;;		On entry : 0/0
 18746 ;;		On exit  : 0/0
 18747 ;;		Unchanged: 0/0
 18748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18753 ;;Total ram usage:        0 bytes
 18754 ;; Hardware stack levels used:    1
 18755 ;; Hardware stack levels required when called:    5
 18756 ;; This function calls:
 18757 ;;		Nothing
 18758 ;; This function is called by:
 18759 ;;		_main
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           
 18764                           ;psect for function _Buzzer_Initialization
 18765  1A10                     _Buzzer_Initialization:	
 18766                           
 18767                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18768                           
 18769                           ;incstack = 0
 18770                           ; Regs used in _Buzzer_Initialization: []
 18771  1A10  0021               	movlb	1	; select bank1
 18772  1A11  142E               	bsf	_Buz1^(0+128),0
 18773  1A12  0008               	return
 18774  1A13                     __end_of_Buzzer_Initialization:	
 18775                           
 18776                           	psect	intentry
 18777  0004                     __pintentry:	
 18778 ;; *************** function _ISR *****************
 18779 ;; Defined at:
 18780 ;;		line 107 in file "../src/MCU_B1.c"
 18781 ;; Parameters:    Size  Location     Type
 18782 ;;		None
 18783 ;; Auto vars:     Size  Location     Type
 18784 ;;		None
 18785 ;; Return value:  Size  Location     Type
 18786 ;;		None               void
 18787 ;; Registers used:
 18788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18789 ;; Tracked objects:
 18790 ;;		On entry : 0/0
 18791 ;;		On exit  : 0/0
 18792 ;;		Unchanged: 0/0
 18793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18798 ;;Total ram usage:        1 bytes
 18799 ;; Hardware stack levels used:    1
 18800 ;; Hardware stack levels required when called:    4
 18801 ;; This function calls:
 18802 ;;		_IOC_ISR
 18803 ;;		_TMR1_ISR
 18804 ;; This function is called by:
 18805 ;;		Interrupt level 1
 18806 ;; This function uses a non-reentrant model
 18807 ;;
 18808                           
 18809  0004                     _ISR:	
 18810                           
 18811                           ;incstack = 0
 18812                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18813  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18814  0005  3180               	pagesel	$
 18815  0006  0020               	movlb	0	; select bank0
 18816  0007  087F               	movf	127,w
 18817  0008  00F4               	movwf	??_ISR
 18818                           
 18819                           ;MCU_B1.c: 109: IOC_ISR();
 18820  0009  319B  2332  3180   	fcall	_IOC_ISR
 18821                           
 18822                           ;MCU_B1.c: 111: ;;
 18823                           ;MCU_B1.c: 113: TMR1_ISR();
 18824  000C  319F  2727         	fcall	_TMR1_ISR
 18825  000E  0874               	movf	??_ISR,w
 18826  000F  0020               	movlb	0	; select bank0
 18827  0010  00FF               	movwf	127
 18828  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18829  0012  0009               	retfie
 18830  0013                     __end_of_ISR:	
 18831                           
 18832                           	psect	text129
 18833  1F27                     __ptext129:	
 18834 ;; *************** function _TMR1_ISR *****************
 18835 ;; Defined at:
 18836 ;;		line 209 in file "../src/MCU_B1.c"
 18837 ;; Parameters:    Size  Location     Type
 18838 ;;		None
 18839 ;; Auto vars:     Size  Location     Type
 18840 ;;		None
 18841 ;; Return value:  Size  Location     Type
 18842 ;;		None               void
 18843 ;; Registers used:
 18844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18845 ;; Tracked objects:
 18846 ;;		On entry : 0/0
 18847 ;;		On exit  : 0/0
 18848 ;;		Unchanged: 0/0
 18849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18854 ;;Total ram usage:        0 bytes
 18855 ;; Hardware stack levels used:    1
 18856 ;; Hardware stack levels required when called:    2
 18857 ;; This function calls:
 18858 ;;		_setDimmerLights_IntrControl
 18859 ;; This function is called by:
 18860 ;;		_ISR
 18861 ;; This function uses a non-reentrant model
 18862 ;;
 18863                           
 18864                           
 18865                           ;psect for function _TMR1_ISR
 18866  1F27                     _TMR1_ISR:	
 18867                           
 18868                           ;MCU_B1.c: 211: if (TMR1IE == 1 && TMR1IF == 1) {
 18869                           
 18870                           ;incstack = 0
 18871                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18872  1F27  0021               	movlb	1	; select bank1
 18873  1F28  1C11               	btfss	17,0	;volatile
 18874  1F29  0008               	return
 18875  1F2A  0020               	movlb	0	; select bank0
 18876  1F2B  1C11               	btfss	17,0	;volatile
 18877  1F2C  0008               	return
 18878                           
 18879                           ;MCU_B1.c: 212: TMR1H = (int)((65536-1480)/256);
 18880  1F2D  30FA               	movlw	250
 18881  1F2E  0097               	movwf	23	;volatile
 18882                           
 18883                           ;MCU_B1.c: 213: TMR1L = (int)((65536-1480)%256);
 18884  1F2F  3038               	movlw	56
 18885  1F30  0096               	movwf	22	;volatile
 18886                           
 18887                           ;MCU_B1.c: 214: TMR1IF = 0;
 18888  1F31  1011               	bcf	17,0	;volatile
 18889                           
 18890                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18891  1F32  3001               	movlw	1
 18892  1F33  3184  2400  319F   	fcall	_setDimmerLights_IntrControl
 18893                           
 18894                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18895  1F36  3002               	movlw	2
 18896  1F37  3184  2400  319F   	fcall	_setDimmerLights_IntrControl
 18897                           
 18898                           ;MCU_B1.c: 235: Timer1.Count++;
 18899  1F3A  3001               	movlw	1
 18900  1F3B  0022               	movlb	2	; select bank2
 18901  1F3C  07A1               	addwf	(_Timer1^(0+256)+1),f
 18902  1F3D  3000               	movlw	0
 18903  1F3E  3DA2               	addwfc	((_Timer1+1)^(0+256)+1),f
 18904                           
 18905                           ;MCU_B1.c: 236: if (Timer1.Count == 100) {
 18906  1F3F  3001               	movlw	1
 18907  1F40  3E20               	addlw	_Timer1& (0+255)
 18908  1F41  0086               	movwf	6
 18909  1F42  3001               	movlw	1	; select bank2/3
 18910  1F43  0087               	movwf	7
 18911  1F44  3F40               	moviw [0]fsr1
 18912  1F45  3A64               	xorlw	100
 18913  1F46  1D03               	skipz
 18914  1F47  2F4A               	goto	u794_25
 18915  1F48  3F41               	moviw [1]fsr1
 18916  1F49  3A00               	xorlw	0
 18917  1F4A                     u794_25:	
 18918  1F4A  1D03               	skipz
 18919  1F4B  0008               	return
 18920                           
 18921                           ;MCU_B1.c: 237: Timer1.Count = 0;
 18922  1F4C  01A1               	clrf	(_Timer1^(0+256)+1)
 18923  1F4D  01A2               	clrf	((_Timer1+1)^(0+256)+1)
 18924                           
 18925                           ;MCU_B1.c: 238: Timer1.Timeout = 1;
 18926  1F4E  1420               	bsf	_Timer1^(0+256),0
 18927  1F4F  0008               	return
 18928  1F50                     __end_of_TMR1_ISR:	
 18929                           
 18930                           	psect	text130
 18931  0400                     __ptext130:	
 18932 ;; *************** function _setDimmerLights_IntrControl *****************
 18933 ;; Defined at:
 18934 ;;		line 96 in file "../src/Dimmer_B1.c"
 18935 ;; Parameters:    Size  Location     Type
 18936 ;;  lights          1    wreg     unsigned char 
 18937 ;; Auto vars:     Size  Location     Type
 18938 ;;  lights          1    3[COMMON] unsigned char 
 18939 ;; Return value:  Size  Location     Type
 18940 ;;		None               void
 18941 ;; Registers used:
 18942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18943 ;; Tracked objects:
 18944 ;;		On entry : 0/0
 18945 ;;		On exit  : 0/0
 18946 ;;		Unchanged: 0/0
 18947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18950 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18952 ;;Total ram usage:        2 bytes
 18953 ;; Hardware stack levels used:    1
 18954 ;; Hardware stack levels required when called:    1
 18955 ;; This function calls:
 18956 ;;		_DimmerIntrPointSelect
 18957 ;; This function is called by:
 18958 ;;		_TMR1_ISR
 18959 ;; This function uses a non-reentrant model
 18960 ;;
 18961                           
 18962                           
 18963                           ;psect for function _setDimmerLights_IntrControl
 18964  0400                     _setDimmerLights_IntrControl:	
 18965                           
 18966                           ;incstack = 0
 18967                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18968                           ;setDimmerLights_IntrControl@lights stored from wreg
 18969  0400  00F3               	movwf	setDimmerLights_IntrControl@lights
 18970                           
 18971                           ;Dimmer_B1.c: 234: DimmerIntrPointSelect(lights);
 18972  0401  0873               	movf	setDimmerLights_IntrControl@lights,w
 18973  0402  319B  23A2  3184   	fcall	_DimmerIntrPointSelect
 18974                           
 18975                           ;Dimmer_B1.c: 236: if (DimmerLightsIntr->IntrStart == 1) {
 18976  0405  0876               	movf	_DimmerLightsIntr,w
 18977  0406  3E02               	addlw	2
 18978  0407  0086               	movwf	6
 18979  0408  3001               	movlw	1	; select bank2/3
 18980  0409  0087               	movwf	7
 18981  040A  1D01               	btfss	1,2
 18982  040B  2C2A               	goto	i1l7313
 18983                           
 18984                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count++;
 18985  040C  3001               	movlw	1
 18986  040D  00F2               	movwf	??_setDimmerLights_IntrControl
 18987  040E  0876               	movf	_DimmerLightsIntr,w
 18988  040F  3E03               	addlw	3
 18989  0410  0086               	movwf	6
 18990  0411  3001               	movlw	1	; select bank2/3
 18991  0412  0087               	movwf	7
 18992  0413  0872               	movf	??_setDimmerLights_IntrControl,w
 18993  0414  0781               	addwf	1,f
 18994                           
 18995                           ;Dimmer_B1.c: 238: if (DimmerLightsIntr->Count >= ((char)(75*0.8)) + 1) {
 18996  0415  0876               	movf	_DimmerLightsIntr,w
 18997  0416  3E03               	addlw	3
 18998  0417  0086               	movwf	6
 18999  0418  3001               	movlw	1	; select bank2/3
 19000  0419  0087               	movwf	7
 19001  041A  303D               	movlw	61
 19002  041B  0201               	subwf	1,w
 19003  041C  1C03               	skipc
 19004  041D  2C2A               	goto	i1l7313
 19005                           
 19006                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Count = 0;
 19007  041E  0876               	movf	_DimmerLightsIntr,w
 19008  041F  3E03               	addlw	3
 19009  0420  0086               	movwf	6
 19010  0421  3001               	movlw	1	; select bank2/3
 19011  0422  0087               	movwf	7
 19012  0423  0181               	clrf	1
 19013                           
 19014                           ;Dimmer_B1.c: 240: DimmerLightsIntr->IntrStart = 0;
 19015  0424  0876               	movf	_DimmerLightsIntr,w
 19016  0425  3E02               	addlw	2
 19017  0426  0086               	movwf	6
 19018  0427  3001               	movlw	1	; select bank2/3
 19019  0428  0087               	movwf	7
 19020  0429  1101               	bcf	1,2
 19021  042A                     i1l7313:	
 19022                           
 19023                           ;Dimmer_B1.c: 241: }
 19024                           ;Dimmer_B1.c: 242: }
 19025                           ;Dimmer_B1.c: 244: if (DimmerLightsIntr->GO == 1) {
 19026  042A  0A76               	incf	_DimmerLightsIntr,w
 19027  042B  0086               	movwf	6
 19028  042C  3001               	movlw	1	; select bank2/3
 19029  042D  0087               	movwf	7
 19030  042E  1C01               	btfss	1,0
 19031  042F  2C61               	goto	i1l7329
 19032                           
 19033                           ;Dimmer_B1.c: 245: if (DimmerLightsIntr->Count >= DimmerLightsIntr->DimmingValue) {
 19034  0430  0876               	movf	_DimmerLightsIntr,w
 19035  0431  3E03               	addlw	3
 19036  0432  0086               	movwf	6
 19037  0433  3001               	movlw	1	; select bank2/3
 19038  0434  0087               	movwf	7
 19039  0435  0876               	movf	_DimmerLightsIntr,w
 19040  0436  3E04               	addlw	4
 19041  0437  0084               	movwf	4
 19042  0438  3001               	movlw	1	; select bank2/3
 19043  0439  0085               	movwf	5
 19044  043A  0800               	movf	0,w
 19045  043B  0201               	subwf	1,w
 19046  043C  1C03               	skipc
 19047  043D  0008               	return
 19048                           
 19049                           ;Dimmer_B1.c: 246: DimmerLightsIntr->GO = 0;
 19050  043E  0A76               	incf	_DimmerLightsIntr,w
 19051  043F  0086               	movwf	6
 19052  0440  3001               	movlw	1	; select bank2/3
 19053  0441  0087               	movwf	7
 19054  0442  1001               	bcf	1,0
 19055                           
 19056                           ;Dimmer_B1.c: 247: DimmerLightsIntr->Flag = 1;
 19057  0443  0A76               	incf	_DimmerLightsIntr,w
 19058  0444  0086               	movwf	6
 19059  0445  3001               	movlw	1	; select bank2/3
 19060  0446  0087               	movwf	7
 19061  0447  1581               	bsf	1,3
 19062                           
 19063                           ;Dimmer_B1.c: 249: if (DimmerLightsIntr->MOSFET == 1) {
 19064  0448  0876               	movf	_DimmerLightsIntr,w
 19065  0449  0086               	movwf	6
 19066  044A  3001               	movlw	1	; select bank2/3
 19067  044B  0087               	movwf	7
 19068  044C  1C01               	btfss	1,0
 19069  044D  0008               	return
 19070                           
 19071                           ;Dimmer_B1.c: 250: DimmerLightsIntr->MOSFET = 0;
 19072  044E  0876               	movf	_DimmerLightsIntr,w
 19073  044F  0086               	movwf	6
 19074  0450  3001               	movlw	1	; select bank2/3
 19075  0451  0087               	movwf	7
 19076  0452  1001               	bcf	1,0
 19077                           
 19078                           ;Dimmer_B1.c: 252: if (lights == 1) {
 19079  0453  0873               	movf	setDimmerLights_IntrControl@lights,w
 19080  0454  3A01               	xorlw	1
 19081  0455  1D03               	skipz
 19082  0456  2C5A               	goto	i1l7325
 19083                           
 19084                           ;Dimmer_B1.c: 253: RA7 = 0;
 19085  0457  0020               	movlb	0	; select bank0
 19086  0458  138C               	bcf	12,7	;volatile
 19087                           
 19088                           ;Dimmer_B1.c: 255: }
 19089  0459  0008               	return
 19090  045A                     i1l7325:	
 19091                           
 19092                           ;Dimmer_B1.c: 258: else if (lights == 2) {
 19093  045A  0873               	movf	setDimmerLights_IntrControl@lights,w
 19094  045B  3A02               	xorlw	2
 19095  045C  1D03               	skipz
 19096  045D  0008               	return
 19097                           
 19098                           ;Dimmer_B1.c: 259: RB4 = 0;
 19099  045E  0020               	movlb	0	; select bank0
 19100  045F  120D               	bcf	13,4	;volatile
 19101                           
 19102                           ;Dimmer_B1.c: 260: }
 19103                           ;Dimmer_B1.c: 262: }
 19104                           ;Dimmer_B1.c: 263: }
 19105                           ;Dimmer_B1.c: 264: } else {
 19106  0460  0008               	return
 19107  0461                     i1l7329:	
 19108                           
 19109                           ;Dimmer_B1.c: 265: if (DimmerLightsIntr->Flag == 1) {
 19110  0461  0A76               	incf	_DimmerLightsIntr,w
 19111  0462  0086               	movwf	6
 19112  0463  3001               	movlw	1	; select bank2/3
 19113  0464  0087               	movwf	7
 19114  0465  1D81               	btfss	1,3
 19115  0466  0008               	return
 19116                           
 19117                           ;Dimmer_B1.c: 266: DimmerLightsIntr->Flag = 0;
 19118  0467  0A76               	incf	_DimmerLightsIntr,w
 19119  0468  0086               	movwf	6
 19120  0469  3001               	movlw	1	; select bank2/3
 19121  046A  0087               	movwf	7
 19122  046B  1181               	bcf	1,3
 19123                           
 19124                           ;Dimmer_B1.c: 267: DimmerLightsIntr->DimmingTime++;
 19125  046C  3001               	movlw	1
 19126  046D  00F2               	movwf	??_setDimmerLights_IntrControl
 19127  046E  0876               	movf	_DimmerLightsIntr,w
 19128  046F  3E05               	addlw	5
 19129  0470  0086               	movwf	6
 19130  0471  3001               	movlw	1	; select bank2/3
 19131  0472  0087               	movwf	7
 19132  0473  0872               	movf	??_setDimmerLights_IntrControl,w
 19133  0474  0781               	addwf	1,f
 19134                           
 19135                           ;Dimmer_B1.c: 268: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 19136  0475  0876               	movf	_DimmerLightsIntr,w
 19137  0476  3E05               	addlw	5
 19138  0477  0086               	movwf	6
 19139  0478  3001               	movlw	1	; select bank2/3
 19140  0479  0087               	movwf	7
 19141  047A  0876               	movf	_DimmerLightsIntr,w
 19142  047B  3E08               	addlw	8
 19143  047C  0084               	movwf	4
 19144  047D  3001               	movlw	1	; select bank2/3
 19145  047E  0085               	movwf	5
 19146  047F  0800               	movf	0,w
 19147  0480  0201               	subwf	1,w
 19148  0481  1C03               	skipc
 19149  0482  2CC5               	goto	i1l7355
 19150                           
 19151                           ;Dimmer_B1.c: 269: DimmerLightsIntr->DimmingTime = 0;
 19152  0483  0876               	movf	_DimmerLightsIntr,w
 19153  0484  3E05               	addlw	5
 19154  0485  0086               	movwf	6
 19155  0486  3001               	movlw	1	; select bank2/3
 19156  0487  0087               	movwf	7
 19157  0488  0181               	clrf	1
 19158                           
 19159                           ;Dimmer_B1.c: 270: if (DimmerLightsIntr->AdjSw == 1) {
 19160  0489  0A76               	incf	_DimmerLightsIntr,w
 19161  048A  0086               	movwf	6
 19162  048B  3001               	movlw	1	; select bank2/3
 19163  048C  0087               	movwf	7
 19164  048D  1F01               	btfss	1,6
 19165  048E  0008               	return
 19166                           
 19167                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->AdjStatus == 0) {
 19168  048F  0A76               	incf	_DimmerLightsIntr,w
 19169  0490  0086               	movwf	6
 19170  0491  3001               	movlw	1	; select bank2/3
 19171  0492  0087               	movwf	7
 19172  0493  1B81               	btfsc	1,7
 19173  0494  2CAE               	goto	i1l7349
 19174                           
 19175                           ;Dimmer_B1.c: 272: if (DimmerLightsIntr->DimmingValue < ((char)(75*0.8))) {
 19176  0495  0876               	movf	_DimmerLightsIntr,w
 19177  0496  3E04               	addlw	4
 19178  0497  0086               	movwf	6
 19179  0498  3001               	movlw	1	; select bank2/3
 19180  0499  0087               	movwf	7
 19181  049A  303C               	movlw	60
 19182  049B  0201               	subwf	1,w
 19183  049C  1803               	skipnc
 19184  049D  2CA8               	goto	i1l7347
 19185                           
 19186                           ;Dimmer_B1.c: 273: DimmerLightsIntr->DimmingValue++;
 19187  049E  3001               	movlw	1
 19188  049F  00F2               	movwf	??_setDimmerLights_IntrControl
 19189  04A0  0876               	movf	_DimmerLightsIntr,w
 19190  04A1  3E04               	addlw	4
 19191  04A2  0086               	movwf	6
 19192  04A3  3001               	movlw	1	; select bank2/3
 19193  04A4  0087               	movwf	7
 19194  04A5  0872               	movf	??_setDimmerLights_IntrControl,w
 19195  04A6  0781               	addwf	1,f
 19196                           
 19197                           ;Dimmer_B1.c: 274: } else {
 19198  04A7  0008               	return
 19199  04A8                     i1l7347:	
 19200                           
 19201                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 1;
 19202  04A8  0A76               	incf	_DimmerLightsIntr,w
 19203  04A9  0086               	movwf	6
 19204  04AA  3001               	movlw	1	; select bank2/3
 19205  04AB  0087               	movwf	7
 19206  04AC  1781               	bsf	1,7
 19207                           
 19208                           ;Dimmer_B1.c: 276: }
 19209                           ;Dimmer_B1.c: 277: } else {
 19210  04AD  0008               	return
 19211  04AE                     i1l7349:	
 19212                           
 19213                           ;Dimmer_B1.c: 278: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 19214  04AE  0876               	movf	_DimmerLightsIntr,w
 19215  04AF  3E04               	addlw	4
 19216  04B0  0086               	movwf	6
 19217  04B1  3001               	movlw	1	; select bank2/3
 19218  04B2  0087               	movwf	7
 19219  04B3  300D               	movlw	13
 19220  04B4  0201               	subwf	1,w
 19221  04B5  1C03               	skipc
 19222  04B6  2CBF               	goto	i1l7353
 19223                           
 19224                           ;Dimmer_B1.c: 279: DimmerLightsIntr->DimmingValue--;
 19225  04B7  0876               	movf	_DimmerLightsIntr,w
 19226  04B8  3E04               	addlw	4
 19227  04B9  0086               	movwf	6
 19228  04BA  3001               	movlw	1	; select bank2/3
 19229  04BB  0087               	movwf	7
 19230  04BC  3001               	movlw	1
 19231  04BD  0281               	subwf	1,f
 19232                           
 19233                           ;Dimmer_B1.c: 280: } else
 19234  04BE  0008               	return
 19235  04BF                     i1l7353:	
 19236                           
 19237                           ;Dimmer_B1.c: 281: DimmerLightsIntr->AdjStatus = 0;
 19238  04BF  0A76               	incf	_DimmerLightsIntr,w
 19239  04C0  0086               	movwf	6
 19240  04C1  3001               	movlw	1	; select bank2/3
 19241  04C2  0087               	movwf	7
 19242  04C3  1381               	bcf	1,7
 19243                           
 19244                           ;Dimmer_B1.c: 282: }
 19245                           ;Dimmer_B1.c: 283: }
 19246                           ;Dimmer_B1.c: 284: } else if (DimmerLightsIntr->AdjRF == 1) {
 19247  04C4  0008               	return
 19248  04C5                     i1l7355:	
 19249  04C5  0876               	movf	_DimmerLightsIntr,w
 19250  04C6  3E02               	addlw	2
 19251  04C7  0086               	movwf	6
 19252  04C8  3001               	movlw	1	; select bank2/3
 19253  04C9  0087               	movwf	7
 19254  04CA  1C01               	btfss	1,0
 19255  04CB  0008               	return
 19256                           
 19257                           ;Dimmer_B1.c: 285: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 19258  04CC  0876               	movf	_DimmerLightsIntr,w
 19259  04CD  3E04               	addlw	4
 19260  04CE  0086               	movwf	6
 19261  04CF  3001               	movlw	1	; select bank2/3
 19262  04D0  0087               	movwf	7
 19263  04D1  0876               	movf	_DimmerLightsIntr,w
 19264  04D2  3E06               	addlw	6
 19265  04D3  0084               	movwf	4
 19266  04D4  3001               	movlw	1	; select bank2/3
 19267  04D5  0085               	movwf	5
 19268  04D6  0800               	movf	0,w
 19269  04D7  0201               	subwf	1,w
 19270  04D8  1803               	skipnc
 19271  04D9  2CE4               	goto	i1l7361
 19272                           
 19273                           ;Dimmer_B1.c: 286: DimmerLightsIntr->DimmingValue++;
 19274  04DA  3001               	movlw	1
 19275  04DB  00F2               	movwf	??_setDimmerLights_IntrControl
 19276  04DC  0876               	movf	_DimmerLightsIntr,w
 19277  04DD  3E04               	addlw	4
 19278  04DE  0086               	movwf	6
 19279  04DF  3001               	movlw	1	; select bank2/3
 19280  04E0  0087               	movwf	7
 19281  04E1  0872               	movf	??_setDimmerLights_IntrControl,w
 19282  04E2  0781               	addwf	1,f
 19283                           
 19284                           ;Dimmer_B1.c: 287: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 19285  04E3  0008               	return
 19286  04E4                     i1l7361:	
 19287  04E4  0876               	movf	_DimmerLightsIntr,w
 19288  04E5  3E06               	addlw	6
 19289  04E6  0086               	movwf	6
 19290  04E7  3001               	movlw	1	; select bank2/3
 19291  04E8  0087               	movwf	7
 19292  04E9  0876               	movf	_DimmerLightsIntr,w
 19293  04EA  3E04               	addlw	4
 19294  04EB  0084               	movwf	4
 19295  04EC  3001               	movlw	1	; select bank2/3
 19296  04ED  0085               	movwf	5
 19297  04EE  0800               	movf	0,w
 19298  04EF  0201               	subwf	1,w
 19299  04F0  1803               	skipnc
 19300  04F1  2CFA               	goto	i1l7365
 19301                           
 19302                           ;Dimmer_B1.c: 288: DimmerLightsIntr->DimmingValue--;
 19303  04F2  0876               	movf	_DimmerLightsIntr,w
 19304  04F3  3E04               	addlw	4
 19305  04F4  0086               	movwf	6
 19306  04F5  3001               	movlw	1	; select bank2/3
 19307  04F6  0087               	movwf	7
 19308  04F7  3001               	movlw	1
 19309  04F8  0281               	subwf	1,f
 19310                           
 19311                           ;Dimmer_B1.c: 289: } else {
 19312  04F9  0008               	return
 19313  04FA                     i1l7365:	
 19314                           
 19315                           ;Dimmer_B1.c: 290: DimmerLightsIntr->AdjRF = 0;
 19316  04FA  0876               	movf	_DimmerLightsIntr,w
 19317  04FB  3E02               	addlw	2
 19318  04FC  0086               	movwf	6
 19319  04FD  3001               	movlw	1	; select bank2/3
 19320  04FE  0087               	movwf	7
 19321  04FF  1001               	bcf	1,0
 19322  0500  0008               	return
 19323  0501                     __end_of_setDimmerLights_IntrControl:	
 19324                           
 19325                           	psect	text131
 19326  1BA2                     __ptext131:	
 19327 ;; *************** function _DimmerIntrPointSelect *****************
 19328 ;; Defined at:
 19329 ;;		line 74 in file "../src/Dimmer_B1.c"
 19330 ;; Parameters:    Size  Location     Type
 19331 ;;  lights          1    wreg     unsigned char 
 19332 ;; Auto vars:     Size  Location     Type
 19333 ;;  lights          1    1[COMMON] unsigned char 
 19334 ;; Return value:  Size  Location     Type
 19335 ;;		None               void
 19336 ;; Registers used:
 19337 ;;		wreg
 19338 ;; Tracked objects:
 19339 ;;		On entry : 0/0
 19340 ;;		On exit  : 0/0
 19341 ;;		Unchanged: 0/0
 19342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19344 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19346 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19347 ;;Total ram usage:        2 bytes
 19348 ;; Hardware stack levels used:    1
 19349 ;; This function calls:
 19350 ;;		Nothing
 19351 ;; This function is called by:
 19352 ;;		_setDimmerLights_IntrControl
 19353 ;; This function uses a non-reentrant model
 19354 ;;
 19355                           
 19356                           
 19357                           ;psect for function _DimmerIntrPointSelect
 19358  1BA2                     _DimmerIntrPointSelect:	
 19359                           
 19360                           ;incstack = 0
 19361                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19362                           ;DimmerIntrPointSelect@lights stored from wreg
 19363  1BA2  00F1               	movwf	DimmerIntrPointSelect@lights
 19364                           
 19365                           ;Dimmer_B1.c: 76: if (lights == 1) {
 19366  1BA3  0871               	movf	DimmerIntrPointSelect@lights,w
 19367  1BA4  3A01               	xorlw	1
 19368  1BA5  1D03               	skipz
 19369  1BA6  2BAB               	goto	i1l730
 19370                           
 19371                           ;Dimmer_B1.c: 77: DimmerLightsIntr = &DimmerLights1;
 19372  1BA7  3055               	movlw	_DimmerLights1& (0+255)
 19373  1BA8  00F0               	movwf	??_DimmerIntrPointSelect
 19374  1BA9  0870               	movf	??_DimmerIntrPointSelect,w
 19375  1BAA  00F6               	movwf	_DimmerLightsIntr
 19376  1BAB                     i1l730:	
 19377                           
 19378                           ;Dimmer_B1.c: 78: }
 19379                           ;Dimmer_B1.c: 81: if (lights == 2) {
 19380  1BAB  0871               	movf	DimmerIntrPointSelect@lights,w
 19381  1BAC  3A02               	xorlw	2
 19382  1BAD  1D03               	skipz
 19383  1BAE  0008               	return
 19384                           
 19385                           ;Dimmer_B1.c: 82: DimmerLightsIntr = &DimmerLights2;
 19386  1BAF  30BE               	movlw	_DimmerLights2& (0+255)
 19387  1BB0  00F0               	movwf	??_DimmerIntrPointSelect
 19388  1BB1  0870               	movf	??_DimmerIntrPointSelect,w
 19389  1BB2  00F6               	movwf	_DimmerLightsIntr
 19390  1BB3  0008               	return
 19391  1BB4                     __end_of_DimmerIntrPointSelect:	
 19392                           
 19393                           	psect	text132
 19394  1B32                     __ptext132:	
 19395 ;; *************** function _IOC_ISR *****************
 19396 ;; Defined at:
 19397 ;;		line 400 in file "../src/MCU_B1.c"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;		None
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;		None
 19402 ;; Return value:  Size  Location     Type
 19403 ;;		None               void
 19404 ;; Registers used:
 19405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19415 ;;Total ram usage:        0 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:    3
 19418 ;; This function calls:
 19419 ;;		_setDimmerReClock
 19420 ;; This function is called by:
 19421 ;;		_ISR
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           
 19426                           ;psect for function _IOC_ISR
 19427  1B32                     _IOC_ISR:	
 19428                           
 19429                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19430                           
 19431                           ;incstack = 0
 19432                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19433  1B32  1D8B               	btfss	11,3	;volatile
 19434  1B33  0008               	return
 19435  1B34  1C0B               	btfss	11,0	;volatile
 19436  1B35  0008               	return
 19437  1B36  0027               	movlb	7	; select bank7
 19438  1B37  1D16               	btfss	22,2	;volatile
 19439  1B38  0008               	return
 19440                           
 19441                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19442  1B39  1116               	bcf	22,2	;volatile
 19443                           
 19444                           ;MCU_B1.c: 403: IOCIF = 0;
 19445  1B3A  100B               	bcf	11,0	;volatile
 19446                           
 19447                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19448  1B3B  0021               	movlb	1	; select bank1
 19449  1B3C  1C20               	btfss	_myMain^(0+128),0
 19450  1B3D  0008               	return
 19451                           
 19452                           ;MCU_B1.c: 407: setDimmerReClock();
 19453  1B3E  319A  224F         	fcall	_setDimmerReClock
 19454  1B40  0008               	return
 19455  1B41                     __end_of_IOC_ISR:	
 19456                           
 19457                           	psect	text133
 19458  1A4F                     __ptext133:	
 19459 ;; *************** function _setDimmerReClock *****************
 19460 ;; Defined at:
 19461 ;;		line 243 in file "../src/MCU_B1.c"
 19462 ;; Parameters:    Size  Location     Type
 19463 ;;		None
 19464 ;; Auto vars:     Size  Location     Type
 19465 ;;		None
 19466 ;; Return value:  Size  Location     Type
 19467 ;;		None               void
 19468 ;; Registers used:
 19469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19470 ;; Tracked objects:
 19471 ;;		On entry : 0/0
 19472 ;;		On exit  : 0/0
 19473 ;;		Unchanged: 0/0
 19474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19479 ;;Total ram usage:        0 bytes
 19480 ;; Hardware stack levels used:    1
 19481 ;; Hardware stack levels required when called:    2
 19482 ;; This function calls:
 19483 ;;		_setDimmerLights_IntrIOC_GO
 19484 ;; This function is called by:
 19485 ;;		_IOC_ISR
 19486 ;; This function uses a non-reentrant model
 19487 ;;
 19488                           
 19489                           
 19490                           ;psect for function _setDimmerReClock
 19491  1A4F                     _setDimmerReClock:	
 19492                           
 19493                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19494                           
 19495                           ;incstack = 0
 19496                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19497  1A4F  3001               	movlw	1
 19498  1A50  3191  21B2  319A   	fcall	_setDimmerLights_IntrIOC_GO
 19499                           
 19500                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19501  1A53  3002               	movlw	2
 19502  1A54  3191  21B2         	fcall	_setDimmerLights_IntrIOC_GO
 19503  1A56  0008               	return
 19504  1A57                     __end_of_setDimmerReClock:	
 19505                           
 19506                           	psect	text134
 19507  11B2                     __ptext134:	
 19508 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19509 ;; Defined at:
 19510 ;;		line 28 in file "../src/Dimmer_B1.c"
 19511 ;; Parameters:    Size  Location     Type
 19512 ;;  lights          1    wreg     unsigned char 
 19513 ;; Auto vars:     Size  Location     Type
 19514 ;;  lights          1    2[COMMON] unsigned char 
 19515 ;; Return value:  Size  Location     Type
 19516 ;;		None               void
 19517 ;; Registers used:
 19518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19519 ;; Tracked objects:
 19520 ;;		On entry : 0/0
 19521 ;;		On exit  : 0/0
 19522 ;;		Unchanged: 0/0
 19523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19527 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19528 ;;Total ram usage:        1 bytes
 19529 ;; Hardware stack levels used:    1
 19530 ;; Hardware stack levels required when called:    1
 19531 ;; This function calls:
 19532 ;;		_DimmerIntrIOCPointSelect
 19533 ;; This function is called by:
 19534 ;;		_setDimmerReClock
 19535 ;; This function uses a non-reentrant model
 19536 ;;
 19537                           
 19538                           
 19539                           ;psect for function _setDimmerLights_IntrIOC_GO
 19540  11B2                     _setDimmerLights_IntrIOC_GO:	
 19541                           
 19542                           ;incstack = 0
 19543                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19544                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19545  11B2  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19546                           
 19547                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19548  11B3  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19549  11B4  319C  2448  3191   	fcall	_DimmerIntrIOCPointSelect
 19550                           
 19551                           ;Dimmer_B1.c: 46: if (DimmerLightsIntrIOC->IntrStart == 0 && RB2 == 0) {
 19552  11B7  0021               	movlb	1	; select bank1
 19553  11B8  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19554  11B9  3E02               	addlw	2
 19555  11BA  0086               	movwf	6
 19556  11BB  3001               	movlw	1	; select bank2/3
 19557  11BC  0087               	movwf	7
 19558  11BD  1901               	btfsc	1,2
 19559  11BE  0008               	return
 19560  11BF  0020               	movlb	0	; select bank0
 19561  11C0  190D               	btfsc	13,2	;volatile
 19562  11C1  0008               	return
 19563                           
 19564                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->IntrStart = 1;
 19565  11C2  0021               	movlb	1	; select bank1
 19566  11C3  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19567  11C4  3E02               	addlw	2
 19568  11C5  0086               	movwf	6
 19569  11C6  3001               	movlw	1	; select bank2/3
 19570  11C7  0087               	movwf	7
 19571  11C8  1501               	bsf	1,2
 19572                           
 19573                           ;Dimmer_B1.c: 48: DimmerLightsIntrIOC->GO = 1;
 19574  11C9  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19575  11CA  0086               	movwf	6
 19576  11CB  3001               	movlw	1	; select bank2/3
 19577  11CC  0087               	movwf	7
 19578  11CD  1401               	bsf	1,0
 19579                           
 19580                           ;Dimmer_B1.c: 49: DimmerLightsIntrIOC->MosfetSignal = 1;
 19581  11CE  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19582  11CF  0086               	movwf	6
 19583  11D0  3001               	movlw	1	; select bank2/3
 19584  11D1  0087               	movwf	7
 19585  11D2  1481               	bsf	1,1
 19586                           
 19587                           ;Dimmer_B1.c: 50: Dimmer.Correction = 0;
 19588  11D3  01C8               	clrf	(_Dimmer^(0+128)+2)	;volatile
 19589                           
 19590                           ;Dimmer_B1.c: 52: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19591  11D4  0A4C               	incf	_DimmerLightsIntrIOC^(0+128),w
 19592  11D5  0086               	movwf	6
 19593  11D6  3001               	movlw	1	; select bank2/3
 19594  11D7  0087               	movwf	7
 19595  11D8  1D01               	btfss	1,2
 19596  11D9  0008               	return
 19597                           
 19598                           ;Dimmer_B1.c: 53: DimmerLightsIntrIOC->MOSFET = 1;
 19599  11DA  084C               	movf	_DimmerLightsIntrIOC^(0+128),w
 19600  11DB  0086               	movwf	6
 19601  11DC  3001               	movlw	1	; select bank2/3
 19602  11DD  0087               	movwf	7
 19603  11DE  1401               	bsf	1,0
 19604                           
 19605                           ;Dimmer_B1.c: 55: if (lights == 1) {
 19606  11DF  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19607  11E0  3A01               	xorlw	1
 19608  11E1  1D03               	skipz
 19609  11E2  29E6               	goto	i1l6945
 19610                           
 19611                           ;Dimmer_B1.c: 56: RA7 = 1;
 19612  11E3  0020               	movlb	0	; select bank0
 19613  11E4  178C               	bsf	12,7	;volatile
 19614                           
 19615                           ;Dimmer_B1.c: 58: }
 19616  11E5  0008               	return
 19617  11E6                     i1l6945:	
 19618                           
 19619                           ;Dimmer_B1.c: 61: else if (lights == 2) {
 19620  11E6  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19621  11E7  3A02               	xorlw	2
 19622  11E8  1D03               	skipz
 19623  11E9  0008               	return
 19624                           
 19625                           ;Dimmer_B1.c: 62: RB4 = 1;
 19626  11EA  0020               	movlb	0	; select bank0
 19627  11EB  160D               	bsf	13,4	;volatile
 19628  11EC  0008               	return
 19629  11ED                     __end_of_setDimmerLights_IntrIOC_GO:	
 19630                           
 19631                           	psect	text135
 19632  1C48                     __ptext135:	
 19633 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19634 ;; Defined at:
 19635 ;;		line 8 in file "../src/Dimmer_B1.c"
 19636 ;; Parameters:    Size  Location     Type
 19637 ;;  lights          1    wreg     unsigned char 
 19638 ;; Auto vars:     Size  Location     Type
 19639 ;;  lights          1    1[COMMON] unsigned char 
 19640 ;; Return value:  Size  Location     Type
 19641 ;;		None               void
 19642 ;; Registers used:
 19643 ;;		wreg
 19644 ;; Tracked objects:
 19645 ;;		On entry : 0/0
 19646 ;;		On exit  : 0/0
 19647 ;;		Unchanged: 0/0
 19648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19650 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19652 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19653 ;;Total ram usage:        2 bytes
 19654 ;; Hardware stack levels used:    1
 19655 ;; This function calls:
 19656 ;;		Nothing
 19657 ;; This function is called by:
 19658 ;;		_setDimmerLights_IntrIOC_GO
 19659 ;; This function uses a non-reentrant model
 19660 ;;
 19661                           
 19662                           
 19663                           ;psect for function _DimmerIntrIOCPointSelect
 19664  1C48                     _DimmerIntrIOCPointSelect:	
 19665                           
 19666                           ;incstack = 0
 19667                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19668                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19669  1C48  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19670                           
 19671                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19672  1C49  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19673  1C4A  3A01               	xorlw	1
 19674  1C4B  1D03               	skipz
 19675  1C4C  2C52               	goto	i1l717
 19676                           
 19677                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19678  1C4D  3055               	movlw	_DimmerLights1& (0+255)
 19679  1C4E  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19680  1C4F  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19681  1C50  0021               	movlb	1	; select bank1
 19682  1C51  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19683  1C52                     i1l717:	
 19684                           
 19685                           ;Dimmer_B1.c: 12: }
 19686                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19687  1C52  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19688  1C53  3A02               	xorlw	2
 19689  1C54  1D03               	skipz
 19690  1C55  0008               	return
 19691                           
 19692                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19693  1C56  30BE               	movlw	_DimmerLights2& (0+255)
 19694  1C57  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19695  1C58  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19696  1C59  0021               	movlb	1	; select bank1
 19697  1C5A  00CC               	movwf	_DimmerLightsIntrIOC^(0+128)
 19698  1C5B  0008               	return
 19699  1C5C                     __end_of_DimmerIntrIOCPointSelect:	
 19700  007E                     btemp	set	126	;btemp
 19701  007E                     pic14e$flags	set	126
 19702  007E                     wtemp	set	126
 19703  007E                     wtemp0	set	126
 19704  0080                     wtemp1	set	128
 19705  0082                     wtemp2	set	130
 19706  0084                     wtemp3	set	132
 19707  0086                     wtemp4	set	134
 19708  0088                     wtemp5	set	136
 19709  007F                     wtemp6	set	127
 19710  007E                     ttemp	set	126
 19711  007E                     ttemp0	set	126
 19712  0081                     ttemp1	set	129
 19713  0084                     ttemp2	set	132
 19714  0087                     ttemp3	set	135
 19715  007F                     ttemp4	set	127
 19716  007E                     ltemp	set	126
 19717  007E                     ltemp0	set	126
 19718  0082                     ltemp1	set	130
 19719  0086                     ltemp2	set	134
 19720  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     79      80
    BANK1            80      7      79
    BANK2            80      0      78
    BANK3            80      0      79
    BANK4            80      7      76
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK2[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights22	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), 

    DimmerLights11	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights1(BANK2[17]), 

    DimmerLights	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntr	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DimmerLightsIntrIOC	PTR volatile struct DimmerLights size(1) Largest target is 17
		 -> NULL(NULL[0]), DimmerLights2(BANK3[17]), DimmerLights1(BANK2[17]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjOn->_getDimmerLights_Allow_Condition
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setProductData
    _getAll_DimmerLights_AdjSw->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getDimmerLights_Allow_Condition->_getMain_All_Error_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setPercentValue
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Exception_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setDimmerLights_ErrorClose
    _DlyOff_Main->_setDimmerLights_ErrorClose

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  153074
                                              3 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
                          _setTxData
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5203
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    5203
                                             70 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   10242
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0   10242
                                             75 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
              _setDimmerLights_AdjOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjOn                                1     1      0     677
                                             12 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     176
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1020
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1020
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   55623
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   55623
                                              5 BANK1      1     1      0
                                              0 BANK4      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   54464
                                             78 BANK0      1     1      0
                                              4 BANK1      1     1      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5024
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   49168
                             _setBuz
         _setDimmerLights_ErrorClose
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   17739
                                             75 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    2377
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                             _setBuz
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21130
                                             72 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0   17515
                                             70 BANK0      2     2      0
              _setDimmerLights_AdjRF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14126
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14033
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3075
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    5220
                                             70 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
          _getAll_DimmerLights_AdjSw
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0     114
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerLights_AdjSw                            5     5      0     232
                                              2 BANK0      5     5      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     549
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0     130
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1144
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1144
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1243
                                              6 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1172
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12192
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     832
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    8449
                                             75 BANK0      1     1      0
                                              0 BANK1      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      40
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   40299
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   40299
                                             78 BANK0      1     1      0
            _DimmerLightsPointSelect
    _getDimmerLights_Allow_Condition
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1   20041
                                             75 BANK0      3     2      1
                             _setBuz
               _setDimmerLights_Line
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      3     2      1   19457
                                             75 BANK0      3     2      1
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (2) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3750
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0   10958
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     525
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     219
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    3315
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4080
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2720
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2433
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     989
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Allow_Condition                      5     5      0     553
                                              7 BANK0      5     5      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (5) _getMain_LightsStatus                                 1     1      0      71
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _getLoad_OK                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      93
                                              4 BANK0      1     1      0
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      93
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    7127
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    7127
                                             76 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ErrorClose                           5     5      0    5337
                                             75 BANK0      1     1      0
                                              0 BANK1      4     4      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    4860
                                             74 BANK0      1     1      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    4578
                                             70 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    3296
                                             66 BANK0      4     3      1
                    _setPercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0     127
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0     127
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _DimmerLightsPointSelect                              2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      93
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      93
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              4 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         2     2      0     110
                                              2 COMMON     2     2      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
   _DimmerLights_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _getDimmerLights_Allow_Condition
         _getLoad_OK
         _getMain_All_Error_Status
         _getMain_LightsStatus
       _setDimmerLights
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
       _setDimmerLights_Adj
         _setBuz
           ___awdiv
         _setDimmerLights_Line
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLightsPointSelect
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLightsPointSelect
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _setPercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerLights_AdjSw
       _DimmerLightsPointSelect
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
     _setProductData
       _setPercentValue (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setProductData
               _setPercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _setPercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                           ___ftmul (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getDimmerLights_Allow_Condition
                 _getLoad_OK
                 _getMain_All_Error_Status
                 _getMain_LightsStatus
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _setPercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
           _getMain_All_Error_Status
           _getMain_LightsStatus
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _setPercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getDimmerLights_Allow_Condition
           _getLoad_OK
           _getMain_All_Error_Status
           _getMain_LightsStatus
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _setPercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv
     _setTxData

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4F      11       98.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      7      4C      13       95.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 15 16:55:13 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l96 16C7  
                                      l98 16DB                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1EB8                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 0077  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1C84  
                  __end_of_setDelayOff_GO 1597                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                 setDimmerLights_Adj@lights 006D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 14A2  
                    _setDimmerLights_Line 1D00                              ___ftadd@sign 004B  
                                     l110 07F0                                       l106 07F6  
                                     l107 07F2                                       l108 07E0  
                                     l322 1D24                                       l323 1D26  
                    _setDimmerLights_SwOn 1269                                       l255 0991  
                                     l366 1F06                                       l809 1388  
                                     l762 1C06                                       l842 1C8D  
                                     l843 1C95                                       _GIE 005F  
                                     _CRC 00C9                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0014  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00CD  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00BA                                       _ISR 0004  
                                     _WDT 0125              getDimmerLights_Status@lights 0022  
                                     _Sw1 01CF                                       _Sw2 01D8  
               setDimmerLights_Adj@status 006B                  __end_of_CC2500_WriteByte 1D31  
                   _Buzzer_Initialization 1A10                           __end_of_ADC_Set 1A4F  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0023              getDimmerLights_Status@status 0023  
                         _setDimmerLights 14F2                         ??_getSw_KeyStatus 0020  
                   _setDimmerLights_AdjRF 1EB8                     _setDimmerLights_AdjOn 1145  
                                    ?_ISR 0070           setDimmerLights_ErrorClose@count 00E8  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1B41  
                              Load_Main@i 006A                              ___ftdiv@sign 003D  
                                    l1014 1E1E                                      l1015 1E28  
                                    l1049 12E3                                      l1331 1FF9  
                                    l1340 13FC                                      l1317 113F  
                                    l2301 0C7A                                      l3031 08DC  
                                    l2240 0F4C                                      l3025 08C5  
                                    l2321 0AE9                                      l2241 0F4E  
                                    l2242 0F56                  ?_DimmerLightsPointSelect 0070  
                                    l2307 110B                                      l1531 1329  
                                    l2333 1217                                      l3054 05A0  
                                    l2238 0FFC                                      l2247 0F81  
                                    l2249 0FB8                                      l1563 082D  
                                    l1715 0287                                      l2283 1B46  
                                    l2291 0C29                                      l1725 022D  
                                    l1717 0086                           __end_of_IOC_Set 1AFF  
                                    l1558 0816                                      l1726 022B  
                                    l1718 0082                                      l1559 0831  
                                    l1719 007D                                      l1593 06D6  
                                    l2637 106D                                      l2661 02D0  
                                    l2659 03F7                                      l1884 0E6D  
                                    l2864 1DC0                                      l1889 0E67  
                   _setDimmerLights_SwOff 1404                                      l9101 129B  
                                    l9031 157C                                      l9103 12A1  
                                    l9033 1582                                      l9027 1576  
                                    l9115 1439                                      l9301 1486  
                                    l9071 13A3                                      l9135 1739  
                                    l9081 13B4                                      l9057 138A  
                                    l9305 1495                                      l9331 1D5C  
                                    l9059 1390                                      l9325 1D53  
                                    l9069 13A0                                      l9405 15D7  
                                    l9413 15DF                                      l8605 08CA  
                                    l9245 1DAA                                      l9341 1EE6  
                                    l9501 09A0                                      l9327 1D56  
                                    l8623 1BBD                                      l9079 13AF  
                                    l8607 08D2                                      l8703 05C4  
                                    l9247 1DB0                                      l9343 1EE9  
                                    l9503 09A4                                      l9319 1206  
                                    l9265 0930                                      l9409 15DB  
                                    l8641 1E7E                                      l8713 05DF  
                                    l9505 09A7                                      l8619 1BB7  
                                    l9267 0901                                      l9363 1D10  
                                    l8723 0D2F                                      l9347 1EEF  
                                    l9531 084C                                      l9451 0ABE  
                                    l9269 0936                                      l8653 0529  
                                    l9525 0843                                      l9509 09AD  
                                    l9197 1088                                      l9453 0AC2  
                                    l9445 0A84                                      l9461 0ACE  
                   _myMain_Initialization 1B50                                      l8911 081A  
                                    l9375 15A6                                      l9383 15AE  
                                    l8591 089B                                      l8663 053F  
                                    l8751 0D9F                                      l8743 0D86  
                                    l8823 0B84                                      l9615 1522  
                                    l9527 0846                                      l9471 095D  
                                    l9455 0AC6                                      l8681 056C  
                                    l8657 0530                                      l8729 0D45  
                                    l8841 0BB4                                      l9625 1538  
                                    l9473 0960                                      l9457 0ACA  
                                    l9449 0AA9                                      l9801 0C70  
                                    l9571 1F22                                      l8931 1C20  
                                    l8595 08A2                                      l8683 0576  
                                    l8675 0559                                      l8851 0BD8  
                                    l8843 0BC2                                      l9635 1656  
                                    l9547 085E                                      l9491 0978  
                                    l8771 0E9E                                      l9811 1CA3  
                                    l8909 0811                                      l9389 15B7  
                                    l9397 15BF                                      l8597 08AC  
                                    l8693 0592                                      l8685 057B  
                                    l8853 0BDB                                      l9549 0877  
                                    l9477 0966                                      l8765 0E88  
                                    l9583 1EA7                                      l8951 15F5  
                                    l8919 0828                                      l8599 08B1  
                                    l8695 059C                                      l8687 057F  
                                    l9495 0997                                      l8783 0ED9  
                                    l9569 1F17                                      l9577 1E9E  
                                    l8865 1C67                                      l8881 1FA2  
                                    l8857 0BE9                                      l8849 0BCF  
                                    l9497 099A                                      l9737 1B9C  
                                    l9761 0C16                                      l9825 1E01  
                                    _CFGS 0CAE                                      l9579 1EA1  
                                    l8699 05B2                                      l8795 0EF5  
                                    l8787 0EE1                                      l9835 1E0D  
                                    l9827 1E03                                      l9853 1350  
                                    l8957 1600                                      l9693 1FE1  
                                    l9773 0C2C                                      l9837 1E11  
                                    l9863 1360                                      l9855 1353  
                                    l8983 1637                                      l8975 1626  
                                    l8967 1608                                      l8799 0EFD  
                            __CFG_WDTE$ON 0000                                      l9865 1363  
                                    l8969 1614                                      l9785 0C44  
                                    l9859 1359                                      l8979 162F  
                                    l9795 0C65                                      l9869 1369  
                                    l9965 14EC                                      l9957 14CB  
                                    l9959 14D1                                      l9995 1FC9  
                                    l9997 1FAC                                      l9999 1FCE  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    _PEIE 005E                                      u9015 056D  
                                    u9045 0580                                      u9145 0D57  
                                    u9305 0F04                                      u9225 0EAA  
                                    u9075 0593                                      u9155 0D67  
                                    u9235 0EBA                                      u9165 0D87  
                                    u9405 0BD0                                      u9175 0D96  
                                    u9255 0EE2                                      u9185 0DA0  
                                    u9345 0B8B                                      u9265 0EE8  
                                    u9615 1615                                      u8815 08CD  
                                    u9375 0BB5                                      u9295 0EFE  
                                    u9625 161F                                      u9465 1F8E  
                                    u9635 1627                                      u8845 08E3  
                                    u9910 16F9                                      u8775 08A7  
                                    u9595 160B                                      u8795 08C0  
                                    u9915 16F7                                      _LWLO 0CAD  
                                    u8985 055A                                      u9965 1CCF  
                                    _RSSI 00CE                                      _WREN 0CAA  
                                    _Buz1 00AE                                      _Load 0127  
                                    _Temp 00D6                                      _main 1748  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 1800  
                         __end_of_RF_Main 1A19                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B17  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                        _setDimmerReClock 1A4F                                      start 0013  
                                    ttemp 007E                                      wtemp 007E  
                     DelayTimejudge@value 0029                __end_of_setRFSW_AdjControl 122B  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D            getAll_DimmerLights_AdjSw@adjsw 0026  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2327 0028  
    _getDimmerLights_Allow_Condition$2328 0029                         ?_getDimmer_LoadGO 0070  
          getAll_DimmerLights_AdjSw@count 0023                                     ??_ISR 0074  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
 __end_of_getDimmerLights_Allow_Condition 13B6  __size_of_getDimmerLights_Allow_Condition 0047  
       ??_getDimmerLights_Allow_Condition 0027          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 136F                    _getDimmerLights_Status 1B6F  
                      ??_getDimmer_LoadGO 0020            __size_of_DimmerIntrPointSelect 0012  
                        __end_of_LED_Main 1AF3          setDimmerLights_ErrorClose@lights 00E9  
           __end_of_DimmerIntrPointSelect 1BB4                     ?_getDimmerLights_Line 0070  
                                   l10111 13D2                                     l10105 13BD  
                                   l10201 0E53                                     l10203 0E54  
                                   l11013 1777                                     l10303 0FEA  
                                   l10321 1072                                     l11009 176C  
                                   l10421 1DBA                                     l10325 1078  
                                   l10093 1E46                                     l10239 0F6D  
                                   l10415 03F3                                     l10191 0E3E  
                                   l10159 0DDD                                     l10087 1E3E  
                                   l10441 1184                                     l10273 0F9F  
                                   l10089 1E41                                     l10443 1190  
                                   l10275 0FA1                                     l10291 0FC9  
                                   l10355 02FE                                     l10339 02BB  
                                   l10533 0749                                     l10453 11AB  
                                   l10365 0330                                     l10189 0E3C  
                                   l10449 11A2                                     l10633 0B30  
                                   l10625 0B0B                                     l10467 07CA  
                                   l10715 005D                                     l10379 036E  
                                   l10901 0625                                     l10813 01DB  
                                   l10733 0085                                     l10389 03A0  
                                   l10653 0B65                                     l10637 0B38  
                   ?_setDimmerLights_Main 0070                                     l10913 0660  
                                   l10905 0634                                     l10931 06A7  
                                   l10915 0637                                     l10755 00DB  
                                   l10667 125A                                     l10933 067E  
                                   l10917 0668                                     l10749 00A9  
                                   l10693 1312                                     l10685 1304  
                                   l10935 06AF                                     l10943 06CC  
                                   l10937 06B9                                     l10785 016A  
                                   l10793 0195                                     l10867 0275  
                                   l10779 015D                                     l10789 0189  
                                   l10895 0616                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0268                           __end_of___awdiv 163E  
                         __end_of___ftadd 05F7                           __end_of___ftdiv 0DC1  
                         __end_of___ftneg 1A98                                     u10055 090C  
                                   u11125 1FB5                           __end_of___ftmul 0F25  
                         ___awdiv@divisor 0020                                     u11325 0E24  
                                   u12125 0B1E                                     _T1CON 0018  
                                   u12065 1136                                     u11345 0E44  
                                   u12225 1251                                     u12235 1260  
                         __end_of___fttol 0BF2                                     u11445 0F67  
                                   u10495 1F0C                                     u12415 00A7  
                                   u12175 0B52                                     u12425 00D9  
                                   u12515 019C                                     u12435 011D  
                                   u12275 1321                                     u11565 0FDA  
                                   u11905 119B                                     u12650 0666  
                                   u11915 11A3                                     u11835 1DC1  
                                   u11845 1DC6                                     u12655 0642  
                                   u12680 06AD                                     u11945 07C0  
                                   u11875 1187                                     u12685 0689  
                                   _IOCBF 0396                                     u11895 1191  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 11B2                                     i1l730 1BAB  
                                   i1l717 1C52                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1CD5  
                           __CFG_WRT$HALF 0000        __end_of_setDimmerLights_IntrIOC_GO 11ED  
              _setDimmerLights_IntrIOC_GO 11B2                          __end_of_TMR1_ISR 1F50  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
      __end_of_setDimmerLights_ErrorClose 0955                _setDimmerLights_ErrorClose 08F3  
                        __end_of_TMR1_Set 1B0B                                     _getAD 1E33  
                           ___awtoft@sign 002D               DimmerIntrPointSelect@lights 0071  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1BFC  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03C0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1D00                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
            __end_of_getMain_LightsStatus 1C22             __end_of_setLED_Initialization 1BD8  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 16EF               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0068                    ??_Flash_Memory_Erasing 0020  
                         _getPercentValue 0A1E                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0015                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 0010  
                       ??_setPercentValue 005C                              __end_of_main 17A3  
                     ?_setRF_DimmerLights 0066                          __end_of_Fosc_Set 1A2C  
                      ??_setMemory_Modify 0020                            _Exception_Main 05F7  
                        ?_CC2500_WriteREG 0022                                 ??_ADC_Set 0020  
                 __end_of_setDimmerLights 1544                      _setSw_Initialization 1A87  
                                  ??_main 006F                             ___fttol@sign1 0056  
                            ?_setLog_Code 0070                   _setControl_Lights_Table 0A83  
                          _setMemory_Data 1AC3                    ?_Buzzer_Initialization 0070  
       __size_of_DimmerIntrIOCPointSelect 0014                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 03C0                 ?_DimmerIntrIOCPointSelect 0070  
                               ??_IOC_ISR 0073                                 ??_IOC_Set 0020  
         __end_of_DimmerLightsPointSelect 1C0F                    ?_setDimmerLights_AdjRF 0070  
                  ?_setDimmerLights_AdjOn 0070                  __size_of_setRFSW_Control 004F  
                 ??_Switch_Initialization 0025                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0020                         ??_getRF_KeyStatus 0020  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 17A3  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006F  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 1A7F  
                               ??_WDT_Set 0020                          __end_of___awtoft 1E95  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 08F3  
                _getMain_All_Error_Status 0800                                    _IOCBF2 1CB2  
                                  i1l7313 042A                                    i1l7325 045A  
                                  i1l7361 04E4                                    i1l7353 04BF  
                                  i1l7329 0461                                    i1l7347 04A8  
                                  i1l7355 04C5                                    i1l7365 04FA  
                                  i1l7349 04AE                                    i1l6945 11E6  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 002B  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0244                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1D31  
                                  u794_25 1F4A                                    _WDTCON 0097  
                    Exception_Main@i_3619 00EC                        DelayTime_1us@count 0020  
          __size_of_CC2500_PowerOnInitial 0015             __end_of_CC2500_PowerOnInitial 1CEA  
                                  _Dimmer 00C6                                    _DlySw1 01E1  
                                  _DlySw2 01E6                __end_of_Mcu_Initialization 1BEA  
                     __end_of_Buzzer_Main 07FD                                    _Memory 0220  
                                  _Timer1 0120                                    ___bmul 1BB4  
                  __end_of_Exception_Main 06D7                      Load_Main@Load_Status 0069  
                    Exception_Main@lights 00EE                                    ___wmul 1DB7  
                               ??___awdiv 0024                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0014                                 ??___ftdiv 0034  
                               ??___ftneg 0041                     setDimmerLights@lights 006D  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024               setDimmerLights_AdjRF@lights 0063  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0020  
                                  _r_data 00D4                                    _s_data 00D5  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 1597  
                                  _myMain 00A0                    __end_of_setMemory_Data 1ACF  
                        _DimmerLightsIntr 0076                     ?_setSw_Initialization 0070  
                   setDimmerLights@status 006B                          ___awdiv@quotient 0027  
                                  _setBuz 1696                        __size_of_Temp_Main 0003  
             __end_of_Load_Initialization 1A36          ??_setDimmerLights_Initialization 0022  
         ?_setDimmerLights_Initialization 0070                     ___ftmul@f3_as_product 0039  
     __end_of_setDimmerLights_IntrControl 0501               _setDimmerLights_IntrControl 0400  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1C48               getMain_Lights_Count@status1 0022  
             getMain_Lights_Count@status2 0023               getMain_Lights_Count@status3 0021  
                   __end_of_SwPointSelect 1CAC              __size_of_Flash_Memory_Modify 004E  
       setDimmerLights_IntrControl@lights 0073                   __size_of_LedPointSelect 0020  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0020                                _TouchPower 1066  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
              ?_getAll_DimmerLights_AdjSw 0070                   __end_of_getPercentValue 0A83  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0045  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5261 0022  
                           ?_my_MainTimer 0070                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
          DimmerIntrIOCPointSelect@lights 0071                           ?_Exception_Main 0070  
                            __pidataBANK4 1E53                             __end_of_getAD 1E53  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
            __size_of_setDimmerLights_Adj 0058                        _LED_Initialization 1ADB  
                         _getSw_KeyStatus 1DF4                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0021                          ??_DelayTimejudge 0024  
                         ?_setMemory_Data 0020             ??_Flash_Memory_Initialization 0062  
                        ?_setDimmerLights 006B                      _getMain_Lights_Count 1CEA  
                               ?_WDT_Main 0070                         __end_of_Load_Main 028D  
                      __size_of_getBuz_GO 0011                      _getMain_LightsStatus 1C0F  
              __end_of_set_TimeoutCleared 1A31                  __end_of_setDimmerReClock 1A57  
                      __size_of_getRxData 008B                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1B24  
                          _DimmerLights11 00CA                            _DimmerLights22 00CB  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 1A19  
                      ??_CC2500_WriteByte 0020                                __pbssBANK0 006F  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 07B3  
                       ??_setRFSW_Control 006B                         __end_of_Temp_Main 0800  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1A57                                __pnvCOMMON 0079  
                           ??_Switch_Main 006E                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 006F                         LedPointSelect@led 0021  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1748                            _getDelayOff_GO 1B5F  
                     _CC2500_WriteCommand 1D4A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020          __size_of_DimmerLightsPointSelect 0013  
                        ??_setDelayOff_GO 0068             ??_DimmerLights_Initialization 0024  
                                 ?___wmul 0020                                ??_TMR1_ISR 0074  
                           ?_setTemp_Main 0070                                _getLoad_AD 0AEA  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 1A67  
                      __size_of_setTxData 009B                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1A48                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 122B                                ??_WDT_Main 0020  
                   ?_getMain_LightsStatus 0070              __end_of_setRF_Initialization 1AAC  
                      _setRFSW_AdjControl 11ED                    __end_of_setProductData 1B32  
                                 _IOC_ISR 1B32                                   _IOC_Set 1AF3  
                    __size_of_setLog_Code 0034     getDimmerLights_Allow_Condition@lights 002A  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 110F  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1D64  
              getAll_DimmerLights_AdjSw@i 0024               ?_setDimmerLights_IntrIOC_GO 0070  
                  __size_of_CC2500_RxData 005F                    __size_of_CC2500_TxData 0064  
             ?_setDimmerLights_ErrorClose 0070                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1A16  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1B0B           __end_of_setControl_Lights_Table 0AEA  
                         setRF_Main@error 0267                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070                           _setPercentValue 09B9  
                 ??_setLoad_AH_AL_Restore 0020                          ?_getPercentValue 0070  
            __end_of_CC2500_FrequencyCabr 1AC3                           __size_of_IO_Set 0019  
                       __end_of_getBuz_GO 1B91                       ??_Flash_Memory_Main 0026  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1B6F  
                                 _VarLED1 016A                                   _VarLED2 01EB  
          __end_of_getDimmerLights_Status 1B80                         __end_of_getRxData 0C7D  
                 __end_of_getSw_KeyStatus 1E13                  _CC2500_registers_address 1000  
        __end_of_DimmerIntrIOCPointSelect 1C5C                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0068                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 15EA                                   ___ftadd 0501  
                                 ___ftdiv 0D18                                   ___ftneg 1A8F  
                         __size_of___wmul 001E                                   ___ftmul 0E71  
                                 ___fttol 0B6B                       __end_of_Switch_Main 1AB7  
                                 ___lwdiv 117B                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1B91                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 006B                           __size_of_setBuz 0059  
                                 __ptext1 12EA                                   __ptext2 1B50  
                                 __ptext3 122B                                   __ptext4 0AEA  
                                 __ptext5 1E33                                   __ptext6 1BEA  
                                 __ptext7 0002                                   __ptext8 07FD  
                                 __ptext9 0DC1                   ??_setDimmerLights_AdjRF 0062  
                 ??_setDimmerLights_AdjOn 002C                 __size_of_CC2500_SIDLEMode 0004  
                   _DimmerIntrPointSelect 1BA2                              __size_of_ISR 000F  
              ??_getMain_All_Error_Status 0020                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 1145                 __end_of_Flash_Memory_Read 1D7E  
                 ??_setDimmerLights_SwOff 006A                                _setRF_Main 0F25  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1A5F  
                       _DimmerLights_Main 1A6F            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1A3C                __end_of_CC2500_ClearRXFIFO 1A20  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 1A24  
           DimmerLightsPointSelect@lights 0021                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 0079  
                          _LedPointSelect 1E13                       _DelayOffPointSelect 1C5C  
                                 clrloop0 1A43            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1B24                      end_of_initialization 0045  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1F50  
                           _DelayTime_1us 1F01                         __end_of_setTxData 0D18  
              __end_of_Flash_Memory_Write 2000                                   init_ram 1A3C  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006F  
                    Flash_Memory_Read@ret 0023                                   initloop 1A3D  
                              _setSw_Main 028D                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 002F                         _CC2500_ReadStatus 1EDC  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1BC6  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0833                             _CC2500_TxData 0955  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 13B6  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1A98                       ??_CC2500_ReadStatus 0022  
                  ??_getMain_LightsStatus 0020                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1A77                        _Mcu_Initialization 1BD8  
                __size_of_CC2500_PowerRST 0044                      __end_of_my_MainTimer 132B  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1E33                   __end_of_setPercentValue 0A1E  
                __size_of_CC2500_WriteREG 0023                 __end_of_CC2500_InitSetREG 1F7A  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0020  
                     _setDimmerLights_Adj 163E                      ?_Flash_Memory_Unlock 0070  
               __end_of_CC2500_ReadStatus 1F01                             ?_RF_RxDisable 0070  
         getMain_All_Error_Status@command 0025               ??_getAll_DimmerLights_AdjSw 0022  
                             ___ftdiv@exp 003C                          ??_Exception_Main 006B  
                          __end_of_IO_Set 1D4A                      _setRF_Initialization 1AA1  
                      _setMemory_LoopSave 1C35                               _Switch_Main 1AAC  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 _DimmerLightsPointSelect 1BFC                   __end_of_getRF_KeyStatus 1BA2  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1CD5                      ??_Mcu_Initialization 0021  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                     ?_setMemory_LoopSave 0070                      ?_setDimmerLights_Adj 006B  
                          __end_of___bmul 1BC6                      setRF_DimmerLights@on 0066  
                _DimmerIntrIOCPointSelect 1C48                            __end_of___wmul 1DD5  
                       getSw_KeyStatus@sw 0024                         __size_of_TMR1_ISR 0029  
           __size_of_getDimmerLights_Line 0014                    ?_DimmerIntrPointSelect 0070  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0050  
                          __end_of_setLED 15EA             __size_of_setDimmerLights_Line 0018  
           __size_of_setDimmerLights_SwOn 0040                            __end_of_setBuz 16EF  
                    _CC2500_FrequencyCabr 1AB7                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0036                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1453  
                       __size_of_WDT_Main 0012                         ?_setDimmerReClock 0070  
                     start_initialization 0015                         _setRF_DimmerValue 107B  
                         ?_LedPointSelect 0070                                 _Load_Main 0049  
                             __end_of_ISR 0013                          _getDimmer_LoadGO 1A77  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0005  
                      ??_setDimmerReClock 0073                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1DF4           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 0E71                            ??_RF_RxDisable 0024  
                     __size_of_getLoad_AD 0081                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 1A2C  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 0166                               ?_setSw_Main 0070  
                     ??_setRF_DimmerValue 0066                       __size_of_getTemp_AD 003E  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 07FD                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 00CF  
                   setProductData@address 0065                       Exception_Main@count 00E8  
                 setRF_DimmerValue@lights 0067                       Exception_Main@error 00E9  
                                ??___bmul 0021                     ??_setDimmerLights_Adj 006C  
                                ??___wmul 0024                    __size_of_SwPointSelect 0014  
                               _Tx_Length 00D2                               __pdataBANK4 0245  
                                ??_setLED 0023                 _getAll_DimmerLights_AdjSw 1FA4  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 006F                         ??_CC2500_ReadByte 0020  
        __end_of_getMain_All_Error_Status 0833                          _CC2500_SIDLEMode 1A24  
              __size_of_DimmerLights_Main 0008                 __end_of_setRF_DimmerValue 10AA  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 0075                                  ?_IOC_Set 0070  
                               ___latbits 0003                          _setMemory_Modify 1C22  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E8                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0020                          ?_setPercentValue 0070  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                __size_of_setDimmerLights 0052                             DlyOff_Main@sw 006E  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 005D                __size_of_CC2500_ReadStatus 0025  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0155                             _DimmerLights2 01BE  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0066  
               ??_DimmerLightsPointSelect 0020            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1D9A  
                setRFSW_AdjControl@status 006A                           ??_CC2500_TxData 0024  
                          getRxData@error 00EC               __size_of_LED_Initialization 000C  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 00EA  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00DB  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                              setBuz@time 0029                       setDelayOff_GO@value 0067  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0068                    _setTemp_Initialization 1A0F  
                               _getBuz_GO 1B80       __end_of_Flash_Memory_Initialization 07B3  
             _Flash_Memory_Initialization 06D7                                  ?___awdiv 0020  
                               __ptext100 1544                                 __ptext101 1B24  
                               __ptext110 1A36                                 __ptext102 1F7A  
                               __ptext111 1C5C                                 __ptext103 1BB4  
                               __ptext120 1A20                                 __ptext112 1CD5  
                               __ptext104 1B5F                                 __ptext121 1A1C  
                               __ptext113 1A24                                 __ptext105 1B6F  
                               __ptext130 0400                                 __ptext122 1D4A  
                               __ptext114 132B                                 __ptext106 1BFC  
                               __ptext131 1BA2                                 __ptext123 1A2C  
                               __ptext115 1F50                                 __ptext107 1696  
                               __ptext132 1B32                                 __ptext124 1CC0  
                               __ptext116 1DD5                                 __ptext108 15EA  
                               __ptext133 1A4F                                 __ptext125 1D18  
                               __ptext117 1E95                                 __ptext109 1A57  
                                ?___ftadd 0041                                 __ptext134 11B2  
                               __ptext126 07B3                                 __ptext118 1AB7  
                               __ptext135 1C48                                 __ptext127 1A10  
                               __ptext119 1F01                                 __ptext129 1F27  
                               _getRxData 0BF2                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 0041  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 14A2  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 1A13  
                        getPercentValue@i 005F                          setPercentValue@i 005F  
                           ??_setLog_Code 0066                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 107B                           DelayTimejudge@i 0026  
                         DelayTimejudge@j 0027                           DelayTimejudge@k 0028  
                     __size_of_setSw_Main 0173              CC2500_ReadStatus@status_addr 0023  
          __size_of_setDimmerLights_AdjRF 0024            __size_of_setDimmerLights_AdjOn 0036  
           __end_of_setDimmerLights_AdjRF 1EDC             __end_of_setDimmerLights_AdjOn 117B  
                  CC2500_WriteByte@loop_a 0021                                 _r_address 00D3  
          __size_of_setDimmerLights_SwOff 004F            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 1453              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1B5F                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0026                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1C98                       __end_of_setLED_Main 12EA  
                        ??_getDelayOff_GO 0022                       _DimmerLightsIntrIOC 00CC  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 1A1C  
                       _CC2500_rfSettings 102F                            ___wmul@product 0024  
                                _LED_Main 1AE7                           SwPointSelect@sw 0021  
                               clear_ram0 1A42                  CC2500_InitPATable@loop_d 0027  
                            _my_MainTimer 12EA                                 _setTxData 0C7D  
     __end_of_DimmerLights_Initialization 1C84               _DimmerLights_Initialization 1C70  
                      _CC2500_ClearRXFIFO 1A1C                        _CC2500_ClearTXFIFO 1A20  
                setRF_DimmerLights@lights 006A                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1CC0                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  __size_of_getPercentValue 0065  
                setRF_DimmerLights@status 0069               __size_of_setRFSW_AdjControl 003E  
                      _Flash_Memory_Write 1FD1                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1F27  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 1AFF  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                                _RF_Count 0123                      __end_of_RF_RxDisable 1B50  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1D64  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1BEA  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
              __size_of_setRF_DimmerValue 002F                       ?_Flash_Memory_Write 0070  
                        setRF_Main@loop_f 0265                     __size_of_setTemp_Main 00B0  
                 __size_of_setDelayOff_GO 0053                                  _DelayOff 0075  
                            setSw_Main@sw 006D          setDimmerLights_IntrIOC_GO@lights 0072  
                             ??_Load_Main 0066                          __size_of_IOC_ISR 000F  
            ?_setDimmerLights_IntrControl 0070            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1ADB  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 110F  
                   _DlyOff_Initialization 1A36                      ??_CC2500_ClearRXFIFO 0024  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                                  _Fosc_Set 1A28  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006C  
                      __end_of_getLoad_AD 0B6B                        __end_of_getLoad_OK 1A6F  
                   _Switch_Initialization 1B17         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                         ??_setDimmerLights 006C  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 1269                                ?_setTxData 0070  
                            ?_Switch_Main 0070                ??_DimmerIntrIOCPointSelect 0070  
                        _CC2500_WriteByte 1D18                         getLoad_AD@channel 0026  
            Flash_Memory_Initialization@i 0063                                  _SwDetect 00D1  
                             ??_Temp_Main 0069                         setRFSW_Control@sw 006D  
           _getMain_All_Error_Status$3603 0021             _getMain_All_Error_Status$3604 0023  
                __end_of_getDimmer_LoadGO 1A7F                       _Load_Initialization 1A31  
                               setLED@led 0023                   ??_DimmerIntrPointSelect 0070  
                            _setTemp_Main 0DC1                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 002E  
                                ___awtoft 1E73                          ??_LedPointSelect 0020  
                                ___ftpack 0892             __size_of_getMain_Lights_Count 0016  
                  getDimmer_LoadGO@loadgo 0020             __size_of_getMain_LightsStatus 0013  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00ED  
                    CC2500_WriteREG@value 0022                               _setLED_Main 12A9  
              __end_of_setRF_DimmerLights 1748            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 1A87  
                        setDelayOff_GO@sw 0069                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070        __size_of_getAll_DimmerLights_AdjSw 002D  
                         ___lwdiv@counter 0025                                  __ptext10 1A19  
                                __ptext11 1A0F                                  __ptext20 1066  
                                __ptext12 1AAC                                  __ptext21 1A16  
                                __ptext13 028D                                  __ptext30 107B  
                                __ptext22 0F25                                  __ptext14 1CAC  
                                __ptext31 1EB8                                  __ptext23 0BF2  
                                __ptext15 1145                                  __ptext40 1EDC  
                                __ptext32 0A1E                                  __ptext24 10DB  
                                __ptext16 1DF4                                  __ptext41 1D9A  
                                __ptext33 0E71                                  __ptext25 1C35  
                                __ptext17 1C98                                  __ptext50 1A48  
                                __ptext42 1A13                                  __ptext34 1C22  
                                __ptext26 0A83                                  __ptext18 1B17  
                                __ptext51 0049                                  __ptext43 1AA1  
                                __ptext35 1B91                                  __ptext27 1453  
                                __ptext19 1A87                                  __ptext60 1AE7  
                                __ptext52 1CEA                                  __ptext44 1BD8  
                                __ptext36 1B80                                  __ptext28 1269  
                                __ptext61 12A9                                  __ptext53 1A7F  
                                __ptext45 1B0B                                  __ptext37 1B41  
                                __ptext29 11ED                                  __ptext70 1A98  
                                __ptext62 1ADB                                  __ptext54 1A77  
                                __ptext46 1AFF                                  __ptext38 0955  
                                __ptext71 1D64                                  __ptext63 1BC6  
                                __ptext55 1FA4                                  __ptext47 1D31  
                                __ptext39 0833                                  __ptext80 09B9  
                                __ptext72 05F7                                  __ptext64 110F  
                                __ptext56 1DB7                                  __ptext48 1AF3  
                                __ptext81 0B6B                                  __ptext73 1C84  
                                __ptext65 13B6                                  __ptext57 117B  
                                __ptext49 1A28                                  __ptext90 136F  
                                __ptext82 1A8F                                  __ptext74 1A6F  
                                __ptext66 1ACF                                  __ptext58 1A31  
                                __ptext91 1C0F                                  __ptext83 0D18  
                                __ptext75 14A2                                  __ptext67 06D7  
                                __ptext59 1D7E                                  __ptext92 0800  
                                __ptext84 0501                                  __ptext76 163E  
                                __ptext68 1AC3                                  __ptext93 1A67  
                                __ptext85 1E73                                  __ptext77 14F2  
                                __ptext69 1FD1                                  __ptext94 1C70  
                                __ptext86 0892                                  __ptext78 0C7D  
                                __ptext95 10AA                                  __ptext87 1597  
                                __ptext79 16EF                                  __ptext96 1A5F  
                                __ptext88 1E13                                  __ptext97 17A3  
                                __ptext89 1D00                                  __ptext98 08F3  
                                __ptext99 1404                                  __product 0245  
           ??_setDimmerLights_IntrControl 0072                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1C98  
            __end_of_setDimmerLights_Main 14F2              __end_of_setDimmerLights_Line 1D18  
            __end_of_setDimmerLights_SwOn 12A9                              ??_setSw_Main 006B  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1CAC                  __end_of_CC2500_SIDLEMode 1A28  
              setDimmerLights_Main@lights 006E               __end_of_DelayOffPointSelect 1C70  
              CC2500_WriteCommand@command 0023                      setRF_Main@Receive_OK 0266  
               __size_of_setDimmerReClock 0008                   setDimmerLights_AdjOn@sw 002C  
                         _CC2500_ReadByte 1D9A                        _CC2500_InitPATable 1DD5  
                __end_of_setMemory_Modify 1C35                        __end_of_setRF_Main 1000  
                             ??_getBuz_GO 0022               __size_of_Mcu_Initialization 0012  
             setDimmerLights_ErrorClose@i 00EA                      _CC2500_patable_vaule 105E  
                             ??_getRxData 006E                              getLoad_OK@ok 0020  
                                main@argc 0268                                  main@argv 026A  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6247 0021  
                    _getSw_KeyStatus$6248 0022                           _CC2500_PowerRST 132B  
                __size_of_getSw_KeyStatus 001F               __end_of_Flash_Memory_Modify 1404  
                       ??_getPercentValue 005C                               _setLog_Code 10DB  
             __end_of_Flash_Memory_Unlock 1AA1                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1E95                        __end_of_setSw_Main 0400  
                   ??_Load_Initialization 0022                             _Transceive_OK 03C1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 1F7A  
                             pic14e$flags 007E              ??_setDimmerLights_IntrIOC_GO 0072  
              setDimmerLights_Line@lights 0020              ??_setDimmerLights_ErrorClose 006B  
                 setDimmerLights_SwOff@sw 006A               __size_of_setMemory_LoopSave 0013  
       __end_of_getAll_DimmerLights_AdjSw 1FD1                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 0029    __end_of_setDimmerLights_Initialization 10DB  
 __size_of_setDimmerLights_Initialization 0031            _setDimmerLights_Initialization 10AA  
             __end_of_setDimmerLights_Adj 1696                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1A13  
    __size_of_setDimmerLights_IntrControl 0101                               getLoad_AD@i 0029  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 1ACF                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D0                   __size_of_Exception_Main 00E0  
         __end_of_DelayOff_Initialization 1A5F       __size_of_setDimmerLights_IntrIOC_GO 003B  
     __size_of_setDimmerLights_ErrorClose 0062                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1A67                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 1544  
        __size_of_setControl_Lights_Table 0067                    __end_of_DelayTimejudge 1FA4  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00DC  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 006C  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1F27  
                 __end_of_CC2500_ReadByte 1DB7              __end_of_setSw_Initialization 1A8F  
                         _Timeout_Counter 1CC0           __size_of_getDimmerLights_Status 0011  
                    getPercentValue@value 005E                              _RF_RxDisable 1B41  
              __end_of_LED_Initialization 1AE7            __end_of_setTemp_Initialization 1A10  
                __size_of_setPercentValue 0065                   setMemory_Modify@command 0021  
                    setPercentValue@value 005E                 __end_of_RF_Initialization 1A16  
                   __end_of_CC2500_RxData 0892                     __end_of_CC2500_TxData 09B9  
                   _setLoad_AH_AL_Restore 1D7E                   __end_of_CC2500_PowerRST 136F  
