

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Dec 29 16:49:28 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,delta=2
   149                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	intentry,global,class=CODE,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   162                           	dabs	1,0x7E,2
   163  0000                     	;# 
   164  0001                     	;# 
   165  0002                     	;# 
   166  0003                     	;# 
   167  0004                     	;# 
   168  0005                     	;# 
   169  0006                     	;# 
   170  0007                     	;# 
   171  0008                     	;# 
   172  0009                     	;# 
   173  000A                     	;# 
   174  000B                     	;# 
   175  000C                     	;# 
   176  000D                     	;# 
   177  000E                     	;# 
   178  0010                     	;# 
   179  0011                     	;# 
   180  0012                     	;# 
   181  0015                     	;# 
   182  0016                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001C                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0095                     	;# 
   197  0096                     	;# 
   198  0097                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  011D                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  018E                     	;# 
   215  0191                     	;# 
   216  0191                     	;# 
   217  0192                     	;# 
   218  0193                     	;# 
   219  0193                     	;# 
   220  0194                     	;# 
   221  0195                     	;# 
   222  0196                     	;# 
   223  0197                     	;# 
   224  0199                     	;# 
   225  019A                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019E                     	;# 
   234  019F                     	;# 
   235  020D                     	;# 
   236  0210                     	;# 
   237  0211                     	;# 
   238  0211                     	;# 
   239  0212                     	;# 
   240  0212                     	;# 
   241  0213                     	;# 
   242  0213                     	;# 
   243  0214                     	;# 
   244  0214                     	;# 
   245  0215                     	;# 
   246  0215                     	;# 
   247  0215                     	;# 
   248  0216                     	;# 
   249  0216                     	;# 
   250  0217                     	;# 
   251  0217                     	;# 
   252  0291                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0293                     	;# 
   256  0298                     	;# 
   257  0298                     	;# 
   258  0299                     	;# 
   259  029A                     	;# 
   260  0394                     	;# 
   261  0395                     	;# 
   262  0396                     	;# 
   263  0FE4                     	;# 
   264  0FE5                     	;# 
   265  0FE6                     	;# 
   266  0FE7                     	;# 
   267  0FE8                     	;# 
   268  0FE9                     	;# 
   269  0FEA                     	;# 
   270  0FEB                     	;# 
   271  0FED                     	;# 
   272  0FEE                     	;# 
   273  0FEF                     	;# 
   274  0000                     	;# 
   275  0001                     	;# 
   276  0002                     	;# 
   277  0003                     	;# 
   278  0004                     	;# 
   279  0005                     	;# 
   280  0006                     	;# 
   281  0007                     	;# 
   282  0008                     	;# 
   283  0009                     	;# 
   284  000A                     	;# 
   285  000B                     	;# 
   286  000C                     	;# 
   287  000D                     	;# 
   288  000E                     	;# 
   289  0010                     	;# 
   290  0011                     	;# 
   291  0012                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  008C                     	;# 
   302  008D                     	;# 
   303  008E                     	;# 
   304  0090                     	;# 
   305  0091                     	;# 
   306  0092                     	;# 
   307  0095                     	;# 
   308  0096                     	;# 
   309  0097                     	;# 
   310  0099                     	;# 
   311  009A                     	;# 
   312  009B                     	;# 
   313  009B                     	;# 
   314  009C                     	;# 
   315  009D                     	;# 
   316  009E                     	;# 
   317  010C                     	;# 
   318  010D                     	;# 
   319  010E                     	;# 
   320  0116                     	;# 
   321  0117                     	;# 
   322  011D                     	;# 
   323  018C                     	;# 
   324  018D                     	;# 
   325  018E                     	;# 
   326  0191                     	;# 
   327  0191                     	;# 
   328  0192                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0197                     	;# 
   335  0199                     	;# 
   336  019A                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019C                     	;# 
   342  019C                     	;# 
   343  019D                     	;# 
   344  019E                     	;# 
   345  019F                     	;# 
   346  020D                     	;# 
   347  0210                     	;# 
   348  0211                     	;# 
   349  0211                     	;# 
   350  0212                     	;# 
   351  0212                     	;# 
   352  0213                     	;# 
   353  0213                     	;# 
   354  0214                     	;# 
   355  0214                     	;# 
   356  0215                     	;# 
   357  0215                     	;# 
   358  0215                     	;# 
   359  0216                     	;# 
   360  0216                     	;# 
   361  0217                     	;# 
   362  0217                     	;# 
   363  0291                     	;# 
   364  0291                     	;# 
   365  0292                     	;# 
   366  0293                     	;# 
   367  0298                     	;# 
   368  0298                     	;# 
   369  0299                     	;# 
   370  029A                     	;# 
   371  0394                     	;# 
   372  0395                     	;# 
   373  0396                     	;# 
   374  0FE4                     	;# 
   375  0FE5                     	;# 
   376  0FE6                     	;# 
   377  0FE7                     	;# 
   378  0FE8                     	;# 
   379  0FE9                     	;# 
   380  0FEA                     	;# 
   381  0FEB                     	;# 
   382  0FED                     	;# 
   383  0FEE                     	;# 
   384  0FEF                     	;# 
   385  0000                     	;# 
   386  0001                     	;# 
   387  0002                     	;# 
   388  0003                     	;# 
   389  0004                     	;# 
   390  0005                     	;# 
   391  0006                     	;# 
   392  0007                     	;# 
   393  0008                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  008C                     	;# 
   413  008D                     	;# 
   414  008E                     	;# 
   415  0090                     	;# 
   416  0091                     	;# 
   417  0092                     	;# 
   418  0095                     	;# 
   419  0096                     	;# 
   420  0097                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010E                     	;# 
   431  0116                     	;# 
   432  0117                     	;# 
   433  011D                     	;# 
   434  018C                     	;# 
   435  018D                     	;# 
   436  018E                     	;# 
   437  0191                     	;# 
   438  0191                     	;# 
   439  0192                     	;# 
   440  0193                     	;# 
   441  0193                     	;# 
   442  0194                     	;# 
   443  0195                     	;# 
   444  0196                     	;# 
   445  0197                     	;# 
   446  0199                     	;# 
   447  019A                     	;# 
   448  019B                     	;# 
   449  019B                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019C                     	;# 
   453  019C                     	;# 
   454  019D                     	;# 
   455  019E                     	;# 
   456  019F                     	;# 
   457  020D                     	;# 
   458  0210                     	;# 
   459  0211                     	;# 
   460  0211                     	;# 
   461  0212                     	;# 
   462  0212                     	;# 
   463  0213                     	;# 
   464  0213                     	;# 
   465  0214                     	;# 
   466  0214                     	;# 
   467  0215                     	;# 
   468  0215                     	;# 
   469  0215                     	;# 
   470  0216                     	;# 
   471  0216                     	;# 
   472  0217                     	;# 
   473  0217                     	;# 
   474  0291                     	;# 
   475  0291                     	;# 
   476  0292                     	;# 
   477  0293                     	;# 
   478  0298                     	;# 
   479  0298                     	;# 
   480  0299                     	;# 
   481  029A                     	;# 
   482  0394                     	;# 
   483  0395                     	;# 
   484  0396                     	;# 
   485  0FE4                     	;# 
   486  0FE5                     	;# 
   487  0FE6                     	;# 
   488  0FE7                     	;# 
   489  0FE8                     	;# 
   490  0FE9                     	;# 
   491  0FEA                     	;# 
   492  0FEB                     	;# 
   493  0FED                     	;# 
   494  0FEE                     	;# 
   495  0FEF                     	;# 
   496  0000                     	;# 
   497  0001                     	;# 
   498  0002                     	;# 
   499  0003                     	;# 
   500  0004                     	;# 
   501  0005                     	;# 
   502  0006                     	;# 
   503  0007                     	;# 
   504  0008                     	;# 
   505  0009                     	;# 
   506  000A                     	;# 
   507  000B                     	;# 
   508  000C                     	;# 
   509  000D                     	;# 
   510  000E                     	;# 
   511  0010                     	;# 
   512  0011                     	;# 
   513  0012                     	;# 
   514  0015                     	;# 
   515  0016                     	;# 
   516  0016                     	;# 
   517  0017                     	;# 
   518  0018                     	;# 
   519  0019                     	;# 
   520  001A                     	;# 
   521  001B                     	;# 
   522  001C                     	;# 
   523  008C                     	;# 
   524  008D                     	;# 
   525  008E                     	;# 
   526  0090                     	;# 
   527  0091                     	;# 
   528  0092                     	;# 
   529  0095                     	;# 
   530  0096                     	;# 
   531  0097                     	;# 
   532  0099                     	;# 
   533  009A                     	;# 
   534  009B                     	;# 
   535  009B                     	;# 
   536  009C                     	;# 
   537  009D                     	;# 
   538  009E                     	;# 
   539  010C                     	;# 
   540  010D                     	;# 
   541  010E                     	;# 
   542  0116                     	;# 
   543  0117                     	;# 
   544  011D                     	;# 
   545  018C                     	;# 
   546  018D                     	;# 
   547  018E                     	;# 
   548  0191                     	;# 
   549  0191                     	;# 
   550  0192                     	;# 
   551  0193                     	;# 
   552  0193                     	;# 
   553  0194                     	;# 
   554  0195                     	;# 
   555  0196                     	;# 
   556  0197                     	;# 
   557  0199                     	;# 
   558  019A                     	;# 
   559  019B                     	;# 
   560  019B                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019C                     	;# 
   564  019C                     	;# 
   565  019D                     	;# 
   566  019E                     	;# 
   567  019F                     	;# 
   568  020D                     	;# 
   569  0210                     	;# 
   570  0211                     	;# 
   571  0211                     	;# 
   572  0212                     	;# 
   573  0212                     	;# 
   574  0213                     	;# 
   575  0213                     	;# 
   576  0214                     	;# 
   577  0214                     	;# 
   578  0215                     	;# 
   579  0215                     	;# 
   580  0215                     	;# 
   581  0216                     	;# 
   582  0216                     	;# 
   583  0217                     	;# 
   584  0217                     	;# 
   585  0291                     	;# 
   586  0291                     	;# 
   587  0292                     	;# 
   588  0293                     	;# 
   589  0298                     	;# 
   590  0298                     	;# 
   591  0299                     	;# 
   592  029A                     	;# 
   593  0394                     	;# 
   594  0395                     	;# 
   595  0396                     	;# 
   596  0FE4                     	;# 
   597  0FE5                     	;# 
   598  0FE6                     	;# 
   599  0FE7                     	;# 
   600  0FE8                     	;# 
   601  0FE9                     	;# 
   602  0FEA                     	;# 
   603  0FEB                     	;# 
   604  0FED                     	;# 
   605  0FEE                     	;# 
   606  0FEF                     	;# 
   607  0000                     	;# 
   608  0001                     	;# 
   609  0002                     	;# 
   610  0003                     	;# 
   611  0004                     	;# 
   612  0005                     	;# 
   613  0006                     	;# 
   614  0007                     	;# 
   615  0008                     	;# 
   616  0009                     	;# 
   617  000A                     	;# 
   618  000B                     	;# 
   619  000C                     	;# 
   620  000D                     	;# 
   621  000E                     	;# 
   622  0010                     	;# 
   623  0011                     	;# 
   624  0012                     	;# 
   625  0015                     	;# 
   626  0016                     	;# 
   627  0016                     	;# 
   628  0017                     	;# 
   629  0018                     	;# 
   630  0019                     	;# 
   631  001A                     	;# 
   632  001B                     	;# 
   633  001C                     	;# 
   634  008C                     	;# 
   635  008D                     	;# 
   636  008E                     	;# 
   637  0090                     	;# 
   638  0091                     	;# 
   639  0092                     	;# 
   640  0095                     	;# 
   641  0096                     	;# 
   642  0097                     	;# 
   643  0099                     	;# 
   644  009A                     	;# 
   645  009B                     	;# 
   646  009B                     	;# 
   647  009C                     	;# 
   648  009D                     	;# 
   649  009E                     	;# 
   650  010C                     	;# 
   651  010D                     	;# 
   652  010E                     	;# 
   653  0116                     	;# 
   654  0117                     	;# 
   655  011D                     	;# 
   656  018C                     	;# 
   657  018D                     	;# 
   658  018E                     	;# 
   659  0191                     	;# 
   660  0191                     	;# 
   661  0192                     	;# 
   662  0193                     	;# 
   663  0193                     	;# 
   664  0194                     	;# 
   665  0195                     	;# 
   666  0196                     	;# 
   667  0197                     	;# 
   668  0199                     	;# 
   669  019A                     	;# 
   670  019B                     	;# 
   671  019B                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019C                     	;# 
   675  019C                     	;# 
   676  019D                     	;# 
   677  019E                     	;# 
   678  019F                     	;# 
   679  020D                     	;# 
   680  0210                     	;# 
   681  0211                     	;# 
   682  0211                     	;# 
   683  0212                     	;# 
   684  0212                     	;# 
   685  0213                     	;# 
   686  0213                     	;# 
   687  0214                     	;# 
   688  0214                     	;# 
   689  0215                     	;# 
   690  0215                     	;# 
   691  0215                     	;# 
   692  0216                     	;# 
   693  0216                     	;# 
   694  0217                     	;# 
   695  0217                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  0394                     	;# 
   705  0395                     	;# 
   706  0396                     	;# 
   707  0FE4                     	;# 
   708  0FE5                     	;# 
   709  0FE6                     	;# 
   710  0FE7                     	;# 
   711  0FE8                     	;# 
   712  0FE9                     	;# 
   713  0FEA                     	;# 
   714  0FEB                     	;# 
   715  0FED                     	;# 
   716  0FEE                     	;# 
   717  0FEF                     	;# 
   718  0000                     	;# 
   719  0001                     	;# 
   720  0002                     	;# 
   721  0003                     	;# 
   722  0004                     	;# 
   723  0005                     	;# 
   724  0006                     	;# 
   725  0007                     	;# 
   726  0008                     	;# 
   727  0009                     	;# 
   728  000A                     	;# 
   729  000B                     	;# 
   730  000C                     	;# 
   731  000D                     	;# 
   732  000E                     	;# 
   733  0010                     	;# 
   734  0011                     	;# 
   735  0012                     	;# 
   736  0015                     	;# 
   737  0016                     	;# 
   738  0016                     	;# 
   739  0017                     	;# 
   740  0018                     	;# 
   741  0019                     	;# 
   742  001A                     	;# 
   743  001B                     	;# 
   744  001C                     	;# 
   745  008C                     	;# 
   746  008D                     	;# 
   747  008E                     	;# 
   748  0090                     	;# 
   749  0091                     	;# 
   750  0092                     	;# 
   751  0095                     	;# 
   752  0096                     	;# 
   753  0097                     	;# 
   754  0099                     	;# 
   755  009A                     	;# 
   756  009B                     	;# 
   757  009B                     	;# 
   758  009C                     	;# 
   759  009D                     	;# 
   760  009E                     	;# 
   761  010C                     	;# 
   762  010D                     	;# 
   763  010E                     	;# 
   764  0116                     	;# 
   765  0117                     	;# 
   766  011D                     	;# 
   767  018C                     	;# 
   768  018D                     	;# 
   769  018E                     	;# 
   770  0191                     	;# 
   771  0191                     	;# 
   772  0192                     	;# 
   773  0193                     	;# 
   774  0193                     	;# 
   775  0194                     	;# 
   776  0195                     	;# 
   777  0196                     	;# 
   778  0197                     	;# 
   779  0199                     	;# 
   780  019A                     	;# 
   781  019B                     	;# 
   782  019B                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019C                     	;# 
   786  019C                     	;# 
   787  019D                     	;# 
   788  019E                     	;# 
   789  019F                     	;# 
   790  020D                     	;# 
   791  0210                     	;# 
   792  0211                     	;# 
   793  0211                     	;# 
   794  0212                     	;# 
   795  0212                     	;# 
   796  0213                     	;# 
   797  0213                     	;# 
   798  0214                     	;# 
   799  0214                     	;# 
   800  0215                     	;# 
   801  0215                     	;# 
   802  0215                     	;# 
   803  0216                     	;# 
   804  0216                     	;# 
   805  0217                     	;# 
   806  0217                     	;# 
   807  0291                     	;# 
   808  0291                     	;# 
   809  0292                     	;# 
   810  0293                     	;# 
   811  0298                     	;# 
   812  0298                     	;# 
   813  0299                     	;# 
   814  029A                     	;# 
   815  0394                     	;# 
   816  0395                     	;# 
   817  0396                     	;# 
   818  0FE4                     	;# 
   819  0FE5                     	;# 
   820  0FE6                     	;# 
   821  0FE7                     	;# 
   822  0FE8                     	;# 
   823  0FE9                     	;# 
   824  0FEA                     	;# 
   825  0FEB                     	;# 
   826  0FED                     	;# 
   827  0FEE                     	;# 
   828  0FEF                     	;# 
   829  0000                     	;# 
   830  0001                     	;# 
   831  0002                     	;# 
   832  0003                     	;# 
   833  0004                     	;# 
   834  0005                     	;# 
   835  0006                     	;# 
   836  0007                     	;# 
   837  0008                     	;# 
   838  0009                     	;# 
   839  000A                     	;# 
   840  000B                     	;# 
   841  000C                     	;# 
   842  000D                     	;# 
   843  000E                     	;# 
   844  0010                     	;# 
   845  0011                     	;# 
   846  0012                     	;# 
   847  0015                     	;# 
   848  0016                     	;# 
   849  0016                     	;# 
   850  0017                     	;# 
   851  0018                     	;# 
   852  0019                     	;# 
   853  001A                     	;# 
   854  001B                     	;# 
   855  001C                     	;# 
   856  008C                     	;# 
   857  008D                     	;# 
   858  008E                     	;# 
   859  0090                     	;# 
   860  0091                     	;# 
   861  0092                     	;# 
   862  0095                     	;# 
   863  0096                     	;# 
   864  0097                     	;# 
   865  0099                     	;# 
   866  009A                     	;# 
   867  009B                     	;# 
   868  009B                     	;# 
   869  009C                     	;# 
   870  009D                     	;# 
   871  009E                     	;# 
   872  010C                     	;# 
   873  010D                     	;# 
   874  010E                     	;# 
   875  0116                     	;# 
   876  0117                     	;# 
   877  011D                     	;# 
   878  018C                     	;# 
   879  018D                     	;# 
   880  018E                     	;# 
   881  0191                     	;# 
   882  0191                     	;# 
   883  0192                     	;# 
   884  0193                     	;# 
   885  0193                     	;# 
   886  0194                     	;# 
   887  0195                     	;# 
   888  0196                     	;# 
   889  0197                     	;# 
   890  0199                     	;# 
   891  019A                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019E                     	;# 
   900  019F                     	;# 
   901  020D                     	;# 
   902  0210                     	;# 
   903  0211                     	;# 
   904  0211                     	;# 
   905  0212                     	;# 
   906  0212                     	;# 
   907  0213                     	;# 
   908  0213                     	;# 
   909  0214                     	;# 
   910  0214                     	;# 
   911  0215                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0216                     	;# 
   915  0216                     	;# 
   916  0217                     	;# 
   917  0217                     	;# 
   918  0291                     	;# 
   919  0291                     	;# 
   920  0292                     	;# 
   921  0293                     	;# 
   922  0298                     	;# 
   923  0298                     	;# 
   924  0299                     	;# 
   925  029A                     	;# 
   926  0394                     	;# 
   927  0395                     	;# 
   928  0396                     	;# 
   929  0FE4                     	;# 
   930  0FE5                     	;# 
   931  0FE6                     	;# 
   932  0FE7                     	;# 
   933  0FE8                     	;# 
   934  0FE9                     	;# 
   935  0FEA                     	;# 
   936  0FEB                     	;# 
   937  0FED                     	;# 
   938  0FEE                     	;# 
   939  0FEF                     	;# 
   940  0000                     	;# 
   941  0001                     	;# 
   942  0002                     	;# 
   943  0003                     	;# 
   944  0004                     	;# 
   945  0005                     	;# 
   946  0006                     	;# 
   947  0007                     	;# 
   948  0008                     	;# 
   949  0009                     	;# 
   950  000A                     	;# 
   951  000B                     	;# 
   952  000C                     	;# 
   953  000D                     	;# 
   954  000E                     	;# 
   955  0010                     	;# 
   956  0011                     	;# 
   957  0012                     	;# 
   958  0015                     	;# 
   959  0016                     	;# 
   960  0016                     	;# 
   961  0017                     	;# 
   962  0018                     	;# 
   963  0019                     	;# 
   964  001A                     	;# 
   965  001B                     	;# 
   966  001C                     	;# 
   967  008C                     	;# 
   968  008D                     	;# 
   969  008E                     	;# 
   970  0090                     	;# 
   971  0091                     	;# 
   972  0092                     	;# 
   973  0095                     	;# 
   974  0096                     	;# 
   975  0097                     	;# 
   976  0099                     	;# 
   977  009A                     	;# 
   978  009B                     	;# 
   979  009B                     	;# 
   980  009C                     	;# 
   981  009D                     	;# 
   982  009E                     	;# 
   983  010C                     	;# 
   984  010D                     	;# 
   985  010E                     	;# 
   986  0116                     	;# 
   987  0117                     	;# 
   988  011D                     	;# 
   989  018C                     	;# 
   990  018D                     	;# 
   991  018E                     	;# 
   992  0191                     	;# 
   993  0191                     	;# 
   994  0192                     	;# 
   995  0193                     	;# 
   996  0193                     	;# 
   997  0194                     	;# 
   998  0195                     	;# 
   999  0196                     	;# 
  1000  0197                     	;# 
  1001  0199                     	;# 
  1002  019A                     	;# 
  1003  019B                     	;# 
  1004  019B                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019C                     	;# 
  1008  019C                     	;# 
  1009  019D                     	;# 
  1010  019E                     	;# 
  1011  019F                     	;# 
  1012  020D                     	;# 
  1013  0210                     	;# 
  1014  0211                     	;# 
  1015  0211                     	;# 
  1016  0212                     	;# 
  1017  0212                     	;# 
  1018  0213                     	;# 
  1019  0213                     	;# 
  1020  0214                     	;# 
  1021  0214                     	;# 
  1022  0215                     	;# 
  1023  0215                     	;# 
  1024  0215                     	;# 
  1025  0216                     	;# 
  1026  0216                     	;# 
  1027  0217                     	;# 
  1028  0217                     	;# 
  1029  0291                     	;# 
  1030  0291                     	;# 
  1031  0292                     	;# 
  1032  0293                     	;# 
  1033  0298                     	;# 
  1034  0298                     	;# 
  1035  0299                     	;# 
  1036  029A                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0FE4                     	;# 
  1041  0FE5                     	;# 
  1042  0FE6                     	;# 
  1043  0FE7                     	;# 
  1044  0FE8                     	;# 
  1045  0FE9                     	;# 
  1046  0FEA                     	;# 
  1047  0FEB                     	;# 
  1048  0FED                     	;# 
  1049  0FEE                     	;# 
  1050  0FEF                     	;# 
  1051  0000                     	;# 
  1052  0001                     	;# 
  1053  0002                     	;# 
  1054  0003                     	;# 
  1055  0004                     	;# 
  1056  0005                     	;# 
  1057  0006                     	;# 
  1058  0007                     	;# 
  1059  0008                     	;# 
  1060  0009                     	;# 
  1061  000A                     	;# 
  1062  000B                     	;# 
  1063  000C                     	;# 
  1064  000D                     	;# 
  1065  000E                     	;# 
  1066  0010                     	;# 
  1067  0011                     	;# 
  1068  0012                     	;# 
  1069  0015                     	;# 
  1070  0016                     	;# 
  1071  0016                     	;# 
  1072  0017                     	;# 
  1073  0018                     	;# 
  1074  0019                     	;# 
  1075  001A                     	;# 
  1076  001B                     	;# 
  1077  001C                     	;# 
  1078  008C                     	;# 
  1079  008D                     	;# 
  1080  008E                     	;# 
  1081  0090                     	;# 
  1082  0091                     	;# 
  1083  0092                     	;# 
  1084  0095                     	;# 
  1085  0096                     	;# 
  1086  0097                     	;# 
  1087  0099                     	;# 
  1088  009A                     	;# 
  1089  009B                     	;# 
  1090  009B                     	;# 
  1091  009C                     	;# 
  1092  009D                     	;# 
  1093  009E                     	;# 
  1094  010C                     	;# 
  1095  010D                     	;# 
  1096  010E                     	;# 
  1097  0116                     	;# 
  1098  0117                     	;# 
  1099  011D                     	;# 
  1100  018C                     	;# 
  1101  018D                     	;# 
  1102  018E                     	;# 
  1103  0191                     	;# 
  1104  0191                     	;# 
  1105  0192                     	;# 
  1106  0193                     	;# 
  1107  0193                     	;# 
  1108  0194                     	;# 
  1109  0195                     	;# 
  1110  0196                     	;# 
  1111  0197                     	;# 
  1112  0199                     	;# 
  1113  019A                     	;# 
  1114  019B                     	;# 
  1115  019B                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019C                     	;# 
  1119  019C                     	;# 
  1120  019D                     	;# 
  1121  019E                     	;# 
  1122  019F                     	;# 
  1123  020D                     	;# 
  1124  0210                     	;# 
  1125  0211                     	;# 
  1126  0211                     	;# 
  1127  0212                     	;# 
  1128  0212                     	;# 
  1129  0213                     	;# 
  1130  0213                     	;# 
  1131  0214                     	;# 
  1132  0214                     	;# 
  1133  0215                     	;# 
  1134  0215                     	;# 
  1135  0215                     	;# 
  1136  0216                     	;# 
  1137  0216                     	;# 
  1138  0217                     	;# 
  1139  0217                     	;# 
  1140  0291                     	;# 
  1141  0291                     	;# 
  1142  0292                     	;# 
  1143  0293                     	;# 
  1144  0298                     	;# 
  1145  0298                     	;# 
  1146  0299                     	;# 
  1147  029A                     	;# 
  1148  0394                     	;# 
  1149  0395                     	;# 
  1150  0396                     	;# 
  1151  0FE4                     	;# 
  1152  0FE5                     	;# 
  1153  0FE6                     	;# 
  1154  0FE7                     	;# 
  1155  0FE8                     	;# 
  1156  0FE9                     	;# 
  1157  0FEA                     	;# 
  1158  0FEB                     	;# 
  1159  0FED                     	;# 
  1160  0FEE                     	;# 
  1161  0FEF                     	;# 
  1162  0000                     	;# 
  1163  0001                     	;# 
  1164  0002                     	;# 
  1165  0003                     	;# 
  1166  0004                     	;# 
  1167  0005                     	;# 
  1168  0006                     	;# 
  1169  0007                     	;# 
  1170  0008                     	;# 
  1171  0009                     	;# 
  1172  000A                     	;# 
  1173  000B                     	;# 
  1174  000C                     	;# 
  1175  000D                     	;# 
  1176  000E                     	;# 
  1177  0010                     	;# 
  1178  0011                     	;# 
  1179  0012                     	;# 
  1180  0015                     	;# 
  1181  0016                     	;# 
  1182  0016                     	;# 
  1183  0017                     	;# 
  1184  0018                     	;# 
  1185  0019                     	;# 
  1186  001A                     	;# 
  1187  001B                     	;# 
  1188  001C                     	;# 
  1189  008C                     	;# 
  1190  008D                     	;# 
  1191  008E                     	;# 
  1192  0090                     	;# 
  1193  0091                     	;# 
  1194  0092                     	;# 
  1195  0095                     	;# 
  1196  0096                     	;# 
  1197  0097                     	;# 
  1198  0099                     	;# 
  1199  009A                     	;# 
  1200  009B                     	;# 
  1201  009B                     	;# 
  1202  009C                     	;# 
  1203  009D                     	;# 
  1204  009E                     	;# 
  1205  010C                     	;# 
  1206  010D                     	;# 
  1207  010E                     	;# 
  1208  0116                     	;# 
  1209  0117                     	;# 
  1210  011D                     	;# 
  1211  018C                     	;# 
  1212  018D                     	;# 
  1213  018E                     	;# 
  1214  0191                     	;# 
  1215  0191                     	;# 
  1216  0192                     	;# 
  1217  0193                     	;# 
  1218  0193                     	;# 
  1219  0194                     	;# 
  1220  0195                     	;# 
  1221  0196                     	;# 
  1222  0197                     	;# 
  1223  0199                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019C                     	;# 
  1230  019C                     	;# 
  1231  019D                     	;# 
  1232  019E                     	;# 
  1233  019F                     	;# 
  1234  020D                     	;# 
  1235  0210                     	;# 
  1236  0211                     	;# 
  1237  0211                     	;# 
  1238  0212                     	;# 
  1239  0212                     	;# 
  1240  0213                     	;# 
  1241  0213                     	;# 
  1242  0214                     	;# 
  1243  0214                     	;# 
  1244  0215                     	;# 
  1245  0215                     	;# 
  1246  0215                     	;# 
  1247  0216                     	;# 
  1248  0216                     	;# 
  1249  0217                     	;# 
  1250  0217                     	;# 
  1251  0291                     	;# 
  1252  0291                     	;# 
  1253  0292                     	;# 
  1254  0293                     	;# 
  1255  0298                     	;# 
  1256  0298                     	;# 
  1257  0299                     	;# 
  1258  029A                     	;# 
  1259  0394                     	;# 
  1260  0395                     	;# 
  1261  0396                     	;# 
  1262  0FE4                     	;# 
  1263  0FE5                     	;# 
  1264  0FE6                     	;# 
  1265  0FE7                     	;# 
  1266  0FE8                     	;# 
  1267  0FE9                     	;# 
  1268  0FEA                     	;# 
  1269  0FEB                     	;# 
  1270  0FED                     	;# 
  1271  0FEE                     	;# 
  1272  0FEF                     	;# 
  1273  0000                     	;# 
  1274  0001                     	;# 
  1275  0002                     	;# 
  1276  0003                     	;# 
  1277  0004                     	;# 
  1278  0005                     	;# 
  1279  0006                     	;# 
  1280  0007                     	;# 
  1281  0008                     	;# 
  1282  0009                     	;# 
  1283  000A                     	;# 
  1284  000B                     	;# 
  1285  000C                     	;# 
  1286  000D                     	;# 
  1287  000E                     	;# 
  1288  0010                     	;# 
  1289  0011                     	;# 
  1290  0012                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  008C                     	;# 
  1301  008D                     	;# 
  1302  008E                     	;# 
  1303  0090                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0095                     	;# 
  1307  0096                     	;# 
  1308  0097                     	;# 
  1309  0099                     	;# 
  1310  009A                     	;# 
  1311  009B                     	;# 
  1312  009B                     	;# 
  1313  009C                     	;# 
  1314  009D                     	;# 
  1315  009E                     	;# 
  1316  010C                     	;# 
  1317  010D                     	;# 
  1318  010E                     	;# 
  1319  0116                     	;# 
  1320  0117                     	;# 
  1321  011D                     	;# 
  1322  018C                     	;# 
  1323  018D                     	;# 
  1324  018E                     	;# 
  1325  0191                     	;# 
  1326  0191                     	;# 
  1327  0192                     	;# 
  1328  0193                     	;# 
  1329  0193                     	;# 
  1330  0194                     	;# 
  1331  0195                     	;# 
  1332  0196                     	;# 
  1333  0197                     	;# 
  1334  0199                     	;# 
  1335  019A                     	;# 
  1336  019B                     	;# 
  1337  019B                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019C                     	;# 
  1341  019C                     	;# 
  1342  019D                     	;# 
  1343  019E                     	;# 
  1344  019F                     	;# 
  1345  020D                     	;# 
  1346  0210                     	;# 
  1347  0211                     	;# 
  1348  0211                     	;# 
  1349  0212                     	;# 
  1350  0212                     	;# 
  1351  0213                     	;# 
  1352  0213                     	;# 
  1353  0214                     	;# 
  1354  0214                     	;# 
  1355  0215                     	;# 
  1356  0215                     	;# 
  1357  0215                     	;# 
  1358  0216                     	;# 
  1359  0216                     	;# 
  1360  0217                     	;# 
  1361  0217                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0298                     	;# 
  1367  0298                     	;# 
  1368  0299                     	;# 
  1369  029A                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0FE4                     	;# 
  1374  0FE5                     	;# 
  1375  0FE6                     	;# 
  1376  0FE7                     	;# 
  1377  0FE8                     	;# 
  1378  0FE9                     	;# 
  1379  0FEA                     	;# 
  1380  0FEB                     	;# 
  1381  0FED                     	;# 
  1382  0FEE                     	;# 
  1383  0FEF                     	;# 
  1384  0000                     	;# 
  1385  0001                     	;# 
  1386  0002                     	;# 
  1387  0003                     	;# 
  1388  0004                     	;# 
  1389  0005                     	;# 
  1390  0006                     	;# 
  1391  0007                     	;# 
  1392  0008                     	;# 
  1393  0009                     	;# 
  1394  000A                     	;# 
  1395  000B                     	;# 
  1396  000C                     	;# 
  1397  000D                     	;# 
  1398  000E                     	;# 
  1399  0010                     	;# 
  1400  0011                     	;# 
  1401  0012                     	;# 
  1402  0015                     	;# 
  1403  0016                     	;# 
  1404  0016                     	;# 
  1405  0017                     	;# 
  1406  0018                     	;# 
  1407  0019                     	;# 
  1408  001A                     	;# 
  1409  001B                     	;# 
  1410  001C                     	;# 
  1411  008C                     	;# 
  1412  008D                     	;# 
  1413  008E                     	;# 
  1414  0090                     	;# 
  1415  0091                     	;# 
  1416  0092                     	;# 
  1417  0095                     	;# 
  1418  0096                     	;# 
  1419  0097                     	;# 
  1420  0099                     	;# 
  1421  009A                     	;# 
  1422  009B                     	;# 
  1423  009B                     	;# 
  1424  009C                     	;# 
  1425  009D                     	;# 
  1426  009E                     	;# 
  1427  010C                     	;# 
  1428  010D                     	;# 
  1429  010E                     	;# 
  1430  0116                     	;# 
  1431  0117                     	;# 
  1432  011D                     	;# 
  1433  018C                     	;# 
  1434  018D                     	;# 
  1435  018E                     	;# 
  1436  0191                     	;# 
  1437  0191                     	;# 
  1438  0192                     	;# 
  1439  0193                     	;# 
  1440  0193                     	;# 
  1441  0194                     	;# 
  1442  0195                     	;# 
  1443  0196                     	;# 
  1444  0197                     	;# 
  1445  0199                     	;# 
  1446  019A                     	;# 
  1447  019B                     	;# 
  1448  019B                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019C                     	;# 
  1452  019C                     	;# 
  1453  019D                     	;# 
  1454  019E                     	;# 
  1455  019F                     	;# 
  1456  020D                     	;# 
  1457  0210                     	;# 
  1458  0211                     	;# 
  1459  0211                     	;# 
  1460  0212                     	;# 
  1461  0212                     	;# 
  1462  0213                     	;# 
  1463  0213                     	;# 
  1464  0214                     	;# 
  1465  0214                     	;# 
  1466  0215                     	;# 
  1467  0215                     	;# 
  1468  0215                     	;# 
  1469  0216                     	;# 
  1470  0216                     	;# 
  1471  0217                     	;# 
  1472  0217                     	;# 
  1473  0291                     	;# 
  1474  0291                     	;# 
  1475  0292                     	;# 
  1476  0293                     	;# 
  1477  0298                     	;# 
  1478  0298                     	;# 
  1479  0299                     	;# 
  1480  029A                     	;# 
  1481  0394                     	;# 
  1482  0395                     	;# 
  1483  0396                     	;# 
  1484  0FE4                     	;# 
  1485  0FE5                     	;# 
  1486  0FE6                     	;# 
  1487  0FE7                     	;# 
  1488  0FE8                     	;# 
  1489  0FE9                     	;# 
  1490  0FEA                     	;# 
  1491  0FEB                     	;# 
  1492  0FED                     	;# 
  1493  0FEE                     	;# 
  1494  0FEF                     	;# 
  1495  0000                     	;# 
  1496  0001                     	;# 
  1497  0002                     	;# 
  1498  0003                     	;# 
  1499  0004                     	;# 
  1500  0005                     	;# 
  1501  0006                     	;# 
  1502  0007                     	;# 
  1503  0008                     	;# 
  1504  0009                     	;# 
  1505  000A                     	;# 
  1506  000B                     	;# 
  1507  000C                     	;# 
  1508  000D                     	;# 
  1509  000E                     	;# 
  1510  0010                     	;# 
  1511  0011                     	;# 
  1512  0012                     	;# 
  1513  0015                     	;# 
  1514  0016                     	;# 
  1515  0016                     	;# 
  1516  0017                     	;# 
  1517  0018                     	;# 
  1518  0019                     	;# 
  1519  001A                     	;# 
  1520  001B                     	;# 
  1521  001C                     	;# 
  1522  008C                     	;# 
  1523  008D                     	;# 
  1524  008E                     	;# 
  1525  0090                     	;# 
  1526  0091                     	;# 
  1527  0092                     	;# 
  1528  0095                     	;# 
  1529  0096                     	;# 
  1530  0097                     	;# 
  1531  0099                     	;# 
  1532  009A                     	;# 
  1533  009B                     	;# 
  1534  009B                     	;# 
  1535  009C                     	;# 
  1536  009D                     	;# 
  1537  009E                     	;# 
  1538  010C                     	;# 
  1539  010D                     	;# 
  1540  010E                     	;# 
  1541  0116                     	;# 
  1542  0117                     	;# 
  1543  011D                     	;# 
  1544  018C                     	;# 
  1545  018D                     	;# 
  1546  018E                     	;# 
  1547  0191                     	;# 
  1548  0191                     	;# 
  1549  0192                     	;# 
  1550  0193                     	;# 
  1551  0193                     	;# 
  1552  0194                     	;# 
  1553  0195                     	;# 
  1554  0196                     	;# 
  1555  0197                     	;# 
  1556  0199                     	;# 
  1557  019A                     	;# 
  1558  019B                     	;# 
  1559  019B                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019C                     	;# 
  1563  019C                     	;# 
  1564  019D                     	;# 
  1565  019E                     	;# 
  1566  019F                     	;# 
  1567  020D                     	;# 
  1568  0210                     	;# 
  1569  0211                     	;# 
  1570  0211                     	;# 
  1571  0212                     	;# 
  1572  0212                     	;# 
  1573  0213                     	;# 
  1574  0213                     	;# 
  1575  0214                     	;# 
  1576  0214                     	;# 
  1577  0215                     	;# 
  1578  0215                     	;# 
  1579  0215                     	;# 
  1580  0216                     	;# 
  1581  0216                     	;# 
  1582  0217                     	;# 
  1583  0217                     	;# 
  1584  0291                     	;# 
  1585  0291                     	;# 
  1586  0292                     	;# 
  1587  0293                     	;# 
  1588  0298                     	;# 
  1589  0298                     	;# 
  1590  0299                     	;# 
  1591  029A                     	;# 
  1592  0394                     	;# 
  1593  0395                     	;# 
  1594  0396                     	;# 
  1595  0FE4                     	;# 
  1596  0FE5                     	;# 
  1597  0FE6                     	;# 
  1598  0FE7                     	;# 
  1599  0FE8                     	;# 
  1600  0FE9                     	;# 
  1601  0FEA                     	;# 
  1602  0FEB                     	;# 
  1603  0FED                     	;# 
  1604  0FEE                     	;# 
  1605  0FEF                     	;# 
  1606  0000                     	;# 
  1607  0001                     	;# 
  1608  0002                     	;# 
  1609  0003                     	;# 
  1610  0004                     	;# 
  1611  0005                     	;# 
  1612  0006                     	;# 
  1613  0007                     	;# 
  1614  0008                     	;# 
  1615  0009                     	;# 
  1616  000A                     	;# 
  1617  000B                     	;# 
  1618  000C                     	;# 
  1619  000D                     	;# 
  1620  000E                     	;# 
  1621  0010                     	;# 
  1622  0011                     	;# 
  1623  0012                     	;# 
  1624  0015                     	;# 
  1625  0016                     	;# 
  1626  0016                     	;# 
  1627  0017                     	;# 
  1628  0018                     	;# 
  1629  0019                     	;# 
  1630  001A                     	;# 
  1631  001B                     	;# 
  1632  001C                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0090                     	;# 
  1637  0091                     	;# 
  1638  0092                     	;# 
  1639  0095                     	;# 
  1640  0096                     	;# 
  1641  0097                     	;# 
  1642  0099                     	;# 
  1643  009A                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  010C                     	;# 
  1650  010D                     	;# 
  1651  010E                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  011D                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0191                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0193                     	;# 
  1662  0193                     	;# 
  1663  0194                     	;# 
  1664  0195                     	;# 
  1665  0196                     	;# 
  1666  0197                     	;# 
  1667  0199                     	;# 
  1668  019A                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019C                     	;# 
  1674  019C                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019F                     	;# 
  1678  020D                     	;# 
  1679  0210                     	;# 
  1680  0211                     	;# 
  1681  0211                     	;# 
  1682  0212                     	;# 
  1683  0212                     	;# 
  1684  0213                     	;# 
  1685  0213                     	;# 
  1686  0214                     	;# 
  1687  0214                     	;# 
  1688  0215                     	;# 
  1689  0215                     	;# 
  1690  0215                     	;# 
  1691  0216                     	;# 
  1692  0216                     	;# 
  1693  0217                     	;# 
  1694  0217                     	;# 
  1695  0291                     	;# 
  1696  0291                     	;# 
  1697  0292                     	;# 
  1698  0293                     	;# 
  1699  0298                     	;# 
  1700  0298                     	;# 
  1701  0299                     	;# 
  1702  029A                     	;# 
  1703  0394                     	;# 
  1704  0395                     	;# 
  1705  0396                     	;# 
  1706  0FE4                     	;# 
  1707  0FE5                     	;# 
  1708  0FE6                     	;# 
  1709  0FE7                     	;# 
  1710  0FE8                     	;# 
  1711  0FE9                     	;# 
  1712  0FEA                     	;# 
  1713  0FEB                     	;# 
  1714  0FED                     	;# 
  1715  0FEE                     	;# 
  1716  0FEF                     	;# 
  1717  0000                     	;# 
  1718  0001                     	;# 
  1719  0002                     	;# 
  1720  0003                     	;# 
  1721  0004                     	;# 
  1722  0005                     	;# 
  1723  0006                     	;# 
  1724  0007                     	;# 
  1725  0008                     	;# 
  1726  0009                     	;# 
  1727  000A                     	;# 
  1728  000B                     	;# 
  1729  000C                     	;# 
  1730  000D                     	;# 
  1731  000E                     	;# 
  1732  0010                     	;# 
  1733  0011                     	;# 
  1734  0012                     	;# 
  1735  0015                     	;# 
  1736  0016                     	;# 
  1737  0016                     	;# 
  1738  0017                     	;# 
  1739  0018                     	;# 
  1740  0019                     	;# 
  1741  001A                     	;# 
  1742  001B                     	;# 
  1743  001C                     	;# 
  1744  008C                     	;# 
  1745  008D                     	;# 
  1746  008E                     	;# 
  1747  0090                     	;# 
  1748  0091                     	;# 
  1749  0092                     	;# 
  1750  0095                     	;# 
  1751  0096                     	;# 
  1752  0097                     	;# 
  1753  0099                     	;# 
  1754  009A                     	;# 
  1755  009B                     	;# 
  1756  009B                     	;# 
  1757  009C                     	;# 
  1758  009D                     	;# 
  1759  009E                     	;# 
  1760  010C                     	;# 
  1761  010D                     	;# 
  1762  010E                     	;# 
  1763  0116                     	;# 
  1764  0117                     	;# 
  1765  011D                     	;# 
  1766  018C                     	;# 
  1767  018D                     	;# 
  1768  018E                     	;# 
  1769  0191                     	;# 
  1770  0191                     	;# 
  1771  0192                     	;# 
  1772  0193                     	;# 
  1773  0193                     	;# 
  1774  0194                     	;# 
  1775  0195                     	;# 
  1776  0196                     	;# 
  1777  0197                     	;# 
  1778  0199                     	;# 
  1779  019A                     	;# 
  1780  019B                     	;# 
  1781  019B                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019C                     	;# 
  1785  019C                     	;# 
  1786  019D                     	;# 
  1787  019E                     	;# 
  1788  019F                     	;# 
  1789  020D                     	;# 
  1790  0210                     	;# 
  1791  0211                     	;# 
  1792  0211                     	;# 
  1793  0212                     	;# 
  1794  0212                     	;# 
  1795  0213                     	;# 
  1796  0213                     	;# 
  1797  0214                     	;# 
  1798  0214                     	;# 
  1799  0215                     	;# 
  1800  0215                     	;# 
  1801  0215                     	;# 
  1802  0216                     	;# 
  1803  0216                     	;# 
  1804  0217                     	;# 
  1805  0217                     	;# 
  1806  0291                     	;# 
  1807  0291                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0298                     	;# 
  1811  0298                     	;# 
  1812  0299                     	;# 
  1813  029A                     	;# 
  1814  0394                     	;# 
  1815  0395                     	;# 
  1816  0396                     	;# 
  1817  0FE4                     	;# 
  1818  0FE5                     	;# 
  1819  0FE6                     	;# 
  1820  0FE7                     	;# 
  1821  0FE8                     	;# 
  1822  0FE9                     	;# 
  1823  0FEA                     	;# 
  1824  0FEB                     	;# 
  1825  0FED                     	;# 
  1826  0FEE                     	;# 
  1827  0FEF                     	;# 
  1828  0000                     	;# 
  1829  0001                     	;# 
  1830  0002                     	;# 
  1831  0003                     	;# 
  1832  0004                     	;# 
  1833  0005                     	;# 
  1834  0006                     	;# 
  1835  0007                     	;# 
  1836  0008                     	;# 
  1837  0009                     	;# 
  1838  000A                     	;# 
  1839  000B                     	;# 
  1840  000C                     	;# 
  1841  000D                     	;# 
  1842  000E                     	;# 
  1843  0010                     	;# 
  1844  0011                     	;# 
  1845  0012                     	;# 
  1846  0015                     	;# 
  1847  0016                     	;# 
  1848  0016                     	;# 
  1849  0017                     	;# 
  1850  0018                     	;# 
  1851  0019                     	;# 
  1852  001A                     	;# 
  1853  001B                     	;# 
  1854  001C                     	;# 
  1855  008C                     	;# 
  1856  008D                     	;# 
  1857  008E                     	;# 
  1858  0090                     	;# 
  1859  0091                     	;# 
  1860  0092                     	;# 
  1861  0095                     	;# 
  1862  0096                     	;# 
  1863  0097                     	;# 
  1864  0099                     	;# 
  1865  009A                     	;# 
  1866  009B                     	;# 
  1867  009B                     	;# 
  1868  009C                     	;# 
  1869  009D                     	;# 
  1870  009E                     	;# 
  1871  010C                     	;# 
  1872  010D                     	;# 
  1873  010E                     	;# 
  1874  0116                     	;# 
  1875  0117                     	;# 
  1876  011D                     	;# 
  1877  018C                     	;# 
  1878  018D                     	;# 
  1879  018E                     	;# 
  1880  0191                     	;# 
  1881  0191                     	;# 
  1882  0192                     	;# 
  1883  0193                     	;# 
  1884  0193                     	;# 
  1885  0194                     	;# 
  1886  0195                     	;# 
  1887  0196                     	;# 
  1888  0197                     	;# 
  1889  0199                     	;# 
  1890  019A                     	;# 
  1891  019B                     	;# 
  1892  019B                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019C                     	;# 
  1896  019C                     	;# 
  1897  019D                     	;# 
  1898  019E                     	;# 
  1899  019F                     	;# 
  1900  020D                     	;# 
  1901  0210                     	;# 
  1902  0211                     	;# 
  1903  0211                     	;# 
  1904  0212                     	;# 
  1905  0212                     	;# 
  1906  0213                     	;# 
  1907  0213                     	;# 
  1908  0214                     	;# 
  1909  0214                     	;# 
  1910  0215                     	;# 
  1911  0215                     	;# 
  1912  0215                     	;# 
  1913  0216                     	;# 
  1914  0216                     	;# 
  1915  0217                     	;# 
  1916  0217                     	;# 
  1917  0291                     	;# 
  1918  0291                     	;# 
  1919  0292                     	;# 
  1920  0293                     	;# 
  1921  0298                     	;# 
  1922  0298                     	;# 
  1923  0299                     	;# 
  1924  029A                     	;# 
  1925  0394                     	;# 
  1926  0395                     	;# 
  1927  0396                     	;# 
  1928  0FE4                     	;# 
  1929  0FE5                     	;# 
  1930  0FE6                     	;# 
  1931  0FE7                     	;# 
  1932  0FE8                     	;# 
  1933  0FE9                     	;# 
  1934  0FEA                     	;# 
  1935  0FEB                     	;# 
  1936  0FED                     	;# 
  1937  0FEE                     	;# 
  1938  0FEF                     	;# 
  1939  0000                     	;# 
  1940  0001                     	;# 
  1941  0002                     	;# 
  1942  0003                     	;# 
  1943  0004                     	;# 
  1944  0005                     	;# 
  1945  0006                     	;# 
  1946  0007                     	;# 
  1947  0008                     	;# 
  1948  0009                     	;# 
  1949  000A                     	;# 
  1950  000B                     	;# 
  1951  000C                     	;# 
  1952  000D                     	;# 
  1953  000E                     	;# 
  1954  0010                     	;# 
  1955  0011                     	;# 
  1956  0012                     	;# 
  1957  0015                     	;# 
  1958  0016                     	;# 
  1959  0016                     	;# 
  1960  0017                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  001B                     	;# 
  1965  001C                     	;# 
  1966  008C                     	;# 
  1967  008D                     	;# 
  1968  008E                     	;# 
  1969  0090                     	;# 
  1970  0091                     	;# 
  1971  0092                     	;# 
  1972  0095                     	;# 
  1973  0096                     	;# 
  1974  0097                     	;# 
  1975  0099                     	;# 
  1976  009A                     	;# 
  1977  009B                     	;# 
  1978  009B                     	;# 
  1979  009C                     	;# 
  1980  009D                     	;# 
  1981  009E                     	;# 
  1982  010C                     	;# 
  1983  010D                     	;# 
  1984  010E                     	;# 
  1985  0116                     	;# 
  1986  0117                     	;# 
  1987  011D                     	;# 
  1988  018C                     	;# 
  1989  018D                     	;# 
  1990  018E                     	;# 
  1991  0191                     	;# 
  1992  0191                     	;# 
  1993  0192                     	;# 
  1994  0193                     	;# 
  1995  0193                     	;# 
  1996  0194                     	;# 
  1997  0195                     	;# 
  1998  0196                     	;# 
  1999  0197                     	;# 
  2000  0199                     	;# 
  2001  019A                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019E                     	;# 
  2010  019F                     	;# 
  2011  020D                     	;# 
  2012  0210                     	;# 
  2013  0211                     	;# 
  2014  0211                     	;# 
  2015  0212                     	;# 
  2016  0212                     	;# 
  2017  0213                     	;# 
  2018  0213                     	;# 
  2019  0214                     	;# 
  2020  0214                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  0291                     	;# 
  2029  0291                     	;# 
  2030  0292                     	;# 
  2031  0293                     	;# 
  2032  0298                     	;# 
  2033  0298                     	;# 
  2034  0299                     	;# 
  2035  029A                     	;# 
  2036  0394                     	;# 
  2037  0395                     	;# 
  2038  0396                     	;# 
  2039  0FE4                     	;# 
  2040  0FE5                     	;# 
  2041  0FE6                     	;# 
  2042  0FE7                     	;# 
  2043  0FE8                     	;# 
  2044  0FE9                     	;# 
  2045  0FEA                     	;# 
  2046  0FEB                     	;# 
  2047  0FED                     	;# 
  2048  0FEE                     	;# 
  2049  0FEF                     	;# 
  2050  0000                     	;# 
  2051  0001                     	;# 
  2052  0002                     	;# 
  2053  0003                     	;# 
  2054  0004                     	;# 
  2055  0005                     	;# 
  2056  0006                     	;# 
  2057  0007                     	;# 
  2058  0008                     	;# 
  2059  0009                     	;# 
  2060  000A                     	;# 
  2061  000B                     	;# 
  2062  000C                     	;# 
  2063  000D                     	;# 
  2064  000E                     	;# 
  2065  0010                     	;# 
  2066  0011                     	;# 
  2067  0012                     	;# 
  2068  0015                     	;# 
  2069  0016                     	;# 
  2070  0016                     	;# 
  2071  0017                     	;# 
  2072  0018                     	;# 
  2073  0019                     	;# 
  2074  001A                     	;# 
  2075  001B                     	;# 
  2076  001C                     	;# 
  2077  008C                     	;# 
  2078  008D                     	;# 
  2079  008E                     	;# 
  2080  0090                     	;# 
  2081  0091                     	;# 
  2082  0092                     	;# 
  2083  0095                     	;# 
  2084  0096                     	;# 
  2085  0097                     	;# 
  2086  0099                     	;# 
  2087  009A                     	;# 
  2088  009B                     	;# 
  2089  009B                     	;# 
  2090  009C                     	;# 
  2091  009D                     	;# 
  2092  009E                     	;# 
  2093  010C                     	;# 
  2094  010D                     	;# 
  2095  010E                     	;# 
  2096  0116                     	;# 
  2097  0117                     	;# 
  2098  011D                     	;# 
  2099  018C                     	;# 
  2100  018D                     	;# 
  2101  018E                     	;# 
  2102  0191                     	;# 
  2103  0191                     	;# 
  2104  0192                     	;# 
  2105  0193                     	;# 
  2106  0193                     	;# 
  2107  0194                     	;# 
  2108  0195                     	;# 
  2109  0196                     	;# 
  2110  0197                     	;# 
  2111  0199                     	;# 
  2112  019A                     	;# 
  2113  019B                     	;# 
  2114  019B                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019C                     	;# 
  2118  019C                     	;# 
  2119  019D                     	;# 
  2120  019E                     	;# 
  2121  019F                     	;# 
  2122  020D                     	;# 
  2123  0210                     	;# 
  2124  0211                     	;# 
  2125  0211                     	;# 
  2126  0212                     	;# 
  2127  0212                     	;# 
  2128  0213                     	;# 
  2129  0213                     	;# 
  2130  0214                     	;# 
  2131  0214                     	;# 
  2132  0215                     	;# 
  2133  0215                     	;# 
  2134  0215                     	;# 
  2135  0216                     	;# 
  2136  0216                     	;# 
  2137  0217                     	;# 
  2138  0217                     	;# 
  2139  0291                     	;# 
  2140  0291                     	;# 
  2141  0292                     	;# 
  2142  0293                     	;# 
  2143  0298                     	;# 
  2144  0298                     	;# 
  2145  0299                     	;# 
  2146  029A                     	;# 
  2147  0394                     	;# 
  2148  0395                     	;# 
  2149  0396                     	;# 
  2150  0FE4                     	;# 
  2151  0FE5                     	;# 
  2152  0FE6                     	;# 
  2153  0FE7                     	;# 
  2154  0FE8                     	;# 
  2155  0FE9                     	;# 
  2156  0FEA                     	;# 
  2157  0FEB                     	;# 
  2158  0FED                     	;# 
  2159  0FEE                     	;# 
  2160  0FEF                     	;# 
  2161                           
  2162                           	psect	idataBANK4
  2163  11A4                     __pidataBANK4:	
  2164                           
  2165                           ;initializer for __product
  2166  11A4  3463               	retlw	99
  2167  11A5  3402               	retlw	2
  2168  11A6  3400               	retlw	0
  2169  11A7  3400               	retlw	0
  2170  11A8  3400               	retlw	0
  2171  11A9  3400               	retlw	0
  2172  11AA  3400               	retlw	0
  2173  11AB  3400               	retlw	0
  2174  11AC  3400               	retlw	0
  2175  11AD  3400               	retlw	0
  2176  11AE  3400               	retlw	0
  2177  11AF  3400               	retlw	0
  2178  11B0  34FF               	retlw	255
  2179  11B1  34FF               	retlw	255
  2180  11B2  34FF               	retlw	255
  2181  11B3  3400               	retlw	0
  2182  11B4  3400               	retlw	0
  2183  11B5  3400               	retlw	0
  2184  11B6  3400               	retlw	0
  2185  11B7  3400               	retlw	0
  2186  11B8  3400               	retlw	0
  2187  11B9  3400               	retlw	0
  2188  11BA  3400               	retlw	0
  2189  11BB  3400               	retlw	0
  2190  11BC  3400               	retlw	0
  2191  11BD  3400               	retlw	0
  2192  11BE  3400               	retlw	0
  2193  11BF  3400               	retlw	0
  2194  11C0  3400               	retlw	0
  2195  11C1  3400               	retlw	0
  2196  11C2  3400               	retlw	0
  2197  11C3  3400               	retlw	0
  2198                           
  2199                           	psect	stringtext
  2200  1000                     __pstringtext:	
  2201  1000                     _CC2500_registers_address:	
  2202  1000  3403               	retlw	3
  2203  1001  3416               	retlw	22
  2204  1002  3417               	retlw	23
  2205  1003  341E               	retlw	30
  2206  1004  341F               	retlw	31
  2207  1005  3420               	retlw	32
  2208  1006  342A               	retlw	42
  2209  1007  342B               	retlw	43
  2210  1008  340B               	retlw	11
  2211  1009  340C               	retlw	12
  2212  100A  340D               	retlw	13
  2213  100B  340E               	retlw	14
  2214  100C  340F               	retlw	15
  2215  100D  3410               	retlw	16
  2216  100E  3411               	retlw	17
  2217  100F  3412               	retlw	18
  2218  1010  3413               	retlw	19
  2219  1011  3414               	retlw	20
  2220  1012  340A               	retlw	10
  2221  1013  3415               	retlw	21
  2222  1014  3421               	retlw	33
  2223  1015  3422               	retlw	34
  2224  1016  3418               	retlw	24
  2225  1017  3419               	retlw	25
  2226  1018  341A               	retlw	26
  2227  1019  341B               	retlw	27
  2228  101A  341C               	retlw	28
  2229  101B  341D               	retlw	29
  2230  101C  3423               	retlw	35
  2231  101D  3424               	retlw	36
  2232  101E  3425               	retlw	37
  2233  101F  3426               	retlw	38
  2234  1020  3429               	retlw	41
  2235  1021  342C               	retlw	44
  2236  1022  342D               	retlw	45
  2237  1023  342E               	retlw	46
  2238  1024  3400               	retlw	0
  2239  1025  3401               	retlw	1
  2240  1026  3402               	retlw	2
  2241  1027  3407               	retlw	7
  2242  1028  3408               	retlw	8
  2243  1029  3409               	retlw	9
  2244  102A  3406               	retlw	6
  2245  102B  3404               	retlw	4
  2246  102C  3405               	retlw	5
  2247  102D  3427               	retlw	39
  2248  102E  3428               	retlw	40
  2249  102F                     __end_of_CC2500_registers_address:	
  2250  102F                     _CC2500_rfSettings:	
  2251  102F  3407               	retlw	7
  2252  1030  3407               	retlw	7
  2253  1031  3430               	retlw	48
  2254  1032  3487               	retlw	135
  2255  1033  346B               	retlw	107
  2256  1034  34F8               	retlw	248
  2257  1035  347F               	retlw	127
  2258  1036  343F               	retlw	63
  2259  1037  3409               	retlw	9
  2260  1038  3400               	retlw	0
  2261  1039  345C               	retlw	92
  2262  103A  34A7               	retlw	167
  2263  103B  3462               	retlw	98
  2264  103C  3486               	retlw	134
  2265  103D  3483               	retlw	131
  2266  103E  3403               	retlw	3
  2267  103F  3422               	retlw	34
  2268  1040  34F8               	retlw	248
  2269  1041  3400               	retlw	0
  2270  1042  3444               	retlw	68
  2271  1043  34B6               	retlw	182
  2272  1044  3410               	retlw	16
  2273  1045  3418               	retlw	24
  2274  1046  341D               	retlw	29
  2275  1047  341C               	retlw	28
  2276  1048  34C7               	retlw	199
  2277  1049  3400               	retlw	0
  2278  104A  34B2               	retlw	178
  2279  104B  34EA               	retlw	234
  2280  104C  340A               	retlw	10
  2281  104D  3400               	retlw	0
  2282  104E  3411               	retlw	17
  2283  104F  3459               	retlw	89
  2284  1050  3488               	retlw	136
  2285  1051  3431               	retlw	49
  2286  1052  340B               	retlw	11
  2287  1053  342F               	retlw	47
  2288  1054  342E               	retlw	46
  2289  1055  3406               	retlw	6
  2290  1056  3404               	retlw	4
  2291  1057  3405               	retlw	5
  2292  1058  3400               	retlw	0
  2293  1059  3430               	retlw	48
  2294  105A  34D3               	retlw	211
  2295  105B  3491               	retlw	145
  2296  105C  3441               	retlw	65
  2297  105D  3400               	retlw	0
  2298  105E                     __end_of_CC2500_rfSettings:	
  2299  105E                     _CC2500_patable_vaule:	
  2300  105E  34FE               	retlw	254
  2301  105F  34FE               	retlw	254
  2302  1060  34FE               	retlw	254
  2303  1061  34FE               	retlw	254
  2304  1062  34FE               	retlw	254
  2305  1063  34FE               	retlw	254
  2306  1064  34FE               	retlw	254
  2307  1065  34FE               	retlw	254
  2308  1066                     __end_of_CC2500_patable_vaule:	
  2309                           
  2310                           	psect	nvBANK0
  2311  006D                     __pnvBANK0:	
  2312  006D                     _product:	
  2313  006D                     	ds	1
  2314  000C                     _PORTA	set	12
  2315  000D                     _PORTB	set	13
  2316  000E                     _PORTC	set	14
  2317  0018                     _T1CON	set	24
  2318  0017                     _TMR1H	set	23
  2319  0016                     _TMR1L	set	22
  2320  005F                     _GIE	set	95
  2321  005B                     _IOCIE	set	91
  2322  0058                     _IOCIF	set	88
  2323  005E                     _PEIE	set	94
  2324  0060                     _RA0	set	96
  2325  0063                     _RA3	set	99
  2326  0064                     _RA4	set	100
  2327  0066                     _RA6	set	102
  2328  0067                     _RA7	set	103
  2329  0068                     _RB0	set	104
  2330  0069                     _RB1	set	105
  2331  006A                     _RB2	set	106
  2332  006B                     _RB3	set	107
  2333  006C                     _RB4	set	108
  2334  006D                     _RB5	set	109
  2335  0070                     _RC0	set	112
  2336  0071                     _RC1	set	113
  2337  0072                     _RC2	set	114
  2338  0074                     _RC4	set	116
  2339  0075                     _RC5	set	117
  2340  0077                     _RC7	set	119
  2341  0088                     _TMR1IF	set	136
  2342  009D                     _ADCON0	set	157
  2343  009E                     _ADCON1	set	158
  2344  009C                     _ADRESH	set	156
  2345  009B                     _ADRESL	set	155
  2346  0099                     _OSCCON	set	153
  2347  008C                     _TRISA	set	140
  2348  008D                     _TRISB	set	141
  2349  008E                     _TRISC	set	142
  2350  0097                     _WDTCON	set	151
  2351  04E9                     _GO_nDONE	set	1257
  2352  0488                     _TMR1IE	set	1160
  2353  0117                     _FVRCON	set	279
  2354  010C                     _LATA	set	268
  2355  010D                     _LATB	set	269
  2356  010E                     _LATC	set	270
  2357  018C                     _ANSELA	set	396
  2358  018D                     _ANSELB	set	397
  2359  018E                     _ANSELC	set	398
  2360  0192                     _PMADRH	set	402
  2361  0191                     _PMADRL	set	401
  2362  0196                     _PMCON2	set	406
  2363  0194                     _PMDATH	set	404
  2364  0193                     _PMDATL	set	403
  2365  0CAE                     _CFGS	set	3246
  2366  0CAC                     _FREE	set	3244
  2367  0CAD                     _LWLO	set	3245
  2368  0CA8                     _RD	set	3240
  2369  0CA9                     _WR	set	3241
  2370  0CAA                     _WREN	set	3242
  2371  020D                     _WPUB	set	525
  2372  1069                     _WPUB1	set	4201
  2373  106A                     _WPUB2	set	4202
  2374  0396                     _IOCBF	set	918
  2375  0395                     _IOCBN	set	917
  2376  0394                     _IOCBP	set	916
  2377  1CB2                     _IOCBF2	set	7346
  2378                           
  2379                           ; #config settings
  2380  0000                     
  2381                           	psect	cinit
  2382  0022                     start_initialization:	
  2383  0022                     __initialization:	
  2384                           
  2385                           ; Clear objects allocated to BITCOMMON
  2386  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2387                           
  2388                           ; Clear objects allocated to COMMON
  2389  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK0
  2392  0024  01EB               	clrf	__pbssBANK0& (0+127)
  2393  0025  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0026  30A0               	movlw	low __pbssBANK1
  2397  0027  0084               	movwf	4
  2398  0028  3000               	movlw	high __pbssBANK1
  2399  0029  0085               	movwf	5
  2400  002A  304F               	movlw	79
  2401  002B  3187  27FA  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002E  3020               	movlw	low __pbssBANK2
  2405  002F  0084               	movwf	4
  2406  0030  3001               	movlw	high __pbssBANK2
  2407  0031  0085               	movwf	5
  2408  0032  3050               	movlw	80
  2409  0033  3187  27FA  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0036  30A0               	movlw	low __pbssBANK3
  2413  0037  0084               	movwf	4
  2414  0038  3001               	movlw	high __pbssBANK3
  2415  0039  0085               	movwf	5
  2416  003A  3042               	movlw	66
  2417  003B  3187  27FA  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003E  3020               	movlw	low __pbssBANK4
  2421  003F  0084               	movwf	4
  2422  0040  3002               	movlw	high __pbssBANK4
  2423  0041  0085               	movwf	5
  2424  0042  3025               	movlw	37
  2425  0043  3187  27FA  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK4
  2428  0046  30A4               	movlw	low __pidataBANK4
  2429  0047  0084               	movwf	4
  2430  0048  3091               	movlw	(high __pidataBANK4)| (0+128)
  2431  0049  0085               	movwf	5
  2432  004A  3045               	movlw	low __pdataBANK4
  2433  004B  0086               	movwf	6
  2434  004C  3002               	movlw	high __pdataBANK4
  2435  004D  0087               	movwf	7
  2436  004E  3020               	movlw	32
  2437  004F  3190  2066         	fcall	init_ram
  2438  0051                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  0051                     __end_of__initialization:	
  2442  0051  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0052  0020               	movlb	0
  2444  0053  3189  29EA         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03D0                     __pbitbssCOMMON:	
  2448  03D0                     _Receive_OK:	
  2449  03D0                     	ds	1
  2450  03D1                     _Transceive_OK:	
  2451  03D1                     	ds	1
  2452                           
  2453                           	psect	bssCOMMON
  2454  007B                     __pbssCOMMON:	
  2455  007B                     _DimmerIntr:	
  2456  007B                     	ds	1
  2457                           
  2458                           	psect	bssBANK0
  2459  006B                     __pbssBANK0:	
  2460  006B                     _DimmerLights:	
  2461  006B                     	ds	1
  2462  006C                     _Sw:	
  2463  006C                     	ds	1
  2464                           
  2465                           	psect	bssBANK1
  2466  00A0                     __pbssBANK1:	
  2467  00A0                     _RF1:	
  2468  00A0                     	ds	14
  2469  00AE                     _Buz1:	
  2470  00AE                     	ds	12
  2471  00BA                     _Dimmer:	
  2472  00BA                     	ds	3
  2473  00BD                     _Timer1:	
  2474  00BD                     	ds	3
  2475  00C0                     _RF_Count:	
  2476  00C0                     	ds	2
  2477  00C2                     _WDT:	
  2478  00C2                     	ds	2
  2479  00C4                     _CRC:	
  2480  00C4                     	ds	1
  2481  00C5                     _DelayOff:	
  2482  00C5                     	ds	1
  2483  00C6                     _LED:	
  2484  00C6                     	ds	1
  2485  00C7                     _RSSI:	
  2486  00C7                     	ds	1
  2487  00C8                     _Rx_Length:	
  2488  00C8                     	ds	1
  2489  00C9                     _SPI0Buffer:	
  2490  00C9                     	ds	1
  2491  00CA                     _SwDetect:	
  2492  00CA                     	ds	1
  2493  00CB                     _Tx_Length:	
  2494  00CB                     	ds	1
  2495  00CC                     _r_address:	
  2496  00CC                     	ds	1
  2497  00CD                     _r_data:	
  2498  00CD                     	ds	1
  2499  00CE                     _s_data:	
  2500  00CE                     	ds	1
  2501  00CF                     _Temp:	
  2502  00CF                     	ds	18
  2503  00E1                     _DimmerIntr1:	
  2504  00E1                     	ds	7
  2505  00E8                     _DimmerIntr2:	
  2506  00E8                     	ds	7
  2507                           
  2508                           	psect	bssBANK2
  2509  0120                     __pbssBANK2:	
  2510  0120                     _myMain:	
  2511  0120                     	ds	14
  2512  012E                     _Load:	
  2513  012E                     	ds	46
  2514  015C                     _DimmerLights1:	
  2515  015C                     	ds	8
  2516  0164                     _DimmerLights2:	
  2517  0164                     	ds	8
  2518  016C                     _VarErrLED:	
  2519  016C                     	ds	4
  2520                           
  2521                           	psect	bssBANK3
  2522  01A0                     __pbssBANK3:	
  2523  01A0                     _RF_Data:	
  2524  01A0                     	ds	30
  2525  01BE                     _Sw1:	
  2526  01BE                     	ds	9
  2527  01C7                     _Sw2:	
  2528  01C7                     	ds	9
  2529  01D0                     _DlySw1:	
  2530  01D0                     	ds	5
  2531  01D5                     _DlySw2:	
  2532  01D5                     	ds	5
  2533  01DA                     _VarLED1:	
  2534  01DA                     	ds	4
  2535  01DE                     _VarLED2:	
  2536  01DE                     	ds	4
  2537                           
  2538                           	psect	bssBANK4
  2539  0220                     __pbssBANK4:	
  2540  0220                     _Memory:	
  2541  0220                     	ds	37
  2542                           
  2543                           	psect	dataBANK4
  2544  0245                     __pdataBANK4:	
  2545  0245                     __product:	
  2546  0245                     	ds	32
  2547                           
  2548                           	psect	clrtext
  2549  07FA                     clear_ram0:	
  2550                           ;	Called with FSR0 containing the base address, and
  2551                           ;	WREG with the size to clear
  2552                           
  2553  07FA  0064               	clrwdt	;clear the watchdog before getting into this loop
  2554  07FB                     clrloop0:	
  2555  07FB  0180               	clrf	0	;clear RAM location pointed to by FSR
  2556  07FC  3101               	addfsr 0,1
  2557  07FD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2558  07FE  2FFB               	goto	clrloop0	;have we reached the end yet?
  2559  07FF  3400               	retlw	0	;all done for this memory range, return
  2560                           
  2561                           	psect	inittext
  2562  1066                     init_ram:	
  2563  1066  00FE               	movwf	126
  2564  1067                     initloop:	
  2565  1067  0012               	moviw fsr0++
  2566  1068  001E               	movwi fsr1++
  2567  1069  0BFE               	decfsz	126,f
  2568  106A  2867               	goto	initloop
  2569  106B  3400               	retlw	0
  2570                           
  2571                           	psect	cstackBANK3
  2572  01E2                     __pcstackBANK3:	
  2573  01E2                     ?_main:	
  2574  01E2                     main@argc:	
  2575                           ; 2 bytes @ 0x0
  2576                           
  2577                           
  2578                           ; 2 bytes @ 0x0
  2579  01E2                     	ds	2
  2580  01E4                     main@argv:	
  2581                           
  2582                           ; 2 bytes @ 0x2
  2583  01E4                     	ds	2
  2584                           
  2585                           	psect	cstackCOMMON
  2586  0070                     __pcstackCOMMON:	
  2587  0070                     ?_CC2500_WriteCommand:	
  2588  0070                     ?_RF_Timeout_Counter:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRF_TimeoutCleared:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_CC2500_WriteByte:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_CC2500_ReadStatus:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_CC2500_ReadByte:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_CC2500_PowerRST:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_CC2500_InitSetREG:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_CC2500_InitPATable:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_CC2500_ClearTXFIFO:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_CC2500_ClearRXFIFO:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_FrequencyCabr:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_SIDLEMode:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_DlyOff_Initialization:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DlyOff_Main:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_setDimmerLights_SwOn:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_setDimmerLights_SwOff:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_setDimmerLights_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_setDimmerLights_Main:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_setDimmerLights_Line:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setTxData:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_setRF_TransceiveGO:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setLED_Initialization:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_setLED_Main:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_Fosc_Set:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_IO_Set:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_TMR1_Set:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_ADC_Set:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_IOC_Set:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_WDT_Set:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_IOC_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ??_IOC_ISR:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_TMR1_ISR:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Timeout_Counter:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_set_TimeoutCleared:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Flash_Memory_Write:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_Flash_Memory_Modify:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_WDT_Clearing:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_myMain_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Temp_Initialization:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Load_Initialization:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Switch_Initialization:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_RF_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_getLoad_AD:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_getTemp_AD:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_my_MainTimer:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_Temp_Main:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_Load_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_Switch_Main:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_RF_Main:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_Exception_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setLoad_AH_AL_Restore:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_setTemp_Initialization:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_setTemp_Main:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_setRF_Initialization:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_setRF_Main:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_RF_RxDisable:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_getRxData:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_setLog_Code:	
  2760                           ; 0 bytes @ 0x0
  2761                           
  2762  0070                     ?_setControl_Lights_Table:	
  2763                           ; 0 bytes @ 0x0
  2764                           
  2765  0070                     ?_setRFSW_Control:	
  2766                           ; 0 bytes @ 0x0
  2767                           
  2768  0070                     ?_setRFSW_AdjControl:	
  2769                           ; 0 bytes @ 0x0
  2770                           
  2771  0070                     ?_setRF_DimmerValue:	
  2772                           ; 0 bytes @ 0x0
  2773                           
  2774  0070                     ?_setSw_Initialization:	
  2775                           ; 0 bytes @ 0x0
  2776                           
  2777  0070                     ?_setSw_Main:	
  2778                           ; 0 bytes @ 0x0
  2779                           
  2780  0070                     ?_Buzzer_Initialization:	
  2781                           ; 0 bytes @ 0x0
  2782                           
  2783  0070                     ?_Buzzer_Main:	
  2784                           ; 0 bytes @ 0x0
  2785                           
  2786  0070                     ?_CC2500_TxData:	
  2787                           ; 0 bytes @ 0x0
  2788                           
  2789  0070                     ?_CC2500_RxData:	
  2790                           ; 0 bytes @ 0x0
  2791                           
  2792  0070                     ?_CC2500_PowerOnInitial:	
  2793                           ; 0 bytes @ 0x0
  2794                           
  2795  0070                     ?_DelayOffPointSelect:	
  2796                           ; 0 bytes @ 0x0
  2797                           
  2798  0070                     ?_DelayOff_Initialization:	
  2799                           ; 0 bytes @ 0x0
  2800                           
  2801  0070                     ?_DelayOff_Main:	
  2802                           ; 0 bytes @ 0x0
  2803                           
  2804  0070                     ?_DimmerIntr_Initialization:	
  2805                           ; 0 bytes @ 0x0
  2806                           
  2807  0070                     ?_DimmerLights_SelectPointer:	
  2808                           ; 0 bytes @ 0x0
  2809                           
  2810  0070                     ?_DimmerLights_Initialization:	
  2811                           ; 0 bytes @ 0x0
  2812                           
  2813  0070                     ?_setDimmerLights_DimmingOn:	
  2814                           ; 0 bytes @ 0x0
  2815                           
  2816  0070                     ?_DimmerLights_Main:	
  2817                           ; 0 bytes @ 0x0
  2818                           
  2819  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0070                     ?_LedPointSelect:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0070                     ?_LED_Initialization:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0070                     ?_LED_Main:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0070                     ?_Mcu_Initialization:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0070                     ?_ISR:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0070                     ?_Flash_Memory_Initialization:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0070                     ?_Flash_Memory_Main:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0070                     ?_Flash_Memory_Unlock:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0070                     ?_Flash_Memory_Erasing:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0070                     ?_setMemory_Modify:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0070                     ?_setMemory_LoopSave:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0070                     ?_WDT_Main:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0070                     ?_setRF_Learn:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0070                     ?_TouchPower:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0070                     ?_SwPointSelect:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0070                     ?_getDimmerLights_Status:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0070                     ?_DelayTimejudge:	
  2892                           ; 1 bytes @ 0x0
  2893                           
  2894  0070                     ?_getLoad_OK:	
  2895                           ; 1 bytes @ 0x0
  2896                           
  2897  0070                     ?_getMain_All_Error_Status:	
  2898                           ; 1 bytes @ 0x0
  2899                           
  2900  0070                     ?_getMain_LightsStatus:	
  2901                           ; 1 bytes @ 0x0
  2902                           
  2903  0070                     ?_getDimmerLights_Allow_Condition:	
  2904                           ; 1 bytes @ 0x0
  2905                           
  2906  0070                     ?_setDimmerLights_PercentValue:	
  2907                           ; 1 bytes @ 0x0
  2908                           
  2909  0070                     ?_Flash_Memory_Read:	
  2910                           ; 1 bytes @ 0x0
  2911                           
  2912  0070                     ?_getRF_KeyStatus:	
  2913                           ; 1 bytes @ 0x0
  2914                           
  2915  0070                     ?_getSw_KeyStatus:	
  2916                           ; 1 bytes @ 0x0
  2917                           
  2918  0070                     ?_getDelayOff_GO:	
  2919                           ; 1 bytes @ 0x0
  2920                           
  2921  0070                     ?_getDimmerIntr_DimmingValue:	
  2922                           ; 1 bytes @ 0x0
  2923                           
  2924  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2925                           ; 1 bytes @ 0x0
  2926                           
  2927  0070                     ?_getDimmerLights_Line:	
  2928                           ; 1 bytes @ 0x0
  2929                           
  2930  0070                     ?_getDimmer_LoadGO:	
  2931                           ; 1 bytes @ 0x0
  2932                           
  2933  0070                     ?_getDimmer_Load_Status:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0070                     ?_getMain_Lights_Count:	
  2937                           ; 1 bytes @ 0x0
  2938                           
  2939  0070                     setDimmerLights_Initialization@lights:	
  2940                           ; 1 bytes @ 0x0
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x0
  2944  0070                     	ds	1
  2945  0071                     ??_TMR1_ISR:	
  2946  0071                     ??_ISR:	
  2947                           ; 0 bytes @ 0x1
  2948                           
  2949                           
  2950                           ; 0 bytes @ 0x1
  2951  0071                     	ds	1
  2952  0072                     ??_RF_Timeout_Counter:	
  2953  0072                     ??_setRF_TimeoutCleared:	
  2954                           ; 0 bytes @ 0x2
  2955                           
  2956  0072                     ??_CC2500_WriteByte:	
  2957                           ; 0 bytes @ 0x2
  2958                           
  2959  0072                     ??_CC2500_ReadByte:	
  2960                           ; 0 bytes @ 0x2
  2961                           
  2962  0072                     ?_DelayTime_1us:	
  2963                           ; 0 bytes @ 0x2
  2964                           
  2965  0072                     ??_setDimmerLights_Initialization:	
  2966                           ; 0 bytes @ 0x2
  2967                           
  2968  0072                     ??_getLoad_OK:	
  2969                           ; 0 bytes @ 0x2
  2970                           
  2971  0072                     ??_getMain_All_Error_Status:	
  2972                           ; 0 bytes @ 0x2
  2973                           
  2974  0072                     ??_getMain_LightsStatus:	
  2975                           ; 0 bytes @ 0x2
  2976                           
  2977  0072                     ??_setDimmerLights_Line:	
  2978                           ; 0 bytes @ 0x2
  2979                           
  2980  0072                     ??_setTxData:	
  2981                           ; 0 bytes @ 0x2
  2982                           
  2983  0072                     ??_setRF_TransceiveGO:	
  2984                           ; 0 bytes @ 0x2
  2985                           
  2986  0072                     ??_Fosc_Set:	
  2987                           ; 0 bytes @ 0x2
  2988                           
  2989  0072                     ??_IO_Set:	
  2990                           ; 0 bytes @ 0x2
  2991                           
  2992  0072                     ??_TMR1_Set:	
  2993                           ; 0 bytes @ 0x2
  2994                           
  2995  0072                     ??_ADC_Set:	
  2996                           ; 0 bytes @ 0x2
  2997                           
  2998  0072                     ??_IOC_Set:	
  2999                           ; 0 bytes @ 0x2
  3000                           
  3001  0072                     ??_WDT_Set:	
  3002                           ; 0 bytes @ 0x2
  3003                           
  3004  0072                     ??_Timeout_Counter:	
  3005                           ; 0 bytes @ 0x2
  3006                           
  3007  0072                     ??_set_TimeoutCleared:	
  3008                           ; 0 bytes @ 0x2
  3009                           
  3010  0072                     ??_Flash_Memory_Read:	
  3011                           ; 0 bytes @ 0x2
  3012                           
  3013  0072                     ?_setMemory_Data:	
  3014                           ; 0 bytes @ 0x2
  3015                           
  3016  0072                     ??_Flash_Memory_Write:	
  3017                           ; 0 bytes @ 0x2
  3018                           
  3019  0072                     ??_WDT_Clearing:	
  3020                           ; 0 bytes @ 0x2
  3021                           
  3022  0072                     ??_myMain_Initialization:	
  3023                           ; 0 bytes @ 0x2
  3024                           
  3025  0072                     ??_Temp_Initialization:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0072                     ??_setLoad_AH_AL_Restore:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0072                     ??_setTemp_Initialization:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0072                     ??_setRF_Initialization:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0072                     ??_getRF_KeyStatus:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0072                     ??_getSw_KeyStatus:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0072                     ??_Buzzer_Initialization:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0072                     ??_Buzzer_Main:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0072                     ??_DelayOffPointSelect:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0072                     ??_DimmerIntr_Initialization:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0072                     ?_setDimmerIntr_ControlStatus:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0072                     ?_setDimmerIntr_DimmingValue:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0072                     ??_getDimmerIntr_DimmingValue:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0072                     ?_setDimmerIntr_Dimming_RF:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0072                     ??_DimmerLights_SelectPointer:	
  3074                           ; 0 bytes @ 0x2
  3075                           
  3076  0072                     ??_getDimmerLights_Line:	
  3077                           ; 0 bytes @ 0x2
  3078                           
  3079  0072                     ??_getDimmer_LoadGO:	
  3080                           ; 0 bytes @ 0x2
  3081                           
  3082  0072                     ??_getDimmer_Load_Status:	
  3083                           ; 0 bytes @ 0x2
  3084                           
  3085  0072                     ??_LedPointSelect:	
  3086                           ; 0 bytes @ 0x2
  3087                           
  3088  0072                     ??_Flash_Memory_Unlock:	
  3089                           ; 0 bytes @ 0x2
  3090                           
  3091  0072                     ??_Flash_Memory_Erasing:	
  3092                           ; 0 bytes @ 0x2
  3093                           
  3094  0072                     ??_setMemory_Modify:	
  3095                           ; 0 bytes @ 0x2
  3096                           
  3097  0072                     ??_setMemory_LoopSave:	
  3098                           ; 0 bytes @ 0x2
  3099                           
  3100  0072                     ??_WDT_Main:	
  3101                           ; 0 bytes @ 0x2
  3102                           
  3103  0072                     ??_getMain_Lights_Count:	
  3104                           ; 0 bytes @ 0x2
  3105                           
  3106  0072                     ??_setRF_Learn:	
  3107                           ; 0 bytes @ 0x2
  3108                           
  3109  0072                     ??_TouchPower:	
  3110                           ; 0 bytes @ 0x2
  3111                           
  3112  0072                     ??_SwPointSelect:	
  3113                           ; 0 bytes @ 0x2
  3114                           
  3115  0072                     ?___bmul:	
  3116                           ; 0 bytes @ 0x2
  3117                           
  3118  0072                     ?_getBuz_GO:	
  3119                           ; 1 bytes @ 0x2
  3120                           
  3121  0072                     ?_getAD:	
  3122                           ; 2 bytes @ 0x2
  3123                           
  3124  0072                     ?___wmul:	
  3125                           ; 2 bytes @ 0x2
  3126                           
  3127  0072                     ?___awdiv:	
  3128                           ; 2 bytes @ 0x2
  3129                           
  3130  0072                     ?___lwdiv:	
  3131                           ; 2 bytes @ 0x2
  3132                           
  3133  0072                     ?___ftpack:	
  3134                           ; 2 bytes @ 0x2
  3135                           
  3136  0072                     setDimmerIntr_ControlStatus@command:	
  3137                           ; 3 bytes @ 0x2
  3138                           
  3139  0072                     setDimmerIntr_DimmingValue@value:	
  3140                           ; 1 bytes @ 0x2
  3141                           
  3142  0072                     setDimmerIntr_Dimming_Sw@command:	
  3143                           ; 1 bytes @ 0x2
  3144                           
  3145  0072                     setDimmerIntr_Dimming_RF@command:	
  3146                           ; 1 bytes @ 0x2
  3147                           
  3148  0072                     setDimmerLights_Line@lights:	
  3149                           ; 1 bytes @ 0x2
  3150                           
  3151  0072                     getDimmer_LoadGO@loadgo:	
  3152                           ; 1 bytes @ 0x2
  3153                           
  3154  0072                     getDimmer_Load_Status@status:	
  3155                           ; 1 bytes @ 0x2
  3156                           
  3157  0072                     getAD@adcon1:	
  3158                           ; 1 bytes @ 0x2
  3159                           
  3160  0072                     setMemory_Data@data:	
  3161                           ; 1 bytes @ 0x2
  3162                           
  3163  0072                     getMain_LightsStatus@status:	
  3164                           ; 1 bytes @ 0x2
  3165                           
  3166  0072                     getMain_Lights_Count@count:	
  3167                           ; 1 bytes @ 0x2
  3168                           
  3169  0072                     getLoad_OK@ok:	
  3170                           ; 1 bytes @ 0x2
  3171                           
  3172  0072                     ___bmul@multiplicand:	
  3173                           ; 1 bytes @ 0x2
  3174                           
  3175  0072                     DelayTime_1us@count:	
  3176                           ; 1 bytes @ 0x2
  3177                           
  3178  0072                     ___wmul@multiplier:	
  3179                           ; 2 bytes @ 0x2
  3180                           
  3181  0072                     ___awdiv@divisor:	
  3182                           ; 2 bytes @ 0x2
  3183                           
  3184  0072                     ___lwdiv@divisor:	
  3185                           ; 2 bytes @ 0x2
  3186                           
  3187  0072                     ___ftpack@arg:	
  3188                           ; 2 bytes @ 0x2
  3189                           
  3190                           
  3191                           ; 3 bytes @ 0x2
  3192  0072                     	ds	1
  3193  0073                     ??_getDimmerLights_Allow_Condition:	
  3194  0073                     ??_setMemory_Data:	
  3195                           ; 0 bytes @ 0x3
  3196                           
  3197  0073                     ??_RF_Initialization:	
  3198                           ; 0 bytes @ 0x3
  3199                           
  3200  0073                     ??_setDimmerIntr_ControlStatus:	
  3201                           ; 0 bytes @ 0x3
  3202                           
  3203  0073                     ??_setDimmerIntr_DimmingValue:	
  3204                           ; 0 bytes @ 0x3
  3205                           
  3206  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3207                           ; 0 bytes @ 0x3
  3208                           
  3209  0073                     ??_setDimmerIntr_Dimming_RF:	
  3210                           ; 0 bytes @ 0x3
  3211                           
  3212  0073                     ??_DimmerLights_Initialization:	
  3213                           ; 0 bytes @ 0x3
  3214                           
  3215  0073                     ??_Mcu_Initialization:	
  3216                           ; 0 bytes @ 0x3
  3217                           
  3218  0073                     ??___bmul:	
  3219                           ; 0 bytes @ 0x3
  3220                           
  3221  0073                     CC2500_WriteByte@loop_a:	
  3222                           ; 0 bytes @ 0x3
  3223                           
  3224  0073                     CC2500_ReadByte@loop_b:	
  3225                           ; 1 bytes @ 0x3
  3226                           
  3227  0073                     DelayOffPointSelect@sw:	
  3228                           ; 1 bytes @ 0x3
  3229                           
  3230  0073                     getDimmerIntr_DimmingValue@value:	
  3231                           ; 1 bytes @ 0x3
  3232                           
  3233  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2054:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236  0073                     DimmerLights_SelectPointer@lights:	
  3237                           ; 1 bytes @ 0x3
  3238                           
  3239  0073                     getDimmerLights_Line@line:	
  3240                           ; 1 bytes @ 0x3
  3241                           
  3242  0073                     LedPointSelect@led:	
  3243                           ; 1 bytes @ 0x3
  3244                           
  3245  0073                     Flash_Memory_Read@i:	
  3246                           ; 1 bytes @ 0x3
  3247                           
  3248  0073                     Flash_Memory_Write@i:	
  3249                           ; 1 bytes @ 0x3
  3250                           
  3251  0073                     setMemory_Modify@command:	
  3252                           ; 1 bytes @ 0x3
  3253                           
  3254  0073                     setMemory_LoopSave@command:	
  3255                           ; 1 bytes @ 0x3
  3256                           
  3257  0073                     getMain_Lights_Count@status1:	
  3258                           ; 1 bytes @ 0x3
  3259                           
  3260  0073                     setLoad_AH_AL_Restore@i:	
  3261                           ; 1 bytes @ 0x3
  3262                           
  3263  0073                     setRF_Learn@command:	
  3264                           ; 1 bytes @ 0x3
  3265                           
  3266  0073                     getRF_KeyStatus@key:	
  3267                           ; 1 bytes @ 0x3
  3268                           
  3269  0073                     setRF_TransceiveGO@command:	
  3270                           ; 1 bytes @ 0x3
  3271                           
  3272  0073                     SwPointSelect@sw:	
  3273                           ; 1 bytes @ 0x3
  3274                           
  3275  0073                     _getSw_KeyStatus$5935:	
  3276                           ; 1 bytes @ 0x3
  3277                           
  3278  0073                     _getMain_All_Error_Status$3361:	
  3279                           ; 1 bytes @ 0x3
  3280                           
  3281                           
  3282                           ; 2 bytes @ 0x3
  3283  0073                     	ds	1
  3284  0074                     ??_CC2500_WriteCommand:	
  3285  0074                     ??_CC2500_ReadStatus:	
  3286                           ; 0 bytes @ 0x4
  3287                           
  3288  0074                     ??_DelayTime_1us:	
  3289                           ; 0 bytes @ 0x4
  3290                           
  3291  0074                     ?_CC2500_WriteREG:	
  3292                           ; 0 bytes @ 0x4
  3293                           
  3294  0074                     ??_DlyOff_Initialization:	
  3295                           ; 0 bytes @ 0x4
  3296                           
  3297  0074                     ??_getDimmerLights_Status:	
  3298                           ; 0 bytes @ 0x4
  3299                           
  3300  0074                     ?_setLED:	
  3301                           ; 0 bytes @ 0x4
  3302                           
  3303  0074                     ??_setLED_Main:	
  3304                           ; 0 bytes @ 0x4
  3305                           
  3306  0074                     ??_Load_Initialization:	
  3307                           ; 0 bytes @ 0x4
  3308                           
  3309  0074                     ??_getBuz_GO:	
  3310                           ; 0 bytes @ 0x4
  3311                           
  3312  0074                     ??_getDelayOff_GO:	
  3313                           ; 0 bytes @ 0x4
  3314                           
  3315  0074                     ??_setDimmerLights_DimmingOn:	
  3316                           ; 0 bytes @ 0x4
  3317                           
  3318  0074                     CC2500_WriteREG@value:	
  3319                           ; 0 bytes @ 0x4
  3320                           
  3321  0074                     DlyOff_Initialization@sw:	
  3322                           ; 1 bytes @ 0x4
  3323                           
  3324  0074                     getDelayOff_GO@sw:	
  3325                           ; 1 bytes @ 0x4
  3326                           
  3327  0074                     setDimmerIntr_ControlStatus@lights:	
  3328                           ; 1 bytes @ 0x4
  3329                           
  3330  0074                     setDimmerIntr_DimmingValue@lights:	
  3331                           ; 1 bytes @ 0x4
  3332                           
  3333  0074                     getDimmerIntr_DimmingValue@lights:	
  3334                           ; 1 bytes @ 0x4
  3335                           
  3336  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3337                           ; 1 bytes @ 0x4
  3338                           
  3339  0074                     setDimmerIntr_Dimming_RF@lights:	
  3340                           ; 1 bytes @ 0x4
  3341                           
  3342  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2055:	
  3343                           ; 1 bytes @ 0x4
  3344                           
  3345  0074                     setDimmerLights_DimmingOn@sw:	
  3346                           ; 1 bytes @ 0x4
  3347                           
  3348  0074                     _getDimmerLights_Allow_Condition$2136:	
  3349                           ; 1 bytes @ 0x4
  3350                           
  3351  0074                     getDimmerLights_Status@lights:	
  3352                           ; 1 bytes @ 0x4
  3353                           
  3354  0074                     setLED@command:	
  3355                           ; 1 bytes @ 0x4
  3356                           
  3357  0074                     Flash_Memory_Read@address:	
  3358                           ; 1 bytes @ 0x4
  3359                           
  3360  0074                     setMemory_Data@address:	
  3361                           ; 1 bytes @ 0x4
  3362                           
  3363  0074                     getMain_Lights_Count@status2:	
  3364                           ; 1 bytes @ 0x4
  3365                           
  3366  0074                     _getRF_KeyStatus$4976:	
  3367                           ; 1 bytes @ 0x4
  3368                           
  3369  0074                     _getSw_KeyStatus$5936:	
  3370                           ; 1 bytes @ 0x4
  3371                           
  3372  0074                     ___bmul@product:	
  3373                           ; 1 bytes @ 0x4
  3374                           
  3375  0074                     DelayTime_1us@i:	
  3376                           ; 1 bytes @ 0x4
  3377                           
  3378  0074                     ___wmul@multiplicand:	
  3379                           ; 2 bytes @ 0x4
  3380                           
  3381  0074                     ___awdiv@dividend:	
  3382                           ; 2 bytes @ 0x4
  3383                           
  3384  0074                     ___lwdiv@dividend:	
  3385                           ; 2 bytes @ 0x4
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x4
  3389  0074                     	ds	1
  3390  0075                     ??_CC2500_WriteREG:	
  3391  0075                     ??_setLED:	
  3392                           ; 0 bytes @ 0x5
  3393                           
  3394  0075                     ??_DelayOff_Initialization:	
  3395                           ; 0 bytes @ 0x5
  3396                           
  3397  0075                     ?_setDimmerIntr_MaxmumValue:	
  3398                           ; 0 bytes @ 0x5
  3399                           
  3400  0075                     ??_getAD:	
  3401                           ; 0 bytes @ 0x5
  3402                           
  3403  0075                     CC2500_WriteCommand@command:	
  3404                           ; 0 bytes @ 0x5
  3405                           
  3406  0075                     CC2500_ReadStatus@status_addr:	
  3407                           ; 1 bytes @ 0x5
  3408                           
  3409  0075                     getDelayOff_GO@go:	
  3410                           ; 1 bytes @ 0x5
  3411                           
  3412  0075                     setDimmerIntr_MaxmumValue@value:	
  3413                           ; 1 bytes @ 0x5
  3414                           
  3415  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3416                           ; 1 bytes @ 0x5
  3417                           
  3418  0075                     _getDimmerLights_Allow_Condition$2137:	
  3419                           ; 1 bytes @ 0x5
  3420                           
  3421  0075                     getDimmerLights_Status@status:	
  3422                           ; 1 bytes @ 0x5
  3423                           
  3424  0075                     setLED@led:	
  3425                           ; 1 bytes @ 0x5
  3426                           
  3427  0075                     getAD@adcon0:	
  3428                           ; 1 bytes @ 0x5
  3429                           
  3430  0075                     Flash_Memory_Read@ret:	
  3431                           ; 1 bytes @ 0x5
  3432                           
  3433  0075                     getSw_KeyStatus@status:	
  3434                           ; 1 bytes @ 0x5
  3435                           
  3436  0075                     ___bmul@multiplier:	
  3437                           ; 1 bytes @ 0x5
  3438                           
  3439  0075                     ___ftpack@exp:	
  3440                           ; 1 bytes @ 0x5
  3441                           
  3442  0075                     _getMain_All_Error_Status$3362:	
  3443                           ; 1 bytes @ 0x5
  3444                           
  3445                           
  3446                           ; 2 bytes @ 0x5
  3447  0075                     	ds	1
  3448  0076                     ??_CC2500_ClearTXFIFO:	
  3449  0076                     ??_CC2500_ClearRXFIFO:	
  3450                           ; 0 bytes @ 0x6
  3451                           
  3452  0076                     ??_CC2500_SIDLEMode:	
  3453                           ; 0 bytes @ 0x6
  3454                           
  3455  0076                     ??_DelayTimejudge:	
  3456                           ; 0 bytes @ 0x6
  3457                           
  3458  0076                     ??_setLED_Initialization:	
  3459                           ; 0 bytes @ 0x6
  3460                           
  3461  0076                     ??_Flash_Memory_Modify:	
  3462                           ; 0 bytes @ 0x6
  3463                           
  3464  0076                     ??_getLoad_AD:	
  3465                           ; 0 bytes @ 0x6
  3466                           
  3467  0076                     ??_getTemp_AD:	
  3468                           ; 0 bytes @ 0x6
  3469                           
  3470  0076                     ??_RF_RxDisable:	
  3471                           ; 0 bytes @ 0x6
  3472                           
  3473  0076                     ??_setSw_Initialization:	
  3474                           ; 0 bytes @ 0x6
  3475                           
  3476  0076                     ??_CC2500_TxData:	
  3477                           ; 0 bytes @ 0x6
  3478                           
  3479  0076                     ??_CC2500_RxData:	
  3480                           ; 0 bytes @ 0x6
  3481                           
  3482  0076                     ??_setDimmerIntr_MaxmumValue:	
  3483                           ; 0 bytes @ 0x6
  3484                           
  3485  0076                     ??___wmul:	
  3486                           ; 0 bytes @ 0x6
  3487                           
  3488  0076                     ??___awdiv:	
  3489                           ; 0 bytes @ 0x6
  3490                           
  3491  0076                     ??___lwdiv:	
  3492                           ; 0 bytes @ 0x6
  3493                           
  3494  0076                     CC2500_WriteREG@w_addr:	
  3495                           ; 0 bytes @ 0x6
  3496                           
  3497  0076                     _getDimmerLights_Allow_Condition$2138:	
  3498                           ; 1 bytes @ 0x6
  3499                           
  3500  0076                     setLED_Initialization@led:	
  3501                           ; 1 bytes @ 0x6
  3502                           
  3503  0076                     setLED_Main@led:	
  3504                           ; 1 bytes @ 0x6
  3505                           
  3506  0076                     setSw_Initialization@sw:	
  3507                           ; 1 bytes @ 0x6
  3508                           
  3509  0076                     getSw_KeyStatus@sw:	
  3510                           ; 1 bytes @ 0x6
  3511                           
  3512  0076                     ___ftpack@sign:	
  3513                           ; 1 bytes @ 0x6
  3514                           
  3515  0076                     getBuz_GO@i:	
  3516                           ; 1 bytes @ 0x6
  3517                           
  3518  0076                     DelayTime_1us@j:	
  3519                           ; 2 bytes @ 0x6
  3520                           
  3521  0076                     ___wmul@product:	
  3522                           ; 2 bytes @ 0x6
  3523                           
  3524                           
  3525                           ; 2 bytes @ 0x6
  3526  0076                     	ds	1
  3527  0077                     ??_CC2500_InitSetREG:	
  3528  0077                     ??_CC2500_InitPATable:	
  3529                           ; 0 bytes @ 0x7
  3530                           
  3531  0077                     ??_Switch_Initialization:	
  3532                           ; 0 bytes @ 0x7
  3533                           
  3534  0077                     ??___ftpack:	
  3535                           ; 0 bytes @ 0x7
  3536                           
  3537  0077                     ??_setBuz:	
  3538                           ; 0 bytes @ 0x7
  3539                           
  3540  0077                     ??_LED_Initialization:	
  3541                           ; 0 bytes @ 0x7
  3542                           
  3543  0077                     ??_LED_Main:	
  3544                           ; 0 bytes @ 0x7
  3545                           
  3546  0077                     CC2500_TxData@loop_e:	
  3547                           ; 0 bytes @ 0x7
  3548                           
  3549  0077                     CC2500_RxData@loop_f:	
  3550                           ; 1 bytes @ 0x7
  3551                           
  3552  0077                     setDimmerIntr_MaxmumValue@lights:	
  3553                           ; 1 bytes @ 0x7
  3554                           
  3555  0077                     getDimmerLights_Allow_Condition@lights:	
  3556                           ; 1 bytes @ 0x7
  3557                           
  3558  0077                     Flash_Memory_Modify@i:	
  3559                           ; 1 bytes @ 0x7
  3560                           
  3561  0077                     getMain_All_Error_Status@command:	
  3562                           ; 1 bytes @ 0x7
  3563                           
  3564  0077                     getTemp_AD@channel:	
  3565                           ; 1 bytes @ 0x7
  3566                           
  3567  0077                     ___lwdiv@quotient:	
  3568                           ; 1 bytes @ 0x7
  3569                           
  3570                           
  3571                           ; 2 bytes @ 0x7
  3572  0077                     	ds	1
  3573  0078                     ??_CC2500_PowerRST:	
  3574  0078                     ??_CC2500_FrequencyCabr:	
  3575                           ; 0 bytes @ 0x8
  3576                           
  3577  0078                     ??_Flash_Memory_Main:	
  3578                           ; 0 bytes @ 0x8
  3579                           
  3580  0078                     setBuz@count:	
  3581                           ; 0 bytes @ 0x8
  3582                           
  3583  0078                     CC2500_InitPATable@temp:	
  3584                           ; 1 bytes @ 0x8
  3585                           
  3586  0078                     getDimmerLights_Allow_Condition@allow:	
  3587                           ; 1 bytes @ 0x8
  3588                           
  3589  0078                     getMain_All_Error_Status@status:	
  3590                           ; 1 bytes @ 0x8
  3591                           
  3592                           
  3593                           ; 1 bytes @ 0x8
  3594  0078                     	ds	1
  3595  0079                     ??_setDimmerLights_SwOn:	
  3596  0079                     ??_my_MainTimer:	
  3597                           ; 0 bytes @ 0x9
  3598                           
  3599  0079                     CC2500_InitPATable@loop_d:	
  3600                           ; 0 bytes @ 0x9
  3601                           
  3602  0079                     ___lwdiv@counter:	
  3603                           ; 1 bytes @ 0x9
  3604                           
  3605                           
  3606                           ; 1 bytes @ 0x9
  3607  0079                     	ds	1
  3608  007A                     ??_setDimmerLights_SwOff:	
  3609  007A                     ??_setDimmerLights_Main:	
  3610                           ; 0 bytes @ 0xA
  3611                           
  3612  007A                     ??_Temp_Main:	
  3613                           ; 0 bytes @ 0xA
  3614                           
  3615  007A                     ??_Switch_Main:	
  3616                           ; 0 bytes @ 0xA
  3617                           
  3618  007A                     ??_RF_Main:	
  3619                           ; 0 bytes @ 0xA
  3620                           
  3621  007A                     ??_setControl_Lights_Table:	
  3622                           ; 0 bytes @ 0xA
  3623                           
  3624  007A                     ??_CC2500_PowerOnInitial:	
  3625                           ; 0 bytes @ 0xA
  3626                           
  3627  007A                     ??_DelayOff_Main:	
  3628                           ; 0 bytes @ 0xA
  3629                           
  3630  007A                     ??_DimmerLights_Main:	
  3631                           ; 0 bytes @ 0xA
  3632                           
  3633  007A                     ??_main:	
  3634                           ; 0 bytes @ 0xA
  3635                           
  3636  007A                     ??___ftneg:	
  3637                           ; 0 bytes @ 0xA
  3638                           
  3639                           
  3640                           	psect	cstackBANK0
  3641  0020                     __pcstackBANK0:	
  3642                           ; 0 bytes @ 0xA
  3643                           
  3644  0020                     ??_Load_Main:	
  3645  0020                     ?___awtoft:	
  3646                           ; 0 bytes @ 0x0
  3647                           
  3648  0020                     CC2500_InitSetREG@temp1:	
  3649                           ; 3 bytes @ 0x0
  3650                           
  3651  0020                     DelayTimejudge@i:	
  3652                           ; 1 bytes @ 0x0
  3653                           
  3654  0020                     getLoad_AD@channel:	
  3655                           ; 1 bytes @ 0x0
  3656                           
  3657  0020                     ___awdiv@counter:	
  3658                           ; 1 bytes @ 0x0
  3659                           
  3660  0020                     ___awtoft@c:	
  3661                           ; 1 bytes @ 0x0
  3662                           
  3663                           
  3664                           ; 2 bytes @ 0x0
  3665  0020                     	ds	1
  3666  0021                     CC2500_InitSetREG@temp2:	
  3667  0021                     DelayTimejudge@j:	
  3668                           ; 1 bytes @ 0x1
  3669                           
  3670  0021                     getLoad_AD@k:	
  3671                           ; 1 bytes @ 0x1
  3672                           
  3673  0021                     ___awdiv@sign:	
  3674                           ; 1 bytes @ 0x1
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0x1
  3678  0021                     	ds	1
  3679  0022                     CC2500_InitSetREG@loop_c:	
  3680  0022                     DelayTimejudge@k:	
  3681                           ; 1 bytes @ 0x2
  3682                           
  3683  0022                     getLoad_AD@j:	
  3684                           ; 1 bytes @ 0x2
  3685                           
  3686  0022                     Load_Main@error:	
  3687                           ; 1 bytes @ 0x2
  3688                           
  3689  0022                     ___awdiv@quotient:	
  3690                           ; 1 bytes @ 0x2
  3691                           
  3692                           
  3693                           ; 2 bytes @ 0x2
  3694  0022                     	ds	1
  3695  0023                     ??___awtoft:	
  3696  0023                     DelayTimejudge@value:	
  3697                           ; 0 bytes @ 0x3
  3698                           
  3699  0023                     getLoad_AD@i:	
  3700                           ; 1 bytes @ 0x3
  3701                           
  3702  0023                     Load_Main@Load_Status:	
  3703                           ; 1 bytes @ 0x3
  3704                           
  3705                           
  3706                           ; 1 bytes @ 0x3
  3707  0023                     	ds	1
  3708  0024                     ?_setBuz:	
  3709  0024                     setBuz@time:	
  3710                           ; 0 bytes @ 0x4
  3711                           
  3712  0024                     Load_Main@i:	
  3713                           ; 2 bytes @ 0x4
  3714                           
  3715                           
  3716                           ; 2 bytes @ 0x4
  3717  0024                     	ds	1
  3718  0025                     ___awtoft@sign:	
  3719                           
  3720                           ; 1 bytes @ 0x5
  3721  0025                     	ds	1
  3722  0026                     ?___ftdiv:	
  3723  0026                     _setDimmerLights_SwOn$2110:	
  3724                           ; 3 bytes @ 0x6
  3725                           
  3726  0026                     ___ftdiv@f2:	
  3727                           ; 1 bytes @ 0x6
  3728                           
  3729                           
  3730                           ; 3 bytes @ 0x6
  3731  0026                     	ds	1
  3732  0027                     _setDimmerLights_SwOn$2111:	
  3733                           
  3734                           ; 1 bytes @ 0x7
  3735  0027                     	ds	1
  3736  0028                     setDimmerLights_SwOn@idle:	
  3737                           
  3738                           ; 1 bytes @ 0x8
  3739  0028                     	ds	1
  3740  0029                     setDimmerLights_SwOn@sw:	
  3741  0029                     ___ftdiv@f1:	
  3742                           ; 1 bytes @ 0x9
  3743                           
  3744                           
  3745                           ; 3 bytes @ 0x9
  3746  0029                     	ds	3
  3747  002C                     ??___ftdiv:	
  3748                           
  3749                           ; 0 bytes @ 0xC
  3750  002C                     	ds	4
  3751  0030                     ___ftdiv@cntr:	
  3752                           
  3753                           ; 1 bytes @ 0x10
  3754  0030                     	ds	1
  3755  0031                     ___ftdiv@f3:	
  3756                           
  3757                           ; 3 bytes @ 0x11
  3758  0031                     	ds	3
  3759  0034                     ___ftdiv@exp:	
  3760                           
  3761                           ; 1 bytes @ 0x14
  3762  0034                     	ds	1
  3763  0035                     ___ftdiv@sign:	
  3764                           
  3765                           ; 1 bytes @ 0x15
  3766  0035                     	ds	1
  3767  0036                     ?___ftneg:	
  3768  0036                     ___ftneg@f1:	
  3769                           ; 3 bytes @ 0x16
  3770                           
  3771                           
  3772                           ; 3 bytes @ 0x16
  3773  0036                     	ds	3
  3774  0039                     ?___ftadd:	
  3775  0039                     ___ftadd@f1:	
  3776                           ; 3 bytes @ 0x19
  3777                           
  3778                           
  3779                           ; 3 bytes @ 0x19
  3780  0039                     	ds	3
  3781  003C                     ___ftadd@f2:	
  3782                           
  3783                           ; 3 bytes @ 0x1C
  3784  003C                     	ds	3
  3785  003F                     ??___ftadd:	
  3786                           
  3787                           ; 0 bytes @ 0x1F
  3788  003F                     	ds	4
  3789  0043                     ___ftadd@sign:	
  3790                           
  3791                           ; 1 bytes @ 0x23
  3792  0043                     	ds	1
  3793  0044                     ___ftadd@exp2:	
  3794                           
  3795                           ; 1 bytes @ 0x24
  3796  0044                     	ds	1
  3797  0045                     ___ftadd@exp1:	
  3798                           
  3799                           ; 1 bytes @ 0x25
  3800  0045                     	ds	1
  3801  0046                     ?___fttol:	
  3802  0046                     ___fttol@f1:	
  3803                           ; 4 bytes @ 0x26
  3804                           
  3805                           
  3806                           ; 3 bytes @ 0x26
  3807  0046                     	ds	4
  3808  004A                     ??___fttol:	
  3809                           
  3810                           ; 0 bytes @ 0x2A
  3811  004A                     	ds	4
  3812  004E                     ___fttol@sign1:	
  3813                           
  3814                           ; 1 bytes @ 0x2E
  3815  004E                     	ds	1
  3816  004F                     ___fttol@lval:	
  3817                           
  3818                           ; 4 bytes @ 0x2F
  3819  004F                     	ds	4
  3820  0053                     ___fttol@exp1:	
  3821                           
  3822                           ; 1 bytes @ 0x33
  3823  0053                     	ds	1
  3824  0054                     ??_setDimmerLights_PercentValue:	
  3825                           
  3826                           ; 0 bytes @ 0x34
  3827  0054                     	ds	2
  3828  0056                     setDimmerLights_PercentValue@value:	
  3829                           
  3830                           ; 1 bytes @ 0x36
  3831  0056                     	ds	1
  3832  0057                     setDimmerLights_PercentValue@i:	
  3833                           
  3834                           ; 3 bytes @ 0x37
  3835  0057                     	ds	3
  3836  005A                     ?_setProductData:	
  3837  005A                     ??_Flash_Memory_Initialization:	
  3838                           ; 0 bytes @ 0x3A
  3839                           
  3840  005A                     setProductData@value:	
  3841                           ; 0 bytes @ 0x3A
  3842                           
  3843                           
  3844                           ; 1 bytes @ 0x3A
  3845  005A                     	ds	1
  3846  005B                     ??_setProductData:	
  3847  005B                     Flash_Memory_Initialization@i:	
  3848                           ; 0 bytes @ 0x3B
  3849                           
  3850                           
  3851                           ; 1 bytes @ 0x3B
  3852  005B                     	ds	2
  3853  005D                     setProductData@address:	
  3854                           
  3855                           ; 1 bytes @ 0x3D
  3856  005D                     	ds	1
  3857  005E                     ?_setRF_DimmerLights:	
  3858  005E                     ??_setTemp_Main:	
  3859                           ; 0 bytes @ 0x3E
  3860                           
  3861  005E                     ??_setLog_Code:	
  3862                           ; 0 bytes @ 0x3E
  3863                           
  3864  005E                     ??_setRF_DimmerValue:	
  3865                           ; 0 bytes @ 0x3E
  3866                           
  3867  005E                     ?_setDelayOff_GO:	
  3868                           ; 0 bytes @ 0x3E
  3869                           
  3870  005E                     setDelayOff_GO@command:	
  3871                           ; 0 bytes @ 0x3E
  3872                           
  3873  005E                     setRF_DimmerLights@on:	
  3874                           ; 1 bytes @ 0x3E
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0x3E
  3878  005E                     	ds	1
  3879  005F                     ??_setRF_DimmerLights:	
  3880  005F                     setDelayOff_GO@value:	
  3881                           ; 0 bytes @ 0x3F
  3882                           
  3883  005F                     setRF_DimmerValue@lights:	
  3884                           ; 1 bytes @ 0x3F
  3885                           
  3886                           
  3887                           ; 1 bytes @ 0x3F
  3888  005F                     	ds	1
  3889  0060                     ??_setRFSW_AdjControl:	
  3890  0060                     ??_setDelayOff_GO:	
  3891                           ; 0 bytes @ 0x40
  3892                           
  3893  0060                     setTemp_Main@error:	
  3894                           ; 0 bytes @ 0x40
  3895                           
  3896                           
  3897                           ; 1 bytes @ 0x40
  3898  0060                     	ds	1
  3899  0061                     setDelayOff_GO@sw:	
  3900  0061                     setRF_DimmerLights@status:	
  3901                           ; 1 bytes @ 0x41
  3902                           
  3903                           
  3904                           ; 1 bytes @ 0x41
  3905  0061                     	ds	1
  3906  0062                     setDimmerLights_SwOff@sw:	
  3907  0062                     setRFSW_AdjControl@status:	
  3908                           ; 1 bytes @ 0x42
  3909                           
  3910  0062                     setRF_DimmerLights@lights:	
  3911                           ; 1 bytes @ 0x42
  3912                           
  3913                           
  3914                           ; 1 bytes @ 0x42
  3915  0062                     	ds	1
  3916  0063                     ??_DlyOff_Main:	
  3917  0063                     ?_setDimmerLights_OnOff:	
  3918                           ; 0 bytes @ 0x43
  3919                           
  3920  0063                     ?_setDimmerLights_Dimming:	
  3921                           ; 0 bytes @ 0x43
  3922                           
  3923  0063                     ??_Exception_Main:	
  3924                           ; 0 bytes @ 0x43
  3925                           
  3926  0063                     ??_setRFSW_Control:	
  3927                           ; 0 bytes @ 0x43
  3928                           
  3929  0063                     ??_setSw_Main:	
  3930                           ; 0 bytes @ 0x43
  3931                           
  3932  0063                     setDimmerLights_OnOff@command:	
  3933                           ; 0 bytes @ 0x43
  3934                           
  3935  0063                     setDimmerLights_Dimming@status:	
  3936                           ; 1 bytes @ 0x43
  3937                           
  3938  0063                     setRFSW_AdjControl@sw:	
  3939                           ; 1 bytes @ 0x43
  3940                           
  3941                           
  3942                           ; 1 bytes @ 0x43
  3943  0063                     	ds	1
  3944  0064                     ??_setDimmerLights_OnOff:	
  3945  0064                     ??_setDimmerLights_Dimming:	
  3946                           ; 0 bytes @ 0x44
  3947                           
  3948  0064                     Exception_Main@count:	
  3949                           ; 0 bytes @ 0x44
  3950                           
  3951  0064                     setRFSW_Control@status:	
  3952                           ; 1 bytes @ 0x44
  3953                           
  3954                           
  3955                           ; 1 bytes @ 0x44
  3956  0064                     	ds	1
  3957  0065                     DlyOff_Main@sw:	
  3958  0065                     setDimmerLights_OnOff@lights:	
  3959                           ; 1 bytes @ 0x45
  3960                           
  3961  0065                     setDimmerLights_Dimming@lights:	
  3962                           ; 1 bytes @ 0x45
  3963                           
  3964  0065                     Exception_Main@error:	
  3965                           ; 1 bytes @ 0x45
  3966                           
  3967  0065                     setRFSW_Control@sw:	
  3968                           ; 1 bytes @ 0x45
  3969                           
  3970  0065                     setSw_Main@sw:	
  3971                           ; 1 bytes @ 0x45
  3972                           
  3973                           
  3974                           ; 1 bytes @ 0x45
  3975  0065                     	ds	1
  3976  0066                     ??_getRxData:	
  3977  0066                     setDimmerLights_Main@lights:	
  3978                           ; 0 bytes @ 0x46
  3979                           
  3980  0066                     Exception_Main@i:	
  3981                           ; 1 bytes @ 0x46
  3982                           
  3983                           
  3984                           ; 2 bytes @ 0x46
  3985  0066                     	ds	1
  3986  0067                     getRxData@error:	
  3987                           
  3988                           ; 1 bytes @ 0x47
  3989  0067                     	ds	1
  3990  0068                     ??_setRF_Main:	
  3991  0068                     Exception_Main@i_3373:	
  3992                           ; 0 bytes @ 0x48
  3993                           
  3994                           
  3995                           ; 2 bytes @ 0x48
  3996  0068                     	ds	1
  3997  0069                     setRF_Main@error:	
  3998                           
  3999                           ; 1 bytes @ 0x49
  4000  0069                     	ds	1
  4001  006A                     Exception_Main@lights:	
  4002                           
  4003                           ; 1 bytes @ 0x4A
  4004  006A                     	ds	1
  4005                           
  4006                           	psect	maintext
  4007  09EA                     __pmaintext:	
  4008 ;;
  4009 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4010 ;;
  4011 ;; *************** function _main *****************
  4012 ;; Defined at:
  4013 ;;		line 7 in file "../src/Main_B1.c"
  4014 ;; Parameters:    Size  Location     Type
  4015 ;;  argc            2    0[BANK3 ] int 
  4016 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4017 ;; Auto vars:     Size  Location     Type
  4018 ;;		None
  4019 ;; Return value:  Size  Location     Type
  4020 ;;                  2    0[BANK3 ] int 
  4021 ;; Registers used:
  4022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4023 ;; Tracked objects:
  4024 ;;		On entry : 17F/0
  4025 ;;		On exit  : 0/0
  4026 ;;		Unchanged: 0/0
  4027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4028 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4031 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4032 ;;Total ram usage:        4 bytes
  4033 ;; Hardware stack levels required when called:   12
  4034 ;; This function calls:
  4035 ;;		_Buzzer_Initialization
  4036 ;;		_Buzzer_Main
  4037 ;;		_CC2500_PowerOnInitial
  4038 ;;		_DelayOff_Initialization
  4039 ;;		_DelayOff_Main
  4040 ;;		_DimmerLights_Initialization
  4041 ;;		_DimmerLights_Main
  4042 ;;		_Exception_Main
  4043 ;;		_Flash_Memory_Initialization
  4044 ;;		_Flash_Memory_Main
  4045 ;;		_LED_Initialization
  4046 ;;		_LED_Main
  4047 ;;		_Load_Initialization
  4048 ;;		_Load_Main
  4049 ;;		_Mcu_Initialization
  4050 ;;		_RF_Initialization
  4051 ;;		_RF_Main
  4052 ;;		_Switch_Initialization
  4053 ;;		_Switch_Main
  4054 ;;		_Temp_Initialization
  4055 ;;		_Temp_Main
  4056 ;;		_WDT_Main
  4057 ;;		_getLoad_AD
  4058 ;;		_getTemp_AD
  4059 ;;		_myMain_Initialization
  4060 ;;		_my_MainTimer
  4061 ;; This function is called by:
  4062 ;;		Startup code after reset
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           
  4067                           ;psect for function _main
  4068  09EA                     _main:	
  4069                           
  4070                           ;Main_B1.c: 8: myMain_Initialization();
  4071                           
  4072                           ;incstack = 0
  4073                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4074  09EA  319E  2608  3189   	fcall	_myMain_Initialization
  4075                           
  4076                           ;Main_B1.c: 9: Mcu_Initialization();
  4077  09ED  319E  26EC  3189   	fcall	_Mcu_Initialization
  4078                           
  4079                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  4080  09F0  3184  2454  3189   	fcall	_Flash_Memory_Initialization
  4081                           
  4082                           ;Main_B1.c: 11: LED_Initialization();
  4083  09F3  319D  2572  3189   	fcall	_LED_Initialization
  4084                           
  4085                           ;Main_B1.c: 12: Buzzer_Initialization();
  4086  09F6  319C  24A6  3189   	fcall	_Buzzer_Initialization
  4087                           
  4088                           ;Main_B1.c: 14: ;;
  4089                           ;Main_B1.c: 15: Temp_Initialization();
  4090  09F9  319C  24B2  3189   	fcall	_Temp_Initialization
  4091                           
  4092                           ;Main_B1.c: 16: Load_Initialization();
  4093  09FC  319C  24A9  3189   	fcall	_Load_Initialization
  4094                           
  4095                           ;Main_B1.c: 17: ;;
  4096                           ;Main_B1.c: 18: DelayOff_Initialization();
  4097  09FF  319C  24F9  3189   	fcall	_DelayOff_Initialization
  4098                           
  4099                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4100  0A02  319D  252E  3189   	fcall	_DimmerLights_Initialization
  4101                           
  4102                           ;Main_B1.c: 21: ;;
  4103                           ;Main_B1.c: 22: ;;
  4104                           ;Main_B1.c: 23: ;;
  4105                           ;Main_B1.c: 24: Switch_Initialization();
  4106  0A05  319D  25A2  3189   	fcall	_Switch_Initialization
  4107                           
  4108                           ;Main_B1.c: 25: RF_Initialization();
  4109  0A08  319C  24AC  3189   	fcall	_RF_Initialization
  4110                           
  4111                           ;Main_B1.c: 26: CC2500_PowerOnInitial();
  4112  0A0B  319F  277A  3189   	fcall	_CC2500_PowerOnInitial
  4113  0A0E                     l10106:	
  4114                           ;Main_B1.c: 27: ;;
  4115                           ;Main_B1.c: 28: ;;
  4116                           ;Main_B1.c: 30: while (1) {
  4117                           
  4118                           
  4119                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  4120  0A0E  0022               	movlb	2	; select bank2
  4121  0A0F  1C20               	btfss	_myMain^(0+256),0
  4122  0A10  2A19               	goto	l10110
  4123                           
  4124                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4125  0A11  3005               	movlw	5
  4126  0A12  318D  25D7  3189   	fcall	_getLoad_AD
  4127                           
  4128                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4129  0A15  3009               	movlw	9
  4130  0A16  3194  24AB  3189   	fcall	_getTemp_AD
  4131  0A19                     l10110:	
  4132                           
  4133                           ;Main_B1.c: 57: }
  4134                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  4135  0A19  0021               	movlb	1	; select bank1
  4136  0A1A  1C3D               	btfss	_Timer1^(0+128),0
  4137  0A1B  2A0E               	goto	l10106
  4138                           
  4139                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  4140  0A1C  103D               	bcf	_Timer1^(0+128),0
  4141                           
  4142                           ;Main_B1.c: 96: my_MainTimer();
  4143  0A1D  3194  24E4  3189   	fcall	_my_MainTimer
  4144                           
  4145                           ;Main_B1.c: 97: WDT_Main();
  4146  0A20  319E  2697  3189   	fcall	_WDT_Main
  4147                           
  4148                           ;Main_B1.c: 98: ;;
  4149                           ;Main_B1.c: 99: ;;
  4150                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  4151  0A23  0022               	movlb	2	; select bank2
  4152  0A24  1C20               	btfss	_myMain^(0+256),0
  4153  0A25  2A0E               	goto	l10106
  4154                           
  4155                           ;Main_B1.c: 101: Flash_Memory_Main();
  4156  0A26  3194  240E  3189   	fcall	_Flash_Memory_Main
  4157                           
  4158                           ;Main_B1.c: 103: LED_Main();
  4159  0A29  319D  257E  3189   	fcall	_LED_Main
  4160                           
  4161                           ;Main_B1.c: 104: Buzzer_Main();
  4162  0A2C  3195  25E0  3189   	fcall	_Buzzer_Main
  4163                           
  4164                           ;Main_B1.c: 106: ;;
  4165                           ;Main_B1.c: 107: Temp_Main();
  4166  0A2F  319C  24B5  3189   	fcall	_Temp_Main
  4167                           
  4168                           ;Main_B1.c: 108: Load_Main();
  4169  0A32  3180  2055  3189   	fcall	_Load_Main
  4170                           
  4171                           ;Main_B1.c: 109: ;;
  4172                           ;Main_B1.c: 111: ;;
  4173                           ;Main_B1.c: 112: DimmerLights_Main();
  4174  0A35  3191  2164  3189   	fcall	_DimmerLights_Main
  4175                           
  4176                           ;Main_B1.c: 113: Switch_Main();
  4177  0A38  319D  254F  3189   	fcall	_Switch_Main
  4178                           
  4179                           ;Main_B1.c: 114: ;;
  4180                           ;Main_B1.c: 115: ;;
  4181                           ;Main_B1.c: 117: RF_Main();
  4182  0A3B  319C  24AF  3189   	fcall	_RF_Main
  4183                           
  4184                           ;Main_B1.c: 118: DelayOff_Main();
  4185  0A3E  319D  2501  3189   	fcall	_DelayOff_Main
  4186                           
  4187                           ;Main_B1.c: 119: ;;
  4188                           ;Main_B1.c: 120: ;;
  4189                           ;Main_B1.c: 121: Exception_Main();
  4190  0A41  3185  2530  3189   	fcall	_Exception_Main
  4191  0A44  2A0E               	goto	l10106
  4192  0A45                     __end_of_main:	
  4193                           ;Main_B1.c: 128: }
  4194                           ;Main_B1.c: 129: }
  4195                           ;Main_B1.c: 163: }
  4196                           ;Main_B1.c: 164: return (0);
  4197                           ;	Return value of _main is never used
  4198                           
  4199                           
  4200                           	psect	text1
  4201  14E4                     __ptext1:	
  4202 ;; *************** function _my_MainTimer *****************
  4203 ;; Defined at:
  4204 ;;		line 185 in file "../src/Main_B1.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;		None
  4207 ;; Auto vars:     Size  Location     Type
  4208 ;;		None
  4209 ;; Return value:  Size  Location     Type
  4210 ;;		None               void
  4211 ;; Registers used:
  4212 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4213 ;; Tracked objects:
  4214 ;;		On entry : 0/0
  4215 ;;		On exit  : 0/0
  4216 ;;		Unchanged: 0/0
  4217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;Total ram usage:        1 bytes
  4223 ;; Hardware stack levels used:    1
  4224 ;; Hardware stack levels required when called:    5
  4225 ;; This function calls:
  4226 ;;		_setBuz
  4227 ;; This function is called by:
  4228 ;;		_main
  4229 ;; This function uses a non-reentrant model
  4230 ;;
  4231                           
  4232                           
  4233                           ;psect for function _my_MainTimer
  4234  14E4                     _my_MainTimer:	
  4235                           
  4236                           ;Main_B1.c: 188: if (myMain.PowerON == 0) {
  4237                           
  4238                           ;incstack = 0
  4239                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4240  14E4  0022               	movlb	2	; select bank2
  4241  14E5  1820               	btfsc	_myMain^(0+256),0
  4242  14E6  2CFC               	goto	l9824
  4243                           
  4244                           ;Main_B1.c: 189: myMain.PowerCount++;
  4245  14E7  3001               	movlw	1
  4246  14E8  00F9               	movwf	??_my_MainTimer
  4247  14E9  0879               	movf	??_my_MainTimer,w
  4248  14EA  07A1               	addwf	(_myMain^(0+256)+1),f
  4249                           
  4250                           ;Main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4251  14EB  0821               	movf	(_myMain^(0+256)+1),w
  4252  14EC  3A4B               	xorlw	75
  4253  14ED  1D03               	skipz
  4254  14EE  0008               	return
  4255                           
  4256                           ;Main_B1.c: 191: myMain.PowerCount = 0;
  4257  14EF  01A1               	clrf	(_myMain^(0+256)+1)
  4258                           
  4259                           ;Main_B1.c: 192: myMain.PowerON = 1;
  4260  14F0  1420               	bsf	_myMain^(0+256),0
  4261                           
  4262                           ;Main_B1.c: 197: setBuz(3, 50);
  4263  14F1  3032               	movlw	50
  4264  14F2  0020               	movlb	0	; select bank0
  4265  14F3  00A4               	movwf	setBuz@time
  4266  14F4  3000               	movlw	0
  4267  14F5  00A5               	movwf	setBuz@time+1
  4268  14F6  3003               	movlw	3
  4269  14F7  3197  2759         	fcall	_setBuz
  4270                           
  4271                           ;Main_B1.c: 198: myMain.SelfTest = 1;
  4272  14F9  0022               	movlb	2	; select bank2
  4273  14FA  1620               	bsf	_myMain^(0+256),4
  4274                           
  4275                           ;Main_B1.c: 207: }
  4276                           ;Main_B1.c: 208: } else {
  4277  14FB  0008               	return
  4278  14FC                     l9824:	
  4279                           
  4280                           ;Main_B1.c: 209: myMain.PowerCount++;
  4281  14FC  3001               	movlw	1
  4282  14FD  00F9               	movwf	??_my_MainTimer
  4283  14FE  0879               	movf	??_my_MainTimer,w
  4284  14FF  07A1               	addwf	(_myMain^(0+256)+1),f
  4285                           
  4286                           ;Main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4287  1500  0821               	movf	(_myMain^(0+256)+1),w
  4288  1501  3A32               	xorlw	50
  4289  1502  1903               	btfsc	3,2
  4290                           
  4291                           ;Main_B1.c: 211: myMain.PowerCount = 0;
  4292  1503  01A1               	clrf	(_myMain^(0+256)+1)
  4293                           
  4294                           ;Main_B1.c: 226: }
  4295                           ;Main_B1.c: 228: myMain.Count1++;
  4296  1504  3001               	movlw	1
  4297  1505  07A4               	addwf	(_myMain^(0+256)+4),f
  4298  1506  3000               	movlw	0
  4299  1507  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4300                           
  4301                           ;Main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4302  1508  3004               	movlw	4
  4303  1509  3E20               	addlw	_myMain& (0+255)
  4304  150A  0086               	movwf	6
  4305  150B  3001               	movlw	1	; select bank2/3
  4306  150C  0087               	movwf	7
  4307  150D  3F40               	moviw [0]fsr1
  4308  150E  3A32               	xorlw	50
  4309  150F  1D03               	skipz
  4310  1510  2D13               	goto	u11375
  4311  1511  3F41               	moviw [1]fsr1
  4312  1512  3A00               	xorlw	0
  4313  1513                     u11375:	
  4314  1513  1D03               	skipz
  4315  1514  0008               	return
  4316                           
  4317                           ;Main_B1.c: 230: myMain.Count1 = 0;
  4318  1515  01A4               	clrf	(_myMain^(0+256)+4)
  4319  1516  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4320                           
  4321                           ;Main_B1.c: 242: if (myMain.Flag) {
  4322  1517  1CA0               	btfss	_myMain^(0+256),1
  4323  1518  2D1B               	goto	l1626
  4324                           
  4325                           ;Main_B1.c: 243: myMain.Flag = 0;
  4326  1519  10A0               	bcf	_myMain^(0+256),1
  4327                           
  4328                           ;Main_B1.c: 252: } else {
  4329  151A  0008               	return
  4330  151B                     l1626:	
  4331                           
  4332                           ;Main_B1.c: 253: myMain.Flag = 1;
  4333  151B  14A0               	bsf	_myMain^(0+256),1
  4334  151C  0008               	return
  4335  151D                     __end_of_my_MainTimer:	
  4336                           
  4337                           	psect	text2
  4338  1E08                     __ptext2:	
  4339 ;; *************** function _myMain_Initialization *****************
  4340 ;; Defined at:
  4341 ;;		line 170 in file "../src/Main_B1.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;		None
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;		None
  4346 ;; Return value:  Size  Location     Type
  4347 ;;		None               void
  4348 ;; Registers used:
  4349 ;;		wreg, fsr1l, fsr1h
  4350 ;; Tracked objects:
  4351 ;;		On entry : 0/0
  4352 ;;		On exit  : 0/0
  4353 ;;		Unchanged: 0/0
  4354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4357 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4358 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4359 ;;Total ram usage:        1 bytes
  4360 ;; Hardware stack levels used:    1
  4361 ;; Hardware stack levels required when called:    3
  4362 ;; This function calls:
  4363 ;;		Nothing
  4364 ;; This function is called by:
  4365 ;;		_main
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           
  4370                           ;psect for function _myMain_Initialization
  4371  1E08                     _myMain_Initialization:	
  4372                           
  4373                           ;Main_B1.c: 173: product = &_product;
  4374                           
  4375                           ;incstack = 0
  4376                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4377  1E08  3045               	movlw	__product& (0+255)
  4378  1E09  00F2               	movwf	??_myMain_Initialization
  4379  1E0A  0872               	movf	??_myMain_Initialization,w
  4380  1E0B  0020               	movlb	0	; select bank0
  4381  1E0C  00ED               	movwf	_product
  4382                           
  4383                           ;Main_B1.c: 174: product->Data[20] = 210;
  4384  1E0D  30D2               	movlw	210
  4385  1E0E  00F2               	movwf	??_myMain_Initialization
  4386  1E0F  086D               	movf	_product,w
  4387  1E10  3E14               	addlw	20
  4388  1E11  0086               	movwf	6
  4389  1E12  3002               	movlw	2	; select bank4/5
  4390  1E13  0087               	movwf	7
  4391  1E14  0872               	movf	??_myMain_Initialization,w
  4392  1E15  0081               	movwf	1
  4393  1E16  0008               	return
  4394  1E17                     __end_of_myMain_Initialization:	
  4395                           
  4396                           	psect	text3
  4397  14AB                     __ptext3:	
  4398 ;; *************** function _getTemp_AD *****************
  4399 ;; Defined at:
  4400 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  channel         1    wreg     unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  channel         1    7[COMMON] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;		None               void
  4407 ;; Registers used:
  4408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;Total ram usage:        2 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    5
  4421 ;; This function calls:
  4422 ;;		_getAD
  4423 ;; This function is called by:
  4424 ;;		_main
  4425 ;; This function uses a non-reentrant model
  4426 ;;
  4427                           
  4428                           
  4429                           ;psect for function _getTemp_AD
  4430  14AB                     _getTemp_AD:	
  4431                           
  4432                           ;incstack = 0
  4433                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4434                           ;getTemp_AD@channel stored from wreg
  4435  14AB  00F7               	movwf	getTemp_AD@channel
  4436                           
  4437                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4438  14AC  0021               	movlb	1	; select bank1
  4439  14AD  1D4F               	btfss	_Temp^(0+128),2
  4440  14AE  0008               	return
  4441                           
  4442                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4443  14AF  30F0               	movlw	240
  4444  14B0  00F6               	movwf	??_getTemp_AD
  4445  14B1  0876               	movf	??_getTemp_AD,w
  4446  14B2  00F2               	movwf	getAD@adcon1
  4447  14B3  0877               	movf	getTemp_AD@channel,w
  4448  14B4  3190  20D6  3194   	fcall	_getAD
  4449  14B7  0873               	movf	?_getAD+1,w
  4450  14B8  0021               	movlb	1	; select bank1
  4451  14B9  01DC               	clrf	((_Temp+1)^(0+128)+12)
  4452  14BA  07DC               	addwf	((_Temp+1)^(0+128)+12),f
  4453  14BB  0872               	movf	?_getAD,w
  4454  14BC  01DB               	clrf	(_Temp^(0+128)+12)
  4455  14BD  07DB               	addwf	(_Temp^(0+128)+12),f
  4456                           
  4457                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4458  14BE  300C               	movlw	12
  4459  14BF  3ECF               	addlw	_Temp& (0+255)
  4460  14C0  0086               	movwf	6
  4461  14C1  0187               	clrf	7
  4462  14C2  0016               	moviw fsr1++
  4463  14C3  0401               	iorwf	1,w
  4464  14C4  1903               	skipnz
  4465  14C5  0008               	return
  4466                           
  4467                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4468  14C6  085C               	movf	((_Temp+1)^(0+128)+12),w
  4469  14C7  0258               	subwf	((_Temp+1)^(0+128)+8),w
  4470  14C8  1D03               	skipz
  4471  14C9  2CCC               	goto	u11325
  4472  14CA  085B               	movf	(_Temp^(0+128)+12),w
  4473  14CB  0257               	subwf	(_Temp^(0+128)+8),w
  4474  14CC                     u11325:	
  4475  14CC  1803               	skipnc
  4476  14CD  2CD5               	goto	l9806
  4477                           
  4478                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4479  14CE  085C               	movf	((_Temp+1)^(0+128)+12),w
  4480  14CF  01D8               	clrf	((_Temp+1)^(0+128)+8)
  4481  14D0  07D8               	addwf	((_Temp+1)^(0+128)+8),f
  4482  14D1  085B               	movf	(_Temp^(0+128)+12),w
  4483  14D2  01D7               	clrf	(_Temp^(0+128)+8)
  4484  14D3  07D7               	addwf	(_Temp^(0+128)+8),f
  4485                           
  4486                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4487  14D4  0008               	return
  4488  14D5                     l9806:	
  4489  14D5  085C               	movf	((_Temp+1)^(0+128)+12),w
  4490  14D6  025A               	subwf	((_Temp+1)^(0+128)+10),w
  4491  14D7  1D03               	skipz
  4492  14D8  2CDB               	goto	u11335
  4493  14D9  085B               	movf	(_Temp^(0+128)+12),w
  4494  14DA  0259               	subwf	(_Temp^(0+128)+10),w
  4495  14DB                     u11335:	
  4496  14DB  1803               	skipnc
  4497  14DC  0008               	return
  4498                           
  4499                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4500  14DD  085C               	movf	((_Temp+1)^(0+128)+12),w
  4501  14DE  01DA               	clrf	((_Temp+1)^(0+128)+10)
  4502  14DF  07DA               	addwf	((_Temp+1)^(0+128)+10),f
  4503  14E0  085B               	movf	(_Temp^(0+128)+12),w
  4504  14E1  01D9               	clrf	(_Temp^(0+128)+10)
  4505  14E2  07D9               	addwf	(_Temp^(0+128)+10),f
  4506  14E3  0008               	return
  4507  14E4                     __end_of_getTemp_AD:	
  4508                           
  4509                           	psect	text4
  4510  0DD7                     __ptext4:	
  4511 ;; *************** function _getLoad_AD *****************
  4512 ;; Defined at:
  4513 ;;		line 15 in file "../src/OverLoad_B1.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  channel         1    wreg     unsigned char 
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;  channel         1    0[BANK0 ] unsigned char 
  4518 ;;  i               1    3[BANK0 ] unsigned char 
  4519 ;;  j               1    2[BANK0 ] unsigned char 
  4520 ;;  k               1    1[BANK0 ] unsigned char 
  4521 ;; Return value:  Size  Location     Type
  4522 ;;		None               void
  4523 ;; Registers used:
  4524 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4531 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4533 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4534 ;;Total ram usage:        6 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    5
  4537 ;; This function calls:
  4538 ;;		_getAD
  4539 ;; This function is called by:
  4540 ;;		_main
  4541 ;; This function uses a non-reentrant model
  4542 ;;
  4543                           
  4544                           
  4545                           ;psect for function _getLoad_AD
  4546  0DD7                     _getLoad_AD:	
  4547                           
  4548                           ;incstack = 0
  4549                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4550                           ;getLoad_AD@channel stored from wreg
  4551  0DD7  0020               	movlb	0	; select bank0
  4552  0DD8  00A0               	movwf	getLoad_AD@channel
  4553                           
  4554                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4555  0DD9  01A3               	clrf	getLoad_AD@i
  4556  0DDA  01A2               	clrf	getLoad_AD@j
  4557  0DDB  01A1               	clrf	getLoad_AD@k
  4558                           
  4559                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4560  0DDC  0022               	movlb	2	; select bank2
  4561  0DDD  1E2E               	btfss	_Load^(0+256),4
  4562  0DDE  0008               	return
  4563                           
  4564                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4565  0DDF  30F3               	movlw	243
  4566  0DE0  00F6               	movwf	??_getLoad_AD
  4567  0DE1  0876               	movf	??_getLoad_AD,w
  4568  0DE2  00F2               	movwf	getAD@adcon1
  4569  0DE3  0020               	movlb	0	; select bank0
  4570  0DE4  0820               	movf	getLoad_AD@channel,w
  4571  0DE5  3190  20D6  318D   	fcall	_getAD
  4572  0DE8  0873               	movf	?_getAD+1,w
  4573  0DE9  0022               	movlb	2	; select bank2
  4574  0DEA  01D0               	clrf	((_Load+1)^(0+256)+33)
  4575  0DEB  07D0               	addwf	((_Load+1)^(0+256)+33),f
  4576  0DEC  0872               	movf	?_getAD,w
  4577  0DED  01CF               	clrf	(_Load^(0+256)+33)
  4578  0DEE  07CF               	addwf	(_Load^(0+256)+33),f
  4579                           
  4580                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4581  0DEF  0020               	movlb	0	; select bank0
  4582  0DF0  01A3               	clrf	getLoad_AD@i
  4583  0DF1  3004               	movlw	4
  4584  0DF2  0223               	subwf	getLoad_AD@i,w
  4585  0DF3  1803               	btfsc	3,0
  4586  0DF4  2E21               	goto	l9776
  4587  0DF5                     l9764:	
  4588                           
  4589                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4590  0DF5  3523               	lslf	getLoad_AD@i,w
  4591  0DF6  3E39               	addlw	(_Load+11)& (0+255)
  4592  0DF7  0086               	movwf	6
  4593  0DF8  3001               	movlw	1	; select bank2/3
  4594  0DF9  0087               	movwf	7
  4595  0DFA  3F40               	moviw [0]fsr1
  4596  0DFB  00F6               	movwf	??_getLoad_AD
  4597  0DFC  3F41               	moviw [1]fsr1
  4598  0DFD  00F7               	movwf	??_getLoad_AD+1
  4599  0DFE  0022               	movlb	2	; select bank2
  4600  0DFF  0850               	movf	((_Load+1)^(0+256)+33),w
  4601  0E00  0277               	subwf	??_getLoad_AD+1,w
  4602  0E01  1D03               	skipz
  4603  0E02  2E05               	goto	u11225
  4604  0E03  084F               	movf	(_Load^(0+256)+33),w
  4605  0E04  0276               	subwf	??_getLoad_AD,w
  4606  0E05                     u11225:	
  4607  0E05  1803               	skipnc
  4608  0E06  2E18               	goto	l9772
  4609  0E07  0020               	movlb	0	; select bank0
  4610  0E08  08A2               	movf	getLoad_AD@j,f
  4611  0E09  1D03               	skipz
  4612  0E0A  2E18               	goto	l9772
  4613                           
  4614                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4615  0E0B  3523               	lslf	getLoad_AD@i,w
  4616  0E0C  3E39               	addlw	(_Load+11)& (0+255)
  4617  0E0D  0086               	movwf	6
  4618  0E0E  3001               	movlw	1	; select bank2/3
  4619  0E0F  0087               	movwf	7
  4620  0E10  0022               	movlb	2	; select bank2
  4621  0E11  084F               	movf	(_Load^(0+256)+33),w
  4622  0E12  3FC0               	movwi [0]fsr1
  4623  0E13  0850               	movf	((_Load+1)^(0+256)+33),w
  4624  0E14  3FC1               	movwi [1]fsr1
  4625                           
  4626                           ;OverLoad_B1.c: 24: j = 1;
  4627  0E15  0020               	movlb	0	; select bank0
  4628  0E16  01A2               	clrf	getLoad_AD@j
  4629  0E17  0AA2               	incf	getLoad_AD@j,f
  4630  0E18                     l9772:	
  4631  0E18  3001               	movlw	1
  4632  0E19  00F6               	movwf	??_getLoad_AD
  4633  0E1A  0876               	movf	??_getLoad_AD,w
  4634  0E1B  0020               	movlb	0	; select bank0
  4635  0E1C  07A3               	addwf	getLoad_AD@i,f
  4636  0E1D  3004               	movlw	4
  4637  0E1E  0223               	subwf	getLoad_AD@i,w
  4638  0E1F  1C03               	skipc
  4639  0E20  2DF5               	goto	l9764
  4640  0E21                     l9776:	
  4641                           
  4642                           ;OverLoad_B1.c: 25: }
  4643                           ;OverLoad_B1.c: 26: }
  4644                           ;OverLoad_B1.c: 27: if (j == 0) {
  4645  0E21  08A2               	movf	getLoad_AD@j,f
  4646  0E22  1D03               	skipz
  4647  0E23  0008               	return
  4648                           
  4649                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4650  0E24  01A3               	clrf	getLoad_AD@i
  4651  0E25                     L1:	
  4652  0E25  3004               	movlw	4
  4653  0E26  0223               	subwf	getLoad_AD@i,w
  4654  0E27  1803               	btfsc	3,0
  4655  0E28  0008               	return
  4656                           
  4657                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4658  0E29  3523               	lslf	getLoad_AD@i,w
  4659  0E2A  3E43               	addlw	(_Load+21)& (0+255)
  4660  0E2B  0086               	movwf	6
  4661  0E2C  3001               	movlw	1	; select bank2/3
  4662  0E2D  0087               	movwf	7
  4663  0E2E  3F40               	moviw [0]fsr1
  4664  0E2F  00F6               	movwf	??_getLoad_AD
  4665  0E30  3F41               	moviw [1]fsr1
  4666  0E31  00F7               	movwf	??_getLoad_AD+1
  4667  0E32  0877               	movf	??_getLoad_AD+1,w
  4668  0E33  0022               	movlb	2	; select bank2
  4669  0E34  0250               	subwf	((_Load+1)^(0+256)+33),w
  4670  0E35  1D03               	skipz
  4671  0E36  2E39               	goto	u11275
  4672  0E37  0876               	movf	??_getLoad_AD,w
  4673  0E38  024F               	subwf	(_Load^(0+256)+33),w
  4674  0E39                     u11275:	
  4675  0E39  1803               	skipnc
  4676  0E3A  2E4C               	goto	l9792
  4677  0E3B  0020               	movlb	0	; select bank0
  4678  0E3C  08A1               	movf	getLoad_AD@k,f
  4679  0E3D  1D03               	skipz
  4680  0E3E  2E4C               	goto	l9792
  4681                           
  4682                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4683  0E3F  3523               	lslf	getLoad_AD@i,w
  4684  0E40  3E43               	addlw	(_Load+21)& (0+255)
  4685  0E41  0086               	movwf	6
  4686  0E42  3001               	movlw	1	; select bank2/3
  4687  0E43  0087               	movwf	7
  4688  0E44  0022               	movlb	2	; select bank2
  4689  0E45  084F               	movf	(_Load^(0+256)+33),w
  4690  0E46  3FC0               	movwi [0]fsr1
  4691  0E47  0850               	movf	((_Load+1)^(0+256)+33),w
  4692  0E48  3FC1               	movwi [1]fsr1
  4693                           
  4694                           ;OverLoad_B1.c: 31: k = 1;
  4695  0E49  0020               	movlb	0	; select bank0
  4696  0E4A  01A1               	clrf	getLoad_AD@k
  4697  0E4B  0AA1               	incf	getLoad_AD@k,f
  4698  0E4C                     l9792:	
  4699  0E4C  3001               	movlw	1
  4700  0E4D  00F6               	movwf	??_getLoad_AD
  4701  0E4E  0876               	movf	??_getLoad_AD,w
  4702  0E4F  0020               	movlb	0	; select bank0
  4703  0E50  07A3               	addwf	getLoad_AD@i,f
  4704  0E51  2E25               	goto	L1
  4705  0E52                     __end_of_getLoad_AD:	
  4706                           
  4707                           	psect	text5
  4708  10D6                     __ptext5:	
  4709 ;; *************** function _getAD *****************
  4710 ;; Defined at:
  4711 ;;		line 462 in file "../src/MCU_B1.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;  adcon0          1    wreg     unsigned char 
  4714 ;;  adcon1          1    2[COMMON] unsigned char 
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;  adcon0          1    5[COMMON] unsigned char 
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  2    2[COMMON] int 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4726 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4730 ;;Total ram usage:        4 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; Hardware stack levels required when called:    4
  4733 ;; This function calls:
  4734 ;;		_Timeout_Counter
  4735 ;;		_set_TimeoutCleared
  4736 ;; This function is called by:
  4737 ;;		_getLoad_AD
  4738 ;;		_getTemp_AD
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           
  4743                           ;psect for function _getAD
  4744  10D6                     _getAD:	
  4745                           
  4746                           ;incstack = 0
  4747                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4748                           ;getAD@adcon0 stored from wreg
  4749  10D6  00F5               	movwf	getAD@adcon0
  4750                           
  4751                           ;MCU_B1.c: 463: ADCON0 = adcon0;
  4752  10D7  0875               	movf	getAD@adcon0,w
  4753  10D8  0021               	movlb	1	; select bank1
  4754  10D9  009D               	movwf	29	;volatile
  4755                           
  4756                           ;MCU_B1.c: 464: ADCON1 = adcon1;
  4757  10DA  0872               	movf	getAD@adcon1,w
  4758  10DB  009E               	movwf	30	;volatile
  4759                           
  4760                           ;MCU_B1.c: 465: GO_nDONE = 1;
  4761  10DC  149D               	bsf	29,1	;volatile
  4762                           
  4763                           ;MCU_B1.c: 466: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4764  10DD  28E1               	goto	l9442
  4765  10DE                     l9440:	
  4766                           
  4767                           ;MCU_B1.c: 467: Timeout_Counter();
  4768  10DE  319F  27B9  3190   	fcall	_Timeout_Counter
  4769  10E1                     l9442:	
  4770  10E1  0021               	movlb	1	; select bank1
  4771  10E2  1C9D               	btfss	29,1	;volatile
  4772  10E3  28E7               	goto	l9446
  4773  10E4  0022               	movlb	2	; select bank2
  4774  10E5  1D2B               	btfss	(_myMain^(0+256)+11),2
  4775  10E6  28DE               	goto	l9440
  4776  10E7                     l9446:	
  4777                           
  4778                           ;MCU_B1.c: 468: };
  4779                           ;MCU_B1.c: 469: set_TimeoutCleared();
  4780  10E7  319C  24D1         	fcall	_set_TimeoutCleared
  4781                           
  4782                           ;MCU_B1.c: 470: return ((ADRESH*256)+ADRESL);
  4783  10E9  0021               	movlb	1	; select bank1
  4784  10EA  081C               	movf	28,w	;volatile
  4785  10EB  01F3               	clrf	?_getAD+1
  4786  10EC  07F3               	addwf	?_getAD+1,f
  4787  10ED  081B               	movf	27,w	;volatile
  4788  10EE  01F2               	clrf	?_getAD
  4789  10EF  07F2               	addwf	?_getAD,f
  4790  10F0  0008               	return
  4791  10F1                     __end_of_getAD:	
  4792                           
  4793                           	psect	text6
  4794  1E97                     __ptext6:	
  4795 ;; *************** function _WDT_Main *****************
  4796 ;; Defined at:
  4797 ;;		line 1106 in file "../src/MCU_B1.c"
  4798 ;; Parameters:    Size  Location     Type
  4799 ;;		None
  4800 ;; Auto vars:     Size  Location     Type
  4801 ;;		None
  4802 ;; Return value:  Size  Location     Type
  4803 ;;		None               void
  4804 ;; Registers used:
  4805 ;;		wreg, status,2, status,0, pclath, cstack
  4806 ;; Tracked objects:
  4807 ;;		On entry : 0/0
  4808 ;;		On exit  : 0/0
  4809 ;;		Unchanged: 0/0
  4810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4813 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4815 ;;Total ram usage:        1 bytes
  4816 ;; Hardware stack levels used:    1
  4817 ;; Hardware stack levels required when called:    4
  4818 ;; This function calls:
  4819 ;;		_WDT_Clearing
  4820 ;; This function is called by:
  4821 ;;		_main
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           
  4826                           ;psect for function _WDT_Main
  4827  1E97                     _WDT_Main:	
  4828                           
  4829                           ;MCU_B1.c: 1107: if (WDT.Enable == 1) {
  4830                           
  4831                           ;incstack = 0
  4832                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4833  1E97  0021               	movlb	1	; select bank1
  4834  1E98  1C42               	btfss	_WDT^(0+128),0
  4835  1E99  0008               	return
  4836                           
  4837                           ;MCU_B1.c: 1108: if (WDT.Timer-- > 0) {
  4838  1E9A  3001               	movlw	1
  4839  1E9B  02C3               	subwf	(_WDT^(0+128)+1),f
  4840  1E9C  0843               	movf	(_WDT^(0+128)+1),w
  4841  1E9D  3AFF               	xorlw	255
  4842  1E9E  1903               	skipnz
  4843  1E9F  0008               	return
  4844                           
  4845                           ;MCU_B1.c: 1109: WDT.Timer = 100;
  4846  1EA0  3064               	movlw	100
  4847  1EA1  00F2               	movwf	??_WDT_Main
  4848  1EA2  0872               	movf	??_WDT_Main,w
  4849  1EA3  00C3               	movwf	(_WDT^(0+128)+1)
  4850                           
  4851                           ;MCU_B1.c: 1110: WDT_Clearing();
  4852  1EA4  3180  2002         	fcall	_WDT_Clearing
  4853  1EA6  0008               	return
  4854  1EA7                     __end_of_WDT_Main:	
  4855                           
  4856                           	psect	text7
  4857  0002                     __ptext7:	
  4858 ;; *************** function _WDT_Clearing *****************
  4859 ;; Defined at:
  4860 ;;		line 1116 in file "../src/MCU_B1.c"
  4861 ;; Parameters:    Size  Location     Type
  4862 ;;		None
  4863 ;; Auto vars:     Size  Location     Type
  4864 ;;		None
  4865 ;; Return value:  Size  Location     Type
  4866 ;;		None               void
  4867 ;; Registers used:
  4868 ;;		None
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4878 ;;Total ram usage:        0 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    3
  4881 ;; This function calls:
  4882 ;;		Nothing
  4883 ;; This function is called by:
  4884 ;;		_WDT_Main
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           
  4889                           ;psect for function _WDT_Clearing
  4890  0002                     _WDT_Clearing:	
  4891                           
  4892                           ;incstack = 0
  4893                           ; Regs used in _WDT_Clearing: []
  4894  0002  0064               	clrwdt	;# 
  4895  0003  0008               	return
  4896  0004                     __end_of_WDT_Clearing:	
  4897                           
  4898                           	psect	text8
  4899  1CB5                     __ptext8:	
  4900 ;; *************** function _Temp_Main *****************
  4901 ;; Defined at:
  4902 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;		None
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;		None
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;Total ram usage:        0 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    6
  4923 ;; This function calls:
  4924 ;;		_setTemp_Main
  4925 ;; This function is called by:
  4926 ;;		_main
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _Temp_Main
  4932  1CB5                     _Temp_Main:	
  4933                           
  4934                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4935                           
  4936                           ;incstack = 0
  4937                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4938  1CB5  3186  26B7         	fcall	_setTemp_Main
  4939  1CB7  0008               	return
  4940  1CB8                     __end_of_Temp_Main:	
  4941                           
  4942                           	psect	text9
  4943  06B7                     __ptext9:	
  4944 ;; *************** function _setTemp_Main *****************
  4945 ;; Defined at:
  4946 ;;		line 56 in file "../src/OverTemperature_B1.c"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;  error           1   64[BANK0 ] unsigned char 
  4951 ;; Return value:  Size  Location     Type
  4952 ;;		None               void
  4953 ;; Registers used:
  4954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4964 ;;Total ram usage:        3 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:    5
  4967 ;; This function calls:
  4968 ;;		_getMain_All_Error_Status
  4969 ;;		_setBuz
  4970 ;;		_setProductData
  4971 ;; This function is called by:
  4972 ;;		_Temp_Main
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           
  4977                           ;psect for function _setTemp_Main
  4978  06B7                     _setTemp_Main:	
  4979                           
  4980                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  4981                           
  4982                           ;incstack = 0
  4983                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4984  06B7  3000               	movlw	0
  4985  06B8  3193  23AF  3186   	fcall	_getMain_All_Error_Status
  4986  06BB  0020               	movlb	0	; select bank0
  4987  06BC  00DE               	movwf	??_setTemp_Main
  4988  06BD  085E               	movf	??_setTemp_Main,w
  4989  06BE  00E0               	movwf	setTemp_Main@error
  4990                           
  4991                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4992  06BF  0021               	movlb	1	; select bank1
  4993  06C0  1C4F               	btfss	_Temp^(0+128),0
  4994  06C1  2F63               	goto	l1969
  4995                           
  4996                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  4997  06C2  194F               	btfsc	_Temp^(0+128),2
  4998  06C3  2ED3               	goto	l9464
  4999                           
  5000                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5001  06C4  3001               	movlw	1
  5002  06C5  07D0               	addwf	(_Temp^(0+128)+1),f
  5003  06C6  3000               	movlw	0
  5004  06C7  3DD1               	addwfc	((_Temp+1)^(0+128)+1),f
  5005                           
  5006                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5007  06C8  3000               	movlw	0
  5008  06C9  0251               	subwf	((_Temp+1)^(0+128)+1),w
  5009  06CA  30FA               	movlw	250
  5010  06CB  1903               	skipnz
  5011  06CC  0250               	subwf	(_Temp^(0+128)+1),w
  5012  06CD  1C03               	skipc
  5013  06CE  0008               	return
  5014                           
  5015                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5016  06CF  01D0               	clrf	(_Temp^(0+128)+1)
  5017  06D0  01D1               	clrf	((_Temp+1)^(0+128)+1)
  5018                           
  5019                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5020  06D1  154F               	bsf	_Temp^(0+128),2
  5021                           
  5022                           ;OverTemperature_B1.c: 70: }
  5023                           ;OverTemperature_B1.c: 71: } else {
  5024  06D2  0008               	return
  5025  06D3                     l9464:	
  5026                           
  5027                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5028  06D3  3001               	movlw	1
  5029  06D4  07D0               	addwf	(_Temp^(0+128)+1),f
  5030  06D5  3000               	movlw	0
  5031  06D6  3DD1               	addwfc	((_Temp+1)^(0+128)+1),f
  5032                           
  5033                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5034  06D7  3000               	movlw	0
  5035  06D8  0251               	subwf	((_Temp+1)^(0+128)+1),w
  5036  06D9  3002               	movlw	2
  5037  06DA  1903               	skipnz
  5038  06DB  0250               	subwf	(_Temp^(0+128)+1),w
  5039  06DC  1C03               	skipc
  5040  06DD  0008               	return
  5041                           
  5042                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5043  06DE  01D0               	clrf	(_Temp^(0+128)+1)
  5044  06DF  01D1               	clrf	((_Temp+1)^(0+128)+1)
  5045                           
  5046                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5047  06E0  3008               	movlw	8
  5048  06E1  3ECF               	addlw	_Temp& (0+255)
  5049  06E2  0086               	movwf	6
  5050  06E3  0187               	clrf	7
  5051  06E4  0016               	moviw fsr1++
  5052  06E5  0401               	iorwf	1,w
  5053  06E6  1903               	skipnz
  5054  06E7  2F5D               	goto	l1974
  5055  06E8  300A               	movlw	10
  5056  06E9  3ECF               	addlw	_Temp& (0+255)
  5057  06EA  0086               	movwf	6
  5058  06EB  0187               	clrf	7
  5059  06EC  0016               	moviw fsr1++
  5060  06ED  0401               	iorwf	1,w
  5061  06EE  1903               	skipnz
  5062  06EF  2F5D               	goto	l1974
  5063                           
  5064                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5065  06F0  114F               	bcf	_Temp^(0+128),2
  5066                           
  5067                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5068  06F1  300A               	movlw	10
  5069  06F2  3ECF               	addlw	_Temp& (0+255)
  5070  06F3  0086               	movwf	6
  5071  06F4  0187               	clrf	7
  5072  06F5  3008               	movlw	8
  5073  06F6  3ECF               	addlw	_Temp& (0+255)
  5074  06F7  0084               	movwf	4
  5075  06F8  0185               	clrf	5
  5076  06F9  3F40               	moviw [0]fsr1
  5077  06FA  0700               	addwf	0,w
  5078  06FB  0020               	movlb	0	; select bank0
  5079  06FC  00DE               	movwf	??_setTemp_Main
  5080  06FD  3101               	addfsr 0,1
  5081  06FE  3F41               	moviw [1]fsr1
  5082  06FF  3D00               	addwfc	0,w
  5083  0700  00DF               	movwf	??_setTemp_Main+1
  5084  0701  36DF               	lsrf	??_setTemp_Main+1,f
  5085  0702  0CDE               	rrf	??_setTemp_Main,f
  5086  0703  085E               	movf	??_setTemp_Main,w
  5087  0704  0021               	movlb	1	; select bank1
  5088  0705  00D5               	movwf	(_Temp^(0+128)+6)
  5089  0706  0020               	movlb	0	; select bank0
  5090  0707  085F               	movf	??_setTemp_Main+1,w
  5091  0708  0021               	movlb	1	; select bank1
  5092  0709  00D6               	movwf	((_Temp+1)^(0+128)+6)
  5093                           
  5094                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5095  070A  30C7               	movlw	199
  5096  070B  00DD               	movwf	(_Temp^(0+128)+14)
  5097  070C  3001               	movlw	1
  5098  070D  00DE               	movwf	(_Temp^(0+128)+15)
  5099                           
  5100                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5101  070E  309F               	movlw	159
  5102  070F  00DF               	movwf	(_Temp^(0+128)+16)
  5103  0710  3001               	movlw	1
  5104  0711  00E0               	movwf	(_Temp^(0+128)+17)
  5105                           
  5106                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5107  0712  1CCF               	btfss	_Temp^(0+128),1
  5108  0713  2F34               	goto	l9496
  5109                           
  5110                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5111  0714  085E               	movf	((_Temp+1)^(0+128)+14),w
  5112  0715  0256               	subwf	((_Temp+1)^(0+128)+6),w
  5113  0716  1D03               	skipz
  5114  0717  2F1A               	goto	u10755
  5115  0718  085D               	movf	(_Temp^(0+128)+14),w
  5116  0719  0255               	subwf	(_Temp^(0+128)+6),w
  5117  071A                     u10755:	
  5118  071A  1C03               	skipc
  5119  071B  2F32               	goto	l9494
  5120                           
  5121                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5122  071C  3001               	movlw	1
  5123  071D  0020               	movlb	0	; select bank0
  5124  071E  00DE               	movwf	??_setTemp_Main
  5125  071F  085E               	movf	??_setTemp_Main,w
  5126  0720  0021               	movlb	1	; select bank1
  5127  0721  07D2               	addwf	(_Temp^(0+128)+3),f
  5128                           
  5129                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5130  0722  3003               	movlw	3
  5131  0723  0252               	subwf	(_Temp^(0+128)+3),w
  5132  0724  1C03               	skipc
  5133  0725  2F4A               	goto	l9508
  5134                           
  5135                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5136  0726  01D2               	clrf	(_Temp^(0+128)+3)
  5137                           
  5138                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5139  0727  10CF               	bcf	_Temp^(0+128),1
  5140                           
  5141                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5142  0728  3064               	movlw	100
  5143  0729  0020               	movlb	0	; select bank0
  5144  072A  00A4               	movwf	setBuz@time
  5145  072B  3000               	movlw	0
  5146  072C  00A5               	movwf	setBuz@time+1
  5147  072D  3002               	movlw	2
  5148  072E  3197  2759  3186   	fcall	_setBuz
  5149                           
  5150                           ;OverTemperature_B1.c: 103: }
  5151                           ;OverTemperature_B1.c: 104: } else {
  5152  0731  2F4A               	goto	l9508
  5153  0732                     l9494:	
  5154                           
  5155                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5156  0732  0021               	movlb	1	; select bank1
  5157  0733  2F49               	goto	l9506
  5158  0734                     l9496:	
  5159                           ;OverTemperature_B1.c: 106: }
  5160                           ;OverTemperature_B1.c: 107: } else {
  5161                           
  5162                           
  5163                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5164  0734  0856               	movf	((_Temp+1)^(0+128)+6),w
  5165  0735  0260               	subwf	((_Temp+1)^(0+128)+16),w
  5166  0736  1D03               	skipz
  5167  0737  2F3A               	goto	u10775
  5168  0738  0855               	movf	(_Temp^(0+128)+6),w
  5169  0739  025F               	subwf	(_Temp^(0+128)+16),w
  5170  073A                     u10775:	
  5171  073A  1C03               	skipc
  5172  073B  2F49               	goto	l9506
  5173                           
  5174                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5175  073C  3001               	movlw	1
  5176  073D  0020               	movlb	0	; select bank0
  5177  073E  00DE               	movwf	??_setTemp_Main
  5178  073F  085E               	movf	??_setTemp_Main,w
  5179  0740  0021               	movlb	1	; select bank1
  5180  0741  07D2               	addwf	(_Temp^(0+128)+3),f
  5181                           
  5182                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5183  0742  3003               	movlw	3
  5184  0743  0252               	subwf	(_Temp^(0+128)+3),w
  5185  0744  1C03               	skipc
  5186  0745  2F4A               	goto	l9508
  5187                           
  5188                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5189  0746  01D2               	clrf	(_Temp^(0+128)+3)
  5190                           
  5191                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5192  0747  14CF               	bsf	_Temp^(0+128),1
  5193                           
  5194                           ;OverTemperature_B1.c: 113: }
  5195                           ;OverTemperature_B1.c: 114: } else {
  5196  0748  2F4A               	goto	l9508
  5197  0749                     l9506:	
  5198                           
  5199                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5200  0749  01D2               	clrf	(_Temp^(0+128)+3)
  5201  074A                     l9508:	
  5202                           
  5203                           ;OverTemperature_B1.c: 116: }
  5204                           ;OverTemperature_B1.c: 117: }
  5205                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5206  074A  0021               	movlb	1	; select bank1
  5207  074B  0856               	movf	((_Temp+1)^(0+128)+6),w
  5208  074C  0020               	movlb	0	; select bank0
  5209  074D  00DE               	movwf	??_setTemp_Main
  5210  074E  085E               	movf	??_setTemp_Main,w
  5211  074F  00DA               	movwf	setProductData@value
  5212  0750  3018               	movlw	24
  5213  0751  319D  25AF  3186   	fcall	_setProductData
  5214                           
  5215                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5216  0754  0021               	movlb	1	; select bank1
  5217  0755  0855               	movf	(_Temp^(0+128)+6),w
  5218  0756  0020               	movlb	0	; select bank0
  5219  0757  00DE               	movwf	??_setTemp_Main
  5220  0758  085E               	movf	??_setTemp_Main,w
  5221  0759  00DA               	movwf	setProductData@value
  5222  075A  3019               	movlw	25
  5223  075B  319D  25AF         	fcall	_setProductData
  5224  075D                     l1974:	
  5225                           
  5226                           ;OverTemperature_B1.c: 135: }
  5227                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5228  075D  0021               	movlb	1	; select bank1
  5229  075E  01D7               	clrf	(_Temp^(0+128)+8)
  5230  075F  01D8               	clrf	((_Temp+1)^(0+128)+8)
  5231                           
  5232                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5233  0760  01D9               	clrf	(_Temp^(0+128)+10)
  5234  0761  01DA               	clrf	((_Temp+1)^(0+128)+10)
  5235                           
  5236                           ;OverTemperature_B1.c: 138: }
  5237                           ;OverTemperature_B1.c: 139: }
  5238                           ;OverTemperature_B1.c: 141: } else {
  5239  0762  0008               	return
  5240  0763                     l1969:	
  5241                           
  5242                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5243  0763  0022               	movlb	2	; select bank2
  5244  0764  1C20               	btfss	_myMain^(0+256),0
  5245  0765  0008               	return
  5246                           
  5247                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5248  0766  0021               	movlb	1	; select bank1
  5249  0767  144F               	bsf	_Temp^(0+128),0
  5250  0768  0008               	return
  5251  0769                     __end_of_setTemp_Main:	
  5252                           
  5253                           	psect	text10
  5254  1CB2                     __ptext10:	
  5255 ;; *************** function _Temp_Initialization *****************
  5256 ;; Defined at:
  5257 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5258 ;; Parameters:    Size  Location     Type
  5259 ;;		None
  5260 ;; Auto vars:     Size  Location     Type
  5261 ;;		None
  5262 ;; Return value:  Size  Location     Type
  5263 ;;		None               void
  5264 ;; Registers used:
  5265 ;;		status,2, status,0, pclath, cstack
  5266 ;; Tracked objects:
  5267 ;;		On entry : 0/0
  5268 ;;		On exit  : 0/0
  5269 ;;		Unchanged: 0/0
  5270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5275 ;;Total ram usage:        0 bytes
  5276 ;; Hardware stack levels used:    1
  5277 ;; Hardware stack levels required when called:    4
  5278 ;; This function calls:
  5279 ;;		_setTemp_Initialization
  5280 ;; This function is called by:
  5281 ;;		_main
  5282 ;; This function uses a non-reentrant model
  5283 ;;
  5284                           
  5285                           
  5286                           ;psect for function _Temp_Initialization
  5287  1CB2                     _Temp_Initialization:	
  5288                           
  5289                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5290                           
  5291                           ;incstack = 0
  5292                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5293  1CB2  319C  24A5         	fcall	_setTemp_Initialization
  5294  1CB4  0008               	return
  5295  1CB5                     __end_of_Temp_Initialization:	
  5296                           
  5297                           	psect	text11
  5298  1CA5                     __ptext11:	
  5299 ;; *************** function _setTemp_Initialization *****************
  5300 ;; Defined at:
  5301 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5302 ;; Parameters:    Size  Location     Type
  5303 ;;		None
  5304 ;; Auto vars:     Size  Location     Type
  5305 ;;		None
  5306 ;; Return value:  Size  Location     Type
  5307 ;;		None               void
  5308 ;; Registers used:
  5309 ;;		None
  5310 ;; Tracked objects:
  5311 ;;		On entry : 0/0
  5312 ;;		On exit  : 0/0
  5313 ;;		Unchanged: 0/0
  5314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5319 ;;Total ram usage:        0 bytes
  5320 ;; Hardware stack levels used:    1
  5321 ;; Hardware stack levels required when called:    3
  5322 ;; This function calls:
  5323 ;;		Nothing
  5324 ;; This function is called by:
  5325 ;;		_Temp_Initialization
  5326 ;; This function uses a non-reentrant model
  5327 ;;
  5328                           
  5329                           
  5330                           ;psect for function _setTemp_Initialization
  5331  1CA5                     _setTemp_Initialization:	
  5332                           
  5333                           ;incstack = 0
  5334                           ; Regs used in _setTemp_Initialization: []
  5335  1CA5  0008               	return
  5336  1CA6                     __end_of_setTemp_Initialization:	
  5337                           
  5338                           	psect	text12
  5339  1D4F                     __ptext12:	
  5340 ;; *************** function _Switch_Main *****************
  5341 ;; Defined at:
  5342 ;;		line 72 in file "../src/Switch_B1.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;		None
  5345 ;; Auto vars:     Size  Location     Type
  5346 ;;		None
  5347 ;; Return value:  Size  Location     Type
  5348 ;;		None               void
  5349 ;; Registers used:
  5350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;Total ram usage:        0 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    8
  5363 ;; This function calls:
  5364 ;;		_TouchPower
  5365 ;;		_setSw_Main
  5366 ;; This function is called by:
  5367 ;;		_main
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _Switch_Main
  5373  1D4F                     _Switch_Main:	
  5374                           
  5375                           ;Switch_B1.c: 75: setSw_Main(1);
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5379  1D4F  3001               	movlw	1
  5380  1D50  3181  21ED  319D   	fcall	_setSw_Main
  5381                           
  5382                           ;Switch_B1.c: 79: setSw_Main(2);
  5383  1D53  3002               	movlw	2
  5384  1D54  3181  21ED  319D   	fcall	_setSw_Main
  5385                           
  5386                           ;Switch_B1.c: 87: TouchPower();
  5387  1D57  319F  278F         	fcall	_TouchPower
  5388  1D59  0008               	return
  5389  1D5A                     __end_of_Switch_Main:	
  5390                           
  5391                           	psect	text13
  5392  01ED                     __ptext13:	
  5393 ;; *************** function _setSw_Main *****************
  5394 ;; Defined at:
  5395 ;;		line 121 in file "../src/Switch_B1.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;  sw              1    wreg     unsigned char 
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;  sw              1   69[BANK0 ] unsigned char 
  5400 ;; Return value:  Size  Location     Type
  5401 ;;		None               void
  5402 ;; Registers used:
  5403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;Total ram usage:        3 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; Hardware stack levels required when called:    7
  5416 ;; This function calls:
  5417 ;;		_SwPointSelect
  5418 ;;		_getMain_All_Error_Status
  5419 ;;		_getSw_KeyStatus
  5420 ;;		_setBuz
  5421 ;;		_setDimmerLights_DimmingOn
  5422 ;;		_setDimmerLights_SwOff
  5423 ;;		_setDimmerLights_SwOn
  5424 ;;		_setRF_Learn
  5425 ;; This function is called by:
  5426 ;;		_Switch_Main
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function _setSw_Main
  5432  01ED                     _setSw_Main:	
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5436                           ;setSw_Main@sw stored from wreg
  5437  01ED  0020               	movlb	0	; select bank0
  5438  01EE  00E5               	movwf	setSw_Main@sw
  5439                           
  5440                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5441  01EF  0865               	movf	setSw_Main@sw,w
  5442  01F0  319F  27A4  3181   	fcall	_SwPointSelect
  5443                           
  5444                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5445  01F3  0020               	movlb	0	; select bank0
  5446  01F4  086C               	movf	_Sw,w
  5447  01F5  0086               	movwf	6
  5448  01F6  3001               	movlw	1	; select bank2/3
  5449  01F7  0087               	movwf	7
  5450  01F8  1C01               	btfss	1,0
  5451  01F9  2B54               	goto	l2717
  5452                           
  5453                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5454  01FA  3000               	movlw	0
  5455  01FB  3193  23AF  3181   	fcall	_getMain_All_Error_Status
  5456  01FE  3800               	iorlw	0
  5457  01FF  1D03               	skipz
  5458  0200  2A1C               	goto	l9604
  5459                           
  5460                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5461  0201  0020               	movlb	0	; select bank0
  5462  0202  0A6C               	incf	_Sw,w
  5463  0203  0086               	movwf	6
  5464  0204  3001               	movlw	1	; select bank2/3
  5465  0205  0087               	movwf	7
  5466  0206  1081               	bcf	1,1
  5467                           
  5468                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5469  0207  0865               	movf	setSw_Main@sw,w
  5470  0208  3191  2184  3181   	fcall	_getSw_KeyStatus
  5471  020B  3A01               	xorlw	1
  5472  020C  3000               	movlw	0
  5473  020D  1903               	skipnz
  5474  020E  3001               	movlw	1
  5475  020F  0020               	movlb	0	; select bank0
  5476  0210  00E3               	movwf	??_setSw_Main
  5477  0211  086C               	movf	_Sw,w
  5478  0212  0086               	movwf	6
  5479  0213  3001               	movlw	1	; select bank2/3
  5480  0214  0087               	movwf	7
  5481  0215  0DE3               	rlf	??_setSw_Main,f
  5482  0216  0801               	movf	1,w
  5483  0217  0663               	xorwf	??_setSw_Main,w
  5484  0218  39FD               	andlw	-3
  5485  0219  0663               	xorwf	??_setSw_Main,w
  5486  021A  0081               	movwf	1
  5487                           
  5488                           ;Switch_B1.c: 128: } else {
  5489  021B  2A32               	goto	l2719
  5490  021C                     l9604:	
  5491                           
  5492                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5493  021C  0020               	movlb	0	; select bank0
  5494  021D  0A6C               	incf	_Sw,w
  5495  021E  0086               	movwf	6
  5496  021F  3001               	movlw	1	; select bank2/3
  5497  0220  0087               	movwf	7
  5498  0221  1881               	btfsc	1,1
  5499  0222  2A32               	goto	l2719
  5500                           
  5501                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5502  0223  0A6C               	incf	_Sw,w
  5503  0224  0086               	movwf	6
  5504  0225  3001               	movlw	1	; select bank2/3
  5505  0226  0087               	movwf	7
  5506  0227  1481               	bsf	1,1
  5507                           
  5508                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5509  0228  086C               	movf	_Sw,w
  5510  0229  0086               	movwf	6
  5511  022A  3001               	movlw	1	; select bank2/3
  5512  022B  0087               	movwf	7
  5513  022C  1081               	bcf	1,1
  5514                           
  5515                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5516  022D  086C               	movf	_Sw,w
  5517  022E  0086               	movwf	6
  5518  022F  3001               	movlw	1	; select bank2/3
  5519  0230  0087               	movwf	7
  5520  0231  1501               	bsf	1,2
  5521  0232                     l2719:	
  5522                           
  5523                           ;Switch_B1.c: 134: }
  5524                           ;Switch_B1.c: 135: }
  5525                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5526  0232  086C               	movf	_Sw,w
  5527  0233  0086               	movwf	6
  5528  0234  3001               	movlw	1	; select bank2/3
  5529  0235  0087               	movwf	7
  5530  0236  1C81               	btfss	1,1
  5531  0237  2B01               	goto	l9654
  5532                           
  5533                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5534  0238  086C               	movf	_Sw,w
  5535  0239  0086               	movwf	6
  5536  023A  3001               	movlw	1	; select bank2/3
  5537  023B  0087               	movwf	7
  5538  023C  1901               	btfsc	1,2
  5539  023D  2A5F               	goto	l9620
  5540                           
  5541                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5542  023E  3001               	movlw	1
  5543  023F  00E3               	movwf	??_setSw_Main
  5544  0240  086C               	movf	_Sw,w
  5545  0241  3E02               	addlw	2
  5546  0242  0086               	movwf	6
  5547  0243  3001               	movlw	1	; select bank2/3
  5548  0244  0087               	movwf	7
  5549  0245  0863               	movf	??_setSw_Main,w
  5550  0246  0781               	addwf	1,f
  5551                           
  5552                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5553  0247  086C               	movf	_Sw,w
  5554  0248  3E02               	addlw	2
  5555  0249  0086               	movwf	6
  5556  024A  3001               	movlw	1	; select bank2/3
  5557  024B  0087               	movwf	7
  5558  024C  3003               	movlw	3
  5559  024D  0201               	subwf	1,w
  5560  024E  1C03               	skipc
  5561  024F  0008               	return
  5562                           
  5563                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5564  0250  086C               	movf	_Sw,w
  5565  0251  3E02               	addlw	2
  5566  0252  0086               	movwf	6
  5567  0253  3001               	movlw	1	; select bank2/3
  5568  0254  0087               	movwf	7
  5569  0255  0181               	clrf	1
  5570                           
  5571                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5572  0256  086C               	movf	_Sw,w
  5573  0257  0086               	movwf	6
  5574  0258  3001               	movlw	1	; select bank2/3
  5575  0259  0087               	movwf	7
  5576  025A  1501               	bsf	1,2
  5577                           
  5578                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5579  025B  0865               	movf	setSw_Main@sw,w
  5580  025C  3189  2190         	fcall	_setDimmerLights_SwOn
  5581                           
  5582                           ;Switch_B1.c: 148: }
  5583                           ;Switch_B1.c: 149: } else {
  5584  025E  0008               	return
  5585  025F                     l9620:	
  5586                           
  5587                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5588  025F  0020               	movlb	0	; select bank0
  5589  0260  086C               	movf	_Sw,w
  5590  0261  0086               	movwf	6
  5591  0262  3001               	movlw	1	; select bank2/3
  5592  0263  0087               	movwf	7
  5593  0264  1981               	btfsc	1,3
  5594  0265  2A91               	goto	l9630
  5595                           
  5596                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5597  0266  086C               	movf	_Sw,w
  5598  0267  3E03               	addlw	3
  5599  0268  0086               	movwf	6
  5600  0269  3001               	movlw	1	; select bank2/3
  5601  026A  0087               	movwf	7
  5602  026B  3001               	movlw	1
  5603  026C  0781               	addwf	1,f
  5604  026D  3141               	addfsr 1,1
  5605  026E  1803               	skipnc
  5606  026F  0A81               	incf	1,f
  5607                           
  5608                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5609  0270  086C               	movf	_Sw,w
  5610  0271  3E03               	addlw	3
  5611  0272  0086               	movwf	6
  5612  0273  3001               	movlw	1	; select bank2/3
  5613  0274  0087               	movwf	7
  5614  0275  3F40               	moviw [0]fsr1
  5615  0276  00E3               	movwf	??_setSw_Main
  5616  0277  3F41               	moviw [1]fsr1
  5617  0278  00E4               	movwf	??_setSw_Main+1
  5618  0279  3000               	movlw	0
  5619  027A  0264               	subwf	??_setSw_Main+1,w
  5620  027B  304B               	movlw	75
  5621  027C  1903               	skipnz
  5622  027D  0263               	subwf	??_setSw_Main,w
  5623  027E  1C03               	skipc
  5624  027F  0008               	return
  5625                           
  5626                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5627  0280  086C               	movf	_Sw,w
  5628  0281  3E03               	addlw	3
  5629  0282  0086               	movwf	6
  5630  0283  3001               	movlw	1	; select bank2/3
  5631  0284  0087               	movwf	7
  5632  0285  3000               	movlw	0
  5633  0286  3FC0               	movwi [0]fsr1
  5634  0287  3FC1               	movwi [1]fsr1
  5635                           
  5636                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5637  0288  086C               	movf	_Sw,w
  5638  0289  0086               	movwf	6
  5639  028A  3001               	movlw	1	; select bank2/3
  5640  028B  0087               	movwf	7
  5641  028C  1581               	bsf	1,3
  5642                           
  5643                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5644  028D  0865               	movf	setSw_Main@sw,w
  5645  028E  3192  22B8         	fcall	_setDimmerLights_DimmingOn
  5646                           
  5647                           ;Switch_B1.c: 160: }
  5648                           ;Switch_B1.c: 161: } else {
  5649  0290  0008               	return
  5650  0291                     l9630:	
  5651                           
  5652                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5653  0291  0020               	movlb	0	; select bank0
  5654  0292  086C               	movf	_Sw,w
  5655  0293  0086               	movwf	6
  5656  0294  3001               	movlw	1	; select bank2/3
  5657  0295  0087               	movwf	7
  5658  0296  1A01               	btfsc	1,4
  5659  0297  2ACF               	goto	l9644
  5660                           
  5661                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5662  0298  086C               	movf	_Sw,w
  5663  0299  3E05               	addlw	5
  5664  029A  0086               	movwf	6
  5665  029B  3001               	movlw	1	; select bank2/3
  5666  029C  0087               	movwf	7
  5667  029D  3001               	movlw	1
  5668  029E  0781               	addwf	1,f
  5669  029F  3141               	addfsr 1,1
  5670  02A0  1803               	skipnc
  5671  02A1  0A81               	incf	1,f
  5672                           
  5673                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5674  02A2  086C               	movf	_Sw,w
  5675  02A3  3E05               	addlw	5
  5676  02A4  0086               	movwf	6
  5677  02A5  3001               	movlw	1	; select bank2/3
  5678  02A6  0087               	movwf	7
  5679  02A7  3F40               	moviw [0]fsr1
  5680  02A8  00E3               	movwf	??_setSw_Main
  5681  02A9  3F41               	moviw [1]fsr1
  5682  02AA  00E4               	movwf	??_setSw_Main+1
  5683  02AB  3000               	movlw	0
  5684  02AC  0264               	subwf	??_setSw_Main+1,w
  5685  02AD  304B               	movlw	75
  5686  02AE  1903               	skipnz
  5687  02AF  0263               	subwf	??_setSw_Main,w
  5688  02B0  1C03               	skipc
  5689  02B1  0008               	return
  5690                           
  5691                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5692  02B2  086C               	movf	_Sw,w
  5693  02B3  3E05               	addlw	5
  5694  02B4  0086               	movwf	6
  5695  02B5  3001               	movlw	1	; select bank2/3
  5696  02B6  0087               	movwf	7
  5697  02B7  3000               	movlw	0
  5698  02B8  3FC0               	movwi [0]fsr1
  5699  02B9  3FC1               	movwi [1]fsr1
  5700                           
  5701                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5702  02BA  086C               	movf	_Sw,w
  5703  02BB  0086               	movwf	6
  5704  02BC  3001               	movlw	1	; select bank2/3
  5705  02BD  0087               	movwf	7
  5706  02BE  1601               	bsf	1,4
  5707                           
  5708                           ;Switch_B1.c: 169: setRF_Learn(1);
  5709  02BF  3001               	movlw	1
  5710  02C0  319E  26C9  3181   	fcall	_setRF_Learn
  5711                           
  5712                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5713  02C3  0022               	movlb	2	; select bank2
  5714  02C4  1EA0               	btfss	_myMain^(0+256),5
  5715  02C5  0008               	return
  5716                           
  5717                           ;Switch_B1.c: 171: setBuz(2, 100);
  5718  02C6  3064               	movlw	100
  5719  02C7  0020               	movlb	0	; select bank0
  5720  02C8  00A4               	movwf	setBuz@time
  5721  02C9  3000               	movlw	0
  5722  02CA  00A5               	movwf	setBuz@time+1
  5723  02CB  3002               	movlw	2
  5724  02CC  3197  2759         	fcall	_setBuz
  5725                           
  5726                           ;Switch_B1.c: 172: }
  5727                           ;Switch_B1.c: 176: }
  5728                           ;Switch_B1.c: 177: } else {
  5729  02CE  0008               	return
  5730  02CF                     l9644:	
  5731                           
  5732                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5733  02CF  0020               	movlb	0	; select bank0
  5734  02D0  086C               	movf	_Sw,w
  5735  02D1  0086               	movwf	6
  5736  02D2  3001               	movlw	1	; select bank2/3
  5737  02D3  0087               	movwf	7
  5738  02D4  1A81               	btfsc	1,5
  5739  02D5  0008               	return
  5740                           
  5741                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5742  02D6  086C               	movf	_Sw,w
  5743  02D7  3E07               	addlw	7
  5744  02D8  0086               	movwf	6
  5745  02D9  3001               	movlw	1	; select bank2/3
  5746  02DA  0087               	movwf	7
  5747  02DB  3001               	movlw	1
  5748  02DC  0781               	addwf	1,f
  5749  02DD  3141               	addfsr 1,1
  5750  02DE  1803               	skipnc
  5751  02DF  0A81               	incf	1,f
  5752                           
  5753                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5754  02E0  086C               	movf	_Sw,w
  5755  02E1  3E07               	addlw	7
  5756  02E2  0086               	movwf	6
  5757  02E3  3001               	movlw	1	; select bank2/3
  5758  02E4  0087               	movwf	7
  5759  02E5  3F40               	moviw [0]fsr1
  5760  02E6  00E3               	movwf	??_setSw_Main
  5761  02E7  3F41               	moviw [1]fsr1
  5762  02E8  00E4               	movwf	??_setSw_Main+1
  5763  02E9  3000               	movlw	0
  5764  02EA  0264               	subwf	??_setSw_Main+1,w
  5765  02EB  3096               	movlw	150
  5766  02EC  1903               	skipnz
  5767  02ED  0263               	subwf	??_setSw_Main,w
  5768  02EE  1C03               	skipc
  5769  02EF  0008               	return
  5770                           
  5771                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5772  02F0  086C               	movf	_Sw,w
  5773  02F1  3E07               	addlw	7
  5774  02F2  0086               	movwf	6
  5775  02F3  3001               	movlw	1	; select bank2/3
  5776  02F4  0087               	movwf	7
  5777  02F5  3000               	movlw	0
  5778  02F6  3FC0               	movwi [0]fsr1
  5779  02F7  3FC1               	movwi [1]fsr1
  5780                           
  5781                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5782  02F8  086C               	movf	_Sw,w
  5783  02F9  0086               	movwf	6
  5784  02FA  3001               	movlw	1	; select bank2/3
  5785  02FB  0087               	movwf	7
  5786  02FC  1681               	bsf	1,5
  5787                           
  5788                           ;Switch_B1.c: 185: setRF_Learn(0);
  5789  02FD  3000               	movlw	0
  5790  02FE  319E  26C9         	fcall	_setRF_Learn
  5791                           
  5792                           ;Switch_B1.c: 188: }
  5793                           ;Switch_B1.c: 189: }
  5794                           ;Switch_B1.c: 190: }
  5795                           ;Switch_B1.c: 191: }
  5796                           ;Switch_B1.c: 192: }
  5797                           ;Switch_B1.c: 193: } else {
  5798  0300  0008               	return
  5799  0301                     l9654:	
  5800                           
  5801                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5802  0301  0020               	movlb	0	; select bank0
  5803  0302  086C               	movf	_Sw,w
  5804  0303  0086               	movwf	6
  5805  0304  3001               	movlw	1	; select bank2/3
  5806  0305  0087               	movwf	7
  5807  0306  1D01               	btfss	1,2
  5808  0307  0008               	return
  5809                           
  5810                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5811  0308  3001               	movlw	1
  5812  0309  00E3               	movwf	??_setSw_Main
  5813  030A  086C               	movf	_Sw,w
  5814  030B  3E02               	addlw	2
  5815  030C  0086               	movwf	6
  5816  030D  3001               	movlw	1	; select bank2/3
  5817  030E  0087               	movwf	7
  5818  030F  0863               	movf	??_setSw_Main,w
  5819  0310  0781               	addwf	1,f
  5820                           
  5821                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5822  0311  086C               	movf	_Sw,w
  5823  0312  3E02               	addlw	2
  5824  0313  0086               	movwf	6
  5825  0314  3001               	movlw	1	; select bank2/3
  5826  0315  0087               	movwf	7
  5827  0316  3003               	movlw	3
  5828  0317  0201               	subwf	1,w
  5829  0318  1C03               	skipc
  5830  0319  0008               	return
  5831                           
  5832                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5833  031A  086C               	movf	_Sw,w
  5834  031B  3E02               	addlw	2
  5835  031C  0086               	movwf	6
  5836  031D  3001               	movlw	1	; select bank2/3
  5837  031E  0087               	movwf	7
  5838  031F  0181               	clrf	1
  5839                           
  5840                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5841  0320  086C               	movf	_Sw,w
  5842  0321  0086               	movwf	6
  5843  0322  3001               	movlw	1	; select bank2/3
  5844  0323  0087               	movwf	7
  5845  0324  1101               	bcf	1,2
  5846                           
  5847                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5848  0325  086C               	movf	_Sw,w
  5849  0326  3E03               	addlw	3
  5850  0327  0086               	movwf	6
  5851  0328  3001               	movlw	1	; select bank2/3
  5852  0329  0087               	movwf	7
  5853  032A  3000               	movlw	0
  5854  032B  3FC0               	movwi [0]fsr1
  5855  032C  3FC1               	movwi [1]fsr1
  5856                           
  5857                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5858  032D  086C               	movf	_Sw,w
  5859  032E  0086               	movwf	6
  5860  032F  3001               	movlw	1	; select bank2/3
  5861  0330  0087               	movwf	7
  5862  0331  1181               	bcf	1,3
  5863                           
  5864                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5865  0332  086C               	movf	_Sw,w
  5866  0333  3E05               	addlw	5
  5867  0334  0086               	movwf	6
  5868  0335  3001               	movlw	1	; select bank2/3
  5869  0336  0087               	movwf	7
  5870  0337  3000               	movlw	0
  5871  0338  3FC0               	movwi [0]fsr1
  5872  0339  3FC1               	movwi [1]fsr1
  5873                           
  5874                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5875  033A  086C               	movf	_Sw,w
  5876  033B  0086               	movwf	6
  5877  033C  3001               	movlw	1	; select bank2/3
  5878  033D  0087               	movwf	7
  5879  033E  1201               	bcf	1,4
  5880                           
  5881                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5882  033F  086C               	movf	_Sw,w
  5883  0340  3E07               	addlw	7
  5884  0341  0086               	movwf	6
  5885  0342  3001               	movlw	1	; select bank2/3
  5886  0343  0087               	movwf	7
  5887  0344  3000               	movlw	0
  5888  0345  3FC0               	movwi [0]fsr1
  5889  0346  3FC1               	movwi [1]fsr1
  5890                           
  5891                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5892  0347  086C               	movf	_Sw,w
  5893  0348  0086               	movwf	6
  5894  0349  3001               	movlw	1	; select bank2/3
  5895  034A  0087               	movwf	7
  5896  034B  1281               	bcf	1,5
  5897                           
  5898                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5899  034C  0865               	movf	setSw_Main@sw,w
  5900  034D  3196  2626  3181   	fcall	_setDimmerLights_SwOff
  5901                           
  5902                           ;Switch_B1.c: 210: setRF_Learn(0);
  5903  0350  3000               	movlw	0
  5904  0351  319E  26C9         	fcall	_setRF_Learn
  5905                           
  5906                           ;Switch_B1.c: 212: }
  5907                           ;Switch_B1.c: 213: }
  5908                           ;Switch_B1.c: 214: }
  5909                           ;Switch_B1.c: 215: } else {
  5910  0353  0008               	return
  5911  0354                     l2717:	
  5912                           
  5913                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5914  0354  0022               	movlb	2	; select bank2
  5915  0355  1C20               	btfss	_myMain^(0+256),0
  5916  0356  0008               	return
  5917                           
  5918                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5919  0357  0020               	movlb	0	; select bank0
  5920  0358  086C               	movf	_Sw,w
  5921  0359  0086               	movwf	6
  5922  035A  3001               	movlw	1	; select bank2/3
  5923  035B  0087               	movwf	7
  5924  035C  1401               	bsf	1,0
  5925  035D  0008               	return
  5926  035E                     __end_of_setSw_Main:	
  5927                           
  5928                           	psect	text14
  5929  1EC9                     __ptext14:	
  5930 ;; *************** function _setRF_Learn *****************
  5931 ;; Defined at:
  5932 ;;		line 33 in file "../src/RF_Control_B1.c"
  5933 ;; Parameters:    Size  Location     Type
  5934 ;;  command         1    wreg     unsigned char 
  5935 ;; Auto vars:     Size  Location     Type
  5936 ;;  command         1    3[COMMON] unsigned char 
  5937 ;; Return value:  Size  Location     Type
  5938 ;;		None               void
  5939 ;; Registers used:
  5940 ;;		wreg, status,2, status,0
  5941 ;; Tracked objects:
  5942 ;;		On entry : 0/0
  5943 ;;		On exit  : 0/0
  5944 ;;		Unchanged: 0/0
  5945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5949 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5950 ;;Total ram usage:        2 bytes
  5951 ;; Hardware stack levels used:    1
  5952 ;; Hardware stack levels required when called:    3
  5953 ;; This function calls:
  5954 ;;		Nothing
  5955 ;; This function is called by:
  5956 ;;		_setSw_Main
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959                           
  5960                           
  5961                           ;psect for function _setRF_Learn
  5962  1EC9                     _setRF_Learn:	
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5966                           ;setRF_Learn@command stored from wreg
  5967  1EC9  00F3               	movwf	setRF_Learn@command
  5968                           
  5969                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  5970  1ECA  0873               	movf	setRF_Learn@command,w
  5971  1ECB  3A01               	xorlw	1
  5972  1ECC  3000               	movlw	0
  5973  1ECD  1903               	skipnz
  5974  1ECE  3001               	movlw	1
  5975  1ECF  00F2               	movwf	??_setRF_Learn
  5976  1ED0  0EF2               	swapf	??_setRF_Learn,f
  5977  1ED1  0DF2               	rlf	??_setRF_Learn,f
  5978  1ED2  0DF2               	rlf	??_setRF_Learn,f
  5979  1ED3  0021               	movlb	1	; select bank1
  5980  1ED4  0820               	movf	_RF1^(0+128),w
  5981  1ED5  0672               	xorwf	??_setRF_Learn,w
  5982  1ED6  39BF               	andlw	-65
  5983  1ED7  0672               	xorwf	??_setRF_Learn,w
  5984  1ED8  00A0               	movwf	_RF1^(0+128)
  5985  1ED9  0008               	return
  5986  1EDA                     __end_of_setRF_Learn:	
  5987                           
  5988                           	psect	text15
  5989  12B8                     __ptext15:	
  5990 ;; *************** function _setDimmerLights_DimmingOn *****************
  5991 ;; Defined at:
  5992 ;;		line 752 in file "../src/Dimmer_B1.c"
  5993 ;; Parameters:    Size  Location     Type
  5994 ;;  sw              1    wreg     unsigned char 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;  sw              1    4[COMMON] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;		None               void
  5999 ;; Registers used:
  6000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6009 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6010 ;;Total ram usage:        1 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    4
  6013 ;; This function calls:
  6014 ;;		_DimmerLights_SelectPointer
  6015 ;; This function is called by:
  6016 ;;		_setSw_Main
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           
  6021                           ;psect for function _setDimmerLights_DimmingOn
  6022  12B8                     _setDimmerLights_DimmingOn:	
  6023                           
  6024                           ;incstack = 0
  6025                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6026                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6027  12B8  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6028                           
  6029                           ;Dimmer_B1.c: 758: DimmerLights_SelectPointer(sw);
  6030  12B9  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6031  12BA  319F  27E7  3192   	fcall	_DimmerLights_SelectPointer
  6032                           
  6033                           ;Dimmer_B1.c: 759: if (DimmerLights->Trigger == 0) {
  6034  12BD  0020               	movlb	0	; select bank0
  6035  12BE  086B               	movf	_DimmerLights,w
  6036  12BF  0086               	movwf	6
  6037  12C0  3001               	movlw	1	; select bank2/3
  6038  12C1  0087               	movwf	7
  6039  12C2  1881               	btfsc	1,1
  6040  12C3  0008               	return
  6041                           
  6042                           ;Dimmer_B1.c: 760: if (DimmerLights->SwFlag == 1) {
  6043  12C4  086B               	movf	_DimmerLights,w
  6044  12C5  0086               	movwf	6
  6045  12C6  3001               	movlw	1	; select bank2/3
  6046  12C7  0087               	movwf	7
  6047  12C8  1C01               	btfss	1,0
  6048  12C9  0008               	return
  6049                           
  6050                           ;Dimmer_B1.c: 761: DimmerLights->Status = 1;
  6051  12CA  0A6B               	incf	_DimmerLights,w
  6052  12CB  0086               	movwf	6
  6053  12CC  3001               	movlw	1	; select bank2/3
  6054  12CD  0087               	movwf	7
  6055  12CE  1401               	bsf	1,0
  6056                           
  6057                           ;Dimmer_B1.c: 763: DimmerLights->DimmingSwFlag = 1;
  6058  12CF  086B               	movf	_DimmerLights,w
  6059  12D0  0086               	movwf	6
  6060  12D1  3001               	movlw	1	; select bank2/3
  6061  12D2  0087               	movwf	7
  6062  12D3  1581               	bsf	1,3
  6063                           
  6064                           ;Dimmer_B1.c: 764: DimmerLights->DimmingTrigger = 1;
  6065  12D4  086B               	movf	_DimmerLights,w
  6066  12D5  0086               	movwf	6
  6067  12D6  3001               	movlw	1	; select bank2/3
  6068  12D7  0087               	movwf	7
  6069  12D8  1601               	bsf	1,4
  6070                           
  6071                           ;Dimmer_B1.c: 765: DimmerLights->DimmingSwitch = 1;
  6072  12D9  086B               	movf	_DimmerLights,w
  6073  12DA  0086               	movwf	6
  6074  12DB  3001               	movlw	1	; select bank2/3
  6075  12DC  0087               	movwf	7
  6076  12DD  1681               	bsf	1,5
  6077  12DE  0008               	return
  6078  12DF                     __end_of_setDimmerLights_DimmingOn:	
  6079                           
  6080                           	psect	text16
  6081  1184                     __ptext16:	
  6082 ;; *************** function _getSw_KeyStatus *****************
  6083 ;; Defined at:
  6084 ;;		line 223 in file "../src/Switch_B1.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;  sw              1    wreg     unsigned char 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  sw              1    6[COMMON] unsigned char 
  6089 ;;  status          1    5[COMMON] unsigned char 
  6090 ;; Return value:  Size  Location     Type
  6091 ;;                  1    wreg      unsigned char 
  6092 ;; Registers used:
  6093 ;;		wreg, status,2
  6094 ;; Tracked objects:
  6095 ;;		On entry : 0/0
  6096 ;;		On exit  : 0/0
  6097 ;;		Unchanged: 0/0
  6098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;Total ram usage:        5 bytes
  6104 ;; Hardware stack levels used:    1
  6105 ;; Hardware stack levels required when called:    3
  6106 ;; This function calls:
  6107 ;;		Nothing
  6108 ;; This function is called by:
  6109 ;;		_setSw_Main
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           
  6114                           ;psect for function _getSw_KeyStatus
  6115  1184                     _getSw_KeyStatus:	
  6116                           
  6117                           ;incstack = 0
  6118                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6119                           ;getSw_KeyStatus@sw stored from wreg
  6120  1184  00F6               	movwf	getSw_KeyStatus@sw
  6121                           
  6122                           ;Switch_B1.c: 224: char status = 0;
  6123  1185  01F5               	clrf	getSw_KeyStatus@status
  6124                           
  6125                           ;Switch_B1.c: 236: if (sw == 1) {
  6126  1186  0876               	movf	getSw_KeyStatus@sw,w
  6127  1187  3A01               	xorlw	1
  6128  1188  1D03               	skipz
  6129  1189  2993               	goto	l7342
  6130                           
  6131                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6132  118A  01F3               	clrf	_getSw_KeyStatus$5935
  6133  118B  0AF3               	incf	_getSw_KeyStatus$5935,f
  6134  118C  0020               	movlb	0	; select bank0
  6135  118D  1F0C               	btfss	12,6	;volatile
  6136  118E  1A0C               	btfsc	12,4	;volatile
  6137  118F  2991               	goto	l7340
  6138  1190  01F3               	clrf	_getSw_KeyStatus$5935
  6139  1191                     l7340:	
  6140  1191  0873               	movf	_getSw_KeyStatus$5935,w
  6141  1192  299F               	goto	L2
  6142  1193                     l7342:	
  6143                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6144                           
  6145  1193  0876               	movf	getSw_KeyStatus@sw,w
  6146  1194  3A02               	xorlw	2
  6147  1195  1D03               	skipz
  6148  1196  29A2               	goto	l7352
  6149                           
  6150                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6151  1197  01F4               	clrf	_getSw_KeyStatus$5936
  6152  1198  0AF4               	incf	_getSw_KeyStatus$5936,f
  6153  1199  0020               	movlb	0	; select bank0
  6154  119A  1C0C               	btfss	12,0	;volatile
  6155  119B  188D               	btfsc	13,1	;volatile
  6156  119C  299E               	goto	l7350
  6157  119D  01F4               	clrf	_getSw_KeyStatus$5936
  6158  119E                     l7350:	
  6159  119E  0874               	movf	_getSw_KeyStatus$5936,w
  6160  119F                     L2:	
  6161  119F  00F2               	movwf	??_getSw_KeyStatus
  6162  11A0  0872               	movf	??_getSw_KeyStatus,w
  6163  11A1  00F5               	movwf	getSw_KeyStatus@status
  6164  11A2                     l7352:	
  6165                           
  6166                           ;Switch_B1.c: 240: }
  6167                           ;Switch_B1.c: 247: return status;
  6168  11A2  0875               	movf	getSw_KeyStatus@status,w
  6169  11A3  0008               	return
  6170  11A4                     __end_of_getSw_KeyStatus:	
  6171                           
  6172                           	psect	text17
  6173  1FA4                     __ptext17:	
  6174 ;; *************** function _SwPointSelect *****************
  6175 ;; Defined at:
  6176 ;;		line 25 in file "../src/Switch_B1.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  sw              1    wreg     unsigned char 
  6179 ;; Auto vars:     Size  Location     Type
  6180 ;;  sw              1    3[COMMON] unsigned char 
  6181 ;; Return value:  Size  Location     Type
  6182 ;;		None               void
  6183 ;; Registers used:
  6184 ;;		wreg
  6185 ;; Tracked objects:
  6186 ;;		On entry : 0/0
  6187 ;;		On exit  : 0/0
  6188 ;;		Unchanged: 0/0
  6189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6191 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;Total ram usage:        2 bytes
  6195 ;; Hardware stack levels used:    1
  6196 ;; Hardware stack levels required when called:    3
  6197 ;; This function calls:
  6198 ;;		Nothing
  6199 ;; This function is called by:
  6200 ;;		_setSw_Main
  6201 ;; This function uses a non-reentrant model
  6202 ;;
  6203                           
  6204                           
  6205                           ;psect for function _SwPointSelect
  6206  1FA4                     _SwPointSelect:	
  6207                           
  6208                           ;incstack = 0
  6209                           ; Regs used in _SwPointSelect: [wreg]
  6210                           ;SwPointSelect@sw stored from wreg
  6211  1FA4  00F3               	movwf	SwPointSelect@sw
  6212                           
  6213                           ;Switch_B1.c: 28: if (sw == 1) {
  6214  1FA5  0873               	movf	SwPointSelect@sw,w
  6215  1FA6  3A01               	xorlw	1
  6216  1FA7  1D03               	skipz
  6217  1FA8  2FAF               	goto	l7326
  6218                           
  6219                           ;Switch_B1.c: 29: Sw = &Sw1;
  6220  1FA9  30BE               	movlw	_Sw1& (0+255)
  6221  1FAA  00F2               	movwf	??_SwPointSelect
  6222  1FAB  0872               	movf	??_SwPointSelect,w
  6223  1FAC  0020               	movlb	0	; select bank0
  6224  1FAD  00EC               	movwf	_Sw
  6225                           
  6226                           ;Switch_B1.c: 30: }
  6227  1FAE  0008               	return
  6228  1FAF                     l7326:	
  6229                           
  6230                           ;Switch_B1.c: 33: else if (sw == 2) {
  6231  1FAF  0873               	movf	SwPointSelect@sw,w
  6232  1FB0  3A02               	xorlw	2
  6233  1FB1  1D03               	skipz
  6234  1FB2  0008               	return
  6235                           
  6236                           ;Switch_B1.c: 34: Sw = &Sw2;
  6237  1FB3  30C7               	movlw	_Sw2& (0+255)
  6238  1FB4  00F2               	movwf	??_SwPointSelect
  6239  1FB5  0872               	movf	??_SwPointSelect,w
  6240  1FB6  0020               	movlb	0	; select bank0
  6241  1FB7  00EC               	movwf	_Sw
  6242  1FB8  0008               	return
  6243  1FB9                     __end_of_SwPointSelect:	
  6244                           
  6245                           	psect	text18
  6246  1DA2                     __ptext18:	
  6247 ;; *************** function _Switch_Initialization *****************
  6248 ;; Defined at:
  6249 ;;		line 46 in file "../src/Switch_B1.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;		None               void
  6256 ;; Registers used:
  6257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;Total ram usage:        0 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    6
  6270 ;; This function calls:
  6271 ;;		_TouchPower
  6272 ;;		_setSw_Initialization
  6273 ;; This function is called by:
  6274 ;;		_main
  6275 ;; This function uses a non-reentrant model
  6276 ;;
  6277                           
  6278                           
  6279                           ;psect for function _Switch_Initialization
  6280  1DA2                     _Switch_Initialization:	
  6281                           
  6282                           ;Switch_B1.c: 47: TouchPower();
  6283                           
  6284                           ;incstack = 0
  6285                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6286  1DA2  319F  278F  319D   	fcall	_TouchPower
  6287                           
  6288                           ;Switch_B1.c: 49: WPUB1 = 0;
  6289  1DA5  0024               	movlb	4	; select bank4
  6290  1DA6  108D               	bcf	13,1	;volatile
  6291                           
  6292                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6293  1DA7  3001               	movlw	1
  6294  1DA8  319C  24F2  319D   	fcall	_setSw_Initialization
  6295                           
  6296                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6297  1DAB  3002               	movlw	2
  6298  1DAC  319C  24F2         	fcall	_setSw_Initialization
  6299  1DAE  0008               	return
  6300  1DAF                     __end_of_Switch_Initialization:	
  6301                           
  6302                           	psect	text19
  6303  1CF2                     __ptext19:	
  6304 ;; *************** function _setSw_Initialization *****************
  6305 ;; Defined at:
  6306 ;;		line 93 in file "../src/Switch_B1.c"
  6307 ;; Parameters:    Size  Location     Type
  6308 ;;  sw              1    wreg     unsigned char 
  6309 ;; Auto vars:     Size  Location     Type
  6310 ;;  sw              1    6[COMMON] unsigned char 
  6311 ;; Return value:  Size  Location     Type
  6312 ;;		None               void
  6313 ;; Registers used:
  6314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6315 ;; Tracked objects:
  6316 ;;		On entry : 0/0
  6317 ;;		On exit  : 0/0
  6318 ;;		Unchanged: 0/0
  6319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;Total ram usage:        1 bytes
  6325 ;; Hardware stack levels used:    1
  6326 ;; Hardware stack levels required when called:    5
  6327 ;; This function calls:
  6328 ;;		_setLED
  6329 ;; This function is called by:
  6330 ;;		_Switch_Initialization
  6331 ;; This function uses a non-reentrant model
  6332 ;;
  6333                           
  6334                           
  6335                           ;psect for function _setSw_Initialization
  6336  1CF2                     _setSw_Initialization:	
  6337                           
  6338                           ;incstack = 0
  6339                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6340                           ;setSw_Initialization@sw stored from wreg
  6341  1CF2  00F6               	movwf	setSw_Initialization@sw
  6342                           
  6343                           ;Switch_B1.c: 94: setLED(sw, 1);
  6344  1CF3  01F4               	clrf	setLED@command
  6345  1CF4  0AF4               	incf	setLED@command,f
  6346  1CF5  0876               	movf	setSw_Initialization@sw,w
  6347  1CF6  318A  2245         	fcall	_setLED
  6348  1CF8  0008               	return
  6349  1CF9                     __end_of_setSw_Initialization:	
  6350                           
  6351                           	psect	text20
  6352  1F8F                     __ptext20:	
  6353 ;; *************** function _TouchPower *****************
  6354 ;; Defined at:
  6355 ;;		line 10 in file "../src/Switch_B1.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;		None               void
  6362 ;; Registers used:
  6363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    4
  6376 ;; This function calls:
  6377 ;;		_Timeout_Counter
  6378 ;;		_set_TimeoutCleared
  6379 ;; This function is called by:
  6380 ;;		_Switch_Initialization
  6381 ;;		_Switch_Main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _TouchPower
  6387  1F8F                     _TouchPower:	
  6388                           
  6389                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6393  1F8F  0022               	movlb	2	; select bank2
  6394  1F90  1C20               	btfss	_myMain^(0+256),0
  6395  1F91  0008               	return
  6396                           
  6397                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6398  1F92  0020               	movlb	0	; select bank0
  6399  1F93  1A8E               	btfsc	14,5	;volatile
  6400  1F94  0008               	return
  6401  1F95  2F9B               	goto	l9588
  6402  1F96                     l2695:	
  6403                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6404                           
  6405                           
  6406                           ;Switch_B1.c: 14: RC5 = 1;
  6407  1F96  0020               	movlb	0	; select bank0
  6408  1F97  168E               	bsf	14,5	;volatile
  6409                           
  6410                           ;Switch_B1.c: 15: Timeout_Counter();
  6411  1F98  319F  27B9  319F   	fcall	_Timeout_Counter
  6412  1F9B                     l9588:	
  6413  1F9B  0020               	movlb	0	; select bank0
  6414  1F9C  1A8E               	btfsc	14,5	;volatile
  6415  1F9D  2FA1               	goto	l9592
  6416  1F9E  0022               	movlb	2	; select bank2
  6417  1F9F  1D2B               	btfss	(_myMain^(0+256)+11),2
  6418  1FA0  2F96               	goto	l2695
  6419  1FA1                     l9592:	
  6420                           
  6421                           ;Switch_B1.c: 16: }
  6422                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6423  1FA1  319C  24D1         	fcall	_set_TimeoutCleared
  6424  1FA3  0008               	return
  6425  1FA4                     __end_of_TouchPower:	
  6426                           
  6427                           	psect	text21
  6428  1CD1                     __ptext21:	
  6429 ;; *************** function _set_TimeoutCleared *****************
  6430 ;; Defined at:
  6431 ;;		line 282 in file "../src/Main_B1.c"
  6432 ;; Parameters:    Size  Location     Type
  6433 ;;		None
  6434 ;; Auto vars:     Size  Location     Type
  6435 ;;		None
  6436 ;; Return value:  Size  Location     Type
  6437 ;;		None               void
  6438 ;; Registers used:
  6439 ;;		status,2
  6440 ;; Tracked objects:
  6441 ;;		On entry : 0/0
  6442 ;;		On exit  : 0/0
  6443 ;;		Unchanged: 0/0
  6444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;Total ram usage:        0 bytes
  6450 ;; Hardware stack levels used:    1
  6451 ;; Hardware stack levels required when called:    3
  6452 ;; This function calls:
  6453 ;;		Nothing
  6454 ;; This function is called by:
  6455 ;;		_getAD
  6456 ;;		_TouchPower
  6457 ;; This function uses a non-reentrant model
  6458 ;;
  6459                           
  6460                           
  6461                           ;psect for function _set_TimeoutCleared
  6462  1CD1                     _set_TimeoutCleared:	
  6463                           
  6464                           ;Main_B1.c: 283: myMain.Timeout = 0;
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in _set_TimeoutCleared: [status,2]
  6468  1CD1  0022               	movlb	2	; select bank2
  6469  1CD2  112B               	bcf	(_myMain^(0+256)+11),2
  6470                           
  6471                           ;Main_B1.c: 284: myMain.Timeout_Counter = 0;
  6472  1CD3  01AC               	clrf	(_myMain^(0+256)+12)
  6473  1CD4  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6474  1CD5  0008               	return
  6475  1CD6                     __end_of_set_TimeoutCleared:	
  6476                           
  6477                           	psect	text22
  6478  1FB9                     __ptext22:	
  6479 ;; *************** function _Timeout_Counter *****************
  6480 ;; Defined at:
  6481 ;;		line 273 in file "../src/Main_B1.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;		None               void
  6488 ;; Registers used:
  6489 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_getAD
  6506 ;;		_TouchPower
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _Timeout_Counter
  6512  1FB9                     _Timeout_Counter:	
  6513                           
  6514                           ;Main_B1.c: 274: myMain.Timeout_Counter++;
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6518  1FB9  3001               	movlw	1
  6519  1FBA  0022               	movlb	2	; select bank2
  6520  1FBB  07AC               	addwf	(_myMain^(0+256)+12),f
  6521  1FBC  3000               	movlw	0
  6522  1FBD  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6523                           
  6524                           ;Main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6525  1FBE  300C               	movlw	12
  6526  1FBF  3E20               	addlw	_myMain& (0+255)
  6527  1FC0  0086               	movwf	6
  6528  1FC1  3001               	movlw	1	; select bank2/3
  6529  1FC2  0087               	movwf	7
  6530  1FC3  3F40               	moviw [0]fsr1
  6531  1FC4  3AA8               	xorlw	168
  6532  1FC5  1D03               	skipz
  6533  1FC6  2FC9               	goto	u10375
  6534  1FC7  3F41               	moviw [1]fsr1
  6535  1FC8  3A61               	xorlw	97
  6536  1FC9                     u10375:	
  6537  1FC9  1D03               	skipz
  6538  1FCA  0008               	return
  6539                           
  6540                           ;Main_B1.c: 276: myMain.Timeout_Counter = 0;
  6541  1FCB  01AC               	clrf	(_myMain^(0+256)+12)
  6542  1FCC  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6543                           
  6544                           ;Main_B1.c: 277: myMain.Timeout = 1;
  6545  1FCD  152B               	bsf	(_myMain^(0+256)+11),2
  6546  1FCE  0008               	return
  6547  1FCF                     __end_of_Timeout_Counter:	
  6548                           
  6549                           	psect	text23
  6550  1CAF                     __ptext23:	
  6551 ;; *************** function _RF_Main *****************
  6552 ;; Defined at:
  6553 ;;		line 26 in file "../src/RF_Control_B1.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;		None
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;		None               void
  6560 ;; Registers used:
  6561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6571 ;;Total ram usage:        0 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:   11
  6574 ;; This function calls:
  6575 ;;		_setRF_Main
  6576 ;; This function is called by:
  6577 ;;		_main
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function _RF_Main
  6583  1CAF                     _RF_Main:	
  6584                           
  6585                           ;RF_Control_B1.c: 28: setRF_Main();
  6586                           
  6587                           ;incstack = 0
  6588                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6589  1CAF  3187  2769         	fcall	_setRF_Main
  6590  1CB1  0008               	return
  6591  1CB2                     __end_of_RF_Main:	
  6592                           
  6593                           	psect	text24
  6594  0769                     __ptext24:	
  6595 ;; *************** function _setRF_Main *****************
  6596 ;; Defined at:
  6597 ;;		line 53 in file "../src/RF_Control_B1.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;  error           1   73[BANK0 ] unsigned char 
  6602 ;; Return value:  Size  Location     Type
  6603 ;;		None               void
  6604 ;; Registers used:
  6605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 0/0
  6608 ;;		On exit  : 0/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;Total ram usage:        2 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:   10
  6618 ;; This function calls:
  6619 ;;		_CC2500_PowerOnInitial
  6620 ;;		_CC2500_RxData
  6621 ;;		_CC2500_TxData
  6622 ;;		_CC2500_WriteCommand
  6623 ;;		_RF_RxDisable
  6624 ;;		___lwdiv
  6625 ;;		_getBuz_GO
  6626 ;;		_getRF_KeyStatus
  6627 ;;		_getRxData
  6628 ;; This function is called by:
  6629 ;;		_RF_Main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           
  6634                           ;psect for function _setRF_Main
  6635  0769                     _setRF_Main:	
  6636                           
  6637                           ;RF_Control_B1.c: 54: char error = 0;
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6641  0769  0020               	movlb	0	; select bank0
  6642  076A  01E9               	clrf	setRF_Main@error
  6643                           
  6644                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6645  076B  0021               	movlb	1	; select bank1
  6646  076C  1C20               	btfss	_RF1^(0+128),0
  6647  076D  2FF4               	goto	l2313
  6648                           
  6649                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6650  076E  319E  2667  3187   	fcall	_getBuz_GO
  6651  0771  0873               	movf	?_getBuz_GO+1,w
  6652  0772  0472               	iorwf	?_getBuz_GO,w
  6653  0773  1D03               	skipz
  6654  0774  2FD5               	goto	l9558
  6655                           
  6656                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6657  0775  319E  26B8  3187   	fcall	_getRF_KeyStatus
  6658  0778  3A01               	xorlw	1
  6659  0779  3000               	movlw	0
  6660  077A  1903               	skipnz
  6661  077B  3001               	movlw	1
  6662  077C  0020               	movlb	0	; select bank0
  6663  077D  00E8               	movwf	??_setRF_Main
  6664  077E  0CE8               	rrf	??_setRF_Main,f
  6665  077F  0CE8               	rrf	??_setRF_Main,f
  6666  0780  0021               	movlb	1	; select bank1
  6667  0781  0820               	movf	_RF1^(0+128),w
  6668  0782  0020               	movlb	0	; select bank0
  6669  0783  0668               	xorwf	??_setRF_Main,w
  6670  0784  397F               	andlw	-129
  6671  0785  0668               	xorwf	??_setRF_Main,w
  6672  0786  0021               	movlb	1	; select bank1
  6673  0787  00A0               	movwf	_RF1^(0+128)
  6674                           
  6675                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6676  0788  1FA0               	btfss	_RF1^(0+128),7
  6677  0789  2F8C               	goto	l2317
  6678  078A  1F20               	btfss	_RF1^(0+128),6
  6679  078B  2FD5               	goto	l9558
  6680  078C                     l2317:	
  6681                           
  6682                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6683  078C  1D20               	btfss	_RF1^(0+128),2
  6684  078D  2F9C               	goto	l2318
  6685                           
  6686                           ;RF_Control_B1.c: 67: RF1.TransceiveGO = 0;
  6687  078E  1120               	bcf	_RF1^(0+128),2
  6688                           
  6689                           ;RF_Control_B1.c: 68: if (RF1.Learn == 0) {
  6690  078F  1B20               	btfsc	_RF1^(0+128),6
  6691  0790  2FD5               	goto	l9558
  6692                           
  6693                           ;RF_Control_B1.c: 69: RF1.Count = 0;
  6694  0791  01A2               	clrf	(_RF1^(0+128)+2)
  6695  0792  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6696                           
  6697                           ;RF_Control_B1.c: 70: RF1.CorrectionCounter = 0;
  6698  0793  01AA               	clrf	(_RF1^(0+128)+10)
  6699  0794  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6700                           
  6701                           ;RF_Control_B1.c: 71: RF_RxDisable();
  6702  0795  319D  25F9  3187   	fcall	_RF_RxDisable
  6703                           
  6704                           ;RF_Control_B1.c: 72: CC2500_TxData();
  6705  0798  318C  2492  3187   	fcall	_CC2500_TxData
  6706                           
  6707                           ;RF_Control_B1.c: 74: }
  6708                           ;RF_Control_B1.c: 75: } else {
  6709  079B  2FD5               	goto	l9558
  6710  079C                     l2318:	
  6711                           
  6712                           ;RF_Control_B1.c: 76: if (RF1.RxStatus == 1) {
  6713  079C  1DA0               	btfss	_RF1^(0+128),3
  6714  079D  2FAB               	goto	l9544
  6715                           
  6716                           ;RF_Control_B1.c: 78: CC2500_RxData();
  6717  079E  318B  2304  3187   	fcall	_CC2500_RxData
  6718                           
  6719                           ;RF_Control_B1.c: 80: if (RF1.ReceiveGO == 1) {
  6720  07A1  0021               	movlb	1	; select bank1
  6721  07A2  1CA0               	btfss	_RF1^(0+128),1
  6722  07A3  2FD5               	goto	l9558
  6723                           
  6724                           ;RF_Control_B1.c: 81: RF1.ReceiveGO = 0;
  6725  07A4  10A0               	bcf	_RF1^(0+128),1
  6726                           
  6727                           ;RF_Control_B1.c: 82: RF1.CorrectionCounter = 0;
  6728  07A5  01AA               	clrf	(_RF1^(0+128)+10)
  6729  07A6  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6730                           
  6731                           ;RF_Control_B1.c: 90: getRxData();
  6732  07A7  318C  24FA  3187   	fcall	_getRxData
  6733                           
  6734                           ;RF_Control_B1.c: 93: }
  6735                           ;RF_Control_B1.c: 94: } else {
  6736  07AA  2FD5               	goto	l9558
  6737  07AB                     l9544:	
  6738                           
  6739                           ;RF_Control_B1.c: 95: RF1.Count++;
  6740  07AB  3001               	movlw	1
  6741  07AC  0021               	movlb	1	; select bank1
  6742  07AD  07A2               	addwf	(_RF1^(0+128)+2),f
  6743  07AE  3000               	movlw	0
  6744  07AF  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6745                           
  6746                           ;RF_Control_B1.c: 96: if (RF1.Count == (RF1.RunTime / 20)) {
  6747  07B0  3014               	movlw	20
  6748  07B1  00F2               	movwf	___lwdiv@divisor
  6749  07B2  3000               	movlw	0
  6750  07B3  00F3               	movwf	___lwdiv@divisor+1
  6751  07B4  0828               	movf	((_RF1+1)^(0+128)+7),w
  6752  07B5  01F5               	clrf	___lwdiv@dividend+1
  6753  07B6  07F5               	addwf	___lwdiv@dividend+1,f
  6754  07B7  0827               	movf	(_RF1^(0+128)+7),w
  6755  07B8  01F4               	clrf	___lwdiv@dividend
  6756  07B9  07F4               	addwf	___lwdiv@dividend,f
  6757  07BA  3194  2475  3187   	fcall	___lwdiv
  6758  07BD  0021               	movlb	1	; select bank1
  6759  07BE  0823               	movf	((_RF1+1)^(0+128)+2),w
  6760  07BF  0673               	xorwf	?___lwdiv+1,w
  6761  07C0  1D03               	skipz
  6762  07C1  2FC4               	goto	u10885
  6763  07C2  0822               	movf	(_RF1^(0+128)+2),w
  6764  07C3  0672               	xorwf	?___lwdiv,w
  6765  07C4                     u10885:	
  6766  07C4  1D03               	skipz
  6767  07C5  2FD5               	goto	l9558
  6768                           
  6769                           ;RF_Control_B1.c: 97: RF1.Count = 0;
  6770  07C6  01A2               	clrf	(_RF1^(0+128)+2)
  6771  07C7  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6772                           
  6773                           ;RF_Control_B1.c: 99: RF1.RxStatus = 1;
  6774  07C8  15A0               	bsf	_RF1^(0+128),3
  6775                           
  6776                           ;RF_Control_B1.c: 100: CC2500_WriteCommand(0x36);
  6777  07C9  3036               	movlw	54
  6778  07CA  3190  2086  3187   	fcall	_CC2500_WriteCommand
  6779                           
  6780                           ;RF_Control_B1.c: 101: CC2500_WriteCommand(0x3A);
  6781  07CD  303A               	movlw	58
  6782  07CE  3190  2086  3187   	fcall	_CC2500_WriteCommand
  6783                           
  6784                           ;RF_Control_B1.c: 102: CC2500_WriteCommand(0x34);
  6785  07D1  3034               	movlw	52
  6786  07D2  3190  2086  3187   	fcall	_CC2500_WriteCommand
  6787  07D5                     l9558:	
  6788                           
  6789                           ;RF_Control_B1.c: 104: }
  6790                           ;RF_Control_B1.c: 106: }
  6791                           ;RF_Control_B1.c: 107: }
  6792                           ;RF_Control_B1.c: 108: }
  6793                           ;RF_Control_B1.c: 109: }
  6794                           ;RF_Control_B1.c: 111: RF1.CorrectionCounter++;
  6795  07D5  3001               	movlw	1
  6796  07D6  0021               	movlb	1	; select bank1
  6797  07D7  07AA               	addwf	(_RF1^(0+128)+10),f
  6798  07D8  3000               	movlw	0
  6799  07D9  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6800                           
  6801                           ;RF_Control_B1.c: 112: if (RF1.CorrectionCounter > (60000 / 20)) {
  6802  07DA  300B               	movlw	11
  6803  07DB  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6804  07DC  30B9               	movlw	185
  6805  07DD  1903               	skipnz
  6806  07DE  022A               	subwf	(_RF1^(0+128)+10),w
  6807  07DF  1C03               	skipc
  6808  07E0  2FED               	goto	l9572
  6809                           
  6810                           ;RF_Control_B1.c: 113: RF1.CorrectionCounter = 0;
  6811  07E1  01AA               	clrf	(_RF1^(0+128)+10)
  6812  07E2  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6813                           
  6814                           ;RF_Control_B1.c: 115: RF1.RxStatus = 0;
  6815  07E3  11A0               	bcf	_RF1^(0+128),3
  6816                           
  6817                           ;RF_Control_B1.c: 116: RF1.ReceiveGO = 0;
  6818  07E4  10A0               	bcf	_RF1^(0+128),1
  6819                           
  6820                           ;RF_Control_B1.c: 117: CC2500_WriteCommand(0x36);
  6821  07E5  3036               	movlw	54
  6822  07E6  3190  2086  3187   	fcall	_CC2500_WriteCommand
  6823                           
  6824                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x3A);
  6825  07E9  303A               	movlw	58
  6826  07EA  3190  2086  3187   	fcall	_CC2500_WriteCommand
  6827  07ED                     l9572:	
  6828                           
  6829                           ;RF_Control_B1.c: 119: }
  6830                           ;RF_Control_B1.c: 121: if (RF1.Timeout == 1) {
  6831  07ED  0021               	movlb	1	; select bank1
  6832  07EE  1F21               	btfss	(_RF1^(0+128)+1),6
  6833  07EF  0008               	return
  6834                           
  6835                           ;RF_Control_B1.c: 122: RF1.Timeout = 0;
  6836  07F0  1321               	bcf	(_RF1^(0+128)+1),6
  6837                           
  6838                           ;RF_Control_B1.c: 123: CC2500_PowerOnInitial();
  6839  07F1  319F  277A         	fcall	_CC2500_PowerOnInitial
  6840                           
  6841                           ;RF_Control_B1.c: 124: }
  6842                           ;RF_Control_B1.c: 126: } else {
  6843  07F3  0008               	return
  6844  07F4                     l2313:	
  6845                           
  6846                           ;RF_Control_B1.c: 127: if (myMain.PowerON == 1) {
  6847  07F4  0022               	movlb	2	; select bank2
  6848  07F5  1C20               	btfss	_myMain^(0+256),0
  6849  07F6  0008               	return
  6850                           
  6851                           ;RF_Control_B1.c: 128: RF1.Enable = 1;
  6852  07F7  0021               	movlb	1	; select bank1
  6853  07F8  1420               	bsf	_RF1^(0+128),0
  6854  07F9  0008               	return
  6855  07FA                     __end_of_setRF_Main:	
  6856                           
  6857                           	psect	text25
  6858  0CFA                     __ptext25:	
  6859 ;; *************** function _getRxData *****************
  6860 ;; Defined at:
  6861 ;;		line 231 in file "../src/RF_Control_B1.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;  error           1   71[BANK0 ] unsigned char 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;		None               void
  6868 ;; Registers used:
  6869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6879 ;;Total ram usage:        2 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    9
  6882 ;; This function calls:
  6883 ;;		_getMain_All_Error_Status
  6884 ;;		_setControl_Lights_Table
  6885 ;;		_setLog_Code
  6886 ;;		_setTxData
  6887 ;; This function is called by:
  6888 ;;		_setRF_Main
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _getRxData
  6894  0CFA                     _getRxData:	
  6895                           
  6896                           ;RF_Control_B1.c: 232: char error = getMain_All_Error_Status(0);
  6897                           
  6898                           ;incstack = 0
  6899                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6900  0CFA  3000               	movlw	0
  6901  0CFB  3193  23AF  318C   	fcall	_getMain_All_Error_Status
  6902  0CFE  0020               	movlb	0	; select bank0
  6903  0CFF  00E6               	movwf	??_getRxData
  6904  0D00  0866               	movf	??_getRxData,w
  6905  0D01  00E7               	movwf	getRxData@error
  6906                           
  6907                           ;RF_Control_B1.c: 233: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  6908  0D02  0023               	movlb	3	; select bank3
  6909  0D03  0820               	movf	_RF_Data^(0+384),w
  6910  0D04  3AAA               	xorlw	170
  6911  0D05  1D03               	skipz
  6912  0D06  2D18               	goto	l9354
  6913  0D07  0821               	movf	(_RF_Data^(0+384)+1),w
  6914  0D08  3A01               	xorlw	1
  6915  0D09  1D03               	skipz
  6916  0D0A  2D18               	goto	l9354
  6917                           
  6918                           ;RF_Control_B1.c: 234: product->Data[2] = 0x55;
  6919  0D0B  3055               	movlw	85
  6920  0D0C  0020               	movlb	0	; select bank0
  6921  0D0D  00E6               	movwf	??_getRxData
  6922  0D0E  086D               	movf	_product,w
  6923  0D0F  3E02               	addlw	2
  6924  0D10  0086               	movwf	6
  6925  0D11  3002               	movlw	2	; select bank4/5
  6926  0D12  0087               	movwf	7
  6927  0D13  0866               	movf	??_getRxData,w
  6928  0D14  0081               	movwf	1
  6929                           
  6930                           ;RF_Control_B1.c: 235: setTxData();
  6931  0D15  3186  2603         	fcall	_setTxData
  6932                           
  6933                           ;RF_Control_B1.c: 240: } else {
  6934  0D17  0008               	return
  6935  0D18                     l9354:	
  6936                           
  6937                           ;RF_Control_B1.c: 241: if (error == 0) {
  6938  0D18  0020               	movlb	0	; select bank0
  6939  0D19  08E7               	movf	getRxData@error,f
  6940  0D1A  1D03               	skipz
  6941  0D1B  2D64               	goto	l2356
  6942                           
  6943                           ;RF_Control_B1.c: 242: if (RF1.Learn == 1) {
  6944  0D1C  0021               	movlb	1	; select bank1
  6945  0D1D  1F20               	btfss	_RF1^(0+128),6
  6946  0D1E  2D2A               	goto	l9364
  6947                           
  6948                           ;RF_Control_B1.c: 243: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6949  0D1F  0023               	movlb	3	; select bank3
  6950  0D20  08A0               	movf	_RF_Data^(0+384),f
  6951  0D21  1D03               	skipz
  6952  0D22  0008               	return
  6953  0D23  0821               	movf	(_RF_Data^(0+384)+1),w
  6954  0D24  3A64               	xorlw	100
  6955  0D25  1D03               	skipz
  6956  0D26  0008               	return
  6957                           
  6958                           ;RF_Control_B1.c: 244: setLog_Code();
  6959  0D27  3194  2441         	fcall	_setLog_Code
  6960                           
  6961                           ;RF_Control_B1.c: 245: }
  6962                           ;RF_Control_B1.c: 246: } else {
  6963  0D29  0008               	return
  6964  0D2A                     l9364:	
  6965                           
  6966                           ;RF_Control_B1.c: 247: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6967  0D2A  0023               	movlb	3	; select bank3
  6968  0D2B  08A0               	movf	_RF_Data^(0+384),f
  6969  0D2C  1D03               	skipz
  6970  0D2D  0008               	return
  6971  0D2E  0821               	movf	(_RF_Data^(0+384)+1),w
  6972  0D2F  3A02               	xorlw	2
  6973  0D30  1D03               	skipz
  6974  0D31  0008               	return
  6975                           
  6976                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6977  0D32  082C               	movf	(_RF_Data^(0+384)+12),w
  6978  0D33  3AFF               	xorlw	255
  6979  0D34  1D03               	skipz
  6980  0D35  2D40               	goto	l9376
  6981  0D36  082D               	movf	(_RF_Data^(0+384)+13),w
  6982  0D37  3AFF               	xorlw	255
  6983  0D38  1D03               	skipz
  6984  0D39  2D40               	goto	l9376
  6985  0D3A  082E               	movf	(_RF_Data^(0+384)+14),w
  6986  0D3B  3AFF               	xorlw	255
  6987  0D3C  1D03               	skipz
  6988  0D3D  2D40               	goto	l9376
  6989                           
  6990                           ;RF_Control_B1.c: 249: __nop();
  6991  0D3E  0000               	nop
  6992                           
  6993                           ;RF_Control_B1.c: 250: } else {
  6994  0D3F  0008               	return
  6995  0D40                     l9376:	
  6996                           
  6997                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6998  0D40  0020               	movlb	0	; select bank0
  6999  0D41  086D               	movf	_product,w
  7000  0D42  3E0C               	addlw	12
  7001  0D43  0086               	movwf	6
  7002  0D44  3002               	movlw	2	; select bank4/5
  7003  0D45  0087               	movwf	7
  7004  0D46  0023               	movlb	3	; select bank3
  7005  0D47  082C               	movf	(_RF_Data^(0+384)+12),w
  7006  0D48  0601               	xorwf	1,w
  7007  0D49  1D03               	skipz
  7008  0D4A  0008               	return
  7009  0D4B  0020               	movlb	0	; select bank0
  7010  0D4C  086D               	movf	_product,w
  7011  0D4D  3E0D               	addlw	13
  7012  0D4E  0086               	movwf	6
  7013  0D4F  3002               	movlw	2	; select bank4/5
  7014  0D50  0087               	movwf	7
  7015  0D51  0023               	movlb	3	; select bank3
  7016  0D52  082D               	movf	(_RF_Data^(0+384)+13),w
  7017  0D53  0601               	xorwf	1,w
  7018  0D54  1D03               	skipz
  7019  0D55  0008               	return
  7020  0D56  0020               	movlb	0	; select bank0
  7021  0D57  086D               	movf	_product,w
  7022  0D58  3E0E               	addlw	14
  7023  0D59  0086               	movwf	6
  7024  0D5A  3002               	movlw	2	; select bank4/5
  7025  0D5B  0087               	movwf	7
  7026  0D5C  0023               	movlb	3	; select bank3
  7027  0D5D  082E               	movf	(_RF_Data^(0+384)+14),w
  7028  0D5E  0601               	xorwf	1,w
  7029  0D5F  1D03               	skipz
  7030  0D60  0008               	return
  7031                           
  7032                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7033  0D61  318E  2652         	fcall	_setControl_Lights_Table
  7034                           
  7035                           ;RF_Control_B1.c: 253: }
  7036                           ;RF_Control_B1.c: 254: }
  7037                           ;RF_Control_B1.c: 255: }
  7038                           ;RF_Control_B1.c: 264: }
  7039                           ;RF_Control_B1.c: 265: } else {
  7040  0D63  0008               	return
  7041  0D64                     l2356:	
  7042                           
  7043                           ;RF_Control_B1.c: 266: __nop();
  7044  0D64  0000               	nop
  7045  0D65  0008               	return
  7046  0D66                     __end_of_getRxData:	
  7047                           
  7048                           	psect	text26
  7049  1441                     __ptext26:	
  7050 ;; *************** function _setLog_Code *****************
  7051 ;; Defined at:
  7052 ;;		line 272 in file "../src/RF_Control_B1.c"
  7053 ;; Parameters:    Size  Location     Type
  7054 ;;		None
  7055 ;; Auto vars:     Size  Location     Type
  7056 ;;		None
  7057 ;; Return value:  Size  Location     Type
  7058 ;;		None               void
  7059 ;; Registers used:
  7060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7061 ;; Tracked objects:
  7062 ;;		On entry : 0/0
  7063 ;;		On exit  : 0/0
  7064 ;;		Unchanged: 0/0
  7065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7069 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7070 ;;Total ram usage:        1 bytes
  7071 ;; Hardware stack levels used:    1
  7072 ;; Hardware stack levels required when called:    5
  7073 ;; This function calls:
  7074 ;;		_setBuz
  7075 ;;		_setMemory_LoopSave
  7076 ;;		_setMemory_Modify
  7077 ;;		_setProductData
  7078 ;; This function is called by:
  7079 ;;		_getRxData
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _setLog_Code
  7085  1441                     _setLog_Code:	
  7086                           
  7087                           ;RF_Control_B1.c: 273: RF1.Learn = 0;
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7091  1441  0021               	movlb	1	; select bank1
  7092  1442  1320               	bcf	_RF1^(0+128),6
  7093                           
  7094                           ;RF_Control_B1.c: 274: setProductData(12, RF_Data[12]);
  7095  1443  0023               	movlb	3	; select bank3
  7096  1444  082C               	movf	(_RF_Data^(0+384)+12),w
  7097  1445  0020               	movlb	0	; select bank0
  7098  1446  00DE               	movwf	??_setLog_Code
  7099  1447  085E               	movf	??_setLog_Code,w
  7100  1448  00DA               	movwf	setProductData@value
  7101  1449  300C               	movlw	12
  7102  144A  319D  25AF  3194   	fcall	_setProductData
  7103                           
  7104                           ;RF_Control_B1.c: 275: setProductData(13, RF_Data[13]);
  7105  144D  0023               	movlb	3	; select bank3
  7106  144E  082D               	movf	(_RF_Data^(0+384)+13),w
  7107  144F  0020               	movlb	0	; select bank0
  7108  1450  00DE               	movwf	??_setLog_Code
  7109  1451  085E               	movf	??_setLog_Code,w
  7110  1452  00DA               	movwf	setProductData@value
  7111  1453  300D               	movlw	13
  7112  1454  319D  25AF  3194   	fcall	_setProductData
  7113                           
  7114                           ;RF_Control_B1.c: 276: setProductData(14, RF_Data[14]);
  7115  1457  0023               	movlb	3	; select bank3
  7116  1458  082E               	movf	(_RF_Data^(0+384)+14),w
  7117  1459  0020               	movlb	0	; select bank0
  7118  145A  00DE               	movwf	??_setLog_Code
  7119  145B  085E               	movf	??_setLog_Code,w
  7120  145C  00DA               	movwf	setProductData@value
  7121  145D  300E               	movlw	14
  7122  145E  319D  25AF  3194   	fcall	_setProductData
  7123                           
  7124                           ;RF_Control_B1.c: 277: setBuz(1, 100);
  7125  1461  3064               	movlw	100
  7126  1462  0020               	movlb	0	; select bank0
  7127  1463  00A4               	movwf	setBuz@time
  7128  1464  3000               	movlw	0
  7129  1465  00A5               	movwf	setBuz@time+1
  7130  1466  3001               	movlw	1
  7131  1467  3197  2759  3194   	fcall	_setBuz
  7132                           
  7133                           ;RF_Control_B1.c: 278: if (myMain.First == 1) {
  7134  146A  0022               	movlb	2	; select bank2
  7135  146B  1EA0               	btfss	_myMain^(0+256),5
  7136  146C  2C71               	goto	l2368
  7137                           
  7138                           ;RF_Control_B1.c: 279: setMemory_LoopSave(1);
  7139  146D  3001               	movlw	1
  7140  146E  319E  2687  3194   	fcall	_setMemory_LoopSave
  7141  1471                     l2368:	
  7142                           
  7143                           ;RF_Control_B1.c: 280: }
  7144                           ;RF_Control_B1.c: 281: setMemory_Modify(1);
  7145  1471  3001               	movlw	1
  7146  1472  319E  2677         	fcall	_setMemory_Modify
  7147  1474  0008               	return
  7148  1475                     __end_of_setLog_Code:	
  7149                           
  7150                           	psect	text27
  7151  1E87                     __ptext27:	
  7152 ;; *************** function _setMemory_LoopSave *****************
  7153 ;; Defined at:
  7154 ;;		line 1079 in file "../src/MCU_B1.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  command         1    wreg     unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  command         1    3[COMMON] unsigned char 
  7159 ;; Return value:  Size  Location     Type
  7160 ;;		None               void
  7161 ;; Registers used:
  7162 ;;		wreg, status,2, status,0
  7163 ;; Tracked objects:
  7164 ;;		On entry : 0/0
  7165 ;;		On exit  : 0/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;Total ram usage:        2 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    3
  7175 ;; This function calls:
  7176 ;;		Nothing
  7177 ;; This function is called by:
  7178 ;;		_setLog_Code
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _setMemory_LoopSave
  7184  1E87                     _setMemory_LoopSave:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7188                           ;setMemory_LoopSave@command stored from wreg
  7189  1E87  00F3               	movwf	setMemory_LoopSave@command
  7190                           
  7191                           ;MCU_B1.c: 1080: Memory.LoopSave = command == 1 ? 1 : 0;
  7192  1E88  0873               	movf	setMemory_LoopSave@command,w
  7193  1E89  3A01               	xorlw	1
  7194  1E8A  3000               	movlw	0
  7195  1E8B  1903               	skipnz
  7196  1E8C  3001               	movlw	1
  7197  1E8D  00F2               	movwf	??_setMemory_LoopSave
  7198  1E8E  0DF2               	rlf	??_setMemory_LoopSave,f
  7199  1E8F  0DF2               	rlf	??_setMemory_LoopSave,f
  7200  1E90  0024               	movlb	4	; select bank4
  7201  1E91  0844               	movf	(_Memory^(0+512)+36),w
  7202  1E92  0672               	xorwf	??_setMemory_LoopSave,w
  7203  1E93  39FB               	andlw	-5
  7204  1E94  0672               	xorwf	??_setMemory_LoopSave,w
  7205  1E95  00C4               	movwf	(_Memory^(0+512)+36)
  7206  1E96  0008               	return
  7207  1E97                     __end_of_setMemory_LoopSave:	
  7208                           
  7209                           	psect	text28
  7210  0E52                     __ptext28:	
  7211 ;; *************** function _setControl_Lights_Table *****************
  7212 ;; Defined at:
  7213 ;;		line 285 in file "../src/RF_Control_B1.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;		None               void
  7220 ;; Registers used:
  7221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        0 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    8
  7234 ;; This function calls:
  7235 ;;		_getDimmerLights_Status
  7236 ;;		_setBuz
  7237 ;;		_setDimmerLights_SwOff
  7238 ;;		_setDimmerLights_SwOn
  7239 ;;		_setProductData
  7240 ;;		_setRFSW_AdjControl
  7241 ;;		_setRFSW_Control
  7242 ;;		_setTxData
  7243 ;; This function is called by:
  7244 ;;		_getRxData
  7245 ;; This function uses a non-reentrant model
  7246 ;;
  7247                           
  7248                           
  7249                           ;psect for function _setControl_Lights_Table
  7250  0E52                     _setControl_Lights_Table:	
  7251                           
  7252                           ;RF_Control_B1.c: 286: switch (RF_Data[15]) {
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7256  0E52  2EBA               	goto	l9168
  7257  0E53                     l9146:	
  7258                           ;RF_Control_B1.c: 287: case 0x00:
  7259                           
  7260                           
  7261                           ;RF_Control_B1.c: 291: if (getDimmerLights_Status(1) == 1) {
  7262  0E53  3001               	movlw	1
  7263  0E54  319D  25BD  318E   	fcall	_getDimmerLights_Status
  7264  0E57  3A01               	xorlw	1
  7265  0E58  1D03               	skipz
  7266  0E59  2E62               	goto	l2374
  7267                           
  7268                           ;RF_Control_B1.c: 292: setDimmerLights_SwOn(1);
  7269  0E5A  3001               	movlw	1
  7270  0E5B  3189  2190  318E   	fcall	_setDimmerLights_SwOn
  7271                           
  7272                           ;RF_Control_B1.c: 293: setDimmerLights_SwOff(1);
  7273  0E5E  3001               	movlw	1
  7274  0E5F  3196  2626  318E   	fcall	_setDimmerLights_SwOff
  7275  0E62                     l2374:	
  7276                           
  7277                           ;RF_Control_B1.c: 294: }
  7278                           ;RF_Control_B1.c: 297: if (getDimmerLights_Status(2) == 1) {
  7279  0E62  3002               	movlw	2
  7280  0E63  319D  25BD  318E   	fcall	_getDimmerLights_Status
  7281  0E66  3A01               	xorlw	1
  7282  0E67  1D03               	skipz
  7283  0E68  2E71               	goto	l2375
  7284                           
  7285                           ;RF_Control_B1.c: 298: setDimmerLights_SwOn(2);
  7286  0E69  3002               	movlw	2
  7287  0E6A  3189  2190  318E   	fcall	_setDimmerLights_SwOn
  7288                           
  7289                           ;RF_Control_B1.c: 299: setDimmerLights_SwOff(2);
  7290  0E6D  3002               	movlw	2
  7291  0E6E  3196  2626  318E   	fcall	_setDimmerLights_SwOff
  7292  0E71                     l2375:	
  7293                           
  7294                           ;RF_Control_B1.c: 300: }
  7295                           ;RF_Control_B1.c: 309: setProductData(9, 0);
  7296  0E71  0020               	movlb	0	; select bank0
  7297  0E72  01DA               	clrf	setProductData@value
  7298  0E73  3009               	movlw	9
  7299  0E74  319D  25AF  318E   	fcall	_setProductData
  7300                           
  7301                           ;RF_Control_B1.c: 310: setProductData(11, 0);
  7302  0E77  0020               	movlb	0	; select bank0
  7303  0E78  01DA               	clrf	setProductData@value
  7304  0E79  300B               	movlw	11
  7305  0E7A  319D  25AF  318E   	fcall	_setProductData
  7306                           
  7307                           ;RF_Control_B1.c: 311: setProductData(15, 0);
  7308  0E7D  0020               	movlb	0	; select bank0
  7309  0E7E  01DA               	clrf	setProductData@value
  7310  0E7F  300F               	movlw	15
  7311  0E80  319D  25AF  318E   	fcall	_setProductData
  7312                           
  7313                           ;RF_Control_B1.c: 312: setProductData(17, 0);
  7314  0E83  0020               	movlb	0	; select bank0
  7315  0E84  01DA               	clrf	setProductData@value
  7316  0E85  3011               	movlw	17
  7317  0E86  319D  25AF  318E   	fcall	_setProductData
  7318                           
  7319                           ;RF_Control_B1.c: 313: setBuz(1, 100);
  7320  0E89  3064               	movlw	100
  7321  0E8A  0020               	movlb	0	; select bank0
  7322  0E8B  00A4               	movwf	setBuz@time
  7323  0E8C  3000               	movlw	0
  7324  0E8D  00A5               	movwf	setBuz@time+1
  7325  0E8E  3001               	movlw	1
  7326  0E8F  3197  2759  318E   	fcall	_setBuz
  7327                           
  7328                           ;RF_Control_B1.c: 314: setTxData();
  7329  0E92  3186  2603         	fcall	_setTxData
  7330                           
  7331                           ;RF_Control_B1.c: 315: break;
  7332  0E94  0008               	return
  7333  0E95                     l9156:	
  7334                           ;RF_Control_B1.c: 316: case 0x20:
  7335                           
  7336                           
  7337                           ;RF_Control_B1.c: 317: setProductData(9, 0);
  7338  0E95  0020               	movlb	0	; select bank0
  7339  0E96  01DA               	clrf	setProductData@value
  7340  0E97  3009               	movlw	9
  7341  0E98  319D  25AF  318E   	fcall	_setProductData
  7342                           
  7343                           ;RF_Control_B1.c: 318: setProductData(11, 0);
  7344  0E9B  0020               	movlb	0	; select bank0
  7345  0E9C  01DA               	clrf	setProductData@value
  7346  0E9D  300B               	movlw	11
  7347  0E9E  319D  25AF  318E   	fcall	_setProductData
  7348                           
  7349                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7350  0EA1  0020               	movlb	0	; select bank0
  7351  0EA2  01DA               	clrf	setProductData@value
  7352  0EA3  3011               	movlw	17
  7353  0EA4  319D  25AF  318E   	fcall	_setProductData
  7354                           
  7355                           ;RF_Control_B1.c: 320: setTxData();
  7356  0EA7  3186  2603         	fcall	_setTxData
  7357                           
  7358                           ;RF_Control_B1.c: 321: break;
  7359  0EA9  0008               	return
  7360  0EAA                     l9158:	
  7361                           ;RF_Control_B1.c: 323: case 0x01:
  7362                           
  7363                           
  7364                           ;RF_Control_B1.c: 324: setRFSW_Control(1);
  7365  0EAA  3001               	movlw	1
  7366  0EAB  3196  26B9         	fcall	_setRFSW_Control
  7367                           
  7368                           ;RF_Control_B1.c: 325: break;
  7369  0EAD  0008               	return
  7370  0EAE                     l9160:	
  7371                           ;RF_Control_B1.c: 329: case 0x02:
  7372                           
  7373                           
  7374                           ;RF_Control_B1.c: 330: setRFSW_Control(2);
  7375  0EAE  3002               	movlw	2
  7376  0EAF  3196  26B9         	fcall	_setRFSW_Control
  7377                           
  7378                           ;RF_Control_B1.c: 331: break;
  7379  0EB1  0008               	return
  7380  0EB2                     l9162:	
  7381                           ;RF_Control_B1.c: 342: case 0x11:
  7382                           
  7383                           
  7384                           ;RF_Control_B1.c: 343: setRFSW_AdjControl(1);
  7385  0EB2  3001               	movlw	1
  7386  0EB3  3195  251D         	fcall	_setRFSW_AdjControl
  7387                           
  7388                           ;RF_Control_B1.c: 344: break;
  7389  0EB5  0008               	return
  7390  0EB6                     l9164:	
  7391                           ;RF_Control_B1.c: 350: case 0x21:
  7392                           
  7393                           
  7394                           ;RF_Control_B1.c: 351: setRFSW_AdjControl(2);
  7395  0EB6  3002               	movlw	2
  7396  0EB7  3195  251D         	fcall	_setRFSW_AdjControl
  7397                           
  7398                           ;RF_Control_B1.c: 364: }
  7399                           
  7400                           ;RF_Control_B1.c: 352: break;
  7401  0EB9  0008               	return
  7402  0EBA                     l9168:	
  7403  0EBA  0023               	movlb	3	; select bank3
  7404  0EBB  082F               	movf	(_RF_Data^(0+384)+15),w
  7405                           
  7406                           ; Switch size 1, requested type "space"
  7407                           ; Number of cases is 6, Range of values is 0 to 33
  7408                           ; switch strategies available:
  7409                           ; Name         Instructions Cycles
  7410                           ; simple_byte           19    10 (average)
  7411                           ; direct_byte           74     6 (fixed)
  7412                           ; jumptable            260     6 (fixed)
  7413                           ;	Chosen strategy is simple_byte
  7414  0EBC  3A00               	xorlw	0	; case 0
  7415  0EBD  1903               	skipnz
  7416  0EBE  2E53               	goto	l9146
  7417  0EBF  3A01               	xorlw	1	; case 1
  7418  0EC0  1903               	skipnz
  7419  0EC1  2EAA               	goto	l9158
  7420  0EC2  3A03               	xorlw	3	; case 2
  7421  0EC3  1903               	skipnz
  7422  0EC4  2EAE               	goto	l9160
  7423  0EC5  3A13               	xorlw	19	; case 17
  7424  0EC6  1903               	skipnz
  7425  0EC7  2EB2               	goto	l9162
  7426  0EC8  3A31               	xorlw	49	; case 32
  7427  0EC9  1903               	skipnz
  7428  0ECA  2E95               	goto	l9156
  7429  0ECB  3A01               	xorlw	1	; case 33
  7430  0ECC  1903               	skipnz
  7431  0ECD  2EB6               	goto	l9164
  7432  0ECE  2ECF               	goto	l2382
  7433  0ECF                     l2382:	
  7434  0ECF  0008               	return
  7435  0ED0                     __end_of_setControl_Lights_Table:	
  7436                           
  7437                           	psect	text29
  7438  16B9                     __ptext29:	
  7439 ;; *************** function _setRFSW_Control *****************
  7440 ;; Defined at:
  7441 ;;		line 391 in file "../src/RF_Control_B1.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  sw              1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  sw              1   69[BANK0 ] unsigned char 
  7446 ;;  status          1   68[BANK0 ] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;		None               void
  7449 ;; Registers used:
  7450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;Total ram usage:        3 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    7
  7463 ;; This function calls:
  7464 ;;		_getDelayOff_GO
  7465 ;;		_getDimmerLights_Status
  7466 ;;		_setBuz
  7467 ;;		_setDelayOff_GO
  7468 ;;		_setDimmerLights_SwOff
  7469 ;;		_setDimmerLights_SwOn
  7470 ;;		_setRF_DimmerLights
  7471 ;;		_setTxData
  7472 ;; This function is called by:
  7473 ;;		_setControl_Lights_Table
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           
  7478                           ;psect for function _setRFSW_Control
  7479  16B9                     _setRFSW_Control:	
  7480                           
  7481                           ;incstack = 0
  7482                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7483                           ;setRFSW_Control@sw stored from wreg
  7484  16B9  0020               	movlb	0	; select bank0
  7485  16BA  00E5               	movwf	setRFSW_Control@sw
  7486                           
  7487                           ;RF_Control_B1.c: 392: char status = 0;
  7488  16BB  01E4               	clrf	setRFSW_Control@status
  7489                           
  7490                           ;RF_Control_B1.c: 395: if (RF_Data[16] == 0x80) {
  7491  16BC  0023               	movlb	3	; select bank3
  7492  16BD  0830               	movf	(_RF_Data^(0+384)+16),w
  7493  16BE  3A80               	xorlw	128
  7494  16BF  1D03               	skipz
  7495  16C0  2EEC               	goto	l9014
  7496                           
  7497                           ;RF_Control_B1.c: 396: setDelayOff_GO(sw, 1, RF_Data[17]);
  7498  16C1  0020               	movlb	0	; select bank0
  7499  16C2  01DE               	clrf	setDelayOff_GO@command
  7500  16C3  0ADE               	incf	setDelayOff_GO@command,f
  7501  16C4  0023               	movlb	3	; select bank3
  7502  16C5  0831               	movf	(_RF_Data^(0+384)+17),w
  7503  16C6  0020               	movlb	0	; select bank0
  7504  16C7  00E3               	movwf	??_setRFSW_Control
  7505  16C8  0863               	movf	??_setRFSW_Control,w
  7506  16C9  00DF               	movwf	setDelayOff_GO@value
  7507  16CA  0865               	movf	setRFSW_Control@sw,w
  7508  16CB  3188  20DF  3196   	fcall	_setDelayOff_GO
  7509                           
  7510                           ;RF_Control_B1.c: 397: if (getDimmerLights_Status(sw) == 1) {
  7511  16CE  0020               	movlb	0	; select bank0
  7512  16CF  0865               	movf	setRFSW_Control@sw,w
  7513  16D0  319D  25BD  3196   	fcall	_getDimmerLights_Status
  7514  16D3  3A01               	xorlw	1
  7515  16D4  1D03               	skipz
  7516  16D5  2EFB               	goto	l9018
  7517                           
  7518                           ;RF_Control_B1.c: 398: setBuz(1, 100);
  7519  16D6  3064               	movlw	100
  7520  16D7  0020               	movlb	0	; select bank0
  7521  16D8  00A4               	movwf	setBuz@time
  7522  16D9  3000               	movlw	0
  7523  16DA  00A5               	movwf	setBuz@time+1
  7524  16DB  3001               	movlw	1
  7525  16DC  3197  2759  3196   	fcall	_setBuz
  7526                           
  7527                           ;RF_Control_B1.c: 399: status = 1;
  7528  16DF  0020               	movlb	0	; select bank0
  7529  16E0  01E4               	clrf	setRFSW_Control@status
  7530  16E1  0AE4               	incf	setRFSW_Control@status,f
  7531                           
  7532                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, 1);
  7533  16E2  01DE               	clrf	setRF_DimmerLights@on
  7534  16E3  0ADE               	incf	setRF_DimmerLights@on,f
  7535  16E4  0865               	movf	setRFSW_Control@sw,w
  7536  16E5  3189  2137  3196   	fcall	_setRF_DimmerLights
  7537                           
  7538                           ;RF_Control_B1.c: 401: setTxData();
  7539  16E8  3186  2603  3196   	fcall	_setTxData
  7540                           
  7541                           ;RF_Control_B1.c: 402: }
  7542                           ;RF_Control_B1.c: 403: } else {
  7543  16EB  2EFB               	goto	l9018
  7544  16EC                     l9014:	
  7545                           
  7546                           ;RF_Control_B1.c: 405: if (getDelayOff_GO(sw) == 1) {
  7547  16EC  0020               	movlb	0	; select bank0
  7548  16ED  0865               	movf	setRFSW_Control@sw,w
  7549  16EE  319D  25CC  3196   	fcall	_getDelayOff_GO
  7550  16F1  3A01               	xorlw	1
  7551  16F2  1D03               	skipz
  7552  16F3  2EFB               	goto	l9018
  7553                           
  7554                           ;RF_Control_B1.c: 406: setDelayOff_GO(sw, 0, 0);
  7555  16F4  0020               	movlb	0	; select bank0
  7556  16F5  01DE               	clrf	setDelayOff_GO@command
  7557  16F6  01DF               	clrf	setDelayOff_GO@value
  7558  16F7  0865               	movf	setRFSW_Control@sw,w
  7559  16F8  3188  20DF  3196   	fcall	_setDelayOff_GO
  7560  16FB                     l9018:	
  7561                           
  7562                           ;RF_Control_B1.c: 407: }
  7563                           ;RF_Control_B1.c: 409: }
  7564                           ;RF_Control_B1.c: 410: if (status == 0) {
  7565  16FB  0020               	movlb	0	; select bank0
  7566  16FC  08E4               	movf	setRFSW_Control@status,f
  7567  16FD  1D03               	skipz
  7568  16FE  0008               	return
  7569                           
  7570                           ;RF_Control_B1.c: 412: setDimmerLights_SwOn(sw);
  7571  16FF  0865               	movf	setRFSW_Control@sw,w
  7572  1700  3189  2190  3196   	fcall	_setDimmerLights_SwOn
  7573                           
  7574                           ;RF_Control_B1.c: 413: setDimmerLights_SwOff(sw);
  7575  1703  0020               	movlb	0	; select bank0
  7576  1704  0865               	movf	setRFSW_Control@sw,w
  7577  1705  3196  2626         	fcall	_setDimmerLights_SwOff
  7578  1707  0008               	return
  7579  1708                     __end_of_setRFSW_Control:	
  7580                           
  7581                           	psect	text30
  7582  151D                     __ptext30:	
  7583 ;; *************** function _setRFSW_AdjControl *****************
  7584 ;; Defined at:
  7585 ;;		line 419 in file "../src/RF_Control_B1.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  sw              1    wreg     unsigned char 
  7588 ;; Auto vars:     Size  Location     Type
  7589 ;;  sw              1   67[BANK0 ] unsigned char 
  7590 ;;  status          1   66[BANK0 ] unsigned char 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:        4 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    5
  7607 ;; This function calls:
  7608 ;;		_getDimmerLights_Status
  7609 ;;		_setMemory_Modify
  7610 ;;		_setProductData
  7611 ;;		_setRF_DimmerValue
  7612 ;;		_setTxData
  7613 ;; This function is called by:
  7614 ;;		_setControl_Lights_Table
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           
  7619                           ;psect for function _setRFSW_AdjControl
  7620  151D                     _setRFSW_AdjControl:	
  7621                           
  7622                           ;incstack = 0
  7623                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7624                           ;setRFSW_AdjControl@sw stored from wreg
  7625  151D  0020               	movlb	0	; select bank0
  7626  151E  00E3               	movwf	setRFSW_AdjControl@sw
  7627                           
  7628                           ;RF_Control_B1.c: 420: char status = 0;
  7629  151F  01E2               	clrf	setRFSW_AdjControl@status
  7630                           
  7631                           ;RF_Control_B1.c: 422: status = getDimmerLights_Status(sw);
  7632  1520  0863               	movf	setRFSW_AdjControl@sw,w
  7633  1521  319D  25BD  3195   	fcall	_getDimmerLights_Status
  7634  1524  0020               	movlb	0	; select bank0
  7635  1525  00E0               	movwf	??_setRFSW_AdjControl
  7636  1526  0860               	movf	??_setRFSW_AdjControl,w
  7637  1527  00E2               	movwf	setRFSW_AdjControl@status
  7638                           
  7639                           ;RF_Control_B1.c: 425: if (status == 1) {
  7640  1528  0862               	movf	setRFSW_AdjControl@status,w
  7641  1529  3A01               	xorlw	1
  7642  152A  1D03               	skipz
  7643  152B  2D36               	goto	l6496
  7644                           
  7645                           ;RF_Control_B1.c: 426: setMemory_Modify(1);
  7646  152C  3001               	movlw	1
  7647  152D  319E  2677  3195   	fcall	_setMemory_Modify
  7648                           
  7649                           ;RF_Control_B1.c: 427: setRF_DimmerValue(sw);
  7650  1530  0020               	movlb	0	; select bank0
  7651  1531  0863               	movf	setRFSW_AdjControl@sw,w
  7652  1532  3193  23DD  3195   	fcall	_setRF_DimmerValue
  7653                           
  7654                           ;RF_Control_B1.c: 428: } else {
  7655  1535  2D47               	goto	l2394
  7656  1536                     l6496:	
  7657                           
  7658                           ;RF_Control_B1.c: 429: setProductData(9, product->Data[20 + sw]);
  7659  1536  0020               	movlb	0	; select bank0
  7660  1537  0863               	movf	setRFSW_AdjControl@sw,w
  7661  1538  3E14               	addlw	20
  7662  1539  076D               	addwf	_product,w
  7663  153A  00E0               	movwf	??_setRFSW_AdjControl
  7664  153B  0860               	movf	??_setRFSW_AdjControl,w
  7665  153C  0086               	movwf	6
  7666  153D  3002               	movlw	2	; select bank4/5
  7667  153E  0087               	movwf	7
  7668  153F  0801               	movf	1,w
  7669  1540  00E1               	movwf	??_setRFSW_AdjControl+1
  7670  1541  0861               	movf	??_setRFSW_AdjControl+1,w
  7671  1542  00DA               	movwf	setProductData@value
  7672  1543  3009               	movlw	9
  7673  1544  319D  25AF  3195   	fcall	_setProductData
  7674  1547                     l2394:	
  7675                           
  7676                           ;RF_Control_B1.c: 430: }
  7677                           ;RF_Control_B1.c: 431: setProductData(17, product->Data[26 + sw]);
  7678  1547  0020               	movlb	0	; select bank0
  7679  1548  0863               	movf	setRFSW_AdjControl@sw,w
  7680  1549  3E1A               	addlw	26
  7681  154A  076D               	addwf	_product,w
  7682  154B  00E0               	movwf	??_setRFSW_AdjControl
  7683  154C  0860               	movf	??_setRFSW_AdjControl,w
  7684  154D  0086               	movwf	6
  7685  154E  3002               	movlw	2	; select bank4/5
  7686  154F  0087               	movwf	7
  7687  1550  0801               	movf	1,w
  7688  1551  00E1               	movwf	??_setRFSW_AdjControl+1
  7689  1552  0861               	movf	??_setRFSW_AdjControl+1,w
  7690  1553  00DA               	movwf	setProductData@value
  7691  1554  3011               	movlw	17
  7692  1555  319D  25AF  3195   	fcall	_setProductData
  7693                           
  7694                           ;RF_Control_B1.c: 432: setTxData();
  7695  1558  3186  2603         	fcall	_setTxData
  7696  155A  0008               	return
  7697  155B                     __end_of_setRFSW_AdjControl:	
  7698                           
  7699                           	psect	text31
  7700  13DD                     __ptext31:	
  7701 ;; *************** function _setRF_DimmerValue *****************
  7702 ;; Defined at:
  7703 ;;		line 437 in file "../src/RF_Control_B1.c"
  7704 ;; Parameters:    Size  Location     Type
  7705 ;;  lights          1    wreg     unsigned char 
  7706 ;; Auto vars:     Size  Location     Type
  7707 ;;  lights          1   63[BANK0 ] unsigned char 
  7708 ;; Return value:  Size  Location     Type
  7709 ;;		None               void
  7710 ;; Registers used:
  7711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7712 ;; Tracked objects:
  7713 ;;		On entry : 0/0
  7714 ;;		On exit  : 0/0
  7715 ;;		Unchanged: 0/0
  7716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7719 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;Total ram usage:        2 bytes
  7722 ;; Hardware stack levels used:    1
  7723 ;; Hardware stack levels required when called:    4
  7724 ;; This function calls:
  7725 ;;		_setDimmerIntr_Dimming_RF
  7726 ;;		_setProductData
  7727 ;; This function is called by:
  7728 ;;		_setRFSW_AdjControl
  7729 ;; This function uses a non-reentrant model
  7730 ;;
  7731                           
  7732                           
  7733                           ;psect for function _setRF_DimmerValue
  7734  13DD                     _setRF_DimmerValue:	
  7735                           
  7736                           ;incstack = 0
  7737                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7738                           ;setRF_DimmerValue@lights stored from wreg
  7739  13DD  0020               	movlb	0	; select bank0
  7740  13DE  00DF               	movwf	setRF_DimmerValue@lights
  7741                           
  7742                           ;RF_Control_B1.c: 438: if (RF_Data[9] > 0x64) {
  7743  13DF  3065               	movlw	101
  7744  13E0  0023               	movlb	3	; select bank3
  7745  13E1  0229               	subwf	(_RF_Data^(0+384)+9),w
  7746  13E2  1C03               	skipc
  7747  13E3  2BEA               	goto	l6352
  7748                           
  7749                           ;RF_Control_B1.c: 439: RF_Data[9] = 0x64;
  7750  13E4  3064               	movlw	100
  7751  13E5  0020               	movlb	0	; select bank0
  7752  13E6  00DE               	movwf	??_setRF_DimmerValue
  7753  13E7  085E               	movf	??_setRF_DimmerValue,w
  7754  13E8  0023               	movlb	3	; select bank3
  7755  13E9  00A9               	movwf	(_RF_Data^(0+384)+9)
  7756  13EA                     l6352:	
  7757                           
  7758                           ;RF_Control_B1.c: 440: }
  7759                           ;RF_Control_B1.c: 441: setProductData(9, RF_Data[9]);
  7760  13EA  0829               	movf	(_RF_Data^(0+384)+9),w
  7761  13EB  0020               	movlb	0	; select bank0
  7762  13EC  00DE               	movwf	??_setRF_DimmerValue
  7763  13ED  085E               	movf	??_setRF_DimmerValue,w
  7764  13EE  00DA               	movwf	setProductData@value
  7765  13EF  3009               	movlw	9
  7766  13F0  319D  25AF  3193   	fcall	_setProductData
  7767                           
  7768                           ;RF_Control_B1.c: 442: setProductData(11, lights);
  7769  13F3  0020               	movlb	0	; select bank0
  7770  13F4  085F               	movf	setRF_DimmerValue@lights,w
  7771  13F5  00DE               	movwf	??_setRF_DimmerValue
  7772  13F6  085E               	movf	??_setRF_DimmerValue,w
  7773  13F7  00DA               	movwf	setProductData@value
  7774  13F8  300B               	movlw	11
  7775  13F9  319D  25AF  3193   	fcall	_setProductData
  7776                           
  7777                           ;RF_Control_B1.c: 443: setProductData((20 + lights), RF_Data[9]);
  7778  13FC  0023               	movlb	3	; select bank3
  7779  13FD  0829               	movf	(_RF_Data^(0+384)+9),w
  7780  13FE  0020               	movlb	0	; select bank0
  7781  13FF  00DE               	movwf	??_setRF_DimmerValue
  7782  1400  085E               	movf	??_setRF_DimmerValue,w
  7783  1401  00DA               	movwf	setProductData@value
  7784  1402  085F               	movf	setRF_DimmerValue@lights,w
  7785  1403  3E14               	addlw	20
  7786  1404  319D  25AF  3193   	fcall	_setProductData
  7787                           
  7788                           ;RF_Control_B1.c: 445: setDimmerIntr_Dimming_RF(lights, 1);
  7789  1407  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7790  1408  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7791  1409  0020               	movlb	0	; select bank0
  7792  140A  085F               	movf	setRF_DimmerValue@lights,w
  7793  140B  3193  2308         	fcall	_setDimmerIntr_Dimming_RF
  7794  140D  0008               	return
  7795  140E                     __end_of_setRF_DimmerValue:	
  7796                           
  7797                           	psect	text32
  7798  1308                     __ptext32:	
  7799 ;; *************** function _setDimmerIntr_Dimming_RF *****************
  7800 ;; Defined at:
  7801 ;;		line 180 in file "../src/Dimmer_B1.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;  lights          1    wreg     unsigned char 
  7804 ;;  command         1    2[COMMON] unsigned char 
  7805 ;; Auto vars:     Size  Location     Type
  7806 ;;  lights          1    4[COMMON] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;		None               void
  7809 ;; Registers used:
  7810 ;;		wreg, status,2, status,0
  7811 ;; Tracked objects:
  7812 ;;		On entry : 0/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7816 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7818 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7819 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;Total ram usage:        3 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    3
  7823 ;; This function calls:
  7824 ;;		Nothing
  7825 ;; This function is called by:
  7826 ;;		_setRF_DimmerValue
  7827 ;; This function uses a non-reentrant model
  7828 ;;
  7829                           
  7830                           
  7831                           ;psect for function _setDimmerIntr_Dimming_RF
  7832  1308                     _setDimmerIntr_Dimming_RF:	
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
  7836                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
  7837  1308  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
  7838                           
  7839                           ;Dimmer_B1.c: 182: if (lights == 1) {
  7840  1309  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
  7841  130A  3A01               	xorlw	1
  7842  130B  1D03               	skipz
  7843  130C  2B1D               	goto	l6180
  7844                           
  7845                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
  7846  130D  0872               	movf	setDimmerIntr_Dimming_RF@command,w
  7847  130E  3A01               	xorlw	1
  7848  130F  3000               	movlw	0
  7849  1310  1903               	skipnz
  7850  1311  3001               	movlw	1
  7851  1312  00F3               	movwf	??_setDimmerIntr_Dimming_RF
  7852  1313  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
  7853  1314  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
  7854  1315  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
  7855  1316  0021               	movlb	1	; select bank1
  7856  1317  0861               	movf	_DimmerIntr1^(0+128),w
  7857  1318  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7858  1319  39BF               	andlw	-65
  7859  131A  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7860  131B  00E1               	movwf	_DimmerIntr1^(0+128)
  7861                           
  7862                           ;Dimmer_B1.c: 184: }
  7863  131C  0008               	return
  7864  131D                     l6180:	
  7865                           
  7866                           ;Dimmer_B1.c: 187: else if (lights == 2) {
  7867  131D  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
  7868  131E  3A02               	xorlw	2
  7869  131F  1D03               	skipz
  7870  1320  0008               	return
  7871                           
  7872                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
  7873  1321  0872               	movf	setDimmerIntr_Dimming_RF@command,w
  7874  1322  3A01               	xorlw	1
  7875  1323  3000               	movlw	0
  7876  1324  1903               	skipnz
  7877  1325  3001               	movlw	1
  7878  1326  00F3               	movwf	??_setDimmerIntr_Dimming_RF
  7879  1327  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
  7880  1328  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
  7881  1329  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
  7882  132A  0021               	movlb	1	; select bank1
  7883  132B  0868               	movf	_DimmerIntr2^(0+128),w
  7884  132C  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7885  132D  39BF               	andlw	-65
  7886  132E  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
  7887  132F  00E8               	movwf	_DimmerIntr2^(0+128)
  7888  1330  0008               	return
  7889  1331                     __end_of_setDimmerIntr_Dimming_RF:	
  7890                           
  7891                           	psect	text33
  7892  1E77                     __ptext33:	
  7893 ;; *************** function _setMemory_Modify *****************
  7894 ;; Defined at:
  7895 ;;		line 1073 in file "../src/MCU_B1.c"
  7896 ;; Parameters:    Size  Location     Type
  7897 ;;  command         1    wreg     unsigned char 
  7898 ;; Auto vars:     Size  Location     Type
  7899 ;;  command         1    3[COMMON] unsigned char 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;		None               void
  7902 ;; Registers used:
  7903 ;;		wreg, status,2, status,0
  7904 ;; Tracked objects:
  7905 ;;		On entry : 0/0
  7906 ;;		On exit  : 0/0
  7907 ;;		Unchanged: 0/0
  7908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7911 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7912 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;Total ram usage:        2 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    3
  7916 ;; This function calls:
  7917 ;;		Nothing
  7918 ;; This function is called by:
  7919 ;;		_setLog_Code
  7920 ;;		_setRFSW_AdjControl
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           
  7925                           ;psect for function _setMemory_Modify
  7926  1E77                     _setMemory_Modify:	
  7927                           
  7928                           ;incstack = 0
  7929                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7930                           ;setMemory_Modify@command stored from wreg
  7931  1E77  00F3               	movwf	setMemory_Modify@command
  7932                           
  7933                           ;MCU_B1.c: 1074: Memory.Modify = command == 1 ? 1 : 0;
  7934  1E78  0873               	movf	setMemory_Modify@command,w
  7935  1E79  3A01               	xorlw	1
  7936  1E7A  3000               	movlw	0
  7937  1E7B  1903               	skipnz
  7938  1E7C  3001               	movlw	1
  7939  1E7D  00F2               	movwf	??_setMemory_Modify
  7940  1E7E  0024               	movlb	4	; select bank4
  7941  1E7F  0844               	movf	(_Memory^(0+512)+36),w
  7942  1E80  0672               	xorwf	??_setMemory_Modify,w
  7943  1E81  39FE               	andlw	-2
  7944  1E82  0672               	xorwf	??_setMemory_Modify,w
  7945  1E83  00C4               	movwf	(_Memory^(0+512)+36)
  7946                           
  7947                           ;MCU_B1.c: 1075: Memory.Time = 0;
  7948  1E84  01C2               	clrf	(_Memory^(0+512)+34)
  7949  1E85  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7950  1E86  0008               	return
  7951  1E87                     __end_of_setMemory_Modify:	
  7952                           
  7953                           	psect	text34
  7954  1EB8                     __ptext34:	
  7955 ;; *************** function _getRF_KeyStatus *****************
  7956 ;; Defined at:
  7957 ;;		line 149 in file "../src/RF_Control_B1.c"
  7958 ;; Parameters:    Size  Location     Type
  7959 ;;		None
  7960 ;; Auto vars:     Size  Location     Type
  7961 ;;  key             1    3[COMMON] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      unsigned char 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;Total ram usage:        3 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    3
  7978 ;; This function calls:
  7979 ;;		Nothing
  7980 ;; This function is called by:
  7981 ;;		_setRF_Main
  7982 ;; This function uses a non-reentrant model
  7983 ;;
  7984                           
  7985                           
  7986                           ;psect for function _getRF_KeyStatus
  7987  1EB8                     _getRF_KeyStatus:	
  7988                           
  7989                           ;RF_Control_B1.c: 150: char key = 0;
  7990                           
  7991                           ;incstack = 0
  7992                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7993  1EB8  01F3               	clrf	getRF_KeyStatus@key
  7994                           
  7995                           ;RF_Control_B1.c: 156: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7996  1EB9  01F4               	clrf	_getRF_KeyStatus$4976
  7997  1EBA  0AF4               	incf	_getRF_KeyStatus$4976,f
  7998  1EBB  0020               	movlb	0	; select bank0
  7999  1EBC  1F0C               	btfss	12,6	;volatile
  8000  1EBD  1A0C               	btfsc	12,4	;volatile
  8001  1EBE  2EC3               	goto	l7270
  8002  1EBF  1C0C               	btfss	12,0	;volatile
  8003  1EC0  188D               	btfsc	13,1	;volatile
  8004  1EC1  2EC3               	goto	l7270
  8005  1EC2  01F4               	clrf	_getRF_KeyStatus$4976
  8006  1EC3                     l7270:	
  8007  1EC3  0874               	movf	_getRF_KeyStatus$4976,w
  8008  1EC4  00F2               	movwf	??_getRF_KeyStatus
  8009  1EC5  0872               	movf	??_getRF_KeyStatus,w
  8010  1EC6  00F3               	movwf	getRF_KeyStatus@key
  8011                           
  8012                           ;RF_Control_B1.c: 162: return key;
  8013  1EC7  0873               	movf	getRF_KeyStatus@key,w
  8014  1EC8  0008               	return
  8015  1EC9                     __end_of_getRF_KeyStatus:	
  8016                           
  8017                           	psect	text35
  8018  1E67                     __ptext35:	
  8019 ;; *************** function _getBuz_GO *****************
  8020 ;; Defined at:
  8021 ;;		line 82 in file "../src/Buzzer_B1.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;		None
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  i               2    6[COMMON] int 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  2    2[COMMON] int 
  8028 ;; Registers used:
  8029 ;;		wreg, status,2, status,0
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8035 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;Total ram usage:        6 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:    3
  8042 ;; This function calls:
  8043 ;;		Nothing
  8044 ;; This function is called by:
  8045 ;;		_setRF_Main
  8046 ;; This function uses a non-reentrant model
  8047 ;;
  8048                           
  8049                           
  8050                           ;psect for function _getBuz_GO
  8051  1E67                     _getBuz_GO:	
  8052                           
  8053                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8054                           
  8055                           ;incstack = 0
  8056                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8057  1E67  0021               	movlb	1	; select bank1
  8058  1E68  0C2E               	rrf	_Buz1^(0+128),w
  8059  1E69  3901               	andlw	1
  8060  1E6A  00F4               	movwf	??_getBuz_GO
  8061  1E6B  01F5               	clrf	??_getBuz_GO+1
  8062  1E6C  0874               	movf	??_getBuz_GO,w
  8063  1E6D  00F6               	movwf	getBuz_GO@i
  8064  1E6E  0875               	movf	??_getBuz_GO+1,w
  8065  1E6F  00F7               	movwf	getBuz_GO@i+1
  8066                           
  8067                           ;Buzzer_B1.c: 84: return i;
  8068  1E70  0877               	movf	getBuz_GO@i+1,w
  8069  1E71  01F3               	clrf	?_getBuz_GO+1
  8070  1E72  07F3               	addwf	?_getBuz_GO+1,f
  8071  1E73  0876               	movf	getBuz_GO@i,w
  8072  1E74  01F2               	clrf	?_getBuz_GO
  8073  1E75  07F2               	addwf	?_getBuz_GO,f
  8074  1E76  0008               	return
  8075  1E77                     __end_of_getBuz_GO:	
  8076                           
  8077                           	psect	text36
  8078  1DF9                     __ptext36:	
  8079 ;; *************** function _RF_RxDisable *****************
  8080 ;; Defined at:
  8081 ;;		line 219 in file "../src/RF_Control_B1.c"
  8082 ;; Parameters:    Size  Location     Type
  8083 ;;		None
  8084 ;; Auto vars:     Size  Location     Type
  8085 ;;		None
  8086 ;; Return value:  Size  Location     Type
  8087 ;;		None               void
  8088 ;; Registers used:
  8089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;Total ram usage:        0 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    5
  8102 ;; This function calls:
  8103 ;;		_CC2500_WriteCommand
  8104 ;; This function is called by:
  8105 ;;		_setRF_Main
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           
  8110                           ;psect for function _RF_RxDisable
  8111  1DF9                     _RF_RxDisable:	
  8112                           
  8113                           ;RF_Control_B1.c: 220: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8114                           
  8115                           ;incstack = 0
  8116                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8117  1DF9  0021               	movlb	1	; select bank1
  8118  1DFA  18A0               	btfsc	_RF1^(0+128),1
  8119  1DFB  2DFE               	goto	l2350
  8120  1DFC  1DA0               	btfss	_RF1^(0+128),3
  8121  1DFD  0008               	return
  8122  1DFE                     l2350:	
  8123                           
  8124                           ;RF_Control_B1.c: 221: RF1.RxStatus = 0;
  8125  1DFE  11A0               	bcf	_RF1^(0+128),3
  8126                           
  8127                           ;RF_Control_B1.c: 222: RF1.ReceiveGO = 0;
  8128  1DFF  10A0               	bcf	_RF1^(0+128),1
  8129                           
  8130                           ;RF_Control_B1.c: 223: CC2500_WriteCommand(0x36);
  8131  1E00  3036               	movlw	54
  8132  1E01  3190  2086  319D   	fcall	_CC2500_WriteCommand
  8133                           
  8134                           ;RF_Control_B1.c: 224: CC2500_WriteCommand(0x3A);
  8135  1E04  303A               	movlw	58
  8136  1E05  3190  2086         	fcall	_CC2500_WriteCommand
  8137  1E07  0008               	return
  8138  1E08                     __end_of_RF_RxDisable:	
  8139                           
  8140                           	psect	text37
  8141  0C92                     __ptext37:	
  8142 ;; *************** function _CC2500_TxData *****************
  8143 ;; Defined at:
  8144 ;;		line 32 in file "../src/CC2500_B1.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;		None
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  loop_e          1    7[COMMON] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;		None               void
  8151 ;; Registers used:
  8152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;Total ram usage:        2 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    5
  8165 ;; This function calls:
  8166 ;;		_CC2500_WriteByte
  8167 ;;		_CC2500_WriteCommand
  8168 ;;		_RF_Timeout_Counter
  8169 ;;		_setRF_TimeoutCleared
  8170 ;; This function is called by:
  8171 ;;		_setRF_Main
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _CC2500_TxData
  8177  0C92                     _CC2500_TxData:	
  8178                           
  8179                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8180                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8184  0C92  3036               	movlw	54
  8185  0C93  3190  2086  318C   	fcall	_CC2500_WriteCommand
  8186                           
  8187                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8188  0C96  303B               	movlw	59
  8189  0C97  3190  2086  318C   	fcall	_CC2500_WriteCommand
  8190                           
  8191                           ;CC2500_B1.c: 38: RC4 = 0;
  8192  0C9A  0020               	movlb	0	; select bank0
  8193  0C9B  120E               	bcf	14,4	;volatile
  8194                           
  8195                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8196  0C9C  307F               	movlw	127
  8197  0C9D  00F6               	movwf	??_CC2500_TxData
  8198  0C9E  0876               	movf	??_CC2500_TxData,w
  8199  0C9F  0021               	movlb	1	; select bank1
  8200  0CA0  00C9               	movwf	_SPI0Buffer^(0+128)
  8201                           
  8202                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8203  0CA1  2CA5               	goto	l9178
  8204  0CA2                     l9176:	
  8205                           
  8206                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8207  0CA2  319F  2765  318C   	fcall	_RF_Timeout_Counter
  8208  0CA5                     l9178:	
  8209  0CA5  0020               	movlb	0	; select bank0
  8210  0CA6  1D0E               	btfss	14,2	;volatile
  8211  0CA7  2CAB               	goto	l9182
  8212  0CA8  0021               	movlb	1	; select bank1
  8213  0CA9  1F21               	btfss	(_RF1^(0+128)+1),6
  8214  0CAA  2CA2               	goto	l9176
  8215  0CAB                     l9182:	
  8216                           
  8217                           ;CC2500_B1.c: 42: };
  8218                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8219  0CAB  319C  24BC  318C   	fcall	_setRF_TimeoutCleared
  8220                           
  8221                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8222  0CAE  319F  27CF  318C   	fcall	_CC2500_WriteByte
  8223                           
  8224                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8225  0CB1  0021               	movlb	1	; select bank1
  8226  0CB2  084B               	movf	_Tx_Length^(0+128),w
  8227  0CB3  00F6               	movwf	??_CC2500_TxData
  8228  0CB4  0876               	movf	??_CC2500_TxData,w
  8229  0CB5  00C9               	movwf	_SPI0Buffer^(0+128)
  8230                           
  8231                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8232  0CB6  319F  27CF  318C   	fcall	_CC2500_WriteByte
  8233                           
  8234                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8235  0CB9  01F7               	clrf	CC2500_TxData@loop_e
  8236  0CBA                     l9196:	
  8237  0CBA  0021               	movlb	1	; select bank1
  8238  0CBB  084B               	movf	_Tx_Length^(0+128),w
  8239  0CBC  0277               	subwf	CC2500_TxData@loop_e,w
  8240  0CBD  1803               	btfsc	3,0
  8241  0CBE  2CD1               	goto	l251
  8242                           
  8243                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8244  0CBF  0877               	movf	CC2500_TxData@loop_e,w
  8245  0CC0  3EA0               	addlw	_RF_Data& (0+255)
  8246  0CC1  0086               	movwf	6
  8247  0CC2  3001               	movlw	1	; select bank3/4
  8248  0CC3  0087               	movwf	7
  8249  0CC4  0801               	movf	1,w
  8250  0CC5  00F6               	movwf	??_CC2500_TxData
  8251  0CC6  0876               	movf	??_CC2500_TxData,w
  8252  0CC7  0021               	movlb	1	; select bank1
  8253  0CC8  00C9               	movwf	_SPI0Buffer^(0+128)
  8254                           
  8255                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8256  0CC9  319F  27CF  318C   	fcall	_CC2500_WriteByte
  8257  0CCC  3001               	movlw	1
  8258  0CCD  00F6               	movwf	??_CC2500_TxData
  8259  0CCE  0876               	movf	??_CC2500_TxData,w
  8260  0CCF  07F7               	addwf	CC2500_TxData@loop_e,f
  8261  0CD0  2CBA               	goto	l9196
  8262  0CD1                     l251:	
  8263                           
  8264                           ;CC2500_B1.c: 51: }
  8265                           ;CC2500_B1.c: 52: RC4 = 1;
  8266  0CD1  0020               	movlb	0	; select bank0
  8267  0CD2  160E               	bsf	14,4	;volatile
  8268                           
  8269                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8270  0CD3  3035               	movlw	53
  8271  0CD4  3190  2086  318C   	fcall	_CC2500_WriteCommand
  8272                           
  8273                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8274  0CD7  2CDB               	goto	l9202
  8275  0CD8                     l9200:	
  8276                           
  8277                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8278  0CD8  319F  2765  318C   	fcall	_RF_Timeout_Counter
  8279  0CDB                     l9202:	
  8280  0CDB  0020               	movlb	0	; select bank0
  8281  0CDC  180D               	btfsc	13,0	;volatile
  8282  0CDD  2CE1               	goto	l9206
  8283  0CDE  0021               	movlb	1	; select bank1
  8284  0CDF  1F21               	btfss	(_RF1^(0+128)+1),6
  8285  0CE0  2CD8               	goto	l9200
  8286  0CE1                     l9206:	
  8287                           
  8288                           ;CC2500_B1.c: 56: };
  8289                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8290  0CE1  319C  24BC  318C   	fcall	_setRF_TimeoutCleared
  8291                           
  8292                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8293  0CE4  2CE8               	goto	l9210
  8294  0CE5                     l9208:	
  8295                           
  8296                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8297  0CE5  319F  2765  318C   	fcall	_RF_Timeout_Counter
  8298  0CE8                     l9210:	
  8299  0CE8  0020               	movlb	0	; select bank0
  8300  0CE9  1C0D               	btfss	13,0	;volatile
  8301  0CEA  2CEE               	goto	l9214
  8302  0CEB  0021               	movlb	1	; select bank1
  8303  0CEC  1F21               	btfss	(_RF1^(0+128)+1),6
  8304  0CED  2CE5               	goto	l9208
  8305  0CEE                     l9214:	
  8306                           
  8307                           ;CC2500_B1.c: 61: };
  8308                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8309  0CEE  319C  24BC  318C   	fcall	_setRF_TimeoutCleared
  8310                           
  8311                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8312  0CF1  3036               	movlw	54
  8313  0CF2  3190  2086  318C   	fcall	_CC2500_WriteCommand
  8314                           
  8315                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8316  0CF5  303B               	movlw	59
  8317  0CF6  3190  2086         	fcall	_CC2500_WriteCommand
  8318                           
  8319                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8320  0CF8  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8321  0CF9  0008               	return
  8322  0CFA                     __end_of_CC2500_TxData:	
  8323                           
  8324                           	psect	text38
  8325  0B04                     __ptext38:	
  8326 ;; *************** function _CC2500_RxData *****************
  8327 ;; Defined at:
  8328 ;;		line 73 in file "../src/CC2500_B1.c"
  8329 ;; Parameters:    Size  Location     Type
  8330 ;;		None
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  loop_f          1    7[COMMON] unsigned char 
  8333 ;; Return value:  Size  Location     Type
  8334 ;;		None               void
  8335 ;; Registers used:
  8336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8337 ;; Tracked objects:
  8338 ;;		On entry : 0/0
  8339 ;;		On exit  : 0/0
  8340 ;;		Unchanged: 0/0
  8341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;Total ram usage:        2 bytes
  8347 ;; Hardware stack levels used:    1
  8348 ;; Hardware stack levels required when called:    5
  8349 ;; This function calls:
  8350 ;;		_CC2500_ReadByte
  8351 ;;		_CC2500_ReadStatus
  8352 ;;		_CC2500_WriteByte
  8353 ;;		_CC2500_WriteCommand
  8354 ;;		_RF_Timeout_Counter
  8355 ;;		_setRF_TimeoutCleared
  8356 ;; This function is called by:
  8357 ;;		_setRF_Main
  8358 ;; This function uses a non-reentrant model
  8359 ;;
  8360                           
  8361                           
  8362                           ;psect for function _CC2500_RxData
  8363  0B04                     _CC2500_RxData:	
  8364                           
  8365                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8366                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8367                           
  8368                           ;incstack = 0
  8369                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8370  0B04  0020               	movlb	0	; select bank0
  8371  0B05  180D               	btfsc	13,0	;volatile
  8372  0B06  0008               	return
  8373                           
  8374                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8375  0B07  303B               	movlw	59
  8376  0B08  3192  224B  318B   	fcall	_CC2500_ReadStatus
  8377                           
  8378                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8379  0B0B  0021               	movlb	1	; select bank1
  8380  0B0C  084E               	movf	_s_data^(0+128),w
  8381  0B0D  1903               	btfsc	3,2
  8382  0B0E  0008               	return
  8383                           
  8384                           ;CC2500_B1.c: 90: RC4 = 0;
  8385  0B0F  0020               	movlb	0	; select bank0
  8386  0B10  120E               	bcf	14,4	;volatile
  8387                           
  8388                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8389  0B11  30FF               	movlw	255
  8390  0B12  00F6               	movwf	??_CC2500_RxData
  8391  0B13  0876               	movf	??_CC2500_RxData,w
  8392  0B14  0021               	movlb	1	; select bank1
  8393  0B15  00C9               	movwf	_SPI0Buffer^(0+128)
  8394                           
  8395                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8396  0B16  2B1A               	goto	l9234
  8397  0B17                     l9232:	
  8398                           
  8399                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8400  0B17  319F  2765  318B   	fcall	_RF_Timeout_Counter
  8401  0B1A                     l9234:	
  8402  0B1A  0020               	movlb	0	; select bank0
  8403  0B1B  1D0E               	btfss	14,2	;volatile
  8404  0B1C  2B20               	goto	l9238
  8405  0B1D  0021               	movlb	1	; select bank1
  8406  0B1E  1F21               	btfss	(_RF1^(0+128)+1),6
  8407  0B1F  2B17               	goto	l9232
  8408  0B20                     l9238:	
  8409                           
  8410                           ;CC2500_B1.c: 95: };
  8411                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8412  0B20  319C  24BC  318B   	fcall	_setRF_TimeoutCleared
  8413                           
  8414                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8415  0B23  319F  27CF  318B   	fcall	_CC2500_WriteByte
  8416                           
  8417                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8418  0B26  3190  20F1  318B   	fcall	_CC2500_ReadByte
  8419                           
  8420                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8421  0B29  0021               	movlb	1	; select bank1
  8422  0B2A  0849               	movf	_SPI0Buffer^(0+128),w
  8423  0B2B  00F6               	movwf	??_CC2500_RxData
  8424  0B2C  0876               	movf	??_CC2500_RxData,w
  8425  0B2D  00C8               	movwf	_Rx_Length^(0+128)
  8426                           
  8427                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8428  0B2E  01F7               	clrf	CC2500_RxData@loop_f
  8429  0B2F                     l9254:	
  8430  0B2F  0848               	movf	_Rx_Length^(0+128),w
  8431  0B30  0277               	subwf	CC2500_RxData@loop_f,w
  8432  0B31  1803               	btfsc	3,0
  8433  0B32  2B45               	goto	l9256
  8434                           
  8435                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8436  0B33  3190  20F1  318B   	fcall	_CC2500_ReadByte
  8437                           
  8438                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8439  0B36  0021               	movlb	1	; select bank1
  8440  0B37  0849               	movf	_SPI0Buffer^(0+128),w
  8441  0B38  00F6               	movwf	??_CC2500_RxData
  8442  0B39  0877               	movf	CC2500_RxData@loop_f,w
  8443  0B3A  3EA0               	addlw	_RF_Data& (0+255)
  8444  0B3B  0086               	movwf	6
  8445  0B3C  3001               	movlw	1	; select bank3/4
  8446  0B3D  0087               	movwf	7
  8447  0B3E  0876               	movf	??_CC2500_RxData,w
  8448  0B3F  0081               	movwf	1
  8449  0B40  3001               	movlw	1
  8450  0B41  00F6               	movwf	??_CC2500_RxData
  8451  0B42  0876               	movf	??_CC2500_RxData,w
  8452  0B43  07F7               	addwf	CC2500_RxData@loop_f,f
  8453  0B44  2B2F               	goto	l9254
  8454  0B45                     l9256:	
  8455                           
  8456                           ;CC2500_B1.c: 104: }
  8457                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8458  0B45  3190  20F1  318B   	fcall	_CC2500_ReadByte
  8459                           
  8460                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8461  0B48  0021               	movlb	1	; select bank1
  8462  0B49  0849               	movf	_SPI0Buffer^(0+128),w
  8463  0B4A  00F6               	movwf	??_CC2500_RxData
  8464  0B4B  0876               	movf	??_CC2500_RxData,w
  8465  0B4C  00C7               	movwf	_RSSI^(0+128)
  8466                           
  8467                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8468  0B4D  3190  20F1  318B   	fcall	_CC2500_ReadByte
  8469                           
  8470                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8471  0B50  0021               	movlb	1	; select bank1
  8472  0B51  0849               	movf	_SPI0Buffer^(0+128),w
  8473  0B52  00F6               	movwf	??_CC2500_RxData
  8474  0B53  0876               	movf	??_CC2500_RxData,w
  8475  0B54  00C4               	movwf	_CRC^(0+128)
  8476                           
  8477                           ;CC2500_B1.c: 109: RC4 = 1;
  8478  0B55  0020               	movlb	0	; select bank0
  8479  0B56  160E               	bsf	14,4	;volatile
  8480                           
  8481                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8482  0B57  0021               	movlb	1	; select bank1
  8483  0B58  1BC4               	btfsc	_CRC^(0+128),7
  8484                           
  8485                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8486  0B59  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8487                           
  8488                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8489  0B5A  11A0               	bcf	_RF1^(0+128),3
  8490                           
  8491                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8492  0B5B  14A0               	bsf	_RF1^(0+128),1
  8493                           
  8494                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8495  0B5C  3036               	movlw	54
  8496  0B5D  3190  2086  318B   	fcall	_CC2500_WriteCommand
  8497                           
  8498                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8499  0B60  303A               	movlw	58
  8500  0B61  3190  2086         	fcall	_CC2500_WriteCommand
  8501  0B63  0021               	movlb	1	; select bank1
  8502  0B64  0008               	return
  8503  0B65                     __end_of_CC2500_RxData:	
  8504                           
  8505                           	psect	text39
  8506  124B                     __ptext39:	
  8507 ;; *************** function _CC2500_ReadStatus *****************
  8508 ;; Defined at:
  8509 ;;		line 308 in file "../src/CC2500_B1.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  status_addr     1    wreg     unsigned char 
  8512 ;; Auto vars:     Size  Location     Type
  8513 ;;  status_addr     1    5[COMMON] unsigned char 
  8514 ;; Return value:  Size  Location     Type
  8515 ;;		None               void
  8516 ;; Registers used:
  8517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8518 ;; Tracked objects:
  8519 ;;		On entry : 0/0
  8520 ;;		On exit  : 0/0
  8521 ;;		Unchanged: 0/0
  8522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8525 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8526 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8527 ;;Total ram usage:        2 bytes
  8528 ;; Hardware stack levels used:    1
  8529 ;; Hardware stack levels required when called:    4
  8530 ;; This function calls:
  8531 ;;		_CC2500_ReadByte
  8532 ;;		_CC2500_WriteByte
  8533 ;;		_RF_Timeout_Counter
  8534 ;;		_setRF_TimeoutCleared
  8535 ;; This function is called by:
  8536 ;;		_CC2500_RxData
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function _CC2500_ReadStatus
  8542  124B                     _CC2500_ReadStatus:	
  8543                           
  8544                           ;incstack = 0
  8545                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8546                           ;CC2500_ReadStatus@status_addr stored from wreg
  8547  124B  00F5               	movwf	CC2500_ReadStatus@status_addr
  8548                           
  8549                           ;CC2500_B1.c: 309: RC4 = 0;
  8550  124C  0020               	movlb	0	; select bank0
  8551  124D  120E               	bcf	14,4	;volatile
  8552                           
  8553                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8554  124E  0875               	movf	CC2500_ReadStatus@status_addr,w
  8555  124F  3EC0               	addlw	192
  8556  1250  00F4               	movwf	??_CC2500_ReadStatus
  8557  1251  0874               	movf	??_CC2500_ReadStatus,w
  8558  1252  0021               	movlb	1	; select bank1
  8559  1253  00C9               	movwf	_SPI0Buffer^(0+128)
  8560                           
  8561                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8562  1254  2A58               	goto	l9040
  8563  1255                     l9038:	
  8564                           
  8565                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8566  1255  319F  2765  3192   	fcall	_RF_Timeout_Counter
  8567  1258                     l9040:	
  8568  1258  0020               	movlb	0	; select bank0
  8569  1259  1D0E               	btfss	14,2	;volatile
  8570  125A  2A5E               	goto	l9044
  8571  125B  0021               	movlb	1	; select bank1
  8572  125C  1F21               	btfss	(_RF1^(0+128)+1),6
  8573  125D  2A55               	goto	l9038
  8574  125E                     l9044:	
  8575                           
  8576                           ;CC2500_B1.c: 314: };
  8577                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8578  125E  319C  24BC  3192   	fcall	_setRF_TimeoutCleared
  8579                           
  8580                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8581  1261  319F  27CF  3192   	fcall	_CC2500_WriteByte
  8582                           
  8583                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8584  1264  3190  20F1         	fcall	_CC2500_ReadByte
  8585                           
  8586                           ;CC2500_B1.c: 319: RC4 = 1;
  8587  1266  0020               	movlb	0	; select bank0
  8588  1267  160E               	bsf	14,4	;volatile
  8589                           
  8590                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8591  1268  0021               	movlb	1	; select bank1
  8592  1269  0849               	movf	_SPI0Buffer^(0+128),w
  8593  126A  00F4               	movwf	??_CC2500_ReadStatus
  8594  126B  0874               	movf	??_CC2500_ReadStatus,w
  8595  126C  00CE               	movwf	_s_data^(0+128)
  8596  126D  0008               	return
  8597  126E                     __end_of_CC2500_ReadStatus:	
  8598                           
  8599                           	psect	text40
  8600  10F1                     __ptext40:	
  8601 ;; *************** function _CC2500_ReadByte *****************
  8602 ;; Defined at:
  8603 ;;		line 242 in file "../src/CC2500_B1.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;  loop_b          1    3[COMMON] unsigned char 
  8608 ;; Return value:  Size  Location     Type
  8609 ;;		None               void
  8610 ;; Registers used:
  8611 ;;		wreg, status,2, status,0
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        2 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    3
  8624 ;; This function calls:
  8625 ;;		Nothing
  8626 ;; This function is called by:
  8627 ;;		_CC2500_RxData
  8628 ;;		_CC2500_ReadStatus
  8629 ;;		_CC2500_ReadREG
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _CC2500_ReadByte
  8635  10F1                     _CC2500_ReadByte:	
  8636                           
  8637                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8638                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8639                           
  8640                           ;incstack = 0
  8641                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8642  10F1  01F3               	clrf	CC2500_ReadByte@loop_b
  8643  10F2                     L3:	
  8644  10F2  3008               	movlw	8
  8645  10F3  0273               	subwf	CC2500_ReadByte@loop_b,w
  8646  10F4  1803               	btfsc	3,0
  8647  10F5  0008               	return
  8648                           
  8649                           ;CC2500_B1.c: 245: RC1 = 1;
  8650  10F6  0020               	movlb	0	; select bank0
  8651  10F7  148E               	bsf	14,1	;volatile
  8652                           
  8653                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8654  10F8  1003               	clrc
  8655  10F9  0021               	movlb	1	; select bank1
  8656  10FA  0DC9               	rlf	_SPI0Buffer^(0+128),f
  8657                           
  8658                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8659  10FB  0020               	movlb	0	; select bank0
  8660  10FC  1D0E               	btfss	14,2	;volatile
  8661  10FD  2901               	goto	l6418
  8662                           
  8663                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8664  10FE  0021               	movlb	1	; select bank1
  8665  10FF  1449               	bsf	_SPI0Buffer^(0+128),0
  8666  1100  2906               	goto	l6420
  8667  1101                     l6418:	
  8668                           
  8669                           ;CC2500_B1.c: 249: else
  8670                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8671  1101  30FE               	movlw	254
  8672  1102  00F2               	movwf	??_CC2500_ReadByte
  8673  1103  0872               	movf	??_CC2500_ReadByte,w
  8674  1104  0021               	movlb	1	; select bank1
  8675  1105  05C9               	andwf	_SPI0Buffer^(0+128),f
  8676  1106                     l6420:	
  8677                           
  8678                           ;CC2500_B1.c: 251: RC1 = 0;
  8679  1106  0020               	movlb	0	; select bank0
  8680  1107  108E               	bcf	14,1	;volatile
  8681  1108  3001               	movlw	1
  8682  1109  00F2               	movwf	??_CC2500_ReadByte
  8683  110A  0872               	movf	??_CC2500_ReadByte,w
  8684  110B  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8685  110C  28F2               	goto	L3
  8686  110D                     __end_of_CC2500_ReadByte:	
  8687                           
  8688                           	psect	text41
  8689  1F7A                     __ptext41:	
  8690 ;; *************** function _CC2500_PowerOnInitial *****************
  8691 ;; Defined at:
  8692 ;;		line 126 in file "../src/CC2500_B1.c"
  8693 ;; Parameters:    Size  Location     Type
  8694 ;;		None
  8695 ;; Auto vars:     Size  Location     Type
  8696 ;;		None
  8697 ;; Return value:  Size  Location     Type
  8698 ;;		None               void
  8699 ;; Registers used:
  8700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8701 ;; Tracked objects:
  8702 ;;		On entry : 0/0
  8703 ;;		On exit  : 0/0
  8704 ;;		Unchanged: 0/0
  8705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;Total ram usage:        0 bytes
  8711 ;; Hardware stack levels used:    1
  8712 ;; Hardware stack levels required when called:    6
  8713 ;; This function calls:
  8714 ;;		_CC2500_ClearRXFIFO
  8715 ;;		_CC2500_ClearTXFIFO
  8716 ;;		_CC2500_FrequencyCabr
  8717 ;;		_CC2500_InitPATable
  8718 ;;		_CC2500_InitSetREG
  8719 ;;		_CC2500_PowerRST
  8720 ;;		_CC2500_SIDLEMode
  8721 ;; This function is called by:
  8722 ;;		_main
  8723 ;;		_setRF_Main
  8724 ;; This function uses a non-reentrant model
  8725 ;;
  8726                           
  8727                           
  8728                           ;psect for function _CC2500_PowerOnInitial
  8729  1F7A                     _CC2500_PowerOnInitial:	
  8730                           
  8731                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8732                           
  8733                           ;incstack = 0
  8734                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8735  1F7A  3195  259C  319F   	fcall	_CC2500_PowerRST
  8736                           
  8737                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8738  1F7D  3193  2385  319F   	fcall	_CC2500_InitSetREG
  8739                           
  8740                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8741  1F80  3191  2147  319F   	fcall	_CC2500_InitPATable
  8742                           
  8743                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8744  1F83  319C  24C4  319F   	fcall	_CC2500_ClearTXFIFO
  8745                           
  8746                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8747  1F86  319C  24C0  319F   	fcall	_CC2500_ClearRXFIFO
  8748                           
  8749                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8750  1F89  319D  2544  319F   	fcall	_CC2500_FrequencyCabr
  8751                           
  8752                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8753  1F8C  319C  24C8         	fcall	_CC2500_SIDLEMode
  8754  1F8E  0008               	return
  8755  1F8F                     __end_of_CC2500_PowerOnInitial:	
  8756                           
  8757                           	psect	text42
  8758  1CC8                     __ptext42:	
  8759 ;; *************** function _CC2500_SIDLEMode *****************
  8760 ;; Defined at:
  8761 ;;		line 216 in file "../src/CC2500_B1.c"
  8762 ;; Parameters:    Size  Location     Type
  8763 ;;		None
  8764 ;; Auto vars:     Size  Location     Type
  8765 ;;		None
  8766 ;; Return value:  Size  Location     Type
  8767 ;;		None               void
  8768 ;; Registers used:
  8769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;Total ram usage:        0 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    5
  8782 ;; This function calls:
  8783 ;;		_CC2500_WriteCommand
  8784 ;; This function is called by:
  8785 ;;		_CC2500_PowerOnInitial
  8786 ;; This function uses a non-reentrant model
  8787 ;;
  8788                           
  8789                           
  8790                           ;psect for function _CC2500_SIDLEMode
  8791  1CC8                     _CC2500_SIDLEMode:	
  8792                           
  8793                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8797  1CC8  3036               	movlw	54
  8798  1CC9  3190  2086         	fcall	_CC2500_WriteCommand
  8799  1CCB  0008               	return
  8800  1CCC                     __end_of_CC2500_SIDLEMode:	
  8801                           
  8802                           	psect	text43
  8803  159C                     __ptext43:	
  8804 ;; *************** function _CC2500_PowerRST *****************
  8805 ;; Defined at:
  8806 ;;		line 139 in file "../src/CC2500_B1.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;		None
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;		None
  8811 ;; Return value:  Size  Location     Type
  8812 ;;		None               void
  8813 ;; Registers used:
  8814 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;Total ram usage:        1 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    4
  8827 ;; This function calls:
  8828 ;;		_CC2500_WriteByte
  8829 ;;		_DelayTime_1us
  8830 ;;		_RF_Timeout_Counter
  8831 ;;		_setRF_TimeoutCleared
  8832 ;; This function is called by:
  8833 ;;		_CC2500_PowerOnInitial
  8834 ;; This function uses a non-reentrant model
  8835 ;;
  8836                           
  8837                           
  8838                           ;psect for function _CC2500_PowerRST
  8839  159C                     _CC2500_PowerRST:	
  8840                           
  8841                           ;CC2500_B1.c: 140: RC1 = 0;
  8842                           
  8843                           ;incstack = 0
  8844                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8845  159C  0020               	movlb	0	; select bank0
  8846  159D  108E               	bcf	14,1	;volatile
  8847                           
  8848                           ;CC2500_B1.c: 141: RC0 = 0;
  8849  159E  100E               	bcf	14,0	;volatile
  8850                           
  8851                           ;CC2500_B1.c: 142: RC4 = 1;
  8852  159F  160E               	bsf	14,4	;volatile
  8853                           
  8854                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8855  15A0  300A               	movlw	10
  8856  15A1  00F2               	movwf	DelayTime_1us@count
  8857  15A2  3000               	movlw	0
  8858  15A3  00F3               	movwf	DelayTime_1us@count+1
  8859  15A4  3192  2293  3195   	fcall	_DelayTime_1us
  8860                           
  8861                           ;CC2500_B1.c: 144: RC4 = 0;
  8862  15A7  0020               	movlb	0	; select bank0
  8863  15A8  120E               	bcf	14,4	;volatile
  8864                           
  8865                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8866  15A9  300A               	movlw	10
  8867  15AA  00F2               	movwf	DelayTime_1us@count
  8868  15AB  3000               	movlw	0
  8869  15AC  00F3               	movwf	DelayTime_1us@count+1
  8870  15AD  3192  2293  3195   	fcall	_DelayTime_1us
  8871                           
  8872                           ;CC2500_B1.c: 146: RC4 = 1;
  8873  15B0  0020               	movlb	0	; select bank0
  8874  15B1  160E               	bsf	14,4	;volatile
  8875                           
  8876                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8877  15B2  3028               	movlw	40
  8878  15B3  00F2               	movwf	DelayTime_1us@count
  8879  15B4  3000               	movlw	0
  8880  15B5  00F3               	movwf	DelayTime_1us@count+1
  8881  15B6  3192  2293  3195   	fcall	_DelayTime_1us
  8882                           
  8883                           ;CC2500_B1.c: 148: RC4 = 0;
  8884  15B9  0020               	movlb	0	; select bank0
  8885  15BA  120E               	bcf	14,4	;volatile
  8886                           
  8887                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8888  15BB  3030               	movlw	48
  8889  15BC  00F8               	movwf	??_CC2500_PowerRST
  8890  15BD  0878               	movf	??_CC2500_PowerRST,w
  8891  15BE  0021               	movlb	1	; select bank1
  8892  15BF  00C9               	movwf	_SPI0Buffer^(0+128)
  8893                           
  8894                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8895  15C0  2DC4               	goto	l9068
  8896  15C1                     l9066:	
  8897                           
  8898                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8899  15C1  319F  2765  3195   	fcall	_RF_Timeout_Counter
  8900  15C4                     l9068:	
  8901  15C4  0020               	movlb	0	; select bank0
  8902  15C5  1D0E               	btfss	14,2	;volatile
  8903  15C6  2DCA               	goto	l9072
  8904  15C7  0021               	movlb	1	; select bank1
  8905  15C8  1F21               	btfss	(_RF1^(0+128)+1),6
  8906  15C9  2DC1               	goto	l9066
  8907  15CA                     l9072:	
  8908                           
  8909                           ;CC2500_B1.c: 152: };
  8910                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8911  15CA  319C  24BC  3195   	fcall	_setRF_TimeoutCleared
  8912                           
  8913                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8914  15CD  319F  27CF  3195   	fcall	_CC2500_WriteByte
  8915                           
  8916                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8917  15D0  2DD4               	goto	l9078
  8918  15D1                     l9076:	
  8919                           
  8920                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8921  15D1  319F  2765  3195   	fcall	_RF_Timeout_Counter
  8922  15D4                     l9078:	
  8923  15D4  0020               	movlb	0	; select bank0
  8924  15D5  1D0E               	btfss	14,2	;volatile
  8925  15D6  2DDA               	goto	l9082
  8926  15D7  0021               	movlb	1	; select bank1
  8927  15D8  1F21               	btfss	(_RF1^(0+128)+1),6
  8928  15D9  2DD1               	goto	l9076
  8929  15DA                     l9082:	
  8930                           
  8931                           ;CC2500_B1.c: 157: };
  8932                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8933  15DA  319C  24BC         	fcall	_setRF_TimeoutCleared
  8934                           
  8935                           ;CC2500_B1.c: 159: RC0 = 0;
  8936  15DC  0020               	movlb	0	; select bank0
  8937  15DD  100E               	bcf	14,0	;volatile
  8938                           
  8939                           ;CC2500_B1.c: 160: RC4 = 1;
  8940  15DE  160E               	bsf	14,4	;volatile
  8941  15DF  0008               	return
  8942  15E0                     __end_of_CC2500_PowerRST:	
  8943                           
  8944                           	psect	text44
  8945  1385                     __ptext44:	
  8946 ;; *************** function _CC2500_InitSetREG *****************
  8947 ;; Defined at:
  8948 ;;		line 166 in file "../src/CC2500_B1.c"
  8949 ;; Parameters:    Size  Location     Type
  8950 ;;		None
  8951 ;; Auto vars:     Size  Location     Type
  8952 ;;  loop_c          1    2[BANK0 ] unsigned char 
  8953 ;;  temp2           1    1[BANK0 ] unsigned char 
  8954 ;;  temp1           1    0[BANK0 ] unsigned char 
  8955 ;; Return value:  Size  Location     Type
  8956 ;;		None               void
  8957 ;; Registers used:
  8958 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8959 ;; Tracked objects:
  8960 ;;		On entry : 0/0
  8961 ;;		On exit  : 0/0
  8962 ;;		Unchanged: 0/0
  8963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;Total ram usage:        4 bytes
  8969 ;; Hardware stack levels used:    1
  8970 ;; Hardware stack levels required when called:    5
  8971 ;; This function calls:
  8972 ;;		_CC2500_WriteREG
  8973 ;; This function is called by:
  8974 ;;		_CC2500_PowerOnInitial
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           
  8979                           ;psect for function _CC2500_InitSetREG
  8980  1385                     _CC2500_InitSetREG:	
  8981                           
  8982                           ;CC2500_B1.c: 167: unsigned char loop_c;
  8983                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  8984                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  8985                           
  8986                           ;incstack = 0
  8987                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8988  1385  0020               	movlb	0	; select bank0
  8989  1386  01A2               	clrf	CC2500_InitSetREG@loop_c
  8990  1387                     L4:	
  8991  1387  302F               	movlw	47
  8992  1388  0222               	subwf	CC2500_InitSetREG@loop_c,w
  8993  1389  1803               	btfsc	3,0
  8994  138A  0008               	return
  8995                           
  8996                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  8997  138B  0822               	movf	CC2500_InitSetREG@loop_c,w
  8998  138C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8999  138D  0084               	movwf	4
  9000  138E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9001  138F  1803               	skipnc
  9002  1390  3E01               	addlw	1
  9003  1391  0085               	movwf	5
  9004  1392  0800               	movf	0,w	;code access
  9005  1393  00F7               	movwf	??_CC2500_InitSetREG
  9006  1394  0877               	movf	??_CC2500_InitSetREG,w
  9007  1395  00A0               	movwf	CC2500_InitSetREG@temp1
  9008                           
  9009                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9010  1396  0822               	movf	CC2500_InitSetREG@loop_c,w
  9011  1397  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9012  1398  0084               	movwf	4
  9013  1399  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9014  139A  1803               	skipnc
  9015  139B  3E01               	addlw	1
  9016  139C  0085               	movwf	5
  9017  139D  0800               	movf	0,w	;code access
  9018  139E  00F7               	movwf	??_CC2500_InitSetREG
  9019  139F  0877               	movf	??_CC2500_InitSetREG,w
  9020  13A0  00A1               	movwf	CC2500_InitSetREG@temp2
  9021                           
  9022                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9023  13A1  0821               	movf	CC2500_InitSetREG@temp2,w
  9024  13A2  00F7               	movwf	??_CC2500_InitSetREG
  9025  13A3  0877               	movf	??_CC2500_InitSetREG,w
  9026  13A4  00F4               	movwf	CC2500_WriteREG@value
  9027  13A5  0820               	movf	CC2500_InitSetREG@temp1,w
  9028  13A6  3192  2229  3193   	fcall	_CC2500_WriteREG
  9029  13A9  3001               	movlw	1
  9030  13AA  00F7               	movwf	??_CC2500_InitSetREG
  9031  13AB  0877               	movf	??_CC2500_InitSetREG,w
  9032  13AC  0020               	movlb	0	; select bank0
  9033  13AD  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9034  13AE  2B87               	goto	L4
  9035  13AF                     __end_of_CC2500_InitSetREG:	
  9036                           
  9037                           	psect	text45
  9038  1147                     __ptext45:	
  9039 ;; *************** function _CC2500_InitPATable *****************
  9040 ;; Defined at:
  9041 ;;		line 181 in file "../src/CC2500_B1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;		None
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  loop_d          1    9[COMMON] unsigned char 
  9046 ;;  temp            1    8[COMMON] unsigned char 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        3 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    5
  9063 ;; This function calls:
  9064 ;;		_CC2500_WriteREG
  9065 ;; This function is called by:
  9066 ;;		_CC2500_PowerOnInitial
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _CC2500_InitPATable
  9072  1147                     _CC2500_InitPATable:	
  9073                           
  9074                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9075                           ;CC2500_B1.c: 183: unsigned char temp;
  9076                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9077                           
  9078                           ;incstack = 0
  9079                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9080  1147  01F9               	clrf	CC2500_InitPATable@loop_d
  9081  1148                     L5:	
  9082  1148  3008               	movlw	8
  9083  1149  0279               	subwf	CC2500_InitPATable@loop_d,w
  9084  114A  1803               	btfsc	3,0
  9085  114B  0008               	return
  9086                           
  9087                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9088  114C  0879               	movf	CC2500_InitPATable@loop_d,w
  9089  114D  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9090  114E  0084               	movwf	4
  9091  114F  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9092  1150  1803               	skipnc
  9093  1151  3E01               	addlw	1
  9094  1152  0085               	movwf	5
  9095  1153  0800               	movf	0,w	;code access
  9096  1154  00F7               	movwf	??_CC2500_InitPATable
  9097  1155  0877               	movf	??_CC2500_InitPATable,w
  9098  1156  00F8               	movwf	CC2500_InitPATable@temp
  9099                           
  9100                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9101  1157  0878               	movf	CC2500_InitPATable@temp,w
  9102  1158  00F7               	movwf	??_CC2500_InitPATable
  9103  1159  0877               	movf	??_CC2500_InitPATable,w
  9104  115A  00F4               	movwf	CC2500_WriteREG@value
  9105  115B  303E               	movlw	62
  9106  115C  3192  2229  3191   	fcall	_CC2500_WriteREG
  9107  115F  3001               	movlw	1
  9108  1160  00F7               	movwf	??_CC2500_InitPATable
  9109  1161  0877               	movf	??_CC2500_InitPATable,w
  9110  1162  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9111  1163  2948               	goto	L5
  9112  1164                     __end_of_CC2500_InitPATable:	
  9113                           
  9114                           	psect	text46
  9115  1229                     __ptext46:	
  9116 ;; *************** function _CC2500_WriteREG *****************
  9117 ;; Defined at:
  9118 ;;		line 258 in file "../src/CC2500_B1.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;  w_addr          1    wreg     unsigned char 
  9121 ;;  value           1    4[COMMON] unsigned char 
  9122 ;; Auto vars:     Size  Location     Type
  9123 ;;  w_addr          1    6[COMMON] unsigned char 
  9124 ;; Return value:  Size  Location     Type
  9125 ;;		None               void
  9126 ;; Registers used:
  9127 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9128 ;; Tracked objects:
  9129 ;;		On entry : 0/0
  9130 ;;		On exit  : 0/0
  9131 ;;		Unchanged: 0/0
  9132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9133 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;Total ram usage:        3 bytes
  9138 ;; Hardware stack levels used:    1
  9139 ;; Hardware stack levels required when called:    4
  9140 ;; This function calls:
  9141 ;;		_CC2500_WriteByte
  9142 ;;		_RF_Timeout_Counter
  9143 ;;		_setRF_TimeoutCleared
  9144 ;; This function is called by:
  9145 ;;		_CC2500_InitSetREG
  9146 ;;		_CC2500_InitPATable
  9147 ;; This function uses a non-reentrant model
  9148 ;;
  9149                           
  9150                           
  9151                           ;psect for function _CC2500_WriteREG
  9152  1229                     _CC2500_WriteREG:	
  9153                           
  9154                           ;incstack = 0
  9155                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9156                           ;CC2500_WriteREG@w_addr stored from wreg
  9157  1229  00F6               	movwf	CC2500_WriteREG@w_addr
  9158                           
  9159                           ;CC2500_B1.c: 259: RC4 = 0;
  9160  122A  0020               	movlb	0	; select bank0
  9161  122B  120E               	bcf	14,4	;volatile
  9162                           
  9163                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9164  122C  0876               	movf	CC2500_WriteREG@w_addr,w
  9165  122D  00F5               	movwf	??_CC2500_WriteREG
  9166  122E  0875               	movf	??_CC2500_WriteREG,w
  9167  122F  0021               	movlb	1	; select bank1
  9168  1230  00C9               	movwf	_SPI0Buffer^(0+128)
  9169                           
  9170                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9171  1231  2A35               	goto	l8988
  9172  1232                     l8986:	
  9173                           
  9174                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9175  1232  319F  2765  3192   	fcall	_RF_Timeout_Counter
  9176  1235                     l8988:	
  9177  1235  0020               	movlb	0	; select bank0
  9178  1236  1D0E               	btfss	14,2	;volatile
  9179  1237  2A3B               	goto	l8992
  9180  1238  0021               	movlb	1	; select bank1
  9181  1239  1F21               	btfss	(_RF1^(0+128)+1),6
  9182  123A  2A32               	goto	l8986
  9183  123B                     l8992:	
  9184                           
  9185                           ;CC2500_B1.c: 263: };
  9186                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9187  123B  319C  24BC  3192   	fcall	_setRF_TimeoutCleared
  9188                           
  9189                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9190  123E  319F  27CF  3192   	fcall	_CC2500_WriteByte
  9191                           
  9192                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9193  1241  0874               	movf	CC2500_WriteREG@value,w
  9194  1242  00F5               	movwf	??_CC2500_WriteREG
  9195  1243  0875               	movf	??_CC2500_WriteREG,w
  9196  1244  0021               	movlb	1	; select bank1
  9197  1245  00C9               	movwf	_SPI0Buffer^(0+128)
  9198                           
  9199                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9200  1246  319F  27CF         	fcall	_CC2500_WriteByte
  9201                           
  9202                           ;CC2500_B1.c: 269: RC4 = 1;
  9203  1248  0020               	movlb	0	; select bank0
  9204  1249  160E               	bsf	14,4	;volatile
  9205  124A  0008               	return
  9206  124B                     __end_of_CC2500_WriteREG:	
  9207                           
  9208                           	psect	text47
  9209  1D44                     __ptext47:	
  9210 ;; *************** function _CC2500_FrequencyCabr *****************
  9211 ;; Defined at:
  9212 ;;		line 208 in file "../src/CC2500_B1.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;		None
  9215 ;; Auto vars:     Size  Location     Type
  9216 ;;		None
  9217 ;; Return value:  Size  Location     Type
  9218 ;;		None               void
  9219 ;; Registers used:
  9220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9221 ;; Tracked objects:
  9222 ;;		On entry : 0/0
  9223 ;;		On exit  : 0/0
  9224 ;;		Unchanged: 0/0
  9225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9230 ;;Total ram usage:        0 bytes
  9231 ;; Hardware stack levels used:    1
  9232 ;; Hardware stack levels required when called:    5
  9233 ;; This function calls:
  9234 ;;		_CC2500_WriteCommand
  9235 ;;		_DelayTime_1us
  9236 ;; This function is called by:
  9237 ;;		_CC2500_PowerOnInitial
  9238 ;; This function uses a non-reentrant model
  9239 ;;
  9240                           
  9241                           
  9242                           ;psect for function _CC2500_FrequencyCabr
  9243  1D44                     _CC2500_FrequencyCabr:	
  9244                           
  9245                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9246                           
  9247                           ;incstack = 0
  9248                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9249  1D44  3033               	movlw	51
  9250  1D45  3190  2086  319D   	fcall	_CC2500_WriteCommand
  9251                           
  9252                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9253  1D48  30E8               	movlw	232
  9254  1D49  00F2               	movwf	DelayTime_1us@count
  9255  1D4A  3003               	movlw	3
  9256  1D4B  00F3               	movwf	DelayTime_1us@count+1
  9257  1D4C  3192  2293         	fcall	_DelayTime_1us
  9258  1D4E  0008               	return
  9259  1D4F                     __end_of_CC2500_FrequencyCabr:	
  9260                           
  9261                           	psect	text48
  9262  1293                     __ptext48:	
  9263 ;; *************** function _DelayTime_1us *****************
  9264 ;; Defined at:
  9265 ;;		line 327 in file "../src/CC2500_B1.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  count           2    2[COMMON] int 
  9268 ;; Auto vars:     Size  Location     Type
  9269 ;;  j               2    6[COMMON] unsigned int 
  9270 ;;  i               2    4[COMMON] unsigned int 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, status,2
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        6 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    3
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_CC2500_PowerRST
  9291 ;;		_CC2500_FrequencyCabr
  9292 ;; This function uses a non-reentrant model
  9293 ;;
  9294                           
  9295                           
  9296                           ;psect for function _DelayTime_1us
  9297  1293                     _DelayTime_1us:	
  9298                           
  9299                           ;CC2500_B1.c: 328: unsigned int i, j;
  9300                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9301                           
  9302                           ;incstack = 0
  9303                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9304  1293  3001               	movlw	1
  9305  1294  00F4               	movwf	DelayTime_1us@i
  9306  1295  3000               	movlw	0
  9307  1296  00F5               	movwf	DelayTime_1us@i+1
  9308  1297                     l363:	
  9309  1297  0873               	movf	DelayTime_1us@count+1,w
  9310  1298  0275               	subwf	DelayTime_1us@i+1,w
  9311  1299  1D03               	skipz
  9312  129A  2A9D               	goto	u5465
  9313  129B  0872               	movf	DelayTime_1us@count,w
  9314  129C  0274               	subwf	DelayTime_1us@i,w
  9315  129D                     u5465:	
  9316  129D  1803               	btfsc	3,0
  9317  129E  0008               	return
  9318                           
  9319                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9320  129F  01F6               	clrf	DelayTime_1us@j
  9321  12A0  01F7               	clrf	DelayTime_1us@j+1
  9322  12A1  3000               	movlw	0
  9323  12A2  0277               	subwf	DelayTime_1us@j+1,w
  9324  12A3  3002               	movlw	2
  9325  12A4  1903               	skipnz
  9326  12A5  0276               	subwf	DelayTime_1us@j,w
  9327  12A6  1803               	btfsc	3,0
  9328  12A7  2AB3               	goto	l6434
  9329  12A8                     l6432:	
  9330  12A8  3001               	movlw	1
  9331  12A9  07F6               	addwf	DelayTime_1us@j,f
  9332  12AA  3000               	movlw	0
  9333  12AB  3DF7               	addwfc	DelayTime_1us@j+1,f
  9334  12AC  3000               	movlw	0
  9335  12AD  0277               	subwf	DelayTime_1us@j+1,w
  9336  12AE  3002               	movlw	2
  9337  12AF  1903               	skipnz
  9338  12B0  0276               	subwf	DelayTime_1us@j,w
  9339  12B1  1C03               	skipc
  9340  12B2  2AA8               	goto	l6432
  9341  12B3                     l6434:	
  9342  12B3  3001               	movlw	1
  9343  12B4  07F4               	addwf	DelayTime_1us@i,f
  9344  12B5  3000               	movlw	0
  9345  12B6  3DF5               	addwfc	DelayTime_1us@i+1,f
  9346  12B7  2A97               	goto	l363
  9347  12B8                     __end_of_DelayTime_1us:	
  9348                           
  9349                           	psect	text49
  9350  1CC4                     __ptext49:	
  9351 ;; *************** function _CC2500_ClearTXFIFO *****************
  9352 ;; Defined at:
  9353 ;;		line 194 in file "../src/CC2500_B1.c"
  9354 ;; Parameters:    Size  Location     Type
  9355 ;;		None
  9356 ;; Auto vars:     Size  Location     Type
  9357 ;;		None
  9358 ;; Return value:  Size  Location     Type
  9359 ;;		None               void
  9360 ;; Registers used:
  9361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9362 ;; Tracked objects:
  9363 ;;		On entry : 0/0
  9364 ;;		On exit  : 0/0
  9365 ;;		Unchanged: 0/0
  9366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9370 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;Total ram usage:        0 bytes
  9372 ;; Hardware stack levels used:    1
  9373 ;; Hardware stack levels required when called:    5
  9374 ;; This function calls:
  9375 ;;		_CC2500_WriteCommand
  9376 ;; This function is called by:
  9377 ;;		_CC2500_PowerOnInitial
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           
  9382                           ;psect for function _CC2500_ClearTXFIFO
  9383  1CC4                     _CC2500_ClearTXFIFO:	
  9384                           
  9385                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9389  1CC4  303B               	movlw	59
  9390  1CC5  3190  2086         	fcall	_CC2500_WriteCommand
  9391  1CC7  0008               	return
  9392  1CC8                     __end_of_CC2500_ClearTXFIFO:	
  9393                           
  9394                           	psect	text50
  9395  1CC0                     __ptext50:	
  9396 ;; *************** function _CC2500_ClearRXFIFO *****************
  9397 ;; Defined at:
  9398 ;;		line 201 in file "../src/CC2500_B1.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;		None
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;		None               void
  9405 ;; Registers used:
  9406 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/0
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9412 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9416 ;;Total ram usage:        0 bytes
  9417 ;; Hardware stack levels used:    1
  9418 ;; Hardware stack levels required when called:    5
  9419 ;; This function calls:
  9420 ;;		_CC2500_WriteCommand
  9421 ;; This function is called by:
  9422 ;;		_CC2500_PowerOnInitial
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function _CC2500_ClearRXFIFO
  9428  1CC0                     _CC2500_ClearRXFIFO:	
  9429                           
  9430                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9434  1CC0  303A               	movlw	58
  9435  1CC1  3190  2086         	fcall	_CC2500_WriteCommand
  9436  1CC3  0008               	return
  9437  1CC4                     __end_of_CC2500_ClearRXFIFO:	
  9438                           
  9439                           	psect	text51
  9440  1086                     __ptext51:	
  9441 ;; *************** function _CC2500_WriteCommand *****************
  9442 ;; Defined at:
  9443 ;;		line 292 in file "../src/CC2500_B1.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;  command         1    wreg     unsigned char 
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  command         1    5[COMMON] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;		None               void
  9450 ;; Registers used:
  9451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;Total ram usage:        2 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    4
  9464 ;; This function calls:
  9465 ;;		_CC2500_WriteByte
  9466 ;;		_RF_Timeout_Counter
  9467 ;;		_setRF_TimeoutCleared
  9468 ;; This function is called by:
  9469 ;;		_CC2500_TxData
  9470 ;;		_CC2500_RxData
  9471 ;;		_CC2500_ClearTXFIFO
  9472 ;;		_CC2500_ClearRXFIFO
  9473 ;;		_CC2500_FrequencyCabr
  9474 ;;		_CC2500_SIDLEMode
  9475 ;;		_setRF_Main
  9476 ;;		_RF_RxDisable
  9477 ;; This function uses a non-reentrant model
  9478 ;;
  9479                           
  9480                           
  9481                           ;psect for function _CC2500_WriteCommand
  9482  1086                     _CC2500_WriteCommand:	
  9483                           
  9484                           ;incstack = 0
  9485                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9486                           ;CC2500_WriteCommand@command stored from wreg
  9487  1086  00F5               	movwf	CC2500_WriteCommand@command
  9488                           
  9489                           ;CC2500_B1.c: 293: RC4 = 0;
  9490  1087  0020               	movlb	0	; select bank0
  9491  1088  120E               	bcf	14,4	;volatile
  9492                           
  9493                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9494  1089  0875               	movf	CC2500_WriteCommand@command,w
  9495  108A  00F4               	movwf	??_CC2500_WriteCommand
  9496  108B  0874               	movf	??_CC2500_WriteCommand,w
  9497  108C  0021               	movlb	1	; select bank1
  9498  108D  00C9               	movwf	_SPI0Buffer^(0+128)
  9499                           
  9500                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9501  108E  2892               	goto	l8972
  9502  108F                     l8970:	
  9503                           
  9504                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9505  108F  319F  2765  3190   	fcall	_RF_Timeout_Counter
  9506  1092                     l8972:	
  9507  1092  0020               	movlb	0	; select bank0
  9508  1093  1D0E               	btfss	14,2	;volatile
  9509  1094  2898               	goto	l8976
  9510  1095  0021               	movlb	1	; select bank1
  9511  1096  1F21               	btfss	(_RF1^(0+128)+1),6
  9512  1097  288F               	goto	l8970
  9513  1098                     l8976:	
  9514                           
  9515                           ;CC2500_B1.c: 298: };
  9516                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9517  1098  319C  24BC  3190   	fcall	_setRF_TimeoutCleared
  9518                           
  9519                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9520  109B  319F  27CF         	fcall	_CC2500_WriteByte
  9521                           
  9522                           ;CC2500_B1.c: 302: RC4 = 1;
  9523  109D  0020               	movlb	0	; select bank0
  9524  109E  160E               	bsf	14,4	;volatile
  9525  109F  0008               	return
  9526  10A0                     __end_of_CC2500_WriteCommand:	
  9527                           
  9528                           	psect	text52
  9529  1CBC                     __ptext52:	
  9530 ;; *************** function _setRF_TimeoutCleared *****************
  9531 ;; Defined at:
  9532 ;;		line 143 in file "../src/RF_Control_B1.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;		None               void
  9539 ;; Registers used:
  9540 ;;		status,2
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        0 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    3
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_CC2500_TxData
  9557 ;;		_CC2500_RxData
  9558 ;;		_CC2500_PowerRST
  9559 ;;		_CC2500_WriteREG
  9560 ;;		_CC2500_WriteCommand
  9561 ;;		_CC2500_ReadStatus
  9562 ;;		_CC2500_ReadREG
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           
  9567                           ;psect for function _setRF_TimeoutCleared
  9568  1CBC                     _setRF_TimeoutCleared:	
  9569                           
  9570                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9571                           
  9572                           ;incstack = 0
  9573                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9574  1CBC  0021               	movlb	1	; select bank1
  9575  1CBD  01AC               	clrf	(_RF1^(0+128)+12)
  9576  1CBE  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9577  1CBF  0008               	return
  9578  1CC0                     __end_of_setRF_TimeoutCleared:	
  9579                           
  9580                           	psect	text53
  9581  1F65                     __ptext53:	
  9582 ;; *************** function _RF_Timeout_Counter *****************
  9583 ;; Defined at:
  9584 ;;		line 135 in file "../src/RF_Control_B1.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;		None
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;		None
  9589 ;; Return value:  Size  Location     Type
  9590 ;;		None               void
  9591 ;; Registers used:
  9592 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:        0 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    3
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_CC2500_TxData
  9609 ;;		_CC2500_RxData
  9610 ;;		_CC2500_PowerRST
  9611 ;;		_CC2500_WriteREG
  9612 ;;		_CC2500_WriteCommand
  9613 ;;		_CC2500_ReadStatus
  9614 ;;		_CC2500_ReadREG
  9615 ;; This function uses a non-reentrant model
  9616 ;;
  9617                           
  9618                           
  9619                           ;psect for function _RF_Timeout_Counter
  9620  1F65                     _RF_Timeout_Counter:	
  9621                           
  9622                           ;RF_Control_B1.c: 136: RF1.TimeoutCount++;
  9623                           
  9624                           ;incstack = 0
  9625                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9626  1F65  3001               	movlw	1
  9627  1F66  0021               	movlb	1	; select bank1
  9628  1F67  07AC               	addwf	(_RF1^(0+128)+12),f
  9629  1F68  3000               	movlw	0
  9630  1F69  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9631                           
  9632                           ;RF_Control_B1.c: 137: if (RF1.TimeoutCount == 25000) {
  9633  1F6A  300C               	movlw	12
  9634  1F6B  3EA0               	addlw	_RF1& (0+255)
  9635  1F6C  0086               	movwf	6
  9636  1F6D  0187               	clrf	7
  9637  1F6E  3F40               	moviw [0]fsr1
  9638  1F6F  3AA8               	xorlw	168
  9639  1F70  1D03               	skipz
  9640  1F71  2F74               	goto	u9795
  9641  1F72  3F41               	moviw [1]fsr1
  9642  1F73  3A61               	xorlw	97
  9643  1F74                     u9795:	
  9644  1F74  1D03               	skipz
  9645  1F75  0008               	return
  9646                           
  9647                           ;RF_Control_B1.c: 138: RF1.TimeoutCount = 0;
  9648  1F76  01AC               	clrf	(_RF1^(0+128)+12)
  9649  1F77  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9650                           
  9651                           ;RF_Control_B1.c: 139: RF1.Timeout = 1;
  9652  1F78  1721               	bsf	(_RF1^(0+128)+1),6
  9653  1F79  0008               	return
  9654  1F7A                     __end_of_RF_Timeout_Counter:	
  9655                           
  9656                           	psect	text54
  9657  1FCF                     __ptext54:	
  9658 ;; *************** function _CC2500_WriteByte *****************
  9659 ;; Defined at:
  9660 ;;		line 226 in file "../src/CC2500_B1.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;		None
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  loop_a          1    3[COMMON] unsigned char 
  9665 ;; Return value:  Size  Location     Type
  9666 ;;		None               void
  9667 ;; Registers used:
  9668 ;;		wreg, status,2, status,0
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9678 ;;Total ram usage:        2 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    3
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_CC2500_TxData
  9685 ;;		_CC2500_RxData
  9686 ;;		_CC2500_PowerRST
  9687 ;;		_CC2500_WriteREG
  9688 ;;		_CC2500_WriteCommand
  9689 ;;		_CC2500_ReadStatus
  9690 ;;		_CC2500_ReadREG
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           
  9695                           ;psect for function _CC2500_WriteByte
  9696  1FCF                     _CC2500_WriteByte:	
  9697                           
  9698                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9699                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9700                           
  9701                           ;incstack = 0
  9702                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9703  1FCF  01F3               	clrf	CC2500_WriteByte@loop_a
  9704  1FD0                     L6:	
  9705  1FD0  3008               	movlw	8
  9706  1FD1  0273               	subwf	CC2500_WriteByte@loop_a,w
  9707  1FD2  1803               	btfsc	3,0
  9708  1FD3  0008               	return
  9709                           
  9710                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9711  1FD4  0021               	movlb	1	; select bank1
  9712  1FD5  1FC9               	btfss	_SPI0Buffer^(0+128),7
  9713  1FD6  2FDA               	goto	l319
  9714                           
  9715                           ;CC2500_B1.c: 230: RC0 = 1;
  9716  1FD7  0020               	movlb	0	; select bank0
  9717  1FD8  140E               	bsf	14,0	;volatile
  9718  1FD9  2FDC               	goto	l320
  9719  1FDA                     l319:	
  9720                           
  9721                           ;CC2500_B1.c: 231: else
  9722                           ;CC2500_B1.c: 232: RC0 = 0;
  9723  1FDA  0020               	movlb	0	; select bank0
  9724  1FDB  100E               	bcf	14,0	;volatile
  9725  1FDC                     l320:	
  9726                           
  9727                           ;CC2500_B1.c: 233: RC1 = 1;
  9728  1FDC  148E               	bsf	14,1	;volatile
  9729                           
  9730                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9731  1FDD  1003               	clrc
  9732  1FDE  0021               	movlb	1	; select bank1
  9733  1FDF  0DC9               	rlf	_SPI0Buffer^(0+128),f
  9734                           
  9735                           ;CC2500_B1.c: 235: RC1 = 0;
  9736  1FE0  0020               	movlb	0	; select bank0
  9737  1FE1  108E               	bcf	14,1	;volatile
  9738  1FE2  3001               	movlw	1
  9739  1FE3  00F2               	movwf	??_CC2500_WriteByte
  9740  1FE4  0872               	movf	??_CC2500_WriteByte,w
  9741  1FE5  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9742  1FE6  2FD0               	goto	L6
  9743  1FE7                     __end_of_CC2500_WriteByte:	
  9744                           
  9745                           	psect	text55
  9746  1CAC                     __ptext55:	
  9747 ;; *************** function _RF_Initialization *****************
  9748 ;; Defined at:
  9749 ;;		line 9 in file "../src/RF_Control_B1.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;		None               void
  9756 ;; Registers used:
  9757 ;;		wreg, status,2, status,0, pclath, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    4
  9770 ;; This function calls:
  9771 ;;		_setRF_Initialization
  9772 ;; This function is called by:
  9773 ;;		_main
  9774 ;; This function uses a non-reentrant model
  9775 ;;
  9776                           
  9777                           
  9778                           ;psect for function _RF_Initialization
  9779  1CAC                     _RF_Initialization:	
  9780                           
  9781                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9782                           
  9783                           ;incstack = 0
  9784                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9785  1CAC  319D  2524         	fcall	_setRF_Initialization
  9786  1CAE  0008               	return
  9787  1CAF                     __end_of_RF_Initialization:	
  9788                           
  9789                           	psect	text56
  9790  1D24                     __ptext56:	
  9791 ;; *************** function _setRF_Initialization *****************
  9792 ;; Defined at:
  9793 ;;		line 17 in file "../src/RF_Control_B1.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;		None               void
  9800 ;; Registers used:
  9801 ;;		wreg
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        1 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:    3
  9814 ;; This function calls:
  9815 ;;		Nothing
  9816 ;; This function is called by:
  9817 ;;		_RF_Initialization
  9818 ;; This function uses a non-reentrant model
  9819 ;;
  9820                           
  9821                           
  9822                           ;psect for function _setRF_Initialization
  9823  1D24                     _setRF_Initialization:	
  9824                           
  9825                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9826                           
  9827                           ;incstack = 0
  9828                           ; Regs used in _setRF_Initialization: [wreg]
  9829  1D24  3015               	movlw	21
  9830  1D25  00F2               	movwf	??_setRF_Initialization
  9831  1D26  0872               	movf	??_setRF_Initialization,w
  9832  1D27  0021               	movlb	1	; select bank1
  9833  1D28  00CB               	movwf	_Tx_Length^(0+128)
  9834                           
  9835                           ;RF_Control_B1.c: 20: RF1.RunTime = 100;
  9836  1D29  3064               	movlw	100
  9837  1D2A  00A7               	movwf	(_RF1^(0+128)+7)
  9838  1D2B  3000               	movlw	0
  9839  1D2C  00A8               	movwf	(_RF1^(0+128)+8)
  9840  1D2D  0008               	return
  9841  1D2E                     __end_of_setRF_Initialization:	
  9842                           
  9843                           	psect	text57
  9844  1EEC                     __ptext57:	
  9845 ;; *************** function _Mcu_Initialization *****************
  9846 ;; Defined at:
  9847 ;;		line 30 in file "../src/MCU_B1.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;		None
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;		None
  9852 ;; Return value:  Size  Location     Type
  9853 ;;		None               void
  9854 ;; Registers used:
  9855 ;;		wreg, status,2, status,0, pclath, cstack
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;Total ram usage:        0 bytes
  9866 ;; Hardware stack levels used:    1
  9867 ;; Hardware stack levels required when called:    4
  9868 ;; This function calls:
  9869 ;;		_ADC_Set
  9870 ;;		_Fosc_Set
  9871 ;;		_IOC_Set
  9872 ;;		_IO_Set
  9873 ;;		_TMR1_Set
  9874 ;;		_WDT_Set
  9875 ;; This function is called by:
  9876 ;;		_main
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function _Mcu_Initialization
  9882  1EEC                     _Mcu_Initialization:	
  9883                           
  9884                           ;MCU_B1.c: 32: Fosc_Set();
  9885                           
  9886                           ;incstack = 0
  9887                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9888  1EEC  319C  24B8  319E   	fcall	_Fosc_Set
  9889                           
  9890                           ;MCU_B1.c: 34: IO_Set();
  9891  1EEF  3190  206C  319E   	fcall	_IO_Set
  9892                           
  9893                           ;MCU_B1.c: 36: ;;
  9894                           ;MCU_B1.c: 38: TMR1_Set();
  9895  1EF2  319D  2596  319E   	fcall	_TMR1_Set
  9896                           
  9897                           ;MCU_B1.c: 40: ADC_Set();
  9898  1EF5  319C  24EB  319E   	fcall	_ADC_Set
  9899                           
  9900                           ;MCU_B1.c: 42: ;;
  9901                           ;MCU_B1.c: 44: ;;
  9902                           ;MCU_B1.c: 46: IOC_Set();
  9903  1EF8  319D  258A  319E   	fcall	_IOC_Set
  9904                           
  9905                           ;MCU_B1.c: 48: ;;
  9906                           ;MCU_B1.c: 50: ;;
  9907                           ;MCU_B1.c: 52: WDT_Set();
  9908  1EFB  319D  251B         	fcall	_WDT_Set
  9909  1EFD  0008               	return
  9910  1EFE                     __end_of_Mcu_Initialization:	
  9911                           
  9912                           	psect	text58
  9913  1D1B                     __ptext58:	
  9914 ;; *************** function _WDT_Set *****************
  9915 ;; Defined at:
  9916 ;;		line 1092 in file "../src/MCU_B1.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;		None
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;		None               void
  9923 ;; Registers used:
  9924 ;;		wreg
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;Total ram usage:        1 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    3
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		_Mcu_Initialization
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           
  9945                           ;psect for function _WDT_Set
  9946  1D1B                     _WDT_Set:	
  9947                           
  9948                           ;MCU_B1.c: 1099: WDTCON = 0b00010111;;
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in _WDT_Set: [wreg]
  9952  1D1B  3017               	movlw	23
  9953  1D1C  0021               	movlb	1	; select bank1
  9954  1D1D  0097               	movwf	23	;volatile
  9955                           
  9956                           ;MCU_B1.c: 1101: WDT.Enable = 1;
  9957  1D1E  1442               	bsf	_WDT^(0+128),0
  9958                           
  9959                           ;MCU_B1.c: 1102: WDT.Timer = 10;
  9960  1D1F  300A               	movlw	10
  9961  1D20  00F2               	movwf	??_WDT_Set
  9962  1D21  0872               	movf	??_WDT_Set,w
  9963  1D22  00C3               	movwf	(_WDT^(0+128)+1)
  9964  1D23  0008               	return
  9965  1D24                     __end_of_WDT_Set:	
  9966                           
  9967                           	psect	text59
  9968  1D96                     __ptext59:	
  9969 ;; *************** function _TMR1_Set *****************
  9970 ;; Defined at:
  9971 ;;		line 221 in file "../src/MCU_B1.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;		None               void
  9978 ;; Registers used:
  9979 ;;		wreg
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    3
  9992 ;; This function calls:
  9993 ;;		Nothing
  9994 ;; This function is called by:
  9995 ;;		_Mcu_Initialization
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           
 10000                           ;psect for function _TMR1_Set
 10001  1D96                     _TMR1_Set:	
 10002                           
 10003                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in _TMR1_Set: [wreg]
 10007  1D96  3041               	movlw	65
 10008  1D97  0020               	movlb	0	; select bank0
 10009  1D98  0098               	movwf	24	;volatile
 10010                           
 10011                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10012  1D99  30FA               	movlw	250
 10013  1D9A  0097               	movwf	23	;volatile
 10014                           
 10015                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10016  1D9B  3038               	movlw	56
 10017  1D9C  0096               	movwf	22	;volatile
 10018                           
 10019                           ;MCU_B1.c: 225: TMR1IE = 1;
 10020  1D9D  0021               	movlb	1	; select bank1
 10021  1D9E  1411               	bsf	17,0	;volatile
 10022                           
 10023                           ;MCU_B1.c: 226: PEIE = 1;
 10024  1D9F  170B               	bsf	11,6	;volatile
 10025                           
 10026                           ;MCU_B1.c: 227: GIE = 1;
 10027  1DA0  178B               	bsf	11,7	;volatile
 10028  1DA1  0008               	return
 10029  1DA2                     __end_of_TMR1_Set:	
 10030                           
 10031                           	psect	text60
 10032  106C                     __ptext60:	
 10033 ;; *************** function _IO_Set *****************
 10034 ;; Defined at:
 10035 ;;		line 60 in file "../src/MCU_B1.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;		None
 10040 ;; Return value:  Size  Location     Type
 10041 ;;		None               void
 10042 ;; Registers used:
 10043 ;;		wreg, status,2
 10044 ;; Tracked objects:
 10045 ;;		On entry : 0/0
 10046 ;;		On exit  : 0/0
 10047 ;;		Unchanged: 0/0
 10048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;Total ram usage:        0 bytes
 10054 ;; Hardware stack levels used:    1
 10055 ;; Hardware stack levels required when called:    3
 10056 ;; This function calls:
 10057 ;;		Nothing
 10058 ;; This function is called by:
 10059 ;;		_Mcu_Initialization
 10060 ;; This function uses a non-reentrant model
 10061 ;;
 10062                           
 10063                           
 10064                           ;psect for function _IO_Set
 10065  106C                     _IO_Set:	
 10066                           
 10067                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in _IO_Set: [wreg+status,2]
 10071  106C  3077               	movlw	119
 10072  106D  0021               	movlb	1	; select bank1
 10073  106E  008C               	movwf	12	;volatile
 10074                           
 10075                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10076  106F  3007               	movlw	7
 10077  1070  008D               	movwf	13	;volatile
 10078                           
 10079                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10080  1071  300C               	movlw	12
 10081  1072  008E               	movwf	14	;volatile
 10082                           
 10083                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10084  1073  0022               	movlb	2	; select bank2
 10085  1074  018C               	clrf	12	;volatile
 10086                           
 10087                           ;MCU_B1.c: 93: LATB = 0b00000000;;
 10088  1075  018D               	clrf	13	;volatile
 10089                           
 10090                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10091  1076  018E               	clrf	14	;volatile
 10092                           
 10093                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10094  1077  3022               	movlw	34
 10095  1078  0023               	movlb	3	; select bank3
 10096  1079  008C               	movwf	12	;volatile
 10097                           
 10098                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10099  107A  018D               	clrf	13	;volatile
 10100                           
 10101                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10102  107B  018E               	clrf	14	;volatile
 10103                           
 10104                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10105  107C  3077               	movlw	119
 10106  107D  0020               	movlb	0	; select bank0
 10107  107E  008C               	movwf	12	;volatile
 10108                           
 10109                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10110  107F  3007               	movlw	7
 10111  1080  008D               	movwf	13	;volatile
 10112                           
 10113                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10114  1081  300C               	movlw	12
 10115  1082  008E               	movwf	14	;volatile
 10116                           
 10117                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10118  1083  0024               	movlb	4	; select bank4
 10119  1084  018D               	clrf	13	;volatile
 10120  1085  0008               	return
 10121  1086                     __end_of_IO_Set:	
 10122                           
 10123                           	psect	text61
 10124  1D8A                     __ptext61:	
 10125 ;; *************** function _IOC_Set *****************
 10126 ;; Defined at:
 10127 ;;		line 362 in file "../src/MCU_B1.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;		None
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;		None               void
 10134 ;; Registers used:
 10135 ;;		wreg, status,2
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;Total ram usage:        0 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    3
 10148 ;; This function calls:
 10149 ;;		Nothing
 10150 ;; This function is called by:
 10151 ;;		_Mcu_Initialization
 10152 ;; This function uses a non-reentrant model
 10153 ;;
 10154                           
 10155                           
 10156                           ;psect for function _IOC_Set
 10157  1D8A                     _IOC_Set:	
 10158                           
 10159                           ;MCU_B1.c: 363: WPUB2 = 0;
 10160                           
 10161                           ;incstack = 0
 10162                           ; Regs used in _IOC_Set: [wreg+status,2]
 10163  1D8A  0024               	movlb	4	; select bank4
 10164  1D8B  110D               	bcf	13,2	;volatile
 10165                           
 10166                           ;MCU_B1.c: 383: IOCBP = 0b00000100;
 10167  1D8C  3004               	movlw	4
 10168  1D8D  0027               	movlb	7	; select bank7
 10169  1D8E  0094               	movwf	20	;volatile
 10170                           
 10171                           ;MCU_B1.c: 384: IOCBN = 0b00000000;
 10172  1D8F  0195               	clrf	21	;volatile
 10173                           
 10174                           ;MCU_B1.c: 388: IOCBF = 0b00000000;
 10175  1D90  0196               	clrf	22	;volatile
 10176                           
 10177                           ;MCU_B1.c: 390: IOCIE = 1;
 10178  1D91  158B               	bsf	11,3	;volatile
 10179                           
 10180                           ;MCU_B1.c: 391: IOCIF = 0;
 10181  1D92  100B               	bcf	11,0	;volatile
 10182                           
 10183                           ;MCU_B1.c: 392: PEIE = 1;
 10184  1D93  170B               	bsf	11,6	;volatile
 10185                           
 10186                           ;MCU_B1.c: 393: GIE = 1;
 10187  1D94  178B               	bsf	11,7	;volatile
 10188  1D95  0008               	return
 10189  1D96                     __end_of_IOC_Set:	
 10190                           
 10191                           	psect	text62
 10192  1CB8                     __ptext62:	
 10193 ;; *************** function _Fosc_Set *****************
 10194 ;; Defined at:
 10195 ;;		line 56 in file "../src/MCU_B1.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;		None
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;		None
 10200 ;; Return value:  Size  Location     Type
 10201 ;;		None               void
 10202 ;; Registers used:
 10203 ;;		wreg
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;Total ram usage:        0 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    3
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_Mcu_Initialization
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           
 10224                           ;psect for function _Fosc_Set
 10225  1CB8                     _Fosc_Set:	
 10226                           
 10227                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10228                           
 10229                           ;incstack = 0
 10230                           ; Regs used in _Fosc_Set: [wreg]
 10231  1CB8  3078               	movlw	120
 10232  1CB9  0021               	movlb	1	; select bank1
 10233  1CBA  0099               	movwf	25	;volatile
 10234  1CBB  0008               	return
 10235  1CBC                     __end_of_Fosc_Set:	
 10236                           
 10237                           	psect	text63
 10238  1CEB                     __ptext63:	
 10239 ;; *************** function _ADC_Set *****************
 10240 ;; Defined at:
 10241 ;;		line 428 in file "../src/MCU_B1.c"
 10242 ;; Parameters:    Size  Location     Type
 10243 ;;		None
 10244 ;; Auto vars:     Size  Location     Type
 10245 ;;		None
 10246 ;; Return value:  Size  Location     Type
 10247 ;;		None               void
 10248 ;; Registers used:
 10249 ;;		wreg
 10250 ;; Tracked objects:
 10251 ;;		On entry : 0/0
 10252 ;;		On exit  : 0/0
 10253 ;;		Unchanged: 0/0
 10254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10259 ;;Total ram usage:        0 bytes
 10260 ;; Hardware stack levels used:    1
 10261 ;; Hardware stack levels required when called:    3
 10262 ;; This function calls:
 10263 ;;		Nothing
 10264 ;; This function is called by:
 10265 ;;		_Mcu_Initialization
 10266 ;; This function uses a non-reentrant model
 10267 ;;
 10268                           
 10269                           
 10270                           ;psect for function _ADC_Set
 10271  1CEB                     _ADC_Set:	
 10272                           
 10273                           ;MCU_B1.c: 429: ADCON1 = 0xf3;
 10274                           
 10275                           ;incstack = 0
 10276                           ; Regs used in _ADC_Set: [wreg]
 10277  1CEB  30F3               	movlw	243
 10278  1CEC  0021               	movlb	1	; select bank1
 10279  1CED  009E               	movwf	30	;volatile
 10280                           
 10281                           ;MCU_B1.c: 430: FVRCON = 0xc1;
 10282  1CEE  30C1               	movlw	193
 10283  1CEF  0022               	movlb	2	; select bank2
 10284  1CF0  0097               	movwf	23	;volatile
 10285  1CF1  0008               	return
 10286  1CF2                     __end_of_ADC_Set:	
 10287                           
 10288                           	psect	text64
 10289  0055                     __ptext64:	
 10290 ;; *************** function _Load_Main *****************
 10291 ;; Defined at:
 10292 ;;		line 39 in file "../src/OverLoad_B1.c"
 10293 ;; Parameters:    Size  Location     Type
 10294 ;;		None
 10295 ;; Auto vars:     Size  Location     Type
 10296 ;;  i               2    4[BANK0 ] int 
 10297 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10298 ;;  error           1    2[BANK0 ] unsigned char 
 10299 ;; Return value:  Size  Location     Type
 10300 ;;		None               void
 10301 ;; Registers used:
 10302 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;Total ram usage:        6 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    4
 10315 ;; This function calls:
 10316 ;;		___lwdiv
 10317 ;;		___wmul
 10318 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10319 ;;		_getDimmer_LoadGO
 10320 ;;		_getDimmer_Load_Status
 10321 ;;		_getMain_All_Error_Status
 10322 ;;		_getMain_LightsStatus
 10323 ;;		_getMain_Lights_Count
 10324 ;;		_setLoad_AH_AL_Restore
 10325 ;; This function is called by:
 10326 ;;		_main
 10327 ;; This function uses a non-reentrant model
 10328 ;;
 10329                           
 10330                           
 10331                           ;psect for function _Load_Main
 10332  0055                     _Load_Main:	
 10333                           
 10334                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10335                           
 10336                           ;incstack = 0
 10337                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10338  0055  3000               	movlw	0
 10339  0056  3193  23AF  3180   	fcall	_getMain_All_Error_Status
 10340  0059  0020               	movlb	0	; select bank0
 10341  005A  00A0               	movwf	??_Load_Main
 10342  005B  0820               	movf	??_Load_Main,w
 10343  005C  00A2               	movwf	Load_Main@error
 10344                           
 10345                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10346  005D  01A3               	clrf	Load_Main@Load_Status
 10347                           
 10348                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10349  005E  0022               	movlb	2	; select bank2
 10350  005F  1C2E               	btfss	_Load^(0+256),0
 10351  0060  29E9               	goto	l1803
 10352                           
 10353                           ;OverLoad_B1.c: 45: if (getMain_LightsStatus() == 0) {
 10354  0061  319D  25DB  3180   	fcall	_getMain_LightsStatus
 10355  0064  3800               	iorlw	0
 10356  0065  1D03               	skipz
 10357  0066  2869               	goto	l9852
 10358                           
 10359                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10360  0067  0022               	movlb	2	; select bank2
 10361  0068  288A               	goto	l9870
 10362  0069                     l9852:	
 10363                           ;OverLoad_B1.c: 47: } else {
 10364                           
 10365                           
 10366                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10367  0069  0020               	movlb	0	; select bank0
 10368  006A  08A2               	movf	Load_Main@error,f
 10369  006B  1D03               	skipz
 10370  006C  2887               	goto	l1806
 10371  006D  3190  20BB  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10372  0070  3800               	iorlw	0
 10373  0071  1D03               	skipz
 10374  0072  2887               	goto	l1806
 10375                           
 10376                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10377  0073  0022               	movlb	2	; select bank2
 10378  0074  14AE               	bsf	_Load^(0+256),1
 10379                           
 10380                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10381  0075  319C  24DD  3180   	fcall	_getDimmer_LoadGO
 10382  0078  3A01               	xorlw	1
 10383  0079  1D03               	skipz
 10384  007A  2882               	goto	l1807
 10385                           
 10386                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10387  007B  0022               	movlb	2	; select bank2
 10388  007C  1DAE               	btfss	_Load^(0+256),3
 10389  007D  1BAE               	btfsc	_Load^(0+256),7
 10390  007E  288B               	goto	l1805
 10391                           
 10392                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10393  007F  15AE               	bsf	_Load^(0+256),3
 10394                           
 10395                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10396  0080  01D7               	clrf	(_Load^(0+256)+41)
 10397                           
 10398                           ;OverLoad_B1.c: 57: }
 10399                           ;OverLoad_B1.c: 58: } else {
 10400  0081  288B               	goto	l1805
 10401  0082                     l1807:	
 10402                           
 10403                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10404  0082  0022               	movlb	2	; select bank2
 10405  0083  1FAE               	btfss	_Load^(0+256),7
 10406  0084  288B               	goto	l1805
 10407                           
 10408                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10409  0085  13AE               	bcf	_Load^(0+256),7
 10410                           
 10411                           ;OverLoad_B1.c: 61: }
 10412                           ;OverLoad_B1.c: 62: }
 10413                           ;OverLoad_B1.c: 63: } else {
 10414  0086  288B               	goto	l1805
 10415  0087                     l1806:	
 10416                           
 10417                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10418  0087  0022               	movlb	2	; select bank2
 10419  0088  1CAE               	btfss	_Load^(0+256),1
 10420  0089  288B               	goto	l1805
 10421  008A                     l9870:	
 10422                           
 10423                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10424  008A  10AE               	bcf	_Load^(0+256),1
 10425  008B                     l1805:	
 10426                           
 10427                           ;OverLoad_B1.c: 66: }
 10428                           ;OverLoad_B1.c: 67: }
 10429                           ;OverLoad_B1.c: 69: }
 10430                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10431  008B  1CAE               	btfss	_Load^(0+256),1
 10432  008C  29C5               	goto	l1813
 10433                           
 10434                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10435  008D  152E               	bsf	_Load^(0+256),2
 10436                           
 10437                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10438  008E  1E2E               	btfss	_Load^(0+256),4
 10439  008F  29C3               	goto	l1814
 10440                           
 10441                           ;OverLoad_B1.c: 76: Load.Time++;
 10442  0090  3001               	movlw	1
 10443  0091  07AF               	addwf	(_Load^(0+256)+1),f
 10444  0092  3000               	movlw	0
 10445  0093  3DB0               	addwfc	((_Load+1)^(0+256)+1),f
 10446                           
 10447                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10448  0094  3000               	movlw	0
 10449  0095  0230               	subwf	((_Load+1)^(0+256)+1),w
 10450  0096  3002               	movlw	2
 10451  0097  1903               	skipnz
 10452  0098  022F               	subwf	(_Load^(0+256)+1),w
 10453  0099  1C03               	skipc
 10454  009A  0008               	return
 10455                           
 10456                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10457  009B  01AF               	clrf	(_Load^(0+256)+1)
 10458  009C  01B0               	clrf	((_Load+1)^(0+256)+1)
 10459                           
 10460                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10461  009D  122E               	bcf	_Load^(0+256),4
 10462                           
 10463                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10464  009E  3001               	movlw	1
 10465  009F  0020               	movlb	0	; select bank0
 10466  00A0  00A4               	movwf	Load_Main@i
 10467  00A1  3000               	movlw	0
 10468  00A2  00A5               	movwf	Load_Main@i+1
 10469  00A3  0825               	movf	Load_Main@i+1,w
 10470  00A4  3A80               	xorlw	128
 10471  00A5  00A0               	movwf	??_Load_Main
 10472  00A6  3080               	movlw	128
 10473  00A7  0220               	subwf	??_Load_Main,w
 10474  00A8  1D03               	skipz
 10475  00A9  28AC               	goto	u11515
 10476  00AA  3004               	movlw	4
 10477  00AB  0224               	subwf	Load_Main@i,w
 10478  00AC                     u11515:	
 10479  00AC  1803               	btfsc	3,0
 10480  00AD  28E0               	goto	l9892
 10481  00AE                     l9886:	
 10482                           
 10483                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10484  00AE  0020               	movlb	0	; select bank0
 10485  00AF  3524               	lslf	Load_Main@i,w
 10486  00B0  3E39               	addlw	(_Load+11)& (0+255)
 10487  00B1  0086               	movwf	6
 10488  00B2  3001               	movlw	1	; select bank2/3
 10489  00B3  0087               	movwf	7
 10490  00B4  3F40               	moviw [0]fsr1
 10491  00B5  00A0               	movwf	??_Load_Main
 10492  00B6  3F41               	moviw [1]fsr1
 10493  00B7  00A1               	movwf	??_Load_Main+1
 10494  00B8  0820               	movf	??_Load_Main,w
 10495  00B9  0022               	movlb	2	; select bank2
 10496  00BA  07B3               	addwf	(_Load^(0+256)+5),f
 10497  00BB  0020               	movlb	0	; select bank0
 10498  00BC  0821               	movf	??_Load_Main+1,w
 10499  00BD  0022               	movlb	2	; select bank2
 10500  00BE  3DB4               	addwfc	((_Load+1)^(0+256)+5),f
 10501                           
 10502                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10503  00BF  0020               	movlb	0	; select bank0
 10504  00C0  3524               	lslf	Load_Main@i,w
 10505  00C1  3E43               	addlw	(_Load+21)& (0+255)
 10506  00C2  0086               	movwf	6
 10507  00C3  3001               	movlw	1	; select bank2/3
 10508  00C4  0087               	movwf	7
 10509  00C5  3F40               	moviw [0]fsr1
 10510  00C6  00A0               	movwf	??_Load_Main
 10511  00C7  3F41               	moviw [1]fsr1
 10512  00C8  00A1               	movwf	??_Load_Main+1
 10513  00C9  0820               	movf	??_Load_Main,w
 10514  00CA  0022               	movlb	2	; select bank2
 10515  00CB  07B5               	addwf	(_Load^(0+256)+7),f
 10516  00CC  0020               	movlb	0	; select bank0
 10517  00CD  0821               	movf	??_Load_Main+1,w
 10518  00CE  0022               	movlb	2	; select bank2
 10519  00CF  3DB6               	addwfc	((_Load+1)^(0+256)+7),f
 10520  00D0  3001               	movlw	1
 10521  00D1  0020               	movlb	0	; select bank0
 10522  00D2  07A4               	addwf	Load_Main@i,f
 10523  00D3  3000               	movlw	0
 10524  00D4  3DA5               	addwfc	Load_Main@i+1,f
 10525  00D5  0825               	movf	Load_Main@i+1,w
 10526  00D6  3A80               	xorlw	128
 10527  00D7  00A0               	movwf	??_Load_Main
 10528  00D8  3080               	movlw	128
 10529  00D9  0220               	subwf	??_Load_Main,w
 10530  00DA  1D03               	skipz
 10531  00DB  28DE               	goto	u11525
 10532  00DC  3004               	movlw	4
 10533  00DD  0224               	subwf	Load_Main@i,w
 10534  00DE                     u11525:	
 10535  00DE  1C03               	skipc
 10536  00DF  28AE               	goto	l9886
 10537  00E0                     l9892:	
 10538                           
 10539                           ;OverLoad_B1.c: 84: }
 10540                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10541  00E0  3003               	movlw	3
 10542  00E1  00F2               	movwf	___lwdiv@divisor
 10543  00E2  3000               	movlw	0
 10544  00E3  00F3               	movwf	___lwdiv@divisor+1
 10545  00E4  0022               	movlb	2	; select bank2
 10546  00E5  0834               	movf	((_Load+1)^(0+256)+5),w
 10547  00E6  01F5               	clrf	___lwdiv@dividend+1
 10548  00E7  07F5               	addwf	___lwdiv@dividend+1,f
 10549  00E8  0833               	movf	(_Load^(0+256)+5),w
 10550  00E9  01F4               	clrf	___lwdiv@dividend
 10551  00EA  07F4               	addwf	___lwdiv@dividend,f
 10552  00EB  3194  2475  3180   	fcall	___lwdiv
 10553  00EE  0873               	movf	?___lwdiv+1,w
 10554  00EF  0022               	movlb	2	; select bank2
 10555  00F0  01B4               	clrf	((_Load+1)^(0+256)+5)
 10556  00F1  07B4               	addwf	((_Load+1)^(0+256)+5),f
 10557  00F2  0872               	movf	?___lwdiv,w
 10558  00F3  01B3               	clrf	(_Load^(0+256)+5)
 10559  00F4  07B3               	addwf	(_Load^(0+256)+5),f
 10560                           
 10561                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10562  00F5  3003               	movlw	3
 10563  00F6  00F2               	movwf	___lwdiv@divisor
 10564  00F7  3000               	movlw	0
 10565  00F8  00F3               	movwf	___lwdiv@divisor+1
 10566  00F9  0836               	movf	((_Load+1)^(0+256)+7),w
 10567  00FA  01F5               	clrf	___lwdiv@dividend+1
 10568  00FB  07F5               	addwf	___lwdiv@dividend+1,f
 10569  00FC  0835               	movf	(_Load^(0+256)+7),w
 10570  00FD  01F4               	clrf	___lwdiv@dividend
 10571  00FE  07F4               	addwf	___lwdiv@dividend,f
 10572  00FF  3194  2475  3180   	fcall	___lwdiv
 10573  0102  0873               	movf	?___lwdiv+1,w
 10574  0103  0022               	movlb	2	; select bank2
 10575  0104  01B6               	clrf	((_Load+1)^(0+256)+7)
 10576  0105  07B6               	addwf	((_Load+1)^(0+256)+7),f
 10577  0106  0872               	movf	?___lwdiv,w
 10578  0107  01B5               	clrf	(_Load^(0+256)+7)
 10579  0108  07B5               	addwf	(_Load^(0+256)+7),f
 10580                           
 10581                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10582  0109  3190  20A0  3180   	fcall	_setLoad_AH_AL_Restore
 10583                           
 10584                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10585  010C  0022               	movlb	2	; select bank2
 10586  010D  0836               	movf	((_Load+1)^(0+256)+7),w
 10587  010E  0234               	subwf	((_Load+1)^(0+256)+5),w
 10588  010F  1D03               	skipz
 10589  0110  2913               	goto	u11535
 10590  0111  0835               	movf	(_Load^(0+256)+7),w
 10591  0112  0233               	subwf	(_Load^(0+256)+5),w
 10592  0113                     u11535:	
 10593  0113  1C03               	skipc
 10594  0114  0008               	return
 10595                           
 10596                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10597  0115  3005               	movlw	5
 10598  0116  3E2E               	addlw	_Load& (0+255)
 10599  0117  0086               	movwf	6
 10600  0118  3001               	movlw	1	; select bank2/3
 10601  0119  0087               	movwf	7
 10602  011A  0935               	comf	(_Load^(0+256)+7),w
 10603  011B  0020               	movlb	0	; select bank0
 10604  011C  00A0               	movwf	??_Load_Main
 10605  011D  0022               	movlb	2	; select bank2
 10606  011E  0936               	comf	((_Load+1)^(0+256)+7),w
 10607  011F  0020               	movlb	0	; select bank0
 10608  0120  00A1               	movwf	??_Load_Main+1
 10609  0121  0AA0               	incf	??_Load_Main,f
 10610  0122  1903               	skipnz
 10611  0123  0AA1               	incf	??_Load_Main+1,f
 10612  0124  3F40               	moviw [0]fsr1
 10613  0125  0720               	addwf	??_Load_Main,w
 10614  0126  0022               	movlb	2	; select bank2
 10615  0127  00CD               	movwf	(_Load^(0+256)+31)
 10616  0128  3F41               	moviw [1]fsr1
 10617  0129  0020               	movlb	0	; select bank0
 10618  012A  3D21               	addwfc	??_Load_Main+1,w
 10619  012B  0022               	movlb	2	; select bank2
 10620  012C  00CE               	movwf	(_Load^(0+256)+32)
 10621                           
 10622                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10623  012D  01B3               	clrf	(_Load^(0+256)+5)
 10624  012E  01B4               	clrf	((_Load+1)^(0+256)+5)
 10625                           
 10626                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10627  012F  01B5               	clrf	(_Load^(0+256)+7)
 10628  0130  01B6               	clrf	((_Load+1)^(0+256)+7)
 10629                           
 10630                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10631  0131  1DAE               	btfss	_Load^(0+256),3
 10632  0132  298F               	goto	l9932
 10633                           
 10634                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10635  0133  3002               	movlw	2
 10636  0134  0257               	subwf	(_Load^(0+256)+41),w
 10637  0135  1803               	skipnc
 10638  0136  298F               	goto	l9932
 10639                           
 10640                           ;OverLoad_B1.c: 96: Load.Count++;
 10641  0137  3001               	movlw	1
 10642  0138  0020               	movlb	0	; select bank0
 10643  0139  00A0               	movwf	??_Load_Main
 10644  013A  0820               	movf	??_Load_Main,w
 10645  013B  0022               	movlb	2	; select bank2
 10646  013C  07D7               	addwf	(_Load^(0+256)+41),f
 10647                           
 10648                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10649  013D  319C  24E4  3180   	fcall	_getDimmer_Load_Status
 10650  0140  0020               	movlb	0	; select bank0
 10651  0141  00A0               	movwf	??_Load_Main
 10652  0142  0820               	movf	??_Load_Main,w
 10653  0143  00A3               	movwf	Load_Main@Load_Status
 10654                           
 10655                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10656  0144  319E  2657  3180   	fcall	_getMain_Lights_Count
 10657  0147  0020               	movlb	0	; select bank0
 10658  0148  00A0               	movwf	??_Load_Main
 10659  0149  0820               	movf	??_Load_Main,w
 10660  014A  0022               	movlb	2	; select bank2
 10661  014B  00DA               	movwf	(_Load^(0+256)+44)
 10662                           
 10663                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10664  014C  0857               	movf	(_Load^(0+256)+41),w
 10665  014D  3A01               	xorlw	1
 10666  014E  1D03               	skipz
 10667  014F  295A               	goto	l9918
 10668                           
 10669                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10670  0150  3002               	movlw	2
 10671  0151  0020               	movlb	0	; select bank0
 10672  0152  00A0               	movwf	??_Load_Main
 10673  0153  0820               	movf	??_Load_Main,w
 10674  0154  0022               	movlb	2	; select bank2
 10675  0155  00D9               	movwf	(_Load^(0+256)+43)
 10676                           
 10677                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10678  0156  30E8               	movlw	232
 10679  0157  00D3               	movwf	(_Load^(0+256)+37)
 10680  0158  3003               	movlw	3
 10681  0159  2965               	goto	L7
 10682  015A                     l9918:	
 10683                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10684                           
 10685  015A  0857               	movf	(_Load^(0+256)+41),w
 10686  015B  3A02               	xorlw	2
 10687  015C  1D03               	skipz
 10688  015D  298F               	goto	l9932
 10689                           
 10690                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10691  015E  085A               	movf	(_Load^(0+256)+44),w
 10692  015F  3A01               	xorlw	1
 10693  0160  1D03               	skipz
 10694  0161  2967               	goto	l9924
 10695                           
 10696                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10697  0162  3037               	movlw	55
 10698  0163  00D3               	movwf	(_Load^(0+256)+37)
 10699  0164  3000               	movlw	0
 10700  0165                     L7:	
 10701  0165  00D4               	movwf	(_Load^(0+256)+38)
 10702                           
 10703                           ;OverLoad_B1.c: 105: } else {
 10704  0166  298F               	goto	l9932
 10705  0167                     l9924:	
 10706                           
 10707                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10708  0167  0020               	movlb	0	; select bank0
 10709  0168  08A3               	movf	Load_Main@Load_Status,f
 10710  0169  1D03               	skipz
 10711  016A  2983               	goto	l9928
 10712                           
 10713                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10714  016B  0022               	movlb	2	; select bank2
 10715  016C  085A               	movf	(_Load^(0+256)+44),w
 10716  016D  0020               	movlb	0	; select bank0
 10717  016E  00A0               	movwf	??_Load_Main
 10718  016F  01A1               	clrf	??_Load_Main+1
 10719  0170  0820               	movf	??_Load_Main,w
 10720  0171  00F2               	movwf	___wmul@multiplier
 10721  0172  0821               	movf	??_Load_Main+1,w
 10722  0173  00F3               	movwf	___wmul@multiplier+1
 10723  0174  3037               	movlw	55
 10724  0175  00F4               	movwf	___wmul@multiplicand
 10725  0176  3000               	movlw	0
 10726  0177  00F5               	movwf	___wmul@multiplicand+1
 10727  0178  3191  212A  3180   	fcall	___wmul
 10728  017B  0873               	movf	?___wmul+1,w
 10729  017C  0022               	movlb	2	; select bank2
 10730  017D  01D4               	clrf	((_Load+1)^(0+256)+37)
 10731  017E  07D4               	addwf	((_Load+1)^(0+256)+37),f
 10732  017F  0872               	movf	?___wmul,w
 10733  0180  01D3               	clrf	(_Load^(0+256)+37)
 10734  0181  07D3               	addwf	(_Load^(0+256)+37),f
 10735                           
 10736                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10737  0182  298F               	goto	l9932
 10738  0183                     l9928:	
 10739  0183  0020               	movlb	0	; select bank0
 10740  0184  0823               	movf	Load_Main@Load_Status,w
 10741  0185  3A01               	xorlw	1
 10742  0186  1D03               	skipz
 10743  0187  298F               	goto	l9932
 10744                           
 10745                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10746  0188  0022               	movlb	2	; select bank2
 10747  0189  0837               	movf	(_Load^(0+256)+9),w
 10748  018A  3E37               	addlw	55
 10749  018B  00D3               	movwf	(_Load^(0+256)+37)
 10750  018C  3000               	movlw	0
 10751  018D  3D38               	addwfc	((_Load+1)^(0+256)+9),w
 10752  018E  00D4               	movwf	((_Load+1)^(0+256)+37)
 10753  018F                     l9932:	
 10754                           
 10755                           ;OverLoad_B1.c: 110: }
 10756                           ;OverLoad_B1.c: 111: }
 10757                           ;OverLoad_B1.c: 112: }
 10758                           ;OverLoad_B1.c: 113: }
 10759                           ;OverLoad_B1.c: 114: }
 10760                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10761  018F  0022               	movlb	2	; select bank2
 10762  0190  0854               	movf	((_Load+1)^(0+256)+37),w
 10763  0191  024E               	subwf	((_Load+1)^(0+256)+31),w
 10764  0192  1D03               	skipz
 10765  0193  2996               	goto	u11615
 10766  0194  0853               	movf	(_Load^(0+256)+37),w
 10767  0195  024D               	subwf	(_Load^(0+256)+31),w
 10768  0196                     u11615:	
 10769  0196  1C03               	skipc
 10770  0197  29A5               	goto	l9942
 10771                           
 10772                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10773  0198  3001               	movlw	1
 10774  0199  0020               	movlb	0	; select bank0
 10775  019A  00A0               	movwf	??_Load_Main
 10776  019B  0820               	movf	??_Load_Main,w
 10777  019C  0022               	movlb	2	; select bank2
 10778  019D  07D8               	addwf	(_Load^(0+256)+42),f
 10779                           
 10780                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10781  019E  0858               	movf	(_Load^(0+256)+42),w
 10782  019F  0259               	subwf	(_Load^(0+256)+43),w
 10783  01A0  1803               	skipnc
 10784  01A1  0008               	return
 10785                           
 10786                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10787  01A2  01D8               	clrf	(_Load^(0+256)+42)
 10788                           
 10789                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10790  01A3  16AE               	bsf	_Load^(0+256),5
 10791                           
 10792                           ;OverLoad_B1.c: 142: }
 10793                           ;OverLoad_B1.c: 143: } else {
 10794  01A4  0008               	return
 10795  01A5                     l9942:	
 10796                           
 10797                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10798  01A5  01D8               	clrf	(_Load^(0+256)+42)
 10799                           
 10800                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10801  01A6  1DAE               	btfss	_Load^(0+256),3
 10802  01A7  0008               	return
 10803                           
 10804                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10805  01A8  3001               	movlw	1
 10806  01A9  0020               	movlb	0	; select bank0
 10807  01AA  00A0               	movwf	??_Load_Main
 10808  01AB  0820               	movf	??_Load_Main,w
 10809  01AC  0022               	movlb	2	; select bank2
 10810  01AD  07DB               	addwf	(_Load^(0+256)+45),f
 10811                           
 10812                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10813  01AE  3003               	movlw	3
 10814  01AF  025B               	subwf	(_Load^(0+256)+45),w
 10815  01B0  1C03               	skipc
 10816  01B1  0008               	return
 10817                           
 10818                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10819  01B2  01DB               	clrf	(_Load^(0+256)+45)
 10820                           
 10821                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10822  01B3  17AE               	bsf	_Load^(0+256),7
 10823                           
 10824                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10825  01B4  11AE               	bcf	_Load^(0+256),3
 10826                           
 10827                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10828  01B5  01D7               	clrf	(_Load^(0+256)+41)
 10829                           
 10830                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10831  01B6  084E               	movf	((_Load+1)^(0+256)+31),w
 10832  01B7  01B8               	clrf	((_Load+1)^(0+256)+9)
 10833  01B8  07B8               	addwf	((_Load+1)^(0+256)+9),f
 10834  01B9  084D               	movf	(_Load^(0+256)+31),w
 10835  01BA  01B7               	clrf	(_Load^(0+256)+9)
 10836  01BB  07B7               	addwf	(_Load^(0+256)+9),f
 10837                           
 10838                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10839  01BC  3003               	movlw	3
 10840  01BD  0020               	movlb	0	; select bank0
 10841  01BE  00A0               	movwf	??_Load_Main
 10842  01BF  0820               	movf	??_Load_Main,w
 10843  01C0  0022               	movlb	2	; select bank2
 10844  01C1  00D9               	movwf	(_Load^(0+256)+43)
 10845                           
 10846                           ;OverLoad_B1.c: 156: }
 10847                           ;OverLoad_B1.c: 157: }
 10848                           ;OverLoad_B1.c: 180: }
 10849                           ;OverLoad_B1.c: 181: }
 10850                           ;OverLoad_B1.c: 182: }
 10851                           ;OverLoad_B1.c: 183: } else {
 10852  01C2  0008               	return
 10853  01C3                     l1814:	
 10854                           
 10855                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10856  01C3  162E               	bsf	_Load^(0+256),4
 10857                           
 10858                           ;OverLoad_B1.c: 185: }
 10859                           ;OverLoad_B1.c: 186: } else {
 10860  01C4  0008               	return
 10861  01C5                     l1813:	
 10862                           
 10863                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10864  01C5  1D2E               	btfss	_Load^(0+256),2
 10865  01C6  29D8               	goto	l9980
 10866                           
 10867                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10868  01C7  112E               	bcf	_Load^(0+256),2
 10869                           
 10870                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10871  01C8  122E               	bcf	_Load^(0+256),4
 10872                           
 10873                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10874  01C9  01AF               	clrf	(_Load^(0+256)+1)
 10875  01CA  01B0               	clrf	((_Load+1)^(0+256)+1)
 10876                           
 10877                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10878  01CB  3190  20A0  3180   	fcall	_setLoad_AH_AL_Restore
 10879                           
 10880                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10881  01CE  0022               	movlb	2	; select bank2
 10882  01CF  01D8               	clrf	(_Load^(0+256)+42)
 10883                           
 10884                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10885  01D0  01DB               	clrf	(_Load^(0+256)+45)
 10886                           
 10887                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10888  01D1  01B3               	clrf	(_Load^(0+256)+5)
 10889  01D2  01B4               	clrf	((_Load+1)^(0+256)+5)
 10890                           
 10891                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10892  01D3  01B5               	clrf	(_Load^(0+256)+7)
 10893  01D4  01B6               	clrf	((_Load+1)^(0+256)+7)
 10894                           
 10895                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10896  01D5  11AE               	bcf	_Load^(0+256),3
 10897                           
 10898                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10899  01D6  01D7               	clrf	(_Load^(0+256)+41)
 10900                           
 10901                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10902  01D7  13AE               	bcf	_Load^(0+256),7
 10903  01D8                     l9980:	
 10904                           
 10905                           ;OverLoad_B1.c: 229: }
 10906                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10907  01D8  1EAE               	btfss	_Load^(0+256),5
 10908  01D9  0008               	return
 10909                           
 10910                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10911  01DA  3001               	movlw	1
 10912  01DB  07B1               	addwf	(_Load^(0+256)+3),f
 10913  01DC  3000               	movlw	0
 10914  01DD  3DB2               	addwfc	((_Load+1)^(0+256)+3),f
 10915                           
 10916                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10917  01DE  3001               	movlw	1
 10918  01DF  0232               	subwf	((_Load+1)^(0+256)+3),w
 10919  01E0  30F4               	movlw	244
 10920  01E1  1903               	skipnz
 10921  01E2  0231               	subwf	(_Load^(0+256)+3),w
 10922  01E3  1C03               	skipc
 10923  01E4  0008               	return
 10924                           
 10925                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10926  01E5  01B1               	clrf	(_Load^(0+256)+3)
 10927  01E6  01B2               	clrf	((_Load+1)^(0+256)+3)
 10928                           
 10929                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 10930  01E7  12AE               	bcf	_Load^(0+256),5
 10931                           
 10932                           ;OverLoad_B1.c: 235: }
 10933                           ;OverLoad_B1.c: 236: }
 10934                           ;OverLoad_B1.c: 237: }
 10935                           ;OverLoad_B1.c: 238: } else {
 10936  01E8  0008               	return
 10937  01E9                     l1803:	
 10938                           
 10939                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 10940  01E9  1C20               	btfss	_myMain^(0+256),0
 10941  01EA  0008               	return
 10942                           
 10943                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 10944  01EB  142E               	bsf	_Load^(0+256),0
 10945  01EC  0008               	return
 10946  01ED                     __end_of_Load_Main:	
 10947                           
 10948                           	psect	text65
 10949  1E57                     __ptext65:	
 10950 ;; *************** function _getMain_Lights_Count *****************
 10951 ;; Defined at:
 10952 ;;		line 466 in file "../src/Main_B1.c"
 10953 ;; Parameters:    Size  Location     Type
 10954 ;;		None
 10955 ;; Auto vars:     Size  Location     Type
 10956 ;;  status2         1    4[COMMON] unsigned char 
 10957 ;;  status1         1    3[COMMON] unsigned char 
 10958 ;;  count           1    2[COMMON] unsigned char 
 10959 ;; Return value:  Size  Location     Type
 10960 ;;                  1    wreg      unsigned char 
 10961 ;; Registers used:
 10962 ;;		wreg, status,2, status,0
 10963 ;; Tracked objects:
 10964 ;;		On entry : 0/0
 10965 ;;		On exit  : 0/0
 10966 ;;		Unchanged: 0/0
 10967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;Total ram usage:        3 bytes
 10973 ;; Hardware stack levels used:    1
 10974 ;; Hardware stack levels required when called:    3
 10975 ;; This function calls:
 10976 ;;		Nothing
 10977 ;; This function is called by:
 10978 ;;		_Load_Main
 10979 ;; This function uses a non-reentrant model
 10980 ;;
 10981                           
 10982                           
 10983                           ;psect for function _getMain_Lights_Count
 10984  1E57                     _getMain_Lights_Count:	
 10985                           
 10986                           ;Main_B1.c: 467: char count = 0;
 10987                           
 10988                           ;incstack = 0
 10989                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10990  1E57  01F2               	clrf	getMain_Lights_Count@count
 10991                           
 10992                           ;Main_B1.c: 471: char status1 = 0;
 10993  1E58  01F3               	clrf	getMain_Lights_Count@status1
 10994                           
 10995                           ;Main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 10996  1E59  3000               	movlw	0
 10997  1E5A  0021               	movlb	1	; select bank1
 10998  1E5B  19E1               	btfsc	_DimmerIntr1^(0+128),3
 10999  1E5C  3001               	movlw	1
 11000  1E5D  00F3               	movwf	getMain_Lights_Count@status1
 11001                           
 11002                           ;Main_B1.c: 475: char status2 = 0;
 11003  1E5E  01F4               	clrf	getMain_Lights_Count@status2
 11004                           
 11005                           ;Main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11006  1E5F  3000               	movlw	0
 11007  1E60  19E8               	btfsc	_DimmerIntr2^(0+128),3
 11008  1E61  3001               	movlw	1
 11009  1E62  00F4               	movwf	getMain_Lights_Count@status2
 11010                           
 11011                           ;Main_B1.c: 500: return count = (status1 + status2);
 11012  1E63  0873               	movf	getMain_Lights_Count@status1,w
 11013  1E64  0774               	addwf	getMain_Lights_Count@status2,w
 11014  1E65  00F2               	movwf	getMain_Lights_Count@count
 11015  1E66  0008               	return
 11016  1E67                     __end_of_getMain_Lights_Count:	
 11017                           
 11018                           	psect	text66
 11019  1CE4                     __ptext66:	
 11020 ;; *************** function _getDimmer_Load_Status *****************
 11021 ;; Defined at:
 11022 ;;		line 1081 in file "../src/Dimmer_B1.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;		None
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  status          1    2[COMMON] unsigned char 
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  1    wreg      unsigned char 
 11029 ;; Registers used:
 11030 ;;		wreg, status,2
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:        1 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    3
 11043 ;; This function calls:
 11044 ;;		Nothing
 11045 ;; This function is called by:
 11046 ;;		_Load_Main
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           
 11051                           ;psect for function _getDimmer_Load_Status
 11052  1CE4                     _getDimmer_Load_Status:	
 11053                           
 11054                           ;Dimmer_B1.c: 1082: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11055                           
 11056                           ;incstack = 0
 11057                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11058  1CE4  3000               	movlw	0
 11059  1CE5  0021               	movlb	1	; select bank1
 11060  1CE6  193A               	btfsc	_Dimmer^(0+128),2	;volatile
 11061  1CE7  3001               	movlw	1
 11062  1CE8  00F2               	movwf	getDimmer_Load_Status@status
 11063                           
 11064                           ;Dimmer_B1.c: 1083: return status;
 11065  1CE9  0872               	movf	getDimmer_Load_Status@status,w
 11066  1CEA  0008               	return
 11067  1CEB                     __end_of_getDimmer_Load_Status:	
 11068                           
 11069                           	psect	text67
 11070  1CDD                     __ptext67:	
 11071 ;; *************** function _getDimmer_LoadGO *****************
 11072 ;; Defined at:
 11073 ;;		line 1075 in file "../src/Dimmer_B1.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  loadgo          1    2[COMMON] unsigned char 
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      unsigned char 
 11080 ;; Registers used:
 11081 ;;		wreg, status,2
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;Total ram usage:        1 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    3
 11094 ;; This function calls:
 11095 ;;		Nothing
 11096 ;; This function is called by:
 11097 ;;		_Load_Main
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _getDimmer_LoadGO
 11103  1CDD                     _getDimmer_LoadGO:	
 11104                           
 11105                           ;Dimmer_B1.c: 1076: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11106                           
 11107                           ;incstack = 0
 11108                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11109  1CDD  3000               	movlw	0
 11110  1CDE  0021               	movlb	1	; select bank1
 11111  1CDF  18BA               	btfsc	_Dimmer^(0+128),1	;volatile
 11112  1CE0  3001               	movlw	1
 11113  1CE1  00F2               	movwf	getDimmer_LoadGO@loadgo
 11114                           
 11115                           ;Dimmer_B1.c: 1077: return loadgo;
 11116  1CE2  0872               	movf	getDimmer_LoadGO@loadgo,w
 11117  1CE3  0008               	return
 11118  1CE4                     __end_of_getDimmer_LoadGO:	
 11119                           
 11120                           	psect	text68
 11121  10BB                     __ptext68:	
 11122 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11123 ;; Defined at:
 11124 ;;		line 238 in file "../src/Dimmer_B1.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;		None
 11127 ;; Auto vars:     Size  Location     Type
 11128 ;;  status          1    5[COMMON] unsigned char 
 11129 ;; Return value:  Size  Location     Type
 11130 ;;                  1    wreg      unsigned char 
 11131 ;; Registers used:
 11132 ;;		wreg, status,2, status,0
 11133 ;; Tracked objects:
 11134 ;;		On entry : 0/0
 11135 ;;		On exit  : 0/0
 11136 ;;		Unchanged: 0/0
 11137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;Total ram usage:        4 bytes
 11143 ;; Hardware stack levels used:    1
 11144 ;; Hardware stack levels required when called:    3
 11145 ;; This function calls:
 11146 ;;		Nothing
 11147 ;; This function is called by:
 11148 ;;		_Load_Main
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           
 11153                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11154  10BB                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11155                           
 11156                           ;Dimmer_B1.c: 239: char status = 0;
 11157                           
 11158                           ;incstack = 0
 11159                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11160  10BB  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11161                           
 11162                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11163  10BC  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2054
 11164  10BD  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2054,f
 11165  10BE  0021               	movlb	1	; select bank1
 11166  10BF  1E61               	btfss	_DimmerIntr1^(0+128),4
 11167  10C0  1A68               	btfsc	_DimmerIntr2^(0+128),4
 11168  10C1  28C3               	goto	l7420
 11169  10C2  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2054
 11170  10C3                     l7420:	
 11171  10C3  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2054,w
 11172  10C4  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11173  10C5  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11174  10C6  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11175                           
 11176                           ;Dimmer_B1.c: 254: if (status == 0) {
 11177  10C7  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11178  10C8  1D03               	skipz
 11179  10C9  28D4               	goto	l7432
 11180                           
 11181                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11182  10CA  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2055
 11183  10CB  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2055,f
 11184  10CC  1F61               	btfss	_DimmerIntr1^(0+128),6
 11185  10CD  1B68               	btfsc	_DimmerIntr2^(0+128),6
 11186  10CE  28D0               	goto	l7430
 11187  10CF  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2055
 11188  10D0                     l7430:	
 11189  10D0  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2055,w
 11190  10D1  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11191  10D2  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11192  10D3  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11193  10D4                     l7432:	
 11194                           
 11195                           ;Dimmer_B1.c: 266: }
 11196                           ;Dimmer_B1.c: 268: return status;
 11197  10D4  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11198  10D5  0008               	return
 11199  10D6                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11200                           
 11201                           	psect	text69
 11202  112A                     __ptext69:	
 11203 ;; *************** function ___wmul *****************
 11204 ;; Defined at:
 11205 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11206 ;; Parameters:    Size  Location     Type
 11207 ;;  multiplier      2    2[COMMON] unsigned int 
 11208 ;;  multiplicand    2    4[COMMON] unsigned int 
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;  product         2    6[COMMON] unsigned int 
 11211 ;; Return value:  Size  Location     Type
 11212 ;;                  2    2[COMMON] unsigned int 
 11213 ;; Registers used:
 11214 ;;		wreg, status,2, status,0
 11215 ;; Tracked objects:
 11216 ;;		On entry : 0/0
 11217 ;;		On exit  : 0/0
 11218 ;;		Unchanged: 0/0
 11219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11220 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;Total ram usage:        6 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    3
 11227 ;; This function calls:
 11228 ;;		Nothing
 11229 ;; This function is called by:
 11230 ;;		_Load_Main
 11231 ;; This function uses a non-reentrant model
 11232 ;;
 11233                           
 11234                           
 11235                           ;psect for function ___wmul
 11236  112A                     ___wmul:	
 11237                           
 11238                           ;incstack = 0
 11239                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11240  112A  01F6               	clrf	___wmul@product
 11241  112B  01F7               	clrf	___wmul@product+1
 11242  112C                     l7968:	
 11243  112C  1C72               	btfss	___wmul@multiplier,0
 11244  112D  2932               	goto	l2917
 11245  112E  0874               	movf	___wmul@multiplicand,w
 11246  112F  07F6               	addwf	___wmul@product,f
 11247  1130  0875               	movf	___wmul@multiplicand+1,w
 11248  1131  3DF7               	addwfc	___wmul@product+1,f
 11249  1132                     l2917:	
 11250  1132  3001               	movlw	1
 11251  1133                     u8235:	
 11252  1133  35F4               	lslf	___wmul@multiplicand,f
 11253  1134  0DF5               	rlf	___wmul@multiplicand+1,f
 11254  1135  0B89               	decfsz	9,f
 11255  1136  2933               	goto	u8235
 11256  1137  3001               	movlw	1
 11257  1138                     u8245:	
 11258  1138  36F3               	lsrf	___wmul@multiplier+1,f
 11259  1139  0CF2               	rrf	___wmul@multiplier,f
 11260  113A  0B89               	decfsz	9,f
 11261  113B  2938               	goto	u8245
 11262  113C  0873               	movf	___wmul@multiplier+1,w
 11263  113D  0472               	iorwf	___wmul@multiplier,w
 11264  113E  1D03               	skipz
 11265  113F  292C               	goto	l7968
 11266  1140  0877               	movf	___wmul@product+1,w
 11267  1141  01F3               	clrf	?___wmul+1
 11268  1142  07F3               	addwf	?___wmul+1,f
 11269  1143  0876               	movf	___wmul@product,w
 11270  1144  01F2               	clrf	?___wmul
 11271  1145  07F2               	addwf	?___wmul,f
 11272  1146  0008               	return
 11273  1147                     __end_of___wmul:	
 11274                           
 11275                           	psect	text70
 11276  1475                     __ptext70:	
 11277 ;; *************** function ___lwdiv *****************
 11278 ;; Defined at:
 11279 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11280 ;; Parameters:    Size  Location     Type
 11281 ;;  divisor         2    2[COMMON] unsigned int 
 11282 ;;  dividend        2    4[COMMON] unsigned int 
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;  quotient        2    7[COMMON] unsigned int 
 11285 ;;  counter         1    9[COMMON] unsigned char 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2    2[COMMON] unsigned int 
 11288 ;; Registers used:
 11289 ;;		wreg, status,2, status,0
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11295 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;Total ram usage:        8 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    3
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_Load_Main
 11306 ;;		_setRF_Main
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function ___lwdiv
 11312  1475                     ___lwdiv:	
 11313                           
 11314                           ;incstack = 0
 11315                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11316  1475  01F7               	clrf	___lwdiv@quotient
 11317  1476  01F8               	clrf	___lwdiv@quotient+1
 11318  1477  0873               	movf	___lwdiv@divisor+1,w
 11319  1478  0472               	iorwf	___lwdiv@divisor,w
 11320  1479  1903               	skipnz
 11321  147A  2CA4               	goto	l7378
 11322  147B  01F9               	clrf	___lwdiv@counter
 11323  147C  0AF9               	incf	___lwdiv@counter,f
 11324  147D                     l7366:	
 11325  147D  1BF3               	btfsc	___lwdiv@divisor+1,7
 11326  147E  2C89               	goto	l7368
 11327  147F  3001               	movlw	1
 11328  1480                     u7075:	
 11329  1480  35F2               	lslf	___lwdiv@divisor,f
 11330  1481  0DF3               	rlf	___lwdiv@divisor+1,f
 11331  1482  0B89               	decfsz	9,f
 11332  1483  2C80               	goto	u7075
 11333  1484  3001               	movlw	1
 11334  1485  00F6               	movwf	??___lwdiv
 11335  1486  0876               	movf	??___lwdiv,w
 11336  1487  07F9               	addwf	___lwdiv@counter,f
 11337  1488  2C7D               	goto	l7366
 11338  1489                     l7368:	
 11339  1489  3001               	movlw	1
 11340  148A                     u7095:	
 11341  148A  35F7               	lslf	___lwdiv@quotient,f
 11342  148B  0DF8               	rlf	___lwdiv@quotient+1,f
 11343  148C  0B89               	decfsz	9,f
 11344  148D  2C8A               	goto	u7095
 11345  148E  0873               	movf	___lwdiv@divisor+1,w
 11346  148F  0275               	subwf	___lwdiv@dividend+1,w
 11347  1490  1D03               	skipz
 11348  1491  2C94               	goto	u7105
 11349  1492  0872               	movf	___lwdiv@divisor,w
 11350  1493  0274               	subwf	___lwdiv@dividend,w
 11351  1494                     u7105:	
 11352  1494  1C03               	skipc
 11353  1495  2C9B               	goto	l7374
 11354  1496  0872               	movf	___lwdiv@divisor,w
 11355  1497  02F4               	subwf	___lwdiv@dividend,f
 11356  1498  0873               	movf	___lwdiv@divisor+1,w
 11357  1499  3BF5               	subwfb	___lwdiv@dividend+1,f
 11358  149A  1477               	bsf	___lwdiv@quotient,0
 11359  149B                     l7374:	
 11360  149B  3001               	movlw	1
 11361  149C                     u7115:	
 11362  149C  36F3               	lsrf	___lwdiv@divisor+1,f
 11363  149D  0CF2               	rrf	___lwdiv@divisor,f
 11364  149E  0B89               	decfsz	9,f
 11365  149F  2C9C               	goto	u7115
 11366  14A0  3001               	movlw	1
 11367  14A1  02F9               	subwf	___lwdiv@counter,f
 11368  14A2  1D03               	btfss	3,2
 11369  14A3  2C89               	goto	l7368
 11370  14A4                     l7378:	
 11371  14A4  0878               	movf	___lwdiv@quotient+1,w
 11372  14A5  01F3               	clrf	?___lwdiv+1
 11373  14A6  07F3               	addwf	?___lwdiv+1,f
 11374  14A7  0877               	movf	___lwdiv@quotient,w
 11375  14A8  01F2               	clrf	?___lwdiv
 11376  14A9  07F2               	addwf	?___lwdiv,f
 11377  14AA  0008               	return
 11378  14AB                     __end_of___lwdiv:	
 11379                           
 11380                           	psect	text71
 11381  1CA9                     __ptext71:	
 11382 ;; *************** function _Load_Initialization *****************
 11383 ;; Defined at:
 11384 ;;		line 9 in file "../src/OverLoad_B1.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;		None
 11387 ;; Auto vars:     Size  Location     Type
 11388 ;;		None
 11389 ;; Return value:  Size  Location     Type
 11390 ;;		None               void
 11391 ;; Registers used:
 11392 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11393 ;; Tracked objects:
 11394 ;;		On entry : 0/0
 11395 ;;		On exit  : 0/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;Total ram usage:        0 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    4
 11405 ;; This function calls:
 11406 ;;		_setLoad_AH_AL_Restore
 11407 ;; This function is called by:
 11408 ;;		_main
 11409 ;; This function uses a non-reentrant model
 11410 ;;
 11411                           
 11412                           
 11413                           ;psect for function _Load_Initialization
 11414  1CA9                     _Load_Initialization:	
 11415                           
 11416                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11417                           
 11418                           ;incstack = 0
 11419                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11420  1CA9  3190  20A0         	fcall	_setLoad_AH_AL_Restore
 11421  1CAB  0008               	return
 11422  1CAC                     __end_of_Load_Initialization:	
 11423                           
 11424                           	psect	text72
 11425  10A0                     __ptext72:	
 11426 ;; *************** function _setLoad_AH_AL_Restore *****************
 11427 ;; Defined at:
 11428 ;;		line 266 in file "../src/OverLoad_B1.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;		None
 11431 ;; Auto vars:     Size  Location     Type
 11432 ;;  i               1    3[COMMON] unsigned char 
 11433 ;; Return value:  Size  Location     Type
 11434 ;;		None               void
 11435 ;; Registers used:
 11436 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11437 ;; Tracked objects:
 11438 ;;		On entry : 0/0
 11439 ;;		On exit  : 0/0
 11440 ;;		Unchanged: 0/0
 11441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11445 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11446 ;;Total ram usage:        2 bytes
 11447 ;; Hardware stack levels used:    1
 11448 ;; Hardware stack levels required when called:    3
 11449 ;; This function calls:
 11450 ;;		Nothing
 11451 ;; This function is called by:
 11452 ;;		_Load_Initialization
 11453 ;;		_Load_Main
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _setLoad_AH_AL_Restore
 11459  10A0                     _setLoad_AH_AL_Restore:	
 11460                           
 11461                           ;OverLoad_B1.c: 267: char i;
 11462                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11463                           
 11464                           ;incstack = 0
 11465                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11466  10A0  01F3               	clrf	setLoad_AH_AL_Restore@i
 11467  10A1                     L8:	
 11468  10A1  3005               	movlw	5
 11469  10A2  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11470  10A3  1803               	btfsc	3,0
 11471  10A4  0008               	return
 11472                           
 11473                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11474  10A5  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11475  10A6  3E39               	addlw	(_Load+11)& (0+255)
 11476  10A7  0086               	movwf	6
 11477  10A8  3001               	movlw	1	; select bank2/3
 11478  10A9  0087               	movwf	7
 11479  10AA  3000               	movlw	0
 11480  10AB  3FC0               	movwi [0]fsr1
 11481  10AC  3FC1               	movwi [1]fsr1
 11482                           
 11483                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11484  10AD  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11485  10AE  3E43               	addlw	(_Load+21)& (0+255)
 11486  10AF  0086               	movwf	6
 11487  10B0  3001               	movlw	1	; select bank2/3
 11488  10B1  0087               	movwf	7
 11489  10B2  30FF               	movlw	255
 11490  10B3  3FC0               	movwi [0]fsr1
 11491  10B4  30FF               	movlw	255
 11492  10B5  3FC1               	movwi [1]fsr1
 11493  10B6  3001               	movlw	1
 11494  10B7  00F2               	movwf	??_setLoad_AH_AL_Restore
 11495  10B8  0872               	movf	??_setLoad_AH_AL_Restore,w
 11496  10B9  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11497  10BA  28A1               	goto	L8
 11498  10BB                     __end_of_setLoad_AH_AL_Restore:	
 11499                           
 11500                           	psect	text73
 11501  1D7E                     __ptext73:	
 11502 ;; *************** function _LED_Main *****************
 11503 ;; Defined at:
 11504 ;;		line 47 in file "../src/LED_B1.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;		None
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;		None
 11509 ;; Return value:  Size  Location     Type
 11510 ;;		None               void
 11511 ;; Registers used:
 11512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;Total ram usage:        0 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    5
 11525 ;; This function calls:
 11526 ;;		_setLED_Main
 11527 ;; This function is called by:
 11528 ;;		_main
 11529 ;; This function uses a non-reentrant model
 11530 ;;
 11531                           
 11532                           
 11533                           ;psect for function _LED_Main
 11534  1D7E                     _LED_Main:	
 11535                           
 11536                           ;LED_B1.c: 53: setLED_Main(1);
 11537                           
 11538                           ;incstack = 0
 11539                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11540  1D7E  3001               	movlw	1
 11541  1D7F  3195  255B  319D   	fcall	_setLED_Main
 11542                           
 11543                           ;LED_B1.c: 56: setLED_Main(2);
 11544  1D82  3002               	movlw	2
 11545  1D83  3195  255B  319D   	fcall	_setLED_Main
 11546                           
 11547                           ;LED_B1.c: 62: setLED_Main(99);
 11548  1D86  3063               	movlw	99
 11549  1D87  3195  255B         	fcall	_setLED_Main
 11550  1D89  0008               	return
 11551  1D8A                     __end_of_LED_Main:	
 11552                           
 11553                           	psect	text74
 11554  155B                     __ptext74:	
 11555 ;; *************** function _setLED_Main *****************
 11556 ;; Defined at:
 11557 ;;		line 221 in file "../src/LED_B1.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;  led             1    wreg     unsigned char 
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  led             1    6[COMMON] unsigned char 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;		None               void
 11564 ;; Registers used:
 11565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;Total ram usage:        3 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    4
 11578 ;; This function calls:
 11579 ;;		_LedPointSelect
 11580 ;; This function is called by:
 11581 ;;		_LED_Main
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           
 11586                           ;psect for function _setLED_Main
 11587  155B                     _setLED_Main:	
 11588                           
 11589                           ;incstack = 0
 11590                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11591                           ;setLED_Main@led stored from wreg
 11592  155B  00F6               	movwf	setLED_Main@led
 11593                           
 11594                           ;LED_B1.c: 222: LedPointSelect(led);
 11595  155C  0876               	movf	setLED_Main@led,w
 11596  155D  3191  210D  3195   	fcall	_LedPointSelect
 11597                           
 11598                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11599  1560  0021               	movlb	1	; select bank1
 11600  1561  0846               	movf	_LED^(0+128),w
 11601  1562  0086               	movwf	6
 11602  1563  3001               	movlw	1	; select bank2/3
 11603  1564  0087               	movwf	7
 11604  1565  1C81               	btfss	1,1
 11605  1566  0008               	return
 11606                           
 11607                           ;LED_B1.c: 224: LED->Time++;
 11608  1567  0A46               	incf	_LED^(0+128),w
 11609  1568  0086               	movwf	6
 11610  1569  3001               	movlw	1	; select bank2/3
 11611  156A  0087               	movwf	7
 11612  156B  3001               	movlw	1
 11613  156C  0781               	addwf	1,f
 11614  156D  3141               	addfsr 1,1
 11615  156E  1803               	skipnc
 11616  156F  0A81               	incf	1,f
 11617                           
 11618                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11619  1570  0A46               	incf	_LED^(0+128),w
 11620  1571  0086               	movwf	6
 11621  1572  3001               	movlw	1	; select bank2/3
 11622  1573  0087               	movwf	7
 11623  1574  3F40               	moviw [0]fsr1
 11624  1575  00F4               	movwf	??_setLED_Main
 11625  1576  3F41               	moviw [1]fsr1
 11626  1577  00F5               	movwf	??_setLED_Main+1
 11627  1578  3000               	movlw	0
 11628  1579  0275               	subwf	??_setLED_Main+1,w
 11629  157A  3019               	movlw	25
 11630  157B  1903               	skipnz
 11631  157C  0274               	subwf	??_setLED_Main,w
 11632  157D  1C03               	skipc
 11633  157E  0008               	return
 11634                           
 11635                           ;LED_B1.c: 226: LED->Time = 0;
 11636  157F  0A46               	incf	_LED^(0+128),w
 11637  1580  0086               	movwf	6
 11638  1581  3001               	movlw	1	; select bank2/3
 11639  1582  0087               	movwf	7
 11640  1583  3000               	movlw	0
 11641  1584  3FC0               	movwi [0]fsr1
 11642  1585  3FC1               	movwi [1]fsr1
 11643                           
 11644                           ;LED_B1.c: 228: if (led == 1) {
 11645  1586  0876               	movf	setLED_Main@led,w
 11646  1587  3A01               	xorlw	1
 11647  1588  1D03               	skipz
 11648  1589  2D8D               	goto	l1147
 11649                           
 11650                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11651  158A  3008               	movlw	8
 11652  158B  0020               	movlb	0	; select bank0
 11653  158C  068C               	xorwf	12,f
 11654  158D                     l1147:	
 11655                           
 11656                           ;LED_B1.c: 230: }
 11657                           ;LED_B1.c: 233: if (led == 2) {
 11658  158D  0876               	movf	setLED_Main@led,w
 11659  158E  3A02               	xorlw	2
 11660  158F  1D03               	skipz
 11661  1590  2D94               	goto	l1148
 11662                           
 11663                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11664  1591  3080               	movlw	128
 11665  1592  0020               	movlb	0	; select bank0
 11666  1593  068E               	xorwf	14,f
 11667  1594                     l1148:	
 11668                           
 11669                           ;LED_B1.c: 235: }
 11670                           ;LED_B1.c: 243: if (led == 99) {
 11671  1594  0876               	movf	setLED_Main@led,w
 11672  1595  3A63               	xorlw	99
 11673  1596  1D03               	skipz
 11674  1597  0008               	return
 11675                           
 11676                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11677  1598  3020               	movlw	32
 11678  1599  0020               	movlb	0	; select bank0
 11679  159A  068D               	xorwf	13,f
 11680  159B  0008               	return
 11681  159C                     __end_of_setLED_Main:	
 11682                           
 11683                           	psect	text75
 11684  1D72                     __ptext75:	
 11685 ;; *************** function _LED_Initialization *****************
 11686 ;; Defined at:
 11687 ;;		line 31 in file "../src/LED_B1.c"
 11688 ;; Parameters:    Size  Location     Type
 11689 ;;		None
 11690 ;; Auto vars:     Size  Location     Type
 11691 ;;		None
 11692 ;; Return value:  Size  Location     Type
 11693 ;;		None               void
 11694 ;; Registers used:
 11695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11696 ;; Tracked objects:
 11697 ;;		On entry : 0/0
 11698 ;;		On exit  : 0/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;Total ram usage:        0 bytes
 11706 ;; Hardware stack levels used:    1
 11707 ;; Hardware stack levels required when called:    6
 11708 ;; This function calls:
 11709 ;;		_setLED_Initialization
 11710 ;; This function is called by:
 11711 ;;		_main
 11712 ;; This function uses a non-reentrant model
 11713 ;;
 11714                           
 11715                           
 11716                           ;psect for function _LED_Initialization
 11717  1D72                     _LED_Initialization:	
 11718                           
 11719                           ;LED_B1.c: 33: setLED_Initialization(1);
 11720                           
 11721                           ;incstack = 0
 11722                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11723  1D72  3001               	movlw	1
 11724  1D73  319E  2647  319D   	fcall	_setLED_Initialization
 11725                           
 11726                           ;LED_B1.c: 36: setLED_Initialization(2);
 11727  1D76  3002               	movlw	2
 11728  1D77  319E  2647  319D   	fcall	_setLED_Initialization
 11729                           
 11730                           ;LED_B1.c: 42: setLED_Initialization(99);
 11731  1D7A  3063               	movlw	99
 11732  1D7B  319E  2647         	fcall	_setLED_Initialization
 11733  1D7D  0008               	return
 11734  1D7E                     __end_of_LED_Initialization:	
 11735                           
 11736                           	psect	text76
 11737  1E47                     __ptext76:	
 11738 ;; *************** function _setLED_Initialization *****************
 11739 ;; Defined at:
 11740 ;;		line 69 in file "../src/LED_B1.c"
 11741 ;; Parameters:    Size  Location     Type
 11742 ;;  led             1    wreg     unsigned char 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;  led             1    6[COMMON] unsigned char 
 11745 ;; Return value:  Size  Location     Type
 11746 ;;		None               void
 11747 ;; Registers used:
 11748 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11749 ;; Tracked objects:
 11750 ;;		On entry : 0/0
 11751 ;;		On exit  : 0/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;Total ram usage:        1 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    5
 11761 ;; This function calls:
 11762 ;;		_LedPointSelect
 11763 ;;		_setLED
 11764 ;; This function is called by:
 11765 ;;		_LED_Initialization
 11766 ;; This function uses a non-reentrant model
 11767 ;;
 11768                           
 11769                           
 11770                           ;psect for function _setLED_Initialization
 11771  1E47                     _setLED_Initialization:	
 11772                           
 11773                           ;incstack = 0
 11774                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11775                           ;setLED_Initialization@led stored from wreg
 11776  1E47  00F6               	movwf	setLED_Initialization@led
 11777                           
 11778                           ;LED_B1.c: 70: LedPointSelect(led);
 11779  1E48  0876               	movf	setLED_Initialization@led,w
 11780  1E49  3191  210D  319E   	fcall	_LedPointSelect
 11781                           
 11782                           ;LED_B1.c: 71: LED->Enable = 1;
 11783  1E4C  0021               	movlb	1	; select bank1
 11784  1E4D  0846               	movf	_LED^(0+128),w
 11785  1E4E  0086               	movwf	6
 11786  1E4F  3001               	movlw	1	; select bank2/3
 11787  1E50  0087               	movwf	7
 11788  1E51  1401               	bsf	1,0
 11789                           
 11790                           ;LED_B1.c: 72: setLED(led, 0);
 11791  1E52  01F4               	clrf	setLED@command
 11792  1E53  0876               	movf	setLED_Initialization@led,w
 11793  1E54  318A  2245         	fcall	_setLED
 11794  1E56  0008               	return
 11795  1E57                     __end_of_setLED_Initialization:	
 11796                           
 11797                           	psect	text77
 11798  140E                     __ptext77:	
 11799 ;; *************** function _Flash_Memory_Main *****************
 11800 ;; Defined at:
 11801 ;;		line 974 in file "../src/MCU_B1.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;		None
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;		None
 11806 ;; Return value:  Size  Location     Type
 11807 ;;		None               void
 11808 ;; Registers used:
 11809 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;Total ram usage:        1 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; Hardware stack levels required when called:    6
 11822 ;; This function calls:
 11823 ;;		_Flash_Memory_Modify
 11824 ;;		_getMain_LightsStatus
 11825 ;; This function is called by:
 11826 ;;		_main
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           
 11831                           ;psect for function _Flash_Memory_Main
 11832  140E                     _Flash_Memory_Main:	
 11833                           
 11834                           ;MCU_B1.c: 975: if (Memory.Modify == 1) {
 11835                           
 11836                           ;incstack = 0
 11837                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11838  140E  0024               	movlb	4	; select bank4
 11839  140F  1C44               	btfss	(_Memory^(0+512)+36),0
 11840  1410  0008               	return
 11841                           
 11842                           ;MCU_B1.c: 976: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11843  1411  319D  25DB  3194   	fcall	_getMain_LightsStatus
 11844  1414  3A00               	xorlw	0
 11845  1415  3000               	movlw	0
 11846  1416  1903               	skipnz
 11847  1417  3001               	movlw	1
 11848  1418  00F8               	movwf	??_Flash_Memory_Main
 11849  1419  0DF8               	rlf	??_Flash_Memory_Main,f
 11850  141A  0024               	movlb	4	; select bank4
 11851  141B  0844               	movf	(_Memory^(0+512)+36),w
 11852  141C  0678               	xorwf	??_Flash_Memory_Main,w
 11853  141D  39FD               	andlw	-3
 11854  141E  0678               	xorwf	??_Flash_Memory_Main,w
 11855  141F  00C4               	movwf	(_Memory^(0+512)+36)
 11856                           
 11857                           ;MCU_B1.c: 977: if (Memory.GO == 1) {
 11858  1420  1CC4               	btfss	(_Memory^(0+512)+36),1
 11859  1421  2C3B               	goto	l1418
 11860                           
 11861                           ;MCU_B1.c: 978: Memory.Runtime = 1;
 11862  1422  15C4               	bsf	(_Memory^(0+512)+36),3
 11863                           
 11864                           ;MCU_B1.c: 979: Memory.Time++;
 11865  1423  3001               	movlw	1
 11866  1424  07C2               	addwf	(_Memory^(0+512)+34),f
 11867  1425  3000               	movlw	0
 11868  1426  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11869                           
 11870                           ;MCU_B1.c: 980: if (Memory.Time == 25) {
 11871  1427  3022               	movlw	34
 11872  1428  3E20               	addlw	_Memory& (0+255)
 11873  1429  0086               	movwf	6
 11874  142A  3002               	movlw	2	; select bank4/5
 11875  142B  0087               	movwf	7
 11876  142C  3F40               	moviw [0]fsr1
 11877  142D  3A19               	xorlw	25
 11878  142E  1D03               	skipz
 11879  142F  2C32               	goto	u8455
 11880  1430  3F41               	moviw [1]fsr1
 11881  1431  3A00               	xorlw	0
 11882  1432                     u8455:	
 11883  1432  1D03               	skipz
 11884  1433  0008               	return
 11885                           
 11886                           ;MCU_B1.c: 981: Memory.Time = 0;
 11887  1434  01C2               	clrf	(_Memory^(0+512)+34)
 11888  1435  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11889                           
 11890                           ;MCU_B1.c: 982: Memory.Modify = 0;
 11891  1436  1044               	bcf	(_Memory^(0+512)+36),0
 11892                           
 11893                           ;MCU_B1.c: 983: Memory.GO = 0;
 11894  1437  10C4               	bcf	(_Memory^(0+512)+36),1
 11895                           
 11896                           ;MCU_B1.c: 984: Flash_Memory_Modify();
 11897  1438  3196  266C         	fcall	_Flash_Memory_Modify
 11898                           
 11899                           ;MCU_B1.c: 985: }
 11900                           ;MCU_B1.c: 986: } else {
 11901  143A  0008               	return
 11902  143B                     l1418:	
 11903                           
 11904                           ;MCU_B1.c: 987: if (Memory.Runtime == 1) {
 11905  143B  1DC4               	btfss	(_Memory^(0+512)+36),3
 11906  143C  0008               	return
 11907                           
 11908                           ;MCU_B1.c: 988: Memory.Runtime = 0;
 11909  143D  11C4               	bcf	(_Memory^(0+512)+36),3
 11910                           
 11911                           ;MCU_B1.c: 989: Memory.Time = 0;
 11912  143E  01C2               	clrf	(_Memory^(0+512)+34)
 11913  143F  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11914  1440  0008               	return
 11915  1441                     __end_of_Flash_Memory_Main:	
 11916                           
 11917                           	psect	text78
 11918  166C                     __ptext78:	
 11919 ;; *************** function _Flash_Memory_Modify *****************
 11920 ;; Defined at:
 11921 ;;		line 1047 in file "../src/MCU_B1.c"
 11922 ;; Parameters:    Size  Location     Type
 11923 ;;		None
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;  i               1    7[COMMON] unsigned char 
 11926 ;; Return value:  Size  Location     Type
 11927 ;;		None               void
 11928 ;; Registers used:
 11929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11938 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11939 ;;Total ram usage:        2 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:    5
 11942 ;; This function calls:
 11943 ;;		_Flash_Memory_Erasing
 11944 ;;		_Flash_Memory_Read
 11945 ;;		_Flash_Memory_Write
 11946 ;;		_setMemory_Data
 11947 ;; This function is called by:
 11948 ;;		_Flash_Memory_Main
 11949 ;; This function uses a non-reentrant model
 11950 ;;
 11951                           
 11952                           
 11953                           ;psect for function _Flash_Memory_Modify
 11954  166C                     _Flash_Memory_Modify:	
 11955                           
 11956                           ;MCU_B1.c: 1048: char i = 0;
 11957                           
 11958                           ;incstack = 0
 11959                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11960  166C  01F7               	clrf	Flash_Memory_Modify@i
 11961                           
 11962                           ;MCU_B1.c: 1049: for (i = 0; i < 32; i++) {
 11963  166D  01F7               	clrf	Flash_Memory_Modify@i
 11964  166E  3020               	movlw	32
 11965  166F  0277               	subwf	Flash_Memory_Modify@i,w
 11966  1670  1803               	btfsc	3,0
 11967  1671  2E86               	goto	l7696
 11968  1672                     l7690:	
 11969                           
 11970                           ;MCU_B1.c: 1050: Memory.Data[i] = Flash_Memory_Read(i);
 11971  1672  0877               	movf	Flash_Memory_Modify@i,w
 11972  1673  319F  2712  3196   	fcall	_Flash_Memory_Read
 11973  1676  00F6               	movwf	??_Flash_Memory_Modify
 11974  1677  0877               	movf	Flash_Memory_Modify@i,w
 11975  1678  3E20               	addlw	_Memory& (0+255)
 11976  1679  0086               	movwf	6
 11977  167A  3002               	movlw	2	; select bank4/5
 11978  167B  0087               	movwf	7
 11979  167C  0876               	movf	??_Flash_Memory_Modify,w
 11980  167D  0081               	movwf	1
 11981  167E  3001               	movlw	1
 11982  167F  00F6               	movwf	??_Flash_Memory_Modify
 11983  1680  0876               	movf	??_Flash_Memory_Modify,w
 11984  1681  07F7               	addwf	Flash_Memory_Modify@i,f
 11985  1682  3020               	movlw	32
 11986  1683  0277               	subwf	Flash_Memory_Modify@i,w
 11987  1684  1C03               	skipc
 11988  1685  2E72               	goto	l7690
 11989  1686                     l7696:	
 11990                           
 11991                           ;MCU_B1.c: 1051: }
 11992                           ;MCU_B1.c: 1052: setMemory_Data(0, product->Data[12]);
 11993  1686  0020               	movlb	0	; select bank0
 11994  1687  086D               	movf	_product,w
 11995  1688  0086               	movwf	6
 11996  1689  3002               	movlw	2	; select bank4/5
 11997  168A  0087               	movwf	7
 11998  168B  3002               	movlw	2	; select bank4/5
 11999  168C  3F4C               	moviw [12]fsr1
 12000  168D  00F2               	movwf	setMemory_Data@data
 12001  168E  3000               	movlw	0
 12002  168F  319D  2539  3196   	fcall	_setMemory_Data
 12003                           
 12004                           ;MCU_B1.c: 1053: setMemory_Data(1, product->Data[13]);
 12005  1692  0020               	movlb	0	; select bank0
 12006  1693  086D               	movf	_product,w
 12007  1694  0086               	movwf	6
 12008  1695  3002               	movlw	2	; select bank4/5
 12009  1696  0087               	movwf	7
 12010  1697  3002               	movlw	2	; select bank4/5
 12011  1698  3F4D               	moviw [13]fsr1
 12012  1699  00F2               	movwf	setMemory_Data@data
 12013  169A  3001               	movlw	1
 12014  169B  319D  2539  3196   	fcall	_setMemory_Data
 12015                           
 12016                           ;MCU_B1.c: 1054: setMemory_Data(2, product->Data[14]);
 12017  169E  0020               	movlb	0	; select bank0
 12018  169F  086D               	movf	_product,w
 12019  16A0  0086               	movwf	6
 12020  16A1  3002               	movlw	2	; select bank4/5
 12021  16A2  0087               	movwf	7
 12022  16A3  3002               	movlw	2	; select bank4/5
 12023  16A4  3F4E               	moviw [14]fsr1
 12024  16A5  00F2               	movwf	setMemory_Data@data
 12025  16A6  3002               	movlw	2
 12026  16A7  319D  2539  3196   	fcall	_setMemory_Data
 12027                           
 12028                           ;MCU_B1.c: 1060: if (Memory.LoopSave == 1) {
 12029  16AA  0024               	movlb	4	; select bank4
 12030  16AB  1D44               	btfss	(_Memory^(0+512)+36),2
 12031  16AC  2EB1               	goto	l1441
 12032                           
 12033                           ;MCU_B1.c: 1061: Memory.LoopSave = 0;
 12034  16AD  1144               	bcf	(_Memory^(0+512)+36),2
 12035                           
 12036                           ;MCU_B1.c: 1062: myMain.FirstOpen = 0;
 12037  16AE  0022               	movlb	2	; select bank2
 12038  16AF  11A0               	bcf	_myMain^(0+256),3
 12039                           
 12040                           ;MCU_B1.c: 1063: myMain.First = 0;
 12041  16B0  12A0               	bcf	_myMain^(0+256),5
 12042  16B1                     l1441:	
 12043                           
 12044                           ;MCU_B1.c: 1065: }
 12045                           ;MCU_B1.c: 1066: GIE = 0;
 12046  16B1  138B               	bcf	11,7	;volatile
 12047                           
 12048                           ;MCU_B1.c: 1067: Flash_Memory_Erasing();
 12049  16B2  319D  2566  3196   	fcall	_Flash_Memory_Erasing
 12050                           
 12051                           ;MCU_B1.c: 1068: Flash_Memory_Write();
 12052  16B5  3193  235B         	fcall	_Flash_Memory_Write
 12053                           
 12054                           ;MCU_B1.c: 1069: GIE = 1;
 12055  16B7  178B               	bsf	11,7	;volatile
 12056  16B8  0008               	return
 12057  16B9                     __end_of_Flash_Memory_Modify:	
 12058                           
 12059                           	psect	text79
 12060  1D66                     __ptext79:	
 12061 ;; *************** function _Flash_Memory_Erasing *****************
 12062 ;; Defined at:
 12063 ;;		line 1036 in file "../src/MCU_B1.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;		None
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;		None
 12068 ;; Return value:  Size  Location     Type
 12069 ;;		None               void
 12070 ;; Registers used:
 12071 ;;		wreg, status,2, status,0, pclath, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;Total ram usage:        0 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    4
 12084 ;; This function calls:
 12085 ;;		_Flash_Memory_Unlock
 12086 ;; This function is called by:
 12087 ;;		_Flash_Memory_Modify
 12088 ;; This function uses a non-reentrant model
 12089 ;;
 12090                           
 12091                           
 12092                           ;psect for function _Flash_Memory_Erasing
 12093  1D66                     _Flash_Memory_Erasing:	
 12094                           
 12095                           ;MCU_B1.c: 1037: CFGS = 0;
 12096                           
 12097                           ;incstack = 0
 12098                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12099  1D66  0023               	movlb	3	; select bank3
 12100  1D67  1315               	bcf	21,6	;volatile
 12101                           
 12102                           ;MCU_B1.c: 1038: PMADRH = 0x30;
 12103  1D68  3030               	movlw	48
 12104  1D69  0092               	movwf	18	;volatile
 12105                           
 12106                           ;MCU_B1.c: 1039: PMADRL = 0x00;
 12107  1D6A  0191               	clrf	17	;volatile
 12108                           
 12109                           ;MCU_B1.c: 1040: FREE = 1;
 12110  1D6B  1615               	bsf	21,4	;volatile
 12111                           
 12112                           ;MCU_B1.c: 1041: WREN = 1;
 12113  1D6C  1515               	bsf	21,2	;volatile
 12114                           
 12115                           ;MCU_B1.c: 1042: Flash_Memory_Unlock();
 12116  1D6D  319D  2512         	fcall	_Flash_Memory_Unlock
 12117                           
 12118                           ;MCU_B1.c: 1043: WREN = 0;
 12119  1D6F  0023               	movlb	3	; select bank3
 12120  1D70  1115               	bcf	21,2	;volatile
 12121  1D71  0008               	return
 12122  1D72                     __end_of_Flash_Memory_Erasing:	
 12123                           
 12124                           	psect	text80
 12125  0454                     __ptext80:	
 12126 ;; *************** function _Flash_Memory_Initialization *****************
 12127 ;; Defined at:
 12128 ;;		line 933 in file "../src/MCU_B1.c"
 12129 ;; Parameters:    Size  Location     Type
 12130 ;;		None
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  i               1   59[BANK0 ] unsigned char 
 12133 ;; Return value:  Size  Location     Type
 12134 ;;		None               void
 12135 ;; Registers used:
 12136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12137 ;; Tracked objects:
 12138 ;;		On entry : 0/0
 12139 ;;		On exit  : 0/0
 12140 ;;		Unchanged: 0/0
 12141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;Total ram usage:        2 bytes
 12147 ;; Hardware stack levels used:    1
 12148 ;; Hardware stack levels required when called:    6
 12149 ;; This function calls:
 12150 ;;		_Flash_Memory_Read
 12151 ;;		_Flash_Memory_Write
 12152 ;;		_setDimmerLights_PercentValue
 12153 ;;		_setMemory_Data
 12154 ;; This function is called by:
 12155 ;;		_main
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _Flash_Memory_Initialization
 12161  0454                     _Flash_Memory_Initialization:	
 12162                           
 12163                           ;MCU_B1.c: 934: char i = 0;
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12167  0454  0020               	movlb	0	; select bank0
 12168  0455  01DB               	clrf	Flash_Memory_Initialization@i
 12169                           
 12170                           ;MCU_B1.c: 935: if (Flash_Memory_Read(31) == 0xaa) {
 12171  0456  301F               	movlw	31
 12172  0457  319F  2712  3184   	fcall	_Flash_Memory_Read
 12173  045A  3AAA               	xorlw	170
 12174  045B  1D03               	skipz
 12175  045C  2CC6               	goto	l9716
 12176                           
 12177                           ;MCU_B1.c: 936: product->Data[12] = Flash_Memory_Read(0);
 12178  045D  3000               	movlw	0
 12179  045E  319F  2712  3184   	fcall	_Flash_Memory_Read
 12180  0461  0020               	movlb	0	; select bank0
 12181  0462  00DA               	movwf	??_Flash_Memory_Initialization
 12182  0463  086D               	movf	_product,w
 12183  0464  3E0C               	addlw	12
 12184  0465  0086               	movwf	6
 12185  0466  3002               	movlw	2	; select bank4/5
 12186  0467  0087               	movwf	7
 12187  0468  085A               	movf	??_Flash_Memory_Initialization,w
 12188  0469  0081               	movwf	1
 12189                           
 12190                           ;MCU_B1.c: 937: product->Data[13] = Flash_Memory_Read(1);
 12191  046A  3001               	movlw	1
 12192  046B  319F  2712  3184   	fcall	_Flash_Memory_Read
 12193  046E  0020               	movlb	0	; select bank0
 12194  046F  00DA               	movwf	??_Flash_Memory_Initialization
 12195  0470  086D               	movf	_product,w
 12196  0471  3E0D               	addlw	13
 12197  0472  0086               	movwf	6
 12198  0473  3002               	movlw	2	; select bank4/5
 12199  0474  0087               	movwf	7
 12200  0475  085A               	movf	??_Flash_Memory_Initialization,w
 12201  0476  0081               	movwf	1
 12202                           
 12203                           ;MCU_B1.c: 938: product->Data[14] = Flash_Memory_Read(2);
 12204  0477  3002               	movlw	2
 12205  0478  319F  2712  3184   	fcall	_Flash_Memory_Read
 12206  047B  0020               	movlb	0	; select bank0
 12207  047C  00DA               	movwf	??_Flash_Memory_Initialization
 12208  047D  086D               	movf	_product,w
 12209  047E  3E0E               	addlw	14
 12210  047F  0086               	movwf	6
 12211  0480  3002               	movlw	2	; select bank4/5
 12212  0481  0087               	movwf	7
 12213  0482  085A               	movf	??_Flash_Memory_Initialization,w
 12214  0483  0081               	movwf	1
 12215                           
 12216                           ;MCU_B1.c: 944: i = setDimmerLights_PercentValue(((char)(70*0.8)));
 12217  0484  3038               	movlw	56
 12218  0485  318B  23C8  3184   	fcall	_setDimmerLights_PercentValue
 12219  0488  0020               	movlb	0	; select bank0
 12220  0489  00DA               	movwf	??_Flash_Memory_Initialization
 12221  048A  085A               	movf	??_Flash_Memory_Initialization,w
 12222  048B  00DB               	movwf	Flash_Memory_Initialization@i
 12223                           
 12224                           ;MCU_B1.c: 945: product->Data[21] = i;
 12225  048C  085B               	movf	Flash_Memory_Initialization@i,w
 12226  048D  00DA               	movwf	??_Flash_Memory_Initialization
 12227  048E  086D               	movf	_product,w
 12228  048F  3E15               	addlw	21
 12229  0490  0086               	movwf	6
 12230  0491  3002               	movlw	2	; select bank4/5
 12231  0492  0087               	movwf	7
 12232  0493  085A               	movf	??_Flash_Memory_Initialization,w
 12233  0494  0081               	movwf	1
 12234                           
 12235                           ;MCU_B1.c: 946: product->Data[22] = i;
 12236  0495  085B               	movf	Flash_Memory_Initialization@i,w
 12237  0496  00DA               	movwf	??_Flash_Memory_Initialization
 12238  0497  086D               	movf	_product,w
 12239  0498  3E16               	addlw	22
 12240  0499  0086               	movwf	6
 12241  049A  3002               	movlw	2	; select bank4/5
 12242  049B  0087               	movwf	7
 12243  049C  085A               	movf	??_Flash_Memory_Initialization,w
 12244  049D  0081               	movwf	1
 12245                           
 12246                           ;MCU_B1.c: 947: product->Data[23] = i;
 12247  049E  085B               	movf	Flash_Memory_Initialization@i,w
 12248  049F  00DA               	movwf	??_Flash_Memory_Initialization
 12249  04A0  086D               	movf	_product,w
 12250  04A1  3E17               	addlw	23
 12251  04A2  0086               	movwf	6
 12252  04A3  3002               	movlw	2	; select bank4/5
 12253  04A4  0087               	movwf	7
 12254  04A5  085A               	movf	??_Flash_Memory_Initialization,w
 12255  04A6  0081               	movwf	1
 12256                           
 12257                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12258  04A7  086D               	movf	_product,w
 12259  04A8  3E0C               	addlw	12
 12260  04A9  0086               	movwf	6
 12261  04AA  3002               	movlw	2	; select bank4/5
 12262  04AB  0087               	movwf	7
 12263  04AC  0801               	movf	1,w
 12264  04AD  3AFF               	xorlw	255
 12265  04AE  1D03               	skipz
 12266  04AF  0008               	return
 12267  04B0  086D               	movf	_product,w
 12268  04B1  3E0D               	addlw	13
 12269  04B2  0086               	movwf	6
 12270  04B3  3002               	movlw	2	; select bank4/5
 12271  04B4  0087               	movwf	7
 12272  04B5  0801               	movf	1,w
 12273  04B6  3AFF               	xorlw	255
 12274  04B7  1D03               	skipz
 12275  04B8  0008               	return
 12276  04B9  086D               	movf	_product,w
 12277  04BA  3E0E               	addlw	14
 12278  04BB  0086               	movwf	6
 12279  04BC  3002               	movlw	2	; select bank4/5
 12280  04BD  0087               	movwf	7
 12281  04BE  0801               	movf	1,w
 12282  04BF  3AFF               	xorlw	255
 12283  04C0  1D03               	skipz
 12284  04C1  0008               	return
 12285                           
 12286                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12287  04C2  0022               	movlb	2	; select bank2
 12288  04C3  15A0               	bsf	_myMain^(0+256),3
 12289                           
 12290                           ;MCU_B1.c: 951: myMain.First = 1;
 12291  04C4  16A0               	bsf	_myMain^(0+256),5
 12292                           
 12293                           ;MCU_B1.c: 952: }
 12294                           ;MCU_B1.c: 953: } else {
 12295  04C5  0008               	return
 12296  04C6                     l9716:	
 12297                           
 12298                           ;MCU_B1.c: 954: i = setDimmerLights_PercentValue(((char)(70*0.8)));
 12299  04C6  3038               	movlw	56
 12300  04C7  318B  23C8  3184   	fcall	_setDimmerLights_PercentValue
 12301  04CA  0020               	movlb	0	; select bank0
 12302  04CB  00DA               	movwf	??_Flash_Memory_Initialization
 12303  04CC  085A               	movf	??_Flash_Memory_Initialization,w
 12304  04CD  00DB               	movwf	Flash_Memory_Initialization@i
 12305                           
 12306                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12307  04CE  30FF               	movlw	255
 12308  04CF  00DA               	movwf	??_Flash_Memory_Initialization
 12309  04D0  085A               	movf	??_Flash_Memory_Initialization,w
 12310  04D1  00F2               	movwf	setMemory_Data@data
 12311  04D2  3000               	movlw	0
 12312  04D3  319D  2539  3184   	fcall	_setMemory_Data
 12313                           
 12314                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12315  04D6  30FF               	movlw	255
 12316  04D7  0020               	movlb	0	; select bank0
 12317  04D8  00DA               	movwf	??_Flash_Memory_Initialization
 12318  04D9  085A               	movf	??_Flash_Memory_Initialization,w
 12319  04DA  00F2               	movwf	setMemory_Data@data
 12320  04DB  3001               	movlw	1
 12321  04DC  319D  2539  3184   	fcall	_setMemory_Data
 12322                           
 12323                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12324  04DF  30FF               	movlw	255
 12325  04E0  0020               	movlb	0	; select bank0
 12326  04E1  00DA               	movwf	??_Flash_Memory_Initialization
 12327  04E2  085A               	movf	??_Flash_Memory_Initialization,w
 12328  04E3  00F2               	movwf	setMemory_Data@data
 12329  04E4  3002               	movlw	2
 12330  04E5  319D  2539  3184   	fcall	_setMemory_Data
 12331                           
 12332                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12333  04E8  30FF               	movlw	255
 12334  04E9  0020               	movlb	0	; select bank0
 12335  04EA  00DA               	movwf	??_Flash_Memory_Initialization
 12336  04EB  085A               	movf	??_Flash_Memory_Initialization,w
 12337  04EC  00F2               	movwf	setMemory_Data@data
 12338  04ED  3003               	movlw	3
 12339  04EE  319D  2539  3184   	fcall	_setMemory_Data
 12340                           
 12341                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12342  04F1  30FF               	movlw	255
 12343  04F2  0020               	movlb	0	; select bank0
 12344  04F3  00DA               	movwf	??_Flash_Memory_Initialization
 12345  04F4  085A               	movf	??_Flash_Memory_Initialization,w
 12346  04F5  00F2               	movwf	setMemory_Data@data
 12347  04F6  3004               	movlw	4
 12348  04F7  319D  2539  3184   	fcall	_setMemory_Data
 12349                           
 12350                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12351  04FA  30FF               	movlw	255
 12352  04FB  0020               	movlb	0	; select bank0
 12353  04FC  00DA               	movwf	??_Flash_Memory_Initialization
 12354  04FD  085A               	movf	??_Flash_Memory_Initialization,w
 12355  04FE  00F2               	movwf	setMemory_Data@data
 12356  04FF  3005               	movlw	5
 12357  0500  319D  2539  3184   	fcall	_setMemory_Data
 12358                           
 12359                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12360  0503  30AA               	movlw	170
 12361  0504  0020               	movlb	0	; select bank0
 12362  0505  00DA               	movwf	??_Flash_Memory_Initialization
 12363  0506  085A               	movf	??_Flash_Memory_Initialization,w
 12364  0507  00F2               	movwf	setMemory_Data@data
 12365  0508  301F               	movlw	31
 12366  0509  319D  2539  3184   	fcall	_setMemory_Data
 12367                           
 12368                           ;MCU_B1.c: 962: product->Data[21] = i;
 12369  050C  0020               	movlb	0	; select bank0
 12370  050D  085B               	movf	Flash_Memory_Initialization@i,w
 12371  050E  00DA               	movwf	??_Flash_Memory_Initialization
 12372  050F  086D               	movf	_product,w
 12373  0510  3E15               	addlw	21
 12374  0511  0086               	movwf	6
 12375  0512  3002               	movlw	2	; select bank4/5
 12376  0513  0087               	movwf	7
 12377  0514  085A               	movf	??_Flash_Memory_Initialization,w
 12378  0515  0081               	movwf	1
 12379                           
 12380                           ;MCU_B1.c: 963: product->Data[22] = i;
 12381  0516  085B               	movf	Flash_Memory_Initialization@i,w
 12382  0517  00DA               	movwf	??_Flash_Memory_Initialization
 12383  0518  086D               	movf	_product,w
 12384  0519  3E16               	addlw	22
 12385  051A  0086               	movwf	6
 12386  051B  3002               	movlw	2	; select bank4/5
 12387  051C  0087               	movwf	7
 12388  051D  085A               	movf	??_Flash_Memory_Initialization,w
 12389  051E  0081               	movwf	1
 12390                           
 12391                           ;MCU_B1.c: 964: product->Data[23] = i;
 12392  051F  085B               	movf	Flash_Memory_Initialization@i,w
 12393  0520  00DA               	movwf	??_Flash_Memory_Initialization
 12394  0521  086D               	movf	_product,w
 12395  0522  3E17               	addlw	23
 12396  0523  0086               	movwf	6
 12397  0524  3002               	movlw	2	; select bank4/5
 12398  0525  0087               	movwf	7
 12399  0526  085A               	movf	??_Flash_Memory_Initialization,w
 12400  0527  0081               	movwf	1
 12401                           
 12402                           ;MCU_B1.c: 965: GIE = 0;
 12403  0528  138B               	bcf	11,7	;volatile
 12404                           
 12405                           ;MCU_B1.c: 966: Flash_Memory_Write();
 12406  0529  3193  235B         	fcall	_Flash_Memory_Write
 12407                           
 12408                           ;MCU_B1.c: 967: GIE = 1;
 12409  052B  178B               	bsf	11,7	;volatile
 12410                           
 12411                           ;MCU_B1.c: 968: myMain.FirstOpen = 1;
 12412  052C  0022               	movlb	2	; select bank2
 12413  052D  15A0               	bsf	_myMain^(0+256),3
 12414                           
 12415                           ;MCU_B1.c: 969: myMain.First = 1;
 12416  052E  16A0               	bsf	_myMain^(0+256),5
 12417  052F  0008               	return
 12418  0530                     __end_of_Flash_Memory_Initialization:	
 12419                           
 12420                           	psect	text81
 12421  1D39                     __ptext81:	
 12422 ;; *************** function _setMemory_Data *****************
 12423 ;; Defined at:
 12424 ;;		line 1084 in file "../src/MCU_B1.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;  address         1    wreg     unsigned char 
 12427 ;;  data            1    2[COMMON] unsigned char 
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;  address         1    4[COMMON] unsigned char 
 12430 ;; Return value:  Size  Location     Type
 12431 ;;		None               void
 12432 ;; Registers used:
 12433 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12439 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;Total ram usage:        3 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:    3
 12446 ;; This function calls:
 12447 ;;		Nothing
 12448 ;; This function is called by:
 12449 ;;		_Flash_Memory_Initialization
 12450 ;;		_Flash_Memory_Modify
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _setMemory_Data
 12456  1D39                     _setMemory_Data:	
 12457                           
 12458                           ;incstack = 0
 12459                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12460                           ;setMemory_Data@address stored from wreg
 12461  1D39  00F4               	movwf	setMemory_Data@address
 12462                           
 12463                           ;MCU_B1.c: 1085: Memory.Data[address] = data;
 12464  1D3A  0872               	movf	setMemory_Data@data,w
 12465  1D3B  00F3               	movwf	??_setMemory_Data
 12466  1D3C  0874               	movf	setMemory_Data@address,w
 12467  1D3D  3E20               	addlw	_Memory& (0+255)
 12468  1D3E  0086               	movwf	6
 12469  1D3F  3002               	movlw	2	; select bank4/5
 12470  1D40  0087               	movwf	7
 12471  1D41  0873               	movf	??_setMemory_Data,w
 12472  1D42  0081               	movwf	1
 12473  1D43  0008               	return
 12474  1D44                     __end_of_setMemory_Data:	
 12475                           
 12476                           	psect	text82
 12477  135B                     __ptext82:	
 12478 ;; *************** function _Flash_Memory_Write *****************
 12479 ;; Defined at:
 12480 ;;		line 1017 in file "../src/MCU_B1.c"
 12481 ;; Parameters:    Size  Location     Type
 12482 ;;		None
 12483 ;; Auto vars:     Size  Location     Type
 12484 ;;  i               1    3[COMMON] unsigned char 
 12485 ;; Return value:  Size  Location     Type
 12486 ;;		None               void
 12487 ;; Registers used:
 12488 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12489 ;; Tracked objects:
 12490 ;;		On entry : 0/0
 12491 ;;		On exit  : 0/0
 12492 ;;		Unchanged: 0/0
 12493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12498 ;;Total ram usage:        2 bytes
 12499 ;; Hardware stack levels used:    1
 12500 ;; Hardware stack levels required when called:    4
 12501 ;; This function calls:
 12502 ;;		_Flash_Memory_Unlock
 12503 ;; This function is called by:
 12504 ;;		_Flash_Memory_Initialization
 12505 ;;		_Flash_Memory_Modify
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           
 12510                           ;psect for function _Flash_Memory_Write
 12511  135B                     _Flash_Memory_Write:	
 12512                           
 12513                           ;MCU_B1.c: 1018: char i = 0;
 12514                           
 12515                           ;incstack = 0
 12516                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12517  135B  01F3               	clrf	Flash_Memory_Write@i
 12518                           
 12519                           ;MCU_B1.c: 1019: CFGS = 0;
 12520  135C  0023               	movlb	3	; select bank3
 12521  135D  1315               	bcf	21,6	;volatile
 12522                           
 12523                           ;MCU_B1.c: 1020: PMADRH = 0x30;
 12524  135E  3030               	movlw	48
 12525  135F  0092               	movwf	18	;volatile
 12526                           
 12527                           ;MCU_B1.c: 1021: PMDATH = 0;
 12528  1360  0194               	clrf	20	;volatile
 12529                           
 12530                           ;MCU_B1.c: 1022: FREE = 0;
 12531  1361  1215               	bcf	21,4	;volatile
 12532                           
 12533                           ;MCU_B1.c: 1023: LWLO = 1;
 12534  1362  1695               	bsf	21,5	;volatile
 12535                           
 12536                           ;MCU_B1.c: 1024: WREN = 1;
 12537  1363  1515               	bsf	21,2	;volatile
 12538                           
 12539                           ;MCU_B1.c: 1025: for (i = 0; i < 32; i++) {
 12540  1364  01F3               	clrf	Flash_Memory_Write@i
 12541  1365  3020               	movlw	32
 12542  1366  0273               	subwf	Flash_Memory_Write@i,w
 12543  1367  1803               	btfsc	3,0
 12544  1368  2B7E               	goto	l1432
 12545  1369                     l7226:	
 12546                           
 12547                           ;MCU_B1.c: 1026: PMADRL = i;
 12548  1369  0873               	movf	Flash_Memory_Write@i,w
 12549  136A  0023               	movlb	3	; select bank3
 12550  136B  0091               	movwf	17	;volatile
 12551                           
 12552                           ;MCU_B1.c: 1027: PMDATL = Memory.Data[i];
 12553  136C  0873               	movf	Flash_Memory_Write@i,w
 12554  136D  3E20               	addlw	_Memory& (0+255)
 12555  136E  0086               	movwf	6
 12556  136F  3002               	movlw	2	; select bank4/5
 12557  1370  0087               	movwf	7
 12558  1371  0801               	movf	1,w
 12559  1372  0093               	movwf	19	;volatile
 12560                           
 12561                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12562  1373  319D  2512  3193   	fcall	_Flash_Memory_Unlock
 12563  1376  3001               	movlw	1
 12564  1377  00F2               	movwf	??_Flash_Memory_Write
 12565  1378  0872               	movf	??_Flash_Memory_Write,w
 12566  1379  07F3               	addwf	Flash_Memory_Write@i,f
 12567  137A  3020               	movlw	32
 12568  137B  0273               	subwf	Flash_Memory_Write@i,w
 12569  137C  1C03               	skipc
 12570  137D  2B69               	goto	l7226
 12571  137E                     l1432:	
 12572                           
 12573                           ;MCU_B1.c: 1029: }
 12574                           ;MCU_B1.c: 1030: LWLO = 0;
 12575  137E  0023               	movlb	3	; select bank3
 12576  137F  1295               	bcf	21,5	;volatile
 12577                           
 12578                           ;MCU_B1.c: 1031: Flash_Memory_Unlock();
 12579  1380  319D  2512         	fcall	_Flash_Memory_Unlock
 12580                           
 12581                           ;MCU_B1.c: 1032: WREN = 0;
 12582  1382  0023               	movlb	3	; select bank3
 12583  1383  1115               	bcf	21,2	;volatile
 12584  1384  0008               	return
 12585  1385                     __end_of_Flash_Memory_Write:	
 12586                           
 12587                           	psect	text83
 12588  1D12                     __ptext83:	
 12589 ;; *************** function _Flash_Memory_Unlock *****************
 12590 ;; Defined at:
 12591 ;;		line 996 in file "../src/MCU_B1.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;		None
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;		None
 12596 ;; Return value:  Size  Location     Type
 12597 ;;		None               void
 12598 ;; Registers used:
 12599 ;;		wreg
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12609 ;;Total ram usage:        0 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    3
 12612 ;; This function calls:
 12613 ;;		Nothing
 12614 ;; This function is called by:
 12615 ;;		_Flash_Memory_Write
 12616 ;;		_Flash_Memory_Erasing
 12617 ;; This function uses a non-reentrant model
 12618 ;;
 12619                           
 12620                           
 12621                           ;psect for function _Flash_Memory_Unlock
 12622  1D12                     _Flash_Memory_Unlock:	
 12623                           
 12624                           ;MCU_B1.c: 997: PMCON2 = 0x55;
 12625                           
 12626                           ;incstack = 0
 12627                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12628  1D12  3055               	movlw	85
 12629  1D13  0023               	movlb	3	; select bank3
 12630  1D14  0096               	movwf	22	;volatile
 12631                           
 12632                           ;MCU_B1.c: 998: PMCON2 = 0xaa;
 12633  1D15  30AA               	movlw	170
 12634  1D16  0096               	movwf	22	;volatile
 12635                           
 12636                           ;MCU_B1.c: 999: WR = 1;
 12637  1D17  1495               	bsf	21,1	;volatile
 12638                           
 12639                           ;MCU_B1.c: 1000: __nop();
 12640  1D18  0000               	nop
 12641                           
 12642                           ;MCU_B1.c: 1001: __nop();
 12643  1D19  0000               	nop
 12644  1D1A  0008               	return
 12645  1D1B                     __end_of_Flash_Memory_Unlock:	
 12646                           
 12647                           	psect	text84
 12648  1F12                     __ptext84:	
 12649 ;; *************** function _Flash_Memory_Read *****************
 12650 ;; Defined at:
 12651 ;;		line 1005 in file "../src/MCU_B1.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;  address         1    wreg     unsigned char 
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;  address         1    4[COMMON] unsigned char 
 12656 ;;  ret             1    5[COMMON] unsigned char 
 12657 ;;  i               1    3[COMMON] unsigned char 
 12658 ;; Return value:  Size  Location     Type
 12659 ;;                  1    wreg      unsigned char 
 12660 ;; Registers used:
 12661 ;;		wreg, status,2
 12662 ;; Tracked objects:
 12663 ;;		On entry : 0/0
 12664 ;;		On exit  : 0/0
 12665 ;;		Unchanged: 0/0
 12666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12669 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12670 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12671 ;;Total ram usage:        4 bytes
 12672 ;; Hardware stack levels used:    1
 12673 ;; Hardware stack levels required when called:    3
 12674 ;; This function calls:
 12675 ;;		Nothing
 12676 ;; This function is called by:
 12677 ;;		_Flash_Memory_Initialization
 12678 ;;		_Flash_Memory_Modify
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           
 12683                           ;psect for function _Flash_Memory_Read
 12684  1F12                     _Flash_Memory_Read:	
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12688                           ;Flash_Memory_Read@address stored from wreg
 12689  1F12  00F4               	movwf	Flash_Memory_Read@address
 12690                           
 12691                           ;MCU_B1.c: 1006: char i = 0, ret = 0;
 12692  1F13  01F3               	clrf	Flash_Memory_Read@i
 12693  1F14  01F5               	clrf	Flash_Memory_Read@ret
 12694                           
 12695                           ;MCU_B1.c: 1007: PMADRH = 0x30;
 12696  1F15  3030               	movlw	48
 12697  1F16  0023               	movlb	3	; select bank3
 12698  1F17  0092               	movwf	18	;volatile
 12699                           
 12700                           ;MCU_B1.c: 1008: PMADRL = address;
 12701  1F18  0874               	movf	Flash_Memory_Read@address,w
 12702  1F19  0091               	movwf	17	;volatile
 12703                           
 12704                           ;MCU_B1.c: 1009: CFGS = 0;
 12705  1F1A  1315               	bcf	21,6	;volatile
 12706                           
 12707                           ;MCU_B1.c: 1010: RD = 1;
 12708  1F1B  1415               	bsf	21,0	;volatile
 12709                           
 12710                           ;MCU_B1.c: 1011: i = PMDATH;
 12711  1F1C  0814               	movf	20,w	;volatile
 12712  1F1D  00F2               	movwf	??_Flash_Memory_Read
 12713  1F1E  0872               	movf	??_Flash_Memory_Read,w
 12714  1F1F  00F3               	movwf	Flash_Memory_Read@i
 12715                           
 12716                           ;MCU_B1.c: 1012: ret = PMDATL;
 12717  1F20  0813               	movf	19,w	;volatile
 12718  1F21  00F2               	movwf	??_Flash_Memory_Read
 12719  1F22  0872               	movf	??_Flash_Memory_Read,w
 12720  1F23  00F5               	movwf	Flash_Memory_Read@ret
 12721                           
 12722                           ;MCU_B1.c: 1013: return ret;
 12723  1F24  0875               	movf	Flash_Memory_Read@ret,w
 12724  1F25  0008               	return
 12725  1F26                     __end_of_Flash_Memory_Read:	
 12726                           
 12727                           	psect	text85
 12728  0530                     __ptext85:	
 12729 ;; *************** function _Exception_Main *****************
 12730 ;; Defined at:
 12731 ;;		line 509 in file "../src/Main_B1.c"
 12732 ;; Parameters:    Size  Location     Type
 12733 ;;		None
 12734 ;; Auto vars:     Size  Location     Type
 12735 ;;  i               2   72[BANK0 ] int 
 12736 ;;  i               2   70[BANK0 ] int 
 12737 ;;  lights          1   74[BANK0 ] unsigned char 
 12738 ;;  error           1   69[BANK0 ] unsigned char 
 12739 ;;  count           1   68[BANK0 ] unsigned char 
 12740 ;; Return value:  Size  Location     Type
 12741 ;;		None               void
 12742 ;; Registers used:
 12743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12744 ;; Tracked objects:
 12745 ;;		On entry : 0/0
 12746 ;;		On exit  : 0/0
 12747 ;;		Unchanged: 0/0
 12748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;Total ram usage:        8 bytes
 12754 ;; Hardware stack levels used:    1
 12755 ;; Hardware stack levels required when called:    7
 12756 ;; This function calls:
 12757 ;;		_getDimmerLights_Line
 12758 ;;		_getDimmerLights_Status
 12759 ;;		_getMain_All_Error_Status
 12760 ;;		_getMain_LightsStatus
 12761 ;;		_setBuz
 12762 ;;		_setDimmerLights_SwOff
 12763 ;;		_setLED
 12764 ;; This function is called by:
 12765 ;;		_main
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           
 12770                           ;psect for function _Exception_Main
 12771  0530                     _Exception_Main:	
 12772                           
 12773                           ;Main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12774                           
 12775                           ;incstack = 0
 12776                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12777  0530  3000               	movlw	0
 12778  0531  3193  23AF  3185   	fcall	_getMain_All_Error_Status
 12779  0534  0020               	movlb	0	; select bank0
 12780  0535  00E3               	movwf	??_Exception_Main
 12781  0536  0863               	movf	??_Exception_Main,w
 12782  0537  00E5               	movwf	Exception_Main@error
 12783                           
 12784                           ;Main_B1.c: 511: char lights = 0, count = 2;
 12785  0538  01EA               	clrf	Exception_Main@lights
 12786  0539  3002               	movlw	2
 12787  053A  00E3               	movwf	??_Exception_Main
 12788  053B  0863               	movf	??_Exception_Main,w
 12789  053C  00E4               	movwf	Exception_Main@count
 12790                           
 12791                           ;Main_B1.c: 512: if (myMain.Error_Run == 1) {
 12792  053D  0022               	movlb	2	; select bank2
 12793  053E  1DAB               	btfss	(_myMain^(0+256)+11),3
 12794  053F  2D4F               	goto	l10008
 12795                           
 12796                           ;Main_B1.c: 513: if (error == 0) {
 12797  0540  0020               	movlb	0	; select bank0
 12798  0541  08E5               	movf	Exception_Main@error,f
 12799  0542  1D03               	skipz
 12800  0543  0008               	return
 12801                           
 12802                           ;Main_B1.c: 514: myMain.Error_Run = 0;
 12803  0544  0022               	movlb	2	; select bank2
 12804  0545  11AB               	bcf	(_myMain^(0+256)+11),3
 12805                           
 12806                           ;Main_B1.c: 519: setLED(99, 10);
 12807  0546  300A               	movlw	10
 12808  0547  0020               	movlb	0	; select bank0
 12809  0548  00E3               	movwf	??_Exception_Main
 12810  0549  0863               	movf	??_Exception_Main,w
 12811  054A  00F4               	movwf	setLED@command
 12812  054B  3063               	movlw	99
 12813  054C  318A  2245         	fcall	_setLED
 12814                           
 12815                           ;Main_B1.c: 521: }
 12816                           ;Main_B1.c: 522: } else {
 12817  054E  0008               	return
 12818  054F                     l10008:	
 12819                           
 12820                           ;Main_B1.c: 523: if (error != 0) {
 12821  054F  0020               	movlb	0	; select bank0
 12822  0550  0865               	movf	Exception_Main@error,w
 12823  0551  1903               	btfsc	3,2
 12824  0552  0008               	return
 12825                           
 12826                           ;Main_B1.c: 524: myMain.Error_Run = 1;
 12827  0553  0022               	movlb	2	; select bank2
 12828  0554  15AB               	bsf	(_myMain^(0+256)+11),3
 12829                           
 12830                           ;Main_B1.c: 527: setLED(99, 11);
 12831  0555  300B               	movlw	11
 12832  0556  0020               	movlb	0	; select bank0
 12833  0557  00E3               	movwf	??_Exception_Main
 12834  0558  0863               	movf	??_Exception_Main,w
 12835  0559  00F4               	movwf	setLED@command
 12836  055A  3063               	movlw	99
 12837  055B  318A  2245  3185   	fcall	_setLED
 12838                           
 12839                           ;Main_B1.c: 529: switch (error) {
 12840  055E  2DF8               	goto	l10056
 12841  055F                     l10014:	
 12842                           ;Main_B1.c: 530: case 2:
 12843                           
 12844                           
 12845                           ;Main_B1.c: 531: if (getMain_LightsStatus() == 1) {
 12846  055F  319D  25DB  3185   	fcall	_getMain_LightsStatus
 12847  0562  3A01               	xorlw	1
 12848  0563  1D03               	skipz
 12849  0564  2D6E               	goto	l10018
 12850                           
 12851                           ;Main_B1.c: 532: setBuz(10, 300);
 12852  0565  302C               	movlw	44
 12853  0566  0020               	movlb	0	; select bank0
 12854  0567  00A4               	movwf	setBuz@time
 12855  0568  3001               	movlw	1
 12856  0569  00A5               	movwf	setBuz@time+1
 12857  056A  300A               	movlw	10
 12858  056B  3197  2759  3185   	fcall	_setBuz
 12859  056E                     l10018:	
 12860                           
 12861                           ;Main_B1.c: 533: }
 12862                           ;Main_B1.c: 535: for (int i = 0; i < count; i++) {
 12863  056E  0020               	movlb	0	; select bank0
 12864  056F  01E6               	clrf	Exception_Main@i
 12865  0570  01E7               	clrf	Exception_Main@i+1
 12866  0571                     l10028:	
 12867  0571  0867               	movf	Exception_Main@i+1,w
 12868  0572  3A80               	xorlw	128
 12869  0573  00E3               	movwf	??_Exception_Main
 12870  0574  3080               	movlw	128
 12871  0575  0263               	subwf	??_Exception_Main,w
 12872  0576  1D03               	skipz
 12873  0577  2D7A               	goto	u11745
 12874  0578  0864               	movf	Exception_Main@count,w
 12875  0579  0266               	subwf	Exception_Main@i,w
 12876  057A                     u11745:	
 12877  057A  1803               	btfsc	3,0
 12878  057B  2D9B               	goto	u11740
 12879                           
 12880                           ;Main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12881  057C  0020               	movlb	0	; select bank0
 12882  057D  0866               	movf	Exception_Main@i,w
 12883  057E  3E01               	addlw	1
 12884  057F  319D  25BD  3185   	fcall	_getDimmerLights_Status
 12885  0582  3A01               	xorlw	1
 12886  0583  1D03               	skipz
 12887  0584  2D95               	goto	l10026
 12888                           
 12889                           ;Main_B1.c: 538: DimmerLights->SwFlag = 1;
 12890  0585  0020               	movlb	0	; select bank0
 12891  0586  086B               	movf	_DimmerLights,w
 12892  0587  0086               	movwf	6
 12893  0588  3001               	movlw	1	; select bank2/3
 12894  0589  0087               	movwf	7
 12895  058A  1401               	bsf	1,0
 12896                           
 12897                           ;Main_B1.c: 539: DimmerLights->Status = 0;
 12898  058B  0A6B               	incf	_DimmerLights,w
 12899  058C  0086               	movwf	6
 12900  058D  3001               	movlw	1	; select bank2/3
 12901  058E  0087               	movwf	7
 12902  058F  1001               	bcf	1,0
 12903                           
 12904                           ;Main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12905  0590  0866               	movf	Exception_Main@i,w
 12906  0591  3E01               	addlw	1
 12907  0592  3196  2626  3185   	fcall	_setDimmerLights_SwOff
 12908  0595                     l10026:	
 12909  0595  3001               	movlw	1
 12910  0596  0020               	movlb	0	; select bank0
 12911  0597  07E6               	addwf	Exception_Main@i,f
 12912  0598  3000               	movlw	0
 12913  0599  3DE7               	addwfc	Exception_Main@i+1,f
 12914  059A  2D71               	goto	l10028
 12915  059B                     u11740:	
 12916  059B  0020               	movlb	0	; select bank0
 12917  059C  0008               	return
 12918  059D                     l10030:	
 12919                           ;Main_B1.c: 544: case 3:
 12920                           
 12921                           ;Main_B1.c: 541: }
 12922                           ;Main_B1.c: 542: }
 12923                           ;Main_B1.c: 543: break;
 12924                           
 12925                           
 12926                           ;Main_B1.c: 546: setBuz(5, 300);
 12927  059D  302C               	movlw	44
 12928  059E  0020               	movlb	0	; select bank0
 12929  059F  00A4               	movwf	setBuz@time
 12930  05A0  3001               	movlw	1
 12931  05A1  00A5               	movwf	setBuz@time+1
 12932  05A2  3005               	movlw	5
 12933  05A3  3197  2759  3185   	fcall	_setBuz
 12934                           
 12935                           ;Main_B1.c: 547: lights = getDimmerLights_Line();
 12936  05A6  319D  25EA  3185   	fcall	_getDimmerLights_Line
 12937  05A9  0020               	movlb	0	; select bank0
 12938  05AA  00E3               	movwf	??_Exception_Main
 12939  05AB  0863               	movf	??_Exception_Main,w
 12940  05AC  00EA               	movwf	Exception_Main@lights
 12941                           
 12942                           ;Main_B1.c: 548: if (lights == 0) {
 12943  05AD  08EA               	movf	Exception_Main@lights,f
 12944  05AE  1D03               	skipz
 12945  05AF  2DDE               	goto	l10048
 12946                           
 12947                           ;Main_B1.c: 550: for (int i = 0; i < count; i++) {
 12948  05B0  01E8               	clrf	Exception_Main@i_3373
 12949  05B1  01E9               	clrf	Exception_Main@i_3373+1
 12950  05B2                     l10046:	
 12951  05B2  0869               	movf	Exception_Main@i_3373+1,w
 12952  05B3  3A80               	xorlw	128
 12953  05B4  00E3               	movwf	??_Exception_Main
 12954  05B5  3080               	movlw	128
 12955  05B6  0263               	subwf	??_Exception_Main,w
 12956  05B7  1D03               	skipz
 12957  05B8  2DBB               	goto	u11775
 12958  05B9  0864               	movf	Exception_Main@count,w
 12959  05BA  0268               	subwf	Exception_Main@i_3373,w
 12960  05BB                     u11775:	
 12961  05BB  1803               	btfsc	3,0
 12962  05BC  2DDC               	goto	u11770
 12963                           
 12964                           ;Main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 12965  05BD  0020               	movlb	0	; select bank0
 12966  05BE  0868               	movf	Exception_Main@i_3373,w
 12967  05BF  3E01               	addlw	1
 12968  05C0  319D  25BD  3185   	fcall	_getDimmerLights_Status
 12969  05C3  3A01               	xorlw	1
 12970  05C4  1D03               	skipz
 12971  05C5  2DD6               	goto	l10044
 12972                           
 12973                           ;Main_B1.c: 553: DimmerLights->SwFlag = 1;
 12974  05C6  0020               	movlb	0	; select bank0
 12975  05C7  086B               	movf	_DimmerLights,w
 12976  05C8  0086               	movwf	6
 12977  05C9  3001               	movlw	1	; select bank2/3
 12978  05CA  0087               	movwf	7
 12979  05CB  1401               	bsf	1,0
 12980                           
 12981                           ;Main_B1.c: 554: DimmerLights->Status = 0;
 12982  05CC  0A6B               	incf	_DimmerLights,w
 12983  05CD  0086               	movwf	6
 12984  05CE  3001               	movlw	1	; select bank2/3
 12985  05CF  0087               	movwf	7
 12986  05D0  1001               	bcf	1,0
 12987                           
 12988                           ;Main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 12989  05D1  0868               	movf	Exception_Main@i_3373,w
 12990  05D2  3E01               	addlw	1
 12991  05D3  3196  2626  3185   	fcall	_setDimmerLights_SwOff
 12992  05D6                     l10044:	
 12993  05D6  3001               	movlw	1
 12994  05D7  0020               	movlb	0	; select bank0
 12995  05D8  07E8               	addwf	Exception_Main@i_3373,f
 12996  05D9  3000               	movlw	0
 12997  05DA  3DE9               	addwfc	Exception_Main@i_3373+1,f
 12998  05DB  2DB2               	goto	l10046
 12999  05DC                     u11770:	
 13000  05DC  0020               	movlb	0	; select bank0
 13001  05DD  0008               	return
 13002  05DE                     l10048:	
 13003                           ;Main_B1.c: 556: }
 13004                           ;Main_B1.c: 557: }
 13005                           ;Main_B1.c: 558: } else {
 13006                           
 13007                           
 13008                           ;Main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13009  05DE  0020               	movlb	0	; select bank0
 13010  05DF  086A               	movf	Exception_Main@lights,w
 13011  05E0  319D  25BD  3185   	fcall	_getDimmerLights_Status
 13012  05E3  3A01               	xorlw	1
 13013  05E4  1903               	btfsc	3,2
 13014  05E5  2DE8               	goto	l10050
 13015  05E6  0020               	movlb	0	; select bank0
 13016  05E7  0008               	return
 13017  05E8                     l10050:	
 13018                           
 13019                           ;Main_B1.c: 562: DimmerLights->SwFlag = 1;
 13020  05E8  0020               	movlb	0	; select bank0
 13021  05E9  086B               	movf	_DimmerLights,w
 13022  05EA  0086               	movwf	6
 13023  05EB  3001               	movlw	1	; select bank2/3
 13024  05EC  0087               	movwf	7
 13025  05ED  1401               	bsf	1,0
 13026                           
 13027                           ;Main_B1.c: 563: DimmerLights->Status = 0;
 13028  05EE  0A6B               	incf	_DimmerLights,w
 13029  05EF  0086               	movwf	6
 13030  05F0  3001               	movlw	1	; select bank2/3
 13031  05F1  0087               	movwf	7
 13032  05F2  1001               	bcf	1,0
 13033                           
 13034                           ;Main_B1.c: 564: setDimmerLights_SwOff(lights);
 13035  05F3  086A               	movf	Exception_Main@lights,w
 13036  05F4  3196  2626         	fcall	_setDimmerLights_SwOff
 13037  05F6  0020               	movlb	0	; select bank0
 13038  05F7  0008               	return
 13039  05F8                     l10056:	
 13040                           ;Main_B1.c: 568: }
 13041                           
 13042                           ;Main_B1.c: 565: }
 13043                           ;Main_B1.c: 566: }
 13044                           ;Main_B1.c: 567: break;
 13045                           
 13046  05F8  0020               	movlb	0	; select bank0
 13047  05F9  0865               	movf	Exception_Main@error,w
 13048                           
 13049                           ; Switch size 1, requested type "space"
 13050                           ; Number of cases is 2, Range of values is 2 to 3
 13051                           ; switch strategies available:
 13052                           ; Name         Instructions Cycles
 13053                           ; simple_byte            7     4 (average)
 13054                           ; direct_byte           13     9 (fixed)
 13055                           ; jumptable            263     9 (fixed)
 13056                           ;	Chosen strategy is simple_byte
 13057  05FA  3A02               	xorlw	2	; case 2
 13058  05FB  1903               	skipnz
 13059  05FC  2D5F               	goto	l10014
 13060  05FD  3A01               	xorlw	1	; case 3
 13061  05FE  1903               	skipnz
 13062  05FF  2D9D               	goto	l10030
 13063  0600  2E02               	goto	l1685
 13064  0601  0008               	return
 13065  0602                     l1685:	
 13066  0602  0008               	return
 13067  0603                     __end_of_Exception_Main:	
 13068                           
 13069                           	psect	text86
 13070  1DEA                     __ptext86:	
 13071 ;; *************** function _getDimmerLights_Line *****************
 13072 ;; Defined at:
 13073 ;;		line 982 in file "../src/Dimmer_B1.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;		None
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;  line            1    3[COMMON] unsigned char 
 13078 ;; Return value:  Size  Location     Type
 13079 ;;                  1    wreg      unsigned char 
 13080 ;; Registers used:
 13081 ;;		wreg, status,2
 13082 ;; Tracked objects:
 13083 ;;		On entry : 0/0
 13084 ;;		On exit  : 0/0
 13085 ;;		Unchanged: 0/0
 13086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;Total ram usage:        2 bytes
 13092 ;; Hardware stack levels used:    1
 13093 ;; Hardware stack levels required when called:    3
 13094 ;; This function calls:
 13095 ;;		Nothing
 13096 ;; This function is called by:
 13097 ;;		_Exception_Main
 13098 ;; This function uses a non-reentrant model
 13099 ;;
 13100                           
 13101                           
 13102                           ;psect for function _getDimmerLights_Line
 13103  1DEA                     _getDimmerLights_Line:	
 13104                           
 13105                           ;Dimmer_B1.c: 983: char line = 0;
 13106                           
 13107                           ;incstack = 0
 13108                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13109  1DEA  01F3               	clrf	getDimmerLights_Line@line
 13110                           
 13111                           ;Dimmer_B1.c: 985: if (DimmerLights1.Line == 1) {
 13112  1DEB  0022               	movlb	2	; select bank2
 13113  1DEC  1CDD               	btfss	(_DimmerLights1^(0+256)+1),1
 13114  1DED  2DF1               	goto	l929
 13115                           
 13116                           ;Dimmer_B1.c: 986: line = 1;
 13117  1DEE  01F3               	clrf	getDimmerLights_Line@line
 13118  1DEF  0AF3               	incf	getDimmerLights_Line@line,f
 13119                           
 13120                           ;Dimmer_B1.c: 987: }
 13121  1DF0  2DF7               	goto	l930
 13122  1DF1                     l929:	
 13123                           
 13124                           ;Dimmer_B1.c: 990: else if (DimmerLights2.Line == 1) {
 13125  1DF1  1CE5               	btfss	(_DimmerLights2^(0+256)+1),1
 13126  1DF2  2DF7               	goto	l930
 13127                           
 13128                           ;Dimmer_B1.c: 991: line = 2;
 13129  1DF3  3002               	movlw	2
 13130  1DF4  00F2               	movwf	??_getDimmerLights_Line
 13131  1DF5  0872               	movf	??_getDimmerLights_Line,w
 13132  1DF6  00F3               	movwf	getDimmerLights_Line@line
 13133  1DF7                     l930:	
 13134                           
 13135                           ;Dimmer_B1.c: 992: }
 13136                           ;Dimmer_B1.c: 999: return line;
 13137  1DF7  0873               	movf	getDimmerLights_Line@line,w
 13138  1DF8  0008               	return
 13139  1DF9                     __end_of_getDimmerLights_Line:	
 13140                           
 13141                           	psect	text87
 13142  1164                     __ptext87:	
 13143 ;; *************** function _DimmerLights_Main *****************
 13144 ;; Defined at:
 13145 ;;		line 773 in file "../src/Dimmer_B1.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;		None
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;		None
 13150 ;; Return value:  Size  Location     Type
 13151 ;;		None               void
 13152 ;; Registers used:
 13153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;Total ram usage:        0 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:    8
 13166 ;; This function calls:
 13167 ;;		_getLoad_OK
 13168 ;;		_getMain_All_Error_Status
 13169 ;;		_getMain_LightsStatus
 13170 ;;		_setDimmerLights_Main
 13171 ;; This function is called by:
 13172 ;;		_main
 13173 ;; This function uses a non-reentrant model
 13174 ;;
 13175                           
 13176                           
 13177                           ;psect for function _DimmerLights_Main
 13178  1164                     _DimmerLights_Main:	
 13179                           
 13180                           ;Dimmer_B1.c: 776: if (Dimmer.LoadGO == 1) {
 13181                           
 13182                           ;incstack = 0
 13183                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13184  1164  0021               	movlb	1	; select bank1
 13185  1165  1CBA               	btfss	_Dimmer^(0+128),1	;volatile
 13186  1166  297C               	goto	l9692
 13187                           
 13188                           ;Dimmer_B1.c: 777: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          LightsStatus() == 0) {
 13189  1167  319C  24D6  3191   	fcall	_getLoad_OK
 13190  116A  3A01               	xorlw	1
 13191  116B  1903               	skipnz
 13192  116C  297A               	goto	l876
 13193  116D  3000               	movlw	0
 13194  116E  3193  23AF  3191   	fcall	_getMain_All_Error_Status
 13195  1171  3800               	iorlw	0
 13196  1172  1D03               	skipz
 13197  1173  297A               	goto	l876
 13198  1174  319D  25DB  3191   	fcall	_getMain_LightsStatus
 13199  1177  3800               	iorlw	0
 13200  1178  1D03               	skipz
 13201  1179  297C               	goto	l9692
 13202  117A                     l876:	
 13203                           
 13204                           ;Dimmer_B1.c: 778: Dimmer.LoadGO = 0;
 13205  117A  0021               	movlb	1	; select bank1
 13206  117B  10BA               	bcf	_Dimmer^(0+128),1	;volatile
 13207  117C                     l9692:	
 13208                           
 13209                           ;Dimmer_B1.c: 779: }
 13210                           ;Dimmer_B1.c: 780: }
 13211                           ;Dimmer_B1.c: 784: setDimmerLights_Main(1);
 13212  117C  3001               	movlw	1
 13213  117D  318C  242D  3191   	fcall	_setDimmerLights_Main
 13214                           
 13215                           ;Dimmer_B1.c: 788: setDimmerLights_Main(2);
 13216  1180  3002               	movlw	2
 13217  1181  318C  242D         	fcall	_setDimmerLights_Main
 13218  1183  0008               	return
 13219  1184                     __end_of_DimmerLights_Main:	
 13220                           
 13221                           	psect	text88
 13222  0C2D                     __ptext88:	
 13223 ;; *************** function _setDimmerLights_Main *****************
 13224 ;; Defined at:
 13225 ;;		line 798 in file "../src/Dimmer_B1.c"
 13226 ;; Parameters:    Size  Location     Type
 13227 ;;  lights          1    wreg     unsigned char 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  lights          1   70[BANK0 ] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;		None               void
 13232 ;; Registers used:
 13233 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;Total ram usage:        1 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; Hardware stack levels required when called:    7
 13246 ;; This function calls:
 13247 ;;		_DimmerLights_SelectPointer
 13248 ;;		_getDimmerLights_Allow_Condition
 13249 ;;		_getMain_LightsStatus
 13250 ;;		_setDimmerLights_Dimming
 13251 ;;		_setDimmerLights_OnOff
 13252 ;; This function is called by:
 13253 ;;		_DimmerLights_Main
 13254 ;; This function uses a non-reentrant model
 13255 ;;
 13256                           
 13257                           
 13258                           ;psect for function _setDimmerLights_Main
 13259  0C2D                     _setDimmerLights_Main:	
 13260                           
 13261                           ;incstack = 0
 13262                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13263                           ;setDimmerLights_Main@lights stored from wreg
 13264  0C2D  0020               	movlb	0	; select bank0
 13265  0C2E  00E6               	movwf	setDimmerLights_Main@lights
 13266                           
 13267                           ;Dimmer_B1.c: 800: DimmerLights_SelectPointer(lights);
 13268  0C2F  0866               	movf	setDimmerLights_Main@lights,w
 13269  0C30  319F  27E7  318C   	fcall	_DimmerLights_SelectPointer
 13270                           
 13271                           ;Dimmer_B1.c: 801: if (DimmerLights->Trigger == 1) {
 13272  0C33  0020               	movlb	0	; select bank0
 13273  0C34  086B               	movf	_DimmerLights,w
 13274  0C35  0086               	movwf	6
 13275  0C36  3001               	movlw	1	; select bank2/3
 13276  0C37  0087               	movwf	7
 13277  0C38  1C81               	btfss	1,1
 13278  0C39  2C59               	goto	l9420
 13279                           
 13280                           ;Dimmer_B1.c: 802: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13281  0C3A  0866               	movf	setDimmerLights_Main@lights,w
 13282  0C3B  3188  2000  318C   	fcall	_getDimmerLights_Allow_Condition
 13283  0C3E  3800               	iorlw	0
 13284  0C3F  1D03               	skipz
 13285  0C40  0008               	return
 13286                           
 13287                           ;Dimmer_B1.c: 803: DimmerLights->Trigger = 0;
 13288  0C41  0020               	movlb	0	; select bank0
 13289  0C42  086B               	movf	_DimmerLights,w
 13290  0C43  0086               	movwf	6
 13291  0C44  3001               	movlw	1	; select bank2/3
 13292  0C45  0087               	movwf	7
 13293  0C46  1081               	bcf	1,1
 13294                           
 13295                           ;Dimmer_B1.c: 804: if (DimmerLights->Switch == 1) {
 13296  0C47  086B               	movf	_DimmerLights,w
 13297  0C48  0086               	movwf	6
 13298  0C49  3001               	movlw	1	; select bank2/3
 13299  0C4A  0087               	movwf	7
 13300  0C4B  1D01               	btfss	1,2
 13301  0C4C  2C53               	goto	l9418
 13302                           
 13303                           ;Dimmer_B1.c: 805: setDimmerLights_OnOff(lights, 1);
 13304  0C4D  01E3               	clrf	setDimmerLights_OnOff@command
 13305  0C4E  0AE3               	incf	setDimmerLights_OnOff@command,f
 13306  0C4F  0866               	movf	setDimmerLights_Main@lights,w
 13307  0C50  318B  2365         	fcall	_setDimmerLights_OnOff
 13308                           
 13309                           ;Dimmer_B1.c: 806: } else {
 13310  0C52  0008               	return
 13311  0C53                     l9418:	
 13312                           
 13313                           ;Dimmer_B1.c: 807: setDimmerLights_OnOff(lights, 0);
 13314  0C53  0020               	movlb	0	; select bank0
 13315  0C54  01E3               	clrf	setDimmerLights_OnOff@command
 13316  0C55  0866               	movf	setDimmerLights_Main@lights,w
 13317  0C56  318B  2365         	fcall	_setDimmerLights_OnOff
 13318                           
 13319                           ;Dimmer_B1.c: 808: }
 13320                           ;Dimmer_B1.c: 809: }
 13321                           ;Dimmer_B1.c: 810: } else {
 13322  0C58  0008               	return
 13323  0C59                     l9420:	
 13324                           
 13325                           ;Dimmer_B1.c: 811: if (getMain_LightsStatus() == 1) {
 13326  0C59  319D  25DB  318C   	fcall	_getMain_LightsStatus
 13327  0C5C  3A01               	xorlw	1
 13328  0C5D  1D03               	skipz
 13329  0C5E  2C85               	goto	l9432
 13330                           
 13331                           ;Dimmer_B1.c: 812: if (DimmerLights->DimmingTrigger == 1) {
 13332  0C5F  0020               	movlb	0	; select bank0
 13333  0C60  086B               	movf	_DimmerLights,w
 13334  0C61  0086               	movwf	6
 13335  0C62  3001               	movlw	1	; select bank2/3
 13336  0C63  0087               	movwf	7
 13337  0C64  1E01               	btfss	1,4
 13338  0C65  0008               	return
 13339                           
 13340                           ;Dimmer_B1.c: 813: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13341  0C66  0866               	movf	setDimmerLights_Main@lights,w
 13342  0C67  3188  2000  318C   	fcall	_getDimmerLights_Allow_Condition
 13343  0C6A  3800               	iorlw	0
 13344  0C6B  1D03               	skipz
 13345  0C6C  0008               	return
 13346                           
 13347                           ;Dimmer_B1.c: 814: DimmerLights->DimmingTrigger = 0;
 13348  0C6D  0020               	movlb	0	; select bank0
 13349  0C6E  086B               	movf	_DimmerLights,w
 13350  0C6F  0086               	movwf	6
 13351  0C70  3001               	movlw	1	; select bank2/3
 13352  0C71  0087               	movwf	7
 13353  0C72  1201               	bcf	1,4
 13354                           
 13355                           ;Dimmer_B1.c: 815: if (DimmerLights->DimmingSwitch == 1) {
 13356  0C73  086B               	movf	_DimmerLights,w
 13357  0C74  0086               	movwf	6
 13358  0C75  3001               	movlw	1	; select bank2/3
 13359  0C76  0087               	movwf	7
 13360  0C77  1E81               	btfss	1,5
 13361  0C78  2C7F               	goto	l9430
 13362                           
 13363                           ;Dimmer_B1.c: 816: setDimmerLights_Dimming(lights, 1);
 13364  0C79  01E3               	clrf	setDimmerLights_Dimming@status
 13365  0C7A  0AE3               	incf	setDimmerLights_Dimming@status,f
 13366  0C7B  0866               	movf	setDimmerLights_Main@lights,w
 13367  0C7C  3197  2708         	fcall	_setDimmerLights_Dimming
 13368                           
 13369                           ;Dimmer_B1.c: 817: } else {
 13370  0C7E  0008               	return
 13371  0C7F                     l9430:	
 13372                           
 13373                           ;Dimmer_B1.c: 818: setDimmerLights_Dimming(lights, 0);
 13374  0C7F  0020               	movlb	0	; select bank0
 13375  0C80  01E3               	clrf	setDimmerLights_Dimming@status
 13376  0C81  0866               	movf	setDimmerLights_Main@lights,w
 13377  0C82  3197  2708         	fcall	_setDimmerLights_Dimming
 13378                           
 13379                           ;Dimmer_B1.c: 819: }
 13380                           ;Dimmer_B1.c: 820: }
 13381                           ;Dimmer_B1.c: 821: }
 13382                           ;Dimmer_B1.c: 822: } else {
 13383  0C84  0008               	return
 13384  0C85                     l9432:	
 13385                           
 13386                           ;Dimmer_B1.c: 823: if (DimmerLights->DimmingTrigger == 1) {
 13387  0C85  0020               	movlb	0	; select bank0
 13388  0C86  086B               	movf	_DimmerLights,w
 13389  0C87  0086               	movwf	6
 13390  0C88  3001               	movlw	1	; select bank2/3
 13391  0C89  0087               	movwf	7
 13392  0C8A  1E01               	btfss	1,4
 13393  0C8B  0008               	return
 13394                           
 13395                           ;Dimmer_B1.c: 824: DimmerLights->DimmingTrigger = 0;
 13396  0C8C  086B               	movf	_DimmerLights,w
 13397  0C8D  0086               	movwf	6
 13398  0C8E  3001               	movlw	1	; select bank2/3
 13399  0C8F  0087               	movwf	7
 13400  0C90  1201               	bcf	1,4
 13401  0C91  0008               	return
 13402  0C92                     __end_of_setDimmerLights_Main:	
 13403                           
 13404                           	psect	text89
 13405  0B65                     __ptext89:	
 13406 ;; *************** function _setDimmerLights_OnOff *****************
 13407 ;; Defined at:
 13408 ;;		line 832 in file "../src/Dimmer_B1.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;  lights          1    wreg     unsigned char 
 13411 ;;  command         1   67[BANK0 ] unsigned char 
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  lights          1   69[BANK0 ] unsigned char 
 13414 ;; Return value:  Size  Location     Type
 13415 ;;		None               void
 13416 ;; Registers used:
 13417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;Total ram usage:        3 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:    6
 13430 ;; This function calls:
 13431 ;;		_setDimmerIntr_ControlStatus
 13432 ;;		_setDimmerIntr_DimmingValue
 13433 ;;		_setDimmerLights_Line
 13434 ;;		_setDimmerLights_PercentValue
 13435 ;;		_setLED
 13436 ;;		_setProductData
 13437 ;;		_setRF_DimmerLights
 13438 ;;		_setTxData
 13439 ;; This function is called by:
 13440 ;;		_setDimmerLights_Main
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           
 13445                           ;psect for function _setDimmerLights_OnOff
 13446  0B65                     _setDimmerLights_OnOff:	
 13447                           
 13448                           ;incstack = 0
 13449                           ; Regs used in _setDimmerLights_OnOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13450                           ;setDimmerLights_OnOff@lights stored from wreg
 13451  0B65  0020               	movlb	0	; select bank0
 13452  0B66  00E5               	movwf	setDimmerLights_OnOff@lights
 13453                           
 13454                           ;Dimmer_B1.c: 834: if (command == 1) {
 13455  0B67  0863               	movf	setDimmerLights_OnOff@command,w
 13456  0B68  3A01               	xorlw	1
 13457  0B69  1D03               	skipz
 13458  0B6A  2B95               	goto	l9290
 13459                           
 13460                           ;Dimmer_B1.c: 835: setDimmerIntr_ControlStatus(lights, 1);
 13461  0B6B  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13462  0B6C  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13463  0B6D  0865               	movf	setDimmerLights_OnOff@lights,w
 13464  0B6E  3192  22DF  318B   	fcall	_setDimmerIntr_ControlStatus
 13465                           
 13466                           ;Dimmer_B1.c: 836: setLED(lights, 0);
 13467  0B71  01F4               	clrf	setLED@command
 13468  0B72  0020               	movlb	0	; select bank0
 13469  0B73  0865               	movf	setDimmerLights_OnOff@lights,w
 13470  0B74  318A  2245  318B   	fcall	_setLED
 13471                           
 13472                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 1;
 13473  0B77  0021               	movlb	1	; select bank1
 13474  0B78  153A               	bsf	_Dimmer^(0+128),2	;volatile
 13475                           
 13476                           ;Dimmer_B1.c: 841: setDimmerLights_Line(lights);
 13477  0B79  0020               	movlb	0	; select bank0
 13478  0B7A  0865               	movf	setDimmerLights_OnOff@lights,w
 13479  0B7B  319E  26DA  318B   	fcall	_setDimmerLights_Line
 13480                           
 13481                           ;Dimmer_B1.c: 845: setDimmerIntr_DimmingValue(lights, ((char)(70*0.8)));
 13482  0B7E  3038               	movlw	56
 13483  0B7F  0020               	movlb	0	; select bank0
 13484  0B80  00E4               	movwf	??_setDimmerLights_OnOff
 13485  0B81  0864               	movf	??_setDimmerLights_OnOff,w
 13486  0B82  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13487  0B83  0865               	movf	setDimmerLights_OnOff@lights,w
 13488  0B84  319F  2750  318B   	fcall	_setDimmerIntr_DimmingValue
 13489                           
 13490                           ;Dimmer_B1.c: 846: setProductData((20 + lights), setDimmerLights_PercentValue(((char)(70
      +                          *0.8))));
 13491  0B87  3038               	movlw	56
 13492  0B88  318B  23C8  318B   	fcall	_setDimmerLights_PercentValue
 13493  0B8B  0020               	movlb	0	; select bank0
 13494  0B8C  00E4               	movwf	??_setDimmerLights_OnOff
 13495  0B8D  0864               	movf	??_setDimmerLights_OnOff,w
 13496  0B8E  00DA               	movwf	setProductData@value
 13497  0B8F  0865               	movf	setDimmerLights_OnOff@lights,w
 13498  0B90  3E14               	addlw	20
 13499  0B91  319D  25AF  318B   	fcall	_setProductData
 13500                           
 13501                           ;Dimmer_B1.c: 848: } else if (command == 0) {
 13502  0B94  2BBC               	goto	l9306
 13503  0B95                     l9290:	
 13504  0B95  0020               	movlb	0	; select bank0
 13505  0B96  08E3               	movf	setDimmerLights_OnOff@command,f
 13506  0B97  1D03               	skipz
 13507  0B98  2BBC               	goto	l9306
 13508                           
 13509                           ;Dimmer_B1.c: 849: setDimmerIntr_ControlStatus(lights, 0);
 13510  0B99  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13511  0B9A  0865               	movf	setDimmerLights_OnOff@lights,w
 13512  0B9B  3192  22DF  318B   	fcall	_setDimmerIntr_ControlStatus
 13513                           
 13514                           ;Dimmer_B1.c: 850: setLED(lights, 1);
 13515  0B9E  01F4               	clrf	setLED@command
 13516  0B9F  0AF4               	incf	setLED@command,f
 13517  0BA0  0020               	movlb	0	; select bank0
 13518  0BA1  0865               	movf	setDimmerLights_OnOff@lights,w
 13519  0BA2  318A  2245  318B   	fcall	_setLED
 13520                           
 13521                           ;Dimmer_B1.c: 855: if (lights == 1) {
 13522  0BA5  0020               	movlb	0	; select bank0
 13523  0BA6  0865               	movf	setDimmerLights_OnOff@lights,w
 13524  0BA7  3A01               	xorlw	1
 13525  0BA8  1D03               	skipz
 13526  0BA9  2BAE               	goto	l9300
 13527                           
 13528                           ;Dimmer_B1.c: 856: RA7 = 0;
 13529  0BAA  138C               	bcf	12,7	;volatile
 13530                           
 13531                           ;Dimmer_B1.c: 857: __nop();
 13532  0BAB  0000               	nop
 13533                           
 13534                           ;Dimmer_B1.c: 858: __nop();
 13535  0BAC  0000               	nop
 13536                           
 13537                           ;Dimmer_B1.c: 860: }
 13538  0BAD  2BB6               	goto	l899
 13539  0BAE                     l9300:	
 13540                           
 13541                           ;Dimmer_B1.c: 863: else if (lights == 2) {
 13542  0BAE  0020               	movlb	0	; select bank0
 13543  0BAF  0865               	movf	setDimmerLights_OnOff@lights,w
 13544  0BB0  3A02               	xorlw	2
 13545  0BB1  1D03               	skipz
 13546  0BB2  2BB6               	goto	l899
 13547                           
 13548                           ;Dimmer_B1.c: 864: RB4 = 0;
 13549  0BB3  120D               	bcf	13,4	;volatile
 13550                           
 13551                           ;Dimmer_B1.c: 865: __nop();
 13552  0BB4  0000               	nop
 13553                           
 13554                           ;Dimmer_B1.c: 866: __nop();
 13555  0BB5  0000               	nop
 13556  0BB6                     l899:	
 13557                           
 13558                           ;Dimmer_B1.c: 867: }
 13559                           ;Dimmer_B1.c: 872: Dimmer.Load_Status = 0;
 13560  0BB6  0021               	movlb	1	; select bank1
 13561  0BB7  113A               	bcf	_Dimmer^(0+128),2	;volatile
 13562                           
 13563                           ;Dimmer_B1.c: 873: setDimmerLights_Line(0);
 13564  0BB8  3000               	movlw	0
 13565  0BB9  319E  26DA  318B   	fcall	_setDimmerLights_Line
 13566  0BBC                     l9306:	
 13567                           
 13568                           ;Dimmer_B1.c: 875: }
 13569                           ;Dimmer_B1.c: 878: setRF_DimmerLights(lights, command);
 13570  0BBC  0020               	movlb	0	; select bank0
 13571  0BBD  0863               	movf	setDimmerLights_OnOff@command,w
 13572  0BBE  00E4               	movwf	??_setDimmerLights_OnOff
 13573  0BBF  0864               	movf	??_setDimmerLights_OnOff,w
 13574  0BC0  00DE               	movwf	setRF_DimmerLights@on
 13575  0BC1  0865               	movf	setDimmerLights_OnOff@lights,w
 13576  0BC2  3189  2137  318B   	fcall	_setRF_DimmerLights
 13577                           
 13578                           ;Dimmer_B1.c: 879: setTxData();
 13579  0BC5  3186  2603         	fcall	_setTxData
 13580  0BC7  0008               	return
 13581  0BC8                     __end_of_setDimmerLights_OnOff:	
 13582                           
 13583                           	psect	text90
 13584  0A45                     __ptext90:	
 13585 ;; *************** function _setLED *****************
 13586 ;; Defined at:
 13587 ;;		line 76 in file "../src/LED_B1.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;  led             1    wreg     unsigned char 
 13590 ;;  command         1    4[COMMON] unsigned char 
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;  led             1    5[COMMON] unsigned char 
 13593 ;; Return value:  Size  Location     Type
 13594 ;;		None               void
 13595 ;; Registers used:
 13596 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13602 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;Total ram usage:        2 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; Hardware stack levels required when called:    4
 13609 ;; This function calls:
 13610 ;;		_LedPointSelect
 13611 ;; This function is called by:
 13612 ;;		_setDimmerLights_OnOff
 13613 ;;		_setLED_Initialization
 13614 ;;		_Exception_Main
 13615 ;;		_setSw_Initialization
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function _setLED
 13621  0A45                     _setLED:	
 13622                           
 13623                           ;incstack = 0
 13624                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13625                           ;setLED@led stored from wreg
 13626  0A45  00F5               	movwf	setLED@led
 13627                           
 13628                           ;LED_B1.c: 77: LedPointSelect(led);
 13629  0A46  0875               	movf	setLED@led,w
 13630  0A47  3191  210D  318A   	fcall	_LedPointSelect
 13631                           
 13632                           ;LED_B1.c: 78: if (command == 0) {
 13633  0A4A  08F4               	movf	setLED@command,f
 13634  0A4B  1D03               	skipz
 13635  0A4C  2A5F               	goto	l6858
 13636                           
 13637                           ;LED_B1.c: 80: if (led == 1) {
 13638  0A4D  0875               	movf	setLED@led,w
 13639  0A4E  3A01               	xorlw	1
 13640  0A4F  1D03               	skipz
 13641  0A50  2A53               	goto	l6850
 13642                           
 13643                           ;LED_B1.c: 84: RA3 = 1;
 13644  0A51  0020               	movlb	0	; select bank0
 13645  0A52  158C               	bsf	12,3	;volatile
 13646  0A53                     l6850:	
 13647                           
 13648                           ;LED_B1.c: 86: }
 13649                           ;LED_B1.c: 89: if (led == 2) {
 13650  0A53  0875               	movf	setLED@led,w
 13651  0A54  3A02               	xorlw	2
 13652  0A55  1D03               	skipz
 13653  0A56  2A59               	goto	l6854
 13654                           
 13655                           ;LED_B1.c: 93: RC7 = 1;
 13656  0A57  0020               	movlb	0	; select bank0
 13657  0A58  178E               	bsf	14,7	;volatile
 13658  0A59                     l6854:	
 13659                           
 13660                           ;LED_B1.c: 95: }
 13661                           ;LED_B1.c: 107: if (led == 99) {
 13662  0A59  0875               	movf	setLED@led,w
 13663  0A5A  3A63               	xorlw	99
 13664  0A5B  1D03               	skipz
 13665  0A5C  2A5F               	goto	l6858
 13666                           
 13667                           ;LED_B1.c: 111: RB5 = 1;
 13668  0A5D  0020               	movlb	0	; select bank0
 13669  0A5E  168D               	bsf	13,5	;volatile
 13670  0A5F                     l6858:	
 13671                           
 13672                           ;LED_B1.c: 113: }
 13673                           ;LED_B1.c: 115: }
 13674                           ;LED_B1.c: 116: if (command == 1) {
 13675  0A5F  0874               	movf	setLED@command,w
 13676  0A60  3A01               	xorlw	1
 13677  0A61  1D03               	skipz
 13678  0A62  2A75               	goto	l6872
 13679                           
 13680                           ;LED_B1.c: 118: if (led == 1) {
 13681  0A63  0875               	movf	setLED@led,w
 13682  0A64  3A01               	xorlw	1
 13683  0A65  1D03               	skipz
 13684  0A66  2A69               	goto	l6864
 13685                           
 13686                           ;LED_B1.c: 122: RA3 = 0;
 13687  0A67  0020               	movlb	0	; select bank0
 13688  0A68  118C               	bcf	12,3	;volatile
 13689  0A69                     l6864:	
 13690                           
 13691                           ;LED_B1.c: 124: }
 13692                           ;LED_B1.c: 127: if (led == 2) {
 13693  0A69  0875               	movf	setLED@led,w
 13694  0A6A  3A02               	xorlw	2
 13695  0A6B  1D03               	skipz
 13696  0A6C  2A6F               	goto	l6868
 13697                           
 13698                           ;LED_B1.c: 131: RC7 = 0;
 13699  0A6D  0020               	movlb	0	; select bank0
 13700  0A6E  138E               	bcf	14,7	;volatile
 13701  0A6F                     l6868:	
 13702                           
 13703                           ;LED_B1.c: 133: }
 13704                           ;LED_B1.c: 145: if (led == 99) {
 13705  0A6F  0875               	movf	setLED@led,w
 13706  0A70  3A63               	xorlw	99
 13707  0A71  1D03               	skipz
 13708  0A72  2A75               	goto	l6872
 13709                           
 13710                           ;LED_B1.c: 149: RB5 = 0;
 13711  0A73  0020               	movlb	0	; select bank0
 13712  0A74  128D               	bcf	13,5	;volatile
 13713  0A75                     l6872:	
 13714                           
 13715                           ;LED_B1.c: 151: }
 13716                           ;LED_B1.c: 153: }
 13717                           ;LED_B1.c: 154: if (command == 10) {
 13718  0A75  0874               	movf	setLED@command,w
 13719  0A76  3A0A               	xorlw	10
 13720  0A77  1D03               	skipz
 13721  0A78  2A99               	goto	l6888
 13722                           
 13723                           ;LED_B1.c: 155: LED->GO = 0;
 13724  0A79  0021               	movlb	1	; select bank1
 13725  0A7A  0846               	movf	_LED^(0+128),w
 13726  0A7B  0086               	movwf	6
 13727  0A7C  3001               	movlw	1	; select bank2/3
 13728  0A7D  0087               	movwf	7
 13729  0A7E  1081               	bcf	1,1
 13730                           
 13731                           ;LED_B1.c: 156: LED->Time = 0;
 13732  0A7F  0A46               	incf	_LED^(0+128),w
 13733  0A80  0086               	movwf	6
 13734  0A81  3001               	movlw	1	; select bank2/3
 13735  0A82  0087               	movwf	7
 13736  0A83  3000               	movlw	0
 13737  0A84  3FC0               	movwi [0]fsr1
 13738  0A85  3FC1               	movwi [1]fsr1
 13739                           
 13740                           ;LED_B1.c: 158: if (led == 1) {
 13741  0A86  0875               	movf	setLED@led,w
 13742  0A87  3A01               	xorlw	1
 13743  0A88  1D03               	skipz
 13744  0A89  2A8D               	goto	l6880
 13745                           
 13746                           ;LED_B1.c: 162: RA3 = 1;
 13747  0A8A  0020               	movlb	0	; select bank0
 13748  0A8B  158C               	bsf	12,3	;volatile
 13749                           
 13750                           ;LED_B1.c: 164: }
 13751  0A8C  2A93               	goto	l6884
 13752  0A8D                     l6880:	
 13753                           
 13754                           ;LED_B1.c: 167: else if (led == 2) {
 13755  0A8D  0875               	movf	setLED@led,w
 13756  0A8E  3A02               	xorlw	2
 13757  0A8F  1D03               	skipz
 13758  0A90  2A93               	goto	l6884
 13759                           
 13760                           ;LED_B1.c: 171: RC7 = 1;
 13761  0A91  0020               	movlb	0	; select bank0
 13762  0A92  178E               	bsf	14,7	;volatile
 13763  0A93                     l6884:	
 13764                           
 13765                           ;LED_B1.c: 173: }
 13766                           ;LED_B1.c: 185: if (led == 99) {
 13767  0A93  0875               	movf	setLED@led,w
 13768  0A94  3A63               	xorlw	99
 13769  0A95  1D03               	skipz
 13770  0A96  2A99               	goto	l6888
 13771                           
 13772                           ;LED_B1.c: 189: RB5 = 1;
 13773  0A97  0020               	movlb	0	; select bank0
 13774  0A98  168D               	bsf	13,5	;volatile
 13775  0A99                     l6888:	
 13776                           
 13777                           ;LED_B1.c: 191: }
 13778                           ;LED_B1.c: 193: }
 13779                           ;LED_B1.c: 194: if (command == 11) {
 13780  0A99  0874               	movf	setLED@command,w
 13781  0A9A  3A0B               	xorlw	11
 13782  0A9B  1D03               	skipz
 13783  0A9C  0008               	return
 13784                           
 13785                           ;LED_B1.c: 195: LED->GO = 1;
 13786  0A9D  0021               	movlb	1	; select bank1
 13787  0A9E  0846               	movf	_LED^(0+128),w
 13788  0A9F  0086               	movwf	6
 13789  0AA0  3001               	movlw	1	; select bank2/3
 13790  0AA1  0087               	movwf	7
 13791  0AA2  1481               	bsf	1,1
 13792  0AA3  0008               	return
 13793  0AA4                     __end_of_setLED:	
 13794                           
 13795                           	psect	text91
 13796  110D                     __ptext91:	
 13797 ;; *************** function _LedPointSelect *****************
 13798 ;; Defined at:
 13799 ;;		line 7 in file "../src/LED_B1.c"
 13800 ;; Parameters:    Size  Location     Type
 13801 ;;  led             1    wreg     unsigned char 
 13802 ;; Auto vars:     Size  Location     Type
 13803 ;;  led             1    3[COMMON] unsigned char 
 13804 ;; Return value:  Size  Location     Type
 13805 ;;		None               void
 13806 ;; Registers used:
 13807 ;;		wreg
 13808 ;; Tracked objects:
 13809 ;;		On entry : 0/0
 13810 ;;		On exit  : 0/0
 13811 ;;		Unchanged: 0/0
 13812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13815 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13817 ;;Total ram usage:        2 bytes
 13818 ;; Hardware stack levels used:    1
 13819 ;; Hardware stack levels required when called:    3
 13820 ;; This function calls:
 13821 ;;		Nothing
 13822 ;; This function is called by:
 13823 ;;		_setLED_Initialization
 13824 ;;		_setLED
 13825 ;;		_setLED_Main
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           
 13830                           ;psect for function _LedPointSelect
 13831  110D                     _LedPointSelect:	
 13832                           
 13833                           ;incstack = 0
 13834                           ; Regs used in _LedPointSelect: [wreg]
 13835                           ;LedPointSelect@led stored from wreg
 13836  110D  00F3               	movwf	LedPointSelect@led
 13837                           
 13838                           ;LED_B1.c: 9: if (led == 1) {
 13839  110E  0873               	movf	LedPointSelect@led,w
 13840  110F  3A01               	xorlw	1
 13841  1110  1D03               	skipz
 13842  1111  2917               	goto	l1113
 13843                           
 13844                           ;LED_B1.c: 10: LED = &VarLED1;
 13845  1112  30DA               	movlw	_VarLED1& (0+255)
 13846  1113  00F2               	movwf	??_LedPointSelect
 13847  1114  0872               	movf	??_LedPointSelect,w
 13848  1115  0021               	movlb	1	; select bank1
 13849  1116  00C6               	movwf	_LED^(0+128)
 13850  1117                     l1113:	
 13851                           
 13852                           ;LED_B1.c: 11: }
 13853                           ;LED_B1.c: 14: if (led == 2) {
 13854  1117  0873               	movf	LedPointSelect@led,w
 13855  1118  3A02               	xorlw	2
 13856  1119  1D03               	skipz
 13857  111A  2920               	goto	l1114
 13858                           
 13859                           ;LED_B1.c: 15: LED = &VarLED2;
 13860  111B  30DE               	movlw	_VarLED2& (0+255)
 13861  111C  00F2               	movwf	??_LedPointSelect
 13862  111D  0872               	movf	??_LedPointSelect,w
 13863  111E  0021               	movlb	1	; select bank1
 13864  111F  00C6               	movwf	_LED^(0+128)
 13865  1120                     l1114:	
 13866                           
 13867                           ;LED_B1.c: 16: }
 13868                           ;LED_B1.c: 24: if (led == 99) {
 13869  1120  0873               	movf	LedPointSelect@led,w
 13870  1121  3A63               	xorlw	99
 13871  1122  1D03               	skipz
 13872  1123  0008               	return
 13873                           
 13874                           ;LED_B1.c: 25: LED = &VarErrLED;
 13875  1124  306C               	movlw	_VarErrLED& (0+255)
 13876  1125  00F2               	movwf	??_LedPointSelect
 13877  1126  0872               	movf	??_LedPointSelect,w
 13878  1127  0021               	movlb	1	; select bank1
 13879  1128  00C6               	movwf	_LED^(0+128)
 13880  1129  0008               	return
 13881  112A                     __end_of_LedPointSelect:	
 13882                           
 13883                           	psect	text92
 13884  1F50                     __ptext92:	
 13885 ;; *************** function _setDimmerIntr_DimmingValue *****************
 13886 ;; Defined at:
 13887 ;;		line 48 in file "../src/Dimmer_B1.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;  lights          1    wreg     unsigned char 
 13890 ;;  value           1    2[COMMON] unsigned char 
 13891 ;; Auto vars:     Size  Location     Type
 13892 ;;  lights          1    4[COMMON] unsigned char 
 13893 ;; Return value:  Size  Location     Type
 13894 ;;		None               void
 13895 ;; Registers used:
 13896 ;;		wreg
 13897 ;; Tracked objects:
 13898 ;;		On entry : 0/0
 13899 ;;		On exit  : 0/0
 13900 ;;		Unchanged: 0/0
 13901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13902 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13905 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13906 ;;Total ram usage:        3 bytes
 13907 ;; Hardware stack levels used:    1
 13908 ;; Hardware stack levels required when called:    3
 13909 ;; This function calls:
 13910 ;;		Nothing
 13911 ;; This function is called by:
 13912 ;;		_setDimmerLights_OnOff
 13913 ;; This function uses a non-reentrant model
 13914 ;;
 13915                           
 13916                           
 13917                           ;psect for function _setDimmerIntr_DimmingValue
 13918  1F50                     _setDimmerIntr_DimmingValue:	
 13919                           
 13920                           ;incstack = 0
 13921                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 13922                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 13923  1F50  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 13924                           
 13925                           ;Dimmer_B1.c: 50: if (lights == 1) {
 13926  1F51  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 13927  1F52  3A01               	xorlw	1
 13928  1F53  1D03               	skipz
 13929  1F54  2F5B               	goto	l6780
 13930                           
 13931                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 13932  1F55  0872               	movf	setDimmerIntr_DimmingValue@value,w
 13933  1F56  00F3               	movwf	??_setDimmerIntr_DimmingValue
 13934  1F57  0873               	movf	??_setDimmerIntr_DimmingValue,w
 13935  1F58  0021               	movlb	1	; select bank1
 13936  1F59  00E5               	movwf	(_DimmerIntr1^(0+128)+4)
 13937                           
 13938                           ;Dimmer_B1.c: 52: }
 13939  1F5A  0008               	return
 13940  1F5B                     l6780:	
 13941                           
 13942                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 13943  1F5B  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 13944  1F5C  3A02               	xorlw	2
 13945  1F5D  1D03               	skipz
 13946  1F5E  0008               	return
 13947                           
 13948                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 13949  1F5F  0872               	movf	setDimmerIntr_DimmingValue@value,w
 13950  1F60  00F3               	movwf	??_setDimmerIntr_DimmingValue
 13951  1F61  0873               	movf	??_setDimmerIntr_DimmingValue,w
 13952  1F62  0021               	movlb	1	; select bank1
 13953  1F63  00EC               	movwf	(_DimmerIntr2^(0+128)+4)
 13954  1F64  0008               	return
 13955  1F65                     __end_of_setDimmerIntr_DimmingValue:	
 13956                           
 13957                           	psect	text93
 13958  12DF                     __ptext93:	
 13959 ;; *************** function _setDimmerIntr_ControlStatus *****************
 13960 ;; Defined at:
 13961 ;;		line 30 in file "../src/Dimmer_B1.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  lights          1    wreg     unsigned char 
 13964 ;;  command         1    2[COMMON] unsigned char 
 13965 ;; Auto vars:     Size  Location     Type
 13966 ;;  lights          1    4[COMMON] unsigned char 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;		None               void
 13969 ;; Registers used:
 13970 ;;		wreg, status,2, status,0
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13976 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;Total ram usage:        3 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; Hardware stack levels required when called:    3
 13983 ;; This function calls:
 13984 ;;		Nothing
 13985 ;; This function is called by:
 13986 ;;		_setDimmerLights_OnOff
 13987 ;; This function uses a non-reentrant model
 13988 ;;
 13989                           
 13990                           
 13991                           ;psect for function _setDimmerIntr_ControlStatus
 13992  12DF                     _setDimmerIntr_ControlStatus:	
 13993                           
 13994                           ;incstack = 0
 13995                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 13996                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 13997  12DF  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 13998                           
 13999                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14000  12E0  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14001  12E1  3A01               	xorlw	1
 14002  12E2  1D03               	skipz
 14003  12E3  2AF4               	goto	l6772
 14004                           
 14005                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14006  12E4  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14007  12E5  3A01               	xorlw	1
 14008  12E6  3000               	movlw	0
 14009  12E7  1903               	skipnz
 14010  12E8  3001               	movlw	1
 14011  12E9  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14012  12EA  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14013  12EB  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14014  12EC  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14015  12ED  0021               	movlb	1	; select bank1
 14016  12EE  0861               	movf	_DimmerIntr1^(0+128),w
 14017  12EF  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14018  12F0  39F7               	andlw	-9
 14019  12F1  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14020  12F2  00E1               	movwf	_DimmerIntr1^(0+128)
 14021                           
 14022                           ;Dimmer_B1.c: 34: }
 14023  12F3  0008               	return
 14024  12F4                     l6772:	
 14025                           
 14026                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14027  12F4  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14028  12F5  3A02               	xorlw	2
 14029  12F6  1D03               	skipz
 14030  12F7  0008               	return
 14031                           
 14032                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14033  12F8  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14034  12F9  3A01               	xorlw	1
 14035  12FA  3000               	movlw	0
 14036  12FB  1903               	skipnz
 14037  12FC  3001               	movlw	1
 14038  12FD  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14039  12FE  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14040  12FF  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14041  1300  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14042  1301  0021               	movlb	1	; select bank1
 14043  1302  0868               	movf	_DimmerIntr2^(0+128),w
 14044  1303  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14045  1304  39F7               	andlw	-9
 14046  1305  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14047  1306  00E8               	movwf	_DimmerIntr2^(0+128)
 14048  1307  0008               	return
 14049  1308                     __end_of_setDimmerIntr_ControlStatus:	
 14050                           
 14051                           	psect	text94
 14052  1708                     __ptext94:	
 14053 ;; *************** function _setDimmerLights_Dimming *****************
 14054 ;; Defined at:
 14055 ;;		line 884 in file "../src/Dimmer_B1.c"
 14056 ;; Parameters:    Size  Location     Type
 14057 ;;  lights          1    wreg     unsigned char 
 14058 ;;  status          1   67[BANK0 ] unsigned char 
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;  lights          1   69[BANK0 ] unsigned char 
 14061 ;; Return value:  Size  Location     Type
 14062 ;;		None               void
 14063 ;; Registers used:
 14064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14070 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;Total ram usage:        3 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    6
 14077 ;; This function calls:
 14078 ;;		_getDimmerIntr_DimmingValue
 14079 ;;		_setBuz
 14080 ;;		_setDimmerIntr_Dimming_Sw
 14081 ;;		_setDimmerIntr_MaxmumValue
 14082 ;;		_setDimmerLights_Line
 14083 ;;		_setDimmerLights_PercentValue
 14084 ;;		_setProductData
 14085 ;;		_setRF_DimmerLights
 14086 ;;		_setRF_TransceiveGO
 14087 ;;		_setTxData
 14088 ;; This function is called by:
 14089 ;;		_setDimmerLights_Main
 14090 ;; This function uses a non-reentrant model
 14091 ;;
 14092                           
 14093                           
 14094                           ;psect for function _setDimmerLights_Dimming
 14095  1708                     _setDimmerLights_Dimming:	
 14096                           
 14097                           ;incstack = 0
 14098                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14099                           ;setDimmerLights_Dimming@lights stored from wreg
 14100  1708  0020               	movlb	0	; select bank0
 14101  1709  00E5               	movwf	setDimmerLights_Dimming@lights
 14102                           
 14103                           ;Dimmer_B1.c: 885: if (status == 1) {
 14104  170A  0863               	movf	setDimmerLights_Dimming@status,w
 14105  170B  3A01               	xorlw	1
 14106  170C  1D03               	skipz
 14107  170D  2F21               	goto	l9314
 14108                           
 14109                           ;Dimmer_B1.c: 886: setDimmerIntr_Dimming_Sw(lights, 1);
 14110  170E  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14111  170F  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 14112  1710  0865               	movf	setDimmerLights_Dimming@lights,w
 14113  1711  3192  226E  3197   	fcall	_setDimmerIntr_Dimming_Sw
 14114                           
 14115                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 14116  1714  3000               	movlw	0
 14117  1715  319E  2637  3197   	fcall	_setRF_TransceiveGO
 14118                           
 14119                           ;Dimmer_B1.c: 889: setBuz(1, 100);
 14120  1718  3064               	movlw	100
 14121  1719  0020               	movlb	0	; select bank0
 14122  171A  00A4               	movwf	setBuz@time
 14123  171B  3000               	movlw	0
 14124  171C  00A5               	movwf	setBuz@time+1
 14125  171D  3001               	movlw	1
 14126  171E  3197  2759         	fcall	_setBuz
 14127                           
 14128                           ;Dimmer_B1.c: 890: } else if (status == 0) {
 14129  1720  0008               	return
 14130  1721                     l9314:	
 14131  1721  0020               	movlb	0	; select bank0
 14132  1722  08E3               	movf	setDimmerLights_Dimming@status,f
 14133  1723  1D03               	skipz
 14134  1724  0008               	return
 14135                           
 14136                           ;Dimmer_B1.c: 891: setDimmerIntr_Dimming_Sw(lights, 0);
 14137  1725  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 14138  1726  0865               	movf	setDimmerLights_Dimming@lights,w
 14139  1727  3192  226E  3197   	fcall	_setDimmerIntr_Dimming_Sw
 14140                           
 14141                           ;Dimmer_B1.c: 893: Dimmer.Load_Status = 0;
 14142  172A  0021               	movlb	1	; select bank1
 14143  172B  113A               	bcf	_Dimmer^(0+128),2	;volatile
 14144                           
 14145                           ;Dimmer_B1.c: 894: setDimmerLights_Line(lights);
 14146  172C  0020               	movlb	0	; select bank0
 14147  172D  0865               	movf	setDimmerLights_Dimming@lights,w
 14148  172E  319E  26DA  3197   	fcall	_setDimmerLights_Line
 14149                           
 14150                           ;Dimmer_B1.c: 896: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 14151  1731  0020               	movlb	0	; select bank0
 14152  1732  0865               	movf	setDimmerLights_Dimming@lights,w
 14153  1733  319E  26FE  3197   	fcall	_getDimmerIntr_DimmingValue
 14154  1736  0020               	movlb	0	; select bank0
 14155  1737  00E4               	movwf	??_setDimmerLights_Dimming
 14156  1738  0864               	movf	??_setDimmerLights_Dimming,w
 14157  1739  00F5               	movwf	setDimmerIntr_MaxmumValue@value
 14158  173A  0865               	movf	setDimmerLights_Dimming@lights,w
 14159  173B  319F  273B  3197   	fcall	_setDimmerIntr_MaxmumValue
 14160                           
 14161                           ;Dimmer_B1.c: 897: setProductData((20 + lights), setDimmerLights_PercentValue(getDimmerI
      +                          ntr_DimmingValue(lights)));
 14162  173E  0020               	movlb	0	; select bank0
 14163  173F  0865               	movf	setDimmerLights_Dimming@lights,w
 14164  1740  319E  26FE  3197   	fcall	_getDimmerIntr_DimmingValue
 14165  1743  318B  23C8  3197   	fcall	_setDimmerLights_PercentValue
 14166  1746  0020               	movlb	0	; select bank0
 14167  1747  00E4               	movwf	??_setDimmerLights_Dimming
 14168  1748  0864               	movf	??_setDimmerLights_Dimming,w
 14169  1749  00DA               	movwf	setProductData@value
 14170  174A  0865               	movf	setDimmerLights_Dimming@lights,w
 14171  174B  3E14               	addlw	20
 14172  174C  319D  25AF  3197   	fcall	_setProductData
 14173                           
 14174                           ;Dimmer_B1.c: 907: setRF_DimmerLights(lights, 1);
 14175  174F  0020               	movlb	0	; select bank0
 14176  1750  01DE               	clrf	setRF_DimmerLights@on
 14177  1751  0ADE               	incf	setRF_DimmerLights@on,f
 14178  1752  0865               	movf	setDimmerLights_Dimming@lights,w
 14179  1753  3189  2137  3197   	fcall	_setRF_DimmerLights
 14180                           
 14181                           ;Dimmer_B1.c: 908: setTxData();
 14182  1756  3186  2603         	fcall	_setTxData
 14183  1758  0008               	return
 14184  1759                     __end_of_setDimmerLights_Dimming:	
 14185                           
 14186                           	psect	text95
 14187  0603                     __ptext95:	
 14188 ;; *************** function _setTxData *****************
 14189 ;; Defined at:
 14190 ;;		line 166 in file "../src/RF_Control_B1.c"
 14191 ;; Parameters:    Size  Location     Type
 14192 ;;		None
 14193 ;; Auto vars:     Size  Location     Type
 14194 ;;  i               1    0        unsigned char 
 14195 ;; Return value:  Size  Location     Type
 14196 ;;		None               void
 14197 ;; Registers used:
 14198 ;;		wreg, fsr1l, fsr1h
 14199 ;; Tracked objects:
 14200 ;;		On entry : 0/0
 14201 ;;		On exit  : 0/0
 14202 ;;		Unchanged: 0/0
 14203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;Total ram usage:        1 bytes
 14209 ;; Hardware stack levels used:    1
 14210 ;; Hardware stack levels required when called:    3
 14211 ;; This function calls:
 14212 ;;		Nothing
 14213 ;; This function is called by:
 14214 ;;		_setDimmerLights_OnOff
 14215 ;;		_setDimmerLights_Dimming
 14216 ;;		_getRxData
 14217 ;;		_setControl_Lights_Table
 14218 ;;		_setRFSW_Control
 14219 ;;		_setRFSW_AdjControl
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           
 14224                           ;psect for function _setTxData
 14225  0603                     _setTxData:	
 14226                           
 14227                           ;RF_Control_B1.c: 167: char i;
 14228                           ;RF_Control_B1.c: 168: if (RF1.Enable == 1) {
 14229                           
 14230                           ;incstack = 0
 14231                           ; Regs used in _setTxData: [wregfsr1]
 14232  0603  0021               	movlb	1	; select bank1
 14233  0604  1C20               	btfss	_RF1^(0+128),0
 14234  0605  0008               	return
 14235                           
 14236                           ;RF_Control_B1.c: 170: RF1.TransceiveGO = 1;
 14237  0606  1520               	bsf	_RF1^(0+128),2
 14238                           
 14239                           ;RF_Control_B1.c: 182: RF_Data[0] = 0x63;
 14240  0607  3063               	movlw	99
 14241  0608  00F2               	movwf	??_setTxData
 14242  0609  0872               	movf	??_setTxData,w
 14243  060A  0023               	movlb	3	; select bank3
 14244  060B  00A0               	movwf	_RF_Data^(0+384)
 14245                           
 14246                           ;RF_Control_B1.c: 183: RF_Data[1] = 0x02;
 14247  060C  3002               	movlw	2
 14248  060D  00F2               	movwf	??_setTxData
 14249  060E  0872               	movf	??_setTxData,w
 14250  060F  00A1               	movwf	(_RF_Data^(0+384)+1)
 14251                           
 14252                           ;RF_Control_B1.c: 185: RF_Data[2] = product->Data[2];
 14253  0610  0020               	movlb	0	; select bank0
 14254  0611  086D               	movf	_product,w
 14255  0612  0086               	movwf	6
 14256  0613  3002               	movlw	2	; select bank4/5
 14257  0614  0087               	movwf	7
 14258  0615  3002               	movlw	2	; select bank4/5
 14259  0616  3F42               	moviw [2]fsr1
 14260  0617  0023               	movlb	3	; select bank3
 14261  0618  00A2               	movwf	(_RF_Data^(0+384)+2)
 14262                           
 14263                           ;RF_Control_B1.c: 186: RF_Data[3] = product->Data[3];
 14264  0619  0020               	movlb	0	; select bank0
 14265  061A  086D               	movf	_product,w
 14266  061B  0086               	movwf	6
 14267  061C  3002               	movlw	2	; select bank4/5
 14268  061D  0087               	movwf	7
 14269  061E  3002               	movlw	2	; select bank4/5
 14270  061F  3F43               	moviw [3]fsr1
 14271  0620  0023               	movlb	3	; select bank3
 14272  0621  00A3               	movwf	(_RF_Data^(0+384)+3)
 14273                           
 14274                           ;RF_Control_B1.c: 187: RF_Data[4] = product->Data[4];
 14275  0622  0020               	movlb	0	; select bank0
 14276  0623  086D               	movf	_product,w
 14277  0624  0086               	movwf	6
 14278  0625  3002               	movlw	2	; select bank4/5
 14279  0626  0087               	movwf	7
 14280  0627  3002               	movlw	2	; select bank4/5
 14281  0628  3F44               	moviw [4]fsr1
 14282  0629  0023               	movlb	3	; select bank3
 14283  062A  00A4               	movwf	(_RF_Data^(0+384)+4)
 14284                           
 14285                           ;RF_Control_B1.c: 188: RF_Data[5] = product->Data[5];
 14286  062B  0020               	movlb	0	; select bank0
 14287  062C  086D               	movf	_product,w
 14288  062D  0086               	movwf	6
 14289  062E  3002               	movlw	2	; select bank4/5
 14290  062F  0087               	movwf	7
 14291  0630  3002               	movlw	2	; select bank4/5
 14292  0631  3F45               	moviw [5]fsr1
 14293  0632  0023               	movlb	3	; select bank3
 14294  0633  00A5               	movwf	(_RF_Data^(0+384)+5)
 14295                           
 14296                           ;RF_Control_B1.c: 189: RF_Data[6] = product->Data[6];
 14297  0634  0020               	movlb	0	; select bank0
 14298  0635  086D               	movf	_product,w
 14299  0636  0086               	movwf	6
 14300  0637  3002               	movlw	2	; select bank4/5
 14301  0638  0087               	movwf	7
 14302  0639  3002               	movlw	2	; select bank4/5
 14303  063A  3F46               	moviw [6]fsr1
 14304  063B  0023               	movlb	3	; select bank3
 14305  063C  00A6               	movwf	(_RF_Data^(0+384)+6)
 14306                           
 14307                           ;RF_Control_B1.c: 190: RF_Data[7] = product->Data[7];
 14308  063D  0020               	movlb	0	; select bank0
 14309  063E  086D               	movf	_product,w
 14310  063F  0086               	movwf	6
 14311  0640  3002               	movlw	2	; select bank4/5
 14312  0641  0087               	movwf	7
 14313  0642  3002               	movlw	2	; select bank4/5
 14314  0643  3F47               	moviw [7]fsr1
 14315  0644  0023               	movlb	3	; select bank3
 14316  0645  00A7               	movwf	(_RF_Data^(0+384)+7)
 14317                           
 14318                           ;RF_Control_B1.c: 191: RF_Data[8] = product->Data[8];
 14319  0646  0020               	movlb	0	; select bank0
 14320  0647  086D               	movf	_product,w
 14321  0648  0086               	movwf	6
 14322  0649  3002               	movlw	2	; select bank4/5
 14323  064A  0087               	movwf	7
 14324  064B  3002               	movlw	2	; select bank4/5
 14325  064C  3F48               	moviw [8]fsr1
 14326  064D  0023               	movlb	3	; select bank3
 14327  064E  00A8               	movwf	(_RF_Data^(0+384)+8)
 14328                           
 14329                           ;RF_Control_B1.c: 192: RF_Data[9] = product->Data[9];
 14330  064F  0020               	movlb	0	; select bank0
 14331  0650  086D               	movf	_product,w
 14332  0651  0086               	movwf	6
 14333  0652  3002               	movlw	2	; select bank4/5
 14334  0653  0087               	movwf	7
 14335  0654  3002               	movlw	2	; select bank4/5
 14336  0655  3F49               	moviw [9]fsr1
 14337  0656  0023               	movlb	3	; select bank3
 14338  0657  00A9               	movwf	(_RF_Data^(0+384)+9)
 14339                           
 14340                           ;RF_Control_B1.c: 193: RF_Data[10] = product->Data[10];
 14341  0658  0020               	movlb	0	; select bank0
 14342  0659  086D               	movf	_product,w
 14343  065A  0086               	movwf	6
 14344  065B  3002               	movlw	2	; select bank4/5
 14345  065C  0087               	movwf	7
 14346  065D  3002               	movlw	2	; select bank4/5
 14347  065E  3F4A               	moviw [10]fsr1
 14348  065F  0023               	movlb	3	; select bank3
 14349  0660  00AA               	movwf	(_RF_Data^(0+384)+10)
 14350                           
 14351                           ;RF_Control_B1.c: 194: RF_Data[11] = product->Data[11];
 14352  0661  0020               	movlb	0	; select bank0
 14353  0662  086D               	movf	_product,w
 14354  0663  0086               	movwf	6
 14355  0664  3002               	movlw	2	; select bank4/5
 14356  0665  0087               	movwf	7
 14357  0666  3002               	movlw	2	; select bank4/5
 14358  0667  3F4B               	moviw [11]fsr1
 14359  0668  0023               	movlb	3	; select bank3
 14360  0669  00AB               	movwf	(_RF_Data^(0+384)+11)
 14361                           
 14362                           ;RF_Control_B1.c: 195: RF_Data[12] = product->Data[12];
 14363  066A  0020               	movlb	0	; select bank0
 14364  066B  086D               	movf	_product,w
 14365  066C  0086               	movwf	6
 14366  066D  3002               	movlw	2	; select bank4/5
 14367  066E  0087               	movwf	7
 14368  066F  3002               	movlw	2	; select bank4/5
 14369  0670  3F4C               	moviw [12]fsr1
 14370  0671  0023               	movlb	3	; select bank3
 14371  0672  00AC               	movwf	(_RF_Data^(0+384)+12)
 14372                           
 14373                           ;RF_Control_B1.c: 196: RF_Data[13] = product->Data[13];
 14374  0673  0020               	movlb	0	; select bank0
 14375  0674  086D               	movf	_product,w
 14376  0675  0086               	movwf	6
 14377  0676  3002               	movlw	2	; select bank4/5
 14378  0677  0087               	movwf	7
 14379  0678  3002               	movlw	2	; select bank4/5
 14380  0679  3F4D               	moviw [13]fsr1
 14381  067A  0023               	movlb	3	; select bank3
 14382  067B  00AD               	movwf	(_RF_Data^(0+384)+13)
 14383                           
 14384                           ;RF_Control_B1.c: 197: RF_Data[14] = product->Data[14];
 14385  067C  0020               	movlb	0	; select bank0
 14386  067D  086D               	movf	_product,w
 14387  067E  0086               	movwf	6
 14388  067F  3002               	movlw	2	; select bank4/5
 14389  0680  0087               	movwf	7
 14390  0681  3002               	movlw	2	; select bank4/5
 14391  0682  3F4E               	moviw [14]fsr1
 14392  0683  0023               	movlb	3	; select bank3
 14393  0684  00AE               	movwf	(_RF_Data^(0+384)+14)
 14394                           
 14395                           ;RF_Control_B1.c: 198: RF_Data[15] = product->Data[15];
 14396  0685  0020               	movlb	0	; select bank0
 14397  0686  086D               	movf	_product,w
 14398  0687  0086               	movwf	6
 14399  0688  3002               	movlw	2	; select bank4/5
 14400  0689  0087               	movwf	7
 14401  068A  3002               	movlw	2	; select bank4/5
 14402  068B  3F4F               	moviw [15]fsr1
 14403  068C  0023               	movlb	3	; select bank3
 14404  068D  00AF               	movwf	(_RF_Data^(0+384)+15)
 14405                           
 14406                           ;RF_Control_B1.c: 199: RF_Data[16] = product->Data[16];
 14407  068E  0020               	movlb	0	; select bank0
 14408  068F  086D               	movf	_product,w
 14409  0690  0086               	movwf	6
 14410  0691  3002               	movlw	2	; select bank4/5
 14411  0692  0087               	movwf	7
 14412  0693  3002               	movlw	2	; select bank4/5
 14413  0694  3F50               	moviw [16]fsr1
 14414  0695  0023               	movlb	3	; select bank3
 14415  0696  00B0               	movwf	(_RF_Data^(0+384)+16)
 14416                           
 14417                           ;RF_Control_B1.c: 200: RF_Data[17] = product->Data[17];
 14418  0697  0020               	movlb	0	; select bank0
 14419  0698  086D               	movf	_product,w
 14420  0699  0086               	movwf	6
 14421  069A  3002               	movlw	2	; select bank4/5
 14422  069B  0087               	movwf	7
 14423  069C  3002               	movlw	2	; select bank4/5
 14424  069D  3F51               	moviw [17]fsr1
 14425  069E  0023               	movlb	3	; select bank3
 14426  069F  00B1               	movwf	(_RF_Data^(0+384)+17)
 14427                           
 14428                           ;RF_Control_B1.c: 201: RF_Data[18] = product->Data[18];
 14429  06A0  0020               	movlb	0	; select bank0
 14430  06A1  086D               	movf	_product,w
 14431  06A2  0086               	movwf	6
 14432  06A3  3002               	movlw	2	; select bank4/5
 14433  06A4  0087               	movwf	7
 14434  06A5  3002               	movlw	2	; select bank4/5
 14435  06A6  3F52               	moviw [18]fsr1
 14436  06A7  0023               	movlb	3	; select bank3
 14437  06A8  00B2               	movwf	(_RF_Data^(0+384)+18)
 14438                           
 14439                           ;RF_Control_B1.c: 202: RF_Data[19] = product->Data[19];
 14440  06A9  0020               	movlb	0	; select bank0
 14441  06AA  086D               	movf	_product,w
 14442  06AB  0086               	movwf	6
 14443  06AC  3002               	movlw	2	; select bank4/5
 14444  06AD  0087               	movwf	7
 14445  06AE  3002               	movlw	2	; select bank4/5
 14446  06AF  3F53               	moviw [19]fsr1
 14447  06B0  0023               	movlb	3	; select bank3
 14448  06B1  00B3               	movwf	(_RF_Data^(0+384)+19)
 14449                           
 14450                           ;RF_Control_B1.c: 203: RF_Data[20] = 210;
 14451  06B2  30D2               	movlw	210
 14452  06B3  00F2               	movwf	??_setTxData
 14453  06B4  0872               	movf	??_setTxData,w
 14454  06B5  00B4               	movwf	(_RF_Data^(0+384)+20)
 14455  06B6  0008               	return
 14456  06B7                     __end_of_setTxData:	
 14457                           
 14458                           	psect	text96
 14459  1E37                     __ptext96:	
 14460 ;; *************** function _setRF_TransceiveGO *****************
 14461 ;; Defined at:
 14462 ;;		line 471 in file "../src/RF_Control_B1.c"
 14463 ;; Parameters:    Size  Location     Type
 14464 ;;  command         1    wreg     unsigned char 
 14465 ;; Auto vars:     Size  Location     Type
 14466 ;;  command         1    3[COMMON] unsigned char 
 14467 ;; Return value:  Size  Location     Type
 14468 ;;		None               void
 14469 ;; Registers used:
 14470 ;;		wreg, status,2, status,0
 14471 ;; Tracked objects:
 14472 ;;		On entry : 0/0
 14473 ;;		On exit  : 0/0
 14474 ;;		Unchanged: 0/0
 14475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14477 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14478 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14480 ;;Total ram usage:        2 bytes
 14481 ;; Hardware stack levels used:    1
 14482 ;; Hardware stack levels required when called:    3
 14483 ;; This function calls:
 14484 ;;		Nothing
 14485 ;; This function is called by:
 14486 ;;		_setDimmerLights_Dimming
 14487 ;; This function uses a non-reentrant model
 14488 ;;
 14489                           
 14490                           
 14491                           ;psect for function _setRF_TransceiveGO
 14492  1E37                     _setRF_TransceiveGO:	
 14493                           
 14494                           ;incstack = 0
 14495                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 14496                           ;setRF_TransceiveGO@command stored from wreg
 14497  1E37  00F3               	movwf	setRF_TransceiveGO@command
 14498                           
 14499                           ;RF_Control_B1.c: 472: RF1.TransceiveGO = command == 1 ? 1 : 0;
 14500  1E38  0873               	movf	setRF_TransceiveGO@command,w
 14501  1E39  3A01               	xorlw	1
 14502  1E3A  3000               	movlw	0
 14503  1E3B  1903               	skipnz
 14504  1E3C  3001               	movlw	1
 14505  1E3D  00F2               	movwf	??_setRF_TransceiveGO
 14506  1E3E  0DF2               	rlf	??_setRF_TransceiveGO,f
 14507  1E3F  0DF2               	rlf	??_setRF_TransceiveGO,f
 14508  1E40  0021               	movlb	1	; select bank1
 14509  1E41  0820               	movf	_RF1^(0+128),w
 14510  1E42  0672               	xorwf	??_setRF_TransceiveGO,w
 14511  1E43  39FB               	andlw	-5
 14512  1E44  0672               	xorwf	??_setRF_TransceiveGO,w
 14513  1E45  00A0               	movwf	_RF1^(0+128)
 14514  1E46  0008               	return
 14515  1E47                     __end_of_setRF_TransceiveGO:	
 14516                           
 14517                           	psect	text97
 14518  0937                     __ptext97:	
 14519 ;; *************** function _setRF_DimmerLights *****************
 14520 ;; Defined at:
 14521 ;;		line 450 in file "../src/RF_Control_B1.c"
 14522 ;; Parameters:    Size  Location     Type
 14523 ;;  lights          1    wreg     unsigned char 
 14524 ;;  on              1   62[BANK0 ] unsigned char 
 14525 ;; Auto vars:     Size  Location     Type
 14526 ;;  lights          1   66[BANK0 ] unsigned char 
 14527 ;;  status          1   65[BANK0 ] unsigned char 
 14528 ;; Return value:  Size  Location     Type
 14529 ;;		None               void
 14530 ;; Registers used:
 14531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14532 ;; Tracked objects:
 14533 ;;		On entry : 0/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14537 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14541 ;;Total ram usage:        5 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:    4
 14544 ;; This function calls:
 14545 ;;		_setProductData
 14546 ;; This function is called by:
 14547 ;;		_setDimmerLights_OnOff
 14548 ;;		_setDimmerLights_Dimming
 14549 ;;		_setRFSW_Control
 14550 ;; This function uses a non-reentrant model
 14551 ;;
 14552                           
 14553                           
 14554                           ;psect for function _setRF_DimmerLights
 14555  0937                     _setRF_DimmerLights:	
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14559                           ;setRF_DimmerLights@lights stored from wreg
 14560  0937  0020               	movlb	0	; select bank0
 14561  0938  00E2               	movwf	setRF_DimmerLights@lights
 14562                           
 14563                           ;RF_Control_B1.c: 451: char status = 1;
 14564  0939  01E1               	clrf	setRF_DimmerLights@status
 14565  093A  0AE1               	incf	setRF_DimmerLights@status,f
 14566                           
 14567                           ;RF_Control_B1.c: 452: status <<= (lights - 1);
 14568  093B  0862               	movf	setRF_DimmerLights@lights,w
 14569  093C  3EFF               	addlw	-1
 14570  093D  0A89               	incf	9,f
 14571  093E  2941               	goto	u5240
 14572  093F                     u5245:	
 14573  093F  1003               	clrc
 14574  0940  0DE1               	rlf	setRF_DimmerLights@status,f
 14575  0941                     u5240:	
 14576  0941  3EFF               	addlw	-1
 14577  0942  1D03               	skipz
 14578  0943  293F               	goto	u5245
 14579                           
 14580                           ;RF_Control_B1.c: 453: setProductData(11, lights);
 14581  0944  0862               	movf	setRF_DimmerLights@lights,w
 14582  0945  00DF               	movwf	??_setRF_DimmerLights
 14583  0946  085F               	movf	??_setRF_DimmerLights,w
 14584  0947  00DA               	movwf	setProductData@value
 14585  0948  300B               	movlw	11
 14586  0949  319D  25AF  3189   	fcall	_setProductData
 14587                           
 14588                           ;RF_Control_B1.c: 455: setProductData(9, product->Data[20 + lights]);
 14589  094C  0020               	movlb	0	; select bank0
 14590  094D  0862               	movf	setRF_DimmerLights@lights,w
 14591  094E  3E14               	addlw	20
 14592  094F  076D               	addwf	_product,w
 14593  0950  00DF               	movwf	??_setRF_DimmerLights
 14594  0951  085F               	movf	??_setRF_DimmerLights,w
 14595  0952  0086               	movwf	6
 14596  0953  3002               	movlw	2	; select bank4/5
 14597  0954  0087               	movwf	7
 14598  0955  0801               	movf	1,w
 14599  0956  00E0               	movwf	??_setRF_DimmerLights+1
 14600  0957  0860               	movf	??_setRF_DimmerLights+1,w
 14601  0958  00DA               	movwf	setProductData@value
 14602  0959  3009               	movlw	9
 14603  095A  319D  25AF  3189   	fcall	_setProductData
 14604                           
 14605                           ;RF_Control_B1.c: 456: setProductData(17, product->Data[26 + lights]);
 14606  095D  0020               	movlb	0	; select bank0
 14607  095E  0862               	movf	setRF_DimmerLights@lights,w
 14608  095F  3E1A               	addlw	26
 14609  0960  076D               	addwf	_product,w
 14610  0961  00DF               	movwf	??_setRF_DimmerLights
 14611  0962  085F               	movf	??_setRF_DimmerLights,w
 14612  0963  0086               	movwf	6
 14613  0964  3002               	movlw	2	; select bank4/5
 14614  0965  0087               	movwf	7
 14615  0966  0801               	movf	1,w
 14616  0967  00E0               	movwf	??_setRF_DimmerLights+1
 14617  0968  0860               	movf	??_setRF_DimmerLights+1,w
 14618  0969  00DA               	movwf	setProductData@value
 14619  096A  3011               	movlw	17
 14620  096B  319D  25AF  3189   	fcall	_setProductData
 14621                           
 14622                           ;RF_Control_B1.c: 457: if (on == 1) {
 14623  096E  0020               	movlb	0	; select bank0
 14624  096F  085E               	movf	setRF_DimmerLights@on,w
 14625  0970  3A01               	xorlw	1
 14626  0971  1D03               	skipz
 14627  0972  2981               	goto	l6300
 14628                           
 14629                           ;RF_Control_B1.c: 458: setProductData(15, (product->Data[15] | status));
 14630  0973  086D               	movf	_product,w
 14631  0974  3E0F               	addlw	15
 14632  0975  0086               	movwf	6
 14633  0976  3002               	movlw	2	; select bank4/5
 14634  0977  0087               	movwf	7
 14635  0978  0801               	movf	1,w
 14636  0979  0461               	iorwf	setRF_DimmerLights@status,w
 14637  097A  00DF               	movwf	??_setRF_DimmerLights
 14638  097B  085F               	movf	??_setRF_DimmerLights,w
 14639  097C  00DA               	movwf	setProductData@value
 14640  097D  300F               	movlw	15
 14641  097E  319D  25AF         	fcall	_setProductData
 14642                           
 14643                           ;RF_Control_B1.c: 459: } else {
 14644  0980  0008               	return
 14645  0981                     l6300:	
 14646                           
 14647                           ;RF_Control_B1.c: 460: setProductData(15, (product->Data[15]&(~status)));
 14648  0981  0020               	movlb	0	; select bank0
 14649  0982  086D               	movf	_product,w
 14650  0983  3E0F               	addlw	15
 14651  0984  0086               	movwf	6
 14652  0985  3002               	movlw	2	; select bank4/5
 14653  0986  0087               	movwf	7
 14654  0987  0961               	comf	setRF_DimmerLights@status,w
 14655  0988  0501               	andwf	1,w
 14656  0989  00DF               	movwf	??_setRF_DimmerLights
 14657  098A  085F               	movf	??_setRF_DimmerLights,w
 14658  098B  00DA               	movwf	setProductData@value
 14659  098C  300F               	movlw	15
 14660  098D  319D  25AF         	fcall	_setProductData
 14661  098F  0008               	return
 14662  0990                     __end_of_setRF_DimmerLights:	
 14663                           
 14664                           	psect	text98
 14665  0BC8                     __ptext98:	
 14666 ;; *************** function _setDimmerLights_PercentValue *****************
 14667 ;; Defined at:
 14668 ;;		line 1054 in file "../src/Dimmer_B1.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;  value           1    wreg     unsigned char 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  value           1   54[BANK0 ] unsigned char 
 14673 ;;  i               3   55[BANK0 ] float 
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  1    wreg      unsigned char 
 14676 ;; Registers used:
 14677 ;;		wreg, status,2, status,0, pclath, cstack
 14678 ;; Tracked objects:
 14679 ;;		On entry : 0/0
 14680 ;;		On exit  : 0/0
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;Total ram usage:        6 bytes
 14688 ;; Hardware stack levels used:    1
 14689 ;; Hardware stack levels required when called:    5
 14690 ;; This function calls:
 14691 ;;		___awtoft
 14692 ;;		___ftadd
 14693 ;;		___ftdiv
 14694 ;;		___ftneg
 14695 ;;		___fttol
 14696 ;; This function is called by:
 14697 ;;		_setDimmerLights_OnOff
 14698 ;;		_setDimmerLights_Dimming
 14699 ;;		_Flash_Memory_Initialization
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           
 14704                           ;psect for function _setDimmerLights_PercentValue
 14705  0BC8                     _setDimmerLights_PercentValue:	
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in _setDimmerLights_PercentValue: [wreg+status,2+status,0+pclath+cstack]
 14709                           ;setDimmerLights_PercentValue@value stored from wreg
 14710  0BC8  0020               	movlb	0	; select bank0
 14711  0BC9  00D6               	movwf	setDimmerLights_PercentValue@value
 14712                           
 14713                           ;Dimmer_B1.c: 1062: float i = ((char)(70*0.8)) - ((char)(15*0.8));
 14714  0BCA  3000               	movlw	0
 14715  0BCB  00D7               	movwf	setDimmerLights_PercentValue@i
 14716  0BCC  3030               	movlw	48
 14717  0BCD  00D8               	movwf	setDimmerLights_PercentValue@i+1
 14718  0BCE  3042               	movlw	66
 14719  0BCF  00D9               	movwf	setDimmerLights_PercentValue@i+2
 14720                           
 14721                           ;Dimmer_B1.c: 1063: i /= 100;
 14722  0BD0  3000               	movlw	0
 14723  0BD1  00A6               	movwf	___ftdiv@f2
 14724  0BD2  30C8               	movlw	200
 14725  0BD3  00A7               	movwf	___ftdiv@f2+1
 14726  0BD4  3042               	movlw	66
 14727  0BD5  00A8               	movwf	___ftdiv@f2+2
 14728  0BD6  0857               	movf	setDimmerLights_PercentValue@i,w
 14729  0BD7  00A9               	movwf	___ftdiv@f1
 14730  0BD8  0858               	movf	setDimmerLights_PercentValue@i+1,w
 14731  0BD9  00AA               	movwf	___ftdiv@f1+1
 14732  0BDA  0859               	movf	setDimmerLights_PercentValue@i+2,w
 14733  0BDB  00AB               	movwf	___ftdiv@f1+2
 14734  0BDC  318F  2757  318B   	fcall	___ftdiv
 14735  0BDF  0020               	movlb	0	; select bank0
 14736  0BE0  0826               	movf	?___ftdiv,w
 14737  0BE1  00D7               	movwf	setDimmerLights_PercentValue@i
 14738  0BE2  0827               	movf	?___ftdiv+1,w
 14739  0BE3  00D8               	movwf	setDimmerLights_PercentValue@i+1
 14740  0BE4  0828               	movf	?___ftdiv+2,w
 14741  0BE5  00D9               	movwf	setDimmerLights_PercentValue@i+2
 14742                           
 14743                           ;Dimmer_B1.c: 1065: return (char) (100 - ((((char)(70*0.8)) - value) / i));
 14744  0BE6  0856               	movf	setDimmerLights_PercentValue@value,w
 14745  0BE7  00D4               	movwf	??_setDimmerLights_PercentValue
 14746  0BE8  01D5               	clrf	??_setDimmerLights_PercentValue+1
 14747  0BE9  09D4               	comf	??_setDimmerLights_PercentValue,f
 14748  0BEA  09D5               	comf	??_setDimmerLights_PercentValue+1,f
 14749  0BEB  0AD4               	incf	??_setDimmerLights_PercentValue,f
 14750  0BEC  1903               	skipnz
 14751  0BED  0AD5               	incf	??_setDimmerLights_PercentValue+1,f
 14752  0BEE  0854               	movf	??_setDimmerLights_PercentValue,w
 14753  0BEF  3E38               	addlw	56
 14754  0BF0  00A0               	movwf	___awtoft@c
 14755  0BF1  3000               	movlw	0
 14756  0BF2  3D55               	addwfc	??_setDimmerLights_PercentValue+1,w
 14757  0BF3  00A1               	movwf	___awtoft@c+1
 14758  0BF4  3192  2207  318B   	fcall	___awtoft
 14759  0BF7  0020               	movlb	0	; select bank0
 14760  0BF8  0820               	movf	?___awtoft,w
 14761  0BF9  00A9               	movwf	___ftdiv@f1
 14762  0BFA  0821               	movf	?___awtoft+1,w
 14763  0BFB  00AA               	movwf	___ftdiv@f1+1
 14764  0BFC  0822               	movf	?___awtoft+2,w
 14765  0BFD  00AB               	movwf	___ftdiv@f1+2
 14766  0BFE  0857               	movf	setDimmerLights_PercentValue@i,w
 14767  0BFF  00A6               	movwf	___ftdiv@f2
 14768  0C00  0858               	movf	setDimmerLights_PercentValue@i+1,w
 14769  0C01  00A7               	movwf	___ftdiv@f2+1
 14770  0C02  0859               	movf	setDimmerLights_PercentValue@i+2,w
 14771  0C03  00A8               	movwf	___ftdiv@f2+2
 14772  0C04  318F  2757  318B   	fcall	___ftdiv
 14773  0C07  0020               	movlb	0	; select bank0
 14774  0C08  0826               	movf	?___ftdiv,w
 14775  0C09  00B6               	movwf	___ftneg@f1
 14776  0C0A  0827               	movf	?___ftdiv+1,w
 14777  0C0B  00B7               	movwf	___ftneg@f1+1
 14778  0C0C  0828               	movf	?___ftdiv+2,w
 14779  0C0D  00B8               	movwf	___ftneg@f1+2
 14780  0C0E  319D  2509  318B   	fcall	___ftneg
 14781  0C11  0020               	movlb	0	; select bank0
 14782  0C12  0836               	movf	?___ftneg,w
 14783  0C13  00BC               	movwf	___ftadd@f2
 14784  0C14  0837               	movf	?___ftneg+1,w
 14785  0C15  00BD               	movwf	___ftadd@f2+1
 14786  0C16  0838               	movf	?___ftneg+2,w
 14787  0C17  00BE               	movwf	___ftadd@f2+2
 14788  0C18  3000               	movlw	0
 14789  0C19  00B9               	movwf	___ftadd@f1
 14790  0C1A  30C8               	movlw	200
 14791  0C1B  00BA               	movwf	___ftadd@f1+1
 14792  0C1C  3042               	movlw	66
 14793  0C1D  00BB               	movwf	___ftadd@f1+2
 14794  0C1E  3183  235E  318B   	fcall	___ftadd
 14795  0C21  0020               	movlb	0	; select bank0
 14796  0C22  0839               	movf	?___ftadd,w
 14797  0C23  00C6               	movwf	___fttol@f1
 14798  0C24  083A               	movf	?___ftadd+1,w
 14799  0C25  00C7               	movwf	___fttol@f1+1
 14800  0C26  083B               	movf	?___ftadd+2,w
 14801  0C27  00C8               	movwf	___fttol@f1+2
 14802  0C28  318E  26D0         	fcall	___fttol
 14803  0C2A  0020               	movlb	0	; select bank0
 14804  0C2B  0846               	movf	?___fttol,w
 14805  0C2C  0008               	return
 14806  0C2D                     __end_of_setDimmerLights_PercentValue:	
 14807                           
 14808                           	psect	text99
 14809  0ED0                     __ptext99:	
 14810 ;; *************** function ___fttol *****************
 14811 ;; Defined at:
 14812 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14813 ;; Parameters:    Size  Location     Type
 14814 ;;  f1              3   38[BANK0 ] float 
 14815 ;; Auto vars:     Size  Location     Type
 14816 ;;  lval            4   47[BANK0 ] unsigned long 
 14817 ;;  exp1            1   51[BANK0 ] unsigned char 
 14818 ;;  sign1           1   46[BANK0 ] unsigned char 
 14819 ;; Return value:  Size  Location     Type
 14820 ;;                  4   38[BANK0 ] long 
 14821 ;; Registers used:
 14822 ;;		wreg, status,2, status,0
 14823 ;; Tracked objects:
 14824 ;;		On entry : 0/0
 14825 ;;		On exit  : 0/0
 14826 ;;		Unchanged: 0/0
 14827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14828 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14829 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14830 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;Total ram usage:       14 bytes
 14833 ;; Hardware stack levels used:    1
 14834 ;; Hardware stack levels required when called:    3
 14835 ;; This function calls:
 14836 ;;		Nothing
 14837 ;; This function is called by:
 14838 ;;		_setDimmerLights_PercentValue
 14839 ;; This function uses a non-reentrant model
 14840 ;;
 14841                           
 14842                           
 14843                           ;psect for function ___fttol
 14844  0ED0                     ___fttol:	
 14845                           
 14846                           ;incstack = 0
 14847                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14848  0ED0  0020               	movlb	0	; select bank0
 14849  0ED1  0846               	movf	___fttol@f1,w
 14850  0ED2  00CA               	movwf	??___fttol
 14851  0ED3  0847               	movf	___fttol@f1+1,w
 14852  0ED4  00CB               	movwf	??___fttol+1
 14853  0ED5  0848               	movf	___fttol@f1+2,w
 14854  0ED6  00CC               	movwf	??___fttol+2
 14855  0ED7  1003               	clrc
 14856  0ED8  0D4B               	rlf	??___fttol+1,w
 14857  0ED9  0D4C               	rlf	??___fttol+2,w
 14858  0EDA  00CD               	movwf	??___fttol+3
 14859  0EDB  084D               	movf	??___fttol+3,w
 14860  0EDC  00D3               	movwf	___fttol@exp1
 14861  0EDD  08D3               	movf	___fttol@exp1,f
 14862  0EDE  1D03               	skipz
 14863  0EDF  2EE9               	goto	l6638
 14864  0EE0  3000               	movlw	0
 14865  0EE1  00C9               	movwf	?___fttol+3
 14866  0EE2  3000               	movlw	0
 14867  0EE3  00C8               	movwf	?___fttol+2
 14868  0EE4  3000               	movlw	0
 14869  0EE5  00C7               	movwf	?___fttol+1
 14870  0EE6  3000               	movlw	0
 14871  0EE7  00C6               	movwf	?___fttol
 14872  0EE8  0008               	return
 14873  0EE9                     l6638:	
 14874  0EE9  0846               	movf	___fttol@f1,w
 14875  0EEA  00CA               	movwf	??___fttol
 14876  0EEB  0847               	movf	___fttol@f1+1,w
 14877  0EEC  00CB               	movwf	??___fttol+1
 14878  0EED  0848               	movf	___fttol@f1+2,w
 14879  0EEE  00CC               	movwf	??___fttol+2
 14880  0EEF  3017               	movlw	23
 14881  0EF0                     u5915:	
 14882  0EF0  36CC               	lsrf	??___fttol+2,f
 14883  0EF1  0CCB               	rrf	??___fttol+1,f
 14884  0EF2  0CCA               	rrf	??___fttol,f
 14885  0EF3  0B89               	decfsz	9,f
 14886  0EF4  2EF0               	goto	u5915
 14887  0EF5  084A               	movf	??___fttol,w
 14888  0EF6  00CD               	movwf	??___fttol+3
 14889  0EF7  084D               	movf	??___fttol+3,w
 14890  0EF8  00CE               	movwf	___fttol@sign1
 14891  0EF9  17C7               	bsf	___fttol@f1+1,7
 14892  0EFA  30FF               	movlw	255
 14893  0EFB  05C6               	andwf	___fttol@f1,f
 14894  0EFC  30FF               	movlw	255
 14895  0EFD  05C7               	andwf	___fttol@f1+1,f
 14896  0EFE  3000               	movlw	0
 14897  0EFF  05C8               	andwf	___fttol@f1+2,f
 14898  0F00  0846               	movf	___fttol@f1,w
 14899  0F01  00CF               	movwf	___fttol@lval
 14900  0F02  0847               	movf	___fttol@f1+1,w
 14901  0F03  00D0               	movwf	___fttol@lval+1
 14902  0F04  0848               	movf	___fttol@f1+2,w
 14903  0F05  00D1               	movwf	___fttol@lval+2
 14904  0F06  01D2               	clrf	___fttol@lval+3
 14905  0F07  308E               	movlw	142
 14906  0F08  02D3               	subwf	___fttol@exp1,f
 14907  0F09  1FD3               	btfss	___fttol@exp1,7
 14908  0F0A  2F27               	goto	l6658
 14909  0F0B  0853               	movf	___fttol@exp1,w
 14910  0F0C  3A80               	xorlw	128
 14911  0F0D  3E8F               	addlw	143
 14912  0F0E  1803               	skipnc
 14913  0F0F  2F19               	goto	l6656
 14914  0F10  3000               	movlw	0
 14915  0F11  00C9               	movwf	?___fttol+3
 14916  0F12  3000               	movlw	0
 14917  0F13  00C8               	movwf	?___fttol+2
 14918  0F14  3000               	movlw	0
 14919  0F15  00C7               	movwf	?___fttol+1
 14920  0F16  3000               	movlw	0
 14921  0F17  00C6               	movwf	?___fttol
 14922  0F18  0008               	return
 14923  0F19                     l6656:	
 14924  0F19  3001               	movlw	1
 14925  0F1A                     u5945:	
 14926  0F1A  36D2               	lsrf	___fttol@lval+3,f
 14927  0F1B  0CD1               	rrf	___fttol@lval+2,f
 14928  0F1C  0CD0               	rrf	___fttol@lval+1,f
 14929  0F1D  0CCF               	rrf	___fttol@lval,f
 14930  0F1E  0B89               	decfsz	9,f
 14931  0F1F  2F1A               	goto	u5945
 14932  0F20  3001               	movlw	1
 14933  0F21  00CA               	movwf	??___fttol
 14934  0F22  084A               	movf	??___fttol,w
 14935  0F23  07D3               	addwf	___fttol@exp1,f
 14936  0F24  1903               	btfsc	3,2
 14937  0F25  2F40               	goto	l6668
 14938  0F26  2F19               	goto	l6656
 14939  0F27                     l6658:	
 14940  0F27  3018               	movlw	24
 14941  0F28  0253               	subwf	___fttol@exp1,w
 14942  0F29  1C03               	skipc
 14943  0F2A  2F3D               	goto	l6666
 14944  0F2B  3000               	movlw	0
 14945  0F2C  00C9               	movwf	?___fttol+3
 14946  0F2D  3000               	movlw	0
 14947  0F2E  00C8               	movwf	?___fttol+2
 14948  0F2F  3000               	movlw	0
 14949  0F30  00C7               	movwf	?___fttol+1
 14950  0F31  3000               	movlw	0
 14951  0F32  00C6               	movwf	?___fttol
 14952  0F33  0008               	return
 14953  0F34                     l6664:	
 14954  0F34  3001               	movlw	1
 14955  0F35                     u5975:	
 14956  0F35  35CF               	lslf	___fttol@lval,f
 14957  0F36  0DD0               	rlf	___fttol@lval+1,f
 14958  0F37  0DD1               	rlf	___fttol@lval+2,f
 14959  0F38  0DD2               	rlf	___fttol@lval+3,f
 14960  0F39  0B89               	decfsz	9,f
 14961  0F3A  2F35               	goto	u5975
 14962  0F3B  3001               	movlw	1
 14963  0F3C  02D3               	subwf	___fttol@exp1,f
 14964  0F3D                     l6666:	
 14965  0F3D  08D3               	movf	___fttol@exp1,f
 14966  0F3E  1D03               	skipz
 14967  0F3F  2F34               	goto	l6664
 14968  0F40                     l6668:	
 14969  0F40  084E               	movf	___fttol@sign1,w
 14970  0F41  1903               	btfsc	3,2
 14971  0F42  2F4E               	goto	l6672
 14972  0F43  09CF               	comf	___fttol@lval,f
 14973  0F44  09D0               	comf	___fttol@lval+1,f
 14974  0F45  09D1               	comf	___fttol@lval+2,f
 14975  0F46  09D2               	comf	___fttol@lval+3,f
 14976  0F47  0ACF               	incf	___fttol@lval,f
 14977  0F48  1903               	skipnz
 14978  0F49  0AD0               	incf	___fttol@lval+1,f
 14979  0F4A  1903               	skipnz
 14980  0F4B  0AD1               	incf	___fttol@lval+2,f
 14981  0F4C  1903               	skipnz
 14982  0F4D  0AD2               	incf	___fttol@lval+3,f
 14983  0F4E                     l6672:	
 14984  0F4E  0852               	movf	___fttol@lval+3,w
 14985  0F4F  00C9               	movwf	?___fttol+3
 14986  0F50  0851               	movf	___fttol@lval+2,w
 14987  0F51  00C8               	movwf	?___fttol+2
 14988  0F52  0850               	movf	___fttol@lval+1,w
 14989  0F53  00C7               	movwf	?___fttol+1
 14990  0F54  084F               	movf	___fttol@lval,w
 14991  0F55  00C6               	movwf	?___fttol
 14992  0F56  0008               	return
 14993  0F57                     __end_of___fttol:	
 14994                           
 14995                           	psect	text100
 14996  1D09                     __ptext100:	
 14997 ;; *************** function ___ftneg *****************
 14998 ;; Defined at:
 14999 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 15000 ;; Parameters:    Size  Location     Type
 15001 ;;  f1              3   22[BANK0 ] float 
 15002 ;; Auto vars:     Size  Location     Type
 15003 ;;		None
 15004 ;; Return value:  Size  Location     Type
 15005 ;;                  3   22[BANK0 ] float 
 15006 ;; Registers used:
 15007 ;;		wreg
 15008 ;; Tracked objects:
 15009 ;;		On entry : 0/0
 15010 ;;		On exit  : 0/0
 15011 ;;		Unchanged: 0/0
 15012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15017 ;;Total ram usage:        3 bytes
 15018 ;; Hardware stack levels used:    1
 15019 ;; Hardware stack levels required when called:    3
 15020 ;; This function calls:
 15021 ;;		Nothing
 15022 ;; This function is called by:
 15023 ;;		_setDimmerLights_PercentValue
 15024 ;; This function uses a non-reentrant model
 15025 ;;
 15026                           
 15027                           
 15028                           ;psect for function ___ftneg
 15029  1D09                     ___ftneg:	
 15030                           
 15031                           ;incstack = 0
 15032                           ; Regs used in ___ftneg: [wreg]
 15033  1D09  0020               	movlb	0	; select bank0
 15034  1D0A  0838               	movf	___ftneg@f1+2,w
 15035  1D0B  0437               	iorwf	___ftneg@f1+1,w
 15036  1D0C  0436               	iorwf	___ftneg@f1,w
 15037  1D0D  1903               	skipnz
 15038  1D0E  0008               	return
 15039  1D0F  3080               	movlw	128
 15040  1D10  06B8               	xorwf	___ftneg@f1+2,f
 15041  1D11  0008               	return
 15042  1D12                     __end_of___ftneg:	
 15043                           
 15044                           	psect	text101
 15045  0F57                     __ptext101:	
 15046 ;; *************** function ___ftdiv *****************
 15047 ;; Defined at:
 15048 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  f2              3    6[BANK0 ] float 
 15051 ;;  f1              3    9[BANK0 ] float 
 15052 ;; Auto vars:     Size  Location     Type
 15053 ;;  f3              3   17[BANK0 ] float 
 15054 ;;  sign            1   21[BANK0 ] unsigned char 
 15055 ;;  exp             1   20[BANK0 ] unsigned char 
 15056 ;;  cntr            1   16[BANK0 ] unsigned char 
 15057 ;; Return value:  Size  Location     Type
 15058 ;;                  3    6[BANK0 ] float 
 15059 ;; Registers used:
 15060 ;;		wreg, status,2, status,0, pclath, cstack
 15061 ;; Tracked objects:
 15062 ;;		On entry : 0/0
 15063 ;;		On exit  : 0/0
 15064 ;;		Unchanged: 0/0
 15065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15066 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15069 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;Total ram usage:       16 bytes
 15071 ;; Hardware stack levels used:    1
 15072 ;; Hardware stack levels required when called:    4
 15073 ;; This function calls:
 15074 ;;		___ftpack
 15075 ;; This function is called by:
 15076 ;;		_setDimmerLights_PercentValue
 15077 ;;		_getDimmerLights_PercentValue
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           
 15082                           ;psect for function ___ftdiv
 15083  0F57                     ___ftdiv:	
 15084                           
 15085                           ;incstack = 0
 15086                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 15087  0F57  0020               	movlb	0	; select bank0
 15088  0F58  0829               	movf	___ftdiv@f1,w
 15089  0F59  00AC               	movwf	??___ftdiv
 15090  0F5A  082A               	movf	___ftdiv@f1+1,w
 15091  0F5B  00AD               	movwf	??___ftdiv+1
 15092  0F5C  082B               	movf	___ftdiv@f1+2,w
 15093  0F5D  00AE               	movwf	??___ftdiv+2
 15094  0F5E  1003               	clrc
 15095  0F5F  0D2D               	rlf	??___ftdiv+1,w
 15096  0F60  0D2E               	rlf	??___ftdiv+2,w
 15097  0F61  00AF               	movwf	??___ftdiv+3
 15098  0F62  082F               	movf	??___ftdiv+3,w
 15099  0F63  00B4               	movwf	___ftdiv@exp
 15100  0F64  08B4               	movf	___ftdiv@exp,f
 15101  0F65  1D03               	skipz
 15102  0F66  2F6E               	goto	l6588
 15103  0F67  3000               	movlw	0
 15104  0F68  00A6               	movwf	?___ftdiv
 15105  0F69  3000               	movlw	0
 15106  0F6A  00A7               	movwf	?___ftdiv+1
 15107  0F6B  3000               	movlw	0
 15108  0F6C  00A8               	movwf	?___ftdiv+2
 15109  0F6D  0008               	return
 15110  0F6E                     l6588:	
 15111  0F6E  0826               	movf	___ftdiv@f2,w
 15112  0F6F  00AC               	movwf	??___ftdiv
 15113  0F70  0827               	movf	___ftdiv@f2+1,w
 15114  0F71  00AD               	movwf	??___ftdiv+1
 15115  0F72  0828               	movf	___ftdiv@f2+2,w
 15116  0F73  00AE               	movwf	??___ftdiv+2
 15117  0F74  1003               	clrc
 15118  0F75  0D2D               	rlf	??___ftdiv+1,w
 15119  0F76  0D2E               	rlf	??___ftdiv+2,w
 15120  0F77  00AF               	movwf	??___ftdiv+3
 15121  0F78  082F               	movf	??___ftdiv+3,w
 15122  0F79  00B5               	movwf	___ftdiv@sign
 15123  0F7A  08B5               	movf	___ftdiv@sign,f
 15124  0F7B  1D03               	skipz
 15125  0F7C  2F84               	goto	l6594
 15126  0F7D  3000               	movlw	0
 15127  0F7E  00A6               	movwf	?___ftdiv
 15128  0F7F  3000               	movlw	0
 15129  0F80  00A7               	movwf	?___ftdiv+1
 15130  0F81  3000               	movlw	0
 15131  0F82  00A8               	movwf	?___ftdiv+2
 15132  0F83  0008               	return
 15133  0F84                     l6594:	
 15134  0F84  3000               	movlw	0
 15135  0F85  00B1               	movwf	___ftdiv@f3
 15136  0F86  3000               	movlw	0
 15137  0F87  00B2               	movwf	___ftdiv@f3+1
 15138  0F88  3000               	movlw	0
 15139  0F89  00B3               	movwf	___ftdiv@f3+2
 15140  0F8A  3089               	movlw	137
 15141  0F8B  0735               	addwf	___ftdiv@sign,w
 15142  0F8C  00AC               	movwf	??___ftdiv
 15143  0F8D  082C               	movf	??___ftdiv,w
 15144  0F8E  02B4               	subwf	___ftdiv@exp,f
 15145  0F8F  0829               	movf	___ftdiv@f1,w
 15146  0F90  00AC               	movwf	??___ftdiv
 15147  0F91  082A               	movf	___ftdiv@f1+1,w
 15148  0F92  00AD               	movwf	??___ftdiv+1
 15149  0F93  082B               	movf	___ftdiv@f1+2,w
 15150  0F94  00AE               	movwf	??___ftdiv+2
 15151  0F95  3010               	movlw	16
 15152  0F96                     u5835:	
 15153  0F96  36AE               	lsrf	??___ftdiv+2,f
 15154  0F97  0CAD               	rrf	??___ftdiv+1,f
 15155  0F98  0CAC               	rrf	??___ftdiv,f
 15156  0F99  0B89               	decfsz	9,f
 15157  0F9A  2F96               	goto	u5835
 15158  0F9B  082C               	movf	??___ftdiv,w
 15159  0F9C  00AF               	movwf	??___ftdiv+3
 15160  0F9D  082F               	movf	??___ftdiv+3,w
 15161  0F9E  00B5               	movwf	___ftdiv@sign
 15162  0F9F  0826               	movf	___ftdiv@f2,w
 15163  0FA0  00AC               	movwf	??___ftdiv
 15164  0FA1  0827               	movf	___ftdiv@f2+1,w
 15165  0FA2  00AD               	movwf	??___ftdiv+1
 15166  0FA3  0828               	movf	___ftdiv@f2+2,w
 15167  0FA4  00AE               	movwf	??___ftdiv+2
 15168  0FA5  3010               	movlw	16
 15169  0FA6                     u5845:	
 15170  0FA6  36AE               	lsrf	??___ftdiv+2,f
 15171  0FA7  0CAD               	rrf	??___ftdiv+1,f
 15172  0FA8  0CAC               	rrf	??___ftdiv,f
 15173  0FA9  0B89               	decfsz	9,f
 15174  0FAA  2FA6               	goto	u5845
 15175  0FAB  082C               	movf	??___ftdiv,w
 15176  0FAC  00AF               	movwf	??___ftdiv+3
 15177  0FAD  082F               	movf	??___ftdiv+3,w
 15178  0FAE  06B5               	xorwf	___ftdiv@sign,f
 15179  0FAF  3080               	movlw	128
 15180  0FB0  00AC               	movwf	??___ftdiv
 15181  0FB1  082C               	movf	??___ftdiv,w
 15182  0FB2  05B5               	andwf	___ftdiv@sign,f
 15183  0FB3  17AA               	bsf	___ftdiv@f1+1,7
 15184  0FB4  30FF               	movlw	255
 15185  0FB5  05A9               	andwf	___ftdiv@f1,f
 15186  0FB6  30FF               	movlw	255
 15187  0FB7  05AA               	andwf	___ftdiv@f1+1,f
 15188  0FB8  3000               	movlw	0
 15189  0FB9  05AB               	andwf	___ftdiv@f1+2,f
 15190  0FBA  17A7               	bsf	___ftdiv@f2+1,7
 15191  0FBB  30FF               	movlw	255
 15192  0FBC  05A6               	andwf	___ftdiv@f2,f
 15193  0FBD  30FF               	movlw	255
 15194  0FBE  05A7               	andwf	___ftdiv@f2+1,f
 15195  0FBF  3000               	movlw	0
 15196  0FC0  05A8               	andwf	___ftdiv@f2+2,f
 15197  0FC1  3018               	movlw	24
 15198  0FC2  00AC               	movwf	??___ftdiv
 15199  0FC3  082C               	movf	??___ftdiv,w
 15200  0FC4  00B0               	movwf	___ftdiv@cntr
 15201  0FC5                     l6608:	
 15202  0FC5  3001               	movlw	1
 15203  0FC6                     u5855:	
 15204  0FC6  35B1               	lslf	___ftdiv@f3,f
 15205  0FC7  0DB2               	rlf	___ftdiv@f3+1,f
 15206  0FC8  0DB3               	rlf	___ftdiv@f3+2,f
 15207  0FC9  0B89               	decfsz	9,f
 15208  0FCA  2FC6               	goto	u5855
 15209  0FCB  0828               	movf	___ftdiv@f2+2,w
 15210  0FCC  022B               	subwf	___ftdiv@f1+2,w
 15211  0FCD  1D03               	skipz
 15212  0FCE  2FD5               	goto	u5865
 15213  0FCF  0827               	movf	___ftdiv@f2+1,w
 15214  0FD0  022A               	subwf	___ftdiv@f1+1,w
 15215  0FD1  1D03               	skipz
 15216  0FD2  2FD5               	goto	u5865
 15217  0FD3  0826               	movf	___ftdiv@f2,w
 15218  0FD4  0229               	subwf	___ftdiv@f1,w
 15219  0FD5                     u5865:	
 15220  0FD5  1C03               	skipc
 15221  0FD6  2FDE               	goto	l6616
 15222  0FD7  0826               	movf	___ftdiv@f2,w
 15223  0FD8  02A9               	subwf	___ftdiv@f1,f
 15224  0FD9  0827               	movf	___ftdiv@f2+1,w
 15225  0FDA  3BAA               	subwfb	___ftdiv@f1+1,f
 15226  0FDB  0828               	movf	___ftdiv@f2+2,w
 15227  0FDC  3BAB               	subwfb	___ftdiv@f1+2,f
 15228  0FDD  1431               	bsf	___ftdiv@f3,0
 15229  0FDE                     l6616:	
 15230  0FDE  3001               	movlw	1
 15231  0FDF                     u5875:	
 15232  0FDF  35A9               	lslf	___ftdiv@f1,f
 15233  0FE0  0DAA               	rlf	___ftdiv@f1+1,f
 15234  0FE1  0DAB               	rlf	___ftdiv@f1+2,f
 15235  0FE2  0B89               	decfsz	9,f
 15236  0FE3  2FDF               	goto	u5875
 15237  0FE4  3001               	movlw	1
 15238  0FE5  02B0               	subwf	___ftdiv@cntr,f
 15239  0FE6  1D03               	btfss	3,2
 15240  0FE7  2FC5               	goto	l6608
 15241  0FE8  0831               	movf	___ftdiv@f3,w
 15242  0FE9  00F2               	movwf	___ftpack@arg
 15243  0FEA  0832               	movf	___ftdiv@f3+1,w
 15244  0FEB  00F3               	movwf	___ftpack@arg+1
 15245  0FEC  0833               	movf	___ftdiv@f3+2,w
 15246  0FED  00F4               	movwf	___ftpack@arg+2
 15247  0FEE  0834               	movf	___ftdiv@exp,w
 15248  0FEF  00AC               	movwf	??___ftdiv
 15249  0FF0  082C               	movf	??___ftdiv,w
 15250  0FF1  00F5               	movwf	___ftpack@exp
 15251  0FF2  0835               	movf	___ftdiv@sign,w
 15252  0FF3  00AD               	movwf	??___ftdiv+1
 15253  0FF4  082D               	movf	??___ftdiv+1,w
 15254  0FF5  00F6               	movwf	___ftpack@sign
 15255  0FF6  318A  22A4         	fcall	___ftpack
 15256  0FF8  0872               	movf	?___ftpack,w
 15257  0FF9  0020               	movlb	0	; select bank0
 15258  0FFA  00A6               	movwf	?___ftdiv
 15259  0FFB  0873               	movf	?___ftpack+1,w
 15260  0FFC  00A7               	movwf	?___ftdiv+1
 15261  0FFD  0874               	movf	?___ftpack+2,w
 15262  0FFE  00A8               	movwf	?___ftdiv+2
 15263  0FFF  0008               	return
 15264  1000                     __end_of___ftdiv:	
 15265                           
 15266                           	psect	text102
 15267  035E                     __ptext102:	
 15268 ;; *************** function ___ftadd *****************
 15269 ;; Defined at:
 15270 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 15271 ;; Parameters:    Size  Location     Type
 15272 ;;  f1              3   25[BANK0 ] float 
 15273 ;;  f2              3   28[BANK0 ] float 
 15274 ;; Auto vars:     Size  Location     Type
 15275 ;;  exp1            1   37[BANK0 ] unsigned char 
 15276 ;;  exp2            1   36[BANK0 ] unsigned char 
 15277 ;;  sign            1   35[BANK0 ] unsigned char 
 15278 ;; Return value:  Size  Location     Type
 15279 ;;                  3   25[BANK0 ] float 
 15280 ;; Registers used:
 15281 ;;		wreg, status,2, status,0, pclath, cstack
 15282 ;; Tracked objects:
 15283 ;;		On entry : 0/0
 15284 ;;		On exit  : 0/0
 15285 ;;		Unchanged: 0/0
 15286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15287 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;Total ram usage:       13 bytes
 15292 ;; Hardware stack levels used:    1
 15293 ;; Hardware stack levels required when called:    4
 15294 ;; This function calls:
 15295 ;;		___ftpack
 15296 ;; This function is called by:
 15297 ;;		_setDimmerLights_PercentValue
 15298 ;; This function uses a non-reentrant model
 15299 ;;
 15300                           
 15301                           
 15302                           ;psect for function ___ftadd
 15303  035E                     ___ftadd:	
 15304                           
 15305                           ;incstack = 0
 15306                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 15307  035E  0020               	movlb	0	; select bank0
 15308  035F  0839               	movf	___ftadd@f1,w
 15309  0360  00BF               	movwf	??___ftadd
 15310  0361  083A               	movf	___ftadd@f1+1,w
 15311  0362  00C0               	movwf	??___ftadd+1
 15312  0363  083B               	movf	___ftadd@f1+2,w
 15313  0364  00C1               	movwf	??___ftadd+2
 15314  0365  1003               	clrc
 15315  0366  0D40               	rlf	??___ftadd+1,w
 15316  0367  0D41               	rlf	??___ftadd+2,w
 15317  0368  00C2               	movwf	??___ftadd+3
 15318  0369  0842               	movf	??___ftadd+3,w
 15319  036A  00C5               	movwf	___ftadd@exp1
 15320  036B  083C               	movf	___ftadd@f2,w
 15321  036C  00BF               	movwf	??___ftadd
 15322  036D  083D               	movf	___ftadd@f2+1,w
 15323  036E  00C0               	movwf	??___ftadd+1
 15324  036F  083E               	movf	___ftadd@f2+2,w
 15325  0370  00C1               	movwf	??___ftadd+2
 15326  0371  1003               	clrc
 15327  0372  0D40               	rlf	??___ftadd+1,w
 15328  0373  0D41               	rlf	??___ftadd+2,w
 15329  0374  00C2               	movwf	??___ftadd+3
 15330  0375  0842               	movf	??___ftadd+3,w
 15331  0376  00C4               	movwf	___ftadd@exp2
 15332  0377  0845               	movf	___ftadd@exp1,w
 15333  0378  1903               	btfsc	3,2
 15334  0379  2B86               	goto	l6518
 15335  037A  0844               	movf	___ftadd@exp2,w
 15336  037B  0245               	subwf	___ftadd@exp1,w
 15337  037C  1803               	skipnc
 15338  037D  2B8D               	goto	l6522
 15339  037E  0345               	decf	___ftadd@exp1,w
 15340  037F  3AFF               	xorlw	255
 15341  0380  0744               	addwf	___ftadd@exp2,w
 15342  0381  00BF               	movwf	??___ftadd
 15343  0382  3019               	movlw	25
 15344  0383  023F               	subwf	??___ftadd,w
 15345  0384  1C03               	skipc
 15346  0385  2B8D               	goto	l6522
 15347  0386                     l6518:	
 15348  0386  083C               	movf	___ftadd@f2,w
 15349  0387  00B9               	movwf	?___ftadd
 15350  0388  083D               	movf	___ftadd@f2+1,w
 15351  0389  00BA               	movwf	?___ftadd+1
 15352  038A  083E               	movf	___ftadd@f2+2,w
 15353  038B  00BB               	movwf	?___ftadd+2
 15354  038C  0008               	return
 15355  038D                     l6522:	
 15356  038D  0844               	movf	___ftadd@exp2,w
 15357  038E  1903               	btfsc	3,2
 15358  038F  0008               	return
 15359  0390  0845               	movf	___ftadd@exp1,w
 15360  0391  0244               	subwf	___ftadd@exp2,w
 15361  0392  1803               	skipnc
 15362  0393  2B9C               	goto	l6528
 15363  0394  0344               	decf	___ftadd@exp2,w
 15364  0395  3AFF               	xorlw	255
 15365  0396  0745               	addwf	___ftadd@exp1,w
 15366  0397  00BF               	movwf	??___ftadd
 15367  0398  3019               	movlw	25
 15368  0399  023F               	subwf	??___ftadd,w
 15369  039A  1803               	btfsc	3,0
 15370  039B  0008               	return
 15371  039C                     l6528:	
 15372  039C  3006               	movlw	6
 15373  039D  00BF               	movwf	??___ftadd
 15374  039E  083F               	movf	??___ftadd,w
 15375  039F  00C3               	movwf	___ftadd@sign
 15376  03A0  1BBB               	btfsc	___ftadd@f1+2,7
 15377  03A1  17C3               	bsf	___ftadd@sign,7
 15378  03A2  1BBE               	btfsc	___ftadd@f2+2,7
 15379  03A3  1743               	bsf	___ftadd@sign,6
 15380  03A4  17BA               	bsf	___ftadd@f1+1,7
 15381  03A5  30FF               	movlw	255
 15382  03A6  05B9               	andwf	___ftadd@f1,f
 15383  03A7  30FF               	movlw	255
 15384  03A8  05BA               	andwf	___ftadd@f1+1,f
 15385  03A9  3000               	movlw	0
 15386  03AA  05BB               	andwf	___ftadd@f1+2,f
 15387  03AB  17BD               	bsf	___ftadd@f2+1,7
 15388  03AC  30FF               	movlw	255
 15389  03AD  05BC               	andwf	___ftadd@f2,f
 15390  03AE  30FF               	movlw	255
 15391  03AF  05BD               	andwf	___ftadd@f2+1,f
 15392  03B0  3000               	movlw	0
 15393  03B1  05BE               	andwf	___ftadd@f2+2,f
 15394  03B2  0844               	movf	___ftadd@exp2,w
 15395  03B3  0245               	subwf	___ftadd@exp1,w
 15396  03B4  1803               	skipnc
 15397  03B5  2BD8               	goto	l6550
 15398  03B6                     l6540:	
 15399  03B6  3001               	movlw	1
 15400  03B7                     u5675:	
 15401  03B7  35BC               	lslf	___ftadd@f2,f
 15402  03B8  0DBD               	rlf	___ftadd@f2+1,f
 15403  03B9  0DBE               	rlf	___ftadd@f2+2,f
 15404  03BA  0B89               	decfsz	9,f
 15405  03BB  2BB7               	goto	u5675
 15406  03BC  3001               	movlw	1
 15407  03BD  02C4               	subwf	___ftadd@exp2,f
 15408  03BE  0844               	movf	___ftadd@exp2,w
 15409  03BF  0645               	xorwf	___ftadd@exp1,w
 15410  03C0  1903               	skipnz
 15411  03C1  2BD3               	goto	l6548
 15412  03C2  3001               	movlw	1
 15413  03C3  02C3               	subwf	___ftadd@sign,f
 15414  03C4  0843               	movf	___ftadd@sign,w
 15415  03C5  3907               	andlw	7
 15416  03C6  1903               	btfsc	3,2
 15417  03C7  2BD3               	goto	l6548
 15418  03C8  2BB6               	goto	l6540
 15419  03C9                     l6546:	
 15420  03C9  3001               	movlw	1
 15421  03CA                     u5705:	
 15422  03CA  36BB               	lsrf	___ftadd@f1+2,f
 15423  03CB  0CBA               	rrf	___ftadd@f1+1,f
 15424  03CC  0CB9               	rrf	___ftadd@f1,f
 15425  03CD  0B89               	decfsz	9,f
 15426  03CE  2BCA               	goto	u5705
 15427  03CF  3001               	movlw	1
 15428  03D0  00BF               	movwf	??___ftadd
 15429  03D1  083F               	movf	??___ftadd,w
 15430  03D2  07C5               	addwf	___ftadd@exp1,f
 15431  03D3                     l6548:	
 15432  03D3  0845               	movf	___ftadd@exp1,w
 15433  03D4  0644               	xorwf	___ftadd@exp2,w
 15434  03D5  1903               	btfsc	3,2
 15435  03D6  2BFD               	goto	l3107
 15436  03D7  2BC9               	goto	l6546
 15437  03D8                     l6550:	
 15438  03D8  0845               	movf	___ftadd@exp1,w
 15439  03D9  0244               	subwf	___ftadd@exp2,w
 15440  03DA  1803               	skipnc
 15441  03DB  2BFD               	goto	l3107
 15442  03DC                     l6552:	
 15443  03DC  3001               	movlw	1
 15444  03DD                     u5735:	
 15445  03DD  35B9               	lslf	___ftadd@f1,f
 15446  03DE  0DBA               	rlf	___ftadd@f1+1,f
 15447  03DF  0DBB               	rlf	___ftadd@f1+2,f
 15448  03E0  0B89               	decfsz	9,f
 15449  03E1  2BDD               	goto	u5735
 15450  03E2  3001               	movlw	1
 15451  03E3  02C5               	subwf	___ftadd@exp1,f
 15452  03E4  0844               	movf	___ftadd@exp2,w
 15453  03E5  0645               	xorwf	___ftadd@exp1,w
 15454  03E6  1903               	skipnz
 15455  03E7  2BF9               	goto	l6560
 15456  03E8  3001               	movlw	1
 15457  03E9  02C3               	subwf	___ftadd@sign,f
 15458  03EA  0843               	movf	___ftadd@sign,w
 15459  03EB  3907               	andlw	7
 15460  03EC  1903               	btfsc	3,2
 15461  03ED  2BF9               	goto	l6560
 15462  03EE  2BDC               	goto	l6552
 15463  03EF                     l6558:	
 15464  03EF  3001               	movlw	1
 15465  03F0                     u5765:	
 15466  03F0  36BE               	lsrf	___ftadd@f2+2,f
 15467  03F1  0CBD               	rrf	___ftadd@f2+1,f
 15468  03F2  0CBC               	rrf	___ftadd@f2,f
 15469  03F3  0B89               	decfsz	9,f
 15470  03F4  2BF0               	goto	u5765
 15471  03F5  3001               	movlw	1
 15472  03F6  00BF               	movwf	??___ftadd
 15473  03F7  083F               	movf	??___ftadd,w
 15474  03F8  07C4               	addwf	___ftadd@exp2,f
 15475  03F9                     l6560:	
 15476  03F9  0845               	movf	___ftadd@exp1,w
 15477  03FA  0644               	xorwf	___ftadd@exp2,w
 15478  03FB  1D03               	skipz
 15479  03FC  2BEF               	goto	l6558
 15480  03FD                     l3107:	
 15481  03FD  1FC3               	btfss	___ftadd@sign,7
 15482  03FE  2C0F               	goto	l6564
 15483  03FF  30FF               	movlw	255
 15484  0400  06B9               	xorwf	___ftadd@f1,f
 15485  0401  30FF               	movlw	255
 15486  0402  06BA               	xorwf	___ftadd@f1+1,f
 15487  0403  30FF               	movlw	255
 15488  0404  06BB               	xorwf	___ftadd@f1+2,f
 15489  0405  3001               	movlw	1
 15490  0406  07B9               	addwf	___ftadd@f1,f
 15491  0407  3000               	movlw	0
 15492  0408  1803               	skipnc
 15493  0409  3001               	movlw	1
 15494  040A  07BA               	addwf	___ftadd@f1+1,f
 15495  040B  3000               	movlw	0
 15496  040C  1803               	skipnc
 15497  040D  3001               	movlw	1
 15498  040E  07BB               	addwf	___ftadd@f1+2,f
 15499  040F                     l6564:	
 15500  040F  1F43               	btfss	___ftadd@sign,6
 15501  0410  2C21               	goto	l6568
 15502  0411  30FF               	movlw	255
 15503  0412  06BC               	xorwf	___ftadd@f2,f
 15504  0413  30FF               	movlw	255
 15505  0414  06BD               	xorwf	___ftadd@f2+1,f
 15506  0415  30FF               	movlw	255
 15507  0416  06BE               	xorwf	___ftadd@f2+2,f
 15508  0417  3001               	movlw	1
 15509  0418  07BC               	addwf	___ftadd@f2,f
 15510  0419  3000               	movlw	0
 15511  041A  1803               	skipnc
 15512  041B  3001               	movlw	1
 15513  041C  07BD               	addwf	___ftadd@f2+1,f
 15514  041D  3000               	movlw	0
 15515  041E  1803               	skipnc
 15516  041F  3001               	movlw	1
 15517  0420  07BE               	addwf	___ftadd@f2+2,f
 15518  0421                     l6568:	
 15519  0421  01C3               	clrf	___ftadd@sign
 15520  0422  0839               	movf	___ftadd@f1,w
 15521  0423  07BC               	addwf	___ftadd@f2,f
 15522  0424  083A               	movf	___ftadd@f1+1,w
 15523  0425  3DBD               	addwfc	___ftadd@f2+1,f
 15524  0426  083B               	movf	___ftadd@f1+2,w
 15525  0427  3DBE               	addwfc	___ftadd@f2+2,f
 15526  0428  1FBE               	btfss	___ftadd@f2+2,7
 15527  0429  2C3C               	goto	l6578
 15528  042A  30FF               	movlw	255
 15529  042B  06BC               	xorwf	___ftadd@f2,f
 15530  042C  30FF               	movlw	255
 15531  042D  06BD               	xorwf	___ftadd@f2+1,f
 15532  042E  30FF               	movlw	255
 15533  042F  06BE               	xorwf	___ftadd@f2+2,f
 15534  0430  3001               	movlw	1
 15535  0431  07BC               	addwf	___ftadd@f2,f
 15536  0432  3000               	movlw	0
 15537  0433  1803               	skipnc
 15538  0434  3001               	movlw	1
 15539  0435  07BD               	addwf	___ftadd@f2+1,f
 15540  0436  3000               	movlw	0
 15541  0437  1803               	skipnc
 15542  0438  3001               	movlw	1
 15543  0439  07BE               	addwf	___ftadd@f2+2,f
 15544  043A  01C3               	clrf	___ftadd@sign
 15545  043B  0AC3               	incf	___ftadd@sign,f
 15546  043C                     l6578:	
 15547  043C  083C               	movf	___ftadd@f2,w
 15548  043D  00F2               	movwf	___ftpack@arg
 15549  043E  083D               	movf	___ftadd@f2+1,w
 15550  043F  00F3               	movwf	___ftpack@arg+1
 15551  0440  083E               	movf	___ftadd@f2+2,w
 15552  0441  00F4               	movwf	___ftpack@arg+2
 15553  0442  0845               	movf	___ftadd@exp1,w
 15554  0443  00BF               	movwf	??___ftadd
 15555  0444  083F               	movf	??___ftadd,w
 15556  0445  00F5               	movwf	___ftpack@exp
 15557  0446  0843               	movf	___ftadd@sign,w
 15558  0447  00C0               	movwf	??___ftadd+1
 15559  0448  0840               	movf	??___ftadd+1,w
 15560  0449  00F6               	movwf	___ftpack@sign
 15561  044A  318A  22A4         	fcall	___ftpack
 15562  044C  0872               	movf	?___ftpack,w
 15563  044D  0020               	movlb	0	; select bank0
 15564  044E  00B9               	movwf	?___ftadd
 15565  044F  0873               	movf	?___ftpack+1,w
 15566  0450  00BA               	movwf	?___ftadd+1
 15567  0451  0874               	movf	?___ftpack+2,w
 15568  0452  00BB               	movwf	?___ftadd+2
 15569  0453  0008               	return
 15570  0454                     __end_of___ftadd:	
 15571                           
 15572                           	psect	text103
 15573  1207                     __ptext103:	
 15574 ;; *************** function ___awtoft *****************
 15575 ;; Defined at:
 15576 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 15577 ;; Parameters:    Size  Location     Type
 15578 ;;  c               2    0[BANK0 ] int 
 15579 ;; Auto vars:     Size  Location     Type
 15580 ;;  sign            1    5[BANK0 ] unsigned char 
 15581 ;; Return value:  Size  Location     Type
 15582 ;;                  3    0[BANK0 ] float 
 15583 ;; Registers used:
 15584 ;;		wreg, status,2, status,0, pclath, cstack
 15585 ;; Tracked objects:
 15586 ;;		On entry : 0/0
 15587 ;;		On exit  : 0/0
 15588 ;;		Unchanged: 0/0
 15589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15590 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15593 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15594 ;;Total ram usage:        6 bytes
 15595 ;; Hardware stack levels used:    1
 15596 ;; Hardware stack levels required when called:    4
 15597 ;; This function calls:
 15598 ;;		___ftpack
 15599 ;; This function is called by:
 15600 ;;		_setDimmerLights_PercentValue
 15601 ;;		_getDimmerLights_PercentValue
 15602 ;; This function uses a non-reentrant model
 15603 ;;
 15604                           
 15605                           
 15606                           ;psect for function ___awtoft
 15607  1207                     ___awtoft:	
 15608                           
 15609                           ;incstack = 0
 15610                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15611  1207  0020               	movlb	0	; select bank0
 15612  1208  01A5               	clrf	___awtoft@sign
 15613  1209  1FA1               	btfss	___awtoft@c+1,7
 15614  120A  2A12               	goto	l9030
 15615  120B  09A0               	comf	___awtoft@c,f
 15616  120C  09A1               	comf	___awtoft@c+1,f
 15617  120D  0AA0               	incf	___awtoft@c,f
 15618  120E  1903               	skipnz
 15619  120F  0AA1               	incf	___awtoft@c+1,f
 15620  1210  01A5               	clrf	___awtoft@sign
 15621  1211  0AA5               	incf	___awtoft@sign,f
 15622  1212                     l9030:	
 15623  1212  0820               	movf	___awtoft@c,w
 15624  1213  00F2               	movwf	___ftpack@arg
 15625  1214  0821               	movf	___awtoft@c+1,w
 15626  1215  00F3               	movwf	___ftpack@arg+1
 15627  1216  01F4               	clrf	___ftpack@arg+2
 15628  1217  308E               	movlw	142
 15629  1218  00A3               	movwf	??___awtoft
 15630  1219  0823               	movf	??___awtoft,w
 15631  121A  00F5               	movwf	___ftpack@exp
 15632  121B  0825               	movf	___awtoft@sign,w
 15633  121C  00A4               	movwf	??___awtoft+1
 15634  121D  0824               	movf	??___awtoft+1,w
 15635  121E  00F6               	movwf	___ftpack@sign
 15636  121F  318A  22A4         	fcall	___ftpack
 15637  1221  0872               	movf	?___ftpack,w
 15638  1222  0020               	movlb	0	; select bank0
 15639  1223  00A0               	movwf	?___awtoft
 15640  1224  0873               	movf	?___ftpack+1,w
 15641  1225  00A1               	movwf	?___awtoft+1
 15642  1226  0874               	movf	?___ftpack+2,w
 15643  1227  00A2               	movwf	?___awtoft+2
 15644  1228  0008               	return
 15645  1229                     __end_of___awtoft:	
 15646                           
 15647                           	psect	text104
 15648  0AA4                     __ptext104:	
 15649 ;; *************** function ___ftpack *****************
 15650 ;; Defined at:
 15651 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15652 ;; Parameters:    Size  Location     Type
 15653 ;;  arg             3    2[COMMON] unsigned um
 15654 ;;  exp             1    5[COMMON] unsigned char 
 15655 ;;  sign            1    6[COMMON] unsigned char 
 15656 ;; Auto vars:     Size  Location     Type
 15657 ;;		None
 15658 ;; Return value:  Size  Location     Type
 15659 ;;                  3    2[COMMON] float 
 15660 ;; Registers used:
 15661 ;;		wreg, status,2, status,0
 15662 ;; Tracked objects:
 15663 ;;		On entry : 0/0
 15664 ;;		On exit  : 0/0
 15665 ;;		Unchanged: 0/0
 15666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15667 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15669 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15670 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15671 ;;Total ram usage:        8 bytes
 15672 ;; Hardware stack levels used:    1
 15673 ;; Hardware stack levels required when called:    3
 15674 ;; This function calls:
 15675 ;;		Nothing
 15676 ;; This function is called by:
 15677 ;;		___awtoft
 15678 ;;		___ftadd
 15679 ;;		___ftdiv
 15680 ;; This function uses a non-reentrant model
 15681 ;;
 15682                           
 15683                           
 15684                           ;psect for function ___ftpack
 15685  0AA4                     ___ftpack:	
 15686                           
 15687                           ;incstack = 0
 15688                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15689  0AA4  0875               	movf	___ftpack@exp,w
 15690  0AA5  1903               	btfsc	3,2
 15691  0AA6  2AAC               	goto	l6364
 15692  0AA7  0874               	movf	___ftpack@arg+2,w
 15693  0AA8  0473               	iorwf	___ftpack@arg+1,w
 15694  0AA9  0472               	iorwf	___ftpack@arg,w
 15695  0AAA  1D03               	skipz
 15696  0AAB  2ABD               	goto	l6370
 15697  0AAC                     l6364:	
 15698  0AAC  3000               	movlw	0
 15699  0AAD  00F2               	movwf	?___ftpack
 15700  0AAE  3000               	movlw	0
 15701  0AAF  00F3               	movwf	?___ftpack+1
 15702  0AB0  3000               	movlw	0
 15703  0AB1  00F4               	movwf	?___ftpack+2
 15704  0AB2  0008               	return
 15705  0AB3                     l6368:	
 15706  0AB3  3001               	movlw	1
 15707  0AB4  00F7               	movwf	??___ftpack
 15708  0AB5  0877               	movf	??___ftpack,w
 15709  0AB6  07F5               	addwf	___ftpack@exp,f
 15710  0AB7  3001               	movlw	1
 15711  0AB8                     u5305:	
 15712  0AB8  36F4               	lsrf	___ftpack@arg+2,f
 15713  0AB9  0CF3               	rrf	___ftpack@arg+1,f
 15714  0ABA  0CF2               	rrf	___ftpack@arg,f
 15715  0ABB  0B89               	decfsz	9,f
 15716  0ABC  2AB8               	goto	u5305
 15717  0ABD                     l6370:	
 15718  0ABD  30FE               	movlw	254
 15719  0ABE  0574               	andwf	___ftpack@arg+2,w
 15720  0ABF  1903               	btfsc	3,2
 15721  0AC0  2AD6               	goto	l3078
 15722  0AC1  2AB3               	goto	l6368
 15723  0AC2                     l6372:	
 15724  0AC2  3001               	movlw	1
 15725  0AC3  00F7               	movwf	??___ftpack
 15726  0AC4  0877               	movf	??___ftpack,w
 15727  0AC5  07F5               	addwf	___ftpack@exp,f
 15728  0AC6  3001               	movlw	1
 15729  0AC7  07F2               	addwf	___ftpack@arg,f
 15730  0AC8  3000               	movlw	0
 15731  0AC9  1803               	skipnc
 15732  0ACA  3001               	movlw	1
 15733  0ACB  07F3               	addwf	___ftpack@arg+1,f
 15734  0ACC  3000               	movlw	0
 15735  0ACD  1803               	skipnc
 15736  0ACE  3001               	movlw	1
 15737  0ACF  07F4               	addwf	___ftpack@arg+2,f
 15738  0AD0  3001               	movlw	1
 15739  0AD1                     u5325:	
 15740  0AD1  36F4               	lsrf	___ftpack@arg+2,f
 15741  0AD2  0CF3               	rrf	___ftpack@arg+1,f
 15742  0AD3  0CF2               	rrf	___ftpack@arg,f
 15743  0AD4  0B89               	decfsz	9,f
 15744  0AD5  2AD1               	goto	u5325
 15745  0AD6                     l3078:	
 15746  0AD6  30FF               	movlw	255
 15747  0AD7  0574               	andwf	___ftpack@arg+2,w
 15748  0AD8  1903               	btfsc	3,2
 15749  0AD9  2AE3               	goto	l6380
 15750  0ADA  2AC2               	goto	l6372
 15751  0ADB                     l6378:	
 15752  0ADB  3001               	movlw	1
 15753  0ADC  02F5               	subwf	___ftpack@exp,f
 15754  0ADD  3001               	movlw	1
 15755  0ADE                     u5345:	
 15756  0ADE  35F2               	lslf	___ftpack@arg,f
 15757  0ADF  0DF3               	rlf	___ftpack@arg+1,f
 15758  0AE0  0DF4               	rlf	___ftpack@arg+2,f
 15759  0AE1  0B89               	decfsz	9,f
 15760  0AE2  2ADE               	goto	u5345
 15761  0AE3                     l6380:	
 15762  0AE3  1FF3               	btfss	___ftpack@arg+1,7
 15763  0AE4  2ADB               	goto	l6378
 15764  0AE5  1875               	btfsc	___ftpack@exp,0
 15765  0AE6  2AED               	goto	l3084
 15766  0AE7  30FF               	movlw	255
 15767  0AE8  05F2               	andwf	___ftpack@arg,f
 15768  0AE9  307F               	movlw	127
 15769  0AEA  05F3               	andwf	___ftpack@arg+1,f
 15770  0AEB  30FF               	movlw	255
 15771  0AEC  05F4               	andwf	___ftpack@arg+2,f
 15772  0AED                     l3084:	
 15773  0AED  1003               	clrc
 15774  0AEE  0CF5               	rrf	___ftpack@exp,f
 15775  0AEF  0875               	movf	___ftpack@exp,w
 15776  0AF0  00F7               	movwf	??___ftpack
 15777  0AF1  01F8               	clrf	??___ftpack+1
 15778  0AF2  01F9               	clrf	??___ftpack+2
 15779  0AF3  3010               	movlw	16
 15780  0AF4                     u5375:	
 15781  0AF4  35F7               	lslf	??___ftpack,f
 15782  0AF5  0DF8               	rlf	??___ftpack+1,f
 15783  0AF6  0DF9               	rlf	??___ftpack+2,f
 15784  0AF7  0B89               	decfsz	9,f
 15785  0AF8  2AF4               	goto	u5375
 15786  0AF9  0877               	movf	??___ftpack,w
 15787  0AFA  04F2               	iorwf	___ftpack@arg,f
 15788  0AFB  0878               	movf	??___ftpack+1,w
 15789  0AFC  04F3               	iorwf	___ftpack@arg+1,f
 15790  0AFD  0879               	movf	??___ftpack+2,w
 15791  0AFE  04F4               	iorwf	___ftpack@arg+2,f
 15792  0AFF  0876               	movf	___ftpack@sign,w
 15793  0B00  1903               	btfsc	3,2
 15794  0B01  0008               	return
 15795  0B02  17F4               	bsf	___ftpack@arg+2,7
 15796  0B03  0008               	return
 15797  0B04                     __end_of___ftpack:	
 15798                           
 15799                           	psect	text105
 15800  1EDA                     __ptext105:	
 15801 ;; *************** function _setDimmerLights_Line *****************
 15802 ;; Defined at:
 15803 ;;		line 952 in file "../src/Dimmer_B1.c"
 15804 ;; Parameters:    Size  Location     Type
 15805 ;;  lights          1    wreg     unsigned char 
 15806 ;; Auto vars:     Size  Location     Type
 15807 ;;  lights          1    2[COMMON] unsigned char 
 15808 ;; Return value:  Size  Location     Type
 15809 ;;		None               void
 15810 ;; Registers used:
 15811 ;;		wreg
 15812 ;; Tracked objects:
 15813 ;;		On entry : 0/0
 15814 ;;		On exit  : 0/0
 15815 ;;		Unchanged: 0/0
 15816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;Total ram usage:        1 bytes
 15822 ;; Hardware stack levels used:    1
 15823 ;; Hardware stack levels required when called:    3
 15824 ;; This function calls:
 15825 ;;		Nothing
 15826 ;; This function is called by:
 15827 ;;		_setDimmerLights_OnOff
 15828 ;;		_setDimmerLights_Dimming
 15829 ;; This function uses a non-reentrant model
 15830 ;;
 15831                           
 15832                           
 15833                           ;psect for function _setDimmerLights_Line
 15834  1EDA                     _setDimmerLights_Line:	
 15835                           
 15836                           ;incstack = 0
 15837                           ; Regs used in _setDimmerLights_Line: [wreg]
 15838                           ;setDimmerLights_Line@lights stored from wreg
 15839  1EDA  00F2               	movwf	setDimmerLights_Line@lights
 15840                           
 15841                           ;Dimmer_B1.c: 953: Dimmer.LoadGO = 1;
 15842  1EDB  0021               	movlb	1	; select bank1
 15843  1EDC  14BA               	bsf	_Dimmer^(0+128),1	;volatile
 15844                           
 15845                           ;Dimmer_B1.c: 955: DimmerLights1.Line = 0;
 15846  1EDD  0022               	movlb	2	; select bank2
 15847  1EDE  10DD               	bcf	(_DimmerLights1^(0+256)+1),1
 15848                           
 15849                           ;Dimmer_B1.c: 958: DimmerLights2.Line = 0;
 15850  1EDF  10E5               	bcf	(_DimmerLights2^(0+256)+1),1
 15851                           
 15852                           ;Dimmer_B1.c: 964: if (lights == 1) {
 15853  1EE0  0872               	movf	setDimmerLights_Line@lights,w
 15854  1EE1  3A01               	xorlw	1
 15855  1EE2  1D03               	skipz
 15856  1EE3  2EE6               	goto	l6898
 15857                           
 15858                           ;Dimmer_B1.c: 965: DimmerLights1.Line = 1;
 15859  1EE4  14DD               	bsf	(_DimmerLights1^(0+256)+1),1
 15860                           
 15861                           ;Dimmer_B1.c: 966: }
 15862  1EE5  0008               	return
 15863  1EE6                     l6898:	
 15864                           
 15865                           ;Dimmer_B1.c: 969: else if (lights == 2) {
 15866  1EE6  0872               	movf	setDimmerLights_Line@lights,w
 15867  1EE7  3A02               	xorlw	2
 15868  1EE8  1D03               	skipz
 15869  1EE9  0008               	return
 15870                           
 15871                           ;Dimmer_B1.c: 970: DimmerLights2.Line = 1;
 15872  1EEA  14E5               	bsf	(_DimmerLights2^(0+256)+1),1
 15873  1EEB  0008               	return
 15874  1EEC                     __end_of_setDimmerLights_Line:	
 15875                           
 15876                           	psect	text106
 15877  1F3B                     __ptext106:	
 15878 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15879 ;; Defined at:
 15880 ;;		line 86 in file "../src/Dimmer_B1.c"
 15881 ;; Parameters:    Size  Location     Type
 15882 ;;  lights          1    wreg     unsigned char 
 15883 ;;  value           1    5[COMMON] unsigned char 
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;  lights          1    7[COMMON] unsigned char 
 15886 ;; Return value:  Size  Location     Type
 15887 ;;		None               void
 15888 ;; Registers used:
 15889 ;;		wreg
 15890 ;; Tracked objects:
 15891 ;;		On entry : 0/0
 15892 ;;		On exit  : 0/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15895 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;Total ram usage:        3 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:    3
 15902 ;; This function calls:
 15903 ;;		Nothing
 15904 ;; This function is called by:
 15905 ;;		_setDimmerLights_Dimming
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           
 15910                           ;psect for function _setDimmerIntr_MaxmumValue
 15911  1F3B                     _setDimmerIntr_MaxmumValue:	
 15912                           
 15913                           ;incstack = 0
 15914                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 15915                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 15916  1F3B  00F7               	movwf	setDimmerIntr_MaxmumValue@lights
 15917                           
 15918                           ;Dimmer_B1.c: 88: if (lights == 1) {
 15919  1F3C  0877               	movf	setDimmerIntr_MaxmumValue@lights,w
 15920  1F3D  3A01               	xorlw	1
 15921  1F3E  1D03               	skipz
 15922  1F3F  2F46               	goto	l6800
 15923                           
 15924                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 15925  1F40  0875               	movf	setDimmerIntr_MaxmumValue@value,w
 15926  1F41  00F6               	movwf	??_setDimmerIntr_MaxmumValue
 15927  1F42  0876               	movf	??_setDimmerIntr_MaxmumValue,w
 15928  1F43  0021               	movlb	1	; select bank1
 15929  1F44  00E6               	movwf	(_DimmerIntr1^(0+128)+5)
 15930                           
 15931                           ;Dimmer_B1.c: 90: }
 15932  1F45  0008               	return
 15933  1F46                     l6800:	
 15934                           
 15935                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 15936  1F46  0877               	movf	setDimmerIntr_MaxmumValue@lights,w
 15937  1F47  3A02               	xorlw	2
 15938  1F48  1D03               	skipz
 15939  1F49  0008               	return
 15940                           
 15941                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 15942  1F4A  0875               	movf	setDimmerIntr_MaxmumValue@value,w
 15943  1F4B  00F6               	movwf	??_setDimmerIntr_MaxmumValue
 15944  1F4C  0876               	movf	??_setDimmerIntr_MaxmumValue,w
 15945  1F4D  0021               	movlb	1	; select bank1
 15946  1F4E  00ED               	movwf	(_DimmerIntr2^(0+128)+5)
 15947  1F4F  0008               	return
 15948  1F50                     __end_of_setDimmerIntr_MaxmumValue:	
 15949                           
 15950                           	psect	text107
 15951  126E                     __ptext107:	
 15952 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 15953 ;; Defined at:
 15954 ;;		line 162 in file "../src/Dimmer_B1.c"
 15955 ;; Parameters:    Size  Location     Type
 15956 ;;  lights          1    wreg     unsigned char 
 15957 ;;  command         1    2[COMMON] unsigned char 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  lights          1    4[COMMON] unsigned char 
 15960 ;; Return value:  Size  Location     Type
 15961 ;;		None               void
 15962 ;; Registers used:
 15963 ;;		wreg, status,2, status,0
 15964 ;; Tracked objects:
 15965 ;;		On entry : 0/0
 15966 ;;		On exit  : 0/0
 15967 ;;		Unchanged: 0/0
 15968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15969 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15971 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15973 ;;Total ram usage:        3 bytes
 15974 ;; Hardware stack levels used:    1
 15975 ;; Hardware stack levels required when called:    3
 15976 ;; This function calls:
 15977 ;;		Nothing
 15978 ;; This function is called by:
 15979 ;;		_setDimmerLights_Dimming
 15980 ;; This function uses a non-reentrant model
 15981 ;;
 15982                           
 15983                           
 15984                           ;psect for function _setDimmerIntr_Dimming_Sw
 15985  126E                     _setDimmerIntr_Dimming_Sw:	
 15986                           
 15987                           ;incstack = 0
 15988                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 15989                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 15990  126E  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 15991                           
 15992                           ;Dimmer_B1.c: 164: if (lights == 1) {
 15993  126F  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 15994  1270  3A01               	xorlw	1
 15995  1271  1D03               	skipz
 15996  1272  2A81               	goto	l6808
 15997                           
 15998                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 15999  1273  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16000  1274  3A01               	xorlw	1
 16001  1275  3000               	movlw	0
 16002  1276  1903               	skipnz
 16003  1277  3001               	movlw	1
 16004  1278  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16005  1279  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16006  127A  0021               	movlb	1	; select bank1
 16007  127B  0861               	movf	_DimmerIntr1^(0+128),w
 16008  127C  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16009  127D  39EF               	andlw	-17
 16010  127E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16011  127F  00E1               	movwf	_DimmerIntr1^(0+128)
 16012                           
 16013                           ;Dimmer_B1.c: 166: }
 16014  1280  0008               	return
 16015  1281                     l6808:	
 16016                           
 16017                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16018  1281  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16019  1282  3A02               	xorlw	2
 16020  1283  1D03               	skipz
 16021  1284  0008               	return
 16022                           
 16023                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16024  1285  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16025  1286  3A01               	xorlw	1
 16026  1287  3000               	movlw	0
 16027  1288  1903               	skipnz
 16028  1289  3001               	movlw	1
 16029  128A  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16030  128B  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16031  128C  0021               	movlb	1	; select bank1
 16032  128D  0868               	movf	_DimmerIntr2^(0+128),w
 16033  128E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16034  128F  39EF               	andlw	-17
 16035  1290  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16036  1291  00E8               	movwf	_DimmerIntr2^(0+128)
 16037  1292  0008               	return
 16038  1293                     __end_of_setDimmerIntr_Dimming_Sw:	
 16039                           
 16040                           	psect	text108
 16041  1EFE                     __ptext108:	
 16042 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16043 ;; Defined at:
 16044 ;;		line 66 in file "../src/Dimmer_B1.c"
 16045 ;; Parameters:    Size  Location     Type
 16046 ;;  lights          1    wreg     unsigned char 
 16047 ;; Auto vars:     Size  Location     Type
 16048 ;;  lights          1    4[COMMON] unsigned char 
 16049 ;;  value           1    3[COMMON] unsigned char 
 16050 ;; Return value:  Size  Location     Type
 16051 ;;                  1    wreg      unsigned char 
 16052 ;; Registers used:
 16053 ;;		wreg, status,2
 16054 ;; Tracked objects:
 16055 ;;		On entry : 0/0
 16056 ;;		On exit  : 0/0
 16057 ;;		Unchanged: 0/0
 16058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16061 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16062 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16063 ;;Total ram usage:        3 bytes
 16064 ;; Hardware stack levels used:    1
 16065 ;; Hardware stack levels required when called:    3
 16066 ;; This function calls:
 16067 ;;		Nothing
 16068 ;; This function is called by:
 16069 ;;		_setDimmerLights_Dimming
 16070 ;; This function uses a non-reentrant model
 16071 ;;
 16072                           
 16073                           
 16074                           ;psect for function _getDimmerIntr_DimmingValue
 16075  1EFE                     _getDimmerIntr_DimmingValue:	
 16076                           
 16077                           ;incstack = 0
 16078                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16079                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16080  1EFE  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 16081                           
 16082                           ;Dimmer_B1.c: 67: char value = 0;
 16083  1EFF  01F3               	clrf	getDimmerIntr_DimmingValue@value
 16084                           
 16085                           ;Dimmer_B1.c: 69: if (lights == 1) {
 16086  1F00  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16087  1F01  3A01               	xorlw	1
 16088  1F02  1D03               	skipz
 16089  1F03  2F07               	goto	l6790
 16090                           
 16091                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 16092  1F04  0021               	movlb	1	; select bank1
 16093  1F05  0865               	movf	(_DimmerIntr1^(0+128)+4),w
 16094  1F06  2F0D               	goto	L9
 16095  1F07                     l6790:	
 16096                           ;Dimmer_B1.c: 71: }
 16097                           
 16098                           
 16099                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 16100  1F07  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 16101  1F08  3A02               	xorlw	2
 16102  1F09  1D03               	skipz
 16103  1F0A  2F10               	goto	l731
 16104                           
 16105                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 16106  1F0B  0021               	movlb	1	; select bank1
 16107  1F0C  086C               	movf	(_DimmerIntr2^(0+128)+4),w
 16108  1F0D                     L9:	
 16109  1F0D  00F2               	movwf	??_getDimmerIntr_DimmingValue
 16110  1F0E  0872               	movf	??_getDimmerIntr_DimmingValue,w
 16111  1F0F  00F3               	movwf	getDimmerIntr_DimmingValue@value
 16112  1F10                     l731:	
 16113                           
 16114                           ;Dimmer_B1.c: 76: }
 16115                           ;Dimmer_B1.c: 83: return value;
 16116  1F10  0873               	movf	getDimmerIntr_DimmingValue@value,w
 16117  1F11  0008               	return
 16118  1F12                     __end_of_getDimmerIntr_DimmingValue:	
 16119                           
 16120                           	psect	text109
 16121  1DDB                     __ptext109:	
 16122 ;; *************** function _getMain_LightsStatus *****************
 16123 ;; Defined at:
 16124 ;;		line 374 in file "../src/Main_B1.c"
 16125 ;; Parameters:    Size  Location     Type
 16126 ;;		None
 16127 ;; Auto vars:     Size  Location     Type
 16128 ;;  status          1    2[COMMON] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;                  1    wreg      unsigned char 
 16131 ;; Registers used:
 16132 ;;		wreg, status,2, status,0
 16133 ;; Tracked objects:
 16134 ;;		On entry : 0/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16142 ;;Total ram usage:        1 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; Hardware stack levels required when called:    3
 16145 ;; This function calls:
 16146 ;;		Nothing
 16147 ;; This function is called by:
 16148 ;;		_DimmerLights_Main
 16149 ;;		_setDimmerLights_Main
 16150 ;;		_Flash_Memory_Main
 16151 ;;		_Exception_Main
 16152 ;;		_Load_Main
 16153 ;; This function uses a non-reentrant model
 16154 ;;
 16155                           
 16156                           
 16157                           ;psect for function _getMain_LightsStatus
 16158  1DDB                     _getMain_LightsStatus:	
 16159                           
 16160                           ;Main_B1.c: 375: char status = 0;
 16161                           
 16162                           ;incstack = 0
 16163                           ; Regs used in _getMain_LightsStatus: [wreg+status,2+status,0]
 16164  1DDB  01F2               	clrf	getMain_LightsStatus@status
 16165                           
 16166                           ;Main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 16167  1DDC  3000               	movlw	0
 16168  1DDD  0022               	movlb	2	; select bank2
 16169  1DDE  185D               	btfsc	(_DimmerLights1^(0+256)+1),0
 16170  1DDF  3001               	movlw	1
 16171  1DE0  00F2               	movwf	getMain_LightsStatus@status
 16172                           
 16173                           ;Main_B1.c: 395: if (status == 0) {
 16174  1DE1  08F2               	movf	getMain_LightsStatus@status,f
 16175  1DE2  1D03               	skipz
 16176  1DE3  2DE8               	goto	l7082
 16177                           
 16178                           ;Main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 16179  1DE4  3000               	movlw	0
 16180  1DE5  1865               	btfsc	(_DimmerLights2^(0+256)+1),0
 16181  1DE6  3001               	movlw	1
 16182  1DE7  00F2               	movwf	getMain_LightsStatus@status
 16183  1DE8                     l7082:	
 16184                           
 16185                           ;Main_B1.c: 397: }
 16186                           ;Main_B1.c: 421: return status;
 16187  1DE8  0872               	movf	getMain_LightsStatus@status,w
 16188  1DE9  0008               	return
 16189  1DEA                     __end_of_getMain_LightsStatus:	
 16190                           
 16191                           	psect	text110
 16192  0800                     __ptext110:	
 16193 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16194 ;; Defined at:
 16195 ;;		line 913 in file "../src/Dimmer_B1.c"
 16196 ;; Parameters:    Size  Location     Type
 16197 ;;  lights          1    wreg     unsigned char 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;  lights          1    7[COMMON] unsigned char 
 16200 ;;  allow           1    8[COMMON] unsigned char 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;                  1    wreg      unsigned char 
 16203 ;; Registers used:
 16204 ;;		wreg, status,2, status,0, pclath, cstack
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;Total ram usage:        6 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; Hardware stack levels required when called:    4
 16217 ;; This function calls:
 16218 ;;		_getLoad_OK
 16219 ;; This function is called by:
 16220 ;;		_setDimmerLights_Main
 16221 ;; This function uses a non-reentrant model
 16222 ;;
 16223                           
 16224                           
 16225                           ;psect for function _getDimmerLights_Allow_Condition
 16226  0800                     _getDimmerLights_Allow_Condition:	
 16227                           
 16228                           ;incstack = 0
 16229                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16230                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16231  0800  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 16232                           
 16233                           ;Dimmer_B1.c: 914: char allow = 0;
 16234  0801  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 16235                           
 16236                           ;Dimmer_B1.c: 920: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16237  0802  01F4               	clrf	_getDimmerLights_Allow_Condition$2136
 16238  0803  0AF4               	incf	_getDimmerLights_Allow_Condition$2136,f
 16239  0804  319C  24D6  3188   	fcall	_getLoad_OK
 16240  0807  3800               	iorlw	0
 16241  0808  1D03               	skipz
 16242  0809  280E               	goto	l7096
 16243  080A  0021               	movlb	1	; select bank1
 16244  080B  18BA               	btfsc	_Dimmer^(0+128),1	;volatile
 16245  080C  280E               	goto	l7096
 16246  080D  01F4               	clrf	_getDimmerLights_Allow_Condition$2136
 16247  080E                     l7096:	
 16248  080E  0874               	movf	_getDimmerLights_Allow_Condition$2136,w
 16249  080F  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16250  0810  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16251  0811  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16252                           
 16253                           ;Dimmer_B1.c: 924: if (allow == 0) {
 16254  0812  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 16255  0813  1D03               	skipz
 16256  0814  2835               	goto	l7120
 16257                           
 16258                           ;Dimmer_B1.c: 925: if (lights == 1) {
 16259  0815  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16260  0816  3A01               	xorlw	1
 16261  0817  1D03               	skipz
 16262  0818  2824               	goto	l7110
 16263                           
 16264                           ;Dimmer_B1.c: 926: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16265  0819  01F5               	clrf	_getDimmerLights_Allow_Condition$2137
 16266  081A  0AF5               	incf	_getDimmerLights_Allow_Condition$2137,f
 16267  081B  0022               	movlb	2	; select bank2
 16268  081C  1A64               	btfsc	_DimmerLights2^(0+256),4
 16269  081D  2822               	goto	l7108
 16270  081E  0021               	movlb	1	; select bank1
 16271  081F  1A68               	btfsc	_DimmerIntr2^(0+128),4
 16272  0820  2822               	goto	l7108
 16273  0821  01F5               	clrf	_getDimmerLights_Allow_Condition$2137
 16274  0822                     l7108:	
 16275  0822  0875               	movf	_getDimmerLights_Allow_Condition$2137,w
 16276  0823  2832               	goto	L10
 16277  0824                     l7110:	
 16278                           ;Dimmer_B1.c: 927: } else if (lights == 2) {
 16279                           
 16280  0824  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 16281  0825  3A02               	xorlw	2
 16282  0826  1D03               	skipz
 16283  0827  2835               	goto	l7120
 16284                           
 16285                           ;Dimmer_B1.c: 928: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16286  0828  01F6               	clrf	_getDimmerLights_Allow_Condition$2138
 16287  0829  0AF6               	incf	_getDimmerLights_Allow_Condition$2138,f
 16288  082A  0022               	movlb	2	; select bank2
 16289  082B  1A5C               	btfsc	_DimmerLights1^(0+256),4
 16290  082C  2831               	goto	l7118
 16291  082D  0021               	movlb	1	; select bank1
 16292  082E  1A61               	btfsc	_DimmerIntr1^(0+128),4
 16293  082F  2831               	goto	l7118
 16294  0830  01F6               	clrf	_getDimmerLights_Allow_Condition$2138
 16295  0831                     l7118:	
 16296  0831  0876               	movf	_getDimmerLights_Allow_Condition$2138,w
 16297  0832                     L10:	
 16298  0832  00F3               	movwf	??_getDimmerLights_Allow_Condition
 16299  0833  0873               	movf	??_getDimmerLights_Allow_Condition,w
 16300  0834  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 16301  0835                     l7120:	
 16302                           
 16303                           ;Dimmer_B1.c: 929: }
 16304                           ;Dimmer_B1.c: 930: }
 16305                           ;Dimmer_B1.c: 947: return allow;
 16306  0835  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 16307  0836  0008               	return
 16308  0837                     __end_of_getDimmerLights_Allow_Condition:	
 16309                           
 16310                           	psect	text111
 16311  1CD6                     __ptext111:	
 16312 ;; *************** function _getLoad_OK *****************
 16313 ;; Defined at:
 16314 ;;		line 246 in file "../src/OverLoad_B1.c"
 16315 ;; Parameters:    Size  Location     Type
 16316 ;;		None
 16317 ;; Auto vars:     Size  Location     Type
 16318 ;;  ok              1    2[COMMON] unsigned char 
 16319 ;; Return value:  Size  Location     Type
 16320 ;;                  1    wreg      unsigned char 
 16321 ;; Registers used:
 16322 ;;		wreg, status,2
 16323 ;; Tracked objects:
 16324 ;;		On entry : 0/0
 16325 ;;		On exit  : 0/0
 16326 ;;		Unchanged: 0/0
 16327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16331 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16332 ;;Total ram usage:        1 bytes
 16333 ;; Hardware stack levels used:    1
 16334 ;; Hardware stack levels required when called:    3
 16335 ;; This function calls:
 16336 ;;		Nothing
 16337 ;; This function is called by:
 16338 ;;		_DimmerLights_Main
 16339 ;;		_getDimmerLights_Allow_Condition
 16340 ;; This function uses a non-reentrant model
 16341 ;;
 16342                           
 16343                           
 16344                           ;psect for function _getLoad_OK
 16345  1CD6                     _getLoad_OK:	
 16346                           
 16347                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 16348                           
 16349                           ;incstack = 0
 16350                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16351  1CD6  3000               	movlw	0
 16352  1CD7  0022               	movlb	2	; select bank2
 16353  1CD8  1BAE               	btfsc	_Load^(0+256),7
 16354  1CD9  3001               	movlw	1
 16355  1CDA  00F2               	movwf	getLoad_OK@ok
 16356                           
 16357                           ;OverLoad_B1.c: 248: return ok;
 16358  1CDB  0872               	movf	getLoad_OK@ok,w
 16359  1CDC  0008               	return
 16360  1CDD                     __end_of_getLoad_OK:	
 16361                           
 16362                           	psect	text112
 16363  13AF                     __ptext112:	
 16364 ;; *************** function _getMain_All_Error_Status *****************
 16365 ;; Defined at:
 16366 ;;		line 425 in file "../src/Main_B1.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;  command         1    wreg     unsigned char 
 16369 ;; Auto vars:     Size  Location     Type
 16370 ;;  command         1    7[COMMON] unsigned char 
 16371 ;;  status          1    8[COMMON] unsigned char 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  1    wreg      unsigned char 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16382 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16383 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16384 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16385 ;;Total ram usage:        7 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:    3
 16388 ;; This function calls:
 16389 ;;		Nothing
 16390 ;; This function is called by:
 16391 ;;		_DimmerLights_Main
 16392 ;;		_Exception_Main
 16393 ;;		_Load_Main
 16394 ;;		_setTemp_Main
 16395 ;;		_getRxData
 16396 ;;		_setSw_Main
 16397 ;; This function uses a non-reentrant model
 16398 ;;
 16399                           
 16400                           
 16401                           ;psect for function _getMain_All_Error_Status
 16402  13AF                     _getMain_All_Error_Status:	
 16403                           
 16404                           ;incstack = 0
 16405                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16406                           ;getMain_All_Error_Status@command stored from wreg
 16407  13AF  00F7               	movwf	getMain_All_Error_Status@command
 16408                           
 16409                           ;Main_B1.c: 426: char status = 0;
 16410  13B0  01F8               	clrf	getMain_All_Error_Status@status
 16411                           
 16412                           ;Main_B1.c: 437: if (status == 0 && command != 2) {
 16413  13B1  08F8               	movf	getMain_All_Error_Status@status,f
 16414  13B2  1D03               	skipz
 16415  13B3  2BC6               	goto	l6830
 16416  13B4  0877               	movf	getMain_All_Error_Status@command,w
 16417  13B5  3A02               	xorlw	2
 16418  13B6  1903               	skipnz
 16419  13B7  2BC6               	goto	l6830
 16420                           
 16421                           ;Main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 16422  13B8  0021               	movlb	1	; select bank1
 16423  13B9  18CF               	btfsc	_Temp^(0+128),1
 16424  13BA  2BBE               	goto	l6828
 16425  13BB  01F3               	clrf	_getMain_All_Error_Status$3361
 16426  13BC  01F4               	clrf	_getMain_All_Error_Status$3361+1
 16427  13BD  2BC2               	goto	l1653
 16428  13BE                     l6828:	
 16429  13BE  3002               	movlw	2
 16430  13BF  00F3               	movwf	_getMain_All_Error_Status$3361
 16431  13C0  3000               	movlw	0
 16432  13C1  00F4               	movwf	_getMain_All_Error_Status$3361+1
 16433  13C2                     l1653:	
 16434  13C2  0873               	movf	_getMain_All_Error_Status$3361,w
 16435  13C3  00F2               	movwf	??_getMain_All_Error_Status
 16436  13C4  0872               	movf	??_getMain_All_Error_Status,w
 16437  13C5  00F8               	movwf	getMain_All_Error_Status@status
 16438  13C6                     l6830:	
 16439                           
 16440                           ;Main_B1.c: 439: }
 16441                           ;Main_B1.c: 444: if (status == 0 && command != 3) {
 16442  13C6  08F8               	movf	getMain_All_Error_Status@status,f
 16443  13C7  1D03               	skipz
 16444  13C8  2BDB               	goto	l1654
 16445  13C9  0877               	movf	getMain_All_Error_Status@command,w
 16446  13CA  3A03               	xorlw	3
 16447  13CB  1903               	skipnz
 16448  13CC  2BDB               	goto	l1654
 16449                           
 16450                           ;Main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 16451  13CD  0022               	movlb	2	; select bank2
 16452  13CE  1AAE               	btfsc	_Load^(0+256),5
 16453  13CF  2BD3               	goto	l6838
 16454  13D0  01F5               	clrf	_getMain_All_Error_Status$3362
 16455  13D1  01F6               	clrf	_getMain_All_Error_Status$3362+1
 16456  13D2  2BD7               	goto	l1658
 16457  13D3                     l6838:	
 16458  13D3  3003               	movlw	3
 16459  13D4  00F5               	movwf	_getMain_All_Error_Status$3362
 16460  13D5  3000               	movlw	0
 16461  13D6  00F6               	movwf	_getMain_All_Error_Status$3362+1
 16462  13D7                     l1658:	
 16463  13D7  0875               	movf	_getMain_All_Error_Status$3362,w
 16464  13D8  00F2               	movwf	??_getMain_All_Error_Status
 16465  13D9  0872               	movf	??_getMain_All_Error_Status,w
 16466  13DA  00F8               	movwf	getMain_All_Error_Status@status
 16467  13DB                     l1654:	
 16468                           
 16469                           ;Main_B1.c: 446: }
 16470                           ;Main_B1.c: 462: return status;
 16471  13DB  0878               	movf	getMain_All_Error_Status@status,w
 16472  13DC  0008               	return
 16473  13DD                     __end_of_getMain_All_Error_Status:	
 16474                           
 16475                           	psect	text113
 16476  1D2E                     __ptext113:	
 16477 ;; *************** function _DimmerLights_Initialization *****************
 16478 ;; Defined at:
 16479 ;;		line 629 in file "../src/Dimmer_B1.c"
 16480 ;; Parameters:    Size  Location     Type
 16481 ;;		None
 16482 ;; Auto vars:     Size  Location     Type
 16483 ;;		None
 16484 ;; Return value:  Size  Location     Type
 16485 ;;		None               void
 16486 ;; Registers used:
 16487 ;;		wreg, status,2, status,0, pclath, cstack
 16488 ;; Tracked objects:
 16489 ;;		On entry : 0/0
 16490 ;;		On exit  : 0/0
 16491 ;;		Unchanged: 0/0
 16492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;Total ram usage:        0 bytes
 16498 ;; Hardware stack levels used:    1
 16499 ;; Hardware stack levels required when called:    4
 16500 ;; This function calls:
 16501 ;;		_DimmerIntr_Initialization
 16502 ;;		_setDimmerLights_Initialization
 16503 ;; This function is called by:
 16504 ;;		_main
 16505 ;; This function uses a non-reentrant model
 16506 ;;
 16507                           
 16508                           
 16509                           ;psect for function _DimmerLights_Initialization
 16510  1D2E                     _DimmerLights_Initialization:	
 16511                           
 16512                           ;Dimmer_B1.c: 631: setDimmerLights_Initialization(1);
 16513                           
 16514                           ;incstack = 0
 16515                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16516  1D2E  3001               	movlw	1
 16517  1D2F  319C  24A4  319D   	fcall	_setDimmerLights_Initialization
 16518                           
 16519                           ;Dimmer_B1.c: 635: setDimmerLights_Initialization(2);
 16520  1D32  3002               	movlw	2
 16521  1D33  319C  24A4  319D   	fcall	_setDimmerLights_Initialization
 16522                           
 16523                           ;Dimmer_B1.c: 641: DimmerIntr_Initialization();
 16524  1D36  3191  21E5         	fcall	_DimmerIntr_Initialization
 16525  1D38  0008               	return
 16526  1D39                     __end_of_DimmerLights_Initialization:	
 16527                           
 16528                           	psect	text114
 16529  1CA4                     __ptext114:	
 16530 ;; *************** function _setDimmerLights_Initialization *****************
 16531 ;; Defined at:
 16532 ;;		line 645 in file "../src/Dimmer_B1.c"
 16533 ;; Parameters:    Size  Location     Type
 16534 ;;  lights          1    wreg     unsigned char 
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;  lights          1    0[COMMON] unsigned char 
 16537 ;; Return value:  Size  Location     Type
 16538 ;;		None               void
 16539 ;; Registers used:
 16540 ;;		wreg
 16541 ;; Tracked objects:
 16542 ;;		On entry : 0/0
 16543 ;;		On exit  : 0/0
 16544 ;;		Unchanged: 0/0
 16545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;Total ram usage:        0 bytes
 16551 ;; Hardware stack levels used:    1
 16552 ;; Hardware stack levels required when called:    3
 16553 ;; This function calls:
 16554 ;;		Nothing
 16555 ;; This function is called by:
 16556 ;;		_DimmerLights_Initialization
 16557 ;; This function uses a non-reentrant model
 16558 ;;
 16559                           
 16560                           
 16561                           ;psect for function _setDimmerLights_Initialization
 16562  1CA4                     _setDimmerLights_Initialization:	
 16563                           
 16564                           ;incstack = 0
 16565                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16566  1CA4  0008               	return
 16567  1CA5                     __end_of_setDimmerLights_Initialization:	
 16568                           
 16569                           	psect	text115
 16570  11E5                     __ptext115:	
 16571 ;; *************** function _DimmerIntr_Initialization *****************
 16572 ;; Defined at:
 16573 ;;		line 7 in file "../src/Dimmer_B1.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;		None
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;		None
 16578 ;; Return value:  Size  Location     Type
 16579 ;;		None               void
 16580 ;; Registers used:
 16581 ;;		wreg
 16582 ;; Tracked objects:
 16583 ;;		On entry : 0/0
 16584 ;;		On exit  : 0/0
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;Total ram usage:        1 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    3
 16594 ;; This function calls:
 16595 ;;		Nothing
 16596 ;; This function is called by:
 16597 ;;		_DimmerLights_Initialization
 16598 ;; This function uses a non-reentrant model
 16599 ;;
 16600                           
 16601                           
 16602                           ;psect for function _DimmerIntr_Initialization
 16603  11E5                     _DimmerIntr_Initialization:	
 16604                           
 16605                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 16606                           
 16607                           ;incstack = 0
 16608                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 16609  11E5  3007               	movlw	7
 16610  11E6  00F2               	movwf	??_DimmerIntr_Initialization
 16611  11E7  0872               	movf	??_DimmerIntr_Initialization,w
 16612  11E8  0021               	movlb	1	; select bank1
 16613  11E9  00E4               	movwf	(_DimmerIntr1^(0+128)+3)
 16614                           
 16615                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(70*0.8));
 16616  11EA  3038               	movlw	56
 16617  11EB  00F2               	movwf	??_DimmerIntr_Initialization
 16618  11EC  0872               	movf	??_DimmerIntr_Initialization,w
 16619  11ED  00E6               	movwf	(_DimmerIntr1^(0+128)+5)
 16620                           
 16621                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(15*0.8));
 16622  11EE  300C               	movlw	12
 16623  11EF  00F2               	movwf	??_DimmerIntr_Initialization
 16624  11F0  0872               	movf	??_DimmerIntr_Initialization,w
 16625  11F1  00E7               	movwf	(_DimmerIntr1^(0+128)+6)
 16626                           
 16627                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(70*0.8));
 16628  11F2  3038               	movlw	56
 16629  11F3  00F2               	movwf	??_DimmerIntr_Initialization
 16630  11F4  0872               	movf	??_DimmerIntr_Initialization,w
 16631  11F5  00E5               	movwf	(_DimmerIntr1^(0+128)+4)
 16632                           
 16633                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 16634  11F6  3007               	movlw	7
 16635  11F7  00F2               	movwf	??_DimmerIntr_Initialization
 16636  11F8  0872               	movf	??_DimmerIntr_Initialization,w
 16637  11F9  00EB               	movwf	(_DimmerIntr2^(0+128)+3)
 16638                           
 16639                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(70*0.8));
 16640  11FA  3038               	movlw	56
 16641  11FB  00F2               	movwf	??_DimmerIntr_Initialization
 16642  11FC  0872               	movf	??_DimmerIntr_Initialization,w
 16643  11FD  00ED               	movwf	(_DimmerIntr2^(0+128)+5)
 16644                           
 16645                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(15*0.8));
 16646  11FE  300C               	movlw	12
 16647  11FF  00F2               	movwf	??_DimmerIntr_Initialization
 16648  1200  0872               	movf	??_DimmerIntr_Initialization,w
 16649  1201  00EE               	movwf	(_DimmerIntr2^(0+128)+6)
 16650                           
 16651                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(70*0.8));
 16652  1202  3038               	movlw	56
 16653  1203  00F2               	movwf	??_DimmerIntr_Initialization
 16654  1204  0872               	movf	??_DimmerIntr_Initialization,w
 16655  1205  00EC               	movwf	(_DimmerIntr2^(0+128)+4)
 16656  1206  0008               	return
 16657  1207                     __end_of_DimmerIntr_Initialization:	
 16658                           
 16659                           	psect	text116
 16660  1D01                     __ptext116:	
 16661 ;; *************** function _DelayOff_Main *****************
 16662 ;; Defined at:
 16663 ;;		line 41 in file "../src/DelayOff_B1.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;		None
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;		None
 16668 ;; Return value:  Size  Location     Type
 16669 ;;		None               void
 16670 ;; Registers used:
 16671 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        0 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    8
 16684 ;; This function calls:
 16685 ;;		_DlyOff_Main
 16686 ;; This function is called by:
 16687 ;;		_main
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           
 16692                           ;psect for function _DelayOff_Main
 16693  1D01                     _DelayOff_Main:	
 16694                           
 16695                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 16696                           
 16697                           ;incstack = 0
 16698                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16699  1D01  3001               	movlw	1
 16700  1D02  318D  2566  319D   	fcall	_DlyOff_Main
 16701                           
 16702                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 16703  1D05  3002               	movlw	2
 16704  1D06  318D  2566         	fcall	_DlyOff_Main
 16705  1D08  0008               	return
 16706  1D09                     __end_of_DelayOff_Main:	
 16707                           
 16708                           	psect	text117
 16709  0D66                     __ptext117:	
 16710 ;; *************** function _DlyOff_Main *****************
 16711 ;; Defined at:
 16712 ;;		line 61 in file "../src/DelayOff_B1.c"
 16713 ;; Parameters:    Size  Location     Type
 16714 ;;  sw              1    wreg     unsigned char 
 16715 ;; Auto vars:     Size  Location     Type
 16716 ;;  sw              1   69[BANK0 ] unsigned char 
 16717 ;; Return value:  Size  Location     Type
 16718 ;;		None               void
 16719 ;; Registers used:
 16720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16721 ;; Tracked objects:
 16722 ;;		On entry : 0/0
 16723 ;;		On exit  : 0/0
 16724 ;;		Unchanged: 0/0
 16725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16730 ;;Total ram usage:        3 bytes
 16731 ;; Hardware stack levels used:    1
 16732 ;; Hardware stack levels required when called:    7
 16733 ;; This function calls:
 16734 ;;		_DelayOffPointSelect
 16735 ;;		_getDimmerLights_Status
 16736 ;;		_setBuz
 16737 ;;		_setDimmerLights_SwOff
 16738 ;;		_setDimmerLights_SwOn
 16739 ;; This function is called by:
 16740 ;;		_DelayOff_Main
 16741 ;; This function uses a non-reentrant model
 16742 ;;
 16743                           
 16744                           
 16745                           ;psect for function _DlyOff_Main
 16746  0D66                     _DlyOff_Main:	
 16747                           
 16748                           ;incstack = 0
 16749                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16750                           ;DlyOff_Main@sw stored from wreg
 16751  0D66  0020               	movlb	0	; select bank0
 16752  0D67  00E5               	movwf	DlyOff_Main@sw
 16753                           
 16754                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 16755  0D68  0865               	movf	DlyOff_Main@sw,w
 16756  0D69  319F  2726  318D   	fcall	_DelayOffPointSelect
 16757                           
 16758                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 16759  0D6C  0021               	movlb	1	; select bank1
 16760  0D6D  0845               	movf	_DelayOff^(0+128),w
 16761  0D6E  0086               	movwf	6
 16762  0D6F  3001               	movlw	1	; select bank2/3
 16763  0D70  0087               	movwf	7
 16764  0D71  1C81               	btfss	1,1
 16765  0D72  0008               	return
 16766                           
 16767                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 16768  0D73  0845               	movf	_DelayOff^(0+128),w
 16769  0D74  3E02               	addlw	2
 16770  0D75  0086               	movwf	6
 16771  0D76  3001               	movlw	1	; select bank2/3
 16772  0D77  0087               	movwf	7
 16773  0D78  3001               	movlw	1
 16774  0D79  0781               	addwf	1,f
 16775  0D7A  3141               	addfsr 1,1
 16776  0D7B  1803               	skipnc
 16777  0D7C  0A81               	incf	1,f
 16778                           
 16779                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 16780  0D7D  0845               	movf	_DelayOff^(0+128),w
 16781  0D7E  3E02               	addlw	2
 16782  0D7F  0086               	movwf	6
 16783  0D80  3001               	movlw	1	; select bank2/3
 16784  0D81  0087               	movwf	7
 16785  0D82  3F40               	moviw [0]fsr1
 16786  0D83  0020               	movlb	0	; select bank0
 16787  0D84  00E3               	movwf	??_DlyOff_Main
 16788  0D85  3F41               	moviw [1]fsr1
 16789  0D86  00E4               	movwf	??_DlyOff_Main+1
 16790  0D87  300B               	movlw	11
 16791  0D88  0264               	subwf	??_DlyOff_Main+1,w
 16792  0D89  30B8               	movlw	184
 16793  0D8A  1903               	skipnz
 16794  0D8B  0263               	subwf	??_DlyOff_Main,w
 16795  0D8C  1C03               	skipc
 16796  0D8D  0008               	return
 16797                           
 16798                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 16799  0D8E  0021               	movlb	1	; select bank1
 16800  0D8F  0845               	movf	_DelayOff^(0+128),w
 16801  0D90  3E02               	addlw	2
 16802  0D91  0086               	movwf	6
 16803  0D92  3001               	movlw	1	; select bank2/3
 16804  0D93  0087               	movwf	7
 16805  0D94  3000               	movlw	0
 16806  0D95  3FC0               	movwi [0]fsr1
 16807  0D96  3FC1               	movwi [1]fsr1
 16808                           
 16809                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 16810  0D97  3001               	movlw	1
 16811  0D98  0020               	movlb	0	; select bank0
 16812  0D99  00E3               	movwf	??_DlyOff_Main
 16813  0D9A  0021               	movlb	1	; select bank1
 16814  0D9B  0845               	movf	_DelayOff^(0+128),w
 16815  0D9C  3E04               	addlw	4
 16816  0D9D  0086               	movwf	6
 16817  0D9E  3001               	movlw	1	; select bank2/3
 16818  0D9F  0087               	movwf	7
 16819  0DA0  0020               	movlb	0	; select bank0
 16820  0DA1  0863               	movf	??_DlyOff_Main,w
 16821  0DA2  0781               	addwf	1,f
 16822                           
 16823                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 16824  0DA3  0021               	movlb	1	; select bank1
 16825  0DA4  0845               	movf	_DelayOff^(0+128),w
 16826  0DA5  3E04               	addlw	4
 16827  0DA6  0086               	movwf	6
 16828  0DA7  3001               	movlw	1	; select bank2/3
 16829  0DA8  0087               	movwf	7
 16830  0DA9  0A45               	incf	_DelayOff^(0+128),w
 16831  0DAA  0084               	movwf	4
 16832  0DAB  3001               	movlw	1	; select bank2/3
 16833  0DAC  0085               	movwf	5
 16834  0DAD  0800               	movf	0,w
 16835  0DAE  0201               	subwf	1,w
 16836  0DAF  1C03               	skipc
 16837  0DB0  0008               	return
 16838                           
 16839                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 16840  0DB1  0845               	movf	_DelayOff^(0+128),w
 16841  0DB2  3E04               	addlw	4
 16842  0DB3  0086               	movwf	6
 16843  0DB4  3001               	movlw	1	; select bank2/3
 16844  0DB5  0087               	movwf	7
 16845  0DB6  0181               	clrf	1
 16846                           
 16847                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 16848  0DB7  0845               	movf	_DelayOff^(0+128),w
 16849  0DB8  0086               	movwf	6
 16850  0DB9  3001               	movlw	1	; select bank2/3
 16851  0DBA  0087               	movwf	7
 16852  0DBB  1081               	bcf	1,1
 16853                           
 16854                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 16855  0DBC  3064               	movlw	100
 16856  0DBD  0020               	movlb	0	; select bank0
 16857  0DBE  00A4               	movwf	setBuz@time
 16858  0DBF  3000               	movlw	0
 16859  0DC0  00A5               	movwf	setBuz@time+1
 16860  0DC1  3001               	movlw	1
 16861  0DC2  3197  2759  318D   	fcall	_setBuz
 16862                           
 16863                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 16864  0DC5  0020               	movlb	0	; select bank0
 16865  0DC6  0865               	movf	DlyOff_Main@sw,w
 16866  0DC7  319D  25BD  318D   	fcall	_getDimmerLights_Status
 16867  0DCA  3A01               	xorlw	1
 16868  0DCB  1D03               	skipz
 16869  0DCC  0008               	return
 16870                           
 16871                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 16872  0DCD  0020               	movlb	0	; select bank0
 16873  0DCE  0865               	movf	DlyOff_Main@sw,w
 16874  0DCF  3189  2190  318D   	fcall	_setDimmerLights_SwOn
 16875                           
 16876                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 16877  0DD2  0020               	movlb	0	; select bank0
 16878  0DD3  0865               	movf	DlyOff_Main@sw,w
 16879  0DD4  3196  2626         	fcall	_setDimmerLights_SwOff
 16880  0DD6  0008               	return
 16881  0DD7                     __end_of_DlyOff_Main:	
 16882                           
 16883                           	psect	text118
 16884  0990                     __ptext118:	
 16885 ;; *************** function _setDimmerLights_SwOn *****************
 16886 ;; Defined at:
 16887 ;;		line 685 in file "../src/Dimmer_B1.c"
 16888 ;; Parameters:    Size  Location     Type
 16889 ;;  sw              1    wreg     unsigned char 
 16890 ;; Auto vars:     Size  Location     Type
 16891 ;;  sw              1    9[BANK0 ] unsigned char 
 16892 ;;  idle            1    8[BANK0 ] unsigned char 
 16893 ;; Return value:  Size  Location     Type
 16894 ;;		None               void
 16895 ;; Registers used:
 16896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16897 ;; Tracked objects:
 16898 ;;		On entry : 0/0
 16899 ;;		On exit  : 0/0
 16900 ;;		Unchanged: 0/0
 16901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16906 ;;Total ram usage:        5 bytes
 16907 ;; Hardware stack levels used:    1
 16908 ;; Hardware stack levels required when called:    5
 16909 ;; This function calls:
 16910 ;;		_DimmerLights_SelectPointer
 16911 ;;		_setBuz
 16912 ;; This function is called by:
 16913 ;;		_DlyOff_Main
 16914 ;;		_setControl_Lights_Table
 16915 ;;		_setRFSW_Control
 16916 ;;		_setSw_Main
 16917 ;; This function uses a non-reentrant model
 16918 ;;
 16919                           
 16920                           
 16921                           ;psect for function _setDimmerLights_SwOn
 16922  0990                     _setDimmerLights_SwOn:	
 16923                           
 16924                           ;incstack = 0
 16925                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16926                           ;setDimmerLights_SwOn@sw stored from wreg
 16927  0990  0020               	movlb	0	; select bank0
 16928  0991  00A9               	movwf	setDimmerLights_SwOn@sw
 16929                           
 16930                           ;Dimmer_B1.c: 686: char idle = 0;
 16931  0992  01A8               	clrf	setDimmerLights_SwOn@idle
 16932                           
 16933                           ;Dimmer_B1.c: 688: if (idle == 0) {
 16934  0993  08A8               	movf	setDimmerLights_SwOn@idle,f
 16935  0994  1D03               	skipz
 16936  0995  29BA               	goto	l8938
 16937                           
 16938                           ;Dimmer_B1.c: 689: if (sw == 1) {
 16939  0996  0829               	movf	setDimmerLights_SwOn@sw,w
 16940  0997  3A01               	xorlw	1
 16941  0998  1D03               	skipz
 16942  0999  29A7               	goto	l8928
 16943                           
 16944                           ;Dimmer_B1.c: 690: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 16945  099A  01A6               	clrf	_setDimmerLights_SwOn$2110
 16946  099B  0AA6               	incf	_setDimmerLights_SwOn$2110,f
 16947  099C  0022               	movlb	2	; select bank2
 16948  099D  1A64               	btfsc	_DimmerLights2^(0+256),4
 16949  099E  29A4               	goto	l8926
 16950  099F  0021               	movlb	1	; select bank1
 16951  09A0  1A68               	btfsc	_DimmerIntr2^(0+128),4
 16952  09A1  29A4               	goto	l8926
 16953  09A2  0020               	movlb	0	; select bank0
 16954  09A3  01A6               	clrf	_setDimmerLights_SwOn$2110
 16955  09A4                     l8926:	
 16956  09A4  0020               	movlb	0	; select bank0
 16957  09A5  0826               	movf	_setDimmerLights_SwOn$2110,w
 16958  09A6  29B7               	goto	L11
 16959  09A7                     l8928:	
 16960                           ;Dimmer_B1.c: 691: } else if (sw == 2) {
 16961                           
 16962  09A7  0829               	movf	setDimmerLights_SwOn@sw,w
 16963  09A8  3A02               	xorlw	2
 16964  09A9  1D03               	skipz
 16965  09AA  29BA               	goto	l8938
 16966                           
 16967                           ;Dimmer_B1.c: 692: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 16968  09AB  01A7               	clrf	_setDimmerLights_SwOn$2111
 16969  09AC  0AA7               	incf	_setDimmerLights_SwOn$2111,f
 16970  09AD  0022               	movlb	2	; select bank2
 16971  09AE  1A5C               	btfsc	_DimmerLights1^(0+256),4
 16972  09AF  29B5               	goto	l8936
 16973  09B0  0021               	movlb	1	; select bank1
 16974  09B1  1A61               	btfsc	_DimmerIntr1^(0+128),4
 16975  09B2  29B5               	goto	l8936
 16976  09B3  0020               	movlb	0	; select bank0
 16977  09B4  01A7               	clrf	_setDimmerLights_SwOn$2111
 16978  09B5                     l8936:	
 16979  09B5  0020               	movlb	0	; select bank0
 16980  09B6  0827               	movf	_setDimmerLights_SwOn$2111,w
 16981  09B7                     L11:	
 16982  09B7  00F9               	movwf	??_setDimmerLights_SwOn
 16983  09B8  0879               	movf	??_setDimmerLights_SwOn,w
 16984  09B9  00A8               	movwf	setDimmerLights_SwOn@idle
 16985  09BA                     l8938:	
 16986                           
 16987                           ;Dimmer_B1.c: 693: }
 16988                           ;Dimmer_B1.c: 694: }
 16989                           ;Dimmer_B1.c: 711: DimmerLights_SelectPointer(sw);
 16990  09BA  0829               	movf	setDimmerLights_SwOn@sw,w
 16991  09BB  319F  27E7  3189   	fcall	_DimmerLights_SelectPointer
 16992                           
 16993                           ;Dimmer_B1.c: 712: if (idle == 0) {
 16994  09BE  0020               	movlb	0	; select bank0
 16995  09BF  08A8               	movf	setDimmerLights_SwOn@idle,f
 16996  09C0  1D03               	skipz
 16997  09C1  0008               	return
 16998                           
 16999                           ;Dimmer_B1.c: 713: DimmerLights->SwFlag = 1;
 17000  09C2  086B               	movf	_DimmerLights,w
 17001  09C3  0086               	movwf	6
 17002  09C4  3001               	movlw	1	; select bank2/3
 17003  09C5  0087               	movwf	7
 17004  09C6  1401               	bsf	1,0
 17005                           
 17006                           ;Dimmer_B1.c: 714: if (DimmerLights->Status == 0) {
 17007  09C7  0A6B               	incf	_DimmerLights,w
 17008  09C8  0086               	movwf	6
 17009  09C9  3001               	movlw	1	; select bank2/3
 17010  09CA  0087               	movwf	7
 17011  09CB  1801               	btfsc	1,0
 17012  09CC  29DD               	goto	l8946
 17013                           
 17014                           ;Dimmer_B1.c: 715: DimmerLights->Status = 1;
 17015  09CD  0A6B               	incf	_DimmerLights,w
 17016  09CE  0086               	movwf	6
 17017  09CF  3001               	movlw	1	; select bank2/3
 17018  09D0  0087               	movwf	7
 17019  09D1  1401               	bsf	1,0
 17020                           
 17021                           ;Dimmer_B1.c: 716: DimmerLights->Trigger = 1;
 17022  09D2  086B               	movf	_DimmerLights,w
 17023  09D3  0086               	movwf	6
 17024  09D4  3001               	movlw	1	; select bank2/3
 17025  09D5  0087               	movwf	7
 17026  09D6  1481               	bsf	1,1
 17027                           
 17028                           ;Dimmer_B1.c: 717: DimmerLights->Switch = 1;
 17029  09D7  086B               	movf	_DimmerLights,w
 17030  09D8  0086               	movwf	6
 17031  09D9  3001               	movlw	1	; select bank2/3
 17032  09DA  0087               	movwf	7
 17033  09DB  1501               	bsf	1,2
 17034                           
 17035                           ;Dimmer_B1.c: 718: } else {
 17036  09DC  29E2               	goto	l8948
 17037  09DD                     l8946:	
 17038                           
 17039                           ;Dimmer_B1.c: 719: DimmerLights->Status = 0;
 17040  09DD  0A6B               	incf	_DimmerLights,w
 17041  09DE  0086               	movwf	6
 17042  09DF  3001               	movlw	1	; select bank2/3
 17043  09E0  0087               	movwf	7
 17044  09E1  1001               	bcf	1,0
 17045  09E2                     l8948:	
 17046                           
 17047                           ;Dimmer_B1.c: 720: }
 17048                           ;Dimmer_B1.c: 721: setBuz(1, 100);
 17049  09E2  3064               	movlw	100
 17050  09E3  00A4               	movwf	setBuz@time
 17051  09E4  3000               	movlw	0
 17052  09E5  00A5               	movwf	setBuz@time+1
 17053  09E6  3001               	movlw	1
 17054  09E7  3197  2759         	fcall	_setBuz
 17055  09E9  0008               	return
 17056  09EA                     __end_of_setDimmerLights_SwOn:	
 17057                           
 17058                           	psect	text119
 17059  1759                     __ptext119:	
 17060 ;; *************** function _setBuz *****************
 17061 ;; Defined at:
 17062 ;;		line 22 in file "../src/Buzzer_B1.c"
 17063 ;; Parameters:    Size  Location     Type
 17064 ;;  count           1    wreg     unsigned char 
 17065 ;;  time            2    4[BANK0 ] int 
 17066 ;; Auto vars:     Size  Location     Type
 17067 ;;  count           1    8[COMMON] unsigned char 
 17068 ;; Return value:  Size  Location     Type
 17069 ;;		None               void
 17070 ;; Registers used:
 17071 ;;		wreg, status,2, status,0, pclath, cstack
 17072 ;; Tracked objects:
 17073 ;;		On entry : 0/0
 17074 ;;		On exit  : 0/0
 17075 ;;		Unchanged: 0/0
 17076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17077 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17078 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;Total ram usage:        4 bytes
 17082 ;; Hardware stack levels used:    1
 17083 ;; Hardware stack levels required when called:    4
 17084 ;; This function calls:
 17085 ;;		___awdiv
 17086 ;; This function is called by:
 17087 ;;		_DlyOff_Main
 17088 ;;		_setDimmerLights_SwOn
 17089 ;;		_setDimmerLights_Dimming
 17090 ;;		_my_MainTimer
 17091 ;;		_Exception_Main
 17092 ;;		_setTemp_Main
 17093 ;;		_setLog_Code
 17094 ;;		_setControl_Lights_Table
 17095 ;;		_setRFSW_Control
 17096 ;;		_setSw_Main
 17097 ;; This function uses a non-reentrant model
 17098 ;;
 17099                           
 17100                           
 17101                           ;psect for function _setBuz
 17102  1759                     _setBuz:	
 17103                           
 17104                           ;incstack = 0
 17105                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 17106                           ;setBuz@count stored from wreg
 17107  1759  00F8               	movwf	setBuz@count
 17108                           
 17109                           ;Buzzer_B1.c: 23: time /= 20;
 17110  175A  3014               	movlw	20
 17111  175B  00F2               	movwf	___awdiv@divisor
 17112  175C  3000               	movlw	0
 17113  175D  00F3               	movwf	___awdiv@divisor+1
 17114  175E  0020               	movlb	0	; select bank0
 17115  175F  0825               	movf	setBuz@time+1,w
 17116  1760  01F5               	clrf	___awdiv@dividend+1
 17117  1761  07F5               	addwf	___awdiv@dividend+1,f
 17118  1762  0824               	movf	setBuz@time,w
 17119  1763  01F4               	clrf	___awdiv@dividend
 17120  1764  07F4               	addwf	___awdiv@dividend,f
 17121  1765  3188  208B  3197   	fcall	___awdiv
 17122  1768  0873               	movf	?___awdiv+1,w
 17123  1769  0020               	movlb	0	; select bank0
 17124  176A  01A5               	clrf	setBuz@time+1
 17125  176B  07A5               	addwf	setBuz@time+1,f
 17126  176C  0872               	movf	?___awdiv,w
 17127  176D  01A4               	clrf	setBuz@time
 17128  176E  07A4               	addwf	setBuz@time,f
 17129                           
 17130                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 17131  176F  0021               	movlb	1	; select bank1
 17132  1770  1C2E               	btfss	_Buz1^(0+128),0
 17133  1771  0008               	return
 17134                           
 17135                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 17136  1772  18AE               	btfsc	_Buz1^(0+128),1
 17137  1773  2F88               	goto	l94
 17138                           
 17139                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 17140  1774  14AE               	bsf	_Buz1^(0+128),1
 17141                           
 17142                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 17143  1775  01AF               	clrf	(_Buz1^(0+128)+1)
 17144  1776  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 17145                           
 17146                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 17147  1777  0878               	movf	setBuz@count,w
 17148  1778  00F7               	movwf	??_setBuz
 17149  1779  0877               	movf	??_setBuz,w
 17150  177A  00B1               	movwf	(_Buz1^(0+128)+3)
 17151                           
 17152                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 17153  177B  0020               	movlb	0	; select bank0
 17154  177C  0825               	movf	setBuz@time+1,w
 17155  177D  0021               	movlb	1	; select bank1
 17156  177E  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 17157  177F  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 17158  1780  0020               	movlb	0	; select bank0
 17159  1781  0824               	movf	setBuz@time,w
 17160  1782  0021               	movlb	1	; select bank1
 17161  1783  01B4               	clrf	(_Buz1^(0+128)+6)
 17162  1784  07B4               	addwf	(_Buz1^(0+128)+6),f
 17163                           
 17164                           ;Buzzer_B1.c: 30: RB3 = 1;
 17165  1785  0020               	movlb	0	; select bank0
 17166  1786  158D               	bsf	13,3	;volatile
 17167                           
 17168                           ;Buzzer_B1.c: 31: } else {
 17169  1787  0008               	return
 17170  1788                     l94:	
 17171                           
 17172                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 17173  1788  19AE               	btfsc	_Buz1^(0+128),3
 17174  1789  2F9A               	goto	l96
 17175                           
 17176                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 17177  178A  15AE               	bsf	_Buz1^(0+128),3
 17178                           
 17179                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 17180  178B  0878               	movf	setBuz@count,w
 17181  178C  00F7               	movwf	??_setBuz
 17182  178D  0877               	movf	??_setBuz,w
 17183  178E  00B2               	movwf	(_Buz1^(0+128)+4)
 17184                           
 17185                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 17186  178F  0020               	movlb	0	; select bank0
 17187  1790  0825               	movf	setBuz@time+1,w
 17188  1791  0021               	movlb	1	; select bank1
 17189  1792  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 17190  1793  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 17191  1794  0020               	movlb	0	; select bank0
 17192  1795  0824               	movf	setBuz@time,w
 17193  1796  0021               	movlb	1	; select bank1
 17194  1797  01B6               	clrf	(_Buz1^(0+128)+8)
 17195  1798  07B6               	addwf	(_Buz1^(0+128)+8),f
 17196                           
 17197                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 17198  1799  0008               	return
 17199  179A                     l96:	
 17200  179A  1A2E               	btfsc	_Buz1^(0+128),4
 17201  179B  0008               	return
 17202                           
 17203                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 17204  179C  162E               	bsf	_Buz1^(0+128),4
 17205                           
 17206                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 17207  179D  0878               	movf	setBuz@count,w
 17208  179E  00F7               	movwf	??_setBuz
 17209  179F  0877               	movf	??_setBuz,w
 17210  17A0  00B3               	movwf	(_Buz1^(0+128)+5)
 17211                           
 17212                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 17213  17A1  0020               	movlb	0	; select bank0
 17214  17A2  0825               	movf	setBuz@time+1,w
 17215  17A3  0021               	movlb	1	; select bank1
 17216  17A4  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 17217  17A5  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 17218  17A6  0020               	movlb	0	; select bank0
 17219  17A7  0824               	movf	setBuz@time,w
 17220  17A8  0021               	movlb	1	; select bank1
 17221  17A9  01B8               	clrf	(_Buz1^(0+128)+10)
 17222  17AA  07B8               	addwf	(_Buz1^(0+128)+10),f
 17223  17AB  0008               	return
 17224  17AC                     __end_of_setBuz:	
 17225                           
 17226                           	psect	text120
 17227  088B                     __ptext120:	
 17228 ;; *************** function ___awdiv *****************
 17229 ;; Defined at:
 17230 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 17231 ;; Parameters:    Size  Location     Type
 17232 ;;  divisor         2    2[COMMON] int 
 17233 ;;  dividend        2    4[COMMON] int 
 17234 ;; Auto vars:     Size  Location     Type
 17235 ;;  quotient        2    2[BANK0 ] int 
 17236 ;;  sign            1    1[BANK0 ] unsigned char 
 17237 ;;  counter         1    0[BANK0 ] unsigned char 
 17238 ;; Return value:  Size  Location     Type
 17239 ;;                  2    2[COMMON] int 
 17240 ;; Registers used:
 17241 ;;		wreg, status,2, status,0
 17242 ;; Tracked objects:
 17243 ;;		On entry : 0/0
 17244 ;;		On exit  : 0/0
 17245 ;;		Unchanged: 0/0
 17246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17247 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17248 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17249 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17250 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17251 ;;Total ram usage:        9 bytes
 17252 ;; Hardware stack levels used:    1
 17253 ;; Hardware stack levels required when called:    3
 17254 ;; This function calls:
 17255 ;;		Nothing
 17256 ;; This function is called by:
 17257 ;;		_setBuz
 17258 ;; This function uses a non-reentrant model
 17259 ;;
 17260                           
 17261                           
 17262                           ;psect for function ___awdiv
 17263  088B                     ___awdiv:	
 17264                           
 17265                           ;incstack = 0
 17266                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 17267  088B  0020               	movlb	0	; select bank0
 17268  088C  01A1               	clrf	___awdiv@sign
 17269  088D  1FF3               	btfss	___awdiv@divisor+1,7
 17270  088E  2896               	goto	l8800
 17271  088F  09F2               	comf	___awdiv@divisor,f
 17272  0890  09F3               	comf	___awdiv@divisor+1,f
 17273  0891  0AF2               	incf	___awdiv@divisor,f
 17274  0892  1903               	skipnz
 17275  0893  0AF3               	incf	___awdiv@divisor+1,f
 17276  0894  01A1               	clrf	___awdiv@sign
 17277  0895  0AA1               	incf	___awdiv@sign,f
 17278  0896                     l8800:	
 17279  0896  1FF5               	btfss	___awdiv@dividend+1,7
 17280  0897  28A1               	goto	l8806
 17281  0898  09F4               	comf	___awdiv@dividend,f
 17282  0899  09F5               	comf	___awdiv@dividend+1,f
 17283  089A  0AF4               	incf	___awdiv@dividend,f
 17284  089B  1903               	skipnz
 17285  089C  0AF5               	incf	___awdiv@dividend+1,f
 17286  089D  3001               	movlw	1
 17287  089E  00F6               	movwf	??___awdiv
 17288  089F  0876               	movf	??___awdiv,w
 17289  08A0  06A1               	xorwf	___awdiv@sign,f
 17290  08A1                     l8806:	
 17291  08A1  01A2               	clrf	___awdiv@quotient
 17292  08A2  01A3               	clrf	___awdiv@quotient+1
 17293  08A3  0873               	movf	___awdiv@divisor+1,w
 17294  08A4  0472               	iorwf	___awdiv@divisor,w
 17295  08A5  1903               	skipnz
 17296  08A6  28D0               	goto	l8828
 17297  08A7  01A0               	clrf	___awdiv@counter
 17298  08A8  0AA0               	incf	___awdiv@counter,f
 17299  08A9                     l8816:	
 17300  08A9  1BF3               	btfsc	___awdiv@divisor+1,7
 17301  08AA  28B5               	goto	l8818
 17302  08AB  3001               	movlw	1
 17303  08AC                     u9645:	
 17304  08AC  35F2               	lslf	___awdiv@divisor,f
 17305  08AD  0DF3               	rlf	___awdiv@divisor+1,f
 17306  08AE  0B89               	decfsz	9,f
 17307  08AF  28AC               	goto	u9645
 17308  08B0  3001               	movlw	1
 17309  08B1  00F6               	movwf	??___awdiv
 17310  08B2  0876               	movf	??___awdiv,w
 17311  08B3  07A0               	addwf	___awdiv@counter,f
 17312  08B4  28A9               	goto	l8816
 17313  08B5                     l8818:	
 17314  08B5  3001               	movlw	1
 17315  08B6                     u9665:	
 17316  08B6  35A2               	lslf	___awdiv@quotient,f
 17317  08B7  0DA3               	rlf	___awdiv@quotient+1,f
 17318  08B8  0B89               	decfsz	9,f
 17319  08B9  28B6               	goto	u9665
 17320  08BA  0873               	movf	___awdiv@divisor+1,w
 17321  08BB  0275               	subwf	___awdiv@dividend+1,w
 17322  08BC  1D03               	skipz
 17323  08BD  28C0               	goto	u9675
 17324  08BE  0872               	movf	___awdiv@divisor,w
 17325  08BF  0274               	subwf	___awdiv@dividend,w
 17326  08C0                     u9675:	
 17327  08C0  1C03               	skipc
 17328  08C1  28C7               	goto	l8824
 17329  08C2  0872               	movf	___awdiv@divisor,w
 17330  08C3  02F4               	subwf	___awdiv@dividend,f
 17331  08C4  0873               	movf	___awdiv@divisor+1,w
 17332  08C5  3BF5               	subwfb	___awdiv@dividend+1,f
 17333  08C6  1422               	bsf	___awdiv@quotient,0
 17334  08C7                     l8824:	
 17335  08C7  3001               	movlw	1
 17336  08C8                     u9685:	
 17337  08C8  36F3               	lsrf	___awdiv@divisor+1,f
 17338  08C9  0CF2               	rrf	___awdiv@divisor,f
 17339  08CA  0B89               	decfsz	9,f
 17340  08CB  28C8               	goto	u9685
 17341  08CC  3001               	movlw	1
 17342  08CD  02A0               	subwf	___awdiv@counter,f
 17343  08CE  1D03               	btfss	3,2
 17344  08CF  28B5               	goto	l8818
 17345  08D0                     l8828:	
 17346  08D0  0821               	movf	___awdiv@sign,w
 17347  08D1  1903               	btfsc	3,2
 17348  08D2  28D8               	goto	l8832
 17349  08D3  09A2               	comf	___awdiv@quotient,f
 17350  08D4  09A3               	comf	___awdiv@quotient+1,f
 17351  08D5  0AA2               	incf	___awdiv@quotient,f
 17352  08D6  1903               	skipnz
 17353  08D7  0AA3               	incf	___awdiv@quotient+1,f
 17354  08D8                     l8832:	
 17355  08D8  0823               	movf	___awdiv@quotient+1,w
 17356  08D9  01F3               	clrf	?___awdiv+1
 17357  08DA  07F3               	addwf	?___awdiv+1,f
 17358  08DB  0822               	movf	___awdiv@quotient,w
 17359  08DC  01F2               	clrf	?___awdiv
 17360  08DD  07F2               	addwf	?___awdiv,f
 17361  08DE  0008               	return
 17362  08DF                     __end_of___awdiv:	
 17363                           
 17364                           	psect	text121
 17365  1626                     __ptext121:	
 17366 ;; *************** function _setDimmerLights_SwOff *****************
 17367 ;; Defined at:
 17368 ;;		line 726 in file "../src/Dimmer_B1.c"
 17369 ;; Parameters:    Size  Location     Type
 17370 ;;  sw              1    wreg     unsigned char 
 17371 ;; Auto vars:     Size  Location     Type
 17372 ;;  sw              1   66[BANK0 ] unsigned char 
 17373 ;; Return value:  Size  Location     Type
 17374 ;;		None               void
 17375 ;; Registers used:
 17376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17377 ;; Tracked objects:
 17378 ;;		On entry : 0/0
 17379 ;;		On exit  : 0/0
 17380 ;;		Unchanged: 0/0
 17381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17386 ;;Total ram usage:        1 bytes
 17387 ;; Hardware stack levels used:    1
 17388 ;; Hardware stack levels required when called:    6
 17389 ;; This function calls:
 17390 ;;		_DimmerLights_SelectPointer
 17391 ;;		_getDelayOff_GO
 17392 ;;		_setDelayOff_GO
 17393 ;; This function is called by:
 17394 ;;		_DlyOff_Main
 17395 ;;		_Exception_Main
 17396 ;;		_setControl_Lights_Table
 17397 ;;		_setRFSW_Control
 17398 ;;		_setSw_Main
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           
 17403                           ;psect for function _setDimmerLights_SwOff
 17404  1626                     _setDimmerLights_SwOff:	
 17405                           
 17406                           ;incstack = 0
 17407                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17408                           ;setDimmerLights_SwOff@sw stored from wreg
 17409  1626  0020               	movlb	0	; select bank0
 17410  1627  00E2               	movwf	setDimmerLights_SwOff@sw
 17411                           
 17412                           ;Dimmer_B1.c: 727: DimmerLights_SelectPointer(sw);
 17413  1628  0862               	movf	setDimmerLights_SwOff@sw,w
 17414  1629  319F  27E7  3196   	fcall	_DimmerLights_SelectPointer
 17415                           
 17416                           ;Dimmer_B1.c: 729: if (DimmerLights->SwFlag == 1) {
 17417  162C  0020               	movlb	0	; select bank0
 17418  162D  086B               	movf	_DimmerLights,w
 17419  162E  0086               	movwf	6
 17420  162F  3001               	movlw	1	; select bank2/3
 17421  1630  0087               	movwf	7
 17422  1631  1C01               	btfss	1,0
 17423  1632  0008               	return
 17424                           
 17425                           ;Dimmer_B1.c: 730: DimmerLights->SwFlag = 0;
 17426  1633  086B               	movf	_DimmerLights,w
 17427  1634  0086               	movwf	6
 17428  1635  3001               	movlw	1	; select bank2/3
 17429  1636  0087               	movwf	7
 17430  1637  1001               	bcf	1,0
 17431                           
 17432                           ;Dimmer_B1.c: 731: if (DimmerLights->Status == 1) {
 17433  1638  0A6B               	incf	_DimmerLights,w
 17434  1639  0086               	movwf	6
 17435  163A  3001               	movlw	1	; select bank2/3
 17436  163B  0087               	movwf	7
 17437  163C  1C01               	btfss	1,0
 17438  163D  2E54               	goto	l8960
 17439                           
 17440                           ;Dimmer_B1.c: 732: if (DimmerLights->DimmingSwFlag == 1) {
 17441  163E  086B               	movf	_DimmerLights,w
 17442  163F  0086               	movwf	6
 17443  1640  3001               	movlw	1	; select bank2/3
 17444  1641  0087               	movwf	7
 17445  1642  1D81               	btfss	1,3
 17446  1643  0008               	return
 17447                           
 17448                           ;Dimmer_B1.c: 733: DimmerLights->DimmingSwFlag = 0;
 17449  1644  086B               	movf	_DimmerLights,w
 17450  1645  0086               	movwf	6
 17451  1646  3001               	movlw	1	; select bank2/3
 17452  1647  0087               	movwf	7
 17453  1648  1181               	bcf	1,3
 17454                           
 17455                           ;Dimmer_B1.c: 735: DimmerLights->DimmingTrigger = 1;
 17456  1649  086B               	movf	_DimmerLights,w
 17457  164A  0086               	movwf	6
 17458  164B  3001               	movlw	1	; select bank2/3
 17459  164C  0087               	movwf	7
 17460  164D  1601               	bsf	1,4
 17461                           
 17462                           ;Dimmer_B1.c: 736: DimmerLights->DimmingSwitch = 0;
 17463  164E  086B               	movf	_DimmerLights,w
 17464  164F  0086               	movwf	6
 17465  1650  3001               	movlw	1	; select bank2/3
 17466  1651  0087               	movwf	7
 17467  1652  1281               	bcf	1,5
 17468                           
 17469                           ;Dimmer_B1.c: 737: }
 17470                           ;Dimmer_B1.c: 738: } else {
 17471  1653  0008               	return
 17472  1654                     l8960:	
 17473                           
 17474                           ;Dimmer_B1.c: 739: DimmerLights->Trigger = 1;
 17475  1654  086B               	movf	_DimmerLights,w
 17476  1655  0086               	movwf	6
 17477  1656  3001               	movlw	1	; select bank2/3
 17478  1657  0087               	movwf	7
 17479  1658  1481               	bsf	1,1
 17480                           
 17481                           ;Dimmer_B1.c: 740: DimmerLights->Switch = 0;
 17482  1659  086B               	movf	_DimmerLights,w
 17483  165A  0086               	movwf	6
 17484  165B  3001               	movlw	1	; select bank2/3
 17485  165C  0087               	movwf	7
 17486  165D  1101               	bcf	1,2
 17487                           
 17488                           ;Dimmer_B1.c: 743: if (getDelayOff_GO(sw) == 1) {
 17489  165E  0862               	movf	setDimmerLights_SwOff@sw,w
 17490  165F  319D  25CC  3196   	fcall	_getDelayOff_GO
 17491  1662  3A01               	xorlw	1
 17492  1663  1D03               	skipz
 17493  1664  0008               	return
 17494                           
 17495                           ;Dimmer_B1.c: 744: setDelayOff_GO(sw, 0, 0);
 17496  1665  0020               	movlb	0	; select bank0
 17497  1666  01DE               	clrf	setDelayOff_GO@command
 17498  1667  01DF               	clrf	setDelayOff_GO@value
 17499  1668  0862               	movf	setDimmerLights_SwOff@sw,w
 17500  1669  3188  20DF         	fcall	_setDelayOff_GO
 17501  166B  0008               	return
 17502  166C                     __end_of_setDimmerLights_SwOff:	
 17503                           
 17504                           	psect	text122
 17505  08DF                     __ptext122:	
 17506 ;; *************** function _setDelayOff_GO *****************
 17507 ;; Defined at:
 17508 ;;		line 86 in file "../src/DelayOff_B1.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;  sw              1    wreg     unsigned char 
 17511 ;;  command         1   62[BANK0 ] unsigned char 
 17512 ;;  value           1   63[BANK0 ] unsigned char 
 17513 ;; Auto vars:     Size  Location     Type
 17514 ;;  sw              1   65[BANK0 ] unsigned char 
 17515 ;; Return value:  Size  Location     Type
 17516 ;;		None               void
 17517 ;; Registers used:
 17518 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17519 ;; Tracked objects:
 17520 ;;		On entry : 0/0
 17521 ;;		On exit  : 0/0
 17522 ;;		Unchanged: 0/0
 17523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17524 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;Total ram usage:        4 bytes
 17529 ;; Hardware stack levels used:    1
 17530 ;; Hardware stack levels required when called:    5
 17531 ;; This function calls:
 17532 ;;		_DelayOffPointSelect
 17533 ;;		_DelayTimejudge
 17534 ;;		_setProductData
 17535 ;; This function is called by:
 17536 ;;		_setDimmerLights_SwOff
 17537 ;;		_setRFSW_Control
 17538 ;; This function uses a non-reentrant model
 17539 ;;
 17540                           
 17541                           
 17542                           ;psect for function _setDelayOff_GO
 17543  08DF                     _setDelayOff_GO:	
 17544                           
 17545                           ;incstack = 0
 17546                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17547                           ;setDelayOff_GO@sw stored from wreg
 17548  08DF  0020               	movlb	0	; select bank0
 17549  08E0  00E1               	movwf	setDelayOff_GO@sw
 17550                           
 17551                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 17552  08E1  0861               	movf	setDelayOff_GO@sw,w
 17553  08E2  319F  2726  3188   	fcall	_DelayOffPointSelect
 17554                           
 17555                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 17556  08E5  0020               	movlb	0	; select bank0
 17557  08E6  085E               	movf	setDelayOff_GO@command,w
 17558  08E7  3A01               	xorlw	1
 17559  08E8  3000               	movlw	0
 17560  08E9  1903               	skipnz
 17561  08EA  3001               	movlw	1
 17562  08EB  00E0               	movwf	??_setDelayOff_GO
 17563  08EC  0021               	movlb	1	; select bank1
 17564  08ED  0845               	movf	_DelayOff^(0+128),w
 17565  08EE  0086               	movwf	6
 17566  08EF  3001               	movlw	1	; select bank2/3
 17567  08F0  0087               	movwf	7
 17568  08F1  0020               	movlb	0	; select bank0
 17569  08F2  0DE0               	rlf	??_setDelayOff_GO,f
 17570  08F3  0801               	movf	1,w
 17571  08F4  0660               	xorwf	??_setDelayOff_GO,w
 17572  08F5  39FD               	andlw	-3
 17573  08F6  0660               	xorwf	??_setDelayOff_GO,w
 17574  08F7  0081               	movwf	1
 17575                           
 17576                           ;DelayOff_B1.c: 92: if (command == 1) {
 17577  08F8  085E               	movf	setDelayOff_GO@command,w
 17578  08F9  3A01               	xorlw	1
 17579  08FA  1D03               	skipz
 17580  08FB  2921               	goto	l8882
 17581                           
 17582                           ;DelayOff_B1.c: 93: DelayOff->Value = DelayTimejudge(value);
 17583  08FC  085F               	movf	setDelayOff_GO@value,w
 17584  08FD  3193  2331  3188   	fcall	_DelayTimejudge
 17585  0900  0020               	movlb	0	; select bank0
 17586  0901  00E0               	movwf	??_setDelayOff_GO
 17587  0902  0021               	movlb	1	; select bank1
 17588  0903  0A45               	incf	_DelayOff^(0+128),w
 17589  0904  0086               	movwf	6
 17590  0905  3001               	movlw	1	; select bank2/3
 17591  0906  0087               	movwf	7
 17592  0907  0020               	movlb	0	; select bank0
 17593  0908  0860               	movf	??_setDelayOff_GO,w
 17594  0909  0081               	movwf	1
 17595                           
 17596                           ;DelayOff_B1.c: 94: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 17597  090A  300F               	movlw	15
 17598  090B  055F               	andwf	setDelayOff_GO@value,w
 17599  090C  00E0               	movwf	??_setDelayOff_GO
 17600  090D  0860               	movf	??_setDelayOff_GO,w
 17601  090E  3A05               	xorlw	5
 17602  090F  1903               	skipnz
 17603  0910  2915               	goto	l8876
 17604  0911  085F               	movf	setDelayOff_GO@value,w
 17605  0912  390F               	andlw	15
 17606  0913  1D03               	btfss	3,2
 17607  0914  291B               	goto	l8880
 17608  0915                     l8876:	
 17609  0915  3026               	movlw	38
 17610  0916  025F               	subwf	setDelayOff_GO@value,w
 17611  0917  1803               	skipnc
 17612  0918  291B               	goto	l8880
 17613                           
 17614                           ;DelayOff_B1.c: 95: setProductData(26 + sw, value);
 17615  0919  085F               	movf	setDelayOff_GO@value,w
 17616  091A  291D               	goto	L13
 17617  091B                     l8880:	
 17618                           ;DelayOff_B1.c: 96: } else {
 17619                           
 17620                           
 17621                           ;DelayOff_B1.c: 97: setProductData(26 + sw, 0x05);
 17622  091B  3005               	movlw	5
 17623  091C  0020               	movlb	0	; select bank0
 17624  091D                     L13:	
 17625  091D  00E0               	movwf	??_setDelayOff_GO
 17626  091E  0860               	movf	??_setDelayOff_GO,w
 17627  091F  00DA               	movwf	setProductData@value
 17628  0920  2923               	goto	L12
 17629  0921                     l8882:	
 17630                           ;DelayOff_B1.c: 98: }
 17631                           ;DelayOff_B1.c: 99: } else {
 17632                           
 17633                           
 17634                           ;DelayOff_B1.c: 100: setProductData(sw + 26, 0);
 17635  0921  0020               	movlb	0	; select bank0
 17636  0922  01DA               	clrf	setProductData@value
 17637  0923                     L12:	
 17638  0923  0861               	movf	setDelayOff_GO@sw,w
 17639  0924  3E1A               	addlw	26
 17640  0925  319D  25AF         	fcall	_setProductData
 17641                           
 17642                           ;DelayOff_B1.c: 101: }
 17643                           ;DelayOff_B1.c: 102: DelayOff->SecondTime = 0;
 17644  0927  0021               	movlb	1	; select bank1
 17645  0928  0845               	movf	_DelayOff^(0+128),w
 17646  0929  3E02               	addlw	2
 17647  092A  0086               	movwf	6
 17648  092B  3001               	movlw	1	; select bank2/3
 17649  092C  0087               	movwf	7
 17650  092D  3000               	movlw	0
 17651  092E  3FC0               	movwi [0]fsr1
 17652  092F  3FC1               	movwi [1]fsr1
 17653                           
 17654                           ;DelayOff_B1.c: 103: DelayOff->MinuteTime = 0;
 17655  0930  0845               	movf	_DelayOff^(0+128),w
 17656  0931  3E04               	addlw	4
 17657  0932  0086               	movwf	6
 17658  0933  3001               	movlw	1	; select bank2/3
 17659  0934  0087               	movwf	7
 17660  0935  0181               	clrf	1
 17661  0936  0008               	return
 17662  0937                     __end_of_setDelayOff_GO:	
 17663                           
 17664                           	psect	text123
 17665  1DAF                     __ptext123:	
 17666 ;; *************** function _setProductData *****************
 17667 ;; Defined at:
 17668 ;;		line 592 in file "../src/Main_B1.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;  address         1    wreg     unsigned char 
 17671 ;;  value           1   58[BANK0 ] unsigned char 
 17672 ;; Auto vars:     Size  Location     Type
 17673 ;;  address         1   61[BANK0 ] unsigned char 
 17674 ;; Return value:  Size  Location     Type
 17675 ;;		None               void
 17676 ;; Registers used:
 17677 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17678 ;; Tracked objects:
 17679 ;;		On entry : 0/0
 17680 ;;		On exit  : 0/0
 17681 ;;		Unchanged: 0/0
 17682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17683 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17687 ;;Total ram usage:        4 bytes
 17688 ;; Hardware stack levels used:    1
 17689 ;; Hardware stack levels required when called:    3
 17690 ;; This function calls:
 17691 ;;		Nothing
 17692 ;; This function is called by:
 17693 ;;		_setDelayOff_GO
 17694 ;;		_setDimmerLights_OnOff
 17695 ;;		_setDimmerLights_Dimming
 17696 ;;		_setTemp_Main
 17697 ;;		_setLog_Code
 17698 ;;		_setControl_Lights_Table
 17699 ;;		_setRFSW_AdjControl
 17700 ;;		_setRF_DimmerValue
 17701 ;;		_setRF_DimmerLights
 17702 ;; This function uses a non-reentrant model
 17703 ;;
 17704                           
 17705                           
 17706                           ;psect for function _setProductData
 17707  1DAF                     _setProductData:	
 17708                           
 17709                           ;incstack = 0
 17710                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 17711                           ;setProductData@address stored from wreg
 17712  1DAF  0020               	movlb	0	; select bank0
 17713  1DB0  00DD               	movwf	setProductData@address
 17714                           
 17715                           ;Main_B1.c: 593: product->Data[address] = value;
 17716  1DB1  085A               	movf	setProductData@value,w
 17717  1DB2  00DB               	movwf	??_setProductData
 17718  1DB3  085D               	movf	setProductData@address,w
 17719  1DB4  076D               	addwf	_product,w
 17720  1DB5  00DC               	movwf	??_setProductData+1
 17721  1DB6  085C               	movf	??_setProductData+1,w
 17722  1DB7  0086               	movwf	6
 17723  1DB8  3002               	movlw	2	; select bank4/5
 17724  1DB9  0087               	movwf	7
 17725  1DBA  085B               	movf	??_setProductData,w
 17726  1DBB  0081               	movwf	1
 17727  1DBC  0008               	return
 17728  1DBD                     __end_of_setProductData:	
 17729                           
 17730                           	psect	text124
 17731  1331                     __ptext124:	
 17732 ;; *************** function _DelayTimejudge *****************
 17733 ;; Defined at:
 17734 ;;		line 115 in file "../src/DelayOff_B1.c"
 17735 ;; Parameters:    Size  Location     Type
 17736 ;;  value           1    wreg     unsigned char 
 17737 ;; Auto vars:     Size  Location     Type
 17738 ;;  value           1    3[BANK0 ] unsigned char 
 17739 ;;  k               1    2[BANK0 ] unsigned char 
 17740 ;;  j               1    1[BANK0 ] unsigned char 
 17741 ;;  i               1    0[BANK0 ] unsigned char 
 17742 ;; Return value:  Size  Location     Type
 17743 ;;                  1    wreg      unsigned char 
 17744 ;; Registers used:
 17745 ;;		wreg, status,2, status,0, pclath, cstack
 17746 ;; Tracked objects:
 17747 ;;		On entry : 0/0
 17748 ;;		On exit  : 0/0
 17749 ;;		Unchanged: 0/0
 17750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17752 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17753 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17754 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;Total ram usage:        6 bytes
 17756 ;; Hardware stack levels used:    1
 17757 ;; Hardware stack levels required when called:    4
 17758 ;; This function calls:
 17759 ;;		___bmul
 17760 ;; This function is called by:
 17761 ;;		_setDelayOff_GO
 17762 ;; This function uses a non-reentrant model
 17763 ;;
 17764                           
 17765                           
 17766                           ;psect for function _DelayTimejudge
 17767  1331                     _DelayTimejudge:	
 17768                           
 17769                           ;incstack = 0
 17770                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 17771                           ;DelayTimejudge@value stored from wreg
 17772  1331  0020               	movlb	0	; select bank0
 17773  1332  00A3               	movwf	DelayTimejudge@value
 17774                           
 17775                           ;DelayOff_B1.c: 116: char i = 5, j = 0, k = 0;
 17776  1333  3005               	movlw	5
 17777  1334  00F6               	movwf	??_DelayTimejudge
 17778  1335  0876               	movf	??_DelayTimejudge,w
 17779  1336  00A0               	movwf	DelayTimejudge@i
 17780  1337  01A1               	clrf	DelayTimejudge@j
 17781  1338  01A2               	clrf	DelayTimejudge@k
 17782                           
 17783                           ;DelayOff_B1.c: 117: if (value <= 0x30) {
 17784  1339  3031               	movlw	49
 17785  133A  0223               	subwf	DelayTimejudge@value,w
 17786  133B  1803               	skipnc
 17787  133C  2B59               	goto	l8788
 17788                           
 17789                           ;DelayOff_B1.c: 118: j = value & 0x0f;
 17790  133D  0823               	movf	DelayTimejudge@value,w
 17791  133E  390F               	andlw	15
 17792  133F  00F6               	movwf	??_DelayTimejudge
 17793  1340  0876               	movf	??_DelayTimejudge,w
 17794  1341  00A1               	movwf	DelayTimejudge@j
 17795                           
 17796                           ;DelayOff_B1.c: 119: k = (value >> 4) & 0x0f;
 17797  1342  0823               	movf	DelayTimejudge@value,w
 17798  1343  00F6               	movwf	??_DelayTimejudge
 17799  1344  3004               	movlw	4
 17800  1345                     u9605:	
 17801  1345  36F6               	lsrf	??_DelayTimejudge,f
 17802  1346  0B89               	decfsz	9,f
 17803  1347  2B45               	goto	u9605
 17804  1348  0876               	movf	??_DelayTimejudge,w
 17805  1349  390F               	andlw	15
 17806  134A  00F7               	movwf	??_DelayTimejudge+1
 17807  134B  0877               	movf	??_DelayTimejudge+1,w
 17808  134C  00A2               	movwf	DelayTimejudge@k
 17809                           
 17810                           ;DelayOff_B1.c: 120: i = j + (k * 10);
 17811  134D  300A               	movlw	10
 17812  134E  00F6               	movwf	??_DelayTimejudge
 17813  134F  0876               	movf	??_DelayTimejudge,w
 17814  1350  00F2               	movwf	___bmul@multiplicand
 17815  1351  0822               	movf	DelayTimejudge@k,w
 17816  1352  319E  26A7         	fcall	___bmul
 17817  1354  0020               	movlb	0	; select bank0
 17818  1355  0721               	addwf	DelayTimejudge@j,w
 17819  1356  00F7               	movwf	??_DelayTimejudge+1
 17820  1357  0877               	movf	??_DelayTimejudge+1,w
 17821  1358  00A0               	movwf	DelayTimejudge@i
 17822  1359                     l8788:	
 17823                           
 17824                           ;DelayOff_B1.c: 121: }
 17825                           ;DelayOff_B1.c: 142: return i;
 17826  1359  0820               	movf	DelayTimejudge@i,w
 17827  135A  0008               	return
 17828  135B                     __end_of_DelayTimejudge:	
 17829                           
 17830                           	psect	text125
 17831  1EA7                     __ptext125:	
 17832 ;; *************** function ___bmul *****************
 17833 ;; Defined at:
 17834 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 17835 ;; Parameters:    Size  Location     Type
 17836 ;;  multiplier      1    wreg     unsigned char 
 17837 ;;  multiplicand    1    2[COMMON] unsigned char 
 17838 ;; Auto vars:     Size  Location     Type
 17839 ;;  multiplier      1    5[COMMON] unsigned char 
 17840 ;;  product         1    4[COMMON] unsigned char 
 17841 ;; Return value:  Size  Location     Type
 17842 ;;                  1    wreg      unsigned char 
 17843 ;; Registers used:
 17844 ;;		wreg, status,2, status,0
 17845 ;; Tracked objects:
 17846 ;;		On entry : 0/0
 17847 ;;		On exit  : 0/0
 17848 ;;		Unchanged: 0/0
 17849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17853 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17854 ;;Total ram usage:        4 bytes
 17855 ;; Hardware stack levels used:    1
 17856 ;; Hardware stack levels required when called:    3
 17857 ;; This function calls:
 17858 ;;		Nothing
 17859 ;; This function is called by:
 17860 ;;		_DelayTimejudge
 17861 ;; This function uses a non-reentrant model
 17862 ;;
 17863                           
 17864                           
 17865                           ;psect for function ___bmul
 17866  1EA7                     ___bmul:	
 17867                           
 17868                           ;incstack = 0
 17869                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 17870                           ;___bmul@multiplier stored from wreg
 17871  1EA7  00F5               	movwf	___bmul@multiplier
 17872  1EA8  01F4               	clrf	___bmul@product
 17873  1EA9                     l8762:	
 17874  1EA9  1C75               	btfss	___bmul@multiplier,0
 17875  1EAA  2EAF               	goto	l8766
 17876  1EAB  0872               	movf	___bmul@multiplicand,w
 17877  1EAC  00F3               	movwf	??___bmul
 17878  1EAD  0873               	movf	??___bmul,w
 17879  1EAE  07F4               	addwf	___bmul@product,f
 17880  1EAF                     l8766:	
 17881  1EAF  1003               	clrc
 17882  1EB0  0DF2               	rlf	___bmul@multiplicand,f
 17883  1EB1  1003               	clrc
 17884  1EB2  0CF5               	rrf	___bmul@multiplier,f
 17885  1EB3  08F5               	movf	___bmul@multiplier,f
 17886  1EB4  1D03               	skipz
 17887  1EB5  2EA9               	goto	l8762
 17888  1EB6  0874               	movf	___bmul@product,w
 17889  1EB7  0008               	return
 17890  1EB8                     __end_of___bmul:	
 17891                           
 17892                           	psect	text126
 17893  1DCC                     __ptext126:	
 17894 ;; *************** function _getDelayOff_GO *****************
 17895 ;; Defined at:
 17896 ;;		line 108 in file "../src/DelayOff_B1.c"
 17897 ;; Parameters:    Size  Location     Type
 17898 ;;  sw              1    wreg     unsigned char 
 17899 ;; Auto vars:     Size  Location     Type
 17900 ;;  sw              1    4[COMMON] unsigned char 
 17901 ;;  go              1    5[COMMON] unsigned char 
 17902 ;; Return value:  Size  Location     Type
 17903 ;;                  1    wreg      unsigned char 
 17904 ;; Registers used:
 17905 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17906 ;; Tracked objects:
 17907 ;;		On entry : 0/0
 17908 ;;		On exit  : 0/0
 17909 ;;		Unchanged: 0/0
 17910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17912 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17914 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17915 ;;Total ram usage:        2 bytes
 17916 ;; Hardware stack levels used:    1
 17917 ;; Hardware stack levels required when called:    4
 17918 ;; This function calls:
 17919 ;;		_DelayOffPointSelect
 17920 ;; This function is called by:
 17921 ;;		_setDimmerLights_SwOff
 17922 ;;		_setRFSW_Control
 17923 ;; This function uses a non-reentrant model
 17924 ;;
 17925                           
 17926                           
 17927                           ;psect for function _getDelayOff_GO
 17928  1DCC                     _getDelayOff_GO:	
 17929                           
 17930                           ;incstack = 0
 17931                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17932                           ;getDelayOff_GO@sw stored from wreg
 17933  1DCC  00F4               	movwf	getDelayOff_GO@sw
 17934                           
 17935                           ;DelayOff_B1.c: 109: DelayOffPointSelect(sw);
 17936  1DCD  0874               	movf	getDelayOff_GO@sw,w
 17937  1DCE  319F  2726         	fcall	_DelayOffPointSelect
 17938                           
 17939                           ;DelayOff_B1.c: 110: char go = DelayOff->GO == 1 ? 1 : 0;
 17940  1DD0  0021               	movlb	1	; select bank1
 17941  1DD1  0845               	movf	_DelayOff^(0+128),w
 17942  1DD2  0086               	movwf	6
 17943  1DD3  3001               	movlw	1	; select bank2/3
 17944  1DD4  0087               	movwf	7
 17945  1DD5  3000               	movlw	0
 17946  1DD6  1881               	btfsc	1,1
 17947  1DD7  3001               	movlw	1
 17948  1DD8  00F5               	movwf	getDelayOff_GO@go
 17949                           
 17950                           ;DelayOff_B1.c: 111: return go;
 17951  1DD9  0875               	movf	getDelayOff_GO@go,w
 17952  1DDA  0008               	return
 17953  1DDB                     __end_of_getDelayOff_GO:	
 17954                           
 17955                           	psect	text127
 17956  1DBD                     __ptext127:	
 17957 ;; *************** function _getDimmerLights_Status *****************
 17958 ;; Defined at:
 17959 ;;		line 1010 in file "../src/Dimmer_B1.c"
 17960 ;; Parameters:    Size  Location     Type
 17961 ;;  lights          1    wreg     unsigned char 
 17962 ;; Auto vars:     Size  Location     Type
 17963 ;;  lights          1    4[COMMON] unsigned char 
 17964 ;;  status          1    5[COMMON] unsigned char 
 17965 ;; Return value:  Size  Location     Type
 17966 ;;                  1    wreg      unsigned char 
 17967 ;; Registers used:
 17968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17969 ;; Tracked objects:
 17970 ;;		On entry : 0/0
 17971 ;;		On exit  : 0/0
 17972 ;;		Unchanged: 0/0
 17973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17975 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17978 ;;Total ram usage:        2 bytes
 17979 ;; Hardware stack levels used:    1
 17980 ;; Hardware stack levels required when called:    4
 17981 ;; This function calls:
 17982 ;;		_DimmerLights_SelectPointer
 17983 ;; This function is called by:
 17984 ;;		_DlyOff_Main
 17985 ;;		_Exception_Main
 17986 ;;		_setControl_Lights_Table
 17987 ;;		_setRFSW_Control
 17988 ;;		_setRFSW_AdjControl
 17989 ;; This function uses a non-reentrant model
 17990 ;;
 17991                           
 17992                           
 17993                           ;psect for function _getDimmerLights_Status
 17994  1DBD                     _getDimmerLights_Status:	
 17995                           
 17996                           ;incstack = 0
 17997                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 17998                           ;getDimmerLights_Status@lights stored from wreg
 17999  1DBD  00F4               	movwf	getDimmerLights_Status@lights
 18000                           
 18001                           ;Dimmer_B1.c: 1011: DimmerLights_SelectPointer(lights);
 18002  1DBE  0874               	movf	getDimmerLights_Status@lights,w
 18003  1DBF  319F  27E7         	fcall	_DimmerLights_SelectPointer
 18004                           
 18005                           ;Dimmer_B1.c: 1012: char status = DimmerLights->Status == 1 ? 1 : 0;
 18006  1DC1  0020               	movlb	0	; select bank0
 18007  1DC2  0A6B               	incf	_DimmerLights,w
 18008  1DC3  0086               	movwf	6
 18009  1DC4  3001               	movlw	1	; select bank2/3
 18010  1DC5  0087               	movwf	7
 18011  1DC6  3000               	movlw	0
 18012  1DC7  1801               	btfsc	1,0
 18013  1DC8  3001               	movlw	1
 18014  1DC9  00F5               	movwf	getDimmerLights_Status@status
 18015                           
 18016                           ;Dimmer_B1.c: 1013: return status;
 18017  1DCA  0875               	movf	getDimmerLights_Status@status,w
 18018  1DCB  0008               	return
 18019  1DCC                     __end_of_getDimmerLights_Status:	
 18020                           
 18021                           	psect	text128
 18022  1FE7                     __ptext128:	
 18023 ;; *************** function _DimmerLights_SelectPointer *****************
 18024 ;; Defined at:
 18025 ;;		line 604 in file "../src/Dimmer_B1.c"
 18026 ;; Parameters:    Size  Location     Type
 18027 ;;  lights          1    wreg     unsigned char 
 18028 ;; Auto vars:     Size  Location     Type
 18029 ;;  lights          1    3[COMMON] unsigned char 
 18030 ;; Return value:  Size  Location     Type
 18031 ;;		None               void
 18032 ;; Registers used:
 18033 ;;		wreg
 18034 ;; Tracked objects:
 18035 ;;		On entry : 0/0
 18036 ;;		On exit  : 0/0
 18037 ;;		Unchanged: 0/0
 18038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18041 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18042 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18043 ;;Total ram usage:        2 bytes
 18044 ;; Hardware stack levels used:    1
 18045 ;; Hardware stack levels required when called:    3
 18046 ;; This function calls:
 18047 ;;		Nothing
 18048 ;; This function is called by:
 18049 ;;		_setDimmerLights_SwOn
 18050 ;;		_setDimmerLights_SwOff
 18051 ;;		_setDimmerLights_DimmingOn
 18052 ;;		_setDimmerLights_Main
 18053 ;;		_getDimmerLights_Status
 18054 ;;		_setDimmerLights_Status
 18055 ;; This function uses a non-reentrant model
 18056 ;;
 18057                           
 18058                           
 18059                           ;psect for function _DimmerLights_SelectPointer
 18060  1FE7                     _DimmerLights_SelectPointer:	
 18061                           
 18062                           ;incstack = 0
 18063                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18064                           ;DimmerLights_SelectPointer@lights stored from wreg
 18065  1FE7  00F3               	movwf	DimmerLights_SelectPointer@lights
 18066                           
 18067                           ;Dimmer_B1.c: 606: if (lights == 1) {
 18068  1FE8  0873               	movf	DimmerLights_SelectPointer@lights,w
 18069  1FE9  3A01               	xorlw	1
 18070  1FEA  1D03               	skipz
 18071  1FEB  2FF4               	goto	l6192
 18072                           
 18073                           ;Dimmer_B1.c: 607: DimmerLights = &DimmerLights1;
 18074  1FEC  305C               	movlw	_DimmerLights1& (0+255)
 18075  1FED  00F2               	movwf	??_DimmerLights_SelectPointer
 18076  1FEE  0872               	movf	??_DimmerLights_SelectPointer,w
 18077  1FEF  0020               	movlb	0	; select bank0
 18078  1FF0  00EB               	movwf	_DimmerLights
 18079                           
 18080                           ;Dimmer_B1.c: 608: __nop();
 18081  1FF1  0000               	nop
 18082                           
 18083                           ;Dimmer_B1.c: 609: __nop();
 18084  1FF2  0000               	nop
 18085                           
 18086                           ;Dimmer_B1.c: 610: }
 18087  1FF3  0008               	return
 18088  1FF4                     l6192:	
 18089                           
 18090                           ;Dimmer_B1.c: 613: else if (lights == 2) {
 18091  1FF4  0873               	movf	DimmerLights_SelectPointer@lights,w
 18092  1FF5  3A02               	xorlw	2
 18093  1FF6  1D03               	skipz
 18094  1FF7  0008               	return
 18095                           
 18096                           ;Dimmer_B1.c: 614: DimmerLights = &DimmerLights2;
 18097  1FF8  3064               	movlw	_DimmerLights2& (0+255)
 18098  1FF9  00F2               	movwf	??_DimmerLights_SelectPointer
 18099  1FFA  0872               	movf	??_DimmerLights_SelectPointer,w
 18100  1FFB  0020               	movlb	0	; select bank0
 18101  1FFC  00EB               	movwf	_DimmerLights
 18102                           
 18103                           ;Dimmer_B1.c: 615: __nop();
 18104  1FFD  0000               	nop
 18105                           
 18106                           ;Dimmer_B1.c: 616: __nop();
 18107  1FFE  0000               	nop
 18108  1FFF  0008               	return
 18109  2000                     __end_of_DimmerLights_SelectPointer:	
 18110                           
 18111                           	psect	text129
 18112  1CF9                     __ptext129:	
 18113 ;; *************** function _DelayOff_Initialization *****************
 18114 ;; Defined at:
 18115 ;;		line 26 in file "../src/DelayOff_B1.c"
 18116 ;; Parameters:    Size  Location     Type
 18117 ;;		None
 18118 ;; Auto vars:     Size  Location     Type
 18119 ;;		None
 18120 ;; Return value:  Size  Location     Type
 18121 ;;		None               void
 18122 ;; Registers used:
 18123 ;;		wreg, status,2, status,0, pclath, cstack
 18124 ;; Tracked objects:
 18125 ;;		On entry : 0/0
 18126 ;;		On exit  : 0/0
 18127 ;;		Unchanged: 0/0
 18128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18133 ;;Total ram usage:        0 bytes
 18134 ;; Hardware stack levels used:    1
 18135 ;; Hardware stack levels required when called:    5
 18136 ;; This function calls:
 18137 ;;		_DlyOff_Initialization
 18138 ;; This function is called by:
 18139 ;;		_main
 18140 ;; This function uses a non-reentrant model
 18141 ;;
 18142                           
 18143                           
 18144                           ;psect for function _DelayOff_Initialization
 18145  1CF9                     _DelayOff_Initialization:	
 18146                           
 18147                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18148                           
 18149                           ;incstack = 0
 18150                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18151  1CF9  3001               	movlw	1
 18152  1CFA  319C  24CC  319C   	fcall	_DlyOff_Initialization
 18153                           
 18154                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18155  1CFD  3002               	movlw	2
 18156  1CFE  319C  24CC         	fcall	_DlyOff_Initialization
 18157  1D00  0008               	return
 18158  1D01                     __end_of_DelayOff_Initialization:	
 18159                           
 18160                           	psect	text130
 18161  1CCC                     __ptext130:	
 18162 ;; *************** function _DlyOff_Initialization *****************
 18163 ;; Defined at:
 18164 ;;		line 56 in file "../src/DelayOff_B1.c"
 18165 ;; Parameters:    Size  Location     Type
 18166 ;;  sw              1    wreg     unsigned char 
 18167 ;; Auto vars:     Size  Location     Type
 18168 ;;  sw              1    4[COMMON] unsigned char 
 18169 ;; Return value:  Size  Location     Type
 18170 ;;		None               void
 18171 ;; Registers used:
 18172 ;;		wreg, status,2, status,0, pclath, cstack
 18173 ;; Tracked objects:
 18174 ;;		On entry : 0/0
 18175 ;;		On exit  : 0/0
 18176 ;;		Unchanged: 0/0
 18177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18181 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18182 ;;Total ram usage:        1 bytes
 18183 ;; Hardware stack levels used:    1
 18184 ;; Hardware stack levels required when called:    4
 18185 ;; This function calls:
 18186 ;;		_DelayOffPointSelect
 18187 ;; This function is called by:
 18188 ;;		_DelayOff_Initialization
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192                           
 18193                           ;psect for function _DlyOff_Initialization
 18194  1CCC                     _DlyOff_Initialization:	
 18195                           
 18196                           ;incstack = 0
 18197                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18198                           ;DlyOff_Initialization@sw stored from wreg
 18199  1CCC  00F4               	movwf	DlyOff_Initialization@sw
 18200                           
 18201                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18202  1CCD  0874               	movf	DlyOff_Initialization@sw,w
 18203  1CCE  319F  2726         	fcall	_DelayOffPointSelect
 18204  1CD0  0008               	return
 18205  1CD1                     __end_of_DlyOff_Initialization:	
 18206                           
 18207                           	psect	text131
 18208  1F26                     __ptext131:	
 18209 ;; *************** function _DelayOffPointSelect *****************
 18210 ;; Defined at:
 18211 ;;		line 7 in file "../src/DelayOff_B1.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  sw              1    wreg     unsigned char 
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;  sw              1    3[COMMON] unsigned char 
 18216 ;; Return value:  Size  Location     Type
 18217 ;;		None               void
 18218 ;; Registers used:
 18219 ;;		wreg
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18226 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;Total ram usage:        2 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    3
 18232 ;; This function calls:
 18233 ;;		Nothing
 18234 ;; This function is called by:
 18235 ;;		_DlyOff_Initialization
 18236 ;;		_DlyOff_Main
 18237 ;;		_setDelayOff_GO
 18238 ;;		_getDelayOff_GO
 18239 ;; This function uses a non-reentrant model
 18240 ;;
 18241                           
 18242                           
 18243                           ;psect for function _DelayOffPointSelect
 18244  1F26                     _DelayOffPointSelect:	
 18245                           
 18246                           ;incstack = 0
 18247                           ; Regs used in _DelayOffPointSelect: [wreg]
 18248                           ;DelayOffPointSelect@sw stored from wreg
 18249  1F26  00F3               	movwf	DelayOffPointSelect@sw
 18250                           
 18251                           ;DelayOff_B1.c: 9: if (sw == 1) {
 18252  1F27  0873               	movf	DelayOffPointSelect@sw,w
 18253  1F28  3A01               	xorlw	1
 18254  1F29  1D03               	skipz
 18255  1F2A  2F31               	goto	l6050
 18256                           
 18257                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 18258  1F2B  30D0               	movlw	_DlySw1& (0+255)
 18259  1F2C  00F2               	movwf	??_DelayOffPointSelect
 18260  1F2D  0872               	movf	??_DelayOffPointSelect,w
 18261  1F2E  0021               	movlb	1	; select bank1
 18262  1F2F  00C5               	movwf	_DelayOff^(0+128)
 18263                           
 18264                           ;DelayOff_B1.c: 11: }
 18265  1F30  0008               	return
 18266  1F31                     l6050:	
 18267                           
 18268                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 18269  1F31  0873               	movf	DelayOffPointSelect@sw,w
 18270  1F32  3A02               	xorlw	2
 18271  1F33  1D03               	skipz
 18272  1F34  0008               	return
 18273                           
 18274                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 18275  1F35  30D5               	movlw	_DlySw2& (0+255)
 18276  1F36  00F2               	movwf	??_DelayOffPointSelect
 18277  1F37  0872               	movf	??_DelayOffPointSelect,w
 18278  1F38  0021               	movlb	1	; select bank1
 18279  1F39  00C5               	movwf	_DelayOff^(0+128)
 18280  1F3A  0008               	return
 18281  1F3B                     __end_of_DelayOffPointSelect:	
 18282                           
 18283                           	psect	text132
 18284  15E0                     __ptext132:	
 18285 ;; *************** function _Buzzer_Main *****************
 18286 ;; Defined at:
 18287 ;;		line 46 in file "../src/Buzzer_B1.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;		None
 18290 ;; Auto vars:     Size  Location     Type
 18291 ;;		None
 18292 ;; Return value:  Size  Location     Type
 18293 ;;		None               void
 18294 ;; Registers used:
 18295 ;;		wreg, status,2, status,0
 18296 ;; Tracked objects:
 18297 ;;		On entry : 0/0
 18298 ;;		On exit  : 0/0
 18299 ;;		Unchanged: 0/0
 18300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;Total ram usage:        1 bytes
 18306 ;; Hardware stack levels used:    1
 18307 ;; Hardware stack levels required when called:    3
 18308 ;; This function calls:
 18309 ;;		Nothing
 18310 ;; This function is called by:
 18311 ;;		_main
 18312 ;; This function uses a non-reentrant model
 18313 ;;
 18314                           
 18315                           
 18316                           ;psect for function _Buzzer_Main
 18317  15E0                     _Buzzer_Main:	
 18318                           
 18319                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18320                           
 18321                           ;incstack = 0
 18322                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18323  15E0  0021               	movlb	1	; select bank1
 18324  15E1  1CAE               	btfss	_Buz1^(0+128),1
 18325  15E2  0008               	return
 18326                           
 18327                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18328  15E3  3001               	movlw	1
 18329  15E4  07AF               	addwf	(_Buz1^(0+128)+1),f
 18330  15E5  3000               	movlw	0
 18331  15E6  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18332                           
 18333                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18334  15E7  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18335  15E8  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18336  15E9  1D03               	skipz
 18337  15EA  2DED               	goto	u8275
 18338  15EB  0834               	movf	(_Buz1^(0+128)+6),w
 18339  15EC  022F               	subwf	(_Buz1^(0+128)+1),w
 18340  15ED                     u8275:	
 18341  15ED  1C03               	skipc
 18342  15EE  0008               	return
 18343                           
 18344                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18345  15EF  01AF               	clrf	(_Buz1^(0+128)+1)
 18346  15F0  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18347                           
 18348                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18349  15F1  12AE               	bcf	_Buz1^(0+128),5
 18350  15F2  0020               	movlb	0	; select bank0
 18351  15F3  1D8D               	btfss	13,3	;volatile
 18352  15F4  2DF7               	goto	l7988
 18353  15F5  0021               	movlb	1	; select bank1
 18354  15F6  16AE               	bsf	_Buz1^(0+128),5
 18355  15F7                     l7988:	
 18356                           
 18357                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18358  15F7  0021               	movlb	1	; select bank1
 18359  15F8  1AAE               	btfsc	_Buz1^(0+128),5
 18360  15F9  2E1F               	goto	l104
 18361                           
 18362                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18363  15FA  08B1               	movf	(_Buz1^(0+128)+3),f
 18364  15FB  1D03               	skipz
 18365  15FC  2E1B               	goto	l105
 18366                           
 18367                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18368  15FD  1DAE               	btfss	_Buz1^(0+128),3
 18369  15FE  2E0B               	goto	l106
 18370                           
 18371                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18372  15FF  11AE               	bcf	_Buz1^(0+128),3
 18373                           
 18374                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18375  1600  0832               	movf	(_Buz1^(0+128)+4),w
 18376  1601  00F2               	movwf	??_Buzzer_Main
 18377  1602  0872               	movf	??_Buzzer_Main,w
 18378  1603  00B1               	movwf	(_Buz1^(0+128)+3)
 18379                           
 18380                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18381  1604  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18382  1605  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18383  1606  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18384  1607  0836               	movf	(_Buz1^(0+128)+8),w
 18385  1608  01B4               	clrf	(_Buz1^(0+128)+6)
 18386  1609  07B4               	addwf	(_Buz1^(0+128)+6),f
 18387                           
 18388                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18389  160A  0008               	return
 18390  160B                     l106:	
 18391  160B  1E2E               	btfss	_Buz1^(0+128),4
 18392  160C  2E19               	goto	l108
 18393                           
 18394                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18395  160D  122E               	bcf	_Buz1^(0+128),4
 18396                           
 18397                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18398  160E  0833               	movf	(_Buz1^(0+128)+5),w
 18399  160F  00F2               	movwf	??_Buzzer_Main
 18400  1610  0872               	movf	??_Buzzer_Main,w
 18401  1611  00B1               	movwf	(_Buz1^(0+128)+3)
 18402                           
 18403                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18404  1612  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18405  1613  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18406  1614  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18407  1615  0838               	movf	(_Buz1^(0+128)+10),w
 18408  1616  01B4               	clrf	(_Buz1^(0+128)+6)
 18409  1617  07B4               	addwf	(_Buz1^(0+128)+6),f
 18410                           
 18411                           ;Buzzer_B1.c: 62: } else {
 18412  1618  0008               	return
 18413  1619                     l108:	
 18414                           
 18415                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18416  1619  10AE               	bcf	_Buz1^(0+128),1
 18417                           
 18418                           ;Buzzer_B1.c: 64: }
 18419                           ;Buzzer_B1.c: 65: } else {
 18420  161A  0008               	return
 18421  161B                     l105:	
 18422                           
 18423                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18424  161B  16AE               	bsf	_Buz1^(0+128),5
 18425                           
 18426                           ;Buzzer_B1.c: 68: RB3 = 1;
 18427  161C  0020               	movlb	0	; select bank0
 18428  161D  158D               	bsf	13,3	;volatile
 18429                           
 18430                           ;Buzzer_B1.c: 69: }
 18431                           ;Buzzer_B1.c: 70: } else {
 18432  161E  0008               	return
 18433  161F                     l104:	
 18434                           
 18435                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18436  161F  12AE               	bcf	_Buz1^(0+128),5
 18437                           
 18438                           ;Buzzer_B1.c: 73: RB3 = 0;
 18439  1620  0020               	movlb	0	; select bank0
 18440  1621  118D               	bcf	13,3	;volatile
 18441                           
 18442                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18443  1622  3001               	movlw	1
 18444  1623  0021               	movlb	1	; select bank1
 18445  1624  02B1               	subwf	(_Buz1^(0+128)+3),f
 18446  1625  0008               	return
 18447  1626                     __end_of_Buzzer_Main:	
 18448                           
 18449                           	psect	text133
 18450  1CA6                     __ptext133:	
 18451 ;; *************** function _Buzzer_Initialization *****************
 18452 ;; Defined at:
 18453 ;;		line 11 in file "../src/Buzzer_B1.c"
 18454 ;; Parameters:    Size  Location     Type
 18455 ;;		None
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;		None
 18458 ;; Return value:  Size  Location     Type
 18459 ;;		None               void
 18460 ;; Registers used:
 18461 ;;		None
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18471 ;;Total ram usage:        0 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; Hardware stack levels required when called:    3
 18474 ;; This function calls:
 18475 ;;		Nothing
 18476 ;; This function is called by:
 18477 ;;		_main
 18478 ;; This function uses a non-reentrant model
 18479 ;;
 18480                           
 18481                           
 18482                           ;psect for function _Buzzer_Initialization
 18483  1CA6                     _Buzzer_Initialization:	
 18484                           
 18485                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18486                           
 18487                           ;incstack = 0
 18488                           ; Regs used in _Buzzer_Initialization: []
 18489  1CA6  0021               	movlb	1	; select bank1
 18490  1CA7  142E               	bsf	_Buz1^(0+128),0
 18491  1CA8  0008               	return
 18492  1CA9                     __end_of_Buzzer_Initialization:	
 18493                           
 18494                           	psect	intentry
 18495  0004                     __pintentry:	
 18496 ;; *************** function _ISR *****************
 18497 ;; Defined at:
 18498 ;;		line 112 in file "../src/MCU_B1.c"
 18499 ;; Parameters:    Size  Location     Type
 18500 ;;		None
 18501 ;; Auto vars:     Size  Location     Type
 18502 ;;		None
 18503 ;; Return value:  Size  Location     Type
 18504 ;;		None               void
 18505 ;; Registers used:
 18506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18507 ;; Tracked objects:
 18508 ;;		On entry : 0/0
 18509 ;;		On exit  : 0/0
 18510 ;;		Unchanged: 0/0
 18511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18516 ;;Total ram usage:        1 bytes
 18517 ;; Hardware stack levels used:    1
 18518 ;; Hardware stack levels required when called:    2
 18519 ;; This function calls:
 18520 ;;		_IOC_ISR
 18521 ;;		_TMR1_ISR
 18522 ;; This function is called by:
 18523 ;;		Interrupt level 1
 18524 ;; This function uses a non-reentrant model
 18525 ;;
 18526                           
 18527  0004                     _ISR:	
 18528                           
 18529                           ;incstack = 0
 18530                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18531  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18532  0005  3180               	pagesel	$
 18533  0006  0020               	movlb	0	; select bank0
 18534  0007  087F               	movf	127,w
 18535  0008  00F1               	movwf	??_ISR
 18536                           
 18537                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 18538  0009  198B               	btfsc	11,3	;volatile
 18539  000A  1C0B               	btfss	11,0	;volatile
 18540  000B  2813               	goto	i1l1380
 18541  000C  0027               	movlb	7	; select bank7
 18542  000D  1D16               	btfss	22,2	;volatile
 18543  000E  2813               	goto	i1l1380
 18544                           
 18545                           ;MCU_B1.c: 116: IOC_ISR();
 18546  000F  319D  255A  3180   	fcall	_IOC_ISR
 18547                           
 18548                           ;MCU_B1.c: 117: }
 18549  0012  281B               	goto	i1l1383
 18550  0013                     i1l1380:	
 18551                           
 18552                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 18553  0013  0021               	movlb	1	; select bank1
 18554  0014  1C11               	btfss	17,0	;volatile
 18555  0015  281B               	goto	i1l1383
 18556  0016  0020               	movlb	0	; select bank0
 18557  0017  1C11               	btfss	17,0	;volatile
 18558  0018  281B               	goto	i1l1383
 18559                           
 18560                           ;MCU_B1.c: 126: TMR1_ISR();
 18561  0019  3191  21C4         	fcall	_TMR1_ISR
 18562  001B                     i1l1383:	
 18563                           ;MCU_B1.c: 127: }
 18564                           ;MCU_B1.c: 143: return;
 18565                           
 18566  001B  0871               	movf	??_ISR,w
 18567  001C  0020               	movlb	0	; select bank0
 18568  001D  00FF               	movwf	127
 18569  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 18570  001F  0009               	retfie
 18571  0020                     __end_of_ISR:	
 18572                           
 18573                           	psect	text135
 18574  11C4                     __ptext135:	
 18575 ;; *************** function _TMR1_ISR *****************
 18576 ;; Defined at:
 18577 ;;		line 231 in file "../src/MCU_B1.c"
 18578 ;; Parameters:    Size  Location     Type
 18579 ;;		None
 18580 ;; Auto vars:     Size  Location     Type
 18581 ;;		None
 18582 ;; Return value:  Size  Location     Type
 18583 ;;		None               void
 18584 ;; Registers used:
 18585 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18586 ;; Tracked objects:
 18587 ;;		On entry : 0/0
 18588 ;;		On exit  : 0/0
 18589 ;;		Unchanged: 0/0
 18590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18595 ;;Total ram usage:        0 bytes
 18596 ;; Hardware stack levels used:    1
 18597 ;; Hardware stack levels required when called:    1
 18598 ;; This function calls:
 18599 ;;		_DimmerLights_MOSFET_TMR_1
 18600 ;;		_DimmerLights_MOSFET_TMR_2
 18601 ;; This function is called by:
 18602 ;;		_ISR
 18603 ;; This function uses a non-reentrant model
 18604 ;;
 18605                           
 18606                           
 18607                           ;psect for function _TMR1_ISR
 18608  11C4                     _TMR1_ISR:	
 18609                           
 18610                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 18611                           
 18612                           ;incstack = 0
 18613                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18614  11C4  30FA               	movlw	250
 18615  11C5  0020               	movlb	0	; select bank0
 18616  11C6  0097               	movwf	23	;volatile
 18617                           
 18618                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 18619  11C7  3038               	movlw	56
 18620  11C8  0096               	movwf	22	;volatile
 18621                           
 18622                           ;MCU_B1.c: 235: TMR1IF = 0;
 18623  11C9  1011               	bcf	17,0	;volatile
 18624                           
 18625                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 18626  11CA  3197  27AC  3191   	fcall	_DimmerLights_MOSFET_TMR_1
 18627                           
 18628                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 18629  11CD  3188  2037  3191   	fcall	_DimmerLights_MOSFET_TMR_2
 18630                           
 18631                           ;MCU_B1.c: 254: Timer1.Count++;
 18632  11D0  3001               	movlw	1
 18633  11D1  0021               	movlb	1	; select bank1
 18634  11D2  07BE               	addwf	(_Timer1^(0+128)+1),f
 18635  11D3  3000               	movlw	0
 18636  11D4  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 18637                           
 18638                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 18639  11D5  3001               	movlw	1
 18640  11D6  3EBD               	addlw	_Timer1& (0+255)
 18641  11D7  0086               	movwf	6
 18642  11D8  0187               	clrf	7
 18643  11D9  3F40               	moviw [0]fsr1
 18644  11DA  3AC8               	xorlw	200
 18645  11DB  1D03               	skipz
 18646  11DC  29DF               	goto	u838_25
 18647  11DD  3F41               	moviw [1]fsr1
 18648  11DE  3A00               	xorlw	0
 18649  11DF                     u838_25:	
 18650  11DF  1D03               	skipz
 18651  11E0  0008               	return
 18652                           
 18653                           ;MCU_B1.c: 256: Timer1.Count = 0;
 18654  11E1  01BE               	clrf	(_Timer1^(0+128)+1)
 18655  11E2  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 18656                           
 18657                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 18658  11E3  143D               	bsf	_Timer1^(0+128),0
 18659  11E4  0008               	return
 18660  11E5                     __end_of_TMR1_ISR:	
 18661                           
 18662                           	psect	text136
 18663  0837                     __ptext136:	
 18664 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 18665 ;; Defined at:
 18666 ;;		line 1275 in file "../src/Dimmer_B1.c"
 18667 ;; Parameters:    Size  Location     Type
 18668 ;;		None
 18669 ;; Auto vars:     Size  Location     Type
 18670 ;;		None
 18671 ;; Return value:  Size  Location     Type
 18672 ;;		None               void
 18673 ;; Registers used:
 18674 ;;		wreg, status,2, status,0
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;Total ram usage:        1 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; This function calls:
 18687 ;;		Nothing
 18688 ;; This function is called by:
 18689 ;;		_TMR1_ISR
 18690 ;; This function uses a non-reentrant model
 18691 ;;
 18692                           
 18693                           
 18694                           ;psect for function _DimmerLights_MOSFET_TMR_2
 18695  0837                     _DimmerLights_MOSFET_TMR_2:	
 18696                           
 18697                           ;Dimmer_B1.c: 1276: if (DimmerIntr2.Start == 1) {
 18698                           
 18699                           ;incstack = 0
 18700                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 18701  0837  0021               	movlb	1	; select bank1
 18702  0838  1D68               	btfss	_DimmerIntr2^(0+128),2
 18703  0839  2844               	goto	i1l7550
 18704                           
 18705                           ;Dimmer_B1.c: 1277: DimmerIntr2.Count++;
 18706  083A  3001               	movlw	1
 18707  083B  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 18708  083C  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 18709  083D  07E9               	addwf	(_DimmerIntr2^(0+128)+1),f
 18710                           
 18711                           ;Dimmer_B1.c: 1278: if (DimmerIntr2.Count >= ((char)(70*0.8)) + 1) {
 18712  083E  3039               	movlw	57
 18713  083F  0269               	subwf	(_DimmerIntr2^(0+128)+1),w
 18714  0840  1C03               	skipc
 18715  0841  2844               	goto	i1l7550
 18716                           
 18717                           ;Dimmer_B1.c: 1279: DimmerIntr2.Count = 0;
 18718  0842  01E9               	clrf	(_DimmerIntr2^(0+128)+1)
 18719                           
 18720                           ;Dimmer_B1.c: 1280: DimmerIntr2.Start = 0;
 18721  0843  1168               	bcf	_DimmerIntr2^(0+128),2
 18722  0844                     i1l7550:	
 18723                           
 18724                           ;Dimmer_B1.c: 1281: }
 18725                           ;Dimmer_B1.c: 1282: }
 18726                           ;Dimmer_B1.c: 1284: if (DimmerIntr2.GO == 1) {
 18727  0844  1C68               	btfss	_DimmerIntr2^(0+128),0
 18728  0845  2853               	goto	i1l992
 18729                           
 18730                           ;Dimmer_B1.c: 1285: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 18731  0846  086C               	movf	(_DimmerIntr2^(0+128)+4),w
 18732  0847  0269               	subwf	(_DimmerIntr2^(0+128)+1),w
 18733  0848  1C03               	skipc
 18734  0849  0008               	return
 18735                           
 18736                           ;Dimmer_B1.c: 1286: DimmerIntr2.GO = 0;
 18737  084A  1068               	bcf	_DimmerIntr2^(0+128),0
 18738                           
 18739                           ;Dimmer_B1.c: 1287: DimmerIntr2.Tune = 1;
 18740  084B  14E8               	bsf	_DimmerIntr2^(0+128),1
 18741                           
 18742                           ;Dimmer_B1.c: 1289: if (DimmerIntr2.ControlStatus == 1) {
 18743  084C  1DE8               	btfss	_DimmerIntr2^(0+128),3
 18744  084D  0008               	return
 18745                           
 18746                           ;Dimmer_B1.c: 1290: RB4 = 0;
 18747  084E  0020               	movlb	0	; select bank0
 18748  084F  120D               	bcf	13,4	;volatile
 18749                           
 18750                           ;Dimmer_B1.c: 1291: __nop();
 18751  0850  0000               	nop
 18752                           
 18753                           ;Dimmer_B1.c: 1292: __nop();
 18754  0851  0000               	nop
 18755                           
 18756                           ;Dimmer_B1.c: 1294: }
 18757                           ;Dimmer_B1.c: 1295: }
 18758                           ;Dimmer_B1.c: 1296: } else {
 18759  0852  0008               	return
 18760  0853                     i1l992:	
 18761                           
 18762                           ;Dimmer_B1.c: 1297: if (DimmerIntr2.Tune == 1) {
 18763  0853  1CE8               	btfss	_DimmerIntr2^(0+128),1
 18764  0854  0008               	return
 18765                           
 18766                           ;Dimmer_B1.c: 1298: DimmerIntr2.Tune = 0;
 18767  0855  10E8               	bcf	_DimmerIntr2^(0+128),1
 18768                           
 18769                           ;Dimmer_B1.c: 1299: DimmerIntr2.TuneTime++;
 18770  0856  3001               	movlw	1
 18771  0857  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 18772  0858  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 18773  0859  07EA               	addwf	(_DimmerIntr2^(0+128)+2),f
 18774                           
 18775                           ;Dimmer_B1.c: 1300: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 18776  085A  086B               	movf	(_DimmerIntr2^(0+128)+3),w
 18777  085B  026A               	subwf	(_DimmerIntr2^(0+128)+2),w
 18778  085C  1C03               	skipc
 18779  085D  0008               	return
 18780                           
 18781                           ;Dimmer_B1.c: 1301: DimmerIntr2.TuneTime = 0;
 18782  085E  01EA               	clrf	(_DimmerIntr2^(0+128)+2)
 18783                           
 18784                           ;Dimmer_B1.c: 1302: if (DimmerIntr2.Dimming_Sw == 1) {
 18785  085F  1E68               	btfss	_DimmerIntr2^(0+128),4
 18786  0860  2877               	goto	i1l998
 18787                           
 18788                           ;Dimmer_B1.c: 1303: if (DimmerIntr2.Dimming_Status == 0) {
 18789  0861  1AE8               	btfsc	_DimmerIntr2^(0+128),5
 18790  0862  286E               	goto	i1l7574
 18791                           
 18792                           ;Dimmer_B1.c: 1304: if (DimmerIntr2.DimmingValue < ((char)(70*0.8))) {
 18793  0863  3038               	movlw	56
 18794  0864  026C               	subwf	(_DimmerIntr2^(0+128)+4),w
 18795  0865  1803               	skipnc
 18796  0866  286C               	goto	i1l1000
 18797                           
 18798                           ;Dimmer_B1.c: 1305: DimmerIntr2.DimmingValue++;
 18799  0867  3001               	movlw	1
 18800  0868  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 18801  0869  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 18802  086A  07EC               	addwf	(_DimmerIntr2^(0+128)+4),f
 18803                           
 18804                           ;Dimmer_B1.c: 1306: } else {
 18805  086B  0008               	return
 18806  086C                     i1l1000:	
 18807                           
 18808                           ;Dimmer_B1.c: 1307: DimmerIntr2.Dimming_Status = 1;
 18809  086C  16E8               	bsf	_DimmerIntr2^(0+128),5
 18810                           
 18811                           ;Dimmer_B1.c: 1308: }
 18812                           ;Dimmer_B1.c: 1309: } else {
 18813  086D  0008               	return
 18814  086E                     i1l7574:	
 18815                           
 18816                           ;Dimmer_B1.c: 1310: if (DimmerIntr2.DimmingValue > ((char)(15*0.8))) {
 18817  086E  300D               	movlw	13
 18818  086F  026C               	subwf	(_DimmerIntr2^(0+128)+4),w
 18819  0870  1C03               	skipc
 18820  0871  2875               	goto	i1l1003
 18821                           
 18822                           ;Dimmer_B1.c: 1311: DimmerIntr2.DimmingValue--;
 18823  0872  3001               	movlw	1
 18824  0873  02EC               	subwf	(_DimmerIntr2^(0+128)+4),f
 18825                           
 18826                           ;Dimmer_B1.c: 1312: } else {
 18827  0874  0008               	return
 18828  0875                     i1l1003:	
 18829                           
 18830                           ;Dimmer_B1.c: 1313: DimmerIntr2.Dimming_Status = 0;
 18831  0875  12E8               	bcf	_DimmerIntr2^(0+128),5
 18832                           
 18833                           ;Dimmer_B1.c: 1314: }
 18834                           ;Dimmer_B1.c: 1315: }
 18835                           ;Dimmer_B1.c: 1316: } else if (DimmerIntr2.Dimming_RF == 1) {
 18836  0876  0008               	return
 18837  0877                     i1l998:	
 18838  0877  1F68               	btfss	_DimmerIntr2^(0+128),6
 18839  0878  0008               	return
 18840                           
 18841                           ;Dimmer_B1.c: 1317: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 18842  0879  086D               	movf	(_DimmerIntr2^(0+128)+5),w
 18843  087A  026C               	subwf	(_DimmerIntr2^(0+128)+4),w
 18844  087B  1803               	skipnc
 18845  087C  2882               	goto	i1l7582
 18846                           
 18847                           ;Dimmer_B1.c: 1318: DimmerIntr2.DimmingValue++;
 18848  087D  3001               	movlw	1
 18849  087E  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 18850  087F  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 18851  0880  07EC               	addwf	(_DimmerIntr2^(0+128)+4),f
 18852                           
 18853                           ;Dimmer_B1.c: 1319: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 18854  0881  0008               	return
 18855  0882                     i1l7582:	
 18856  0882  086C               	movf	(_DimmerIntr2^(0+128)+4),w
 18857  0883  026D               	subwf	(_DimmerIntr2^(0+128)+5),w
 18858  0884  1803               	skipnc
 18859  0885  2889               	goto	i1l1009
 18860                           
 18861                           ;Dimmer_B1.c: 1320: DimmerIntr2.DimmingValue--;
 18862  0886  3001               	movlw	1
 18863  0887  02EC               	subwf	(_DimmerIntr2^(0+128)+4),f
 18864                           
 18865                           ;Dimmer_B1.c: 1321: } else {
 18866  0888  0008               	return
 18867  0889                     i1l1009:	
 18868                           
 18869                           ;Dimmer_B1.c: 1322: DimmerIntr2.Dimming_RF = 0;
 18870  0889  1368               	bcf	_DimmerIntr2^(0+128),6
 18871  088A  0008               	return
 18872  088B                     __end_of_DimmerLights_MOSFET_TMR_2:	
 18873                           
 18874                           	psect	text137
 18875  17AC                     __ptext137:	
 18876 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 18877 ;; Defined at:
 18878 ;;		line 1203 in file "../src/Dimmer_B1.c"
 18879 ;; Parameters:    Size  Location     Type
 18880 ;;		None
 18881 ;; Auto vars:     Size  Location     Type
 18882 ;;		None
 18883 ;; Return value:  Size  Location     Type
 18884 ;;		None               void
 18885 ;; Registers used:
 18886 ;;		wreg, status,2, status,0
 18887 ;; Tracked objects:
 18888 ;;		On entry : 0/0
 18889 ;;		On exit  : 0/0
 18890 ;;		Unchanged: 0/0
 18891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18894 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18895 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18896 ;;Total ram usage:        1 bytes
 18897 ;; Hardware stack levels used:    1
 18898 ;; This function calls:
 18899 ;;		Nothing
 18900 ;; This function is called by:
 18901 ;;		_TMR1_ISR
 18902 ;; This function uses a non-reentrant model
 18903 ;;
 18904                           
 18905                           
 18906                           ;psect for function _DimmerLights_MOSFET_TMR_1
 18907  17AC                     _DimmerLights_MOSFET_TMR_1:	
 18908                           
 18909                           ;Dimmer_B1.c: 1204: if (DimmerIntr1.Start == 1) {
 18910                           
 18911                           ;incstack = 0
 18912                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 18913  17AC  0021               	movlb	1	; select bank1
 18914  17AD  1D61               	btfss	_DimmerIntr1^(0+128),2
 18915  17AE  2FB9               	goto	i1l7496
 18916                           
 18917                           ;Dimmer_B1.c: 1205: DimmerIntr1.Count++;
 18918  17AF  3001               	movlw	1
 18919  17B0  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18920  17B1  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18921  17B2  07E2               	addwf	(_DimmerIntr1^(0+128)+1),f
 18922                           
 18923                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.Count >= ((char)(70*0.8)) + 1) {
 18924  17B3  3039               	movlw	57
 18925  17B4  0262               	subwf	(_DimmerIntr1^(0+128)+1),w
 18926  17B5  1C03               	skipc
 18927  17B6  2FB9               	goto	i1l7496
 18928                           
 18929                           ;Dimmer_B1.c: 1207: DimmerIntr1.Count = 0;
 18930  17B7  01E2               	clrf	(_DimmerIntr1^(0+128)+1)
 18931                           
 18932                           ;Dimmer_B1.c: 1208: DimmerIntr1.Start = 0;
 18933  17B8  1161               	bcf	_DimmerIntr1^(0+128),2
 18934  17B9                     i1l7496:	
 18935                           
 18936                           ;Dimmer_B1.c: 1209: }
 18937                           ;Dimmer_B1.c: 1210: }
 18938                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.GO == 1) {
 18939  17B9  1C61               	btfss	_DimmerIntr1^(0+128),0
 18940  17BA  2FC8               	goto	i1l963
 18941                           
 18942                           ;Dimmer_B1.c: 1213: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 18943  17BB  0865               	movf	(_DimmerIntr1^(0+128)+4),w
 18944  17BC  0262               	subwf	(_DimmerIntr1^(0+128)+1),w
 18945  17BD  1C03               	skipc
 18946  17BE  0008               	return
 18947                           
 18948                           ;Dimmer_B1.c: 1214: DimmerIntr1.GO = 0;
 18949  17BF  1061               	bcf	_DimmerIntr1^(0+128),0
 18950                           
 18951                           ;Dimmer_B1.c: 1215: DimmerIntr1.Tune = 1;
 18952  17C0  14E1               	bsf	_DimmerIntr1^(0+128),1
 18953                           
 18954                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.ControlStatus == 1) {
 18955  17C1  1DE1               	btfss	_DimmerIntr1^(0+128),3
 18956  17C2  0008               	return
 18957                           
 18958                           ;Dimmer_B1.c: 1218: RA7 = 0;
 18959  17C3  0020               	movlb	0	; select bank0
 18960  17C4  138C               	bcf	12,7	;volatile
 18961                           
 18962                           ;Dimmer_B1.c: 1219: __nop();
 18963  17C5  0000               	nop
 18964                           
 18965                           ;Dimmer_B1.c: 1220: __nop();
 18966  17C6  0000               	nop
 18967                           
 18968                           ;Dimmer_B1.c: 1222: }
 18969                           ;Dimmer_B1.c: 1223: }
 18970                           ;Dimmer_B1.c: 1224: } else {
 18971  17C7  0008               	return
 18972  17C8                     i1l963:	
 18973                           
 18974                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.Tune == 1) {
 18975  17C8  1CE1               	btfss	_DimmerIntr1^(0+128),1
 18976  17C9  0008               	return
 18977                           
 18978                           ;Dimmer_B1.c: 1226: DimmerIntr1.Tune = 0;
 18979  17CA  10E1               	bcf	_DimmerIntr1^(0+128),1
 18980                           
 18981                           ;Dimmer_B1.c: 1227: DimmerIntr1.TuneTime++;
 18982  17CB  3001               	movlw	1
 18983  17CC  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 18984  17CD  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 18985  17CE  07E3               	addwf	(_DimmerIntr1^(0+128)+2),f
 18986                           
 18987                           ;Dimmer_B1.c: 1228: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 18988  17CF  0864               	movf	(_DimmerIntr1^(0+128)+3),w
 18989  17D0  0263               	subwf	(_DimmerIntr1^(0+128)+2),w
 18990  17D1  1C03               	skipc
 18991  17D2  0008               	return
 18992                           
 18993                           ;Dimmer_B1.c: 1229: DimmerIntr1.TuneTime = 0;
 18994  17D3  01E3               	clrf	(_DimmerIntr1^(0+128)+2)
 18995                           
 18996                           ;Dimmer_B1.c: 1230: if (DimmerIntr1.Dimming_Sw == 1) {
 18997  17D4  1E61               	btfss	_DimmerIntr1^(0+128),4
 18998  17D5  2FEC               	goto	i1l969
 18999                           
 19000                           ;Dimmer_B1.c: 1231: if (DimmerIntr1.Dimming_Status == 0) {
 19001  17D6  1AE1               	btfsc	_DimmerIntr1^(0+128),5
 19002  17D7  2FE3               	goto	i1l7520
 19003                           
 19004                           ;Dimmer_B1.c: 1232: if (DimmerIntr1.DimmingValue < ((char)(70*0.8))) {
 19005  17D8  3038               	movlw	56
 19006  17D9  0265               	subwf	(_DimmerIntr1^(0+128)+4),w
 19007  17DA  1803               	skipnc
 19008  17DB  2FE1               	goto	i1l971
 19009                           
 19010                           ;Dimmer_B1.c: 1233: DimmerIntr1.DimmingValue++;
 19011  17DC  3001               	movlw	1
 19012  17DD  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19013  17DE  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19014  17DF  07E5               	addwf	(_DimmerIntr1^(0+128)+4),f
 19015                           
 19016                           ;Dimmer_B1.c: 1234: } else {
 19017  17E0  0008               	return
 19018  17E1                     i1l971:	
 19019                           
 19020                           ;Dimmer_B1.c: 1235: DimmerIntr1.Dimming_Status = 1;
 19021  17E1  16E1               	bsf	_DimmerIntr1^(0+128),5
 19022                           
 19023                           ;Dimmer_B1.c: 1236: }
 19024                           ;Dimmer_B1.c: 1237: } else {
 19025  17E2  0008               	return
 19026  17E3                     i1l7520:	
 19027                           
 19028                           ;Dimmer_B1.c: 1238: if (DimmerIntr1.DimmingValue > ((char)(15*0.8))) {
 19029  17E3  300D               	movlw	13
 19030  17E4  0265               	subwf	(_DimmerIntr1^(0+128)+4),w
 19031  17E5  1C03               	skipc
 19032  17E6  2FEA               	goto	i1l974
 19033                           
 19034                           ;Dimmer_B1.c: 1239: DimmerIntr1.DimmingValue--;
 19035  17E7  3001               	movlw	1
 19036  17E8  02E5               	subwf	(_DimmerIntr1^(0+128)+4),f
 19037                           
 19038                           ;Dimmer_B1.c: 1240: } else {
 19039  17E9  0008               	return
 19040  17EA                     i1l974:	
 19041                           
 19042                           ;Dimmer_B1.c: 1241: DimmerIntr1.Dimming_Status = 0;
 19043  17EA  12E1               	bcf	_DimmerIntr1^(0+128),5
 19044                           
 19045                           ;Dimmer_B1.c: 1242: }
 19046                           ;Dimmer_B1.c: 1243: }
 19047                           ;Dimmer_B1.c: 1244: } else if (DimmerIntr1.Dimming_RF == 1) {
 19048  17EB  0008               	return
 19049  17EC                     i1l969:	
 19050  17EC  1F61               	btfss	_DimmerIntr1^(0+128),6
 19051  17ED  0008               	return
 19052                           
 19053                           ;Dimmer_B1.c: 1245: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19054  17EE  0866               	movf	(_DimmerIntr1^(0+128)+5),w
 19055  17EF  0265               	subwf	(_DimmerIntr1^(0+128)+4),w
 19056  17F0  1803               	skipnc
 19057  17F1  2FF7               	goto	i1l7528
 19058                           
 19059                           ;Dimmer_B1.c: 1246: DimmerIntr1.DimmingValue++;
 19060  17F2  3001               	movlw	1
 19061  17F3  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19062  17F4  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19063  17F5  07E5               	addwf	(_DimmerIntr1^(0+128)+4),f
 19064                           
 19065                           ;Dimmer_B1.c: 1247: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19066  17F6  0008               	return
 19067  17F7                     i1l7528:	
 19068  17F7  0865               	movf	(_DimmerIntr1^(0+128)+4),w
 19069  17F8  0266               	subwf	(_DimmerIntr1^(0+128)+5),w
 19070  17F9  1803               	skipnc
 19071  17FA  2FFE               	goto	i1l980
 19072                           
 19073                           ;Dimmer_B1.c: 1248: DimmerIntr1.DimmingValue--;
 19074  17FB  3001               	movlw	1
 19075  17FC  02E5               	subwf	(_DimmerIntr1^(0+128)+4),f
 19076                           
 19077                           ;Dimmer_B1.c: 1249: } else {
 19078  17FD  0008               	return
 19079  17FE                     i1l980:	
 19080                           
 19081                           ;Dimmer_B1.c: 1250: DimmerIntr1.Dimming_RF = 0;
 19082  17FE  1361               	bcf	_DimmerIntr1^(0+128),6
 19083  17FF  0008               	return
 19084  1800                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19085                           
 19086                           	psect	text138
 19087  1D5A                     __ptext138:	
 19088 ;; *************** function _IOC_ISR *****************
 19089 ;; Defined at:
 19090 ;;		line 397 in file "../src/MCU_B1.c"
 19091 ;; Parameters:    Size  Location     Type
 19092 ;;		None
 19093 ;; Auto vars:     Size  Location     Type
 19094 ;;		None
 19095 ;; Return value:  Size  Location     Type
 19096 ;;		None               void
 19097 ;; Registers used:
 19098 ;;		status,2, status,0, pclath, cstack
 19099 ;; Tracked objects:
 19100 ;;		On entry : 0/0
 19101 ;;		On exit  : 0/0
 19102 ;;		Unchanged: 0/0
 19103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19108 ;;Total ram usage:        0 bytes
 19109 ;; Hardware stack levels used:    1
 19110 ;; Hardware stack levels required when called:    1
 19111 ;; This function calls:
 19112 ;;		_DimmerLights_MOSFET_IOC_1
 19113 ;;		_DimmerLights_MOSFET_IOC_2
 19114 ;; This function is called by:
 19115 ;;		_ISR
 19116 ;; This function uses a non-reentrant model
 19117 ;;
 19118                           
 19119                           
 19120                           ;psect for function _IOC_ISR
 19121  1D5A                     _IOC_ISR:	
 19122                           
 19123                           ;MCU_B1.c: 398: IOCBF2 = 0;
 19124                           
 19125                           ;incstack = 0
 19126                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19127  1D5A  0027               	movlb	7	; select bank7
 19128  1D5B  1116               	bcf	22,2	;volatile
 19129                           
 19130                           ;MCU_B1.c: 399: IOCIF = 0;
 19131  1D5C  100B               	bcf	11,0	;volatile
 19132                           
 19133                           ;MCU_B1.c: 401: if (myMain.PowerON == 1) {
 19134  1D5D  0022               	movlb	2	; select bank2
 19135  1D5E  1C20               	btfss	_myMain^(0+256),0
 19136  1D5F  0008               	return
 19137                           
 19138                           ;MCU_B1.c: 407: DimmerLights_MOSFET_IOC_1();
 19139  1D60  319E  2617  319D   	fcall	_DimmerLights_MOSFET_IOC_1
 19140                           
 19141                           ;MCU_B1.c: 412: DimmerLights_MOSFET_IOC_2();
 19142  1D63  319E  2627         	fcall	_DimmerLights_MOSFET_IOC_2
 19143  1D65  0008               	return
 19144  1D66                     __end_of_IOC_ISR:	
 19145                           
 19146                           	psect	text139
 19147  1E27                     __ptext139:	
 19148 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19149 ;; Defined at:
 19150 ;;		line 1331 in file "../src/Dimmer_B1.c"
 19151 ;; Parameters:    Size  Location     Type
 19152 ;;		None
 19153 ;; Auto vars:     Size  Location     Type
 19154 ;;		None
 19155 ;; Return value:  Size  Location     Type
 19156 ;;		None               void
 19157 ;; Registers used:
 19158 ;;		None
 19159 ;; Tracked objects:
 19160 ;;		On entry : 0/0
 19161 ;;		On exit  : 0/0
 19162 ;;		Unchanged: 0/0
 19163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19167 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19168 ;;Total ram usage:        0 bytes
 19169 ;; Hardware stack levels used:    1
 19170 ;; This function calls:
 19171 ;;		Nothing
 19172 ;; This function is called by:
 19173 ;;		_IOC_ISR
 19174 ;; This function uses a non-reentrant model
 19175 ;;
 19176                           
 19177                           
 19178                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19179  1E27                     _DimmerLights_MOSFET_IOC_2:	
 19180                           
 19181                           ;Dimmer_B1.c: 1332: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19182                           
 19183                           ;incstack = 0
 19184                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19185  1E27  0021               	movlb	1	; select bank1
 19186  1E28  1968               	btfsc	_DimmerIntr2^(0+128),2
 19187  1E29  0008               	return
 19188  1E2A  0020               	movlb	0	; select bank0
 19189  1E2B  1D0D               	btfss	13,2	;volatile
 19190  1E2C  0008               	return
 19191                           
 19192                           ;Dimmer_B1.c: 1333: DimmerIntr2.Start = 1;
 19193  1E2D  0021               	movlb	1	; select bank1
 19194  1E2E  1568               	bsf	_DimmerIntr2^(0+128),2
 19195                           
 19196                           ;Dimmer_B1.c: 1334: DimmerIntr2.GO = 1;
 19197  1E2F  1468               	bsf	_DimmerIntr2^(0+128),0
 19198                           
 19199                           ;Dimmer_B1.c: 1336: if (DimmerIntr2.ControlStatus == 1) {
 19200  1E30  1DE8               	btfss	_DimmerIntr2^(0+128),3
 19201  1E31  0008               	return
 19202                           
 19203                           ;Dimmer_B1.c: 1337: RB4 = 1;
 19204  1E32  0020               	movlb	0	; select bank0
 19205  1E33  160D               	bsf	13,4	;volatile
 19206                           
 19207                           ;Dimmer_B1.c: 1338: __nop();
 19208  1E34  0000               	nop
 19209                           
 19210                           ;Dimmer_B1.c: 1339: __nop();
 19211  1E35  0000               	nop
 19212  1E36  0008               	return
 19213  1E37                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19214                           
 19215                           	psect	text140
 19216  1E17                     __ptext140:	
 19217 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19218 ;; Defined at:
 19219 ;;		line 1258 in file "../src/Dimmer_B1.c"
 19220 ;; Parameters:    Size  Location     Type
 19221 ;;		None
 19222 ;; Auto vars:     Size  Location     Type
 19223 ;;		None
 19224 ;; Return value:  Size  Location     Type
 19225 ;;		None               void
 19226 ;; Registers used:
 19227 ;;		None
 19228 ;; Tracked objects:
 19229 ;;		On entry : 0/0
 19230 ;;		On exit  : 0/0
 19231 ;;		Unchanged: 0/0
 19232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19237 ;;Total ram usage:        0 bytes
 19238 ;; Hardware stack levels used:    1
 19239 ;; This function calls:
 19240 ;;		Nothing
 19241 ;; This function is called by:
 19242 ;;		_IOC_ISR
 19243 ;; This function uses a non-reentrant model
 19244 ;;
 19245                           
 19246                           
 19247                           ;psect for function _DimmerLights_MOSFET_IOC_1
 19248  1E17                     _DimmerLights_MOSFET_IOC_1:	
 19249                           
 19250                           ;Dimmer_B1.c: 1259: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 19251                           
 19252                           ;incstack = 0
 19253                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 19254  1E17  0021               	movlb	1	; select bank1
 19255  1E18  1961               	btfsc	_DimmerIntr1^(0+128),2
 19256  1E19  0008               	return
 19257  1E1A  0020               	movlb	0	; select bank0
 19258  1E1B  1D0D               	btfss	13,2	;volatile
 19259  1E1C  0008               	return
 19260                           
 19261                           ;Dimmer_B1.c: 1260: DimmerIntr1.Start = 1;
 19262  1E1D  0021               	movlb	1	; select bank1
 19263  1E1E  1561               	bsf	_DimmerIntr1^(0+128),2
 19264                           
 19265                           ;Dimmer_B1.c: 1261: DimmerIntr1.GO = 1;
 19266  1E1F  1461               	bsf	_DimmerIntr1^(0+128),0
 19267                           
 19268                           ;Dimmer_B1.c: 1263: if (DimmerIntr1.ControlStatus == 1) {
 19269  1E20  1DE1               	btfss	_DimmerIntr1^(0+128),3
 19270  1E21  0008               	return
 19271                           
 19272                           ;Dimmer_B1.c: 1264: RA7 = 1;
 19273  1E22  0020               	movlb	0	; select bank0
 19274  1E23  178C               	bsf	12,7	;volatile
 19275                           
 19276                           ;Dimmer_B1.c: 1265: __nop();
 19277  1E24  0000               	nop
 19278                           
 19279                           ;Dimmer_B1.c: 1266: __nop();
 19280  1E25  0000               	nop
 19281  1E26  0008               	return
 19282  1E27                     __end_of_DimmerLights_MOSFET_IOC_1:	
 19283  007E                     btemp	set	126	;btemp
 19284  007E                     pic14e$flags	set	126
 19285  007E                     wtemp	set	126
 19286  007E                     wtemp0	set	126
 19287  0080                     wtemp1	set	128
 19288  0082                     wtemp2	set	130
 19289  0084                     wtemp3	set	132
 19290  0086                     wtemp4	set	134
 19291  0088                     wtemp5	set	136
 19292  007F                     wtemp6	set	127
 19293  007E                     ttemp	set	126
 19294  007E                     ttemp0	set	126
 19295  0081                     ttemp1	set	129
 19296  0084                     ttemp2	set	132
 19297  0087                     ttemp3	set	135
 19298  007F                     ttemp4	set	127
 19299  007E                     ltemp	set	126
 19300  007E                     ltemp0	set	126
 19301  0082                     ltemp1	set	130
 19302  0086                     ltemp2	set	134
 19303  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         265
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     75      78
    BANK1            80      0      79
    BANK2            80      0      80
    BANK3            80      4      70
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK2[8]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrut size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _setLED->_LedPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _setDimmerIntr_MaxmumValue->_getDimmerIntr_DimmingValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOff
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDimmerLights_SwOff
    _setRFSW_Control->_setRF_DimmerLights
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_setDimmerLights_PercentValue
    _Exception_Main->_setDimmerLights_SwOff
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setRF_DimmerLights
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerLights_PercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _setProductData->_setDimmerLights_PercentValue

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  106252
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1666
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     615
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    3602
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    3602
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    7441
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    7441
                                             67 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   32401
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   32401
                                             72 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28863
                                             70 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    3482
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25186
             _getDimmerLights_Status
                             _setBuz
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12464
                                             67 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0    3985
                                             64 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                     _setProductData
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    2     2      0    1990
                                             62 BANK0      2     2      0
           _setDimmerIntr_Dimming_RF
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) _setDimmerIntr_Dimming_RF                             3     2      1     152
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2059
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     416
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     482
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     417
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     284
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     447
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     348
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    1487
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     546
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0     961
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9794
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
       _setDimmerLights_PercentValue
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    6466
                                             67 BANK0      8     8      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
               _getMain_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   30422
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   30191
                                             70 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
               _getMain_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                3     2      1   14395
                                             67 BANK0      3     2      1
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
               _setDimmerLights_Line
       _setDimmerLights_PercentValue
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     758
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     152
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   15301
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
       _setDimmerLights_PercentValue
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2120
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_PercentValue                         6     6      0    8776
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     367
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     160
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2673
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3181
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2296
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2009
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_MaxmumValue                            3     2      1     152
                                              5 COMMON     3     2      1
         _getDimmerIntr_DimmingValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     216
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getMain_LightsStatus                                 1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    7133
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    7133
                                             67 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
                             _setBuz
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1948
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0    3262
                                             66 BANK0      1     1      0
         _DimmerLights_SelectPointer
                     _getDelayOff_GO
                     _setDelayOff_GO
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       4     2      2    3036
                                             62 BANK0      4     2      2
                _DelayOffPointSelect
                     _DelayTimejudge
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    1772
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
       _setDimmerLights_PercentValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _ISR                                                 1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (12) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (12) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setBuz
         ___awdiv
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
         _setDimmerLights_Line
         _setDimmerLights_PercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerLights_Line
         _setDimmerLights_PercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
       _getDelayOff_GO
         _DelayOffPointSelect
       _setDelayOff_GO
         _DelayOffPointSelect
         _DelayTimejudge
           ___bmul
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _setDimmerLights_PercentValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setDimmerLights_PercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _setBuz
             ___awdiv
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
             _getDelayOff_GO
               _DelayOffPointSelect
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _setDimmerLights_PercentValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setRF_DimmerValue
               _setDimmerIntr_Dimming_RF
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
                 _setProductData
                   _getDimmerIntr_DimmingValue (ARG)
                   _setDimmerLights_PercentValue (ARG)
                     ___awtoft
                       ___ftpack
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___fttol
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftadd (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftneg (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftdiv (ARG)
                             ___awtoft (ARG)
                               ___ftpack
                             ___ftpack (ARG)
                         ___ftpack (ARG)
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _setDimmerLights_PercentValue (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _setDimmerLights_PercentValue (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _setDimmerLights_PercentValue (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      46      11       87.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     184      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     184      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Dec 29 16:49:28 2014

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                            ___bmul@product 0074  
               getMain_Lights_Count@count 0072                                        l94 1788  
                                      l96 179A                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 124B                                        _WR 0CA9  
                            ___awdiv@sign 0021                                        _Sw 006C  
                     ___wmul@multiplicand 0074                      _getDimmerLights_Line 1DEA  
                  __end_of_setDelayOff_GO 0937                              ___ftadd@exp1 0045  
                            ___ftadd@exp2 0044                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 0C2D                      _setDimmerLights_Line 1EDA  
                            ___ftadd@sign 0043                                       l104 161F  
                                     l105 161B                                       l106 160B  
                                     l108 1619                                       l320 1FDC  
                                     l251 0CD1                      _setDimmerLights_SwOn 0990  
                                     l319 1FDA                                       l363 1297  
                                     l731 1F10                                       l930 1DF7  
                                     l929 1DF1                                       l876 117A  
                                     l899 0BB6                                       _GIE 005F  
                                     _CRC 00C4                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C6  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C2              getDimmerLights_Status@lights 0074  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0073                ??_setDimmerIntr_Dimming_Sw 0073  
         setDimmerIntr_Dimming_RF@command 0072                  __end_of_CC2500_WriteByte 1FE7  
                   _Buzzer_Initialization 1CA6                           __end_of_ADC_Set 1CF2  
                         ?_DelayTimejudge 0070                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 1308               _setDimmerIntr_ControlStatus 12DF  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 1D66  
                   _setDimmerLights_OnOff 0B65                                Load_Main@i 0024  
                            ___ftdiv@sign 0035                                      l1113 1117  
                                    l1114 1120                                      l1147 158D  
                                    l1148 1594                                      l1432 137E  
                                    l1441 16B1                                      l2313 07F4  
                                    l1418 143B                                      l3107 03FD  
                                    l2317 078C                                      l2350 1DFE  
                                    l2318 079C                                      l1626 151B  
                                    l1803 01E9                                      l3084 0AED  
                                    l2356 0D64                                      l1653 13C2  
                                    l1813 01C5                                      l1805 008B  
                         __end_of_IOC_Set 1D96                                      l1654 13DB  
                                    l3078 0AD6                                      l1814 01C3  
                                    l1806 0087                                      l2382 0ECF  
                                    l2374 0E62                                      l1807 0082  
                                    l2375 0E71                                      l2368 1471  
                                    l1658 13D7                                      l2394 1547  
                                    l1685 0602                                      l2717 0354  
                                    l2719 0232                                      l6050 1F31  
                                    l6300 0981                                      l2917 1132  
                                    l7110 0824                                      l1974 075D  
                                    l2695 1F96                                      l7120 0835  
                                    l1969 0763                                      l7108 0822  
                                    l6420 1106                                      l6180 131D  
                                    l7118 0831                                      l6192 1FF4  
                                    l6432 12A8                                      l6352 13EA  
                                    l7082 1DE8                                      l6370 0ABD  
                                    l6522 038D                                      l7226 1369  
                                    l6434 12B3                                      l6418 1101  
                                    l6380 0AE3                                      l6372 0AC2  
                                    l6364 0AAC                                      l6540 03B6  
                                    l7420 10C3                                      l7340 1191  
                   _setDimmerLights_SwOff 1626                                      l9030 1212  
                                    l6550 03D8                                      l6518 0386  
                                    l7430 10D0                                      l7270 1EC3  
                                    l9014 16EC                                      l7326 1FAF  
                                    l7350 119E                                      l7342 1193  
                                    l7096 080E                                      l6800 1F46  
                                    l6368 0AB3                                      l6560 03F9  
                                    l6552 03DC                                      l6528 039C  
                                    l6616 0FDE                                      l6608 0FC5  
                                    l7432 10D4                                      l9040 1258  
                                    l9200 0CD8                                      l7352 11A2  
                                    l6378 0ADB                                      l6546 03C9  
                                    l9210 0CE8                                      l9202 0CDB  
                                    l9018 16FB                                      l6564 040F  
                                    l6548 03D3                                      l9300 0BAE  
                                    l9044 125E                                      l6830 13C6  
                                    l6558 03EF                                      l6638 0EE9  
                                    l7374 149B                                      l7366 147D  
                                    l9038 1255                                      l9214 0CEE  
                                    l9206 0CE1                                      l6808 1281  
                                    l6568 0421                                      l6672 0F4E  
                                    l6664 0F34                                      l6656 0F19  
                                    l7368 1489                                      l9072 15CA  
                                    l9232 0B17                                      l9208 0CE5  
                                    l6496 1536                                      l9160 0EAE  
                                    l6578 043C                                      l6594 0F84  
                                    l6666 0F3D                                      l6658 0F27  
                                    l9314 1721                                      l6850 0A53  
                                    l9306 0BBC                                      l7378 14A4  
                                    l9082 15DA                                      l9066 15C1  
                                    l9234 0B1A                                      l9162 0EB2  
                                    l9146 0E53                                      l6828 13BE  
                                    l6588 0F6E                                      l6668 0F40  
                                    l6772 12F4                                      l6780 1F5B  
                                    l9420 0C59                                      l9076 15D1  
                                    l9068 15C4                                      l9164 0EB6  
                                    l9156 0E95                                      l6838 13D3  
                                    l6790 1F07                                      l6854 0A59  
                                    l9430 0C7F                                      l9078 15D4  
                                    l9254 0B2F                                      l9238 0B20  
                                    l9182 0CAB                                      l9158 0EAA  
                                    l8800 0896                                      l6880 0A8D  
                                    l6864 0A69                                      l6872 0A75  
                                    l9432 0C85                                      l9256 0B45  
                                    l9176 0CA2                                      l9168 0EBA  
                                    l9440 10DE                                      l6858 0A5F  
                                    l9290 0B95                                      l9418 0C53  
                                    l7690 1672                                      l9178 0CA5  
                                    l9354 0D18                                      l9506 0749  
                                    l9442 10E1                                      l6884 0A93  
                                    l6868 0A6F                                      l9196 0CBA  
                                    l9364 0D2A                                      l9620 025F  
                                    l9604 021C                                      l9508 074A  
                   _myMain_Initialization 1E08                                      l8806 08A1  
                                    l9630 0291                                      l9446 10E7  
                                    l8832 08D8                                      l8824 08C7  
                                    l8816 08A9                                      l6888 0A99  
                                    l7696 1686                                      l9376 0D40  
                                    l9544 07AB                                      l9464 06D3  
                                    l8762 1EA9                                      l8818 08B5  
                                    l6898 1EE6                                      l8828 08D0  
                                    l9716 04C6                                      l9572 07ED  
                                    l9644 02CF                                      l8766 1EAF  
                                    l8926 09A4                                      l9558 07D5  
                                    l9654 0301                                      l9494 0732  
                                    l9806 14D5                                      l8880 091B  
                                    l8960 1654                                      l8936 09B5  
                                    l8928 09A7                                      l7968 112C  
                                    l9592 1FA1                                      l9496 0734  
                                    l9824 14FC                                      _CFGS 0CAE  
                                    l8882 0921                                      l8946 09DD  
                                    l8938 09BA                                      l8970 108F  
                                    l7988 15F7                                      l8788 1359  
                                    l8876 0915                                      l8948 09E2  
                                    l9692 117C                                      l9924 0167  
                                    l9932 018F                                      l9852 0069  
                                    l8972 1092                                      l9588 1F9B  
                                    l9772 0E18                                      l9764 0DF5  
                                    l9942 01A5                                      l9918 015A  
                                    l9870 008A                                      l9928 0183  
                                    l8976 1098                                      l8992 123B  
                                    l9792 0E4C                                      l9776 0E21  
                            __CFG_WDTE$ON 0000                                      l8986 1232  
                                    l9980 01D8                                      l9892 00E0  
                                    l8988 1235                                      l9886 00AE  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5240 0941                                      u5305 0AB8  
                                    _PEIE 005E                                      u5325 0AD1  
                                    u5245 093F                                      u5345 0ADE  
                                    u7105 1494                                      u7115 149C  
                                    u5375 0AF4                                      u5705 03CA  
                                    u5465 129D                                      u7075 1480  
                                    u5735 03DD                                      u7095 148A  
                                    u5675 03B7                                      u5835 0F96  
                                    u5915 0EF0                                      u8235 1133  
                                    u5765 03F0                                      u5845 0FA6  
                                    u8245 1138                                      u5855 0FC6  
                                    u5865 0FD5                                      u5945 0F1A  
                                    u8275 15ED                                      u5875 0FDF  
                                    u5975 0F35                                      u8455 1432  
                                    u9605 1345                                      u9645 08AC  
                                    u9665 08B6                                      u9675 08C0  
                                    _LWLO 0CAD                                      u9685 08C8  
                                    u9795 1F74                                      _RSSI 00C7  
                                    _WREN 0CAA                                      _WPUB 020D  
                                    _Buz1 00AE                                      _Load 012E  
                                    _Temp 00CF                                      _main 09EA  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0DD7  
                         __end_of_RF_Main 1CB2                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1D24  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                       DelayTimejudge@value 0023  
              __end_of_setRFSW_AdjControl 155B                         ___bmul@multiplier 0075  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2136 0074  
    _getDimmerLights_Allow_Condition$2137 0075      _getDimmerLights_Allow_Condition$2138 0076  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0071  
                            ___fttol@exp1 0053                              ___fttol@lval 004F  
 __end_of_getDimmerLights_Allow_Condition 0837  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 0800                    _getDimmerLights_Status 1DBD  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1D8A  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 007B  
                                   l10030 059D                                     l10014 055F  
                                   l10110 0A19                                     l10008 054F  
                                   l10050 05E8                                     l10026 0595  
                                   l10018 056E                                     l10106 0A0E  
                                   l10044 05D6                                     l10028 0571  
                                   l10046 05B2                                     l10048 05DE  
                                   l10056 05F8                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005E  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E2  
                         __end_of___awdiv 08DF                           __end_of___ftadd 0454  
                         __end_of___ftdiv 1000                           __end_of___ftneg 1D12  
                                   u11225 0E05                           ___awdiv@divisor 0072  
                                   u11325 14CC                                     u10375 1FC9  
                                   u11335 14DB                                     _T1CON 0018  
                                   u11515 00AC                                     u11275 0E39  
                         __end_of___fttol 0F57                                     u11525 00DE  
                                   u11615 0196                                     u11535 0113  
                                   u11375 1513                                     u10755 071A  
                                   u11740 059B                                     u10775 073A  
                                   u11745 057A                                     u11770 05DC  
                                   u10885 07C4                                     u11775 05BB  
                                   _IOCBF 0396                                     _IOCBN 0395  
                                   _IOCBP 0394                                     _IOCIE 005B  
                                   _IOCIF 0058                           __end_of___lwdiv 14AB  
                                   i1l971 17E1                                     i1l963 17C8  
                                   i1l980 17FE                                     i1l974 17EA  
                                   i1l992 0853                                     i1l969 17EC  
                                   i1l998 0877                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                                     _WPUB1 1069  
                                   _WPUB2 106A                   __end_of_Timeout_Counter 1FCF  
                           __CFG_WRT$HALF 0000                          __end_of_TMR1_ISR 11E5  
                 __size_of_setProductData 000E              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 1DA2                                     _getAD 10D6  
                           ___awtoft@sign 0025                             ___ftpack@sign 0076  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0072  
                        __end_of_WDT_Main 1EA7               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0077                            __pbitbssCOMMON 03D0  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1E67  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0010              __end_of_getMain_LightsStatus 1DEA  
           __end_of_setLED_Initialization 1E57                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 0937  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0060  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 0A45                       ?_setRF_DimmerLights 005E  
                        __end_of_Fosc_Set 1CBC                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0063                            _Exception_Main 0530  
                        ?_CC2500_WriteREG 0074                                 ??_ADC_Set 0072  
                    _setSw_Initialization 1CF2                                    ??_main 007A  
                           ___fttol@sign1 004E                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0072              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0E52                            _setMemory_Data 1D39  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03D0        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 1708                                 ??_IOC_ISR 0070  
                               ??_IOC_Set 0072                               _DimmerIntr1 00E1  
                             _DimmerIntr2 00E8                  __size_of_setRFSW_Control 004F  
                      _RF_Timeout_Counter 1F65                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0063                      ??_setRF_DimmerLights 005F  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0D66  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1CE4  
                               ??_WDT_Set 0072                          __end_of___awtoft 1229  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 0B04  
                _getMain_All_Error_Status 13AF                                    _IOCBF2 1CB2  
                                  i1l1000 086C                                    i1l1003 0875  
                                  i1l1009 0889                                    i1l1380 0013  
                                  i1l1383 001B                                    i1l7520 17E3  
                                  i1l7550 0844                                    i1l7528 17F7  
                                  i1l7582 0882                                    i1l7574 086E  
                                  i1l7496 17B9                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0198                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    u838_25 11DF  
                                  _IO_Set 106C                                    _WDTCON 0097  
                    Exception_Main@i_3373 0068                        DelayTime_1us@count 0072  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0076  
           __end_of_CC2500_PowerOnInitial 1F8F                                    _Dimmer 00BA  
                                  _DlySw1 01D0                                    _DlySw2 01D5  
           __size_of_setRF_TimeoutCleared 0004                __end_of_Mcu_Initialization 1EFE  
                     __end_of_Buzzer_Main 1626                                    _Memory 0220  
                                  _Timer1 00BD                                    ___bmul 1EA7  
                  __end_of_Exception_Main 0603                      Load_Main@Load_Status 0023  
                    Exception_Main@lights 006A                                    ___wmul 112A  
                               ??___awdiv 0076                                 ??___ftadd 003F  
            __size_of_DelayOffPointSelect 0015                                 ??___ftdiv 002C  
                               ??___ftneg 007A                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00CD  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 10D6  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0072          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 10BB                                    _s_data 00CE  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 0A45  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1D44                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 1759  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1CAC  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1331          __end_of_setDimmerIntr_Dimming_Sw 1293  
               _setDimmerLights_DimmingOn 12B8                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1E97  
             getMain_Lights_Count@status1 0073               getMain_Lights_Count@status2 0074  
                   __end_of_SwPointSelect 1FB9              __size_of_Flash_Memory_Modify 004D  
                 __size_of_LedPointSelect 001D           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
              getMain_LightsStatus@status 0072                                _TouchPower 1F8F  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 0051  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$4976 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2110 0026  
               _setDimmerLights_SwOn$2111 0027                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 11A4                             __end_of_getAD 10F1  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1D72                           _getSw_KeyStatus 1184  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                        ??_DelayTimejudge 0076                           ?_setMemory_Data 0072  
               ??_setDimmerLights_Dimming 0064             ??_Flash_Memory_Initialization 005A  
              ?_DimmerLights_MOSFET_IOC_1 0070                ?_DimmerLights_MOSFET_IOC_2 0070  
                    _getMain_Lights_Count 1E57                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 01ED         setDimmerIntr_ControlStatus@lights 0074  
              ?_DimmerLights_MOSFET_TMR_1 0070                ?_DimmerLights_MOSFET_TMR_2 0070  
                      __size_of_getBuz_GO 0010                      _getMain_LightsStatus 1DDB  
               _setDimmerIntr_MaxmumValue 1F3B                __end_of_set_TimeoutCleared 1CD6  
         setDimmerIntr_MaxmumValue@lights 0077                        __size_of_getRxData 006C  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1DAF                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1CB2                        ??_CC2500_WriteByte 0072  
                              __pbssBANK0 006B                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 15E0                         ??_setRFSW_Control 0063  
                       __end_of_Temp_Main 1CB8                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1CF9  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 006B                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 09EA  
                          _getDelayOff_GO 1DCC                       _CC2500_WriteCommand 1086  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1207  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0DD7                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1CD6                        __size_of_setTxData 00B4  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1CEB  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 14AB  
      __end_of_DimmerLights_SelectPointer 2000                _DimmerLights_SelectPointer 1FE7  
                              ??_WDT_Main 0072                     ?_getMain_LightsStatus 0070  
            __end_of_setRF_Initialization 1D2E         __end_of_DimmerLights_MOSFET_IOC_1 1E27  
       __end_of_DimmerLights_MOSFET_IOC_2 1E37                        _setRFSW_AdjControl 151D  
                  __end_of_setProductData 1DBD         __end_of_DimmerLights_MOSFET_TMR_1 1800  
       __end_of_DimmerLights_MOSFET_TMR_2 088B             setDimmerLights_Dimming@lights 0065  
                                 _IOC_ISR 1D5A                                   _IOC_Set 1D8A  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 0063  
   getDimmerLights_Allow_Condition@lights 0077                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 140E                 __size_of_getDimmer_LoadGO 0007  
                       _Flash_Memory_Read 1F12                    __size_of_CC2500_RxData 0061  
                  __size_of_CC2500_TxData 0068                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 1CAF  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                                 _WDT_Set 1D1B           __end_of_setControl_Lights_Table 0ED0  
                         setRF_Main@error 0069                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 1759  
                 ??_setLoad_AH_AL_Restore 0072              __end_of_CC2500_FrequencyCabr 1D4F  
                         __size_of_IO_Set 001A         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1E77  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1DDB                                   _VarLED1 01DA  
                                 _VarLED2 01DE            __end_of_getDimmerLights_Status 1DCC  
                       __end_of_getRxData 0D66                   __end_of_getSw_KeyStatus 11A4  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 0060                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 088B                                   ___ftadd 035E  
                                 ___ftdiv 0F57                                   ___ftneg 1D09  
                         __size_of___wmul 001D                                   ___fttol 0ED0  
                     __end_of_Switch_Main 1D5A                                   ___lwdiv 1475  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1EB8  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0063  
                         __size_of_setBuz 0053                                   __ptext1 14E4  
                                 __ptext2 1E08                                   __ptext3 14AB  
                                 __ptext4 0DD7                                   __ptext5 10D6  
                                 __ptext6 1E97                                   __ptext7 0002  
                                 __ptext8 1CB5                                   __ptext9 06B7  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0064  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 1441  
               __end_of_Flash_Memory_Read 1F26                   ??_setDimmerLights_SwOff 007A  
                              _setRF_Main 0769                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1D01                         _DimmerLights_Main 1164  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1CD1  
              __end_of_CC2500_ClearRXFIFO 1CC4                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1CC8                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006D  
                          _LedPointSelect 110D                       _DelayOffPointSelect 1F26  
                                 clrloop0 07FB            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1DAF                      end_of_initialization 0051  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 1385  
                           _DelayTime_1us 1293                         __end_of_setTxData 06B7  
              __end_of_Flash_Memory_Write 1385        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1066                __end_of_setRF_TransceiveGO 1E47  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1067  
                              _setSw_Main 01ED                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 124B  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1E47  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0B04                             _CC2500_TxData 0C92  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 166C  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                     _Flash_Memory_Unlock 1D12                       ??_CC2500_ReadStatus 0074  
                  ??_getMain_LightsStatus 0072                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1184                        _Mcu_Initialization 1EEC  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1CC0  
                    __end_of_my_MainTimer 151D                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 112A  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 13AF  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0059                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0015  
               __end_of_CC2500_ReadStatus 126E                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 12DF  
                        ??_Exception_Main 0063                            __end_of_IO_Set 1086  
                    _setRF_Initialization 1D24                        _setMemory_LoopSave 1E87  
    __end_of_setDimmerLights_PercentValue 0C2D     __size_of_setDimmerLights_PercentValue 0065  
            _setDimmerLights_PercentValue 0BC8                               _Switch_Main 1D4F  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1EC9                          ??_setMemory_Data 0073  
                   _CC2500_PowerOnInitial 1F7A               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1EB8       __size_of_getDimmerIntr_DimmingValue 0014  
                    setRF_DimmerLights@on 005E                            __end_of___wmul 1147  
                       getSw_KeyStatus@sw 0076               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0021             __size_of_getDimmerLights_Line 000F  
        DimmerLights_SelectPointer@lights 0073                         __size_of_TMR1_Set 000C  
             ??_DimmerLights_MOSFET_IOC_1 0070               ??_DimmerLights_MOSFET_IOC_2 0070  
           __size_of_setDimmerLights_Main 0065                            __end_of_setLED 0AA4  
           __size_of_setDimmerLights_Line 0012             __size_of_setDimmerLights_SwOn 005A  
                          __end_of_setBuz 17AC               ??_DimmerLights_MOSFET_TMR_1 0070  
             ??_DimmerLights_MOSFET_TMR_2 0070                      _CC2500_FrequencyCabr 1D44  
                 ??_getDimmer_Load_Status 0072                __size_of_Flash_Memory_Main 0033  
              __size_of_Flash_Memory_Read 0014                               ?_setRF_Main 0070  
                         _setRFSW_Control 16B9                         __size_of_WDT_Main 0010  
                     start_initialization 0022                         _setRF_DimmerValue 13DD  
                         ?_LedPointSelect 0070                                 _Load_Main 0055  
                             __end_of_ISR 0020                          _getDimmer_LoadGO 1CDD  
                   ??_Flash_Memory_Modify 0076              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0072                        ?_setRF_DimmerValue 0070  
              __end_of_CC2500_InitPATable 1164           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0769                            ??_RF_RxDisable 0076  
                     __size_of_getLoad_AD 007B                              ?_Buzzer_Main 0070  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1CD1  
       __end_of_setDimmerIntr_MaxmumValue 1F50                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 016C  
                             ?_setSw_Main 0070                       ??_setRF_DimmerValue 005E  
                     __size_of_getTemp_AD 0039                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0018                                 _Temp_Main 1CB5  
           ?_setDimmerLights_PercentValue 0070                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C8  
                   setProductData@address 005D                       Exception_Main@count 0064  
                 setRF_DimmerValue@lights 005F                       Exception_Main@error 0065  
                                ??___bmul 0073                                  ??___wmul 0076  
                  __size_of_SwPointSelect 0015                                 _Tx_Length 00CB  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 13DD  
                        _CC2500_SIDLEMode 1CC8                __size_of_DimmerLights_Main 0020  
               __end_of_setRF_DimmerValue 140E                        setMemory_Data@data 0072  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0074  
       setDimmerLights_PercentValue@value 0056                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1E77                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK3 01E2                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 11E5                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0065  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 0071  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 0075  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1E17  
               _DimmerLights_MOSFET_IOC_2 1E27                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 015C  
                           _DimmerLights2 0164                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 17AC                 _DimmerLights_MOSFET_TMR_2 0837  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 10BB  
                setRFSW_AdjControl@status 0062                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006D                            getRxData@error 0067  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1CBC  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0066  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 0091  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                              setBuz@time 0024                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 1CA5  
                               _getBuz_GO 1E67                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 0530               _Flash_Memory_Initialization 0454  
                                ?___awdiv 0072                                 __ptext100 1D09  
                               __ptext101 0F57                                 __ptext110 0800  
                               __ptext102 035E                                 __ptext111 1CD6  
                               __ptext103 1207                                 __ptext120 088B  
                               __ptext112 13AF                                 __ptext104 0AA4  
                               __ptext121 1626                                 __ptext113 1D2E  
                               __ptext105 1EDA                                 __ptext130 1CCC  
                               __ptext122 08DF                                 __ptext114 1CA4  
                               __ptext106 1F3B                                 __ptext131 1F26  
                               __ptext123 1DAF                                 __ptext115 11E5  
                               __ptext107 126E                                 __ptext140 1E17  
                               __ptext132 15E0                                 __ptext124 1331  
                               __ptext116 1D01                                 __ptext108 1EFE  
                               __ptext133 1CA6                                 __ptext125 1EA7  
                               __ptext117 0D66                                 __ptext109 1DDB  
                                ?___ftadd 0039                                 __ptext126 1DCC  
                               __ptext118 0990                                 __ptext135 11C4  
                               __ptext127 1DBD                                 __ptext119 1759  
                               __ptext136 0837                                 __ptext128 1FE7  
                               __ptext137 17AC                                 __ptext129 1CF9  
                               __ptext138 1D5A                                 __ptext139 1E27  
                               _getRxData 0CFA                                  ?___ftdiv 0026  
                                ?___ftneg 0036                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 1708                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1CA9                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1FA4  
                         DelayTimejudge@i 0020                           DelayTimejudge@j 0021  
                         DelayTimejudge@k 0022                       __size_of_setSw_Main 0171  
            CC2500_ReadStatus@status_addr 0075        __end_of_getDimmerIntr_DimmingValue 1F12  
            ??_setDimmerIntr_DimmingValue 0073                _getDimmerIntr_DimmingValue 1EFE  
                  CC2500_WriteByte@loop_a 0073            __size_of_setDimmerLights_OnOff 0063  
                               _r_address 00CC             __end_of_setDimmerLights_OnOff 0BC8  
          __size_of_setDimmerLights_SwOff 0046            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 166C              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 1E17                            __size_of_getAD 001B  
                        ___lwdiv@quotient 0077                   __size_of_DelayTimejudge 002A  
                           _SwPointSelect 1FA4                       __end_of_setLED_Main 159C  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1CB5                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1D7E  
                         SwPointSelect@sw 0073                                 clear_ram0 07FA  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 14E4                                 _setTxData 0603  
           setDimmerLights_PercentValue@i 0057       __end_of_DimmerLights_Initialization 1D39  
             _DimmerLights_Initialization 1D2E                        _CC2500_ClearRXFIFO 1CC0  
                      _CC2500_ClearTXFIFO 1CC4                  setRF_DimmerLights@lights 0062  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1EDA  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0061      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 003E       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 135B                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 11C4  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1D96  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1E37                                  _RF_Count 00C0  
                    __end_of_RF_RxDisable 1E08            ??_setDimmerLights_PercentValue 0054  
                            ??_getTemp_AD 0076               __end_of_CC2500_WriteCommand 10A0  
                  ??_CC2500_FrequencyCabr 0078                                  _WDT_Main 1E97  
                 DlyOff_Initialization@sw 0074                     getSw_KeyStatus@status 0075  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0072  
              __size_of_setRF_DimmerValue 0031                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 0058                                  _DelayOff 00C5  
                            setSw_Main@sw 0065                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000C              __end_of_Flash_Memory_Erasing 1D72  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1475  
                   _DlyOff_Initialization 1CCC                      ??_CC2500_ClearRXFIFO 0076  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1308  
             setDimmerLights_OnOff@lights 0065                  _setDimmerIntr_Dimming_Sw 126E  
                                _Fosc_Set 1CB8                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0064                        __end_of_getLoad_AD 0E52  
                      __end_of_getLoad_OK 1CDD                     _Switch_Initialization 1DA2  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 14E4                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1FCF  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0019  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00CA                               ??_Temp_Main 007A  
                       setRFSW_Control@sw 0065             _getMain_All_Error_Status$3361 0073  
           _getMain_All_Error_Status$3362 0075                  __end_of_getDimmer_LoadGO 1CE4  
                     _Load_Initialization 1CA9                                 setLED@led 0075  
                            _setTemp_Main 06B7                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___fttol 0087                          __size_of___lwdiv 0036  
                setDimmerLights_SwOn@idle 0028                                  ___awtoft 1207  
                        ??_LedPointSelect 0072                                  ___ftpack 0AA4  
           __size_of_getMain_Lights_Count 0010                    getDimmer_LoadGO@loadgo 0072  
           __size_of_getMain_LightsStatus 000F                         getTemp_AD@channel 0077  
                            ??_setRF_Main 0068                      CC2500_WriteREG@value 0074  
                             _setLED_Main 155B                __end_of_setRF_DimmerLights 0990  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1CEB                          setDelayOff_GO@sw 0061  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1CB2  
                                __ptext11 1CA5                                  __ptext20 1F8F  
                                __ptext12 1D4F                                  __ptext21 1CD1  
                                __ptext13 01ED                                  __ptext30 151D  
                                __ptext22 1FB9                                  __ptext14 1EC9  
                                __ptext31 13DD                                  __ptext23 1CAF  
                                __ptext15 12B8                                  __ptext40 10F1  
                                __ptext32 1308                                  __ptext24 0769  
                                __ptext16 1184                                  __ptext41 1F7A  
                                __ptext33 1E77                                  __ptext25 0CFA  
                                __ptext17 1FA4                                  __ptext50 1CC0  
                                __ptext42 1CC8                                  __ptext34 1EB8  
                                __ptext26 1441                                  __ptext18 1DA2  
                                __ptext51 1086                                  __ptext43 159C  
                                __ptext35 1E67                                  __ptext27 1E87  
                                __ptext19 1CF2                                  __ptext60 106C  
                                __ptext52 1CBC                                  __ptext44 1385  
                                __ptext36 1DF9                                  __ptext28 0E52  
                                __ptext61 1D8A                                  __ptext53 1F65  
                                __ptext45 1147                                  __ptext37 0C92  
                                __ptext29 16B9                                  __ptext70 1475  
                                __ptext62 1CB8                                  __ptext54 1FCF  
                                __ptext46 1229                                  __ptext38 0B04  
                                __ptext71 1CA9                                  __ptext63 1CEB  
                                __ptext55 1CAC                                  __ptext47 1D44  
                                __ptext39 124B                                  __ptext80 0454  
                                __ptext72 10A0                                  __ptext64 0055  
                                __ptext56 1D24                                  __ptext48 1293  
                                __ptext81 1D39                                  __ptext73 1D7E  
                                __ptext65 1E57                                  __ptext57 1EEC  
                                __ptext49 1CC4                                  __ptext90 0A45  
                                __ptext82 135B                                  __ptext74 155B  
                                __ptext66 1CE4                                  __ptext58 1D1B  
                                __ptext91 110D                                  __ptext83 1D12  
                                __ptext75 1D72                                  __ptext67 1CDD  
                                __ptext59 1D96                                  __ptext92 1F50  
                                __ptext84 1F12                                  __ptext76 1E47  
                                __ptext68 10BB                                  __ptext93 12DF  
                                __ptext85 0530                                  __ptext77 140E  
                                __ptext69 112A                                  __ptext94 1708  
                                __ptext86 1DEA                                  __ptext78 166C  
                                __ptext95 0603                                  __ptext87 1164  
                                __ptext79 1D66                                  __ptext96 1E37  
                                __ptext88 0C2D                                  __ptext97 0937  
                                __ptext89 0B65                                  __ptext98 0BC8  
                                __ptext99 0ED0                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1DF9              __end_of_setDimmerLights_Main 0C92  
            __end_of_setDimmerLights_Line 1EEC              __end_of_setDimmerLights_SwOn 09EA  
                            ??_setSw_Main 0063                    ??_setRF_TimeoutCleared 0072  
                           setLED@command 0074                             __size_of_main 005B  
                             _setRF_Learn 1EC9        __size_of_DimmerIntr_Initialization 0022  
                __end_of_CC2500_SIDLEMode 1CCC                setDimmerLights_Main@lights 0066  
             __end_of_DelayOffPointSelect 1F3B                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 10F1                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1147                  __end_of_setMemory_Modify 1E87  
    _getAll_DimmerIntr_Dimming_Sw_RF$2054 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2055 0074  
                      __end_of_setRF_Main 07FA                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 0010  
      __size_of_DimmerLights_MOSFET_IOC_2 0010                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0066                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1F7A        __size_of_DimmerLights_MOSFET_TMR_1 0054  
      __size_of_DimmerLights_MOSFET_TMR_2 0054                                  main@argc 01E2  
                                main@argv 01E4                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$5935 0073                      _getSw_KeyStatus$5936 0074  
                         _CC2500_PowerRST 159C                  __size_of_getSw_KeyStatus 0020  
      __end_of_setDimmerIntr_DimmingValue 1F65                _setDimmerIntr_DimmingValue 1F50  
             __end_of_Flash_Memory_Modify 16B9                               _setLog_Code 1441  
             __end_of_Flash_Memory_Unlock 1D1B                           ??_SwPointSelect 0072  
                         _CC2500_WriteREG 1229                        __end_of_setSw_Main 035E  
                   ??_Load_Initialization 0074                             _Transceive_OK 03D1  
                  ?_DlyOff_Initialization 0070                            _DelayTimejudge 1331  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0062  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                 ??_CC2500_PowerOnInitial 007A    __end_of_setDimmerLights_Initialization 1CA5  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 1CA4  
              ?_setDimmerIntr_MaxmumValue 0075                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0078  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1CAC  
                             getLoad_AD@i 0023                               getLoad_AD@j 0022  
                             getLoad_AD@k 0021                      _Flash_Memory_Erasing 1D66  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00C9  
                 __size_of_Exception_Main 00D3           __end_of_DelayOff_Initialization 1D01  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1D09  
                     ??_RF_Initialization 0073                   __size_of_setMemory_Data 000B  
                          _setDelayOff_GO 08DF               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 007E                    __end_of_DelayTimejudge 135B  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0063                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 12B8                   __end_of_CC2500_ReadByte 110D  
            __end_of_setSw_Initialization 1CF9                           _Timeout_Counter 1FB9  
         __size_of_getDimmerLights_Status 000F                              _RF_RxDisable 1DF9  
              __end_of_LED_Initialization 1D7E            __end_of_setTemp_Initialization 1CA6  
                 setMemory_Modify@command 0073                 __end_of_RF_Initialization 1CAF  
                   __end_of_CC2500_RxData 0B65                     __end_of_CC2500_TxData 0CFA  
                   _setLoad_AH_AL_Restore 10A0                   __end_of_CC2500_PowerRST 15E0  
