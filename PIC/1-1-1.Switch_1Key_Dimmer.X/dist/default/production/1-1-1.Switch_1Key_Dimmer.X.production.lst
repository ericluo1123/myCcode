

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 30 14:24:33 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	intentry,global,class=CODE,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	dabs	1,0x7E,2
   151  0000                     	;# 
   152  0001                     	;# 
   153  0002                     	;# 
   154  0003                     	;# 
   155  0004                     	;# 
   156  0005                     	;# 
   157  0006                     	;# 
   158  0007                     	;# 
   159  0008                     	;# 
   160  0009                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000D                     	;# 
   165  000E                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0016                     	;# 
   172  0017                     	;# 
   173  0018                     	;# 
   174  0019                     	;# 
   175  001A                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  008C                     	;# 
   179  008D                     	;# 
   180  008E                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0095                     	;# 
   185  0096                     	;# 
   186  0097                     	;# 
   187  0099                     	;# 
   188  009A                     	;# 
   189  009B                     	;# 
   190  009B                     	;# 
   191  009C                     	;# 
   192  009D                     	;# 
   193  009E                     	;# 
   194  010C                     	;# 
   195  010D                     	;# 
   196  010E                     	;# 
   197  0116                     	;# 
   198  0117                     	;# 
   199  011D                     	;# 
   200  018C                     	;# 
   201  018D                     	;# 
   202  018E                     	;# 
   203  0191                     	;# 
   204  0191                     	;# 
   205  0192                     	;# 
   206  0193                     	;# 
   207  0193                     	;# 
   208  0194                     	;# 
   209  0195                     	;# 
   210  0196                     	;# 
   211  0197                     	;# 
   212  0199                     	;# 
   213  019A                     	;# 
   214  019B                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019C                     	;# 
   219  019C                     	;# 
   220  019D                     	;# 
   221  019E                     	;# 
   222  019F                     	;# 
   223  020D                     	;# 
   224  0210                     	;# 
   225  0211                     	;# 
   226  0211                     	;# 
   227  0212                     	;# 
   228  0212                     	;# 
   229  0213                     	;# 
   230  0213                     	;# 
   231  0214                     	;# 
   232  0214                     	;# 
   233  0215                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0216                     	;# 
   237  0216                     	;# 
   238  0217                     	;# 
   239  0217                     	;# 
   240  0291                     	;# 
   241  0291                     	;# 
   242  0292                     	;# 
   243  0293                     	;# 
   244  0298                     	;# 
   245  0298                     	;# 
   246  0299                     	;# 
   247  029A                     	;# 
   248  0394                     	;# 
   249  0395                     	;# 
   250  0396                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000D                     	;# 
   276  000E                     	;# 
   277  0010                     	;# 
   278  0011                     	;# 
   279  0012                     	;# 
   280  0015                     	;# 
   281  0016                     	;# 
   282  0016                     	;# 
   283  0017                     	;# 
   284  0018                     	;# 
   285  0019                     	;# 
   286  001A                     	;# 
   287  001B                     	;# 
   288  001C                     	;# 
   289  008C                     	;# 
   290  008D                     	;# 
   291  008E                     	;# 
   292  0090                     	;# 
   293  0091                     	;# 
   294  0092                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0099                     	;# 
   299  009A                     	;# 
   300  009B                     	;# 
   301  009B                     	;# 
   302  009C                     	;# 
   303  009D                     	;# 
   304  009E                     	;# 
   305  010C                     	;# 
   306  010D                     	;# 
   307  010E                     	;# 
   308  0116                     	;# 
   309  0117                     	;# 
   310  011D                     	;# 
   311  018C                     	;# 
   312  018D                     	;# 
   313  018E                     	;# 
   314  0191                     	;# 
   315  0191                     	;# 
   316  0192                     	;# 
   317  0193                     	;# 
   318  0193                     	;# 
   319  0194                     	;# 
   320  0195                     	;# 
   321  0196                     	;# 
   322  0197                     	;# 
   323  0199                     	;# 
   324  019A                     	;# 
   325  019B                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019C                     	;# 
   330  019C                     	;# 
   331  019D                     	;# 
   332  019E                     	;# 
   333  019F                     	;# 
   334  020D                     	;# 
   335  0210                     	;# 
   336  0211                     	;# 
   337  0211                     	;# 
   338  0212                     	;# 
   339  0212                     	;# 
   340  0213                     	;# 
   341  0213                     	;# 
   342  0214                     	;# 
   343  0214                     	;# 
   344  0215                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0216                     	;# 
   348  0216                     	;# 
   349  0217                     	;# 
   350  0217                     	;# 
   351  0291                     	;# 
   352  0291                     	;# 
   353  0292                     	;# 
   354  0293                     	;# 
   355  0298                     	;# 
   356  0298                     	;# 
   357  0299                     	;# 
   358  029A                     	;# 
   359  0394                     	;# 
   360  0395                     	;# 
   361  0396                     	;# 
   362  0FE4                     	;# 
   363  0FE5                     	;# 
   364  0FE6                     	;# 
   365  0FE7                     	;# 
   366  0FE8                     	;# 
   367  0FE9                     	;# 
   368  0FEA                     	;# 
   369  0FEB                     	;# 
   370  0FED                     	;# 
   371  0FEE                     	;# 
   372  0FEF                     	;# 
   373  0000                     	;# 
   374  0001                     	;# 
   375  0002                     	;# 
   376  0003                     	;# 
   377  0004                     	;# 
   378  0005                     	;# 
   379  0006                     	;# 
   380  0007                     	;# 
   381  0008                     	;# 
   382  0009                     	;# 
   383  000A                     	;# 
   384  000B                     	;# 
   385  000C                     	;# 
   386  000D                     	;# 
   387  000E                     	;# 
   388  0010                     	;# 
   389  0011                     	;# 
   390  0012                     	;# 
   391  0015                     	;# 
   392  0016                     	;# 
   393  0016                     	;# 
   394  0017                     	;# 
   395  0018                     	;# 
   396  0019                     	;# 
   397  001A                     	;# 
   398  001B                     	;# 
   399  001C                     	;# 
   400  008C                     	;# 
   401  008D                     	;# 
   402  008E                     	;# 
   403  0090                     	;# 
   404  0091                     	;# 
   405  0092                     	;# 
   406  0095                     	;# 
   407  0096                     	;# 
   408  0097                     	;# 
   409  0099                     	;# 
   410  009A                     	;# 
   411  009B                     	;# 
   412  009B                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  010C                     	;# 
   417  010D                     	;# 
   418  010E                     	;# 
   419  0116                     	;# 
   420  0117                     	;# 
   421  011D                     	;# 
   422  018C                     	;# 
   423  018D                     	;# 
   424  018E                     	;# 
   425  0191                     	;# 
   426  0191                     	;# 
   427  0192                     	;# 
   428  0193                     	;# 
   429  0193                     	;# 
   430  0194                     	;# 
   431  0195                     	;# 
   432  0196                     	;# 
   433  0197                     	;# 
   434  0199                     	;# 
   435  019A                     	;# 
   436  019B                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019C                     	;# 
   441  019C                     	;# 
   442  019D                     	;# 
   443  019E                     	;# 
   444  019F                     	;# 
   445  020D                     	;# 
   446  0210                     	;# 
   447  0211                     	;# 
   448  0211                     	;# 
   449  0212                     	;# 
   450  0212                     	;# 
   451  0213                     	;# 
   452  0213                     	;# 
   453  0214                     	;# 
   454  0214                     	;# 
   455  0215                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0216                     	;# 
   459  0216                     	;# 
   460  0217                     	;# 
   461  0217                     	;# 
   462  0291                     	;# 
   463  0291                     	;# 
   464  0292                     	;# 
   465  0293                     	;# 
   466  0298                     	;# 
   467  0298                     	;# 
   468  0299                     	;# 
   469  029A                     	;# 
   470  0394                     	;# 
   471  0395                     	;# 
   472  0396                     	;# 
   473  0FE4                     	;# 
   474  0FE5                     	;# 
   475  0FE6                     	;# 
   476  0FE7                     	;# 
   477  0FE8                     	;# 
   478  0FE9                     	;# 
   479  0FEA                     	;# 
   480  0FEB                     	;# 
   481  0FED                     	;# 
   482  0FEE                     	;# 
   483  0FEF                     	;# 
   484  0000                     	;# 
   485  0001                     	;# 
   486  0002                     	;# 
   487  0003                     	;# 
   488  0004                     	;# 
   489  0005                     	;# 
   490  0006                     	;# 
   491  0007                     	;# 
   492  0008                     	;# 
   493  0009                     	;# 
   494  000A                     	;# 
   495  000B                     	;# 
   496  000C                     	;# 
   497  000D                     	;# 
   498  000E                     	;# 
   499  0010                     	;# 
   500  0011                     	;# 
   501  0012                     	;# 
   502  0015                     	;# 
   503  0016                     	;# 
   504  0016                     	;# 
   505  0017                     	;# 
   506  0018                     	;# 
   507  0019                     	;# 
   508  001A                     	;# 
   509  001B                     	;# 
   510  001C                     	;# 
   511  008C                     	;# 
   512  008D                     	;# 
   513  008E                     	;# 
   514  0090                     	;# 
   515  0091                     	;# 
   516  0092                     	;# 
   517  0095                     	;# 
   518  0096                     	;# 
   519  0097                     	;# 
   520  0099                     	;# 
   521  009A                     	;# 
   522  009B                     	;# 
   523  009B                     	;# 
   524  009C                     	;# 
   525  009D                     	;# 
   526  009E                     	;# 
   527  010C                     	;# 
   528  010D                     	;# 
   529  010E                     	;# 
   530  0116                     	;# 
   531  0117                     	;# 
   532  011D                     	;# 
   533  018C                     	;# 
   534  018D                     	;# 
   535  018E                     	;# 
   536  0191                     	;# 
   537  0191                     	;# 
   538  0192                     	;# 
   539  0193                     	;# 
   540  0193                     	;# 
   541  0194                     	;# 
   542  0195                     	;# 
   543  0196                     	;# 
   544  0197                     	;# 
   545  0199                     	;# 
   546  019A                     	;# 
   547  019B                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019C                     	;# 
   552  019C                     	;# 
   553  019D                     	;# 
   554  019E                     	;# 
   555  019F                     	;# 
   556  020D                     	;# 
   557  0210                     	;# 
   558  0211                     	;# 
   559  0211                     	;# 
   560  0212                     	;# 
   561  0212                     	;# 
   562  0213                     	;# 
   563  0213                     	;# 
   564  0214                     	;# 
   565  0214                     	;# 
   566  0215                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0216                     	;# 
   570  0216                     	;# 
   571  0217                     	;# 
   572  0217                     	;# 
   573  0291                     	;# 
   574  0291                     	;# 
   575  0292                     	;# 
   576  0293                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  0394                     	;# 
   582  0395                     	;# 
   583  0396                     	;# 
   584  0FE4                     	;# 
   585  0FE5                     	;# 
   586  0FE6                     	;# 
   587  0FE7                     	;# 
   588  0FE8                     	;# 
   589  0FE9                     	;# 
   590  0FEA                     	;# 
   591  0FEB                     	;# 
   592  0FED                     	;# 
   593  0FEE                     	;# 
   594  0FEF                     	;# 
   595  0000                     	;# 
   596  0001                     	;# 
   597  0002                     	;# 
   598  0003                     	;# 
   599  0004                     	;# 
   600  0005                     	;# 
   601  0006                     	;# 
   602  0007                     	;# 
   603  0008                     	;# 
   604  0009                     	;# 
   605  000A                     	;# 
   606  000B                     	;# 
   607  000C                     	;# 
   608  000D                     	;# 
   609  000E                     	;# 
   610  0010                     	;# 
   611  0011                     	;# 
   612  0012                     	;# 
   613  0015                     	;# 
   614  0016                     	;# 
   615  0016                     	;# 
   616  0017                     	;# 
   617  0018                     	;# 
   618  0019                     	;# 
   619  001A                     	;# 
   620  001B                     	;# 
   621  001C                     	;# 
   622  008C                     	;# 
   623  008D                     	;# 
   624  008E                     	;# 
   625  0090                     	;# 
   626  0091                     	;# 
   627  0092                     	;# 
   628  0095                     	;# 
   629  0096                     	;# 
   630  0097                     	;# 
   631  0099                     	;# 
   632  009A                     	;# 
   633  009B                     	;# 
   634  009B                     	;# 
   635  009C                     	;# 
   636  009D                     	;# 
   637  009E                     	;# 
   638  010C                     	;# 
   639  010D                     	;# 
   640  010E                     	;# 
   641  0116                     	;# 
   642  0117                     	;# 
   643  011D                     	;# 
   644  018C                     	;# 
   645  018D                     	;# 
   646  018E                     	;# 
   647  0191                     	;# 
   648  0191                     	;# 
   649  0192                     	;# 
   650  0193                     	;# 
   651  0193                     	;# 
   652  0194                     	;# 
   653  0195                     	;# 
   654  0196                     	;# 
   655  0197                     	;# 
   656  0199                     	;# 
   657  019A                     	;# 
   658  019B                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019C                     	;# 
   663  019C                     	;# 
   664  019D                     	;# 
   665  019E                     	;# 
   666  019F                     	;# 
   667  020D                     	;# 
   668  0210                     	;# 
   669  0211                     	;# 
   670  0211                     	;# 
   671  0212                     	;# 
   672  0212                     	;# 
   673  0213                     	;# 
   674  0213                     	;# 
   675  0214                     	;# 
   676  0214                     	;# 
   677  0215                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0216                     	;# 
   681  0216                     	;# 
   682  0217                     	;# 
   683  0217                     	;# 
   684  0291                     	;# 
   685  0291                     	;# 
   686  0292                     	;# 
   687  0293                     	;# 
   688  0298                     	;# 
   689  0298                     	;# 
   690  0299                     	;# 
   691  029A                     	;# 
   692  0394                     	;# 
   693  0395                     	;# 
   694  0396                     	;# 
   695  0FE4                     	;# 
   696  0FE5                     	;# 
   697  0FE6                     	;# 
   698  0FE7                     	;# 
   699  0FE8                     	;# 
   700  0FE9                     	;# 
   701  0FEA                     	;# 
   702  0FEB                     	;# 
   703  0FED                     	;# 
   704  0FEE                     	;# 
   705  0FEF                     	;# 
   706  0000                     	;# 
   707  0001                     	;# 
   708  0002                     	;# 
   709  0003                     	;# 
   710  0004                     	;# 
   711  0005                     	;# 
   712  0006                     	;# 
   713  0007                     	;# 
   714  0008                     	;# 
   715  0009                     	;# 
   716  000A                     	;# 
   717  000B                     	;# 
   718  000C                     	;# 
   719  000D                     	;# 
   720  000E                     	;# 
   721  0010                     	;# 
   722  0011                     	;# 
   723  0012                     	;# 
   724  0015                     	;# 
   725  0016                     	;# 
   726  0016                     	;# 
   727  0017                     	;# 
   728  0018                     	;# 
   729  0019                     	;# 
   730  001A                     	;# 
   731  001B                     	;# 
   732  001C                     	;# 
   733  008C                     	;# 
   734  008D                     	;# 
   735  008E                     	;# 
   736  0090                     	;# 
   737  0091                     	;# 
   738  0092                     	;# 
   739  0095                     	;# 
   740  0096                     	;# 
   741  0097                     	;# 
   742  0099                     	;# 
   743  009A                     	;# 
   744  009B                     	;# 
   745  009B                     	;# 
   746  009C                     	;# 
   747  009D                     	;# 
   748  009E                     	;# 
   749  010C                     	;# 
   750  010D                     	;# 
   751  010E                     	;# 
   752  0116                     	;# 
   753  0117                     	;# 
   754  011D                     	;# 
   755  018C                     	;# 
   756  018D                     	;# 
   757  018E                     	;# 
   758  0191                     	;# 
   759  0191                     	;# 
   760  0192                     	;# 
   761  0193                     	;# 
   762  0193                     	;# 
   763  0194                     	;# 
   764  0195                     	;# 
   765  0196                     	;# 
   766  0197                     	;# 
   767  0199                     	;# 
   768  019A                     	;# 
   769  019B                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019C                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020D                     	;# 
   779  0210                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0298                     	;# 
   800  0298                     	;# 
   801  0299                     	;# 
   802  029A                     	;# 
   803  0394                     	;# 
   804  0395                     	;# 
   805  0396                     	;# 
   806  0FE4                     	;# 
   807  0FE5                     	;# 
   808  0FE6                     	;# 
   809  0FE7                     	;# 
   810  0FE8                     	;# 
   811  0FE9                     	;# 
   812  0FEA                     	;# 
   813  0FEB                     	;# 
   814  0FED                     	;# 
   815  0FEE                     	;# 
   816  0FEF                     	;# 
   817  0000                     	;# 
   818  0001                     	;# 
   819  0002                     	;# 
   820  0003                     	;# 
   821  0004                     	;# 
   822  0005                     	;# 
   823  0006                     	;# 
   824  0007                     	;# 
   825  0008                     	;# 
   826  0009                     	;# 
   827  000A                     	;# 
   828  000B                     	;# 
   829  000C                     	;# 
   830  000D                     	;# 
   831  000E                     	;# 
   832  0010                     	;# 
   833  0011                     	;# 
   834  0012                     	;# 
   835  0015                     	;# 
   836  0016                     	;# 
   837  0016                     	;# 
   838  0017                     	;# 
   839  0018                     	;# 
   840  0019                     	;# 
   841  001A                     	;# 
   842  001B                     	;# 
   843  001C                     	;# 
   844  008C                     	;# 
   845  008D                     	;# 
   846  008E                     	;# 
   847  0090                     	;# 
   848  0091                     	;# 
   849  0092                     	;# 
   850  0095                     	;# 
   851  0096                     	;# 
   852  0097                     	;# 
   853  0099                     	;# 
   854  009A                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  010C                     	;# 
   861  010D                     	;# 
   862  010E                     	;# 
   863  0116                     	;# 
   864  0117                     	;# 
   865  011D                     	;# 
   866  018C                     	;# 
   867  018D                     	;# 
   868  018E                     	;# 
   869  0191                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0194                     	;# 
   875  0195                     	;# 
   876  0196                     	;# 
   877  0197                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019C                     	;# 
   885  019C                     	;# 
   886  019D                     	;# 
   887  019E                     	;# 
   888  019F                     	;# 
   889  020D                     	;# 
   890  0210                     	;# 
   891  0211                     	;# 
   892  0211                     	;# 
   893  0212                     	;# 
   894  0212                     	;# 
   895  0213                     	;# 
   896  0213                     	;# 
   897  0214                     	;# 
   898  0214                     	;# 
   899  0215                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0216                     	;# 
   903  0216                     	;# 
   904  0217                     	;# 
   905  0217                     	;# 
   906  0291                     	;# 
   907  0291                     	;# 
   908  0292                     	;# 
   909  0293                     	;# 
   910  0298                     	;# 
   911  0298                     	;# 
   912  0299                     	;# 
   913  029A                     	;# 
   914  0394                     	;# 
   915  0395                     	;# 
   916  0396                     	;# 
   917  0FE4                     	;# 
   918  0FE5                     	;# 
   919  0FE6                     	;# 
   920  0FE7                     	;# 
   921  0FE8                     	;# 
   922  0FE9                     	;# 
   923  0FEA                     	;# 
   924  0FEB                     	;# 
   925  0FED                     	;# 
   926  0FEE                     	;# 
   927  0FEF                     	;# 
   928  0000                     	;# 
   929  0001                     	;# 
   930  0002                     	;# 
   931  0003                     	;# 
   932  0004                     	;# 
   933  0005                     	;# 
   934  0006                     	;# 
   935  0007                     	;# 
   936  0008                     	;# 
   937  0009                     	;# 
   938  000A                     	;# 
   939  000B                     	;# 
   940  000C                     	;# 
   941  000D                     	;# 
   942  000E                     	;# 
   943  0010                     	;# 
   944  0011                     	;# 
   945  0012                     	;# 
   946  0015                     	;# 
   947  0016                     	;# 
   948  0016                     	;# 
   949  0017                     	;# 
   950  0018                     	;# 
   951  0019                     	;# 
   952  001A                     	;# 
   953  001B                     	;# 
   954  001C                     	;# 
   955  008C                     	;# 
   956  008D                     	;# 
   957  008E                     	;# 
   958  0090                     	;# 
   959  0091                     	;# 
   960  0092                     	;# 
   961  0095                     	;# 
   962  0096                     	;# 
   963  0097                     	;# 
   964  0099                     	;# 
   965  009A                     	;# 
   966  009B                     	;# 
   967  009B                     	;# 
   968  009C                     	;# 
   969  009D                     	;# 
   970  009E                     	;# 
   971  010C                     	;# 
   972  010D                     	;# 
   973  010E                     	;# 
   974  0116                     	;# 
   975  0117                     	;# 
   976  011D                     	;# 
   977  018C                     	;# 
   978  018D                     	;# 
   979  018E                     	;# 
   980  0191                     	;# 
   981  0191                     	;# 
   982  0192                     	;# 
   983  0193                     	;# 
   984  0193                     	;# 
   985  0194                     	;# 
   986  0195                     	;# 
   987  0196                     	;# 
   988  0197                     	;# 
   989  0199                     	;# 
   990  019A                     	;# 
   991  019B                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019C                     	;# 
   996  019C                     	;# 
   997  019D                     	;# 
   998  019E                     	;# 
   999  019F                     	;# 
  1000  020D                     	;# 
  1001  0210                     	;# 
  1002  0211                     	;# 
  1003  0211                     	;# 
  1004  0212                     	;# 
  1005  0212                     	;# 
  1006  0213                     	;# 
  1007  0213                     	;# 
  1008  0214                     	;# 
  1009  0214                     	;# 
  1010  0215                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0216                     	;# 
  1014  0216                     	;# 
  1015  0217                     	;# 
  1016  0217                     	;# 
  1017  0291                     	;# 
  1018  0291                     	;# 
  1019  0292                     	;# 
  1020  0293                     	;# 
  1021  0298                     	;# 
  1022  0298                     	;# 
  1023  0299                     	;# 
  1024  029A                     	;# 
  1025  0394                     	;# 
  1026  0395                     	;# 
  1027  0396                     	;# 
  1028  0FE4                     	;# 
  1029  0FE5                     	;# 
  1030  0FE6                     	;# 
  1031  0FE7                     	;# 
  1032  0FE8                     	;# 
  1033  0FE9                     	;# 
  1034  0FEA                     	;# 
  1035  0FEB                     	;# 
  1036  0FED                     	;# 
  1037  0FEE                     	;# 
  1038  0FEF                     	;# 
  1039  0000                     	;# 
  1040  0001                     	;# 
  1041  0002                     	;# 
  1042  0003                     	;# 
  1043  0004                     	;# 
  1044  0005                     	;# 
  1045  0006                     	;# 
  1046  0007                     	;# 
  1047  0008                     	;# 
  1048  0009                     	;# 
  1049  000A                     	;# 
  1050  000B                     	;# 
  1051  000C                     	;# 
  1052  000D                     	;# 
  1053  000E                     	;# 
  1054  0010                     	;# 
  1055  0011                     	;# 
  1056  0012                     	;# 
  1057  0015                     	;# 
  1058  0016                     	;# 
  1059  0016                     	;# 
  1060  0017                     	;# 
  1061  0018                     	;# 
  1062  0019                     	;# 
  1063  001A                     	;# 
  1064  001B                     	;# 
  1065  001C                     	;# 
  1066  008C                     	;# 
  1067  008D                     	;# 
  1068  008E                     	;# 
  1069  0090                     	;# 
  1070  0091                     	;# 
  1071  0092                     	;# 
  1072  0095                     	;# 
  1073  0096                     	;# 
  1074  0097                     	;# 
  1075  0099                     	;# 
  1076  009A                     	;# 
  1077  009B                     	;# 
  1078  009B                     	;# 
  1079  009C                     	;# 
  1080  009D                     	;# 
  1081  009E                     	;# 
  1082  010C                     	;# 
  1083  010D                     	;# 
  1084  010E                     	;# 
  1085  0116                     	;# 
  1086  0117                     	;# 
  1087  011D                     	;# 
  1088  018C                     	;# 
  1089  018D                     	;# 
  1090  018E                     	;# 
  1091  0191                     	;# 
  1092  0191                     	;# 
  1093  0192                     	;# 
  1094  0193                     	;# 
  1095  0193                     	;# 
  1096  0194                     	;# 
  1097  0195                     	;# 
  1098  0196                     	;# 
  1099  0197                     	;# 
  1100  0199                     	;# 
  1101  019A                     	;# 
  1102  019B                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019C                     	;# 
  1107  019C                     	;# 
  1108  019D                     	;# 
  1109  019E                     	;# 
  1110  019F                     	;# 
  1111  020D                     	;# 
  1112  0210                     	;# 
  1113  0211                     	;# 
  1114  0211                     	;# 
  1115  0212                     	;# 
  1116  0212                     	;# 
  1117  0213                     	;# 
  1118  0213                     	;# 
  1119  0214                     	;# 
  1120  0214                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0216                     	;# 
  1125  0216                     	;# 
  1126  0217                     	;# 
  1127  0217                     	;# 
  1128  0291                     	;# 
  1129  0291                     	;# 
  1130  0292                     	;# 
  1131  0293                     	;# 
  1132  0298                     	;# 
  1133  0298                     	;# 
  1134  0299                     	;# 
  1135  029A                     	;# 
  1136  0394                     	;# 
  1137  0395                     	;# 
  1138  0396                     	;# 
  1139  0FE4                     	;# 
  1140  0FE5                     	;# 
  1141  0FE6                     	;# 
  1142  0FE7                     	;# 
  1143  0FE8                     	;# 
  1144  0FE9                     	;# 
  1145  0FEA                     	;# 
  1146  0FEB                     	;# 
  1147  0FED                     	;# 
  1148  0FEE                     	;# 
  1149  0FEF                     	;# 
  1150  0000                     	;# 
  1151  0001                     	;# 
  1152  0002                     	;# 
  1153  0003                     	;# 
  1154  0004                     	;# 
  1155  0005                     	;# 
  1156  0006                     	;# 
  1157  0007                     	;# 
  1158  0008                     	;# 
  1159  0009                     	;# 
  1160  000A                     	;# 
  1161  000B                     	;# 
  1162  000C                     	;# 
  1163  000D                     	;# 
  1164  000E                     	;# 
  1165  0010                     	;# 
  1166  0011                     	;# 
  1167  0012                     	;# 
  1168  0015                     	;# 
  1169  0016                     	;# 
  1170  0016                     	;# 
  1171  0017                     	;# 
  1172  0018                     	;# 
  1173  0019                     	;# 
  1174  001A                     	;# 
  1175  001B                     	;# 
  1176  001C                     	;# 
  1177  008C                     	;# 
  1178  008D                     	;# 
  1179  008E                     	;# 
  1180  0090                     	;# 
  1181  0091                     	;# 
  1182  0092                     	;# 
  1183  0095                     	;# 
  1184  0096                     	;# 
  1185  0097                     	;# 
  1186  0099                     	;# 
  1187  009A                     	;# 
  1188  009B                     	;# 
  1189  009B                     	;# 
  1190  009C                     	;# 
  1191  009D                     	;# 
  1192  009E                     	;# 
  1193  010C                     	;# 
  1194  010D                     	;# 
  1195  010E                     	;# 
  1196  0116                     	;# 
  1197  0117                     	;# 
  1198  011D                     	;# 
  1199  018C                     	;# 
  1200  018D                     	;# 
  1201  018E                     	;# 
  1202  0191                     	;# 
  1203  0191                     	;# 
  1204  0192                     	;# 
  1205  0193                     	;# 
  1206  0193                     	;# 
  1207  0194                     	;# 
  1208  0195                     	;# 
  1209  0196                     	;# 
  1210  0197                     	;# 
  1211  0199                     	;# 
  1212  019A                     	;# 
  1213  019B                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019C                     	;# 
  1218  019C                     	;# 
  1219  019D                     	;# 
  1220  019E                     	;# 
  1221  019F                     	;# 
  1222  020D                     	;# 
  1223  0210                     	;# 
  1224  0211                     	;# 
  1225  0211                     	;# 
  1226  0212                     	;# 
  1227  0212                     	;# 
  1228  0213                     	;# 
  1229  0213                     	;# 
  1230  0214                     	;# 
  1231  0214                     	;# 
  1232  0215                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0216                     	;# 
  1236  0216                     	;# 
  1237  0217                     	;# 
  1238  0217                     	;# 
  1239  0291                     	;# 
  1240  0291                     	;# 
  1241  0292                     	;# 
  1242  0293                     	;# 
  1243  0298                     	;# 
  1244  0298                     	;# 
  1245  0299                     	;# 
  1246  029A                     	;# 
  1247  0394                     	;# 
  1248  0395                     	;# 
  1249  0396                     	;# 
  1250  0FE4                     	;# 
  1251  0FE5                     	;# 
  1252  0FE6                     	;# 
  1253  0FE7                     	;# 
  1254  0FE8                     	;# 
  1255  0FE9                     	;# 
  1256  0FEA                     	;# 
  1257  0FEB                     	;# 
  1258  0FED                     	;# 
  1259  0FEE                     	;# 
  1260  0FEF                     	;# 
  1261  0000                     	;# 
  1262  0001                     	;# 
  1263  0002                     	;# 
  1264  0003                     	;# 
  1265  0004                     	;# 
  1266  0005                     	;# 
  1267  0006                     	;# 
  1268  0007                     	;# 
  1269  0008                     	;# 
  1270  0009                     	;# 
  1271  000A                     	;# 
  1272  000B                     	;# 
  1273  000C                     	;# 
  1274  000D                     	;# 
  1275  000E                     	;# 
  1276  0010                     	;# 
  1277  0011                     	;# 
  1278  0012                     	;# 
  1279  0015                     	;# 
  1280  0016                     	;# 
  1281  0016                     	;# 
  1282  0017                     	;# 
  1283  0018                     	;# 
  1284  0019                     	;# 
  1285  001A                     	;# 
  1286  001B                     	;# 
  1287  001C                     	;# 
  1288  008C                     	;# 
  1289  008D                     	;# 
  1290  008E                     	;# 
  1291  0090                     	;# 
  1292  0091                     	;# 
  1293  0092                     	;# 
  1294  0095                     	;# 
  1295  0096                     	;# 
  1296  0097                     	;# 
  1297  0099                     	;# 
  1298  009A                     	;# 
  1299  009B                     	;# 
  1300  009B                     	;# 
  1301  009C                     	;# 
  1302  009D                     	;# 
  1303  009E                     	;# 
  1304  010C                     	;# 
  1305  010D                     	;# 
  1306  010E                     	;# 
  1307  0116                     	;# 
  1308  0117                     	;# 
  1309  011D                     	;# 
  1310  018C                     	;# 
  1311  018D                     	;# 
  1312  018E                     	;# 
  1313  0191                     	;# 
  1314  0191                     	;# 
  1315  0192                     	;# 
  1316  0193                     	;# 
  1317  0193                     	;# 
  1318  0194                     	;# 
  1319  0195                     	;# 
  1320  0196                     	;# 
  1321  0197                     	;# 
  1322  0199                     	;# 
  1323  019A                     	;# 
  1324  019B                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019C                     	;# 
  1329  019C                     	;# 
  1330  019D                     	;# 
  1331  019E                     	;# 
  1332  019F                     	;# 
  1333  020D                     	;# 
  1334  0210                     	;# 
  1335  0211                     	;# 
  1336  0211                     	;# 
  1337  0212                     	;# 
  1338  0212                     	;# 
  1339  0213                     	;# 
  1340  0213                     	;# 
  1341  0214                     	;# 
  1342  0214                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0216                     	;# 
  1347  0216                     	;# 
  1348  0217                     	;# 
  1349  0217                     	;# 
  1350  0291                     	;# 
  1351  0291                     	;# 
  1352  0292                     	;# 
  1353  0293                     	;# 
  1354  0298                     	;# 
  1355  0298                     	;# 
  1356  0299                     	;# 
  1357  029A                     	;# 
  1358  0394                     	;# 
  1359  0395                     	;# 
  1360  0396                     	;# 
  1361  0FE4                     	;# 
  1362  0FE5                     	;# 
  1363  0FE6                     	;# 
  1364  0FE7                     	;# 
  1365  0FE8                     	;# 
  1366  0FE9                     	;# 
  1367  0FEA                     	;# 
  1368  0FEB                     	;# 
  1369  0FED                     	;# 
  1370  0FEE                     	;# 
  1371  0FEF                     	;# 
  1372  0000                     	;# 
  1373  0001                     	;# 
  1374  0002                     	;# 
  1375  0003                     	;# 
  1376  0004                     	;# 
  1377  0005                     	;# 
  1378  0006                     	;# 
  1379  0007                     	;# 
  1380  0008                     	;# 
  1381  0009                     	;# 
  1382  000A                     	;# 
  1383  000B                     	;# 
  1384  000C                     	;# 
  1385  000D                     	;# 
  1386  000E                     	;# 
  1387  0010                     	;# 
  1388  0011                     	;# 
  1389  0012                     	;# 
  1390  0015                     	;# 
  1391  0016                     	;# 
  1392  0016                     	;# 
  1393  0017                     	;# 
  1394  0018                     	;# 
  1395  0019                     	;# 
  1396  001A                     	;# 
  1397  001B                     	;# 
  1398  001C                     	;# 
  1399  008C                     	;# 
  1400  008D                     	;# 
  1401  008E                     	;# 
  1402  0090                     	;# 
  1403  0091                     	;# 
  1404  0092                     	;# 
  1405  0095                     	;# 
  1406  0096                     	;# 
  1407  0097                     	;# 
  1408  0099                     	;# 
  1409  009A                     	;# 
  1410  009B                     	;# 
  1411  009B                     	;# 
  1412  009C                     	;# 
  1413  009D                     	;# 
  1414  009E                     	;# 
  1415  010C                     	;# 
  1416  010D                     	;# 
  1417  010E                     	;# 
  1418  0116                     	;# 
  1419  0117                     	;# 
  1420  011D                     	;# 
  1421  018C                     	;# 
  1422  018D                     	;# 
  1423  018E                     	;# 
  1424  0191                     	;# 
  1425  0191                     	;# 
  1426  0192                     	;# 
  1427  0193                     	;# 
  1428  0193                     	;# 
  1429  0194                     	;# 
  1430  0195                     	;# 
  1431  0196                     	;# 
  1432  0197                     	;# 
  1433  0199                     	;# 
  1434  019A                     	;# 
  1435  019B                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019C                     	;# 
  1440  019C                     	;# 
  1441  019D                     	;# 
  1442  019E                     	;# 
  1443  019F                     	;# 
  1444  020D                     	;# 
  1445  0210                     	;# 
  1446  0211                     	;# 
  1447  0211                     	;# 
  1448  0212                     	;# 
  1449  0212                     	;# 
  1450  0213                     	;# 
  1451  0213                     	;# 
  1452  0214                     	;# 
  1453  0214                     	;# 
  1454  0215                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0216                     	;# 
  1458  0216                     	;# 
  1459  0217                     	;# 
  1460  0217                     	;# 
  1461  0291                     	;# 
  1462  0291                     	;# 
  1463  0292                     	;# 
  1464  0293                     	;# 
  1465  0298                     	;# 
  1466  0298                     	;# 
  1467  0299                     	;# 
  1468  029A                     	;# 
  1469  0394                     	;# 
  1470  0395                     	;# 
  1471  0396                     	;# 
  1472  0FE4                     	;# 
  1473  0FE5                     	;# 
  1474  0FE6                     	;# 
  1475  0FE7                     	;# 
  1476  0FE8                     	;# 
  1477  0FE9                     	;# 
  1478  0FEA                     	;# 
  1479  0FEB                     	;# 
  1480  0FED                     	;# 
  1481  0FEE                     	;# 
  1482  0FEF                     	;# 
  1483  0000                     	;# 
  1484  0001                     	;# 
  1485  0002                     	;# 
  1486  0003                     	;# 
  1487  0004                     	;# 
  1488  0005                     	;# 
  1489  0006                     	;# 
  1490  0007                     	;# 
  1491  0008                     	;# 
  1492  0009                     	;# 
  1493  000A                     	;# 
  1494  000B                     	;# 
  1495  000C                     	;# 
  1496  000D                     	;# 
  1497  000E                     	;# 
  1498  0010                     	;# 
  1499  0011                     	;# 
  1500  0012                     	;# 
  1501  0015                     	;# 
  1502  0016                     	;# 
  1503  0016                     	;# 
  1504  0017                     	;# 
  1505  0018                     	;# 
  1506  0019                     	;# 
  1507  001A                     	;# 
  1508  001B                     	;# 
  1509  001C                     	;# 
  1510  008C                     	;# 
  1511  008D                     	;# 
  1512  008E                     	;# 
  1513  0090                     	;# 
  1514  0091                     	;# 
  1515  0092                     	;# 
  1516  0095                     	;# 
  1517  0096                     	;# 
  1518  0097                     	;# 
  1519  0099                     	;# 
  1520  009A                     	;# 
  1521  009B                     	;# 
  1522  009B                     	;# 
  1523  009C                     	;# 
  1524  009D                     	;# 
  1525  009E                     	;# 
  1526  010C                     	;# 
  1527  010D                     	;# 
  1528  010E                     	;# 
  1529  0116                     	;# 
  1530  0117                     	;# 
  1531  011D                     	;# 
  1532  018C                     	;# 
  1533  018D                     	;# 
  1534  018E                     	;# 
  1535  0191                     	;# 
  1536  0191                     	;# 
  1537  0192                     	;# 
  1538  0193                     	;# 
  1539  0193                     	;# 
  1540  0194                     	;# 
  1541  0195                     	;# 
  1542  0196                     	;# 
  1543  0197                     	;# 
  1544  0199                     	;# 
  1545  019A                     	;# 
  1546  019B                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019C                     	;# 
  1551  019C                     	;# 
  1552  019D                     	;# 
  1553  019E                     	;# 
  1554  019F                     	;# 
  1555  020D                     	;# 
  1556  0210                     	;# 
  1557  0211                     	;# 
  1558  0211                     	;# 
  1559  0212                     	;# 
  1560  0212                     	;# 
  1561  0213                     	;# 
  1562  0213                     	;# 
  1563  0214                     	;# 
  1564  0214                     	;# 
  1565  0215                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0216                     	;# 
  1569  0216                     	;# 
  1570  0217                     	;# 
  1571  0217                     	;# 
  1572  0291                     	;# 
  1573  0291                     	;# 
  1574  0292                     	;# 
  1575  0293                     	;# 
  1576  0298                     	;# 
  1577  0298                     	;# 
  1578  0299                     	;# 
  1579  029A                     	;# 
  1580  0394                     	;# 
  1581  0395                     	;# 
  1582  0396                     	;# 
  1583  0FE4                     	;# 
  1584  0FE5                     	;# 
  1585  0FE6                     	;# 
  1586  0FE7                     	;# 
  1587  0FE8                     	;# 
  1588  0FE9                     	;# 
  1589  0FEA                     	;# 
  1590  0FEB                     	;# 
  1591  0FED                     	;# 
  1592  0FEE                     	;# 
  1593  0FEF                     	;# 
  1594  0000                     	;# 
  1595  0001                     	;# 
  1596  0002                     	;# 
  1597  0003                     	;# 
  1598  0004                     	;# 
  1599  0005                     	;# 
  1600  0006                     	;# 
  1601  0007                     	;# 
  1602  0008                     	;# 
  1603  0009                     	;# 
  1604  000A                     	;# 
  1605  000B                     	;# 
  1606  000C                     	;# 
  1607  000D                     	;# 
  1608  000E                     	;# 
  1609  0010                     	;# 
  1610  0011                     	;# 
  1611  0012                     	;# 
  1612  0015                     	;# 
  1613  0016                     	;# 
  1614  0016                     	;# 
  1615  0017                     	;# 
  1616  0018                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  008C                     	;# 
  1622  008D                     	;# 
  1623  008E                     	;# 
  1624  0090                     	;# 
  1625  0091                     	;# 
  1626  0092                     	;# 
  1627  0095                     	;# 
  1628  0096                     	;# 
  1629  0097                     	;# 
  1630  0099                     	;# 
  1631  009A                     	;# 
  1632  009B                     	;# 
  1633  009B                     	;# 
  1634  009C                     	;# 
  1635  009D                     	;# 
  1636  009E                     	;# 
  1637  010C                     	;# 
  1638  010D                     	;# 
  1639  010E                     	;# 
  1640  0116                     	;# 
  1641  0117                     	;# 
  1642  011D                     	;# 
  1643  018C                     	;# 
  1644  018D                     	;# 
  1645  018E                     	;# 
  1646  0191                     	;# 
  1647  0191                     	;# 
  1648  0192                     	;# 
  1649  0193                     	;# 
  1650  0193                     	;# 
  1651  0194                     	;# 
  1652  0195                     	;# 
  1653  0196                     	;# 
  1654  0197                     	;# 
  1655  0199                     	;# 
  1656  019A                     	;# 
  1657  019B                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019C                     	;# 
  1662  019C                     	;# 
  1663  019D                     	;# 
  1664  019E                     	;# 
  1665  019F                     	;# 
  1666  020D                     	;# 
  1667  0210                     	;# 
  1668  0211                     	;# 
  1669  0211                     	;# 
  1670  0212                     	;# 
  1671  0212                     	;# 
  1672  0213                     	;# 
  1673  0213                     	;# 
  1674  0214                     	;# 
  1675  0214                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0216                     	;# 
  1680  0216                     	;# 
  1681  0217                     	;# 
  1682  0217                     	;# 
  1683  0291                     	;# 
  1684  0291                     	;# 
  1685  0292                     	;# 
  1686  0293                     	;# 
  1687  0298                     	;# 
  1688  0298                     	;# 
  1689  0299                     	;# 
  1690  029A                     	;# 
  1691  0394                     	;# 
  1692  0395                     	;# 
  1693  0396                     	;# 
  1694  0FE4                     	;# 
  1695  0FE5                     	;# 
  1696  0FE6                     	;# 
  1697  0FE7                     	;# 
  1698  0FE8                     	;# 
  1699  0FE9                     	;# 
  1700  0FEA                     	;# 
  1701  0FEB                     	;# 
  1702  0FED                     	;# 
  1703  0FEE                     	;# 
  1704  0FEF                     	;# 
  1705  0000                     	;# 
  1706  0001                     	;# 
  1707  0002                     	;# 
  1708  0003                     	;# 
  1709  0004                     	;# 
  1710  0005                     	;# 
  1711  0006                     	;# 
  1712  0007                     	;# 
  1713  0008                     	;# 
  1714  0009                     	;# 
  1715  000A                     	;# 
  1716  000B                     	;# 
  1717  000C                     	;# 
  1718  000D                     	;# 
  1719  000E                     	;# 
  1720  0010                     	;# 
  1721  0011                     	;# 
  1722  0012                     	;# 
  1723  0015                     	;# 
  1724  0016                     	;# 
  1725  0016                     	;# 
  1726  0017                     	;# 
  1727  0018                     	;# 
  1728  0019                     	;# 
  1729  001A                     	;# 
  1730  001B                     	;# 
  1731  001C                     	;# 
  1732  008C                     	;# 
  1733  008D                     	;# 
  1734  008E                     	;# 
  1735  0090                     	;# 
  1736  0091                     	;# 
  1737  0092                     	;# 
  1738  0095                     	;# 
  1739  0096                     	;# 
  1740  0097                     	;# 
  1741  0099                     	;# 
  1742  009A                     	;# 
  1743  009B                     	;# 
  1744  009B                     	;# 
  1745  009C                     	;# 
  1746  009D                     	;# 
  1747  009E                     	;# 
  1748  010C                     	;# 
  1749  010D                     	;# 
  1750  010E                     	;# 
  1751  0116                     	;# 
  1752  0117                     	;# 
  1753  011D                     	;# 
  1754  018C                     	;# 
  1755  018D                     	;# 
  1756  018E                     	;# 
  1757  0191                     	;# 
  1758  0191                     	;# 
  1759  0192                     	;# 
  1760  0193                     	;# 
  1761  0193                     	;# 
  1762  0194                     	;# 
  1763  0195                     	;# 
  1764  0196                     	;# 
  1765  0197                     	;# 
  1766  0199                     	;# 
  1767  019A                     	;# 
  1768  019B                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019C                     	;# 
  1773  019C                     	;# 
  1774  019D                     	;# 
  1775  019E                     	;# 
  1776  019F                     	;# 
  1777  020D                     	;# 
  1778  0210                     	;# 
  1779  0211                     	;# 
  1780  0211                     	;# 
  1781  0212                     	;# 
  1782  0212                     	;# 
  1783  0213                     	;# 
  1784  0213                     	;# 
  1785  0214                     	;# 
  1786  0214                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0216                     	;# 
  1791  0216                     	;# 
  1792  0217                     	;# 
  1793  0217                     	;# 
  1794  0291                     	;# 
  1795  0291                     	;# 
  1796  0292                     	;# 
  1797  0293                     	;# 
  1798  0298                     	;# 
  1799  0298                     	;# 
  1800  0299                     	;# 
  1801  029A                     	;# 
  1802  0394                     	;# 
  1803  0395                     	;# 
  1804  0396                     	;# 
  1805  0FE4                     	;# 
  1806  0FE5                     	;# 
  1807  0FE6                     	;# 
  1808  0FE7                     	;# 
  1809  0FE8                     	;# 
  1810  0FE9                     	;# 
  1811  0FEA                     	;# 
  1812  0FEB                     	;# 
  1813  0FED                     	;# 
  1814  0FEE                     	;# 
  1815  0FEF                     	;# 
  1816  0000                     	;# 
  1817  0001                     	;# 
  1818  0002                     	;# 
  1819  0003                     	;# 
  1820  0004                     	;# 
  1821  0005                     	;# 
  1822  0006                     	;# 
  1823  0007                     	;# 
  1824  0008                     	;# 
  1825  0009                     	;# 
  1826  000A                     	;# 
  1827  000B                     	;# 
  1828  000C                     	;# 
  1829  000D                     	;# 
  1830  000E                     	;# 
  1831  0010                     	;# 
  1832  0011                     	;# 
  1833  0012                     	;# 
  1834  0015                     	;# 
  1835  0016                     	;# 
  1836  0016                     	;# 
  1837  0017                     	;# 
  1838  0018                     	;# 
  1839  0019                     	;# 
  1840  001A                     	;# 
  1841  001B                     	;# 
  1842  001C                     	;# 
  1843  008C                     	;# 
  1844  008D                     	;# 
  1845  008E                     	;# 
  1846  0090                     	;# 
  1847  0091                     	;# 
  1848  0092                     	;# 
  1849  0095                     	;# 
  1850  0096                     	;# 
  1851  0097                     	;# 
  1852  0099                     	;# 
  1853  009A                     	;# 
  1854  009B                     	;# 
  1855  009B                     	;# 
  1856  009C                     	;# 
  1857  009D                     	;# 
  1858  009E                     	;# 
  1859  010C                     	;# 
  1860  010D                     	;# 
  1861  010E                     	;# 
  1862  0116                     	;# 
  1863  0117                     	;# 
  1864  011D                     	;# 
  1865  018C                     	;# 
  1866  018D                     	;# 
  1867  018E                     	;# 
  1868  0191                     	;# 
  1869  0191                     	;# 
  1870  0192                     	;# 
  1871  0193                     	;# 
  1872  0193                     	;# 
  1873  0194                     	;# 
  1874  0195                     	;# 
  1875  0196                     	;# 
  1876  0197                     	;# 
  1877  0199                     	;# 
  1878  019A                     	;# 
  1879  019B                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019C                     	;# 
  1884  019C                     	;# 
  1885  019D                     	;# 
  1886  019E                     	;# 
  1887  019F                     	;# 
  1888  020D                     	;# 
  1889  0210                     	;# 
  1890  0211                     	;# 
  1891  0211                     	;# 
  1892  0212                     	;# 
  1893  0212                     	;# 
  1894  0213                     	;# 
  1895  0213                     	;# 
  1896  0214                     	;# 
  1897  0214                     	;# 
  1898  0215                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0216                     	;# 
  1902  0216                     	;# 
  1903  0217                     	;# 
  1904  0217                     	;# 
  1905  0291                     	;# 
  1906  0291                     	;# 
  1907  0292                     	;# 
  1908  0293                     	;# 
  1909  0298                     	;# 
  1910  0298                     	;# 
  1911  0299                     	;# 
  1912  029A                     	;# 
  1913  0394                     	;# 
  1914  0395                     	;# 
  1915  0396                     	;# 
  1916  0FE4                     	;# 
  1917  0FE5                     	;# 
  1918  0FE6                     	;# 
  1919  0FE7                     	;# 
  1920  0FE8                     	;# 
  1921  0FE9                     	;# 
  1922  0FEA                     	;# 
  1923  0FEB                     	;# 
  1924  0FED                     	;# 
  1925  0FEE                     	;# 
  1926  0FEF                     	;# 
  1927  0000                     	;# 
  1928  0001                     	;# 
  1929  0002                     	;# 
  1930  0003                     	;# 
  1931  0004                     	;# 
  1932  0005                     	;# 
  1933  0006                     	;# 
  1934  0007                     	;# 
  1935  0008                     	;# 
  1936  0009                     	;# 
  1937  000A                     	;# 
  1938  000B                     	;# 
  1939  000C                     	;# 
  1940  000D                     	;# 
  1941  000E                     	;# 
  1942  0010                     	;# 
  1943  0011                     	;# 
  1944  0012                     	;# 
  1945  0015                     	;# 
  1946  0016                     	;# 
  1947  0016                     	;# 
  1948  0017                     	;# 
  1949  0018                     	;# 
  1950  0019                     	;# 
  1951  001A                     	;# 
  1952  001B                     	;# 
  1953  001C                     	;# 
  1954  008C                     	;# 
  1955  008D                     	;# 
  1956  008E                     	;# 
  1957  0090                     	;# 
  1958  0091                     	;# 
  1959  0092                     	;# 
  1960  0095                     	;# 
  1961  0096                     	;# 
  1962  0097                     	;# 
  1963  0099                     	;# 
  1964  009A                     	;# 
  1965  009B                     	;# 
  1966  009B                     	;# 
  1967  009C                     	;# 
  1968  009D                     	;# 
  1969  009E                     	;# 
  1970  010C                     	;# 
  1971  010D                     	;# 
  1972  010E                     	;# 
  1973  0116                     	;# 
  1974  0117                     	;# 
  1975  011D                     	;# 
  1976  018C                     	;# 
  1977  018D                     	;# 
  1978  018E                     	;# 
  1979  0191                     	;# 
  1980  0191                     	;# 
  1981  0192                     	;# 
  1982  0193                     	;# 
  1983  0193                     	;# 
  1984  0194                     	;# 
  1985  0195                     	;# 
  1986  0196                     	;# 
  1987  0197                     	;# 
  1988  0199                     	;# 
  1989  019A                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019C                     	;# 
  1995  019C                     	;# 
  1996  019D                     	;# 
  1997  019E                     	;# 
  1998  019F                     	;# 
  1999  020D                     	;# 
  2000  0210                     	;# 
  2001  0211                     	;# 
  2002  0211                     	;# 
  2003  0212                     	;# 
  2004  0212                     	;# 
  2005  0213                     	;# 
  2006  0213                     	;# 
  2007  0214                     	;# 
  2008  0214                     	;# 
  2009  0215                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0216                     	;# 
  2013  0216                     	;# 
  2014  0217                     	;# 
  2015  0217                     	;# 
  2016  0291                     	;# 
  2017  0291                     	;# 
  2018  0292                     	;# 
  2019  0293                     	;# 
  2020  0298                     	;# 
  2021  0298                     	;# 
  2022  0299                     	;# 
  2023  029A                     	;# 
  2024  0394                     	;# 
  2025  0395                     	;# 
  2026  0396                     	;# 
  2027  0FE4                     	;# 
  2028  0FE5                     	;# 
  2029  0FE6                     	;# 
  2030  0FE7                     	;# 
  2031  0FE8                     	;# 
  2032  0FE9                     	;# 
  2033  0FEA                     	;# 
  2034  0FEB                     	;# 
  2035  0FED                     	;# 
  2036  0FEE                     	;# 
  2037  0FEF                     	;# 
  2038                           
  2039                           	psect	idataBANK3
  2040  150A                     __pidataBANK3:	
  2041                           
  2042                           ;initializer for __product
  2043  150A  3463               	retlw	99
  2044  150B  3402               	retlw	2
  2045  150C  3400               	retlw	0
  2046  150D  3400               	retlw	0
  2047  150E  3400               	retlw	0
  2048  150F  3400               	retlw	0
  2049  1510  3400               	retlw	0
  2050  1511  3400               	retlw	0
  2051  1512  3400               	retlw	0
  2052  1513  3400               	retlw	0
  2053  1514  3400               	retlw	0
  2054  1515  3400               	retlw	0
  2055  1516  34FF               	retlw	255
  2056  1517  34FF               	retlw	255
  2057  1518  34FF               	retlw	255
  2058  1519  3400               	retlw	0
  2059  151A  3400               	retlw	0
  2060  151B  3400               	retlw	0
  2061  151C  3400               	retlw	0
  2062  151D  3400               	retlw	0
  2063  151E  3400               	retlw	0
  2064  151F  3400               	retlw	0
  2065  1520  3400               	retlw	0
  2066  1521  3400               	retlw	0
  2067  1522  3400               	retlw	0
  2068  1523  3400               	retlw	0
  2069  1524  3400               	retlw	0
  2070  1525  3400               	retlw	0
  2071  1526  3400               	retlw	0
  2072  1527  3400               	retlw	0
  2073  1528  3400               	retlw	0
  2074  1529  3400               	retlw	0
  2075                           
  2076                           	psect	stringtext
  2077  1000                     __pstringtext:	
  2078  1000                     _CC2500_registers_address:	
  2079  1000  3403               	retlw	3
  2080  1001  3416               	retlw	22
  2081  1002  3417               	retlw	23
  2082  1003  341E               	retlw	30
  2083  1004  341F               	retlw	31
  2084  1005  3420               	retlw	32
  2085  1006  342A               	retlw	42
  2086  1007  342B               	retlw	43
  2087  1008  340B               	retlw	11
  2088  1009  340C               	retlw	12
  2089  100A  340D               	retlw	13
  2090  100B  340E               	retlw	14
  2091  100C  340F               	retlw	15
  2092  100D  3410               	retlw	16
  2093  100E  3411               	retlw	17
  2094  100F  3412               	retlw	18
  2095  1010  3413               	retlw	19
  2096  1011  3414               	retlw	20
  2097  1012  340A               	retlw	10
  2098  1013  3415               	retlw	21
  2099  1014  3421               	retlw	33
  2100  1015  3422               	retlw	34
  2101  1016  3418               	retlw	24
  2102  1017  3419               	retlw	25
  2103  1018  341A               	retlw	26
  2104  1019  341B               	retlw	27
  2105  101A  341C               	retlw	28
  2106  101B  341D               	retlw	29
  2107  101C  3423               	retlw	35
  2108  101D  3424               	retlw	36
  2109  101E  3425               	retlw	37
  2110  101F  3426               	retlw	38
  2111  1020  3429               	retlw	41
  2112  1021  342C               	retlw	44
  2113  1022  342D               	retlw	45
  2114  1023  342E               	retlw	46
  2115  1024  3400               	retlw	0
  2116  1025  3401               	retlw	1
  2117  1026  3402               	retlw	2
  2118  1027  3407               	retlw	7
  2119  1028  3408               	retlw	8
  2120  1029  3409               	retlw	9
  2121  102A  3406               	retlw	6
  2122  102B  3404               	retlw	4
  2123  102C  3405               	retlw	5
  2124  102D  3427               	retlw	39
  2125  102E  3428               	retlw	40
  2126  102F                     __end_of_CC2500_registers_address:	
  2127  102F                     _CC2500_rfSettings:	
  2128  102F  3407               	retlw	7
  2129  1030  3407               	retlw	7
  2130  1031  3430               	retlw	48
  2131  1032  3487               	retlw	135
  2132  1033  346B               	retlw	107
  2133  1034  34F8               	retlw	248
  2134  1035  347F               	retlw	127
  2135  1036  343F               	retlw	63
  2136  1037  3409               	retlw	9
  2137  1038  3400               	retlw	0
  2138  1039  345C               	retlw	92
  2139  103A  34A7               	retlw	167
  2140  103B  3462               	retlw	98
  2141  103C  3486               	retlw	134
  2142  103D  3483               	retlw	131
  2143  103E  3403               	retlw	3
  2144  103F  3422               	retlw	34
  2145  1040  34F8               	retlw	248
  2146  1041  3400               	retlw	0
  2147  1042  3444               	retlw	68
  2148  1043  34B6               	retlw	182
  2149  1044  3410               	retlw	16
  2150  1045  3418               	retlw	24
  2151  1046  341D               	retlw	29
  2152  1047  341C               	retlw	28
  2153  1048  34C7               	retlw	199
  2154  1049  3400               	retlw	0
  2155  104A  34B2               	retlw	178
  2156  104B  34EA               	retlw	234
  2157  104C  340A               	retlw	10
  2158  104D  3400               	retlw	0
  2159  104E  3411               	retlw	17
  2160  104F  3459               	retlw	89
  2161  1050  3488               	retlw	136
  2162  1051  3431               	retlw	49
  2163  1052  340B               	retlw	11
  2164  1053  342F               	retlw	47
  2165  1054  342E               	retlw	46
  2166  1055  3406               	retlw	6
  2167  1056  3404               	retlw	4
  2168  1057  3405               	retlw	5
  2169  1058  3400               	retlw	0
  2170  1059  3430               	retlw	48
  2171  105A  34D3               	retlw	211
  2172  105B  3491               	retlw	145
  2173  105C  3441               	retlw	65
  2174  105D  3400               	retlw	0
  2175  105E                     __end_of_CC2500_rfSettings:	
  2176  105E                     _CC2500_patable_vaule:	
  2177  105E  34FE               	retlw	254
  2178  105F  34FE               	retlw	254
  2179  1060  34FE               	retlw	254
  2180  1061  34FE               	retlw	254
  2181  1062  34FE               	retlw	254
  2182  1063  34FE               	retlw	254
  2183  1064  34FE               	retlw	254
  2184  1065  34FE               	retlw	254
  2185  1066                     __end_of_CC2500_patable_vaule:	
  2186                           
  2187                           	psect	nvBANK0
  2188  006E                     __pnvBANK0:	
  2189  006E                     _product:	
  2190  006E                     	ds	1
  2191  000C                     _PORTA	set	12
  2192  000D                     _PORTB	set	13
  2193  000E                     _PORTC	set	14
  2194  0018                     _T1CON	set	24
  2195  0017                     _TMR1H	set	23
  2196  0016                     _TMR1L	set	22
  2197  005F                     _GIE	set	95
  2198  005B                     _IOCIE	set	91
  2199  0058                     _IOCIF	set	88
  2200  005E                     _PEIE	set	94
  2201  0060                     _RA0	set	96
  2202  0063                     _RA3	set	99
  2203  0064                     _RA4	set	100
  2204  0066                     _RA6	set	102
  2205  0067                     _RA7	set	103
  2206  0068                     _RB0	set	104
  2207  0069                     _RB1	set	105
  2208  006A                     _RB2	set	106
  2209  006B                     _RB3	set	107
  2210  006D                     _RB5	set	109
  2211  0070                     _RC0	set	112
  2212  0071                     _RC1	set	113
  2213  0072                     _RC2	set	114
  2214  0074                     _RC4	set	116
  2215  0075                     _RC5	set	117
  2216  0077                     _RC7	set	119
  2217  0088                     _TMR1IF	set	136
  2218  009D                     _ADCON0	set	157
  2219  009E                     _ADCON1	set	158
  2220  009C                     _ADRESH	set	156
  2221  009B                     _ADRESL	set	155
  2222  0099                     _OSCCON	set	153
  2223  008C                     _TRISA	set	140
  2224  008D                     _TRISB	set	141
  2225  008E                     _TRISC	set	142
  2226  0097                     _WDTCON	set	151
  2227  04E9                     _GO_nDONE	set	1257
  2228  0488                     _TMR1IE	set	1160
  2229  0117                     _FVRCON	set	279
  2230  010C                     _LATA	set	268
  2231  010D                     _LATB	set	269
  2232  010E                     _LATC	set	270
  2233  018C                     _ANSELA	set	396
  2234  018D                     _ANSELB	set	397
  2235  018E                     _ANSELC	set	398
  2236  0192                     _PMADRH	set	402
  2237  0191                     _PMADRL	set	401
  2238  0196                     _PMCON2	set	406
  2239  0194                     _PMDATH	set	404
  2240  0193                     _PMDATL	set	403
  2241  0CAE                     _CFGS	set	3246
  2242  0CAC                     _FREE	set	3244
  2243  0CAD                     _LWLO	set	3245
  2244  0CA8                     _RD	set	3240
  2245  0CA9                     _WR	set	3241
  2246  0CAA                     _WREN	set	3242
  2247  020D                     _WPUB	set	525
  2248  0396                     _IOCBF	set	918
  2249  0395                     _IOCBN	set	917
  2250  0394                     _IOCBP	set	916
  2251  1CB2                     _IOCBF2	set	7346
  2252                           
  2253                           ; #config settings
  2254  0000                     
  2255                           	psect	cinit
  2256  0021                     start_initialization:	
  2257  0021                     __initialization:	
  2258                           
  2259                           ; Clear objects allocated to BITCOMMON
  2260  0021  01F9               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2261                           
  2262                           ; Clear objects allocated to COMMON
  2263  0022  01FA               	clrf	__pbssCOMMON& (0+127)
  2264  0023  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2265                           
  2266                           ; Clear objects allocated to BANK0
  2267  0024  01E8               	clrf	__pbssBANK0& (0+127)
  2268  0025  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  2269  0026  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  2270  0027  01EB               	clrf	(__pbssBANK0+3)& (0+127)
  2271  0028  01EC               	clrf	(__pbssBANK0+4)& (0+127)
  2272  0029  01ED               	clrf	(__pbssBANK0+5)& (0+127)
  2273                           
  2274                           ; Clear objects allocated to BANK1
  2275  002A  30A0               	movlw	low __pbssBANK1
  2276  002B  0084               	movwf	4
  2277  002C  3000               	movlw	high __pbssBANK1
  2278  002D  0085               	movwf	5
  2279  002E  3050               	movlw	80
  2280  002F  3191  214D  3180   	fcall	clear_ram0
  2281                           
  2282                           ; Clear objects allocated to BANK2
  2283  0032  3020               	movlw	low __pbssBANK2
  2284  0033  0084               	movwf	4
  2285  0034  3001               	movlw	high __pbssBANK2
  2286  0035  0085               	movwf	5
  2287  0036  304E               	movlw	78
  2288  0037  3191  214D  3180   	fcall	clear_ram0
  2289                           
  2290                           ; Clear objects allocated to BANK3
  2291  003A  30A0               	movlw	low __pbssBANK3
  2292  003B  0084               	movwf	4
  2293  003C  3001               	movlw	high __pbssBANK3
  2294  003D  0085               	movwf	5
  2295  003E  3025               	movlw	37
  2296  003F  3191  214D  3180   	fcall	clear_ram0
  2297                           
  2298                           ; Initialize objects allocated to BANK3
  2299  0042  300A               	movlw	low __pidataBANK3
  2300  0043  0084               	movwf	4
  2301  0044  3095               	movlw	(high __pidataBANK3)| (0+128)
  2302  0045  0085               	movwf	5
  2303  0046  30C5               	movlw	low __pdataBANK3
  2304  0047  0086               	movwf	6
  2305  0048  3001               	movlw	high __pdataBANK3
  2306  0049  0087               	movwf	7
  2307  004A  3020               	movlw	32
  2308  004B  3191  2147         	fcall	init_ram
  2309  004D                     end_of_initialization:	
  2310                           ;End of C runtime variable initialization code
  2311                           
  2312  004D                     __end_of__initialization:	
  2313  004D  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2314  004E  0020               	movlb	0
  2315  004F  3188  28DE         	ljmp	_main	;jump to C main() function
  2316                           
  2317                           	psect	bitbssCOMMON
  2318  03C8                     __pbitbssCOMMON:	
  2319  03C8                     _Receive_OK:	
  2320  03C8                     	ds	1
  2321  03C9                     _Transceive_OK:	
  2322  03C9                     	ds	1
  2323                           
  2324                           	psect	bssCOMMON
  2325  007A                     __pbssCOMMON:	
  2326  007A                     _LED:	
  2327  007A                     	ds	2
  2328                           
  2329                           	psect	bssBANK0
  2330  0068                     __pbssBANK0:	
  2331  0068                     _Cmd:	
  2332  0068                     	ds	1
  2333  0069                     _DelayOff:	
  2334  0069                     	ds	1
  2335  006A                     _DimmerLights:	
  2336  006A                     	ds	1
  2337  006B                     _SPI0Buffer:	
  2338  006B                     	ds	1
  2339  006C                     _Sw:	
  2340  006C                     	ds	1
  2341  006D                     _Tx_Length:	
  2342  006D                     	ds	1
  2343                           
  2344                           	psect	bssBANK1
  2345  00A0                     __pbssBANK1:	
  2346  00A0                     _DimmerIntr1:	
  2347  00A0                     	ds	16
  2348  00B0                     _RF1:	
  2349  00B0                     	ds	15
  2350  00BF                     _myMain:	
  2351  00BF                     	ds	13
  2352  00CC                     _Buz1:	
  2353  00CC                     	ds	12
  2354  00D8                     _Timer1:	
  2355  00D8                     	ds	3
  2356  00DB                     _RF_Count:	
  2357  00DB                     	ds	2
  2358  00DD                     _WDT:	
  2359  00DD                     	ds	2
  2360  00DF                     _CRC:	
  2361  00DF                     	ds	1
  2362  00E0                     _DimmerIntr:	
  2363  00E0                     	ds	1
  2364  00E1                     _Light:	
  2365  00E1                     	ds	1
  2366  00E2                     _RSSI:	
  2367  00E2                     	ds	1
  2368  00E3                     _Rx_Length:	
  2369  00E3                     	ds	1
  2370  00E4                     _SwDetect:	
  2371  00E4                     	ds	1
  2372  00E5                     _r_address:	
  2373  00E5                     	ds	1
  2374  00E6                     _r_data:	
  2375  00E6                     	ds	1
  2376  00E7                     _s_data:	
  2377  00E7                     	ds	1
  2378  00E8                     _VarErrLED:	
  2379  00E8                     	ds	4
  2380  00EC                     _VarLED1:	
  2381  00EC                     	ds	4
  2382                           
  2383                           	psect	bssBANK2
  2384  0120                     __pbssBANK2:	
  2385  0120                     _RF_Data:	
  2386  0120                     	ds	30
  2387  013E                     _u1:	
  2388  013E                     	ds	16
  2389  014E                     _Dimmer:	
  2390  014E                     	ds	5
  2391  0153                     _DimmerLights1:	
  2392  0153                     	ds	9
  2393  015C                     _Sw1:	
  2394  015C                     	ds	9
  2395  0165                     _DlySw1:	
  2396  0165                     	ds	5
  2397  016A                     _VarLED2:	
  2398  016A                     	ds	4
  2399                           
  2400                           	psect	bssBANK3
  2401  01A0                     __pbssBANK3:	
  2402  01A0                     _Memory:	
  2403  01A0                     	ds	37
  2404                           
  2405                           	psect	dataBANK3
  2406  01C5                     __pdataBANK3:	
  2407  01C5                     __product:	
  2408  01C5                     	ds	32
  2409                           
  2410                           	psect	clrtext
  2411  114D                     clear_ram0:	
  2412                           ;	Called with FSR0 containing the base address, and
  2413                           ;	WREG with the size to clear
  2414                           
  2415  114D  0064               	clrwdt	;clear the watchdog before getting into this loop
  2416  114E                     clrloop0:	
  2417  114E  0180               	clrf	0	;clear RAM location pointed to by FSR
  2418  114F  3101               	addfsr 0,1
  2419  1150  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2420  1151  294E               	goto	clrloop0	;have we reached the end yet?
  2421  1152  3400               	retlw	0	;all done for this memory range, return
  2422                           
  2423                           	psect	inittext
  2424  1147                     init_ram:	
  2425  1147  00FE               	movwf	126
  2426  1148                     initloop:	
  2427  1148  0012               	moviw fsr0++
  2428  1149  001E               	movwi fsr1++
  2429  114A  0BFE               	decfsz	126,f
  2430  114B  2948               	goto	initloop
  2431  114C  3400               	retlw	0
  2432                           
  2433                           	psect	cstackBANK3
  2434  01E5                     __pcstackBANK3:	
  2435  01E5                     ?_main:	
  2436  01E5                     main@argc:	
  2437                           ; 2 bytes @ 0x0
  2438                           
  2439                           
  2440                           ; 2 bytes @ 0x0
  2441  01E5                     	ds	2
  2442  01E7                     main@argv:	
  2443                           
  2444                           ; 2 bytes @ 0x2
  2445  01E7                     	ds	2
  2446                           
  2447                           	psect	cstackCOMMON
  2448  0070                     __pcstackCOMMON:	
  2449  0070                     ?_CC2500_WriteCommand:	
  2450  0070                     ?_RF_Timeout_Counter:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_setRF_TimeoutCleared:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_CC2500_WriteByte:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_ReadStatus:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_ReadByte:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_PowerRST:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_InitSetREG:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_InitPATable:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_ClearTXFIFO:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_ClearRXFIFO:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_FrequencyCabr:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_SIDLEMode:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_DlyOff_Initialization:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_DlyOff_Main:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_setDimmerLights_SwOn:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_setDimmerLights_SwOff:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setMemory_Modify:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setDimmerLights_Initialization:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_setDimmerLights_Main:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_DimmerLights_DimmingFunction:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_DimmerIntr_ValueCalculate:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_setDimmerLights_DimmingClose:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_setTxData:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_setRF_TransceiveGO:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_setLED_Initialization:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_setLED_Main:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_Fosc_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IO_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_TMR1_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_ADC_Set:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_IOC_Set:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_WDT_Set:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_TMR1_ISR:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_IOC_ISR:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_Timeout_Counter:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_set_TimeoutCleared:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_Flash_Memory_Write:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_Flash_Memory_Modify:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_WDT_Clearing:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setRF_Initialization:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setRF_Main:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_RF_RxDisable:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setData:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_getRxData:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_setLog_Code:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setControl_Lights_Table:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setRFSW_Control:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRFSW_AdjControl:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRF_AdjControl:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setSw_Initialization:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setSw_Main:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_myMain_Initialization:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_my_MainTimer:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Exception_Main:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Buzzer_Initialization:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_Buzzer_Main:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_CC2500_TxData:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_CC2500_RxData:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_CC2500_PowerOnInitial:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_DelayOffPointSelect:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_DelayOff_Initialization:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_DelayOff_Main:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DimmerIntr_Initialization:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DimmerLights_SelectPointer:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DimmerLights_Initialization:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_setDimmerLights_DimmingOn:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ?_DimmerLights_Main:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_DimmerLights_IOC_1:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ??_DimmerLights_IOC_1:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ?_DimmerLights_TMR_1:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ??_DimmerLights_TMR_1:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_LedPointSelect:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_LED_Initialization:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_LED_Main:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_Mcu_Initialization:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_ISR:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_Flash_Memory_Initialization:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_Flash_Memory_Main:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_Flash_Memory_Unlock:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_Flash_Memory_Erasing:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_setMemory_LoopSave:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_WDT_Main:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_RF_Initialization:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_RF_Main:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_setRF_Learn:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_TouchPower:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_SwPointSelect:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Switch_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_Switch_Main:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_getDimmerLights_Status:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_getDimmerLights_ValueToPercent:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0070                     ?_getDimmerLights_PercentToValue:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0070                     ?_getDimmerLights_Allow_Condition:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0070                     ?_getMain_All_LightsStatus:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0070                     ?_getCmd_Status:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0070                     ?_Flash_Memory_Read:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0070                     ?_getAll_Sw_KeyStatus:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0070                     ?_getRF_KeyStatus:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0070                     ?_getMain_All_Error_Status:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0070                     ?_getSw_KeyStatus:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0070                     ?_getDelayOff_GO:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0070                     ?_getDimmerIntr_DimmingValue:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0070                     setDimmerLights_Initialization@lights:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     getDimmerLights_Allow_Condition@lights:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     getSw_KeyStatus@sw:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     getMain_All_Error_Status@command:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771                           
  2772                           ; 1 bytes @ 0x0
  2773  0070                     	ds	1
  2774  0071                     ??_TMR1_ISR:	
  2775  0071                     ??_IOC_ISR:	
  2776                           ; 0 bytes @ 0x1
  2777                           
  2778  0071                     ??_ISR:	
  2779                           ; 0 bytes @ 0x1
  2780                           
  2781                           
  2782                           ; 0 bytes @ 0x1
  2783  0071                     	ds	1
  2784  0072                     ??_RF_Timeout_Counter:	
  2785  0072                     ??_setRF_TimeoutCleared:	
  2786                           ; 0 bytes @ 0x2
  2787                           
  2788  0072                     ??_CC2500_WriteByte:	
  2789                           ; 0 bytes @ 0x2
  2790                           
  2791  0072                     ??_CC2500_ReadByte:	
  2792                           ; 0 bytes @ 0x2
  2793                           
  2794  0072                     ?_DelayTime_1us:	
  2795                           ; 0 bytes @ 0x2
  2796                           
  2797  0072                     ??_setMemory_Modify:	
  2798                           ; 0 bytes @ 0x2
  2799                           
  2800  0072                     ??_setDimmerLights_Initialization:	
  2801                           ; 0 bytes @ 0x2
  2802                           
  2803  0072                     ??_getDimmerLights_Allow_Condition:	
  2804                           ; 0 bytes @ 0x2
  2805                           
  2806  0072                     ??_getMain_All_LightsStatus:	
  2807                           ; 0 bytes @ 0x2
  2808                           
  2809  0072                     ??_DimmerIntr_ValueCalculate:	
  2810                           ; 0 bytes @ 0x2
  2811                           
  2812  0072                     ??_getCmd_Status:	
  2813                           ; 0 bytes @ 0x2
  2814                           
  2815  0072                     ?_setCmd_Status:	
  2816                           ; 0 bytes @ 0x2
  2817                           
  2818  0072                     ??_setTxData:	
  2819                           ; 0 bytes @ 0x2
  2820                           
  2821  0072                     ??_setRF_TransceiveGO:	
  2822                           ; 0 bytes @ 0x2
  2823                           
  2824  0072                     ??_Fosc_Set:	
  2825                           ; 0 bytes @ 0x2
  2826                           
  2827  0072                     ??_IO_Set:	
  2828                           ; 0 bytes @ 0x2
  2829                           
  2830  0072                     ??_TMR1_Set:	
  2831                           ; 0 bytes @ 0x2
  2832                           
  2833  0072                     ??_ADC_Set:	
  2834                           ; 0 bytes @ 0x2
  2835                           
  2836  0072                     ??_IOC_Set:	
  2837                           ; 0 bytes @ 0x2
  2838                           
  2839  0072                     ??_WDT_Set:	
  2840                           ; 0 bytes @ 0x2
  2841                           
  2842  0072                     ??_Timeout_Counter:	
  2843                           ; 0 bytes @ 0x2
  2844                           
  2845  0072                     ??_set_TimeoutCleared:	
  2846                           ; 0 bytes @ 0x2
  2847                           
  2848  0072                     ??_Flash_Memory_Read:	
  2849                           ; 0 bytes @ 0x2
  2850                           
  2851  0072                     ?_setMemory_Data:	
  2852                           ; 0 bytes @ 0x2
  2853                           
  2854  0072                     ??_Flash_Memory_Write:	
  2855                           ; 0 bytes @ 0x2
  2856                           
  2857  0072                     ??_getAll_Sw_KeyStatus:	
  2858                           ; 0 bytes @ 0x2
  2859                           
  2860  0072                     ??_WDT_Clearing:	
  2861                           ; 0 bytes @ 0x2
  2862                           
  2863  0072                     ??_setRF_Initialization:	
  2864                           ; 0 bytes @ 0x2
  2865                           
  2866  0072                     ??_getRF_KeyStatus:	
  2867                           ; 0 bytes @ 0x2
  2868                           
  2869  0072                     ??_RF_RxDisable:	
  2870                           ; 0 bytes @ 0x2
  2871                           
  2872  0072                     ??_setData:	
  2873                           ; 0 bytes @ 0x2
  2874                           
  2875  0072                     ??_getMain_All_Error_Status:	
  2876                           ; 0 bytes @ 0x2
  2877                           
  2878  0072                     ??_getSw_KeyStatus:	
  2879                           ; 0 bytes @ 0x2
  2880                           
  2881  0072                     ??_myMain_Initialization:	
  2882                           ; 0 bytes @ 0x2
  2883                           
  2884  0072                     ??_Buzzer_Initialization:	
  2885                           ; 0 bytes @ 0x2
  2886                           
  2887  0072                     ??_Buzzer_Main:	
  2888                           ; 0 bytes @ 0x2
  2889                           
  2890  0072                     ??_DelayOffPointSelect:	
  2891                           ; 0 bytes @ 0x2
  2892                           
  2893  0072                     ?_setDimmerIntr_ControlStatus:	
  2894                           ; 0 bytes @ 0x2
  2895                           
  2896  0072                     ??_getDimmerIntr_DimmingValue:	
  2897                           ; 0 bytes @ 0x2
  2898                           
  2899  0072                     ?_setDimmerIntr_Dimming_Sw:	
  2900                           ; 0 bytes @ 0x2
  2901                           
  2902  0072                     ??_getDimmerIntr_Dimming_Sw:	
  2903                           ; 0 bytes @ 0x2
  2904                           
  2905  0072                     ?_setDimmerIntr_Dimming_RF:	
  2906                           ; 0 bytes @ 0x2
  2907                           
  2908  0072                     ??_DimmerLights_SelectPointer:	
  2909                           ; 0 bytes @ 0x2
  2910                           
  2911  0072                     ??_LedPointSelect:	
  2912                           ; 0 bytes @ 0x2
  2913                           
  2914  0072                     ??_Flash_Memory_Unlock:	
  2915                           ; 0 bytes @ 0x2
  2916                           
  2917  0072                     ??_Flash_Memory_Erasing:	
  2918                           ; 0 bytes @ 0x2
  2919                           
  2920  0072                     ??_setMemory_LoopSave:	
  2921                           ; 0 bytes @ 0x2
  2922                           
  2923  0072                     ??_WDT_Main:	
  2924                           ; 0 bytes @ 0x2
  2925                           
  2926  0072                     ??_setRF_Learn:	
  2927                           ; 0 bytes @ 0x2
  2928                           
  2929  0072                     ??_TouchPower:	
  2930                           ; 0 bytes @ 0x2
  2931                           
  2932  0072                     ??_SwPointSelect:	
  2933                           ; 0 bytes @ 0x2
  2934                           
  2935  0072                     ?___bmul:	
  2936                           ; 0 bytes @ 0x2
  2937                           
  2938  0072                     ?_getBuz_GO:	
  2939                           ; 1 bytes @ 0x2
  2940                           
  2941  0072                     ?___awdiv:	
  2942                           ; 2 bytes @ 0x2
  2943                           
  2944  0072                     ?___lwdiv:	
  2945                           ; 2 bytes @ 0x2
  2946                           
  2947  0072                     ?___ftpack:	
  2948                           ; 2 bytes @ 0x2
  2949                           
  2950  0072                     setDimmerIntr_ControlStatus@command:	
  2951                           ; 3 bytes @ 0x2
  2952                           
  2953  0072                     setDimmerIntr_Dimming_Sw@command:	
  2954                           ; 1 bytes @ 0x2
  2955                           
  2956  0072                     getDimmerIntr_Dimming_Sw@lights:	
  2957                           ; 1 bytes @ 0x2
  2958                           
  2959  0072                     setDimmerIntr_Dimming_RF@command:	
  2960                           ; 1 bytes @ 0x2
  2961                           
  2962  0072                     getDimmerLights_Allow_Condition@allow:	
  2963                           ; 1 bytes @ 0x2
  2964                           
  2965  0072                     LedPointSelect@led:	
  2966                           ; 1 bytes @ 0x2
  2967                           
  2968  0072                     setMemory_Data@data:	
  2969                           ; 1 bytes @ 0x2
  2970                           
  2971  0072                     getMain_All_LightsStatus@status:	
  2972                           ; 1 bytes @ 0x2
  2973                           
  2974  0072                     getMain_All_Error_Status@status:	
  2975                           ; 1 bytes @ 0x2
  2976                           
  2977  0072                     setCmd_Status@cmd:	
  2978                           ; 1 bytes @ 0x2
  2979                           
  2980  0072                     getCmd_Status@number:	
  2981                           ; 1 bytes @ 0x2
  2982                           
  2983  0072                     ___bmul@multiplicand:	
  2984                           ; 1 bytes @ 0x2
  2985                           
  2986  0072                     DelayTime_1us@count:	
  2987                           ; 1 bytes @ 0x2
  2988                           
  2989  0072                     ___awdiv@divisor:	
  2990                           ; 2 bytes @ 0x2
  2991                           
  2992  0072                     ___lwdiv@divisor:	
  2993                           ; 2 bytes @ 0x2
  2994                           
  2995  0072                     ___ftpack@arg:	
  2996                           ; 2 bytes @ 0x2
  2997                           
  2998                           
  2999                           ; 3 bytes @ 0x2
  3000  0072                     	ds	1
  3001  0073                     ?_setLED:	
  3002  0073                     ??_setCmd_Status:	
  3003                           ; 0 bytes @ 0x3
  3004                           
  3005  0073                     ??_setLED_Main:	
  3006                           ; 0 bytes @ 0x3
  3007                           
  3008  0073                     ??_setMemory_Data:	
  3009                           ; 0 bytes @ 0x3
  3010                           
  3011  0073                     ??_setDimmerIntr_ControlStatus:	
  3012                           ; 0 bytes @ 0x3
  3013                           
  3014  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3015                           ; 0 bytes @ 0x3
  3016                           
  3017  0073                     ??_setDimmerIntr_Dimming_RF:	
  3018                           ; 0 bytes @ 0x3
  3019                           
  3020  0073                     ??_Mcu_Initialization:	
  3021                           ; 0 bytes @ 0x3
  3022                           
  3023  0073                     ??_RF_Initialization:	
  3024                           ; 0 bytes @ 0x3
  3025                           
  3026  0073                     ??___bmul:	
  3027                           ; 0 bytes @ 0x3
  3028                           
  3029  0073                     CC2500_WriteByte@loop_a:	
  3030                           ; 0 bytes @ 0x3
  3031                           
  3032  0073                     CC2500_ReadByte@loop_b:	
  3033                           ; 1 bytes @ 0x3
  3034                           
  3035  0073                     DelayOffPointSelect@sw:	
  3036                           ; 1 bytes @ 0x3
  3037                           
  3038  0073                     getDimmerIntr_DimmingValue@lights:	
  3039                           ; 1 bytes @ 0x3
  3040                           
  3041  0073                     getDimmerIntr_Dimming_Sw@status:	
  3042                           ; 1 bytes @ 0x3
  3043                           
  3044  0073                     DimmerLights_SelectPointer@lights:	
  3045                           ; 1 bytes @ 0x3
  3046                           
  3047  0073                     DimmerIntr_ValueCalculate@lights:	
  3048                           ; 1 bytes @ 0x3
  3049                           
  3050  0073                     setLED@command:	
  3051                           ; 1 bytes @ 0x3
  3052                           
  3053  0073                     Flash_Memory_Read@i:	
  3054                           ; 1 bytes @ 0x3
  3055                           
  3056  0073                     Flash_Memory_Write@i:	
  3057                           ; 1 bytes @ 0x3
  3058                           
  3059  0073                     setMemory_Modify@command:	
  3060                           ; 1 bytes @ 0x3
  3061                           
  3062  0073                     setMemory_LoopSave@command:	
  3063                           ; 1 bytes @ 0x3
  3064                           
  3065  0073                     setRF_Learn@command:	
  3066                           ; 1 bytes @ 0x3
  3067                           
  3068  0073                     getRF_KeyStatus@key:	
  3069                           ; 1 bytes @ 0x3
  3070                           
  3071  0073                     setRF_TransceiveGO@command:	
  3072                           ; 1 bytes @ 0x3
  3073                           
  3074  0073                     SwPointSelect@sw:	
  3075                           ; 1 bytes @ 0x3
  3076                           
  3077  0073                     getSw_KeyStatus@status:	
  3078                           ; 1 bytes @ 0x3
  3079                           
  3080  0073                     getAll_Sw_KeyStatus@status:	
  3081                           ; 1 bytes @ 0x3
  3082                           
  3083  0073                     getCmd_Status@cmd:	
  3084                           ; 1 bytes @ 0x3
  3085                           
  3086                           
  3087                           ; 1 bytes @ 0x3
  3088  0073                     	ds	1
  3089  0074                     ??_CC2500_WriteCommand:	
  3090  0074                     ??_CC2500_ReadStatus:	
  3091                           ; 0 bytes @ 0x4
  3092                           
  3093  0074                     ??_DelayTime_1us:	
  3094                           ; 0 bytes @ 0x4
  3095                           
  3096  0074                     ?_CC2500_WriteREG:	
  3097                           ; 0 bytes @ 0x4
  3098                           
  3099  0074                     ??_DlyOff_Initialization:	
  3100                           ; 0 bytes @ 0x4
  3101                           
  3102  0074                     ??_getDimmerLights_Status:	
  3103                           ; 0 bytes @ 0x4
  3104                           
  3105  0074                     ??_setDimmerLights_SwOff:	
  3106                           ; 0 bytes @ 0x4
  3107                           
  3108  0074                     ??_DimmerLights_DimmingFunction:	
  3109                           ; 0 bytes @ 0x4
  3110                           
  3111  0074                     ??_setLED:	
  3112                           ; 0 bytes @ 0x4
  3113                           
  3114  0074                     ??_getBuz_GO:	
  3115                           ; 0 bytes @ 0x4
  3116                           
  3117  0074                     ??_getDelayOff_GO:	
  3118                           ; 0 bytes @ 0x4
  3119                           
  3120  0074                     ??_setDimmerLights_DimmingOn:	
  3121                           ; 0 bytes @ 0x4
  3122                           
  3123  0074                     ?_setDimmerLights_DimmingRun:	
  3124                           ; 0 bytes @ 0x4
  3125                           
  3126  0074                     CC2500_WriteREG@value:	
  3127                           ; 0 bytes @ 0x4
  3128                           
  3129  0074                     DlyOff_Initialization@sw:	
  3130                           ; 1 bytes @ 0x4
  3131                           
  3132  0074                     getDelayOff_GO@sw:	
  3133                           ; 1 bytes @ 0x4
  3134                           
  3135  0074                     setDimmerIntr_ControlStatus@lights:	
  3136                           ; 1 bytes @ 0x4
  3137                           
  3138  0074                     getDimmerIntr_DimmingValue@value:	
  3139                           ; 1 bytes @ 0x4
  3140                           
  3141  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3142                           ; 1 bytes @ 0x4
  3143                           
  3144  0074                     setDimmerIntr_Dimming_RF@lights:	
  3145                           ; 1 bytes @ 0x4
  3146                           
  3147  0074                     setDimmerLights_SwOff@sw:	
  3148                           ; 1 bytes @ 0x4
  3149                           
  3150  0074                     setDimmerLights_DimmingOn@sw:	
  3151                           ; 1 bytes @ 0x4
  3152                           
  3153  0074                     getDimmerLights_Status@lights:	
  3154                           ; 1 bytes @ 0x4
  3155                           
  3156  0074                     setDimmerLights_DimmingRun@command:	
  3157                           ; 1 bytes @ 0x4
  3158                           
  3159  0074                     setLED@led:	
  3160                           ; 1 bytes @ 0x4
  3161                           
  3162  0074                     Flash_Memory_Read@address:	
  3163                           ; 1 bytes @ 0x4
  3164                           
  3165  0074                     setMemory_Data@address:	
  3166                           ; 1 bytes @ 0x4
  3167                           
  3168  0074                     _getRF_KeyStatus$4966:	
  3169                           ; 1 bytes @ 0x4
  3170                           
  3171  0074                     _getSw_KeyStatus$6034:	
  3172                           ; 1 bytes @ 0x4
  3173                           
  3174  0074                     _getAll_Sw_KeyStatus$6037:	
  3175                           ; 1 bytes @ 0x4
  3176                           
  3177  0074                     setCmd_Status@number:	
  3178                           ; 1 bytes @ 0x4
  3179                           
  3180  0074                     ___bmul@product:	
  3181                           ; 1 bytes @ 0x4
  3182                           
  3183  0074                     DelayTime_1us@i:	
  3184                           ; 1 bytes @ 0x4
  3185                           
  3186  0074                     ___awdiv@dividend:	
  3187                           ; 2 bytes @ 0x4
  3188                           
  3189  0074                     ___lwdiv@dividend:	
  3190                           ; 2 bytes @ 0x4
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0x4
  3194  0074                     	ds	1
  3195  0075                     ??_CC2500_WriteREG:	
  3196  0075                     ??_setDimmerLights_DimmingClose:	
  3197                           ; 0 bytes @ 0x5
  3198                           
  3199  0075                     ??_setLED_Initialization:	
  3200                           ; 0 bytes @ 0x5
  3201                           
  3202  0075                     ??_setSw_Initialization:	
  3203                           ; 0 bytes @ 0x5
  3204                           
  3205  0075                     ??_Exception_Main:	
  3206                           ; 0 bytes @ 0x5
  3207                           
  3208  0075                     ??_DelayOff_Initialization:	
  3209                           ; 0 bytes @ 0x5
  3210                           
  3211  0075                     ??_setDimmerLights_DimmingRun:	
  3212                           ; 0 bytes @ 0x5
  3213                           
  3214  0075                     CC2500_WriteCommand@command:	
  3215                           ; 0 bytes @ 0x5
  3216                           
  3217  0075                     CC2500_ReadStatus@status_addr:	
  3218                           ; 1 bytes @ 0x5
  3219                           
  3220  0075                     getDelayOff_GO@go:	
  3221                           ; 1 bytes @ 0x5
  3222                           
  3223  0075                     getDimmerLights_Status@status:	
  3224                           ; 1 bytes @ 0x5
  3225                           
  3226  0075                     DimmerLights_DimmingFunction@lights:	
  3227                           ; 1 bytes @ 0x5
  3228                           
  3229  0075                     setLED_Initialization@led:	
  3230                           ; 1 bytes @ 0x5
  3231                           
  3232  0075                     setLED_Main@led:	
  3233                           ; 1 bytes @ 0x5
  3234                           
  3235  0075                     Flash_Memory_Read@ret:	
  3236                           ; 1 bytes @ 0x5
  3237                           
  3238  0075                     setSw_Initialization@sw:	
  3239                           ; 1 bytes @ 0x5
  3240                           
  3241  0075                     ___bmul@multiplier:	
  3242                           ; 1 bytes @ 0x5
  3243                           
  3244  0075                     ___ftpack@exp:	
  3245                           ; 1 bytes @ 0x5
  3246                           
  3247                           
  3248                           ; 1 bytes @ 0x5
  3249  0075                     	ds	1
  3250  0076                     ??_CC2500_ClearTXFIFO:	
  3251  0076                     ??_CC2500_ClearRXFIFO:	
  3252                           ; 0 bytes @ 0x6
  3253                           
  3254  0076                     ??_CC2500_SIDLEMode:	
  3255                           ; 0 bytes @ 0x6
  3256                           
  3257  0076                     ??_Flash_Memory_Modify:	
  3258                           ; 0 bytes @ 0x6
  3259                           
  3260  0076                     ??_setRF_AdjControl:	
  3261                           ; 0 bytes @ 0x6
  3262                           
  3263  0076                     ??_CC2500_TxData:	
  3264                           ; 0 bytes @ 0x6
  3265                           
  3266  0076                     ??_CC2500_RxData:	
  3267                           ; 0 bytes @ 0x6
  3268                           
  3269  0076                     ??_LED_Initialization:	
  3270                           ; 0 bytes @ 0x6
  3271                           
  3272  0076                     ??_LED_Main:	
  3273                           ; 0 bytes @ 0x6
  3274                           
  3275  0076                     ??_Flash_Memory_Initialization:	
  3276                           ; 0 bytes @ 0x6
  3277                           
  3278  0076                     ??_Switch_Initialization:	
  3279                           ; 0 bytes @ 0x6
  3280                           
  3281  0076                     ??___awdiv:	
  3282                           ; 0 bytes @ 0x6
  3283                           
  3284  0076                     ??___lwdiv:	
  3285                           ; 0 bytes @ 0x6
  3286                           
  3287  0076                     CC2500_WriteREG@w_addr:	
  3288                           ; 0 bytes @ 0x6
  3289                           
  3290  0076                     setDimmerLights_DimmingRun@lights:	
  3291                           ; 1 bytes @ 0x6
  3292                           
  3293  0076                     ___ftpack@sign:	
  3294                           ; 1 bytes @ 0x6
  3295                           
  3296  0076                     getBuz_GO@i:	
  3297                           ; 1 bytes @ 0x6
  3298                           
  3299  0076                     DelayTime_1us@j:	
  3300                           ; 2 bytes @ 0x6
  3301                           
  3302                           
  3303                           ; 2 bytes @ 0x6
  3304  0076                     	ds	1
  3305  0077                     ??_CC2500_InitSetREG:	
  3306  0077                     ??_CC2500_InitPATable:	
  3307                           ; 0 bytes @ 0x7
  3308                           
  3309  0077                     ??_setBuz:	
  3310                           ; 0 bytes @ 0x7
  3311                           
  3312  0077                     ??___awtoft:	
  3313                           ; 0 bytes @ 0x7
  3314                           
  3315  0077                     CC2500_TxData@loop_e:	
  3316                           ; 0 bytes @ 0x7
  3317                           
  3318  0077                     CC2500_RxData@loop_f:	
  3319                           ; 1 bytes @ 0x7
  3320                           
  3321  0077                     Flash_Memory_Initialization@value:	
  3322                           ; 1 bytes @ 0x7
  3323                           
  3324  0077                     Flash_Memory_Modify@i:	
  3325                           ; 1 bytes @ 0x7
  3326                           
  3327                           
  3328                           ; 1 bytes @ 0x7
  3329  0077                     	ds	1
  3330  0078                     ??_CC2500_PowerRST:	
  3331  0078                     ??_CC2500_FrequencyCabr:	
  3332                           ; 0 bytes @ 0x8
  3333                           
  3334  0078                     ??_Flash_Memory_Main:	
  3335                           ; 0 bytes @ 0x8
  3336                           
  3337  0078                     setBuz@count:	
  3338                           ; 0 bytes @ 0x8
  3339                           
  3340                           
  3341                           ; 1 bytes @ 0x8
  3342  0078                     	ds	1
  3343  0079                     ??_getDimmerLights_ValueToPercent:	
  3344  0079                     ??_setDimmerLights_Main:	
  3345                           ; 0 bytes @ 0x9
  3346                           
  3347  0079                     ??_setControl_Lights_Table:	
  3348                           ; 0 bytes @ 0x9
  3349                           
  3350  0079                     ??_CC2500_PowerOnInitial:	
  3351                           ; 0 bytes @ 0x9
  3352                           
  3353  0079                     ??_DelayOff_Main:	
  3354                           ; 0 bytes @ 0x9
  3355                           
  3356  0079                     ??_DimmerLights_Initialization:	
  3357                           ; 0 bytes @ 0x9
  3358                           
  3359  0079                     ??_DimmerLights_Main:	
  3360                           ; 0 bytes @ 0x9
  3361                           
  3362  0079                     ??_RF_Main:	
  3363                           ; 0 bytes @ 0x9
  3364                           
  3365  0079                     ??_Switch_Main:	
  3366                           ; 0 bytes @ 0x9
  3367                           
  3368  0079                     ??_main:	
  3369                           ; 0 bytes @ 0x9
  3370                           
  3371                           
  3372                           	psect	cstackBANK0
  3373  0020                     __pcstackBANK0:	
  3374                           ; 0 bytes @ 0x9
  3375                           
  3376  0020                     ??___ftpack:	
  3377  0020                     CC2500_InitSetREG@temp1:	
  3378                           ; 0 bytes @ 0x0
  3379                           
  3380  0020                     CC2500_InitPATable@temp:	
  3381                           ; 1 bytes @ 0x0
  3382                           
  3383  0020                     Flash_Memory_Main@key_Status:	
  3384                           ; 1 bytes @ 0x0
  3385                           
  3386  0020                     setRF_AdjControl@status:	
  3387                           ; 1 bytes @ 0x0
  3388                           
  3389  0020                     Exception_Main@lights:	
  3390                           ; 1 bytes @ 0x0
  3391                           
  3392  0020                     ___awdiv@counter:	
  3393                           ; 1 bytes @ 0x0
  3394                           
  3395  0020                     ___lwdiv@counter:	
  3396                           ; 1 bytes @ 0x0
  3397                           
  3398                           
  3399                           ; 1 bytes @ 0x0
  3400  0020                     	ds	1
  3401  0021                     CC2500_InitSetREG@temp2:	
  3402  0021                     CC2500_InitPATable@loop_d:	
  3403                           ; 1 bytes @ 0x1
  3404                           
  3405  0021                     _Flash_Memory_Main$3214:	
  3406                           ; 1 bytes @ 0x1
  3407                           
  3408  0021                     setRF_AdjControl@dimmingStatus:	
  3409                           ; 1 bytes @ 0x1
  3410                           
  3411  0021                     Exception_Main@count:	
  3412                           ; 1 bytes @ 0x1
  3413                           
  3414  0021                     ___awdiv@sign:	
  3415                           ; 1 bytes @ 0x1
  3416                           
  3417  0021                     ___lwdiv@quotient:	
  3418                           ; 1 bytes @ 0x1
  3419                           
  3420                           
  3421                           ; 2 bytes @ 0x1
  3422  0021                     	ds	1
  3423  0022                     CC2500_InitSetREG@loop_c:	
  3424  0022                     setRF_AdjControl@sw:	
  3425                           ; 1 bytes @ 0x2
  3426                           
  3427  0022                     Exception_Main@status:	
  3428                           ; 1 bytes @ 0x2
  3429                           
  3430  0022                     ___awdiv@quotient:	
  3431                           ; 1 bytes @ 0x2
  3432                           
  3433                           
  3434                           ; 2 bytes @ 0x2
  3435  0022                     	ds	1
  3436  0023                     ?___awtoft:	
  3437  0023                     Exception_Main@error:	
  3438                           ; 3 bytes @ 0x3
  3439                           
  3440  0023                     ___awtoft@c:	
  3441                           ; 1 bytes @ 0x3
  3442                           
  3443                           
  3444                           ; 2 bytes @ 0x3
  3445  0023                     	ds	1
  3446  0024                     ?_setBuz:	
  3447  0024                     setBuz@time:	
  3448                           ; 0 bytes @ 0x4
  3449                           
  3450                           
  3451                           ; 2 bytes @ 0x4
  3452  0024                     	ds	2
  3453  0026                     ??_setDimmerLights_SwOn:	
  3454  0026                     ??_my_MainTimer:	
  3455                           ; 0 bytes @ 0x6
  3456                           
  3457  0026                     ___awtoft@sign:	
  3458                           ; 0 bytes @ 0x6
  3459                           
  3460                           
  3461                           ; 1 bytes @ 0x6
  3462  0026                     	ds	1
  3463  0027                     ?___ftdiv:	
  3464  0027                     ?___ftmul:	
  3465                           ; 3 bytes @ 0x7
  3466                           
  3467  0027                     setDimmerLights_SwOn@idle:	
  3468                           ; 3 bytes @ 0x7
  3469                           
  3470  0027                     ___ftdiv@f2:	
  3471                           ; 1 bytes @ 0x7
  3472                           
  3473  0027                     ___ftmul@f1:	
  3474                           ; 3 bytes @ 0x7
  3475                           
  3476                           
  3477                           ; 3 bytes @ 0x7
  3478  0027                     	ds	1
  3479  0028                     setDimmerLights_SwOn@dimmingStatus:	
  3480                           
  3481                           ; 1 bytes @ 0x8
  3482  0028                     	ds	1
  3483  0029                     setDimmerLights_SwOn@sw:	
  3484                           
  3485                           ; 1 bytes @ 0x9
  3486  0029                     	ds	1
  3487  002A                     ??_setSw_Main:	
  3488  002A                     ___ftdiv@f1:	
  3489                           ; 0 bytes @ 0xA
  3490                           
  3491  002A                     ___ftmul@f2:	
  3492                           ; 3 bytes @ 0xA
  3493                           
  3494                           
  3495                           ; 3 bytes @ 0xA
  3496  002A                     	ds	2
  3497  002C                     setSw_Main@sw:	
  3498                           
  3499                           ; 1 bytes @ 0xC
  3500  002C                     	ds	1
  3501  002D                     ??___ftdiv:	
  3502  002D                     ??___ftmul:	
  3503                           ; 0 bytes @ 0xD
  3504                           
  3505                           
  3506                           ; 0 bytes @ 0xD
  3507  002D                     	ds	4
  3508  0031                     ___ftdiv@cntr:	
  3509  0031                     ___ftmul@exp:	
  3510                           ; 1 bytes @ 0x11
  3511                           
  3512                           
  3513                           ; 1 bytes @ 0x11
  3514  0031                     	ds	1
  3515  0032                     ___ftdiv@f3:	
  3516  0032                     ___ftmul@f3_as_product:	
  3517                           ; 3 bytes @ 0x12
  3518                           
  3519                           
  3520                           ; 3 bytes @ 0x12
  3521  0032                     	ds	3
  3522  0035                     ___ftdiv@exp:	
  3523  0035                     ___ftmul@cntr:	
  3524                           ; 1 bytes @ 0x15
  3525                           
  3526                           
  3527                           ; 1 bytes @ 0x15
  3528  0035                     	ds	1
  3529  0036                     ___ftdiv@sign:	
  3530  0036                     ___ftmul@sign:	
  3531                           ; 1 bytes @ 0x16
  3532                           
  3533                           
  3534                           ; 1 bytes @ 0x16
  3535  0036                     	ds	1
  3536  0037                     ?___ftadd:	
  3537  0037                     ___ftadd@f1:	
  3538                           ; 3 bytes @ 0x17
  3539                           
  3540                           
  3541                           ; 3 bytes @ 0x17
  3542  0037                     	ds	3
  3543  003A                     ___ftadd@f2:	
  3544                           
  3545                           ; 3 bytes @ 0x1A
  3546  003A                     	ds	3
  3547  003D                     ??___ftadd:	
  3548                           
  3549                           ; 0 bytes @ 0x1D
  3550  003D                     	ds	4
  3551  0041                     ___ftadd@sign:	
  3552                           
  3553                           ; 1 bytes @ 0x21
  3554  0041                     	ds	1
  3555  0042                     ___ftadd@exp2:	
  3556                           
  3557                           ; 1 bytes @ 0x22
  3558  0042                     	ds	1
  3559  0043                     ___ftadd@exp1:	
  3560                           
  3561                           ; 1 bytes @ 0x23
  3562  0043                     	ds	1
  3563  0044                     ?___fttol:	
  3564  0044                     ___fttol@f1:	
  3565                           ; 4 bytes @ 0x24
  3566                           
  3567                           
  3568                           ; 3 bytes @ 0x24
  3569  0044                     	ds	4
  3570  0048                     ??___fttol:	
  3571                           
  3572                           ; 0 bytes @ 0x28
  3573  0048                     	ds	4
  3574  004C                     ___fttol@sign1:	
  3575                           
  3576                           ; 1 bytes @ 0x2C
  3577  004C                     	ds	1
  3578  004D                     ___fttol@lval:	
  3579                           
  3580                           ; 4 bytes @ 0x2D
  3581  004D                     	ds	4
  3582  0051                     ___fttol@exp1:	
  3583                           
  3584                           ; 1 bytes @ 0x31
  3585  0051                     	ds	1
  3586  0052                     ??_getDimmerLights_PercentToValue:	
  3587  0052                     getDimmerLights_ValueToPercent@value:	
  3588                           ; 0 bytes @ 0x32
  3589                           
  3590                           
  3591                           ; 1 bytes @ 0x32
  3592  0052                     	ds	1
  3593  0053                     getDimmerLights_ValueToPercent@i:	
  3594                           
  3595                           ; 3 bytes @ 0x33
  3596  0053                     	ds	1
  3597  0054                     getDimmerLights_PercentToValue@value:	
  3598                           
  3599                           ; 1 bytes @ 0x34
  3600  0054                     	ds	1
  3601  0055                     getDimmerLights_PercentToValue@i:	
  3602                           
  3603                           ; 3 bytes @ 0x35
  3604  0055                     	ds	1
  3605  0056                     ?_setProductData:	
  3606  0056                     setProductData@value:	
  3607                           ; 0 bytes @ 0x36
  3608                           
  3609                           
  3610                           ; 1 bytes @ 0x36
  3611  0056                     	ds	1
  3612  0057                     ??_setProductData:	
  3613                           
  3614                           ; 0 bytes @ 0x37
  3615  0057                     	ds	1
  3616  0058                     ??_DimmerIntr_Initialization:	
  3617  0058                     ?_setDimmerIntr_DimmingValue:	
  3618                           ; 0 bytes @ 0x38
  3619                           
  3620  0058                     ?_setDimmerIntr_MaxmumValue:	
  3621                           ; 0 bytes @ 0x38
  3622                           
  3623  0058                     setDimmerIntr_DimmingValue@value:	
  3624                           ; 0 bytes @ 0x38
  3625                           
  3626  0058                     setDimmerIntr_MaxmumValue@value:	
  3627                           ; 1 bytes @ 0x38
  3628                           
  3629  0058                     setProductData@address:	
  3630                           ; 1 bytes @ 0x38
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x38
  3634  0058                     	ds	1
  3635  0059                     ??_DlyOff_Main:	
  3636  0059                     ?_setRF_DimmerLights:	
  3637                           ; 0 bytes @ 0x39
  3638                           
  3639  0059                     ??_setLog_Code:	
  3640                           ; 0 bytes @ 0x39
  3641                           
  3642  0059                     ?_setDelayOff_GO:	
  3643                           ; 0 bytes @ 0x39
  3644                           
  3645  0059                     ??_setDimmerIntr_DimmingValue:	
  3646                           ; 0 bytes @ 0x39
  3647                           
  3648  0059                     ??_setDimmerIntr_MaxmumValue:	
  3649                           ; 0 bytes @ 0x39
  3650                           
  3651  0059                     setDelayOff_GO@command:	
  3652                           ; 0 bytes @ 0x39
  3653                           
  3654  0059                     setRF_DimmerLights@on:	
  3655                           ; 1 bytes @ 0x39
  3656                           
  3657                           
  3658                           ; 1 bytes @ 0x39
  3659  0059                     	ds	1
  3660  005A                     ??_setRF_DimmerLights:	
  3661  005A                     setDelayOff_GO@value:	
  3662                           ; 0 bytes @ 0x3A
  3663                           
  3664  005A                     setDimmerIntr_DimmingValue@lights:	
  3665                           ; 1 bytes @ 0x3A
  3666                           
  3667  005A                     setDimmerIntr_MaxmumValue@lights:	
  3668                           ; 1 bytes @ 0x3A
  3669                           
  3670                           
  3671                           ; 1 bytes @ 0x3A
  3672  005A                     	ds	1
  3673  005B                     ??_setRFSW_AdjControl:	
  3674  005B                     ??_setDelayOff_GO:	
  3675                           ; 0 bytes @ 0x3B
  3676                           
  3677  005B                     DlyOff_Main@sw:	
  3678                           ; 0 bytes @ 0x3B
  3679                           
  3680                           
  3681                           ; 1 bytes @ 0x3B
  3682  005B                     	ds	1
  3683  005C                     setRF_DimmerLights@status:	
  3684                           
  3685                           ; 1 bytes @ 0x3C
  3686  005C                     	ds	1
  3687  005D                     setDelayOff_GO@i:	
  3688  005D                     setRFSW_AdjControl@status:	
  3689                           ; 1 bytes @ 0x3D
  3690                           
  3691  005D                     setRF_DimmerLights@lights:	
  3692                           ; 1 bytes @ 0x3D
  3693                           
  3694                           
  3695                           ; 1 bytes @ 0x3D
  3696  005D                     	ds	1
  3697  005E                     ?_setDimmerLights_Dimming:	
  3698  005E                     setDelayOff_GO@j:	
  3699                           ; 0 bytes @ 0x3E
  3700                           
  3701  005E                     setDimmerLights_Dimming@status:	
  3702                           ; 1 bytes @ 0x3E
  3703                           
  3704  005E                     setRFSW_AdjControl@sw:	
  3705                           ; 1 bytes @ 0x3E
  3706                           
  3707                           
  3708                           ; 1 bytes @ 0x3E
  3709  005E                     	ds	1
  3710  005F                     ??_setDimmerLights_Dimming:	
  3711  005F                     setDelayOff_GO@k:	
  3712                           ; 0 bytes @ 0x3F
  3713                           
  3714                           
  3715                           ; 1 bytes @ 0x3F
  3716  005F                     	ds	1
  3717  0060                     setDelayOff_GO@sw:	
  3718  0060                     setDimmerLights_Dimming@value:	
  3719                           ; 1 bytes @ 0x40
  3720                           
  3721                           
  3722                           ; 1 bytes @ 0x40
  3723  0060                     	ds	1
  3724  0061                     ?_setDimmerLights_OnOff:	
  3725  0061                     ??_setRFSW_Control:	
  3726                           ; 0 bytes @ 0x41
  3727                           
  3728  0061                     setDimmerLights_OnOff@command:	
  3729                           ; 0 bytes @ 0x41
  3730                           
  3731  0061                     setDimmerLights_Dimming@lights:	
  3732                           ; 1 bytes @ 0x41
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x41
  3736  0061                     	ds	1
  3737  0062                     ??_setDimmerLights_OnOff:	
  3738  0062                     setRFSW_Control@status:	
  3739                           ; 0 bytes @ 0x42
  3740                           
  3741                           
  3742                           ; 1 bytes @ 0x42
  3743  0062                     	ds	1
  3744  0063                     setRFSW_Control@sw:	
  3745                           
  3746                           ; 1 bytes @ 0x43
  3747  0063                     	ds	1
  3748  0064                     ??_getRxData:	
  3749  0064                     setDimmerLights_OnOff@lights:	
  3750                           ; 0 bytes @ 0x44
  3751                           
  3752                           
  3753                           ; 1 bytes @ 0x44
  3754  0064                     	ds	1
  3755  0065                     setDimmerLights_Main@lights:	
  3756  0065                     getRxData@error:	
  3757                           ; 1 bytes @ 0x45
  3758                           
  3759                           
  3760                           ; 1 bytes @ 0x45
  3761  0065                     	ds	1
  3762  0066                     ??_setRF_Main:	
  3763                           
  3764                           ; 0 bytes @ 0x46
  3765  0066                     	ds	1
  3766  0067                     setRF_Main@error:	
  3767                           
  3768                           ; 1 bytes @ 0x47
  3769  0067                     	ds	1
  3770                           
  3771                           	psect	maintext
  3772  08DE                     __pmaintext:	
  3773 ;;
  3774 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3775 ;;
  3776 ;; *************** function _main *****************
  3777 ;; Defined at:
  3778 ;;		line 6 in file "../src/main_B1.c"
  3779 ;; Parameters:    Size  Location     Type
  3780 ;;  argc            2    0[BANK3 ] int 
  3781 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;		None
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  2    0[BANK3 ] int 
  3786 ;; Registers used:
  3787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3788 ;; Tracked objects:
  3789 ;;		On entry : 17F/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3793 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3796 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3797 ;;Total ram usage:        4 bytes
  3798 ;; Hardware stack levels required when called:   11
  3799 ;; This function calls:
  3800 ;;		_Buzzer_Initialization
  3801 ;;		_Buzzer_Main
  3802 ;;		_CC2500_PowerOnInitial
  3803 ;;		_DelayOff_Initialization
  3804 ;;		_DelayOff_Main
  3805 ;;		_DimmerLights_Initialization
  3806 ;;		_DimmerLights_Main
  3807 ;;		_Exception_Main
  3808 ;;		_Flash_Memory_Initialization
  3809 ;;		_Flash_Memory_Main
  3810 ;;		_LED_Initialization
  3811 ;;		_LED_Main
  3812 ;;		_Mcu_Initialization
  3813 ;;		_RF_Initialization
  3814 ;;		_RF_Main
  3815 ;;		_Switch_Initialization
  3816 ;;		_Switch_Main
  3817 ;;		_WDT_Main
  3818 ;;		_myMain_Initialization
  3819 ;;		_my_MainTimer
  3820 ;; This function is called by:
  3821 ;;		Startup code after reset
  3822 ;; This function uses a non-reentrant model
  3823 ;;
  3824                           
  3825                           
  3826                           ;psect for function _main
  3827  08DE                     _main:	
  3828                           
  3829                           ;main_B1.c: 7: myMain_Initialization();
  3830                           
  3831                           ;incstack = 0
  3832                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3833  08DE  3192  2298  3188   	fcall	_myMain_Initialization
  3834                           
  3835                           ;main_B1.c: 8: Mcu_Initialization();
  3836  08E1  3193  236C  3188   	fcall	_Mcu_Initialization
  3837                           
  3838                           ;main_B1.c: 9: Flash_Memory_Initialization();
  3839  08E4  3182  22B8  3188   	fcall	_Flash_Memory_Initialization
  3840                           
  3841                           ;main_B1.c: 10: LED_Initialization();
  3842  08E7  3192  221F  3188   	fcall	_LED_Initialization
  3843                           
  3844                           ;main_B1.c: 11: Buzzer_Initialization();
  3845  08EA  3191  2109  3188   	fcall	_Buzzer_Initialization
  3846                           
  3847                           ;main_B1.c: 13: ;;
  3848                           ;main_B1.c: 14: ;;
  3849                           ;main_B1.c: 15: ;;
  3850                           ;main_B1.c: 16: ;;
  3851                           ;main_B1.c: 17: DelayOff_Initialization();
  3852  08ED  3191  2118  3188   	fcall	_DelayOff_Initialization
  3853                           
  3854                           ;main_B1.c: 19: DimmerLights_Initialization();
  3855  08F0  3191  2153  3188   	fcall	_DimmerLights_Initialization
  3856                           
  3857                           ;main_B1.c: 20: ;;
  3858                           ;main_B1.c: 21: ;;
  3859                           ;main_B1.c: 22: ;;
  3860                           ;main_B1.c: 23: Switch_Initialization();
  3861  08F3  3191  2134  3188   	fcall	_Switch_Initialization
  3862                           
  3863                           ;main_B1.c: 24: RF_Initialization();
  3864  08F6  3191  2112  3188   	fcall	_RF_Initialization
  3865                           
  3866                           ;main_B1.c: 25: CC2500_PowerOnInitial();
  3867  08F9  3194  240D  3188   	fcall	_CC2500_PowerOnInitial
  3868  08FC                     l2445:	
  3869                           ;main_B1.c: 26: ;;
  3870                           ;main_B1.c: 27: ;;
  3871                           ;main_B1.c: 29: while (1) {
  3872                           
  3873                           
  3874                           ;main_B1.c: 56: }
  3875                           ;main_B1.c: 92: if (Timer1.Timeout == 1) {
  3876  08FC  0021               	movlb	1	; select bank1
  3877  08FD  1C58               	btfss	_Timer1^(0+128),0
  3878  08FE  28FC               	goto	l2445
  3879                           
  3880                           ;main_B1.c: 93: Timer1.Timeout = 0;
  3881  08FF  1058               	bcf	_Timer1^(0+128),0
  3882                           
  3883                           ;main_B1.c: 95: my_MainTimer();
  3884  0900  3197  2743  3188   	fcall	_my_MainTimer
  3885                           
  3886                           ;main_B1.c: 96: WDT_Main();
  3887  0903  3193  2307  3188   	fcall	_WDT_Main
  3888                           
  3889                           ;main_B1.c: 97: ;;
  3890                           ;main_B1.c: 98: ;;
  3891                           ;main_B1.c: 99: if (myMain.PowerON == 1) {
  3892  0906  0021               	movlb	1	; select bank1
  3893  0907  1C3F               	btfss	_myMain^(0+128),0
  3894  0908  28FC               	goto	l2445
  3895                           
  3896                           ;main_B1.c: 100: Flash_Memory_Main();
  3897  0909  3197  27BF  3188   	fcall	_Flash_Memory_Main
  3898                           
  3899                           ;main_B1.c: 102: LED_Main();
  3900  090C  3192  222B  3188   	fcall	_LED_Main
  3901                           
  3902                           ;main_B1.c: 103: Buzzer_Main();
  3903  090F  3189  2122  3188   	fcall	_Buzzer_Main
  3904                           
  3905                           ;main_B1.c: 105: ;;
  3906                           ;main_B1.c: 106: ;;
  3907                           ;main_B1.c: 107: ;;
  3908                           ;main_B1.c: 108: ;;
  3909                           ;main_B1.c: 110: ;;
  3910                           ;main_B1.c: 111: DimmerLights_Main();
  3911  0912  3191  2177  3188   	fcall	_DimmerLights_Main
  3912                           
  3913                           ;main_B1.c: 112: Switch_Main();
  3914  0915  3191  2168  3188   	fcall	_Switch_Main
  3915                           
  3916                           ;main_B1.c: 113: ;;
  3917                           ;main_B1.c: 114: ;;
  3918                           ;main_B1.c: 116: RF_Main();
  3919  0918  3191  2115  3188   	fcall	_RF_Main
  3920                           
  3921                           ;main_B1.c: 117: DelayOff_Main();
  3922  091B  3191  211C  3188   	fcall	_DelayOff_Main
  3923                           
  3924                           ;main_B1.c: 118: ;;
  3925                           ;main_B1.c: 119: ;;
  3926                           ;main_B1.c: 120: Exception_Main();
  3927  091E  3196  26D2  3188   	fcall	_Exception_Main
  3928  0921  28FC               	goto	l2445
  3929  0922                     __end_of_main:	
  3930                           ;main_B1.c: 127: }
  3931                           ;main_B1.c: 128: }
  3932                           ;main_B1.c: 162: }
  3933                           ;main_B1.c: 163: return (0);
  3934                           ;	Return value of _main is never used
  3935                           
  3936                           
  3937                           	psect	text1
  3938  1743                     __ptext1:	
  3939 ;; *************** function _my_MainTimer *****************
  3940 ;; Defined at:
  3941 ;;		line 184 in file "../src/main_B1.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;		None
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;		None
  3946 ;; Return value:  Size  Location     Type
  3947 ;;		None               void
  3948 ;; Registers used:
  3949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3950 ;; Tracked objects:
  3951 ;;		On entry : 0/0
  3952 ;;		On exit  : 0/0
  3953 ;;		Unchanged: 0/0
  3954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;Total ram usage:        1 bytes
  3960 ;; Hardware stack levels used:    1
  3961 ;; Hardware stack levels required when called:    5
  3962 ;; This function calls:
  3963 ;;		_setBuz
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;; This function uses a non-reentrant model
  3967 ;;
  3968                           
  3969                           
  3970                           ;psect for function _my_MainTimer
  3971  1743                     _my_MainTimer:	
  3972                           
  3973                           ;main_B1.c: 186: if (myMain.PowerON == 0) {
  3974                           
  3975                           ;incstack = 0
  3976                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3977  1743  0021               	movlb	1	; select bank1
  3978  1744  183F               	btfsc	_myMain^(0+128),0
  3979  1745  2F5D               	goto	l9653
  3980                           
  3981                           ;main_B1.c: 187: myMain.PowerCount++;
  3982  1746  3001               	movlw	1
  3983  1747  0020               	movlb	0	; select bank0
  3984  1748  00A6               	movwf	??_my_MainTimer
  3985  1749  0826               	movf	??_my_MainTimer,w
  3986  174A  0021               	movlb	1	; select bank1
  3987  174B  07C0               	addwf	(_myMain^(0+128)+1),f
  3988                           
  3989                           ;main_B1.c: 188: if (myMain.PowerCount == (1500 / 20)) {
  3990  174C  0840               	movf	(_myMain^(0+128)+1),w
  3991  174D  3A4B               	xorlw	75
  3992  174E  1D03               	skipz
  3993  174F  0008               	return
  3994                           
  3995                           ;main_B1.c: 189: myMain.PowerCount = 0;
  3996  1750  01C0               	clrf	(_myMain^(0+128)+1)
  3997                           
  3998                           ;main_B1.c: 190: myMain.PowerON = 1;
  3999  1751  143F               	bsf	_myMain^(0+128),0
  4000                           
  4001                           ;main_B1.c: 195: setBuz(3, 50);
  4002  1752  3032               	movlw	50
  4003  1753  0020               	movlb	0	; select bank0
  4004  1754  00A4               	movwf	setBuz@time
  4005  1755  3000               	movlw	0
  4006  1756  00A5               	movwf	setBuz@time+1
  4007  1757  3003               	movlw	3
  4008  1758  318A  22E0         	fcall	_setBuz
  4009                           
  4010                           ;main_B1.c: 196: myMain.SelfTest = 1;
  4011  175A  0021               	movlb	1	; select bank1
  4012  175B  163F               	bsf	_myMain^(0+128),4
  4013                           
  4014                           ;main_B1.c: 205: }
  4015                           ;main_B1.c: 206: } else {
  4016  175C  0008               	return
  4017  175D                     l9653:	
  4018                           
  4019                           ;main_B1.c: 207: myMain.PowerCount++;
  4020  175D  3001               	movlw	1
  4021  175E  0020               	movlb	0	; select bank0
  4022  175F  00A6               	movwf	??_my_MainTimer
  4023  1760  0826               	movf	??_my_MainTimer,w
  4024  1761  0021               	movlb	1	; select bank1
  4025  1762  07C0               	addwf	(_myMain^(0+128)+1),f
  4026                           
  4027                           ;main_B1.c: 208: if (myMain.PowerCount == (1000 / 20)) {
  4028  1763  0840               	movf	(_myMain^(0+128)+1),w
  4029  1764  3A32               	xorlw	50
  4030  1765  1903               	btfsc	3,2
  4031                           
  4032                           ;main_B1.c: 209: myMain.PowerCount = 0;
  4033  1766  01C0               	clrf	(_myMain^(0+128)+1)
  4034                           
  4035                           ;main_B1.c: 231: }
  4036                           ;main_B1.c: 233: myMain.Count1++;
  4037  1767  3001               	movlw	1
  4038  1768  07C3               	addwf	(_myMain^(0+128)+4),f
  4039  1769  3000               	movlw	0
  4040  176A  3DC4               	addwfc	((_myMain+1)^(0+128)+4),f
  4041                           
  4042                           ;main_B1.c: 234: if (myMain.Count1 == (1000 / 20)) {
  4043  176B  3004               	movlw	4
  4044  176C  3EBF               	addlw	_myMain& (0+255)
  4045  176D  0086               	movwf	6
  4046  176E  0187               	clrf	7
  4047  176F  3F40               	moviw [0]fsr1
  4048  1770  3A32               	xorlw	50
  4049  1771  1D03               	skipz
  4050  1772  2F75               	goto	u10605
  4051  1773  3F41               	moviw [1]fsr1
  4052  1774  3A00               	xorlw	0
  4053  1775                     u10605:	
  4054  1775  1D03               	skipz
  4055  1776  0008               	return
  4056                           
  4057                           ;main_B1.c: 235: myMain.Count1 = 0;
  4058  1777  01C3               	clrf	(_myMain^(0+128)+4)
  4059  1778  01C4               	clrf	((_myMain+1)^(0+128)+4)
  4060                           
  4061                           ;main_B1.c: 247: if (myMain.Flag) {
  4062  1779  1CBF               	btfss	_myMain^(0+128),1
  4063  177A  2F7D               	goto	l2461
  4064                           
  4065                           ;main_B1.c: 248: myMain.Flag = 0;
  4066  177B  10BF               	bcf	_myMain^(0+128),1
  4067                           
  4068                           ;main_B1.c: 257: } else {
  4069  177C  0008               	return
  4070  177D                     l2461:	
  4071                           
  4072                           ;main_B1.c: 258: myMain.Flag = 1;
  4073  177D  14BF               	bsf	_myMain^(0+128),1
  4074  177E  0008               	return
  4075  177F                     __end_of_my_MainTimer:	
  4076                           
  4077                           	psect	text2
  4078  1298                     __ptext2:	
  4079 ;; *************** function _myMain_Initialization *****************
  4080 ;; Defined at:
  4081 ;;		line 169 in file "../src/main_B1.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;		None               void
  4088 ;; Registers used:
  4089 ;;		wreg, fsr1l, fsr1h
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;Total ram usage:        1 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    3
  4102 ;; This function calls:
  4103 ;;		Nothing
  4104 ;; This function is called by:
  4105 ;;		_main
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           
  4110                           ;psect for function _myMain_Initialization
  4111  1298                     _myMain_Initialization:	
  4112                           
  4113                           ;main_B1.c: 172: product = &_product;
  4114                           
  4115                           ;incstack = 0
  4116                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4117  1298  30C5               	movlw	__product& (0+255)
  4118  1299  00F2               	movwf	??_myMain_Initialization
  4119  129A  0872               	movf	??_myMain_Initialization,w
  4120  129B  0020               	movlb	0	; select bank0
  4121  129C  00EE               	movwf	_product
  4122                           
  4123                           ;main_B1.c: 173: product->Data[20] = 209;
  4124  129D  30D1               	movlw	209
  4125  129E  00F2               	movwf	??_myMain_Initialization
  4126  129F  086E               	movf	_product,w
  4127  12A0  3E14               	addlw	20
  4128  12A1  0086               	movwf	6
  4129  12A2  3001               	movlw	1	; select bank2/3
  4130  12A3  0087               	movwf	7
  4131  12A4  0872               	movf	??_myMain_Initialization,w
  4132  12A5  0081               	movwf	1
  4133  12A6  0008               	return
  4134  12A7                     __end_of_myMain_Initialization:	
  4135                           
  4136                           	psect	text3
  4137  1307                     __ptext3:	
  4138 ;; *************** function _WDT_Main *****************
  4139 ;; Defined at:
  4140 ;;		line 1121 in file "../src/MCU_B1.c"
  4141 ;; Parameters:    Size  Location     Type
  4142 ;;		None
  4143 ;; Auto vars:     Size  Location     Type
  4144 ;;		None
  4145 ;; Return value:  Size  Location     Type
  4146 ;;		None               void
  4147 ;; Registers used:
  4148 ;;		wreg, status,2, status,0, pclath, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;Total ram usage:        1 bytes
  4159 ;; Hardware stack levels used:    1
  4160 ;; Hardware stack levels required when called:    4
  4161 ;; This function calls:
  4162 ;;		_WDT_Clearing
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           
  4169                           ;psect for function _WDT_Main
  4170  1307                     _WDT_Main:	
  4171                           
  4172                           ;MCU_B1.c: 1122: if (WDT.Enable == 1) {
  4173                           
  4174                           ;incstack = 0
  4175                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4176  1307  0021               	movlb	1	; select bank1
  4177  1308  1C5D               	btfss	_WDT^(0+128),0
  4178  1309  0008               	return
  4179                           
  4180                           ;MCU_B1.c: 1123: if (WDT.Timer-- > 0) {
  4181  130A  3001               	movlw	1
  4182  130B  02DE               	subwf	(_WDT^(0+128)+1),f
  4183  130C  085E               	movf	(_WDT^(0+128)+1),w
  4184  130D  3AFF               	xorlw	255
  4185  130E  1903               	skipnz
  4186  130F  0008               	return
  4187                           
  4188                           ;MCU_B1.c: 1124: WDT.Timer = 100;
  4189  1310  3064               	movlw	100
  4190  1311  00F2               	movwf	??_WDT_Main
  4191  1312  0872               	movf	??_WDT_Main,w
  4192  1313  00DE               	movwf	(_WDT^(0+128)+1)
  4193                           
  4194                           ;MCU_B1.c: 1125: WDT_Clearing();
  4195  1314  3187  27FE         	fcall	_WDT_Clearing
  4196  1316  0008               	return
  4197  1317                     __end_of_WDT_Main:	
  4198                           
  4199                           	psect	text4
  4200  07FE                     __ptext4:	
  4201 ;; *************** function _WDT_Clearing *****************
  4202 ;; Defined at:
  4203 ;;		line 1131 in file "../src/MCU_B1.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;		None
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;		None
  4208 ;; Return value:  Size  Location     Type
  4209 ;;		None               void
  4210 ;; Registers used:
  4211 ;;		None
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4221 ;;Total ram usage:        0 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:    3
  4224 ;; This function calls:
  4225 ;;		Nothing
  4226 ;; This function is called by:
  4227 ;;		_WDT_Main
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           
  4232                           ;psect for function _WDT_Clearing
  4233  07FE                     _WDT_Clearing:	
  4234                           
  4235                           ;incstack = 0
  4236                           ; Regs used in _WDT_Clearing: []
  4237  07FE  0064               	clrwdt	;# 
  4238  07FF  0008               	return
  4239  0800                     __end_of_WDT_Clearing:	
  4240                           
  4241                           	psect	text5
  4242  1168                     __ptext5:	
  4243 ;; *************** function _Switch_Main *****************
  4244 ;; Defined at:
  4245 ;;		line 76 in file "../src/Switch_B1.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;		None
  4250 ;; Return value:  Size  Location     Type
  4251 ;;		None               void
  4252 ;; Registers used:
  4253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4263 ;;Total ram usage:        0 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    7
  4266 ;; This function calls:
  4267 ;;		_TouchPower
  4268 ;;		_setSw_Main
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           
  4275                           ;psect for function _Switch_Main
  4276  1168                     _Switch_Main:	
  4277                           
  4278                           ;Switch_B1.c: 79: setSw_Main(1);
  4279                           
  4280                           ;incstack = 0
  4281                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4282  1168  3001               	movlw	1
  4283  1169  3180  2051  3191   	fcall	_setSw_Main
  4284                           
  4285                           ;Switch_B1.c: 91: TouchPower();
  4286  116C  3188  2000         	fcall	_TouchPower
  4287  116E  0008               	return
  4288  116F                     __end_of_Switch_Main:	
  4289                           
  4290                           	psect	text6
  4291  0051                     __ptext6:	
  4292 ;; *************** function _setSw_Main *****************
  4293 ;; Defined at:
  4294 ;;		line 117 in file "../src/Switch_B1.c"
  4295 ;; Parameters:    Size  Location     Type
  4296 ;;  sw              1    wreg     unsigned char 
  4297 ;; Auto vars:     Size  Location     Type
  4298 ;;  sw              1   12[BANK0 ] unsigned char 
  4299 ;; Return value:  Size  Location     Type
  4300 ;;		None               void
  4301 ;; Registers used:
  4302 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4303 ;; Tracked objects:
  4304 ;;		On entry : 0/0
  4305 ;;		On exit  : 0/0
  4306 ;;		Unchanged: 0/0
  4307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4312 ;;Total ram usage:        3 bytes
  4313 ;; Hardware stack levels used:    1
  4314 ;; Hardware stack levels required when called:    6
  4315 ;; This function calls:
  4316 ;;		_SwPointSelect
  4317 ;;		_getMain_All_Error_Status
  4318 ;;		_getSw_KeyStatus
  4319 ;;		_setBuz
  4320 ;;		_setDimmerLights_DimmingOn
  4321 ;;		_setDimmerLights_SwOff
  4322 ;;		_setDimmerLights_SwOn
  4323 ;;		_setRF_Learn
  4324 ;; This function is called by:
  4325 ;;		_Switch_Main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _setSw_Main
  4331  0051                     _setSw_Main:	
  4332                           
  4333                           ;incstack = 0
  4334                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4335                           ;setSw_Main@sw stored from wreg
  4336  0051  0020               	movlb	0	; select bank0
  4337  0052  00AC               	movwf	setSw_Main@sw
  4338                           
  4339                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4340  0053  082C               	movf	setSw_Main@sw,w
  4341  0054  3191  21E4  3180   	fcall	_SwPointSelect
  4342                           
  4343                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4344  0057  0020               	movlb	0	; select bank0
  4345  0058  086C               	movf	_Sw,w
  4346  0059  0086               	movwf	6
  4347  005A  3001               	movlw	1	; select bank2/3
  4348  005B  0087               	movwf	7
  4349  005C  1C01               	btfss	1,0
  4350  005D  29B8               	goto	l2213
  4351                           
  4352                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4353  005E  3000               	movlw	0
  4354  005F  3191  210F  3180   	fcall	_getMain_All_Error_Status
  4355  0062  3800               	iorlw	0
  4356  0063  1D03               	skipz
  4357  0064  2880               	goto	l9541
  4358                           
  4359                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4360  0065  0020               	movlb	0	; select bank0
  4361  0066  0A6C               	incf	_Sw,w
  4362  0067  0086               	movwf	6
  4363  0068  3001               	movlw	1	; select bank2/3
  4364  0069  0087               	movwf	7
  4365  006A  1081               	bcf	1,1
  4366                           
  4367                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4368  006B  082C               	movf	setSw_Main@sw,w
  4369  006C  3193  234A  3180   	fcall	_getSw_KeyStatus
  4370  006F  3A01               	xorlw	1
  4371  0070  3000               	movlw	0
  4372  0071  1903               	skipnz
  4373  0072  3001               	movlw	1
  4374  0073  0020               	movlb	0	; select bank0
  4375  0074  00AA               	movwf	??_setSw_Main
  4376  0075  086C               	movf	_Sw,w
  4377  0076  0086               	movwf	6
  4378  0077  3001               	movlw	1	; select bank2/3
  4379  0078  0087               	movwf	7
  4380  0079  0DAA               	rlf	??_setSw_Main,f
  4381  007A  0801               	movf	1,w
  4382  007B  062A               	xorwf	??_setSw_Main,w
  4383  007C  39FD               	andlw	-3
  4384  007D  062A               	xorwf	??_setSw_Main,w
  4385  007E  0081               	movwf	1
  4386                           
  4387                           ;Switch_B1.c: 124: } else {
  4388  007F  2896               	goto	l2215
  4389  0080                     l9541:	
  4390                           
  4391                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4392  0080  0020               	movlb	0	; select bank0
  4393  0081  0A6C               	incf	_Sw,w
  4394  0082  0086               	movwf	6
  4395  0083  3001               	movlw	1	; select bank2/3
  4396  0084  0087               	movwf	7
  4397  0085  1881               	btfsc	1,1
  4398  0086  2896               	goto	l2215
  4399                           
  4400                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4401  0087  0A6C               	incf	_Sw,w
  4402  0088  0086               	movwf	6
  4403  0089  3001               	movlw	1	; select bank2/3
  4404  008A  0087               	movwf	7
  4405  008B  1481               	bsf	1,1
  4406                           
  4407                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4408  008C  086C               	movf	_Sw,w
  4409  008D  0086               	movwf	6
  4410  008E  3001               	movlw	1	; select bank2/3
  4411  008F  0087               	movwf	7
  4412  0090  1081               	bcf	1,1
  4413                           
  4414                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4415  0091  086C               	movf	_Sw,w
  4416  0092  0086               	movwf	6
  4417  0093  3001               	movlw	1	; select bank2/3
  4418  0094  0087               	movwf	7
  4419  0095  1501               	bsf	1,2
  4420  0096                     l2215:	
  4421                           
  4422                           ;Switch_B1.c: 130: }
  4423                           ;Switch_B1.c: 131: }
  4424                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4425  0096  086C               	movf	_Sw,w
  4426  0097  0086               	movwf	6
  4427  0098  3001               	movlw	1	; select bank2/3
  4428  0099  0087               	movwf	7
  4429  009A  1C81               	btfss	1,1
  4430  009B  2965               	goto	l9591
  4431                           
  4432                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4433  009C  086C               	movf	_Sw,w
  4434  009D  0086               	movwf	6
  4435  009E  3001               	movlw	1	; select bank2/3
  4436  009F  0087               	movwf	7
  4437  00A0  1901               	btfsc	1,2
  4438  00A1  28C3               	goto	l9557
  4439                           
  4440                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4441  00A2  3001               	movlw	1
  4442  00A3  00AA               	movwf	??_setSw_Main
  4443  00A4  086C               	movf	_Sw,w
  4444  00A5  3E02               	addlw	2
  4445  00A6  0086               	movwf	6
  4446  00A7  3001               	movlw	1	; select bank2/3
  4447  00A8  0087               	movwf	7
  4448  00A9  082A               	movf	??_setSw_Main,w
  4449  00AA  0781               	addwf	1,f
  4450                           
  4451                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (100 / 20)) {
  4452  00AB  086C               	movf	_Sw,w
  4453  00AC  3E02               	addlw	2
  4454  00AD  0086               	movwf	6
  4455  00AE  3001               	movlw	1	; select bank2/3
  4456  00AF  0087               	movwf	7
  4457  00B0  3005               	movlw	5
  4458  00B1  0201               	subwf	1,w
  4459  00B2  1C03               	skipc
  4460  00B3  0008               	return
  4461                           
  4462                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4463  00B4  086C               	movf	_Sw,w
  4464  00B5  3E02               	addlw	2
  4465  00B6  0086               	movwf	6
  4466  00B7  3001               	movlw	1	; select bank2/3
  4467  00B8  0087               	movwf	7
  4468  00B9  0181               	clrf	1
  4469                           
  4470                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4471  00BA  086C               	movf	_Sw,w
  4472  00BB  0086               	movwf	6
  4473  00BC  3001               	movlw	1	; select bank2/3
  4474  00BD  0087               	movwf	7
  4475  00BE  1501               	bsf	1,2
  4476                           
  4477                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  4478  00BF  082C               	movf	setSw_Main@sw,w
  4479  00C0  3189  21AE         	fcall	_setDimmerLights_SwOn
  4480                           
  4481                           ;Switch_B1.c: 147: }
  4482                           ;Switch_B1.c: 148: } else {
  4483  00C2  0008               	return
  4484  00C3                     l9557:	
  4485                           
  4486                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  4487  00C3  0020               	movlb	0	; select bank0
  4488  00C4  086C               	movf	_Sw,w
  4489  00C5  0086               	movwf	6
  4490  00C6  3001               	movlw	1	; select bank2/3
  4491  00C7  0087               	movwf	7
  4492  00C8  1981               	btfsc	1,3
  4493  00C9  28F5               	goto	l9567
  4494                           
  4495                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  4496  00CA  086C               	movf	_Sw,w
  4497  00CB  3E03               	addlw	3
  4498  00CC  0086               	movwf	6
  4499  00CD  3001               	movlw	1	; select bank2/3
  4500  00CE  0087               	movwf	7
  4501  00CF  3001               	movlw	1
  4502  00D0  0781               	addwf	1,f
  4503  00D1  3141               	addfsr 1,1
  4504  00D2  1803               	skipnc
  4505  00D3  0A81               	incf	1,f
  4506                           
  4507                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  4508  00D4  086C               	movf	_Sw,w
  4509  00D5  3E03               	addlw	3
  4510  00D6  0086               	movwf	6
  4511  00D7  3001               	movlw	1	; select bank2/3
  4512  00D8  0087               	movwf	7
  4513  00D9  3F40               	moviw [0]fsr1
  4514  00DA  00AA               	movwf	??_setSw_Main
  4515  00DB  3F41               	moviw [1]fsr1
  4516  00DC  00AB               	movwf	??_setSw_Main+1
  4517  00DD  3000               	movlw	0
  4518  00DE  022B               	subwf	??_setSw_Main+1,w
  4519  00DF  304B               	movlw	75
  4520  00E0  1903               	skipnz
  4521  00E1  022A               	subwf	??_setSw_Main,w
  4522  00E2  1C03               	skipc
  4523  00E3  0008               	return
  4524                           
  4525                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  4526  00E4  086C               	movf	_Sw,w
  4527  00E5  3E03               	addlw	3
  4528  00E6  0086               	movwf	6
  4529  00E7  3001               	movlw	1	; select bank2/3
  4530  00E8  0087               	movwf	7
  4531  00E9  3000               	movlw	0
  4532  00EA  3FC0               	movwi [0]fsr1
  4533  00EB  3FC1               	movwi [1]fsr1
  4534                           
  4535                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  4536  00EC  086C               	movf	_Sw,w
  4537  00ED  0086               	movwf	6
  4538  00EE  3001               	movlw	1	; select bank2/3
  4539  00EF  0087               	movwf	7
  4540  00F0  1581               	bsf	1,3
  4541                           
  4542                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  4543  00F1  082C               	movf	setSw_Main@sw,w
  4544  00F2  3195  25B4         	fcall	_setDimmerLights_DimmingOn
  4545                           
  4546                           ;Switch_B1.c: 162: }
  4547                           ;Switch_B1.c: 163: } else {
  4548  00F4  0008               	return
  4549  00F5                     l9567:	
  4550                           
  4551                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  4552  00F5  0020               	movlb	0	; select bank0
  4553  00F6  086C               	movf	_Sw,w
  4554  00F7  0086               	movwf	6
  4555  00F8  3001               	movlw	1	; select bank2/3
  4556  00F9  0087               	movwf	7
  4557  00FA  1A01               	btfsc	1,4
  4558  00FB  2933               	goto	l9581
  4559                           
  4560                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  4561  00FC  086C               	movf	_Sw,w
  4562  00FD  3E05               	addlw	5
  4563  00FE  0086               	movwf	6
  4564  00FF  3001               	movlw	1	; select bank2/3
  4565  0100  0087               	movwf	7
  4566  0101  3001               	movlw	1
  4567  0102  0781               	addwf	1,f
  4568  0103  3141               	addfsr 1,1
  4569  0104  1803               	skipnc
  4570  0105  0A81               	incf	1,f
  4571                           
  4572                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  4573  0106  086C               	movf	_Sw,w
  4574  0107  3E05               	addlw	5
  4575  0108  0086               	movwf	6
  4576  0109  3001               	movlw	1	; select bank2/3
  4577  010A  0087               	movwf	7
  4578  010B  3F40               	moviw [0]fsr1
  4579  010C  00AA               	movwf	??_setSw_Main
  4580  010D  3F41               	moviw [1]fsr1
  4581  010E  00AB               	movwf	??_setSw_Main+1
  4582  010F  3000               	movlw	0
  4583  0110  022B               	subwf	??_setSw_Main+1,w
  4584  0111  304B               	movlw	75
  4585  0112  1903               	skipnz
  4586  0113  022A               	subwf	??_setSw_Main,w
  4587  0114  1C03               	skipc
  4588  0115  0008               	return
  4589                           
  4590                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  4591  0116  086C               	movf	_Sw,w
  4592  0117  3E05               	addlw	5
  4593  0118  0086               	movwf	6
  4594  0119  3001               	movlw	1	; select bank2/3
  4595  011A  0087               	movwf	7
  4596  011B  3000               	movlw	0
  4597  011C  3FC0               	movwi [0]fsr1
  4598  011D  3FC1               	movwi [1]fsr1
  4599                           
  4600                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  4601  011E  086C               	movf	_Sw,w
  4602  011F  0086               	movwf	6
  4603  0120  3001               	movlw	1	; select bank2/3
  4604  0121  0087               	movwf	7
  4605  0122  1601               	bsf	1,4
  4606                           
  4607                           ;Switch_B1.c: 172: setRF_Learn(1);
  4608  0123  3001               	movlw	1
  4609  0124  3193  235B  3180   	fcall	_setRF_Learn
  4610                           
  4611                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  4612  0127  0021               	movlb	1	; select bank1
  4613  0128  1EBF               	btfss	_myMain^(0+128),5
  4614  0129  0008               	return
  4615                           
  4616                           ;Switch_B1.c: 174: setBuz(2, 100);
  4617  012A  3064               	movlw	100
  4618  012B  0020               	movlb	0	; select bank0
  4619  012C  00A4               	movwf	setBuz@time
  4620  012D  3000               	movlw	0
  4621  012E  00A5               	movwf	setBuz@time+1
  4622  012F  3002               	movlw	2
  4623  0130  318A  22E0         	fcall	_setBuz
  4624                           
  4625                           ;Switch_B1.c: 175: }
  4626                           ;Switch_B1.c: 179: }
  4627                           ;Switch_B1.c: 180: } else {
  4628  0132  0008               	return
  4629  0133                     l9581:	
  4630                           
  4631                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  4632  0133  0020               	movlb	0	; select bank0
  4633  0134  086C               	movf	_Sw,w
  4634  0135  0086               	movwf	6
  4635  0136  3001               	movlw	1	; select bank2/3
  4636  0137  0087               	movwf	7
  4637  0138  1A81               	btfsc	1,5
  4638  0139  0008               	return
  4639                           
  4640                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  4641  013A  086C               	movf	_Sw,w
  4642  013B  3E07               	addlw	7
  4643  013C  0086               	movwf	6
  4644  013D  3001               	movlw	1	; select bank2/3
  4645  013E  0087               	movwf	7
  4646  013F  3001               	movlw	1
  4647  0140  0781               	addwf	1,f
  4648  0141  3141               	addfsr 1,1
  4649  0142  1803               	skipnc
  4650  0143  0A81               	incf	1,f
  4651                           
  4652                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  4653  0144  086C               	movf	_Sw,w
  4654  0145  3E07               	addlw	7
  4655  0146  0086               	movwf	6
  4656  0147  3001               	movlw	1	; select bank2/3
  4657  0148  0087               	movwf	7
  4658  0149  3F40               	moviw [0]fsr1
  4659  014A  00AA               	movwf	??_setSw_Main
  4660  014B  3F41               	moviw [1]fsr1
  4661  014C  00AB               	movwf	??_setSw_Main+1
  4662  014D  3000               	movlw	0
  4663  014E  022B               	subwf	??_setSw_Main+1,w
  4664  014F  3096               	movlw	150
  4665  0150  1903               	skipnz
  4666  0151  022A               	subwf	??_setSw_Main,w
  4667  0152  1C03               	skipc
  4668  0153  0008               	return
  4669                           
  4670                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  4671  0154  086C               	movf	_Sw,w
  4672  0155  3E07               	addlw	7
  4673  0156  0086               	movwf	6
  4674  0157  3001               	movlw	1	; select bank2/3
  4675  0158  0087               	movwf	7
  4676  0159  3000               	movlw	0
  4677  015A  3FC0               	movwi [0]fsr1
  4678  015B  3FC1               	movwi [1]fsr1
  4679                           
  4680                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  4681  015C  086C               	movf	_Sw,w
  4682  015D  0086               	movwf	6
  4683  015E  3001               	movlw	1	; select bank2/3
  4684  015F  0087               	movwf	7
  4685  0160  1681               	bsf	1,5
  4686                           
  4687                           ;Switch_B1.c: 188: setRF_Learn(0);
  4688  0161  3000               	movlw	0
  4689  0162  3193  235B         	fcall	_setRF_Learn
  4690                           
  4691                           ;Switch_B1.c: 191: }
  4692                           ;Switch_B1.c: 192: }
  4693                           ;Switch_B1.c: 193: }
  4694                           ;Switch_B1.c: 195: }
  4695                           ;Switch_B1.c: 196: }
  4696                           ;Switch_B1.c: 197: } else {
  4697  0164  0008               	return
  4698  0165                     l9591:	
  4699                           
  4700                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  4701  0165  0020               	movlb	0	; select bank0
  4702  0166  086C               	movf	_Sw,w
  4703  0167  0086               	movwf	6
  4704  0168  3001               	movlw	1	; select bank2/3
  4705  0169  0087               	movwf	7
  4706  016A  1D01               	btfss	1,2
  4707  016B  0008               	return
  4708                           
  4709                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  4710  016C  3001               	movlw	1
  4711  016D  00AA               	movwf	??_setSw_Main
  4712  016E  086C               	movf	_Sw,w
  4713  016F  3E02               	addlw	2
  4714  0170  0086               	movwf	6
  4715  0171  3001               	movlw	1	; select bank2/3
  4716  0172  0087               	movwf	7
  4717  0173  082A               	movf	??_setSw_Main,w
  4718  0174  0781               	addwf	1,f
  4719                           
  4720                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (100 / 20)) {
  4721  0175  086C               	movf	_Sw,w
  4722  0176  3E02               	addlw	2
  4723  0177  0086               	movwf	6
  4724  0178  3001               	movlw	1	; select bank2/3
  4725  0179  0087               	movwf	7
  4726  017A  3005               	movlw	5
  4727  017B  0201               	subwf	1,w
  4728  017C  1C03               	skipc
  4729  017D  0008               	return
  4730                           
  4731                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  4732  017E  086C               	movf	_Sw,w
  4733  017F  3E02               	addlw	2
  4734  0180  0086               	movwf	6
  4735  0181  3001               	movlw	1	; select bank2/3
  4736  0182  0087               	movwf	7
  4737  0183  0181               	clrf	1
  4738                           
  4739                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  4740  0184  086C               	movf	_Sw,w
  4741  0185  0086               	movwf	6
  4742  0186  3001               	movlw	1	; select bank2/3
  4743  0187  0087               	movwf	7
  4744  0188  1101               	bcf	1,2
  4745                           
  4746                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  4747  0189  086C               	movf	_Sw,w
  4748  018A  3E03               	addlw	3
  4749  018B  0086               	movwf	6
  4750  018C  3001               	movlw	1	; select bank2/3
  4751  018D  0087               	movwf	7
  4752  018E  3000               	movlw	0
  4753  018F  3FC0               	movwi [0]fsr1
  4754  0190  3FC1               	movwi [1]fsr1
  4755                           
  4756                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  4757  0191  086C               	movf	_Sw,w
  4758  0192  0086               	movwf	6
  4759  0193  3001               	movlw	1	; select bank2/3
  4760  0194  0087               	movwf	7
  4761  0195  1181               	bcf	1,3
  4762                           
  4763                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  4764  0196  086C               	movf	_Sw,w
  4765  0197  0086               	movwf	6
  4766  0198  3001               	movlw	1	; select bank2/3
  4767  0199  0087               	movwf	7
  4768  019A  1201               	bcf	1,4
  4769                           
  4770                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  4771  019B  086C               	movf	_Sw,w
  4772  019C  0086               	movwf	6
  4773  019D  3001               	movlw	1	; select bank2/3
  4774  019E  0087               	movwf	7
  4775  019F  1281               	bcf	1,5
  4776                           
  4777                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  4778  01A0  086C               	movf	_Sw,w
  4779  01A1  3E05               	addlw	5
  4780  01A2  0086               	movwf	6
  4781  01A3  3001               	movlw	1	; select bank2/3
  4782  01A4  0087               	movwf	7
  4783  01A5  3000               	movlw	0
  4784  01A6  3FC0               	movwi [0]fsr1
  4785  01A7  3FC1               	movwi [1]fsr1
  4786                           
  4787                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  4788  01A8  086C               	movf	_Sw,w
  4789  01A9  3E07               	addlw	7
  4790  01AA  0086               	movwf	6
  4791  01AB  3001               	movlw	1	; select bank2/3
  4792  01AC  0087               	movwf	7
  4793  01AD  3000               	movlw	0
  4794  01AE  3FC0               	movwi [0]fsr1
  4795  01AF  3FC1               	movwi [1]fsr1
  4796                           
  4797                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  4798  01B0  082C               	movf	setSw_Main@sw,w
  4799  01B1  3196  269A  3180   	fcall	_setDimmerLights_SwOff
  4800                           
  4801                           ;Switch_B1.c: 220: setRF_Learn(0);
  4802  01B4  3000               	movlw	0
  4803  01B5  3193  235B         	fcall	_setRF_Learn
  4804                           
  4805                           ;Switch_B1.c: 222: }
  4806                           ;Switch_B1.c: 223: }
  4807                           ;Switch_B1.c: 224: }
  4808                           ;Switch_B1.c: 225: } else {
  4809  01B7  0008               	return
  4810  01B8                     l2213:	
  4811                           
  4812                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  4813  01B8  0021               	movlb	1	; select bank1
  4814  01B9  1C3F               	btfss	_myMain^(0+128),0
  4815  01BA  0008               	return
  4816                           
  4817                           ;Switch_B1.c: 227: Sw->Enable = 1;
  4818  01BB  0020               	movlb	0	; select bank0
  4819  01BC  086C               	movf	_Sw,w
  4820  01BD  0086               	movwf	6
  4821  01BE  3001               	movlw	1	; select bank2/3
  4822  01BF  0087               	movwf	7
  4823  01C0  1401               	bsf	1,0
  4824  01C1  0008               	return
  4825  01C2                     __end_of_setSw_Main:	
  4826                           
  4827                           	psect	text7
  4828  135B                     __ptext7:	
  4829 ;; *************** function _setRF_Learn *****************
  4830 ;; Defined at:
  4831 ;;		line 33 in file "../src/RF_Control_B1.c"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;  command         1    wreg     unsigned char 
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;  command         1    3[COMMON] unsigned char 
  4836 ;; Return value:  Size  Location     Type
  4837 ;;		None               void
  4838 ;; Registers used:
  4839 ;;		wreg, status,2, status,0
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4849 ;;Total ram usage:        2 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:    3
  4852 ;; This function calls:
  4853 ;;		Nothing
  4854 ;; This function is called by:
  4855 ;;		_setSw_Main
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           
  4860                           ;psect for function _setRF_Learn
  4861  135B                     _setRF_Learn:	
  4862                           
  4863                           ;incstack = 0
  4864                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  4865                           ;setRF_Learn@command stored from wreg
  4866  135B  00F3               	movwf	setRF_Learn@command
  4867                           
  4868                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  4869  135C  0873               	movf	setRF_Learn@command,w
  4870  135D  3A01               	xorlw	1
  4871  135E  3000               	movlw	0
  4872  135F  1903               	skipnz
  4873  1360  3001               	movlw	1
  4874  1361  00F2               	movwf	??_setRF_Learn
  4875  1362  0EF2               	swapf	??_setRF_Learn,f
  4876  1363  0DF2               	rlf	??_setRF_Learn,f
  4877  1364  0DF2               	rlf	??_setRF_Learn,f
  4878  1365  0021               	movlb	1	; select bank1
  4879  1366  0830               	movf	_RF1^(0+128),w
  4880  1367  0672               	xorwf	??_setRF_Learn,w
  4881  1368  39BF               	andlw	-65
  4882  1369  0672               	xorwf	??_setRF_Learn,w
  4883  136A  00B0               	movwf	_RF1^(0+128)
  4884  136B  0008               	return
  4885  136C                     __end_of_setRF_Learn:	
  4886                           
  4887                           	psect	text8
  4888  15B4                     __ptext8:	
  4889 ;; *************** function _setDimmerLights_DimmingOn *****************
  4890 ;; Defined at:
  4891 ;;		line 846 in file "../src/Dimmer_B1.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;  sw              1    wreg     unsigned char 
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;  sw              1    4[COMMON] unsigned char 
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;Total ram usage:        1 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:    4
  4912 ;; This function calls:
  4913 ;;		_DimmerLights_SelectPointer
  4914 ;; This function is called by:
  4915 ;;		_setSw_Main
  4916 ;; This function uses a non-reentrant model
  4917 ;;
  4918                           
  4919                           
  4920                           ;psect for function _setDimmerLights_DimmingOn
  4921  15B4                     _setDimmerLights_DimmingOn:	
  4922                           
  4923                           ;incstack = 0
  4924                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  4925                           ;setDimmerLights_DimmingOn@sw stored from wreg
  4926  15B4  00F4               	movwf	setDimmerLights_DimmingOn@sw
  4927                           
  4928                           ;Dimmer_B1.c: 852: DimmerLights_SelectPointer(sw);
  4929  15B5  0874               	movf	setDimmerLights_DimmingOn@sw,w
  4930  15B6  3191  21AD  3195   	fcall	_DimmerLights_SelectPointer
  4931                           
  4932                           ;Dimmer_B1.c: 853: if (DimmerLights->Trigger == 0) {
  4933  15B9  0020               	movlb	0	; select bank0
  4934  15BA  086A               	movf	_DimmerLights,w
  4935  15BB  0086               	movwf	6
  4936  15BC  3001               	movlw	1	; select bank2/3
  4937  15BD  0087               	movwf	7
  4938  15BE  1881               	btfsc	1,1
  4939  15BF  0008               	return
  4940                           
  4941                           ;Dimmer_B1.c: 854: if (DimmerLights->SwFlag == 1) {
  4942  15C0  086A               	movf	_DimmerLights,w
  4943  15C1  0086               	movwf	6
  4944  15C2  3001               	movlw	1	; select bank2/3
  4945  15C3  0087               	movwf	7
  4946  15C4  1C01               	btfss	1,0
  4947  15C5  0008               	return
  4948                           
  4949                           ;Dimmer_B1.c: 855: DimmerLights->Status = 1;
  4950  15C6  0A6A               	incf	_DimmerLights,w
  4951  15C7  0086               	movwf	6
  4952  15C8  3001               	movlw	1	; select bank2/3
  4953  15C9  0087               	movwf	7
  4954  15CA  1401               	bsf	1,0
  4955                           
  4956                           ;Dimmer_B1.c: 857: DimmerLights->DimmingSwFlag = 1;
  4957  15CB  086A               	movf	_DimmerLights,w
  4958  15CC  0086               	movwf	6
  4959  15CD  3001               	movlw	1	; select bank2/3
  4960  15CE  0087               	movwf	7
  4961  15CF  1581               	bsf	1,3
  4962                           
  4963                           ;Dimmer_B1.c: 858: DimmerLights->DimmingTrigger = 1;
  4964  15D0  086A               	movf	_DimmerLights,w
  4965  15D1  0086               	movwf	6
  4966  15D2  3001               	movlw	1	; select bank2/3
  4967  15D3  0087               	movwf	7
  4968  15D4  1601               	bsf	1,4
  4969                           
  4970                           ;Dimmer_B1.c: 859: DimmerLights->DimmingSwitch = 1;
  4971  15D5  086A               	movf	_DimmerLights,w
  4972  15D6  0086               	movwf	6
  4973  15D7  3001               	movlw	1	; select bank2/3
  4974  15D8  0087               	movwf	7
  4975  15D9  1681               	bsf	1,5
  4976  15DA  0008               	return
  4977  15DB                     __end_of_setDimmerLights_DimmingOn:	
  4978                           
  4979                           	psect	text9
  4980  134A                     __ptext9:	
  4981 ;; *************** function _getSw_KeyStatus *****************
  4982 ;; Defined at:
  4983 ;;		line 238 in file "../src/Switch_B1.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  sw              1    wreg     unsigned char 
  4986 ;; Auto vars:     Size  Location     Type
  4987 ;;  sw              1    0[COMMON] unsigned char 
  4988 ;;  status          1    3[COMMON] unsigned char 
  4989 ;; Return value:  Size  Location     Type
  4990 ;;                  1    wreg      unsigned char 
  4991 ;; Registers used:
  4992 ;;		wreg, status,2
  4993 ;; Tracked objects:
  4994 ;;		On entry : 0/0
  4995 ;;		On exit  : 0/0
  4996 ;;		Unchanged: 0/0
  4997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4999 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5001 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5002 ;;Total ram usage:        3 bytes
  5003 ;; Hardware stack levels used:    1
  5004 ;; Hardware stack levels required when called:    3
  5005 ;; This function calls:
  5006 ;;		Nothing
  5007 ;; This function is called by:
  5008 ;;		_setSw_Main
  5009 ;; This function uses a non-reentrant model
  5010 ;;
  5011                           
  5012                           
  5013                           ;psect for function _getSw_KeyStatus
  5014  134A                     _getSw_KeyStatus:	
  5015                           
  5016                           ;Switch_B1.c: 239: char status = 0;
  5017                           
  5018                           ;incstack = 0
  5019                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  5020  134A  01F3               	clrf	getSw_KeyStatus@status
  5021                           
  5022                           ;Switch_B1.c: 279: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
  5023  134B  01F4               	clrf	_getSw_KeyStatus$6034
  5024  134C  0AF4               	incf	_getSw_KeyStatus$6034,f
  5025  134D  0020               	movlb	0	; select bank0
  5026  134E  1F0C               	btfss	12,6	;volatile
  5027  134F  1A0C               	btfsc	12,4	;volatile
  5028  1350  2B55               	goto	l6459
  5029  1351  1C0C               	btfss	12,0	;volatile
  5030  1352  188D               	btfsc	13,1	;volatile
  5031  1353  2B55               	goto	l6459
  5032  1354  01F4               	clrf	_getSw_KeyStatus$6034
  5033  1355                     l6459:	
  5034  1355  0874               	movf	_getSw_KeyStatus$6034,w
  5035  1356  00F2               	movwf	??_getSw_KeyStatus
  5036  1357  0872               	movf	??_getSw_KeyStatus,w
  5037  1358  00F3               	movwf	getSw_KeyStatus@status
  5038                           
  5039                           ;Switch_B1.c: 283: return status;
  5040  1359  0873               	movf	getSw_KeyStatus@status,w
  5041  135A  0008               	return
  5042  135B                     __end_of_getSw_KeyStatus:	
  5043                           
  5044                           	psect	text10
  5045  11E4                     __ptext10:	
  5046 ;; *************** function _SwPointSelect *****************
  5047 ;; Defined at:
  5048 ;;		line 25 in file "../src/Switch_B1.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  sw              1    wreg     unsigned char 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  sw              1    3[COMMON] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;Total ram usage:        2 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    3
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_setSw_Main
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _SwPointSelect
  5078  11E4                     _SwPointSelect:	
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _SwPointSelect: [wreg]
  5082                           ;SwPointSelect@sw stored from wreg
  5083  11E4  00F3               	movwf	SwPointSelect@sw
  5084                           
  5085                           ;Switch_B1.c: 28: if (sw == 1) {
  5086  11E5  0873               	movf	SwPointSelect@sw,w
  5087  11E6  3A01               	xorlw	1
  5088  11E7  1D03               	skipz
  5089  11E8  0008               	return
  5090                           
  5091                           ;Switch_B1.c: 29: Sw = &Sw1;
  5092  11E9  305C               	movlw	_Sw1& (0+255)
  5093  11EA  00F2               	movwf	??_SwPointSelect
  5094  11EB  0872               	movf	??_SwPointSelect,w
  5095  11EC  0020               	movlb	0	; select bank0
  5096  11ED  00EC               	movwf	_Sw
  5097  11EE  0008               	return
  5098  11EF                     __end_of_SwPointSelect:	
  5099                           
  5100                           	psect	text11
  5101  0800                     __ptext11:	
  5102 ;; *************** function _TouchPower *****************
  5103 ;; Defined at:
  5104 ;;		line 10 in file "../src/Switch_B1.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;		None               void
  5111 ;; Registers used:
  5112 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5122 ;;Total ram usage:        0 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    4
  5125 ;; This function calls:
  5126 ;;		_Timeout_Counter
  5127 ;;		_set_TimeoutCleared
  5128 ;; This function is called by:
  5129 ;;		_Switch_Main
  5130 ;; This function uses a non-reentrant model
  5131 ;;
  5132                           
  5133                           
  5134                           ;psect for function _TouchPower
  5135  0800                     _TouchPower:	
  5136                           
  5137                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  5138                           
  5139                           ;incstack = 0
  5140                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5141  0800  0021               	movlb	1	; select bank1
  5142  0801  1C3F               	btfss	_myMain^(0+128),0
  5143  0802  0008               	return
  5144                           
  5145                           ;Switch_B1.c: 12: if (RC5 == 0) {
  5146  0803  0020               	movlb	0	; select bank0
  5147  0804  1A8E               	btfsc	14,5	;volatile
  5148  0805  0008               	return
  5149  0806  280C               	goto	l6847
  5150  0807                     l2193:	
  5151                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  5152                           
  5153                           
  5154                           ;Switch_B1.c: 14: RC5 = 1;
  5155  0807  0020               	movlb	0	; select bank0
  5156  0808  168E               	bsf	14,5	;volatile
  5157                           
  5158                           ;Switch_B1.c: 15: Timeout_Counter();
  5159  0809  3194  2422  3188   	fcall	_Timeout_Counter
  5160  080C                     l6847:	
  5161  080C  0020               	movlb	0	; select bank0
  5162  080D  1A8E               	btfsc	14,5	;volatile
  5163  080E  2812               	goto	l6851
  5164  080F  0021               	movlb	1	; select bank1
  5165  0810  1D49               	btfss	(_myMain^(0+128)+10),2
  5166  0811  2807               	goto	l2193
  5167  0812                     l6851:	
  5168                           
  5169                           ;Switch_B1.c: 16: }
  5170                           ;Switch_B1.c: 17: set_TimeoutCleared();
  5171  0812  3191  2142         	fcall	_set_TimeoutCleared
  5172  0814  0008               	return
  5173  0815                     __end_of_TouchPower:	
  5174                           
  5175                           	psect	text12
  5176  1142                     __ptext12:	
  5177 ;; *************** function _set_TimeoutCleared *****************
  5178 ;; Defined at:
  5179 ;;		line 286 in file "../src/main_B1.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;		None               void
  5186 ;; Registers used:
  5187 ;;		status,2
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    3
  5200 ;; This function calls:
  5201 ;;		Nothing
  5202 ;; This function is called by:
  5203 ;;		_TouchPower
  5204 ;;		_getAD
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _set_TimeoutCleared
  5210  1142                     _set_TimeoutCleared:	
  5211                           
  5212                           ;main_B1.c: 287: myMain.Timeout = 0;
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _set_TimeoutCleared: [status,2]
  5216  1142  0021               	movlb	1	; select bank1
  5217  1143  1149               	bcf	(_myMain^(0+128)+10),2
  5218                           
  5219                           ;main_B1.c: 288: myMain.Timeout_Counter = 0;
  5220  1144  01CA               	clrf	(_myMain^(0+128)+11)
  5221  1145  01CB               	clrf	((_myMain+1)^(0+128)+11)
  5222  1146  0008               	return
  5223  1147                     __end_of_set_TimeoutCleared:	
  5224                           
  5225                           	psect	text13
  5226  1422                     __ptext13:	
  5227 ;; *************** function _Timeout_Counter *****************
  5228 ;; Defined at:
  5229 ;;		line 277 in file "../src/main_B1.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;		None               void
  5236 ;; Registers used:
  5237 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5247 ;;Total ram usage:        0 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:    3
  5250 ;; This function calls:
  5251 ;;		Nothing
  5252 ;; This function is called by:
  5253 ;;		_TouchPower
  5254 ;;		_getAD
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           
  5259                           ;psect for function _Timeout_Counter
  5260  1422                     _Timeout_Counter:	
  5261                           
  5262                           ;main_B1.c: 278: myMain.Timeout_Counter++;
  5263                           
  5264                           ;incstack = 0
  5265                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  5266  1422  3001               	movlw	1
  5267  1423  0021               	movlb	1	; select bank1
  5268  1424  07CA               	addwf	(_myMain^(0+128)+11),f
  5269  1425  3000               	movlw	0
  5270  1426  3DCB               	addwfc	((_myMain+1)^(0+128)+11),f
  5271                           
  5272                           ;main_B1.c: 279: if (myMain.Timeout_Counter == 25000) {
  5273  1427  300B               	movlw	11
  5274  1428  3EBF               	addlw	_myMain& (0+255)
  5275  1429  0086               	movwf	6
  5276  142A  0187               	clrf	7
  5277  142B  3F40               	moviw [0]fsr1
  5278  142C  3AA8               	xorlw	168
  5279  142D  1D03               	skipz
  5280  142E  2C31               	goto	u5325
  5281  142F  3F41               	moviw [1]fsr1
  5282  1430  3A61               	xorlw	97
  5283  1431                     u5325:	
  5284  1431  1D03               	skipz
  5285  1432  0008               	return
  5286                           
  5287                           ;main_B1.c: 280: myMain.Timeout_Counter = 0;
  5288  1433  01CA               	clrf	(_myMain^(0+128)+11)
  5289  1434  01CB               	clrf	((_myMain+1)^(0+128)+11)
  5290                           
  5291                           ;main_B1.c: 281: myMain.Timeout = 1;
  5292  1435  1549               	bsf	(_myMain^(0+128)+10),2
  5293  1436  0008               	return
  5294  1437                     __end_of_Timeout_Counter:	
  5295                           
  5296                           	psect	text14
  5297  1134                     __ptext14:	
  5298 ;; *************** function _Switch_Initialization *****************
  5299 ;; Defined at:
  5300 ;;		line 46 in file "../src/Switch_B1.c"
  5301 ;; Parameters:    Size  Location     Type
  5302 ;;		None
  5303 ;; Auto vars:     Size  Location     Type
  5304 ;;		None
  5305 ;; Return value:  Size  Location     Type
  5306 ;;		None               void
  5307 ;; Registers used:
  5308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5309 ;; Tracked objects:
  5310 ;;		On entry : 0/0
  5311 ;;		On exit  : 0/0
  5312 ;;		Unchanged: 0/0
  5313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5318 ;;Total ram usage:        0 bytes
  5319 ;; Hardware stack levels used:    1
  5320 ;; Hardware stack levels required when called:    6
  5321 ;; This function calls:
  5322 ;;		_setSw_Initialization
  5323 ;; This function is called by:
  5324 ;;		_main
  5325 ;; This function uses a non-reentrant model
  5326 ;;
  5327                           
  5328                           
  5329                           ;psect for function _Switch_Initialization
  5330  1134                     _Switch_Initialization:	
  5331                           
  5332                           ;Switch_B1.c: 52: setSw_Initialization(1);
  5333                           
  5334                           ;incstack = 0
  5335                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  5336  1134  3001               	movlw	1
  5337  1135  3192  225D         	fcall	_setSw_Initialization
  5338  1137  0008               	return
  5339  1138                     __end_of_Switch_Initialization:	
  5340                           
  5341                           	psect	text15
  5342  125D                     __ptext15:	
  5343 ;; *************** function _setSw_Initialization *****************
  5344 ;; Defined at:
  5345 ;;		line 66 in file "../src/Switch_B1.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;  sw              1    wreg     unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  sw              1    5[COMMON] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;		None               void
  5352 ;; Registers used:
  5353 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;Total ram usage:        1 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    5
  5366 ;; This function calls:
  5367 ;;		_setLED
  5368 ;; This function is called by:
  5369 ;;		_Switch_Initialization
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _setSw_Initialization
  5375  125D                     _setSw_Initialization:	
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5379                           ;setSw_Initialization@sw stored from wreg
  5380  125D  00F5               	movwf	setSw_Initialization@sw
  5381                           
  5382                           ;Switch_B1.c: 68: setLED(sw, 1);
  5383  125E  01F3               	clrf	setLED@command
  5384  125F  0AF3               	incf	setLED@command,f
  5385  1260  0875               	movf	setSw_Initialization@sw,w
  5386  1261  318B  23E2  3192   	fcall	_setLED
  5387                           
  5388                           ;Switch_B1.c: 70: setLED(sw + 1, 1);
  5389  1264  01F3               	clrf	setLED@command
  5390  1265  0AF3               	incf	setLED@command,f
  5391  1266  0875               	movf	setSw_Initialization@sw,w
  5392  1267  3E01               	addlw	1
  5393  1268  318B  23E2         	fcall	_setLED
  5394  126A  0008               	return
  5395  126B                     __end_of_setSw_Initialization:	
  5396                           
  5397                           	psect	text16
  5398  1115                     __ptext16:	
  5399 ;; *************** function _RF_Main *****************
  5400 ;; Defined at:
  5401 ;;		line 26 in file "../src/RF_Control_B1.c"
  5402 ;; Parameters:    Size  Location     Type
  5403 ;;		None
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;		None
  5406 ;; Return value:  Size  Location     Type
  5407 ;;		None               void
  5408 ;; Registers used:
  5409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5410 ;; Tracked objects:
  5411 ;;		On entry : 0/0
  5412 ;;		On exit  : 0/0
  5413 ;;		Unchanged: 0/0
  5414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;Total ram usage:        0 bytes
  5420 ;; Hardware stack levels used:    1
  5421 ;; Hardware stack levels required when called:   10
  5422 ;; This function calls:
  5423 ;;		_setRF_Main
  5424 ;; This function is called by:
  5425 ;;		_main
  5426 ;; This function uses a non-reentrant model
  5427 ;;
  5428                           
  5429                           
  5430                           ;psect for function _RF_Main
  5431  1115                     _RF_Main:	
  5432                           
  5433                           ;RF_Control_B1.c: 28: setRF_Main();
  5434                           
  5435                           ;incstack = 0
  5436                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5437  1115  3183  2383         	fcall	_setRF_Main
  5438  1117  0008               	return
  5439  1118                     __end_of_RF_Main:	
  5440                           
  5441                           	psect	text17
  5442  0383                     __ptext17:	
  5443 ;; *************** function _setRF_Main *****************
  5444 ;; Defined at:
  5445 ;;		line 53 in file "../src/RF_Control_B1.c"
  5446 ;; Parameters:    Size  Location     Type
  5447 ;;		None
  5448 ;; Auto vars:     Size  Location     Type
  5449 ;;  error           1   71[BANK0 ] unsigned char 
  5450 ;; Return value:  Size  Location     Type
  5451 ;;		None               void
  5452 ;; Registers used:
  5453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5454 ;; Tracked objects:
  5455 ;;		On entry : 0/0
  5456 ;;		On exit  : 0/0
  5457 ;;		Unchanged: 0/0
  5458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5463 ;;Total ram usage:        2 bytes
  5464 ;; Hardware stack levels used:    1
  5465 ;; Hardware stack levels required when called:    9
  5466 ;; This function calls:
  5467 ;;		_CC2500_PowerOnInitial
  5468 ;;		_CC2500_RxData
  5469 ;;		_CC2500_TxData
  5470 ;;		_CC2500_WriteCommand
  5471 ;;		_RF_RxDisable
  5472 ;;		___lwdiv
  5473 ;;		_getBuz_GO
  5474 ;;		_getRF_KeyStatus
  5475 ;;		_getRxData
  5476 ;;		_setData
  5477 ;; This function is called by:
  5478 ;;		_RF_Main
  5479 ;; This function uses a non-reentrant model
  5480 ;;
  5481                           
  5482                           
  5483                           ;psect for function _setRF_Main
  5484  0383                     _setRF_Main:	
  5485                           
  5486                           ;RF_Control_B1.c: 54: char error = 0;
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5490  0383  0020               	movlb	0	; select bank0
  5491  0384  01E7               	clrf	setRF_Main@error
  5492                           
  5493                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  5494  0385  0021               	movlb	1	; select bank1
  5495  0386  1C30               	btfss	_RF1^(0+128),0
  5496  0387  2C3E               	goto	l1811
  5497                           
  5498                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  5499  0388  3192  22E7  3183   	fcall	_getBuz_GO
  5500  038B  0873               	movf	?_getBuz_GO+1,w
  5501  038C  0472               	iorwf	?_getBuz_GO,w
  5502  038D  1D03               	skipz
  5503  038E  2C23               	goto	l9509
  5504                           
  5505                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  5506  038F  3193  2339  3183   	fcall	_getRF_KeyStatus
  5507  0392  3A01               	xorlw	1
  5508  0393  3000               	movlw	0
  5509  0394  1903               	skipnz
  5510  0395  3001               	movlw	1
  5511  0396  0020               	movlb	0	; select bank0
  5512  0397  00E6               	movwf	??_setRF_Main
  5513  0398  0CE6               	rrf	??_setRF_Main,f
  5514  0399  0CE6               	rrf	??_setRF_Main,f
  5515  039A  0021               	movlb	1	; select bank1
  5516  039B  0830               	movf	_RF1^(0+128),w
  5517  039C  0020               	movlb	0	; select bank0
  5518  039D  0666               	xorwf	??_setRF_Main,w
  5519  039E  397F               	andlw	-129
  5520  039F  0666               	xorwf	??_setRF_Main,w
  5521  03A0  0021               	movlb	1	; select bank1
  5522  03A1  00B0               	movwf	_RF1^(0+128)
  5523                           
  5524                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  5525  03A2  1FB0               	btfss	_RF1^(0+128),7
  5526  03A3  2BA6               	goto	l1815
  5527  03A4  1F30               	btfss	_RF1^(0+128),6
  5528  03A5  2C23               	goto	l9509
  5529  03A6                     l1815:	
  5530                           
  5531                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  5532  03A6  1D30               	btfss	_RF1^(0+128),2
  5533  03A7  2BEA               	goto	l1816
  5534                           
  5535                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  5536  03A8  1B30               	btfsc	_RF1^(0+128),6
  5537  03A9  2BE5               	goto	l9481
  5538                           
  5539                           ;RF_Control_B1.c: 68: RF1.Count++;
  5540  03AA  3001               	movlw	1
  5541  03AB  07B3               	addwf	(_RF1^(0+128)+3),f
  5542  03AC  3000               	movlw	0
  5543  03AD  3DB4               	addwfc	((_RF1+1)^(0+128)+3),f
  5544                           
  5545                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  5546  03AE  3014               	movlw	20
  5547  03AF  00F2               	movwf	___lwdiv@divisor
  5548  03B0  3000               	movlw	0
  5549  03B1  00F3               	movwf	___lwdiv@divisor+1
  5550  03B2  0839               	movf	((_RF1+1)^(0+128)+8),w
  5551  03B3  01F5               	clrf	___lwdiv@dividend+1
  5552  03B4  07F5               	addwf	___lwdiv@dividend+1,f
  5553  03B5  0838               	movf	(_RF1^(0+128)+8),w
  5554  03B6  01F4               	clrf	___lwdiv@dividend
  5555  03B7  07F4               	addwf	___lwdiv@dividend,f
  5556  03B8  3196  2663  3183   	fcall	___lwdiv
  5557  03BB  0873               	movf	?___lwdiv+1,w
  5558  03BC  0021               	movlb	1	; select bank1
  5559  03BD  0234               	subwf	((_RF1+1)^(0+128)+3),w
  5560  03BE  1D03               	skipz
  5561  03BF  2BC2               	goto	u10345
  5562  03C0  0872               	movf	?___lwdiv,w
  5563  03C1  0233               	subwf	(_RF1^(0+128)+3),w
  5564  03C2                     u10345:	
  5565  03C2  1C03               	skipc
  5566  03C3  2C23               	goto	l9509
  5567                           
  5568                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  5569  03C4  3014               	movlw	20
  5570  03C5  00F2               	movwf	___lwdiv@divisor
  5571  03C6  3000               	movlw	0
  5572  03C7  00F3               	movwf	___lwdiv@divisor+1
  5573  03C8  0839               	movf	((_RF1+1)^(0+128)+8),w
  5574  03C9  01F5               	clrf	___lwdiv@dividend+1
  5575  03CA  07F5               	addwf	___lwdiv@dividend+1,f
  5576  03CB  0838               	movf	(_RF1^(0+128)+8),w
  5577  03CC  01F4               	clrf	___lwdiv@dividend
  5578  03CD  07F4               	addwf	___lwdiv@dividend,f
  5579  03CE  3196  2663  3183   	fcall	___lwdiv
  5580  03D1  0873               	movf	?___lwdiv+1,w
  5581  03D2  0021               	movlb	1	; select bank1
  5582  03D3  01B4               	clrf	((_RF1+1)^(0+128)+3)
  5583  03D4  07B4               	addwf	((_RF1+1)^(0+128)+3),f
  5584  03D5  0872               	movf	?___lwdiv,w
  5585  03D6  01B3               	clrf	(_RF1^(0+128)+3)
  5586  03D7  07B3               	addwf	(_RF1^(0+128)+3),f
  5587                           
  5588                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  5589  03D8  1130               	bcf	_RF1^(0+128),2
  5590                           
  5591                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  5592  03D9  01BB               	clrf	(_RF1^(0+128)+11)
  5593  03DA  01BC               	clrf	((_RF1+1)^(0+128)+11)
  5594                           
  5595                           ;RF_Control_B1.c: 74: RF_RxDisable();
  5596  03DB  3191  217F  3183   	fcall	_RF_RxDisable
  5597                           
  5598                           ;RF_Control_B1.c: 75: setData();
  5599  03DE  318A  2290  3183   	fcall	_setData
  5600                           
  5601                           ;RF_Control_B1.c: 76: CC2500_TxData();
  5602  03E1  318E  2637  3183   	fcall	_CC2500_TxData
  5603                           
  5604                           ;RF_Control_B1.c: 78: }
  5605                           ;RF_Control_B1.c: 79: } else {
  5606  03E4  2C23               	goto	l9509
  5607  03E5                     l9481:	
  5608                           
  5609                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  5610  03E5  0021               	movlb	1	; select bank1
  5611  03E6  01B3               	clrf	(_RF1^(0+128)+3)
  5612  03E7  01B4               	clrf	((_RF1+1)^(0+128)+3)
  5613                           
  5614                           ;RF_Control_B1.c: 81: RF1.TransceiveGO = 0;
  5615  03E8  1130               	bcf	_RF1^(0+128),2
  5616                           
  5617                           ;RF_Control_B1.c: 82: }
  5618                           ;RF_Control_B1.c: 83: } else {
  5619  03E9  2C23               	goto	l9509
  5620  03EA                     l1816:	
  5621                           
  5622                           ;RF_Control_B1.c: 84: if (RF1.RxStatus == 1) {
  5623  03EA  1DB0               	btfss	_RF1^(0+128),3
  5624  03EB  2BF9               	goto	l9495
  5625                           
  5626                           ;RF_Control_B1.c: 86: CC2500_RxData();
  5627  03EC  318C  24A3  3183   	fcall	_CC2500_RxData
  5628                           
  5629                           ;RF_Control_B1.c: 88: if (RF1.ReceiveGO == 1) {
  5630  03EF  0021               	movlb	1	; select bank1
  5631  03F0  1CB0               	btfss	_RF1^(0+128),1
  5632  03F1  2C23               	goto	l9509
  5633                           
  5634                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  5635  03F2  10B0               	bcf	_RF1^(0+128),1
  5636                           
  5637                           ;RF_Control_B1.c: 90: RF1.CorrectionCounter = 0;
  5638  03F3  01BB               	clrf	(_RF1^(0+128)+11)
  5639  03F4  01BC               	clrf	((_RF1+1)^(0+128)+11)
  5640                           
  5641                           ;RF_Control_B1.c: 98: getRxData();
  5642  03F5  318D  256C  3183   	fcall	_getRxData
  5643                           
  5644                           ;RF_Control_B1.c: 101: }
  5645                           ;RF_Control_B1.c: 102: } else {
  5646  03F8  2C23               	goto	l9509
  5647  03F9                     l9495:	
  5648                           
  5649                           ;RF_Control_B1.c: 103: RF1.Count++;
  5650  03F9  3001               	movlw	1
  5651  03FA  0021               	movlb	1	; select bank1
  5652  03FB  07B3               	addwf	(_RF1^(0+128)+3),f
  5653  03FC  3000               	movlw	0
  5654  03FD  3DB4               	addwfc	((_RF1+1)^(0+128)+3),f
  5655                           
  5656                           ;RF_Control_B1.c: 104: if (RF1.Count >= (RF1.RunTime / 20)) {
  5657  03FE  3014               	movlw	20
  5658  03FF  00F2               	movwf	___lwdiv@divisor
  5659  0400  3000               	movlw	0
  5660  0401  00F3               	movwf	___lwdiv@divisor+1
  5661  0402  0839               	movf	((_RF1+1)^(0+128)+8),w
  5662  0403  01F5               	clrf	___lwdiv@dividend+1
  5663  0404  07F5               	addwf	___lwdiv@dividend+1,f
  5664  0405  0838               	movf	(_RF1^(0+128)+8),w
  5665  0406  01F4               	clrf	___lwdiv@dividend
  5666  0407  07F4               	addwf	___lwdiv@dividend,f
  5667  0408  3196  2663  3183   	fcall	___lwdiv
  5668  040B  0873               	movf	?___lwdiv+1,w
  5669  040C  0021               	movlb	1	; select bank1
  5670  040D  0234               	subwf	((_RF1+1)^(0+128)+3),w
  5671  040E  1D03               	skipz
  5672  040F  2C12               	goto	u10375
  5673  0410  0872               	movf	?___lwdiv,w
  5674  0411  0233               	subwf	(_RF1^(0+128)+3),w
  5675  0412                     u10375:	
  5676  0412  1C03               	skipc
  5677  0413  2C23               	goto	l9509
  5678                           
  5679                           ;RF_Control_B1.c: 105: RF1.Count = 0;
  5680  0414  01B3               	clrf	(_RF1^(0+128)+3)
  5681  0415  01B4               	clrf	((_RF1+1)^(0+128)+3)
  5682                           
  5683                           ;RF_Control_B1.c: 107: RF1.RxStatus = 1;
  5684  0416  15B0               	bsf	_RF1^(0+128),3
  5685                           
  5686                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x36);
  5687  0417  3036               	movlw	54
  5688  0418  3194  2466  3183   	fcall	_CC2500_WriteCommand
  5689                           
  5690                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x3A);
  5691  041B  303A               	movlw	58
  5692  041C  3194  2466  3183   	fcall	_CC2500_WriteCommand
  5693                           
  5694                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x34);
  5695  041F  3034               	movlw	52
  5696  0420  3194  2466  3183   	fcall	_CC2500_WriteCommand
  5697  0423                     l9509:	
  5698                           
  5699                           ;RF_Control_B1.c: 112: }
  5700                           ;RF_Control_B1.c: 113: }
  5701                           ;RF_Control_B1.c: 114: }
  5702                           ;RF_Control_B1.c: 115: }
  5703                           ;RF_Control_B1.c: 116: }
  5704                           ;RF_Control_B1.c: 118: RF1.CorrectionCounter++;
  5705  0423  3001               	movlw	1
  5706  0424  0021               	movlb	1	; select bank1
  5707  0425  07BB               	addwf	(_RF1^(0+128)+11),f
  5708  0426  3000               	movlw	0
  5709  0427  3DBC               	addwfc	((_RF1+1)^(0+128)+11),f
  5710                           
  5711                           ;RF_Control_B1.c: 119: if (RF1.CorrectionCounter > (60000 / 20)) {
  5712  0428  300B               	movlw	11
  5713  0429  023C               	subwf	((_RF1+1)^(0+128)+11),w
  5714  042A  30B9               	movlw	185
  5715  042B  1903               	skipnz
  5716  042C  023B               	subwf	(_RF1^(0+128)+11),w
  5717  042D  1C03               	skipc
  5718  042E  2C37               	goto	l9521
  5719                           
  5720                           ;RF_Control_B1.c: 120: RF1.CorrectionCounter = 0;
  5721  042F  01BB               	clrf	(_RF1^(0+128)+11)
  5722  0430  01BC               	clrf	((_RF1+1)^(0+128)+11)
  5723                           
  5724                           ;RF_Control_B1.c: 122: RF1.RxStatus = 0;
  5725  0431  11B0               	bcf	_RF1^(0+128),3
  5726                           
  5727                           ;RF_Control_B1.c: 123: RF1.ReceiveGO = 0;
  5728  0432  10B0               	bcf	_RF1^(0+128),1
  5729                           
  5730                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x36);
  5731  0433  3036               	movlw	54
  5732  0434  3194  2466  3183   	fcall	_CC2500_WriteCommand
  5733  0437                     l9521:	
  5734                           
  5735                           ;RF_Control_B1.c: 126: }
  5736                           ;RF_Control_B1.c: 128: if (RF1.Timeout == 1) {
  5737  0437  0021               	movlb	1	; select bank1
  5738  0438  1F31               	btfss	(_RF1^(0+128)+1),6
  5739  0439  0008               	return
  5740                           
  5741                           ;RF_Control_B1.c: 129: RF1.Timeout = 0;
  5742  043A  1331               	bcf	(_RF1^(0+128)+1),6
  5743                           
  5744                           ;RF_Control_B1.c: 130: CC2500_PowerOnInitial();
  5745  043B  3194  240D         	fcall	_CC2500_PowerOnInitial
  5746                           
  5747                           ;RF_Control_B1.c: 131: }
  5748                           ;RF_Control_B1.c: 133: } else {
  5749  043D  0008               	return
  5750  043E                     l1811:	
  5751                           
  5752                           ;RF_Control_B1.c: 134: if (myMain.PowerON == 1) {
  5753  043E  1C3F               	btfss	_myMain^(0+128),0
  5754  043F  0008               	return
  5755                           
  5756                           ;RF_Control_B1.c: 135: RF1.Enable = 1;
  5757  0440  1430               	bsf	_RF1^(0+128),0
  5758  0441  0008               	return
  5759  0442                     __end_of_setRF_Main:	
  5760                           
  5761                           	psect	text18
  5762  0A90                     __ptext18:	
  5763 ;; *************** function _setData *****************
  5764 ;; Defined at:
  5765 ;;		line 188 in file "../src/RF_Control_B1.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;		None
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;		None
  5770 ;; Return value:  Size  Location     Type
  5771 ;;		None               void
  5772 ;; Registers used:
  5773 ;;		wreg, fsr1l, fsr1h, status,2
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5782 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5783 ;;Total ram usage:        1 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    3
  5786 ;; This function calls:
  5787 ;;		Nothing
  5788 ;; This function is called by:
  5789 ;;		_setRF_Main
  5790 ;; This function uses a non-reentrant model
  5791 ;;
  5792                           
  5793                           
  5794                           ;psect for function _setData
  5795  0A90                     _setData:	
  5796                           
  5797                           ;RF_Control_B1.c: 212: RF_Data[0] = 0x63;
  5798                           
  5799                           ;incstack = 0
  5800                           ; Regs used in _setData: [wreg+fsr1l+fsr1h+status,2]
  5801  0A90  3063               	movlw	99
  5802  0A91  00F2               	movwf	??_setData
  5803  0A92  0872               	movf	??_setData,w
  5804  0A93  0022               	movlb	2	; select bank2
  5805  0A94  00A0               	movwf	_RF_Data^(0+256)
  5806                           
  5807                           ;RF_Control_B1.c: 213: RF_Data[1] = 0x02;
  5808  0A95  3002               	movlw	2
  5809  0A96  00F2               	movwf	??_setData
  5810  0A97  0872               	movf	??_setData,w
  5811  0A98  00A1               	movwf	(_RF_Data^(0+256)+1)
  5812                           
  5813                           ;RF_Control_B1.c: 215: RF_Data[2] = 0;
  5814  0A99  01A2               	clrf	(_RF_Data^(0+256)+2)
  5815                           
  5816                           ;RF_Control_B1.c: 216: RF_Data[3] = 0;
  5817  0A9A  01A3               	clrf	(_RF_Data^(0+256)+3)
  5818                           
  5819                           ;RF_Control_B1.c: 217: RF_Data[4] = 0;
  5820  0A9B  01A4               	clrf	(_RF_Data^(0+256)+4)
  5821                           
  5822                           ;RF_Control_B1.c: 218: RF_Data[5] = 0;
  5823  0A9C  01A5               	clrf	(_RF_Data^(0+256)+5)
  5824                           
  5825                           ;RF_Control_B1.c: 219: RF_Data[6] = 0;
  5826  0A9D  01A6               	clrf	(_RF_Data^(0+256)+6)
  5827                           
  5828                           ;RF_Control_B1.c: 220: RF_Data[7] = 0;
  5829  0A9E  01A7               	clrf	(_RF_Data^(0+256)+7)
  5830                           
  5831                           ;RF_Control_B1.c: 221: RF_Data[8] = 0;
  5832  0A9F  01A8               	clrf	(_RF_Data^(0+256)+8)
  5833                           
  5834                           ;RF_Control_B1.c: 222: RF_Data[9] = product->Data[9];
  5835  0AA0  0020               	movlb	0	; select bank0
  5836  0AA1  086E               	movf	_product,w
  5837  0AA2  0086               	movwf	6
  5838  0AA3  3001               	movlw	1	; select bank2/3
  5839  0AA4  0087               	movwf	7
  5840  0AA5  3001               	movlw	1	; select bank2/3
  5841  0AA6  3F49               	moviw [9]fsr1
  5842  0AA7  0022               	movlb	2	; select bank2
  5843  0AA8  00A9               	movwf	(_RF_Data^(0+256)+9)
  5844                           
  5845                           ;RF_Control_B1.c: 223: RF_Data[10] = 0;
  5846  0AA9  01AA               	clrf	(_RF_Data^(0+256)+10)
  5847                           
  5848                           ;RF_Control_B1.c: 224: RF_Data[11] = product->Data[11];
  5849  0AAA  0020               	movlb	0	; select bank0
  5850  0AAB  086E               	movf	_product,w
  5851  0AAC  0086               	movwf	6
  5852  0AAD  3001               	movlw	1	; select bank2/3
  5853  0AAE  0087               	movwf	7
  5854  0AAF  3001               	movlw	1	; select bank2/3
  5855  0AB0  3F4B               	moviw [11]fsr1
  5856  0AB1  0022               	movlb	2	; select bank2
  5857  0AB2  00AB               	movwf	(_RF_Data^(0+256)+11)
  5858                           
  5859                           ;RF_Control_B1.c: 225: RF_Data[12] = product->Data[12];
  5860  0AB3  0020               	movlb	0	; select bank0
  5861  0AB4  086E               	movf	_product,w
  5862  0AB5  0086               	movwf	6
  5863  0AB6  3001               	movlw	1	; select bank2/3
  5864  0AB7  0087               	movwf	7
  5865  0AB8  3001               	movlw	1	; select bank2/3
  5866  0AB9  3F4C               	moviw [12]fsr1
  5867  0ABA  0022               	movlb	2	; select bank2
  5868  0ABB  00AC               	movwf	(_RF_Data^(0+256)+12)
  5869                           
  5870                           ;RF_Control_B1.c: 226: RF_Data[13] = product->Data[13];
  5871  0ABC  0020               	movlb	0	; select bank0
  5872  0ABD  086E               	movf	_product,w
  5873  0ABE  0086               	movwf	6
  5874  0ABF  3001               	movlw	1	; select bank2/3
  5875  0AC0  0087               	movwf	7
  5876  0AC1  3001               	movlw	1	; select bank2/3
  5877  0AC2  3F4D               	moviw [13]fsr1
  5878  0AC3  0022               	movlb	2	; select bank2
  5879  0AC4  00AD               	movwf	(_RF_Data^(0+256)+13)
  5880                           
  5881                           ;RF_Control_B1.c: 227: RF_Data[14] = product->Data[14];
  5882  0AC5  0020               	movlb	0	; select bank0
  5883  0AC6  086E               	movf	_product,w
  5884  0AC7  0086               	movwf	6
  5885  0AC8  3001               	movlw	1	; select bank2/3
  5886  0AC9  0087               	movwf	7
  5887  0ACA  3001               	movlw	1	; select bank2/3
  5888  0ACB  3F4E               	moviw [14]fsr1
  5889  0ACC  0022               	movlb	2	; select bank2
  5890  0ACD  00AE               	movwf	(_RF_Data^(0+256)+14)
  5891                           
  5892                           ;RF_Control_B1.c: 228: RF_Data[15] = product->Data[15];
  5893  0ACE  0020               	movlb	0	; select bank0
  5894  0ACF  086E               	movf	_product,w
  5895  0AD0  0086               	movwf	6
  5896  0AD1  3001               	movlw	1	; select bank2/3
  5897  0AD2  0087               	movwf	7
  5898  0AD3  3001               	movlw	1	; select bank2/3
  5899  0AD4  3F4F               	moviw [15]fsr1
  5900  0AD5  0022               	movlb	2	; select bank2
  5901  0AD6  00AF               	movwf	(_RF_Data^(0+256)+15)
  5902                           
  5903                           ;RF_Control_B1.c: 229: RF_Data[16] = 0;
  5904  0AD7  01B0               	clrf	(_RF_Data^(0+256)+16)
  5905                           
  5906                           ;RF_Control_B1.c: 230: RF_Data[17] = 0;
  5907  0AD8  01B1               	clrf	(_RF_Data^(0+256)+17)
  5908                           
  5909                           ;RF_Control_B1.c: 231: RF_Data[18] = 0;
  5910  0AD9  01B2               	clrf	(_RF_Data^(0+256)+18)
  5911                           
  5912                           ;RF_Control_B1.c: 232: RF_Data[19] = 0;
  5913  0ADA  01B3               	clrf	(_RF_Data^(0+256)+19)
  5914                           
  5915                           ;RF_Control_B1.c: 233: RF_Data[20] = 209;
  5916  0ADB  30D1               	movlw	209
  5917  0ADC  00F2               	movwf	??_setData
  5918  0ADD  0872               	movf	??_setData,w
  5919  0ADE  00B4               	movwf	(_RF_Data^(0+256)+20)
  5920  0ADF  0008               	return
  5921  0AE0                     __end_of_setData:	
  5922                           
  5923                           	psect	text19
  5924  0D6C                     __ptext19:	
  5925 ;; *************** function _getRxData *****************
  5926 ;; Defined at:
  5927 ;;		line 256 in file "../src/RF_Control_B1.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;		None
  5930 ;; Auto vars:     Size  Location     Type
  5931 ;;  error           1   69[BANK0 ] unsigned char 
  5932 ;; Return value:  Size  Location     Type
  5933 ;;		None               void
  5934 ;; Registers used:
  5935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5936 ;; Tracked objects:
  5937 ;;		On entry : 0/0
  5938 ;;		On exit  : 0/0
  5939 ;;		Unchanged: 0/0
  5940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5942 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5943 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5944 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5945 ;;Total ram usage:        2 bytes
  5946 ;; Hardware stack levels used:    1
  5947 ;; Hardware stack levels required when called:    8
  5948 ;; This function calls:
  5949 ;;		_getMain_All_Error_Status
  5950 ;;		_setControl_Lights_Table
  5951 ;;		_setLog_Code
  5952 ;;		_setTxData
  5953 ;; This function is called by:
  5954 ;;		_setRF_Main
  5955 ;; This function uses a non-reentrant model
  5956 ;;
  5957                           
  5958                           
  5959                           ;psect for function _getRxData
  5960  0D6C                     _getRxData:	
  5961                           
  5962                           ;RF_Control_B1.c: 258: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  5963                           
  5964                           ;incstack = 0
  5965                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5966  0D6C  0022               	movlb	2	; select bank2
  5967  0D6D  0820               	movf	_RF_Data^(0+256),w
  5968  0D6E  3AAA               	xorlw	170
  5969  0D6F  1D03               	skipz
  5970  0D70  2D82               	goto	l9307
  5971  0D71  0821               	movf	(_RF_Data^(0+256)+1),w
  5972  0D72  3A01               	xorlw	1
  5973  0D73  1D03               	skipz
  5974  0D74  2D82               	goto	l9307
  5975                           
  5976                           ;RF_Control_B1.c: 259: product->Data[2] = 0x55;
  5977  0D75  3055               	movlw	85
  5978  0D76  0020               	movlb	0	; select bank0
  5979  0D77  00E4               	movwf	??_getRxData
  5980  0D78  086E               	movf	_product,w
  5981  0D79  3E02               	addlw	2
  5982  0D7A  0086               	movwf	6
  5983  0D7B  3001               	movlw	1	; select bank2/3
  5984  0D7C  0087               	movwf	7
  5985  0D7D  0864               	movf	??_getRxData,w
  5986  0D7E  0081               	movwf	1
  5987                           
  5988                           ;RF_Control_B1.c: 260: setTxData();
  5989  0D7F  3191  215A         	fcall	_setTxData
  5990                           
  5991                           ;RF_Control_B1.c: 264: } else {
  5992  0D81  0008               	return
  5993  0D82                     l9307:	
  5994                           
  5995                           ;RF_Control_B1.c: 265: char error = getMain_All_Error_Status(0);
  5996  0D82  3000               	movlw	0
  5997  0D83  3191  210F  318D   	fcall	_getMain_All_Error_Status
  5998  0D86  0020               	movlb	0	; select bank0
  5999  0D87  00E4               	movwf	??_getRxData
  6000  0D88  0864               	movf	??_getRxData,w
  6001  0D89  00E5               	movwf	getRxData@error
  6002                           
  6003                           ;RF_Control_B1.c: 266: if (error == 0) {
  6004  0D8A  08E5               	movf	getRxData@error,f
  6005  0D8B  1D03               	skipz
  6006  0D8C  2DCF               	goto	l1859
  6007                           
  6008                           ;RF_Control_B1.c: 267: if (RF1.Learn == 1) {
  6009  0D8D  0021               	movlb	1	; select bank1
  6010  0D8E  1F30               	btfss	_RF1^(0+128),6
  6011  0D8F  2D9B               	goto	l9319
  6012                           
  6013                           ;RF_Control_B1.c: 269: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  6014  0D90  0022               	movlb	2	; select bank2
  6015  0D91  08A0               	movf	_RF_Data^(0+256),f
  6016  0D92  1D03               	skipz
  6017  0D93  0008               	return
  6018  0D94  0821               	movf	(_RF_Data^(0+256)+1),w
  6019  0D95  3A64               	xorlw	100
  6020  0D96  1D03               	skipz
  6021  0D97  0008               	return
  6022                           
  6023                           ;RF_Control_B1.c: 270: setLog_Code();
  6024  0D98  3196  262F         	fcall	_setLog_Code
  6025                           
  6026                           ;RF_Control_B1.c: 271: }
  6027                           ;RF_Control_B1.c: 289: } else {
  6028  0D9A  0008               	return
  6029  0D9B                     l9319:	
  6030                           
  6031                           ;RF_Control_B1.c: 290: if (RF_Data[20] == 209 || RF_Data[20] == 0x0a) {
  6032  0D9B  0022               	movlb	2	; select bank2
  6033  0D9C  0834               	movf	(_RF_Data^(0+256)+20),w
  6034  0D9D  3AD1               	xorlw	209
  6035  0D9E  1903               	skipnz
  6036  0D9F  2DA4               	goto	l9323
  6037  0DA0  0834               	movf	(_RF_Data^(0+256)+20),w
  6038  0DA1  3A0A               	xorlw	10
  6039  0DA2  1D03               	skipz
  6040  0DA3  0008               	return
  6041  0DA4                     l9323:	
  6042                           
  6043                           ;RF_Control_B1.c: 292: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6044  0DA4  08A0               	movf	_RF_Data^(0+256),f
  6045  0DA5  1D03               	skipz
  6046  0DA6  0008               	return
  6047  0DA7  0821               	movf	(_RF_Data^(0+256)+1),w
  6048  0DA8  3A02               	xorlw	2
  6049  0DA9  1D03               	skipz
  6050  0DAA  0008               	return
  6051                           
  6052                           ;RF_Control_B1.c: 294: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6053  0DAB  0020               	movlb	0	; select bank0
  6054  0DAC  086E               	movf	_product,w
  6055  0DAD  3E0C               	addlw	12
  6056  0DAE  0086               	movwf	6
  6057  0DAF  3001               	movlw	1	; select bank2/3
  6058  0DB0  0087               	movwf	7
  6059  0DB1  0022               	movlb	2	; select bank2
  6060  0DB2  082C               	movf	(_RF_Data^(0+256)+12),w
  6061  0DB3  0601               	xorwf	1,w
  6062  0DB4  1D03               	skipz
  6063  0DB5  0008               	return
  6064  0DB6  0020               	movlb	0	; select bank0
  6065  0DB7  086E               	movf	_product,w
  6066  0DB8  3E0D               	addlw	13
  6067  0DB9  0086               	movwf	6
  6068  0DBA  3001               	movlw	1	; select bank2/3
  6069  0DBB  0087               	movwf	7
  6070  0DBC  0022               	movlb	2	; select bank2
  6071  0DBD  082D               	movf	(_RF_Data^(0+256)+13),w
  6072  0DBE  0601               	xorwf	1,w
  6073  0DBF  1D03               	skipz
  6074  0DC0  0008               	return
  6075  0DC1  0020               	movlb	0	; select bank0
  6076  0DC2  086E               	movf	_product,w
  6077  0DC3  3E0E               	addlw	14
  6078  0DC4  0086               	movwf	6
  6079  0DC5  3001               	movlw	1	; select bank2/3
  6080  0DC6  0087               	movwf	7
  6081  0DC7  0022               	movlb	2	; select bank2
  6082  0DC8  082E               	movf	(_RF_Data^(0+256)+14),w
  6083  0DC9  0601               	xorwf	1,w
  6084  0DCA  1D03               	skipz
  6085  0DCB  0008               	return
  6086                           
  6087                           ;RF_Control_B1.c: 295: setControl_Lights_Table();
  6088  0DCC  318F  2705         	fcall	_setControl_Lights_Table
  6089                           
  6090                           ;RF_Control_B1.c: 296: }
  6091                           ;RF_Control_B1.c: 299: }
  6092                           ;RF_Control_B1.c: 310: }
  6093                           ;RF_Control_B1.c: 311: }
  6094                           ;RF_Control_B1.c: 312: } else {
  6095  0DCE  0008               	return
  6096  0DCF                     l1859:	
  6097                           
  6098                           ;RF_Control_B1.c: 313: __nop();
  6099  0DCF  0000               	nop
  6100  0DD0  0008               	return
  6101  0DD1                     __end_of_getRxData:	
  6102                           
  6103                           	psect	text20
  6104  162F                     __ptext20:	
  6105 ;; *************** function _setLog_Code *****************
  6106 ;; Defined at:
  6107 ;;		line 319 in file "../src/RF_Control_B1.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;		None
  6110 ;; Auto vars:     Size  Location     Type
  6111 ;;		None
  6112 ;; Return value:  Size  Location     Type
  6113 ;;		None               void
  6114 ;; Registers used:
  6115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : 0/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;Total ram usage:        1 bytes
  6126 ;; Hardware stack levels used:    1
  6127 ;; Hardware stack levels required when called:    5
  6128 ;; This function calls:
  6129 ;;		_setBuz
  6130 ;;		_setMemory_LoopSave
  6131 ;;		_setMemory_Modify
  6132 ;;		_setProductData
  6133 ;; This function is called by:
  6134 ;;		_getRxData
  6135 ;; This function uses a non-reentrant model
  6136 ;;
  6137                           
  6138                           
  6139                           ;psect for function _setLog_Code
  6140  162F                     _setLog_Code:	
  6141                           
  6142                           ;RF_Control_B1.c: 320: RF1.Learn = 0;
  6143                           
  6144                           ;incstack = 0
  6145                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6146  162F  0021               	movlb	1	; select bank1
  6147  1630  1330               	bcf	_RF1^(0+128),6
  6148                           
  6149                           ;RF_Control_B1.c: 321: setProductData(12, RF_Data[12]);
  6150  1631  0022               	movlb	2	; select bank2
  6151  1632  082C               	movf	(_RF_Data^(0+256)+12),w
  6152  1633  0020               	movlb	0	; select bank0
  6153  1634  00D9               	movwf	??_setLog_Code
  6154  1635  0859               	movf	??_setLog_Code,w
  6155  1636  00D6               	movwf	setProductData@value
  6156  1637  300C               	movlw	12
  6157  1638  3191  21EF  3196   	fcall	_setProductData
  6158                           
  6159                           ;RF_Control_B1.c: 322: setProductData(13, RF_Data[13]);
  6160  163B  0022               	movlb	2	; select bank2
  6161  163C  082D               	movf	(_RF_Data^(0+256)+13),w
  6162  163D  0020               	movlb	0	; select bank0
  6163  163E  00D9               	movwf	??_setLog_Code
  6164  163F  0859               	movf	??_setLog_Code,w
  6165  1640  00D6               	movwf	setProductData@value
  6166  1641  300D               	movlw	13
  6167  1642  3191  21EF  3196   	fcall	_setProductData
  6168                           
  6169                           ;RF_Control_B1.c: 323: setProductData(14, RF_Data[14]);
  6170  1645  0022               	movlb	2	; select bank2
  6171  1646  082E               	movf	(_RF_Data^(0+256)+14),w
  6172  1647  0020               	movlb	0	; select bank0
  6173  1648  00D9               	movwf	??_setLog_Code
  6174  1649  0859               	movf	??_setLog_Code,w
  6175  164A  00D6               	movwf	setProductData@value
  6176  164B  300E               	movlw	14
  6177  164C  3191  21EF  3196   	fcall	_setProductData
  6178                           
  6179                           ;RF_Control_B1.c: 324: setBuz(1, 100);
  6180  164F  3064               	movlw	100
  6181  1650  0020               	movlb	0	; select bank0
  6182  1651  00A4               	movwf	setBuz@time
  6183  1652  3000               	movlw	0
  6184  1653  00A5               	movwf	setBuz@time+1
  6185  1654  3001               	movlw	1
  6186  1655  318A  22E0  3196   	fcall	_setBuz
  6187                           
  6188                           ;RF_Control_B1.c: 325: if (myMain.First == 1) {
  6189  1658  0021               	movlb	1	; select bank1
  6190  1659  1EBF               	btfss	_myMain^(0+128),5
  6191  165A  2E5F               	goto	l1872
  6192                           
  6193                           ;RF_Control_B1.c: 326: setMemory_LoopSave(1);
  6194  165B  3001               	movlw	1
  6195  165C  3192  22F7  3196   	fcall	_setMemory_LoopSave
  6196  165F                     l1872:	
  6197                           
  6198                           ;RF_Control_B1.c: 327: }
  6199                           ;RF_Control_B1.c: 328: setMemory_Modify(1);
  6200  165F  3001               	movlw	1
  6201  1660  3192  22A7         	fcall	_setMemory_Modify
  6202  1662  0008               	return
  6203  1663                     __end_of_setLog_Code:	
  6204                           
  6205                           	psect	text21
  6206  12F7                     __ptext21:	
  6207 ;; *************** function _setMemory_LoopSave *****************
  6208 ;; Defined at:
  6209 ;;		line 1094 in file "../src/MCU_B1.c"
  6210 ;; Parameters:    Size  Location     Type
  6211 ;;  command         1    wreg     unsigned char 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  command         1    3[COMMON] unsigned char 
  6214 ;; Return value:  Size  Location     Type
  6215 ;;		None               void
  6216 ;; Registers used:
  6217 ;;		wreg, status,2, status,0
  6218 ;; Tracked objects:
  6219 ;;		On entry : 0/0
  6220 ;;		On exit  : 0/0
  6221 ;;		Unchanged: 0/0
  6222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6224 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6225 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6226 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6227 ;;Total ram usage:        2 bytes
  6228 ;; Hardware stack levels used:    1
  6229 ;; Hardware stack levels required when called:    3
  6230 ;; This function calls:
  6231 ;;		Nothing
  6232 ;; This function is called by:
  6233 ;;		_setLog_Code
  6234 ;; This function uses a non-reentrant model
  6235 ;;
  6236                           
  6237                           
  6238                           ;psect for function _setMemory_LoopSave
  6239  12F7                     _setMemory_LoopSave:	
  6240                           
  6241                           ;incstack = 0
  6242                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  6243                           ;setMemory_LoopSave@command stored from wreg
  6244  12F7  00F3               	movwf	setMemory_LoopSave@command
  6245                           
  6246                           ;MCU_B1.c: 1095: Memory.LoopSave = command == 1 ? 1 : 0;
  6247  12F8  0873               	movf	setMemory_LoopSave@command,w
  6248  12F9  3A01               	xorlw	1
  6249  12FA  3000               	movlw	0
  6250  12FB  1903               	skipnz
  6251  12FC  3001               	movlw	1
  6252  12FD  00F2               	movwf	??_setMemory_LoopSave
  6253  12FE  0DF2               	rlf	??_setMemory_LoopSave,f
  6254  12FF  0DF2               	rlf	??_setMemory_LoopSave,f
  6255  1300  0023               	movlb	3	; select bank3
  6256  1301  0844               	movf	(_Memory^(0+384)+36),w
  6257  1302  0672               	xorwf	??_setMemory_LoopSave,w
  6258  1303  39FB               	andlw	-5
  6259  1304  0672               	xorwf	??_setMemory_LoopSave,w
  6260  1305  00C4               	movwf	(_Memory^(0+384)+36)
  6261  1306  0008               	return
  6262  1307                     __end_of_setMemory_LoopSave:	
  6263                           
  6264                           	psect	text22
  6265  0F05                     __ptext22:	
  6266 ;; *************** function _setControl_Lights_Table *****************
  6267 ;; Defined at:
  6268 ;;		line 332 in file "../src/RF_Control_B1.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;		None
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;		None               void
  6275 ;; Registers used:
  6276 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6285 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6286 ;;Total ram usage:        0 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    7
  6289 ;; This function calls:
  6290 ;;		_getDimmerLights_Status
  6291 ;;		_getMain_All_LightsStatus
  6292 ;;		_setCmd_Status
  6293 ;;		_setDimmerLights_SwOff
  6294 ;;		_setDimmerLights_SwOn
  6295 ;;		_setProductData
  6296 ;;		_setRFSW_AdjControl
  6297 ;;		_setRFSW_Control
  6298 ;;		_setRF_AdjControl
  6299 ;;		_setTxData
  6300 ;; This function is called by:
  6301 ;;		_getRxData
  6302 ;; This function uses a non-reentrant model
  6303 ;;
  6304                           
  6305                           
  6306                           ;psect for function _setControl_Lights_Table
  6307  0F05                     _setControl_Lights_Table:	
  6308                           
  6309                           ;RF_Control_B1.c: 334: switch (RF_Data[15]) {
  6310                           
  6311                           ;incstack = 0
  6312                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6313  0F05  2F69               	goto	l9111
  6314  0F06                     l9087:	
  6315                           ;RF_Control_B1.c: 336: case 0x00:
  6316                           
  6317                           
  6318                           ;RF_Control_B1.c: 337: if (getMain_All_LightsStatus() == 1) {
  6319  0F06  3191  216F  318F   	fcall	_getMain_All_LightsStatus
  6320  0F09  3A01               	xorlw	1
  6321  0F0A  1D03               	skipz
  6322  0F0B  2F21               	goto	l9095
  6323                           
  6324                           ;RF_Control_B1.c: 340: if (getDimmerLights_Status(1) == 1) {
  6325  0F0C  3001               	movlw	1
  6326  0F0D  3192  226B  318F   	fcall	_getDimmerLights_Status
  6327  0F10  3A01               	xorlw	1
  6328  0F11  1D03               	skipz
  6329  0F12  2F1B               	goto	l9093
  6330                           
  6331                           ;RF_Control_B1.c: 341: setDimmerLights_SwOn(1);
  6332  0F13  3001               	movlw	1
  6333  0F14  3189  21AE  318F   	fcall	_setDimmerLights_SwOn
  6334                           
  6335                           ;RF_Control_B1.c: 342: setDimmerLights_SwOff(1);
  6336  0F17  3001               	movlw	1
  6337  0F18  3196  269A  318F   	fcall	_setDimmerLights_SwOff
  6338  0F1B                     l9093:	
  6339                           
  6340                           ;RF_Control_B1.c: 343: }
  6341                           ;RF_Control_B1.c: 358: setCmd_Status(1, 1);
  6342  0F1B  01F2               	clrf	setCmd_Status@cmd
  6343  0F1C  0AF2               	incf	setCmd_Status@cmd,f
  6344  0F1D  3001               	movlw	1
  6345  0F1E  3193  23B9         	fcall	_setCmd_Status
  6346                           
  6347                           ;RF_Control_B1.c: 359: } else {
  6348  0F20  0008               	return
  6349  0F21                     l9095:	
  6350                           
  6351                           ;RF_Control_B1.c: 360: setProductData(9, 0);
  6352  0F21  0020               	movlb	0	; select bank0
  6353  0F22  01D6               	clrf	setProductData@value
  6354  0F23  3009               	movlw	9
  6355  0F24  3191  21EF  318F   	fcall	_setProductData
  6356                           
  6357                           ;RF_Control_B1.c: 361: setProductData(11, 0);
  6358  0F27  0020               	movlb	0	; select bank0
  6359  0F28  01D6               	clrf	setProductData@value
  6360  0F29  300B               	movlw	11
  6361  0F2A  3191  21EF  318F   	fcall	_setProductData
  6362                           
  6363                           ;RF_Control_B1.c: 362: setProductData(15, 0);
  6364  0F2D  0020               	movlb	0	; select bank0
  6365  0F2E  01D6               	clrf	setProductData@value
  6366  0F2F  300F               	movlw	15
  6367  0F30  3191  21EF  318F   	fcall	_setProductData
  6368                           
  6369                           ;RF_Control_B1.c: 363: setProductData(17, 0);
  6370  0F33  0020               	movlb	0	; select bank0
  6371  0F34  01D6               	clrf	setProductData@value
  6372  0F35  3011               	movlw	17
  6373  0F36  3191  21EF  318F   	fcall	_setProductData
  6374                           
  6375                           ;RF_Control_B1.c: 364: setTxData();
  6376  0F39  3191  215A         	fcall	_setTxData
  6377                           
  6378                           ;RF_Control_B1.c: 365: }
  6379                           ;RF_Control_B1.c: 366: break;
  6380  0F3B  0008               	return
  6381  0F3C                     l9099:	
  6382                           ;RF_Control_B1.c: 368: case 0x20:
  6383                           
  6384                           
  6385                           ;RF_Control_B1.c: 369: setProductData(9, 0);
  6386  0F3C  0020               	movlb	0	; select bank0
  6387  0F3D  01D6               	clrf	setProductData@value
  6388  0F3E  3009               	movlw	9
  6389  0F3F  3191  21EF  318F   	fcall	_setProductData
  6390                           
  6391                           ;RF_Control_B1.c: 370: setProductData(11, 0);
  6392  0F42  0020               	movlb	0	; select bank0
  6393  0F43  01D6               	clrf	setProductData@value
  6394  0F44  300B               	movlw	11
  6395  0F45  3191  21EF  318F   	fcall	_setProductData
  6396                           
  6397                           ;RF_Control_B1.c: 371: setProductData(15, product->Data[15]);
  6398  0F48  0020               	movlb	0	; select bank0
  6399  0F49  086E               	movf	_product,w
  6400  0F4A  0086               	movwf	6
  6401  0F4B  3001               	movlw	1	; select bank2/3
  6402  0F4C  0087               	movwf	7
  6403  0F4D  3001               	movlw	1	; select bank2/3
  6404  0F4E  3F4F               	moviw [15]fsr1
  6405  0F4F  00D6               	movwf	setProductData@value
  6406  0F50  300F               	movlw	15
  6407  0F51  3191  21EF  318F   	fcall	_setProductData
  6408                           
  6409                           ;RF_Control_B1.c: 372: setProductData(17, 0);
  6410  0F54  0020               	movlb	0	; select bank0
  6411  0F55  01D6               	clrf	setProductData@value
  6412  0F56  3011               	movlw	17
  6413  0F57  3191  21EF  318F   	fcall	_setProductData
  6414                           
  6415                           ;RF_Control_B1.c: 373: setTxData();
  6416  0F5A  3191  215A         	fcall	_setTxData
  6417                           
  6418                           ;RF_Control_B1.c: 374: break;
  6419  0F5C  0008               	return
  6420  0F5D                     l9103:	
  6421                           ;RF_Control_B1.c: 377: case 0x01:
  6422                           
  6423                           
  6424                           ;RF_Control_B1.c: 378: setRFSW_Control(1);
  6425  0F5D  3001               	movlw	1
  6426  0F5E  3197  277F         	fcall	_setRFSW_Control
  6427                           
  6428                           ;RF_Control_B1.c: 379: break;
  6429  0F60  0008               	return
  6430  0F61                     l9105:	
  6431                           ;RF_Control_B1.c: 383: case 0x11:
  6432                           
  6433                           
  6434                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  6435  0F61  3001               	movlw	1
  6436  0F62  3186  26D5         	fcall	_setRFSW_AdjControl
  6437                           
  6438                           ;RF_Control_B1.c: 385: break;
  6439  0F64  0008               	return
  6440  0F65                     l9107:	
  6441                           ;RF_Control_B1.c: 387: case 0xd1:
  6442                           
  6443                           
  6444                           ;RF_Control_B1.c: 388: setRF_AdjControl(1);
  6445  0F65  3001               	movlw	1
  6446  0F66  3197  270A         	fcall	_setRF_AdjControl
  6447                           
  6448                           ;RF_Control_B1.c: 422: }
  6449                           
  6450                           ;RF_Control_B1.c: 389: break;
  6451  0F68  0008               	return
  6452  0F69                     l9111:	
  6453  0F69  0022               	movlb	2	; select bank2
  6454  0F6A  082F               	movf	(_RF_Data^(0+256)+15),w
  6455                           
  6456                           ; Switch size 1, requested type "space"
  6457                           ; Number of cases is 5, Range of values is 0 to 209
  6458                           ; switch strategies available:
  6459                           ; Name         Instructions Cycles
  6460                           ; simple_byte           16     9 (average)
  6461                           ; jumptable            260     6 (fixed)
  6462                           ;	Chosen strategy is simple_byte
  6463  0F6B  3A00               	xorlw	0	; case 0
  6464  0F6C  1903               	skipnz
  6465  0F6D  2F06               	goto	l9087
  6466  0F6E  3A01               	xorlw	1	; case 1
  6467  0F6F  1903               	skipnz
  6468  0F70  2F5D               	goto	l9103
  6469  0F71  3A10               	xorlw	16	; case 17
  6470  0F72  1903               	skipnz
  6471  0F73  2F61               	goto	l9105
  6472  0F74  3A31               	xorlw	49	; case 32
  6473  0F75  1903               	skipnz
  6474  0F76  2F3C               	goto	l9099
  6475  0F77  3AF1               	xorlw	241	; case 209
  6476  0F78  1903               	skipnz
  6477  0F79  2F65               	goto	l9107
  6478  0F7A  2F7B               	goto	l1886
  6479  0F7B                     l1886:	
  6480  0F7B  0008               	return
  6481  0F7C                     __end_of_setControl_Lights_Table:	
  6482                           
  6483                           	psect	text23
  6484  170A                     __ptext23:	
  6485 ;; *************** function _setRF_AdjControl *****************
  6486 ;; Defined at:
  6487 ;;		line 501 in file "../src/RF_Control_B1.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;  sw              1    wreg     unsigned char 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  sw              1    2[BANK0 ] unsigned char 
  6492 ;;  dimmingStatu    1    1[BANK0 ] unsigned char 
  6493 ;;  status          1    0[BANK0 ] unsigned char 
  6494 ;; Return value:  Size  Location     Type
  6495 ;;		None               void
  6496 ;; Registers used:
  6497 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;Total ram usage:        4 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    5
  6510 ;; This function calls:
  6511 ;;		_DimmerLights_SelectPointer
  6512 ;;		_getDimmerIntr_Dimming_Sw
  6513 ;;		_getDimmerLights_Status
  6514 ;; This function is called by:
  6515 ;;		_setControl_Lights_Table
  6516 ;; This function uses a non-reentrant model
  6517 ;;
  6518                           
  6519                           
  6520                           ;psect for function _setRF_AdjControl
  6521  170A                     _setRF_AdjControl:	
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6525                           ;setRF_AdjControl@sw stored from wreg
  6526  170A  0020               	movlb	0	; select bank0
  6527  170B  00A2               	movwf	setRF_AdjControl@sw
  6528                           
  6529                           ;RF_Control_B1.c: 502: char status = 0;
  6530  170C  01A0               	clrf	setRF_AdjControl@status
  6531                           
  6532                           ;RF_Control_B1.c: 504: status = getDimmerLights_Status(sw);
  6533  170D  0822               	movf	setRF_AdjControl@sw,w
  6534  170E  3192  226B  3197   	fcall	_getDimmerLights_Status
  6535  1711  00F6               	movwf	??_setRF_AdjControl
  6536  1712  0876               	movf	??_setRF_AdjControl,w
  6537  1713  0020               	movlb	0	; select bank0
  6538  1714  00A0               	movwf	setRF_AdjControl@status
  6539                           
  6540                           ;RF_Control_B1.c: 505: char dimmingStatus = 0;
  6541  1715  01A1               	clrf	setRF_AdjControl@dimmingStatus
  6542                           
  6543                           ;RF_Control_B1.c: 506: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  6544  1716  0822               	movf	setRF_AdjControl@sw,w
  6545  1717  3192  2243  3197   	fcall	_getDimmerIntr_Dimming_Sw
  6546  171A  00F6               	movwf	??_setRF_AdjControl
  6547  171B  0876               	movf	??_setRF_AdjControl,w
  6548  171C  0020               	movlb	0	; select bank0
  6549  171D  00A1               	movwf	setRF_AdjControl@dimmingStatus
  6550                           
  6551                           ;RF_Control_B1.c: 508: if (status == 1) {
  6552  171E  0820               	movf	setRF_AdjControl@status,w
  6553  171F  3A01               	xorlw	1
  6554  1720  1D03               	skipz
  6555  1721  0008               	return
  6556                           
  6557                           ;RF_Control_B1.c: 509: if (dimmingStatus == 0) {
  6558  1722  08A1               	movf	setRF_AdjControl@dimmingStatus,f
  6559  1723  1D03               	skipz
  6560  1724  2F34               	goto	l8923
  6561                           
  6562                           ;RF_Control_B1.c: 510: DimmerLights_SelectPointer(sw);
  6563  1725  0822               	movf	setRF_AdjControl@sw,w
  6564  1726  3191  21AD         	fcall	_DimmerLights_SelectPointer
  6565                           
  6566                           ;RF_Control_B1.c: 511: DimmerLights->DimmingTrigger = 1;
  6567  1728  0020               	movlb	0	; select bank0
  6568  1729  086A               	movf	_DimmerLights,w
  6569  172A  0086               	movwf	6
  6570  172B  3001               	movlw	1	; select bank2/3
  6571  172C  0087               	movwf	7
  6572  172D  1601               	bsf	1,4
  6573                           
  6574                           ;RF_Control_B1.c: 512: DimmerLights->DimmingSwitch = 1;
  6575  172E  086A               	movf	_DimmerLights,w
  6576  172F  0086               	movwf	6
  6577  1730  3001               	movlw	1	; select bank2/3
  6578  1731  0087               	movwf	7
  6579  1732  1681               	bsf	1,5
  6580                           
  6581                           ;RF_Control_B1.c: 514: } else {
  6582  1733  0008               	return
  6583  1734                     l8923:	
  6584                           
  6585                           ;RF_Control_B1.c: 515: DimmerLights_SelectPointer(sw);
  6586  1734  0822               	movf	setRF_AdjControl@sw,w
  6587  1735  3191  21AD         	fcall	_DimmerLights_SelectPointer
  6588                           
  6589                           ;RF_Control_B1.c: 516: DimmerLights->DimmingTrigger = 1;
  6590  1737  0020               	movlb	0	; select bank0
  6591  1738  086A               	movf	_DimmerLights,w
  6592  1739  0086               	movwf	6
  6593  173A  3001               	movlw	1	; select bank2/3
  6594  173B  0087               	movwf	7
  6595  173C  1601               	bsf	1,4
  6596                           
  6597                           ;RF_Control_B1.c: 517: DimmerLights->DimmingSwitch = 0;
  6598  173D  086A               	movf	_DimmerLights,w
  6599  173E  0086               	movwf	6
  6600  173F  3001               	movlw	1	; select bank2/3
  6601  1740  0087               	movwf	7
  6602  1741  1281               	bcf	1,5
  6603  1742  0008               	return
  6604  1743                     __end_of_setRF_AdjControl:	
  6605                           
  6606                           	psect	text24
  6607  177F                     __ptext24:	
  6608 ;; *************** function _setRFSW_Control *****************
  6609 ;; Defined at:
  6610 ;;		line 430 in file "../src/RF_Control_B1.c"
  6611 ;; Parameters:    Size  Location     Type
  6612 ;;  sw              1    wreg     unsigned char 
  6613 ;; Auto vars:     Size  Location     Type
  6614 ;;  sw              1   67[BANK0 ] unsigned char 
  6615 ;;  status          1   66[BANK0 ] unsigned char 
  6616 ;; Return value:  Size  Location     Type
  6617 ;;		None               void
  6618 ;; Registers used:
  6619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6620 ;; Tracked objects:
  6621 ;;		On entry : 0/0
  6622 ;;		On exit  : 0/0
  6623 ;;		Unchanged: 0/0
  6624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;Total ram usage:        3 bytes
  6630 ;; Hardware stack levels used:    1
  6631 ;; Hardware stack levels required when called:    6
  6632 ;; This function calls:
  6633 ;;		_getDimmerLights_Status
  6634 ;;		_setBuz
  6635 ;;		_setDelayOff_GO
  6636 ;;		_setDimmerLights_SwOff
  6637 ;;		_setDimmerLights_SwOn
  6638 ;;		_setRF_DimmerLights
  6639 ;;		_setTxData
  6640 ;; This function is called by:
  6641 ;;		_setControl_Lights_Table
  6642 ;; This function uses a non-reentrant model
  6643 ;;
  6644                           
  6645                           
  6646                           ;psect for function _setRFSW_Control
  6647  177F                     _setRFSW_Control:	
  6648                           
  6649                           ;incstack = 0
  6650                           ; Regs used in _setRFSW_Control: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6651                           ;setRFSW_Control@sw stored from wreg
  6652  177F  0020               	movlb	0	; select bank0
  6653  1780  00E3               	movwf	setRFSW_Control@sw
  6654                           
  6655                           ;RF_Control_B1.c: 431: char status = 0;
  6656  1781  01E2               	clrf	setRFSW_Control@status
  6657                           
  6658                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  6659  1782  0022               	movlb	2	; select bank2
  6660  1783  0830               	movf	(_RF_Data^(0+256)+16),w
  6661  1784  3A80               	xorlw	128
  6662  1785  1D03               	skipz
  6663  1786  2FB2               	goto	l8873
  6664                           
  6665                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  6666  1787  0020               	movlb	0	; select bank0
  6667  1788  01D9               	clrf	setDelayOff_GO@command
  6668  1789  0AD9               	incf	setDelayOff_GO@command,f
  6669  178A  0022               	movlb	2	; select bank2
  6670  178B  0831               	movf	(_RF_Data^(0+256)+17),w
  6671  178C  0020               	movlb	0	; select bank0
  6672  178D  00E1               	movwf	??_setRFSW_Control
  6673  178E  0861               	movf	??_setRFSW_Control,w
  6674  178F  00DA               	movwf	setDelayOff_GO@value
  6675  1790  0863               	movf	setRFSW_Control@sw,w
  6676  1791  318F  277C  3197   	fcall	_setDelayOff_GO
  6677                           
  6678                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  6679  1794  0020               	movlb	0	; select bank0
  6680  1795  0863               	movf	setRFSW_Control@sw,w
  6681  1796  3192  226B  3197   	fcall	_getDimmerLights_Status
  6682  1799  3A01               	xorlw	1
  6683  179A  1D03               	skipz
  6684  179B  2FB2               	goto	l8873
  6685                           
  6686                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  6687  179C  3064               	movlw	100
  6688  179D  0020               	movlb	0	; select bank0
  6689  179E  00A4               	movwf	setBuz@time
  6690  179F  3000               	movlw	0
  6691  17A0  00A5               	movwf	setBuz@time+1
  6692  17A1  3001               	movlw	1
  6693  17A2  318A  22E0  3197   	fcall	_setBuz
  6694                           
  6695                           ;RF_Control_B1.c: 437: setRF_DimmerLights(sw, 1);
  6696  17A5  0020               	movlb	0	; select bank0
  6697  17A6  01D9               	clrf	setRF_DimmerLights@on
  6698  17A7  0AD9               	incf	setRF_DimmerLights@on,f
  6699  17A8  0863               	movf	setRFSW_Control@sw,w
  6700  17A9  318D  25D1  3197   	fcall	_setRF_DimmerLights
  6701                           
  6702                           ;RF_Control_B1.c: 438: setTxData();
  6703  17AC  3191  215A  3197   	fcall	_setTxData
  6704                           
  6705                           ;RF_Control_B1.c: 439: status = 1;
  6706  17AF  0020               	movlb	0	; select bank0
  6707  17B0  01E2               	clrf	setRFSW_Control@status
  6708  17B1  0AE2               	incf	setRFSW_Control@status,f
  6709  17B2                     l8873:	
  6710                           
  6711                           ;RF_Control_B1.c: 440: }
  6712                           ;RF_Control_B1.c: 441: }
  6713                           ;RF_Control_B1.c: 443: if (status == 0) {
  6714  17B2  0020               	movlb	0	; select bank0
  6715  17B3  08E2               	movf	setRFSW_Control@status,f
  6716  17B4  1D03               	skipz
  6717  17B5  0008               	return
  6718                           
  6719                           ;RF_Control_B1.c: 445: setDimmerLights_SwOn(sw);
  6720  17B6  0863               	movf	setRFSW_Control@sw,w
  6721  17B7  3189  21AE  3197   	fcall	_setDimmerLights_SwOn
  6722                           
  6723                           ;RF_Control_B1.c: 446: setDimmerLights_SwOff(sw);
  6724  17BA  0020               	movlb	0	; select bank0
  6725  17BB  0863               	movf	setRFSW_Control@sw,w
  6726  17BC  3196  269A         	fcall	_setDimmerLights_SwOff
  6727  17BE  0008               	return
  6728  17BF                     __end_of_setRFSW_Control:	
  6729                           
  6730                           	psect	text25
  6731  06D5                     __ptext25:	
  6732 ;; *************** function _setRFSW_AdjControl *****************
  6733 ;; Defined at:
  6734 ;;		line 453 in file "../src/RF_Control_B1.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;  sw              1    wreg     unsigned char 
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;  sw              1   62[BANK0 ] unsigned char 
  6739 ;;  status          1   61[BANK0 ] unsigned char 
  6740 ;; Return value:  Size  Location     Type
  6741 ;;		None               void
  6742 ;; Registers used:
  6743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;Total ram usage:        4 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    6
  6756 ;; This function calls:
  6757 ;;		_getDimmerLights_PercentToValue
  6758 ;;		_getDimmerLights_Status
  6759 ;;		_setBuz
  6760 ;;		_setDimmerIntr_Dimming_RF
  6761 ;;		_setDimmerIntr_MaxmumValue
  6762 ;;		_setDimmerLights_DimmingRun
  6763 ;;		_setDimmerLights_SwOff
  6764 ;;		_setDimmerLights_SwOn
  6765 ;;		_setMemory_Modify
  6766 ;;		_setProductData
  6767 ;;		_setTxData
  6768 ;; This function is called by:
  6769 ;;		_setControl_Lights_Table
  6770 ;; This function uses a non-reentrant model
  6771 ;;
  6772                           
  6773                           
  6774                           ;psect for function _setRFSW_AdjControl
  6775  06D5                     _setRFSW_AdjControl:	
  6776                           
  6777                           ;incstack = 0
  6778                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6779                           ;setRFSW_AdjControl@sw stored from wreg
  6780  06D5  0020               	movlb	0	; select bank0
  6781  06D6  00DE               	movwf	setRFSW_AdjControl@sw
  6782                           
  6783                           ;RF_Control_B1.c: 454: char status = 0;
  6784  06D7  01DD               	clrf	setRFSW_AdjControl@status
  6785                           
  6786                           ;RF_Control_B1.c: 456: status = getDimmerLights_Status(sw);
  6787  06D8  085E               	movf	setRFSW_AdjControl@sw,w
  6788  06D9  3192  226B  3186   	fcall	_getDimmerLights_Status
  6789  06DC  0020               	movlb	0	; select bank0
  6790  06DD  00DB               	movwf	??_setRFSW_AdjControl
  6791  06DE  085B               	movf	??_setRFSW_AdjControl,w
  6792  06DF  00DD               	movwf	setRFSW_AdjControl@status
  6793                           
  6794                           ;RF_Control_B1.c: 458: if (RF_Data[9] > 0x64) {
  6795  06E0  3065               	movlw	101
  6796  06E1  0022               	movlb	2	; select bank2
  6797  06E2  0229               	subwf	(_RF_Data^(0+256)+9),w
  6798  06E3  1C03               	skipc
  6799  06E4  2EEC               	goto	l8885
  6800                           
  6801                           ;RF_Control_B1.c: 459: RF_Data[9] = 0x64;
  6802  06E5  3064               	movlw	100
  6803  06E6  0020               	movlb	0	; select bank0
  6804  06E7  00DB               	movwf	??_setRFSW_AdjControl
  6805  06E8  085B               	movf	??_setRFSW_AdjControl,w
  6806  06E9  0022               	movlb	2	; select bank2
  6807  06EA  00A9               	movwf	(_RF_Data^(0+256)+9)
  6808                           
  6809                           ;RF_Control_B1.c: 460: } else if (RF_Data[9] < 0x01) {
  6810  06EB  2EF1               	goto	l8889
  6811  06EC                     l8885:	
  6812  06EC  08A9               	movf	(_RF_Data^(0+256)+9),f
  6813  06ED  1D03               	skipz
  6814  06EE  2EF1               	goto	l8889
  6815                           
  6816                           ;RF_Control_B1.c: 461: RF_Data[9] = 0x01;
  6817  06EF  01A9               	clrf	(_RF_Data^(0+256)+9)
  6818  06F0  0AA9               	incf	(_RF_Data^(0+256)+9),f
  6819  06F1                     l8889:	
  6820                           
  6821                           ;RF_Control_B1.c: 462: }
  6822                           ;RF_Control_B1.c: 463: setProductData(9, RF_Data[9]);
  6823  06F1  0829               	movf	(_RF_Data^(0+256)+9),w
  6824  06F2  0020               	movlb	0	; select bank0
  6825  06F3  00DB               	movwf	??_setRFSW_AdjControl
  6826  06F4  085B               	movf	??_setRFSW_AdjControl,w
  6827  06F5  00D6               	movwf	setProductData@value
  6828  06F6  3009               	movlw	9
  6829  06F7  3191  21EF  3186   	fcall	_setProductData
  6830                           
  6831                           ;RF_Control_B1.c: 464: setProductData(11, sw);
  6832  06FA  0020               	movlb	0	; select bank0
  6833  06FB  085E               	movf	setRFSW_AdjControl@sw,w
  6834  06FC  00DB               	movwf	??_setRFSW_AdjControl
  6835  06FD  085B               	movf	??_setRFSW_AdjControl,w
  6836  06FE  00D6               	movwf	setProductData@value
  6837  06FF  300B               	movlw	11
  6838  0700  3191  21EF  3186   	fcall	_setProductData
  6839                           
  6840                           ;RF_Control_B1.c: 465: setProductData(17, product->Data[26 + sw]);
  6841  0703  0020               	movlb	0	; select bank0
  6842  0704  085E               	movf	setRFSW_AdjControl@sw,w
  6843  0705  3E1A               	addlw	26
  6844  0706  076E               	addwf	_product,w
  6845  0707  00DB               	movwf	??_setRFSW_AdjControl
  6846  0708  085B               	movf	??_setRFSW_AdjControl,w
  6847  0709  0086               	movwf	6
  6848  070A  3001               	movlw	1	; select bank2/3
  6849  070B  0087               	movwf	7
  6850  070C  0801               	movf	1,w
  6851  070D  00DC               	movwf	??_setRFSW_AdjControl+1
  6852  070E  085C               	movf	??_setRFSW_AdjControl+1,w
  6853  070F  00D6               	movwf	setProductData@value
  6854  0710  3011               	movlw	17
  6855  0711  3191  21EF  3186   	fcall	_setProductData
  6856                           
  6857                           ;RF_Control_B1.c: 466: setProductData((20 + sw), RF_Data[9]);
  6858  0714  0022               	movlb	2	; select bank2
  6859  0715  0829               	movf	(_RF_Data^(0+256)+9),w
  6860  0716  0020               	movlb	0	; select bank0
  6861  0717  00DB               	movwf	??_setRFSW_AdjControl
  6862  0718  085B               	movf	??_setRFSW_AdjControl,w
  6863  0719  00D6               	movwf	setProductData@value
  6864  071A  085E               	movf	setRFSW_AdjControl@sw,w
  6865  071B  3E14               	addlw	20
  6866  071C  3191  21EF  3186   	fcall	_setProductData
  6867                           
  6868                           ;RF_Control_B1.c: 474: setMemory_Modify(1);
  6869  071F  3001               	movlw	1
  6870  0720  3192  22A7  3186   	fcall	_setMemory_Modify
  6871                           
  6872                           ;RF_Control_B1.c: 478: if (status == 1) {
  6873  0723  0020               	movlb	0	; select bank0
  6874  0724  085D               	movf	setRFSW_AdjControl@status,w
  6875  0725  3A01               	xorlw	1
  6876  0726  1D03               	skipz
  6877  0727  2F48               	goto	l8901
  6878                           
  6879                           ;RF_Control_B1.c: 480: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  6880  0728  0022               	movlb	2	; select bank2
  6881  0729  0829               	movf	(_RF_Data^(0+256)+9),w
  6882  072A  318B  2387  3186   	fcall	_getDimmerLights_PercentToValue
  6883  072D  0020               	movlb	0	; select bank0
  6884  072E  00DB               	movwf	??_setRFSW_AdjControl
  6885  072F  085B               	movf	??_setRFSW_AdjControl,w
  6886  0730  00D8               	movwf	setDimmerIntr_MaxmumValue@value
  6887  0731  085E               	movf	setRFSW_AdjControl@sw,w
  6888  0732  3191  21FB  3186   	fcall	_setDimmerIntr_MaxmumValue
  6889                           
  6890                           ;RF_Control_B1.c: 481: setDimmerIntr_Dimming_RF(sw, 1);
  6891  0735  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  6892  0736  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  6893  0737  0020               	movlb	0	; select bank0
  6894  0738  085E               	movf	setRFSW_AdjControl@sw,w
  6895  0739  3193  23E3  3186   	fcall	_setDimmerIntr_Dimming_RF
  6896                           
  6897                           ;RF_Control_B1.c: 483: setTxData();
  6898  073C  3191  215A  3186   	fcall	_setTxData
  6899                           
  6900                           ;RF_Control_B1.c: 485: setBuz(1, 100);
  6901  073F  3064               	movlw	100
  6902  0740  0020               	movlb	0	; select bank0
  6903  0741  00A4               	movwf	setBuz@time
  6904  0742  3000               	movlw	0
  6905  0743  00A5               	movwf	setBuz@time+1
  6906  0744  3001               	movlw	1
  6907  0745  318A  22E0         	fcall	_setBuz
  6908                           
  6909                           ;RF_Control_B1.c: 486: } else if (status == 0) {
  6910  0747  0008               	return
  6911  0748                     l8901:	
  6912  0748  0020               	movlb	0	; select bank0
  6913  0749  08DD               	movf	setRFSW_AdjControl@status,f
  6914  074A  1D03               	skipz
  6915  074B  0008               	return
  6916                           
  6917                           ;RF_Control_B1.c: 490: setDimmerLights_DimmingRun(sw, 1);
  6918  074C  01F4               	clrf	setDimmerLights_DimmingRun@command
  6919  074D  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  6920  074E  085E               	movf	setRFSW_AdjControl@sw,w
  6921  074F  3194  244E  3186   	fcall	_setDimmerLights_DimmingRun
  6922                           
  6923                           ;RF_Control_B1.c: 491: setDimmerLights_SwOn(sw);
  6924  0752  0020               	movlb	0	; select bank0
  6925  0753  085E               	movf	setRFSW_AdjControl@sw,w
  6926  0754  3189  21AE  3186   	fcall	_setDimmerLights_SwOn
  6927                           
  6928                           ;RF_Control_B1.c: 492: setDimmerLights_SwOff(sw);
  6929  0757  0020               	movlb	0	; select bank0
  6930  0758  085E               	movf	setRFSW_AdjControl@sw,w
  6931  0759  3196  269A         	fcall	_setDimmerLights_SwOff
  6932  075B  0008               	return
  6933  075C                     __end_of_setRFSW_AdjControl:	
  6934                           
  6935                           	psect	text26
  6936  144E                     __ptext26:	
  6937 ;; *************** function _setDimmerLights_DimmingRun *****************
  6938 ;; Defined at:
  6939 ;;		line 1272 in file "../src/Dimmer_B1.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;  lights          1    wreg     unsigned char 
  6942 ;;  command         1    4[COMMON] unsigned char 
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  lights          1    6[COMMON] unsigned char 
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        3 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    4
  6961 ;; This function calls:
  6962 ;;		_DimmerLights_SelectPointer
  6963 ;; This function is called by:
  6964 ;;		_setRFSW_AdjControl
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _setDimmerLights_DimmingRun
  6970  144E                     _setDimmerLights_DimmingRun:	
  6971                           
  6972                           ;incstack = 0
  6973                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6974                           ;setDimmerLights_DimmingRun@lights stored from wreg
  6975  144E  00F6               	movwf	setDimmerLights_DimmingRun@lights
  6976                           
  6977                           ;Dimmer_B1.c: 1273: DimmerLights_SelectPointer(lights);
  6978  144F  0876               	movf	setDimmerLights_DimmingRun@lights,w
  6979  1450  3191  21AD         	fcall	_DimmerLights_SelectPointer
  6980                           
  6981                           ;Dimmer_B1.c: 1274: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  6982  1452  0874               	movf	setDimmerLights_DimmingRun@command,w
  6983  1453  3A01               	xorlw	1
  6984  1454  3000               	movlw	0
  6985  1455  1903               	skipnz
  6986  1456  3001               	movlw	1
  6987  1457  00F5               	movwf	??_setDimmerLights_DimmingRun
  6988  1458  0020               	movlb	0	; select bank0
  6989  1459  0A6A               	incf	_DimmerLights,w
  6990  145A  0086               	movwf	6
  6991  145B  3001               	movlw	1	; select bank2/3
  6992  145C  0087               	movwf	7
  6993  145D  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  6994  145E  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  6995  145F  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  6996  1460  0801               	movf	1,w
  6997  1461  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  6998  1462  39BF               	andlw	-65
  6999  1463  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  7000  1464  0081               	movwf	1
  7001  1465  0008               	return
  7002  1466                     __end_of_setDimmerLights_DimmingRun:	
  7003                           
  7004                           	psect	text27
  7005  1339                     __ptext27:	
  7006 ;; *************** function _getRF_KeyStatus *****************
  7007 ;; Defined at:
  7008 ;;		line 167 in file "../src/RF_Control_B1.c"
  7009 ;; Parameters:    Size  Location     Type
  7010 ;;		None
  7011 ;; Auto vars:     Size  Location     Type
  7012 ;;  key             1    3[COMMON] unsigned char 
  7013 ;; Return value:  Size  Location     Type
  7014 ;;                  1    wreg      unsigned char 
  7015 ;; Registers used:
  7016 ;;		wreg, status,2
  7017 ;; Tracked objects:
  7018 ;;		On entry : 0/0
  7019 ;;		On exit  : 0/0
  7020 ;;		Unchanged: 0/0
  7021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;Total ram usage:        3 bytes
  7027 ;; Hardware stack levels used:    1
  7028 ;; Hardware stack levels required when called:    3
  7029 ;; This function calls:
  7030 ;;		Nothing
  7031 ;; This function is called by:
  7032 ;;		_setRF_Main
  7033 ;; This function uses a non-reentrant model
  7034 ;;
  7035                           
  7036                           
  7037                           ;psect for function _getRF_KeyStatus
  7038  1339                     _getRF_KeyStatus:	
  7039                           
  7040                           ;RF_Control_B1.c: 168: char key = 0;
  7041                           
  7042                           ;incstack = 0
  7043                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  7044  1339  01F3               	clrf	getRF_KeyStatus@key
  7045                           
  7046                           ;RF_Control_B1.c: 182: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  7047  133A  01F4               	clrf	_getRF_KeyStatus$4966
  7048  133B  0AF4               	incf	_getRF_KeyStatus$4966,f
  7049  133C  0020               	movlb	0	; select bank0
  7050  133D  1F0C               	btfss	12,6	;volatile
  7051  133E  1A0C               	btfsc	12,4	;volatile
  7052  133F  2B44               	goto	l6357
  7053  1340  1C0C               	btfss	12,0	;volatile
  7054  1341  188D               	btfsc	13,1	;volatile
  7055  1342  2B44               	goto	l6357
  7056  1343  01F4               	clrf	_getRF_KeyStatus$4966
  7057  1344                     l6357:	
  7058  1344  0874               	movf	_getRF_KeyStatus$4966,w
  7059  1345  00F2               	movwf	??_getRF_KeyStatus
  7060  1346  0872               	movf	??_getRF_KeyStatus,w
  7061  1347  00F3               	movwf	getRF_KeyStatus@key
  7062                           
  7063                           ;RF_Control_B1.c: 184: return key;
  7064  1348  0873               	movf	getRF_KeyStatus@key,w
  7065  1349  0008               	return
  7066  134A                     __end_of_getRF_KeyStatus:	
  7067                           
  7068                           	psect	text28
  7069  12E7                     __ptext28:	
  7070 ;; *************** function _getBuz_GO *****************
  7071 ;; Defined at:
  7072 ;;		line 82 in file "../src/Buzzer_B1.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;		None
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  i               2    6[COMMON] int 
  7077 ;; Return value:  Size  Location     Type
  7078 ;;                  2    2[COMMON] int 
  7079 ;; Registers used:
  7080 ;;		wreg, status,2, status,0
  7081 ;; Tracked objects:
  7082 ;;		On entry : 0/0
  7083 ;;		On exit  : 0/0
  7084 ;;		Unchanged: 0/0
  7085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7086 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;Total ram usage:        6 bytes
  7091 ;; Hardware stack levels used:    1
  7092 ;; Hardware stack levels required when called:    3
  7093 ;; This function calls:
  7094 ;;		Nothing
  7095 ;; This function is called by:
  7096 ;;		_setRF_Main
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099                           
  7100                           
  7101                           ;psect for function _getBuz_GO
  7102  12E7                     _getBuz_GO:	
  7103                           
  7104                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  7108  12E7  0021               	movlb	1	; select bank1
  7109  12E8  0C4C               	rrf	_Buz1^(0+128),w
  7110  12E9  3901               	andlw	1
  7111  12EA  00F4               	movwf	??_getBuz_GO
  7112  12EB  01F5               	clrf	??_getBuz_GO+1
  7113  12EC  0874               	movf	??_getBuz_GO,w
  7114  12ED  00F6               	movwf	getBuz_GO@i
  7115  12EE  0875               	movf	??_getBuz_GO+1,w
  7116  12EF  00F7               	movwf	getBuz_GO@i+1
  7117                           
  7118                           ;Buzzer_B1.c: 84: return i;
  7119  12F0  0877               	movf	getBuz_GO@i+1,w
  7120  12F1  01F3               	clrf	?_getBuz_GO+1
  7121  12F2  07F3               	addwf	?_getBuz_GO+1,f
  7122  12F3  0876               	movf	getBuz_GO@i,w
  7123  12F4  01F2               	clrf	?_getBuz_GO
  7124  12F5  07F2               	addwf	?_getBuz_GO,f
  7125  12F6  0008               	return
  7126  12F7                     __end_of_getBuz_GO:	
  7127                           
  7128                           	psect	text29
  7129  1663                     __ptext29:	
  7130 ;; *************** function ___lwdiv *****************
  7131 ;; Defined at:
  7132 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  divisor         2    2[COMMON] unsigned int 
  7135 ;;  dividend        2    4[COMMON] unsigned int 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;  quotient        2    1[BANK0 ] unsigned int 
  7138 ;;  counter         1    0[BANK0 ] unsigned char 
  7139 ;; Return value:  Size  Location     Type
  7140 ;;                  2    2[COMMON] unsigned int 
  7141 ;; Registers used:
  7142 ;;		wreg, status,2, status,0
  7143 ;; Tracked objects:
  7144 ;;		On entry : 0/0
  7145 ;;		On exit  : 0/0
  7146 ;;		Unchanged: 0/0
  7147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7148 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;Total ram usage:        8 bytes
  7153 ;; Hardware stack levels used:    1
  7154 ;; Hardware stack levels required when called:    3
  7155 ;; This function calls:
  7156 ;;		Nothing
  7157 ;; This function is called by:
  7158 ;;		_setRF_Main
  7159 ;; This function uses a non-reentrant model
  7160 ;;
  7161                           
  7162                           
  7163                           ;psect for function ___lwdiv
  7164  1663                     ___lwdiv:	
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7168  1663  0020               	movlb	0	; select bank0
  7169  1664  01A1               	clrf	___lwdiv@quotient
  7170  1665  01A2               	clrf	___lwdiv@quotient+1
  7171  1666  0873               	movf	___lwdiv@divisor+1,w
  7172  1667  0472               	iorwf	___lwdiv@divisor,w
  7173  1668  1903               	skipnz
  7174  1669  2E93               	goto	l9357
  7175  166A  01A0               	clrf	___lwdiv@counter
  7176  166B  0AA0               	incf	___lwdiv@counter,f
  7177  166C                     l9345:	
  7178  166C  1BF3               	btfsc	___lwdiv@divisor+1,7
  7179  166D  2E78               	goto	l9347
  7180  166E  3001               	movlw	1
  7181  166F                     u10045:	
  7182  166F  35F2               	lslf	___lwdiv@divisor,f
  7183  1670  0DF3               	rlf	___lwdiv@divisor+1,f
  7184  1671  0B89               	decfsz	9,f
  7185  1672  2E6F               	goto	u10045
  7186  1673  3001               	movlw	1
  7187  1674  00F6               	movwf	??___lwdiv
  7188  1675  0876               	movf	??___lwdiv,w
  7189  1676  07A0               	addwf	___lwdiv@counter,f
  7190  1677  2E6C               	goto	l9345
  7191  1678                     l9347:	
  7192  1678  3001               	movlw	1
  7193  1679                     u10065:	
  7194  1679  35A1               	lslf	___lwdiv@quotient,f
  7195  167A  0DA2               	rlf	___lwdiv@quotient+1,f
  7196  167B  0B89               	decfsz	9,f
  7197  167C  2E79               	goto	u10065
  7198  167D  0873               	movf	___lwdiv@divisor+1,w
  7199  167E  0275               	subwf	___lwdiv@dividend+1,w
  7200  167F  1D03               	skipz
  7201  1680  2E83               	goto	u10075
  7202  1681  0872               	movf	___lwdiv@divisor,w
  7203  1682  0274               	subwf	___lwdiv@dividend,w
  7204  1683                     u10075:	
  7205  1683  1C03               	skipc
  7206  1684  2E8A               	goto	l9353
  7207  1685  0872               	movf	___lwdiv@divisor,w
  7208  1686  02F4               	subwf	___lwdiv@dividend,f
  7209  1687  0873               	movf	___lwdiv@divisor+1,w
  7210  1688  3BF5               	subwfb	___lwdiv@dividend+1,f
  7211  1689  1421               	bsf	___lwdiv@quotient,0
  7212  168A                     l9353:	
  7213  168A  3001               	movlw	1
  7214  168B                     u10085:	
  7215  168B  36F3               	lsrf	___lwdiv@divisor+1,f
  7216  168C  0CF2               	rrf	___lwdiv@divisor,f
  7217  168D  0B89               	decfsz	9,f
  7218  168E  2E8B               	goto	u10085
  7219  168F  3001               	movlw	1
  7220  1690  02A0               	subwf	___lwdiv@counter,f
  7221  1691  1D03               	btfss	3,2
  7222  1692  2E78               	goto	l9347
  7223  1693                     l9357:	
  7224  1693  0822               	movf	___lwdiv@quotient+1,w
  7225  1694  01F3               	clrf	?___lwdiv+1
  7226  1695  07F3               	addwf	?___lwdiv+1,f
  7227  1696  0821               	movf	___lwdiv@quotient,w
  7228  1697  01F2               	clrf	?___lwdiv
  7229  1698  07F2               	addwf	?___lwdiv,f
  7230  1699  0008               	return
  7231  169A                     __end_of___lwdiv:	
  7232                           
  7233                           	psect	text30
  7234  117F                     __ptext30:	
  7235 ;; *************** function _RF_RxDisable *****************
  7236 ;; Defined at:
  7237 ;;		line 155 in file "../src/RF_Control_B1.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;		None
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;		None               void
  7244 ;; Registers used:
  7245 ;;		None
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;Total ram usage:        0 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:    3
  7258 ;; This function calls:
  7259 ;;		Nothing
  7260 ;; This function is called by:
  7261 ;;		_setRF_Main
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           
  7266                           ;psect for function _RF_RxDisable
  7267  117F                     _RF_RxDisable:	
  7268                           
  7269                           ;RF_Control_B1.c: 156: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  7270                           
  7271                           ;incstack = 0
  7272                           ; Regs used in _RF_RxDisable: []
  7273  117F  0021               	movlb	1	; select bank1
  7274  1180  18B0               	btfsc	_RF1^(0+128),1
  7275  1181  2984               	goto	l1841
  7276  1182  1DB0               	btfss	_RF1^(0+128),3
  7277  1183  0008               	return
  7278  1184                     l1841:	
  7279                           
  7280                           ;RF_Control_B1.c: 157: RF1.RxStatus = 0;
  7281  1184  11B0               	bcf	_RF1^(0+128),3
  7282                           
  7283                           ;RF_Control_B1.c: 158: RF1.ReceiveGO = 0;
  7284  1185  10B0               	bcf	_RF1^(0+128),1
  7285  1186  0008               	return
  7286  1187                     __end_of_RF_RxDisable:	
  7287                           
  7288                           	psect	text31
  7289  0E37                     __ptext31:	
  7290 ;; *************** function _CC2500_TxData *****************
  7291 ;; Defined at:
  7292 ;;		line 32 in file "../src/CC2500_B1.c"
  7293 ;; Parameters:    Size  Location     Type
  7294 ;;		None
  7295 ;; Auto vars:     Size  Location     Type
  7296 ;;  loop_e          1    7[COMMON] unsigned char 
  7297 ;; Return value:  Size  Location     Type
  7298 ;;		None               void
  7299 ;; Registers used:
  7300 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7301 ;; Tracked objects:
  7302 ;;		On entry : 0/0
  7303 ;;		On exit  : 0/0
  7304 ;;		Unchanged: 0/0
  7305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7307 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;Total ram usage:        2 bytes
  7311 ;; Hardware stack levels used:    1
  7312 ;; Hardware stack levels required when called:    5
  7313 ;; This function calls:
  7314 ;;		_CC2500_WriteByte
  7315 ;;		_CC2500_WriteCommand
  7316 ;;		_RF_Timeout_Counter
  7317 ;;		_setRF_TimeoutCleared
  7318 ;; This function is called by:
  7319 ;;		_setRF_Main
  7320 ;; This function uses a non-reentrant model
  7321 ;;
  7322                           
  7323                           
  7324                           ;psect for function _CC2500_TxData
  7325  0E37                     _CC2500_TxData:	
  7326                           
  7327                           ;CC2500_B1.c: 33: unsigned char loop_e;
  7328                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  7329                           
  7330                           ;incstack = 0
  7331                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7332  0E37  3036               	movlw	54
  7333  0E38  3194  2466  318E   	fcall	_CC2500_WriteCommand
  7334                           
  7335                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  7336  0E3B  303B               	movlw	59
  7337  0E3C  3194  2466  318E   	fcall	_CC2500_WriteCommand
  7338                           
  7339                           ;CC2500_B1.c: 38: RC4 = 0;
  7340  0E3F  0020               	movlb	0	; select bank0
  7341  0E40  120E               	bcf	14,4	;volatile
  7342                           
  7343                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  7344  0E41  307F               	movlw	127
  7345  0E42  00F6               	movwf	??_CC2500_TxData
  7346  0E43  0876               	movf	??_CC2500_TxData,w
  7347  0E44  00EB               	movwf	_SPI0Buffer
  7348                           
  7349                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  7350  0E45  2E49               	goto	l9121
  7351  0E46                     l9119:	
  7352                           
  7353                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  7354  0E46  3193  23F8  318E   	fcall	_RF_Timeout_Counter
  7355  0E49                     l9121:	
  7356  0E49  0020               	movlb	0	; select bank0
  7357  0E4A  1D0E               	btfss	14,2	;volatile
  7358  0E4B  2E4F               	goto	l9125
  7359  0E4C  0021               	movlb	1	; select bank1
  7360  0E4D  1F31               	btfss	(_RF1^(0+128)+1),6
  7361  0E4E  2E46               	goto	l9119
  7362  0E4F                     l9125:	
  7363                           
  7364                           ;CC2500_B1.c: 42: };
  7365                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  7366  0E4F  3191  2124  318E   	fcall	_setRF_TimeoutCleared
  7367                           
  7368                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  7369  0E52  3193  23A5  318E   	fcall	_CC2500_WriteByte
  7370                           
  7371                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  7372  0E55  0020               	movlb	0	; select bank0
  7373  0E56  086D               	movf	_Tx_Length,w
  7374  0E57  00F6               	movwf	??_CC2500_TxData
  7375  0E58  0876               	movf	??_CC2500_TxData,w
  7376  0E59  00EB               	movwf	_SPI0Buffer
  7377                           
  7378                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  7379  0E5A  3193  23A5  318E   	fcall	_CC2500_WriteByte
  7380                           
  7381                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  7382  0E5D  01F7               	clrf	CC2500_TxData@loop_e
  7383  0E5E                     l9139:	
  7384  0E5E  0020               	movlb	0	; select bank0
  7385  0E5F  086D               	movf	_Tx_Length,w
  7386  0E60  0277               	subwf	CC2500_TxData@loop_e,w
  7387  0E61  1803               	btfsc	3,0
  7388  0E62  2E75               	goto	l239
  7389                           
  7390                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  7391  0E63  0877               	movf	CC2500_TxData@loop_e,w
  7392  0E64  3E20               	addlw	_RF_Data& (0+255)
  7393  0E65  0086               	movwf	6
  7394  0E66  3001               	movlw	1	; select bank2/3
  7395  0E67  0087               	movwf	7
  7396  0E68  0801               	movf	1,w
  7397  0E69  00F6               	movwf	??_CC2500_TxData
  7398  0E6A  0876               	movf	??_CC2500_TxData,w
  7399  0E6B  0020               	movlb	0	; select bank0
  7400  0E6C  00EB               	movwf	_SPI0Buffer
  7401                           
  7402                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  7403  0E6D  3193  23A5  318E   	fcall	_CC2500_WriteByte
  7404  0E70  3001               	movlw	1
  7405  0E71  00F6               	movwf	??_CC2500_TxData
  7406  0E72  0876               	movf	??_CC2500_TxData,w
  7407  0E73  07F7               	addwf	CC2500_TxData@loop_e,f
  7408  0E74  2E5E               	goto	l9139
  7409  0E75                     l239:	
  7410                           
  7411                           ;CC2500_B1.c: 51: }
  7412                           ;CC2500_B1.c: 52: RC4 = 1;
  7413  0E75  160E               	bsf	14,4	;volatile
  7414                           
  7415                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  7416  0E76  3035               	movlw	53
  7417  0E77  3194  2466  318E   	fcall	_CC2500_WriteCommand
  7418                           
  7419                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  7420  0E7A  2E7E               	goto	l9145
  7421  0E7B                     l9143:	
  7422                           
  7423                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  7424  0E7B  3193  23F8  318E   	fcall	_RF_Timeout_Counter
  7425  0E7E                     l9145:	
  7426  0E7E  0020               	movlb	0	; select bank0
  7427  0E7F  180D               	btfsc	13,0	;volatile
  7428  0E80  2E84               	goto	l9149
  7429  0E81  0021               	movlb	1	; select bank1
  7430  0E82  1F31               	btfss	(_RF1^(0+128)+1),6
  7431  0E83  2E7B               	goto	l9143
  7432  0E84                     l9149:	
  7433                           
  7434                           ;CC2500_B1.c: 56: };
  7435                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  7436  0E84  3191  2124  318E   	fcall	_setRF_TimeoutCleared
  7437                           
  7438                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  7439  0E87  2E8B               	goto	l9153
  7440  0E88                     l9151:	
  7441                           
  7442                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  7443  0E88  3193  23F8  318E   	fcall	_RF_Timeout_Counter
  7444  0E8B                     l9153:	
  7445  0E8B  0020               	movlb	0	; select bank0
  7446  0E8C  1C0D               	btfss	13,0	;volatile
  7447  0E8D  2E91               	goto	l9157
  7448  0E8E  0021               	movlb	1	; select bank1
  7449  0E8F  1F31               	btfss	(_RF1^(0+128)+1),6
  7450  0E90  2E88               	goto	l9151
  7451  0E91                     l9157:	
  7452                           
  7453                           ;CC2500_B1.c: 61: };
  7454                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  7455  0E91  3191  2124  318E   	fcall	_setRF_TimeoutCleared
  7456                           
  7457                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  7458  0E94  3036               	movlw	54
  7459  0E95  3194  2466  318E   	fcall	_CC2500_WriteCommand
  7460                           
  7461                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  7462  0E98  303B               	movlw	59
  7463  0E99  3194  2466         	fcall	_CC2500_WriteCommand
  7464                           
  7465                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  7466  0E9B  14F9               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  7467  0E9C  0008               	return
  7468  0E9D                     __end_of_CC2500_TxData:	
  7469                           
  7470                           	psect	text32
  7471  0CA3                     __ptext32:	
  7472 ;; *************** function _CC2500_RxData *****************
  7473 ;; Defined at:
  7474 ;;		line 73 in file "../src/CC2500_B1.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;		None
  7477 ;; Auto vars:     Size  Location     Type
  7478 ;;  loop_f          1    7[COMMON] unsigned char 
  7479 ;; Return value:  Size  Location     Type
  7480 ;;		None               void
  7481 ;; Registers used:
  7482 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7483 ;; Tracked objects:
  7484 ;;		On entry : 0/0
  7485 ;;		On exit  : 0/0
  7486 ;;		Unchanged: 0/0
  7487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7492 ;;Total ram usage:        2 bytes
  7493 ;; Hardware stack levels used:    1
  7494 ;; Hardware stack levels required when called:    5
  7495 ;; This function calls:
  7496 ;;		_CC2500_ReadByte
  7497 ;;		_CC2500_ReadStatus
  7498 ;;		_CC2500_WriteByte
  7499 ;;		_CC2500_WriteCommand
  7500 ;;		_RF_Timeout_Counter
  7501 ;;		_setRF_TimeoutCleared
  7502 ;; This function is called by:
  7503 ;;		_setRF_Main
  7504 ;; This function uses a non-reentrant model
  7505 ;;
  7506                           
  7507                           
  7508                           ;psect for function _CC2500_RxData
  7509  0CA3                     _CC2500_RxData:	
  7510                           
  7511                           ;CC2500_B1.c: 74: unsigned char loop_f;
  7512                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  7513                           
  7514                           ;incstack = 0
  7515                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7516  0CA3  0020               	movlb	0	; select bank0
  7517  0CA4  180D               	btfsc	13,0	;volatile
  7518  0CA5  0008               	return
  7519                           
  7520                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  7521  0CA6  303B               	movlw	59
  7522  0CA7  3195  256D  318C   	fcall	_CC2500_ReadStatus
  7523                           
  7524                           ;CC2500_B1.c: 89: if (s_data != 0) {
  7525  0CAA  0021               	movlb	1	; select bank1
  7526  0CAB  0867               	movf	_s_data^(0+128),w
  7527  0CAC  1903               	btfsc	3,2
  7528  0CAD  0008               	return
  7529                           
  7530                           ;CC2500_B1.c: 90: RC4 = 0;
  7531  0CAE  0020               	movlb	0	; select bank0
  7532  0CAF  120E               	bcf	14,4	;volatile
  7533                           
  7534                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  7535  0CB0  30FF               	movlw	255
  7536  0CB1  00F6               	movwf	??_CC2500_RxData
  7537  0CB2  0876               	movf	??_CC2500_RxData,w
  7538  0CB3  00EB               	movwf	_SPI0Buffer
  7539                           
  7540                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  7541  0CB4  2CB8               	goto	l9177
  7542  0CB5                     l9175:	
  7543                           
  7544                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  7545  0CB5  3193  23F8  318C   	fcall	_RF_Timeout_Counter
  7546  0CB8                     l9177:	
  7547  0CB8  0020               	movlb	0	; select bank0
  7548  0CB9  1D0E               	btfss	14,2	;volatile
  7549  0CBA  2CBE               	goto	l9181
  7550  0CBB  0021               	movlb	1	; select bank1
  7551  0CBC  1F31               	btfss	(_RF1^(0+128)+1),6
  7552  0CBD  2CB5               	goto	l9175
  7553  0CBE                     l9181:	
  7554                           
  7555                           ;CC2500_B1.c: 95: };
  7556                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  7557  0CBE  3191  2124  318C   	fcall	_setRF_TimeoutCleared
  7558                           
  7559                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  7560  0CC1  3193  23A5  318C   	fcall	_CC2500_WriteByte
  7561                           
  7562                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  7563  0CC4  3194  2437  318C   	fcall	_CC2500_ReadByte
  7564                           
  7565                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  7566  0CC7  0020               	movlb	0	; select bank0
  7567  0CC8  086B               	movf	_SPI0Buffer,w
  7568  0CC9  00F6               	movwf	??_CC2500_RxData
  7569  0CCA  0876               	movf	??_CC2500_RxData,w
  7570  0CCB  0021               	movlb	1	; select bank1
  7571  0CCC  00E3               	movwf	_Rx_Length^(0+128)
  7572                           
  7573                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  7574  0CCD  01F7               	clrf	CC2500_RxData@loop_f
  7575  0CCE                     l9197:	
  7576  0CCE  0021               	movlb	1	; select bank1
  7577  0CCF  0863               	movf	_Rx_Length^(0+128),w
  7578  0CD0  0277               	subwf	CC2500_RxData@loop_f,w
  7579  0CD1  1803               	btfsc	3,0
  7580  0CD2  2CE5               	goto	l9199
  7581                           
  7582                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  7583  0CD3  3194  2437  318C   	fcall	_CC2500_ReadByte
  7584                           
  7585                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  7586  0CD6  0020               	movlb	0	; select bank0
  7587  0CD7  086B               	movf	_SPI0Buffer,w
  7588  0CD8  00F6               	movwf	??_CC2500_RxData
  7589  0CD9  0877               	movf	CC2500_RxData@loop_f,w
  7590  0CDA  3E20               	addlw	_RF_Data& (0+255)
  7591  0CDB  0086               	movwf	6
  7592  0CDC  3001               	movlw	1	; select bank2/3
  7593  0CDD  0087               	movwf	7
  7594  0CDE  0876               	movf	??_CC2500_RxData,w
  7595  0CDF  0081               	movwf	1
  7596  0CE0  3001               	movlw	1
  7597  0CE1  00F6               	movwf	??_CC2500_RxData
  7598  0CE2  0876               	movf	??_CC2500_RxData,w
  7599  0CE3  07F7               	addwf	CC2500_RxData@loop_f,f
  7600  0CE4  2CCE               	goto	l9197
  7601  0CE5                     l9199:	
  7602                           
  7603                           ;CC2500_B1.c: 104: }
  7604                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  7605  0CE5  3194  2437  318C   	fcall	_CC2500_ReadByte
  7606                           
  7607                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  7608  0CE8  0020               	movlb	0	; select bank0
  7609  0CE9  086B               	movf	_SPI0Buffer,w
  7610  0CEA  00F6               	movwf	??_CC2500_RxData
  7611  0CEB  0876               	movf	??_CC2500_RxData,w
  7612  0CEC  0021               	movlb	1	; select bank1
  7613  0CED  00E2               	movwf	_RSSI^(0+128)
  7614                           
  7615                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  7616  0CEE  3194  2437  318C   	fcall	_CC2500_ReadByte
  7617                           
  7618                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  7619  0CF1  0020               	movlb	0	; select bank0
  7620  0CF2  086B               	movf	_SPI0Buffer,w
  7621  0CF3  00F6               	movwf	??_CC2500_RxData
  7622  0CF4  0876               	movf	??_CC2500_RxData,w
  7623  0CF5  0021               	movlb	1	; select bank1
  7624  0CF6  00DF               	movwf	_CRC^(0+128)
  7625                           
  7626                           ;CC2500_B1.c: 109: RC4 = 1;
  7627  0CF7  0020               	movlb	0	; select bank0
  7628  0CF8  160E               	bsf	14,4	;volatile
  7629                           
  7630                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  7631  0CF9  0021               	movlb	1	; select bank1
  7632  0CFA  1BDF               	btfsc	_CRC^(0+128),7
  7633                           
  7634                           ;CC2500_B1.c: 111: Receive_OK = 1;
  7635  0CFB  1479               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  7636                           
  7637                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  7638  0CFC  11B0               	bcf	_RF1^(0+128),3
  7639                           
  7640                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  7641  0CFD  14B0               	bsf	_RF1^(0+128),1
  7642                           
  7643                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  7644  0CFE  3036               	movlw	54
  7645  0CFF  3194  2466  318C   	fcall	_CC2500_WriteCommand
  7646                           
  7647                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  7648  0D02  303A               	movlw	58
  7649  0D03  3194  2466         	fcall	_CC2500_WriteCommand
  7650  0D05  0021               	movlb	1	; select bank1
  7651  0D06  0008               	return
  7652  0D07                     __end_of_CC2500_RxData:	
  7653                           
  7654                           	psect	text33
  7655  156D                     __ptext33:	
  7656 ;; *************** function _CC2500_ReadStatus *****************
  7657 ;; Defined at:
  7658 ;;		line 308 in file "../src/CC2500_B1.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  status_addr     1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  status_addr     1    5[COMMON] unsigned char 
  7663 ;; Return value:  Size  Location     Type
  7664 ;;		None               void
  7665 ;; Registers used:
  7666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7667 ;; Tracked objects:
  7668 ;;		On entry : 0/0
  7669 ;;		On exit  : 0/0
  7670 ;;		Unchanged: 0/0
  7671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7675 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7676 ;;Total ram usage:        2 bytes
  7677 ;; Hardware stack levels used:    1
  7678 ;; Hardware stack levels required when called:    4
  7679 ;; This function calls:
  7680 ;;		_CC2500_ReadByte
  7681 ;;		_CC2500_WriteByte
  7682 ;;		_RF_Timeout_Counter
  7683 ;;		_setRF_TimeoutCleared
  7684 ;; This function is called by:
  7685 ;;		_CC2500_RxData
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689                           
  7690                           ;psect for function _CC2500_ReadStatus
  7691  156D                     _CC2500_ReadStatus:	
  7692                           
  7693                           ;incstack = 0
  7694                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7695                           ;CC2500_ReadStatus@status_addr stored from wreg
  7696  156D  00F5               	movwf	CC2500_ReadStatus@status_addr
  7697                           
  7698                           ;CC2500_B1.c: 309: RC4 = 0;
  7699  156E  0020               	movlb	0	; select bank0
  7700  156F  120E               	bcf	14,4	;volatile
  7701                           
  7702                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  7703  1570  0875               	movf	CC2500_ReadStatus@status_addr,w
  7704  1571  3EC0               	addlw	192
  7705  1572  00F4               	movwf	??_CC2500_ReadStatus
  7706  1573  0874               	movf	??_CC2500_ReadStatus,w
  7707  1574  00EB               	movwf	_SPI0Buffer
  7708                           
  7709                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  7710  1575  2D79               	goto	l8935
  7711  1576                     l8933:	
  7712                           
  7713                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  7714  1576  3193  23F8  3195   	fcall	_RF_Timeout_Counter
  7715  1579                     l8935:	
  7716  1579  0020               	movlb	0	; select bank0
  7717  157A  1D0E               	btfss	14,2	;volatile
  7718  157B  2D7F               	goto	l8939
  7719  157C  0021               	movlb	1	; select bank1
  7720  157D  1F31               	btfss	(_RF1^(0+128)+1),6
  7721  157E  2D76               	goto	l8933
  7722  157F                     l8939:	
  7723                           
  7724                           ;CC2500_B1.c: 314: };
  7725                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  7726  157F  3191  2124  3195   	fcall	_setRF_TimeoutCleared
  7727                           
  7728                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  7729  1582  3193  23A5  3195   	fcall	_CC2500_WriteByte
  7730                           
  7731                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  7732  1585  3194  2437         	fcall	_CC2500_ReadByte
  7733                           
  7734                           ;CC2500_B1.c: 319: RC4 = 1;
  7735  1587  0020               	movlb	0	; select bank0
  7736  1588  160E               	bsf	14,4	;volatile
  7737                           
  7738                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  7739  1589  086B               	movf	_SPI0Buffer,w
  7740  158A  00F4               	movwf	??_CC2500_ReadStatus
  7741  158B  0874               	movf	??_CC2500_ReadStatus,w
  7742  158C  0021               	movlb	1	; select bank1
  7743  158D  00E7               	movwf	_s_data^(0+128)
  7744  158E  0008               	return
  7745  158F                     __end_of_CC2500_ReadStatus:	
  7746                           
  7747                           	psect	text34
  7748  1437                     __ptext34:	
  7749 ;; *************** function _CC2500_ReadByte *****************
  7750 ;; Defined at:
  7751 ;;		line 242 in file "../src/CC2500_B1.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;		None
  7754 ;; Auto vars:     Size  Location     Type
  7755 ;;  loop_b          1    3[COMMON] unsigned char 
  7756 ;; Return value:  Size  Location     Type
  7757 ;;		None               void
  7758 ;; Registers used:
  7759 ;;		wreg, status,2, status,0
  7760 ;; Tracked objects:
  7761 ;;		On entry : 0/0
  7762 ;;		On exit  : 0/0
  7763 ;;		Unchanged: 0/0
  7764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7769 ;;Total ram usage:        2 bytes
  7770 ;; Hardware stack levels used:    1
  7771 ;; Hardware stack levels required when called:    3
  7772 ;; This function calls:
  7773 ;;		Nothing
  7774 ;; This function is called by:
  7775 ;;		_CC2500_RxData
  7776 ;;		_CC2500_ReadStatus
  7777 ;;		_CC2500_ReadREG
  7778 ;; This function uses a non-reentrant model
  7779 ;;
  7780                           
  7781                           
  7782                           ;psect for function _CC2500_ReadByte
  7783  1437                     _CC2500_ReadByte:	
  7784                           
  7785                           ;CC2500_B1.c: 243: unsigned char loop_b;
  7786                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  7787                           
  7788                           ;incstack = 0
  7789                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  7790  1437  01F3               	clrf	CC2500_ReadByte@loop_b
  7791  1438                     L1:	
  7792  1438  3008               	movlw	8
  7793  1439  0273               	subwf	CC2500_ReadByte@loop_b,w
  7794  143A  1803               	btfsc	3,0
  7795  143B  0008               	return
  7796                           
  7797                           ;CC2500_B1.c: 245: RC1 = 1;
  7798  143C  0020               	movlb	0	; select bank0
  7799  143D  148E               	bsf	14,1	;volatile
  7800                           
  7801                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  7802  143E  1003               	clrc
  7803  143F  0DEB               	rlf	_SPI0Buffer,f
  7804                           
  7805                           ;CC2500_B1.c: 247: if (RC2 == 1)
  7806  1440  1D0E               	btfss	14,2	;volatile
  7807  1441  2C44               	goto	l5679
  7808                           
  7809                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  7810  1442  146B               	bsf	_SPI0Buffer,0
  7811  1443  2C48               	goto	l5681
  7812  1444                     l5679:	
  7813                           
  7814                           ;CC2500_B1.c: 249: else
  7815                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  7816  1444  30FE               	movlw	254
  7817  1445  00F2               	movwf	??_CC2500_ReadByte
  7818  1446  0872               	movf	??_CC2500_ReadByte,w
  7819  1447  05EB               	andwf	_SPI0Buffer,f
  7820  1448                     l5681:	
  7821                           
  7822                           ;CC2500_B1.c: 251: RC1 = 0;
  7823  1448  108E               	bcf	14,1	;volatile
  7824  1449  3001               	movlw	1
  7825  144A  00F2               	movwf	??_CC2500_ReadByte
  7826  144B  0872               	movf	??_CC2500_ReadByte,w
  7827  144C  07F3               	addwf	CC2500_ReadByte@loop_b,f
  7828  144D  2C38               	goto	L1
  7829  144E                     __end_of_CC2500_ReadByte:	
  7830                           
  7831                           	psect	text35
  7832  140D                     __ptext35:	
  7833 ;; *************** function _CC2500_PowerOnInitial *****************
  7834 ;; Defined at:
  7835 ;;		line 126 in file "../src/CC2500_B1.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;		None
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;		None
  7840 ;; Return value:  Size  Location     Type
  7841 ;;		None               void
  7842 ;; Registers used:
  7843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7844 ;; Tracked objects:
  7845 ;;		On entry : 0/0
  7846 ;;		On exit  : 0/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;Total ram usage:        0 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    6
  7856 ;; This function calls:
  7857 ;;		_CC2500_ClearRXFIFO
  7858 ;;		_CC2500_ClearTXFIFO
  7859 ;;		_CC2500_FrequencyCabr
  7860 ;;		_CC2500_InitPATable
  7861 ;;		_CC2500_InitSetREG
  7862 ;;		_CC2500_PowerRST
  7863 ;;		_CC2500_SIDLEMode
  7864 ;; This function is called by:
  7865 ;;		_setRF_Main
  7866 ;;		_main
  7867 ;; This function uses a non-reentrant model
  7868 ;;
  7869                           
  7870                           
  7871                           ;psect for function _CC2500_PowerOnInitial
  7872  140D                     _CC2500_PowerOnInitial:	
  7873                           
  7874                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  7875                           
  7876                           ;incstack = 0
  7877                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7878  140D  3188  209B  3194   	fcall	_CC2500_PowerRST
  7879                           
  7880                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  7881  1410  3196  2605  3194   	fcall	_CC2500_InitSetREG
  7882                           
  7883                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  7884  1413  3194  24EB  3194   	fcall	_CC2500_InitPATable
  7885                           
  7886                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  7887  1416  3191  212C  3194   	fcall	_CC2500_ClearTXFIFO
  7888                           
  7889                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  7890  1419  3191  2128  3194   	fcall	_CC2500_ClearRXFIFO
  7891                           
  7892                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  7893  141C  3191  21D9  3194   	fcall	_CC2500_FrequencyCabr
  7894                           
  7895                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  7896  141F  3191  2130         	fcall	_CC2500_SIDLEMode
  7897  1421  0008               	return
  7898  1422                     __end_of_CC2500_PowerOnInitial:	
  7899                           
  7900                           	psect	text36
  7901  1130                     __ptext36:	
  7902 ;; *************** function _CC2500_SIDLEMode *****************
  7903 ;; Defined at:
  7904 ;;		line 216 in file "../src/CC2500_B1.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;		None
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;		None
  7909 ;; Return value:  Size  Location     Type
  7910 ;;		None               void
  7911 ;; Registers used:
  7912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7922 ;;Total ram usage:        0 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    5
  7925 ;; This function calls:
  7926 ;;		_CC2500_WriteCommand
  7927 ;; This function is called by:
  7928 ;;		_CC2500_PowerOnInitial
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _CC2500_SIDLEMode
  7934  1130                     _CC2500_SIDLEMode:	
  7935                           
  7936                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7940  1130  3036               	movlw	54
  7941  1131  3194  2466         	fcall	_CC2500_WriteCommand
  7942  1133  0008               	return
  7943  1134                     __end_of_CC2500_SIDLEMode:	
  7944                           
  7945                           	psect	text37
  7946  089B                     __ptext37:	
  7947 ;; *************** function _CC2500_PowerRST *****************
  7948 ;; Defined at:
  7949 ;;		line 139 in file "../src/CC2500_B1.c"
  7950 ;; Parameters:    Size  Location     Type
  7951 ;;		None
  7952 ;; Auto vars:     Size  Location     Type
  7953 ;;		None
  7954 ;; Return value:  Size  Location     Type
  7955 ;;		None               void
  7956 ;; Registers used:
  7957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7958 ;; Tracked objects:
  7959 ;;		On entry : 0/0
  7960 ;;		On exit  : 0/0
  7961 ;;		Unchanged: 0/0
  7962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7967 ;;Total ram usage:        1 bytes
  7968 ;; Hardware stack levels used:    1
  7969 ;; Hardware stack levels required when called:    4
  7970 ;; This function calls:
  7971 ;;		_CC2500_WriteByte
  7972 ;;		_DelayTime_1us
  7973 ;;		_RF_Timeout_Counter
  7974 ;;		_setRF_TimeoutCleared
  7975 ;; This function is called by:
  7976 ;;		_CC2500_PowerOnInitial
  7977 ;; This function uses a non-reentrant model
  7978 ;;
  7979                           
  7980                           
  7981                           ;psect for function _CC2500_PowerRST
  7982  089B                     _CC2500_PowerRST:	
  7983                           
  7984                           ;CC2500_B1.c: 140: RC1 = 0;
  7985                           
  7986                           ;incstack = 0
  7987                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7988  089B  0020               	movlb	0	; select bank0
  7989  089C  108E               	bcf	14,1	;volatile
  7990                           
  7991                           ;CC2500_B1.c: 141: RC0 = 0;
  7992  089D  100E               	bcf	14,0	;volatile
  7993                           
  7994                           ;CC2500_B1.c: 142: RC4 = 1;
  7995  089E  160E               	bsf	14,4	;volatile
  7996                           
  7997                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  7998  089F  300A               	movlw	10
  7999  08A0  00F2               	movwf	DelayTime_1us@count
  8000  08A1  3000               	movlw	0
  8001  08A2  00F3               	movwf	DelayTime_1us@count+1
  8002  08A3  3195  258F  3188   	fcall	_DelayTime_1us
  8003                           
  8004                           ;CC2500_B1.c: 144: RC4 = 0;
  8005  08A6  0020               	movlb	0	; select bank0
  8006  08A7  120E               	bcf	14,4	;volatile
  8007                           
  8008                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8009  08A8  300A               	movlw	10
  8010  08A9  00F2               	movwf	DelayTime_1us@count
  8011  08AA  3000               	movlw	0
  8012  08AB  00F3               	movwf	DelayTime_1us@count+1
  8013  08AC  3195  258F  3188   	fcall	_DelayTime_1us
  8014                           
  8015                           ;CC2500_B1.c: 146: RC4 = 1;
  8016  08AF  0020               	movlb	0	; select bank0
  8017  08B0  160E               	bsf	14,4	;volatile
  8018                           
  8019                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8020  08B1  3028               	movlw	40
  8021  08B2  00F2               	movwf	DelayTime_1us@count
  8022  08B3  3000               	movlw	0
  8023  08B4  00F3               	movwf	DelayTime_1us@count+1
  8024  08B5  3195  258F  3188   	fcall	_DelayTime_1us
  8025                           
  8026                           ;CC2500_B1.c: 148: RC4 = 0;
  8027  08B8  0020               	movlb	0	; select bank0
  8028  08B9  120E               	bcf	14,4	;volatile
  8029                           
  8030                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8031  08BA  3030               	movlw	48
  8032  08BB  00F8               	movwf	??_CC2500_PowerRST
  8033  08BC  0878               	movf	??_CC2500_PowerRST,w
  8034  08BD  00EB               	movwf	_SPI0Buffer
  8035                           
  8036                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8037  08BE  28C2               	goto	l8963
  8038  08BF                     l8961:	
  8039                           
  8040                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8041  08BF  3193  23F8  3188   	fcall	_RF_Timeout_Counter
  8042  08C2                     l8963:	
  8043  08C2  0020               	movlb	0	; select bank0
  8044  08C3  1D0E               	btfss	14,2	;volatile
  8045  08C4  28C8               	goto	l8967
  8046  08C5  0021               	movlb	1	; select bank1
  8047  08C6  1F31               	btfss	(_RF1^(0+128)+1),6
  8048  08C7  28BF               	goto	l8961
  8049  08C8                     l8967:	
  8050                           
  8051                           ;CC2500_B1.c: 152: };
  8052                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8053  08C8  3191  2124  3188   	fcall	_setRF_TimeoutCleared
  8054                           
  8055                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8056  08CB  3193  23A5  3188   	fcall	_CC2500_WriteByte
  8057                           
  8058                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8059  08CE  28D2               	goto	l8973
  8060  08CF                     l8971:	
  8061                           
  8062                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8063  08CF  3193  23F8  3188   	fcall	_RF_Timeout_Counter
  8064  08D2                     l8973:	
  8065  08D2  0020               	movlb	0	; select bank0
  8066  08D3  1D0E               	btfss	14,2	;volatile
  8067  08D4  28D8               	goto	l8977
  8068  08D5  0021               	movlb	1	; select bank1
  8069  08D6  1F31               	btfss	(_RF1^(0+128)+1),6
  8070  08D7  28CF               	goto	l8971
  8071  08D8                     l8977:	
  8072                           
  8073                           ;CC2500_B1.c: 157: };
  8074                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  8075  08D8  3191  2124         	fcall	_setRF_TimeoutCleared
  8076                           
  8077                           ;CC2500_B1.c: 159: RC0 = 0;
  8078  08DA  0020               	movlb	0	; select bank0
  8079  08DB  100E               	bcf	14,0	;volatile
  8080                           
  8081                           ;CC2500_B1.c: 160: RC4 = 1;
  8082  08DC  160E               	bsf	14,4	;volatile
  8083  08DD  0008               	return
  8084  08DE                     __end_of_CC2500_PowerRST:	
  8085                           
  8086                           	psect	text38
  8087  1605                     __ptext38:	
  8088 ;; *************** function _CC2500_InitSetREG *****************
  8089 ;; Defined at:
  8090 ;;		line 166 in file "../src/CC2500_B1.c"
  8091 ;; Parameters:    Size  Location     Type
  8092 ;;		None
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  loop_c          1    2[BANK0 ] unsigned char 
  8095 ;;  temp2           1    1[BANK0 ] unsigned char 
  8096 ;;  temp1           1    0[BANK0 ] unsigned char 
  8097 ;; Return value:  Size  Location     Type
  8098 ;;		None               void
  8099 ;; Registers used:
  8100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8101 ;; Tracked objects:
  8102 ;;		On entry : 0/0
  8103 ;;		On exit  : 0/0
  8104 ;;		Unchanged: 0/0
  8105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8109 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;Total ram usage:        4 bytes
  8111 ;; Hardware stack levels used:    1
  8112 ;; Hardware stack levels required when called:    5
  8113 ;; This function calls:
  8114 ;;		_CC2500_WriteREG
  8115 ;; This function is called by:
  8116 ;;		_CC2500_PowerOnInitial
  8117 ;; This function uses a non-reentrant model
  8118 ;;
  8119                           
  8120                           
  8121                           ;psect for function _CC2500_InitSetREG
  8122  1605                     _CC2500_InitSetREG:	
  8123                           
  8124                           ;CC2500_B1.c: 167: unsigned char loop_c;
  8125                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  8126                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8130  1605  0020               	movlb	0	; select bank0
  8131  1606  01A2               	clrf	CC2500_InitSetREG@loop_c
  8132  1607                     L2:	
  8133  1607  302F               	movlw	47
  8134  1608  0222               	subwf	CC2500_InitSetREG@loop_c,w
  8135  1609  1803               	btfsc	3,0
  8136  160A  0008               	return
  8137                           
  8138                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  8139  160B  0822               	movf	CC2500_InitSetREG@loop_c,w
  8140  160C  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  8141  160D  0084               	movwf	4
  8142  160E  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  8143  160F  1803               	skipnc
  8144  1610  3E01               	addlw	1
  8145  1611  0085               	movwf	5
  8146  1612  0800               	movf	0,w	;code access
  8147  1613  00F7               	movwf	??_CC2500_InitSetREG
  8148  1614  0877               	movf	??_CC2500_InitSetREG,w
  8149  1615  00A0               	movwf	CC2500_InitSetREG@temp1
  8150                           
  8151                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  8152  1616  0822               	movf	CC2500_InitSetREG@loop_c,w
  8153  1617  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  8154  1618  0084               	movwf	4
  8155  1619  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  8156  161A  1803               	skipnc
  8157  161B  3E01               	addlw	1
  8158  161C  0085               	movwf	5
  8159  161D  0800               	movf	0,w	;code access
  8160  161E  00F7               	movwf	??_CC2500_InitSetREG
  8161  161F  0877               	movf	??_CC2500_InitSetREG,w
  8162  1620  00A1               	movwf	CC2500_InitSetREG@temp2
  8163                           
  8164                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  8165  1621  0821               	movf	CC2500_InitSetREG@temp2,w
  8166  1622  00F7               	movwf	??_CC2500_InitSetREG
  8167  1623  0877               	movf	??_CC2500_InitSetREG,w
  8168  1624  00F4               	movwf	CC2500_WriteREG@value
  8169  1625  0820               	movf	CC2500_InitSetREG@temp1,w
  8170  1626  3195  252A  3196   	fcall	_CC2500_WriteREG
  8171  1629  3001               	movlw	1
  8172  162A  00F7               	movwf	??_CC2500_InitSetREG
  8173  162B  0877               	movf	??_CC2500_InitSetREG,w
  8174  162C  0020               	movlb	0	; select bank0
  8175  162D  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  8176  162E  2E07               	goto	L2
  8177  162F                     __end_of_CC2500_InitSetREG:	
  8178                           
  8179                           	psect	text39
  8180  14EB                     __ptext39:	
  8181 ;; *************** function _CC2500_InitPATable *****************
  8182 ;; Defined at:
  8183 ;;		line 181 in file "../src/CC2500_B1.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;		None
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  loop_d          1    1[BANK0 ] unsigned char 
  8188 ;;  temp            1    0[BANK0 ] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;		None               void
  8191 ;; Registers used:
  8192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 0/0
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8201 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;Total ram usage:        3 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:    5
  8205 ;; This function calls:
  8206 ;;		_CC2500_WriteREG
  8207 ;; This function is called by:
  8208 ;;		_CC2500_PowerOnInitial
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _CC2500_InitPATable
  8214  14EB                     _CC2500_InitPATable:	
  8215                           
  8216                           ;CC2500_B1.c: 182: unsigned char loop_d;
  8217                           ;CC2500_B1.c: 183: unsigned char temp;
  8218                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  8219                           
  8220                           ;incstack = 0
  8221                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8222  14EB  0020               	movlb	0	; select bank0
  8223  14EC  01A1               	clrf	CC2500_InitPATable@loop_d
  8224  14ED                     L3:	
  8225  14ED  3008               	movlw	8
  8226  14EE  0221               	subwf	CC2500_InitPATable@loop_d,w
  8227  14EF  1803               	btfsc	3,0
  8228  14F0  0008               	return
  8229                           
  8230                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  8231  14F1  0821               	movf	CC2500_InitPATable@loop_d,w
  8232  14F2  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  8233  14F3  0084               	movwf	4
  8234  14F4  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  8235  14F5  1803               	skipnc
  8236  14F6  3E01               	addlw	1
  8237  14F7  0085               	movwf	5
  8238  14F8  0800               	movf	0,w	;code access
  8239  14F9  00F7               	movwf	??_CC2500_InitPATable
  8240  14FA  0877               	movf	??_CC2500_InitPATable,w
  8241  14FB  00A0               	movwf	CC2500_InitPATable@temp
  8242                           
  8243                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  8244  14FC  0820               	movf	CC2500_InitPATable@temp,w
  8245  14FD  00F7               	movwf	??_CC2500_InitPATable
  8246  14FE  0877               	movf	??_CC2500_InitPATable,w
  8247  14FF  00F4               	movwf	CC2500_WriteREG@value
  8248  1500  303E               	movlw	62
  8249  1501  3195  252A  3194   	fcall	_CC2500_WriteREG
  8250  1504  3001               	movlw	1
  8251  1505  00F7               	movwf	??_CC2500_InitPATable
  8252  1506  0877               	movf	??_CC2500_InitPATable,w
  8253  1507  0020               	movlb	0	; select bank0
  8254  1508  07A1               	addwf	CC2500_InitPATable@loop_d,f
  8255  1509  2CED               	goto	L3
  8256  150A                     __end_of_CC2500_InitPATable:	
  8257                           
  8258                           	psect	text40
  8259  152A                     __ptext40:	
  8260 ;; *************** function _CC2500_WriteREG *****************
  8261 ;; Defined at:
  8262 ;;		line 258 in file "../src/CC2500_B1.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;  w_addr          1    wreg     unsigned char 
  8265 ;;  value           1    4[COMMON] unsigned char 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  w_addr          1    6[COMMON] unsigned char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;		None               void
  8270 ;; Registers used:
  8271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        3 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    4
  8284 ;; This function calls:
  8285 ;;		_CC2500_WriteByte
  8286 ;;		_RF_Timeout_Counter
  8287 ;;		_setRF_TimeoutCleared
  8288 ;; This function is called by:
  8289 ;;		_CC2500_InitSetREG
  8290 ;;		_CC2500_InitPATable
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _CC2500_WriteREG
  8296  152A                     _CC2500_WriteREG:	
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8300                           ;CC2500_WriteREG@w_addr stored from wreg
  8301  152A  00F6               	movwf	CC2500_WriteREG@w_addr
  8302                           
  8303                           ;CC2500_B1.c: 259: RC4 = 0;
  8304  152B  0020               	movlb	0	; select bank0
  8305  152C  120E               	bcf	14,4	;volatile
  8306                           
  8307                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  8308  152D  0876               	movf	CC2500_WriteREG@w_addr,w
  8309  152E  00F5               	movwf	??_CC2500_WriteREG
  8310  152F  0875               	movf	??_CC2500_WriteREG,w
  8311  1530  00EB               	movwf	_SPI0Buffer
  8312                           
  8313                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  8314  1531  2D35               	goto	l8835
  8315  1532                     l8833:	
  8316                           
  8317                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  8318  1532  3193  23F8  3195   	fcall	_RF_Timeout_Counter
  8319  1535                     l8835:	
  8320  1535  0020               	movlb	0	; select bank0
  8321  1536  1D0E               	btfss	14,2	;volatile
  8322  1537  2D3B               	goto	l8839
  8323  1538  0021               	movlb	1	; select bank1
  8324  1539  1F31               	btfss	(_RF1^(0+128)+1),6
  8325  153A  2D32               	goto	l8833
  8326  153B                     l8839:	
  8327                           
  8328                           ;CC2500_B1.c: 263: };
  8329                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  8330  153B  3191  2124  3195   	fcall	_setRF_TimeoutCleared
  8331                           
  8332                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  8333  153E  3193  23A5  3195   	fcall	_CC2500_WriteByte
  8334                           
  8335                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  8336  1541  0874               	movf	CC2500_WriteREG@value,w
  8337  1542  00F5               	movwf	??_CC2500_WriteREG
  8338  1543  0875               	movf	??_CC2500_WriteREG,w
  8339  1544  0020               	movlb	0	; select bank0
  8340  1545  00EB               	movwf	_SPI0Buffer
  8341                           
  8342                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  8343  1546  3193  23A5         	fcall	_CC2500_WriteByte
  8344                           
  8345                           ;CC2500_B1.c: 269: RC4 = 1;
  8346  1548  0020               	movlb	0	; select bank0
  8347  1549  160E               	bsf	14,4	;volatile
  8348  154A  0008               	return
  8349  154B                     __end_of_CC2500_WriteREG:	
  8350                           
  8351                           	psect	text41
  8352  11D9                     __ptext41:	
  8353 ;; *************** function _CC2500_FrequencyCabr *****************
  8354 ;; Defined at:
  8355 ;;		line 208 in file "../src/CC2500_B1.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;		None
  8360 ;; Return value:  Size  Location     Type
  8361 ;;		None               void
  8362 ;; Registers used:
  8363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8373 ;;Total ram usage:        0 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    5
  8376 ;; This function calls:
  8377 ;;		_CC2500_WriteCommand
  8378 ;;		_DelayTime_1us
  8379 ;; This function is called by:
  8380 ;;		_CC2500_PowerOnInitial
  8381 ;; This function uses a non-reentrant model
  8382 ;;
  8383                           
  8384                           
  8385                           ;psect for function _CC2500_FrequencyCabr
  8386  11D9                     _CC2500_FrequencyCabr:	
  8387                           
  8388                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  8389                           
  8390                           ;incstack = 0
  8391                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8392  11D9  3033               	movlw	51
  8393  11DA  3194  2466  3191   	fcall	_CC2500_WriteCommand
  8394                           
  8395                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  8396  11DD  30E8               	movlw	232
  8397  11DE  00F2               	movwf	DelayTime_1us@count
  8398  11DF  3003               	movlw	3
  8399  11E0  00F3               	movwf	DelayTime_1us@count+1
  8400  11E1  3195  258F         	fcall	_DelayTime_1us
  8401  11E3  0008               	return
  8402  11E4                     __end_of_CC2500_FrequencyCabr:	
  8403                           
  8404                           	psect	text42
  8405  158F                     __ptext42:	
  8406 ;; *************** function _DelayTime_1us *****************
  8407 ;; Defined at:
  8408 ;;		line 327 in file "../src/CC2500_B1.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  count           2    2[COMMON] int 
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;  j               2    6[COMMON] unsigned int 
  8413 ;;  i               2    4[COMMON] unsigned int 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;		None               void
  8416 ;; Registers used:
  8417 ;;		wreg, status,2
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;Total ram usage:        6 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    3
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_CC2500_PowerRST
  8434 ;;		_CC2500_FrequencyCabr
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _DelayTime_1us
  8440  158F                     _DelayTime_1us:	
  8441                           
  8442                           ;CC2500_B1.c: 328: unsigned int i, j;
  8443                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  8444                           
  8445                           ;incstack = 0
  8446                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  8447  158F  3001               	movlw	1
  8448  1590  00F4               	movwf	DelayTime_1us@i
  8449  1591  3000               	movlw	0
  8450  1592  00F5               	movwf	DelayTime_1us@i+1
  8451  1593                     l351:	
  8452  1593  0873               	movf	DelayTime_1us@count+1,w
  8453  1594  0275               	subwf	DelayTime_1us@i+1,w
  8454  1595  1D03               	skipz
  8455  1596  2D99               	goto	u4615
  8456  1597  0872               	movf	DelayTime_1us@count,w
  8457  1598  0274               	subwf	DelayTime_1us@i,w
  8458  1599                     u4615:	
  8459  1599  1803               	btfsc	3,0
  8460  159A  0008               	return
  8461                           
  8462                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  8463  159B  01F6               	clrf	DelayTime_1us@j
  8464  159C  01F7               	clrf	DelayTime_1us@j+1
  8465  159D  3000               	movlw	0
  8466  159E  0277               	subwf	DelayTime_1us@j+1,w
  8467  159F  3002               	movlw	2
  8468  15A0  1903               	skipnz
  8469  15A1  0276               	subwf	DelayTime_1us@j,w
  8470  15A2  1803               	btfsc	3,0
  8471  15A3  2DAF               	goto	l5695
  8472  15A4                     l5693:	
  8473  15A4  3001               	movlw	1
  8474  15A5  07F6               	addwf	DelayTime_1us@j,f
  8475  15A6  3000               	movlw	0
  8476  15A7  3DF7               	addwfc	DelayTime_1us@j+1,f
  8477  15A8  3000               	movlw	0
  8478  15A9  0277               	subwf	DelayTime_1us@j+1,w
  8479  15AA  3002               	movlw	2
  8480  15AB  1903               	skipnz
  8481  15AC  0276               	subwf	DelayTime_1us@j,w
  8482  15AD  1C03               	skipc
  8483  15AE  2DA4               	goto	l5693
  8484  15AF                     l5695:	
  8485  15AF  3001               	movlw	1
  8486  15B0  07F4               	addwf	DelayTime_1us@i,f
  8487  15B1  3000               	movlw	0
  8488  15B2  3DF5               	addwfc	DelayTime_1us@i+1,f
  8489  15B3  2D93               	goto	l351
  8490  15B4                     __end_of_DelayTime_1us:	
  8491                           
  8492                           	psect	text43
  8493  112C                     __ptext43:	
  8494 ;; *************** function _CC2500_ClearTXFIFO *****************
  8495 ;; Defined at:
  8496 ;;		line 194 in file "../src/CC2500_B1.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;		None               void
  8503 ;; Registers used:
  8504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:    5
  8517 ;; This function calls:
  8518 ;;		_CC2500_WriteCommand
  8519 ;; This function is called by:
  8520 ;;		_CC2500_PowerOnInitial
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           
  8525                           ;psect for function _CC2500_ClearTXFIFO
  8526  112C                     _CC2500_ClearTXFIFO:	
  8527                           
  8528                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  8529                           
  8530                           ;incstack = 0
  8531                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8532  112C  303B               	movlw	59
  8533  112D  3194  2466         	fcall	_CC2500_WriteCommand
  8534  112F  0008               	return
  8535  1130                     __end_of_CC2500_ClearTXFIFO:	
  8536                           
  8537                           	psect	text44
  8538  1128                     __ptext44:	
  8539 ;; *************** function _CC2500_ClearRXFIFO *****************
  8540 ;; Defined at:
  8541 ;;		line 201 in file "../src/CC2500_B1.c"
  8542 ;; Parameters:    Size  Location     Type
  8543 ;;		None
  8544 ;; Auto vars:     Size  Location     Type
  8545 ;;		None
  8546 ;; Return value:  Size  Location     Type
  8547 ;;		None               void
  8548 ;; Registers used:
  8549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:        0 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    5
  8562 ;; This function calls:
  8563 ;;		_CC2500_WriteCommand
  8564 ;; This function is called by:
  8565 ;;		_CC2500_PowerOnInitial
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _CC2500_ClearRXFIFO
  8571  1128                     _CC2500_ClearRXFIFO:	
  8572                           
  8573                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  8574                           
  8575                           ;incstack = 0
  8576                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8577  1128  303A               	movlw	58
  8578  1129  3194  2466         	fcall	_CC2500_WriteCommand
  8579  112B  0008               	return
  8580  112C                     __end_of_CC2500_ClearRXFIFO:	
  8581                           
  8582                           	psect	text45
  8583  1466                     __ptext45:	
  8584 ;; *************** function _CC2500_WriteCommand *****************
  8585 ;; Defined at:
  8586 ;;		line 292 in file "../src/CC2500_B1.c"
  8587 ;; Parameters:    Size  Location     Type
  8588 ;;  command         1    wreg     unsigned char 
  8589 ;; Auto vars:     Size  Location     Type
  8590 ;;  command         1    5[COMMON] unsigned char 
  8591 ;; Return value:  Size  Location     Type
  8592 ;;		None               void
  8593 ;; Registers used:
  8594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8595 ;; Tracked objects:
  8596 ;;		On entry : 0/0
  8597 ;;		On exit  : 0/0
  8598 ;;		Unchanged: 0/0
  8599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8603 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8604 ;;Total ram usage:        2 bytes
  8605 ;; Hardware stack levels used:    1
  8606 ;; Hardware stack levels required when called:    4
  8607 ;; This function calls:
  8608 ;;		_CC2500_WriteByte
  8609 ;;		_RF_Timeout_Counter
  8610 ;;		_setRF_TimeoutCleared
  8611 ;; This function is called by:
  8612 ;;		_CC2500_TxData
  8613 ;;		_CC2500_RxData
  8614 ;;		_CC2500_ClearTXFIFO
  8615 ;;		_CC2500_ClearRXFIFO
  8616 ;;		_CC2500_FrequencyCabr
  8617 ;;		_CC2500_SIDLEMode
  8618 ;;		_setRF_Main
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _CC2500_WriteCommand
  8624  1466                     _CC2500_WriteCommand:	
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8628                           ;CC2500_WriteCommand@command stored from wreg
  8629  1466  00F5               	movwf	CC2500_WriteCommand@command
  8630                           
  8631                           ;CC2500_B1.c: 293: RC4 = 0;
  8632  1467  0020               	movlb	0	; select bank0
  8633  1468  120E               	bcf	14,4	;volatile
  8634                           
  8635                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  8636  1469  0875               	movf	CC2500_WriteCommand@command,w
  8637  146A  00F4               	movwf	??_CC2500_WriteCommand
  8638  146B  0874               	movf	??_CC2500_WriteCommand,w
  8639  146C  00EB               	movwf	_SPI0Buffer
  8640                           
  8641                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  8642  146D  2C71               	goto	l8819
  8643  146E                     l8817:	
  8644                           
  8645                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  8646  146E  3193  23F8  3194   	fcall	_RF_Timeout_Counter
  8647  1471                     l8819:	
  8648  1471  0020               	movlb	0	; select bank0
  8649  1472  1D0E               	btfss	14,2	;volatile
  8650  1473  2C77               	goto	l8823
  8651  1474  0021               	movlb	1	; select bank1
  8652  1475  1F31               	btfss	(_RF1^(0+128)+1),6
  8653  1476  2C6E               	goto	l8817
  8654  1477                     l8823:	
  8655                           
  8656                           ;CC2500_B1.c: 298: };
  8657                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  8658  1477  3191  2124  3194   	fcall	_setRF_TimeoutCleared
  8659                           
  8660                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  8661  147A  3193  23A5         	fcall	_CC2500_WriteByte
  8662                           
  8663                           ;CC2500_B1.c: 302: RC4 = 1;
  8664  147C  0020               	movlb	0	; select bank0
  8665  147D  160E               	bsf	14,4	;volatile
  8666  147E  0008               	return
  8667  147F                     __end_of_CC2500_WriteCommand:	
  8668                           
  8669                           	psect	text46
  8670  1124                     __ptext46:	
  8671 ;; *************** function _setRF_TimeoutCleared *****************
  8672 ;; Defined at:
  8673 ;;		line 150 in file "../src/RF_Control_B1.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;		None
  8676 ;; Auto vars:     Size  Location     Type
  8677 ;;		None
  8678 ;; Return value:  Size  Location     Type
  8679 ;;		None               void
  8680 ;; Registers used:
  8681 ;;		status,2
  8682 ;; Tracked objects:
  8683 ;;		On entry : 0/0
  8684 ;;		On exit  : 0/0
  8685 ;;		Unchanged: 0/0
  8686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;Total ram usage:        0 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    3
  8694 ;; This function calls:
  8695 ;;		Nothing
  8696 ;; This function is called by:
  8697 ;;		_CC2500_TxData
  8698 ;;		_CC2500_RxData
  8699 ;;		_CC2500_PowerRST
  8700 ;;		_CC2500_WriteREG
  8701 ;;		_CC2500_WriteCommand
  8702 ;;		_CC2500_ReadStatus
  8703 ;;		_CC2500_ReadREG
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function _setRF_TimeoutCleared
  8709  1124                     _setRF_TimeoutCleared:	
  8710                           
  8711                           ;RF_Control_B1.c: 151: RF1.TimeoutCount = 0;
  8712                           
  8713                           ;incstack = 0
  8714                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  8715  1124  0021               	movlb	1	; select bank1
  8716  1125  01BD               	clrf	(_RF1^(0+128)+13)
  8717  1126  01BE               	clrf	((_RF1+1)^(0+128)+13)
  8718  1127  0008               	return
  8719  1128                     __end_of_setRF_TimeoutCleared:	
  8720                           
  8721                           	psect	text47
  8722  13F8                     __ptext47:	
  8723 ;; *************** function _RF_Timeout_Counter *****************
  8724 ;; Defined at:
  8725 ;;		line 142 in file "../src/RF_Control_B1.c"
  8726 ;; Parameters:    Size  Location     Type
  8727 ;;		None
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;		None
  8730 ;; Return value:  Size  Location     Type
  8731 ;;		None               void
  8732 ;; Registers used:
  8733 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8734 ;; Tracked objects:
  8735 ;;		On entry : 0/0
  8736 ;;		On exit  : 0/0
  8737 ;;		Unchanged: 0/0
  8738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8743 ;;Total ram usage:        0 bytes
  8744 ;; Hardware stack levels used:    1
  8745 ;; Hardware stack levels required when called:    3
  8746 ;; This function calls:
  8747 ;;		Nothing
  8748 ;; This function is called by:
  8749 ;;		_CC2500_TxData
  8750 ;;		_CC2500_RxData
  8751 ;;		_CC2500_PowerRST
  8752 ;;		_CC2500_WriteREG
  8753 ;;		_CC2500_WriteCommand
  8754 ;;		_CC2500_ReadStatus
  8755 ;;		_CC2500_ReadREG
  8756 ;; This function uses a non-reentrant model
  8757 ;;
  8758                           
  8759                           
  8760                           ;psect for function _RF_Timeout_Counter
  8761  13F8                     _RF_Timeout_Counter:	
  8762                           
  8763                           ;RF_Control_B1.c: 143: RF1.TimeoutCount++;
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  8767  13F8  3001               	movlw	1
  8768  13F9  0021               	movlb	1	; select bank1
  8769  13FA  07BD               	addwf	(_RF1^(0+128)+13),f
  8770  13FB  3000               	movlw	0
  8771  13FC  3DBE               	addwfc	((_RF1+1)^(0+128)+13),f
  8772                           
  8773                           ;RF_Control_B1.c: 144: if (RF1.TimeoutCount == 25000) {
  8774  13FD  300D               	movlw	13
  8775  13FE  3EB0               	addlw	_RF1& (0+255)
  8776  13FF  0086               	movwf	6
  8777  1400  0187               	clrf	7
  8778  1401  3F40               	moviw [0]fsr1
  8779  1402  3AA8               	xorlw	168
  8780  1403  1D03               	skipz
  8781  1404  2C07               	goto	u9145
  8782  1405  3F41               	moviw [1]fsr1
  8783  1406  3A61               	xorlw	97
  8784  1407                     u9145:	
  8785  1407  1D03               	skipz
  8786  1408  0008               	return
  8787                           
  8788                           ;RF_Control_B1.c: 145: RF1.TimeoutCount = 0;
  8789  1409  01BD               	clrf	(_RF1^(0+128)+13)
  8790  140A  01BE               	clrf	((_RF1+1)^(0+128)+13)
  8791                           
  8792                           ;RF_Control_B1.c: 146: RF1.Timeout = 1;
  8793  140B  1731               	bsf	(_RF1^(0+128)+1),6
  8794  140C  0008               	return
  8795  140D                     __end_of_RF_Timeout_Counter:	
  8796                           
  8797                           	psect	text48
  8798  13A5                     __ptext48:	
  8799 ;; *************** function _CC2500_WriteByte *****************
  8800 ;; Defined at:
  8801 ;;		line 226 in file "../src/CC2500_B1.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;		None
  8804 ;; Auto vars:     Size  Location     Type
  8805 ;;  loop_a          1    3[COMMON] unsigned char 
  8806 ;; Return value:  Size  Location     Type
  8807 ;;		None               void
  8808 ;; Registers used:
  8809 ;;		wreg, status,2, status,0
  8810 ;; Tracked objects:
  8811 ;;		On entry : 0/0
  8812 ;;		On exit  : 0/0
  8813 ;;		Unchanged: 0/0
  8814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8817 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8818 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8819 ;;Total ram usage:        2 bytes
  8820 ;; Hardware stack levels used:    1
  8821 ;; Hardware stack levels required when called:    3
  8822 ;; This function calls:
  8823 ;;		Nothing
  8824 ;; This function is called by:
  8825 ;;		_CC2500_TxData
  8826 ;;		_CC2500_RxData
  8827 ;;		_CC2500_PowerRST
  8828 ;;		_CC2500_WriteREG
  8829 ;;		_CC2500_WriteCommand
  8830 ;;		_CC2500_ReadStatus
  8831 ;;		_CC2500_ReadREG
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           
  8836                           ;psect for function _CC2500_WriteByte
  8837  13A5                     _CC2500_WriteByte:	
  8838                           
  8839                           ;CC2500_B1.c: 227: unsigned char loop_a;
  8840                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  8844  13A5  01F3               	clrf	CC2500_WriteByte@loop_a
  8845  13A6                     L4:	
  8846  13A6  3008               	movlw	8
  8847  13A7  0273               	subwf	CC2500_WriteByte@loop_a,w
  8848  13A8  1803               	btfsc	3,0
  8849  13A9  0008               	return
  8850                           
  8851                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  8852  13AA  0020               	movlb	0	; select bank0
  8853  13AB  1FEB               	btfss	_SPI0Buffer,7
  8854  13AC  2BAF               	goto	l307
  8855                           
  8856                           ;CC2500_B1.c: 230: RC0 = 1;
  8857  13AD  140E               	bsf	14,0	;volatile
  8858  13AE  2BB0               	goto	l308
  8859  13AF                     l307:	
  8860                           
  8861                           ;CC2500_B1.c: 231: else
  8862                           ;CC2500_B1.c: 232: RC0 = 0;
  8863  13AF  100E               	bcf	14,0	;volatile
  8864  13B0                     l308:	
  8865                           
  8866                           ;CC2500_B1.c: 233: RC1 = 1;
  8867  13B0  148E               	bsf	14,1	;volatile
  8868                           
  8869                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  8870  13B1  1003               	clrc
  8871  13B2  0DEB               	rlf	_SPI0Buffer,f
  8872                           
  8873                           ;CC2500_B1.c: 235: RC1 = 0;
  8874  13B3  108E               	bcf	14,1	;volatile
  8875  13B4  3001               	movlw	1
  8876  13B5  00F2               	movwf	??_CC2500_WriteByte
  8877  13B6  0872               	movf	??_CC2500_WriteByte,w
  8878  13B7  07F3               	addwf	CC2500_WriteByte@loop_a,f
  8879  13B8  2BA6               	goto	L4
  8880  13B9                     __end_of_CC2500_WriteByte:	
  8881                           
  8882                           	psect	text49
  8883  1112                     __ptext49:	
  8884 ;; *************** function _RF_Initialization *****************
  8885 ;; Defined at:
  8886 ;;		line 9 in file "../src/RF_Control_B1.c"
  8887 ;; Parameters:    Size  Location     Type
  8888 ;;		None
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;		None
  8891 ;; Return value:  Size  Location     Type
  8892 ;;		None               void
  8893 ;; Registers used:
  8894 ;;		wreg, status,2, status,0, pclath, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8904 ;;Total ram usage:        0 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:    4
  8907 ;; This function calls:
  8908 ;;		_setRF_Initialization
  8909 ;; This function is called by:
  8910 ;;		_main
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           
  8915                           ;psect for function _RF_Initialization
  8916  1112                     _RF_Initialization:	
  8917                           
  8918                           ;RF_Control_B1.c: 11: setRF_Initialization();
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8922  1112  3191  21CE         	fcall	_setRF_Initialization
  8923  1114  0008               	return
  8924  1115                     __end_of_RF_Initialization:	
  8925                           
  8926                           	psect	text50
  8927  11CE                     __ptext50:	
  8928 ;; *************** function _setRF_Initialization *****************
  8929 ;; Defined at:
  8930 ;;		line 17 in file "../src/RF_Control_B1.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;		None               void
  8937 ;; Registers used:
  8938 ;;		wreg
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;Total ram usage:        1 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    3
  8951 ;; This function calls:
  8952 ;;		Nothing
  8953 ;; This function is called by:
  8954 ;;		_RF_Initialization
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _setRF_Initialization
  8960  11CE                     _setRF_Initialization:	
  8961                           
  8962                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _setRF_Initialization: [wreg]
  8966  11CE  3015               	movlw	21
  8967  11CF  00F2               	movwf	??_setRF_Initialization
  8968  11D0  0872               	movf	??_setRF_Initialization,w
  8969  11D1  0020               	movlb	0	; select bank0
  8970  11D2  00ED               	movwf	_Tx_Length
  8971                           
  8972                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
  8973  11D3  30C8               	movlw	200
  8974  11D4  0021               	movlb	1	; select bank1
  8975  11D5  00B8               	movwf	(_RF1^(0+128)+8)
  8976  11D6  3000               	movlw	0
  8977  11D7  00B9               	movwf	(_RF1^(0+128)+9)
  8978  11D8  0008               	return
  8979  11D9                     __end_of_setRF_Initialization:	
  8980                           
  8981                           	psect	text51
  8982  136C                     __ptext51:	
  8983 ;; *************** function _Mcu_Initialization *****************
  8984 ;; Defined at:
  8985 ;;		line 30 in file "../src/MCU_B1.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;		None
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;		None
  8990 ;; Return value:  Size  Location     Type
  8991 ;;		None               void
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0, pclath, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;Total ram usage:        0 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    4
  9006 ;; This function calls:
  9007 ;;		_ADC_Set
  9008 ;;		_Fosc_Set
  9009 ;;		_IOC_Set
  9010 ;;		_IO_Set
  9011 ;;		_TMR1_Set
  9012 ;;		_WDT_Set
  9013 ;; This function is called by:
  9014 ;;		_main
  9015 ;; This function uses a non-reentrant model
  9016 ;;
  9017                           
  9018                           
  9019                           ;psect for function _Mcu_Initialization
  9020  136C                     _Mcu_Initialization:	
  9021                           
  9022                           ;MCU_B1.c: 32: Fosc_Set();
  9023                           
  9024                           ;incstack = 0
  9025                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9026  136C  3191  2120  3193   	fcall	_Fosc_Set
  9027                           
  9028                           ;MCU_B1.c: 34: IO_Set();
  9029  136F  3187  27E3  3193   	fcall	_IO_Set
  9030                           
  9031                           ;MCU_B1.c: 36: ;;
  9032                           ;MCU_B1.c: 38: TMR1_Set();
  9033  1372  3192  2237  3193   	fcall	_TMR1_Set
  9034                           
  9035                           ;MCU_B1.c: 40: ADC_Set();
  9036  1375  3191  2161  3193   	fcall	_ADC_Set
  9037                           
  9038                           ;MCU_B1.c: 42: ;;
  9039                           ;MCU_B1.c: 44: ;;
  9040                           ;MCU_B1.c: 46: IOC_Set();
  9041  1378  3191  21C3  3193   	fcall	_IOC_Set
  9042                           
  9043                           ;MCU_B1.c: 48: ;;
  9044                           ;MCU_B1.c: 50: ;;
  9045                           ;MCU_B1.c: 52: WDT_Set();
  9046  137B  3191  2199         	fcall	_WDT_Set
  9047  137D  0008               	return
  9048  137E                     __end_of_Mcu_Initialization:	
  9049                           
  9050                           	psect	text52
  9051  1199                     __ptext52:	
  9052 ;; *************** function _WDT_Set *****************
  9053 ;; Defined at:
  9054 ;;		line 1107 in file "../src/MCU_B1.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;		None
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;		None
  9059 ;; Return value:  Size  Location     Type
  9060 ;;		None               void
  9061 ;; Registers used:
  9062 ;;		wreg
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:        1 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    3
  9075 ;; This function calls:
  9076 ;;		Nothing
  9077 ;; This function is called by:
  9078 ;;		_Mcu_Initialization
  9079 ;; This function uses a non-reentrant model
  9080 ;;
  9081                           
  9082                           
  9083                           ;psect for function _WDT_Set
  9084  1199                     _WDT_Set:	
  9085                           
  9086                           ;MCU_B1.c: 1114: WDTCON = 0b00010111;;
  9087                           
  9088                           ;incstack = 0
  9089                           ; Regs used in _WDT_Set: [wreg]
  9090  1199  3017               	movlw	23
  9091  119A  0021               	movlb	1	; select bank1
  9092  119B  0097               	movwf	23	;volatile
  9093                           
  9094                           ;MCU_B1.c: 1116: WDT.Enable = 1;
  9095  119C  145D               	bsf	_WDT^(0+128),0
  9096                           
  9097                           ;MCU_B1.c: 1117: WDT.Timer = 10;
  9098  119D  300A               	movlw	10
  9099  119E  00F2               	movwf	??_WDT_Set
  9100  119F  0872               	movf	??_WDT_Set,w
  9101  11A0  00DE               	movwf	(_WDT^(0+128)+1)
  9102  11A1  0008               	return
  9103  11A2                     __end_of_WDT_Set:	
  9104                           
  9105                           	psect	text53
  9106  1237                     __ptext53:	
  9107 ;; *************** function _TMR1_Set *****************
  9108 ;; Defined at:
  9109 ;;		line 226 in file "../src/MCU_B1.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;		None
  9112 ;; Auto vars:     Size  Location     Type
  9113 ;;		None
  9114 ;; Return value:  Size  Location     Type
  9115 ;;		None               void
  9116 ;; Registers used:
  9117 ;;		wreg
  9118 ;; Tracked objects:
  9119 ;;		On entry : 0/0
  9120 ;;		On exit  : 0/0
  9121 ;;		Unchanged: 0/0
  9122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9127 ;;Total ram usage:        0 bytes
  9128 ;; Hardware stack levels used:    1
  9129 ;; Hardware stack levels required when called:    3
  9130 ;; This function calls:
  9131 ;;		Nothing
  9132 ;; This function is called by:
  9133 ;;		_Mcu_Initialization
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           
  9138                           ;psect for function _TMR1_Set
  9139  1237                     _TMR1_Set:	
  9140                           
  9141                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  9142                           
  9143                           ;incstack = 0
  9144                           ; Regs used in _TMR1_Set: [wreg]
  9145  1237  3041               	movlw	65
  9146  1238  0020               	movlb	0	; select bank0
  9147  1239  0098               	movwf	24	;volatile
  9148                           
  9149                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  9150  123A  30FA               	movlw	250
  9151  123B  0097               	movwf	23	;volatile
  9152                           
  9153                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  9154  123C  3038               	movlw	56
  9155  123D  0096               	movwf	22	;volatile
  9156                           
  9157                           ;MCU_B1.c: 230: TMR1IE = 1;
  9158  123E  0021               	movlb	1	; select bank1
  9159  123F  1411               	bsf	17,0	;volatile
  9160                           
  9161                           ;MCU_B1.c: 231: PEIE = 1;
  9162  1240  170B               	bsf	11,6	;volatile
  9163                           
  9164                           ;MCU_B1.c: 232: GIE = 1;
  9165  1241  178B               	bsf	11,7	;volatile
  9166  1242  0008               	return
  9167  1243                     __end_of_TMR1_Set:	
  9168                           
  9169                           	psect	text54
  9170  07E3                     __ptext54:	
  9171 ;; *************** function _IO_Set *****************
  9172 ;; Defined at:
  9173 ;;		line 60 in file "../src/MCU_B1.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, status,2
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    3
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_Mcu_Initialization
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _IO_Set
  9203  07E3                     _IO_Set:	
  9204                           
  9205                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
  9206                           
  9207                           ;incstack = 0
  9208                           ; Regs used in _IO_Set: [wreg+status,2]
  9209  07E3  3077               	movlw	119
  9210  07E4  0021               	movlb	1	; select bank1
  9211  07E5  008C               	movwf	12	;volatile
  9212                           
  9213                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
  9214  07E6  3007               	movlw	7
  9215  07E7  008D               	movwf	13	;volatile
  9216                           
  9217                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
  9218  07E8  300C               	movlw	12
  9219  07E9  008E               	movwf	14	;volatile
  9220                           
  9221                           ;MCU_B1.c: 96: LATA = 0b00000000;;
  9222  07EA  0022               	movlb	2	; select bank2
  9223  07EB  018C               	clrf	12	;volatile
  9224                           
  9225                           ;MCU_B1.c: 97: LATB = 0b00000010;;
  9226  07EC  3002               	movlw	2
  9227  07ED  008D               	movwf	13	;volatile
  9228                           
  9229                           ;MCU_B1.c: 98: LATC = 0b00000000;;
  9230  07EE  018E               	clrf	14	;volatile
  9231                           
  9232                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
  9233  07EF  3022               	movlw	34
  9234  07F0  0023               	movlb	3	; select bank3
  9235  07F1  008C               	movwf	12	;volatile
  9236                           
  9237                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
  9238  07F2  018D               	clrf	13	;volatile
  9239                           
  9240                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
  9241  07F3  018E               	clrf	14	;volatile
  9242                           
  9243                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
  9244  07F4  3077               	movlw	119
  9245  07F5  0020               	movlb	0	; select bank0
  9246  07F6  008C               	movwf	12	;volatile
  9247                           
  9248                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
  9249  07F7  3007               	movlw	7
  9250  07F8  008D               	movwf	13	;volatile
  9251                           
  9252                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
  9253  07F9  300C               	movlw	12
  9254  07FA  008E               	movwf	14	;volatile
  9255                           
  9256                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
  9257  07FB  0024               	movlb	4	; select bank4
  9258  07FC  018D               	clrf	13	;volatile
  9259  07FD  0008               	return
  9260  07FE                     __end_of_IO_Set:	
  9261                           
  9262                           	psect	text55
  9263  11C3                     __ptext55:	
  9264 ;; *************** function _IOC_Set *****************
  9265 ;; Defined at:
  9266 ;;		line 381 in file "../src/MCU_B1.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;		None
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;		None
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, status,2
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;Total ram usage:        0 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    3
  9287 ;; This function calls:
  9288 ;;		Nothing
  9289 ;; This function is called by:
  9290 ;;		_Mcu_Initialization
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _IOC_Set
  9296  11C3                     _IOC_Set:	
  9297                           
  9298                           ;MCU_B1.c: 383: IOCBP = 0b00000100;;
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _IOC_Set: [wreg+status,2]
  9302  11C3  3004               	movlw	4
  9303  11C4  0027               	movlb	7	; select bank7
  9304  11C5  0094               	movwf	20	;volatile
  9305                           
  9306                           ;MCU_B1.c: 384: IOCBN = 0b00000100;;
  9307  11C6  3004               	movlw	4
  9308  11C7  0095               	movwf	21	;volatile
  9309                           
  9310                           ;MCU_B1.c: 386: IOCBF = 0b00000000;
  9311  11C8  0196               	clrf	22	;volatile
  9312                           
  9313                           ;MCU_B1.c: 388: IOCIE = 1;
  9314  11C9  158B               	bsf	11,3	;volatile
  9315                           
  9316                           ;MCU_B1.c: 389: IOCIF = 0;
  9317  11CA  100B               	bcf	11,0	;volatile
  9318                           
  9319                           ;MCU_B1.c: 390: PEIE = 1;
  9320  11CB  170B               	bsf	11,6	;volatile
  9321                           
  9322                           ;MCU_B1.c: 391: GIE = 1;
  9323  11CC  178B               	bsf	11,7	;volatile
  9324  11CD  0008               	return
  9325  11CE                     __end_of_IOC_Set:	
  9326                           
  9327                           	psect	text56
  9328  1120                     __ptext56:	
  9329 ;; *************** function _Fosc_Set *****************
  9330 ;; Defined at:
  9331 ;;		line 56 in file "../src/MCU_B1.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;		None               void
  9338 ;; Registers used:
  9339 ;;		wreg
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9349 ;;Total ram usage:        0 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    3
  9352 ;; This function calls:
  9353 ;;		Nothing
  9354 ;; This function is called by:
  9355 ;;		_Mcu_Initialization
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           
  9360                           ;psect for function _Fosc_Set
  9361  1120                     _Fosc_Set:	
  9362                           
  9363                           ;MCU_B1.c: 57: OSCCON = 0x78;
  9364                           
  9365                           ;incstack = 0
  9366                           ; Regs used in _Fosc_Set: [wreg]
  9367  1120  3078               	movlw	120
  9368  1121  0021               	movlb	1	; select bank1
  9369  1122  0099               	movwf	25	;volatile
  9370  1123  0008               	return
  9371  1124                     __end_of_Fosc_Set:	
  9372                           
  9373                           	psect	text57
  9374  1161                     __ptext57:	
  9375 ;; *************** function _ADC_Set *****************
  9376 ;; Defined at:
  9377 ;;		line 429 in file "../src/MCU_B1.c"
  9378 ;; Parameters:    Size  Location     Type
  9379 ;;		None
  9380 ;; Auto vars:     Size  Location     Type
  9381 ;;		None
  9382 ;; Return value:  Size  Location     Type
  9383 ;;		None               void
  9384 ;; Registers used:
  9385 ;;		wreg
  9386 ;; Tracked objects:
  9387 ;;		On entry : 0/0
  9388 ;;		On exit  : 0/0
  9389 ;;		Unchanged: 0/0
  9390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9395 ;;Total ram usage:        0 bytes
  9396 ;; Hardware stack levels used:    1
  9397 ;; Hardware stack levels required when called:    3
  9398 ;; This function calls:
  9399 ;;		Nothing
  9400 ;; This function is called by:
  9401 ;;		_Mcu_Initialization
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           
  9406                           ;psect for function _ADC_Set
  9407  1161                     _ADC_Set:	
  9408                           
  9409                           ;MCU_B1.c: 430: ADCON1 = 0xf3;
  9410                           
  9411                           ;incstack = 0
  9412                           ; Regs used in _ADC_Set: [wreg]
  9413  1161  30F3               	movlw	243
  9414  1162  0021               	movlb	1	; select bank1
  9415  1163  009E               	movwf	30	;volatile
  9416                           
  9417                           ;MCU_B1.c: 431: FVRCON = 0xc1;
  9418  1164  30C1               	movlw	193
  9419  1165  0022               	movlb	2	; select bank2
  9420  1166  0097               	movwf	23	;volatile
  9421  1167  0008               	return
  9422  1168                     __end_of_ADC_Set:	
  9423                           
  9424                           	psect	text58
  9425  122B                     __ptext58:	
  9426 ;; *************** function _LED_Main *****************
  9427 ;; Defined at:
  9428 ;;		line 47 in file "../src/LED_B1.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;		None
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;		None
  9433 ;; Return value:  Size  Location     Type
  9434 ;;		None               void
  9435 ;; Registers used:
  9436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;Total ram usage:        0 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    5
  9449 ;; This function calls:
  9450 ;;		_setLED_Main
  9451 ;; This function is called by:
  9452 ;;		_main
  9453 ;; This function uses a non-reentrant model
  9454 ;;
  9455                           
  9456                           
  9457                           ;psect for function _LED_Main
  9458  122B                     _LED_Main:	
  9459                           
  9460                           ;LED_B1.c: 58: setLED_Main(1);
  9461                           
  9462                           ;incstack = 0
  9463                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9464  122B  3001               	movlw	1
  9465  122C  3188  2058  3192   	fcall	_setLED_Main
  9466                           
  9467                           ;LED_B1.c: 61: setLED_Main(2);
  9468  122F  3002               	movlw	2
  9469  1230  3188  2058  3192   	fcall	_setLED_Main
  9470                           
  9471                           ;LED_B1.c: 67: setLED_Main(99);
  9472  1233  3063               	movlw	99
  9473  1234  3188  2058         	fcall	_setLED_Main
  9474  1236  0008               	return
  9475  1237                     __end_of_LED_Main:	
  9476                           
  9477                           	psect	text59
  9478  0858                     __ptext59:	
  9479 ;; *************** function _setLED_Main *****************
  9480 ;; Defined at:
  9481 ;;		line 229 in file "../src/LED_B1.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;  led             1    wreg     unsigned char 
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;  led             1    5[COMMON] unsigned char 
  9486 ;; Return value:  Size  Location     Type
  9487 ;;		None               void
  9488 ;; Registers used:
  9489 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9498 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9499 ;;Total ram usage:        3 bytes
  9500 ;; Hardware stack levels used:    1
  9501 ;; Hardware stack levels required when called:    4
  9502 ;; This function calls:
  9503 ;;		_LedPointSelect
  9504 ;; This function is called by:
  9505 ;;		_LED_Main
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           
  9510                           ;psect for function _setLED_Main
  9511  0858                     _setLED_Main:	
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9515                           ;setLED_Main@led stored from wreg
  9516  0858  00F5               	movwf	setLED_Main@led
  9517                           
  9518                           ;LED_B1.c: 230: LedPointSelect(led);
  9519  0859  0875               	movf	setLED_Main@led,w
  9520  085A  3194  24B3  3188   	fcall	_LedPointSelect
  9521                           
  9522                           ;LED_B1.c: 231: if (LED->GO == 1) {
  9523  085D  087A               	movf	_LED,w
  9524  085E  0086               	movwf	6
  9525  085F  087B               	movf	_LED+1,w
  9526  0860  0087               	movwf	7
  9527  0861  1C81               	btfss	1,1
  9528  0862  0008               	return
  9529                           
  9530                           ;LED_B1.c: 232: LED->Time++;
  9531  0863  087A               	movf	_LED,w
  9532  0864  0086               	movwf	6
  9533  0865  087B               	movf	_LED+1,w
  9534  0866  0087               	movwf	7
  9535  0867  3141               	addfsr 1,1
  9536  0868  3001               	movlw	1
  9537  0869  0781               	addwf	1,f
  9538  086A  3141               	addfsr 1,1
  9539  086B  1803               	skipnc
  9540  086C  0A81               	incf	1,f
  9541                           
  9542                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  9543  086D  087A               	movf	_LED,w
  9544  086E  0086               	movwf	6
  9545  086F  087B               	movf	_LED+1,w
  9546  0870  0087               	movwf	7
  9547  0871  3141               	addfsr 1,1
  9548  0872  3F40               	moviw [0]fsr1
  9549  0873  00F3               	movwf	??_setLED_Main
  9550  0874  3F41               	moviw [1]fsr1
  9551  0875  00F4               	movwf	??_setLED_Main+1
  9552  0876  3000               	movlw	0
  9553  0877  0274               	subwf	??_setLED_Main+1,w
  9554  0878  3019               	movlw	25
  9555  0879  1903               	skipnz
  9556  087A  0273               	subwf	??_setLED_Main,w
  9557  087B  1C03               	skipc
  9558  087C  0008               	return
  9559                           
  9560                           ;LED_B1.c: 234: LED->Time = 0;
  9561  087D  087A               	movf	_LED,w
  9562  087E  0086               	movwf	6
  9563  087F  087B               	movf	_LED+1,w
  9564  0880  0087               	movwf	7
  9565  0881  3141               	addfsr 1,1
  9566  0882  3000               	movlw	0
  9567  0883  3FC0               	movwi [0]fsr1
  9568  0884  3FC1               	movwi [1]fsr1
  9569                           
  9570                           ;LED_B1.c: 237: if (led == 1) {
  9571  0885  0875               	movf	setLED_Main@led,w
  9572  0886  3A01               	xorlw	1
  9573  0887  1D03               	skipz
  9574  0888  288C               	goto	l1030
  9575                           
  9576                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
  9577  0889  3008               	movlw	8
  9578  088A  0020               	movlb	0	; select bank0
  9579  088B  068C               	xorwf	12,f
  9580  088C                     l1030:	
  9581                           
  9582                           ;LED_B1.c: 239: }
  9583                           ;LED_B1.c: 242: if (led == 2) {
  9584  088C  0875               	movf	setLED_Main@led,w
  9585  088D  3A02               	xorlw	2
  9586  088E  1D03               	skipz
  9587  088F  2893               	goto	l1031
  9588                           
  9589                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
  9590  0890  3080               	movlw	128
  9591  0891  0020               	movlb	0	; select bank0
  9592  0892  068E               	xorwf	14,f
  9593  0893                     l1031:	
  9594                           
  9595                           ;LED_B1.c: 244: }
  9596                           ;LED_B1.c: 252: if (led == 99) {
  9597  0893  0875               	movf	setLED_Main@led,w
  9598  0894  3A63               	xorlw	99
  9599  0895  1D03               	skipz
  9600  0896  0008               	return
  9601                           
  9602                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
  9603  0897  3020               	movlw	32
  9604  0898  0020               	movlb	0	; select bank0
  9605  0899  068D               	xorwf	13,f
  9606  089A  0008               	return
  9607  089B                     __end_of_setLED_Main:	
  9608                           
  9609                           	psect	text60
  9610  121F                     __ptext60:	
  9611 ;; *************** function _LED_Initialization *****************
  9612 ;; Defined at:
  9613 ;;		line 31 in file "../src/LED_B1.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;		None
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;		None
  9618 ;; Return value:  Size  Location     Type
  9619 ;;		None               void
  9620 ;; Registers used:
  9621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9622 ;; Tracked objects:
  9623 ;;		On entry : 0/0
  9624 ;;		On exit  : 0/0
  9625 ;;		Unchanged: 0/0
  9626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;Total ram usage:        0 bytes
  9632 ;; Hardware stack levels used:    1
  9633 ;; Hardware stack levels required when called:    6
  9634 ;; This function calls:
  9635 ;;		_setLED_Initialization
  9636 ;; This function is called by:
  9637 ;;		_main
  9638 ;; This function uses a non-reentrant model
  9639 ;;
  9640                           
  9641                           
  9642                           ;psect for function _LED_Initialization
  9643  121F                     _LED_Initialization:	
  9644                           
  9645                           ;LED_B1.c: 33: setLED_Initialization(1);
  9646                           
  9647                           ;incstack = 0
  9648                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9649  121F  3001               	movlw	1
  9650  1220  3192  2289  3192   	fcall	_setLED_Initialization
  9651                           
  9652                           ;LED_B1.c: 36: setLED_Initialization(2);
  9653  1223  3002               	movlw	2
  9654  1224  3192  2289  3192   	fcall	_setLED_Initialization
  9655                           
  9656                           ;LED_B1.c: 42: setLED_Initialization(99);
  9657  1227  3063               	movlw	99
  9658  1228  3192  2289         	fcall	_setLED_Initialization
  9659  122A  0008               	return
  9660  122B                     __end_of_LED_Initialization:	
  9661                           
  9662                           	psect	text61
  9663  1289                     __ptext61:	
  9664 ;; *************** function _setLED_Initialization *****************
  9665 ;; Defined at:
  9666 ;;		line 74 in file "../src/LED_B1.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;  led             1    wreg     unsigned char 
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;  led             1    5[COMMON] unsigned char 
  9671 ;; Return value:  Size  Location     Type
  9672 ;;		None               void
  9673 ;; Registers used:
  9674 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9675 ;; Tracked objects:
  9676 ;;		On entry : 0/0
  9677 ;;		On exit  : 0/0
  9678 ;;		Unchanged: 0/0
  9679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9683 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9684 ;;Total ram usage:        1 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    5
  9687 ;; This function calls:
  9688 ;;		_LedPointSelect
  9689 ;;		_setLED
  9690 ;; This function is called by:
  9691 ;;		_LED_Initialization
  9692 ;; This function uses a non-reentrant model
  9693 ;;
  9694                           
  9695                           
  9696                           ;psect for function _setLED_Initialization
  9697  1289                     _setLED_Initialization:	
  9698                           
  9699                           ;incstack = 0
  9700                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  9701                           ;setLED_Initialization@led stored from wreg
  9702  1289  00F5               	movwf	setLED_Initialization@led
  9703                           
  9704                           ;LED_B1.c: 75: LedPointSelect(led);
  9705  128A  0875               	movf	setLED_Initialization@led,w
  9706  128B  3194  24B3  3192   	fcall	_LedPointSelect
  9707                           
  9708                           ;LED_B1.c: 76: LED->Enable = 1;
  9709  128E  087A               	movf	_LED,w
  9710  128F  0086               	movwf	6
  9711  1290  087B               	movf	_LED+1,w
  9712  1291  0087               	movwf	7
  9713  1292  1401               	bsf	1,0
  9714                           
  9715                           ;LED_B1.c: 77: setLED(led, 0);
  9716  1293  01F3               	clrf	setLED@command
  9717  1294  0875               	movf	setLED_Initialization@led,w
  9718  1295  318B  23E2         	fcall	_setLED
  9719  1297  0008               	return
  9720  1298                     __end_of_setLED_Initialization:	
  9721                           
  9722                           	psect	text62
  9723  17BF                     __ptext62:	
  9724 ;; *************** function _Flash_Memory_Main *****************
  9725 ;; Defined at:
  9726 ;;		line 980 in file "../src/MCU_B1.c"
  9727 ;; Parameters:    Size  Location     Type
  9728 ;;		None
  9729 ;; Auto vars:     Size  Location     Type
  9730 ;;  key_Status      1    0[BANK0 ] unsigned char 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;		None               void
  9733 ;; Registers used:
  9734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;Total ram usage:        3 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:    6
  9747 ;; This function calls:
  9748 ;;		_Flash_Memory_Modify
  9749 ;;		_getAll_Sw_KeyStatus
  9750 ;;		_getMain_All_LightsStatus
  9751 ;; This function is called by:
  9752 ;;		_main
  9753 ;; This function uses a non-reentrant model
  9754 ;;
  9755                           
  9756                           
  9757                           ;psect for function _Flash_Memory_Main
  9758  17BF                     _Flash_Memory_Main:	
  9759                           
  9760                           ;MCU_B1.c: 981: char key_Status = 0;
  9761                           
  9762                           ;incstack = 0
  9763                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9764  17BF  0020               	movlb	0	; select bank0
  9765  17C0  01A0               	clrf	Flash_Memory_Main@key_Status
  9766                           
  9767                           ;MCU_B1.c: 983: key_Status = getAll_Sw_KeyStatus();
  9768  17C1  3193  2328  3197   	fcall	_getAll_Sw_KeyStatus
  9769  17C4  00F8               	movwf	??_Flash_Memory_Main
  9770  17C5  0878               	movf	??_Flash_Memory_Main,w
  9771  17C6  0020               	movlb	0	; select bank0
  9772  17C7  00A0               	movwf	Flash_Memory_Main@key_Status
  9773                           
  9774                           ;MCU_B1.c: 985: if (Memory.Modify == 1) {
  9775  17C8  0023               	movlb	3	; select bank3
  9776  17C9  1C44               	btfss	(_Memory^(0+384)+36),0
  9777  17CA  0008               	return
  9778                           
  9779                           ;MCU_B1.c: 986: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
  9780  17CB  0020               	movlb	0	; select bank0
  9781  17CC  01A1               	clrf	_Flash_Memory_Main$3214
  9782  17CD  3191  216F  3197   	fcall	_getMain_All_LightsStatus
  9783  17D0  3800               	iorlw	0
  9784  17D1  1D03               	skipz
  9785  17D2  2FD9               	goto	l8367
  9786  17D3  0020               	movlb	0	; select bank0
  9787  17D4  08A0               	movf	Flash_Memory_Main@key_Status,f
  9788  17D5  1D03               	skipz
  9789  17D6  2FD9               	goto	l8367
  9790  17D7  01A1               	clrf	_Flash_Memory_Main$3214
  9791  17D8  0AA1               	incf	_Flash_Memory_Main$3214,f
  9792  17D9                     l8367:	
  9793  17D9  0020               	movlb	0	; select bank0
  9794  17DA  0821               	movf	_Flash_Memory_Main$3214,w
  9795  17DB  0023               	movlb	3	; select bank3
  9796  17DC  10C4               	bcf	(_Memory^(0+384)+36),1
  9797  17DD  1D03               	skipz
  9798  17DE  14C4               	bsf	(_Memory^(0+384)+36),1
  9799                           
  9800                           ;MCU_B1.c: 987: if (Memory.GO == 1) {
  9801  17DF  1CC4               	btfss	(_Memory^(0+384)+36),1
  9802  17E0  2FFA               	goto	l1290
  9803                           
  9804                           ;MCU_B1.c: 988: Memory.Runtime = 1;
  9805  17E1  15C4               	bsf	(_Memory^(0+384)+36),3
  9806                           
  9807                           ;MCU_B1.c: 989: Memory.Time++;
  9808  17E2  3001               	movlw	1
  9809  17E3  07C2               	addwf	(_Memory^(0+384)+34),f
  9810  17E4  3000               	movlw	0
  9811  17E5  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
  9812                           
  9813                           ;MCU_B1.c: 990: if (Memory.Time == (200 / 20)) {
  9814  17E6  3022               	movlw	34
  9815  17E7  3EA0               	addlw	_Memory& (0+255)
  9816  17E8  0086               	movwf	6
  9817  17E9  3001               	movlw	1	; select bank3/4
  9818  17EA  0087               	movwf	7
  9819  17EB  3F40               	moviw [0]fsr1
  9820  17EC  3A0A               	xorlw	10
  9821  17ED  1D03               	skipz
  9822  17EE  2FF1               	goto	u8415
  9823  17EF  3F41               	moviw [1]fsr1
  9824  17F0  3A00               	xorlw	0
  9825  17F1                     u8415:	
  9826  17F1  1D03               	skipz
  9827  17F2  0008               	return
  9828                           
  9829                           ;MCU_B1.c: 991: Memory.Time = 0;
  9830  17F3  01C2               	clrf	(_Memory^(0+384)+34)
  9831  17F4  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9832                           
  9833                           ;MCU_B1.c: 992: Memory.Modify = 0;
  9834  17F5  1044               	bcf	(_Memory^(0+384)+36),0
  9835                           
  9836                           ;MCU_B1.c: 993: Memory.GO = 0;
  9837  17F6  10C4               	bcf	(_Memory^(0+384)+36),1
  9838                           
  9839                           ;MCU_B1.c: 994: Flash_Memory_Modify();
  9840  17F7  3186  264C         	fcall	_Flash_Memory_Modify
  9841                           
  9842                           ;MCU_B1.c: 995: }
  9843                           ;MCU_B1.c: 996: } else {
  9844  17F9  0008               	return
  9845  17FA                     l1290:	
  9846                           
  9847                           ;MCU_B1.c: 997: if (Memory.Runtime == 1) {
  9848  17FA  1DC4               	btfss	(_Memory^(0+384)+36),3
  9849  17FB  0008               	return
  9850                           
  9851                           ;MCU_B1.c: 998: Memory.Runtime = 0;
  9852  17FC  11C4               	bcf	(_Memory^(0+384)+36),3
  9853                           
  9854                           ;MCU_B1.c: 999: Memory.Time = 0;
  9855  17FD  01C2               	clrf	(_Memory^(0+384)+34)
  9856  17FE  01C3               	clrf	((_Memory+1)^(0+384)+34)
  9857  17FF  0008               	return
  9858  1800                     __end_of_Flash_Memory_Main:	
  9859                           
  9860                           	psect	text63
  9861  1328                     __ptext63:	
  9862 ;; *************** function _getAll_Sw_KeyStatus *****************
  9863 ;; Defined at:
  9864 ;;		line 286 in file "../src/Switch_B1.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;		None
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  status          1    3[COMMON] unsigned char 
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      unsigned char 
  9871 ;; Registers used:
  9872 ;;		wreg, status,2
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;Total ram usage:        3 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    3
  9885 ;; This function calls:
  9886 ;;		Nothing
  9887 ;; This function is called by:
  9888 ;;		_Flash_Memory_Main
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function _getAll_Sw_KeyStatus
  9894  1328                     _getAll_Sw_KeyStatus:	
  9895                           
  9896                           ;Switch_B1.c: 287: char status = 0;
  9897                           
  9898                           ;incstack = 0
  9899                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
  9900  1328  01F3               	clrf	getAll_Sw_KeyStatus@status
  9901                           
  9902                           ;Switch_B1.c: 311: status = RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1 ? 1 : 0;
  9903  1329  01F4               	clrf	_getAll_Sw_KeyStatus$6037
  9904  132A  0AF4               	incf	_getAll_Sw_KeyStatus$6037,f
  9905  132B  0020               	movlb	0	; select bank0
  9906  132C  1F0C               	btfss	12,6	;volatile
  9907  132D  1A0C               	btfsc	12,4	;volatile
  9908  132E  2B33               	goto	l8115
  9909  132F  1C0C               	btfss	12,0	;volatile
  9910  1330  188D               	btfsc	13,1	;volatile
  9911  1331  2B33               	goto	l8115
  9912  1332  01F4               	clrf	_getAll_Sw_KeyStatus$6037
  9913  1333                     l8115:	
  9914  1333  0874               	movf	_getAll_Sw_KeyStatus$6037,w
  9915  1334  00F2               	movwf	??_getAll_Sw_KeyStatus
  9916  1335  0872               	movf	??_getAll_Sw_KeyStatus,w
  9917  1336  00F3               	movwf	getAll_Sw_KeyStatus@status
  9918                           
  9919                           ;Switch_B1.c: 315: return status;
  9920  1337  0873               	movf	getAll_Sw_KeyStatus@status,w
  9921  1338  0008               	return
  9922  1339                     __end_of_getAll_Sw_KeyStatus:	
  9923                           
  9924                           	psect	text64
  9925  064C                     __ptext64:	
  9926 ;; *************** function _Flash_Memory_Modify *****************
  9927 ;; Defined at:
  9928 ;;		line 1057 in file "../src/MCU_B1.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;		None
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;  i               1    7[COMMON] unsigned char 
  9933 ;; Return value:  Size  Location     Type
  9934 ;;		None               void
  9935 ;; Registers used:
  9936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;Total ram usage:        2 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    5
  9949 ;; This function calls:
  9950 ;;		_Flash_Memory_Erasing
  9951 ;;		_Flash_Memory_Read
  9952 ;;		_Flash_Memory_Write
  9953 ;;		_setMemory_Data
  9954 ;; This function is called by:
  9955 ;;		_Flash_Memory_Main
  9956 ;; This function uses a non-reentrant model
  9957 ;;
  9958                           
  9959                           
  9960                           ;psect for function _Flash_Memory_Modify
  9961  064C                     _Flash_Memory_Modify:	
  9962                           
  9963                           ;MCU_B1.c: 1058: char i = 0;
  9964                           
  9965                           ;incstack = 0
  9966                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9967  064C  01F7               	clrf	Flash_Memory_Modify@i
  9968                           
  9969                           ;MCU_B1.c: 1059: for (i = 0; i < 32; i++) {
  9970  064D  01F7               	clrf	Flash_Memory_Modify@i
  9971  064E  3020               	movlw	32
  9972  064F  0277               	subwf	Flash_Memory_Modify@i,w
  9973  0650  1803               	btfsc	3,0
  9974  0651  2E66               	goto	l8133
  9975  0652                     l8127:	
  9976                           
  9977                           ;MCU_B1.c: 1060: Memory.Data[i] = Flash_Memory_Read(i);
  9978  0652  0877               	movf	Flash_Memory_Modify@i,w
  9979  0653  3193  2391  3186   	fcall	_Flash_Memory_Read
  9980  0656  00F6               	movwf	??_Flash_Memory_Modify
  9981  0657  0877               	movf	Flash_Memory_Modify@i,w
  9982  0658  3EA0               	addlw	_Memory& (0+255)
  9983  0659  0086               	movwf	6
  9984  065A  3001               	movlw	1	; select bank3/4
  9985  065B  0087               	movwf	7
  9986  065C  0876               	movf	??_Flash_Memory_Modify,w
  9987  065D  0081               	movwf	1
  9988  065E  3001               	movlw	1
  9989  065F  00F6               	movwf	??_Flash_Memory_Modify
  9990  0660  0876               	movf	??_Flash_Memory_Modify,w
  9991  0661  07F7               	addwf	Flash_Memory_Modify@i,f
  9992  0662  3020               	movlw	32
  9993  0663  0277               	subwf	Flash_Memory_Modify@i,w
  9994  0664  1C03               	skipc
  9995  0665  2E52               	goto	l8127
  9996  0666                     l8133:	
  9997                           
  9998                           ;MCU_B1.c: 1061: }
  9999                           ;MCU_B1.c: 1062: setMemory_Data(6, product->Data[11]);
 10000  0666  0020               	movlb	0	; select bank0
 10001  0667  086E               	movf	_product,w
 10002  0668  0086               	movwf	6
 10003  0669  3001               	movlw	1	; select bank2/3
 10004  066A  0087               	movwf	7
 10005  066B  3001               	movlw	1	; select bank2/3
 10006  066C  3F4B               	moviw [11]fsr1
 10007  066D  00F2               	movwf	setMemory_Data@data
 10008  066E  3006               	movlw	6
 10009  066F  3191  21B8  3186   	fcall	_setMemory_Data
 10010                           
 10011                           ;MCU_B1.c: 1063: setMemory_Data(0, product->Data[12]);
 10012  0672  0020               	movlb	0	; select bank0
 10013  0673  086E               	movf	_product,w
 10014  0674  0086               	movwf	6
 10015  0675  3001               	movlw	1	; select bank2/3
 10016  0676  0087               	movwf	7
 10017  0677  3001               	movlw	1	; select bank2/3
 10018  0678  3F4C               	moviw [12]fsr1
 10019  0679  00F2               	movwf	setMemory_Data@data
 10020  067A  3000               	movlw	0
 10021  067B  3191  21B8  3186   	fcall	_setMemory_Data
 10022                           
 10023                           ;MCU_B1.c: 1064: setMemory_Data(1, product->Data[13]);
 10024  067E  0020               	movlb	0	; select bank0
 10025  067F  086E               	movf	_product,w
 10026  0680  0086               	movwf	6
 10027  0681  3001               	movlw	1	; select bank2/3
 10028  0682  0087               	movwf	7
 10029  0683  3001               	movlw	1	; select bank2/3
 10030  0684  3F4D               	moviw [13]fsr1
 10031  0685  00F2               	movwf	setMemory_Data@data
 10032  0686  3001               	movlw	1
 10033  0687  3191  21B8  3186   	fcall	_setMemory_Data
 10034                           
 10035                           ;MCU_B1.c: 1065: setMemory_Data(2, product->Data[14]);
 10036  068A  0020               	movlb	0	; select bank0
 10037  068B  086E               	movf	_product,w
 10038  068C  0086               	movwf	6
 10039  068D  3001               	movlw	1	; select bank2/3
 10040  068E  0087               	movwf	7
 10041  068F  3001               	movlw	1	; select bank2/3
 10042  0690  3F4E               	moviw [14]fsr1
 10043  0691  00F2               	movwf	setMemory_Data@data
 10044  0692  3002               	movlw	2
 10045  0693  3191  21B8  3186   	fcall	_setMemory_Data
 10046                           
 10047                           ;MCU_B1.c: 1067: setMemory_Data(3, product->Data[21]);
 10048  0696  0020               	movlb	0	; select bank0
 10049  0697  086E               	movf	_product,w
 10050  0698  0086               	movwf	6
 10051  0699  3001               	movlw	1	; select bank2/3
 10052  069A  0087               	movwf	7
 10053  069B  3001               	movlw	1	; select bank2/3
 10054  069C  3F55               	moviw [21]fsr1
 10055  069D  00F2               	movwf	setMemory_Data@data
 10056  069E  3003               	movlw	3
 10057  069F  3191  21B8  3186   	fcall	_setMemory_Data
 10058                           
 10059                           ;MCU_B1.c: 1068: setMemory_Data(4, product->Data[22]);
 10060  06A2  0020               	movlb	0	; select bank0
 10061  06A3  086E               	movf	_product,w
 10062  06A4  0086               	movwf	6
 10063  06A5  3001               	movlw	1	; select bank2/3
 10064  06A6  0087               	movwf	7
 10065  06A7  3001               	movlw	1	; select bank2/3
 10066  06A8  3F56               	moviw [22]fsr1
 10067  06A9  00F2               	movwf	setMemory_Data@data
 10068  06AA  3004               	movlw	4
 10069  06AB  3191  21B8  3186   	fcall	_setMemory_Data
 10070                           
 10071                           ;MCU_B1.c: 1069: setMemory_Data(5, product->Data[23]);
 10072  06AE  0020               	movlb	0	; select bank0
 10073  06AF  086E               	movf	_product,w
 10074  06B0  0086               	movwf	6
 10075  06B1  3001               	movlw	1	; select bank2/3
 10076  06B2  0087               	movwf	7
 10077  06B3  3001               	movlw	1	; select bank2/3
 10078  06B4  3F57               	moviw [23]fsr1
 10079  06B5  00F2               	movwf	setMemory_Data@data
 10080  06B6  3005               	movlw	5
 10081  06B7  3191  21B8  3186   	fcall	_setMemory_Data
 10082                           
 10083                           ;MCU_B1.c: 1070: if (myMain.SaveDimmer == 1) {
 10084  06BA  0021               	movlb	1	; select bank1
 10085  06BB  1EC9               	btfss	(_myMain^(0+128)+10),5
 10086  06BC  2EC6               	goto	l8141
 10087                           
 10088                           ;MCU_B1.c: 1071: myMain.SaveDimmer = 0;
 10089  06BD  12C9               	bcf	(_myMain^(0+128)+10),5
 10090                           
 10091                           ;MCU_B1.c: 1072: setMemory_Data(30, 0xaa);
 10092  06BE  30AA               	movlw	170
 10093  06BF  00F6               	movwf	??_Flash_Memory_Modify
 10094  06C0  0876               	movf	??_Flash_Memory_Modify,w
 10095  06C1  00F2               	movwf	setMemory_Data@data
 10096  06C2  301E               	movlw	30
 10097  06C3  3191  21B8  3186   	fcall	_setMemory_Data
 10098  06C6                     l8141:	
 10099                           
 10100                           ;MCU_B1.c: 1073: }
 10101                           ;MCU_B1.c: 1075: if (Memory.LoopSave == 1) {
 10102  06C6  0023               	movlb	3	; select bank3
 10103  06C7  1D44               	btfss	(_Memory^(0+384)+36),2
 10104  06C8  2ECD               	goto	l1314
 10105                           
 10106                           ;MCU_B1.c: 1076: Memory.LoopSave = 0;
 10107  06C9  1144               	bcf	(_Memory^(0+384)+36),2
 10108                           
 10109                           ;MCU_B1.c: 1077: myMain.FirstOpen = 0;
 10110  06CA  0021               	movlb	1	; select bank1
 10111  06CB  11BF               	bcf	_myMain^(0+128),3
 10112                           
 10113                           ;MCU_B1.c: 1078: myMain.First = 0;
 10114  06CC  12BF               	bcf	_myMain^(0+128),5
 10115  06CD                     l1314:	
 10116                           
 10117                           ;MCU_B1.c: 1080: }
 10118                           ;MCU_B1.c: 1081: GIE = 0;
 10119  06CD  138B               	bcf	11,7	;volatile
 10120                           
 10121                           ;MCU_B1.c: 1082: Flash_Memory_Erasing();
 10122  06CE  3192  2213  3186   	fcall	_Flash_Memory_Erasing
 10123                           
 10124                           ;MCU_B1.c: 1083: Flash_Memory_Write();
 10125  06D1  3195  25DB         	fcall	_Flash_Memory_Write
 10126                           
 10127                           ;MCU_B1.c: 1084: GIE = 1;
 10128  06D3  178B               	bsf	11,7	;volatile
 10129  06D4  0008               	return
 10130  06D5                     __end_of_Flash_Memory_Modify:	
 10131                           
 10132                           	psect	text65
 10133  1213                     __ptext65:	
 10134 ;; *************** function _Flash_Memory_Erasing *****************
 10135 ;; Defined at:
 10136 ;;		line 1046 in file "../src/MCU_B1.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;		None
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;		None
 10141 ;; Return value:  Size  Location     Type
 10142 ;;		None               void
 10143 ;; Registers used:
 10144 ;;		wreg, status,2, status,0, pclath, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10154 ;;Total ram usage:        0 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:    4
 10157 ;; This function calls:
 10158 ;;		_Flash_Memory_Unlock
 10159 ;; This function is called by:
 10160 ;;		_Flash_Memory_Modify
 10161 ;; This function uses a non-reentrant model
 10162 ;;
 10163                           
 10164                           
 10165                           ;psect for function _Flash_Memory_Erasing
 10166  1213                     _Flash_Memory_Erasing:	
 10167                           
 10168                           ;MCU_B1.c: 1047: CFGS = 0;
 10169                           
 10170                           ;incstack = 0
 10171                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 10172  1213  0023               	movlb	3	; select bank3
 10173  1214  1315               	bcf	21,6	;volatile
 10174                           
 10175                           ;MCU_B1.c: 1048: PMADRH = 0x30;
 10176  1215  3030               	movlw	48
 10177  1216  0092               	movwf	18	;volatile
 10178                           
 10179                           ;MCU_B1.c: 1049: PMADRL = 0x00;
 10180  1217  0191               	clrf	17	;volatile
 10181                           
 10182                           ;MCU_B1.c: 1050: FREE = 1;
 10183  1218  1615               	bsf	21,4	;volatile
 10184                           
 10185                           ;MCU_B1.c: 1051: WREN = 1;
 10186  1219  1515               	bsf	21,2	;volatile
 10187                           
 10188                           ;MCU_B1.c: 1052: Flash_Memory_Unlock();
 10189  121A  3191  2190         	fcall	_Flash_Memory_Unlock
 10190                           
 10191                           ;MCU_B1.c: 1053: WREN = 0;
 10192  121C  0023               	movlb	3	; select bank3
 10193  121D  1115               	bcf	21,2	;volatile
 10194  121E  0008               	return
 10195  121F                     __end_of_Flash_Memory_Erasing:	
 10196                           
 10197                           	psect	text66
 10198  02B8                     __ptext66:	
 10199 ;; *************** function _Flash_Memory_Initialization *****************
 10200 ;; Defined at:
 10201 ;;		line 934 in file "../src/MCU_B1.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;  value           1    7[COMMON] unsigned char 
 10206 ;; Return value:  Size  Location     Type
 10207 ;;		None               void
 10208 ;; Registers used:
 10209 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10210 ;; Tracked objects:
 10211 ;;		On entry : 0/0
 10212 ;;		On exit  : 0/0
 10213 ;;		Unchanged: 0/0
 10214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;Total ram usage:        2 bytes
 10220 ;; Hardware stack levels used:    1
 10221 ;; Hardware stack levels required when called:    5
 10222 ;; This function calls:
 10223 ;;		_Flash_Memory_Read
 10224 ;;		_Flash_Memory_Write
 10225 ;;		_setMemory_Data
 10226 ;; This function is called by:
 10227 ;;		_main
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _Flash_Memory_Initialization
 10233  02B8                     _Flash_Memory_Initialization:	
 10234                           
 10235                           ;MCU_B1.c: 935: char value = 0;
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 10239  02B8  01F7               	clrf	Flash_Memory_Initialization@value
 10240                           
 10241                           ;MCU_B1.c: 936: if (Flash_Memory_Read(31) == 0xaa) {
 10242  02B9  301F               	movlw	31
 10243  02BA  3193  2391  3182   	fcall	_Flash_Memory_Read
 10244  02BD  3AAA               	xorlw	170
 10245  02BE  1D03               	skipz
 10246  02BF  2B3A               	goto	l8341
 10247                           
 10248                           ;MCU_B1.c: 937: product->Data[11] = Flash_Memory_Read(6);
 10249  02C0  3006               	movlw	6
 10250  02C1  3193  2391  3182   	fcall	_Flash_Memory_Read
 10251  02C4  00F6               	movwf	??_Flash_Memory_Initialization
 10252  02C5  0020               	movlb	0	; select bank0
 10253  02C6  086E               	movf	_product,w
 10254  02C7  3E0B               	addlw	11
 10255  02C8  0086               	movwf	6
 10256  02C9  3001               	movlw	1	; select bank2/3
 10257  02CA  0087               	movwf	7
 10258  02CB  0876               	movf	??_Flash_Memory_Initialization,w
 10259  02CC  0081               	movwf	1
 10260                           
 10261                           ;MCU_B1.c: 938: product->Data[12] = Flash_Memory_Read(0);
 10262  02CD  3000               	movlw	0
 10263  02CE  3193  2391  3182   	fcall	_Flash_Memory_Read
 10264  02D1  00F6               	movwf	??_Flash_Memory_Initialization
 10265  02D2  0020               	movlb	0	; select bank0
 10266  02D3  086E               	movf	_product,w
 10267  02D4  3E0C               	addlw	12
 10268  02D5  0086               	movwf	6
 10269  02D6  3001               	movlw	1	; select bank2/3
 10270  02D7  0087               	movwf	7
 10271  02D8  0876               	movf	??_Flash_Memory_Initialization,w
 10272  02D9  0081               	movwf	1
 10273                           
 10274                           ;MCU_B1.c: 939: product->Data[13] = Flash_Memory_Read(1);
 10275  02DA  3001               	movlw	1
 10276  02DB  3193  2391  3182   	fcall	_Flash_Memory_Read
 10277  02DE  00F6               	movwf	??_Flash_Memory_Initialization
 10278  02DF  0020               	movlb	0	; select bank0
 10279  02E0  086E               	movf	_product,w
 10280  02E1  3E0D               	addlw	13
 10281  02E2  0086               	movwf	6
 10282  02E3  3001               	movlw	1	; select bank2/3
 10283  02E4  0087               	movwf	7
 10284  02E5  0876               	movf	??_Flash_Memory_Initialization,w
 10285  02E6  0081               	movwf	1
 10286                           
 10287                           ;MCU_B1.c: 940: product->Data[14] = Flash_Memory_Read(2);
 10288  02E7  3002               	movlw	2
 10289  02E8  3193  2391  3182   	fcall	_Flash_Memory_Read
 10290  02EB  00F6               	movwf	??_Flash_Memory_Initialization
 10291  02EC  0020               	movlb	0	; select bank0
 10292  02ED  086E               	movf	_product,w
 10293  02EE  3E0E               	addlw	14
 10294  02EF  0086               	movwf	6
 10295  02F0  3001               	movlw	1	; select bank2/3
 10296  02F1  0087               	movwf	7
 10297  02F2  0876               	movf	??_Flash_Memory_Initialization,w
 10298  02F3  0081               	movwf	1
 10299                           
 10300                           ;MCU_B1.c: 943: product->Data[21] = Flash_Memory_Read(3);
 10301  02F4  3003               	movlw	3
 10302  02F5  3193  2391  3182   	fcall	_Flash_Memory_Read
 10303  02F8  00F6               	movwf	??_Flash_Memory_Initialization
 10304  02F9  0020               	movlb	0	; select bank0
 10305  02FA  086E               	movf	_product,w
 10306  02FB  3E15               	addlw	21
 10307  02FC  0086               	movwf	6
 10308  02FD  3001               	movlw	1	; select bank2/3
 10309  02FE  0087               	movwf	7
 10310  02FF  0876               	movf	??_Flash_Memory_Initialization,w
 10311  0300  0081               	movwf	1
 10312                           
 10313                           ;MCU_B1.c: 944: product->Data[22] = Flash_Memory_Read(4);
 10314  0301  3004               	movlw	4
 10315  0302  3193  2391  3182   	fcall	_Flash_Memory_Read
 10316  0305  00F6               	movwf	??_Flash_Memory_Initialization
 10317  0306  0020               	movlb	0	; select bank0
 10318  0307  086E               	movf	_product,w
 10319  0308  3E16               	addlw	22
 10320  0309  0086               	movwf	6
 10321  030A  3001               	movlw	1	; select bank2/3
 10322  030B  0087               	movwf	7
 10323  030C  0876               	movf	??_Flash_Memory_Initialization,w
 10324  030D  0081               	movwf	1
 10325                           
 10326                           ;MCU_B1.c: 945: product->Data[23] = Flash_Memory_Read(5);
 10327  030E  3005               	movlw	5
 10328  030F  3193  2391  3182   	fcall	_Flash_Memory_Read
 10329  0312  00F6               	movwf	??_Flash_Memory_Initialization
 10330  0313  0020               	movlb	0	; select bank0
 10331  0314  086E               	movf	_product,w
 10332  0315  3E17               	addlw	23
 10333  0316  0086               	movwf	6
 10334  0317  3001               	movlw	1	; select bank2/3
 10335  0318  0087               	movwf	7
 10336  0319  0876               	movf	??_Flash_Memory_Initialization,w
 10337  031A  0081               	movwf	1
 10338                           
 10339                           ;MCU_B1.c: 952: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 10340  031B  086E               	movf	_product,w
 10341  031C  3E0C               	addlw	12
 10342  031D  0086               	movwf	6
 10343  031E  3001               	movlw	1	; select bank2/3
 10344  031F  0087               	movwf	7
 10345  0320  0801               	movf	1,w
 10346  0321  3AFF               	xorlw	255
 10347  0322  1D03               	skipz
 10348  0323  0008               	return
 10349  0324  086E               	movf	_product,w
 10350  0325  3E0D               	addlw	13
 10351  0326  0086               	movwf	6
 10352  0327  3001               	movlw	1	; select bank2/3
 10353  0328  0087               	movwf	7
 10354  0329  0801               	movf	1,w
 10355  032A  3AFF               	xorlw	255
 10356  032B  1D03               	skipz
 10357  032C  0008               	return
 10358  032D  086E               	movf	_product,w
 10359  032E  3E0E               	addlw	14
 10360  032F  0086               	movwf	6
 10361  0330  3001               	movlw	1	; select bank2/3
 10362  0331  0087               	movwf	7
 10363  0332  0801               	movf	1,w
 10364  0333  3AFF               	xorlw	255
 10365  0334  1D03               	skipz
 10366  0335  0008               	return
 10367                           
 10368                           ;MCU_B1.c: 953: myMain.FirstOpen = 1;
 10369  0336  0021               	movlb	1	; select bank1
 10370  0337  15BF               	bsf	_myMain^(0+128),3
 10371                           
 10372                           ;MCU_B1.c: 954: myMain.First = 1;
 10373  0338  16BF               	bsf	_myMain^(0+128),5
 10374                           
 10375                           ;MCU_B1.c: 955: }
 10376                           ;MCU_B1.c: 956: } else {
 10377  0339  0008               	return
 10378  033A                     l8341:	
 10379                           
 10380                           ;MCU_B1.c: 958: setMemory_Data(0, 0xff);
 10381  033A  30FF               	movlw	255
 10382  033B  00F6               	movwf	??_Flash_Memory_Initialization
 10383  033C  0876               	movf	??_Flash_Memory_Initialization,w
 10384  033D  00F2               	movwf	setMemory_Data@data
 10385  033E  3000               	movlw	0
 10386  033F  3191  21B8  3182   	fcall	_setMemory_Data
 10387                           
 10388                           ;MCU_B1.c: 959: setMemory_Data(1, 0xff);
 10389  0342  30FF               	movlw	255
 10390  0343  00F6               	movwf	??_Flash_Memory_Initialization
 10391  0344  0876               	movf	??_Flash_Memory_Initialization,w
 10392  0345  00F2               	movwf	setMemory_Data@data
 10393  0346  3001               	movlw	1
 10394  0347  3191  21B8  3182   	fcall	_setMemory_Data
 10395                           
 10396                           ;MCU_B1.c: 960: setMemory_Data(2, 0xff);
 10397  034A  30FF               	movlw	255
 10398  034B  00F6               	movwf	??_Flash_Memory_Initialization
 10399  034C  0876               	movf	??_Flash_Memory_Initialization,w
 10400  034D  00F2               	movwf	setMemory_Data@data
 10401  034E  3002               	movlw	2
 10402  034F  3191  21B8  3182   	fcall	_setMemory_Data
 10403                           
 10404                           ;MCU_B1.c: 961: setMemory_Data(3, 0xff);
 10405  0352  30FF               	movlw	255
 10406  0353  00F6               	movwf	??_Flash_Memory_Initialization
 10407  0354  0876               	movf	??_Flash_Memory_Initialization,w
 10408  0355  00F2               	movwf	setMemory_Data@data
 10409  0356  3003               	movlw	3
 10410  0357  3191  21B8  3182   	fcall	_setMemory_Data
 10411                           
 10412                           ;MCU_B1.c: 962: setMemory_Data(4, 0xff);
 10413  035A  30FF               	movlw	255
 10414  035B  00F6               	movwf	??_Flash_Memory_Initialization
 10415  035C  0876               	movf	??_Flash_Memory_Initialization,w
 10416  035D  00F2               	movwf	setMemory_Data@data
 10417  035E  3004               	movlw	4
 10418  035F  3191  21B8  3182   	fcall	_setMemory_Data
 10419                           
 10420                           ;MCU_B1.c: 963: setMemory_Data(5, 0xff);
 10421  0362  30FF               	movlw	255
 10422  0363  00F6               	movwf	??_Flash_Memory_Initialization
 10423  0364  0876               	movf	??_Flash_Memory_Initialization,w
 10424  0365  00F2               	movwf	setMemory_Data@data
 10425  0366  3005               	movlw	5
 10426  0367  3191  21B8  3182   	fcall	_setMemory_Data
 10427                           
 10428                           ;MCU_B1.c: 964: setMemory_Data(6, 0xff);
 10429  036A  30FF               	movlw	255
 10430  036B  00F6               	movwf	??_Flash_Memory_Initialization
 10431  036C  0876               	movf	??_Flash_Memory_Initialization,w
 10432  036D  00F2               	movwf	setMemory_Data@data
 10433  036E  3006               	movlw	6
 10434  036F  3191  21B8  3182   	fcall	_setMemory_Data
 10435                           
 10436                           ;MCU_B1.c: 965: setMemory_Data(31, 0xaa);
 10437  0372  30AA               	movlw	170
 10438  0373  00F6               	movwf	??_Flash_Memory_Initialization
 10439  0374  0876               	movf	??_Flash_Memory_Initialization,w
 10440  0375  00F2               	movwf	setMemory_Data@data
 10441  0376  301F               	movlw	31
 10442  0377  3191  21B8  3182   	fcall	_setMemory_Data
 10443                           
 10444                           ;MCU_B1.c: 970: GIE = 0;
 10445  037A  138B               	bcf	11,7	;volatile
 10446                           
 10447                           ;MCU_B1.c: 971: Flash_Memory_Write();
 10448  037B  3195  25DB         	fcall	_Flash_Memory_Write
 10449                           
 10450                           ;MCU_B1.c: 972: GIE = 1;
 10451  037D  178B               	bsf	11,7	;volatile
 10452                           
 10453                           ;MCU_B1.c: 973: myMain.FirstOpen = 1;
 10454  037E  0021               	movlb	1	; select bank1
 10455  037F  15BF               	bsf	_myMain^(0+128),3
 10456                           
 10457                           ;MCU_B1.c: 974: myMain.First = 1;
 10458  0380  16BF               	bsf	_myMain^(0+128),5
 10459                           
 10460                           ;MCU_B1.c: 975: myMain.InitDimmer = 1;
 10461  0381  1649               	bsf	(_myMain^(0+128)+10),4
 10462  0382  0008               	return
 10463  0383                     __end_of_Flash_Memory_Initialization:	
 10464                           
 10465                           	psect	text67
 10466  11B8                     __ptext67:	
 10467 ;; *************** function _setMemory_Data *****************
 10468 ;; Defined at:
 10469 ;;		line 1099 in file "../src/MCU_B1.c"
 10470 ;; Parameters:    Size  Location     Type
 10471 ;;  address         1    wreg     unsigned char 
 10472 ;;  data            1    2[COMMON] unsigned char 
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;  address         1    4[COMMON] unsigned char 
 10475 ;; Return value:  Size  Location     Type
 10476 ;;		None               void
 10477 ;; Registers used:
 10478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10484 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10486 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10487 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10488 ;;Total ram usage:        3 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    3
 10491 ;; This function calls:
 10492 ;;		Nothing
 10493 ;; This function is called by:
 10494 ;;		_Flash_Memory_Initialization
 10495 ;;		_Flash_Memory_Modify
 10496 ;; This function uses a non-reentrant model
 10497 ;;
 10498                           
 10499                           
 10500                           ;psect for function _setMemory_Data
 10501  11B8                     _setMemory_Data:	
 10502                           
 10503                           ;incstack = 0
 10504                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 10505                           ;setMemory_Data@address stored from wreg
 10506  11B8  00F4               	movwf	setMemory_Data@address
 10507                           
 10508                           ;MCU_B1.c: 1100: Memory.Data[address] = data;
 10509  11B9  0872               	movf	setMemory_Data@data,w
 10510  11BA  00F3               	movwf	??_setMemory_Data
 10511  11BB  0874               	movf	setMemory_Data@address,w
 10512  11BC  3EA0               	addlw	_Memory& (0+255)
 10513  11BD  0086               	movwf	6
 10514  11BE  3001               	movlw	1	; select bank3/4
 10515  11BF  0087               	movwf	7
 10516  11C0  0873               	movf	??_setMemory_Data,w
 10517  11C1  0081               	movwf	1
 10518  11C2  0008               	return
 10519  11C3                     __end_of_setMemory_Data:	
 10520                           
 10521                           	psect	text68
 10522  15DB                     __ptext68:	
 10523 ;; *************** function _Flash_Memory_Write *****************
 10524 ;; Defined at:
 10525 ;;		line 1027 in file "../src/MCU_B1.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;		None
 10528 ;; Auto vars:     Size  Location     Type
 10529 ;;  i               1    3[COMMON] unsigned char 
 10530 ;; Return value:  Size  Location     Type
 10531 ;;		None               void
 10532 ;; Registers used:
 10533 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10534 ;; Tracked objects:
 10535 ;;		On entry : 0/0
 10536 ;;		On exit  : 0/0
 10537 ;;		Unchanged: 0/0
 10538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;Total ram usage:        2 bytes
 10544 ;; Hardware stack levels used:    1
 10545 ;; Hardware stack levels required when called:    4
 10546 ;; This function calls:
 10547 ;;		_Flash_Memory_Unlock
 10548 ;; This function is called by:
 10549 ;;		_Flash_Memory_Initialization
 10550 ;;		_Flash_Memory_Modify
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           
 10555                           ;psect for function _Flash_Memory_Write
 10556  15DB                     _Flash_Memory_Write:	
 10557                           
 10558                           ;MCU_B1.c: 1028: char i = 0;
 10559                           
 10560                           ;incstack = 0
 10561                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10562  15DB  01F3               	clrf	Flash_Memory_Write@i
 10563                           
 10564                           ;MCU_B1.c: 1029: CFGS = 0;
 10565  15DC  0023               	movlb	3	; select bank3
 10566  15DD  1315               	bcf	21,6	;volatile
 10567                           
 10568                           ;MCU_B1.c: 1030: PMADRH = 0x30;
 10569  15DE  3030               	movlw	48
 10570  15DF  0092               	movwf	18	;volatile
 10571                           
 10572                           ;MCU_B1.c: 1031: PMDATH = 0;
 10573  15E0  0194               	clrf	20	;volatile
 10574                           
 10575                           ;MCU_B1.c: 1032: FREE = 0;
 10576  15E1  1215               	bcf	21,4	;volatile
 10577                           
 10578                           ;MCU_B1.c: 1033: LWLO = 1;
 10579  15E2  1695               	bsf	21,5	;volatile
 10580                           
 10581                           ;MCU_B1.c: 1034: WREN = 1;
 10582  15E3  1515               	bsf	21,2	;volatile
 10583                           
 10584                           ;MCU_B1.c: 1035: for (i = 0; i < 32; i++) {
 10585  15E4  01F3               	clrf	Flash_Memory_Write@i
 10586  15E5  3020               	movlw	32
 10587  15E6  0273               	subwf	Flash_Memory_Write@i,w
 10588  15E7  1803               	btfsc	3,0
 10589  15E8  2DFE               	goto	l1304
 10590  15E9                     l7971:	
 10591                           
 10592                           ;MCU_B1.c: 1036: PMADRL = i;
 10593  15E9  0873               	movf	Flash_Memory_Write@i,w
 10594  15EA  0023               	movlb	3	; select bank3
 10595  15EB  0091               	movwf	17	;volatile
 10596                           
 10597                           ;MCU_B1.c: 1037: PMDATL = Memory.Data[i];
 10598  15EC  0873               	movf	Flash_Memory_Write@i,w
 10599  15ED  3EA0               	addlw	_Memory& (0+255)
 10600  15EE  0086               	movwf	6
 10601  15EF  3001               	movlw	1	; select bank3/4
 10602  15F0  0087               	movwf	7
 10603  15F1  0801               	movf	1,w
 10604  15F2  0093               	movwf	19	;volatile
 10605                           
 10606                           ;MCU_B1.c: 1038: Flash_Memory_Unlock();
 10607  15F3  3191  2190  3195   	fcall	_Flash_Memory_Unlock
 10608  15F6  3001               	movlw	1
 10609  15F7  00F2               	movwf	??_Flash_Memory_Write
 10610  15F8  0872               	movf	??_Flash_Memory_Write,w
 10611  15F9  07F3               	addwf	Flash_Memory_Write@i,f
 10612  15FA  3020               	movlw	32
 10613  15FB  0273               	subwf	Flash_Memory_Write@i,w
 10614  15FC  1C03               	skipc
 10615  15FD  2DE9               	goto	l7971
 10616  15FE                     l1304:	
 10617                           
 10618                           ;MCU_B1.c: 1039: }
 10619                           ;MCU_B1.c: 1040: LWLO = 0;
 10620  15FE  0023               	movlb	3	; select bank3
 10621  15FF  1295               	bcf	21,5	;volatile
 10622                           
 10623                           ;MCU_B1.c: 1041: Flash_Memory_Unlock();
 10624  1600  3191  2190         	fcall	_Flash_Memory_Unlock
 10625                           
 10626                           ;MCU_B1.c: 1042: WREN = 0;
 10627  1602  0023               	movlb	3	; select bank3
 10628  1603  1115               	bcf	21,2	;volatile
 10629  1604  0008               	return
 10630  1605                     __end_of_Flash_Memory_Write:	
 10631                           
 10632                           	psect	text69
 10633  1190                     __ptext69:	
 10634 ;; *************** function _Flash_Memory_Unlock *****************
 10635 ;; Defined at:
 10636 ;;		line 1006 in file "../src/MCU_B1.c"
 10637 ;; Parameters:    Size  Location     Type
 10638 ;;		None
 10639 ;; Auto vars:     Size  Location     Type
 10640 ;;		None
 10641 ;; Return value:  Size  Location     Type
 10642 ;;		None               void
 10643 ;; Registers used:
 10644 ;;		wreg
 10645 ;; Tracked objects:
 10646 ;;		On entry : 0/0
 10647 ;;		On exit  : 0/0
 10648 ;;		Unchanged: 0/0
 10649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;Total ram usage:        0 bytes
 10655 ;; Hardware stack levels used:    1
 10656 ;; Hardware stack levels required when called:    3
 10657 ;; This function calls:
 10658 ;;		Nothing
 10659 ;; This function is called by:
 10660 ;;		_Flash_Memory_Write
 10661 ;;		_Flash_Memory_Erasing
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function _Flash_Memory_Unlock
 10667  1190                     _Flash_Memory_Unlock:	
 10668                           
 10669                           ;MCU_B1.c: 1007: PMCON2 = 0x55;
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 10673  1190  3055               	movlw	85
 10674  1191  0023               	movlb	3	; select bank3
 10675  1192  0096               	movwf	22	;volatile
 10676                           
 10677                           ;MCU_B1.c: 1008: PMCON2 = 0xaa;
 10678  1193  30AA               	movlw	170
 10679  1194  0096               	movwf	22	;volatile
 10680                           
 10681                           ;MCU_B1.c: 1009: WR = 1;
 10682  1195  1495               	bsf	21,1	;volatile
 10683                           
 10684                           ;MCU_B1.c: 1010: __nop();
 10685  1196  0000               	nop
 10686                           
 10687                           ;MCU_B1.c: 1011: __nop();
 10688  1197  0000               	nop
 10689  1198  0008               	return
 10690  1199                     __end_of_Flash_Memory_Unlock:	
 10691                           
 10692                           	psect	text70
 10693  1391                     __ptext70:	
 10694 ;; *************** function _Flash_Memory_Read *****************
 10695 ;; Defined at:
 10696 ;;		line 1015 in file "../src/MCU_B1.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  address         1    wreg     unsigned char 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;  address         1    4[COMMON] unsigned char 
 10701 ;;  ret             1    5[COMMON] unsigned char 
 10702 ;;  i               1    3[COMMON] unsigned char 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  1    wreg      unsigned char 
 10705 ;; Registers used:
 10706 ;;		wreg, status,2
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;Total ram usage:        4 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    3
 10719 ;; This function calls:
 10720 ;;		Nothing
 10721 ;; This function is called by:
 10722 ;;		_Flash_Memory_Initialization
 10723 ;;		_Flash_Memory_Modify
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function _Flash_Memory_Read
 10729  1391                     _Flash_Memory_Read:	
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 10733                           ;Flash_Memory_Read@address stored from wreg
 10734  1391  00F4               	movwf	Flash_Memory_Read@address
 10735                           
 10736                           ;MCU_B1.c: 1016: char i = 0, ret = 0;
 10737  1392  01F3               	clrf	Flash_Memory_Read@i
 10738  1393  01F5               	clrf	Flash_Memory_Read@ret
 10739                           
 10740                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 10741  1394  3030               	movlw	48
 10742  1395  0023               	movlb	3	; select bank3
 10743  1396  0092               	movwf	18	;volatile
 10744                           
 10745                           ;MCU_B1.c: 1018: PMADRL = address;
 10746  1397  0874               	movf	Flash_Memory_Read@address,w
 10747  1398  0091               	movwf	17	;volatile
 10748                           
 10749                           ;MCU_B1.c: 1019: CFGS = 0;
 10750  1399  1315               	bcf	21,6	;volatile
 10751                           
 10752                           ;MCU_B1.c: 1020: RD = 1;
 10753  139A  1415               	bsf	21,0	;volatile
 10754                           
 10755                           ;MCU_B1.c: 1021: i = PMDATH;
 10756  139B  0814               	movf	20,w	;volatile
 10757  139C  00F2               	movwf	??_Flash_Memory_Read
 10758  139D  0872               	movf	??_Flash_Memory_Read,w
 10759  139E  00F3               	movwf	Flash_Memory_Read@i
 10760                           
 10761                           ;MCU_B1.c: 1022: ret = PMDATL;
 10762  139F  0813               	movf	19,w	;volatile
 10763  13A0  00F2               	movwf	??_Flash_Memory_Read
 10764  13A1  0872               	movf	??_Flash_Memory_Read,w
 10765  13A2  00F5               	movwf	Flash_Memory_Read@ret
 10766                           
 10767                           ;MCU_B1.c: 1023: return ret;
 10768  13A3  0875               	movf	Flash_Memory_Read@ret,w
 10769  13A4  0008               	return
 10770  13A5                     __end_of_Flash_Memory_Read:	
 10771                           
 10772                           	psect	text71
 10773  16D2                     __ptext71:	
 10774 ;; *************** function _Exception_Main *****************
 10775 ;; Defined at:
 10776 ;;		line 504 in file "../src/main_B1.c"
 10777 ;; Parameters:    Size  Location     Type
 10778 ;;		None
 10779 ;; Auto vars:     Size  Location     Type
 10780 ;;  error           1    3[BANK0 ] unsigned char 
 10781 ;;  status          1    2[BANK0 ] unsigned char 
 10782 ;;  count           1    1[BANK0 ] unsigned char 
 10783 ;;  lights          1    0[BANK0 ] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;		None               void
 10786 ;; Registers used:
 10787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        5 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    5
 10800 ;; This function calls:
 10801 ;;		_getMain_All_Error_Status
 10802 ;;		_setLED
 10803 ;; This function is called by:
 10804 ;;		_main
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function _Exception_Main
 10810  16D2                     _Exception_Main:	
 10811                           
 10812                           ;main_B1.c: 505: char error = getMain_All_Error_Status(0);
 10813                           
 10814                           ;incstack = 0
 10815                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10816  16D2  3000               	movlw	0
 10817  16D3  3191  210F  3196   	fcall	_getMain_All_Error_Status
 10818  16D6  00F5               	movwf	??_Exception_Main
 10819  16D7  0875               	movf	??_Exception_Main,w
 10820  16D8  0020               	movlb	0	; select bank0
 10821  16D9  00A3               	movwf	Exception_Main@error
 10822                           
 10823                           ;main_B1.c: 506: char lights = 0, count = 1;
 10824  16DA  01A0               	clrf	Exception_Main@lights
 10825  16DB  01A1               	clrf	Exception_Main@count
 10826  16DC  0AA1               	incf	Exception_Main@count,f
 10827                           
 10828                           ;main_B1.c: 507: char status = 0;
 10829  16DD  01A2               	clrf	Exception_Main@status
 10830                           
 10831                           ;main_B1.c: 509: if (myMain.Error_Run == 1) {
 10832  16DE  0021               	movlb	1	; select bank1
 10833  16DF  1DC9               	btfss	(_myMain^(0+128)+10),3
 10834  16E0  2EF0               	goto	l9685
 10835                           
 10836                           ;main_B1.c: 510: if (error == 0) {
 10837  16E1  0020               	movlb	0	; select bank0
 10838  16E2  08A3               	movf	Exception_Main@error,f
 10839  16E3  1D03               	skipz
 10840  16E4  0008               	return
 10841                           
 10842                           ;main_B1.c: 511: myMain.Error_Run = 0;
 10843  16E5  0021               	movlb	1	; select bank1
 10844  16E6  11C9               	bcf	(_myMain^(0+128)+10),3
 10845                           
 10846                           ;main_B1.c: 516: setLED(error, 110);
 10847  16E7  306E               	movlw	110
 10848  16E8  00F5               	movwf	??_Exception_Main
 10849  16E9  0875               	movf	??_Exception_Main,w
 10850  16EA  00F3               	movwf	setLED@command
 10851  16EB  0020               	movlb	0	; select bank0
 10852  16EC  0823               	movf	Exception_Main@error,w
 10853  16ED  318B  23E2         	fcall	_setLED
 10854                           
 10855                           ;main_B1.c: 527: }
 10856                           ;main_B1.c: 528: } else {
 10857  16EF  0008               	return
 10858  16F0                     l9685:	
 10859                           
 10860                           ;main_B1.c: 529: if (error != 0) {
 10861  16F0  0020               	movlb	0	; select bank0
 10862  16F1  0823               	movf	Exception_Main@error,w
 10863  16F2  1903               	btfsc	3,2
 10864  16F3  0008               	return
 10865                           
 10866                           ;main_B1.c: 530: myMain.Error_Run = 1;
 10867  16F4  0021               	movlb	1	; select bank1
 10868  16F5  15C9               	bsf	(_myMain^(0+128)+10),3
 10869                           
 10870                           ;main_B1.c: 534: setLED(error, 111);
 10871  16F6  306F               	movlw	111
 10872  16F7  00F5               	movwf	??_Exception_Main
 10873  16F8  0875               	movf	??_Exception_Main,w
 10874  16F9  00F3               	movwf	setLED@command
 10875  16FA  0020               	movlb	0	; select bank0
 10876  16FB  0823               	movf	Exception_Main@error,w
 10877  16FC  318B  23E2  3196   	fcall	_setLED
 10878                           
 10879                           ;main_B1.c: 591: }
 10880                           
 10881                           ;main_B1.c: 590: break;
 10882                           
 10883                           ;main_B1.c: 566: case 3:
 10884                           
 10885                           ;main_B1.c: 565: break;
 10886                           
 10887                           ;main_B1.c: 544: case 2:
 10888                           
 10889                           ;main_B1.c: 543: switch (error) {
 10890  16FF  0020               	movlb	0	; select bank0
 10891  1700  0823               	movf	Exception_Main@error,w
 10892                           
 10893                           ; Switch size 1, requested type "space"
 10894                           ; Number of cases is 2, Range of values is 2 to 3
 10895                           ; switch strategies available:
 10896                           ; Name         Instructions Cycles
 10897                           ; simple_byte            7     4 (average)
 10898                           ; direct_byte           13     9 (fixed)
 10899                           ; jumptable            263     9 (fixed)
 10900                           ;	Chosen strategy is simple_byte
 10901  1701  3A02               	xorlw	2	; case 2
 10902  1702  1903               	skipnz
 10903  1703  2F09               	goto	l2493
 10904  1704  3A01               	xorlw	1	; case 3
 10905  1705  1903               	skipnz
 10906  1706  2F09               	goto	l2493
 10907  1707  2F09               	goto	l2493
 10908  1708  0008               	return
 10909  1709                     l2493:	
 10910  1709  0008               	return
 10911  170A                     __end_of_Exception_Main:	
 10912                           
 10913                           	psect	text72
 10914  110F                     __ptext72:	
 10915 ;; *************** function _getMain_All_Error_Status *****************
 10916 ;; Defined at:
 10917 ;;		line 429 in file "../src/main_B1.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;  command         1    wreg     unsigned char 
 10920 ;; Auto vars:     Size  Location     Type
 10921 ;;  command         1    0[COMMON] unsigned char 
 10922 ;;  status          1    2[COMMON] unsigned char 
 10923 ;; Return value:  Size  Location     Type
 10924 ;;                  1    wreg      unsigned char 
 10925 ;; Registers used:
 10926 ;;		wreg, status,2
 10927 ;; Tracked objects:
 10928 ;;		On entry : 0/0
 10929 ;;		On exit  : 0/0
 10930 ;;		Unchanged: 0/0
 10931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10933 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;Total ram usage:        1 bytes
 10937 ;; Hardware stack levels used:    1
 10938 ;; Hardware stack levels required when called:    3
 10939 ;; This function calls:
 10940 ;;		Nothing
 10941 ;; This function is called by:
 10942 ;;		_getRxData
 10943 ;;		_setSw_Main
 10944 ;;		_Exception_Main
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           
 10949                           ;psect for function _getMain_All_Error_Status
 10950  110F                     _getMain_All_Error_Status:	
 10951                           
 10952                           ;main_B1.c: 430: char status = 0;
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2]
 10956  110F  01F2               	clrf	getMain_All_Error_Status@status
 10957                           
 10958                           ;main_B1.c: 460: return status;
 10959  1110  0872               	movf	getMain_All_Error_Status@status,w
 10960  1111  0008               	return
 10961  1112                     __end_of_getMain_All_Error_Status:	
 10962                           
 10963                           	psect	text73
 10964  1177                     __ptext73:	
 10965 ;; *************** function _DimmerLights_Main *****************
 10966 ;; Defined at:
 10967 ;;		line 867 in file "../src/Dimmer_B1.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;		None               void
 10974 ;; Registers used:
 10975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        0 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    8
 10988 ;; This function calls:
 10989 ;;		_DimmerLights_DimmingFunction
 10990 ;;		_setDimmerLights_Main
 10991 ;; This function is called by:
 10992 ;;		_main
 10993 ;; This function uses a non-reentrant model
 10994 ;;
 10995                           
 10996                           
 10997                           ;psect for function _DimmerLights_Main
 10998  1177                     _DimmerLights_Main:	
 10999                           
 11000                           ;Dimmer_B1.c: 879: setDimmerLights_Main(1);
 11001                           
 11002                           ;incstack = 0
 11003                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11004  1177  3001               	movlw	1
 11005  1178  318D  2507  3191   	fcall	_setDimmerLights_Main
 11006                           
 11007                           ;Dimmer_B1.c: 882: DimmerLights_DimmingFunction(1);
 11008  117B  3001               	movlw	1
 11009  117C  3189  21F8         	fcall	_DimmerLights_DimmingFunction
 11010  117E  0008               	return
 11011  117F                     __end_of_DimmerLights_Main:	
 11012                           
 11013                           	psect	text74
 11014  0D07                     __ptext74:	
 11015 ;; *************** function _setDimmerLights_Main *****************
 11016 ;; Defined at:
 11017 ;;		line 924 in file "../src/Dimmer_B1.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  lights          1    wreg     unsigned char 
 11020 ;; Auto vars:     Size  Location     Type
 11021 ;;  lights          1   69[BANK0 ] unsigned char 
 11022 ;; Return value:  Size  Location     Type
 11023 ;;		None               void
 11024 ;; Registers used:
 11025 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11026 ;; Tracked objects:
 11027 ;;		On entry : 0/0
 11028 ;;		On exit  : 0/0
 11029 ;;		Unchanged: 0/0
 11030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;Total ram usage:        1 bytes
 11036 ;; Hardware stack levels used:    1
 11037 ;; Hardware stack levels required when called:    7
 11038 ;; This function calls:
 11039 ;;		_DimmerLights_SelectPointer
 11040 ;;		_getDimmerLights_Allow_Condition
 11041 ;;		_getMain_All_LightsStatus
 11042 ;;		_setDimmerLights_Dimming
 11043 ;;		_setDimmerLights_OnOff
 11044 ;; This function is called by:
 11045 ;;		_DimmerLights_Main
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function _setDimmerLights_Main
 11051  0D07                     _setDimmerLights_Main:	
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11055                           ;setDimmerLights_Main@lights stored from wreg
 11056  0D07  0020               	movlb	0	; select bank0
 11057  0D08  00E5               	movwf	setDimmerLights_Main@lights
 11058                           
 11059                           ;Dimmer_B1.c: 926: DimmerLights_SelectPointer(lights);
 11060  0D09  0865               	movf	setDimmerLights_Main@lights,w
 11061  0D0A  3191  21AD  318D   	fcall	_DimmerLights_SelectPointer
 11062                           
 11063                           ;Dimmer_B1.c: 927: if (DimmerLights->Trigger == 1) {
 11064  0D0D  0020               	movlb	0	; select bank0
 11065  0D0E  086A               	movf	_DimmerLights,w
 11066  0D0F  0086               	movwf	6
 11067  0D10  3001               	movlw	1	; select bank2/3
 11068  0D11  0087               	movwf	7
 11069  0D12  1C81               	btfss	1,1
 11070  0D13  2D33               	goto	l9411
 11071                           
 11072                           ;Dimmer_B1.c: 928: if (getDimmerLights_Allow_Condition(lights) == 0) {
 11073  0D14  0865               	movf	setDimmerLights_Main@lights,w
 11074  0D15  3191  210C  318D   	fcall	_getDimmerLights_Allow_Condition
 11075  0D18  3800               	iorlw	0
 11076  0D19  1D03               	skipz
 11077  0D1A  0008               	return
 11078                           
 11079                           ;Dimmer_B1.c: 929: DimmerLights->Trigger = 0;
 11080  0D1B  0020               	movlb	0	; select bank0
 11081  0D1C  086A               	movf	_DimmerLights,w
 11082  0D1D  0086               	movwf	6
 11083  0D1E  3001               	movlw	1	; select bank2/3
 11084  0D1F  0087               	movwf	7
 11085  0D20  1081               	bcf	1,1
 11086                           
 11087                           ;Dimmer_B1.c: 930: if (DimmerLights->Switch == 1) {
 11088  0D21  086A               	movf	_DimmerLights,w
 11089  0D22  0086               	movwf	6
 11090  0D23  3001               	movlw	1	; select bank2/3
 11091  0D24  0087               	movwf	7
 11092  0D25  1D01               	btfss	1,2
 11093  0D26  2D2D               	goto	l9409
 11094                           
 11095                           ;Dimmer_B1.c: 931: setDimmerLights_OnOff(lights, 1);
 11096  0D27  01E1               	clrf	setDimmerLights_OnOff@command
 11097  0D28  0AE1               	incf	setDimmerLights_OnOff@command,f
 11098  0D29  0865               	movf	setDimmerLights_Main@lights,w
 11099  0D2A  3184  24F6         	fcall	_setDimmerLights_OnOff
 11100                           
 11101                           ;Dimmer_B1.c: 932: } else {
 11102  0D2C  0008               	return
 11103  0D2D                     l9409:	
 11104                           
 11105                           ;Dimmer_B1.c: 933: setDimmerLights_OnOff(lights, 0);
 11106  0D2D  0020               	movlb	0	; select bank0
 11107  0D2E  01E1               	clrf	setDimmerLights_OnOff@command
 11108  0D2F  0865               	movf	setDimmerLights_Main@lights,w
 11109  0D30  3184  24F6         	fcall	_setDimmerLights_OnOff
 11110                           
 11111                           ;Dimmer_B1.c: 934: }
 11112                           ;Dimmer_B1.c: 935: }
 11113                           ;Dimmer_B1.c: 936: } else {
 11114  0D32  0008               	return
 11115  0D33                     l9411:	
 11116                           
 11117                           ;Dimmer_B1.c: 937: if (getMain_All_LightsStatus() == 1) {
 11118  0D33  3191  216F  318D   	fcall	_getMain_All_LightsStatus
 11119  0D36  3A01               	xorlw	1
 11120  0D37  1D03               	skipz
 11121  0D38  2D5F               	goto	l9423
 11122                           
 11123                           ;Dimmer_B1.c: 938: if (DimmerLights->DimmingTrigger == 1) {
 11124  0D39  0020               	movlb	0	; select bank0
 11125  0D3A  086A               	movf	_DimmerLights,w
 11126  0D3B  0086               	movwf	6
 11127  0D3C  3001               	movlw	1	; select bank2/3
 11128  0D3D  0087               	movwf	7
 11129  0D3E  1E01               	btfss	1,4
 11130  0D3F  0008               	return
 11131                           
 11132                           ;Dimmer_B1.c: 939: if (getDimmerLights_Allow_Condition(lights) == 0) {
 11133  0D40  0865               	movf	setDimmerLights_Main@lights,w
 11134  0D41  3191  210C  318D   	fcall	_getDimmerLights_Allow_Condition
 11135  0D44  3800               	iorlw	0
 11136  0D45  1D03               	skipz
 11137  0D46  0008               	return
 11138                           
 11139                           ;Dimmer_B1.c: 940: DimmerLights->DimmingTrigger = 0;
 11140  0D47  0020               	movlb	0	; select bank0
 11141  0D48  086A               	movf	_DimmerLights,w
 11142  0D49  0086               	movwf	6
 11143  0D4A  3001               	movlw	1	; select bank2/3
 11144  0D4B  0087               	movwf	7
 11145  0D4C  1201               	bcf	1,4
 11146                           
 11147                           ;Dimmer_B1.c: 941: if (DimmerLights->DimmingSwitch == 1) {
 11148  0D4D  086A               	movf	_DimmerLights,w
 11149  0D4E  0086               	movwf	6
 11150  0D4F  3001               	movlw	1	; select bank2/3
 11151  0D50  0087               	movwf	7
 11152  0D51  1E81               	btfss	1,5
 11153  0D52  2D59               	goto	l9421
 11154                           
 11155                           ;Dimmer_B1.c: 942: setDimmerLights_Dimming(lights, 1);
 11156  0D53  01DE               	clrf	setDimmerLights_Dimming@status
 11157  0D54  0ADE               	incf	setDimmerLights_Dimming@status,f
 11158  0D55  0865               	movf	setDimmerLights_Main@lights,w
 11159  0D56  318A  2244         	fcall	_setDimmerLights_Dimming
 11160                           
 11161                           ;Dimmer_B1.c: 943: } else {
 11162  0D58  0008               	return
 11163  0D59                     l9421:	
 11164                           
 11165                           ;Dimmer_B1.c: 944: setDimmerLights_Dimming(lights, 0);
 11166  0D59  0020               	movlb	0	; select bank0
 11167  0D5A  01DE               	clrf	setDimmerLights_Dimming@status
 11168  0D5B  0865               	movf	setDimmerLights_Main@lights,w
 11169  0D5C  318A  2244         	fcall	_setDimmerLights_Dimming
 11170                           
 11171                           ;Dimmer_B1.c: 945: }
 11172                           ;Dimmer_B1.c: 946: }
 11173                           ;Dimmer_B1.c: 947: }
 11174                           ;Dimmer_B1.c: 948: } else {
 11175  0D5E  0008               	return
 11176  0D5F                     l9423:	
 11177                           
 11178                           ;Dimmer_B1.c: 949: if (DimmerLights->DimmingTrigger == 1) {
 11179  0D5F  0020               	movlb	0	; select bank0
 11180  0D60  086A               	movf	_DimmerLights,w
 11181  0D61  0086               	movwf	6
 11182  0D62  3001               	movlw	1	; select bank2/3
 11183  0D63  0087               	movwf	7
 11184  0D64  1E01               	btfss	1,4
 11185  0D65  0008               	return
 11186                           
 11187                           ;Dimmer_B1.c: 950: DimmerLights->DimmingTrigger = 0;
 11188  0D66  086A               	movf	_DimmerLights,w
 11189  0D67  0086               	movwf	6
 11190  0D68  3001               	movlw	1	; select bank2/3
 11191  0D69  0087               	movwf	7
 11192  0D6A  1201               	bcf	1,4
 11193  0D6B  0008               	return
 11194  0D6C                     __end_of_setDimmerLights_Main:	
 11195                           
 11196                           	psect	text75
 11197  04F6                     __ptext75:	
 11198 ;; *************** function _setDimmerLights_OnOff *****************
 11199 ;; Defined at:
 11200 ;;		line 1001 in file "../src/Dimmer_B1.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;  lights          1    wreg     unsigned char 
 11203 ;;  command         1   65[BANK0 ] unsigned char 
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;  lights          1   68[BANK0 ] unsigned char 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;		None               void
 11208 ;; Registers used:
 11209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        4 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    6
 11222 ;; This function calls:
 11223 ;;		_DimmerIntr_ValueCalculate
 11224 ;;		_getCmd_Status
 11225 ;;		_getDelayOff_GO
 11226 ;;		_getDimmerLights_PercentToValue
 11227 ;;		_getMain_All_LightsStatus
 11228 ;;		_setCmd_Status
 11229 ;;		_setDelayOff_GO
 11230 ;;		_setDimmerIntr_ControlStatus
 11231 ;;		_setDimmerIntr_DimmingValue
 11232 ;;		_setDimmerIntr_Dimming_RF
 11233 ;;		_setDimmerIntr_MaxmumValue
 11234 ;;		_setDimmerLights_DimmingClose
 11235 ;;		_setLED
 11236 ;;		_setProductData
 11237 ;;		_setRF_DimmerLights
 11238 ;;		_setTxData
 11239 ;; This function is called by:
 11240 ;;		_setDimmerLights_Main
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           
 11245                           ;psect for function _setDimmerLights_OnOff
 11246  04F6                     _setDimmerLights_OnOff:	
 11247                           
 11248                           ;incstack = 0
 11249                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11250                           ;setDimmerLights_OnOff@lights stored from wreg
 11251  04F6  0020               	movlb	0	; select bank0
 11252  04F7  00E4               	movwf	setDimmerLights_OnOff@lights
 11253                           
 11254                           ;Dimmer_B1.c: 1003: if (command == 1) {
 11255  04F8  0861               	movf	setDimmerLights_OnOff@command,w
 11256  04F9  3A01               	xorlw	1
 11257  04FA  1D03               	skipz
 11258  04FB  2D4F               	goto	l9249
 11259                           
 11260                           ;Dimmer_B1.c: 1005: setDimmerIntr_ControlStatus(lights, 1);
 11261  04FC  01F2               	clrf	setDimmerIntr_ControlStatus@command
 11262  04FD  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 11263  04FE  0864               	movf	setDimmerLights_OnOff@lights,w
 11264  04FF  3193  23CE  3184   	fcall	_setDimmerIntr_ControlStatus
 11265                           
 11266                           ;Dimmer_B1.c: 1015: setLED(lights, 0);
 11267  0502  01F3               	clrf	setLED@command
 11268  0503  0020               	movlb	0	; select bank0
 11269  0504  0864               	movf	setDimmerLights_OnOff@lights,w
 11270  0505  318B  23E2  3184   	fcall	_setLED
 11271                           
 11272                           ;Dimmer_B1.c: 1016: ;;
 11273                           ;Dimmer_B1.c: 1036: if (DimmerLights->DimmingRun == 1) {
 11274  0508  0020               	movlb	0	; select bank0
 11275  0509  0A6A               	incf	_DimmerLights,w
 11276  050A  0086               	movwf	6
 11277  050B  3001               	movlw	1	; select bank2/3
 11278  050C  0087               	movwf	7
 11279  050D  1F01               	btfss	1,6
 11280  050E  2D30               	goto	l9241
 11281                           
 11282                           ;Dimmer_B1.c: 1037: DimmerLights->DimmingRun = 0;
 11283  050F  0A6A               	incf	_DimmerLights,w
 11284  0510  0086               	movwf	6
 11285  0511  3001               	movlw	1	; select bank2/3
 11286  0512  0087               	movwf	7
 11287  0513  1301               	bcf	1,6
 11288                           
 11289                           ;Dimmer_B1.c: 1038: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 11290  0514  0864               	movf	setDimmerLights_OnOff@lights,w
 11291  0515  3E14               	addlw	20
 11292  0516  076E               	addwf	_product,w
 11293  0517  00E2               	movwf	??_setDimmerLights_OnOff
 11294  0518  0862               	movf	??_setDimmerLights_OnOff,w
 11295  0519  0086               	movwf	6
 11296  051A  3001               	movlw	1	; select bank2/3
 11297  051B  0087               	movwf	7
 11298  051C  0801               	movf	1,w
 11299  051D  318B  2387  3184   	fcall	_getDimmerLights_PercentToValue
 11300  0520  0020               	movlb	0	; select bank0
 11301  0521  00E3               	movwf	??_setDimmerLights_OnOff+1
 11302  0522  0863               	movf	??_setDimmerLights_OnOff+1,w
 11303  0523  00D8               	movwf	setDimmerIntr_MaxmumValue@value
 11304  0524  0864               	movf	setDimmerLights_OnOff@lights,w
 11305  0525  3191  21FB  3184   	fcall	_setDimmerIntr_MaxmumValue
 11306                           
 11307                           ;Dimmer_B1.c: 1039: setDimmerIntr_Dimming_RF(lights, 1);
 11308  0528  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 11309  0529  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 11310  052A  0020               	movlb	0	; select bank0
 11311  052B  0864               	movf	setDimmerLights_OnOff@lights,w
 11312  052C  3193  23E3  3184   	fcall	_setDimmerIntr_Dimming_RF
 11313                           
 11314                           ;Dimmer_B1.c: 1040: } else {
 11315  052F  2D45               	goto	l9243
 11316  0530                     l9241:	
 11317                           
 11318                           ;Dimmer_B1.c: 1043: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pr
      +                          oduct->Data[20 + lights]));
 11319  0530  0020               	movlb	0	; select bank0
 11320  0531  0864               	movf	setDimmerLights_OnOff@lights,w
 11321  0532  3E14               	addlw	20
 11322  0533  076E               	addwf	_product,w
 11323  0534  00E2               	movwf	??_setDimmerLights_OnOff
 11324  0535  0862               	movf	??_setDimmerLights_OnOff,w
 11325  0536  0086               	movwf	6
 11326  0537  3001               	movlw	1	; select bank2/3
 11327  0538  0087               	movwf	7
 11328  0539  0801               	movf	1,w
 11329  053A  318B  2387  3184   	fcall	_getDimmerLights_PercentToValue
 11330  053D  0020               	movlb	0	; select bank0
 11331  053E  00E3               	movwf	??_setDimmerLights_OnOff+1
 11332  053F  0863               	movf	??_setDimmerLights_OnOff+1,w
 11333  0540  00D8               	movwf	setDimmerIntr_DimmingValue@value
 11334  0541  0864               	movf	setDimmerLights_OnOff@lights,w
 11335  0542  3192  2207  3184   	fcall	_setDimmerIntr_DimmingValue
 11336  0545                     l9243:	
 11337                           
 11338                           ;Dimmer_B1.c: 1049: }
 11339                           ;Dimmer_B1.c: 1051: if (lights == 1) {
 11340  0545  0020               	movlb	0	; select bank0
 11341  0546  0864               	movf	setDimmerLights_OnOff@lights,w
 11342  0547  3A01               	xorlw	1
 11343  0548  1D03               	skipz
 11344  0549  2D73               	goto	l9261
 11345                           
 11346                           ;Dimmer_B1.c: 1054: DimmerIntr_ValueCalculate(1);
 11347  054A  3001               	movlw	1
 11348  054B  3192  22B7  3184   	fcall	_DimmerIntr_ValueCalculate
 11349                           
 11350                           ;Dimmer_B1.c: 1061: }
 11351                           ;Dimmer_B1.c: 1067: } else if (command == 0) {
 11352                           
 11353                           ;Dimmer_B1.c: 1056: } else if (lights == 2) {
 11354  054E  2D73               	goto	l9261
 11355  054F                     l9249:	
 11356  054F  0020               	movlb	0	; select bank0
 11357  0550  08E1               	movf	setDimmerLights_OnOff@command,f
 11358  0551  1D03               	skipz
 11359  0552  2D73               	goto	l9261
 11360                           
 11361                           ;Dimmer_B1.c: 1069: setDimmerIntr_ControlStatus(lights, 0);
 11362  0553  01F2               	clrf	setDimmerIntr_ControlStatus@command
 11363  0554  0864               	movf	setDimmerLights_OnOff@lights,w
 11364  0555  3193  23CE  3184   	fcall	_setDimmerIntr_ControlStatus
 11365                           
 11366                           ;Dimmer_B1.c: 1076: if (getDelayOff_GO(lights) == 1) {
 11367  0558  0020               	movlb	0	; select bank0
 11368  0559  0864               	movf	setDimmerLights_OnOff@lights,w
 11369  055A  3192  227A  3184   	fcall	_getDelayOff_GO
 11370  055D  3A01               	xorlw	1
 11371  055E  1D03               	skipz
 11372  055F  2D67               	goto	l811
 11373                           
 11374                           ;Dimmer_B1.c: 1077: setDelayOff_GO(lights, 0, 0);
 11375  0560  0020               	movlb	0	; select bank0
 11376  0561  01D9               	clrf	setDelayOff_GO@command
 11377  0562  01DA               	clrf	setDelayOff_GO@value
 11378  0563  0864               	movf	setDimmerLights_OnOff@lights,w
 11379  0564  318F  277C  3184   	fcall	_setDelayOff_GO
 11380  0567                     l811:	
 11381                           
 11382                           ;Dimmer_B1.c: 1078: }
 11383                           ;Dimmer_B1.c: 1083: setLED(lights, 1);
 11384  0567  01F3               	clrf	setLED@command
 11385  0568  0AF3               	incf	setLED@command,f
 11386  0569  0020               	movlb	0	; select bank0
 11387  056A  0864               	movf	setDimmerLights_OnOff@lights,w
 11388  056B  318B  23E2  3184   	fcall	_setLED
 11389                           
 11390                           ;Dimmer_B1.c: 1084: ;;
 11391                           ;Dimmer_B1.c: 1088: if (lights == 1) {
 11392  056E  0020               	movlb	0	; select bank0
 11393  056F  0864               	movf	setDimmerLights_OnOff@lights,w
 11394  0570  3A01               	xorlw	1
 11395  0571  1903               	btfsc	3,2
 11396                           
 11397                           ;Dimmer_B1.c: 1094: RA7 = 0;
 11398  0572  138C               	bcf	12,7	;volatile
 11399  0573                     l9261:	
 11400                           
 11401                           ;Dimmer_B1.c: 1096: }
 11402                           ;Dimmer_B1.c: 1122: }
 11403                           ;Dimmer_B1.c: 1124: setDimmerLights_DimmingClose();
 11404  0573  3191  213D  3184   	fcall	_setDimmerLights_DimmingClose
 11405                           
 11406                           ;Dimmer_B1.c: 1126: setRF_DimmerLights(lights, command);
 11407  0576  0020               	movlb	0	; select bank0
 11408  0577  0861               	movf	setDimmerLights_OnOff@command,w
 11409  0578  00E2               	movwf	??_setDimmerLights_OnOff
 11410  0579  0862               	movf	??_setDimmerLights_OnOff,w
 11411  057A  00D9               	movwf	setRF_DimmerLights@on
 11412  057B  0864               	movf	setDimmerLights_OnOff@lights,w
 11413  057C  318D  25D1  3184   	fcall	_setRF_DimmerLights
 11414                           
 11415                           ;Dimmer_B1.c: 1128: if (getCmd_Status(1) == 1) {
 11416  057F  3001               	movlw	1
 11417  0580  3192  22D7  3184   	fcall	_getCmd_Status
 11418  0583  3A01               	xorlw	1
 11419  0584  1D03               	skipz
 11420  0585  2DA0               	goto	l9277
 11421                           
 11422                           ;Dimmer_B1.c: 1129: if (getMain_All_LightsStatus() == 0) {
 11423  0586  3191  216F  3184   	fcall	_getMain_All_LightsStatus
 11424  0589  3800               	iorlw	0
 11425  058A  1D03               	skipz
 11426  058B  0008               	return
 11427                           
 11428                           ;Dimmer_B1.c: 1130: setCmd_Status(1, 0);
 11429  058C  01F2               	clrf	setCmd_Status@cmd
 11430  058D  3001               	movlw	1
 11431  058E  3193  23B9  3184   	fcall	_setCmd_Status
 11432                           
 11433                           ;Dimmer_B1.c: 1131: setProductData(11, 0);
 11434  0591  0020               	movlb	0	; select bank0
 11435  0592  01D6               	clrf	setProductData@value
 11436  0593  300B               	movlw	11
 11437  0594  3191  21EF  3184   	fcall	_setProductData
 11438                           
 11439                           ;Dimmer_B1.c: 1132: setProductData(17, 0);
 11440  0597  0020               	movlb	0	; select bank0
 11441  0598  01D6               	clrf	setProductData@value
 11442  0599  3011               	movlw	17
 11443  059A  3191  21EF  3184   	fcall	_setProductData
 11444                           
 11445                           ;Dimmer_B1.c: 1133: setTxData();
 11446  059D  3191  215A         	fcall	_setTxData
 11447                           
 11448                           ;Dimmer_B1.c: 1134: }
 11449                           ;Dimmer_B1.c: 1135: } else {
 11450  059F  0008               	return
 11451  05A0                     l9277:	
 11452                           
 11453                           ;Dimmer_B1.c: 1136: setTxData();
 11454  05A0  3191  215A         	fcall	_setTxData
 11455  05A2  0008               	return
 11456  05A3                     __end_of_setDimmerLights_OnOff:	
 11457                           
 11458                           	psect	text76
 11459  0BE2                     __ptext76:	
 11460 ;; *************** function _setLED *****************
 11461 ;; Defined at:
 11462 ;;		line 81 in file "../src/LED_B1.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  led             1    wreg     unsigned char 
 11465 ;;  command         1    3[COMMON] unsigned char 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  led             1    4[COMMON] unsigned char 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;		None               void
 11470 ;; Registers used:
 11471 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11477 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;Total ram usage:        2 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    4
 11484 ;; This function calls:
 11485 ;;		_LedPointSelect
 11486 ;; This function is called by:
 11487 ;;		_setDimmerLights_OnOff
 11488 ;;		_setLED_Initialization
 11489 ;;		_setSw_Initialization
 11490 ;;		_Exception_Main
 11491 ;; This function uses a non-reentrant model
 11492 ;;
 11493                           
 11494                           
 11495                           ;psect for function _setLED
 11496  0BE2                     _setLED:	
 11497                           
 11498                           ;incstack = 0
 11499                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11500                           ;setLED@led stored from wreg
 11501  0BE2  00F4               	movwf	setLED@led
 11502                           
 11503                           ;LED_B1.c: 82: LedPointSelect(led);
 11504  0BE3  0874               	movf	setLED@led,w
 11505  0BE4  3194  24B3  318B   	fcall	_LedPointSelect
 11506                           
 11507                           ;LED_B1.c: 83: if (command == 0) {
 11508  0BE7  08F3               	movf	setLED@command,f
 11509  0BE8  1D03               	skipz
 11510  0BE9  2BFC               	goto	l9045
 11511                           
 11512                           ;LED_B1.c: 85: if (led == 1) {
 11513  0BEA  0874               	movf	setLED@led,w
 11514  0BEB  3A01               	xorlw	1
 11515  0BEC  1D03               	skipz
 11516  0BED  2BF0               	goto	l9037
 11517                           
 11518                           ;LED_B1.c: 89: RA3 = 1;
 11519  0BEE  0020               	movlb	0	; select bank0
 11520  0BEF  158C               	bsf	12,3	;volatile
 11521  0BF0                     l9037:	
 11522                           
 11523                           ;LED_B1.c: 91: }
 11524                           ;LED_B1.c: 94: if (led == 2) {
 11525  0BF0  0874               	movf	setLED@led,w
 11526  0BF1  3A02               	xorlw	2
 11527  0BF2  1D03               	skipz
 11528  0BF3  2BF6               	goto	l9041
 11529                           
 11530                           ;LED_B1.c: 98: RC7 = 1;
 11531  0BF4  0020               	movlb	0	; select bank0
 11532  0BF5  178E               	bsf	14,7	;volatile
 11533  0BF6                     l9041:	
 11534                           
 11535                           ;LED_B1.c: 100: }
 11536                           ;LED_B1.c: 112: if (led == 99) {
 11537  0BF6  0874               	movf	setLED@led,w
 11538  0BF7  3A63               	xorlw	99
 11539  0BF8  1D03               	skipz
 11540  0BF9  2BFC               	goto	l9045
 11541                           
 11542                           ;LED_B1.c: 116: RB5 = 1;
 11543  0BFA  0020               	movlb	0	; select bank0
 11544  0BFB  168D               	bsf	13,5	;volatile
 11545  0BFC                     l9045:	
 11546                           
 11547                           ;LED_B1.c: 118: }
 11548                           ;LED_B1.c: 120: }
 11549                           ;LED_B1.c: 121: if (command == 1) {
 11550  0BFC  0873               	movf	setLED@command,w
 11551  0BFD  3A01               	xorlw	1
 11552  0BFE  1D03               	skipz
 11553  0BFF  2C12               	goto	l9059
 11554                           
 11555                           ;LED_B1.c: 123: if (led == 1) {
 11556  0C00  0874               	movf	setLED@led,w
 11557  0C01  3A01               	xorlw	1
 11558  0C02  1D03               	skipz
 11559  0C03  2C06               	goto	l9051
 11560                           
 11561                           ;LED_B1.c: 127: RA3 = 0;
 11562  0C04  0020               	movlb	0	; select bank0
 11563  0C05  118C               	bcf	12,3	;volatile
 11564  0C06                     l9051:	
 11565                           
 11566                           ;LED_B1.c: 129: }
 11567                           ;LED_B1.c: 132: if (led == 2) {
 11568  0C06  0874               	movf	setLED@led,w
 11569  0C07  3A02               	xorlw	2
 11570  0C08  1D03               	skipz
 11571  0C09  2C0C               	goto	l9055
 11572                           
 11573                           ;LED_B1.c: 136: RC7 = 0;
 11574  0C0A  0020               	movlb	0	; select bank0
 11575  0C0B  138E               	bcf	14,7	;volatile
 11576  0C0C                     l9055:	
 11577                           
 11578                           ;LED_B1.c: 138: }
 11579                           ;LED_B1.c: 150: if (led == 99) {
 11580  0C0C  0874               	movf	setLED@led,w
 11581  0C0D  3A63               	xorlw	99
 11582  0C0E  1D03               	skipz
 11583  0C0F  2C12               	goto	l9059
 11584                           
 11585                           ;LED_B1.c: 154: RB5 = 0;
 11586  0C10  0020               	movlb	0	; select bank0
 11587  0C11  128D               	bcf	13,5	;volatile
 11588  0C12                     l9059:	
 11589                           
 11590                           ;LED_B1.c: 156: }
 11591                           ;LED_B1.c: 158: }
 11592                           ;LED_B1.c: 159: if (command == 10) {
 11593  0C12  0873               	movf	setLED@command,w
 11594  0C13  3A0A               	xorlw	10
 11595  0C14  1D03               	skipz
 11596  0C15  2C36               	goto	l9075
 11597                           
 11598                           ;LED_B1.c: 160: LED->GO = 0;
 11599  0C16  087A               	movf	_LED,w
 11600  0C17  0086               	movwf	6
 11601  0C18  087B               	movf	_LED+1,w
 11602  0C19  0087               	movwf	7
 11603  0C1A  1081               	bcf	1,1
 11604                           
 11605                           ;LED_B1.c: 161: LED->Time = 0;
 11606  0C1B  087A               	movf	_LED,w
 11607  0C1C  0086               	movwf	6
 11608  0C1D  087B               	movf	_LED+1,w
 11609  0C1E  0087               	movwf	7
 11610  0C1F  3141               	addfsr 1,1
 11611  0C20  3000               	movlw	0
 11612  0C21  3FC0               	movwi [0]fsr1
 11613  0C22  3FC1               	movwi [1]fsr1
 11614                           
 11615                           ;LED_B1.c: 163: if (led == 1) {
 11616  0C23  0874               	movf	setLED@led,w
 11617  0C24  3A01               	xorlw	1
 11618  0C25  1D03               	skipz
 11619  0C26  2C2A               	goto	l9067
 11620                           
 11621                           ;LED_B1.c: 167: RA3 = 1;
 11622  0C27  0020               	movlb	0	; select bank0
 11623  0C28  158C               	bsf	12,3	;volatile
 11624                           
 11625                           ;LED_B1.c: 169: }
 11626  0C29  2C30               	goto	l9071
 11627  0C2A                     l9067:	
 11628                           
 11629                           ;LED_B1.c: 172: else if (led == 2) {
 11630  0C2A  0874               	movf	setLED@led,w
 11631  0C2B  3A02               	xorlw	2
 11632  0C2C  1D03               	skipz
 11633  0C2D  2C30               	goto	l9071
 11634                           
 11635                           ;LED_B1.c: 176: RC7 = 1;
 11636  0C2E  0020               	movlb	0	; select bank0
 11637  0C2F  178E               	bsf	14,7	;volatile
 11638  0C30                     l9071:	
 11639                           
 11640                           ;LED_B1.c: 178: }
 11641                           ;LED_B1.c: 190: if (led == 99) {
 11642  0C30  0874               	movf	setLED@led,w
 11643  0C31  3A63               	xorlw	99
 11644  0C32  1D03               	skipz
 11645  0C33  2C36               	goto	l9075
 11646                           
 11647                           ;LED_B1.c: 194: RB5 = 1;
 11648  0C34  0020               	movlb	0	; select bank0
 11649  0C35  168D               	bsf	13,5	;volatile
 11650  0C36                     l9075:	
 11651                           
 11652                           ;LED_B1.c: 196: }
 11653                           ;LED_B1.c: 198: }
 11654                           ;LED_B1.c: 199: if (command == 11) {
 11655  0C36  0873               	movf	setLED@command,w
 11656  0C37  3A0B               	xorlw	11
 11657  0C38  1D03               	skipz
 11658  0C39  0008               	return
 11659                           
 11660                           ;LED_B1.c: 200: LED->GO = 1;
 11661  0C3A  087A               	movf	_LED,w
 11662  0C3B  0086               	movwf	6
 11663  0C3C  087B               	movf	_LED+1,w
 11664  0C3D  0087               	movwf	7
 11665  0C3E  1481               	bsf	1,1
 11666  0C3F  0008               	return
 11667  0C40                     __end_of_setLED:	
 11668                           
 11669                           	psect	text77
 11670  14B3                     __ptext77:	
 11671 ;; *************** function _LedPointSelect *****************
 11672 ;; Defined at:
 11673 ;;		line 7 in file "../src/LED_B1.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;  led             1    wreg     unsigned char 
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;  led             1    2[COMMON] unsigned char 
 11678 ;; Return value:  Size  Location     Type
 11679 ;;		None               void
 11680 ;; Registers used:
 11681 ;;		wreg, status,2, status,0
 11682 ;; Tracked objects:
 11683 ;;		On entry : 0/0
 11684 ;;		On exit  : 0/0
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11688 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11691 ;;Total ram usage:        1 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    3
 11694 ;; This function calls:
 11695 ;;		Nothing
 11696 ;; This function is called by:
 11697 ;;		_setLED_Initialization
 11698 ;;		_setLED
 11699 ;;		_setLED_Main
 11700 ;; This function uses a non-reentrant model
 11701 ;;
 11702                           
 11703                           
 11704                           ;psect for function _LedPointSelect
 11705  14B3                     _LedPointSelect:	
 11706                           
 11707                           ;incstack = 0
 11708                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 11709                           ;LedPointSelect@led stored from wreg
 11710  14B3  00F2               	movwf	LedPointSelect@led
 11711                           
 11712                           ;LED_B1.c: 9: if (led == 1) {
 11713  14B4  0872               	movf	LedPointSelect@led,w
 11714  14B5  3A01               	xorlw	1
 11715  14B6  1D03               	skipz
 11716  14B7  2CBC               	goto	l8851
 11717                           
 11718                           ;LED_B1.c: 10: LED = &VarLED1;
 11719  14B8  30EC               	movlw	low _VarLED1
 11720  14B9  00FA               	movwf	_LED
 11721  14BA  3000               	movlw	high _VarLED1
 11722  14BB  00FB               	movwf	_LED+1
 11723  14BC                     l8851:	
 11724                           
 11725                           ;LED_B1.c: 11: }
 11726                           ;LED_B1.c: 14: if (led == 2) {
 11727  14BC  0872               	movf	LedPointSelect@led,w
 11728  14BD  3A02               	xorlw	2
 11729  14BE  1D03               	skipz
 11730  14BF  2CC4               	goto	l8855
 11731                           
 11732                           ;LED_B1.c: 15: LED = &VarLED2;
 11733  14C0  306A               	movlw	low _VarLED2
 11734  14C1  00FA               	movwf	_LED
 11735  14C2  3001               	movlw	high _VarLED2
 11736  14C3  00FB               	movwf	_LED+1
 11737  14C4                     l8855:	
 11738                           
 11739                           ;LED_B1.c: 16: }
 11740                           ;LED_B1.c: 24: if (led == 99) {
 11741  14C4  0872               	movf	LedPointSelect@led,w
 11742  14C5  3A63               	xorlw	99
 11743  14C6  1D03               	skipz
 11744  14C7  0008               	return
 11745                           
 11746                           ;LED_B1.c: 25: LED = &VarErrLED;
 11747  14C8  30E8               	movlw	low _VarErrLED
 11748  14C9  00FA               	movwf	_LED
 11749  14CA  3000               	movlw	high _VarErrLED
 11750  14CB  00FB               	movwf	_LED+1
 11751  14CC  0008               	return
 11752  14CD                     __end_of_LedPointSelect:	
 11753                           
 11754                           	psect	text78
 11755  113D                     __ptext78:	
 11756 ;; *************** function _setDimmerLights_DimmingClose *****************
 11757 ;; Defined at:
 11758 ;;		line 2043 in file "../src/Dimmer_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        0 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    4
 11779 ;; This function calls:
 11780 ;;		_setDimmerIntr_Dimming_Sw
 11781 ;; This function is called by:
 11782 ;;		_setDimmerLights_OnOff
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _setDimmerLights_DimmingClose
 11788  113D                     _setDimmerLights_DimmingClose:	
 11789                           
 11790                           ;Dimmer_B1.c: 2045: setDimmerIntr_Dimming_Sw(1, 0);
 11791                           
 11792                           ;incstack = 0
 11793                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 11794  113D  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 11795  113E  3001               	movlw	1
 11796  113F  3193  237E         	fcall	_setDimmerIntr_Dimming_Sw
 11797  1141  0008               	return
 11798  1142                     __end_of_setDimmerLights_DimmingClose:	
 11799                           
 11800                           	psect	text79
 11801  13E3                     __ptext79:	
 11802 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 11803 ;; Defined at:
 11804 ;;		line 290 in file "../src/Dimmer_B1.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;  lights          1    wreg     unsigned char 
 11807 ;;  command         1    2[COMMON] unsigned char 
 11808 ;; Auto vars:     Size  Location     Type
 11809 ;;  lights          1    4[COMMON] unsigned char 
 11810 ;; Return value:  Size  Location     Type
 11811 ;;		None               void
 11812 ;; Registers used:
 11813 ;;		wreg, status,2, status,0
 11814 ;; Tracked objects:
 11815 ;;		On entry : 0/0
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11819 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11823 ;;Total ram usage:        3 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    3
 11826 ;; This function calls:
 11827 ;;		Nothing
 11828 ;; This function is called by:
 11829 ;;		_setDimmerLights_OnOff
 11830 ;;		_setRFSW_AdjControl
 11831 ;;		_DimmerLights_AssignationDimming
 11832 ;; This function uses a non-reentrant model
 11833 ;;
 11834                           
 11835                           
 11836                           ;psect for function _setDimmerIntr_Dimming_RF
 11837  13E3                     _setDimmerIntr_Dimming_RF:	
 11838                           
 11839                           ;incstack = 0
 11840                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 11841                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 11842  13E3  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 11843                           
 11844                           ;Dimmer_B1.c: 292: if (lights == 1) {
 11845  13E4  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 11846  13E5  3A01               	xorlw	1
 11847  13E6  1D03               	skipz
 11848  13E7  0008               	return
 11849                           
 11850                           ;Dimmer_B1.c: 293: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 11851  13E8  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 11852  13E9  3A01               	xorlw	1
 11853  13EA  3000               	movlw	0
 11854  13EB  1903               	skipnz
 11855  13EC  3001               	movlw	1
 11856  13ED  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 11857  13EE  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 11858  13EF  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 11859  13F0  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 11860  13F1  0021               	movlb	1	; select bank1
 11861  13F2  0820               	movf	_DimmerIntr1^(0+128),w
 11862  13F3  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 11863  13F4  39BF               	andlw	-65
 11864  13F5  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 11865  13F6  00A0               	movwf	_DimmerIntr1^(0+128)
 11866  13F7  0008               	return
 11867  13F8                     __end_of_setDimmerIntr_Dimming_RF:	
 11868                           
 11869                           	psect	text80
 11870  1207                     __ptext80:	
 11871 ;; *************** function _setDimmerIntr_DimmingValue *****************
 11872 ;; Defined at:
 11873 ;;		line 137 in file "../src/Dimmer_B1.c"
 11874 ;; Parameters:    Size  Location     Type
 11875 ;;  lights          1    wreg     unsigned char 
 11876 ;;  value           1   56[BANK0 ] unsigned char 
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;  lights          1   58[BANK0 ] unsigned char 
 11879 ;; Return value:  Size  Location     Type
 11880 ;;		None               void
 11881 ;; Registers used:
 11882 ;;		wreg
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11888 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;Total ram usage:        3 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; Hardware stack levels required when called:    3
 11895 ;; This function calls:
 11896 ;;		Nothing
 11897 ;; This function is called by:
 11898 ;;		_setDimmerLights_OnOff
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           
 11903                           ;psect for function _setDimmerIntr_DimmingValue
 11904  1207                     _setDimmerIntr_DimmingValue:	
 11905                           
 11906                           ;incstack = 0
 11907                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 11908                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 11909  1207  0020               	movlb	0	; select bank0
 11910  1208  00DA               	movwf	setDimmerIntr_DimmingValue@lights
 11911                           
 11912                           ;Dimmer_B1.c: 139: if (lights == 1) {
 11913  1209  085A               	movf	setDimmerIntr_DimmingValue@lights,w
 11914  120A  3A01               	xorlw	1
 11915  120B  1D03               	skipz
 11916  120C  0008               	return
 11917                           
 11918                           ;Dimmer_B1.c: 140: DimmerIntr1.DimmingValue = value;
 11919  120D  0858               	movf	setDimmerIntr_DimmingValue@value,w
 11920  120E  00D9               	movwf	??_setDimmerIntr_DimmingValue
 11921  120F  0859               	movf	??_setDimmerIntr_DimmingValue,w
 11922  1210  0021               	movlb	1	; select bank1
 11923  1211  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 11924  1212  0008               	return
 11925  1213                     __end_of_setDimmerIntr_DimmingValue:	
 11926                           
 11927                           	psect	text81
 11928  13CE                     __ptext81:	
 11929 ;; *************** function _setDimmerIntr_ControlStatus *****************
 11930 ;; Defined at:
 11931 ;;		line 119 in file "../src/Dimmer_B1.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;  lights          1    wreg     unsigned char 
 11934 ;;  command         1    2[COMMON] unsigned char 
 11935 ;; Auto vars:     Size  Location     Type
 11936 ;;  lights          1    4[COMMON] unsigned char 
 11937 ;; Return value:  Size  Location     Type
 11938 ;;		None               void
 11939 ;; Registers used:
 11940 ;;		wreg, status,2, status,0
 11941 ;; Tracked objects:
 11942 ;;		On entry : 0/0
 11943 ;;		On exit  : 0/0
 11944 ;;		Unchanged: 0/0
 11945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11946 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11949 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11950 ;;Total ram usage:        3 bytes
 11951 ;; Hardware stack levels used:    1
 11952 ;; Hardware stack levels required when called:    3
 11953 ;; This function calls:
 11954 ;;		Nothing
 11955 ;; This function is called by:
 11956 ;;		_setDimmerLights_OnOff
 11957 ;; This function uses a non-reentrant model
 11958 ;;
 11959                           
 11960                           
 11961                           ;psect for function _setDimmerIntr_ControlStatus
 11962  13CE                     _setDimmerIntr_ControlStatus:	
 11963                           
 11964                           ;incstack = 0
 11965                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 11966                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 11967  13CE  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 11968                           
 11969                           ;Dimmer_B1.c: 121: if (lights == 1) {
 11970  13CF  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 11971  13D0  3A01               	xorlw	1
 11972  13D1  1D03               	skipz
 11973  13D2  0008               	return
 11974                           
 11975                           ;Dimmer_B1.c: 122: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 11976  13D3  0872               	movf	setDimmerIntr_ControlStatus@command,w
 11977  13D4  3A01               	xorlw	1
 11978  13D5  3000               	movlw	0
 11979  13D6  1903               	skipnz
 11980  13D7  3001               	movlw	1
 11981  13D8  00F3               	movwf	??_setDimmerIntr_ControlStatus
 11982  13D9  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 11983  13DA  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 11984  13DB  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 11985  13DC  0021               	movlb	1	; select bank1
 11986  13DD  0820               	movf	_DimmerIntr1^(0+128),w
 11987  13DE  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 11988  13DF  39F7               	andlw	-9
 11989  13E0  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 11990  13E1  00A0               	movwf	_DimmerIntr1^(0+128)
 11991  13E2  0008               	return
 11992  13E3                     __end_of_setDimmerIntr_ControlStatus:	
 11993                           
 11994                           	psect	text82
 11995  0F7C                     __ptext82:	
 11996 ;; *************** function _setDelayOff_GO *****************
 11997 ;; Defined at:
 11998 ;;		line 87 in file "../src/DelayOff_B1.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;  sw              1    wreg     unsigned char 
 12001 ;;  command         1   57[BANK0 ] unsigned char 
 12002 ;;  value           1   58[BANK0 ] unsigned char 
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  sw              1   64[BANK0 ] unsigned char 
 12005 ;;  k               1   63[BANK0 ] unsigned char 
 12006 ;;  j               1   62[BANK0 ] unsigned char 
 12007 ;;  i               1   61[BANK0 ] unsigned char 
 12008 ;; Return value:  Size  Location     Type
 12009 ;;		None               void
 12010 ;; Registers used:
 12011 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12012 ;; Tracked objects:
 12013 ;;		On entry : 0/0
 12014 ;;		On exit  : 0/0
 12015 ;;		Unchanged: 0/0
 12016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12017 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12018 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;Total ram usage:        8 bytes
 12022 ;; Hardware stack levels used:    1
 12023 ;; Hardware stack levels required when called:    4
 12024 ;; This function calls:
 12025 ;;		_DelayOffPointSelect
 12026 ;;		___bmul
 12027 ;;		_setProductData
 12028 ;; This function is called by:
 12029 ;;		_setDimmerLights_OnOff
 12030 ;;		_setRFSW_Control
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           
 12035                           ;psect for function _setDelayOff_GO
 12036  0F7C                     _setDelayOff_GO:	
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12040                           ;setDelayOff_GO@sw stored from wreg
 12041  0F7C  0020               	movlb	0	; select bank0
 12042  0F7D  00E0               	movwf	setDelayOff_GO@sw
 12043                           
 12044                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 12045  0F7E  0860               	movf	setDelayOff_GO@sw,w
 12046  0F7F  3191  21A2  318F   	fcall	_DelayOffPointSelect
 12047                           
 12048                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 12049  0F82  0020               	movlb	0	; select bank0
 12050  0F83  0859               	movf	setDelayOff_GO@command,w
 12051  0F84  3A01               	xorlw	1
 12052  0F85  3000               	movlw	0
 12053  0F86  1903               	skipnz
 12054  0F87  3001               	movlw	1
 12055  0F88  00DB               	movwf	??_setDelayOff_GO
 12056  0F89  0869               	movf	_DelayOff,w
 12057  0F8A  0086               	movwf	6
 12058  0F8B  3001               	movlw	1	; select bank2/3
 12059  0F8C  0087               	movwf	7
 12060  0F8D  0DDB               	rlf	??_setDelayOff_GO,f
 12061  0F8E  0801               	movf	1,w
 12062  0F8F  065B               	xorwf	??_setDelayOff_GO,w
 12063  0F90  39FD               	andlw	-3
 12064  0F91  065B               	xorwf	??_setDelayOff_GO,w
 12065  0F92  0081               	movwf	1
 12066                           
 12067                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 12068  0F93  0869               	movf	_DelayOff,w
 12069  0F94  3E02               	addlw	2
 12070  0F95  0086               	movwf	6
 12071  0F96  3001               	movlw	1	; select bank2/3
 12072  0F97  0087               	movwf	7
 12073  0F98  3000               	movlw	0
 12074  0F99  3FC0               	movwi [0]fsr1
 12075  0F9A  3FC1               	movwi [1]fsr1
 12076                           
 12077                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 12078  0F9B  0869               	movf	_DelayOff,w
 12079  0F9C  3E04               	addlw	4
 12080  0F9D  0086               	movwf	6
 12081  0F9E  3001               	movlw	1	; select bank2/3
 12082  0F9F  0087               	movwf	7
 12083  0FA0  0181               	clrf	1
 12084                           
 12085                           ;DelayOff_B1.c: 94: if (command == 1) {
 12086  0FA1  0859               	movf	setDelayOff_GO@command,w
 12087  0FA2  3A01               	xorlw	1
 12088  0FA3  1D03               	skipz
 12089  0FA4  2FF6               	goto	l5599
 12090                           
 12091                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 12092  0FA5  3005               	movlw	5
 12093  0FA6  00DB               	movwf	??_setDelayOff_GO
 12094  0FA7  085B               	movf	??_setDelayOff_GO,w
 12095  0FA8  00DD               	movwf	setDelayOff_GO@i
 12096  0FA9  01DE               	clrf	setDelayOff_GO@j
 12097  0FAA  01DF               	clrf	setDelayOff_GO@k
 12098                           
 12099                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 12100  0FAB  300F               	movlw	15
 12101  0FAC  055A               	andwf	setDelayOff_GO@value,w
 12102  0FAD  00DB               	movwf	??_setDelayOff_GO
 12103  0FAE  085B               	movf	??_setDelayOff_GO,w
 12104  0FAF  3A05               	xorlw	5
 12105  0FB0  1903               	skipnz
 12106  0FB1  2FB6               	goto	l5585
 12107  0FB2  085A               	movf	setDelayOff_GO@value,w
 12108  0FB3  390F               	andlw	15
 12109  0FB4  1D03               	btfss	3,2
 12110  0FB5  2FE4               	goto	l5595
 12111  0FB6                     l5585:	
 12112  0FB6  3031               	movlw	49
 12113  0FB7  025A               	subwf	setDelayOff_GO@value,w
 12114  0FB8  1803               	skipnc
 12115  0FB9  2FE4               	goto	l5595
 12116                           
 12117                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 12118  0FBA  085A               	movf	setDelayOff_GO@value,w
 12119  0FBB  390F               	andlw	15
 12120  0FBC  00DB               	movwf	??_setDelayOff_GO
 12121  0FBD  085B               	movf	??_setDelayOff_GO,w
 12122  0FBE  00DE               	movwf	setDelayOff_GO@j
 12123                           
 12124                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 12125  0FBF  085A               	movf	setDelayOff_GO@value,w
 12126  0FC0  00DB               	movwf	??_setDelayOff_GO
 12127  0FC1  3004               	movlw	4
 12128  0FC2                     u4485:	
 12129  0FC2  36DB               	lsrf	??_setDelayOff_GO,f
 12130  0FC3  0B89               	decfsz	9,f
 12131  0FC4  2FC2               	goto	u4485
 12132  0FC5  085B               	movf	??_setDelayOff_GO,w
 12133  0FC6  390F               	andlw	15
 12134  0FC7  00DC               	movwf	??_setDelayOff_GO+1
 12135  0FC8  085C               	movf	??_setDelayOff_GO+1,w
 12136  0FC9  00DF               	movwf	setDelayOff_GO@k
 12137                           
 12138                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 12139  0FCA  300A               	movlw	10
 12140  0FCB  00DB               	movwf	??_setDelayOff_GO
 12141  0FCC  085B               	movf	??_setDelayOff_GO,w
 12142  0FCD  00F2               	movwf	___bmul@multiplicand
 12143  0FCE  085F               	movf	setDelayOff_GO@k,w
 12144  0FCF  3193  2317  318F   	fcall	___bmul
 12145  0FD2  0020               	movlb	0	; select bank0
 12146  0FD3  075E               	addwf	setDelayOff_GO@j,w
 12147  0FD4  00DC               	movwf	??_setDelayOff_GO+1
 12148  0FD5  0A69               	incf	_DelayOff,w
 12149  0FD6  0086               	movwf	6
 12150  0FD7  3001               	movlw	1	; select bank2/3
 12151  0FD8  0087               	movwf	7
 12152  0FD9  085C               	movf	??_setDelayOff_GO+1,w
 12153  0FDA  0081               	movwf	1
 12154                           
 12155                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 12156  0FDB  085A               	movf	setDelayOff_GO@value,w
 12157  0FDC  00DB               	movwf	??_setDelayOff_GO
 12158  0FDD  085B               	movf	??_setDelayOff_GO,w
 12159  0FDE  00D6               	movwf	setProductData@value
 12160  0FDF  0860               	movf	setDelayOff_GO@sw,w
 12161  0FE0  3E1A               	addlw	26
 12162  0FE1  3191  21EF         	fcall	_setProductData
 12163                           
 12164                           ;DelayOff_B1.c: 103: } else {
 12165  0FE3  0008               	return
 12166  0FE4                     l5595:	
 12167                           
 12168                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 12169  0FE4  3005               	movlw	5
 12170  0FE5  0020               	movlb	0	; select bank0
 12171  0FE6  00DB               	movwf	??_setDelayOff_GO
 12172  0FE7  0A69               	incf	_DelayOff,w
 12173  0FE8  0086               	movwf	6
 12174  0FE9  3001               	movlw	1	; select bank2/3
 12175  0FEA  0087               	movwf	7
 12176  0FEB  085B               	movf	??_setDelayOff_GO,w
 12177  0FEC  0081               	movwf	1
 12178                           
 12179                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 12180  0FED  3005               	movlw	5
 12181  0FEE  00DB               	movwf	??_setDelayOff_GO
 12182  0FEF  085B               	movf	??_setDelayOff_GO,w
 12183  0FF0  00D6               	movwf	setProductData@value
 12184  0FF1  0860               	movf	setDelayOff_GO@sw,w
 12185  0FF2  3E1A               	addlw	26
 12186  0FF3  3191  21EF         	fcall	_setProductData
 12187                           
 12188                           ;DelayOff_B1.c: 106: }
 12189                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 12190  0FF5  0008               	return
 12191  0FF6                     l5599:	
 12192  0FF6  0020               	movlb	0	; select bank0
 12193  0FF7  08D9               	movf	setDelayOff_GO@command,f
 12194  0FF8  1D03               	skipz
 12195  0FF9  0008               	return
 12196                           
 12197                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 12198  0FFA  01D6               	clrf	setProductData@value
 12199  0FFB  0860               	movf	setDelayOff_GO@sw,w
 12200  0FFC  3E1A               	addlw	26
 12201  0FFD  3191  21EF         	fcall	_setProductData
 12202  0FFF  0008               	return
 12203  1000                     __end_of_setDelayOff_GO:	
 12204                           
 12205                           	psect	text83
 12206  1317                     __ptext83:	
 12207 ;; *************** function ___bmul *****************
 12208 ;; Defined at:
 12209 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 12210 ;; Parameters:    Size  Location     Type
 12211 ;;  multiplier      1    wreg     unsigned char 
 12212 ;;  multiplicand    1    2[COMMON] unsigned char 
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;  multiplier      1    5[COMMON] unsigned char 
 12215 ;;  product         1    4[COMMON] unsigned char 
 12216 ;; Return value:  Size  Location     Type
 12217 ;;                  1    wreg      unsigned char 
 12218 ;; Registers used:
 12219 ;;		wreg, status,2, status,0
 12220 ;; Tracked objects:
 12221 ;;		On entry : 0/0
 12222 ;;		On exit  : 0/0
 12223 ;;		Unchanged: 0/0
 12224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12225 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12227 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12228 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12229 ;;Total ram usage:        4 bytes
 12230 ;; Hardware stack levels used:    1
 12231 ;; Hardware stack levels required when called:    3
 12232 ;; This function calls:
 12233 ;;		Nothing
 12234 ;; This function is called by:
 12235 ;;		_setDelayOff_GO
 12236 ;;		_DelayTimejudge
 12237 ;; This function uses a non-reentrant model
 12238 ;;
 12239                           
 12240                           
 12241                           ;psect for function ___bmul
 12242  1317                     ___bmul:	
 12243                           
 12244                           ;incstack = 0
 12245                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 12246                           ;___bmul@multiplier stored from wreg
 12247  1317  00F5               	movwf	___bmul@multiplier
 12248  1318  01F4               	clrf	___bmul@product
 12249  1319                     l5267:	
 12250  1319  1C75               	btfss	___bmul@multiplier,0
 12251  131A  2B1F               	goto	l5271
 12252  131B  0872               	movf	___bmul@multiplicand,w
 12253  131C  00F3               	movwf	??___bmul
 12254  131D  0873               	movf	??___bmul,w
 12255  131E  07F4               	addwf	___bmul@product,f
 12256  131F                     l5271:	
 12257  131F  1003               	clrc
 12258  1320  0DF2               	rlf	___bmul@multiplicand,f
 12259  1321  1003               	clrc
 12260  1322  0CF5               	rrf	___bmul@multiplier,f
 12261  1323  08F5               	movf	___bmul@multiplier,f
 12262  1324  1D03               	skipz
 12263  1325  2B19               	goto	l5267
 12264  1326  0874               	movf	___bmul@product,w
 12265  1327  0008               	return
 12266  1328                     __end_of___bmul:	
 12267                           
 12268                           	psect	text84
 12269  13B9                     __ptext84:	
 12270 ;; *************** function _setCmd_Status *****************
 12271 ;; Defined at:
 12272 ;;		line 656 in file "../src/main_B1.c"
 12273 ;; Parameters:    Size  Location     Type
 12274 ;;  number          1    wreg     unsigned char 
 12275 ;;  cmd             1    2[COMMON] unsigned char 
 12276 ;; Auto vars:     Size  Location     Type
 12277 ;;  number          1    4[COMMON] unsigned char 
 12278 ;; Return value:  Size  Location     Type
 12279 ;;		None               void
 12280 ;; Registers used:
 12281 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12282 ;; Tracked objects:
 12283 ;;		On entry : 0/0
 12284 ;;		On exit  : 0/0
 12285 ;;		Unchanged: 0/0
 12286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12287 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;Total ram usage:        3 bytes
 12292 ;; Hardware stack levels used:    1
 12293 ;; Hardware stack levels required when called:    3
 12294 ;; This function calls:
 12295 ;;		Nothing
 12296 ;; This function is called by:
 12297 ;;		_setDimmerLights_OnOff
 12298 ;;		_setControl_Lights_Table
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           
 12303                           ;psect for function _setCmd_Status
 12304  13B9                     _setCmd_Status:	
 12305                           
 12306                           ;incstack = 0
 12307                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 12308                           ;setCmd_Status@number stored from wreg
 12309  13B9  00F4               	movwf	setCmd_Status@number
 12310                           
 12311                           ;main_B1.c: 657: switch (number) {
 12312  13BA  2BC8               	goto	l5731
 12313  13BB                     l5727:	
 12314                           ;main_B1.c: 658: case 1:
 12315                           
 12316                           
 12317                           ;main_B1.c: 659: Cmd.all_off = cmd == 1 ? 1 : 0;
 12318  13BB  0872               	movf	setCmd_Status@cmd,w
 12319  13BC  3A01               	xorlw	1
 12320  13BD  3000               	movlw	0
 12321  13BE  1903               	skipnz
 12322  13BF  3001               	movlw	1
 12323  13C0  00F3               	movwf	??_setCmd_Status
 12324  13C1  0020               	movlb	0	; select bank0
 12325  13C2  0868               	movf	_Cmd,w
 12326  13C3  0673               	xorwf	??_setCmd_Status,w
 12327  13C4  39FE               	andlw	-2
 12328  13C5  0673               	xorwf	??_setCmd_Status,w
 12329  13C6  00E8               	movwf	_Cmd
 12330                           
 12331                           ;main_B1.c: 661: }
 12332                           
 12333                           ;main_B1.c: 660: break;
 12334  13C7  0008               	return
 12335  13C8                     l5731:	
 12336  13C8  0874               	movf	setCmd_Status@number,w
 12337                           
 12338                           ; Switch size 1, requested type "space"
 12339                           ; Number of cases is 1, Range of values is 1 to 1
 12340                           ; switch strategies available:
 12341                           ; Name         Instructions Cycles
 12342                           ; simple_byte            4     3 (average)
 12343                           ; direct_byte           11     9 (fixed)
 12344                           ; jumptable            263     9 (fixed)
 12345                           ;	Chosen strategy is simple_byte
 12346  13C9  3A01               	xorlw	1	; case 1
 12347  13CA  1903               	skipnz
 12348  13CB  2BBB               	goto	l5727
 12349  13CC  2BCD               	goto	l2502
 12350  13CD                     l2502:	
 12351  13CD  0008               	return
 12352  13CE                     __end_of_setCmd_Status:	
 12353                           
 12354                           	psect	text85
 12355  116F                     __ptext85:	
 12356 ;; *************** function _getMain_All_LightsStatus *****************
 12357 ;; Defined at:
 12358 ;;		line 378 in file "../src/main_B1.c"
 12359 ;; Parameters:    Size  Location     Type
 12360 ;;		None
 12361 ;; Auto vars:     Size  Location     Type
 12362 ;;  status          1    2[COMMON] unsigned char 
 12363 ;; Return value:  Size  Location     Type
 12364 ;;                  1    wreg      unsigned char 
 12365 ;; Registers used:
 12366 ;;		wreg, status,2
 12367 ;; Tracked objects:
 12368 ;;		On entry : 0/0
 12369 ;;		On exit  : 0/0
 12370 ;;		Unchanged: 0/0
 12371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12376 ;;Total ram usage:        1 bytes
 12377 ;; Hardware stack levels used:    1
 12378 ;; Hardware stack levels required when called:    3
 12379 ;; This function calls:
 12380 ;;		Nothing
 12381 ;; This function is called by:
 12382 ;;		_setDimmerLights_Main
 12383 ;;		_setDimmerLights_OnOff
 12384 ;;		_Flash_Memory_Main
 12385 ;;		_setControl_Lights_Table
 12386 ;; This function uses a non-reentrant model
 12387 ;;
 12388                           
 12389                           
 12390                           ;psect for function _getMain_All_LightsStatus
 12391  116F                     _getMain_All_LightsStatus:	
 12392                           
 12393                           ;main_B1.c: 379: char status = 0;
 12394                           
 12395                           ;incstack = 0
 12396                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2]
 12397  116F  01F2               	clrf	getMain_All_LightsStatus@status
 12398                           
 12399                           ;main_B1.c: 386: status = DimmerLights1.Status == 1 ? 1 : 0;
 12400  1170  3000               	movlw	0
 12401  1171  0022               	movlb	2	; select bank2
 12402  1172  1854               	btfsc	(_DimmerLights1^(0+256)+1),0
 12403  1173  3001               	movlw	1
 12404  1174  00F2               	movwf	getMain_All_LightsStatus@status
 12405                           
 12406                           ;main_B1.c: 425: return status;
 12407  1175  0872               	movf	getMain_All_LightsStatus@status,w
 12408  1176  0008               	return
 12409  1177                     __end_of_getMain_All_LightsStatus:	
 12410                           
 12411                           	psect	text86
 12412  127A                     __ptext86:	
 12413 ;; *************** function _getDelayOff_GO *****************
 12414 ;; Defined at:
 12415 ;;		line 114 in file "../src/DelayOff_B1.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;  sw              1    wreg     unsigned char 
 12418 ;; Auto vars:     Size  Location     Type
 12419 ;;  sw              1    4[COMMON] unsigned char 
 12420 ;;  go              1    5[COMMON] unsigned char 
 12421 ;; Return value:  Size  Location     Type
 12422 ;;                  1    wreg      unsigned char 
 12423 ;; Registers used:
 12424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12425 ;; Tracked objects:
 12426 ;;		On entry : 0/0
 12427 ;;		On exit  : 0/0
 12428 ;;		Unchanged: 0/0
 12429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12431 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;Total ram usage:        2 bytes
 12435 ;; Hardware stack levels used:    1
 12436 ;; Hardware stack levels required when called:    4
 12437 ;; This function calls:
 12438 ;;		_DelayOffPointSelect
 12439 ;; This function is called by:
 12440 ;;		_setDimmerLights_OnOff
 12441 ;; This function uses a non-reentrant model
 12442 ;;
 12443                           
 12444                           
 12445                           ;psect for function _getDelayOff_GO
 12446  127A                     _getDelayOff_GO:	
 12447                           
 12448                           ;incstack = 0
 12449                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12450                           ;getDelayOff_GO@sw stored from wreg
 12451  127A  00F4               	movwf	getDelayOff_GO@sw
 12452                           
 12453                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 12454  127B  0874               	movf	getDelayOff_GO@sw,w
 12455  127C  3191  21A2         	fcall	_DelayOffPointSelect
 12456                           
 12457                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 12458  127E  0020               	movlb	0	; select bank0
 12459  127F  0869               	movf	_DelayOff,w
 12460  1280  0086               	movwf	6
 12461  1281  3001               	movlw	1	; select bank2/3
 12462  1282  0087               	movwf	7
 12463  1283  3000               	movlw	0
 12464  1284  1881               	btfsc	1,1
 12465  1285  3001               	movlw	1
 12466  1286  00F5               	movwf	getDelayOff_GO@go
 12467                           
 12468                           ;DelayOff_B1.c: 117: return go;
 12469  1287  0875               	movf	getDelayOff_GO@go,w
 12470  1288  0008               	return
 12471  1289                     __end_of_getDelayOff_GO:	
 12472                           
 12473                           	psect	text87
 12474  12D7                     __ptext87:	
 12475 ;; *************** function _getCmd_Status *****************
 12476 ;; Defined at:
 12477 ;;		line 664 in file "../src/main_B1.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  number          1    wreg     unsigned char 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;  number          1    2[COMMON] unsigned char 
 12482 ;;  cmd             1    3[COMMON] unsigned char 
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  1    wreg      unsigned char 
 12485 ;; Registers used:
 12486 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12493 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;Total ram usage:        2 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    3
 12499 ;; This function calls:
 12500 ;;		Nothing
 12501 ;; This function is called by:
 12502 ;;		_setDimmerLights_OnOff
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           
 12507                           ;psect for function _getCmd_Status
 12508  12D7                     _getCmd_Status:	
 12509                           
 12510                           ;incstack = 0
 12511                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 12512                           ;getCmd_Status@number stored from wreg
 12513  12D7  00F2               	movwf	getCmd_Status@number
 12514                           
 12515                           ;main_B1.c: 665: char cmd = 0;
 12516  12D8  01F3               	clrf	getCmd_Status@cmd
 12517                           
 12518                           ;main_B1.c: 666: switch (number) {
 12519  12D9  2AE0               	goto	l6005
 12520  12DA                     l6001:	
 12521                           ;main_B1.c: 667: case 1:
 12522                           
 12523                           
 12524                           ;main_B1.c: 668: cmd = Cmd.all_off == 1 ? 1 : 0;
 12525  12DA  3000               	movlw	0
 12526  12DB  0020               	movlb	0	; select bank0
 12527  12DC  1868               	btfsc	_Cmd,0
 12528  12DD  3001               	movlw	1
 12529  12DE  00F3               	movwf	getCmd_Status@cmd
 12530                           
 12531                           ;main_B1.c: 670: }
 12532                           
 12533                           ;main_B1.c: 669: break;
 12534  12DF  2AE5               	goto	l6007
 12535  12E0                     l6005:	
 12536  12E0  0872               	movf	getCmd_Status@number,w
 12537                           
 12538                           ; Switch size 1, requested type "space"
 12539                           ; Number of cases is 1, Range of values is 1 to 1
 12540                           ; switch strategies available:
 12541                           ; Name         Instructions Cycles
 12542                           ; simple_byte            4     3 (average)
 12543                           ; direct_byte           11     9 (fixed)
 12544                           ; jumptable            263     9 (fixed)
 12545                           ;	Chosen strategy is simple_byte
 12546  12E1  3A01               	xorlw	1	; case 1
 12547  12E2  1903               	skipnz
 12548  12E3  2ADA               	goto	l6001
 12549  12E4  2AE5               	goto	l6007
 12550  12E5                     l6007:	
 12551                           
 12552                           ;main_B1.c: 671: return cmd;
 12553  12E5  0873               	movf	getCmd_Status@cmd,w
 12554  12E6  0008               	return
 12555  12E7                     __end_of_getCmd_Status:	
 12556                           
 12557                           	psect	text88
 12558  0A44                     __ptext88:	
 12559 ;; *************** function _setDimmerLights_Dimming *****************
 12560 ;; Defined at:
 12561 ;;		line 1142 in file "../src/Dimmer_B1.c"
 12562 ;; Parameters:    Size  Location     Type
 12563 ;;  lights          1    wreg     unsigned char 
 12564 ;;  status          1   62[BANK0 ] unsigned char 
 12565 ;; Auto vars:     Size  Location     Type
 12566 ;;  lights          1   65[BANK0 ] unsigned char 
 12567 ;;  value           1   64[BANK0 ] unsigned char 
 12568 ;; Return value:  Size  Location     Type
 12569 ;;		None               void
 12570 ;; Registers used:
 12571 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12572 ;; Tracked objects:
 12573 ;;		On entry : 0/0
 12574 ;;		On exit  : 0/0
 12575 ;;		Unchanged: 0/0
 12576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12579 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12581 ;;Total ram usage:        4 bytes
 12582 ;; Hardware stack levels used:    1
 12583 ;; Hardware stack levels required when called:    6
 12584 ;; This function calls:
 12585 ;;		_getDimmerIntr_DimmingValue
 12586 ;;		_getDimmerLights_ValueToPercent
 12587 ;;		_setBuz
 12588 ;;		_setDimmerIntr_Dimming_Sw
 12589 ;;		_setDimmerIntr_MaxmumValue
 12590 ;;		_setMemory_Modify
 12591 ;;		_setProductData
 12592 ;;		_setRF_DimmerLights
 12593 ;;		_setRF_TransceiveGO
 12594 ;;		_setTxData
 12595 ;; This function is called by:
 12596 ;;		_setDimmerLights_Main
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _setDimmerLights_Dimming
 12602  0A44                     _setDimmerLights_Dimming:	
 12603                           
 12604                           ;incstack = 0
 12605                           ; Regs used in _setDimmerLights_Dimming: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12606                           ;setDimmerLights_Dimming@lights stored from wreg
 12607  0A44  0020               	movlb	0	; select bank0
 12608  0A45  00E1               	movwf	setDimmerLights_Dimming@lights
 12609                           
 12610                           ;Dimmer_B1.c: 1143: setDimmerIntr_Dimming_Sw(lights, status);
 12611  0A46  085E               	movf	setDimmerLights_Dimming@status,w
 12612  0A47  00DF               	movwf	??_setDimmerLights_Dimming
 12613  0A48  085F               	movf	??_setDimmerLights_Dimming,w
 12614  0A49  00F2               	movwf	setDimmerIntr_Dimming_Sw@command
 12615  0A4A  0861               	movf	setDimmerLights_Dimming@lights,w
 12616  0A4B  3193  237E  318A   	fcall	_setDimmerIntr_Dimming_Sw
 12617                           
 12618                           ;Dimmer_B1.c: 1144: if (status == 1) {
 12619  0A4E  0020               	movlb	0	; select bank0
 12620  0A4F  085E               	movf	setDimmerLights_Dimming@status,w
 12621  0A50  3A01               	xorlw	1
 12622  0A51  1D03               	skipz
 12623  0A52  2A60               	goto	l9285
 12624                           
 12625                           ;Dimmer_B1.c: 1146: setRF_TransceiveGO(0);
 12626  0A53  3000               	movlw	0
 12627  0A54  3192  22C7  318A   	fcall	_setRF_TransceiveGO
 12628                           
 12629                           ;Dimmer_B1.c: 1148: setBuz(1, 100);
 12630  0A57  3064               	movlw	100
 12631  0A58  0020               	movlb	0	; select bank0
 12632  0A59  00A4               	movwf	setBuz@time
 12633  0A5A  3000               	movlw	0
 12634  0A5B  00A5               	movwf	setBuz@time+1
 12635  0A5C  3001               	movlw	1
 12636  0A5D  318A  22E0         	fcall	_setBuz
 12637                           
 12638                           ;Dimmer_B1.c: 1149: } else if (status == 0) {
 12639  0A5F  0008               	return
 12640  0A60                     l9285:	
 12641  0A60  0020               	movlb	0	; select bank0
 12642  0A61  08DE               	movf	setDimmerLights_Dimming@status,f
 12643  0A62  1D03               	skipz
 12644  0A63  0008               	return
 12645                           
 12646                           ;Dimmer_B1.c: 1155: char value = getDimmerIntr_DimmingValue(lights);
 12647  0A64  0861               	movf	setDimmerLights_Dimming@lights,w
 12648  0A65  3192  2250  318A   	fcall	_getDimmerIntr_DimmingValue
 12649  0A68  0020               	movlb	0	; select bank0
 12650  0A69  00DF               	movwf	??_setDimmerLights_Dimming
 12651  0A6A  085F               	movf	??_setDimmerLights_Dimming,w
 12652  0A6B  00E0               	movwf	setDimmerLights_Dimming@value
 12653                           
 12654                           ;Dimmer_B1.c: 1156: setDimmerIntr_MaxmumValue(lights, value);
 12655  0A6C  0860               	movf	setDimmerLights_Dimming@value,w
 12656  0A6D  00DF               	movwf	??_setDimmerLights_Dimming
 12657  0A6E  085F               	movf	??_setDimmerLights_Dimming,w
 12658  0A6F  00D8               	movwf	setDimmerIntr_MaxmumValue@value
 12659  0A70  0861               	movf	setDimmerLights_Dimming@lights,w
 12660  0A71  3191  21FB  318A   	fcall	_setDimmerIntr_MaxmumValue
 12661                           
 12662                           ;Dimmer_B1.c: 1157: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 12663  0A74  0020               	movlb	0	; select bank0
 12664  0A75  0860               	movf	setDimmerLights_Dimming@value,w
 12665  0A76  3189  2168  318A   	fcall	_getDimmerLights_ValueToPercent
 12666  0A79  0020               	movlb	0	; select bank0
 12667  0A7A  00DF               	movwf	??_setDimmerLights_Dimming
 12668  0A7B  085F               	movf	??_setDimmerLights_Dimming,w
 12669  0A7C  00D6               	movwf	setProductData@value
 12670  0A7D  0861               	movf	setDimmerLights_Dimming@lights,w
 12671  0A7E  3E14               	addlw	20
 12672  0A7F  3191  21EF  318A   	fcall	_setProductData
 12673                           
 12674                           ;Dimmer_B1.c: 1164: setMemory_Modify(1);
 12675  0A82  3001               	movlw	1
 12676  0A83  3192  22A7  318A   	fcall	_setMemory_Modify
 12677                           
 12678                           ;Dimmer_B1.c: 1168: setRF_DimmerLights(lights, 1);
 12679  0A86  0020               	movlb	0	; select bank0
 12680  0A87  01D9               	clrf	setRF_DimmerLights@on
 12681  0A88  0AD9               	incf	setRF_DimmerLights@on,f
 12682  0A89  0861               	movf	setDimmerLights_Dimming@lights,w
 12683  0A8A  318D  25D1  318A   	fcall	_setRF_DimmerLights
 12684                           
 12685                           ;Dimmer_B1.c: 1169: setTxData();
 12686  0A8D  3191  215A         	fcall	_setTxData
 12687  0A8F  0008               	return
 12688  0A90                     __end_of_setDimmerLights_Dimming:	
 12689                           
 12690                           	psect	text89
 12691  115A                     __ptext89:	
 12692 ;; *************** function _setTxData *****************
 12693 ;; Defined at:
 12694 ;;		line 237 in file "../src/RF_Control_B1.c"
 12695 ;; Parameters:    Size  Location     Type
 12696 ;;		None
 12697 ;; Auto vars:     Size  Location     Type
 12698 ;;  i               1    0        unsigned char 
 12699 ;; Return value:  Size  Location     Type
 12700 ;;		None               void
 12701 ;; Registers used:
 12702 ;;		status,2
 12703 ;; Tracked objects:
 12704 ;;		On entry : 0/0
 12705 ;;		On exit  : 0/0
 12706 ;;		Unchanged: 0/0
 12707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12712 ;;Total ram usage:        0 bytes
 12713 ;; Hardware stack levels used:    1
 12714 ;; Hardware stack levels required when called:    3
 12715 ;; This function calls:
 12716 ;;		Nothing
 12717 ;; This function is called by:
 12718 ;;		_setDimmerLights_OnOff
 12719 ;;		_setDimmerLights_Dimming
 12720 ;;		_getRxData
 12721 ;;		_setControl_Lights_Table
 12722 ;;		_setRFSW_Control
 12723 ;;		_setRFSW_AdjControl
 12724 ;; This function uses a non-reentrant model
 12725 ;;
 12726                           
 12727                           
 12728                           ;psect for function _setTxData
 12729  115A                     _setTxData:	
 12730                           
 12731                           ;RF_Control_B1.c: 238: char i;
 12732                           ;RF_Control_B1.c: 239: if (RF1.Enable == 1) {
 12733                           
 12734                           ;incstack = 0
 12735                           ; Regs used in _setTxData: [status,2]
 12736  115A  0021               	movlb	1	; select bank1
 12737  115B  1C30               	btfss	_RF1^(0+128),0
 12738  115C  0008               	return
 12739                           
 12740                           ;RF_Control_B1.c: 241: RF1.TransceiveGO = 1;
 12741  115D  1530               	bsf	_RF1^(0+128),2
 12742                           
 12743                           ;RF_Control_B1.c: 242: RF1.Count = 0;
 12744  115E  01B3               	clrf	(_RF1^(0+128)+3)
 12745  115F  01B4               	clrf	((_RF1+1)^(0+128)+3)
 12746  1160  0008               	return
 12747  1161                     __end_of_setTxData:	
 12748                           
 12749                           	psect	text90
 12750  12C7                     __ptext90:	
 12751 ;; *************** function _setRF_TransceiveGO *****************
 12752 ;; Defined at:
 12753 ;;		line 575 in file "../src/RF_Control_B1.c"
 12754 ;; Parameters:    Size  Location     Type
 12755 ;;  command         1    wreg     unsigned char 
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;  command         1    3[COMMON] unsigned char 
 12758 ;; Return value:  Size  Location     Type
 12759 ;;		None               void
 12760 ;; Registers used:
 12761 ;;		wreg, status,2, status,0
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;Total ram usage:        2 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    3
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_setDimmerLights_Dimming
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           
 12782                           ;psect for function _setRF_TransceiveGO
 12783  12C7                     _setRF_TransceiveGO:	
 12784                           
 12785                           ;incstack = 0
 12786                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 12787                           ;setRF_TransceiveGO@command stored from wreg
 12788  12C7  00F3               	movwf	setRF_TransceiveGO@command
 12789                           
 12790                           ;RF_Control_B1.c: 576: RF1.TransceiveGO = command == 1 ? 1 : 0;
 12791  12C8  0873               	movf	setRF_TransceiveGO@command,w
 12792  12C9  3A01               	xorlw	1
 12793  12CA  3000               	movlw	0
 12794  12CB  1903               	skipnz
 12795  12CC  3001               	movlw	1
 12796  12CD  00F2               	movwf	??_setRF_TransceiveGO
 12797  12CE  0DF2               	rlf	??_setRF_TransceiveGO,f
 12798  12CF  0DF2               	rlf	??_setRF_TransceiveGO,f
 12799  12D0  0021               	movlb	1	; select bank1
 12800  12D1  0830               	movf	_RF1^(0+128),w
 12801  12D2  0672               	xorwf	??_setRF_TransceiveGO,w
 12802  12D3  39FB               	andlw	-5
 12803  12D4  0672               	xorwf	??_setRF_TransceiveGO,w
 12804  12D5  00B0               	movwf	_RF1^(0+128)
 12805  12D6  0008               	return
 12806  12D7                     __end_of_setRF_TransceiveGO:	
 12807                           
 12808                           	psect	text91
 12809  0DD1                     __ptext91:	
 12810 ;; *************** function _setRF_DimmerLights *****************
 12811 ;; Defined at:
 12812 ;;		line 550 in file "../src/RF_Control_B1.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  lights          1    wreg     unsigned char 
 12815 ;;  on              1   57[BANK0 ] unsigned char 
 12816 ;; Auto vars:     Size  Location     Type
 12817 ;;  lights          1   61[BANK0 ] unsigned char 
 12818 ;;  status          1   60[BANK0 ] unsigned char 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;		None               void
 12821 ;; Registers used:
 12822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12828 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;Total ram usage:        5 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    4
 12835 ;; This function calls:
 12836 ;;		_setProductData
 12837 ;; This function is called by:
 12838 ;;		_setDimmerLights_OnOff
 12839 ;;		_setDimmerLights_Dimming
 12840 ;;		_setRFSW_Control
 12841 ;; This function uses a non-reentrant model
 12842 ;;
 12843                           
 12844                           
 12845                           ;psect for function _setRF_DimmerLights
 12846  0DD1                     _setRF_DimmerLights:	
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _setRF_DimmerLights: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12850                           ;setRF_DimmerLights@lights stored from wreg
 12851  0DD1  0020               	movlb	0	; select bank0
 12852  0DD2  00DD               	movwf	setRF_DimmerLights@lights
 12853                           
 12854                           ;RF_Control_B1.c: 551: char status = 1;
 12855  0DD3  01DC               	clrf	setRF_DimmerLights@status
 12856  0DD4  0ADC               	incf	setRF_DimmerLights@status,f
 12857                           
 12858                           ;RF_Control_B1.c: 552: switch (lights) {
 12859  0DD5  2DDC               	goto	l5631
 12860  0DD6                     l5625:	
 12861                           ;RF_Control_B1.c: 553: case 2:
 12862                           
 12863  0DD6  2DD9               	goto	L5
 12864  0DD7                     l5627:	
 12865                           ;RF_Control_B1.c: 556: case 3:
 12866                           
 12867                           ;RF_Control_B1.c: 555: break;
 12868                           
 12869                           ;RF_Control_B1.c: 554: status <<= 1;
 12870                           
 12871                           
 12872                           ;RF_Control_B1.c: 557: status <<= 2;
 12873  0DD7  1003               	clrc
 12874  0DD8  0DDC               	rlf	setRF_DimmerLights@status,f
 12875  0DD9                     L5:	
 12876  0DD9  1003               	clrc
 12877  0DDA  0DDC               	rlf	setRF_DimmerLights@status,f
 12878                           
 12879                           ;RF_Control_B1.c: 559: }
 12880                           
 12881                           ;RF_Control_B1.c: 558: break;
 12882  0DDB  2DE4               	goto	l1918
 12883  0DDC                     l5631:	
 12884  0DDC  085D               	movf	setRF_DimmerLights@lights,w
 12885                           
 12886                           ; Switch size 1, requested type "space"
 12887                           ; Number of cases is 2, Range of values is 2 to 3
 12888                           ; switch strategies available:
 12889                           ; Name         Instructions Cycles
 12890                           ; simple_byte            7     4 (average)
 12891                           ; direct_byte           13     9 (fixed)
 12892                           ; jumptable            263     9 (fixed)
 12893                           ;	Chosen strategy is simple_byte
 12894  0DDD  3A02               	xorlw	2	; case 2
 12895  0DDE  1903               	skipnz
 12896  0DDF  2DD6               	goto	l5625
 12897  0DE0  3A01               	xorlw	1	; case 3
 12898  0DE1  1903               	skipnz
 12899  0DE2  2DD7               	goto	l5627
 12900  0DE3  2DE4               	goto	l1918
 12901  0DE4                     l1918:	
 12902                           
 12903                           ;RF_Control_B1.c: 560: status = ~status;
 12904  0DE4  09DC               	comf	setRF_DimmerLights@status,f
 12905                           
 12906                           ;RF_Control_B1.c: 562: setProductData(11, lights);
 12907  0DE5  085D               	movf	setRF_DimmerLights@lights,w
 12908  0DE6  00DA               	movwf	??_setRF_DimmerLights
 12909  0DE7  085A               	movf	??_setRF_DimmerLights,w
 12910  0DE8  00D6               	movwf	setProductData@value
 12911  0DE9  300B               	movlw	11
 12912  0DEA  3191  21EF  318D   	fcall	_setProductData
 12913                           
 12914                           ;RF_Control_B1.c: 563: setProductData(17, product->Data[26 + lights]);
 12915  0DED  0020               	movlb	0	; select bank0
 12916  0DEE  085D               	movf	setRF_DimmerLights@lights,w
 12917  0DEF  3E1A               	addlw	26
 12918  0DF0  076E               	addwf	_product,w
 12919  0DF1  00DA               	movwf	??_setRF_DimmerLights
 12920  0DF2  085A               	movf	??_setRF_DimmerLights,w
 12921  0DF3  0086               	movwf	6
 12922  0DF4  3001               	movlw	1	; select bank2/3
 12923  0DF5  0087               	movwf	7
 12924  0DF6  0801               	movf	1,w
 12925  0DF7  00DB               	movwf	??_setRF_DimmerLights+1
 12926  0DF8  085B               	movf	??_setRF_DimmerLights+1,w
 12927  0DF9  00D6               	movwf	setProductData@value
 12928  0DFA  3011               	movlw	17
 12929  0DFB  3191  21EF  318D   	fcall	_setProductData
 12930                           
 12931                           ;RF_Control_B1.c: 564: if (on == 1) {
 12932  0DFE  0020               	movlb	0	; select bank0
 12933  0DFF  0859               	movf	setRF_DimmerLights@on,w
 12934  0E00  3A01               	xorlw	1
 12935  0E01  1D03               	skipz
 12936  0E02  2E22               	goto	l5639
 12937                           
 12938                           ;RF_Control_B1.c: 565: setProductData(9, product->Data[20 + lights]);
 12939  0E03  085D               	movf	setRF_DimmerLights@lights,w
 12940  0E04  3E14               	addlw	20
 12941  0E05  076E               	addwf	_product,w
 12942  0E06  00DA               	movwf	??_setRF_DimmerLights
 12943  0E07  085A               	movf	??_setRF_DimmerLights,w
 12944  0E08  0086               	movwf	6
 12945  0E09  3001               	movlw	1	; select bank2/3
 12946  0E0A  0087               	movwf	7
 12947  0E0B  0801               	movf	1,w
 12948  0E0C  00DB               	movwf	??_setRF_DimmerLights+1
 12949  0E0D  085B               	movf	??_setRF_DimmerLights+1,w
 12950  0E0E  00D6               	movwf	setProductData@value
 12951  0E0F  3009               	movlw	9
 12952  0E10  3191  21EF  318D   	fcall	_setProductData
 12953                           
 12954                           ;RF_Control_B1.c: 566: setProductData(15, (product->Data[15] | lights));
 12955  0E13  0020               	movlb	0	; select bank0
 12956  0E14  086E               	movf	_product,w
 12957  0E15  3E0F               	addlw	15
 12958  0E16  0086               	movwf	6
 12959  0E17  3001               	movlw	1	; select bank2/3
 12960  0E18  0087               	movwf	7
 12961  0E19  0801               	movf	1,w
 12962  0E1A  045D               	iorwf	setRF_DimmerLights@lights,w
 12963  0E1B  00DA               	movwf	??_setRF_DimmerLights
 12964  0E1C  085A               	movf	??_setRF_DimmerLights,w
 12965  0E1D  00D6               	movwf	setProductData@value
 12966  0E1E  300F               	movlw	15
 12967  0E1F  3191  21EF         	fcall	_setProductData
 12968                           
 12969                           ;RF_Control_B1.c: 567: } else {
 12970  0E21  0008               	return
 12971  0E22                     l5639:	
 12972                           
 12973                           ;RF_Control_B1.c: 568: setProductData(9, 0x00);
 12974  0E22  0020               	movlb	0	; select bank0
 12975  0E23  01D6               	clrf	setProductData@value
 12976  0E24  3009               	movlw	9
 12977  0E25  3191  21EF  318D   	fcall	_setProductData
 12978                           
 12979                           ;RF_Control_B1.c: 569: setProductData(15, (product->Data[15] & status));
 12980  0E28  0020               	movlb	0	; select bank0
 12981  0E29  086E               	movf	_product,w
 12982  0E2A  3E0F               	addlw	15
 12983  0E2B  0086               	movwf	6
 12984  0E2C  3001               	movlw	1	; select bank2/3
 12985  0E2D  0087               	movwf	7
 12986  0E2E  0801               	movf	1,w
 12987  0E2F  055C               	andwf	setRF_DimmerLights@status,w
 12988  0E30  00DA               	movwf	??_setRF_DimmerLights
 12989  0E31  085A               	movf	??_setRF_DimmerLights,w
 12990  0E32  00D6               	movwf	setProductData@value
 12991  0E33  300F               	movlw	15
 12992  0E34  3191  21EF         	fcall	_setProductData
 12993  0E36  0008               	return
 12994  0E37                     __end_of_setRF_DimmerLights:	
 12995                           
 12996                           	psect	text92
 12997  11FB                     __ptext92:	
 12998 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 12999 ;; Defined at:
 13000 ;;		line 175 in file "../src/Dimmer_B1.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;  lights          1    wreg     unsigned char 
 13003 ;;  value           1   56[BANK0 ] unsigned char 
 13004 ;; Auto vars:     Size  Location     Type
 13005 ;;  lights          1   58[BANK0 ] unsigned char 
 13006 ;; Return value:  Size  Location     Type
 13007 ;;		None               void
 13008 ;; Registers used:
 13009 ;;		wreg
 13010 ;; Tracked objects:
 13011 ;;		On entry : 0/0
 13012 ;;		On exit  : 0/0
 13013 ;;		Unchanged: 0/0
 13014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13015 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13019 ;;Total ram usage:        3 bytes
 13020 ;; Hardware stack levels used:    1
 13021 ;; Hardware stack levels required when called:    3
 13022 ;; This function calls:
 13023 ;;		Nothing
 13024 ;; This function is called by:
 13025 ;;		_setDimmerLights_OnOff
 13026 ;;		_setDimmerLights_Dimming
 13027 ;;		_setRFSW_AdjControl
 13028 ;;		_DimmerLights_AssignationDimming
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           
 13033                           ;psect for function _setDimmerIntr_MaxmumValue
 13034  11FB                     _setDimmerIntr_MaxmumValue:	
 13035                           
 13036                           ;incstack = 0
 13037                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 13038                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 13039  11FB  0020               	movlb	0	; select bank0
 13040  11FC  00DA               	movwf	setDimmerIntr_MaxmumValue@lights
 13041                           
 13042                           ;Dimmer_B1.c: 177: if (lights == 1) {
 13043  11FD  085A               	movf	setDimmerIntr_MaxmumValue@lights,w
 13044  11FE  3A01               	xorlw	1
 13045  11FF  1D03               	skipz
 13046  1200  0008               	return
 13047                           
 13048                           ;Dimmer_B1.c: 178: DimmerIntr1.MaxmumValue = value;
 13049  1201  0858               	movf	setDimmerIntr_MaxmumValue@value,w
 13050  1202  00D9               	movwf	??_setDimmerIntr_MaxmumValue
 13051  1203  0859               	movf	??_setDimmerIntr_MaxmumValue,w
 13052  1204  0021               	movlb	1	; select bank1
 13053  1205  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 13054  1206  0008               	return
 13055  1207                     __end_of_setDimmerIntr_MaxmumValue:	
 13056                           
 13057                           	psect	text93
 13058  137E                     __ptext93:	
 13059 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 13060 ;; Defined at:
 13061 ;;		line 251 in file "../src/Dimmer_B1.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;  lights          1    wreg     unsigned char 
 13064 ;;  command         1    2[COMMON] unsigned char 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;  lights          1    4[COMMON] unsigned char 
 13067 ;; Return value:  Size  Location     Type
 13068 ;;		None               void
 13069 ;; Registers used:
 13070 ;;		wreg, status,2, status,0
 13071 ;; Tracked objects:
 13072 ;;		On entry : 0/0
 13073 ;;		On exit  : 0/0
 13074 ;;		Unchanged: 0/0
 13075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13076 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13078 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13079 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;Total ram usage:        3 bytes
 13081 ;; Hardware stack levels used:    1
 13082 ;; Hardware stack levels required when called:    3
 13083 ;; This function calls:
 13084 ;;		Nothing
 13085 ;; This function is called by:
 13086 ;;		_setDimmerLights_Dimming
 13087 ;;		_setDimmerLights_DimmingClose
 13088 ;; This function uses a non-reentrant model
 13089 ;;
 13090                           
 13091                           
 13092                           ;psect for function _setDimmerIntr_Dimming_Sw
 13093  137E                     _setDimmerIntr_Dimming_Sw:	
 13094                           
 13095                           ;incstack = 0
 13096                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 13097                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 13098  137E  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 13099                           
 13100                           ;Dimmer_B1.c: 253: if (lights == 1) {
 13101  137F  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 13102  1380  3A01               	xorlw	1
 13103  1381  1D03               	skipz
 13104  1382  0008               	return
 13105                           
 13106                           ;Dimmer_B1.c: 254: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 13107  1383  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 13108  1384  3A01               	xorlw	1
 13109  1385  3000               	movlw	0
 13110  1386  1903               	skipnz
 13111  1387  3001               	movlw	1
 13112  1388  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 13113  1389  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 13114  138A  0021               	movlb	1	; select bank1
 13115  138B  0820               	movf	_DimmerIntr1^(0+128),w
 13116  138C  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 13117  138D  39EF               	andlw	-17
 13118  138E  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 13119  138F  00A0               	movwf	_DimmerIntr1^(0+128)
 13120  1390  0008               	return
 13121  1391                     __end_of_setDimmerIntr_Dimming_Sw:	
 13122                           
 13123                           	psect	text94
 13124  1250                     __ptext94:	
 13125 ;; *************** function _getDimmerIntr_DimmingValue *****************
 13126 ;; Defined at:
 13127 ;;		line 155 in file "../src/Dimmer_B1.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;  lights          1    wreg     unsigned char 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;  lights          1    3[COMMON] unsigned char 
 13132 ;;  value           1    4[COMMON] unsigned char 
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  1    wreg      unsigned char 
 13135 ;; Registers used:
 13136 ;;		wreg, status,2
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13144 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13145 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13146 ;;Total ram usage:        3 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    3
 13149 ;; This function calls:
 13150 ;;		Nothing
 13151 ;; This function is called by:
 13152 ;;		_setDimmerLights_Dimming
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           
 13157                           ;psect for function _getDimmerIntr_DimmingValue
 13158  1250                     _getDimmerIntr_DimmingValue:	
 13159                           
 13160                           ;incstack = 0
 13161                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 13162                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 13163  1250  00F3               	movwf	getDimmerIntr_DimmingValue@lights
 13164                           
 13165                           ;Dimmer_B1.c: 156: char value = 0;
 13166  1251  01F4               	clrf	getDimmerIntr_DimmingValue@value
 13167                           
 13168                           ;Dimmer_B1.c: 158: if (lights == 1) {
 13169  1252  0873               	movf	getDimmerIntr_DimmingValue@lights,w
 13170  1253  3A01               	xorlw	1
 13171  1254  1D03               	skipz
 13172  1255  2A5B               	goto	l700
 13173                           
 13174                           ;Dimmer_B1.c: 159: value = DimmerIntr1.DimmingValue;
 13175  1256  0021               	movlb	1	; select bank1
 13176  1257  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13177  1258  00F2               	movwf	??_getDimmerIntr_DimmingValue
 13178  1259  0872               	movf	??_getDimmerIntr_DimmingValue,w
 13179  125A  00F4               	movwf	getDimmerIntr_DimmingValue@value
 13180  125B                     l700:	
 13181                           
 13182                           ;Dimmer_B1.c: 160: }
 13183                           ;Dimmer_B1.c: 172: return value;
 13184  125B  0874               	movf	getDimmerIntr_DimmingValue@value,w
 13185  125C  0008               	return
 13186  125D                     __end_of_getDimmerIntr_DimmingValue:	
 13187                           
 13188                           	psect	text95
 13189  110C                     __ptext95:	
 13190 ;; *************** function _getDimmerLights_Allow_Condition *****************
 13191 ;; Defined at:
 13192 ;;		line 1175 in file "../src/Dimmer_B1.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;  lights          1    wreg     unsigned char 
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;  lights          1    0[COMMON] unsigned char 
 13197 ;;  allow           1    2[COMMON] unsigned char 
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      unsigned char 
 13200 ;; Registers used:
 13201 ;;		wreg, status,2
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;Total ram usage:        1 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    3
 13214 ;; This function calls:
 13215 ;;		Nothing
 13216 ;; This function is called by:
 13217 ;;		_setDimmerLights_Main
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _getDimmerLights_Allow_Condition
 13223  110C                     _getDimmerLights_Allow_Condition:	
 13224                           
 13225                           ;Dimmer_B1.c: 1176: char allow = 0;
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2]
 13229  110C  01F2               	clrf	getDimmerLights_Allow_Condition@allow
 13230                           
 13231                           ;Dimmer_B1.c: 1210: return allow;
 13232  110D  0872               	movf	getDimmerLights_Allow_Condition@allow,w
 13233  110E  0008               	return
 13234  110F                     __end_of_getDimmerLights_Allow_Condition:	
 13235                           
 13236                           	psect	text96
 13237  09F8                     __ptext96:	
 13238 ;; *************** function _DimmerLights_DimmingFunction *****************
 13239 ;; Defined at:
 13240 ;;		line 2127 in file "../src/Dimmer_B1.c"
 13241 ;; Parameters:    Size  Location     Type
 13242 ;;  lights          1    wreg     unsigned char 
 13243 ;; Auto vars:     Size  Location     Type
 13244 ;;  lights          1    5[COMMON] unsigned char 
 13245 ;; Return value:  Size  Location     Type
 13246 ;;		None               void
 13247 ;; Registers used:
 13248 ;;		wreg, status,2, status,0, pclath, cstack
 13249 ;; Tracked objects:
 13250 ;;		On entry : 0/0
 13251 ;;		On exit  : 0/0
 13252 ;;		Unchanged: 0/0
 13253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13255 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13256 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13257 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13258 ;;Total ram usage:        2 bytes
 13259 ;; Hardware stack levels used:    1
 13260 ;; Hardware stack levels required when called:    4
 13261 ;; This function calls:
 13262 ;;		_DimmerIntr_ValueCalculate
 13263 ;; This function is called by:
 13264 ;;		_DimmerLights_Main
 13265 ;; This function uses a non-reentrant model
 13266 ;;
 13267                           
 13268                           
 13269                           ;psect for function _DimmerLights_DimmingFunction
 13270  09F8                     _DimmerLights_DimmingFunction:	
 13271                           
 13272                           ;incstack = 0
 13273                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0+pclath+cstack]
 13274                           ;DimmerLights_DimmingFunction@lights stored from wreg
 13275  09F8  00F5               	movwf	DimmerLights_DimmingFunction@lights
 13276                           
 13277                           ;Dimmer_B1.c: 2129: if (lights == 1) {
 13278  09F9  0875               	movf	DimmerLights_DimmingFunction@lights,w
 13279  09FA  3A01               	xorlw	1
 13280  09FB  1D03               	skipz
 13281  09FC  0008               	return
 13282                           
 13283                           ;Dimmer_B1.c: 2130: if (DimmerIntr1.Tune == 1) {
 13284  09FD  0021               	movlb	1	; select bank1
 13285  09FE  1CA0               	btfss	_DimmerIntr1^(0+128),1
 13286  09FF  0008               	return
 13287                           
 13288                           ;Dimmer_B1.c: 2131: DimmerIntr1.Tune = 0;
 13289  0A00  10A0               	bcf	_DimmerIntr1^(0+128),1
 13290                           
 13291                           ;Dimmer_B1.c: 2132: DimmerIntr1.TuneTime++;
 13292  0A01  3001               	movlw	1
 13293  0A02  00F4               	movwf	??_DimmerLights_DimmingFunction
 13294  0A03  0874               	movf	??_DimmerLights_DimmingFunction,w
 13295  0A04  07A3               	addwf	(_DimmerIntr1^(0+128)+3),f
 13296                           
 13297                           ;Dimmer_B1.c: 2133: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 13298  0A05  0824               	movf	(_DimmerIntr1^(0+128)+4),w
 13299  0A06  0223               	subwf	(_DimmerIntr1^(0+128)+3),w
 13300  0A07  1C03               	skipc
 13301  0A08  0008               	return
 13302                           
 13303                           ;Dimmer_B1.c: 2134: DimmerIntr1.TuneTime = 0;
 13304  0A09  01A3               	clrf	(_DimmerIntr1^(0+128)+3)
 13305                           
 13306                           ;Dimmer_B1.c: 2135: DimmerIntr1.TuneGO = 1;
 13307  0A0A  1721               	bsf	(_DimmerIntr1^(0+128)+1),6
 13308                           
 13309                           ;Dimmer_B1.c: 2136: if (DimmerIntr1.Dimming_Sw == 1) {
 13310  0A0B  1E20               	btfss	_DimmerIntr1^(0+128),4
 13311  0A0C  2A29               	goto	l889
 13312                           
 13313                           ;Dimmer_B1.c: 2155: if (DimmerIntr1.Dimming_Status == 0) {
 13314  0A0D  1AA0               	btfsc	_DimmerIntr1^(0+128),5
 13315  0A0E  2A1B               	goto	l6583
 13316                           
 13317                           ;Dimmer_B1.c: 2156: if (DimmerIntr1.DimmingValue > ((char)((100-67)*0.6))) {
 13318  0A0F  3014               	movlw	20
 13319  0A10  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13320  0A11  1C03               	skipc
 13321  0A12  2A19               	goto	l891
 13322                           
 13323                           ;Dimmer_B1.c: 2157: DimmerIntr1.DimmingValue--;
 13324  0A13  3001               	movlw	1
 13325  0A14  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 13326                           
 13327                           ;Dimmer_B1.c: 2158: DimmerIntr_ValueCalculate(1);
 13328  0A15  3001               	movlw	1
 13329  0A16  3192  22B7         	fcall	_DimmerIntr_ValueCalculate
 13330                           
 13331                           ;Dimmer_B1.c: 2159: } else {
 13332  0A18  0008               	return
 13333  0A19                     l891:	
 13334                           
 13335                           ;Dimmer_B1.c: 2160: DimmerIntr1.Dimming_Status = 1;
 13336  0A19  16A0               	bsf	_DimmerIntr1^(0+128),5
 13337                           
 13338                           ;Dimmer_B1.c: 2161: }
 13339                           ;Dimmer_B1.c: 2162: } else {
 13340  0A1A  0008               	return
 13341  0A1B                     l6583:	
 13342                           
 13343                           ;Dimmer_B1.c: 2163: if (DimmerIntr1.DimmingValue < ((char)((100-5)*0.6))) {
 13344  0A1B  3039               	movlw	57
 13345  0A1C  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13346  0A1D  1803               	skipnc
 13347  0A1E  2A27               	goto	l894
 13348                           
 13349                           ;Dimmer_B1.c: 2164: DimmerIntr1.DimmingValue++;
 13350  0A1F  3001               	movlw	1
 13351  0A20  00F4               	movwf	??_DimmerLights_DimmingFunction
 13352  0A21  0874               	movf	??_DimmerLights_DimmingFunction,w
 13353  0A22  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 13354                           
 13355                           ;Dimmer_B1.c: 2165: DimmerIntr_ValueCalculate(1);
 13356  0A23  3001               	movlw	1
 13357  0A24  3192  22B7         	fcall	_DimmerIntr_ValueCalculate
 13358                           
 13359                           ;Dimmer_B1.c: 2166: } else {
 13360  0A26  0008               	return
 13361  0A27                     l894:	
 13362                           
 13363                           ;Dimmer_B1.c: 2167: DimmerIntr1.Dimming_Status = 0;
 13364  0A27  12A0               	bcf	_DimmerIntr1^(0+128),5
 13365                           
 13366                           ;Dimmer_B1.c: 2168: }
 13367                           ;Dimmer_B1.c: 2169: }
 13368                           ;Dimmer_B1.c: 2171: } else if (DimmerIntr1.Dimming_RF == 1) {
 13369  0A28  0008               	return
 13370  0A29                     l889:	
 13371  0A29  1F20               	btfss	_DimmerIntr1^(0+128),6
 13372  0A2A  0008               	return
 13373                           
 13374                           ;Dimmer_B1.c: 2184: if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 13375  0A2B  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13376  0A2C  0226               	subwf	(_DimmerIntr1^(0+128)+6),w
 13377  0A2D  1803               	skipnc
 13378  0A2E  2A35               	goto	l6595
 13379                           
 13380                           ;Dimmer_B1.c: 2185: DimmerIntr1.DimmingValue--;
 13381  0A2F  3001               	movlw	1
 13382  0A30  02A5               	subwf	(_DimmerIntr1^(0+128)+5),f
 13383                           
 13384                           ;Dimmer_B1.c: 2186: DimmerIntr_ValueCalculate(1);
 13385  0A31  3001               	movlw	1
 13386  0A32  3192  22B7         	fcall	_DimmerIntr_ValueCalculate
 13387                           
 13388                           ;Dimmer_B1.c: 2187: } else if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 13389  0A34  0008               	return
 13390  0A35                     l6595:	
 13391  0A35  0021               	movlb	1	; select bank1
 13392  0A36  0826               	movf	(_DimmerIntr1^(0+128)+6),w
 13393  0A37  0225               	subwf	(_DimmerIntr1^(0+128)+5),w
 13394  0A38  1803               	skipnc
 13395  0A39  2A42               	goto	l900
 13396                           
 13397                           ;Dimmer_B1.c: 2188: DimmerIntr1.DimmingValue++;
 13398  0A3A  3001               	movlw	1
 13399  0A3B  00F4               	movwf	??_DimmerLights_DimmingFunction
 13400  0A3C  0874               	movf	??_DimmerLights_DimmingFunction,w
 13401  0A3D  07A5               	addwf	(_DimmerIntr1^(0+128)+5),f
 13402                           
 13403                           ;Dimmer_B1.c: 2189: DimmerIntr_ValueCalculate(1);
 13404  0A3E  3001               	movlw	1
 13405  0A3F  3192  22B7         	fcall	_DimmerIntr_ValueCalculate
 13406                           
 13407                           ;Dimmer_B1.c: 2190: } else {
 13408  0A41  0008               	return
 13409  0A42                     l900:	
 13410                           
 13411                           ;Dimmer_B1.c: 2191: DimmerIntr1.Dimming_RF = 0;
 13412  0A42  1320               	bcf	_DimmerIntr1^(0+128),6
 13413  0A43  0008               	return
 13414  0A44                     __end_of_DimmerLights_DimmingFunction:	
 13415                           
 13416                           	psect	text97
 13417  12B7                     __ptext97:	
 13418 ;; *************** function _DimmerIntr_ValueCalculate *****************
 13419 ;; Defined at:
 13420 ;;		line 2058 in file "../src/Dimmer_B1.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  lights          1    wreg     unsigned char 
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  lights          1    3[COMMON] unsigned char 
 13425 ;; Return value:  Size  Location     Type
 13426 ;;		None               void
 13427 ;; Registers used:
 13428 ;;		wreg
 13429 ;; Tracked objects:
 13430 ;;		On entry : 0/0
 13431 ;;		On exit  : 0/0
 13432 ;;		Unchanged: 0/0
 13433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13435 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;Total ram usage:        2 bytes
 13439 ;; Hardware stack levels used:    1
 13440 ;; Hardware stack levels required when called:    3
 13441 ;; This function calls:
 13442 ;;		Nothing
 13443 ;; This function is called by:
 13444 ;;		_setDimmerLights_OnOff
 13445 ;;		_DimmerLights_DimmingFunction
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           
 13450                           ;psect for function _DimmerIntr_ValueCalculate
 13451  12B7                     _DimmerIntr_ValueCalculate:	
 13452                           
 13453                           ;incstack = 0
 13454                           ; Regs used in _DimmerIntr_ValueCalculate: [wreg]
 13455                           ;DimmerIntr_ValueCalculate@lights stored from wreg
 13456  12B7  00F3               	movwf	DimmerIntr_ValueCalculate@lights
 13457                           
 13458                           ;Dimmer_B1.c: 2060: if (lights == 1) {
 13459  12B8  0873               	movf	DimmerIntr_ValueCalculate@lights,w
 13460  12B9  3A01               	xorlw	1
 13461  12BA  1D03               	skipz
 13462  12BB  0008               	return
 13463                           
 13464                           ;Dimmer_B1.c: 2062: DimmerIntr1.TuneValue2 = DimmerIntr1.DimmingValue;
 13465  12BC  0021               	movlb	1	; select bank1
 13466  12BD  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13467  12BE  00F2               	movwf	??_DimmerIntr_ValueCalculate
 13468  12BF  0872               	movf	??_DimmerIntr_ValueCalculate,w
 13469  12C0  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 13470                           
 13471                           ;Dimmer_B1.c: 2063: DimmerIntr1.TuneEnd = 60;
 13472  12C1  303C               	movlw	60
 13473  12C2  00F2               	movwf	??_DimmerIntr_ValueCalculate
 13474  12C3  0872               	movf	??_DimmerIntr_ValueCalculate,w
 13475  12C4  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 13476                           
 13477                           ;Dimmer_B1.c: 2064: DimmerIntr1.Calculate = 1;
 13478  12C5  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 13479  12C6  0008               	return
 13480  12C7                     __end_of_DimmerIntr_ValueCalculate:	
 13481                           
 13482                           	psect	text98
 13483  1153                     __ptext98:	
 13484 ;; *************** function _DimmerLights_Initialization *****************
 13485 ;; Defined at:
 13486 ;;		line 703 in file "../src/Dimmer_B1.c"
 13487 ;; Parameters:    Size  Location     Type
 13488 ;;		None
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;		None
 13491 ;; Return value:  Size  Location     Type
 13492 ;;		None               void
 13493 ;; Registers used:
 13494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13495 ;; Tracked objects:
 13496 ;;		On entry : 0/0
 13497 ;;		On exit  : 0/0
 13498 ;;		Unchanged: 0/0
 13499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13504 ;;Total ram usage:        0 bytes
 13505 ;; Hardware stack levels used:    1
 13506 ;; Hardware stack levels required when called:    7
 13507 ;; This function calls:
 13508 ;;		_DimmerIntr_Initialization
 13509 ;;		_setDimmerLights_Initialization
 13510 ;; This function is called by:
 13511 ;;		_main
 13512 ;; This function uses a non-reentrant model
 13513 ;;
 13514                           
 13515                           
 13516                           ;psect for function _DimmerLights_Initialization
 13517  1153                     _DimmerLights_Initialization:	
 13518                           
 13519                           ;Dimmer_B1.c: 705: setDimmerLights_Initialization(1);
 13520                           
 13521                           ;incstack = 0
 13522                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13523  1153  3001               	movlw	1
 13524  1154  3180  2003  3191   	fcall	_setDimmerLights_Initialization
 13525                           
 13526                           ;Dimmer_B1.c: 715: DimmerIntr_Initialization();
 13527  1157  3188  2015         	fcall	_DimmerIntr_Initialization
 13528  1159  0008               	return
 13529  115A                     __end_of_DimmerLights_Initialization:	
 13530                           
 13531                           	psect	text99
 13532  0003                     __ptext99:	
 13533 ;; *************** function _setDimmerLights_Initialization *****************
 13534 ;; Defined at:
 13535 ;;		line 719 in file "../src/Dimmer_B1.c"
 13536 ;; Parameters:    Size  Location     Type
 13537 ;;  lights          1    wreg     unsigned char 
 13538 ;; Auto vars:     Size  Location     Type
 13539 ;;  lights          1    0[COMMON] unsigned char 
 13540 ;; Return value:  Size  Location     Type
 13541 ;;		None               void
 13542 ;; Registers used:
 13543 ;;		wreg
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;Total ram usage:        0 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    3
 13556 ;; This function calls:
 13557 ;;		Nothing
 13558 ;; This function is called by:
 13559 ;;		_DimmerLights_Initialization
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           
 13564                           ;psect for function _setDimmerLights_Initialization
 13565  0003                     _setDimmerLights_Initialization:	
 13566                           
 13567                           ;incstack = 0
 13568                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 13569  0003  0008               	return
 13570  0004                     __end_of_setDimmerLights_Initialization:	
 13571                           
 13572                           	psect	text100
 13573  0815                     __ptext100:	
 13574 ;; *************** function _DimmerIntr_Initialization *****************
 13575 ;; Defined at:
 13576 ;;		line 7 in file "../src/Dimmer_B1.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;		None
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;		None
 13581 ;; Return value:  Size  Location     Type
 13582 ;;		None               void
 13583 ;; Registers used:
 13584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;Total ram usage:        1 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; Hardware stack levels required when called:    6
 13597 ;; This function calls:
 13598 ;;		_getDimmerLights_PercentToValue
 13599 ;;		_getDimmerLights_ValueToPercent
 13600 ;;		_setMemory_Modify
 13601 ;; This function is called by:
 13602 ;;		_DimmerLights_Initialization
 13603 ;; This function uses a non-reentrant model
 13604 ;;
 13605                           
 13606                           
 13607                           ;psect for function _DimmerIntr_Initialization
 13608  0815                     _DimmerIntr_Initialization:	
 13609                           
 13610                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 13611                           
 13612                           ;incstack = 0
 13613                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 13614  0815  3003               	movlw	3
 13615  0816  0020               	movlb	0	; select bank0
 13616  0817  00D8               	movwf	??_DimmerIntr_Initialization
 13617  0818  0858               	movf	??_DimmerIntr_Initialization,w
 13618  0819  0021               	movlb	1	; select bank1
 13619  081A  00A4               	movwf	(_DimmerIntr1^(0+128)+4)
 13620                           
 13621                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)((100-67)*0.6));
 13622  081B  3013               	movlw	19
 13623  081C  0020               	movlb	0	; select bank0
 13624  081D  00D8               	movwf	??_DimmerIntr_Initialization
 13625  081E  0858               	movf	??_DimmerIntr_Initialization,w
 13626  081F  0021               	movlb	1	; select bank1
 13627  0820  00A6               	movwf	(_DimmerIntr1^(0+128)+6)
 13628                           
 13629                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)((100-5)*0.6));
 13630  0821  3039               	movlw	57
 13631  0822  0020               	movlb	0	; select bank0
 13632  0823  00D8               	movwf	??_DimmerIntr_Initialization
 13633  0824  0858               	movf	??_DimmerIntr_Initialization,w
 13634  0825  0021               	movlb	1	; select bank1
 13635  0826  00A7               	movwf	(_DimmerIntr1^(0+128)+7)
 13636                           
 13637                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 13638  0827  10A0               	bcf	_DimmerIntr1^(0+128),1
 13639                           
 13640                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)((100-67)*0.
      +                          6)));
 13641  0828  3013               	movlw	19
 13642  0829  3189  2168  3188   	fcall	_getDimmerLights_ValueToPercent
 13643  082C  0020               	movlb	0	; select bank0
 13644  082D  00D8               	movwf	??_DimmerIntr_Initialization
 13645  082E  086E               	movf	_product,w
 13646  082F  3E15               	addlw	21
 13647  0830  0086               	movwf	6
 13648  0831  3001               	movlw	1	; select bank2/3
 13649  0832  0087               	movwf	7
 13650  0833  0858               	movf	??_DimmerIntr_Initialization,w
 13651  0834  0081               	movwf	1
 13652                           
 13653                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 13654  0835  086E               	movf	_product,w
 13655  0836  3E15               	addlw	21
 13656  0837  0086               	movwf	6
 13657  0838  3001               	movlw	1	; select bank2/3
 13658  0839  0087               	movwf	7
 13659  083A  0801               	movf	1,w
 13660  083B  318B  2387  3188   	fcall	_getDimmerLights_PercentToValue
 13661  083E  0020               	movlb	0	; select bank0
 13662  083F  00D8               	movwf	??_DimmerIntr_Initialization
 13663  0840  0858               	movf	??_DimmerIntr_Initialization,w
 13664  0841  0021               	movlb	1	; select bank1
 13665  0842  00A5               	movwf	(_DimmerIntr1^(0+128)+5)
 13666                           
 13667                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue2 = DimmerIntr1.DimmingValue;
 13668  0843  0825               	movf	(_DimmerIntr1^(0+128)+5),w
 13669  0844  0020               	movlb	0	; select bank0
 13670  0845  00D8               	movwf	??_DimmerIntr_Initialization
 13671  0846  0858               	movf	??_DimmerIntr_Initialization,w
 13672  0847  0021               	movlb	1	; select bank1
 13673  0848  00A8               	movwf	(_DimmerIntr1^(0+128)+8)
 13674                           
 13675                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = 60;
 13676  0849  303C               	movlw	60
 13677  084A  0020               	movlb	0	; select bank0
 13678  084B  00D8               	movwf	??_DimmerIntr_Initialization
 13679  084C  0858               	movf	??_DimmerIntr_Initialization,w
 13680  084D  0021               	movlb	1	; select bank1
 13681  084E  00AB               	movwf	(_DimmerIntr1^(0+128)+11)
 13682                           
 13683                           ;Dimmer_B1.c: 32: DimmerIntr1.Calculate = 1;
 13684  084F  17A1               	bsf	(_DimmerIntr1^(0+128)+1),7
 13685                           
 13686                           ;Dimmer_B1.c: 111: if (myMain.InitDimmer == 1) {
 13687  0850  1E49               	btfss	(_myMain^(0+128)+10),4
 13688  0851  0008               	return
 13689                           
 13690                           ;Dimmer_B1.c: 112: myMain.InitDimmer = 0;
 13691  0852  1249               	bcf	(_myMain^(0+128)+10),4
 13692                           
 13693                           ;Dimmer_B1.c: 113: myMain.SaveDimmer = 1;
 13694  0853  16C9               	bsf	(_myMain^(0+128)+10),5
 13695                           
 13696                           ;Dimmer_B1.c: 114: setMemory_Modify(1);
 13697  0854  3001               	movlw	1
 13698  0855  3192  22A7         	fcall	_setMemory_Modify
 13699  0857  0008               	return
 13700  0858                     __end_of_DimmerIntr_Initialization:	
 13701                           
 13702                           	psect	text101
 13703  12A7                     __ptext101:	
 13704 ;; *************** function _setMemory_Modify *****************
 13705 ;; Defined at:
 13706 ;;		line 1088 in file "../src/MCU_B1.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;  command         1    wreg     unsigned char 
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;  command         1    3[COMMON] unsigned char 
 13711 ;; Return value:  Size  Location     Type
 13712 ;;		None               void
 13713 ;; Registers used:
 13714 ;;		wreg, status,2, status,0
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;Total ram usage:        2 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    3
 13727 ;; This function calls:
 13728 ;;		Nothing
 13729 ;; This function is called by:
 13730 ;;		_DimmerIntr_Initialization
 13731 ;;		_setDimmerLights_Dimming
 13732 ;;		_setLog_Code
 13733 ;;		_setRFSW_AdjControl
 13734 ;;		_DimmerLights_AssignationDimming
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           
 13739                           ;psect for function _setMemory_Modify
 13740  12A7                     _setMemory_Modify:	
 13741                           
 13742                           ;incstack = 0
 13743                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 13744                           ;setMemory_Modify@command stored from wreg
 13745  12A7  00F3               	movwf	setMemory_Modify@command
 13746                           
 13747                           ;MCU_B1.c: 1089: Memory.Modify = command == 1 ? 1 : 0;
 13748  12A8  0873               	movf	setMemory_Modify@command,w
 13749  12A9  3A01               	xorlw	1
 13750  12AA  3000               	movlw	0
 13751  12AB  1903               	skipnz
 13752  12AC  3001               	movlw	1
 13753  12AD  00F2               	movwf	??_setMemory_Modify
 13754  12AE  0023               	movlb	3	; select bank3
 13755  12AF  0844               	movf	(_Memory^(0+384)+36),w
 13756  12B0  0672               	xorwf	??_setMemory_Modify,w
 13757  12B1  39FE               	andlw	-2
 13758  12B2  0672               	xorwf	??_setMemory_Modify,w
 13759  12B3  00C4               	movwf	(_Memory^(0+384)+36)
 13760                           
 13761                           ;MCU_B1.c: 1090: Memory.Time = 0;
 13762  12B4  01C2               	clrf	(_Memory^(0+384)+34)
 13763  12B5  01C3               	clrf	((_Memory+1)^(0+384)+34)
 13764  12B6  0008               	return
 13765  12B7                     __end_of_setMemory_Modify:	
 13766                           
 13767                           	psect	text102
 13768  0968                     __ptext102:	
 13769 ;; *************** function _getDimmerLights_ValueToPercent *****************
 13770 ;; Defined at:
 13771 ;;		line 1315 in file "../src/Dimmer_B1.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;  value           1    wreg     unsigned char 
 13774 ;; Auto vars:     Size  Location     Type
 13775 ;;  value           1   50[BANK0 ] unsigned char 
 13776 ;;  i               3   51[BANK0 ] float 
 13777 ;; Return value:  Size  Location     Type
 13778 ;;                  1    wreg      unsigned char 
 13779 ;; Registers used:
 13780 ;;		wreg, status,2, status,0, pclath, cstack
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13787 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;Total ram usage:        4 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    5
 13793 ;; This function calls:
 13794 ;;		___awtoft
 13795 ;;		___ftdiv
 13796 ;;		___fttol
 13797 ;; This function is called by:
 13798 ;;		_DimmerIntr_Initialization
 13799 ;;		_setDimmerLights_Dimming
 13800 ;; This function uses a non-reentrant model
 13801 ;;
 13802                           
 13803                           
 13804                           ;psect for function _getDimmerLights_ValueToPercent
 13805  0968                     _getDimmerLights_ValueToPercent:	
 13806                           
 13807                           ;incstack = 0
 13808                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 13809                           ;getDimmerLights_ValueToPercent@value stored from wreg
 13810  0968  0020               	movlb	0	; select bank0
 13811  0969  00D2               	movwf	getDimmerLights_ValueToPercent@value
 13812                           
 13813                           ;Dimmer_B1.c: 1317: float i = ((char)((100-5)*0.6)) - ((char)((100-67)*0.6));
 13814  096A  3000               	movlw	0
 13815  096B  00D3               	movwf	getDimmerLights_ValueToPercent@i
 13816  096C  3018               	movlw	24
 13817  096D  00D4               	movwf	getDimmerLights_ValueToPercent@i+1
 13818  096E  3042               	movlw	66
 13819  096F  00D5               	movwf	getDimmerLights_ValueToPercent@i+2
 13820                           
 13821                           ;Dimmer_B1.c: 1318: i /= 100;
 13822  0970  3000               	movlw	0
 13823  0971  00A7               	movwf	___ftdiv@f2
 13824  0972  30C8               	movlw	200
 13825  0973  00A8               	movwf	___ftdiv@f2+1
 13826  0974  3042               	movlw	66
 13827  0975  00A9               	movwf	___ftdiv@f2+2
 13828  0976  0853               	movf	getDimmerLights_ValueToPercent@i,w
 13829  0977  00AA               	movwf	___ftdiv@f1
 13830  0978  0854               	movf	getDimmerLights_ValueToPercent@i+1,w
 13831  0979  00AB               	movwf	___ftdiv@f1+1
 13832  097A  0855               	movf	getDimmerLights_ValueToPercent@i+2,w
 13833  097B  00AC               	movwf	___ftdiv@f1+2
 13834  097C  3185  25A3  3189   	fcall	___ftdiv
 13835  097F  0020               	movlb	0	; select bank0
 13836  0980  0827               	movf	?___ftdiv,w
 13837  0981  00D3               	movwf	getDimmerLights_ValueToPercent@i
 13838  0982  0828               	movf	?___ftdiv+1,w
 13839  0983  00D4               	movwf	getDimmerLights_ValueToPercent@i+1
 13840  0984  0829               	movf	?___ftdiv+2,w
 13841  0985  00D5               	movwf	getDimmerLights_ValueToPercent@i+2
 13842                           
 13843                           ;Dimmer_B1.c: 1319: return (100 - (char) ((value - ((char)((100-67)*0.6))) / i));
 13844  0986  0852               	movf	getDimmerLights_ValueToPercent@value,w
 13845  0987  3EED               	addlw	237
 13846  0988  00A3               	movwf	___awtoft@c
 13847  0989  30FF               	movlw	255
 13848  098A  1803               	skipnc
 13849  098B  3000               	movlw	0
 13850  098C  00A4               	movwf	___awtoft@c+1
 13851  098D  3195  254B  3189   	fcall	___awtoft
 13852  0990  0020               	movlb	0	; select bank0
 13853  0991  0823               	movf	?___awtoft,w
 13854  0992  00AA               	movwf	___ftdiv@f1
 13855  0993  0824               	movf	?___awtoft+1,w
 13856  0994  00AB               	movwf	___ftdiv@f1+1
 13857  0995  0825               	movf	?___awtoft+2,w
 13858  0996  00AC               	movwf	___ftdiv@f1+2
 13859  0997  0853               	movf	getDimmerLights_ValueToPercent@i,w
 13860  0998  00A7               	movwf	___ftdiv@f2
 13861  0999  0854               	movf	getDimmerLights_ValueToPercent@i+1,w
 13862  099A  00A8               	movwf	___ftdiv@f2+1
 13863  099B  0855               	movf	getDimmerLights_ValueToPercent@i+2,w
 13864  099C  00A9               	movwf	___ftdiv@f2+2
 13865  099D  3185  25A3  3189   	fcall	___ftdiv
 13866  09A0  0020               	movlb	0	; select bank0
 13867  09A1  0827               	movf	?___ftdiv,w
 13868  09A2  00C4               	movwf	___fttol@f1
 13869  09A3  0828               	movf	?___ftdiv+1,w
 13870  09A4  00C5               	movwf	___fttol@f1+1
 13871  09A5  0829               	movf	?___ftdiv+2,w
 13872  09A6  00C6               	movwf	___fttol@f1+2
 13873  09A7  3187  275C         	fcall	___fttol
 13874  09A9  0020               	movlb	0	; select bank0
 13875  09AA  0344               	decf	?___fttol,w
 13876  09AB  3AFF               	xorlw	255
 13877  09AC  3E64               	addlw	100
 13878  09AD  0008               	return
 13879  09AE                     __end_of_getDimmerLights_ValueToPercent:	
 13880                           
 13881                           	psect	text103
 13882  0B87                     __ptext103:	
 13883 ;; *************** function _getDimmerLights_PercentToValue *****************
 13884 ;; Defined at:
 13885 ;;		line 1299 in file "../src/Dimmer_B1.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;  value           1    wreg     unsigned char 
 13888 ;; Auto vars:     Size  Location     Type
 13889 ;;  value           1   52[BANK0 ] unsigned char 
 13890 ;;  i               3   53[BANK0 ] float 
 13891 ;; Return value:  Size  Location     Type
 13892 ;;                  1    wreg      unsigned char 
 13893 ;; Registers used:
 13894 ;;		wreg, status,2, status,0, pclath, cstack
 13895 ;; Tracked objects:
 13896 ;;		On entry : 0/0
 13897 ;;		On exit  : 0/0
 13898 ;;		Unchanged: 0/0
 13899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13901 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13902 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13903 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13904 ;;Total ram usage:        6 bytes
 13905 ;; Hardware stack levels used:    1
 13906 ;; Hardware stack levels required when called:    5
 13907 ;; This function calls:
 13908 ;;		___awtoft
 13909 ;;		___ftadd
 13910 ;;		___ftdiv
 13911 ;;		___ftmul
 13912 ;;		___fttol
 13913 ;; This function is called by:
 13914 ;;		_DimmerIntr_Initialization
 13915 ;;		_setDimmerLights_OnOff
 13916 ;;		_setRFSW_AdjControl
 13917 ;;		_DimmerLights_AssignationDimming
 13918 ;; This function uses a non-reentrant model
 13919 ;;
 13920                           
 13921                           
 13922                           ;psect for function _getDimmerLights_PercentToValue
 13923  0B87                     _getDimmerLights_PercentToValue:	
 13924                           
 13925                           ;incstack = 0
 13926                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 13927                           ;getDimmerLights_PercentToValue@value stored from wreg
 13928  0B87  0020               	movlb	0	; select bank0
 13929  0B88  00D4               	movwf	getDimmerLights_PercentToValue@value
 13930                           
 13931                           ;Dimmer_B1.c: 1301: float i = ((char)((100-5)*0.6)) - ((char)((100-67)*0.6));
 13932  0B89  3000               	movlw	0
 13933  0B8A  00D5               	movwf	getDimmerLights_PercentToValue@i
 13934  0B8B  3018               	movlw	24
 13935  0B8C  00D6               	movwf	getDimmerLights_PercentToValue@i+1
 13936  0B8D  3042               	movlw	66
 13937  0B8E  00D7               	movwf	getDimmerLights_PercentToValue@i+2
 13938                           
 13939                           ;Dimmer_B1.c: 1302: i /= 100;
 13940  0B8F  3000               	movlw	0
 13941  0B90  00A7               	movwf	___ftdiv@f2
 13942  0B91  30C8               	movlw	200
 13943  0B92  00A8               	movwf	___ftdiv@f2+1
 13944  0B93  3042               	movlw	66
 13945  0B94  00A9               	movwf	___ftdiv@f2+2
 13946  0B95  0855               	movf	getDimmerLights_PercentToValue@i,w
 13947  0B96  00AA               	movwf	___ftdiv@f1
 13948  0B97  0856               	movf	getDimmerLights_PercentToValue@i+1,w
 13949  0B98  00AB               	movwf	___ftdiv@f1+1
 13950  0B99  0857               	movf	getDimmerLights_PercentToValue@i+2,w
 13951  0B9A  00AC               	movwf	___ftdiv@f1+2
 13952  0B9B  3185  25A3  318B   	fcall	___ftdiv
 13953  0B9E  0020               	movlb	0	; select bank0
 13954  0B9F  0827               	movf	?___ftdiv,w
 13955  0BA0  00D5               	movwf	getDimmerLights_PercentToValue@i
 13956  0BA1  0828               	movf	?___ftdiv+1,w
 13957  0BA2  00D6               	movwf	getDimmerLights_PercentToValue@i+1
 13958  0BA3  0829               	movf	?___ftdiv+2,w
 13959  0BA4  00D7               	movwf	getDimmerLights_PercentToValue@i+2
 13960                           
 13961                           ;Dimmer_B1.c: 1303: return (char) (((100 - value) * i) + ((char)((100-67)*0.6)));
 13962  0BA5  0854               	movf	getDimmerLights_PercentToValue@value,w
 13963  0BA6  00D2               	movwf	??_getDimmerLights_PercentToValue
 13964  0BA7  01D3               	clrf	??_getDimmerLights_PercentToValue+1
 13965  0BA8  09D2               	comf	??_getDimmerLights_PercentToValue,f
 13966  0BA9  09D3               	comf	??_getDimmerLights_PercentToValue+1,f
 13967  0BAA  0AD2               	incf	??_getDimmerLights_PercentToValue,f
 13968  0BAB  1903               	skipnz
 13969  0BAC  0AD3               	incf	??_getDimmerLights_PercentToValue+1,f
 13970  0BAD  0852               	movf	??_getDimmerLights_PercentToValue,w
 13971  0BAE  3E64               	addlw	100
 13972  0BAF  00A3               	movwf	___awtoft@c
 13973  0BB0  3000               	movlw	0
 13974  0BB1  3D53               	addwfc	??_getDimmerLights_PercentToValue+1,w
 13975  0BB2  00A4               	movwf	___awtoft@c+1
 13976  0BB3  3195  254B  318B   	fcall	___awtoft
 13977  0BB6  0020               	movlb	0	; select bank0
 13978  0BB7  0823               	movf	?___awtoft,w
 13979  0BB8  00AA               	movwf	___ftmul@f2
 13980  0BB9  0824               	movf	?___awtoft+1,w
 13981  0BBA  00AB               	movwf	___ftmul@f2+1
 13982  0BBB  0825               	movf	?___awtoft+2,w
 13983  0BBC  00AC               	movwf	___ftmul@f2+2
 13984  0BBD  0855               	movf	getDimmerLights_PercentToValue@i,w
 13985  0BBE  00A7               	movwf	___ftmul@f1
 13986  0BBF  0856               	movf	getDimmerLights_PercentToValue@i+1,w
 13987  0BC0  00A8               	movwf	___ftmul@f1+1
 13988  0BC1  0857               	movf	getDimmerLights_PercentToValue@i+2,w
 13989  0BC2  00A9               	movwf	___ftmul@f1+2
 13990  0BC3  3184  2442  318B   	fcall	___ftmul
 13991  0BC6  0020               	movlb	0	; select bank0
 13992  0BC7  0827               	movf	?___ftmul,w
 13993  0BC8  00BA               	movwf	___ftadd@f2
 13994  0BC9  0828               	movf	?___ftmul+1,w
 13995  0BCA  00BB               	movwf	___ftadd@f2+1
 13996  0BCB  0829               	movf	?___ftmul+2,w
 13997  0BCC  00BC               	movwf	___ftadd@f2+2
 13998  0BCD  3000               	movlw	0
 13999  0BCE  00B7               	movwf	___ftadd@f1
 14000  0BCF  3098               	movlw	152
 14001  0BD0  00B8               	movwf	___ftadd@f1+1
 14002  0BD1  3041               	movlw	65
 14003  0BD2  00B9               	movwf	___ftadd@f1+2
 14004  0BD3  3181  21C2  318B   	fcall	___ftadd
 14005  0BD6  0020               	movlb	0	; select bank0
 14006  0BD7  0837               	movf	?___ftadd,w
 14007  0BD8  00C4               	movwf	___fttol@f1
 14008  0BD9  0838               	movf	?___ftadd+1,w
 14009  0BDA  00C5               	movwf	___fttol@f1+1
 14010  0BDB  0839               	movf	?___ftadd+2,w
 14011  0BDC  00C6               	movwf	___fttol@f1+2
 14012  0BDD  3187  275C         	fcall	___fttol
 14013  0BDF  0020               	movlb	0	; select bank0
 14014  0BE0  0844               	movf	?___fttol,w
 14015  0BE1  0008               	return
 14016  0BE2                     __end_of_getDimmerLights_PercentToValue:	
 14017                           
 14018                           	psect	text104
 14019  075C                     __ptext104:	
 14020 ;; *************** function ___fttol *****************
 14021 ;; Defined at:
 14022 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14023 ;; Parameters:    Size  Location     Type
 14024 ;;  f1              3   36[BANK0 ] float 
 14025 ;; Auto vars:     Size  Location     Type
 14026 ;;  lval            4   45[BANK0 ] unsigned long 
 14027 ;;  exp1            1   49[BANK0 ] unsigned char 
 14028 ;;  sign1           1   44[BANK0 ] unsigned char 
 14029 ;; Return value:  Size  Location     Type
 14030 ;;                  4   36[BANK0 ] long 
 14031 ;; Registers used:
 14032 ;;		wreg, status,2, status,0
 14033 ;; Tracked objects:
 14034 ;;		On entry : 0/0
 14035 ;;		On exit  : 0/0
 14036 ;;		Unchanged: 0/0
 14037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14038 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;Total ram usage:       14 bytes
 14043 ;; Hardware stack levels used:    1
 14044 ;; Hardware stack levels required when called:    3
 14045 ;; This function calls:
 14046 ;;		Nothing
 14047 ;; This function is called by:
 14048 ;;		_getDimmerLights_PercentToValue
 14049 ;;		_getDimmerLights_ValueToPercent
 14050 ;; This function uses a non-reentrant model
 14051 ;;
 14052                           
 14053                           
 14054                           ;psect for function ___fttol
 14055  075C                     ___fttol:	
 14056                           
 14057                           ;incstack = 0
 14058                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14059  075C  0020               	movlb	0	; select bank0
 14060  075D  0844               	movf	___fttol@f1,w
 14061  075E  00C8               	movwf	??___fttol
 14062  075F  0845               	movf	___fttol@f1+1,w
 14063  0760  00C9               	movwf	??___fttol+1
 14064  0761  0846               	movf	___fttol@f1+2,w
 14065  0762  00CA               	movwf	??___fttol+2
 14066  0763  1003               	clrc
 14067  0764  0D49               	rlf	??___fttol+1,w
 14068  0765  0D4A               	rlf	??___fttol+2,w
 14069  0766  00CB               	movwf	??___fttol+3
 14070  0767  084B               	movf	??___fttol+3,w
 14071  0768  00D1               	movwf	___fttol@exp1
 14072  0769  08D1               	movf	___fttol@exp1,f
 14073  076A  1D03               	skipz
 14074  076B  2F75               	goto	l5463
 14075  076C  3000               	movlw	0
 14076  076D  00C7               	movwf	?___fttol+3
 14077  076E  3000               	movlw	0
 14078  076F  00C6               	movwf	?___fttol+2
 14079  0770  3000               	movlw	0
 14080  0771  00C5               	movwf	?___fttol+1
 14081  0772  3000               	movlw	0
 14082  0773  00C4               	movwf	?___fttol
 14083  0774  0008               	return
 14084  0775                     l5463:	
 14085  0775  0844               	movf	___fttol@f1,w
 14086  0776  00C8               	movwf	??___fttol
 14087  0777  0845               	movf	___fttol@f1+1,w
 14088  0778  00C9               	movwf	??___fttol+1
 14089  0779  0846               	movf	___fttol@f1+2,w
 14090  077A  00CA               	movwf	??___fttol+2
 14091  077B  3017               	movlw	23
 14092  077C                     u4255:	
 14093  077C  36CA               	lsrf	??___fttol+2,f
 14094  077D  0CC9               	rrf	??___fttol+1,f
 14095  077E  0CC8               	rrf	??___fttol,f
 14096  077F  0B89               	decfsz	9,f
 14097  0780  2F7C               	goto	u4255
 14098  0781  0848               	movf	??___fttol,w
 14099  0782  00CB               	movwf	??___fttol+3
 14100  0783  084B               	movf	??___fttol+3,w
 14101  0784  00CC               	movwf	___fttol@sign1
 14102  0785  17C5               	bsf	___fttol@f1+1,7
 14103  0786  30FF               	movlw	255
 14104  0787  05C4               	andwf	___fttol@f1,f
 14105  0788  30FF               	movlw	255
 14106  0789  05C5               	andwf	___fttol@f1+1,f
 14107  078A  3000               	movlw	0
 14108  078B  05C6               	andwf	___fttol@f1+2,f
 14109  078C  0844               	movf	___fttol@f1,w
 14110  078D  00CD               	movwf	___fttol@lval
 14111  078E  0845               	movf	___fttol@f1+1,w
 14112  078F  00CE               	movwf	___fttol@lval+1
 14113  0790  0846               	movf	___fttol@f1+2,w
 14114  0791  00CF               	movwf	___fttol@lval+2
 14115  0792  01D0               	clrf	___fttol@lval+3
 14116  0793  308E               	movlw	142
 14117  0794  02D1               	subwf	___fttol@exp1,f
 14118  0795  1FD1               	btfss	___fttol@exp1,7
 14119  0796  2FB3               	goto	l5483
 14120  0797  0851               	movf	___fttol@exp1,w
 14121  0798  3A80               	xorlw	128
 14122  0799  3E8F               	addlw	143
 14123  079A  1803               	skipnc
 14124  079B  2FA5               	goto	l5481
 14125  079C  3000               	movlw	0
 14126  079D  00C7               	movwf	?___fttol+3
 14127  079E  3000               	movlw	0
 14128  079F  00C6               	movwf	?___fttol+2
 14129  07A0  3000               	movlw	0
 14130  07A1  00C5               	movwf	?___fttol+1
 14131  07A2  3000               	movlw	0
 14132  07A3  00C4               	movwf	?___fttol
 14133  07A4  0008               	return
 14134  07A5                     l5481:	
 14135  07A5  3001               	movlw	1
 14136  07A6                     u4285:	
 14137  07A6  36D0               	lsrf	___fttol@lval+3,f
 14138  07A7  0CCF               	rrf	___fttol@lval+2,f
 14139  07A8  0CCE               	rrf	___fttol@lval+1,f
 14140  07A9  0CCD               	rrf	___fttol@lval,f
 14141  07AA  0B89               	decfsz	9,f
 14142  07AB  2FA6               	goto	u4285
 14143  07AC  3001               	movlw	1
 14144  07AD  00C8               	movwf	??___fttol
 14145  07AE  0848               	movf	??___fttol,w
 14146  07AF  07D1               	addwf	___fttol@exp1,f
 14147  07B0  1903               	btfsc	3,2
 14148  07B1  2FCC               	goto	l5493
 14149  07B2  2FA5               	goto	l5481
 14150  07B3                     l5483:	
 14151  07B3  3018               	movlw	24
 14152  07B4  0251               	subwf	___fttol@exp1,w
 14153  07B5  1C03               	skipc
 14154  07B6  2FC9               	goto	l5491
 14155  07B7  3000               	movlw	0
 14156  07B8  00C7               	movwf	?___fttol+3
 14157  07B9  3000               	movlw	0
 14158  07BA  00C6               	movwf	?___fttol+2
 14159  07BB  3000               	movlw	0
 14160  07BC  00C5               	movwf	?___fttol+1
 14161  07BD  3000               	movlw	0
 14162  07BE  00C4               	movwf	?___fttol
 14163  07BF  0008               	return
 14164  07C0                     l5489:	
 14165  07C0  3001               	movlw	1
 14166  07C1                     u4315:	
 14167  07C1  35CD               	lslf	___fttol@lval,f
 14168  07C2  0DCE               	rlf	___fttol@lval+1,f
 14169  07C3  0DCF               	rlf	___fttol@lval+2,f
 14170  07C4  0DD0               	rlf	___fttol@lval+3,f
 14171  07C5  0B89               	decfsz	9,f
 14172  07C6  2FC1               	goto	u4315
 14173  07C7  3001               	movlw	1
 14174  07C8  02D1               	subwf	___fttol@exp1,f
 14175  07C9                     l5491:	
 14176  07C9  08D1               	movf	___fttol@exp1,f
 14177  07CA  1D03               	skipz
 14178  07CB  2FC0               	goto	l5489
 14179  07CC                     l5493:	
 14180  07CC  084C               	movf	___fttol@sign1,w
 14181  07CD  1903               	btfsc	3,2
 14182  07CE  2FDA               	goto	l5497
 14183  07CF  09CD               	comf	___fttol@lval,f
 14184  07D0  09CE               	comf	___fttol@lval+1,f
 14185  07D1  09CF               	comf	___fttol@lval+2,f
 14186  07D2  09D0               	comf	___fttol@lval+3,f
 14187  07D3  0ACD               	incf	___fttol@lval,f
 14188  07D4  1903               	skipnz
 14189  07D5  0ACE               	incf	___fttol@lval+1,f
 14190  07D6  1903               	skipnz
 14191  07D7  0ACF               	incf	___fttol@lval+2,f
 14192  07D8  1903               	skipnz
 14193  07D9  0AD0               	incf	___fttol@lval+3,f
 14194  07DA                     l5497:	
 14195  07DA  0850               	movf	___fttol@lval+3,w
 14196  07DB  00C7               	movwf	?___fttol+3
 14197  07DC  084F               	movf	___fttol@lval+2,w
 14198  07DD  00C6               	movwf	?___fttol+2
 14199  07DE  084E               	movf	___fttol@lval+1,w
 14200  07DF  00C5               	movwf	?___fttol+1
 14201  07E0  084D               	movf	___fttol@lval,w
 14202  07E1  00C4               	movwf	?___fttol
 14203  07E2  0008               	return
 14204  07E3                     __end_of___fttol:	
 14205                           
 14206                           	psect	text105
 14207  0442                     __ptext105:	
 14208 ;; *************** function ___ftmul *****************
 14209 ;; Defined at:
 14210 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14211 ;; Parameters:    Size  Location     Type
 14212 ;;  f1              3    7[BANK0 ] float 
 14213 ;;  f2              3   10[BANK0 ] float 
 14214 ;; Auto vars:     Size  Location     Type
 14215 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
 14216 ;;  sign            1   22[BANK0 ] unsigned char 
 14217 ;;  cntr            1   21[BANK0 ] unsigned char 
 14218 ;;  exp             1   17[BANK0 ] unsigned char 
 14219 ;; Return value:  Size  Location     Type
 14220 ;;                  3    7[BANK0 ] float 
 14221 ;; Registers used:
 14222 ;;		wreg, status,2, status,0, pclath, cstack
 14223 ;; Tracked objects:
 14224 ;;		On entry : 0/0
 14225 ;;		On exit  : 0/0
 14226 ;;		Unchanged: 0/0
 14227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14228 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14229 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14230 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;Total ram usage:       16 bytes
 14233 ;; Hardware stack levels used:    1
 14234 ;; Hardware stack levels required when called:    4
 14235 ;; This function calls:
 14236 ;;		___ftpack
 14237 ;; This function is called by:
 14238 ;;		_getDimmerLights_PercentToValue
 14239 ;; This function uses a non-reentrant model
 14240 ;;
 14241                           
 14242                           
 14243                           ;psect for function ___ftmul
 14244  0442                     ___ftmul:	
 14245                           
 14246                           ;incstack = 0
 14247                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14248  0442  0020               	movlb	0	; select bank0
 14249  0443  0827               	movf	___ftmul@f1,w
 14250  0444  00AD               	movwf	??___ftmul
 14251  0445  0828               	movf	___ftmul@f1+1,w
 14252  0446  00AE               	movwf	??___ftmul+1
 14253  0447  0829               	movf	___ftmul@f1+2,w
 14254  0448  00AF               	movwf	??___ftmul+2
 14255  0449  1003               	clrc
 14256  044A  0D2E               	rlf	??___ftmul+1,w
 14257  044B  0D2F               	rlf	??___ftmul+2,w
 14258  044C  00B0               	movwf	??___ftmul+3
 14259  044D  0830               	movf	??___ftmul+3,w
 14260  044E  00B1               	movwf	___ftmul@exp
 14261  044F  08B1               	movf	___ftmul@exp,f
 14262  0450  1D03               	skipz
 14263  0451  2C59               	goto	l8693
 14264  0452  3000               	movlw	0
 14265  0453  00A7               	movwf	?___ftmul
 14266  0454  3000               	movlw	0
 14267  0455  00A8               	movwf	?___ftmul+1
 14268  0456  3000               	movlw	0
 14269  0457  00A9               	movwf	?___ftmul+2
 14270  0458  0008               	return
 14271  0459                     l8693:	
 14272  0459  082A               	movf	___ftmul@f2,w
 14273  045A  00AD               	movwf	??___ftmul
 14274  045B  082B               	movf	___ftmul@f2+1,w
 14275  045C  00AE               	movwf	??___ftmul+1
 14276  045D  082C               	movf	___ftmul@f2+2,w
 14277  045E  00AF               	movwf	??___ftmul+2
 14278  045F  1003               	clrc
 14279  0460  0D2E               	rlf	??___ftmul+1,w
 14280  0461  0D2F               	rlf	??___ftmul+2,w
 14281  0462  00B0               	movwf	??___ftmul+3
 14282  0463  0830               	movf	??___ftmul+3,w
 14283  0464  00B6               	movwf	___ftmul@sign
 14284  0465  08B6               	movf	___ftmul@sign,f
 14285  0466  1D03               	skipz
 14286  0467  2C6F               	goto	l8699
 14287  0468  3000               	movlw	0
 14288  0469  00A7               	movwf	?___ftmul
 14289  046A  3000               	movlw	0
 14290  046B  00A8               	movwf	?___ftmul+1
 14291  046C  3000               	movlw	0
 14292  046D  00A9               	movwf	?___ftmul+2
 14293  046E  0008               	return
 14294  046F                     l8699:	
 14295  046F  0836               	movf	___ftmul@sign,w
 14296  0470  3E7B               	addlw	123
 14297  0471  00AD               	movwf	??___ftmul
 14298  0472  082D               	movf	??___ftmul,w
 14299  0473  07B1               	addwf	___ftmul@exp,f
 14300  0474  0827               	movf	___ftmul@f1,w
 14301  0475  00AD               	movwf	??___ftmul
 14302  0476  0828               	movf	___ftmul@f1+1,w
 14303  0477  00AE               	movwf	??___ftmul+1
 14304  0478  0829               	movf	___ftmul@f1+2,w
 14305  0479  00AF               	movwf	??___ftmul+2
 14306  047A  3010               	movlw	16
 14307  047B                     u9045:	
 14308  047B  36AF               	lsrf	??___ftmul+2,f
 14309  047C  0CAE               	rrf	??___ftmul+1,f
 14310  047D  0CAD               	rrf	??___ftmul,f
 14311  047E  0B89               	decfsz	9,f
 14312  047F  2C7B               	goto	u9045
 14313  0480  082D               	movf	??___ftmul,w
 14314  0481  00B0               	movwf	??___ftmul+3
 14315  0482  0830               	movf	??___ftmul+3,w
 14316  0483  00B6               	movwf	___ftmul@sign
 14317  0484  082A               	movf	___ftmul@f2,w
 14318  0485  00AD               	movwf	??___ftmul
 14319  0486  082B               	movf	___ftmul@f2+1,w
 14320  0487  00AE               	movwf	??___ftmul+1
 14321  0488  082C               	movf	___ftmul@f2+2,w
 14322  0489  00AF               	movwf	??___ftmul+2
 14323  048A  3010               	movlw	16
 14324  048B                     u9055:	
 14325  048B  36AF               	lsrf	??___ftmul+2,f
 14326  048C  0CAE               	rrf	??___ftmul+1,f
 14327  048D  0CAD               	rrf	??___ftmul,f
 14328  048E  0B89               	decfsz	9,f
 14329  048F  2C8B               	goto	u9055
 14330  0490  082D               	movf	??___ftmul,w
 14331  0491  00B0               	movwf	??___ftmul+3
 14332  0492  0830               	movf	??___ftmul+3,w
 14333  0493  06B6               	xorwf	___ftmul@sign,f
 14334  0494  3080               	movlw	128
 14335  0495  00AD               	movwf	??___ftmul
 14336  0496  082D               	movf	??___ftmul,w
 14337  0497  05B6               	andwf	___ftmul@sign,f
 14338  0498  17A8               	bsf	___ftmul@f1+1,7
 14339  0499  17AB               	bsf	___ftmul@f2+1,7
 14340  049A  30FF               	movlw	255
 14341  049B  05AA               	andwf	___ftmul@f2,f
 14342  049C  30FF               	movlw	255
 14343  049D  05AB               	andwf	___ftmul@f2+1,f
 14344  049E  3000               	movlw	0
 14345  049F  05AC               	andwf	___ftmul@f2+2,f
 14346  04A0  3000               	movlw	0
 14347  04A1  00B2               	movwf	___ftmul@f3_as_product
 14348  04A2  3000               	movlw	0
 14349  04A3  00B3               	movwf	___ftmul@f3_as_product+1
 14350  04A4  3000               	movlw	0
 14351  04A5  00B4               	movwf	___ftmul@f3_as_product+2
 14352  04A6  3007               	movlw	7
 14353  04A7  00AD               	movwf	??___ftmul
 14354  04A8  082D               	movf	??___ftmul,w
 14355  04A9  00B5               	movwf	___ftmul@cntr
 14356  04AA                     l8711:	
 14357  04AA  1C27               	btfss	___ftmul@f1,0
 14358  04AB  2CB2               	goto	l8715
 14359  04AC  082A               	movf	___ftmul@f2,w
 14360  04AD  07B2               	addwf	___ftmul@f3_as_product,f
 14361  04AE  082B               	movf	___ftmul@f2+1,w
 14362  04AF  3DB3               	addwfc	___ftmul@f3_as_product+1,f
 14363  04B0  082C               	movf	___ftmul@f2+2,w
 14364  04B1  3DB4               	addwfc	___ftmul@f3_as_product+2,f
 14365  04B2                     l8715:	
 14366  04B2  3001               	movlw	1
 14367  04B3                     u9075:	
 14368  04B3  36A9               	lsrf	___ftmul@f1+2,f
 14369  04B4  0CA8               	rrf	___ftmul@f1+1,f
 14370  04B5  0CA7               	rrf	___ftmul@f1,f
 14371  04B6  0B89               	decfsz	9,f
 14372  04B7  2CB3               	goto	u9075
 14373  04B8  3001               	movlw	1
 14374  04B9                     u9085:	
 14375  04B9  35AA               	lslf	___ftmul@f2,f
 14376  04BA  0DAB               	rlf	___ftmul@f2+1,f
 14377  04BB  0DAC               	rlf	___ftmul@f2+2,f
 14378  04BC  0B89               	decfsz	9,f
 14379  04BD  2CB9               	goto	u9085
 14380  04BE  3001               	movlw	1
 14381  04BF  02B5               	subwf	___ftmul@cntr,f
 14382  04C0  1D03               	btfss	3,2
 14383  04C1  2CAA               	goto	l8711
 14384  04C2  3009               	movlw	9
 14385  04C3  00AD               	movwf	??___ftmul
 14386  04C4  082D               	movf	??___ftmul,w
 14387  04C5  00B5               	movwf	___ftmul@cntr
 14388  04C6                     l8723:	
 14389  04C6  1C27               	btfss	___ftmul@f1,0
 14390  04C7  2CCE               	goto	l8727
 14391  04C8  082A               	movf	___ftmul@f2,w
 14392  04C9  07B2               	addwf	___ftmul@f3_as_product,f
 14393  04CA  082B               	movf	___ftmul@f2+1,w
 14394  04CB  3DB3               	addwfc	___ftmul@f3_as_product+1,f
 14395  04CC  082C               	movf	___ftmul@f2+2,w
 14396  04CD  3DB4               	addwfc	___ftmul@f3_as_product+2,f
 14397  04CE                     l8727:	
 14398  04CE  3001               	movlw	1
 14399  04CF                     u9115:	
 14400  04CF  36A9               	lsrf	___ftmul@f1+2,f
 14401  04D0  0CA8               	rrf	___ftmul@f1+1,f
 14402  04D1  0CA7               	rrf	___ftmul@f1,f
 14403  04D2  0B89               	decfsz	9,f
 14404  04D3  2CCF               	goto	u9115
 14405  04D4  3001               	movlw	1
 14406  04D5                     u9125:	
 14407  04D5  36B4               	lsrf	___ftmul@f3_as_product+2,f
 14408  04D6  0CB3               	rrf	___ftmul@f3_as_product+1,f
 14409  04D7  0CB2               	rrf	___ftmul@f3_as_product,f
 14410  04D8  0B89               	decfsz	9,f
 14411  04D9  2CD5               	goto	u9125
 14412  04DA  3001               	movlw	1
 14413  04DB  02B5               	subwf	___ftmul@cntr,f
 14414  04DC  1D03               	btfss	3,2
 14415  04DD  2CC6               	goto	l8723
 14416  04DE  0832               	movf	___ftmul@f3_as_product,w
 14417  04DF  00F2               	movwf	___ftpack@arg
 14418  04E0  0833               	movf	___ftmul@f3_as_product+1,w
 14419  04E1  00F3               	movwf	___ftpack@arg+1
 14420  04E2  0834               	movf	___ftmul@f3_as_product+2,w
 14421  04E3  00F4               	movwf	___ftpack@arg+2
 14422  04E4  0831               	movf	___ftmul@exp,w
 14423  04E5  00AD               	movwf	??___ftmul
 14424  04E6  082D               	movf	??___ftmul,w
 14425  04E7  00F5               	movwf	___ftpack@exp
 14426  04E8  0836               	movf	___ftmul@sign,w
 14427  04E9  00AE               	movwf	??___ftmul+1
 14428  04EA  082E               	movf	??___ftmul+1,w
 14429  04EB  00F6               	movwf	___ftpack@sign
 14430  04EC  318C  2440         	fcall	___ftpack
 14431  04EE  0872               	movf	?___ftpack,w
 14432  04EF  0020               	movlb	0	; select bank0
 14433  04F0  00A7               	movwf	?___ftmul
 14434  04F1  0873               	movf	?___ftpack+1,w
 14435  04F2  00A8               	movwf	?___ftmul+1
 14436  04F3  0874               	movf	?___ftpack+2,w
 14437  04F4  00A9               	movwf	?___ftmul+2
 14438  04F5  0008               	return
 14439  04F6                     __end_of___ftmul:	
 14440                           
 14441                           	psect	text106
 14442  05A3                     __ptext106:	
 14443 ;; *************** function ___ftdiv *****************
 14444 ;; Defined at:
 14445 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;  f2              3    7[BANK0 ] float 
 14448 ;;  f1              3   10[BANK0 ] float 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  f3              3   18[BANK0 ] float 
 14451 ;;  sign            1   22[BANK0 ] unsigned char 
 14452 ;;  exp             1   21[BANK0 ] unsigned char 
 14453 ;;  cntr            1   17[BANK0 ] unsigned char 
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  3    7[BANK0 ] float 
 14456 ;; Registers used:
 14457 ;;		wreg, status,2, status,0, pclath, cstack
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14463 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14466 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14467 ;;Total ram usage:       16 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    4
 14470 ;; This function calls:
 14471 ;;		___ftpack
 14472 ;; This function is called by:
 14473 ;;		_getDimmerLights_PercentToValue
 14474 ;;		_getDimmerLights_ValueToPercent
 14475 ;; This function uses a non-reentrant model
 14476 ;;
 14477                           
 14478                           
 14479                           ;psect for function ___ftdiv
 14480  05A3                     ___ftdiv:	
 14481                           
 14482                           ;incstack = 0
 14483                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14484  05A3  0020               	movlb	0	; select bank0
 14485  05A4  082A               	movf	___ftdiv@f1,w
 14486  05A5  00AD               	movwf	??___ftdiv
 14487  05A6  082B               	movf	___ftdiv@f1+1,w
 14488  05A7  00AE               	movwf	??___ftdiv+1
 14489  05A8  082C               	movf	___ftdiv@f1+2,w
 14490  05A9  00AF               	movwf	??___ftdiv+2
 14491  05AA  1003               	clrc
 14492  05AB  0D2E               	rlf	??___ftdiv+1,w
 14493  05AC  0D2F               	rlf	??___ftdiv+2,w
 14494  05AD  00B0               	movwf	??___ftdiv+3
 14495  05AE  0830               	movf	??___ftdiv+3,w
 14496  05AF  00B5               	movwf	___ftdiv@exp
 14497  05B0  08B5               	movf	___ftdiv@exp,f
 14498  05B1  1D03               	skipz
 14499  05B2  2DBA               	goto	l8651
 14500  05B3  3000               	movlw	0
 14501  05B4  00A7               	movwf	?___ftdiv
 14502  05B5  3000               	movlw	0
 14503  05B6  00A8               	movwf	?___ftdiv+1
 14504  05B7  3000               	movlw	0
 14505  05B8  00A9               	movwf	?___ftdiv+2
 14506  05B9  0008               	return
 14507  05BA                     l8651:	
 14508  05BA  0827               	movf	___ftdiv@f2,w
 14509  05BB  00AD               	movwf	??___ftdiv
 14510  05BC  0828               	movf	___ftdiv@f2+1,w
 14511  05BD  00AE               	movwf	??___ftdiv+1
 14512  05BE  0829               	movf	___ftdiv@f2+2,w
 14513  05BF  00AF               	movwf	??___ftdiv+2
 14514  05C0  1003               	clrc
 14515  05C1  0D2E               	rlf	??___ftdiv+1,w
 14516  05C2  0D2F               	rlf	??___ftdiv+2,w
 14517  05C3  00B0               	movwf	??___ftdiv+3
 14518  05C4  0830               	movf	??___ftdiv+3,w
 14519  05C5  00B6               	movwf	___ftdiv@sign
 14520  05C6  08B6               	movf	___ftdiv@sign,f
 14521  05C7  1D03               	skipz
 14522  05C8  2DD0               	goto	l8657
 14523  05C9  3000               	movlw	0
 14524  05CA  00A7               	movwf	?___ftdiv
 14525  05CB  3000               	movlw	0
 14526  05CC  00A8               	movwf	?___ftdiv+1
 14527  05CD  3000               	movlw	0
 14528  05CE  00A9               	movwf	?___ftdiv+2
 14529  05CF  0008               	return
 14530  05D0                     l8657:	
 14531  05D0  3000               	movlw	0
 14532  05D1  00B2               	movwf	___ftdiv@f3
 14533  05D2  3000               	movlw	0
 14534  05D3  00B3               	movwf	___ftdiv@f3+1
 14535  05D4  3000               	movlw	0
 14536  05D5  00B4               	movwf	___ftdiv@f3+2
 14537  05D6  3089               	movlw	137
 14538  05D7  0736               	addwf	___ftdiv@sign,w
 14539  05D8  00AD               	movwf	??___ftdiv
 14540  05D9  082D               	movf	??___ftdiv,w
 14541  05DA  02B5               	subwf	___ftdiv@exp,f
 14542  05DB  082A               	movf	___ftdiv@f1,w
 14543  05DC  00AD               	movwf	??___ftdiv
 14544  05DD  082B               	movf	___ftdiv@f1+1,w
 14545  05DE  00AE               	movwf	??___ftdiv+1
 14546  05DF  082C               	movf	___ftdiv@f1+2,w
 14547  05E0  00AF               	movwf	??___ftdiv+2
 14548  05E1  3010               	movlw	16
 14549  05E2                     u8965:	
 14550  05E2  36AF               	lsrf	??___ftdiv+2,f
 14551  05E3  0CAE               	rrf	??___ftdiv+1,f
 14552  05E4  0CAD               	rrf	??___ftdiv,f
 14553  05E5  0B89               	decfsz	9,f
 14554  05E6  2DE2               	goto	u8965
 14555  05E7  082D               	movf	??___ftdiv,w
 14556  05E8  00B0               	movwf	??___ftdiv+3
 14557  05E9  0830               	movf	??___ftdiv+3,w
 14558  05EA  00B6               	movwf	___ftdiv@sign
 14559  05EB  0827               	movf	___ftdiv@f2,w
 14560  05EC  00AD               	movwf	??___ftdiv
 14561  05ED  0828               	movf	___ftdiv@f2+1,w
 14562  05EE  00AE               	movwf	??___ftdiv+1
 14563  05EF  0829               	movf	___ftdiv@f2+2,w
 14564  05F0  00AF               	movwf	??___ftdiv+2
 14565  05F1  3010               	movlw	16
 14566  05F2                     u8975:	
 14567  05F2  36AF               	lsrf	??___ftdiv+2,f
 14568  05F3  0CAE               	rrf	??___ftdiv+1,f
 14569  05F4  0CAD               	rrf	??___ftdiv,f
 14570  05F5  0B89               	decfsz	9,f
 14571  05F6  2DF2               	goto	u8975
 14572  05F7  082D               	movf	??___ftdiv,w
 14573  05F8  00B0               	movwf	??___ftdiv+3
 14574  05F9  0830               	movf	??___ftdiv+3,w
 14575  05FA  06B6               	xorwf	___ftdiv@sign,f
 14576  05FB  3080               	movlw	128
 14577  05FC  00AD               	movwf	??___ftdiv
 14578  05FD  082D               	movf	??___ftdiv,w
 14579  05FE  05B6               	andwf	___ftdiv@sign,f
 14580  05FF  17AB               	bsf	___ftdiv@f1+1,7
 14581  0600  30FF               	movlw	255
 14582  0601  05AA               	andwf	___ftdiv@f1,f
 14583  0602  30FF               	movlw	255
 14584  0603  05AB               	andwf	___ftdiv@f1+1,f
 14585  0604  3000               	movlw	0
 14586  0605  05AC               	andwf	___ftdiv@f1+2,f
 14587  0606  17A8               	bsf	___ftdiv@f2+1,7
 14588  0607  30FF               	movlw	255
 14589  0608  05A7               	andwf	___ftdiv@f2,f
 14590  0609  30FF               	movlw	255
 14591  060A  05A8               	andwf	___ftdiv@f2+1,f
 14592  060B  3000               	movlw	0
 14593  060C  05A9               	andwf	___ftdiv@f2+2,f
 14594  060D  3018               	movlw	24
 14595  060E  00AD               	movwf	??___ftdiv
 14596  060F  082D               	movf	??___ftdiv,w
 14597  0610  00B1               	movwf	___ftdiv@cntr
 14598  0611                     l8671:	
 14599  0611  3001               	movlw	1
 14600  0612                     u8985:	
 14601  0612  35B2               	lslf	___ftdiv@f3,f
 14602  0613  0DB3               	rlf	___ftdiv@f3+1,f
 14603  0614  0DB4               	rlf	___ftdiv@f3+2,f
 14604  0615  0B89               	decfsz	9,f
 14605  0616  2E12               	goto	u8985
 14606  0617  0829               	movf	___ftdiv@f2+2,w
 14607  0618  022C               	subwf	___ftdiv@f1+2,w
 14608  0619  1D03               	skipz
 14609  061A  2E21               	goto	u8995
 14610  061B  0828               	movf	___ftdiv@f2+1,w
 14611  061C  022B               	subwf	___ftdiv@f1+1,w
 14612  061D  1D03               	skipz
 14613  061E  2E21               	goto	u8995
 14614  061F  0827               	movf	___ftdiv@f2,w
 14615  0620  022A               	subwf	___ftdiv@f1,w
 14616  0621                     u8995:	
 14617  0621  1C03               	skipc
 14618  0622  2E2A               	goto	l8679
 14619  0623  0827               	movf	___ftdiv@f2,w
 14620  0624  02AA               	subwf	___ftdiv@f1,f
 14621  0625  0828               	movf	___ftdiv@f2+1,w
 14622  0626  3BAB               	subwfb	___ftdiv@f1+1,f
 14623  0627  0829               	movf	___ftdiv@f2+2,w
 14624  0628  3BAC               	subwfb	___ftdiv@f1+2,f
 14625  0629  1432               	bsf	___ftdiv@f3,0
 14626  062A                     l8679:	
 14627  062A  3001               	movlw	1
 14628  062B                     u9005:	
 14629  062B  35AA               	lslf	___ftdiv@f1,f
 14630  062C  0DAB               	rlf	___ftdiv@f1+1,f
 14631  062D  0DAC               	rlf	___ftdiv@f1+2,f
 14632  062E  0B89               	decfsz	9,f
 14633  062F  2E2B               	goto	u9005
 14634  0630  3001               	movlw	1
 14635  0631  02B1               	subwf	___ftdiv@cntr,f
 14636  0632  1D03               	btfss	3,2
 14637  0633  2E11               	goto	l8671
 14638  0634  0832               	movf	___ftdiv@f3,w
 14639  0635  00F2               	movwf	___ftpack@arg
 14640  0636  0833               	movf	___ftdiv@f3+1,w
 14641  0637  00F3               	movwf	___ftpack@arg+1
 14642  0638  0834               	movf	___ftdiv@f3+2,w
 14643  0639  00F4               	movwf	___ftpack@arg+2
 14644  063A  0835               	movf	___ftdiv@exp,w
 14645  063B  00AD               	movwf	??___ftdiv
 14646  063C  082D               	movf	??___ftdiv,w
 14647  063D  00F5               	movwf	___ftpack@exp
 14648  063E  0836               	movf	___ftdiv@sign,w
 14649  063F  00AE               	movwf	??___ftdiv+1
 14650  0640  082E               	movf	??___ftdiv+1,w
 14651  0641  00F6               	movwf	___ftpack@sign
 14652  0642  318C  2440         	fcall	___ftpack
 14653  0644  0872               	movf	?___ftpack,w
 14654  0645  0020               	movlb	0	; select bank0
 14655  0646  00A7               	movwf	?___ftdiv
 14656  0647  0873               	movf	?___ftpack+1,w
 14657  0648  00A8               	movwf	?___ftdiv+1
 14658  0649  0874               	movf	?___ftpack+2,w
 14659  064A  00A9               	movwf	?___ftdiv+2
 14660  064B  0008               	return
 14661  064C                     __end_of___ftdiv:	
 14662                           
 14663                           	psect	text107
 14664  01C2                     __ptext107:	
 14665 ;; *************** function ___ftadd *****************
 14666 ;; Defined at:
 14667 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  f1              3   23[BANK0 ] float 
 14670 ;;  f2              3   26[BANK0 ] float 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  exp1            1   35[BANK0 ] unsigned char 
 14673 ;;  exp2            1   34[BANK0 ] unsigned char 
 14674 ;;  sign            1   33[BANK0 ] unsigned char 
 14675 ;; Return value:  Size  Location     Type
 14676 ;;                  3   23[BANK0 ] float 
 14677 ;; Registers used:
 14678 ;;		wreg, status,2, status,0, pclath, cstack
 14679 ;; Tracked objects:
 14680 ;;		On entry : 0/0
 14681 ;;		On exit  : 0/0
 14682 ;;		Unchanged: 0/0
 14683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14684 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14688 ;;Total ram usage:       13 bytes
 14689 ;; Hardware stack levels used:    1
 14690 ;; Hardware stack levels required when called:    4
 14691 ;; This function calls:
 14692 ;;		___ftpack
 14693 ;; This function is called by:
 14694 ;;		_getDimmerLights_PercentToValue
 14695 ;; This function uses a non-reentrant model
 14696 ;;
 14697                           
 14698                           
 14699                           ;psect for function ___ftadd
 14700  01C2                     ___ftadd:	
 14701                           
 14702                           ;incstack = 0
 14703                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14704  01C2  0020               	movlb	0	; select bank0
 14705  01C3  0837               	movf	___ftadd@f1,w
 14706  01C4  00BD               	movwf	??___ftadd
 14707  01C5  0838               	movf	___ftadd@f1+1,w
 14708  01C6  00BE               	movwf	??___ftadd+1
 14709  01C7  0839               	movf	___ftadd@f1+2,w
 14710  01C8  00BF               	movwf	??___ftadd+2
 14711  01C9  1003               	clrc
 14712  01CA  0D3E               	rlf	??___ftadd+1,w
 14713  01CB  0D3F               	rlf	??___ftadd+2,w
 14714  01CC  00C0               	movwf	??___ftadd+3
 14715  01CD  0840               	movf	??___ftadd+3,w
 14716  01CE  00C3               	movwf	___ftadd@exp1
 14717  01CF  083A               	movf	___ftadd@f2,w
 14718  01D0  00BD               	movwf	??___ftadd
 14719  01D1  083B               	movf	___ftadd@f2+1,w
 14720  01D2  00BE               	movwf	??___ftadd+1
 14721  01D3  083C               	movf	___ftadd@f2+2,w
 14722  01D4  00BF               	movwf	??___ftadd+2
 14723  01D5  1003               	clrc
 14724  01D6  0D3E               	rlf	??___ftadd+1,w
 14725  01D7  0D3F               	rlf	??___ftadd+2,w
 14726  01D8  00C0               	movwf	??___ftadd+3
 14727  01D9  0840               	movf	??___ftadd+3,w
 14728  01DA  00C2               	movwf	___ftadd@exp2
 14729  01DB  0843               	movf	___ftadd@exp1,w
 14730  01DC  1903               	btfsc	3,2
 14731  01DD  29EA               	goto	l8581
 14732  01DE  0842               	movf	___ftadd@exp2,w
 14733  01DF  0243               	subwf	___ftadd@exp1,w
 14734  01E0  1803               	skipnc
 14735  01E1  29F1               	goto	l8585
 14736  01E2  0343               	decf	___ftadd@exp1,w
 14737  01E3  3AFF               	xorlw	255
 14738  01E4  0742               	addwf	___ftadd@exp2,w
 14739  01E5  00BD               	movwf	??___ftadd
 14740  01E6  3019               	movlw	25
 14741  01E7  023D               	subwf	??___ftadd,w
 14742  01E8  1C03               	skipc
 14743  01E9  29F1               	goto	l8585
 14744  01EA                     l8581:	
 14745  01EA  083A               	movf	___ftadd@f2,w
 14746  01EB  00B7               	movwf	?___ftadd
 14747  01EC  083B               	movf	___ftadd@f2+1,w
 14748  01ED  00B8               	movwf	?___ftadd+1
 14749  01EE  083C               	movf	___ftadd@f2+2,w
 14750  01EF  00B9               	movwf	?___ftadd+2
 14751  01F0  0008               	return
 14752  01F1                     l8585:	
 14753  01F1  0842               	movf	___ftadd@exp2,w
 14754  01F2  1903               	btfsc	3,2
 14755  01F3  0008               	return
 14756  01F4  0843               	movf	___ftadd@exp1,w
 14757  01F5  0242               	subwf	___ftadd@exp2,w
 14758  01F6  1803               	skipnc
 14759  01F7  2A00               	goto	l8591
 14760  01F8  0342               	decf	___ftadd@exp2,w
 14761  01F9  3AFF               	xorlw	255
 14762  01FA  0743               	addwf	___ftadd@exp1,w
 14763  01FB  00BD               	movwf	??___ftadd
 14764  01FC  3019               	movlw	25
 14765  01FD  023D               	subwf	??___ftadd,w
 14766  01FE  1803               	btfsc	3,0
 14767  01FF  0008               	return
 14768  0200                     l8591:	
 14769  0200  3006               	movlw	6
 14770  0201  00BD               	movwf	??___ftadd
 14771  0202  083D               	movf	??___ftadd,w
 14772  0203  00C1               	movwf	___ftadd@sign
 14773  0204  1BB9               	btfsc	___ftadd@f1+2,7
 14774  0205  17C1               	bsf	___ftadd@sign,7
 14775  0206  1BBC               	btfsc	___ftadd@f2+2,7
 14776  0207  1741               	bsf	___ftadd@sign,6
 14777  0208  17B8               	bsf	___ftadd@f1+1,7
 14778  0209  30FF               	movlw	255
 14779  020A  05B7               	andwf	___ftadd@f1,f
 14780  020B  30FF               	movlw	255
 14781  020C  05B8               	andwf	___ftadd@f1+1,f
 14782  020D  3000               	movlw	0
 14783  020E  05B9               	andwf	___ftadd@f1+2,f
 14784  020F  17BB               	bsf	___ftadd@f2+1,7
 14785  0210  30FF               	movlw	255
 14786  0211  05BA               	andwf	___ftadd@f2,f
 14787  0212  30FF               	movlw	255
 14788  0213  05BB               	andwf	___ftadd@f2+1,f
 14789  0214  3000               	movlw	0
 14790  0215  05BC               	andwf	___ftadd@f2+2,f
 14791  0216  0842               	movf	___ftadd@exp2,w
 14792  0217  0243               	subwf	___ftadd@exp1,w
 14793  0218  1803               	skipnc
 14794  0219  2A3C               	goto	l8613
 14795  021A                     l8603:	
 14796  021A  3001               	movlw	1
 14797  021B                     u8805:	
 14798  021B  35BA               	lslf	___ftadd@f2,f
 14799  021C  0DBB               	rlf	___ftadd@f2+1,f
 14800  021D  0DBC               	rlf	___ftadd@f2+2,f
 14801  021E  0B89               	decfsz	9,f
 14802  021F  2A1B               	goto	u8805
 14803  0220  3001               	movlw	1
 14804  0221  02C2               	subwf	___ftadd@exp2,f
 14805  0222  0842               	movf	___ftadd@exp2,w
 14806  0223  0643               	xorwf	___ftadd@exp1,w
 14807  0224  1903               	skipnz
 14808  0225  2A37               	goto	l8611
 14809  0226  3001               	movlw	1
 14810  0227  02C1               	subwf	___ftadd@sign,f
 14811  0228  0841               	movf	___ftadd@sign,w
 14812  0229  3907               	andlw	7
 14813  022A  1903               	btfsc	3,2
 14814  022B  2A37               	goto	l8611
 14815  022C  2A1A               	goto	l8603
 14816  022D                     l8609:	
 14817  022D  3001               	movlw	1
 14818  022E                     u8835:	
 14819  022E  36B9               	lsrf	___ftadd@f1+2,f
 14820  022F  0CB8               	rrf	___ftadd@f1+1,f
 14821  0230  0CB7               	rrf	___ftadd@f1,f
 14822  0231  0B89               	decfsz	9,f
 14823  0232  2A2E               	goto	u8835
 14824  0233  3001               	movlw	1
 14825  0234  00BD               	movwf	??___ftadd
 14826  0235  083D               	movf	??___ftadd,w
 14827  0236  07C3               	addwf	___ftadd@exp1,f
 14828  0237                     l8611:	
 14829  0237  0843               	movf	___ftadd@exp1,w
 14830  0238  0642               	xorwf	___ftadd@exp2,w
 14831  0239  1903               	btfsc	3,2
 14832  023A  2A61               	goto	l2702
 14833  023B  2A2D               	goto	l8609
 14834  023C                     l8613:	
 14835  023C  0843               	movf	___ftadd@exp1,w
 14836  023D  0242               	subwf	___ftadd@exp2,w
 14837  023E  1803               	skipnc
 14838  023F  2A61               	goto	l2702
 14839  0240                     l8615:	
 14840  0240  3001               	movlw	1
 14841  0241                     u8865:	
 14842  0241  35B7               	lslf	___ftadd@f1,f
 14843  0242  0DB8               	rlf	___ftadd@f1+1,f
 14844  0243  0DB9               	rlf	___ftadd@f1+2,f
 14845  0244  0B89               	decfsz	9,f
 14846  0245  2A41               	goto	u8865
 14847  0246  3001               	movlw	1
 14848  0247  02C3               	subwf	___ftadd@exp1,f
 14849  0248  0842               	movf	___ftadd@exp2,w
 14850  0249  0643               	xorwf	___ftadd@exp1,w
 14851  024A  1903               	skipnz
 14852  024B  2A5D               	goto	l8623
 14853  024C  3001               	movlw	1
 14854  024D  02C1               	subwf	___ftadd@sign,f
 14855  024E  0841               	movf	___ftadd@sign,w
 14856  024F  3907               	andlw	7
 14857  0250  1903               	btfsc	3,2
 14858  0251  2A5D               	goto	l8623
 14859  0252  2A40               	goto	l8615
 14860  0253                     l8621:	
 14861  0253  3001               	movlw	1
 14862  0254                     u8895:	
 14863  0254  36BC               	lsrf	___ftadd@f2+2,f
 14864  0255  0CBB               	rrf	___ftadd@f2+1,f
 14865  0256  0CBA               	rrf	___ftadd@f2,f
 14866  0257  0B89               	decfsz	9,f
 14867  0258  2A54               	goto	u8895
 14868  0259  3001               	movlw	1
 14869  025A  00BD               	movwf	??___ftadd
 14870  025B  083D               	movf	??___ftadd,w
 14871  025C  07C2               	addwf	___ftadd@exp2,f
 14872  025D                     l8623:	
 14873  025D  0843               	movf	___ftadd@exp1,w
 14874  025E  0642               	xorwf	___ftadd@exp2,w
 14875  025F  1D03               	skipz
 14876  0260  2A53               	goto	l8621
 14877  0261                     l2702:	
 14878  0261  1FC1               	btfss	___ftadd@sign,7
 14879  0262  2A73               	goto	l8627
 14880  0263  30FF               	movlw	255
 14881  0264  06B7               	xorwf	___ftadd@f1,f
 14882  0265  30FF               	movlw	255
 14883  0266  06B8               	xorwf	___ftadd@f1+1,f
 14884  0267  30FF               	movlw	255
 14885  0268  06B9               	xorwf	___ftadd@f1+2,f
 14886  0269  3001               	movlw	1
 14887  026A  07B7               	addwf	___ftadd@f1,f
 14888  026B  3000               	movlw	0
 14889  026C  1803               	skipnc
 14890  026D  3001               	movlw	1
 14891  026E  07B8               	addwf	___ftadd@f1+1,f
 14892  026F  3000               	movlw	0
 14893  0270  1803               	skipnc
 14894  0271  3001               	movlw	1
 14895  0272  07B9               	addwf	___ftadd@f1+2,f
 14896  0273                     l8627:	
 14897  0273  1F41               	btfss	___ftadd@sign,6
 14898  0274  2A85               	goto	l8631
 14899  0275  30FF               	movlw	255
 14900  0276  06BA               	xorwf	___ftadd@f2,f
 14901  0277  30FF               	movlw	255
 14902  0278  06BB               	xorwf	___ftadd@f2+1,f
 14903  0279  30FF               	movlw	255
 14904  027A  06BC               	xorwf	___ftadd@f2+2,f
 14905  027B  3001               	movlw	1
 14906  027C  07BA               	addwf	___ftadd@f2,f
 14907  027D  3000               	movlw	0
 14908  027E  1803               	skipnc
 14909  027F  3001               	movlw	1
 14910  0280  07BB               	addwf	___ftadd@f2+1,f
 14911  0281  3000               	movlw	0
 14912  0282  1803               	skipnc
 14913  0283  3001               	movlw	1
 14914  0284  07BC               	addwf	___ftadd@f2+2,f
 14915  0285                     l8631:	
 14916  0285  01C1               	clrf	___ftadd@sign
 14917  0286  0837               	movf	___ftadd@f1,w
 14918  0287  07BA               	addwf	___ftadd@f2,f
 14919  0288  0838               	movf	___ftadd@f1+1,w
 14920  0289  3DBB               	addwfc	___ftadd@f2+1,f
 14921  028A  0839               	movf	___ftadd@f1+2,w
 14922  028B  3DBC               	addwfc	___ftadd@f2+2,f
 14923  028C  1FBC               	btfss	___ftadd@f2+2,7
 14924  028D  2AA0               	goto	l8641
 14925  028E  30FF               	movlw	255
 14926  028F  06BA               	xorwf	___ftadd@f2,f
 14927  0290  30FF               	movlw	255
 14928  0291  06BB               	xorwf	___ftadd@f2+1,f
 14929  0292  30FF               	movlw	255
 14930  0293  06BC               	xorwf	___ftadd@f2+2,f
 14931  0294  3001               	movlw	1
 14932  0295  07BA               	addwf	___ftadd@f2,f
 14933  0296  3000               	movlw	0
 14934  0297  1803               	skipnc
 14935  0298  3001               	movlw	1
 14936  0299  07BB               	addwf	___ftadd@f2+1,f
 14937  029A  3000               	movlw	0
 14938  029B  1803               	skipnc
 14939  029C  3001               	movlw	1
 14940  029D  07BC               	addwf	___ftadd@f2+2,f
 14941  029E  01C1               	clrf	___ftadd@sign
 14942  029F  0AC1               	incf	___ftadd@sign,f
 14943  02A0                     l8641:	
 14944  02A0  083A               	movf	___ftadd@f2,w
 14945  02A1  00F2               	movwf	___ftpack@arg
 14946  02A2  083B               	movf	___ftadd@f2+1,w
 14947  02A3  00F3               	movwf	___ftpack@arg+1
 14948  02A4  083C               	movf	___ftadd@f2+2,w
 14949  02A5  00F4               	movwf	___ftpack@arg+2
 14950  02A6  0843               	movf	___ftadd@exp1,w
 14951  02A7  00BD               	movwf	??___ftadd
 14952  02A8  083D               	movf	??___ftadd,w
 14953  02A9  00F5               	movwf	___ftpack@exp
 14954  02AA  0841               	movf	___ftadd@sign,w
 14955  02AB  00BE               	movwf	??___ftadd+1
 14956  02AC  083E               	movf	??___ftadd+1,w
 14957  02AD  00F6               	movwf	___ftpack@sign
 14958  02AE  318C  2440         	fcall	___ftpack
 14959  02B0  0872               	movf	?___ftpack,w
 14960  02B1  0020               	movlb	0	; select bank0
 14961  02B2  00B7               	movwf	?___ftadd
 14962  02B3  0873               	movf	?___ftpack+1,w
 14963  02B4  00B8               	movwf	?___ftadd+1
 14964  02B5  0874               	movf	?___ftpack+2,w
 14965  02B6  00B9               	movwf	?___ftadd+2
 14966  02B7  0008               	return
 14967  02B8                     __end_of___ftadd:	
 14968                           
 14969                           	psect	text108
 14970  154B                     __ptext108:	
 14971 ;; *************** function ___awtoft *****************
 14972 ;; Defined at:
 14973 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14974 ;; Parameters:    Size  Location     Type
 14975 ;;  c               2    3[BANK0 ] int 
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;  sign            1    6[BANK0 ] unsigned char 
 14978 ;; Return value:  Size  Location     Type
 14979 ;;                  3    3[BANK0 ] float 
 14980 ;; Registers used:
 14981 ;;		wreg, status,2, status,0, pclath, cstack
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:        6 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    4
 14994 ;; This function calls:
 14995 ;;		___ftpack
 14996 ;; This function is called by:
 14997 ;;		_getDimmerLights_PercentToValue
 14998 ;;		_getDimmerLights_ValueToPercent
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           
 15003                           ;psect for function ___awtoft
 15004  154B                     ___awtoft:	
 15005                           
 15006                           ;incstack = 0
 15007                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15008  154B  0020               	movlb	0	; select bank0
 15009  154C  01A6               	clrf	___awtoft@sign
 15010  154D  1FA4               	btfss	___awtoft@c+1,7
 15011  154E  2D56               	goto	l8569
 15012  154F  09A3               	comf	___awtoft@c,f
 15013  1550  09A4               	comf	___awtoft@c+1,f
 15014  1551  0AA3               	incf	___awtoft@c,f
 15015  1552  1903               	skipnz
 15016  1553  0AA4               	incf	___awtoft@c+1,f
 15017  1554  01A6               	clrf	___awtoft@sign
 15018  1555  0AA6               	incf	___awtoft@sign,f
 15019  1556                     l8569:	
 15020  1556  0823               	movf	___awtoft@c,w
 15021  1557  00F2               	movwf	___ftpack@arg
 15022  1558  0824               	movf	___awtoft@c+1,w
 15023  1559  00F3               	movwf	___ftpack@arg+1
 15024  155A  01F4               	clrf	___ftpack@arg+2
 15025  155B  308E               	movlw	142
 15026  155C  00F7               	movwf	??___awtoft
 15027  155D  0877               	movf	??___awtoft,w
 15028  155E  00F5               	movwf	___ftpack@exp
 15029  155F  0826               	movf	___awtoft@sign,w
 15030  1560  00F8               	movwf	??___awtoft+1
 15031  1561  0878               	movf	??___awtoft+1,w
 15032  1562  00F6               	movwf	___ftpack@sign
 15033  1563  318C  2440         	fcall	___ftpack
 15034  1565  0872               	movf	?___ftpack,w
 15035  1566  0020               	movlb	0	; select bank0
 15036  1567  00A3               	movwf	?___awtoft
 15037  1568  0873               	movf	?___ftpack+1,w
 15038  1569  00A4               	movwf	?___awtoft+1
 15039  156A  0874               	movf	?___ftpack+2,w
 15040  156B  00A5               	movwf	?___awtoft+2
 15041  156C  0008               	return
 15042  156D                     __end_of___awtoft:	
 15043                           
 15044                           	psect	text109
 15045  0C40                     __ptext109:	
 15046 ;; *************** function ___ftpack *****************
 15047 ;; Defined at:
 15048 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;  arg             3    2[COMMON] unsigned um
 15051 ;;  exp             1    5[COMMON] unsigned char 
 15052 ;;  sign            1    6[COMMON] unsigned char 
 15053 ;; Auto vars:     Size  Location     Type
 15054 ;;		None
 15055 ;; Return value:  Size  Location     Type
 15056 ;;                  3    2[COMMON] float 
 15057 ;; Registers used:
 15058 ;;		wreg, status,2, status,0
 15059 ;; Tracked objects:
 15060 ;;		On entry : 0/0
 15061 ;;		On exit  : 0/0
 15062 ;;		Unchanged: 0/0
 15063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15064 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;Total ram usage:        8 bytes
 15069 ;; Hardware stack levels used:    1
 15070 ;; Hardware stack levels required when called:    3
 15071 ;; This function calls:
 15072 ;;		Nothing
 15073 ;; This function is called by:
 15074 ;;		___awtoft
 15075 ;;		___ftadd
 15076 ;;		___ftdiv
 15077 ;;		___ftmul
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           
 15082                           ;psect for function ___ftpack
 15083  0C40                     ___ftpack:	
 15084                           
 15085                           ;incstack = 0
 15086                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15087  0C40  0875               	movf	___ftpack@exp,w
 15088  0C41  1903               	btfsc	3,2
 15089  0C42  2C48               	goto	l8521
 15090  0C43  0874               	movf	___ftpack@arg+2,w
 15091  0C44  0473               	iorwf	___ftpack@arg+1,w
 15092  0C45  0472               	iorwf	___ftpack@arg,w
 15093  0C46  1D03               	skipz
 15094  0C47  2C5A               	goto	l8527
 15095  0C48                     l8521:	
 15096  0C48  3000               	movlw	0
 15097  0C49  00F2               	movwf	?___ftpack
 15098  0C4A  3000               	movlw	0
 15099  0C4B  00F3               	movwf	?___ftpack+1
 15100  0C4C  3000               	movlw	0
 15101  0C4D  00F4               	movwf	?___ftpack+2
 15102  0C4E  0008               	return
 15103  0C4F                     l8525:	
 15104  0C4F  3001               	movlw	1
 15105  0C50  0020               	movlb	0	; select bank0
 15106  0C51  00A0               	movwf	??___ftpack
 15107  0C52  0820               	movf	??___ftpack,w
 15108  0C53  07F5               	addwf	___ftpack@exp,f
 15109  0C54  3001               	movlw	1
 15110  0C55                     u8595:	
 15111  0C55  36F4               	lsrf	___ftpack@arg+2,f
 15112  0C56  0CF3               	rrf	___ftpack@arg+1,f
 15113  0C57  0CF2               	rrf	___ftpack@arg,f
 15114  0C58  0B89               	decfsz	9,f
 15115  0C59  2C55               	goto	u8595
 15116  0C5A                     l8527:	
 15117  0C5A  30FE               	movlw	254
 15118  0C5B  0574               	andwf	___ftpack@arg+2,w
 15119  0C5C  1903               	btfsc	3,2
 15120  0C5D  2C74               	goto	l2673
 15121  0C5E  2C4F               	goto	l8525
 15122  0C5F                     l8529:	
 15123  0C5F  3001               	movlw	1
 15124  0C60  0020               	movlb	0	; select bank0
 15125  0C61  00A0               	movwf	??___ftpack
 15126  0C62  0820               	movf	??___ftpack,w
 15127  0C63  07F5               	addwf	___ftpack@exp,f
 15128  0C64  3001               	movlw	1
 15129  0C65  07F2               	addwf	___ftpack@arg,f
 15130  0C66  3000               	movlw	0
 15131  0C67  1803               	skipnc
 15132  0C68  3001               	movlw	1
 15133  0C69  07F3               	addwf	___ftpack@arg+1,f
 15134  0C6A  3000               	movlw	0
 15135  0C6B  1803               	skipnc
 15136  0C6C  3001               	movlw	1
 15137  0C6D  07F4               	addwf	___ftpack@arg+2,f
 15138  0C6E  3001               	movlw	1
 15139  0C6F                     u8615:	
 15140  0C6F  36F4               	lsrf	___ftpack@arg+2,f
 15141  0C70  0CF3               	rrf	___ftpack@arg+1,f
 15142  0C71  0CF2               	rrf	___ftpack@arg,f
 15143  0C72  0B89               	decfsz	9,f
 15144  0C73  2C6F               	goto	u8615
 15145  0C74                     l2673:	
 15146  0C74  30FF               	movlw	255
 15147  0C75  0574               	andwf	___ftpack@arg+2,w
 15148  0C76  1903               	btfsc	3,2
 15149  0C77  2C81               	goto	l8537
 15150  0C78  2C5F               	goto	l8529
 15151  0C79                     l8535:	
 15152  0C79  3001               	movlw	1
 15153  0C7A  02F5               	subwf	___ftpack@exp,f
 15154  0C7B  3001               	movlw	1
 15155  0C7C                     u8635:	
 15156  0C7C  35F2               	lslf	___ftpack@arg,f
 15157  0C7D  0DF3               	rlf	___ftpack@arg+1,f
 15158  0C7E  0DF4               	rlf	___ftpack@arg+2,f
 15159  0C7F  0B89               	decfsz	9,f
 15160  0C80  2C7C               	goto	u8635
 15161  0C81                     l8537:	
 15162  0C81  1FF3               	btfss	___ftpack@arg+1,7
 15163  0C82  2C79               	goto	l8535
 15164  0C83  1875               	btfsc	___ftpack@exp,0
 15165  0C84  2C8B               	goto	l2679
 15166  0C85  30FF               	movlw	255
 15167  0C86  05F2               	andwf	___ftpack@arg,f
 15168  0C87  307F               	movlw	127
 15169  0C88  05F3               	andwf	___ftpack@arg+1,f
 15170  0C89  30FF               	movlw	255
 15171  0C8A  05F4               	andwf	___ftpack@arg+2,f
 15172  0C8B                     l2679:	
 15173  0C8B  1003               	clrc
 15174  0C8C  0CF5               	rrf	___ftpack@exp,f
 15175  0C8D  0875               	movf	___ftpack@exp,w
 15176  0C8E  0020               	movlb	0	; select bank0
 15177  0C8F  00A0               	movwf	??___ftpack
 15178  0C90  01A1               	clrf	??___ftpack+1
 15179  0C91  01A2               	clrf	??___ftpack+2
 15180  0C92  3010               	movlw	16
 15181  0C93                     u8665:	
 15182  0C93  35A0               	lslf	??___ftpack,f
 15183  0C94  0DA1               	rlf	??___ftpack+1,f
 15184  0C95  0DA2               	rlf	??___ftpack+2,f
 15185  0C96  0B89               	decfsz	9,f
 15186  0C97  2C93               	goto	u8665
 15187  0C98  0820               	movf	??___ftpack,w
 15188  0C99  04F2               	iorwf	___ftpack@arg,f
 15189  0C9A  0821               	movf	??___ftpack+1,w
 15190  0C9B  04F3               	iorwf	___ftpack@arg+1,f
 15191  0C9C  0822               	movf	??___ftpack+2,w
 15192  0C9D  04F4               	iorwf	___ftpack@arg+2,f
 15193  0C9E  0876               	movf	___ftpack@sign,w
 15194  0C9F  1903               	btfsc	3,2
 15195  0CA0  0008               	return
 15196  0CA1  17F4               	bsf	___ftpack@arg+2,7
 15197  0CA2  0008               	return
 15198  0CA3                     __end_of___ftpack:	
 15199                           
 15200                           	psect	text110
 15201  111C                     __ptext110:	
 15202 ;; *************** function _DelayOff_Main *****************
 15203 ;; Defined at:
 15204 ;;		line 41 in file "../src/DelayOff_B1.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;		None               void
 15211 ;; Registers used:
 15212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 0/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used:    1
 15224 ;; Hardware stack levels required when called:    7
 15225 ;; This function calls:
 15226 ;;		_DlyOff_Main
 15227 ;; This function is called by:
 15228 ;;		_main
 15229 ;; This function uses a non-reentrant model
 15230 ;;
 15231                           
 15232                           
 15233                           ;psect for function _DelayOff_Main
 15234  111C                     _DelayOff_Main:	
 15235                           
 15236                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15237                           
 15238                           ;incstack = 0
 15239                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15240  111C  3001               	movlw	1
 15241  111D  318E  269D         	fcall	_DlyOff_Main
 15242  111F  0008               	return
 15243  1120                     __end_of_DelayOff_Main:	
 15244                           
 15245                           	psect	text111
 15246  0E9D                     __ptext111:	
 15247 ;; *************** function _DlyOff_Main *****************
 15248 ;; Defined at:
 15249 ;;		line 61 in file "../src/DelayOff_B1.c"
 15250 ;; Parameters:    Size  Location     Type
 15251 ;;  sw              1    wreg     unsigned char 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  sw              1   59[BANK0 ] unsigned char 
 15254 ;; Return value:  Size  Location     Type
 15255 ;;		None               void
 15256 ;; Registers used:
 15257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15258 ;; Tracked objects:
 15259 ;;		On entry : 0/0
 15260 ;;		On exit  : 0/0
 15261 ;;		Unchanged: 0/0
 15262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15266 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15267 ;;Total ram usage:        3 bytes
 15268 ;; Hardware stack levels used:    1
 15269 ;; Hardware stack levels required when called:    6
 15270 ;; This function calls:
 15271 ;;		_DelayOffPointSelect
 15272 ;;		_getDimmerLights_Status
 15273 ;;		_setDimmerLights_SwOff
 15274 ;;		_setDimmerLights_SwOn
 15275 ;;		_setProductData
 15276 ;; This function is called by:
 15277 ;;		_DelayOff_Main
 15278 ;; This function uses a non-reentrant model
 15279 ;;
 15280                           
 15281                           
 15282                           ;psect for function _DlyOff_Main
 15283  0E9D                     _DlyOff_Main:	
 15284                           
 15285                           ;incstack = 0
 15286                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15287                           ;DlyOff_Main@sw stored from wreg
 15288  0E9D  0020               	movlb	0	; select bank0
 15289  0E9E  00DB               	movwf	DlyOff_Main@sw
 15290                           
 15291                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15292  0E9F  085B               	movf	DlyOff_Main@sw,w
 15293  0EA0  3191  21A2  318E   	fcall	_DelayOffPointSelect
 15294                           
 15295                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15296  0EA3  0020               	movlb	0	; select bank0
 15297  0EA4  0869               	movf	_DelayOff,w
 15298  0EA5  0086               	movwf	6
 15299  0EA6  3001               	movlw	1	; select bank2/3
 15300  0EA7  0087               	movwf	7
 15301  0EA8  1C81               	btfss	1,1
 15302  0EA9  0008               	return
 15303                           
 15304                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15305  0EAA  0869               	movf	_DelayOff,w
 15306  0EAB  3E02               	addlw	2
 15307  0EAC  0086               	movwf	6
 15308  0EAD  3001               	movlw	1	; select bank2/3
 15309  0EAE  0087               	movwf	7
 15310  0EAF  3001               	movlw	1
 15311  0EB0  0781               	addwf	1,f
 15312  0EB1  3141               	addfsr 1,1
 15313  0EB2  1803               	skipnc
 15314  0EB3  0A81               	incf	1,f
 15315                           
 15316                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= (60000-10000)/20) {
 15317  0EB4  0869               	movf	_DelayOff,w
 15318  0EB5  3E02               	addlw	2
 15319  0EB6  0086               	movwf	6
 15320  0EB7  3001               	movlw	1	; select bank2/3
 15321  0EB8  0087               	movwf	7
 15322  0EB9  3F40               	moviw [0]fsr1
 15323  0EBA  00D9               	movwf	??_DlyOff_Main
 15324  0EBB  3F41               	moviw [1]fsr1
 15325  0EBC  00DA               	movwf	??_DlyOff_Main+1
 15326  0EBD  3009               	movlw	9
 15327  0EBE  025A               	subwf	??_DlyOff_Main+1,w
 15328  0EBF  30C4               	movlw	196
 15329  0EC0  1903               	skipnz
 15330  0EC1  0259               	subwf	??_DlyOff_Main,w
 15331  0EC2  1C03               	skipc
 15332  0EC3  0008               	return
 15333                           
 15334                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15335  0EC4  0869               	movf	_DelayOff,w
 15336  0EC5  3E02               	addlw	2
 15337  0EC6  0086               	movwf	6
 15338  0EC7  3001               	movlw	1	; select bank2/3
 15339  0EC8  0087               	movwf	7
 15340  0EC9  3000               	movlw	0
 15341  0ECA  3FC0               	movwi [0]fsr1
 15342  0ECB  3FC1               	movwi [1]fsr1
 15343                           
 15344                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15345  0ECC  3001               	movlw	1
 15346  0ECD  00D9               	movwf	??_DlyOff_Main
 15347  0ECE  0869               	movf	_DelayOff,w
 15348  0ECF  3E04               	addlw	4
 15349  0ED0  0086               	movwf	6
 15350  0ED1  3001               	movlw	1	; select bank2/3
 15351  0ED2  0087               	movwf	7
 15352  0ED3  0859               	movf	??_DlyOff_Main,w
 15353  0ED4  0781               	addwf	1,f
 15354                           
 15355                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15356  0ED5  0869               	movf	_DelayOff,w
 15357  0ED6  3E04               	addlw	4
 15358  0ED7  0086               	movwf	6
 15359  0ED8  3001               	movlw	1	; select bank2/3
 15360  0ED9  0087               	movwf	7
 15361  0EDA  0A69               	incf	_DelayOff,w
 15362  0EDB  0084               	movwf	4
 15363  0EDC  3001               	movlw	1	; select bank2/3
 15364  0EDD  0085               	movwf	5
 15365  0EDE  0800               	movf	0,w
 15366  0EDF  0201               	subwf	1,w
 15367  0EE0  1C03               	skipc
 15368  0EE1  0008               	return
 15369                           
 15370                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15371  0EE2  0869               	movf	_DelayOff,w
 15372  0EE3  3E04               	addlw	4
 15373  0EE4  0086               	movwf	6
 15374  0EE5  3001               	movlw	1	; select bank2/3
 15375  0EE6  0087               	movwf	7
 15376  0EE7  0181               	clrf	1
 15377                           
 15378                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15379  0EE8  0869               	movf	_DelayOff,w
 15380  0EE9  0086               	movwf	6
 15381  0EEA  3001               	movlw	1	; select bank2/3
 15382  0EEB  0087               	movwf	7
 15383  0EEC  1081               	bcf	1,1
 15384                           
 15385                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 15386  0EED  085B               	movf	DlyOff_Main@sw,w
 15387  0EEE  3192  226B  318E   	fcall	_getDimmerLights_Status
 15388  0EF1  3A01               	xorlw	1
 15389  0EF2  1D03               	skipz
 15390  0EF3  2EFE               	goto	l539
 15391                           
 15392                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 15393  0EF4  0020               	movlb	0	; select bank0
 15394  0EF5  085B               	movf	DlyOff_Main@sw,w
 15395  0EF6  3189  21AE  318E   	fcall	_setDimmerLights_SwOn
 15396                           
 15397                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 15398  0EF9  0020               	movlb	0	; select bank0
 15399  0EFA  085B               	movf	DlyOff_Main@sw,w
 15400  0EFB  3196  269A  318E   	fcall	_setDimmerLights_SwOff
 15401  0EFE                     l539:	
 15402                           
 15403                           ;DelayOff_B1.c: 78: }
 15404                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 15405  0EFE  0020               	movlb	0	; select bank0
 15406  0EFF  01D6               	clrf	setProductData@value
 15407  0F00  085B               	movf	DlyOff_Main@sw,w
 15408  0F01  3E1A               	addlw	26
 15409  0F02  3191  21EF         	fcall	_setProductData
 15410  0F04  0008               	return
 15411  0F05                     __end_of_DlyOff_Main:	
 15412                           
 15413                           	psect	text112
 15414  11EF                     __ptext112:	
 15415 ;; *************** function _setProductData *****************
 15416 ;; Defined at:
 15417 ;;		line 650 in file "../src/main_B1.c"
 15418 ;; Parameters:    Size  Location     Type
 15419 ;;  address         1    wreg     unsigned char 
 15420 ;;  value           1   54[BANK0 ] unsigned char 
 15421 ;; Auto vars:     Size  Location     Type
 15422 ;;  address         1   56[BANK0 ] unsigned char 
 15423 ;; Return value:  Size  Location     Type
 15424 ;;		None               void
 15425 ;; Registers used:
 15426 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15427 ;; Tracked objects:
 15428 ;;		On entry : 0/0
 15429 ;;		On exit  : 0/0
 15430 ;;		Unchanged: 0/0
 15431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15432 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15434 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15435 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15436 ;;Total ram usage:        3 bytes
 15437 ;; Hardware stack levels used:    1
 15438 ;; Hardware stack levels required when called:    3
 15439 ;; This function calls:
 15440 ;;		Nothing
 15441 ;; This function is called by:
 15442 ;;		_DlyOff_Main
 15443 ;;		_setDelayOff_GO
 15444 ;;		_setDimmerLights_OnOff
 15445 ;;		_setDimmerLights_Dimming
 15446 ;;		_setLog_Code
 15447 ;;		_setControl_Lights_Table
 15448 ;;		_setRFSW_AdjControl
 15449 ;;		_setRF_DimmerLights
 15450 ;; This function uses a non-reentrant model
 15451 ;;
 15452                           
 15453                           
 15454                           ;psect for function _setProductData
 15455  11EF                     _setProductData:	
 15456                           
 15457                           ;incstack = 0
 15458                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 15459                           ;setProductData@address stored from wreg
 15460  11EF  0020               	movlb	0	; select bank0
 15461  11F0  00D8               	movwf	setProductData@address
 15462                           
 15463                           ;main_B1.c: 651: _product.Data[address] = value;
 15464  11F1  0856               	movf	setProductData@value,w
 15465  11F2  00D7               	movwf	??_setProductData
 15466  11F3  0858               	movf	setProductData@address,w
 15467  11F4  3EC5               	addlw	__product& (0+255)
 15468  11F5  0086               	movwf	6
 15469  11F6  3001               	movlw	1	; select bank3/4
 15470  11F7  0087               	movwf	7
 15471  11F8  0857               	movf	??_setProductData,w
 15472  11F9  0081               	movwf	1
 15473  11FA  0008               	return
 15474  11FB                     __end_of_setProductData:	
 15475                           
 15476                           	psect	text113
 15477  09AE                     __ptext113:	
 15478 ;; *************** function _setDimmerLights_SwOn *****************
 15479 ;; Defined at:
 15480 ;;		line 759 in file "../src/Dimmer_B1.c"
 15481 ;; Parameters:    Size  Location     Type
 15482 ;;  sw              1    wreg     unsigned char 
 15483 ;; Auto vars:     Size  Location     Type
 15484 ;;  sw              1    9[BANK0 ] unsigned char 
 15485 ;;  dimmingStatu    1    8[BANK0 ] unsigned char 
 15486 ;;  idle            1    7[BANK0 ] unsigned char 
 15487 ;; Return value:  Size  Location     Type
 15488 ;;		None               void
 15489 ;; Registers used:
 15490 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15491 ;; Tracked objects:
 15492 ;;		On entry : 0/0
 15493 ;;		On exit  : 0/0
 15494 ;;		Unchanged: 0/0
 15495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15497 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15499 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15500 ;;Total ram usage:        4 bytes
 15501 ;; Hardware stack levels used:    1
 15502 ;; Hardware stack levels required when called:    5
 15503 ;; This function calls:
 15504 ;;		_DimmerLights_SelectPointer
 15505 ;;		_getDimmerIntr_Dimming_Sw
 15506 ;;		_setBuz
 15507 ;; This function is called by:
 15508 ;;		_DlyOff_Main
 15509 ;;		_setControl_Lights_Table
 15510 ;;		_setRFSW_Control
 15511 ;;		_setRFSW_AdjControl
 15512 ;;		_setSw_Main
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function _setDimmerLights_SwOn
 15518  09AE                     _setDimmerLights_SwOn:	
 15519                           
 15520                           ;incstack = 0
 15521                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15522                           ;setDimmerLights_SwOn@sw stored from wreg
 15523  09AE  0020               	movlb	0	; select bank0
 15524  09AF  00A9               	movwf	setDimmerLights_SwOn@sw
 15525                           
 15526                           ;Dimmer_B1.c: 760: char idle = 0;
 15527  09B0  01A7               	clrf	setDimmerLights_SwOn@idle
 15528                           
 15529                           ;Dimmer_B1.c: 762: char dimmingStatus = 0;
 15530  09B1  01A8               	clrf	setDimmerLights_SwOn@dimmingStatus
 15531                           
 15532                           ;Dimmer_B1.c: 763: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 15533  09B2  0829               	movf	setDimmerLights_SwOn@sw,w
 15534  09B3  3192  2243  3189   	fcall	_getDimmerIntr_Dimming_Sw
 15535  09B6  0020               	movlb	0	; select bank0
 15536  09B7  00A6               	movwf	??_setDimmerLights_SwOn
 15537  09B8  0826               	movf	??_setDimmerLights_SwOn,w
 15538  09B9  00A8               	movwf	setDimmerLights_SwOn@dimmingStatus
 15539                           
 15540                           ;Dimmer_B1.c: 790: DimmerLights_SelectPointer(sw);
 15541  09BA  0829               	movf	setDimmerLights_SwOn@sw,w
 15542  09BB  3191  21AD  3189   	fcall	_DimmerLights_SelectPointer
 15543                           
 15544                           ;Dimmer_B1.c: 791: if (idle == 0) {
 15545  09BE  0020               	movlb	0	; select bank0
 15546  09BF  08A7               	movf	setDimmerLights_SwOn@idle,f
 15547  09C0  1D03               	skipz
 15548  09C1  0008               	return
 15549                           
 15550                           ;Dimmer_B1.c: 793: if (dimmingStatus == 0) {
 15551  09C2  08A8               	movf	setDimmerLights_SwOn@dimmingStatus,f
 15552  09C3  1D03               	skipz
 15553  09C4  29E6               	goto	l8785
 15554                           
 15555                           ;Dimmer_B1.c: 794: DimmerLights->SwFlag = 1;
 15556  09C5  086A               	movf	_DimmerLights,w
 15557  09C6  0086               	movwf	6
 15558  09C7  3001               	movlw	1	; select bank2/3
 15559  09C8  0087               	movwf	7
 15560  09C9  1401               	bsf	1,0
 15561                           
 15562                           ;Dimmer_B1.c: 795: if (DimmerLights->Status == 0) {
 15563  09CA  0A6A               	incf	_DimmerLights,w
 15564  09CB  0086               	movwf	6
 15565  09CC  3001               	movlw	1	; select bank2/3
 15566  09CD  0087               	movwf	7
 15567  09CE  1801               	btfsc	1,0
 15568  09CF  29E0               	goto	l8783
 15569                           
 15570                           ;Dimmer_B1.c: 796: DimmerLights->Status = 1;
 15571  09D0  0A6A               	incf	_DimmerLights,w
 15572  09D1  0086               	movwf	6
 15573  09D2  3001               	movlw	1	; select bank2/3
 15574  09D3  0087               	movwf	7
 15575  09D4  1401               	bsf	1,0
 15576                           
 15577                           ;Dimmer_B1.c: 799: DimmerLights->Trigger = 1;
 15578  09D5  086A               	movf	_DimmerLights,w
 15579  09D6  0086               	movwf	6
 15580  09D7  3001               	movlw	1	; select bank2/3
 15581  09D8  0087               	movwf	7
 15582  09D9  1481               	bsf	1,1
 15583                           
 15584                           ;Dimmer_B1.c: 800: DimmerLights->Switch = 1;
 15585  09DA  086A               	movf	_DimmerLights,w
 15586  09DB  0086               	movwf	6
 15587  09DC  3001               	movlw	1	; select bank2/3
 15588  09DD  0087               	movwf	7
 15589  09DE  1501               	bsf	1,2
 15590                           
 15591                           ;Dimmer_B1.c: 807: } else {
 15592  09DF  29F0               	goto	l8787
 15593  09E0                     l8783:	
 15594                           
 15595                           ;Dimmer_B1.c: 808: DimmerLights->Status = 0;
 15596  09E0  0A6A               	incf	_DimmerLights,w
 15597  09E1  0086               	movwf	6
 15598  09E2  3001               	movlw	1	; select bank2/3
 15599  09E3  0087               	movwf	7
 15600  09E4  1001               	bcf	1,0
 15601                           
 15602                           ;Dimmer_B1.c: 809: }
 15603                           ;Dimmer_B1.c: 810: } else {
 15604  09E5  29F0               	goto	l8787
 15605  09E6                     l8785:	
 15606                           
 15607                           ;Dimmer_B1.c: 811: DimmerLights->DimmingTrigger = 1;
 15608  09E6  086A               	movf	_DimmerLights,w
 15609  09E7  0086               	movwf	6
 15610  09E8  3001               	movlw	1	; select bank2/3
 15611  09E9  0087               	movwf	7
 15612  09EA  1601               	bsf	1,4
 15613                           
 15614                           ;Dimmer_B1.c: 812: DimmerLights->DimmingSwitch = 0;
 15615  09EB  086A               	movf	_DimmerLights,w
 15616  09EC  0086               	movwf	6
 15617  09ED  3001               	movlw	1	; select bank2/3
 15618  09EE  0087               	movwf	7
 15619  09EF  1281               	bcf	1,5
 15620  09F0                     l8787:	
 15621                           
 15622                           ;Dimmer_B1.c: 813: }
 15623                           ;Dimmer_B1.c: 814: setBuz(1, 100);
 15624  09F0  3064               	movlw	100
 15625  09F1  00A4               	movwf	setBuz@time
 15626  09F2  3000               	movlw	0
 15627  09F3  00A5               	movwf	setBuz@time+1
 15628  09F4  3001               	movlw	1
 15629  09F5  318A  22E0         	fcall	_setBuz
 15630  09F7  0008               	return
 15631  09F8                     __end_of_setDimmerLights_SwOn:	
 15632                           
 15633                           	psect	text114
 15634  0AE0                     __ptext114:	
 15635 ;; *************** function _setBuz *****************
 15636 ;; Defined at:
 15637 ;;		line 22 in file "../src/Buzzer_B1.c"
 15638 ;; Parameters:    Size  Location     Type
 15639 ;;  count           1    wreg     unsigned char 
 15640 ;;  time            2    4[BANK0 ] int 
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;  count           1    8[COMMON] unsigned char 
 15643 ;; Return value:  Size  Location     Type
 15644 ;;		None               void
 15645 ;; Registers used:
 15646 ;;		wreg, status,2, status,0, pclath, cstack
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15652 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;Total ram usage:        4 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    4
 15659 ;; This function calls:
 15660 ;;		___awdiv
 15661 ;; This function is called by:
 15662 ;;		_setDimmerLights_SwOn
 15663 ;;		_setDimmerLights_Dimming
 15664 ;;		_setLog_Code
 15665 ;;		_setRFSW_Control
 15666 ;;		_setRFSW_AdjControl
 15667 ;;		_setSw_Main
 15668 ;;		_my_MainTimer
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           
 15673                           ;psect for function _setBuz
 15674  0AE0                     _setBuz:	
 15675                           
 15676                           ;incstack = 0
 15677                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15678                           ;setBuz@count stored from wreg
 15679  0AE0  00F8               	movwf	setBuz@count
 15680                           
 15681                           ;Buzzer_B1.c: 23: time /= 20;
 15682  0AE1  3014               	movlw	20
 15683  0AE2  00F2               	movwf	___awdiv@divisor
 15684  0AE3  3000               	movlw	0
 15685  0AE4  00F3               	movwf	___awdiv@divisor+1
 15686  0AE5  0020               	movlb	0	; select bank0
 15687  0AE6  0825               	movf	setBuz@time+1,w
 15688  0AE7  01F5               	clrf	___awdiv@dividend+1
 15689  0AE8  07F5               	addwf	___awdiv@dividend+1,f
 15690  0AE9  0824               	movf	setBuz@time,w
 15691  0AEA  01F4               	clrf	___awdiv@dividend
 15692  0AEB  07F4               	addwf	___awdiv@dividend,f
 15693  0AEC  318B  2333  318A   	fcall	___awdiv
 15694  0AEF  0873               	movf	?___awdiv+1,w
 15695  0AF0  0020               	movlb	0	; select bank0
 15696  0AF1  01A5               	clrf	setBuz@time+1
 15697  0AF2  07A5               	addwf	setBuz@time+1,f
 15698  0AF3  0872               	movf	?___awdiv,w
 15699  0AF4  01A4               	clrf	setBuz@time
 15700  0AF5  07A4               	addwf	setBuz@time,f
 15701                           
 15702                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15703  0AF6  0021               	movlb	1	; select bank1
 15704  0AF7  1C4C               	btfss	_Buz1^(0+128),0
 15705  0AF8  0008               	return
 15706                           
 15707                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15708  0AF9  18CC               	btfsc	_Buz1^(0+128),1
 15709  0AFA  2B0F               	goto	l88
 15710                           
 15711                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15712  0AFB  14CC               	bsf	_Buz1^(0+128),1
 15713                           
 15714                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15715  0AFC  01CD               	clrf	(_Buz1^(0+128)+1)
 15716  0AFD  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 15717                           
 15718                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15719  0AFE  0878               	movf	setBuz@count,w
 15720  0AFF  00F7               	movwf	??_setBuz
 15721  0B00  0877               	movf	??_setBuz,w
 15722  0B01  00CF               	movwf	(_Buz1^(0+128)+3)
 15723                           
 15724                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15725  0B02  0020               	movlb	0	; select bank0
 15726  0B03  0825               	movf	setBuz@time+1,w
 15727  0B04  0021               	movlb	1	; select bank1
 15728  0B05  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 15729  0B06  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 15730  0B07  0020               	movlb	0	; select bank0
 15731  0B08  0824               	movf	setBuz@time,w
 15732  0B09  0021               	movlb	1	; select bank1
 15733  0B0A  01D2               	clrf	(_Buz1^(0+128)+6)
 15734  0B0B  07D2               	addwf	(_Buz1^(0+128)+6),f
 15735                           
 15736                           ;Buzzer_B1.c: 30: RB3 = 1;
 15737  0B0C  0020               	movlb	0	; select bank0
 15738  0B0D  158D               	bsf	13,3	;volatile
 15739                           
 15740                           ;Buzzer_B1.c: 31: } else {
 15741  0B0E  0008               	return
 15742  0B0F                     l88:	
 15743                           
 15744                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15745  0B0F  19CC               	btfsc	_Buz1^(0+128),3
 15746  0B10  2B21               	goto	l90
 15747                           
 15748                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15749  0B11  15CC               	bsf	_Buz1^(0+128),3
 15750                           
 15751                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15752  0B12  0878               	movf	setBuz@count,w
 15753  0B13  00F7               	movwf	??_setBuz
 15754  0B14  0877               	movf	??_setBuz,w
 15755  0B15  00D0               	movwf	(_Buz1^(0+128)+4)
 15756                           
 15757                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15758  0B16  0020               	movlb	0	; select bank0
 15759  0B17  0825               	movf	setBuz@time+1,w
 15760  0B18  0021               	movlb	1	; select bank1
 15761  0B19  01D5               	clrf	((_Buz1+1)^(0+128)+8)
 15762  0B1A  07D5               	addwf	((_Buz1+1)^(0+128)+8),f
 15763  0B1B  0020               	movlb	0	; select bank0
 15764  0B1C  0824               	movf	setBuz@time,w
 15765  0B1D  0021               	movlb	1	; select bank1
 15766  0B1E  01D4               	clrf	(_Buz1^(0+128)+8)
 15767  0B1F  07D4               	addwf	(_Buz1^(0+128)+8),f
 15768                           
 15769                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15770  0B20  0008               	return
 15771  0B21                     l90:	
 15772  0B21  1A4C               	btfsc	_Buz1^(0+128),4
 15773  0B22  0008               	return
 15774                           
 15775                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15776  0B23  164C               	bsf	_Buz1^(0+128),4
 15777                           
 15778                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15779  0B24  0878               	movf	setBuz@count,w
 15780  0B25  00F7               	movwf	??_setBuz
 15781  0B26  0877               	movf	??_setBuz,w
 15782  0B27  00D1               	movwf	(_Buz1^(0+128)+5)
 15783                           
 15784                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15785  0B28  0020               	movlb	0	; select bank0
 15786  0B29  0825               	movf	setBuz@time+1,w
 15787  0B2A  0021               	movlb	1	; select bank1
 15788  0B2B  01D7               	clrf	((_Buz1+1)^(0+128)+10)
 15789  0B2C  07D7               	addwf	((_Buz1+1)^(0+128)+10),f
 15790  0B2D  0020               	movlb	0	; select bank0
 15791  0B2E  0824               	movf	setBuz@time,w
 15792  0B2F  0021               	movlb	1	; select bank1
 15793  0B30  01D6               	clrf	(_Buz1^(0+128)+10)
 15794  0B31  07D6               	addwf	(_Buz1^(0+128)+10),f
 15795  0B32  0008               	return
 15796  0B33                     __end_of_setBuz:	
 15797                           
 15798                           	psect	text115
 15799  0B33                     __ptext115:	
 15800 ;; *************** function ___awdiv *****************
 15801 ;; Defined at:
 15802 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15803 ;; Parameters:    Size  Location     Type
 15804 ;;  divisor         2    2[COMMON] int 
 15805 ;;  dividend        2    4[COMMON] int 
 15806 ;; Auto vars:     Size  Location     Type
 15807 ;;  quotient        2    2[BANK0 ] int 
 15808 ;;  sign            1    1[BANK0 ] unsigned char 
 15809 ;;  counter         1    0[BANK0 ] unsigned char 
 15810 ;; Return value:  Size  Location     Type
 15811 ;;                  2    2[COMMON] int 
 15812 ;; Registers used:
 15813 ;;		wreg, status,2, status,0
 15814 ;; Tracked objects:
 15815 ;;		On entry : 0/0
 15816 ;;		On exit  : 0/0
 15817 ;;		Unchanged: 0/0
 15818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15820 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15822 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15823 ;;Total ram usage:        9 bytes
 15824 ;; Hardware stack levels used:    1
 15825 ;; Hardware stack levels required when called:    3
 15826 ;; This function calls:
 15827 ;;		Nothing
 15828 ;; This function is called by:
 15829 ;;		_setBuz
 15830 ;; This function uses a non-reentrant model
 15831 ;;
 15832                           
 15833                           
 15834                           ;psect for function ___awdiv
 15835  0B33                     ___awdiv:	
 15836                           
 15837                           ;incstack = 0
 15838                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15839  0B33  0020               	movlb	0	; select bank0
 15840  0B34  01A1               	clrf	___awdiv@sign
 15841  0B35  1FF3               	btfss	___awdiv@divisor+1,7
 15842  0B36  2B3E               	goto	l7393
 15843  0B37  09F2               	comf	___awdiv@divisor,f
 15844  0B38  09F3               	comf	___awdiv@divisor+1,f
 15845  0B39  0AF2               	incf	___awdiv@divisor,f
 15846  0B3A  1903               	skipnz
 15847  0B3B  0AF3               	incf	___awdiv@divisor+1,f
 15848  0B3C  01A1               	clrf	___awdiv@sign
 15849  0B3D  0AA1               	incf	___awdiv@sign,f
 15850  0B3E                     l7393:	
 15851  0B3E  1FF5               	btfss	___awdiv@dividend+1,7
 15852  0B3F  2B49               	goto	l7399
 15853  0B40  09F4               	comf	___awdiv@dividend,f
 15854  0B41  09F5               	comf	___awdiv@dividend+1,f
 15855  0B42  0AF4               	incf	___awdiv@dividend,f
 15856  0B43  1903               	skipnz
 15857  0B44  0AF5               	incf	___awdiv@dividend+1,f
 15858  0B45  3001               	movlw	1
 15859  0B46  00F6               	movwf	??___awdiv
 15860  0B47  0876               	movf	??___awdiv,w
 15861  0B48  06A1               	xorwf	___awdiv@sign,f
 15862  0B49                     l7399:	
 15863  0B49  01A2               	clrf	___awdiv@quotient
 15864  0B4A  01A3               	clrf	___awdiv@quotient+1
 15865  0B4B  0873               	movf	___awdiv@divisor+1,w
 15866  0B4C  0472               	iorwf	___awdiv@divisor,w
 15867  0B4D  1903               	skipnz
 15868  0B4E  2B78               	goto	l7421
 15869  0B4F  01A0               	clrf	___awdiv@counter
 15870  0B50  0AA0               	incf	___awdiv@counter,f
 15871  0B51                     l7409:	
 15872  0B51  1BF3               	btfsc	___awdiv@divisor+1,7
 15873  0B52  2B5D               	goto	l7411
 15874  0B53  3001               	movlw	1
 15875  0B54                     u7025:	
 15876  0B54  35F2               	lslf	___awdiv@divisor,f
 15877  0B55  0DF3               	rlf	___awdiv@divisor+1,f
 15878  0B56  0B89               	decfsz	9,f
 15879  0B57  2B54               	goto	u7025
 15880  0B58  3001               	movlw	1
 15881  0B59  00F6               	movwf	??___awdiv
 15882  0B5A  0876               	movf	??___awdiv,w
 15883  0B5B  07A0               	addwf	___awdiv@counter,f
 15884  0B5C  2B51               	goto	l7409
 15885  0B5D                     l7411:	
 15886  0B5D  3001               	movlw	1
 15887  0B5E                     u7045:	
 15888  0B5E  35A2               	lslf	___awdiv@quotient,f
 15889  0B5F  0DA3               	rlf	___awdiv@quotient+1,f
 15890  0B60  0B89               	decfsz	9,f
 15891  0B61  2B5E               	goto	u7045
 15892  0B62  0873               	movf	___awdiv@divisor+1,w
 15893  0B63  0275               	subwf	___awdiv@dividend+1,w
 15894  0B64  1D03               	skipz
 15895  0B65  2B68               	goto	u7055
 15896  0B66  0872               	movf	___awdiv@divisor,w
 15897  0B67  0274               	subwf	___awdiv@dividend,w
 15898  0B68                     u7055:	
 15899  0B68  1C03               	skipc
 15900  0B69  2B6F               	goto	l7417
 15901  0B6A  0872               	movf	___awdiv@divisor,w
 15902  0B6B  02F4               	subwf	___awdiv@dividend,f
 15903  0B6C  0873               	movf	___awdiv@divisor+1,w
 15904  0B6D  3BF5               	subwfb	___awdiv@dividend+1,f
 15905  0B6E  1422               	bsf	___awdiv@quotient,0
 15906  0B6F                     l7417:	
 15907  0B6F  3001               	movlw	1
 15908  0B70                     u7065:	
 15909  0B70  36F3               	lsrf	___awdiv@divisor+1,f
 15910  0B71  0CF2               	rrf	___awdiv@divisor,f
 15911  0B72  0B89               	decfsz	9,f
 15912  0B73  2B70               	goto	u7065
 15913  0B74  3001               	movlw	1
 15914  0B75  02A0               	subwf	___awdiv@counter,f
 15915  0B76  1D03               	btfss	3,2
 15916  0B77  2B5D               	goto	l7411
 15917  0B78                     l7421:	
 15918  0B78  0821               	movf	___awdiv@sign,w
 15919  0B79  1903               	btfsc	3,2
 15920  0B7A  2B80               	goto	l7425
 15921  0B7B  09A2               	comf	___awdiv@quotient,f
 15922  0B7C  09A3               	comf	___awdiv@quotient+1,f
 15923  0B7D  0AA2               	incf	___awdiv@quotient,f
 15924  0B7E  1903               	skipnz
 15925  0B7F  0AA3               	incf	___awdiv@quotient+1,f
 15926  0B80                     l7425:	
 15927  0B80  0823               	movf	___awdiv@quotient+1,w
 15928  0B81  01F3               	clrf	?___awdiv+1
 15929  0B82  07F3               	addwf	?___awdiv+1,f
 15930  0B83  0822               	movf	___awdiv@quotient,w
 15931  0B84  01F2               	clrf	?___awdiv
 15932  0B85  07F2               	addwf	?___awdiv,f
 15933  0B86  0008               	return
 15934  0B87                     __end_of___awdiv:	
 15935                           
 15936                           	psect	text116
 15937  1243                     __ptext116:	
 15938 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 15939 ;; Defined at:
 15940 ;;		line 269 in file "../src/Dimmer_B1.c"
 15941 ;; Parameters:    Size  Location     Type
 15942 ;;  lights          1    wreg     unsigned char 
 15943 ;; Auto vars:     Size  Location     Type
 15944 ;;  lights          1    2[COMMON] unsigned char 
 15945 ;;  status          1    3[COMMON] unsigned char 
 15946 ;; Return value:  Size  Location     Type
 15947 ;;                  1    wreg      unsigned char 
 15948 ;; Registers used:
 15949 ;;		wreg, status,2
 15950 ;; Tracked objects:
 15951 ;;		On entry : 0/0
 15952 ;;		On exit  : 0/0
 15953 ;;		Unchanged: 0/0
 15954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;Total ram usage:        2 bytes
 15960 ;; Hardware stack levels used:    1
 15961 ;; Hardware stack levels required when called:    3
 15962 ;; This function calls:
 15963 ;;		Nothing
 15964 ;; This function is called by:
 15965 ;;		_setDimmerLights_SwOn
 15966 ;;		_setRF_AdjControl
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           
 15971                           ;psect for function _getDimmerIntr_Dimming_Sw
 15972  1243                     _getDimmerIntr_Dimming_Sw:	
 15973                           
 15974                           ;incstack = 0
 15975                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 15976                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 15977  1243  00F2               	movwf	getDimmerIntr_Dimming_Sw@lights
 15978                           
 15979                           ;Dimmer_B1.c: 270: char status = 0;
 15980  1244  01F3               	clrf	getDimmerIntr_Dimming_Sw@status
 15981                           
 15982                           ;Dimmer_B1.c: 272: if (lights == 1) {
 15983  1245  0872               	movf	getDimmerIntr_Dimming_Sw@lights,w
 15984  1246  3A01               	xorlw	1
 15985  1247  1D03               	skipz
 15986  1248  2A4E               	goto	l8553
 15987                           
 15988                           ;Dimmer_B1.c: 273: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 15989  1249  3000               	movlw	0
 15990  124A  0021               	movlb	1	; select bank1
 15991  124B  1A20               	btfsc	_DimmerIntr1^(0+128),4
 15992  124C  3001               	movlw	1
 15993  124D  00F3               	movwf	getDimmerIntr_Dimming_Sw@status
 15994  124E                     l8553:	
 15995                           
 15996                           ;Dimmer_B1.c: 274: }
 15997                           ;Dimmer_B1.c: 287: return status;
 15998  124E  0873               	movf	getDimmerIntr_Dimming_Sw@status,w
 15999  124F  0008               	return
 16000  1250                     __end_of_getDimmerIntr_Dimming_Sw:	
 16001                           
 16002                           	psect	text117
 16003  169A                     __ptext117:	
 16004 ;; *************** function _setDimmerLights_SwOff *****************
 16005 ;; Defined at:
 16006 ;;		line 819 in file "../src/Dimmer_B1.c"
 16007 ;; Parameters:    Size  Location     Type
 16008 ;;  sw              1    wreg     unsigned char 
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;  sw              1    4[COMMON] unsigned char 
 16011 ;; Return value:  Size  Location     Type
 16012 ;;		None               void
 16013 ;; Registers used:
 16014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16015 ;; Tracked objects:
 16016 ;;		On entry : 0/0
 16017 ;;		On exit  : 0/0
 16018 ;;		Unchanged: 0/0
 16019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;Total ram usage:        1 bytes
 16025 ;; Hardware stack levels used:    1
 16026 ;; Hardware stack levels required when called:    4
 16027 ;; This function calls:
 16028 ;;		_DimmerLights_SelectPointer
 16029 ;; This function is called by:
 16030 ;;		_DlyOff_Main
 16031 ;;		_setControl_Lights_Table
 16032 ;;		_setRFSW_Control
 16033 ;;		_setRFSW_AdjControl
 16034 ;;		_setSw_Main
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           
 16039                           ;psect for function _setDimmerLights_SwOff
 16040  169A                     _setDimmerLights_SwOff:	
 16041                           
 16042                           ;incstack = 0
 16043                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16044                           ;setDimmerLights_SwOff@sw stored from wreg
 16045  169A  00F4               	movwf	setDimmerLights_SwOff@sw
 16046                           
 16047                           ;Dimmer_B1.c: 821: DimmerLights_SelectPointer(sw);
 16048  169B  0874               	movf	setDimmerLights_SwOff@sw,w
 16049  169C  3191  21AD  3196   	fcall	_DimmerLights_SelectPointer
 16050                           
 16051                           ;Dimmer_B1.c: 823: if (DimmerLights->SwFlag == 1) {
 16052  169F  0020               	movlb	0	; select bank0
 16053  16A0  086A               	movf	_DimmerLights,w
 16054  16A1  0086               	movwf	6
 16055  16A2  3001               	movlw	1	; select bank2/3
 16056  16A3  0087               	movwf	7
 16057  16A4  1C01               	btfss	1,0
 16058  16A5  0008               	return
 16059                           
 16060                           ;Dimmer_B1.c: 824: DimmerLights->SwFlag = 0;
 16061  16A6  086A               	movf	_DimmerLights,w
 16062  16A7  0086               	movwf	6
 16063  16A8  3001               	movlw	1	; select bank2/3
 16064  16A9  0087               	movwf	7
 16065  16AA  1001               	bcf	1,0
 16066                           
 16067                           ;Dimmer_B1.c: 825: if (DimmerLights->Status == 1) {
 16068  16AB  0A6A               	incf	_DimmerLights,w
 16069  16AC  0086               	movwf	6
 16070  16AD  3001               	movlw	1	; select bank2/3
 16071  16AE  0087               	movwf	7
 16072  16AF  1C01               	btfss	1,0
 16073  16B0  2EC7               	goto	l8799
 16074                           
 16075                           ;Dimmer_B1.c: 826: if (DimmerLights->DimmingSwFlag == 1) {
 16076  16B1  086A               	movf	_DimmerLights,w
 16077  16B2  0086               	movwf	6
 16078  16B3  3001               	movlw	1	; select bank2/3
 16079  16B4  0087               	movwf	7
 16080  16B5  1D81               	btfss	1,3
 16081  16B6  0008               	return
 16082                           
 16083                           ;Dimmer_B1.c: 827: DimmerLights->DimmingSwFlag = 0;
 16084  16B7  086A               	movf	_DimmerLights,w
 16085  16B8  0086               	movwf	6
 16086  16B9  3001               	movlw	1	; select bank2/3
 16087  16BA  0087               	movwf	7
 16088  16BB  1181               	bcf	1,3
 16089                           
 16090                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 1;
 16091  16BC  086A               	movf	_DimmerLights,w
 16092  16BD  0086               	movwf	6
 16093  16BE  3001               	movlw	1	; select bank2/3
 16094  16BF  0087               	movwf	7
 16095  16C0  1601               	bsf	1,4
 16096                           
 16097                           ;Dimmer_B1.c: 830: DimmerLights->DimmingSwitch = 0;
 16098  16C1  086A               	movf	_DimmerLights,w
 16099  16C2  0086               	movwf	6
 16100  16C3  3001               	movlw	1	; select bank2/3
 16101  16C4  0087               	movwf	7
 16102  16C5  1281               	bcf	1,5
 16103                           
 16104                           ;Dimmer_B1.c: 831: }
 16105                           ;Dimmer_B1.c: 832: } else {
 16106  16C6  0008               	return
 16107  16C7                     l8799:	
 16108                           
 16109                           ;Dimmer_B1.c: 835: DimmerLights->Trigger = 1;
 16110  16C7  086A               	movf	_DimmerLights,w
 16111  16C8  0086               	movwf	6
 16112  16C9  3001               	movlw	1	; select bank2/3
 16113  16CA  0087               	movwf	7
 16114  16CB  1481               	bsf	1,1
 16115                           
 16116                           ;Dimmer_B1.c: 836: DimmerLights->Switch = 0;
 16117  16CC  086A               	movf	_DimmerLights,w
 16118  16CD  0086               	movwf	6
 16119  16CE  3001               	movlw	1	; select bank2/3
 16120  16CF  0087               	movwf	7
 16121  16D0  1101               	bcf	1,2
 16122  16D1  0008               	return
 16123  16D2                     __end_of_setDimmerLights_SwOff:	
 16124                           
 16125                           	psect	text118
 16126  126B                     __ptext118:	
 16127 ;; *************** function _getDimmerLights_Status *****************
 16128 ;; Defined at:
 16129 ;;		line 1266 in file "../src/Dimmer_B1.c"
 16130 ;; Parameters:    Size  Location     Type
 16131 ;;  lights          1    wreg     unsigned char 
 16132 ;; Auto vars:     Size  Location     Type
 16133 ;;  lights          1    4[COMMON] unsigned char 
 16134 ;;  status          1    5[COMMON] unsigned char 
 16135 ;; Return value:  Size  Location     Type
 16136 ;;                  1    wreg      unsigned char 
 16137 ;; Registers used:
 16138 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16139 ;; Tracked objects:
 16140 ;;		On entry : 0/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16145 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16147 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16148 ;;Total ram usage:        2 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    4
 16151 ;; This function calls:
 16152 ;;		_DimmerLights_SelectPointer
 16153 ;; This function is called by:
 16154 ;;		_DlyOff_Main
 16155 ;;		_setControl_Lights_Table
 16156 ;;		_setRFSW_Control
 16157 ;;		_setRFSW_AdjControl
 16158 ;;		_setRF_AdjControl
 16159 ;;		_DimmerLights_AssignationDimming
 16160 ;; This function uses a non-reentrant model
 16161 ;;
 16162                           
 16163                           
 16164                           ;psect for function _getDimmerLights_Status
 16165  126B                     _getDimmerLights_Status:	
 16166                           
 16167                           ;incstack = 0
 16168                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16169                           ;getDimmerLights_Status@lights stored from wreg
 16170  126B  00F4               	movwf	getDimmerLights_Status@lights
 16171                           
 16172                           ;Dimmer_B1.c: 1267: DimmerLights_SelectPointer(lights);
 16173  126C  0874               	movf	getDimmerLights_Status@lights,w
 16174  126D  3191  21AD         	fcall	_DimmerLights_SelectPointer
 16175                           
 16176                           ;Dimmer_B1.c: 1268: char status = DimmerLights->Status == 1 ? 1 : 0;
 16177  126F  0020               	movlb	0	; select bank0
 16178  1270  0A6A               	incf	_DimmerLights,w
 16179  1271  0086               	movwf	6
 16180  1272  3001               	movlw	1	; select bank2/3
 16181  1273  0087               	movwf	7
 16182  1274  3000               	movlw	0
 16183  1275  1801               	btfsc	1,0
 16184  1276  3001               	movlw	1
 16185  1277  00F5               	movwf	getDimmerLights_Status@status
 16186                           
 16187                           ;Dimmer_B1.c: 1269: return status;
 16188  1278  0875               	movf	getDimmerLights_Status@status,w
 16189  1279  0008               	return
 16190  127A                     __end_of_getDimmerLights_Status:	
 16191                           
 16192                           	psect	text119
 16193  11AD                     __ptext119:	
 16194 ;; *************** function _DimmerLights_SelectPointer *****************
 16195 ;; Defined at:
 16196 ;;		line 682 in file "../src/Dimmer_B1.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;  lights          1    wreg     unsigned char 
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  lights          1    3[COMMON] unsigned char 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;		None               void
 16203 ;; Registers used:
 16204 ;;		wreg
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;Total ram usage:        2 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; Hardware stack levels required when called:    3
 16217 ;; This function calls:
 16218 ;;		Nothing
 16219 ;; This function is called by:
 16220 ;;		_setDimmerLights_SwOn
 16221 ;;		_setDimmerLights_SwOff
 16222 ;;		_setDimmerLights_DimmingOn
 16223 ;;		_setDimmerLights_Main
 16224 ;;		_getDimmerLights_Status
 16225 ;;		_setDimmerLights_DimmingRun
 16226 ;;		_setRF_AdjControl
 16227 ;;		_DimmerLights_TwoPhase_Main
 16228 ;;		_setDimmerLights_Status
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232                           
 16233                           ;psect for function _DimmerLights_SelectPointer
 16234  11AD                     _DimmerLights_SelectPointer:	
 16235                           
 16236                           ;incstack = 0
 16237                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 16238                           ;DimmerLights_SelectPointer@lights stored from wreg
 16239  11AD  00F3               	movwf	DimmerLights_SelectPointer@lights
 16240                           
 16241                           ;Dimmer_B1.c: 684: if (lights == 1) {
 16242  11AE  0873               	movf	DimmerLights_SelectPointer@lights,w
 16243  11AF  3A01               	xorlw	1
 16244  11B0  1D03               	skipz
 16245  11B1  0008               	return
 16246                           
 16247                           ;Dimmer_B1.c: 685: DimmerLights = &DimmerLights1;
 16248  11B2  3053               	movlw	_DimmerLights1& (0+255)
 16249  11B3  00F2               	movwf	??_DimmerLights_SelectPointer
 16250  11B4  0872               	movf	??_DimmerLights_SelectPointer,w
 16251  11B5  0020               	movlb	0	; select bank0
 16252  11B6  00EA               	movwf	_DimmerLights
 16253  11B7  0008               	return
 16254  11B8                     __end_of_DimmerLights_SelectPointer:	
 16255                           
 16256                           	psect	text120
 16257  1118                     __ptext120:	
 16258 ;; *************** function _DelayOff_Initialization *****************
 16259 ;; Defined at:
 16260 ;;		line 26 in file "../src/DelayOff_B1.c"
 16261 ;; Parameters:    Size  Location     Type
 16262 ;;		None
 16263 ;; Auto vars:     Size  Location     Type
 16264 ;;		None
 16265 ;; Return value:  Size  Location     Type
 16266 ;;		None               void
 16267 ;; Registers used:
 16268 ;;		wreg, status,2, status,0, pclath, cstack
 16269 ;; Tracked objects:
 16270 ;;		On entry : 0/0
 16271 ;;		On exit  : 0/0
 16272 ;;		Unchanged: 0/0
 16273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16277 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;Total ram usage:        0 bytes
 16279 ;; Hardware stack levels used:    1
 16280 ;; Hardware stack levels required when called:    5
 16281 ;; This function calls:
 16282 ;;		_DlyOff_Initialization
 16283 ;; This function is called by:
 16284 ;;		_main
 16285 ;; This function uses a non-reentrant model
 16286 ;;
 16287                           
 16288                           
 16289                           ;psect for function _DelayOff_Initialization
 16290  1118                     _DelayOff_Initialization:	
 16291                           
 16292                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16296  1118  3001               	movlw	1
 16297  1119  3191  2138         	fcall	_DlyOff_Initialization
 16298  111B  0008               	return
 16299  111C                     __end_of_DelayOff_Initialization:	
 16300                           
 16301                           	psect	text121
 16302  1138                     __ptext121:	
 16303 ;; *************** function _DlyOff_Initialization *****************
 16304 ;; Defined at:
 16305 ;;		line 56 in file "../src/DelayOff_B1.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;  sw              1    wreg     unsigned char 
 16308 ;; Auto vars:     Size  Location     Type
 16309 ;;  sw              1    4[COMMON] unsigned char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;		None               void
 16312 ;; Registers used:
 16313 ;;		wreg, status,2, status,0, pclath, cstack
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16322 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16323 ;;Total ram usage:        1 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    4
 16326 ;; This function calls:
 16327 ;;		_DelayOffPointSelect
 16328 ;; This function is called by:
 16329 ;;		_DelayOff_Initialization
 16330 ;; This function uses a non-reentrant model
 16331 ;;
 16332                           
 16333                           
 16334                           ;psect for function _DlyOff_Initialization
 16335  1138                     _DlyOff_Initialization:	
 16336                           
 16337                           ;incstack = 0
 16338                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 16339                           ;DlyOff_Initialization@sw stored from wreg
 16340  1138  00F4               	movwf	DlyOff_Initialization@sw
 16341                           
 16342                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 16343  1139  0874               	movf	DlyOff_Initialization@sw,w
 16344  113A  3191  21A2         	fcall	_DelayOffPointSelect
 16345  113C  0008               	return
 16346  113D                     __end_of_DlyOff_Initialization:	
 16347                           
 16348                           	psect	text122
 16349  11A2                     __ptext122:	
 16350 ;; *************** function _DelayOffPointSelect *****************
 16351 ;; Defined at:
 16352 ;;		line 7 in file "../src/DelayOff_B1.c"
 16353 ;; Parameters:    Size  Location     Type
 16354 ;;  sw              1    wreg     unsigned char 
 16355 ;; Auto vars:     Size  Location     Type
 16356 ;;  sw              1    3[COMMON] unsigned char 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;		None               void
 16359 ;; Registers used:
 16360 ;;		wreg
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16367 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16369 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16370 ;;Total ram usage:        2 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; Hardware stack levels required when called:    3
 16373 ;; This function calls:
 16374 ;;		Nothing
 16375 ;; This function is called by:
 16376 ;;		_DlyOff_Initialization
 16377 ;;		_DlyOff_Main
 16378 ;;		_setDelayOff_GO
 16379 ;;		_getDelayOff_GO
 16380 ;; This function uses a non-reentrant model
 16381 ;;
 16382                           
 16383                           
 16384                           ;psect for function _DelayOffPointSelect
 16385  11A2                     _DelayOffPointSelect:	
 16386                           
 16387                           ;incstack = 0
 16388                           ; Regs used in _DelayOffPointSelect: [wreg]
 16389                           ;DelayOffPointSelect@sw stored from wreg
 16390  11A2  00F3               	movwf	DelayOffPointSelect@sw
 16391                           
 16392                           ;DelayOff_B1.c: 9: if (sw == 1) {
 16393  11A3  0873               	movf	DelayOffPointSelect@sw,w
 16394  11A4  3A01               	xorlw	1
 16395  11A5  1D03               	skipz
 16396  11A6  0008               	return
 16397                           
 16398                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 16399  11A7  3065               	movlw	_DlySw1& (0+255)
 16400  11A8  00F2               	movwf	??_DelayOffPointSelect
 16401  11A9  0872               	movf	??_DelayOffPointSelect,w
 16402  11AA  0020               	movlb	0	; select bank0
 16403  11AB  00E9               	movwf	_DelayOff
 16404  11AC  0008               	return
 16405  11AD                     __end_of_DelayOffPointSelect:	
 16406                           
 16407                           	psect	text123
 16408  0922                     __ptext123:	
 16409 ;; *************** function _Buzzer_Main *****************
 16410 ;; Defined at:
 16411 ;;		line 46 in file "../src/Buzzer_B1.c"
 16412 ;; Parameters:    Size  Location     Type
 16413 ;;		None
 16414 ;; Auto vars:     Size  Location     Type
 16415 ;;		None
 16416 ;; Return value:  Size  Location     Type
 16417 ;;		None               void
 16418 ;; Registers used:
 16419 ;;		wreg, status,2, status,0
 16420 ;; Tracked objects:
 16421 ;;		On entry : 0/0
 16422 ;;		On exit  : 0/0
 16423 ;;		Unchanged: 0/0
 16424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16427 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16428 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16429 ;;Total ram usage:        1 bytes
 16430 ;; Hardware stack levels used:    1
 16431 ;; Hardware stack levels required when called:    3
 16432 ;; This function calls:
 16433 ;;		Nothing
 16434 ;; This function is called by:
 16435 ;;		_main
 16436 ;; This function uses a non-reentrant model
 16437 ;;
 16438                           
 16439                           
 16440                           ;psect for function _Buzzer_Main
 16441  0922                     _Buzzer_Main:	
 16442                           
 16443                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16444                           
 16445                           ;incstack = 0
 16446                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16447  0922  0021               	movlb	1	; select bank1
 16448  0923  1CCC               	btfss	_Buz1^(0+128),1
 16449  0924  0008               	return
 16450                           
 16451                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16452  0925  3001               	movlw	1
 16453  0926  07CD               	addwf	(_Buz1^(0+128)+1),f
 16454  0927  3000               	movlw	0
 16455  0928  3DCE               	addwfc	((_Buz1+1)^(0+128)+1),f
 16456                           
 16457                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16458  0929  0853               	movf	((_Buz1+1)^(0+128)+6),w
 16459  092A  024E               	subwf	((_Buz1+1)^(0+128)+1),w
 16460  092B  1D03               	skipz
 16461  092C  292F               	goto	u6465
 16462  092D  0852               	movf	(_Buz1^(0+128)+6),w
 16463  092E  024D               	subwf	(_Buz1^(0+128)+1),w
 16464  092F                     u6465:	
 16465  092F  1C03               	skipc
 16466  0930  0008               	return
 16467                           
 16468                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16469  0931  01CD               	clrf	(_Buz1^(0+128)+1)
 16470  0932  01CE               	clrf	((_Buz1+1)^(0+128)+1)
 16471                           
 16472                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16473  0933  12CC               	bcf	_Buz1^(0+128),5
 16474  0934  0020               	movlb	0	; select bank0
 16475  0935  1D8D               	btfss	13,3	;volatile
 16476  0936  2939               	goto	l6953
 16477  0937  0021               	movlb	1	; select bank1
 16478  0938  16CC               	bsf	_Buz1^(0+128),5
 16479  0939                     l6953:	
 16480                           
 16481                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16482  0939  0021               	movlb	1	; select bank1
 16483  093A  1ACC               	btfsc	_Buz1^(0+128),5
 16484  093B  2961               	goto	l98
 16485                           
 16486                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16487  093C  08CF               	movf	(_Buz1^(0+128)+3),f
 16488  093D  1D03               	skipz
 16489  093E  295D               	goto	l99
 16490                           
 16491                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16492  093F  1DCC               	btfss	_Buz1^(0+128),3
 16493  0940  294D               	goto	l100
 16494                           
 16495                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16496  0941  11CC               	bcf	_Buz1^(0+128),3
 16497                           
 16498                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16499  0942  0850               	movf	(_Buz1^(0+128)+4),w
 16500  0943  00F2               	movwf	??_Buzzer_Main
 16501  0944  0872               	movf	??_Buzzer_Main,w
 16502  0945  00CF               	movwf	(_Buz1^(0+128)+3)
 16503                           
 16504                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16505  0946  0855               	movf	((_Buz1+1)^(0+128)+8),w
 16506  0947  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 16507  0948  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 16508  0949  0854               	movf	(_Buz1^(0+128)+8),w
 16509  094A  01D2               	clrf	(_Buz1^(0+128)+6)
 16510  094B  07D2               	addwf	(_Buz1^(0+128)+6),f
 16511                           
 16512                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16513  094C  0008               	return
 16514  094D                     l100:	
 16515  094D  1E4C               	btfss	_Buz1^(0+128),4
 16516  094E  295B               	goto	l102
 16517                           
 16518                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16519  094F  124C               	bcf	_Buz1^(0+128),4
 16520                           
 16521                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16522  0950  0851               	movf	(_Buz1^(0+128)+5),w
 16523  0951  00F2               	movwf	??_Buzzer_Main
 16524  0952  0872               	movf	??_Buzzer_Main,w
 16525  0953  00CF               	movwf	(_Buz1^(0+128)+3)
 16526                           
 16527                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16528  0954  0857               	movf	((_Buz1+1)^(0+128)+10),w
 16529  0955  01D3               	clrf	((_Buz1+1)^(0+128)+6)
 16530  0956  07D3               	addwf	((_Buz1+1)^(0+128)+6),f
 16531  0957  0856               	movf	(_Buz1^(0+128)+10),w
 16532  0958  01D2               	clrf	(_Buz1^(0+128)+6)
 16533  0959  07D2               	addwf	(_Buz1^(0+128)+6),f
 16534                           
 16535                           ;Buzzer_B1.c: 62: } else {
 16536  095A  0008               	return
 16537  095B                     l102:	
 16538                           
 16539                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16540  095B  10CC               	bcf	_Buz1^(0+128),1
 16541                           
 16542                           ;Buzzer_B1.c: 64: }
 16543                           ;Buzzer_B1.c: 65: } else {
 16544  095C  0008               	return
 16545  095D                     l99:	
 16546                           
 16547                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16548  095D  16CC               	bsf	_Buz1^(0+128),5
 16549                           
 16550                           ;Buzzer_B1.c: 68: RB3 = 1;
 16551  095E  0020               	movlb	0	; select bank0
 16552  095F  158D               	bsf	13,3	;volatile
 16553                           
 16554                           ;Buzzer_B1.c: 69: }
 16555                           ;Buzzer_B1.c: 70: } else {
 16556  0960  0008               	return
 16557  0961                     l98:	
 16558                           
 16559                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16560  0961  12CC               	bcf	_Buz1^(0+128),5
 16561                           
 16562                           ;Buzzer_B1.c: 73: RB3 = 0;
 16563  0962  0020               	movlb	0	; select bank0
 16564  0963  118D               	bcf	13,3	;volatile
 16565                           
 16566                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16567  0964  3001               	movlw	1
 16568  0965  0021               	movlb	1	; select bank1
 16569  0966  02CF               	subwf	(_Buz1^(0+128)+3),f
 16570  0967  0008               	return
 16571  0968                     __end_of_Buzzer_Main:	
 16572                           
 16573                           	psect	text124
 16574  1109                     __ptext124:	
 16575 ;; *************** function _Buzzer_Initialization *****************
 16576 ;; Defined at:
 16577 ;;		line 11 in file "../src/Buzzer_B1.c"
 16578 ;; Parameters:    Size  Location     Type
 16579 ;;		None
 16580 ;; Auto vars:     Size  Location     Type
 16581 ;;		None
 16582 ;; Return value:  Size  Location     Type
 16583 ;;		None               void
 16584 ;; Registers used:
 16585 ;;		None
 16586 ;; Tracked objects:
 16587 ;;		On entry : 0/0
 16588 ;;		On exit  : 0/0
 16589 ;;		Unchanged: 0/0
 16590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16595 ;;Total ram usage:        0 bytes
 16596 ;; Hardware stack levels used:    1
 16597 ;; Hardware stack levels required when called:    3
 16598 ;; This function calls:
 16599 ;;		Nothing
 16600 ;; This function is called by:
 16601 ;;		_main
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           
 16606                           ;psect for function _Buzzer_Initialization
 16607  1109                     _Buzzer_Initialization:	
 16608                           
 16609                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16610                           
 16611                           ;incstack = 0
 16612                           ; Regs used in _Buzzer_Initialization: []
 16613  1109  0021               	movlb	1	; select bank1
 16614  110A  144C               	bsf	_Buz1^(0+128),0
 16615  110B  0008               	return
 16616  110C                     __end_of_Buzzer_Initialization:	
 16617                           
 16618                           	psect	intentry
 16619  0004                     __pintentry:	
 16620 ;; *************** function _ISR *****************
 16621 ;; Defined at:
 16622 ;;		line 116 in file "../src/MCU_B1.c"
 16623 ;; Parameters:    Size  Location     Type
 16624 ;;		None
 16625 ;; Auto vars:     Size  Location     Type
 16626 ;;		None
 16627 ;; Return value:  Size  Location     Type
 16628 ;;		None               void
 16629 ;; Registers used:
 16630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16631 ;; Tracked objects:
 16632 ;;		On entry : 0/0
 16633 ;;		On exit  : 0/0
 16634 ;;		Unchanged: 0/0
 16635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16638 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;Total ram usage:        1 bytes
 16641 ;; Hardware stack levels used:    1
 16642 ;; Hardware stack levels required when called:    2
 16643 ;; This function calls:
 16644 ;;		_IOC_ISR
 16645 ;;		_TMR1_ISR
 16646 ;; This function is called by:
 16647 ;;		Interrupt level 1
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651  0004                     _ISR:	
 16652                           
 16653                           ;incstack = 0
 16654                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16655  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16656  0005  3180               	pagesel	$
 16657  0006  0020               	movlb	0	; select bank0
 16658  0007  087F               	movf	127,w
 16659  0008  00F1               	movwf	??_ISR
 16660                           
 16661                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 16662  0009  0021               	movlb	1	; select bank1
 16663  000A  1C11               	btfss	17,0	;volatile
 16664  000B  2812               	goto	i1l7299
 16665  000C  0020               	movlb	0	; select bank0
 16666  000D  1C11               	btfss	17,0	;volatile
 16667  000E  2812               	goto	i1l7299
 16668                           
 16669                           ;MCU_B1.c: 126: TMR1_ISR();
 16670  000F  3194  24CD  3180   	fcall	_TMR1_ISR
 16671  0012                     i1l7299:	
 16672                           
 16673                           ;MCU_B1.c: 127: }
 16674                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 16675  0012  198B               	btfsc	11,3	;volatile
 16676  0013  1C0B               	btfss	11,0	;volatile
 16677  0014  281A               	goto	i1l1253
 16678  0015  0027               	movlb	7	; select bank7
 16679  0016  1D16               	btfss	22,2	;volatile
 16680  0017  281A               	goto	i1l1253
 16681                           
 16682                           ;MCU_B1.c: 139: IOC_ISR();
 16683  0018  3191  2187         	fcall	_IOC_ISR
 16684  001A                     i1l1253:	
 16685                           ;MCU_B1.c: 140: }
 16686                           ;MCU_B1.c: 148: return;
 16687                           
 16688  001A  0871               	movf	??_ISR,w
 16689  001B  0020               	movlb	0	; select bank0
 16690  001C  00FF               	movwf	127
 16691  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 16692  001E  0009               	retfie
 16693  001F                     __end_of_ISR:	
 16694                           
 16695                           	psect	text126
 16696  14CD                     __ptext126:	
 16697 ;; *************** function _TMR1_ISR *****************
 16698 ;; Defined at:
 16699 ;;		line 236 in file "../src/MCU_B1.c"
 16700 ;; Parameters:    Size  Location     Type
 16701 ;;		None
 16702 ;; Auto vars:     Size  Location     Type
 16703 ;;		None
 16704 ;; Return value:  Size  Location     Type
 16705 ;;		None               void
 16706 ;; Registers used:
 16707 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16708 ;; Tracked objects:
 16709 ;;		On entry : 0/0
 16710 ;;		On exit  : 0/0
 16711 ;;		Unchanged: 0/0
 16712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16717 ;;Total ram usage:        0 bytes
 16718 ;; Hardware stack levels used:    1
 16719 ;; Hardware stack levels required when called:    1
 16720 ;; This function calls:
 16721 ;;		_DimmerLights_TMR_1
 16722 ;; This function is called by:
 16723 ;;		_ISR
 16724 ;; This function uses a non-reentrant model
 16725 ;;
 16726                           
 16727                           
 16728                           ;psect for function _TMR1_ISR
 16729  14CD                     _TMR1_ISR:	
 16730                           
 16731                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 16732                           
 16733                           ;incstack = 0
 16734                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16735  14CD  3194  2499  3194   	fcall	_DimmerLights_TMR_1
 16736                           
 16737                           ;MCU_B1.c: 269: Timer1.Count++;
 16738  14D0  3001               	movlw	1
 16739  14D1  0021               	movlb	1	; select bank1
 16740  14D2  07D9               	addwf	(_Timer1^(0+128)+1),f
 16741  14D3  3000               	movlw	0
 16742  14D4  3DDA               	addwfc	((_Timer1+1)^(0+128)+1),f
 16743                           
 16744                           ;MCU_B1.c: 270: if (Timer1.Count == (int)(20*10)) {
 16745  14D5  3001               	movlw	1
 16746  14D6  3ED8               	addlw	_Timer1& (0+255)
 16747  14D7  0086               	movwf	6
 16748  14D8  0187               	clrf	7
 16749  14D9  3F40               	moviw [0]fsr1
 16750  14DA  3AC8               	xorlw	200
 16751  14DB  1D03               	skipz
 16752  14DC  2CDF               	goto	u652_25
 16753  14DD  3F41               	moviw [1]fsr1
 16754  14DE  3A00               	xorlw	0
 16755  14DF                     u652_25:	
 16756  14DF  1D03               	skipz
 16757  14E0  2CE4               	goto	i1l7001
 16758                           
 16759                           ;MCU_B1.c: 271: Timer1.Count = 0;
 16760  14E1  01D9               	clrf	(_Timer1^(0+128)+1)
 16761  14E2  01DA               	clrf	((_Timer1+1)^(0+128)+1)
 16762                           
 16763                           ;MCU_B1.c: 272: Timer1.Timeout = 1;
 16764  14E3  1458               	bsf	_Timer1^(0+128),0
 16765  14E4                     i1l7001:	
 16766                           
 16767                           ;MCU_B1.c: 273: }
 16768                           ;MCU_B1.c: 275: TMR1H = (int)((65536-1480)/256);
 16769  14E4  30FA               	movlw	250
 16770  14E5  0020               	movlb	0	; select bank0
 16771  14E6  0097               	movwf	23	;volatile
 16772                           
 16773                           ;MCU_B1.c: 276: TMR1L = (int)((65536-1480)%256);
 16774  14E7  3038               	movlw	56
 16775  14E8  0096               	movwf	22	;volatile
 16776                           
 16777                           ;MCU_B1.c: 277: TMR1IF = 0;
 16778  14E9  1011               	bcf	17,0	;volatile
 16779  14EA  0008               	return
 16780  14EB                     __end_of_TMR1_ISR:	
 16781                           
 16782                           	psect	text127
 16783  1499                     __ptext127:	
 16784 ;; *************** function _DimmerLights_TMR_1 *****************
 16785 ;; Defined at:
 16786 ;;		line 1522 in file "../src/Dimmer_B1.c"
 16787 ;; Parameters:    Size  Location     Type
 16788 ;;		None
 16789 ;; Auto vars:     Size  Location     Type
 16790 ;;		None
 16791 ;; Return value:  Size  Location     Type
 16792 ;;		None               void
 16793 ;; Registers used:
 16794 ;;		wreg, status,2, status,0
 16795 ;; Tracked objects:
 16796 ;;		On entry : 0/0
 16797 ;;		On exit  : 0/0
 16798 ;;		Unchanged: 0/0
 16799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16803 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16804 ;;Total ram usage:        1 bytes
 16805 ;; Hardware stack levels used:    1
 16806 ;; This function calls:
 16807 ;;		Nothing
 16808 ;; This function is called by:
 16809 ;;		_TMR1_ISR
 16810 ;; This function uses a non-reentrant model
 16811 ;;
 16812                           
 16813                           
 16814                           ;psect for function _DimmerLights_TMR_1
 16815  1499                     _DimmerLights_TMR_1:	
 16816                           
 16817                           ;Dimmer_B1.c: 1523: if (DimmerIntr1.GO == 1) {
 16818                           
 16819                           ;incstack = 0
 16820                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 16821  1499  0021               	movlb	1	; select bank1
 16822  149A  1C20               	btfss	_DimmerIntr1^(0+128),0
 16823  149B  0008               	return
 16824                           
 16825                           ;Dimmer_B1.c: 1524: DimmerIntr1.Count++;
 16826  149C  3001               	movlw	1
 16827  149D  00F0               	movwf	??_DimmerLights_TMR_1
 16828  149E  0870               	movf	??_DimmerLights_TMR_1,w
 16829  149F  07A2               	addwf	(_DimmerIntr1^(0+128)+2),f
 16830                           
 16831                           ;Dimmer_B1.c: 1527: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2_Value) {
 16832  14A0  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 16833  14A1  062C               	xorwf	(_DimmerIntr1^(0+128)+12),w
 16834  14A2  1903               	btfsc	3,2
 16835                           
 16836                           ;Dimmer_B1.c: 1528: if (DimmerIntr1.ControlStatus == 1) {
 16837  14A3  1DA0               	btfss	_DimmerIntr1^(0+128),3
 16838  14A4  2CA7               	goto	i1l6627
 16839                           
 16840                           ;Dimmer_B1.c: 1529: RA7 = 1;
 16841  14A5  0020               	movlb	0	; select bank0
 16842  14A6  178C               	bsf	12,7	;volatile
 16843  14A7                     i1l6627:	
 16844                           
 16845                           ;Dimmer_B1.c: 1530: }
 16846                           ;Dimmer_B1.c: 1531: }
 16847                           ;Dimmer_B1.c: 1533: if (DimmerIntr1.Count == 60) {
 16848  14A7  0021               	movlb	1	; select bank1
 16849  14A8  0822               	movf	(_DimmerIntr1^(0+128)+2),w
 16850  14A9  3A3C               	xorlw	60
 16851  14AA  1D03               	skipz
 16852  14AB  0008               	return
 16853                           
 16854                           ;Dimmer_B1.c: 1534: DimmerIntr1.GO = 0;
 16855  14AC  1020               	bcf	_DimmerIntr1^(0+128),0
 16856                           
 16857                           ;Dimmer_B1.c: 1535: DimmerIntr1.Count = 0;
 16858  14AD  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 16859                           
 16860                           ;Dimmer_B1.c: 1537: if (DimmerIntr1.ControlStatus == 1) {
 16861  14AE  1DA0               	btfss	_DimmerIntr1^(0+128),3
 16862  14AF  0008               	return
 16863                           
 16864                           ;Dimmer_B1.c: 1538: RA7 = 0;
 16865  14B0  0020               	movlb	0	; select bank0
 16866  14B1  138C               	bcf	12,7	;volatile
 16867  14B2  0008               	return
 16868  14B3                     __end_of_DimmerLights_TMR_1:	
 16869                           
 16870                           	psect	text128
 16871  1187                     __ptext128:	
 16872 ;; *************** function _IOC_ISR *****************
 16873 ;; Defined at:
 16874 ;;		line 396 in file "../src/MCU_B1.c"
 16875 ;; Parameters:    Size  Location     Type
 16876 ;;		None
 16877 ;; Auto vars:     Size  Location     Type
 16878 ;;		None
 16879 ;; Return value:  Size  Location     Type
 16880 ;;		None               void
 16881 ;; Registers used:
 16882 ;;		wreg, status,2, status,0, pclath, cstack
 16883 ;; Tracked objects:
 16884 ;;		On entry : 0/0
 16885 ;;		On exit  : 0/0
 16886 ;;		Unchanged: 0/0
 16887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;Total ram usage:        0 bytes
 16893 ;; Hardware stack levels used:    1
 16894 ;; Hardware stack levels required when called:    1
 16895 ;; This function calls:
 16896 ;;		_DimmerLights_IOC_1
 16897 ;; This function is called by:
 16898 ;;		_ISR
 16899 ;; This function uses a non-reentrant model
 16900 ;;
 16901                           
 16902                           
 16903                           ;psect for function _IOC_ISR
 16904  1187                     _IOC_ISR:	
 16905                           
 16906                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 16907                           
 16908                           ;incstack = 0
 16909                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 16910  1187  0021               	movlb	1	; select bank1
 16911  1188  1C3F               	btfss	_myMain^(0+128),0
 16912  1189  298C               	goto	i1l7011
 16913                           
 16914                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 16915  118A  3194  247F         	fcall	_DimmerLights_IOC_1
 16916  118C                     i1l7011:	
 16917                           
 16918                           ;MCU_B1.c: 418: }
 16919                           ;MCU_B1.c: 420: IOCBF2 = 0;
 16920  118C  0027               	movlb	7	; select bank7
 16921  118D  1116               	bcf	22,2	;volatile
 16922                           
 16923                           ;MCU_B1.c: 421: IOCIF = 0;
 16924  118E  100B               	bcf	11,0	;volatile
 16925  118F  0008               	return
 16926  1190                     __end_of_IOC_ISR:	
 16927                           
 16928                           	psect	text129
 16929  147F                     __ptext129:	
 16930 ;; *************** function _DimmerLights_IOC_1 *****************
 16931 ;; Defined at:
 16932 ;;		line 1463 in file "../src/Dimmer_B1.c"
 16933 ;; Parameters:    Size  Location     Type
 16934 ;;		None
 16935 ;; Auto vars:     Size  Location     Type
 16936 ;;		None
 16937 ;; Return value:  Size  Location     Type
 16938 ;;		None               void
 16939 ;; Registers used:
 16940 ;;		wreg, status,2
 16941 ;; Tracked objects:
 16942 ;;		On entry : 0/0
 16943 ;;		On exit  : 0/0
 16944 ;;		Unchanged: 0/0
 16945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16948 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16949 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16950 ;;Total ram usage:        1 bytes
 16951 ;; Hardware stack levels used:    1
 16952 ;; This function calls:
 16953 ;;		Nothing
 16954 ;; This function is called by:
 16955 ;;		_IOC_ISR
 16956 ;; This function uses a non-reentrant model
 16957 ;;
 16958                           
 16959                           
 16960                           ;psect for function _DimmerLights_IOC_1
 16961  147F                     _DimmerLights_IOC_1:	
 16962                           
 16963                           ;Dimmer_B1.c: 1482: if (DimmerIntr1.GO == 0) {
 16964                           
 16965                           ;incstack = 0
 16966                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2]
 16967  147F  0021               	movlb	1	; select bank1
 16968  1480  1820               	btfsc	_DimmerIntr1^(0+128),0
 16969  1481  0008               	return
 16970                           
 16971                           ;Dimmer_B1.c: 1486: DimmerIntr1.Count = 0;
 16972  1482  01A2               	clrf	(_DimmerIntr1^(0+128)+2)
 16973                           
 16974                           ;Dimmer_B1.c: 1487: DimmerIntr1.GO = 1;
 16975  1483  1420               	bsf	_DimmerIntr1^(0+128),0
 16976                           
 16977                           ;Dimmer_B1.c: 1489: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 16978  1484  1E20               	btfss	_DimmerIntr1^(0+128),4
 16979  1485  1B20               	btfsc	_DimmerIntr1^(0+128),6
 16980                           
 16981                           ;Dimmer_B1.c: 1490: DimmerIntr1.Tune = 1;
 16982  1486  14A0               	bsf	_DimmerIntr1^(0+128),1
 16983                           
 16984                           ;Dimmer_B1.c: 1491: }
 16985                           ;Dimmer_B1.c: 1493: if (DimmerIntr1.Calculate == 1) {
 16986  1487  1FA1               	btfss	(_DimmerIntr1^(0+128)+1),7
 16987  1488  2C92               	goto	i1l6615
 16988                           
 16989                           ;Dimmer_B1.c: 1494: DimmerIntr1.Calculate = 0;
 16990  1489  13A1               	bcf	(_DimmerIntr1^(0+128)+1),7
 16991                           
 16992                           ;Dimmer_B1.c: 1495: DimmerIntr1.TuneEnd_Value = DimmerIntr1.TuneEnd;
 16993  148A  082B               	movf	(_DimmerIntr1^(0+128)+11),w
 16994  148B  00F0               	movwf	??_DimmerLights_IOC_1
 16995  148C  0870               	movf	??_DimmerLights_IOC_1,w
 16996  148D  00AF               	movwf	(_DimmerIntr1^(0+128)+15)
 16997                           
 16998                           ;Dimmer_B1.c: 1496: DimmerIntr1.TuneValue2_Value = DimmerIntr1.TuneValue2;
 16999  148E  0828               	movf	(_DimmerIntr1^(0+128)+8),w
 17000  148F  00F0               	movwf	??_DimmerLights_IOC_1
 17001  1490  0870               	movf	??_DimmerLights_IOC_1,w
 17002  1491  00AC               	movwf	(_DimmerIntr1^(0+128)+12)
 17003  1492                     i1l6615:	
 17004                           
 17005                           ;Dimmer_B1.c: 1497: }
 17006                           ;Dimmer_B1.c: 1501: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 17007  1492  12A1               	bcf	(_DimmerIntr1^(0+128)+1),5
 17008  1493  0020               	movlb	0	; select bank0
 17009  1494  1D0D               	btfss	13,2	;volatile
 17010  1495  0008               	return
 17011  1496  0021               	movlb	1	; select bank1
 17012  1497  16A1               	bsf	(_DimmerIntr1^(0+128)+1),5
 17013  1498  0008               	return
 17014  1499                     __end_of_DimmerLights_IOC_1:	
 17015  007E                     btemp	set	126	;btemp
 17016  007E                     pic14e$flags	set	126
 17017  007E                     wtemp	set	126
 17018  007E                     wtemp0	set	126
 17019  0080                     wtemp1	set	128
 17020  0082                     wtemp2	set	130
 17021  0084                     wtemp3	set	132
 17022  0086                     wtemp4	set	134
 17023  0088                     wtemp5	set	136
 17024  007F                     wtemp6	set	127
 17025  007E                     ttemp	set	126
 17026  007E                     ttemp0	set	126
 17027  0081                     ttemp1	set	129
 17028  0084                     ttemp2	set	132
 17029  0087                     ttemp3	set	135
 17030  007F                     ttemp4	set	127
 17031  007E                     ltemp	set	126
 17032  007E                     ltemp0	set	126
 17033  0082                     ltemp1	set	130
 17034  0086                     ltemp2	set	134
 17035  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         203
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      12
    BANK0            80     72      79
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      73
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK1[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 9
		 -> NULL(NULL[0]), DimmerLights1(BANK2[9]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    _main->_Flash_Memory_Main
    _my_MainTimer->_setBuz
    _setSw_Main->_setBuz
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setBuz
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setBuz
    _setRFSW_AdjControl->_setBuz
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_PowerRST
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setLED
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setBuz
    _DimmerLights_DimmingFunction->_DimmerIntr_ValueCalculate
    _getDimmerLights_ValueToPercent->___awtoft
    _getDimmerLights_PercentToValue->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___awtoft
    ___awtoft->___ftpack
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _IOC_ISR->_DimmerLights_IOC_1

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftmul
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  146561
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                           _WDT_Main
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1601
                                              6 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3947
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3947
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      4     4      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1321
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1321
                                              5 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   50002
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   50002
                                             70 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
                            _setData
 ---------------------------------------------------------------------------------
 (3) _setData                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45170
                                             68 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4181
                                             57 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40907
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     393
                                              6 COMMON     1     1      0
                                              0 BANK0      3     3      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10411
                                             65 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   25264
                                             59 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
                             _setBuz
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     199
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     877
                                              2 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     330
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     560
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     184
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2850
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     544
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     698
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     608
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     422
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     586
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0     138
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0     138
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      96
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              3 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1414
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1414
                                              5 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    2251
                                              8 COMMON     1     1      0
                                              0 BANK0      2     2      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      74
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    2066
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1936
                                              6 COMMON     2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1726
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       5     5      0    1460
                                              5 COMMON     1     1      0
                                              0 BANK0      4     4      0
           _getMain_All_Error_Status
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             2     2      0      34
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48295
       _DimmerLights_DimmingFunction
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48251
                                             69 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   30654
                                             65 BANK0      4     3      1
          _DimmerIntr_ValueCalculate
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1259
                                              3 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       1     1      0      93
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     222
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     311
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     133
                                             56 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3519
                                             57 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      37
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      67
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   17212
                                             62 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    2983
                                             57 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     400
                                             56 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      46
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      2     2      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      44
                                              4 COMMON     2     2      0
          _DimmerIntr_ValueCalculate
 ---------------------------------------------------------------------------------
 (4) _DimmerIntr_ValueCalculate                            2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   26411
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   26411
                                             56 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       4     4      0    8712
                                             50 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   17677
                                             50 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             36 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4030
                                              7 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    4386
                                              7 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4935
                                             23 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3758
                                              7 COMMON     2     2      0
                                              3 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3330
                                              2 COMMON     5     0      5
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4812
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4812
                                             57 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setProductData                                       3     2      1    2536
                                             54 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 4     4      0    1886
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1601
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      62
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      96
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      31
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
                 _DimmerLights_IOC_1
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
       _DimmerIntr_ValueCalculate
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _DimmerIntr_ValueCalculate
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getMain_All_Error_Status
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setTxData
       _setData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _WDT_Main
     _WDT_Clearing
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
   _TMR1_ISR
     _DimmerLights_TMR_1

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     142      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     142      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 30 14:24:33 2015

                    __size_of_Switch_Main 0007                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 07FE  
                   __end_of_setCmd_Status 13CE                            ___bmul@product 0074  
                                      l90 0B21                                        l88 0B0F  
                                      l98 0961                                        l99 095D  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 154B  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _u1 013E                                        _Sw 006C  
                  __end_of_setDelayOff_GO 1000                              ___ftadd@exp1 0043  
                            ___ftadd@exp2 0042                    setRF_AdjControl@status 0020  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 0D07  
                            ___ftadd@sign 0041                                       l100 094D  
                                     l102 095B                                       l307 13AF  
                    _setDimmerLights_SwOn 09AE                                       l308 13B0  
                                     l351 1593                                       l239 0E75  
                                     l700 125B                                       l539 0EFE  
                                     l811 0567                                       l900 0A42  
                                     l891 0A19                                       l894 0A27  
                                     l889 0A29                                       _GIE 005F  
                                     _CRC 00DF                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 0007  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 007A  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00B0  
                                     _ISR 0004                                       _WDT 00DD  
                                     _Cmd 0068              getDimmerLights_Status@lights 0074  
                                     _Sw1 015C                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 13B9                     _Buzzer_Initialization 1109  
                         __end_of_ADC_Set 1168                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 13E3               _setDimmerIntr_ControlStatus 13CE  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0031                           __end_of_IOC_ISR 1190  
                   _setDimmerLights_OnOff 04F6          setDimmerLights_DimmingRun@lights 0076  
                            ___ftdiv@sign 0036                                      l1030 088C  
                                    l1031 0893                                      l1304 15FE  
                                    l1314 06CD                                      l2213 01B8  
                                    l2215 0096                                      l1290 17FA  
                                    l2502 13CD                                      l2193 0807  
                                    l1811 043E                           __end_of_IOC_Set 11CE  
                                    l2461 177D                                      l2445 08FC  
                                    l2702 0261                                      l1815 03A6  
                                    l1816 03EA                                      l6001 12DA  
                                    l1841 1184                                      l6005 12E0  
                                    l2493 1709                                      l1918 0DE4  
                                    l6007 12E5                                      l1872 165F  
                                    l2673 0C74                                      l1859 0DCF  
                                    l1886 0F7B                                      l2679 0C8B  
                                    l5271 131F                                      l5267 1319  
                                    l5463 0775                                      l5631 0DDC  
                                    l5481 07A5                                      l5625 0DD6  
                                    l7411 0B5D                                      l5491 07C9  
                                    l5483 07B3                                      l5627 0DD7  
                                    l5731 13C8                                      l8115 1333  
                   _setDimmerLights_SwOff 169A                                      l7421 0B78  
                                    l5493 07CC                                      l8141 06C6  
                                    l8133 0666                                      l6357 1344  
                                    l5639 0E22                                      l5727 13BB  
                                    l8127 0652                                      l9103 0F5D  
                                    l9111 0F69                                      l7425 0B80  
                                    l7417 0B6F                                      l7409 0B51  
                                    l5497 07DA                                      l5489 07C0  
                                    l5585 0FB6                                      l9041 0BF6  
                                    l5681 1448                                      l9121 0E49  
                                    l9105 0F61                                      l5595 0FE4  
                                    l9051 0C06                                      l9107 0F65  
                                    l6459 1355                                      l9037 0BF0  
                                    l9045 0BFC                                      l8341 033A  
                                    l5693 15A4                                      l9125 0E4F  
                                    l6583 0A1B                                      l5599 0FF6  
                                    l9071 0C30                                      l9055 0C0C  
                                    l5695 15AF                                      l5679 1444  
                                    l9151 0E88                                      l9143 0E7B  
                                    l9119 0E46                                      l7393 0B3E  
                                    l8521 0C48                                      l9241 0530  
                                    l9153 0E8B                                      l9145 0E7E  
                                    l8611 0237                                      l8603 021A  
                                    l6595 0A35                                      l9067 0C2A  
                                    l9075 0C36                                      l9059 0C12  
                                    l9243 0545                                      l9411 0D33  
                                    l9139 0E5E                                      l9323 0DA4  
                                    l9307 0D82                                      l6851 0812  
                                    l8525 0C4F                                      l8621 0253  
                                    l8613 023C                                      l9261 0573  
                                    l9421 0D59                                      l9181 0CBE  
                                    l9157 0E91                                      l9149 0E84  
                                    l9093 0F1B                                      l7399 0B49  
                                    l8535 0C79                                      l8527 0C5A  
                                    l8631 0285                                      l8623 025D  
                                    l8615 0240                                      l8711 04AA  
                                    l9423 0D5F                                      l8367 17D9  
                                    l9175 0CB5                                      l9095 0F21  
                                    l9087 0F06                                      l9319 0D9B  
                                    l6847 080C                                      l6953 0939  
                                    l8553 124E                                      l8537 0C81  
                                    l8529 0C5F                                      l8641 02A0  
                                    l8609 022D                                      l9249 054F  
                                    l9409 0D2D                                      l9177 0CB8  
                                    l9353 168A                                      l9345 166C  
                                    l9521 0437                                      l8627 0273  
                                    l8651 05BA                                      l8723 04C6  
                                    l8715 04B2                                      l9347 1678  
                                    l9099 0F3C                                      l8581 01EA  
                                    l9285 0A60                                      l9277 05A0  
                                    l9197 0CCE                                      l9357 1693  
                                    l8901 0748                                      l9509 0423  
                                    l9541 0080                     _myMain_Initialization 1298  
                                    l8591 0200                                      l8671 0611  
                                    l8727 04CE                                      l8823 1477  
                                    l9199 0CE5                                      l8569 1556  
                                    l8585 01F1                                      l8657 05D0  
                                    l8817 146E                                      l8833 1532  
                                    l9481 03E5                                      l8851 14BC  
                                    l7971 15E9                                      l8819 1471  
                                    l8835 1535                                      l8923 1734  
                                    l8693 0459                                      l8933 1576  
                                    l9581 0133                                      l9557 00C3  
                                    l9653 175D                                      l8783 09E0  
                                    l8679 062A                                      l8855 14C4  
                                    l8839 153B                                      l8935 1579  
                                    l9495 03F9                                      l9567 00F5  
                                    l9591 0165                                      l8785 09E6  
                                    l8961 08BF                                      l8873 17B2  
                                    _CFGS 0CAE                                      l8787 09F0  
                                    l8699 046F                                      l8971 08CF  
                                    l8963 08C2                                      l8939 157F  
                                    l9685 16F0                                      l8973 08D2  
                                    l8885 06EC                                      l8799 16C7  
                                    l8967 08C8                              __CFG_WDTE$ON 0000  
                                    l8977 08D8                                      l8889 06F1  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u4315 07C1                                      u4255 077C  
                                    _PEIE 005E                                      u4285 07A6  
                                    u5325 1431                                      u4615 1599  
                                    u7025 0B54                                      u7045 0B5E  
                                    u4485 0FC2                                      u7055 0B68  
                                    u7065 0B70                                      u9005 062B  
                                    u6465 092F                                      u9115 04CF  
                                    u9125 04D5                                      u9045 047B  
                                    u9055 048B                                      u8415 17F1  
                                    u9145 1407                                      u9075 04B3  
                                    u9085 04B9                                      u8615 0C6F  
                                    u8635 0C7C                                      u8805 021B  
                                    u8665 0C93                                      u8595 0C55  
                                    u8835 022E                                      u8865 0241  
                                    _LWLO 0CAD                                      u8965 05E2  
                                    u8895 0254                                      u8975 05F2  
                                    u8985 0612                                      u8995 0621  
                                    _RSSI 00E2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1466  
              _setDimmerLights_DimmingRun 144E                                      _Buz1 00CC  
                                    _main 08DE                              ___ftpack@arg 0072  
                     __end_of_DlyOff_Main 0F05                           __end_of_RF_Main 1118  
                            ___ftpack@exp 0075                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 11A2                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
       setDimmerLights_SwOn@dimmingStatus 0028      __end_of_DimmerLights_DimmingFunction 0A44  
   __size_of_DimmerLights_DimmingFunction 004C              _DimmerLights_DimmingFunction 09F8  
              __end_of_setRFSW_AdjControl 075C                         ___bmul@multiplier 0075  
                            ___ftmul@cntr 0035                              ___ftmul@sign 0036  
                                   ??_ISR 0071                              ___fttol@exp1 0051  
              ?_DimmerIntr_ValueCalculate 0070                              ___fttol@lval 004D  
       setDimmerLights_DimmingRun@command 0074   __end_of_getDimmerLights_Allow_Condition 110F  
__size_of_getDimmerLights_Allow_Condition 0003         ??_getDimmerLights_Allow_Condition 0072  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 110C  
                  _getDimmerLights_Status 126B                          __end_of_LED_Main 1237  
                              _DimmerIntr 00E0                     ?_setDimmerLights_Main 0070  
                         ?_setDelayOff_GO 0059                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 01E5                           __end_of___awdiv 0B87  
                         __end_of___ftadd 02B8                           __end_of___ftdiv 064C  
                                   u10045 166F                                     u10065 1679  
                                   u10075 1683                           __end_of___ftmul 04F6  
                                   u10085 168B                                     u10345 03C2  
                         ___awdiv@divisor 0072                                     u10605 1775  
                                   u10375 0412                                     _T1CON 0018  
                         __end_of___fttol 07E3                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 169A                           ___awdiv@counter 0020  
           __size_of_CC2500_FrequencyCabr 000B                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0073  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1437  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 09AE  
 __size_of_getDimmerLights_ValueToPercent 0046            _getDimmerLights_ValueToPercent 0968  
                                   _Light 00E1                          __end_of_TMR1_ISR 14EB  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 0019  
                        __end_of_TMR1_Set 1243        DimmerLights_DimmingFunction@lights 0075  
                           ___awtoft@sign 0026                             ___ftpack@sign 0076  
                         __end_of_setData 0AE0               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1317  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03C8                            __CFG_BOREN$OFF 0000  
                      Flash_Memory_Read@i 0073                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 000F             __end_of_setLED_Initialization 1298  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                     _getAll_Sw_KeyStatus 1328                        _setRF_DimmerLights 0DD1  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0004  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                 __size_of_getDelayOff_GO 000F                              __end_of_main 0922  
                     ?_setRF_DimmerLights 0059                          __end_of_Fosc_Set 1124  
          getMain_All_LightsStatus@status 0072                        ??_setMemory_Modify 0072  
            setDimmerLights_OnOff@command 0061                            _Exception_Main 16D2  
                        ?_CC2500_WriteREG 0074         __end_of_DimmerIntr_ValueCalculate 12C7  
                               ??_ADC_Set 0072                      _setSw_Initialization 125D  
                                  ??_main 0079                             ___fttol@sign1 004C  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0058              ??_DimmerLights_SelectPointer 0072  
                 _setControl_Lights_Table 0F05                            _setMemory_Data 11B8  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0074  
                              _Receive_OK 03C8        setDimmerIntr_ControlStatus@command 0072  
                 _setDimmerLights_Dimming 0A44                                 ??_IOC_ISR 0071  
                               ??_IOC_Set 0072                               _DimmerIntr1 00A0  
                _getMain_All_LightsStatus 116F                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 13F8                   ??_Switch_Initialization 0076  
                  ?_setDimmerLights_OnOff 0061                      ??_setRF_DimmerLights 005A  
                       ??_getRF_KeyStatus 0072                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 0E9D                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 1250                                 ??_RF_Main 0079  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                                 ??_WDT_Set 0072  
                        __end_of___awtoft 156D                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 0CA3                  _getMain_All_Error_Status 110F  
                                  _IOCBF2 1CB2                                    i1l1253 001A  
                                  i1l7001 14E4                                    i1l7011 118C  
                                  i1l6615 1492                                    i1l6627 14A7  
                                  i1l7299 0012                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0072                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                                  u652_25 14DF                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 07E3  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 1142  
   __size_of_setDimmerLights_DimmingClose 0005              _setDimmerLights_DimmingClose 113D  
                      DelayTime_1us@count 0072                        setRF_AdjControl@sw 0022  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0059  
           __end_of_CC2500_PowerOnInitial 1422                                    _Dimmer 014E  
                                  _DlySw1 0165                          _setRF_AdjControl 170A  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 12E7  
              __end_of_Mcu_Initialization 137E                       __end_of_Buzzer_Main 0968  
                                  _Memory 01A0                                    _Timer1 00D8  
                                  ___bmul 1317                    __end_of_Exception_Main 170A  
                    Exception_Main@lights 0020                                 ??___awdiv 0076  
                               ??___ftadd 003D              __size_of_DelayOffPointSelect 000B  
                               ??___ftdiv 002D                                 ??___ftmul 002D  
                               ??___fttol 0048              ?_Flash_Memory_Initialization 0070  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 0079  
                                  _r_data 00E6                      Exception_Main@status 0022  
                                  _s_data 00E7                    ??_setDimmerLights_SwOn 0026  
                                  _setLED 0BE2                                    _myMain 00BF  
                    ??_RF_Timeout_Counter 0072                    __end_of_setMemory_Data 11C3  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0022  
                                  _setBuz 0AE0          ??_setDimmerLights_Initialization 0072  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0072  
        __end_of_setDimmerIntr_Dimming_RF 13F8          __end_of_setDimmerIntr_Dimming_Sw 1391  
                   ___ftmul@f3_as_product 0032                 _setDimmerLights_DimmingOn 15B4  
                               ??_setData 0072                  Flash_Memory_Read@address 0074  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1307  
             __size_of_DimmerLights_IOC_1 001A                     __end_of_SwPointSelect 11EF  
             __size_of_DimmerLights_TMR_1 001A              __size_of_Flash_Memory_Modify 0089  
                 __size_of_LedPointSelect 001A           setDimmerIntr_Dimming_Sw@command 0072  
                     Flash_Memory_Write@i 0073              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 0800               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0077          __end_of_CC2500_registers_address 102F  
                 __end_of__initialization 004D           setDimmerIntr_DimmingValue@value 0058  
         getDimmerIntr_DimmingValue@value 0074                                 ?_LED_Main 0070  
                              ___ftadd@f1 0037                                ___ftadd@f2 003A  
                    _getRF_KeyStatus$4966 0074                             ?_my_MainTimer 0070  
                              ___ftdiv@f1 002A                                ___ftdiv@f2 0027  
                              ___ftdiv@f3 0032             ?_setDimmerLights_DimmingClose 0070  
                              ___awtoft@c 0023                       ___bmul@multiplicand 0072  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 0027  
                              ___ftmul@f2 002A                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 0044                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK3 150A  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
               setMemory_LoopSave@command 0073                        _LED_Initialization 121F  
                         _getSw_KeyStatus 134A                 ??_setControl_Lights_Table 0079  
                      getRF_KeyStatus@key 0073                           ?_setMemory_Data 0072  
          ??_DimmerLights_DimmingFunction 0074          ??_getDimmerLights_PercentToValue 0052  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 005F  
           ??_Flash_Memory_Initialization 0076                                 ?_WDT_Main 0070  
       setDimmerIntr_ControlStatus@lights 0074                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 11FB                __end_of_set_TimeoutCleared 1147  
         setDimmerIntr_MaxmumValue@lights 005A                        __size_of_getRxData 0065  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 11EF                      __size_of_setLED_Main 0043  
                      ??_CC2500_WriteByte 0072                                __pbssBANK0 0068  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 0922                         ??_setRFSW_Control 0061  
             ?_setDimmerLights_DimmingRun 0074                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0026                                ??_LED_Main 0076  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1118  
                           ??_Switch_Main 0079                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0076  
                            _DimmerLights 006A                         LedPointSelect@led 0072  
                  __size_of_DelayOff_Main 0004                      __size_of_setRF_Learn 0011  
                             setBuz@count 0078                   ?_getDimmerLights_Status 0070  
                              __pmaintext 08DE                            _getDelayOff_GO 127A  
                     _CC2500_WriteCommand 1466                                   ?___bmul 0072  
                        ??_setDelayOff_GO 005B         __end_of_DimmerIntr_Initialization 0858  
           ??_DimmerLights_Initialization 0079                                ??_TMR1_ISR 0071  
       __size_of_getDimmerIntr_Dimming_Sw 000D                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0075  
               ?_getDimmerIntr_Dimming_Sw 0070                        __size_of_setTxData 0007  
             ??_DimmerIntr_ValueCalculate 0072                                   ?_setLED 0073  
                  __size_of_DelayTime_1us 0025                                   _ADC_Set 1161  
                                 ?_setBuz 0024                                 ?___awtoft 0023  
                               ?___ftpack 0072        __end_of_DimmerLights_SelectPointer 11B8  
              _DimmerLights_SelectPointer 11AD                                ??_WDT_Main 0072  
            __end_of_setRF_Initialization 11D9                        _setRFSW_AdjControl 06D5  
                  __end_of_setProductData 11FB             setDimmerLights_Dimming@lights 0061  
                                 _IOC_ISR 1187                                   _IOC_Set 11C3  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 005E  
   getDimmerLights_Allow_Condition@lights 0070                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 17BF                         _Flash_Memory_Read 1391  
                  __size_of_CC2500_RxData 0064                    __size_of_CC2500_TxData 0066  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 0120  
                                 _RF_Main 1115                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1199  
         __end_of_setControl_Lights_Table 0F7C                           setRF_Main@error 0067  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 0A90  
                     getCmd_Status@number 0072              __end_of_CC2500_FrequencyCabr 11E4  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0074  
       __size_of_setDimmerIntr_Dimming_RF 0015         __size_of_setDimmerIntr_Dimming_Sw 0013  
                       __end_of_getBuz_GO 12F7                 ?_setDimmerIntr_Dimming_RF 0072  
                     ??_Flash_Memory_Main 0078                 ?_setDimmerIntr_Dimming_Sw 0072  
                     ??_Flash_Memory_Read 0072                    __end_of_getDelayOff_GO 1289  
                                 _VarLED1 00EC                                   _VarLED2 016A  
          __end_of_getDimmerLights_Status 127A                         __end_of_getRxData 0DD1  
                 __end_of_getSw_KeyStatus 135B                  _CC2500_registers_address 1000  
                    ??_setRFSW_AdjControl 005B                           __size_of___bmul 0011  
                     setProductData@value 0056                                   ___awdiv 0B33  
          ??_setDimmerLights_DimmingClose 0075                                   ___ftadd 01C2  
                                 ___ftdiv 05A3                                   ___ftmul 0442  
                                 ___fttol 075C                       __end_of_Switch_Main 116F  
                                 ___lwdiv 1663                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1339  
                              ??___awtoft 0077                                ??___ftpack 0020  
                         __size_of_setLED 005E                      setRFSW_AdjControl@sw 005E  
         DimmerIntr_ValueCalculate@lights 0073                           __size_of_setBuz 0053  
                                 __ptext1 1743                                   __ptext2 1298  
                                 __ptext3 1307                                   __ptext4 07FE  
                                 __ptext5 1168                                   __ptext6 0051  
                                 __ptext7 135B                                   __ptext8 15B4  
                                 __ptext9 134A                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0072  
                 ??_setDimmerLights_OnOff 0062                           ?_setProductData 0056  
               __end_of_Flash_Memory_Main 1800                 __end_of_Flash_Memory_Read 13A5  
                 ??_setDimmerLights_SwOff 0074                                _setRF_Main 0383  
                 ??_myMain_Initialization 0072                             _DelayOff_Main 111C  
                __end_of_setRF_AdjControl 1743                         _DimmerLights_Main 1177  
                                 _setData 0A90            __size_of_DlyOff_Initialization 0005  
                   ??_CC2500_WriteCommand 0074                 __size_of_setMemory_Modify 0010  
           __end_of_DlyOff_Initialization 113D                __end_of_CC2500_ClearRXFIFO 112C  
              __end_of_CC2500_ClearTXFIFO 1130                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006E  
                          _LedPointSelect 14B3                 getAll_Sw_KeyStatus@status 0073  
                     _DelayOffPointSelect 11A2                                   clrloop0 114E  
          __size_of_Switch_Initialization 0004                 _DimmerIntr_ValueCalculate 12B7  
           __end_of_Switch_Initialization 1138                      end_of_initialization 004D  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 1605  
                           _DelayTime_1us 158F                         __end_of_setTxData 1161  
              __end_of_Flash_Memory_Write 1605        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1147                __end_of_setRF_TransceiveGO 12D7  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0079  
                    Flash_Memory_Read@ret 0075                                   initloop 1148  
                              _setSw_Main 0051                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 156D  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1289  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 0017  
                           _CC2500_RxData 0CA3                             _CC2500_TxData 0E37  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 064C  
                            __pstringtext 1000                             _setCmd_Status 13B9  
                     _Flash_Memory_Unlock 1190                       ??_CC2500_ReadStatus 0074  
                 CC2500_InitSetREG@loop_c 0022                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0075                    setSw_Initialization@sw 0075  
               __end_of_DimmerLights_Main 117F                        _Mcu_Initialization 136C  
                __size_of_CC2500_PowerRST 0043              __end_of_setRF_TimeoutCleared 1128  
                    __end_of_my_MainTimer 177F                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 14CD  
                __size_of_CC2500_WriteREG 0021          setDimmerIntr_DimmingValue@lights 005A  
        getDimmerIntr_DimmingValue@lights 0073                 __end_of_CC2500_InitSetREG 162F  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0066                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 000C  
               __end_of_CC2500_ReadStatus 158F                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0070  
                             ___ftdiv@exp 0035         __end_of_setDimmerLights_DimmingOn 15DB  
                        ??_Exception_Main 0075                            __end_of_IO_Set 07FE  
                    _setRF_Initialization 11CE                        _setMemory_LoopSave 12F7  
                             _Switch_Main 1168                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 134A  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0031  
                   _CC2500_PowerOnInitial 140D               ??_DimmerIntr_Initialization 0058  
                    ??_Mcu_Initialization 0073               __end_of_getAll_Sw_KeyStatus 1339  
                   ??_DelayOffPointSelect 0072                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0072                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1328       __size_of_getDimmerIntr_DimmingValue 000D  
                    setRF_DimmerLights@on 0059                         getSw_KeyStatus@sw 0070  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 001E  
        DimmerLights_SelectPointer@lights 0073                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 0065                            __end_of_setLED 0C40  
           __size_of_setDimmerLights_SwOn 004A                            __end_of_setBuz 0B33  
              __end_of_DimmerLights_IOC_1 1499                      _CC2500_FrequencyCabr 11D9  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 177F  
                       __size_of_WDT_Main 0010                __end_of_DimmerLights_TMR_1 14B3  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0010  
                   ??_Flash_Memory_Modify 0076              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 150A                      ??_setMemory_LoopSave 0072  
                   ??_Flash_Memory_Unlock 0072                            ??_RF_RxDisable 0072  
  __end_of_getDimmerLights_PercentToValue 0BE2   __size_of_getDimmerLights_PercentToValue 005B  
          _getDimmerLights_PercentToValue 0B87                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 0054             setRF_AdjControl@dimmingStatus 0021  
                      _set_TimeoutCleared 1142         __end_of_setDimmerIntr_MaxmumValue 1207  
                                ??_IO_Set 0072                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 00E8                               ?_setSw_Main 0070  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0014  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0072  
                               _Rx_Length 00E3                     setProductData@address 0058  
                     Exception_Main@count 0021                       Exception_Main@error 0023  
                                ??___bmul 0073                    __size_of_SwPointSelect 000B  
        __end_of_getMain_All_LightsStatus 1177                                 _Tx_Length 006D  
                             __pdataBANK3 01C5                                  ??_setLED 0074  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 0079                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1112  
                        _CC2500_SIDLEMode 1130                __size_of_DimmerLights_Main 0008  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074            getDimmerIntr_Dimming_Sw@lights 0072  
                           ??_setLED_Main 0073                         __size_of___awtoft 0022  
                       __size_of___ftpack 0063                                  ?_IOC_ISR 0070  
                             __pbssCOMMON 007A                                  ?_IOC_Set 0070  
          getDimmerIntr_Dimming_Sw@status 0073                                 ___latbits 0003  
                        _setMemory_Modify 12A7                             __pcstackBANK0 0020  
               setRF_TransceiveGO@command 0073                             __pcstackBANK3 01E5  
                    ??_set_TimeoutCleared 0072                 _DimmerIntr_Initialization 0815  
                         ??_DelayTime_1us 0074                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 005B                         ??_CC2500_PowerRST 0078  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0073                              ??_TouchPower 0072  
                    __size_of_DlyOff_Main 0068                __size_of_CC2500_ReadStatus 0022  
          setDimmerIntr_MaxmumValue@value 0058               setDimmerLights_DimmingOn@sw 0074  
                       ??_CC2500_WriteREG 0075                             ??_setRF_Learn 0072  
                           _DimmerLights1 0153                     CC2500_WriteREG@w_addr 0076  
                   setDelayOff_GO@command 0059                           ??_CC2500_RxData 0076  
                setRFSW_AdjControl@status 005D                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006E                            getRxData@error 0065  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1124  
                  ?_CC2500_PowerOnInitial 0070        __size_of_DimmerIntr_ValueCalculate 0010  
                     __size_of_setRF_Main 00BF                          ___lwdiv@dividend 0074  
                   DelayOffPointSelect@sw 0073                             _getCmd_Status 12D7  
                              setBuz@time 0024                           ??_setCmd_Status 0073  
                     setDelayOff_GO@value 005A                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                                 _getBuz_GO 12E7  
                ?_setDimmerLights_Dimming 005E       __end_of_Flash_Memory_Initialization 0383  
             _Flash_Memory_Initialization 02B8                                  ?___awdiv 0072  
                               __ptext100 0815                                 __ptext101 12A7  
                               __ptext110 111C                                 __ptext102 0968  
                               __ptext111 0E9D                                 __ptext103 0B87  
                               __ptext120 1118                                 __ptext112 11EF  
                               __ptext104 075C                                 __ptext121 1138  
                               __ptext113 09AE                                 __ptext105 0442  
                               __ptext122 11A2                                 __ptext114 0AE0  
                               __ptext106 05A3                                 __ptext123 0922  
                               __ptext115 0B33                                 __ptext107 01C2  
                               __ptext124 1109                                 __ptext116 1243  
                               __ptext108 154B                                 __ptext117 169A  
                               __ptext109 0C40                                  ?___ftadd 0037  
                               __ptext126 14CD                                 __ptext118 126B  
                               __ptext127 1499                                 __ptext119 11AD  
                               __ptext128 1187                                 __ptext129 147F  
                               _getRxData 0D6C                                  ?___ftdiv 0027  
                                ?___ftmul 0027                                  ?___fttol 0044  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 17BF                          ??_setProductData 0057  
           __size_of_setSw_Initialization 000E            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 110C                             ??_setLog_Code 0059  
                      __end_of_TouchPower 0815                       __size_of_setSw_Main 0171  
            CC2500_ReadStatus@status_addr 0075        __end_of_getDimmerIntr_DimmingValue 125D  
            ??_setDimmerIntr_DimmingValue 0059                _getDimmerIntr_DimmingValue 1250  
                  CC2500_WriteByte@loop_a 0073                                  ?_setData 0070  
          __size_of_setDimmerLights_OnOff 00AD                         ?_setRF_AdjControl 0070  
                               _r_address 00E5             __end_of_setDimmerLights_OnOff 05A3  
          __size_of_setDimmerLights_SwOff 0038            __size_of_myMain_Initialization 000F  
           __end_of_setDimmerLights_SwOff 16D2              __end_of_CC2500_patable_vaule 1066  
           __end_of_myMain_Initialization 12A7                          ___lwdiv@quotient 0021  
                      ??_setRF_AdjControl 0076                             _SwPointSelect 11E4  
                     __end_of_setLED_Main 089B                          ??_getDelayOff_GO 0074  
                  ??_setRF_Initialization 0072                         _CC2500_rfSettings 102F  
                                _LED_Main 122B                           SwPointSelect@sw 0073  
                               clear_ram0 114D                  CC2500_InitPATable@loop_d 0021  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1743  
                               _setTxData 115A       __end_of_DimmerLights_Initialization 115A  
             _DimmerLights_Initialization 1153                    _Flash_Memory_Main$3214 0021  
                      _CC2500_ClearRXFIFO 1128                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 112C                  _getDimmerIntr_Dimming_Sw 1243  
                setRF_DimmerLights@lights 005D                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 136C                         ??_Timeout_Counter 0072  
                              ?_getBuz_GO 0072                  setRF_DimmerLights@status 005C  
    __size_of_setDimmerIntr_ControlStatus 0015               __size_of_setRFSW_AdjControl 0087  
     __size_of_setDimmerIntr_DimmingValue 000C                        _Flash_Memory_Write 15DB  
                              ?_getRxData 0070                                  _TMR1_ISR 14CD  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                                _TMR1_Set 1237                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 12C7  
                                _RF_Count 00DB                      __end_of_RF_RxDisable 1187  
             __end_of_CC2500_WriteCommand 147F                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1307                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0073                          __size_of_ADC_Set 0007  
                     ?_Flash_Memory_Write 0070                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 0084                                  _DelayOff 0069  
                            setSw_Main@sw 002C                          __size_of_IOC_ISR 0009  
          getMain_All_Error_Status@status 0072                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 121F                            ?_SwPointSelect 0070  
                          setLED_Main@led 0075                      __end_of_WDT_Clearing 0800  
                     __end_of_setLog_Code 1663                     _DlyOff_Initialization 1138  
       __size_of_getMain_All_LightsStatus 0008                      ??_CC2500_ClearRXFIFO 0076  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0076  
               __end_of_CC2500_rfSettings 105E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 13E3               setDimmerLights_OnOff@lights 0064  
                _setDimmerIntr_Dimming_Sw 137E                                  _Fosc_Set 1120  
                        __size_of_WDT_Set 0009                     setRFSW_Control@status 0062  
                   _Switch_Initialization 1134         __size_of_getMain_All_Error_Status 0003  
                    ??_Flash_Memory_Write 0072                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 0046                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 13A5  
     __size_of_DimmerLights_SelectPointer 000B                      ??_setRF_TransceiveGO 0072  
                                _SwDetect 00E4                          getCmd_Status@cmd 0073  
                        setCmd_Status@cmd 0072                         setRFSW_Control@sw 0063  
        ??_getDimmerLights_ValueToPercent 0079           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0074                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0027                                  ___awtoft 154B  
                        ??_LedPointSelect 0072                                  ___ftpack 0C40  
                            ??_setRF_Main 0066                      CC2500_WriteREG@value 0074  
                             _setLED_Main 0858                __end_of_setRF_DimmerLights 0E37  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0075  
                        getDelayOff_GO@sw 0074                          setDelayOff_GO@sw 0060  
                         ___lwdiv@divisor 0072                          __size_of_setData 0050  
                         ___lwdiv@counter 0020                                  __ptext10 11E4  
                                __ptext11 0800                                  __ptext20 162F  
                                __ptext12 1142                                  __ptext21 12F7  
                                __ptext13 1422                                  __ptext30 117F  
                                __ptext22 0F05                                  __ptext14 1134  
                                __ptext31 0E37                                  __ptext23 170A  
                                __ptext15 125D                                  __ptext40 152A  
                                __ptext32 0CA3                                  __ptext24 177F  
                                __ptext16 1115                                  __ptext41 11D9  
                                __ptext33 156D                                  __ptext25 06D5  
                                __ptext17 0383                                  __ptext50 11CE  
                                __ptext42 158F                                  __ptext34 1437  
                                __ptext26 144E                                  __ptext18 0A90  
                                __ptext51 136C                                  __ptext43 112C  
                                __ptext35 140D                                  __ptext27 1339  
                                __ptext19 0D6C                                  __ptext60 121F  
                                __ptext52 1199                                  __ptext44 1128  
                                __ptext36 1130                                  __ptext28 12E7  
                                __ptext61 1289                                  __ptext53 1237  
                                __ptext45 1466                                  __ptext37 089B  
                                __ptext29 1663                                  __ptext70 1391  
                                __ptext62 17BF                                  __ptext54 07E3  
                                __ptext46 1124                                  __ptext38 1605  
                                __ptext71 16D2                                  __ptext63 1328  
                                __ptext55 11C3                                  __ptext47 13F8  
                                __ptext39 14EB                                  __ptext80 1207  
                                __ptext72 110F                                  __ptext64 064C  
                                __ptext56 1120                                  __ptext48 13A5  
                                __ptext81 13CE                                  __ptext73 1177  
                                __ptext65 1213                                  __ptext57 1161  
                                __ptext49 1112                                  __ptext90 12C7  
                                __ptext82 0F7C                                  __ptext74 0D07  
                                __ptext66 02B8                                  __ptext58 122B  
                                __ptext91 0DD1                                  __ptext83 1317  
                                __ptext75 04F6                                  __ptext67 11B8  
                                __ptext59 0858                                  __ptext92 11FB  
                                __ptext84 13B9                                  __ptext76 0BE2  
                                __ptext68 15DB                                  __ptext93 137E  
                                __ptext85 116F                                  __ptext77 14B3  
                                __ptext69 1190                                  __ptext94 1250  
                                __ptext86 127A                                  __ptext78 113D  
                                __ptext95 110C                                  __ptext87 12D7  
                                __ptext79 13E3                                  __ptext96 09F8  
                                __ptext88 0A44                                  __ptext97 12B7  
                                __ptext89 115A                                  __ptext98 1153  
                                __ptext99 0003                                  __product 01C5  
                 ??_setLED_Initialization 0075                  ??_getDimmerLights_Status 0074  
            __end_of_setDimmerLights_Main 0D6C                        _DimmerLights_IOC_1 147F  
            __end_of_setDimmerLights_SwOn 09F8                              ??_setSw_Main 002A  
                  ??_setRF_TimeoutCleared 0072              ??_setDimmerLights_DimmingRun 0075  
                           setLED@command 0073                             __size_of_main 0044  
                             _setRF_Learn 135B        __size_of_DimmerIntr_Initialization 0043  
                         ??_getCmd_Status 0072                        _DimmerLights_TMR_1 1499  
                __end_of_CC2500_SIDLEMode 1134                setDimmerLights_Main@lights 0065  
             __end_of_DelayOffPointSelect 11AD                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1437                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 14EB                  __end_of_setMemory_Modify 12B7  
                     ?_DimmerLights_IOC_1 0070                        __end_of_setRF_Main 0442  
                             ??_getBuz_GO 0074                       ?_DimmerLights_TMR_1 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0064                __end_of_RF_Timeout_Counter 140D  
             Flash_Memory_Main@key_Status 0020                  _getAll_Sw_KeyStatus$6037 0074  
                                main@argc 01E5                                  main@argv 01E7  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6034 0074  
     getDimmerLights_ValueToPercent@value 0052                           _CC2500_PowerRST 089B  
                __size_of_getSw_KeyStatus 0011              setDimmerLights_Dimming@value 0060  
      __end_of_setDimmerIntr_DimmingValue 1213                _setDimmerIntr_DimmingValue 1207  
             __end_of_Flash_Memory_Modify 06D5              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 162F               __end_of_Flash_Memory_Unlock 1199  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 152A  
                      __end_of_setSw_Main 01C2                      ??_DimmerLights_IOC_1 0070  
         getDimmerLights_PercentToValue@i 0055       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03C9                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 005D                           setDelayOff_GO@j 005E  
                         setDelayOff_GO@k 005F                   ??_CC2500_PowerOnInitial 0079  
  __end_of_setDimmerLights_Initialization 0004   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0003                ?_setDimmerIntr_MaxmumValue 0058  
                             ??_setTxData 0072                    CC2500_InitPATable@temp 0020  
                   __size_of_RF_RxDisable 0008                         _RF_Initialization 1112  
                    _Flash_Memory_Erasing 1213                        ?_RF_Initialization 0070  
                              _SPI0Buffer 006B                   __size_of_Exception_Main 0038  
         __end_of_DelayOff_Initialization 111C                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1120                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0F7C  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 0077  
        __size_of_setDimmerLights_Dimming 004C      __size_of_Flash_Memory_Initialization 00CB  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0059  
                   setMemory_Data@address 0074                     __end_of_DelayTime_1us 15B4  
              ??_getDimmerIntr_Dimming_Sw 0072                   __end_of_CC2500_ReadByte 144E  
            __end_of_setSw_Initialization 126B                           _Timeout_Counter 1422  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0053  
                            _RF_RxDisable 117F          Flash_Memory_Initialization@value 0077  
              __end_of_LED_Initialization 122B                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1115                 __size_of_setRF_AdjControl 0039  
                   __end_of_CC2500_RxData 0D07                     __end_of_CC2500_TxData 0E9D  
                 __end_of_CC2500_PowerRST 08DE  
