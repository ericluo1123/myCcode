

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Oct 04 10:45:32 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1516
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	intentry,global,class=CODE,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055                           
  2056                           	psect	idataBANK3
  2057  0000'                    __pidataBANK3:	
  2058                           
  2059                           ;initializer for _VarProduct
  2060  0000' 3463               	retlw	99
  2061  0001' 3402               	retlw	2
  2062  0002' 3400               	retlw	0
  2063  0003' 3400               	retlw	0
  2064  0004' 3400               	retlw	0
  2065  0005' 3400               	retlw	0
  2066  0006' 3400               	retlw	0
  2067  0007' 3400               	retlw	0
  2068  0008' 3400               	retlw	0
  2069  0009' 3400               	retlw	0
  2070  000A' 3400               	retlw	0
  2071  000B' 3400               	retlw	0
  2072  000C' 34FF               	retlw	255
  2073  000D' 34FF               	retlw	255
  2074  000E' 34FF               	retlw	255
  2075  000F' 3400               	retlw	0
  2076  0010' 3400               	retlw	0
  2077  0011' 3400               	retlw	0
  2078  0012' 3400               	retlw	0
  2079  0013' 3400               	retlw	0
  2080  0014' 3400               	retlw	0
  2081  0015' 3400               	retlw	0
  2082  0016' 3400               	retlw	0
  2083  0017' 3400               	retlw	0
  2084  0018' 3400               	retlw	0
  2085  0019' 3400               	retlw	0
  2086  001A' 3400               	retlw	0
  2087  001B' 3400               	retlw	0
  2088  001C' 3400               	retlw	0
  2089  001D' 3400               	retlw	0
  2090  001E' 3400               	retlw	0
  2091  001F' 3400               	retlw	0
  2092                           
  2093                           	psect	stringtext
  2094  0000'                    __pstringtext:	
  2095  0000'                    _CC2500_registers_address:	
  2096  0000' 3403               	retlw	3
  2097  0001' 3416               	retlw	22
  2098  0002' 3417               	retlw	23
  2099  0003' 341E               	retlw	30
  2100  0004' 341F               	retlw	31
  2101  0005' 3420               	retlw	32
  2102  0006' 342A               	retlw	42
  2103  0007' 342B               	retlw	43
  2104  0008' 340B               	retlw	11
  2105  0009' 340C               	retlw	12
  2106  000A' 340D               	retlw	13
  2107  000B' 340E               	retlw	14
  2108  000C' 340F               	retlw	15
  2109  000D' 3410               	retlw	16
  2110  000E' 3411               	retlw	17
  2111  000F' 3412               	retlw	18
  2112  0010' 3413               	retlw	19
  2113  0011' 3414               	retlw	20
  2114  0012' 340A               	retlw	10
  2115  0013' 3415               	retlw	21
  2116  0014' 3421               	retlw	33
  2117  0015' 3422               	retlw	34
  2118  0016' 3418               	retlw	24
  2119  0017' 3419               	retlw	25
  2120  0018' 341A               	retlw	26
  2121  0019' 341B               	retlw	27
  2122  001A' 341C               	retlw	28
  2123  001B' 341D               	retlw	29
  2124  001C' 3423               	retlw	35
  2125  001D' 3424               	retlw	36
  2126  001E' 3425               	retlw	37
  2127  001F' 3426               	retlw	38
  2128  0020' 3429               	retlw	41
  2129  0021' 342C               	retlw	44
  2130  0022' 342D               	retlw	45
  2131  0023' 342E               	retlw	46
  2132  0024' 3400               	retlw	0
  2133  0025' 3401               	retlw	1
  2134  0026' 3402               	retlw	2
  2135  0027' 3407               	retlw	7
  2136  0028' 3408               	retlw	8
  2137  0029' 3409               	retlw	9
  2138  002A' 3406               	retlw	6
  2139  002B' 3404               	retlw	4
  2140  002C' 3405               	retlw	5
  2141  002D' 3427               	retlw	39
  2142  002E' 3428               	retlw	40
  2143  002F'                    __end_of_CC2500_registers_address:	
  2144  002F'                    _CC2500_rfSettings:	
  2145  002F' 3407               	retlw	7
  2146  0030' 3407               	retlw	7
  2147  0031' 3430               	retlw	48
  2148  0032' 3487               	retlw	135
  2149  0033' 346B               	retlw	107
  2150  0034' 34F8               	retlw	248
  2151  0035' 347F               	retlw	127
  2152  0036' 343F               	retlw	63
  2153  0037' 3409               	retlw	9
  2154  0038' 3400               	retlw	0
  2155  0039' 345C               	retlw	92
  2156  003A' 34A7               	retlw	167
  2157  003B' 3462               	retlw	98
  2158  003C' 3486               	retlw	134
  2159  003D' 3483               	retlw	131
  2160  003E' 3403               	retlw	3
  2161  003F' 3422               	retlw	34
  2162  0040' 34F8               	retlw	248
  2163  0041' 3400               	retlw	0
  2164  0042' 3444               	retlw	68
  2165  0043' 34B6               	retlw	182
  2166  0044' 3410               	retlw	16
  2167  0045' 3418               	retlw	24
  2168  0046' 341D               	retlw	29
  2169  0047' 341C               	retlw	28
  2170  0048' 34C7               	retlw	199
  2171  0049' 3400               	retlw	0
  2172  004A' 34B2               	retlw	178
  2173  004B' 34EA               	retlw	234
  2174  004C' 340A               	retlw	10
  2175  004D' 3400               	retlw	0
  2176  004E' 3411               	retlw	17
  2177  004F' 3459               	retlw	89
  2178  0050' 3488               	retlw	136
  2179  0051' 3431               	retlw	49
  2180  0052' 340B               	retlw	11
  2181  0053' 342F               	retlw	47
  2182  0054' 342E               	retlw	46
  2183  0055' 3406               	retlw	6
  2184  0056' 3404               	retlw	4
  2185  0057' 3405               	retlw	5
  2186  0058' 3400               	retlw	0
  2187  0059' 3430               	retlw	48
  2188  005A' 34D3               	retlw	211
  2189  005B' 3491               	retlw	145
  2190  005C' 3441               	retlw	65
  2191  005D' 3400               	retlw	0
  2192  005E'                    __end_of_CC2500_rfSettings:	
  2193  005E'                    _CC2500_patable_vaule:	
  2194  005E' 34FE               	retlw	254
  2195  005F' 34FE               	retlw	254
  2196  0060' 34FE               	retlw	254
  2197  0061' 34FE               	retlw	254
  2198  0062' 34FE               	retlw	254
  2199  0063' 34FE               	retlw	254
  2200  0064' 34FE               	retlw	254
  2201  0065' 34FE               	retlw	254
  2202  0066'                    __end_of_CC2500_patable_vaule:	
  2203                           
  2204                           	psect	nvCOMMON
  2205  0000'                    __pnvCOMMON:	
  2206  0000'                    _Product:	
  2207  0000'                    	ds	1
  2208                           
  2209                           	psect	nvBANK1
  2210  0000'                    __pnvBANK1:	
  2211  0000'                    _Memory:	
  2212  0000'                    	ds	1
  2213  0001'                    _Timer0:	
  2214  0001'                    	ds	1
  2215  0002'                    _WDT:	
  2216  0002'                    	ds	1
  2217  0003'                    _myMain:	
  2218  0003'                    	ds	1
  2219  000C                     _PORTA	set	12
  2220  000D                     _PORTB	set	13
  2221  000E                     _PORTC	set	14
  2222  0015                     _TMR0	set	21
  2223  005F                     _GIE	set	95
  2224  005C                     _INTE	set	92
  2225  0059                     _INTF	set	89
  2226  005B                     _IOCIE	set	91
  2227  0058                     _IOCIF	set	88
  2228  005E                     _PEIE	set	94
  2229  0060                     _RA0	set	96
  2230  0063                     _RA3	set	99
  2231  0064                     _RA4	set	100
  2232  0066                     _RA6	set	102
  2233  0067                     _RA7	set	103
  2234  0068                     _RB0	set	104
  2235  0069                     _RB1	set	105
  2236  006A                     _RB2	set	106
  2237  006B                     _RB3	set	107
  2238  006C                     _RB4	set	108
  2239  006D                     _RB5	set	109
  2240  0070                     _RC0	set	112
  2241  0071                     _RC1	set	113
  2242  0072                     _RC2	set	114
  2243  0074                     _RC4	set	116
  2244  0075                     _RC5	set	117
  2245  0077                     _RC7	set	119
  2246  005D                     _TMR0IE	set	93
  2247  005A                     _TMR0IF	set	90
  2248  009D                     _ADCON0	set	157
  2249  009E                     _ADCON1	set	158
  2250  009C                     _ADRESH	set	156
  2251  009B                     _ADRESL	set	155
  2252  0095                     _OPTION_REG	set	149
  2253  0099                     _OSCCON	set	153
  2254  008C                     _TRISA	set	140
  2255  008D                     _TRISB	set	141
  2256  008E                     _TRISC	set	142
  2257  0097                     _WDTCON	set	151
  2258  04E9                     _GO_nDONE	set	1257
  2259  0117                     _FVRCON	set	279
  2260  010C                     _LATA	set	268
  2261  010D                     _LATB	set	269
  2262  010E                     _LATC	set	270
  2263  018C                     _ANSELA	set	396
  2264  018D                     _ANSELB	set	397
  2265  018E                     _ANSELC	set	398
  2266  0192                     _PMADRH	set	402
  2267  0191                     _PMADRL	set	401
  2268  0196                     _PMCON2	set	406
  2269  0194                     _PMDATH	set	404
  2270  0193                     _PMDATL	set	403
  2271  0CAE                     _CFGS	set	3246
  2272  0CAC                     _FREE	set	3244
  2273  0CAD                     _LWLO	set	3245
  2274  0CA8                     _RD	set	3240
  2275  0CA9                     _WR	set	3241
  2276  0CAA                     _WREN	set	3242
  2277  1068                     _WPUB0	set	4200
  2278  1069                     _WPUB1	set	4201
  2279  106A                     _WPUB2	set	4202
  2280  0396                     _IOCBF	set	918
  2281  0395                     _IOCBN	set	917
  2282  0394                     _IOCBP	set	916
  2283  1CB2                     _IOCBF2	set	7346
  2284                           
  2285                           ; #config settings
  2286  0000                     
  2287                           	psect	cinit
  2288  0000'                    start_initialization:	
  2289  0000'                    __initialization:	
  2290                           
  2291                           ; Clear objects allocated to BITCOMMON
  2292  0000' 0180'              	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2293                           
  2294                           ; Clear objects allocated to COMMON
  2295  0001' 0180'              	clrf	__pbssCOMMON& (0+127)
  2296  0002' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
  2297  0003' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
  2298  0004' 0180'              	clrf	(__pbssCOMMON+3)& (0+127)
  2299  0005' 0180'              	clrf	(__pbssCOMMON+4)& (0+127)
  2300                           
  2301                           ; Clear objects allocated to BANK1
  2302  0006' 3000'              	movlw	low __pbssBANK1
  2303  0007' 0084               	movwf	4
  2304  0008' 3000'              	movlw	high __pbssBANK1
  2305  0009' 0085               	movwf	5
  2306  000A' 304A               	movlw	74
  2307  000B' 3180' 2000' 3180'  	fcall	clear_ram0
  2308                           
  2309                           ; Clear objects allocated to BANK2
  2310  000E' 3000'              	movlw	low __pbssBANK2
  2311  000F' 0084               	movwf	4
  2312  0010' 3000'              	movlw	high __pbssBANK2
  2313  0011' 0085               	movwf	5
  2314  0012' 304A               	movlw	74
  2315  0013' 3180' 2000' 3180'  	fcall	clear_ram0
  2316                           
  2317                           ; Clear objects allocated to BANK3
  2318  0016' 3000'              	movlw	low __pbssBANK3
  2319  0017' 0084               	movwf	4
  2320  0018' 3000'              	movlw	high __pbssBANK3
  2321  0019' 0085               	movwf	5
  2322  001A' 3025               	movlw	37
  2323  001B' 3180' 2000' 3180'  	fcall	clear_ram0
  2324                           
  2325                           ; Clear objects allocated to BANK4
  2326  001E' 3000'              	movlw	low __pbssBANK4
  2327  001F' 0084               	movwf	4
  2328  0020' 3000'              	movlw	high __pbssBANK4
  2329  0021' 0085               	movwf	5
  2330  0022' 3047               	movlw	71
  2331  0023' 3180' 2000' 3180'  	fcall	clear_ram0
  2332                           
  2333                           ; Initialize objects allocated to BANK3
  2334  0026' 3000'              	movlw	low __pidataBANK3
  2335  0027' 0084               	movwf	4
  2336  0028' 3000'              	movlw	(high __pidataBANK3)| (0+128)
  2337  0029' 0085               	movwf	5
  2338  002A' 3000'              	movlw	low __pdataBANK3
  2339  002B' 0086               	movwf	6
  2340  002C' 3000'              	movlw	high __pdataBANK3
  2341  002D' 0087               	movwf	7
  2342  002E' 3020               	movlw	32
  2343  002F' 3180' 2000'        	fcall	init_ram
  2344  0031'                    end_of_initialization:	
  2345                           ;End of C runtime variable initialization code
  2346                           
  2347  0031'                    __end_of__initialization:	
  2348  0031' 107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2349  0032' 0020               	movlb	0
  2350  0033' 3180' 2800'        	ljmp	_main	;jump to C main() function
  2351                           
  2352                           	psect	bitbssCOMMON
  2353  0000'                    __pbitbssCOMMON:	
  2354  0000'                    _Receive_OK:	
  2355  0000'                    	ds	1
  2356  0001'                    _Transceive_OK:	
  2357  0001'                    	ds	1
  2358                           
  2359                           	psect	bssCOMMON
  2360  0000'                    __pbssCOMMON:	
  2361  0000'                    _DimmerLights:	
  2362  0000'                    	ds	1
  2363  0001'                    _DimmerLights11:	
  2364  0001'                    	ds	1
  2365  0002'                    _Sw:	
  2366  0002'                    	ds	1
  2367  0003'                    _Temp:	
  2368  0003'                    	ds	1
  2369  0004'                    _Load:	
  2370  0004'                    	ds	1
  2371                           
  2372                           	psect	bssBANK1
  2373  0000'                    __pbssBANK1:	
  2374  0000'                    _RF_Data:	
  2375  0000'                    	ds	21
  2376  0015'                    _RF_Count:	
  2377  0015'                    	ds	2
  2378  0017'                    _Buz:	
  2379  0017'                    	ds	1
  2380  0018'                    _CRC:	
  2381  0018'                    	ds	1
  2382  0019'                    _DelayOff:	
  2383  0019'                    	ds	1
  2384  001A'                    _Dimmer:	
  2385  001A'                    	ds	1
  2386  001B'                    _DimmerLightsIntr:	
  2387  001B'                    	ds	1
  2388  001C'                    _LED:	
  2389  001C'                    	ds	1
  2390  001D'                    _PF:	
  2391  001D'                    	ds	1
  2392  001E'                    _RF:	
  2393  001E'                    	ds	1
  2394  001F'                    _RFSW:	
  2395  001F'                    	ds	1
  2396  0020'                    _RSSI:	
  2397  0020'                    	ds	1
  2398  0021'                    _Rx_Length:	
  2399  0021'                    	ds	1
  2400  0022'                    _SPI0Buffer:	
  2401  0022'                    	ds	1
  2402  0023'                    _Tx_Length:	
  2403  0023'                    	ds	1
  2404  0024'                    _r_address:	
  2405  0024'                    	ds	1
  2406  0025'                    _r_data:	
  2407  0025'                    	ds	1
  2408  0026'                    _s_data:	
  2409  0026'                    	ds	1
  2410  0027'                    _VarTimer0:	
  2411  0027'                    	ds	9
  2412  0030'                    _DlySw1:	
  2413  0030'                    	ds	5
  2414  0035'                    _VarErrLED:	
  2415  0035'                    	ds	4
  2416  0039'                    _VarLED1:	
  2417  0039'                    	ds	4
  2418  003D'                    _VarLED2:	
  2419  003D'                    	ds	4
  2420  0041'                    _Dimmer1:	
  2421  0041'                    	ds	3
  2422  0044'                    _RF1:	
  2423  0044'                    	ds	3
  2424  0047'                    __WDT:	
  2425  0047'                    	ds	2
  2426  0049'                    _RFSW1:	
  2427  0049'                    	ds	1
  2428                           
  2429                           	psect	bssBANK2
  2430  0000'                    __pbssBANK2:	
  2431  0000'                    __myMain:	
  2432  0000'                    	ds	17
  2433  0011'                    _DimmerLights1:	
  2434  0011'                    	ds	14
  2435  001F'                    _Temp1:	
  2436  001F'                    	ds	14
  2437  002D'                    _Buz1:	
  2438  002D'                    	ds	12
  2439  0039'                    _Sw1:	
  2440  0039'                    	ds	9
  2441  0042'                    _PF1:	
  2442  0042'                    	ds	8
  2443                           
  2444                           	psect	bssBANK3
  2445  0000'                    __pbssBANK3:	
  2446  0000'                    _VarMemory:	
  2447  0000'                    	ds	37
  2448                           
  2449                           	psect	dataBANK3
  2450  0000'                    __pdataBANK3:	
  2451  0000'                    _VarProduct:	
  2452  0000'                    	ds	32
  2453                           
  2454                           	psect	bssBANK4
  2455  0000'                    __pbssBANK4:	
  2456  0000'                    _Load1:	
  2457  0000'                    	ds	71
  2458                           
  2459                           	psect	clrtext
  2460  0000'                    clear_ram0:	
  2461                           ;	Called with FSR0 containing the base address, and
  2462                           ;	WREG with the size to clear
  2463                           
  2464  0000' 0064               	clrwdt	;clear the watchdog before getting into this loop
  2465  0001'                    clrloop0:	
  2466  0001' 0180               	clrf	0	;clear RAM location pointed to by FSR
  2467  0002' 3101               	addfsr 0,1
  2468  0003' 0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2469  0004' 2800'              	goto	clrloop0	;have we reached the end yet?
  2470  0005' 3400               	retlw	0	;all done for this memory range, return
  2471                           
  2472                           	psect	inittext
  2473  0000'                    init_ram:	
  2474  0000' 00FE               	movwf	126
  2475  0001'                    initloop:	
  2476  0001' 0012               	moviw fsr0++
  2477  0002' 001E               	movwi fsr1++
  2478  0003' 0BFE               	decfsz	126,f
  2479  0004' 2800'              	goto	initloop
  2480  0005' 3400               	retlw	0
  2481                           
  2482                           	psect	cstackCOMMON
  2483  0000'                    __pcstackCOMMON:	
  2484  0000'                    ?_CC2500_WriteByte:	
  2485  0000'                    ?_CC2500_WriteCommand:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0000'                    ?_CC2500_ReadStatus:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0000'                    ?_CC2500_ReadByte:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0000'                    ?_CC2500_PowerRST:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0000'                    ?_CC2500_InitSetREG:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0000'                    ?_CC2500_InitPATable:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0000'                    ?_CC2500_ClearTXFIFO:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0000'                    ?_CC2500_ClearRXFIFO:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0000'                    ?_CC2500_FrequencyCabr:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0000'                    ?_CC2500_SIDLEMode:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0000'                    ?_DlyOff_Initialization:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0000'                    ?_DlyOff_Main:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0000'                    ?_setTxData:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0000'                    ?_setDimmerLights_Initialization:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0000'                    ?_Dimmer_Initialization:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0000'                    ?_setLoad_GO:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0000'                    ?_setDimmerLights_Main:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0000'                    ?_setDimmerLights_ERROR:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0000'                    ?_setLoad_Count:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0000'                    ?_setLED_Initialization:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0000'                    ?_setLED_Main:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0000'                    ?_Fosc_Set:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0000'                    ?_IO_Set:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0000'                    ?_TMR0_Set:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0000'                    ?_ADC_Set:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0000'                    ?_INT_Set:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0000'                    ?_IOC_Set:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0000'                    ?_WDT_Set:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0000'                    ?_IOC_ISR:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0000'                    ??_IOC_ISR:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0000'                    ?_TMR0_ISR:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0000'                    ?_INT_ISR:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0000'                    ?_Flash_Memory_Write:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0000'                    ?_Flash_Memory_Modify:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0000'                    ?_WDT_Clearing:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0000'                    ?_setLoad_AH_AL_Restore:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0000'                    ?_setLoad_Exceptions:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0000'                    ?_setSw_Enable:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0000'                    ?_setTemp_Initialization:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0000'                    ?_setTemp_Main:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0000'                    ?_setOverTemp_Exceptions:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0000'                    ?_setPowerFault_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0000'                    ?_setPowerFault_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0000'                    ?_setPowerFault_Exceptions:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0000'                    ?_setRF_Initialization:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0000'                    ?_setRF_Main:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0000'                    ?_getRxData:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0000'                    ?_RF_RxDisable:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0000'                    ?_setLog_Code:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0000'                    ?_setControl_Lights_Table:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0000'                    ?_setRFSW_Control:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0000'                    ?_setRFSW_AdjControl:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0000'                    ?_setRF_DimmerValue:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0000'                    ?_setSw_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0000'                    ?_setSw_Main:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0000'                    ?_Sw_DimmerOnFunc:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0000'                    ?_Sw_DimmerAdjFunc:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0000'                    ?_Sw_DimmerOffFunc:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0000'                    ?_myMain_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0000'                    ?_my_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0000'                    ?_Buzzer_Initialization:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0000'                    ?_Buzzer_Main:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0000'                    ?_CC2500_TxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0000'                    ?_CC2500_RxData:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0000'                    ?_CC2500_PowerOnInitial:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0000'                    ?_DelayOffPointSelect:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0000'                    ?_DelayOff_Initialization:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0000'                    ?_DelayOff_Main:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0000'                    ?_DimmerLightsPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0000'                    ?_DimmerLights_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0000'                    ?_DimmerLights_Close:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0000'                    ?_DimmerLights_Main:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0000'                    ?_DimmerLights_Exceptions:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0000'                    ?_setDimmerLights_AdjRF:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0000'                    ?_LedPointSelect:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0000'                    ?_LED_Initialization:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0000'                    ?_LED_Main:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0000'                    ?_Mcu_Initialization:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0000'                    ?_ISR:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0000'                    ?_setDimmerReClock:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0000'                    ??_setDimmerReClock:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0000'                    ?_setINT_GO:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0000'                    ?_Flash_Memory_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0000'                    ?_Flash_Memory_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0000'                    ?_Flash_Memory_Unlock:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0000'                    ?_Flash_Memory_Erasing:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0000'                    ?_WDT_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0000'                    ?_Load_Initialization:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0000'                    ?_getLoad_AD:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0000'                    ?_Load_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0000'                    ?_setLoad_Enable:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0000'                    ?_Temp_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0000'                    ?_setTemp_Enable:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0000'                    ?_getTemp_AD:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0000'                    ?_Temp_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0000'                    ?_PowerFault_Initialization:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0000'                    ?_PowerFault_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0000'                    ?_getPowerFault_AD:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0000'                    ?_RfPointSelect:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0000'                    ?_RF_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0000'                    ?_RF_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0000'                    ?_RfSWPointSelect:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0000'                    ?_TouchPower:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0000'                    ?_SwPointSelect:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0000'                    ?_Switch_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0000'                    ?_Switch_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0000'                    ?i1_setLoad_StatusOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0000'                    ?i1_RfPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0000'                    ??i1_RfPointSelect:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0000'                    ?_DelayTimejudge:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0000'                    ?_getDimmerLights_StatusFlag:	
  2816                           ; 1 bytes @ 0x0
  2817                           
  2818  0000'                    ?_getPercentValue:	
  2819                           ; 1 bytes @ 0x0
  2820                           
  2821  0000'                    ?_Flash_Memory_Read:	
  2822                           ; 1 bytes @ 0x0
  2823                           
  2824  0000'                    ?_getTemp_Safe:	
  2825                           ; 1 bytes @ 0x0
  2826                           
  2827  0000'                    ?_getPF_Safe:	
  2828                           ; 1 bytes @ 0x0
  2829                           
  2830  0000'                    ?_setPercentValue:	
  2831                           ; 1 bytes @ 0x0
  2832                           
  2833  0000'                    ?_getLoad_Safe:	
  2834                           ; 1 bytes @ 0x0
  2835                           
  2836  0000'                    setRF_Initialization@rf:	
  2837                           ; 1 bytes @ 0x0
  2838                           
  2839  0000'                    i1setLoad_StatusOff@command:	
  2840                           ; 1 bytes @ 0x0
  2841                           
  2842                           
  2843                           ; 1 bytes @ 0x0
  2844  0000'                    	ds	1
  2845  0001'                    ??i1_setLoad_StatusOff:	
  2846  0001'                    i1setLoad_StatusOff@lights:	
  2847                           ; 0 bytes @ 0x1
  2848                           
  2849  0001'                    i1RfPointSelect@rf:	
  2850                           ; 1 bytes @ 0x1
  2851                           
  2852                           
  2853                           ; 1 bytes @ 0x1
  2854  0001'                    	ds	1
  2855  0002'                    ??_TMR0_ISR:	
  2856  0002'                    ?_setRF_ReceiveGO:	
  2857                           ; 0 bytes @ 0x2
  2858                           
  2859  0002'                    setRF_ReceiveGO@command:	
  2860                           ; 0 bytes @ 0x2
  2861                           
  2862                           
  2863                           ; 1 bytes @ 0x2
  2864  0002'                    	ds	1
  2865  0003'                    ??_setRF_ReceiveGO:	
  2866  0003'                    setRF_ReceiveGO@rf:	
  2867                           ; 0 bytes @ 0x3
  2868                           
  2869                           
  2870                           ; 1 bytes @ 0x3
  2871  0003'                    	ds	1
  2872  0004'                    ??_INT_ISR:	
  2873                           
  2874                           ; 0 bytes @ 0x4
  2875  0004'                    	ds	2
  2876  0006'                    ??_ISR:	
  2877                           
  2878                           ; 0 bytes @ 0x6
  2879  0006'                    	ds	1
  2880                           
  2881                           	psect	cstackBANK0
  2882  0000'                    __pcstackBANK0:	
  2883  0000'                    ??_CC2500_WriteByte:	
  2884  0000'                    ??_CC2500_ReadByte:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0000'                    ?_DelayTime_1us:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0000'                    ??_DelayTimejudge:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0000'                    ??_Dimmer_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0000'                    ??_getDimmerLights_StatusFlag:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0000'                    ??_setLoad_GO:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0000'                    ?_setLoad_StatusOff:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0000'                    ??_setLoad_Count:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0000'                    ?_setLoad_StatusOn:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0000'                    ??_Fosc_Set:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0000'                    ??_IO_Set:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0000'                    ??_TMR0_Set:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0000'                    ??_ADC_Set:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0000'                    ??_INT_Set:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0000'                    ??_IOC_Set:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0000'                    ??_WDT_Set:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0000'                    ??_Flash_Memory_Read:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0000'                    ??_Flash_Memory_Write:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0000'                    ??_WDT_Clearing:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0000'                    ??_setLoad_AH_AL_Restore:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0000'                    ??_getTemp_Safe:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0000'                    ??_getPF_Safe:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0000'                    ??_setTemp_Initialization:	
  2951                           ; 0 bytes @ 0x0
  2952                           
  2953  0000'                    ??_setPowerFault_Initialization:	
  2954                           ; 0 bytes @ 0x0
  2955                           
  2956  0000'                    ??_setRF_Initialization:	
  2957                           ; 0 bytes @ 0x0
  2958                           
  2959  0000'                    ??_myMain_Initialization:	
  2960                           ; 0 bytes @ 0x0
  2961                           
  2962  0000'                    ??_Buzzer_Initialization:	
  2963                           ; 0 bytes @ 0x0
  2964                           
  2965  0000'                    ??_Buzzer_Main:	
  2966                           ; 0 bytes @ 0x0
  2967                           
  2968  0000'                    ??_DelayOffPointSelect:	
  2969                           ; 0 bytes @ 0x0
  2970                           
  2971  0000'                    ??_DimmerLightsPointSelect:	
  2972                           ; 0 bytes @ 0x0
  2973                           
  2974  0000'                    ??_LedPointSelect:	
  2975                           ; 0 bytes @ 0x0
  2976                           
  2977  0000'                    ??_setINT_GO:	
  2978                           ; 0 bytes @ 0x0
  2979                           
  2980  0000'                    ??_Flash_Memory_Unlock:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0000'                    ??_Flash_Memory_Erasing:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0000'                    ??_WDT_Main:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0000'                    ??_setLoad_Enable:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0000'                    ??_getLoad_Safe:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0000'                    ??_setTemp_Enable:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0000'                    ??_RfPointSelect:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0000'                    ??_RfSWPointSelect:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0000'                    ??_TouchPower:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0000'                    ??_SwPointSelect:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0000'                    ?_getAD:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0000'                    ?___wmul:	
  3014                           ; 2 bytes @ 0x0
  3015                           
  3016  0000'                    ?___lwdiv:	
  3017                           ; 2 bytes @ 0x0
  3018                           
  3019  0000'                    ?___ftpack:	
  3020                           ; 2 bytes @ 0x0
  3021                           
  3022  0000'                    getDimmerLights_StatusFlag@Status:	
  3023                           ; 3 bytes @ 0x0
  3024                           
  3025  0000'                    setINT_GO@command:	
  3026                           ; 1 bytes @ 0x0
  3027                           
  3028  0000'                    getAD@adcon1:	
  3029                           ; 1 bytes @ 0x0
  3030                           
  3031  0000'                    setLoad_Enable@command:	
  3032                           ; 1 bytes @ 0x0
  3033                           
  3034  0000'                    setLoad_GO@command:	
  3035                           ; 1 bytes @ 0x0
  3036                           
  3037  0000'                    setLoad_StatusOn@command:	
  3038                           ; 1 bytes @ 0x0
  3039                           
  3040  0000'                    setLoad_StatusOff@command:	
  3041                           ; 1 bytes @ 0x0
  3042                           
  3043  0000'                    setTemp_Enable@command:	
  3044                           ; 1 bytes @ 0x0
  3045                           
  3046  0000'                    DelayTime_1us@count:	
  3047                           ; 1 bytes @ 0x0
  3048                           
  3049  0000'                    ___wmul@multiplier:	
  3050                           ; 2 bytes @ 0x0
  3051                           
  3052  0000'                    ___lwdiv@divisor:	
  3053                           ; 2 bytes @ 0x0
  3054                           
  3055  0000'                    ___ftpack@arg:	
  3056                           ; 2 bytes @ 0x0
  3057                           
  3058                           
  3059                           ; 3 bytes @ 0x0
  3060  0000'                    	ds	1
  3061  0001'                    ??_setLoad_StatusOff:	
  3062  0001'                    ??_setLoad_StatusOn:	
  3063                           ; 0 bytes @ 0x1
  3064                           
  3065  0001'                    ??_DimmerLights_Close:	
  3066                           ; 0 bytes @ 0x1
  3067                           
  3068  0001'                    ??_Mcu_Initialization:	
  3069                           ; 0 bytes @ 0x1
  3070                           
  3071  0001'                    ??_Temp_Initialization:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0001'                    ??_PowerFault_Initialization:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0001'                    ??_RF_Initialization:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0001'                    CC2500_WriteByte@loop_a:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0001'                    CC2500_ReadByte@loop_b:	
  3084                           ; 1 bytes @ 0x1
  3085                           
  3086  0001'                    DelayOffPointSelect@sw:	
  3087                           ; 1 bytes @ 0x1
  3088                           
  3089  0001'                    DelayTimejudge@i:	
  3090                           ; 1 bytes @ 0x1
  3091                           
  3092  0001'                    DimmerLightsPointSelect@lights:	
  3093                           ; 1 bytes @ 0x1
  3094                           
  3095  0001'                    LedPointSelect@led:	
  3096                           ; 1 bytes @ 0x1
  3097                           
  3098  0001'                    Flash_Memory_Read@i:	
  3099                           ; 1 bytes @ 0x1
  3100                           
  3101  0001'                    Flash_Memory_Write@i:	
  3102                           ; 1 bytes @ 0x1
  3103                           
  3104  0001'                    setLoad_Count@command:	
  3105                           ; 1 bytes @ 0x1
  3106                           
  3107  0001'                    setLoad_StatusOn@lights:	
  3108                           ; 1 bytes @ 0x1
  3109                           
  3110  0001'                    setLoad_StatusOff@lights:	
  3111                           ; 1 bytes @ 0x1
  3112                           
  3113  0001'                    setLoad_AH_AL_Restore@i:	
  3114                           ; 1 bytes @ 0x1
  3115                           
  3116  0001'                    RfPointSelect@rf:	
  3117                           ; 1 bytes @ 0x1
  3118                           
  3119  0001'                    RfSWPointSelect@sw:	
  3120                           ; 1 bytes @ 0x1
  3121                           
  3122  0001'                    SwPointSelect@sw:	
  3123                           ; 1 bytes @ 0x1
  3124                           
  3125                           
  3126                           ; 1 bytes @ 0x1
  3127  0001'                    	ds	1
  3128  0002'                    ??_CC2500_WriteCommand:	
  3129  0002'                    ??_CC2500_ReadStatus:	
  3130                           ; 0 bytes @ 0x2
  3131                           
  3132  0002'                    ?_setRF_RxStatus:	
  3133                           ; 0 bytes @ 0x2
  3134                           
  3135  0002'                    ??_DelayTime_1us:	
  3136                           ; 0 bytes @ 0x2
  3137                           
  3138  0002'                    ?_CC2500_WriteREG:	
  3139                           ; 0 bytes @ 0x2
  3140                           
  3141  0002'                    ??_DlyOff_Initialization:	
  3142                           ; 0 bytes @ 0x2
  3143                           
  3144  0002'                    ?_setSw_Status:	
  3145                           ; 0 bytes @ 0x2
  3146                           
  3147  0002'                    ?_setRFSW_Status:	
  3148                           ; 0 bytes @ 0x2
  3149                           
  3150  0002'                    ?_setDimmerLights_Trigger:	
  3151                           ; 0 bytes @ 0x2
  3152                           
  3153  0002'                    ?_setDimmerLights_Switch:	
  3154                           ; 0 bytes @ 0x2
  3155                           
  3156  0002'                    ??_setTxData:	
  3157                           ; 0 bytes @ 0x2
  3158                           
  3159  0002'                    ??_setDimmerLights_Initialization:	
  3160                           ; 0 bytes @ 0x2
  3161                           
  3162  0002'                    ?_setDimmerLights_TriggerERROR:	
  3163                           ; 0 bytes @ 0x2
  3164                           
  3165  0002'                    ?_setLED:	
  3166                           ; 0 bytes @ 0x2
  3167                           
  3168  0002'                    ??_setLED_Main:	
  3169                           ; 0 bytes @ 0x2
  3170                           
  3171  0002'                    ??_setSw_Enable:	
  3172                           ; 0 bytes @ 0x2
  3173                           
  3174  0002'                    ?_setRF_Enable:	
  3175                           ; 0 bytes @ 0x2
  3176                           
  3177  0002'                    ?_setDimmerLights_AdjGo:	
  3178                           ; 0 bytes @ 0x2
  3179                           
  3180  0002'                    ?_setDimmerLights_TriggerAdj:	
  3181                           ; 0 bytes @ 0x2
  3182                           
  3183  0002'                    ?_setDimmerLights_Clear:	
  3184                           ; 0 bytes @ 0x2
  3185                           
  3186  0002'                    ??_Load_Initialization:	
  3187                           ; 0 bytes @ 0x2
  3188                           
  3189  0002'                    ?_setRF_Learn:	
  3190                           ; 0 bytes @ 0x2
  3191                           
  3192  0002'                    CC2500_WriteREG@value:	
  3193                           ; 0 bytes @ 0x2
  3194                           
  3195  0002'                    DlyOff_Initialization@sw:	
  3196                           ; 1 bytes @ 0x2
  3197                           
  3198  0002'                    DelayTimejudge@value:	
  3199                           ; 1 bytes @ 0x2
  3200                           
  3201  0002'                    setDimmerLights_TriggerERROR@command:	
  3202                           ; 1 bytes @ 0x2
  3203                           
  3204  0002'                    setDimmerLights_Switch@command:	
  3205                           ; 1 bytes @ 0x2
  3206                           
  3207  0002'                    setDimmerLights_AdjGo@command:	
  3208                           ; 1 bytes @ 0x2
  3209                           
  3210  0002'                    setDimmerLights_Trigger@command:	
  3211                           ; 1 bytes @ 0x2
  3212                           
  3213  0002'                    setDimmerLights_TriggerAdj@command:	
  3214                           ; 1 bytes @ 0x2
  3215                           
  3216  0002'                    setDimmerLights_Clear@command:	
  3217                           ; 1 bytes @ 0x2
  3218                           
  3219  0002'                    setLED@command:	
  3220                           ; 1 bytes @ 0x2
  3221                           
  3222  0002'                    Flash_Memory_Read@address:	
  3223                           ; 1 bytes @ 0x2
  3224                           
  3225  0002'                    setRF_Learn@command:	
  3226                           ; 1 bytes @ 0x2
  3227                           
  3228  0002'                    setRF_RxStatus@command:	
  3229                           ; 1 bytes @ 0x2
  3230                           
  3231  0002'                    setRF_Enable@command:	
  3232                           ; 1 bytes @ 0x2
  3233                           
  3234  0002'                    setRFSW_Status@command:	
  3235                           ; 1 bytes @ 0x2
  3236                           
  3237  0002'                    setSw_Enable@command:	
  3238                           ; 1 bytes @ 0x2
  3239                           
  3240  0002'                    setSw_Status@command:	
  3241                           ; 1 bytes @ 0x2
  3242                           
  3243  0002'                    DelayTime_1us@i:	
  3244                           ; 1 bytes @ 0x2
  3245                           
  3246  0002'                    ___wmul@multiplicand:	
  3247                           ; 2 bytes @ 0x2
  3248                           
  3249  0002'                    ___lwdiv@dividend:	
  3250                           ; 2 bytes @ 0x2
  3251                           
  3252                           
  3253                           ; 2 bytes @ 0x2
  3254  0002'                    	ds	1
  3255  0003'                    ??_setRF_RxStatus:	
  3256  0003'                    ??_CC2500_WriteREG:	
  3257                           ; 0 bytes @ 0x3
  3258                           
  3259  0003'                    ??_setSw_Status:	
  3260                           ; 0 bytes @ 0x3
  3261                           
  3262  0003'                    ??_setRFSW_Status:	
  3263                           ; 0 bytes @ 0x3
  3264                           
  3265  0003'                    ??_setDimmerLights_Trigger:	
  3266                           ; 0 bytes @ 0x3
  3267                           
  3268  0003'                    ??_setDimmerLights_Switch:	
  3269                           ; 0 bytes @ 0x3
  3270                           
  3271  0003'                    ??_setDimmerLights_TriggerERROR:	
  3272                           ; 0 bytes @ 0x3
  3273                           
  3274  0003'                    ??_setLED:	
  3275                           ; 0 bytes @ 0x3
  3276                           
  3277  0003'                    ??_setRF_Enable:	
  3278                           ; 0 bytes @ 0x3
  3279                           
  3280  0003'                    ??_DelayOff_Initialization:	
  3281                           ; 0 bytes @ 0x3
  3282                           
  3283  0003'                    ?_setDelayOff_GO:	
  3284                           ; 0 bytes @ 0x3
  3285                           
  3286  0003'                    ??_setDimmerLights_AdjGo:	
  3287                           ; 0 bytes @ 0x3
  3288                           
  3289  0003'                    ??_setDimmerLights_TriggerAdj:	
  3290                           ; 0 bytes @ 0x3
  3291                           
  3292  0003'                    ??_setDimmerLights_Clear:	
  3293                           ; 0 bytes @ 0x3
  3294                           
  3295  0003'                    ??_getAD:	
  3296                           ; 0 bytes @ 0x3
  3297                           
  3298  0003'                    ??_setRF_Learn:	
  3299                           ; 0 bytes @ 0x3
  3300                           
  3301  0003'                    CC2500_WriteCommand@command:	
  3302                           ; 0 bytes @ 0x3
  3303                           
  3304  0003'                    CC2500_ReadStatus@status_addr:	
  3305                           ; 1 bytes @ 0x3
  3306                           
  3307  0003'                    setDelayOff_GO@command:	
  3308                           ; 1 bytes @ 0x3
  3309                           
  3310  0003'                    setDimmerLights_Initialization@lights:	
  3311                           ; 1 bytes @ 0x3
  3312                           
  3313  0003'                    setDimmerLights_TriggerERROR@lights:	
  3314                           ; 1 bytes @ 0x3
  3315                           
  3316  0003'                    setDimmerLights_Switch@lights:	
  3317                           ; 1 bytes @ 0x3
  3318                           
  3319  0003'                    setDimmerLights_AdjGo@lights:	
  3320                           ; 1 bytes @ 0x3
  3321                           
  3322  0003'                    setDimmerLights_Trigger@lights:	
  3323                           ; 1 bytes @ 0x3
  3324                           
  3325  0003'                    setDimmerLights_TriggerAdj@lights:	
  3326                           ; 1 bytes @ 0x3
  3327                           
  3328  0003'                    setDimmerLights_Clear@lights:	
  3329                           ; 1 bytes @ 0x3
  3330                           
  3331  0003'                    setLED@led:	
  3332                           ; 1 bytes @ 0x3
  3333                           
  3334  0003'                    getAD@adcon0:	
  3335                           ; 1 bytes @ 0x3
  3336                           
  3337  0003'                    Flash_Memory_Read@ret:	
  3338                           ; 1 bytes @ 0x3
  3339                           
  3340  0003'                    setRF_Learn@rf:	
  3341                           ; 1 bytes @ 0x3
  3342                           
  3343  0003'                    setRF_RxStatus@rf:	
  3344                           ; 1 bytes @ 0x3
  3345                           
  3346  0003'                    setTxData@rf:	
  3347                           ; 1 bytes @ 0x3
  3348                           
  3349  0003'                    setRF_Enable@rf:	
  3350                           ; 1 bytes @ 0x3
  3351                           
  3352  0003'                    setRFSW_Status@sw:	
  3353                           ; 1 bytes @ 0x3
  3354                           
  3355  0003'                    setSw_Status@sw:	
  3356                           ; 1 bytes @ 0x3
  3357                           
  3358  0003'                    ___ftpack@exp:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0x3
  3363  0003'                    	ds	1
  3364  0004'                    ??_CC2500_ClearTXFIFO:	
  3365  0004'                    ??_CC2500_ClearRXFIFO:	
  3366                           ; 0 bytes @ 0x4
  3367                           
  3368  0004'                    ??_CC2500_SIDLEMode:	
  3369                           ; 0 bytes @ 0x4
  3370                           
  3371  0004'                    ?_setDimmerLights:	
  3372                           ; 0 bytes @ 0x4
  3373                           
  3374  0004'                    ??_setDimmerLights_ERROR:	
  3375                           ; 0 bytes @ 0x4
  3376                           
  3377  0004'                    ??_setLED_Initialization:	
  3378                           ; 0 bytes @ 0x4
  3379                           
  3380  0004'                    ??_Flash_Memory_Modify:	
  3381                           ; 0 bytes @ 0x4
  3382                           
  3383  0004'                    ??_RF_RxDisable:	
  3384                           ; 0 bytes @ 0x4
  3385                           
  3386  0004'                    ??_setSw_Initialization:	
  3387                           ; 0 bytes @ 0x4
  3388                           
  3389  0004'                    ??_Sw_DimmerAdjFunc:	
  3390                           ; 0 bytes @ 0x4
  3391                           
  3392  0004'                    ??_CC2500_TxData:	
  3393                           ; 0 bytes @ 0x4
  3394                           
  3395  0004'                    ??_CC2500_RxData:	
  3396                           ; 0 bytes @ 0x4
  3397                           
  3398  0004'                    ??_DimmerLights_Initialization:	
  3399                           ; 0 bytes @ 0x4
  3400                           
  3401  0004'                    ??_getLoad_AD:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0004'                    ??_getTemp_AD:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0004'                    ??_getPowerFault_AD:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0004'                    ??___wmul:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0004'                    ??___lwdiv:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0004'                    CC2500_WriteREG@w_addr:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0004'                    setDelayOff_GO@value:	
  3420                           ; 1 bytes @ 0x4
  3421                           
  3422  0004'                    setDimmerLights@status:	
  3423                           ; 1 bytes @ 0x4
  3424                           
  3425  0004'                    setLED_Initialization@led:	
  3426                           ; 1 bytes @ 0x4
  3427                           
  3428  0004'                    setLED_Main@led:	
  3429                           ; 1 bytes @ 0x4
  3430                           
  3431  0004'                    RF_RxDisable@rf:	
  3432                           ; 1 bytes @ 0x4
  3433                           
  3434  0004'                    setSw_Initialization@sw:	
  3435                           ; 1 bytes @ 0x4
  3436                           
  3437  0004'                    Sw_DimmerAdjFunc@Idle:	
  3438                           ; 1 bytes @ 0x4
  3439                           
  3440  0004'                    ___ftpack@sign:	
  3441                           ; 1 bytes @ 0x4
  3442                           
  3443  0004'                    DelayTime_1us@j:	
  3444                           ; 1 bytes @ 0x4
  3445                           
  3446  0004'                    ___wmul@product:	
  3447                           ; 2 bytes @ 0x4
  3448                           
  3449                           
  3450                           ; 2 bytes @ 0x4
  3451  0004'                    	ds	1
  3452  0005'                    ??_CC2500_InitSetREG:	
  3453  0005'                    ??_CC2500_InitPATable:	
  3454                           ; 0 bytes @ 0x5
  3455                           
  3456  0005'                    ??_setDimmerLights:	
  3457                           ; 0 bytes @ 0x5
  3458                           
  3459  0005'                    ??___ftpack:	
  3460                           ; 0 bytes @ 0x5
  3461                           
  3462  0005'                    ??_setDelayOff_GO:	
  3463                           ; 0 bytes @ 0x5
  3464                           
  3465  0005'                    ??_LED_Initialization:	
  3466                           ; 0 bytes @ 0x5
  3467                           
  3468  0005'                    ??_LED_Main:	
  3469                           ; 0 bytes @ 0x5
  3470                           
  3471  0005'                    ??_Switch_Initialization:	
  3472                           ; 0 bytes @ 0x5
  3473                           
  3474  0005'                    CC2500_TxData@loop_e:	
  3475                           ; 0 bytes @ 0x5
  3476                           
  3477  0005'                    CC2500_RxData@loop_f:	
  3478                           ; 1 bytes @ 0x5
  3479                           
  3480  0005'                    setDimmerLights_ERROR@lights:	
  3481                           ; 1 bytes @ 0x5
  3482                           
  3483  0005'                    Sw_DimmerAdjFunc@sw:	
  3484                           ; 1 bytes @ 0x5
  3485                           
  3486  0005'                    ___lwdiv@quotient:	
  3487                           ; 1 bytes @ 0x5
  3488                           
  3489                           
  3490                           ; 2 bytes @ 0x5
  3491  0005'                    	ds	1
  3492  0006'                    ??_CC2500_PowerRST:	
  3493  0006'                    ??_CC2500_FrequencyCabr:	
  3494                           ; 0 bytes @ 0x6
  3495                           
  3496  0006'                    ?_setBuz:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0006'                    CC2500_InitSetREG@temp1:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0006'                    CC2500_InitPATable@temp:	
  3503                           ; 1 bytes @ 0x6
  3504                           
  3505  0006'                    setDimmerLights@lights:	
  3506                           ; 1 bytes @ 0x6
  3507                           
  3508  0006'                    Flash_Memory_Modify@i:	
  3509                           ; 1 bytes @ 0x6
  3510                           
  3511  0006'                    setBuz@time:	
  3512                           ; 1 bytes @ 0x6
  3513                           
  3514                           
  3515                           ; 2 bytes @ 0x6
  3516  0006'                    	ds	1
  3517  0007'                    ??_Flash_Memory_Main:	
  3518  0007'                    CC2500_InitSetREG@temp2:	
  3519                           ; 0 bytes @ 0x7
  3520                           
  3521  0007'                    CC2500_InitPATable@loop_d:	
  3522                           ; 1 bytes @ 0x7
  3523                           
  3524  0007'                    setDelayOff_GO@sw:	
  3525                           ; 1 bytes @ 0x7
  3526                           
  3527  0007'                    ___lwdiv@counter:	
  3528                           ; 1 bytes @ 0x7
  3529                           
  3530                           
  3531                           ; 1 bytes @ 0x7
  3532  0007'                    	ds	1
  3533  0008'                    ??_setBuz:	
  3534  0008'                    ?___awtoft:	
  3535                           ; 0 bytes @ 0x8
  3536                           
  3537  0008'                    CC2500_InitSetREG@loop_c:	
  3538                           ; 3 bytes @ 0x8
  3539                           
  3540  0008'                    getTemp_AD@channel:	
  3541                           ; 1 bytes @ 0x8
  3542                           
  3543  0008'                    getPowerFault_AD@channel:	
  3544                           ; 1 bytes @ 0x8
  3545                           
  3546  0008'                    ___awtoft@c:	
  3547                           ; 1 bytes @ 0x8
  3548                           
  3549                           
  3550                           ; 2 bytes @ 0x8
  3551  0008'                    	ds	1
  3552  0009'                    ??_CC2500_PowerOnInitial:	
  3553  0009'                    setBuz@count:	
  3554                           ; 0 bytes @ 0x9
  3555                           
  3556  0009'                    getLoad_AD@channel:	
  3557                           ; 1 bytes @ 0x9
  3558                           
  3559                           
  3560                           ; 1 bytes @ 0x9
  3561  0009'                    	ds	1
  3562  000A'                    ??_setLog_Code:	
  3563  000A'                    ??_my_Main:	
  3564                           ; 0 bytes @ 0xA
  3565                           
  3566  000A'                    ??_DimmerLights_Exceptions:	
  3567                           ; 0 bytes @ 0xA
  3568                           
  3569  000A'                    DimmerLights_Exceptions@status:	
  3570                           ; 0 bytes @ 0xA
  3571                           
  3572  000A'                    getLoad_AD@j:	
  3573                           ; 1 bytes @ 0xA
  3574                           
  3575                           
  3576                           ; 1 bytes @ 0xA
  3577  000A'                    	ds	1
  3578  000B'                    ??_setLoad_Exceptions:	
  3579  000B'                    ??_setOverTemp_Exceptions:	
  3580                           ; 0 bytes @ 0xB
  3581                           
  3582  000B'                    ??_setPowerFault_Exceptions:	
  3583                           ; 0 bytes @ 0xB
  3584                           
  3585  000B'                    ??___awtoft:	
  3586                           ; 0 bytes @ 0xB
  3587                           
  3588  000B'                    getLoad_AD@i:	
  3589                           ; 0 bytes @ 0xB
  3590                           
  3591  000B'                    setLog_Code@rf:	
  3592                           ; 1 bytes @ 0xB
  3593                           
  3594                           
  3595                           ; 1 bytes @ 0xB
  3596  000B'                    	ds	1
  3597  000C'                    setLoad_Exceptions@command:	
  3598  000C'                    setOverTemp_Exceptions@command:	
  3599                           ; 1 bytes @ 0xC
  3600                           
  3601  000C'                    setPowerFault_Exceptions@command:	
  3602                           ; 1 bytes @ 0xC
  3603                           
  3604                           
  3605                           ; 1 bytes @ 0xC
  3606  000C'                    	ds	1
  3607  000D'                    ??_setTemp_Main:	
  3608  000D'                    ??_setPowerFault_Main:	
  3609                           ; 0 bytes @ 0xD
  3610                           
  3611  000D'                    ??_Load_Main:	
  3612                           ; 0 bytes @ 0xD
  3613                           
  3614  000D'                    ___awtoft@sign:	
  3615                           ; 0 bytes @ 0xD
  3616                           
  3617                           
  3618                           ; 1 bytes @ 0xD
  3619  000D'                    	ds	1
  3620  000E'                    ?___ftdiv:	
  3621  000E'                    ?___ftmul:	
  3622                           ; 3 bytes @ 0xE
  3623                           
  3624  000E'                    ___ftdiv@f2:	
  3625                           ; 3 bytes @ 0xE
  3626                           
  3627  000E'                    ___ftmul@f1:	
  3628                           ; 3 bytes @ 0xE
  3629                           
  3630                           
  3631                           ; 3 bytes @ 0xE
  3632  000E'                    	ds	1
  3633  000F'                    ??_PowerFault_Main:	
  3634                           
  3635                           ; 0 bytes @ 0xF
  3636  000F'                    	ds	1
  3637  0010'                    ??_Temp_Main:	
  3638                           
  3639                           ; 0 bytes @ 0x10
  3640  0010'                    	ds	1
  3641  0011'                    Load_Main@i:	
  3642  0011'                    ___ftdiv@f1:	
  3643                           ; 1 bytes @ 0x11
  3644                           
  3645  0011'                    ___ftmul@f2:	
  3646                           ; 3 bytes @ 0x11
  3647                           
  3648                           
  3649                           ; 3 bytes @ 0x11
  3650  0011'                    	ds	3
  3651  0014'                    ??___ftdiv:	
  3652  0014'                    ??___ftmul:	
  3653                           ; 0 bytes @ 0x14
  3654                           
  3655                           
  3656                           ; 0 bytes @ 0x14
  3657  0014'                    	ds	4
  3658  0018'                    ___ftdiv@cntr:	
  3659  0018'                    ___ftmul@exp:	
  3660                           ; 1 bytes @ 0x18
  3661                           
  3662                           
  3663                           ; 1 bytes @ 0x18
  3664  0018'                    	ds	1
  3665  0019'                    ___ftdiv@f3:	
  3666  0019'                    ___ftmul@f3_as_product:	
  3667                           ; 3 bytes @ 0x19
  3668                           
  3669                           
  3670                           ; 3 bytes @ 0x19
  3671  0019'                    	ds	3
  3672  001C'                    ___ftdiv@exp:	
  3673  001C'                    ___ftmul@cntr:	
  3674                           ; 1 bytes @ 0x1C
  3675                           
  3676                           
  3677                           ; 1 bytes @ 0x1C
  3678  001C'                    	ds	1
  3679  001D'                    ___ftdiv@sign:	
  3680  001D'                    ___ftmul@sign:	
  3681                           ; 1 bytes @ 0x1D
  3682                           
  3683                           
  3684                           ; 1 bytes @ 0x1D
  3685  001D'                    	ds	1
  3686  001E'                    ?___ftadd:	
  3687  001E'                    ___ftadd@f1:	
  3688                           ; 3 bytes @ 0x1E
  3689                           
  3690                           
  3691                           ; 3 bytes @ 0x1E
  3692  001E'                    	ds	3
  3693  0021'                    ___ftadd@f2:	
  3694                           
  3695                           ; 3 bytes @ 0x21
  3696  0021'                    	ds	3
  3697  0024'                    ??___ftadd:	
  3698                           
  3699                           ; 0 bytes @ 0x24
  3700  0024'                    	ds	4
  3701  0028'                    ___ftadd@sign:	
  3702                           
  3703                           ; 1 bytes @ 0x28
  3704  0028'                    	ds	1
  3705  0029'                    ___ftadd@exp2:	
  3706                           
  3707                           ; 1 bytes @ 0x29
  3708  0029'                    	ds	1
  3709  002A'                    ___ftadd@exp1:	
  3710                           
  3711                           ; 1 bytes @ 0x2A
  3712  002A'                    	ds	1
  3713  002B'                    ?___fttol:	
  3714  002B'                    ___fttol@f1:	
  3715                           ; 4 bytes @ 0x2B
  3716                           
  3717                           
  3718                           ; 3 bytes @ 0x2B
  3719  002B'                    	ds	4
  3720  002F'                    ??___fttol:	
  3721                           
  3722                           ; 0 bytes @ 0x2F
  3723  002F'                    	ds	4
  3724  0033'                    ___fttol@sign1:	
  3725                           
  3726                           ; 1 bytes @ 0x33
  3727  0033'                    	ds	1
  3728  0034'                    ___fttol@lval:	
  3729                           
  3730                           ; 4 bytes @ 0x34
  3731  0034'                    	ds	4
  3732  0038'                    ___fttol@exp1:	
  3733                           
  3734                           ; 1 bytes @ 0x38
  3735  0038'                    	ds	1
  3736  0039'                    ??_getPercentValue:	
  3737  0039'                    ??_setPercentValue:	
  3738                           ; 0 bytes @ 0x39
  3739                           
  3740  0039'                    setPercentValue@value:	
  3741                           ; 0 bytes @ 0x39
  3742                           
  3743                           
  3744                           ; 1 bytes @ 0x39
  3745  0039'                    	ds	1
  3746  003A'                    setPercentValue@i:	
  3747                           
  3748                           ; 3 bytes @ 0x3A
  3749  003A'                    	ds	1
  3750  003B'                    getPercentValue@value:	
  3751                           
  3752                           ; 1 bytes @ 0x3B
  3753  003B'                    	ds	1
  3754  003C'                    getPercentValue@i:	
  3755                           
  3756                           ; 3 bytes @ 0x3C
  3757  003C'                    	ds	1
  3758  003D'                    ?_setRF_DimmerLights:	
  3759  003D'                    ??_Flash_Memory_Initialization:	
  3760                           ; 0 bytes @ 0x3D
  3761                           
  3762  003D'                    setRF_DimmerLights@on:	
  3763                           ; 0 bytes @ 0x3D
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0x3D
  3767  003D'                    	ds	1
  3768  003E'                    ??_setRF_DimmerLights:	
  3769  003E'                    Flash_Memory_Initialization@i:	
  3770                           ; 0 bytes @ 0x3E
  3771                           
  3772                           
  3773                           ; 1 bytes @ 0x3E
  3774  003E'                    	ds	1
  3775  003F'                    ??_setDimmerLights_AdjRF:	
  3776                           
  3777                           ; 0 bytes @ 0x3F
  3778  003F'                    	ds	1
  3779  0040'                    setDimmerLights_AdjRF@lights:	
  3780  0040'                    setRF_DimmerLights@status:	
  3781                           ; 1 bytes @ 0x40
  3782                           
  3783                           
  3784                           ; 1 bytes @ 0x40
  3785  0040'                    	ds	1
  3786  0041'                    ??_setRF_DimmerValue:	
  3787  0041'                    setRF_DimmerLights@lights:	
  3788                           ; 0 bytes @ 0x41
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0x41
  3792  0041'                    	ds	1
  3793  0042'                    ??_DlyOff_Main:	
  3794  0042'                    ?_setDimmerLights_Adj:	
  3795                           ; 0 bytes @ 0x42
  3796                           
  3797  0042'                    ??_setRFSW_Control:	
  3798                           ; 0 bytes @ 0x42
  3799                           
  3800  0042'                    ??_Sw_DimmerOnFunc:	
  3801                           ; 0 bytes @ 0x42
  3802                           
  3803  0042'                    ??_Sw_DimmerOffFunc:	
  3804                           ; 0 bytes @ 0x42
  3805                           
  3806  0042'                    setDimmerLights_Adj@status:	
  3807                           ; 0 bytes @ 0x42
  3808                           
  3809  0042'                    Sw_DimmerOnFunc@Idle:	
  3810                           ; 1 bytes @ 0x42
  3811                           
  3812                           
  3813                           ; 1 bytes @ 0x42
  3814  0042'                    	ds	1
  3815  0043'                    ??_setDimmerLights_Adj:	
  3816  0043'                    setRFSW_Control@sw:	
  3817                           ; 0 bytes @ 0x43
  3818                           
  3819  0043'                    setRF_DimmerValue@lights:	
  3820                           ; 1 bytes @ 0x43
  3821                           
  3822  0043'                    Sw_DimmerOnFunc@sw:	
  3823                           ; 1 bytes @ 0x43
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0x43
  3827  0043'                    	ds	1
  3828  0044'                    ??_setRFSW_AdjControl:	
  3829  0044'                    DlyOff_Main@sw:	
  3830                           ; 0 bytes @ 0x44
  3831                           
  3832  0044'                    setDimmerLights_Adj@lights:	
  3833                           ; 1 bytes @ 0x44
  3834                           
  3835  0044'                    Sw_DimmerOffFunc@sw:	
  3836                           ; 1 bytes @ 0x44
  3837                           
  3838                           
  3839                           ; 1 bytes @ 0x44
  3840  0044'                    	ds	1
  3841  0045'                    ??_setDimmerLights_Main:	
  3842  0045'                    ??_setSw_Main:	
  3843                           ; 0 bytes @ 0x45
  3844                           
  3845  0045'                    ??_DelayOff_Main:	
  3846                           ; 0 bytes @ 0x45
  3847                           
  3848  0045'                    setDimmerLights_Main@clear:	
  3849                           ; 0 bytes @ 0x45
  3850                           
  3851                           
  3852                           ; 1 bytes @ 0x45
  3853  0045'                    	ds	1
  3854  0046'                    setDimmerLights_Main@lights:	
  3855  0046'                    setRFSW_AdjControl@sw:	
  3856                           ; 1 bytes @ 0x46
  3857                           
  3858                           
  3859                           ; 1 bytes @ 0x46
  3860  0046'                    	ds	1
  3861  0047'                    ??_setControl_Lights_Table:	
  3862  0047'                    ??_DimmerLights_Main:	
  3863                           ; 0 bytes @ 0x47
  3864                           
  3865  0047'                    setControl_Lights_Table@rf:	
  3866                           ; 0 bytes @ 0x47
  3867                           
  3868  0047'                    _setSw_Main$4544:	
  3869                           ; 1 bytes @ 0x47
  3870                           
  3871                           
  3872                           ; 1 bytes @ 0x47
  3873  0047'                    	ds	1
  3874  0048'                    ??_getRxData:	
  3875  0048'                    getRxData@rf:	
  3876                           ; 0 bytes @ 0x48
  3877                           
  3878  0048'                    setSw_Main@sw:	
  3879                           ; 1 bytes @ 0x48
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x48
  3883  0048'                    	ds	1
  3884  0049'                    ??_setRF_Main:	
  3885  0049'                    ??_Switch_Main:	
  3886                           ; 0 bytes @ 0x49
  3887                           
  3888                           
  3889                           ; 0 bytes @ 0x49
  3890  0049'                    	ds	1
  3891  004A'                    setRF_Main@rf:	
  3892                           
  3893                           ; 1 bytes @ 0x4A
  3894  004A'                    	ds	1
  3895  004B'                    _setRF_Main$3956:	
  3896                           
  3897                           ; 1 bytes @ 0x4B
  3898  004B'                    	ds	1
  3899  004C'                    ??_RF_Main:	
  3900  004C'                    ?_main:	
  3901                           ; 0 bytes @ 0x4C
  3902                           
  3903  004C'                    main@argc:	
  3904                           ; 2 bytes @ 0x4C
  3905                           
  3906                           
  3907                           ; 2 bytes @ 0x4C
  3908  004C'                    	ds	2
  3909  004E'                    main@argv:	
  3910                           
  3911                           ; 2 bytes @ 0x4E
  3912  004E'                    	ds	2
  3913  0050'                    ??_main:	
  3914                           
  3915                           	psect	maintext
  3916  0000'                    __pmaintext:	
  3917                           ; 0 bytes @ 0x50
  3918 ;;
  3919 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3920 ;;
  3921 ;; *************** function _main *****************
  3922 ;; Defined at:
  3923 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  argc            2   76[BANK0 ] int 
  3926 ;;  argv            2   78[BANK0 ] PTR PTR unsigned char 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  2   76[BANK0 ] int 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 17F/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3938 ;;      Params:         0       4       0       0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0
  3941 ;;      Totals:         0       4       0       0       0       0       0       0
  3942 ;;Total ram usage:        4 bytes
  3943 ;; Hardware stack levels required when called:   14
  3944 ;; This function calls:
  3945 ;;		_Buzzer_Initialization
  3946 ;;		_Buzzer_Main
  3947 ;;		_CC2500_PowerOnInitial
  3948 ;;		_DelayOff_Initialization
  3949 ;;		_DelayOff_Main
  3950 ;;		_DimmerLights_Initialization
  3951 ;;		_DimmerLights_Main
  3952 ;;		_Flash_Memory_Initialization
  3953 ;;		_Flash_Memory_Main
  3954 ;;		_LED_Initialization
  3955 ;;		_LED_Main
  3956 ;;		_Load_Initialization
  3957 ;;		_Load_Main
  3958 ;;		_Mcu_Initialization
  3959 ;;		_PowerFault_Initialization
  3960 ;;		_PowerFault_Main
  3961 ;;		_RF_Initialization
  3962 ;;		_RF_Main
  3963 ;;		_Switch_Initialization
  3964 ;;		_Switch_Main
  3965 ;;		_Temp_Initialization
  3966 ;;		_Temp_Main
  3967 ;;		_WDT_Main
  3968 ;;		_getLoad_AD
  3969 ;;		_getPowerFault_AD
  3970 ;;		_getTemp_AD
  3971 ;;		_myMain_Initialization
  3972 ;;		_my_Main
  3973 ;; This function is called by:
  3974 ;;		Startup code after reset
  3975 ;; This function uses a non-reentrant model
  3976 ;;
  3977                           
  3978                           
  3979                           ;psect for function _main
  3980  0000'                    _main:	
  3981                           
  3982                           ;Main_B1.c: 8: myMain_Initialization();
  3983                           
  3984                           ;incstack = 0
  3985                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3986  0000' 3180' 2000' 3180'  	fcall	_myMain_Initialization
  3987                           
  3988                           ;Main_B1.c: 9: Mcu_Initialization();
  3989  0003' 3180' 2000' 3180'  	fcall	_Mcu_Initialization
  3990                           
  3991                           ;Main_B1.c: 10: Flash_Memory_Initialization();
  3992  0006' 3180' 2000' 3180'  	fcall	_Flash_Memory_Initialization
  3993                           
  3994                           ;Main_B1.c: 11: LED_Initialization();
  3995  0009' 3180' 2000' 3180'  	fcall	_LED_Initialization
  3996                           
  3997                           ;Main_B1.c: 12: Buzzer_Initialization();
  3998  000C' 3180' 2000' 3180'  	fcall	_Buzzer_Initialization
  3999                           
  4000                           ;Main_B1.c: 14: ;;
  4001                           ;Main_B1.c: 15: Temp_Initialization();
  4002  000F' 3180' 2000' 3180'  	fcall	_Temp_Initialization
  4003                           
  4004                           ;Main_B1.c: 16: Load_Initialization();
  4005  0012' 3180' 2000' 3180'  	fcall	_Load_Initialization
  4006                           
  4007                           ;Main_B1.c: 17: PowerFault_Initialization();
  4008  0015' 3180' 2000' 3180'  	fcall	_PowerFault_Initialization
  4009                           
  4010                           ;Main_B1.c: 18: DelayOff_Initialization();
  4011  0018' 3180' 2000' 3180'  	fcall	_DelayOff_Initialization
  4012                           
  4013                           ;Main_B1.c: 20: DimmerLights_Initialization();
  4014  001B' 3180' 2000' 3180'  	fcall	_DimmerLights_Initialization
  4015                           
  4016                           ;Main_B1.c: 21: ;;
  4017                           ;Main_B1.c: 22: ;;
  4018                           ;Main_B1.c: 23: ;;
  4019                           ;Main_B1.c: 25: Switch_Initialization();
  4020  001E' 3180' 2000' 3180'  	fcall	_Switch_Initialization
  4021                           
  4022                           ;Main_B1.c: 26: RF_Initialization();
  4023  0021' 3180' 2000' 3180'  	fcall	_RF_Initialization
  4024                           
  4025                           ;Main_B1.c: 27: CC2500_PowerOnInitial();
  4026  0024' 3180' 2000' 3180'  	fcall	_CC2500_PowerOnInitial
  4027  0027'                    l9499:	
  4028                           ;Main_B1.c: 28: ;;
  4029                           ;Main_B1.c: 31: while (1) {
  4030                           
  4031                           
  4032                           ;Main_B1.c: 32: if (myMain->PowerON) {
  4033  0027' 0021               	movlb	1	; select bank1
  4034  0028' 0800'              	movf	_myMain^(0+128),w
  4035  0029' 0086               	movwf	6
  4036  002A' 3001               	movlw	1	; select bank2/3
  4037  002B' 0087               	movwf	7
  4038  002C' 1C01               	btfss	1,0
  4039  002D' 2800'              	goto	l9503
  4040                           
  4041                           ;Main_B1.c: 34: ;;
  4042                           ;Main_B1.c: 38: getLoad_AD(0x05);
  4043  002E' 3005               	movlw	5
  4044  002F' 3180' 2000' 3180'  	fcall	_getLoad_AD
  4045                           
  4046                           ;Main_B1.c: 42: getTemp_AD(0x09);
  4047  0032' 3009               	movlw	9
  4048  0033' 3180' 2000' 3180'  	fcall	_getTemp_AD
  4049                           
  4050                           ;Main_B1.c: 46: getPowerFault_AD(0x11);
  4051  0036' 3011               	movlw	17
  4052  0037' 3180' 2000' 3180'  	fcall	_getPowerFault_AD
  4053                           
  4054                           ;Main_B1.c: 58: Buzzer_Main();
  4055  003A' 3180' 2000' 3180'  	fcall	_Buzzer_Main
  4056  003D'                    l9503:	
  4057                           
  4058                           ;Main_B1.c: 60: }
  4059                           ;Main_B1.c: 63: if (myMain->T0_Timerout) {
  4060  003D' 0021               	movlb	1	; select bank1
  4061  003E' 0800'              	movf	_myMain^(0+128),w
  4062  003F' 0086               	movwf	6
  4063  0040' 3001               	movlw	1	; select bank2/3
  4064  0041' 0087               	movwf	7
  4065  0042' 1C81               	btfss	1,1
  4066  0043' 2800'              	goto	l9499
  4067                           
  4068                           ;Main_B1.c: 64: myMain->T0_Timerout = 0;
  4069  0044' 0800'              	movf	_myMain^(0+128),w
  4070  0045' 0086               	movwf	6
  4071  0046' 3001               	movlw	1	; select bank2/3
  4072  0047' 0087               	movwf	7
  4073  0048' 1081               	bcf	1,1
  4074                           
  4075                           ;Main_B1.c: 65: my_Main();
  4076  0049' 3180' 2000' 3180'  	fcall	_my_Main
  4077                           
  4078                           ;Main_B1.c: 66: WDT_Main();
  4079  004C' 3180' 2000' 3180'  	fcall	_WDT_Main
  4080                           
  4081                           ;Main_B1.c: 67: ;;
  4082                           ;Main_B1.c: 68: ;;
  4083                           ;Main_B1.c: 69: if (myMain->PowerON) {
  4084  004F' 0021               	movlb	1	; select bank1
  4085  0050' 0800'              	movf	_myMain^(0+128),w
  4086  0051' 0086               	movwf	6
  4087  0052' 3001               	movlw	1	; select bank2/3
  4088  0053' 0087               	movwf	7
  4089  0054' 1C01               	btfss	1,0
  4090  0055' 2800'              	goto	l9499
  4091                           
  4092                           ;Main_B1.c: 70: Flash_Memory_Main();
  4093  0056' 3180' 2000' 3180'  	fcall	_Flash_Memory_Main
  4094                           
  4095                           ;Main_B1.c: 72: LED_Main();
  4096  0059' 3180' 2000' 3180'  	fcall	_LED_Main
  4097                           
  4098                           ;Main_B1.c: 74: ;;
  4099                           ;Main_B1.c: 75: Temp_Main();
  4100  005C' 3180' 2000' 3180'  	fcall	_Temp_Main
  4101                           
  4102                           ;Main_B1.c: 76: Load_Main();
  4103  005F' 3180' 2000' 3180'  	fcall	_Load_Main
  4104                           
  4105                           ;Main_B1.c: 77: PowerFault_Main();
  4106  0062' 3180' 2000' 3180'  	fcall	_PowerFault_Main
  4107                           
  4108                           ;Main_B1.c: 79: ;;
  4109                           ;Main_B1.c: 80: DimmerLights_Main();
  4110  0065' 3180' 2000' 3180'  	fcall	_DimmerLights_Main
  4111                           
  4112                           ;Main_B1.c: 81: Switch_Main();
  4113  0068' 3180' 2000' 3180'  	fcall	_Switch_Main
  4114                           
  4115                           ;Main_B1.c: 82: ;;
  4116                           ;Main_B1.c: 83: ;;
  4117                           ;Main_B1.c: 85: RF_Main();
  4118  006B' 3180' 2000' 3180'  	fcall	_RF_Main
  4119                           
  4120                           ;Main_B1.c: 86: DelayOff_Main();
  4121  006E' 3180' 2000' 3180'  	fcall	_DelayOff_Main
  4122                           
  4123                           ;Main_B1.c: 87: ;;
  4124  0071' 2800'              	goto	l9499
  4125  0072'                    __end_of_main:	
  4126                           
  4127                           	psect	text1
  4128  0000'                    __ptext1:	
  4129 ;; *************** function _my_Main *****************
  4130 ;; Defined at:
  4131 ;;		line 123 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  4132 ;; Parameters:    Size  Location     Type
  4133 ;;		None
  4134 ;; Auto vars:     Size  Location     Type
  4135 ;;		None
  4136 ;; Return value:  Size  Location     Type
  4137 ;;		None               void
  4138 ;; Registers used:
  4139 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4140 ;; Tracked objects:
  4141 ;;		On entry : 0/0
  4142 ;;		On exit  : 0/0
  4143 ;;		Unchanged: 0/0
  4144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4145 ;;      Params:         0       0       0       0       0       0       0       0
  4146 ;;      Locals:         0       0       0       0       0       0       0       0
  4147 ;;      Temps:          0       0       0       0       0       0       0       0
  4148 ;;      Totals:         0       0       0       0       0       0       0       0
  4149 ;;Total ram usage:        0 bytes
  4150 ;; Hardware stack levels used:    1
  4151 ;; Hardware stack levels required when called:    6
  4152 ;; This function calls:
  4153 ;;		_setBuz
  4154 ;;		_setLoad_Enable
  4155 ;;		_setRF_Enable
  4156 ;;		_setSw_Enable
  4157 ;;		_setTemp_Enable
  4158 ;; This function is called by:
  4159 ;;		_main
  4160 ;; This function uses a non-reentrant model
  4161 ;;
  4162                           
  4163                           
  4164                           ;psect for function _my_Main
  4165  0000'                    _my_Main:	
  4166                           
  4167                           ;Main_B1.c: 125: if (myMain->PowerON == 0) {
  4168                           
  4169                           ;incstack = 0
  4170                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4171  0000' 0021               	movlb	1	; select bank1
  4172  0001' 0800'              	movf	_myMain^(0+128),w
  4173  0002' 0086               	movwf	6
  4174  0003' 3001               	movlw	1	; select bank2/3
  4175  0004' 0087               	movwf	7
  4176  0005' 1801               	btfsc	1,0
  4177  0006' 2800'              	goto	l9483
  4178                           
  4179                           ;Main_B1.c: 126: myMain->PowerCount++;
  4180  0007' 0A00'              	incf	_myMain^(0+128),w
  4181  0008' 0086               	movwf	6
  4182  0009' 3001               	movlw	1	; select bank2/3
  4183  000A' 0087               	movwf	7
  4184  000B' 3001               	movlw	1
  4185  000C' 0781               	addwf	1,f
  4186  000D' 3141               	addfsr 1,1
  4187  000E' 1803               	skipnc
  4188  000F' 0A81               	incf	1,f
  4189                           
  4190                           ;Main_B1.c: 127: if (myMain->PowerCount == 150)
  4191  0010' 0A00'              	incf	_myMain^(0+128),w
  4192  0011' 0086               	movwf	6
  4193  0012' 3001               	movlw	1	; select bank2/3
  4194  0013' 0087               	movwf	7
  4195  0014' 3F40               	moviw [0]fsr1
  4196  0015' 3A96               	xorlw	150
  4197  0016' 1D03               	skipz
  4198  0017' 2800'              	goto	u9505
  4199  0018' 3F41               	moviw [1]fsr1
  4200  0019' 3A00               	xorlw	0
  4201  001A'                    u9505:	
  4202  001A' 1D03               	skipz
  4203  001B' 0008               	return
  4204                           
  4205                           ;Main_B1.c: 128: {
  4206                           ;Main_B1.c: 129: myMain->PowerCount = 0;
  4207  001C' 0A00'              	incf	_myMain^(0+128),w
  4208  001D' 0086               	movwf	6
  4209  001E' 3001               	movlw	1	; select bank2/3
  4210  001F' 0087               	movwf	7
  4211  0020' 3000               	movlw	0
  4212  0021' 3FC0               	movwi [0]fsr1
  4213  0022' 3FC1               	movwi [1]fsr1
  4214                           
  4215                           ;Main_B1.c: 130: myMain->PowerON = 1;
  4216  0023' 0800'              	movf	_myMain^(0+128),w
  4217  0024' 0086               	movwf	6
  4218  0025' 3001               	movlw	1	; select bank2/3
  4219  0026' 0087               	movwf	7
  4220  0027' 1401               	bsf	1,0
  4221                           
  4222                           ;Main_B1.c: 133: setTemp_Enable(1);
  4223  0028' 3001               	movlw	1
  4224  0029' 3180' 2000' 3180'  	fcall	_setTemp_Enable
  4225                           
  4226                           ;Main_B1.c: 137: setLoad_Enable(1);
  4227  002C' 3001               	movlw	1
  4228  002D' 3180' 2000' 3180'  	fcall	_setLoad_Enable
  4229                           
  4230                           ;Main_B1.c: 143: setBuz(3, 50);
  4231  0030' 3032               	movlw	50
  4232  0031' 0020               	movlb	0	; select bank0
  4233  0032' 0086'              	movwf	setBuz@time
  4234  0033' 3000               	movlw	0
  4235  0034' 0087'              	movwf	setBuz@time+1
  4236  0035' 3003               	movlw	3
  4237  0036' 3180' 2000' 3180'  	fcall	_setBuz
  4238                           
  4239                           ;Main_B1.c: 144: myMain->SelfTest = 1;
  4240  0039' 0021               	movlb	1	; select bank1
  4241  003A' 0800'              	movf	_myMain^(0+128),w
  4242  003B' 3E03               	addlw	3
  4243  003C' 0086               	movwf	6
  4244  003D' 3001               	movlw	1	; select bank2/3
  4245  003E' 0087               	movwf	7
  4246  003F' 1401               	bsf	1,0
  4247                           
  4248                           ;Main_B1.c: 146: setSw_Enable(1);
  4249  0040' 3001               	movlw	1
  4250  0041' 3180' 2000' 3180'  	fcall	_setSw_Enable
  4251                           
  4252                           ;Main_B1.c: 149: setRF_Enable(1, 1);
  4253  0044' 0020               	movlb	0	; select bank0
  4254  0045' 0182'              	clrf	setRF_Enable@command
  4255  0046' 0A82'              	incf	setRF_Enable@command,f
  4256  0047' 3001               	movlw	1
  4257  0048' 3180' 2000'        	fcall	_setRF_Enable
  4258                           
  4259                           ;Main_B1.c: 153: }
  4260                           ;Main_B1.c: 154: } else {
  4261  004A' 0008               	return
  4262  004B'                    l9483:	
  4263                           
  4264                           ;Main_B1.c: 162: myMain->Count1++;
  4265  004B' 0021               	movlb	1	; select bank1
  4266  004C' 0800'              	movf	_myMain^(0+128),w
  4267  004D' 3E06               	addlw	6
  4268  004E' 0086               	movwf	6
  4269  004F' 3001               	movlw	1	; select bank2/3
  4270  0050' 0087               	movwf	7
  4271  0051' 3001               	movlw	1
  4272  0052' 0781               	addwf	1,f
  4273  0053' 3141               	addfsr 1,1
  4274  0054' 1803               	skipnc
  4275  0055' 0A81               	incf	1,f
  4276                           
  4277                           ;Main_B1.c: 163: if (myMain->Count1 == 100)
  4278  0056' 0800'              	movf	_myMain^(0+128),w
  4279  0057' 3E06               	addlw	6
  4280  0058' 0086               	movwf	6
  4281  0059' 3001               	movlw	1	; select bank2/3
  4282  005A' 0087               	movwf	7
  4283  005B' 3F40               	moviw [0]fsr1
  4284  005C' 3A64               	xorlw	100
  4285  005D' 1D03               	skipz
  4286  005E' 2800'              	goto	u9515
  4287  005F' 3F41               	moviw [1]fsr1
  4288  0060' 3A00               	xorlw	0
  4289  0061'                    u9515:	
  4290  0061' 1D03               	skipz
  4291  0062' 0008               	return
  4292                           
  4293                           ;Main_B1.c: 164: {
  4294                           ;Main_B1.c: 165: myMain->Count1 = 0;
  4295  0063' 0800'              	movf	_myMain^(0+128),w
  4296  0064' 3E06               	addlw	6
  4297  0065' 0086               	movwf	6
  4298  0066' 3001               	movlw	1	; select bank2/3
  4299  0067' 0087               	movwf	7
  4300  0068' 3000               	movlw	0
  4301  0069' 3FC0               	movwi [0]fsr1
  4302  006A' 3FC1               	movwi [1]fsr1
  4303                           
  4304                           ;Main_B1.c: 178: if (myMain->Flag) {
  4305  006B' 0800'              	movf	_myMain^(0+128),w
  4306  006C' 0086               	movwf	6
  4307  006D' 3001               	movlw	1	; select bank2/3
  4308  006E' 0087               	movwf	7
  4309  006F' 1D81               	btfss	1,3
  4310  0070' 2800'              	goto	l9491
  4311                           
  4312                           ;Main_B1.c: 179: myMain->Flag = 0;
  4313  0071' 0800'              	movf	_myMain^(0+128),w
  4314  0072' 0086               	movwf	6
  4315  0073' 3001               	movlw	1	; select bank2/3
  4316  0074' 0087               	movwf	7
  4317  0075' 1181               	bcf	1,3
  4318                           
  4319                           ;Main_B1.c: 188: } else {
  4320  0076' 0008               	return
  4321  0077'                    l9491:	
  4322                           
  4323                           ;Main_B1.c: 189: myMain->Flag = 1;
  4324  0077' 0800'              	movf	_myMain^(0+128),w
  4325  0078' 0086               	movwf	6
  4326  0079' 3001               	movlw	1	; select bank2/3
  4327  007A' 0087               	movwf	7
  4328  007B' 1581               	bsf	1,3
  4329  007C' 0008               	return
  4330  007D'                    __end_of_my_Main:	
  4331                           
  4332                           	psect	text2
  4333  0000'                    __ptext2:	
  4334 ;; *************** function _setTemp_Enable *****************
  4335 ;; Defined at:
  4336 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;  command         1    wreg     unsigned char 
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;  command         1    0[BANK0 ] unsigned char 
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4350 ;;      Params:         0       0       0       0       0       0       0       0
  4351 ;;      Locals:         0       1       0       0       0       0       0       0
  4352 ;;      Temps:          0       0       0       0       0       0       0       0
  4353 ;;      Totals:         0       1       0       0       0       0       0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    4
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_my_Main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _setTemp_Enable
  4366  0000'                    _setTemp_Enable:	
  4367                           
  4368                           ;incstack = 0
  4369                           ; Regs used in _setTemp_Enable: [wregfsr1]
  4370                           ;setTemp_Enable@command stored from wreg
  4371  0000' 0020               	movlb	0	; select bank0
  4372  0001' 0080'              	movwf	setTemp_Enable@command
  4373                           
  4374                           ;OverTemperature_B1.c: 24: Temp->Enable=command;
  4375  0002' 0803'              	movf	_Temp,w
  4376  0003' 0086               	movwf	6
  4377  0004' 3001               	movlw	1	; select bank2/3
  4378  0005' 0087               	movwf	7
  4379  0006' 0800'              	movf	setTemp_Enable@command,w
  4380  0007' 1001               	bcf	1,0
  4381  0008' 1D03               	skipz
  4382  0009' 1401               	bsf	1,0
  4383  000A' 0008               	return
  4384  000B'                    __end_of_setTemp_Enable:	
  4385                           
  4386                           	psect	text3
  4387  0000'                    __ptext3:	
  4388 ;; *************** function _setLoad_Enable *****************
  4389 ;; Defined at:
  4390 ;;		line 260 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4391 ;; Parameters:    Size  Location     Type
  4392 ;;  command         1    wreg     unsigned char 
  4393 ;; Auto vars:     Size  Location     Type
  4394 ;;  command         1    0[BANK0 ] unsigned char 
  4395 ;; Return value:  Size  Location     Type
  4396 ;;		None               void
  4397 ;; Registers used:
  4398 ;;		wreg, fsr1l, fsr1h
  4399 ;; Tracked objects:
  4400 ;;		On entry : 0/0
  4401 ;;		On exit  : 0/0
  4402 ;;		Unchanged: 0/0
  4403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4404 ;;      Params:         0       0       0       0       0       0       0       0
  4405 ;;      Locals:         0       1       0       0       0       0       0       0
  4406 ;;      Temps:          0       0       0       0       0       0       0       0
  4407 ;;      Totals:         0       1       0       0       0       0       0       0
  4408 ;;Total ram usage:        1 bytes
  4409 ;; Hardware stack levels used:    1
  4410 ;; Hardware stack levels required when called:    4
  4411 ;; This function calls:
  4412 ;;		Nothing
  4413 ;; This function is called by:
  4414 ;;		_my_Main
  4415 ;; This function uses a non-reentrant model
  4416 ;;
  4417                           
  4418                           
  4419                           ;psect for function _setLoad_Enable
  4420  0000'                    _setLoad_Enable:	
  4421                           
  4422                           ;incstack = 0
  4423                           ; Regs used in _setLoad_Enable: [wregfsr1]
  4424                           ;setLoad_Enable@command stored from wreg
  4425  0000' 0020               	movlb	0	; select bank0
  4426  0001' 0080'              	movwf	setLoad_Enable@command
  4427                           
  4428                           ;OverLoad_B1.c: 261: Load->Enable = command;
  4429  0002' 0804'              	movf	_Load,w
  4430  0003' 0086               	movwf	6
  4431  0004' 3002               	movlw	2	; select bank4/5
  4432  0005' 0087               	movwf	7
  4433  0006' 0800'              	movf	setLoad_Enable@command,w
  4434  0007' 1001               	bcf	1,0
  4435  0008' 1D03               	skipz
  4436  0009' 1401               	bsf	1,0
  4437                           
  4438                           ;OverLoad_B1.c: 262: Load->GO = 0;
  4439  000A' 0804'              	movf	_Load,w
  4440  000B' 0086               	movwf	6
  4441  000C' 3002               	movlw	2	; select bank4/5
  4442  000D' 0087               	movwf	7
  4443  000E' 1081               	bcf	1,1
  4444  000F' 0008               	return
  4445  0010'                    __end_of_setLoad_Enable:	
  4446                           
  4447                           	psect	text4
  4448  0000'                    __ptext4:	
  4449 ;; *************** function _myMain_Initialization *****************
  4450 ;; Defined at:
  4451 ;;		line 111 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Main_B1.c"
  4452 ;; Parameters:    Size  Location     Type
  4453 ;;		None
  4454 ;; Auto vars:     Size  Location     Type
  4455 ;;		None
  4456 ;; Return value:  Size  Location     Type
  4457 ;;		None               void
  4458 ;; Registers used:
  4459 ;;		wreg, fsr1l, fsr1h
  4460 ;; Tracked objects:
  4461 ;;		On entry : 0/0
  4462 ;;		On exit  : 0/0
  4463 ;;		Unchanged: 0/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4465 ;;      Params:         0       0       0       0       0       0       0       0
  4466 ;;      Locals:         0       0       0       0       0       0       0       0
  4467 ;;      Temps:          0       1       0       0       0       0       0       0
  4468 ;;      Totals:         0       1       0       0       0       0       0       0
  4469 ;;Total ram usage:        1 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    4
  4472 ;; This function calls:
  4473 ;;		Nothing
  4474 ;; This function is called by:
  4475 ;;		_main
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           
  4480                           ;psect for function _myMain_Initialization
  4481  0000'                    _myMain_Initialization:	
  4482                           
  4483                           ;Main_B1.c: 113: Product = &VarProduct;
  4484                           
  4485                           ;incstack = 0
  4486                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4487  0000' 3000'              	movlw	_VarProduct& (0+255)
  4488  0001' 0020               	movlb	0	; select bank0
  4489  0002' 0080'              	movwf	??_myMain_Initialization
  4490  0003' 0800'              	movf	??_myMain_Initialization,w
  4491  0004' 0080'              	movwf	_Product
  4492                           
  4493                           ;Main_B1.c: 114: Product->Data[20] = 209;
  4494  0005' 30D1               	movlw	209
  4495  0006' 0080'              	movwf	??_myMain_Initialization
  4496  0007' 0800'              	movf	_Product,w
  4497  0008' 3E14               	addlw	20
  4498  0009' 0086               	movwf	6
  4499  000A' 3001               	movlw	1	; select bank2/3
  4500  000B' 0087               	movwf	7
  4501  000C' 0800'              	movf	??_myMain_Initialization,w
  4502  000D' 0081               	movwf	1
  4503                           
  4504                           ;Main_B1.c: 117: myMain = &_myMain;
  4505  000E' 3000'              	movlw	__myMain& (0+255)
  4506  000F' 0080'              	movwf	??_myMain_Initialization
  4507  0010' 0800'              	movf	??_myMain_Initialization,w
  4508  0011' 0021               	movlb	1	; select bank1
  4509  0012' 0080'              	movwf	_myMain^(0+128)
  4510  0013' 0008               	return
  4511  0014'                    __end_of_myMain_Initialization:	
  4512                           
  4513                           	psect	text5
  4514  0000'                    __ptext5:	
  4515 ;; *************** function _getTemp_AD *****************
  4516 ;; Defined at:
  4517 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  4518 ;; Parameters:    Size  Location     Type
  4519 ;;  channel         1    wreg     unsigned char 
  4520 ;; Auto vars:     Size  Location     Type
  4521 ;;  channel         1    8[BANK0 ] unsigned char 
  4522 ;; Return value:  Size  Location     Type
  4523 ;;		None               void
  4524 ;; Registers used:
  4525 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4526 ;; Tracked objects:
  4527 ;;		On entry : 0/0
  4528 ;;		On exit  : 0/0
  4529 ;;		Unchanged: 0/0
  4530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4531 ;;      Params:         0       0       0       0       0       0       0       0
  4532 ;;      Locals:         0       1       0       0       0       0       0       0
  4533 ;;      Temps:          0       4       0       0       0       0       0       0
  4534 ;;      Totals:         0       5       0       0       0       0       0       0
  4535 ;;Total ram usage:        5 bytes
  4536 ;; Hardware stack levels used:    1
  4537 ;; Hardware stack levels required when called:    5
  4538 ;; This function calls:
  4539 ;;		_getAD
  4540 ;; This function is called by:
  4541 ;;		_main
  4542 ;; This function uses a non-reentrant model
  4543 ;;
  4544                           
  4545                           
  4546                           ;psect for function _getTemp_AD
  4547  0000'                    _getTemp_AD:	
  4548                           
  4549                           ;incstack = 0
  4550                           ; Regs used in _getTemp_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4551                           ;getTemp_AD@channel stored from wreg
  4552  0000' 0020               	movlb	0	; select bank0
  4553  0001' 0088'              	movwf	getTemp_AD@channel
  4554                           
  4555                           ;OverTemperature_B1.c: 37: if(Temp->ADtoGO)
  4556  0002' 0803'              	movf	_Temp,w
  4557  0003' 0086               	movwf	6
  4558  0004' 3001               	movlw	1	; select bank2/3
  4559  0005' 0087               	movwf	7
  4560  0006' 1D01               	btfss	1,2
  4561  0007' 0008               	return
  4562                           
  4563                           ;OverTemperature_B1.c: 38: {
  4564                           ;OverTemperature_B1.c: 39: Temp->ADRES=getAD(channel,0xf0);
  4565  0008' 30F0               	movlw	240
  4566  0009' 0084'              	movwf	??_getTemp_AD
  4567  000A' 0804'              	movf	??_getTemp_AD,w
  4568  000B' 0080'              	movwf	getAD@adcon1
  4569  000C' 0808'              	movf	getTemp_AD@channel,w
  4570  000D' 3180' 2000' 3180'  	fcall	_getAD
  4571  0010' 0803'              	movf	_Temp,w
  4572  0011' 3E0C               	addlw	12
  4573  0012' 0086               	movwf	6
  4574  0013' 3001               	movlw	1	; select bank2/3
  4575  0014' 0087               	movwf	7
  4576  0015' 0020               	movlb	0	; select bank0
  4577  0016' 0800'              	movf	?_getAD,w
  4578  0017' 3FC0               	movwi [0]fsr1
  4579  0018' 0801'              	movf	?_getAD+1,w
  4580  0019' 3FC1               	movwi [1]fsr1
  4581                           
  4582                           ;OverTemperature_B1.c: 40: if(Temp->ADH[0] < Temp->ADRES)
  4583  001A' 0803'              	movf	_Temp,w
  4584  001B' 3E0C               	addlw	12
  4585  001C' 0086               	movwf	6
  4586  001D' 3001               	movlw	1	; select bank2/3
  4587  001E' 0087               	movwf	7
  4588  001F' 3F40               	moviw [0]fsr1
  4589  0020' 0084'              	movwf	??_getTemp_AD
  4590  0021' 3F41               	moviw [1]fsr1
  4591  0022' 0085'              	movwf	??_getTemp_AD+1
  4592  0023' 0803'              	movf	_Temp,w
  4593  0024' 3E08               	addlw	8
  4594  0025' 0086               	movwf	6
  4595  0026' 3001               	movlw	1	; select bank2/3
  4596  0027' 0087               	movwf	7
  4597  0028' 3F40               	moviw [0]fsr1
  4598  0029' 0086'              	movwf	??_getTemp_AD+2
  4599  002A' 3F41               	moviw [1]fsr1
  4600  002B' 0087'              	movwf	??_getTemp_AD+3
  4601  002C' 0805'              	movf	??_getTemp_AD+1,w
  4602  002D' 0207'              	subwf	??_getTemp_AD+3,w
  4603  002E' 1D03               	skipz
  4604  002F' 2800'              	goto	u9455
  4605  0030' 0804'              	movf	??_getTemp_AD,w
  4606  0031' 0206'              	subwf	??_getTemp_AD+2,w
  4607  0032'                    u9455:	
  4608  0032' 1803               	skipnc
  4609  0033' 2800'              	goto	l9437
  4610                           
  4611                           ;OverTemperature_B1.c: 41: {
  4612                           ;OverTemperature_B1.c: 42: Temp->ADH[0]=Temp->ADRES;
  4613  0034' 0803'              	movf	_Temp,w
  4614  0035' 3E0C               	addlw	12
  4615  0036' 0086               	movwf	6
  4616  0037' 3001               	movlw	1	; select bank2/3
  4617  0038' 0087               	movwf	7
  4618  0039' 0803'              	movf	_Temp,w
  4619  003A' 3E08               	addlw	8
  4620  003B' 0084               	movwf	4
  4621  003C' 3001               	movlw	1	; select bank2/3
  4622  003D' 0085               	movwf	5
  4623  003E' 3F40               	moviw [0]fsr1
  4624  003F' 3F80               	movwi [0]fsr0
  4625  0040' 3F41               	moviw [1]fsr1
  4626  0041' 3F81               	movwi [1]fsr0
  4627                           
  4628                           ;OverTemperature_B1.c: 43: }
  4629  0042' 0008               	return
  4630  0043'                    l9437:	
  4631                           
  4632                           ;OverTemperature_B1.c: 44: else if(Temp->ADH[1] < Temp->ADRES)
  4633  0043' 0803'              	movf	_Temp,w
  4634  0044' 3E0C               	addlw	12
  4635  0045' 0086               	movwf	6
  4636  0046' 3001               	movlw	1	; select bank2/3
  4637  0047' 0087               	movwf	7
  4638  0048' 3F40               	moviw [0]fsr1
  4639  0049' 0084'              	movwf	??_getTemp_AD
  4640  004A' 3F41               	moviw [1]fsr1
  4641  004B' 0085'              	movwf	??_getTemp_AD+1
  4642  004C' 0803'              	movf	_Temp,w
  4643  004D' 3E0A               	addlw	10
  4644  004E' 0086               	movwf	6
  4645  004F' 3001               	movlw	1	; select bank2/3
  4646  0050' 0087               	movwf	7
  4647  0051' 3F40               	moviw [0]fsr1
  4648  0052' 0086'              	movwf	??_getTemp_AD+2
  4649  0053' 3F41               	moviw [1]fsr1
  4650  0054' 0087'              	movwf	??_getTemp_AD+3
  4651  0055' 0805'              	movf	??_getTemp_AD+1,w
  4652  0056' 0207'              	subwf	??_getTemp_AD+3,w
  4653  0057' 1D03               	skipz
  4654  0058' 2800'              	goto	u9465
  4655  0059' 0804'              	movf	??_getTemp_AD,w
  4656  005A' 0206'              	subwf	??_getTemp_AD+2,w
  4657  005B'                    u9465:	
  4658  005B' 1803               	skipnc
  4659  005C' 0008               	return
  4660                           
  4661                           ;OverTemperature_B1.c: 45: {
  4662                           ;OverTemperature_B1.c: 46: Temp->ADH[1]=Temp->ADRES;
  4663  005D' 0803'              	movf	_Temp,w
  4664  005E' 3E0C               	addlw	12
  4665  005F' 0086               	movwf	6
  4666  0060' 3001               	movlw	1	; select bank2/3
  4667  0061' 0087               	movwf	7
  4668  0062' 0803'              	movf	_Temp,w
  4669  0063' 3E0A               	addlw	10
  4670  0064' 0084               	movwf	4
  4671  0065' 3001               	movlw	1	; select bank2/3
  4672  0066' 0085               	movwf	5
  4673  0067' 3F40               	moviw [0]fsr1
  4674  0068' 3F80               	movwi [0]fsr0
  4675  0069' 3F41               	moviw [1]fsr1
  4676  006A' 3F81               	movwi [1]fsr0
  4677  006B' 0008               	return
  4678  006C'                    __end_of_getTemp_AD:	
  4679                           
  4680                           	psect	text6
  4681  0000'                    __ptext6:	
  4682 ;; *************** function _getPowerFault_AD *****************
  4683 ;; Defined at:
  4684 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
  4685 ;; Parameters:    Size  Location     Type
  4686 ;;  channel         1    wreg     unsigned char 
  4687 ;; Auto vars:     Size  Location     Type
  4688 ;;  channel         1    8[BANK0 ] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4698 ;;      Params:         0       0       0       0       0       0       0       0
  4699 ;;      Locals:         0       1       0       0       0       0       0       0
  4700 ;;      Temps:          0       4       0       0       0       0       0       0
  4701 ;;      Totals:         0       5       0       0       0       0       0       0
  4702 ;;Total ram usage:        5 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    5
  4705 ;; This function calls:
  4706 ;;		_getAD
  4707 ;; This function is called by:
  4708 ;;		_main
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _getPowerFault_AD
  4714  0000'                    _getPowerFault_AD:	
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _getPowerFault_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4718                           ;getPowerFault_AD@channel stored from wreg
  4719  0000' 0020               	movlb	0	; select bank0
  4720  0001' 0088'              	movwf	getPowerFault_AD@channel
  4721                           
  4722                           ;PowerFault_B1.c: 51: if(PF->ADtoGO)
  4723  0002' 0021               	movlb	1	; select bank1
  4724  0003' 0800'              	movf	_PF^(0+128),w
  4725  0004' 0086               	movwf	6
  4726  0005' 3001               	movlw	1	; select bank2/3
  4727  0006' 0087               	movwf	7
  4728  0007' 1D81               	btfss	1,3
  4729  0008' 0008               	return
  4730                           
  4731                           ;PowerFault_B1.c: 52: {
  4732                           ;PowerFault_B1.c: 53: PF->ADRES=getAD(channel,0xf0);
  4733  0009' 30F0               	movlw	240
  4734  000A' 0020               	movlb	0	; select bank0
  4735  000B' 0084'              	movwf	??_getPowerFault_AD
  4736  000C' 0804'              	movf	??_getPowerFault_AD,w
  4737  000D' 0080'              	movwf	getAD@adcon1
  4738  000E' 0808'              	movf	getPowerFault_AD@channel,w
  4739  000F' 3180' 2000' 3180'  	fcall	_getAD
  4740  0012' 0021               	movlb	1	; select bank1
  4741  0013' 0800'              	movf	_PF^(0+128),w
  4742  0014' 3E06               	addlw	6
  4743  0015' 0086               	movwf	6
  4744  0016' 3001               	movlw	1	; select bank2/3
  4745  0017' 0087               	movwf	7
  4746  0018' 0020               	movlb	0	; select bank0
  4747  0019' 0800'              	movf	?_getAD,w
  4748  001A' 3FC0               	movwi [0]fsr1
  4749  001B' 0801'              	movf	?_getAD+1,w
  4750  001C' 3FC1               	movwi [1]fsr1
  4751                           
  4752                           ;PowerFault_B1.c: 54: if(PF->AD < PF->ADRES)
  4753  001D' 0021               	movlb	1	; select bank1
  4754  001E' 0800'              	movf	_PF^(0+128),w
  4755  001F' 3E06               	addlw	6
  4756  0020' 0086               	movwf	6
  4757  0021' 3001               	movlw	1	; select bank2/3
  4758  0022' 0087               	movwf	7
  4759  0023' 3F40               	moviw [0]fsr1
  4760  0024' 0020               	movlb	0	; select bank0
  4761  0025' 0084'              	movwf	??_getPowerFault_AD
  4762  0026' 3F41               	moviw [1]fsr1
  4763  0027' 0085'              	movwf	??_getPowerFault_AD+1
  4764  0028' 0021               	movlb	1	; select bank1
  4765  0029' 0800'              	movf	_PF^(0+128),w
  4766  002A' 3E04               	addlw	4
  4767  002B' 0086               	movwf	6
  4768  002C' 3001               	movlw	1	; select bank2/3
  4769  002D' 0087               	movwf	7
  4770  002E' 3F40               	moviw [0]fsr1
  4771  002F' 0020               	movlb	0	; select bank0
  4772  0030' 0086'              	movwf	??_getPowerFault_AD+2
  4773  0031' 3F41               	moviw [1]fsr1
  4774  0032' 0087'              	movwf	??_getPowerFault_AD+3
  4775  0033' 0805'              	movf	??_getPowerFault_AD+1,w
  4776  0034' 0207'              	subwf	??_getPowerFault_AD+3,w
  4777  0035' 1D03               	skipz
  4778  0036' 2800'              	goto	u9485
  4779  0037' 0804'              	movf	??_getPowerFault_AD,w
  4780  0038' 0206'              	subwf	??_getPowerFault_AD+2,w
  4781  0039'                    u9485:	
  4782  0039' 1803               	skipnc
  4783  003A' 0008               	return
  4784                           
  4785                           ;PowerFault_B1.c: 55: {
  4786                           ;PowerFault_B1.c: 56: PF->AD=PF->ADRES;
  4787  003B' 0021               	movlb	1	; select bank1
  4788  003C' 0800'              	movf	_PF^(0+128),w
  4789  003D' 3E06               	addlw	6
  4790  003E' 0086               	movwf	6
  4791  003F' 3001               	movlw	1	; select bank2/3
  4792  0040' 0087               	movwf	7
  4793  0041' 0800'              	movf	_PF^(0+128),w
  4794  0042' 3E04               	addlw	4
  4795  0043' 0084               	movwf	4
  4796  0044' 3001               	movlw	1	; select bank2/3
  4797  0045' 0085               	movwf	5
  4798  0046' 3F40               	moviw [0]fsr1
  4799  0047' 3F80               	movwi [0]fsr0
  4800  0048' 3F41               	moviw [1]fsr1
  4801  0049' 3F81               	movwi [1]fsr0
  4802  004A' 0008               	return
  4803  004B'                    __end_of_getPowerFault_AD:	
  4804                           
  4805                           	psect	text7
  4806  0000'                    __ptext7:	
  4807 ;; *************** function _getLoad_AD *****************
  4808 ;; Defined at:
  4809 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
  4810 ;; Parameters:    Size  Location     Type
  4811 ;;  channel         1    wreg     unsigned char 
  4812 ;; Auto vars:     Size  Location     Type
  4813 ;;  channel         1    9[BANK0 ] unsigned char 
  4814 ;;  i               1   11[BANK0 ] unsigned char 
  4815 ;;  j               1   10[BANK0 ] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4825 ;;      Params:         0       0       0       0       0       0       0       0
  4826 ;;      Locals:         0       3       0       0       0       0       0       0
  4827 ;;      Temps:          0       5       0       0       0       0       0       0
  4828 ;;      Totals:         0       8       0       0       0       0       0       0
  4829 ;;Total ram usage:        8 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    5
  4832 ;; This function calls:
  4833 ;;		_getAD
  4834 ;; This function is called by:
  4835 ;;		_main
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _getLoad_AD
  4841  0000'                    _getLoad_AD:	
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _getLoad_AD: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4845                           ;getLoad_AD@channel stored from wreg
  4846  0000' 0020               	movlb	0	; select bank0
  4847  0001' 0089'              	movwf	getLoad_AD@channel
  4848                           
  4849                           ;OverLoad_B1.c: 17: char i = 0, j = 0;
  4850  0002' 018B'              	clrf	getLoad_AD@i
  4851  0003' 018A'              	clrf	getLoad_AD@j
  4852                           
  4853                           ;OverLoad_B1.c: 19: if (Load->ADtoGO) {
  4854  0004' 0804'              	movf	_Load,w
  4855  0005' 0086               	movwf	6
  4856  0006' 3002               	movlw	2	; select bank4/5
  4857  0007' 0087               	movwf	7
  4858  0008' 1E01               	btfss	1,4
  4859  0009' 0008               	return
  4860                           
  4861                           ;OverLoad_B1.c: 20: Load->ADRES = getAD(channel, 0xc0);
  4862  000A' 30C0               	movlw	192
  4863  000B' 0084'              	movwf	??_getLoad_AD
  4864  000C' 0804'              	movf	??_getLoad_AD,w
  4865  000D' 0080'              	movwf	getAD@adcon1
  4866  000E' 0809'              	movf	getLoad_AD@channel,w
  4867  000F' 3180' 2000' 3180'  	fcall	_getAD
  4868  0012' 0804'              	movf	_Load,w
  4869  0013' 3E32               	addlw	50
  4870  0014' 0086               	movwf	6
  4871  0015' 3002               	movlw	2	; select bank4/5
  4872  0016' 0087               	movwf	7
  4873  0017' 0020               	movlb	0	; select bank0
  4874  0018' 0800'              	movf	?_getAD,w
  4875  0019' 3FC0               	movwi [0]fsr1
  4876  001A' 0801'              	movf	?_getAD+1,w
  4877  001B' 3FC1               	movwi [1]fsr1
  4878                           
  4879                           ;OverLoad_B1.c: 21: for (i = 0; i < 5; i++) {
  4880  001C' 018B'              	clrf	getLoad_AD@i
  4881  001D' 3005               	movlw	5
  4882  001E' 020B'              	subwf	getLoad_AD@i,w
  4883  001F' 1803               	btfsc	3,0
  4884  0020' 2800'              	goto	l9287
  4885  0021'                    l9277:	
  4886                           
  4887                           ;OverLoad_B1.c: 22: if (Load->AH[i] < Load->ADRES) {
  4888  0021' 0804'              	movf	_Load,w
  4889  0022' 3E32               	addlw	50
  4890  0023' 0086               	movwf	6
  4891  0024' 3002               	movlw	2	; select bank4/5
  4892  0025' 0087               	movwf	7
  4893  0026' 3F40               	moviw [0]fsr1
  4894  0027' 0084'              	movwf	??_getLoad_AD
  4895  0028' 3F41               	moviw [1]fsr1
  4896  0029' 0085'              	movwf	??_getLoad_AD+1
  4897  002A' 350B'              	lslf	getLoad_AD@i,w
  4898  002B' 3E08               	addlw	8
  4899  002C' 0704'              	addwf	_Load,w
  4900  002D' 0086'              	movwf	??_getLoad_AD+2
  4901  002E' 0806'              	movf	??_getLoad_AD+2,w
  4902  002F' 0086               	movwf	6
  4903  0030' 3002               	movlw	2	; select bank4/5
  4904  0031' 0087               	movwf	7
  4905  0032' 3F40               	moviw [0]fsr1
  4906  0033' 0087'              	movwf	??_getLoad_AD+3
  4907  0034' 3F41               	moviw [1]fsr1
  4908  0035' 0088'              	movwf	??_getLoad_AD+4
  4909  0036' 0805'              	movf	??_getLoad_AD+1,w
  4910  0037' 0208'              	subwf	??_getLoad_AD+4,w
  4911  0038' 1D03               	skipz
  4912  0039' 2800'              	goto	u9165
  4913  003A' 0804'              	movf	??_getLoad_AD,w
  4914  003B' 0207'              	subwf	??_getLoad_AD+3,w
  4915  003C'                    u9165:	
  4916  003C' 1803               	skipnc
  4917  003D' 2800'              	goto	l9283
  4918                           
  4919                           ;OverLoad_B1.c: 23: Load->AH[i] = Load->ADRES;
  4920  003E' 0804'              	movf	_Load,w
  4921  003F' 3E32               	addlw	50
  4922  0040' 0086               	movwf	6
  4923  0041' 3002               	movlw	2	; select bank4/5
  4924  0042' 0087               	movwf	7
  4925  0043' 350B'              	lslf	getLoad_AD@i,w
  4926  0044' 3E08               	addlw	8
  4927  0045' 0704'              	addwf	_Load,w
  4928  0046' 0084'              	movwf	??_getLoad_AD
  4929  0047' 0804'              	movf	??_getLoad_AD,w
  4930  0048' 0084               	movwf	4
  4931  0049' 3002               	movlw	2	; select bank4/5
  4932  004A' 0085               	movwf	5
  4933  004B' 3F40               	moviw [0]fsr1
  4934  004C' 3F80               	movwi [0]fsr0
  4935  004D' 3F41               	moviw [1]fsr1
  4936  004E' 3F81               	movwi [1]fsr0
  4937                           
  4938                           ;OverLoad_B1.c: 24: j = 1;
  4939  004F' 018A'              	clrf	getLoad_AD@j
  4940  0050' 0A8A'              	incf	getLoad_AD@j,f
  4941                           
  4942                           ;OverLoad_B1.c: 25: break;
  4943  0051' 2800'              	goto	l9287
  4944  0052'                    l9283:	
  4945  0052' 3001               	movlw	1
  4946  0053' 0084'              	movwf	??_getLoad_AD
  4947  0054' 0804'              	movf	??_getLoad_AD,w
  4948  0055' 078B'              	addwf	getLoad_AD@i,f
  4949  0056' 3005               	movlw	5
  4950  0057' 020B'              	subwf	getLoad_AD@i,w
  4951  0058' 1C03               	skipc
  4952  0059' 2800'              	goto	l9277
  4953  005A'                    l9287:	
  4954                           
  4955                           ;OverLoad_B1.c: 26: }
  4956                           ;OverLoad_B1.c: 27: }
  4957                           ;OverLoad_B1.c: 28: if (!j) {
  4958  005A' 088A'              	movf	getLoad_AD@j,f
  4959  005B' 1D03               	skipz
  4960  005C' 0008               	return
  4961                           
  4962                           ;OverLoad_B1.c: 29: for (i = 0; i < 5; i++) {
  4963  005D' 018B'              	clrf	getLoad_AD@i
  4964  005E'                    L1:	
  4965  005E' 3005               	movlw	5
  4966  005F' 020B'              	subwf	getLoad_AD@i,w
  4967  0060' 1803               	btfsc	3,0
  4968  0061' 0008               	return
  4969                           
  4970                           ;OverLoad_B1.c: 30: if (Load->AL[i] > Load->ADRES) {
  4971  0062' 350B'              	lslf	getLoad_AD@i,w
  4972  0063' 3E1A               	addlw	26
  4973  0064' 0704'              	addwf	_Load,w
  4974  0065' 0084'              	movwf	??_getLoad_AD
  4975  0066' 0804'              	movf	??_getLoad_AD,w
  4976  0067' 0086               	movwf	6
  4977  0068' 3002               	movlw	2	; select bank4/5
  4978  0069' 0087               	movwf	7
  4979  006A' 3F40               	moviw [0]fsr1
  4980  006B' 0085'              	movwf	??_getLoad_AD+1
  4981  006C' 3F41               	moviw [1]fsr1
  4982  006D' 0086'              	movwf	??_getLoad_AD+2
  4983  006E' 0804'              	movf	_Load,w
  4984  006F' 3E32               	addlw	50
  4985  0070' 0086               	movwf	6
  4986  0071' 3002               	movlw	2	; select bank4/5
  4987  0072' 0087               	movwf	7
  4988  0073' 3F40               	moviw [0]fsr1
  4989  0074' 0087'              	movwf	??_getLoad_AD+3
  4990  0075' 3F41               	moviw [1]fsr1
  4991  0076' 0088'              	movwf	??_getLoad_AD+4
  4992  0077' 0806'              	movf	??_getLoad_AD+2,w
  4993  0078' 0208'              	subwf	??_getLoad_AD+4,w
  4994  0079' 1D03               	skipz
  4995  007A' 2800'              	goto	u9205
  4996  007B' 0805'              	movf	??_getLoad_AD+1,w
  4997  007C' 0207'              	subwf	??_getLoad_AD+3,w
  4998  007D'                    u9205:	
  4999  007D' 1803               	skipnc
  5000  007E' 2800'              	goto	l9299
  5001                           
  5002                           ;OverLoad_B1.c: 31: Load->AL[i] = Load->ADRES;
  5003  007F' 0804'              	movf	_Load,w
  5004  0080' 3E32               	addlw	50
  5005  0081' 0086               	movwf	6
  5006  0082' 3002               	movlw	2	; select bank4/5
  5007  0083' 0087               	movwf	7
  5008  0084' 350B'              	lslf	getLoad_AD@i,w
  5009  0085' 3E1A               	addlw	26
  5010  0086' 0704'              	addwf	_Load,w
  5011  0087' 0084'              	movwf	??_getLoad_AD
  5012  0088' 0804'              	movf	??_getLoad_AD,w
  5013  0089' 0084               	movwf	4
  5014  008A' 3002               	movlw	2	; select bank4/5
  5015  008B' 0085               	movwf	5
  5016  008C' 3F40               	moviw [0]fsr1
  5017  008D' 3F80               	movwi [0]fsr0
  5018  008E' 3F41               	moviw [1]fsr1
  5019  008F' 3F81               	movwi [1]fsr0
  5020                           
  5021                           ;OverLoad_B1.c: 32: break;
  5022  0090' 0008               	return
  5023  0091'                    l9299:	
  5024  0091' 3001               	movlw	1
  5025  0092' 0084'              	movwf	??_getLoad_AD
  5026  0093' 0804'              	movf	??_getLoad_AD,w
  5027  0094' 078B'              	addwf	getLoad_AD@i,f
  5028  0095' 2800'              	goto	L1
  5029  0096'                    __end_of_getLoad_AD:	
  5030                           
  5031                           	psect	text8
  5032  0000'                    __ptext8:	
  5033 ;; *************** function _getAD *****************
  5034 ;; Defined at:
  5035 ;;		line 384 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  5036 ;; Parameters:    Size  Location     Type
  5037 ;;  adcon0          1    wreg     unsigned char 
  5038 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  2    0[BANK0 ] int 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5050 ;;      Params:         0       3       0       0       0       0       0       0
  5051 ;;      Locals:         0       1       0       0       0       0       0       0
  5052 ;;      Temps:          0       0       0       0       0       0       0       0
  5053 ;;      Totals:         0       4       0       0       0       0       0       0
  5054 ;;Total ram usage:        4 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    4
  5057 ;; This function calls:
  5058 ;;		Nothing
  5059 ;; This function is called by:
  5060 ;;		_getLoad_AD
  5061 ;;		_getTemp_AD
  5062 ;;		_getPowerFault_AD
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           
  5067                           ;psect for function _getAD
  5068  0000'                    _getAD:	
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _getAD: [wreg+status,2+status,0]
  5072                           ;getAD@adcon0 stored from wreg
  5073  0000' 0020               	movlb	0	; select bank0
  5074  0001' 0083'              	movwf	getAD@adcon0
  5075                           
  5076                           ;MCU_B1.c: 385: ADCON0 = adcon0;
  5077  0002' 0803'              	movf	getAD@adcon0,w
  5078  0003' 0021               	movlb	1	; select bank1
  5079  0004' 009D               	movwf	29	;volatile
  5080                           
  5081                           ;MCU_B1.c: 386: ADCON1 = adcon1;
  5082  0005' 0020               	movlb	0	; select bank0
  5083  0006' 0800'              	movf	getAD@adcon1,w
  5084  0007' 0021               	movlb	1	; select bank1
  5085  0008' 009E               	movwf	30	;volatile
  5086                           
  5087                           ;MCU_B1.c: 387: GO_nDONE = 1;
  5088  0009' 149D               	bsf	29,1	;volatile
  5089  000A'                    l1354:	
  5090                           ;MCU_B1.c: 388: while (GO_nDONE);
  5091                           
  5092  000A' 189D               	btfsc	29,1	;volatile
  5093  000B' 2800'              	goto	l1354
  5094                           
  5095                           ;MCU_B1.c: 389: return ((ADRESH*256)+ADRESL);
  5096  000C' 081C               	movf	28,w	;volatile
  5097  000D' 0020               	movlb	0	; select bank0
  5098  000E' 0181'              	clrf	?_getAD+1
  5099  000F' 0781'              	addwf	?_getAD+1,f
  5100  0010' 0021               	movlb	1	; select bank1
  5101  0011' 081B               	movf	27,w	;volatile
  5102  0012' 0020               	movlb	0	; select bank0
  5103  0013' 0180'              	clrf	?_getAD
  5104  0014' 0780'              	addwf	?_getAD,f
  5105  0015' 0008               	return
  5106  0016'                    __end_of_getAD:	
  5107                           
  5108                           	psect	text9
  5109  0000'                    __ptext9:	
  5110 ;; *************** function _WDT_Main *****************
  5111 ;; Defined at:
  5112 ;;		line 952 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  5113 ;; Parameters:    Size  Location     Type
  5114 ;;		None
  5115 ;; Auto vars:     Size  Location     Type
  5116 ;;		None
  5117 ;; Return value:  Size  Location     Type
  5118 ;;		None               void
  5119 ;; Registers used:
  5120 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5121 ;; Tracked objects:
  5122 ;;		On entry : 0/0
  5123 ;;		On exit  : 0/0
  5124 ;;		Unchanged: 0/0
  5125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5126 ;;      Params:         0       0       0       0       0       0       0       0
  5127 ;;      Locals:         0       0       0       0       0       0       0       0
  5128 ;;      Temps:          0       1       0       0       0       0       0       0
  5129 ;;      Totals:         0       1       0       0       0       0       0       0
  5130 ;;Total ram usage:        1 bytes
  5131 ;; Hardware stack levels used:    1
  5132 ;; Hardware stack levels required when called:    5
  5133 ;; This function calls:
  5134 ;;		_WDT_Clearing
  5135 ;; This function is called by:
  5136 ;;		_main
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _WDT_Main
  5142  0000'                    _WDT_Main:	
  5143                           
  5144                           ;MCU_B1.c: 953: if (WDT->Enable) {
  5145                           
  5146                           ;incstack = 0
  5147                           ; Regs used in _WDT_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5148  0000' 0021               	movlb	1	; select bank1
  5149  0001' 0800'              	movf	_WDT^(0+128),w
  5150  0002' 0086               	movwf	6
  5151  0003' 0187               	clrf	7
  5152  0004' 1C01               	btfss	1,0
  5153  0005' 0008               	return
  5154                           
  5155                           ;MCU_B1.c: 954: if (WDT->Count-- > 0) {
  5156  0006' 0A00'              	incf	_WDT^(0+128),w
  5157  0007' 0086               	movwf	6
  5158  0008' 0187               	clrf	7
  5159  0009' 3001               	movlw	1
  5160  000A' 0281               	subwf	1,f
  5161  000B' 0801               	movf	1,w
  5162  000C' 3AFF               	xorlw	255
  5163  000D' 1903               	skipnz
  5164  000E' 0008               	return
  5165                           
  5166                           ;MCU_B1.c: 955: WDT->Count = 10;
  5167  000F' 300A               	movlw	10
  5168  0010' 0020               	movlb	0	; select bank0
  5169  0011' 0080'              	movwf	??_WDT_Main
  5170  0012' 0021               	movlb	1	; select bank1
  5171  0013' 0A00'              	incf	_WDT^(0+128),w
  5172  0014' 0086               	movwf	6
  5173  0015' 0187               	clrf	7
  5174  0016' 0020               	movlb	0	; select bank0
  5175  0017' 0800'              	movf	??_WDT_Main,w
  5176  0018' 0081               	movwf	1
  5177                           
  5178                           ;MCU_B1.c: 956: WDT_Clearing();
  5179  0019' 3180' 2000'        	fcall	_WDT_Clearing
  5180  001B' 0008               	return
  5181  001C'                    __end_of_WDT_Main:	
  5182                           
  5183                           	psect	text10
  5184  0000'                    __ptext10:	
  5185 ;; *************** function _WDT_Clearing *****************
  5186 ;; Defined at:
  5187 ;;		line 962 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
  5188 ;; Parameters:    Size  Location     Type
  5189 ;;		None
  5190 ;; Auto vars:     Size  Location     Type
  5191 ;;		None
  5192 ;; Return value:  Size  Location     Type
  5193 ;;		None               void
  5194 ;; Registers used:
  5195 ;;		None
  5196 ;; Tracked objects:
  5197 ;;		On entry : 0/0
  5198 ;;		On exit  : 0/0
  5199 ;;		Unchanged: 0/0
  5200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5201 ;;      Params:         0       0       0       0       0       0       0       0
  5202 ;;      Locals:         0       0       0       0       0       0       0       0
  5203 ;;      Temps:          0       0       0       0       0       0       0       0
  5204 ;;      Totals:         0       0       0       0       0       0       0       0
  5205 ;;Total ram usage:        0 bytes
  5206 ;; Hardware stack levels used:    1
  5207 ;; Hardware stack levels required when called:    4
  5208 ;; This function calls:
  5209 ;;		Nothing
  5210 ;; This function is called by:
  5211 ;;		_WDT_Main
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _WDT_Clearing
  5217  0000'                    _WDT_Clearing:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _WDT_Clearing: []
  5221  0000' 0064               	clrwdt	;# 
  5222  0001' 0008               	return
  5223  0002'                    __end_of_WDT_Clearing:	
  5224                           
  5225                           	psect	text11
  5226  0000'                    __ptext11:	
  5227 ;; *************** function _Temp_Main *****************
  5228 ;; Defined at:
  5229 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5230 ;; Parameters:    Size  Location     Type
  5231 ;;		None
  5232 ;; Auto vars:     Size  Location     Type
  5233 ;;		None
  5234 ;; Return value:  Size  Location     Type
  5235 ;;		None               void
  5236 ;; Registers used:
  5237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5238 ;; Tracked objects:
  5239 ;;		On entry : 0/0
  5240 ;;		On exit  : 0/0
  5241 ;;		Unchanged: 0/0
  5242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5243 ;;      Params:         0       0       0       0       0       0       0       0
  5244 ;;      Locals:         0       0       0       0       0       0       0       0
  5245 ;;      Temps:          0       0       0       0       0       0       0       0
  5246 ;;      Totals:         0       0       0       0       0       0       0       0
  5247 ;;Total ram usage:        0 bytes
  5248 ;; Hardware stack levels used:    1
  5249 ;; Hardware stack levels required when called:   10
  5250 ;; This function calls:
  5251 ;;		_setTemp_Main
  5252 ;; This function is called by:
  5253 ;;		_main
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           
  5258                           ;psect for function _Temp_Main
  5259  0000'                    _Temp_Main:	
  5260                           
  5261                           ;OverTemperature_B1.c: 60: setTemp_Main();
  5262                           
  5263                           ;incstack = 0
  5264                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5265  0000' 3180' 2000'        	fcall	_setTemp_Main
  5266  0002' 0008               	return
  5267  0003'                    __end_of_Temp_Main:	
  5268                           
  5269                           	psect	text12
  5270  0000'                    __ptext12:	
  5271 ;; *************** function _setTemp_Main *****************
  5272 ;; Defined at:
  5273 ;;		line 64 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;		None
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;		None               void
  5280 ;; Registers used:
  5281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5287 ;;      Params:         0       0       0       0       0       0       0       0
  5288 ;;      Locals:         0       0       0       0       0       0       0       0
  5289 ;;      Temps:          0       3       0       0       0       0       0       0
  5290 ;;      Totals:         0       3       0       0       0       0       0       0
  5291 ;;Total ram usage:        3 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    9
  5294 ;; This function calls:
  5295 ;;		_getLoad_Safe
  5296 ;;		_getPF_Safe
  5297 ;;		_setOverTemp_Exceptions
  5298 ;; This function is called by:
  5299 ;;		_Temp_Main
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           
  5304                           ;psect for function _setTemp_Main
  5305  0000'                    _setTemp_Main:	
  5306                           
  5307                           ;OverTemperature_B1.c: 66: if(Temp->Enable)
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5311  0000' 0803'              	movf	_Temp,w
  5312  0001' 0086               	movwf	6
  5313  0002' 3001               	movlw	1	; select bank2/3
  5314  0003' 0087               	movwf	7
  5315  0004' 1C01               	btfss	1,0
  5316  0005' 0008               	return
  5317                           
  5318                           ;OverTemperature_B1.c: 67: {
  5319                           ;OverTemperature_B1.c: 68: if(Temp->ADtoGO == 0)
  5320  0006' 0803'              	movf	_Temp,w
  5321  0007' 0086               	movwf	6
  5322  0008' 3001               	movlw	1	; select bank2/3
  5323  0009' 0087               	movwf	7
  5324  000A' 1901               	btfsc	1,2
  5325  000B' 2800'              	goto	l8909
  5326                           
  5327                           ;OverTemperature_B1.c: 69: {
  5328                           ;OverTemperature_B1.c: 70: Temp->Time++;
  5329  000C' 0A03'              	incf	_Temp,w
  5330  000D' 0086               	movwf	6
  5331  000E' 3001               	movlw	1	; select bank2/3
  5332  000F' 0087               	movwf	7
  5333  0010' 3001               	movlw	1
  5334  0011' 0781               	addwf	1,f
  5335  0012' 3141               	addfsr 1,1
  5336  0013' 1803               	skipnc
  5337  0014' 0A81               	incf	1,f
  5338                           
  5339                           ;OverTemperature_B1.c: 71: if(Temp->Time >= 500)
  5340  0015' 0A03'              	incf	_Temp,w
  5341  0016' 0086               	movwf	6
  5342  0017' 3001               	movlw	1	; select bank2/3
  5343  0018' 0087               	movwf	7
  5344  0019' 3F40               	moviw [0]fsr1
  5345  001A' 0020               	movlb	0	; select bank0
  5346  001B' 008D'              	movwf	??_setTemp_Main
  5347  001C' 3F41               	moviw [1]fsr1
  5348  001D' 008E'              	movwf	??_setTemp_Main+1
  5349  001E' 3001               	movlw	1
  5350  001F' 020E'              	subwf	??_setTemp_Main+1,w
  5351  0020' 30F4               	movlw	244
  5352  0021' 1903               	skipnz
  5353  0022' 020D'              	subwf	??_setTemp_Main,w
  5354  0023' 1C03               	skipc
  5355  0024' 0008               	return
  5356                           
  5357                           ;OverTemperature_B1.c: 72: {
  5358                           ;OverTemperature_B1.c: 73: if(getLoad_Safe() && getPF_Safe())
  5359  0025' 3180' 2000' 3180'  	fcall	_getLoad_Safe
  5360  0028' 3A00               	xorlw	0
  5361  0029' 1903               	skipnz
  5362  002A' 2800'              	goto	l8907
  5363  002B' 3180' 2000' 3180'  	fcall	_getPF_Safe
  5364  002E' 3A00               	xorlw	0
  5365  002F' 1903               	skipnz
  5366  0030' 2800'              	goto	l8907
  5367                           
  5368                           ;OverTemperature_B1.c: 74: {
  5369                           ;OverTemperature_B1.c: 75: Temp->Time=0;
  5370  0031' 0A03'              	incf	_Temp,w
  5371  0032' 0086               	movwf	6
  5372  0033' 3001               	movlw	1	; select bank2/3
  5373  0034' 0087               	movwf	7
  5374  0035' 3000               	movlw	0
  5375  0036' 3FC0               	movwi [0]fsr1
  5376  0037' 3FC1               	movwi [1]fsr1
  5377                           
  5378                           ;OverTemperature_B1.c: 76: Temp->ADtoGO=1;
  5379  0038' 0803'              	movf	_Temp,w
  5380  0039' 0086               	movwf	6
  5381  003A' 3001               	movlw	1	; select bank2/3
  5382  003B' 0087               	movwf	7
  5383  003C' 1501               	bsf	1,2
  5384                           
  5385                           ;OverTemperature_B1.c: 77: Temp->Safe=0;
  5386  003D' 0803'              	movf	_Temp,w
  5387  003E' 0086               	movwf	6
  5388  003F' 3001               	movlw	1	; select bank2/3
  5389  0040' 0087               	movwf	7
  5390  0041' 1201               	bcf	1,4
  5391                           
  5392                           ;OverTemperature_B1.c: 78: }
  5393  0042' 0008               	return
  5394  0043'                    l8907:	
  5395                           
  5396                           ;OverTemperature_B1.c: 79: else
  5397                           ;OverTemperature_B1.c: 80: {
  5398                           ;OverTemperature_B1.c: 81: Temp->Time=1000;
  5399  0043' 0A03'              	incf	_Temp,w
  5400  0044' 0086               	movwf	6
  5401  0045' 3001               	movlw	1	; select bank2/3
  5402  0046' 0087               	movwf	7
  5403  0047' 30E8               	movlw	232
  5404  0048' 3FC0               	movwi [0]fsr1
  5405  0049' 3003               	movlw	3
  5406  004A' 3FC1               	movwi [1]fsr1
  5407                           
  5408                           ;OverTemperature_B1.c: 82: }
  5409                           ;OverTemperature_B1.c: 83: }
  5410                           ;OverTemperature_B1.c: 84: }
  5411  004B' 0008               	return
  5412  004C'                    l8909:	
  5413                           
  5414                           ;OverTemperature_B1.c: 85: else
  5415                           ;OverTemperature_B1.c: 86: {
  5416                           ;OverTemperature_B1.c: 87: Temp->Time++;
  5417  004C' 0A03'              	incf	_Temp,w
  5418  004D' 0086               	movwf	6
  5419  004E' 3001               	movlw	1	; select bank2/3
  5420  004F' 0087               	movwf	7
  5421  0050' 3001               	movlw	1
  5422  0051' 0781               	addwf	1,f
  5423  0052' 3141               	addfsr 1,1
  5424  0053' 1803               	skipnc
  5425  0054' 0A81               	incf	1,f
  5426                           
  5427                           ;OverTemperature_B1.c: 88: if(Temp->Time >= 4)
  5428  0055' 0A03'              	incf	_Temp,w
  5429  0056' 0086               	movwf	6
  5430  0057' 3001               	movlw	1	; select bank2/3
  5431  0058' 0087               	movwf	7
  5432  0059' 3F40               	moviw [0]fsr1
  5433  005A' 0020               	movlb	0	; select bank0
  5434  005B' 008D'              	movwf	??_setTemp_Main
  5435  005C' 3F41               	moviw [1]fsr1
  5436  005D' 008E'              	movwf	??_setTemp_Main+1
  5437  005E' 3000               	movlw	0
  5438  005F' 020E'              	subwf	??_setTemp_Main+1,w
  5439  0060' 3004               	movlw	4
  5440  0061' 1903               	skipnz
  5441  0062' 020D'              	subwf	??_setTemp_Main,w
  5442  0063' 1C03               	skipc
  5443  0064' 0008               	return
  5444                           
  5445                           ;OverTemperature_B1.c: 89: {
  5446                           ;OverTemperature_B1.c: 90: Temp->Time=0;
  5447  0065' 0A03'              	incf	_Temp,w
  5448  0066' 0086               	movwf	6
  5449  0067' 3001               	movlw	1	; select bank2/3
  5450  0068' 0087               	movwf	7
  5451  0069' 3000               	movlw	0
  5452  006A' 3FC0               	movwi [0]fsr1
  5453  006B' 3FC1               	movwi [1]fsr1
  5454                           
  5455                           ;OverTemperature_B1.c: 91: Temp->ADtoGO=0;
  5456  006C' 0803'              	movf	_Temp,w
  5457  006D' 0086               	movwf	6
  5458  006E' 3001               	movlw	1	; select bank2/3
  5459  006F' 0087               	movwf	7
  5460  0070' 1101               	bcf	1,2
  5461                           
  5462                           ;OverTemperature_B1.c: 92: Temp->AD=Temp->ADH[1];
  5463  0071' 0803'              	movf	_Temp,w
  5464  0072' 3E0A               	addlw	10
  5465  0073' 0086               	movwf	6
  5466  0074' 3001               	movlw	1	; select bank2/3
  5467  0075' 0087               	movwf	7
  5468  0076' 0803'              	movf	_Temp,w
  5469  0077' 3E06               	addlw	6
  5470  0078' 0084               	movwf	4
  5471  0079' 3001               	movlw	1	; select bank2/3
  5472  007A' 0085               	movwf	5
  5473  007B' 3F40               	moviw [0]fsr1
  5474  007C' 3F80               	movwi [0]fsr0
  5475  007D' 3F41               	moviw [1]fsr1
  5476  007E' 3F81               	movwi [1]fsr0
  5477                           
  5478                           ;OverTemperature_B1.c: 93: if(Temp->ERROR)
  5479  007F' 0803'              	movf	_Temp,w
  5480  0080' 0086               	movwf	6
  5481  0081' 3001               	movlw	1	; select bank2/3
  5482  0082' 0087               	movwf	7
  5483  0083' 1C81               	btfss	1,1
  5484  0084' 2800'              	goto	l8931
  5485                           
  5486                           ;OverTemperature_B1.c: 94: {
  5487                           ;OverTemperature_B1.c: 95: if(Temp->AD >= 600)
  5488  0085' 0803'              	movf	_Temp,w
  5489  0086' 3E06               	addlw	6
  5490  0087' 0086               	movwf	6
  5491  0088' 3001               	movlw	1	; select bank2/3
  5492  0089' 0087               	movwf	7
  5493  008A' 3F40               	moviw [0]fsr1
  5494  008B' 008D'              	movwf	??_setTemp_Main
  5495  008C' 3F41               	moviw [1]fsr1
  5496  008D' 008E'              	movwf	??_setTemp_Main+1
  5497  008E' 3002               	movlw	2
  5498  008F' 020E'              	subwf	??_setTemp_Main+1,w
  5499  0090' 3058               	movlw	88
  5500  0091' 1903               	skipnz
  5501  0092' 020D'              	subwf	??_setTemp_Main,w
  5502  0093' 1C03               	skipc
  5503  0094' 2800'              	goto	l8941
  5504                           
  5505                           ;OverTemperature_B1.c: 96: {
  5506                           ;OverTemperature_B1.c: 97: Temp->Count++;
  5507  0095' 3001               	movlw	1
  5508  0096' 008D'              	movwf	??_setTemp_Main
  5509  0097' 0803'              	movf	_Temp,w
  5510  0098' 3E03               	addlw	3
  5511  0099' 0086               	movwf	6
  5512  009A' 3001               	movlw	1	; select bank2/3
  5513  009B' 0087               	movwf	7
  5514  009C' 080D'              	movf	??_setTemp_Main,w
  5515  009D' 0781               	addwf	1,f
  5516                           
  5517                           ;OverTemperature_B1.c: 98: if(Temp->Count >= 3)
  5518  009E' 0803'              	movf	_Temp,w
  5519  009F' 3E03               	addlw	3
  5520  00A0' 0086               	movwf	6
  5521  00A1' 3001               	movlw	1	; select bank2/3
  5522  00A2' 0087               	movwf	7
  5523  00A3' 3003               	movlw	3
  5524  00A4' 0201               	subwf	1,w
  5525  00A5' 1C03               	skipc
  5526  00A6' 2800'              	goto	l8943
  5527                           
  5528                           ;OverTemperature_B1.c: 99: {
  5529                           ;OverTemperature_B1.c: 100: Temp->Count=0;
  5530  00A7' 0803'              	movf	_Temp,w
  5531  00A8' 3E03               	addlw	3
  5532  00A9' 0086               	movwf	6
  5533  00AA' 3001               	movlw	1	; select bank2/3
  5534  00AB' 0087               	movwf	7
  5535  00AC' 0181               	clrf	1
  5536                           
  5537                           ;OverTemperature_B1.c: 101: setOverTemp_Exceptions(0);
  5538  00AD' 3000               	movlw	0
  5539  00AE' 3180' 2000' 3180'  	fcall	_setOverTemp_Exceptions
  5540                           
  5541                           ;OverTemperature_B1.c: 102: }
  5542                           ;OverTemperature_B1.c: 103: }
  5543  00B1' 2800'              	goto	l8943
  5544  00B2'                    l8931:	
  5545                           ;OverTemperature_B1.c: 107: }
  5546                           ;OverTemperature_B1.c: 108: }
  5547                           
  5548                           ;OverTemperature_B1.c: 104: else
  5549                           ;OverTemperature_B1.c: 105: {
  5550                           ;OverTemperature_B1.c: 106: Temp->Count=0;
  5551                           
  5552                           
  5553                           ;OverTemperature_B1.c: 109: else
  5554                           ;OverTemperature_B1.c: 110: {
  5555                           ;OverTemperature_B1.c: 111: if(Temp->AD <= 550)
  5556  00B2' 0803'              	movf	_Temp,w
  5557  00B3' 3E06               	addlw	6
  5558  00B4' 0086               	movwf	6
  5559  00B5' 3001               	movlw	1	; select bank2/3
  5560  00B6' 0087               	movwf	7
  5561  00B7' 3F40               	moviw [0]fsr1
  5562  00B8' 0020               	movlb	0	; select bank0
  5563  00B9' 008D'              	movwf	??_setTemp_Main
  5564  00BA' 3F41               	moviw [1]fsr1
  5565  00BB' 008E'              	movwf	??_setTemp_Main+1
  5566  00BC' 3002               	movlw	2
  5567  00BD' 020E'              	subwf	??_setTemp_Main+1,w
  5568  00BE' 3027               	movlw	39
  5569  00BF' 1903               	skipnz
  5570  00C0' 020D'              	subwf	??_setTemp_Main,w
  5571  00C1' 1803               	skipnc
  5572  00C2' 2800'              	goto	l8941
  5573                           
  5574                           ;OverTemperature_B1.c: 112: {
  5575                           ;OverTemperature_B1.c: 113: Temp->Count++;
  5576  00C3' 3001               	movlw	1
  5577  00C4' 008D'              	movwf	??_setTemp_Main
  5578  00C5' 0803'              	movf	_Temp,w
  5579  00C6' 3E03               	addlw	3
  5580  00C7' 0086               	movwf	6
  5581  00C8' 3001               	movlw	1	; select bank2/3
  5582  00C9' 0087               	movwf	7
  5583  00CA' 080D'              	movf	??_setTemp_Main,w
  5584  00CB' 0781               	addwf	1,f
  5585                           
  5586                           ;OverTemperature_B1.c: 114: if(Temp->Count >= 3)
  5587  00CC' 0803'              	movf	_Temp,w
  5588  00CD' 3E03               	addlw	3
  5589  00CE' 0086               	movwf	6
  5590  00CF' 3001               	movlw	1	; select bank2/3
  5591  00D0' 0087               	movwf	7
  5592  00D1' 3003               	movlw	3
  5593  00D2' 0201               	subwf	1,w
  5594  00D3' 1C03               	skipc
  5595  00D4' 2800'              	goto	l8943
  5596                           
  5597                           ;OverTemperature_B1.c: 115: {
  5598                           ;OverTemperature_B1.c: 116: Temp->Count=0;
  5599  00D5' 0803'              	movf	_Temp,w
  5600  00D6' 3E03               	addlw	3
  5601  00D7' 0086               	movwf	6
  5602  00D8' 3001               	movlw	1	; select bank2/3
  5603  00D9' 0087               	movwf	7
  5604  00DA' 0181               	clrf	1
  5605                           
  5606                           ;OverTemperature_B1.c: 117: setOverTemp_Exceptions(1);
  5607  00DB' 3001               	movlw	1
  5608  00DC' 3180' 2000' 3180'  	fcall	_setOverTemp_Exceptions
  5609                           
  5610                           ;OverTemperature_B1.c: 118: }
  5611                           ;OverTemperature_B1.c: 119: }
  5612  00DF' 2800'              	goto	l8943
  5613  00E0'                    l8941:	
  5614                           
  5615                           ;OverTemperature_B1.c: 120: else
  5616                           ;OverTemperature_B1.c: 121: {
  5617                           ;OverTemperature_B1.c: 122: Temp->Count=0;
  5618  00E0' 0803'              	movf	_Temp,w
  5619  00E1' 3E03               	addlw	3
  5620  00E2' 0086               	movwf	6
  5621  00E3' 3001               	movlw	1	; select bank2/3
  5622  00E4' 0087               	movwf	7
  5623  00E5' 0181               	clrf	1
  5624  00E6'                    l8943:	
  5625                           
  5626                           ;OverTemperature_B1.c: 123: }
  5627                           ;OverTemperature_B1.c: 124: }
  5628                           ;OverTemperature_B1.c: 125: if(Temp->ERROR == 0)
  5629  00E6' 0803'              	movf	_Temp,w
  5630  00E7' 0086               	movwf	6
  5631  00E8' 3001               	movlw	1	; select bank2/3
  5632  00E9' 0087               	movwf	7
  5633  00EA' 1881               	btfsc	1,1
  5634  00EB' 2800'              	goto	l8947
  5635                           
  5636                           ;OverTemperature_B1.c: 126: {
  5637                           ;OverTemperature_B1.c: 127: Temp->Safe=1;
  5638  00EC' 0803'              	movf	_Temp,w
  5639  00ED' 0086               	movwf	6
  5640  00EE' 3001               	movlw	1	; select bank2/3
  5641  00EF' 0087               	movwf	7
  5642  00F0' 1601               	bsf	1,4
  5643  00F1'                    l8947:	
  5644                           
  5645                           ;OverTemperature_B1.c: 128: }
  5646                           ;OverTemperature_B1.c: 129: Product->Data[24]=Temp->AD >> 8;
  5647  00F1' 0803'              	movf	_Temp,w
  5648  00F2' 3E06               	addlw	6
  5649  00F3' 0086               	movwf	6
  5650  00F4' 3001               	movlw	1	; select bank2/3
  5651  00F5' 0087               	movwf	7
  5652  00F6' 3F40               	moviw [0]fsr1
  5653  00F7' 0020               	movlb	0	; select bank0
  5654  00F8' 008D'              	movwf	??_setTemp_Main
  5655  00F9' 3F41               	moviw [1]fsr1
  5656  00FA' 008E'              	movwf	??_setTemp_Main+1
  5657  00FB' 080E'              	movf	??_setTemp_Main+1,w
  5658  00FC' 008F'              	movwf	??_setTemp_Main+2
  5659  00FD' 0800'              	movf	_Product,w
  5660  00FE' 3E18               	addlw	24
  5661  00FF' 0086               	movwf	6
  5662  0100' 3001               	movlw	1	; select bank2/3
  5663  0101' 0087               	movwf	7
  5664  0102' 080F'              	movf	??_setTemp_Main+2,w
  5665  0103' 0081               	movwf	1
  5666                           
  5667                           ;OverTemperature_B1.c: 130: Product->Data[25]=Temp->AD;
  5668  0104' 0803'              	movf	_Temp,w
  5669  0105' 3E06               	addlw	6
  5670  0106' 0086               	movwf	6
  5671  0107' 3001               	movlw	1	; select bank2/3
  5672  0108' 0087               	movwf	7
  5673  0109' 0801               	movf	1,w
  5674  010A' 008D'              	movwf	??_setTemp_Main
  5675  010B' 0800'              	movf	_Product,w
  5676  010C' 3E19               	addlw	25
  5677  010D' 0086               	movwf	6
  5678  010E' 3001               	movlw	1	; select bank2/3
  5679  010F' 0087               	movwf	7
  5680  0110' 080D'              	movf	??_setTemp_Main,w
  5681  0111' 0081               	movwf	1
  5682                           
  5683                           ;OverTemperature_B1.c: 131: Temp->ADH[0]=0;
  5684  0112' 0803'              	movf	_Temp,w
  5685  0113' 3E08               	addlw	8
  5686  0114' 0086               	movwf	6
  5687  0115' 3001               	movlw	1	; select bank2/3
  5688  0116' 0087               	movwf	7
  5689  0117' 3000               	movlw	0
  5690  0118' 3FC0               	movwi [0]fsr1
  5691  0119' 3FC1               	movwi [1]fsr1
  5692                           
  5693                           ;OverTemperature_B1.c: 132: Temp->ADH[1]=0;
  5694  011A' 0803'              	movf	_Temp,w
  5695  011B' 3E0A               	addlw	10
  5696  011C' 0086               	movwf	6
  5697  011D' 3001               	movlw	1	; select bank2/3
  5698  011E' 0087               	movwf	7
  5699  011F' 3000               	movlw	0
  5700  0120' 3FC0               	movwi [0]fsr1
  5701  0121' 3FC1               	movwi [1]fsr1
  5702  0122' 0008               	return
  5703  0123'                    __end_of_setTemp_Main:	
  5704                           
  5705                           	psect	text13
  5706  0000'                    __ptext13:	
  5707 ;; *************** function _setOverTemp_Exceptions *****************
  5708 ;; Defined at:
  5709 ;;		line 138 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  command         1    wreg     unsigned char 
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  command         1   12[BANK0 ] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;		None               void
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5723 ;;      Params:         0       0       0       0       0       0       0       0
  5724 ;;      Locals:         0       1       0       0       0       0       0       0
  5725 ;;      Temps:          0       1       0       0       0       0       0       0
  5726 ;;      Totals:         0       2       0       0       0       0       0       0
  5727 ;;Total ram usage:        2 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    8
  5730 ;; This function calls:
  5731 ;;		_DimmerLights_Exceptions
  5732 ;;		_setBuz
  5733 ;;		_setLED
  5734 ;;		_setRF_Enable
  5735 ;;		_setSw_Enable
  5736 ;; This function is called by:
  5737 ;;		_setTemp_Main
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           
  5742                           ;psect for function _setOverTemp_Exceptions
  5743  0000'                    _setOverTemp_Exceptions:	
  5744                           
  5745                           ;incstack = 0
  5746                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  5747                           ;setOverTemp_Exceptions@command stored from wreg
  5748  0000' 0020               	movlb	0	; select bank0
  5749  0001' 008C'              	movwf	setOverTemp_Exceptions@command
  5750                           
  5751                           ;OverTemperature_B1.c: 140: Temp->ERROR=command;
  5752  0002' 0803'              	movf	_Temp,w
  5753  0003' 0086               	movwf	6
  5754  0004' 3001               	movlw	1	; select bank2/3
  5755  0005' 0087               	movwf	7
  5756  0006' 080C'              	movf	setOverTemp_Exceptions@command,w
  5757  0007' 1081               	bcf	1,1
  5758  0008' 1D03               	skipz
  5759  0009' 1481               	bsf	1,1
  5760                           
  5761                           ;OverTemperature_B1.c: 141: Temp->Safe=(~command) & 0x01;
  5762  000A' 090C'              	comf	setOverTemp_Exceptions@command,w
  5763  000B' 3901               	andlw	1
  5764  000C' 008B'              	movwf	??_setOverTemp_Exceptions
  5765  000D' 0803'              	movf	_Temp,w
  5766  000E' 0086               	movwf	6
  5767  000F' 3001               	movlw	1	; select bank2/3
  5768  0010' 0087               	movwf	7
  5769  0011' 0E8B'              	swapf	??_setOverTemp_Exceptions,f
  5770  0012' 0801               	movf	1,w
  5771  0013' 060B'              	xorwf	??_setOverTemp_Exceptions,w
  5772  0014' 39EF               	andlw	-17
  5773  0015' 060B'              	xorwf	??_setOverTemp_Exceptions,w
  5774  0016' 0081               	movwf	1
  5775                           
  5776                           ;OverTemperature_B1.c: 142: if(command)
  5777  0017' 080C'              	movf	setOverTemp_Exceptions@command,w
  5778  0018' 1903               	btfsc	3,2
  5779  0019' 2800'              	goto	l8565
  5780                           
  5781                           ;OverTemperature_B1.c: 143: {
  5782                           ;OverTemperature_B1.c: 144: DimmerLights_Exceptions(1);
  5783  001A' 3001               	movlw	1
  5784  001B' 3180' 2000' 3180'  	fcall	_DimmerLights_Exceptions
  5785                           
  5786                           ;OverTemperature_B1.c: 146: setLED(2,1);
  5787  001E' 0020               	movlb	0	; select bank0
  5788  001F' 0182'              	clrf	setLED@command
  5789  0020' 0A82'              	incf	setLED@command,f
  5790  0021' 3002               	movlw	2
  5791  0022' 3180' 2000' 3180'  	fcall	_setLED
  5792                           
  5793                           ;OverTemperature_B1.c: 148: }
  5794  0025' 2800'              	goto	l1767
  5795  0026'                    l8565:	
  5796                           
  5797                           ;OverTemperature_B1.c: 149: else
  5798                           ;OverTemperature_B1.c: 150: {
  5799                           ;OverTemperature_B1.c: 151: setBuz(2,100);
  5800  0026' 3064               	movlw	100
  5801  0027' 0020               	movlb	0	; select bank0
  5802  0028' 0086'              	movwf	setBuz@time
  5803  0029' 3000               	movlw	0
  5804  002A' 0087'              	movwf	setBuz@time+1
  5805  002B' 3002               	movlw	2
  5806  002C' 3180' 2000' 3180'  	fcall	_setBuz
  5807  002F'                    l1767:	
  5808                           
  5809                           ;OverTemperature_B1.c: 152: }
  5810                           ;OverTemperature_B1.c: 155: setLED(99,command+10);
  5811  002F' 0020               	movlb	0	; select bank0
  5812  0030' 080C'              	movf	setOverTemp_Exceptions@command,w
  5813  0031' 3E0A               	addlw	10
  5814  0032' 008B'              	movwf	??_setOverTemp_Exceptions
  5815  0033' 080B'              	movf	??_setOverTemp_Exceptions,w
  5816  0034' 0082'              	movwf	setLED@command
  5817  0035' 3063               	movlw	99
  5818  0036' 3180' 2000' 3180'  	fcall	_setLED
  5819                           
  5820                           ;OverTemperature_B1.c: 157: setSw_Enable((~command) & 0x01);
  5821  0039' 0020               	movlb	0	; select bank0
  5822  003A' 090C'              	comf	setOverTemp_Exceptions@command,w
  5823  003B' 3901               	andlw	1
  5824  003C' 3180' 2000' 3180'  	fcall	_setSw_Enable
  5825                           
  5826                           ;OverTemperature_B1.c: 159: setRF_Enable(1,(~command) & 0x01);
  5827  003F' 0020               	movlb	0	; select bank0
  5828  0040' 090C'              	comf	setOverTemp_Exceptions@command,w
  5829  0041' 3901               	andlw	1
  5830  0042' 008B'              	movwf	??_setOverTemp_Exceptions
  5831  0043' 080B'              	movf	??_setOverTemp_Exceptions,w
  5832  0044' 0082'              	movwf	setRF_Enable@command
  5833  0045' 3001               	movlw	1
  5834  0046' 3180' 2000'        	fcall	_setRF_Enable
  5835  0048' 0008               	return
  5836  0049'                    __end_of_setOverTemp_Exceptions:	
  5837                           
  5838                           	psect	text14
  5839  0000'                    __ptext14:	
  5840 ;; *************** function _Temp_Initialization *****************
  5841 ;; Defined at:
  5842 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5843 ;; Parameters:    Size  Location     Type
  5844 ;;		None
  5845 ;; Auto vars:     Size  Location     Type
  5846 ;;		None
  5847 ;; Return value:  Size  Location     Type
  5848 ;;		None               void
  5849 ;; Registers used:
  5850 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5851 ;; Tracked objects:
  5852 ;;		On entry : 0/0
  5853 ;;		On exit  : 0/0
  5854 ;;		Unchanged: 0/0
  5855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5856 ;;      Params:         0       0       0       0       0       0       0       0
  5857 ;;      Locals:         0       0       0       0       0       0       0       0
  5858 ;;      Temps:          0       0       0       0       0       0       0       0
  5859 ;;      Totals:         0       0       0       0       0       0       0       0
  5860 ;;Total ram usage:        0 bytes
  5861 ;; Hardware stack levels used:    1
  5862 ;; Hardware stack levels required when called:    5
  5863 ;; This function calls:
  5864 ;;		_setTemp_Initialization
  5865 ;; This function is called by:
  5866 ;;		_main
  5867 ;; This function uses a non-reentrant model
  5868 ;;
  5869                           
  5870                           
  5871                           ;psect for function _Temp_Initialization
  5872  0000'                    _Temp_Initialization:	
  5873                           
  5874                           ;OverTemperature_B1.c: 18: setTemp_Initialization();
  5875                           
  5876                           ;incstack = 0
  5877                           ; Regs used in _Temp_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5878  0000' 3180' 2000'        	fcall	_setTemp_Initialization
  5879  0002' 0008               	return
  5880  0003'                    __end_of_Temp_Initialization:	
  5881                           
  5882                           	psect	text15
  5883  0000'                    __ptext15:	
  5884 ;; *************** function _setTemp_Initialization *****************
  5885 ;; Defined at:
  5886 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;		None
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;		None               void
  5893 ;; Registers used:
  5894 ;;		wreg, fsr1l, fsr1h
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5900 ;;      Params:         0       0       0       0       0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0       0
  5902 ;;      Temps:          0       1       0       0       0       0       0       0
  5903 ;;      Totals:         0       1       0       0       0       0       0       0
  5904 ;;Total ram usage:        1 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    4
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_Temp_Initialization
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           
  5915                           ;psect for function _setTemp_Initialization
  5916  0000'                    _setTemp_Initialization:	
  5917                           
  5918                           ;OverTemperature_B1.c: 53: Temp=&Temp1;
  5919                           
  5920                           ;incstack = 0
  5921                           ; Regs used in _setTemp_Initialization: [wregfsr1]
  5922  0000' 3000'              	movlw	_Temp1& (0+255)
  5923  0001' 0020               	movlb	0	; select bank0
  5924  0002' 0080'              	movwf	??_setTemp_Initialization
  5925  0003' 0800'              	movf	??_setTemp_Initialization,w
  5926  0004' 0083'              	movwf	_Temp
  5927                           
  5928                           ;OverTemperature_B1.c: 54: Temp->Safe=1;
  5929  0005' 0803'              	movf	_Temp,w
  5930  0006' 0086               	movwf	6
  5931  0007' 3001               	movlw	1	; select bank2/3
  5932  0008' 0087               	movwf	7
  5933  0009' 1601               	bsf	1,4
  5934  000A' 0008               	return
  5935  000B'                    __end_of_setTemp_Initialization:	
  5936                           
  5937                           	psect	text16
  5938  0000'                    __ptext16:	
  5939 ;; *************** function _Switch_Main *****************
  5940 ;; Defined at:
  5941 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5942 ;; Parameters:    Size  Location     Type
  5943 ;;		None
  5944 ;; Auto vars:     Size  Location     Type
  5945 ;;		None
  5946 ;; Return value:  Size  Location     Type
  5947 ;;		None               void
  5948 ;; Registers used:
  5949 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5950 ;; Tracked objects:
  5951 ;;		On entry : 0/0
  5952 ;;		On exit  : 0/0
  5953 ;;		Unchanged: 0/0
  5954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5955 ;;      Params:         0       0       0       0       0       0       0       0
  5956 ;;      Locals:         0       0       0       0       0       0       0       0
  5957 ;;      Temps:          0       0       0       0       0       0       0       0
  5958 ;;      Totals:         0       0       0       0       0       0       0       0
  5959 ;;Total ram usage:        0 bytes
  5960 ;; Hardware stack levels used:    1
  5961 ;; Hardware stack levels required when called:   10
  5962 ;; This function calls:
  5963 ;;		_setSw_Main
  5964 ;; This function is called by:
  5965 ;;		_main
  5966 ;; This function uses a non-reentrant model
  5967 ;;
  5968                           
  5969                           
  5970                           ;psect for function _Switch_Main
  5971  0000'                    _Switch_Main:	
  5972                           
  5973                           ;Switch_B1.c: 63: setSw_Main(1);
  5974                           
  5975                           ;incstack = 0
  5976                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5977  0000' 3001               	movlw	1
  5978  0001' 3180' 2000'        	fcall	_setSw_Main
  5979  0003' 0008               	return
  5980  0004'                    __end_of_Switch_Main:	
  5981                           
  5982                           	psect	text17
  5983  0000'                    __ptext17:	
  5984 ;; *************** function _setSw_Main *****************
  5985 ;; Defined at:
  5986 ;;		line 111 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  sw              1    wreg     unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  sw              1   72[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;		None               void
  5993 ;; Registers used:
  5994 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6000 ;;      Params:         0       0       0       0       0       0       0       0
  6001 ;;      Locals:         0       2       0       0       0       0       0       0
  6002 ;;      Temps:          0       2       0       0       0       0       0       0
  6003 ;;      Totals:         0       4       0       0       0       0       0       0
  6004 ;;Total ram usage:        4 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    9
  6007 ;; This function calls:
  6008 ;;		_SwPointSelect
  6009 ;;		_Sw_DimmerAdjFunc
  6010 ;;		_Sw_DimmerOffFunc
  6011 ;;		_Sw_DimmerOnFunc
  6012 ;;		_setBuz
  6013 ;;		_setRF_Learn
  6014 ;; This function is called by:
  6015 ;;		_Switch_Main
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           
  6020                           ;psect for function _setSw_Main
  6021  0000'                    _setSw_Main:	
  6022                           
  6023                           ;incstack = 0
  6024                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6025                           ;setSw_Main@sw stored from wreg
  6026  0000' 0020               	movlb	0	; select bank0
  6027  0001' 00C8'              	movwf	setSw_Main@sw
  6028                           
  6029                           ;Switch_B1.c: 112: if (Sw->Enable) {
  6030  0002' 0802'              	movf	_Sw,w
  6031  0003' 0086               	movwf	6
  6032  0004' 3001               	movlw	1	; select bank2/3
  6033  0005' 0087               	movwf	7
  6034  0006' 1C01               	btfss	1,0
  6035  0007' 0008               	return
  6036                           
  6037                           ;Switch_B1.c: 113: SwPointSelect(sw);
  6038  0008' 0848'              	movf	setSw_Main@sw,w
  6039  0009' 3180' 2000' 3180'  	fcall	_SwPointSelect
  6040                           
  6041                           ;Switch_B1.c: 133: Sw->Touch = (RA6 || RA4 || RA0 || RB1) ? 1 : 0;
  6042  000C' 0020               	movlb	0	; select bank0
  6043  000D' 01C7'              	clrf	_setSw_Main$4544
  6044  000E' 0AC7'              	incf	_setSw_Main$4544,f
  6045  000F' 1F0C               	btfss	12,6	;volatile
  6046  0010' 1A0C               	btfsc	12,4	;volatile
  6047  0011' 2800'              	goto	l9089
  6048  0012' 1C0C               	btfss	12,0	;volatile
  6049  0013' 188D               	btfsc	13,1	;volatile
  6050  0014' 2800'              	goto	l9089
  6051  0015' 01C7'              	clrf	_setSw_Main$4544
  6052  0016'                    l9089:	
  6053  0016' 0802'              	movf	_Sw,w
  6054  0017' 0086               	movwf	6
  6055  0018' 3001               	movlw	1	; select bank2/3
  6056  0019' 0087               	movwf	7
  6057  001A' 0847'              	movf	_setSw_Main$4544,w
  6058  001B' 1081               	bcf	1,1
  6059  001C' 1D03               	skipz
  6060  001D' 1481               	bsf	1,1
  6061                           
  6062                           ;Switch_B1.c: 137: if (Sw->Touch) {
  6063  001E' 0802'              	movf	_Sw,w
  6064  001F' 0086               	movwf	6
  6065  0020' 3001               	movlw	1	; select bank2/3
  6066  0021' 0087               	movwf	7
  6067  0022' 1C81               	btfss	1,1
  6068  0023' 2800'              	goto	l9139
  6069                           
  6070                           ;Switch_B1.c: 138: if (!Sw->Debounce) {
  6071  0024' 0802'              	movf	_Sw,w
  6072  0025' 0086               	movwf	6
  6073  0026' 3001               	movlw	1	; select bank2/3
  6074  0027' 0087               	movwf	7
  6075  0028' 1901               	btfsc	1,2
  6076  0029' 2800'              	goto	l9105
  6077                           
  6078                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  6079  002A' 3001               	movlw	1
  6080  002B' 00C5'              	movwf	??_setSw_Main
  6081  002C' 0802'              	movf	_Sw,w
  6082  002D' 3E02               	addlw	2
  6083  002E' 0086               	movwf	6
  6084  002F' 3001               	movlw	1	; select bank2/3
  6085  0030' 0087               	movwf	7
  6086  0031' 0845'              	movf	??_setSw_Main,w
  6087  0032' 0781               	addwf	1,f
  6088                           
  6089                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= 5) {
  6090  0033' 0802'              	movf	_Sw,w
  6091  0034' 3E02               	addlw	2
  6092  0035' 0086               	movwf	6
  6093  0036' 3001               	movlw	1	; select bank2/3
  6094  0037' 0087               	movwf	7
  6095  0038' 3005               	movlw	5
  6096  0039' 0201               	subwf	1,w
  6097  003A' 1C03               	skipc
  6098  003B' 0008               	return
  6099                           
  6100                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  6101  003C' 0802'              	movf	_Sw,w
  6102  003D' 3E02               	addlw	2
  6103  003E' 0086               	movwf	6
  6104  003F' 3001               	movlw	1	; select bank2/3
  6105  0040' 0087               	movwf	7
  6106  0041' 0181               	clrf	1
  6107                           
  6108                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  6109  0042' 0802'              	movf	_Sw,w
  6110  0043' 0086               	movwf	6
  6111  0044' 3001               	movlw	1	; select bank2/3
  6112  0045' 0087               	movwf	7
  6113  0046' 1501               	bsf	1,2
  6114                           
  6115                           ;Switch_B1.c: 145: Sw_DimmerOnFunc(sw);
  6116  0047' 0848'              	movf	setSw_Main@sw,w
  6117  0048' 3180' 2000'        	fcall	_Sw_DimmerOnFunc
  6118                           
  6119                           ;Switch_B1.c: 148: }
  6120                           ;Switch_B1.c: 149: } else {
  6121  004A' 0008               	return
  6122  004B'                    l9105:	
  6123                           
  6124                           ;Switch_B1.c: 150: if (!Sw->Hold1) {
  6125  004B' 0802'              	movf	_Sw,w
  6126  004C' 0086               	movwf	6
  6127  004D' 3001               	movlw	1	; select bank2/3
  6128  004E' 0087               	movwf	7
  6129  004F' 1981               	btfsc	1,3
  6130  0050' 2800'              	goto	l9115
  6131                           
  6132                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  6133  0051' 0802'              	movf	_Sw,w
  6134  0052' 3E03               	addlw	3
  6135  0053' 0086               	movwf	6
  6136  0054' 3001               	movlw	1	; select bank2/3
  6137  0055' 0087               	movwf	7
  6138  0056' 3001               	movlw	1
  6139  0057' 0781               	addwf	1,f
  6140  0058' 3141               	addfsr 1,1
  6141  0059' 1803               	skipnc
  6142  005A' 0A81               	incf	1,f
  6143                           
  6144                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= 150) {
  6145  005B' 0802'              	movf	_Sw,w
  6146  005C' 3E03               	addlw	3
  6147  005D' 0086               	movwf	6
  6148  005E' 3001               	movlw	1	; select bank2/3
  6149  005F' 0087               	movwf	7
  6150  0060' 3F40               	moviw [0]fsr1
  6151  0061' 0020               	movlb	0	; select bank0
  6152  0062' 00C5'              	movwf	??_setSw_Main
  6153  0063' 3F41               	moviw [1]fsr1
  6154  0064' 00C6'              	movwf	??_setSw_Main+1
  6155  0065' 3000               	movlw	0
  6156  0066' 0246'              	subwf	??_setSw_Main+1,w
  6157  0067' 3096               	movlw	150
  6158  0068' 1903               	skipnz
  6159  0069' 0245'              	subwf	??_setSw_Main,w
  6160  006A' 1C03               	skipc
  6161  006B' 0008               	return
  6162                           
  6163                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  6164  006C' 0802'              	movf	_Sw,w
  6165  006D' 3E03               	addlw	3
  6166  006E' 0086               	movwf	6
  6167  006F' 3001               	movlw	1	; select bank2/3
  6168  0070' 0087               	movwf	7
  6169  0071' 3000               	movlw	0
  6170  0072' 3FC0               	movwi [0]fsr1
  6171  0073' 3FC1               	movwi [1]fsr1
  6172                           
  6173                           ;Switch_B1.c: 154: Sw->Hold1 = 1;
  6174  0074' 0802'              	movf	_Sw,w
  6175  0075' 0086               	movwf	6
  6176  0076' 3001               	movlw	1	; select bank2/3
  6177  0077' 0087               	movwf	7
  6178  0078' 1581               	bsf	1,3
  6179                           
  6180                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  6181  0079' 0848'              	movf	setSw_Main@sw,w
  6182  007A' 3180' 2000'        	fcall	_Sw_DimmerAdjFunc
  6183                           
  6184                           ;Switch_B1.c: 160: }
  6185                           ;Switch_B1.c: 161: } else {
  6186  007C' 0008               	return
  6187  007D'                    l9115:	
  6188                           
  6189                           ;Switch_B1.c: 162: if (!Sw->Hold2) {
  6190  007D' 0802'              	movf	_Sw,w
  6191  007E' 0086               	movwf	6
  6192  007F' 3001               	movlw	1	; select bank2/3
  6193  0080' 0087               	movwf	7
  6194  0081' 1A01               	btfsc	1,4
  6195  0082' 2800'              	goto	l9129
  6196                           
  6197                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  6198  0083' 0802'              	movf	_Sw,w
  6199  0084' 3E05               	addlw	5
  6200  0085' 0086               	movwf	6
  6201  0086' 3001               	movlw	1	; select bank2/3
  6202  0087' 0087               	movwf	7
  6203  0088' 3001               	movlw	1
  6204  0089' 0781               	addwf	1,f
  6205  008A' 3141               	addfsr 1,1
  6206  008B' 1803               	skipnc
  6207  008C' 0A81               	incf	1,f
  6208                           
  6209                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  6210  008D' 0802'              	movf	_Sw,w
  6211  008E' 3E05               	addlw	5
  6212  008F' 0086               	movwf	6
  6213  0090' 3001               	movlw	1	; select bank2/3
  6214  0091' 0087               	movwf	7
  6215  0092' 3F40               	moviw [0]fsr1
  6216  0093' 0020               	movlb	0	; select bank0
  6217  0094' 00C5'              	movwf	??_setSw_Main
  6218  0095' 3F41               	moviw [1]fsr1
  6219  0096' 00C6'              	movwf	??_setSw_Main+1
  6220  0097' 3000               	movlw	0
  6221  0098' 0246'              	subwf	??_setSw_Main+1,w
  6222  0099' 3096               	movlw	150
  6223  009A' 1903               	skipnz
  6224  009B' 0245'              	subwf	??_setSw_Main,w
  6225  009C' 1C03               	skipc
  6226  009D' 0008               	return
  6227                           
  6228                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  6229  009E' 0802'              	movf	_Sw,w
  6230  009F' 3E05               	addlw	5
  6231  00A0' 0086               	movwf	6
  6232  00A1' 3001               	movlw	1	; select bank2/3
  6233  00A2' 0087               	movwf	7
  6234  00A3' 3000               	movlw	0
  6235  00A4' 3FC0               	movwi [0]fsr1
  6236  00A5' 3FC1               	movwi [1]fsr1
  6237                           
  6238                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  6239  00A6' 0802'              	movf	_Sw,w
  6240  00A7' 0086               	movwf	6
  6241  00A8' 3001               	movlw	1	; select bank2/3
  6242  00A9' 0087               	movwf	7
  6243  00AA' 1601               	bsf	1,4
  6244                           
  6245                           ;Switch_B1.c: 170: setRF_Learn(1, 1);
  6246  00AB' 0182'              	clrf	setRF_Learn@command
  6247  00AC' 0A82'              	incf	setRF_Learn@command,f
  6248  00AD' 3001               	movlw	1
  6249  00AE' 3180' 2000' 3180'  	fcall	_setRF_Learn
  6250                           
  6251                           ;Switch_B1.c: 172: if (myMain->First) {
  6252  00B1' 0021               	movlb	1	; select bank1
  6253  00B2' 0800'              	movf	_myMain^(0+128),w
  6254  00B3' 3E03               	addlw	3
  6255  00B4' 0086               	movwf	6
  6256  00B5' 3001               	movlw	1	; select bank2/3
  6257  00B6' 0087               	movwf	7
  6258  00B7' 1C81               	btfss	1,1
  6259  00B8' 0008               	return
  6260                           
  6261                           ;Switch_B1.c: 173: setBuz(2, 100);
  6262  00B9' 3064               	movlw	100
  6263  00BA' 0020               	movlb	0	; select bank0
  6264  00BB' 0086'              	movwf	setBuz@time
  6265  00BC' 3000               	movlw	0
  6266  00BD' 0087'              	movwf	setBuz@time+1
  6267  00BE' 3002               	movlw	2
  6268  00BF' 3180' 2000'        	fcall	_setBuz
  6269                           
  6270                           ;Switch_B1.c: 174: }
  6271                           ;Switch_B1.c: 176: }
  6272                           ;Switch_B1.c: 177: } else {
  6273  00C1' 0008               	return
  6274  00C2'                    l9129:	
  6275                           
  6276                           ;Switch_B1.c: 178: if (!Sw->Hold3) {
  6277  00C2' 0802'              	movf	_Sw,w
  6278  00C3' 0086               	movwf	6
  6279  00C4' 3001               	movlw	1	; select bank2/3
  6280  00C5' 0087               	movwf	7
  6281  00C6' 1A81               	btfsc	1,5
  6282  00C7' 0008               	return
  6283                           
  6284                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  6285  00C8' 0802'              	movf	_Sw,w
  6286  00C9' 3E07               	addlw	7
  6287  00CA' 0086               	movwf	6
  6288  00CB' 3001               	movlw	1	; select bank2/3
  6289  00CC' 0087               	movwf	7
  6290  00CD' 3001               	movlw	1
  6291  00CE' 0781               	addwf	1,f
  6292  00CF' 3141               	addfsr 1,1
  6293  00D0' 1803               	skipnc
  6294  00D1' 0A81               	incf	1,f
  6295                           
  6296                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= 300)
  6297  00D2' 0802'              	movf	_Sw,w
  6298  00D3' 3E07               	addlw	7
  6299  00D4' 0086               	movwf	6
  6300  00D5' 3001               	movlw	1	; select bank2/3
  6301  00D6' 0087               	movwf	7
  6302  00D7' 3F40               	moviw [0]fsr1
  6303  00D8' 0020               	movlb	0	; select bank0
  6304  00D9' 00C5'              	movwf	??_setSw_Main
  6305  00DA' 3F41               	moviw [1]fsr1
  6306  00DB' 00C6'              	movwf	??_setSw_Main+1
  6307  00DC' 3001               	movlw	1
  6308  00DD' 0246'              	subwf	??_setSw_Main+1,w
  6309  00DE' 302C               	movlw	44
  6310  00DF' 1903               	skipnz
  6311  00E0' 0245'              	subwf	??_setSw_Main,w
  6312  00E1' 1C03               	skipc
  6313  00E2' 0008               	return
  6314                           
  6315                           ;Switch_B1.c: 181: {
  6316                           ;Switch_B1.c: 182: Sw->Hold3Time = 0;
  6317  00E3' 0802'              	movf	_Sw,w
  6318  00E4' 3E07               	addlw	7
  6319  00E5' 0086               	movwf	6
  6320  00E6' 3001               	movlw	1	; select bank2/3
  6321  00E7' 0087               	movwf	7
  6322  00E8' 3000               	movlw	0
  6323  00E9' 3FC0               	movwi [0]fsr1
  6324  00EA' 3FC1               	movwi [1]fsr1
  6325                           
  6326                           ;Switch_B1.c: 183: Sw->Hold3 = 1;
  6327  00EB' 0802'              	movf	_Sw,w
  6328  00EC' 0086               	movwf	6
  6329  00ED' 3001               	movlw	1	; select bank2/3
  6330  00EE' 0087               	movwf	7
  6331  00EF' 1681               	bsf	1,5
  6332                           
  6333                           ;Switch_B1.c: 186: setRF_Learn(1, 0);
  6334  00F0' 0182'              	clrf	setRF_Learn@command
  6335  00F1' 3001               	movlw	1
  6336  00F2' 3180' 2000'        	fcall	_setRF_Learn
  6337                           
  6338                           ;Switch_B1.c: 189: }
  6339                           ;Switch_B1.c: 190: }
  6340                           ;Switch_B1.c: 191: }
  6341                           ;Switch_B1.c: 192: }
  6342                           ;Switch_B1.c: 193: }
  6343                           ;Switch_B1.c: 194: } else {
  6344  00F4' 0008               	return
  6345  00F5'                    l9139:	
  6346                           
  6347                           ;Switch_B1.c: 195: if (Sw->Debounce) {
  6348  00F5' 0802'              	movf	_Sw,w
  6349  00F6' 0086               	movwf	6
  6350  00F7' 3001               	movlw	1	; select bank2/3
  6351  00F8' 0087               	movwf	7
  6352  00F9' 1D01               	btfss	1,2
  6353  00FA' 0008               	return
  6354                           
  6355                           ;Switch_B1.c: 196: Sw->DebounceTime++;
  6356  00FB' 3001               	movlw	1
  6357  00FC' 0020               	movlb	0	; select bank0
  6358  00FD' 00C5'              	movwf	??_setSw_Main
  6359  00FE' 0802'              	movf	_Sw,w
  6360  00FF' 3E02               	addlw	2
  6361  0100' 0086               	movwf	6
  6362  0101' 3001               	movlw	1	; select bank2/3
  6363  0102' 0087               	movwf	7
  6364  0103' 0845'              	movf	??_setSw_Main,w
  6365  0104' 0781               	addwf	1,f
  6366                           
  6367                           ;Switch_B1.c: 197: if (Sw->DebounceTime >= 5) {
  6368  0105' 0802'              	movf	_Sw,w
  6369  0106' 3E02               	addlw	2
  6370  0107' 0086               	movwf	6
  6371  0108' 3001               	movlw	1	; select bank2/3
  6372  0109' 0087               	movwf	7
  6373  010A' 3005               	movlw	5
  6374  010B' 0201               	subwf	1,w
  6375  010C' 1C03               	skipc
  6376  010D' 0008               	return
  6377                           
  6378                           ;Switch_B1.c: 198: Sw->DebounceTime = 0;
  6379  010E' 0802'              	movf	_Sw,w
  6380  010F' 3E02               	addlw	2
  6381  0110' 0086               	movwf	6
  6382  0111' 3001               	movlw	1	; select bank2/3
  6383  0112' 0087               	movwf	7
  6384  0113' 0181               	clrf	1
  6385                           
  6386                           ;Switch_B1.c: 199: Sw->Debounce = 0;
  6387  0114' 0802'              	movf	_Sw,w
  6388  0115' 0086               	movwf	6
  6389  0116' 3001               	movlw	1	; select bank2/3
  6390  0117' 0087               	movwf	7
  6391  0118' 1101               	bcf	1,2
  6392                           
  6393                           ;Switch_B1.c: 200: Sw->Hold1Time = 0;
  6394  0119' 0802'              	movf	_Sw,w
  6395  011A' 3E03               	addlw	3
  6396  011B' 0086               	movwf	6
  6397  011C' 3001               	movlw	1	; select bank2/3
  6398  011D' 0087               	movwf	7
  6399  011E' 3000               	movlw	0
  6400  011F' 3FC0               	movwi [0]fsr1
  6401  0120' 3FC1               	movwi [1]fsr1
  6402                           
  6403                           ;Switch_B1.c: 201: Sw->Hold1 = 0;
  6404  0121' 0802'              	movf	_Sw,w
  6405  0122' 0086               	movwf	6
  6406  0123' 3001               	movlw	1	; select bank2/3
  6407  0124' 0087               	movwf	7
  6408  0125' 1181               	bcf	1,3
  6409                           
  6410                           ;Switch_B1.c: 202: Sw->Hold2Time = 0;
  6411  0126' 0802'              	movf	_Sw,w
  6412  0127' 3E05               	addlw	5
  6413  0128' 0086               	movwf	6
  6414  0129' 3001               	movlw	1	; select bank2/3
  6415  012A' 0087               	movwf	7
  6416  012B' 3000               	movlw	0
  6417  012C' 3FC0               	movwi [0]fsr1
  6418  012D' 3FC1               	movwi [1]fsr1
  6419                           
  6420                           ;Switch_B1.c: 203: Sw->Hold2 = 0;
  6421  012E' 0802'              	movf	_Sw,w
  6422  012F' 0086               	movwf	6
  6423  0130' 3001               	movlw	1	; select bank2/3
  6424  0131' 0087               	movwf	7
  6425  0132' 1201               	bcf	1,4
  6426                           
  6427                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  6428  0133' 0802'              	movf	_Sw,w
  6429  0134' 3E07               	addlw	7
  6430  0135' 0086               	movwf	6
  6431  0136' 3001               	movlw	1	; select bank2/3
  6432  0137' 0087               	movwf	7
  6433  0138' 3000               	movlw	0
  6434  0139' 3FC0               	movwi [0]fsr1
  6435  013A' 3FC1               	movwi [1]fsr1
  6436                           
  6437                           ;Switch_B1.c: 205: Sw->Hold3 = 0;
  6438  013B' 0802'              	movf	_Sw,w
  6439  013C' 0086               	movwf	6
  6440  013D' 3001               	movlw	1	; select bank2/3
  6441  013E' 0087               	movwf	7
  6442  013F' 1281               	bcf	1,5
  6443                           
  6444                           ;Switch_B1.c: 208: Sw_DimmerOffFunc(sw);
  6445  0140' 0848'              	movf	setSw_Main@sw,w
  6446  0141' 3180' 2000' 3180'  	fcall	_Sw_DimmerOffFunc
  6447                           
  6448                           ;Switch_B1.c: 213: setRF_Learn(1, 0);
  6449  0144' 0020               	movlb	0	; select bank0
  6450  0145' 0182'              	clrf	setRF_Learn@command
  6451  0146' 3001               	movlw	1
  6452  0147' 3180' 2000'        	fcall	_setRF_Learn
  6453  0149' 0008               	return
  6454  014A'                    __end_of_setSw_Main:	
  6455                           
  6456                           	psect	text18
  6457  0000'                    __ptext18:	
  6458 ;; *************** function _setRF_Learn *****************
  6459 ;; Defined at:
  6460 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  rf              1    wreg     unsigned char 
  6463 ;;  command         1    2[BANK0 ] unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  rf              1    3[BANK0 ] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;		None               void
  6468 ;; Registers used:
  6469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6475 ;;      Params:         0       1       0       0       0       0       0       0
  6476 ;;      Locals:         0       1       0       0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0
  6478 ;;      Totals:         0       2       0       0       0       0       0       0
  6479 ;;Total ram usage:        2 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    5
  6482 ;; This function calls:
  6483 ;;		_RfPointSelect
  6484 ;; This function is called by:
  6485 ;;		_setSw_Main
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _setRF_Learn
  6491  0000'                    _setRF_Learn:	
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _setRF_Learn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6495                           ;setRF_Learn@rf stored from wreg
  6496  0000' 0020               	movlb	0	; select bank0
  6497  0001' 0083'              	movwf	setRF_Learn@rf
  6498                           
  6499                           ;RF_Control_B1.c: 31: RfPointSelect(rf);
  6500  0002' 0803'              	movf	setRF_Learn@rf,w
  6501  0003' 3180' 2000'        	fcall	_RfPointSelect
  6502                           
  6503                           ;RF_Control_B1.c: 32: RF->Learn = command;
  6504  0005' 0021               	movlb	1	; select bank1
  6505  0006' 0800'              	movf	_RF^(0+128),w
  6506  0007' 0086               	movwf	6
  6507  0008' 0187               	clrf	7
  6508  0009' 0020               	movlb	0	; select bank0
  6509  000A' 0802'              	movf	setRF_Learn@command,w
  6510  000B' 1301               	bcf	1,6
  6511  000C' 1D03               	skipz
  6512  000D' 1701               	bsf	1,6
  6513  000E' 0008               	return
  6514  000F'                    __end_of_setRF_Learn:	
  6515                           
  6516                           	psect	text19
  6517  0000'                    __ptext19:	
  6518 ;; *************** function _Sw_DimmerOnFunc *****************
  6519 ;; Defined at:
  6520 ;;		line 222 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;  sw              1    wreg     unsigned char 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  sw              1   67[BANK0 ] unsigned char 
  6525 ;;  Idle            1   66[BANK0 ] unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6535 ;;      Params:         0       0       0       0       0       0       0       0
  6536 ;;      Locals:         0       2       0       0       0       0       0       0
  6537 ;;      Temps:          0       0       0       0       0       0       0       0
  6538 ;;      Totals:         0       2       0       0       0       0       0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:    8
  6542 ;; This function calls:
  6543 ;;		_setBuz
  6544 ;;		_setDimmerLights_Switch
  6545 ;;		_setDimmerLights_Trigger
  6546 ;;		_setRFSW_Status
  6547 ;;		_setRF_DimmerLights
  6548 ;;		_setTxData
  6549 ;; This function is called by:
  6550 ;;		_setSw_Main
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function _Sw_DimmerOnFunc
  6556  0000'                    _Sw_DimmerOnFunc:	
  6557                           
  6558                           ;incstack = 0
  6559                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6560                           ;Sw_DimmerOnFunc@sw stored from wreg
  6561  0000' 0020               	movlb	0	; select bank0
  6562  0001' 00C3'              	movwf	Sw_DimmerOnFunc@sw
  6563                           
  6564                           ;Switch_B1.c: 223: char Idle = 1;
  6565  0002' 01C2'              	clrf	Sw_DimmerOnFunc@Idle
  6566  0003' 0AC2'              	incf	Sw_DimmerOnFunc@Idle,f
  6567                           
  6568                           ;Switch_B1.c: 242: if (Idle) {
  6569  0004' 0842'              	movf	Sw_DimmerOnFunc@Idle,w
  6570  0005' 1903               	btfsc	3,2
  6571  0006' 0008               	return
  6572                           
  6573                           ;Switch_B1.c: 243: Sw->Flag = 1;
  6574  0007' 0802'              	movf	_Sw,w
  6575  0008' 0086               	movwf	6
  6576  0009' 3001               	movlw	1	; select bank2/3
  6577  000A' 0087               	movwf	7
  6578  000B' 1781               	bsf	1,7
  6579                           
  6580                           ;Switch_B1.c: 244: setBuz(1, 100);
  6581  000C' 3064               	movlw	100
  6582  000D' 0086'              	movwf	setBuz@time
  6583  000E' 3000               	movlw	0
  6584  000F' 0087'              	movwf	setBuz@time+1
  6585  0010' 3001               	movlw	1
  6586  0011' 3180' 2000' 3180'  	fcall	_setBuz
  6587                           
  6588                           ;Switch_B1.c: 245: if (!Sw->Status) {
  6589  0014' 0802'              	movf	_Sw,w
  6590  0015' 0086               	movwf	6
  6591  0016' 3001               	movlw	1	; select bank2/3
  6592  0017' 0087               	movwf	7
  6593  0018' 1B01               	btfsc	1,6
  6594  0019' 2800'              	goto	l8655
  6595                           
  6596                           ;Switch_B1.c: 246: Sw->Status = 1;
  6597  001A' 0802'              	movf	_Sw,w
  6598  001B' 0086               	movwf	6
  6599  001C' 3001               	movlw	1	; select bank2/3
  6600  001D' 0087               	movwf	7
  6601  001E' 1701               	bsf	1,6
  6602                           
  6603                           ;Switch_B1.c: 247: setRFSW_Status(sw, 1);
  6604  001F' 0020               	movlb	0	; select bank0
  6605  0020' 0182'              	clrf	setRFSW_Status@command
  6606  0021' 0A82'              	incf	setRFSW_Status@command,f
  6607  0022' 0843'              	movf	Sw_DimmerOnFunc@sw,w
  6608  0023' 3180' 2000' 3180'  	fcall	_setRFSW_Status
  6609                           
  6610                           ;Switch_B1.c: 249: setDimmerLights_Trigger(sw, 1);
  6611  0026' 0020               	movlb	0	; select bank0
  6612  0027' 0182'              	clrf	setDimmerLights_Trigger@command
  6613  0028' 0A82'              	incf	setDimmerLights_Trigger@command,f
  6614  0029' 0843'              	movf	Sw_DimmerOnFunc@sw,w
  6615  002A' 3180' 2000' 3180'  	fcall	_setDimmerLights_Trigger
  6616                           
  6617                           ;Switch_B1.c: 250: setDimmerLights_Switch(sw, 1);
  6618  002D' 0020               	movlb	0	; select bank0
  6619  002E' 0182'              	clrf	setDimmerLights_Switch@command
  6620  002F' 0A82'              	incf	setDimmerLights_Switch@command,f
  6621  0030' 0843'              	movf	Sw_DimmerOnFunc@sw,w
  6622  0031' 3180' 2000' 3180'  	fcall	_setDimmerLights_Switch
  6623                           
  6624                           ;Switch_B1.c: 252: setRF_DimmerLights(sw, Sw->Status);
  6625  0034' 0802'              	movf	_Sw,w
  6626  0035' 0086               	movwf	6
  6627  0036' 3001               	movlw	1	; select bank2/3
  6628  0037' 0087               	movwf	7
  6629  0038' 3000               	movlw	0
  6630  0039' 1B01               	btfsc	1,6
  6631  003A' 3001               	movlw	1
  6632  003B' 0020               	movlb	0	; select bank0
  6633  003C' 00BD'              	movwf	setRF_DimmerLights@on
  6634  003D' 0843'              	movf	Sw_DimmerOnFunc@sw,w
  6635  003E' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
  6636                           
  6637                           ;Switch_B1.c: 253: setTxData(1);
  6638  0041' 3001               	movlw	1
  6639  0042' 3180' 2000'        	fcall	_setTxData
  6640                           
  6641                           ;Switch_B1.c: 255: } else {
  6642  0044' 0020               	movlb	0	; select bank0
  6643  0045' 0008               	return
  6644  0046'                    l8655:	
  6645                           
  6646                           ;Switch_B1.c: 256: Sw->Status = 0;
  6647  0046' 0802'              	movf	_Sw,w
  6648  0047' 0086               	movwf	6
  6649  0048' 3001               	movlw	1	; select bank2/3
  6650  0049' 0087               	movwf	7
  6651  004A' 1301               	bcf	1,6
  6652                           
  6653                           ;Switch_B1.c: 257: setRFSW_Status(sw, Sw->Status);
  6654  004B' 0802'              	movf	_Sw,w
  6655  004C' 0086               	movwf	6
  6656  004D' 3001               	movlw	1	; select bank2/3
  6657  004E' 0087               	movwf	7
  6658  004F' 3000               	movlw	0
  6659  0050' 1B01               	btfsc	1,6
  6660  0051' 3001               	movlw	1
  6661  0052' 0020               	movlb	0	; select bank0
  6662  0053' 0082'              	movwf	setRFSW_Status@command
  6663  0054' 0843'              	movf	Sw_DimmerOnFunc@sw,w
  6664  0055' 3180' 2000'        	fcall	_setRFSW_Status
  6665  0057' 0020               	movlb	0	; select bank0
  6666  0058' 0008               	return
  6667  0059'                    __end_of_Sw_DimmerOnFunc:	
  6668                           
  6669                           	psect	text20
  6670  0000'                    __ptext20:	
  6671 ;; *************** function _Sw_DimmerOffFunc *****************
  6672 ;; Defined at:
  6673 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  sw              1    wreg     unsigned char 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  sw              1   68[BANK0 ] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;		None               void
  6680 ;; Registers used:
  6681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6687 ;;      Params:         0       0       0       0       0       0       0       0
  6688 ;;      Locals:         0       1       0       0       0       0       0       0
  6689 ;;      Temps:          0       2       0       0       0       0       0       0
  6690 ;;      Totals:         0       3       0       0       0       0       0       0
  6691 ;;Total ram usage:        3 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    8
  6694 ;; This function calls:
  6695 ;;		_setDelayOff_GO
  6696 ;;		_setDimmerLights_AdjGo
  6697 ;;		_setDimmerLights_Switch
  6698 ;;		_setDimmerLights_Trigger
  6699 ;;		_setDimmerLights_TriggerAdj
  6700 ;;		_setRF_DimmerLights
  6701 ;;		_setTxData
  6702 ;; This function is called by:
  6703 ;;		_setSw_Main
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           
  6708                           ;psect for function _Sw_DimmerOffFunc
  6709  0000'                    _Sw_DimmerOffFunc:	
  6710                           
  6711                           ;incstack = 0
  6712                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6713                           ;Sw_DimmerOffFunc@sw stored from wreg
  6714  0000' 0020               	movlb	0	; select bank0
  6715  0001' 00C4'              	movwf	Sw_DimmerOffFunc@sw
  6716                           
  6717                           ;Switch_B1.c: 264: if (Sw->Flag) {
  6718  0002' 0802'              	movf	_Sw,w
  6719  0003' 0086               	movwf	6
  6720  0004' 3001               	movlw	1	; select bank2/3
  6721  0005' 0087               	movwf	7
  6722  0006' 1F81               	btfss	1,7
  6723  0007' 0008               	return
  6724                           
  6725                           ;Switch_B1.c: 265: Sw->Flag = 0;
  6726  0008' 0802'              	movf	_Sw,w
  6727  0009' 0086               	movwf	6
  6728  000A' 3001               	movlw	1	; select bank2/3
  6729  000B' 0087               	movwf	7
  6730  000C' 1381               	bcf	1,7
  6731                           
  6732                           ;Switch_B1.c: 266: if (Sw->Status) {
  6733  000D' 0802'              	movf	_Sw,w
  6734  000E' 0086               	movwf	6
  6735  000F' 3001               	movlw	1	; select bank2/3
  6736  0010' 0087               	movwf	7
  6737  0011' 1F01               	btfss	1,6
  6738  0012' 2800'              	goto	l8689
  6739                           
  6740                           ;Switch_B1.c: 267: if (Sw->Adj) {
  6741  0013' 0A02'              	incf	_Sw,w
  6742  0014' 0086               	movwf	6
  6743  0015' 3001               	movlw	1	; select bank2/3
  6744  0016' 0087               	movwf	7
  6745  0017' 1C01               	btfss	1,0
  6746  0018' 0008               	return
  6747                           
  6748                           ;Switch_B1.c: 268: Sw->Adj = 0;
  6749  0019' 0A02'              	incf	_Sw,w
  6750  001A' 0086               	movwf	6
  6751  001B' 3001               	movlw	1	; select bank2/3
  6752  001C' 0087               	movwf	7
  6753  001D' 1001               	bcf	1,0
  6754                           
  6755                           ;Switch_B1.c: 269: setDimmerLights_TriggerAdj(sw, 1);
  6756  001E' 0182'              	clrf	setDimmerLights_TriggerAdj@command
  6757  001F' 0A82'              	incf	setDimmerLights_TriggerAdj@command,f
  6758  0020' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6759  0021' 3180' 2000' 3180'  	fcall	_setDimmerLights_TriggerAdj
  6760                           
  6761                           ;Switch_B1.c: 270: setDimmerLights_AdjGo(sw, 0);
  6762  0024' 0020               	movlb	0	; select bank0
  6763  0025' 0182'              	clrf	setDimmerLights_AdjGo@command
  6764  0026' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6765  0027' 3180' 2000' 3180'  	fcall	_setDimmerLights_AdjGo
  6766                           
  6767                           ;Switch_B1.c: 272: Product->Data[17]=Product->Data[26 + sw];
  6768  002A' 0020               	movlb	0	; select bank0
  6769  002B' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6770  002C' 3E1A               	addlw	26
  6771  002D' 0700'              	addwf	_Product,w
  6772  002E' 00C2'              	movwf	??_Sw_DimmerOffFunc
  6773  002F' 0842'              	movf	??_Sw_DimmerOffFunc,w
  6774  0030' 0086               	movwf	6
  6775  0031' 3001               	movlw	1	; select bank2/3
  6776  0032' 0087               	movwf	7
  6777  0033' 0801               	movf	1,w
  6778  0034' 00C3'              	movwf	??_Sw_DimmerOffFunc+1
  6779  0035' 0800'              	movf	_Product,w
  6780  0036' 3E11               	addlw	17
  6781  0037' 0086               	movwf	6
  6782  0038' 3001               	movlw	1	; select bank2/3
  6783  0039' 0087               	movwf	7
  6784  003A' 0843'              	movf	??_Sw_DimmerOffFunc+1,w
  6785  003B' 0081               	movwf	1
  6786                           
  6787                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  6788  003C' 0802'              	movf	_Sw,w
  6789  003D' 0086               	movwf	6
  6790  003E' 3001               	movlw	1	; select bank2/3
  6791  003F' 0087               	movwf	7
  6792  0040' 3000               	movlw	0
  6793  0041' 1B01               	btfsc	1,6
  6794  0042' 3001               	movlw	1
  6795  0043' 00BD'              	movwf	setRF_DimmerLights@on
  6796  0044' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6797  0045' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
  6798                           
  6799                           ;Switch_B1.c: 274: setTxData(1);
  6800  0048' 3001               	movlw	1
  6801  0049' 3180' 2000'        	fcall	_setTxData
  6802                           
  6803                           ;Switch_B1.c: 276: }
  6804                           ;Switch_B1.c: 277: } else {
  6805  004B' 0008               	return
  6806  004C'                    l8689:	
  6807                           
  6808                           ;Switch_B1.c: 278: setDimmerLights_Trigger(sw, 1);
  6809  004C' 0020               	movlb	0	; select bank0
  6810  004D' 0182'              	clrf	setDimmerLights_Trigger@command
  6811  004E' 0A82'              	incf	setDimmerLights_Trigger@command,f
  6812  004F' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6813  0050' 3180' 2000' 3180'  	fcall	_setDimmerLights_Trigger
  6814                           
  6815                           ;Switch_B1.c: 279: setDimmerLights_Switch(sw, 0);
  6816  0053' 0020               	movlb	0	; select bank0
  6817  0054' 0182'              	clrf	setDimmerLights_Switch@command
  6818  0055' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6819  0056' 3180' 2000' 3180'  	fcall	_setDimmerLights_Switch
  6820                           
  6821                           ;Switch_B1.c: 281: setDelayOff_GO(sw, 0, 0);
  6822  0059' 0020               	movlb	0	; select bank0
  6823  005A' 0183'              	clrf	setDelayOff_GO@command
  6824  005B' 0184'              	clrf	setDelayOff_GO@value
  6825  005C' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6826  005D' 3180' 2000' 3180'  	fcall	_setDelayOff_GO
  6827                           
  6828                           ;Switch_B1.c: 282: setRF_DimmerLights(sw, Sw->Status);
  6829  0060' 0802'              	movf	_Sw,w
  6830  0061' 0086               	movwf	6
  6831  0062' 3001               	movlw	1	; select bank2/3
  6832  0063' 0087               	movwf	7
  6833  0064' 3000               	movlw	0
  6834  0065' 1B01               	btfsc	1,6
  6835  0066' 3001               	movlw	1
  6836  0067' 0020               	movlb	0	; select bank0
  6837  0068' 00BD'              	movwf	setRF_DimmerLights@on
  6838  0069' 0844'              	movf	Sw_DimmerOffFunc@sw,w
  6839  006A' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
  6840                           
  6841                           ;Switch_B1.c: 283: setTxData(1);
  6842  006D' 3001               	movlw	1
  6843  006E' 3180' 2000'        	fcall	_setTxData
  6844  0070' 0008               	return
  6845  0071'                    __end_of_Sw_DimmerOffFunc:	
  6846                           
  6847                           	psect	text21
  6848  0000'                    __ptext21:	
  6849 ;; *************** function _Sw_DimmerAdjFunc *****************
  6850 ;; Defined at:
  6851 ;;		line 290 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;  sw              1    wreg     unsigned char 
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;  sw              1    5[BANK0 ] unsigned char 
  6856 ;;  Idle            1    4[BANK0 ] unsigned char 
  6857 ;; Return value:  Size  Location     Type
  6858 ;;		None               void
  6859 ;; Registers used:
  6860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6866 ;;      Params:         0       0       0       0       0       0       0       0
  6867 ;;      Locals:         0       2       0       0       0       0       0       0
  6868 ;;      Temps:          0       0       0       0       0       0       0       0
  6869 ;;      Totals:         0       2       0       0       0       0       0       0
  6870 ;;Total ram usage:        2 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    6
  6873 ;; This function calls:
  6874 ;;		_setDimmerLights_AdjGo
  6875 ;;		_setDimmerLights_TriggerAdj
  6876 ;;		_setRFSW_Status
  6877 ;; This function is called by:
  6878 ;;		_setSw_Main
  6879 ;; This function uses a non-reentrant model
  6880 ;;
  6881                           
  6882                           
  6883                           ;psect for function _Sw_DimmerAdjFunc
  6884  0000'                    _Sw_DimmerAdjFunc:	
  6885                           
  6886                           ;incstack = 0
  6887                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6888                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6889  0000' 0020               	movlb	0	; select bank0
  6890  0001' 0085'              	movwf	Sw_DimmerAdjFunc@sw
  6891                           
  6892                           ;Switch_B1.c: 291: char Idle = 1;
  6893  0002' 0184'              	clrf	Sw_DimmerAdjFunc@Idle
  6894  0003' 0A84'              	incf	Sw_DimmerAdjFunc@Idle,f
  6895                           
  6896                           ;Switch_B1.c: 310: if (Idle) {
  6897  0004' 0804'              	movf	Sw_DimmerAdjFunc@Idle,w
  6898  0005' 1903               	btfsc	3,2
  6899  0006' 0008               	return
  6900                           
  6901                           ;Switch_B1.c: 311: if (Sw->Flag) {
  6902  0007' 0802'              	movf	_Sw,w
  6903  0008' 0086               	movwf	6
  6904  0009' 3001               	movlw	1	; select bank2/3
  6905  000A' 0087               	movwf	7
  6906  000B' 1F81               	btfss	1,7
  6907  000C' 0008               	return
  6908                           
  6909                           ;Switch_B1.c: 312: Sw->Adj = 1;
  6910  000D' 0A02'              	incf	_Sw,w
  6911  000E' 0086               	movwf	6
  6912  000F' 3001               	movlw	1	; select bank2/3
  6913  0010' 0087               	movwf	7
  6914  0011' 1401               	bsf	1,0
  6915                           
  6916                           ;Switch_B1.c: 313: Sw->Status = 1;
  6917  0012' 0802'              	movf	_Sw,w
  6918  0013' 0086               	movwf	6
  6919  0014' 3001               	movlw	1	; select bank2/3
  6920  0015' 0087               	movwf	7
  6921  0016' 1701               	bsf	1,6
  6922                           
  6923                           ;Switch_B1.c: 314: setRFSW_Status(sw, 1);
  6924  0017' 0182'              	clrf	setRFSW_Status@command
  6925  0018' 0A82'              	incf	setRFSW_Status@command,f
  6926  0019' 0805'              	movf	Sw_DimmerAdjFunc@sw,w
  6927  001A' 3180' 2000' 3180'  	fcall	_setRFSW_Status
  6928                           
  6929                           ;Switch_B1.c: 316: setDimmerLights_TriggerAdj(sw, 1);
  6930  001D' 0020               	movlb	0	; select bank0
  6931  001E' 0182'              	clrf	setDimmerLights_TriggerAdj@command
  6932  001F' 0A82'              	incf	setDimmerLights_TriggerAdj@command,f
  6933  0020' 0805'              	movf	Sw_DimmerAdjFunc@sw,w
  6934  0021' 3180' 2000' 3180'  	fcall	_setDimmerLights_TriggerAdj
  6935                           
  6936                           ;Switch_B1.c: 317: setDimmerLights_AdjGo(sw, 1);
  6937  0024' 0020               	movlb	0	; select bank0
  6938  0025' 0182'              	clrf	setDimmerLights_AdjGo@command
  6939  0026' 0A82'              	incf	setDimmerLights_AdjGo@command,f
  6940  0027' 0805'              	movf	Sw_DimmerAdjFunc@sw,w
  6941  0028' 3180' 2000'        	fcall	_setDimmerLights_AdjGo
  6942  002A' 0020               	movlb	0	; select bank0
  6943  002B' 0008               	return
  6944  002C'                    __end_of_Sw_DimmerAdjFunc:	
  6945                           
  6946                           	psect	text22
  6947  0000'                    __ptext22:	
  6948 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6949 ;; Defined at:
  6950 ;;		line 450 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  6951 ;; Parameters:    Size  Location     Type
  6952 ;;  lights          1    wreg     unsigned char 
  6953 ;;  command         1    2[BANK0 ] unsigned char 
  6954 ;; Auto vars:     Size  Location     Type
  6955 ;;  lights          1    3[BANK0 ] unsigned char 
  6956 ;; Return value:  Size  Location     Type
  6957 ;;		None               void
  6958 ;; Registers used:
  6959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6960 ;; Tracked objects:
  6961 ;;		On entry : 0/0
  6962 ;;		On exit  : 0/0
  6963 ;;		Unchanged: 0/0
  6964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6965 ;;      Params:         0       1       0       0       0       0       0       0
  6966 ;;      Locals:         0       1       0       0       0       0       0       0
  6967 ;;      Temps:          0       0       0       0       0       0       0       0
  6968 ;;      Totals:         0       2       0       0       0       0       0       0
  6969 ;;Total ram usage:        2 bytes
  6970 ;; Hardware stack levels used:    1
  6971 ;; Hardware stack levels required when called:    5
  6972 ;; This function calls:
  6973 ;;		_DimmerLightsPointSelect
  6974 ;; This function is called by:
  6975 ;;		_Sw_DimmerOffFunc
  6976 ;;		_Sw_DimmerAdjFunc
  6977 ;; This function uses a non-reentrant model
  6978 ;;
  6979                           
  6980                           
  6981                           ;psect for function _setDimmerLights_TriggerAdj
  6982  0000'                    _setDimmerLights_TriggerAdj:	
  6983                           
  6984                           ;incstack = 0
  6985                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6986                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6987  0000' 0020               	movlb	0	; select bank0
  6988  0001' 0083'              	movwf	setDimmerLights_TriggerAdj@lights
  6989                           
  6990                           ;Dimmer_B1.c: 452: DimmerLightsPointSelect(lights);
  6991  0002' 0803'              	movf	setDimmerLights_TriggerAdj@lights,w
  6992  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
  6993                           
  6994                           ;Dimmer_B1.c: 453: DimmerLights->TriggerAdj=command;
  6995  0005' 0800'              	movf	_DimmerLights,w
  6996  0006' 3E09               	addlw	9
  6997  0007' 0086               	movwf	6
  6998  0008' 3001               	movlw	1	; select bank2/3
  6999  0009' 0087               	movwf	7
  7000  000A' 0020               	movlb	0	; select bank0
  7001  000B' 0802'              	movf	setDimmerLights_TriggerAdj@command,w
  7002  000C' 1181               	bcf	1,3
  7003  000D' 1D03               	skipz
  7004  000E' 1581               	bsf	1,3
  7005  000F' 0008               	return
  7006  0010'                    __end_of_setDimmerLights_TriggerAdj:	
  7007                           
  7008                           	psect	text23
  7009  0000'                    __ptext23:	
  7010 ;; *************** function _setDimmerLights_AdjGo *****************
  7011 ;; Defined at:
  7012 ;;		line 440 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  lights          1    wreg     unsigned char 
  7015 ;;  command         1    2[BANK0 ] unsigned char 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  lights          1    3[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;		None               void
  7020 ;; Registers used:
  7021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7027 ;;      Params:         0       1       0       0       0       0       0       0
  7028 ;;      Locals:         0       1       0       0       0       0       0       0
  7029 ;;      Temps:          0       0       0       0       0       0       0       0
  7030 ;;      Totals:         0       2       0       0       0       0       0       0
  7031 ;;Total ram usage:        2 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    5
  7034 ;; This function calls:
  7035 ;;		_DimmerLightsPointSelect
  7036 ;; This function is called by:
  7037 ;;		_Sw_DimmerOffFunc
  7038 ;;		_Sw_DimmerAdjFunc
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           
  7043                           ;psect for function _setDimmerLights_AdjGo
  7044  0000'                    _setDimmerLights_AdjGo:	
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7048                           ;setDimmerLights_AdjGo@lights stored from wreg
  7049  0000' 0020               	movlb	0	; select bank0
  7050  0001' 0083'              	movwf	setDimmerLights_AdjGo@lights
  7051                           
  7052                           ;Dimmer_B1.c: 442: DimmerLightsPointSelect(lights);
  7053  0002' 0803'              	movf	setDimmerLights_AdjGo@lights,w
  7054  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
  7055                           
  7056                           ;Dimmer_B1.c: 443: DimmerLights->AdjGo=command;
  7057  0005' 0800'              	movf	_DimmerLights,w
  7058  0006' 3E09               	addlw	9
  7059  0007' 0086               	movwf	6
  7060  0008' 3001               	movlw	1	; select bank2/3
  7061  0009' 0087               	movwf	7
  7062  000A' 0020               	movlb	0	; select bank0
  7063  000B' 0802'              	movf	setDimmerLights_AdjGo@command,w
  7064  000C' 1101               	bcf	1,2
  7065  000D' 1D03               	skipz
  7066  000E' 1501               	bsf	1,2
  7067  000F' 0008               	return
  7068  0010'                    __end_of_setDimmerLights_AdjGo:	
  7069                           
  7070                           	psect	text24
  7071  0000'                    __ptext24:	
  7072 ;; *************** function _Switch_Initialization *****************
  7073 ;; Defined at:
  7074 ;;		line 37 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;		None
  7079 ;; Return value:  Size  Location     Type
  7080 ;;		None               void
  7081 ;; Registers used:
  7082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7088 ;;      Params:         0       0       0       0       0       0       0       0
  7089 ;;      Locals:         0       0       0       0       0       0       0       0
  7090 ;;      Temps:          0       0       0       0       0       0       0       0
  7091 ;;      Totals:         0       0       0       0       0       0       0       0
  7092 ;;Total ram usage:        0 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    7
  7095 ;; This function calls:
  7096 ;;		_TouchPower
  7097 ;;		_setSw_Initialization
  7098 ;; This function is called by:
  7099 ;;		_main
  7100 ;; This function uses a non-reentrant model
  7101 ;;
  7102                           
  7103                           
  7104                           ;psect for function _Switch_Initialization
  7105  0000'                    _Switch_Initialization:	
  7106                           
  7107                           ;Switch_B1.c: 38: TouchPower();
  7108                           
  7109                           ;incstack = 0
  7110                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7111  0000' 3180' 2000' 3180'  	fcall	_TouchPower
  7112                           
  7113                           ;Switch_B1.c: 40: WPUB1 = 0;
  7114  0003' 0024               	movlb	4	; select bank4
  7115  0004' 108D               	bcf	13,1	;volatile
  7116                           
  7117                           ;Switch_B1.c: 49: setSw_Initialization(1);
  7118  0005' 3001               	movlw	1
  7119  0006' 3180' 2000'        	fcall	_setSw_Initialization
  7120  0008' 0008               	return
  7121  0009'                    __end_of_Switch_Initialization:	
  7122                           
  7123                           	psect	text25
  7124  0000'                    __ptext25:	
  7125 ;; *************** function _setSw_Initialization *****************
  7126 ;; Defined at:
  7127 ;;		line 77 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  sw              1    wreg     unsigned char 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;  sw              1    4[BANK0 ] unsigned char 
  7132 ;; Return value:  Size  Location     Type
  7133 ;;		None               void
  7134 ;; Registers used:
  7135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7141 ;;      Params:         0       0       0       0       0       0       0       0
  7142 ;;      Locals:         0       1       0       0       0       0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0
  7144 ;;      Totals:         0       1       0       0       0       0       0       0
  7145 ;;Total ram usage:        1 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    6
  7148 ;; This function calls:
  7149 ;;		_setLED
  7150 ;; This function is called by:
  7151 ;;		_Switch_Initialization
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _setSw_Initialization
  7157  0000'                    _setSw_Initialization:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7161                           ;setSw_Initialization@sw stored from wreg
  7162  0000' 0020               	movlb	0	; select bank0
  7163  0001' 0084'              	movwf	setSw_Initialization@sw
  7164                           
  7165                           ;Switch_B1.c: 78: setLED(sw, 1);
  7166  0002' 0182'              	clrf	setLED@command
  7167  0003' 0A82'              	incf	setLED@command,f
  7168  0004' 0804'              	movf	setSw_Initialization@sw,w
  7169  0005' 3180' 2000' 3180'  	fcall	_setLED
  7170                           
  7171                           ;Switch_B1.c: 80: setLED(sw + 1, 1);
  7172  0008' 0020               	movlb	0	; select bank0
  7173  0009' 0182'              	clrf	setLED@command
  7174  000A' 0A82'              	incf	setLED@command,f
  7175  000B' 0804'              	movf	setSw_Initialization@sw,w
  7176  000C' 3E01               	addlw	1
  7177  000D' 3180' 2000'        	fcall	_setLED
  7178  000F' 0008               	return
  7179  0010'                    __end_of_setSw_Initialization:	
  7180                           
  7181                           	psect	text26
  7182  0000'                    __ptext26:	
  7183 ;; *************** function _TouchPower *****************
  7184 ;; Defined at:
  7185 ;;		line 10 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
  7186 ;; Parameters:    Size  Location     Type
  7187 ;;		None
  7188 ;; Auto vars:     Size  Location     Type
  7189 ;;		None
  7190 ;; Return value:  Size  Location     Type
  7191 ;;		None               void
  7192 ;; Registers used:
  7193 ;;		None
  7194 ;; Tracked objects:
  7195 ;;		On entry : 0/0
  7196 ;;		On exit  : 0/0
  7197 ;;		Unchanged: 0/0
  7198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7199 ;;      Params:         0       0       0       0       0       0       0       0
  7200 ;;      Locals:         0       0       0       0       0       0       0       0
  7201 ;;      Temps:          0       0       0       0       0       0       0       0
  7202 ;;      Totals:         0       0       0       0       0       0       0       0
  7203 ;;Total ram usage:        0 bytes
  7204 ;; Hardware stack levels used:    1
  7205 ;; Hardware stack levels required when called:    4
  7206 ;; This function calls:
  7207 ;;		Nothing
  7208 ;; This function is called by:
  7209 ;;		_Switch_Initialization
  7210 ;; This function uses a non-reentrant model
  7211 ;;
  7212                           
  7213                           
  7214                           ;psect for function _TouchPower
  7215  0000'                    _TouchPower:	
  7216  0000'                    l2542:	
  7217                           ;Switch_B1.c: 11: while (!RC5)
  7218                           
  7219                           ;incstack = 0
  7220                           ; Regs used in _TouchPower: []
  7221                           
  7222  0000' 0020               	movlb	0	; select bank0
  7223  0001' 1A8E               	btfsc	14,5	;volatile
  7224  0002' 0008               	return
  7225                           
  7226                           ;Switch_B1.c: 12: RC5 = 1;
  7227  0003' 168E               	bsf	14,5	;volatile
  7228  0004' 2800'              	goto	l2542
  7229  0005'                    __end_of_TouchPower:	
  7230                           
  7231                           	psect	text27
  7232  0000'                    __ptext27:	
  7233 ;; *************** function _RF_Main *****************
  7234 ;; Defined at:
  7235 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7236 ;; Parameters:    Size  Location     Type
  7237 ;;		None
  7238 ;; Auto vars:     Size  Location     Type
  7239 ;;		None
  7240 ;; Return value:  Size  Location     Type
  7241 ;;		None               void
  7242 ;; Registers used:
  7243 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7249 ;;      Params:         0       0       0       0       0       0       0       0
  7250 ;;      Locals:         0       0       0       0       0       0       0       0
  7251 ;;      Temps:          0       0       0       0       0       0       0       0
  7252 ;;      Totals:         0       0       0       0       0       0       0       0
  7253 ;;Total ram usage:        0 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:   13
  7256 ;; This function calls:
  7257 ;;		_setRF_Main
  7258 ;; This function is called by:
  7259 ;;		_main
  7260 ;; This function uses a non-reentrant model
  7261 ;;
  7262                           
  7263                           
  7264                           ;psect for function _RF_Main
  7265  0000'                    _RF_Main:	
  7266                           
  7267                           ;RF_Control_B1.c: 25: setRF_Main(1);
  7268                           
  7269                           ;incstack = 0
  7270                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7271  0000' 3001               	movlw	1
  7272  0001' 3180' 2000'        	fcall	_setRF_Main
  7273  0003' 0008               	return
  7274  0004'                    __end_of_RF_Main:	
  7275                           
  7276                           	psect	text28
  7277  0000'                    __ptext28:	
  7278 ;; *************** function _setRF_Main *****************
  7279 ;; Defined at:
  7280 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  rf              1    wreg     unsigned char 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  rf              1   74[BANK0 ] unsigned char 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;		None               void
  7287 ;; Registers used:
  7288 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7294 ;;      Params:         0       0       0       0       0       0       0       0
  7295 ;;      Locals:         0       2       0       0       0       0       0       0
  7296 ;;      Temps:          0       1       0       0       0       0       0       0
  7297 ;;      Totals:         0       3       0       0       0       0       0       0
  7298 ;;Total ram usage:        3 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:   12
  7301 ;; This function calls:
  7302 ;;		_CC2500_RxData
  7303 ;;		_CC2500_TxData
  7304 ;;		_CC2500_WriteCommand
  7305 ;;		_RF_RxDisable
  7306 ;;		_RfPointSelect
  7307 ;;		_getRxData
  7308 ;;		_setINT_GO
  7309 ;; This function is called by:
  7310 ;;		_RF_Main
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           
  7315                           ;psect for function _setRF_Main
  7316  0000'                    _setRF_Main:	
  7317                           
  7318                           ;incstack = 0
  7319                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7320                           ;setRF_Main@rf stored from wreg
  7321  0000' 0020               	movlb	0	; select bank0
  7322  0001' 00CA'              	movwf	setRF_Main@rf
  7323                           
  7324                           ;RF_Control_B1.c: 58: RfPointSelect(rf);
  7325  0002' 084A'              	movf	setRF_Main@rf,w
  7326  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
  7327                           
  7328                           ;RF_Control_B1.c: 59: if (RF->Enable) {
  7329  0006' 0021               	movlb	1	; select bank1
  7330  0007' 0800'              	movf	_RF^(0+128),w
  7331  0008' 0086               	movwf	6
  7332  0009' 0187               	clrf	7
  7333  000A' 1C01               	btfss	1,0
  7334  000B' 0008               	return
  7335                           
  7336                           ;RF_Control_B1.c: 71: RF->Key = ((RA6 || RA4 || RA0 || RB1) && !RF->Learn) ? 1 : 0;
  7337  000C' 0020               	movlb	0	; select bank0
  7338  000D' 01CB'              	clrf	_setRF_Main$3956
  7339  000E' 1F0C               	btfss	12,6	;volatile
  7340  000F' 1A0C               	btfsc	12,4	;volatile
  7341  0010' 2800'              	goto	l9023
  7342  0011' 180C               	btfsc	12,0	;volatile
  7343  0012' 2800'              	goto	l9023
  7344  0013' 1C8D               	btfss	13,1	;volatile
  7345  0014' 2800'              	goto	l9027
  7346  0015'                    l9023:	
  7347  0015' 0021               	movlb	1	; select bank1
  7348  0016' 0800'              	movf	_RF^(0+128),w
  7349  0017' 0086               	movwf	6
  7350  0018' 0187               	clrf	7
  7351  0019' 1B01               	btfsc	1,6
  7352  001A' 2800'              	goto	l9027
  7353  001B' 0020               	movlb	0	; select bank0
  7354  001C' 01CB'              	clrf	_setRF_Main$3956
  7355  001D' 0ACB'              	incf	_setRF_Main$3956,f
  7356  001E'                    l9027:	
  7357  001E' 0021               	movlb	1	; select bank1
  7358  001F' 0800'              	movf	_RF^(0+128),w
  7359  0020' 0086               	movwf	6
  7360  0021' 0187               	clrf	7
  7361  0022' 0020               	movlb	0	; select bank0
  7362  0023' 084B'              	movf	_setRF_Main$3956,w
  7363  0024' 1381               	bcf	1,7
  7364  0025' 1D03               	skipz
  7365  0026' 1781               	bsf	1,7
  7366                           
  7367                           ;RF_Control_B1.c: 75: if (!RF->Key) {
  7368  0027' 0021               	movlb	1	; select bank1
  7369  0028' 0800'              	movf	_RF^(0+128),w
  7370  0029' 0086               	movwf	6
  7371  002A' 0187               	clrf	7
  7372  002B' 1B81               	btfsc	1,7
  7373  002C' 2800'              	goto	l9049
  7374                           
  7375                           ;RF_Control_B1.c: 76: if (RF->ReceiveGO)
  7376  002D' 0800'              	movf	_RF^(0+128),w
  7377  002E' 0086               	movwf	6
  7378  002F' 0187               	clrf	7
  7379  0030' 1C81               	btfss	1,1
  7380  0031' 2800'              	goto	l9037
  7381                           
  7382                           ;RF_Control_B1.c: 77: {
  7383                           ;RF_Control_B1.c: 78: RF->ReceiveGO = 0;
  7384  0032' 0800'              	movf	_RF^(0+128),w
  7385  0033' 0086               	movwf	6
  7386  0034' 0187               	clrf	7
  7387  0035' 1081               	bcf	1,1
  7388                           
  7389                           ;RF_Control_B1.c: 79: CC2500_RxData();
  7390  0036' 3180' 2000' 3180'  	fcall	_CC2500_RxData
  7391                           
  7392                           ;RF_Control_B1.c: 86: getRxData(1);
  7393  0039' 3001               	movlw	1
  7394  003A' 3180' 2000' 3180'  	fcall	_getRxData
  7395                           
  7396                           ;RF_Control_B1.c: 89: } else {
  7397  003D' 2800'              	goto	l9051
  7398  003E'                    l9037:	
  7399                           
  7400                           ;RF_Control_B1.c: 90: if (!RF->TransceiveGO) {
  7401  003E' 0021               	movlb	1	; select bank1
  7402  003F' 0800'              	movf	_RF^(0+128),w
  7403  0040' 0086               	movwf	6
  7404  0041' 0187               	clrf	7
  7405  0042' 1901               	btfsc	1,2
  7406  0043' 2800'              	goto	l9051
  7407                           
  7408                           ;RF_Control_B1.c: 92: if (!RF->RxStatus)
  7409  0044' 0800'              	movf	_RF^(0+128),w
  7410  0045' 0086               	movwf	6
  7411  0046' 0187               	clrf	7
  7412  0047' 1981               	btfsc	1,3
  7413  0048' 2800'              	goto	l9051
  7414                           
  7415                           ;RF_Control_B1.c: 93: {
  7416                           ;RF_Control_B1.c: 94: RF->RxStatus = 1;
  7417  0049' 0800'              	movf	_RF^(0+128),w
  7418  004A' 0086               	movwf	6
  7419  004B' 0187               	clrf	7
  7420  004C' 1581               	bsf	1,3
  7421                           
  7422                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x36);
  7423  004D' 3036               	movlw	54
  7424  004E' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  7425                           
  7426                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x34);
  7427  0051' 3034               	movlw	52
  7428  0052' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  7429                           
  7430                           ;RF_Control_B1.c: 97: setINT_GO(1);
  7431  0055' 3001               	movlw	1
  7432  0056' 3180' 2000' 3180'  	fcall	_setINT_GO
  7433                           
  7434                           ;RF_Control_B1.c: 98: }
  7435                           ;RF_Control_B1.c: 100: }
  7436                           ;RF_Control_B1.c: 101: }
  7437                           ;RF_Control_B1.c: 102: } else {
  7438  0059' 2800'              	goto	l9051
  7439  005A'                    l9049:	
  7440                           
  7441                           ;RF_Control_B1.c: 103: RF_RxDisable(1);
  7442  005A' 3001               	movlw	1
  7443  005B' 3180' 2000' 3180'  	fcall	_RF_RxDisable
  7444  005E'                    l9051:	
  7445                           
  7446                           ;RF_Control_B1.c: 104: }
  7447                           ;RF_Control_B1.c: 105: if (RF->TransceiveGO)
  7448  005E' 0021               	movlb	1	; select bank1
  7449  005F' 0800'              	movf	_RF^(0+128),w
  7450  0060' 0086               	movwf	6
  7451  0061' 0187               	clrf	7
  7452  0062' 1D01               	btfss	1,2
  7453  0063' 0008               	return
  7454                           
  7455                           ;RF_Control_B1.c: 106: {
  7456                           ;RF_Control_B1.c: 107: RF_RxDisable(1);
  7457  0064' 3001               	movlw	1
  7458  0065' 3180' 2000' 3180'  	fcall	_RF_RxDisable
  7459                           
  7460                           ;RF_Control_B1.c: 108: if (!RF->Debounce) {
  7461  0068' 0021               	movlb	1	; select bank1
  7462  0069' 0800'              	movf	_RF^(0+128),w
  7463  006A' 0086               	movwf	6
  7464  006B' 0187               	clrf	7
  7465  006C' 1A81               	btfsc	1,5
  7466  006D' 2800'              	goto	l9065
  7467                           
  7468                           ;RF_Control_B1.c: 109: RF->DebounceTime++;
  7469  006E' 3001               	movlw	1
  7470  006F' 0020               	movlb	0	; select bank0
  7471  0070' 00C9'              	movwf	??_setRF_Main
  7472  0071' 0021               	movlb	1	; select bank1
  7473  0072' 0A00'              	incf	_RF^(0+128),w
  7474  0073' 0086               	movwf	6
  7475  0074' 0187               	clrf	7
  7476  0075' 0020               	movlb	0	; select bank0
  7477  0076' 0849'              	movf	??_setRF_Main,w
  7478  0077' 0781               	addwf	1,f
  7479                           
  7480                           ;RF_Control_B1.c: 110: if (RF->DebounceTime == 25)
  7481  0078' 0021               	movlb	1	; select bank1
  7482  0079' 0A00'              	incf	_RF^(0+128),w
  7483  007A' 0086               	movwf	6
  7484  007B' 0187               	clrf	7
  7485  007C' 0801               	movf	1,w
  7486  007D' 3A19               	xorlw	25
  7487  007E' 1D03               	skipz
  7488  007F' 0008               	return
  7489                           
  7490                           ;RF_Control_B1.c: 111: {
  7491                           ;RF_Control_B1.c: 112: RF->DebounceTime = 0;
  7492  0080' 0A00'              	incf	_RF^(0+128),w
  7493  0081' 0086               	movwf	6
  7494  0082' 0187               	clrf	7
  7495  0083' 0181               	clrf	1
  7496                           
  7497                           ;RF_Control_B1.c: 113: RF->Debounce = 1;
  7498  0084' 0800'              	movf	_RF^(0+128),w
  7499  0085' 0086               	movwf	6
  7500  0086' 0187               	clrf	7
  7501  0087' 1681               	bsf	1,5
  7502                           
  7503                           ;RF_Control_B1.c: 114: }
  7504                           ;RF_Control_B1.c: 115: } else {
  7505  0088' 0008               	return
  7506  0089'                    l9065:	
  7507                           
  7508                           ;RF_Control_B1.c: 116: RF->Debounce = 0;
  7509  0089' 0800'              	movf	_RF^(0+128),w
  7510  008A' 0086               	movwf	6
  7511  008B' 0187               	clrf	7
  7512  008C' 1281               	bcf	1,5
  7513                           
  7514                           ;RF_Control_B1.c: 117: RF->TransceiveGO = 0;
  7515  008D' 0800'              	movf	_RF^(0+128),w
  7516  008E' 0086               	movwf	6
  7517  008F' 0187               	clrf	7
  7518  0090' 1101               	bcf	1,2
  7519                           
  7520                           ;RF_Control_B1.c: 118: CC2500_TxData();
  7521  0091' 3180' 2000'        	fcall	_CC2500_TxData
  7522  0093' 0008               	return
  7523  0094'                    __end_of_setRF_Main:	
  7524                           
  7525                           	psect	text29
  7526  0000'                    __ptext29:	
  7527 ;; *************** function _getRxData *****************
  7528 ;; Defined at:
  7529 ;;		line 202 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  rf              1    wreg     unsigned char 
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;  rf              1   72[BANK0 ] unsigned char 
  7534 ;;  i               1    0        unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7544 ;;      Params:         0       0       0       0       0       0       0       0
  7545 ;;      Locals:         0       1       0       0       0       0       0       0
  7546 ;;      Temps:          0       0       0       0       0       0       0       0
  7547 ;;      Totals:         0       1       0       0       0       0       0       0
  7548 ;;Total ram usage:        1 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:   11
  7551 ;; This function calls:
  7552 ;;		_RfPointSelect
  7553 ;;		_setControl_Lights_Table
  7554 ;;		_setLog_Code
  7555 ;; This function is called by:
  7556 ;;		_setRF_Main
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _getRxData
  7562  0000'                    _getRxData:	
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7566                           ;getRxData@rf stored from wreg
  7567  0000' 0020               	movlb	0	; select bank0
  7568  0001' 00C8'              	movwf	getRxData@rf
  7569                           
  7570                           ;RF_Control_B1.c: 203: unsigned char i;
  7571                           ;RF_Control_B1.c: 204: RfPointSelect(rf);
  7572  0002' 0848'              	movf	getRxData@rf,w
  7573  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
  7574                           
  7575                           ;RF_Control_B1.c: 205: if (RF->Learn) {
  7576  0006' 0021               	movlb	1	; select bank1
  7577  0007' 0800'              	movf	_RF^(0+128),w
  7578  0008' 0086               	movwf	6
  7579  0009' 0187               	clrf	7
  7580  000A' 1F01               	btfss	1,6
  7581  000B' 2800'              	goto	l8589
  7582                           
  7583                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  7584  000C' 0880'              	movf	_RF_Data^(0+128),f
  7585  000D' 1D03               	skipz
  7586  000E' 0008               	return
  7587  000F' 0801'              	movf	(_RF_Data^(0+128)+1),w
  7588  0010' 3A64               	xorlw	100
  7589  0011' 1D03               	skipz
  7590  0012' 0008               	return
  7591                           
  7592                           ;RF_Control_B1.c: 207: {
  7593                           ;RF_Control_B1.c: 208: setLog_Code(1);
  7594  0013' 3001               	movlw	1
  7595  0014' 3180' 2000'        	fcall	_setLog_Code
  7596                           
  7597                           ;RF_Control_B1.c: 209: }
  7598                           ;RF_Control_B1.c: 210: } else {
  7599  0016' 0008               	return
  7600  0017'                    l8589:	
  7601                           
  7602                           ;RF_Control_B1.c: 211: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  7603  0017' 0021               	movlb	1	; select bank1
  7604  0018' 0880'              	movf	_RF_Data^(0+128),f
  7605  0019' 1D03               	skipz
  7606  001A' 0008               	return
  7607  001B' 0801'              	movf	(_RF_Data^(0+128)+1),w
  7608  001C' 3A02               	xorlw	2
  7609  001D' 1D03               	skipz
  7610  001E' 0008               	return
  7611                           
  7612                           ;RF_Control_B1.c: 212: {
  7613                           ;RF_Control_B1.c: 213: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7614  001F' 080C'              	movf	(_RF_Data^(0+128)+12),w
  7615  0020' 3AFF               	xorlw	255
  7616  0021' 1D03               	skipz
  7617  0022' 2800'              	goto	l8601
  7618  0023' 080D'              	movf	(_RF_Data^(0+128)+13),w
  7619  0024' 3AFF               	xorlw	255
  7620  0025' 1D03               	skipz
  7621  0026' 2800'              	goto	l8601
  7622  0027' 080E'              	movf	(_RF_Data^(0+128)+14),w
  7623  0028' 3AFF               	xorlw	255
  7624  0029' 1D03               	skipz
  7625  002A' 2800'              	goto	l8601
  7626                           
  7627                           ;RF_Control_B1.c: 214: __nop();
  7628  002B' 0000               	nop
  7629                           
  7630                           ;RF_Control_B1.c: 215: } else {
  7631  002C' 0008               	return
  7632  002D'                    l8601:	
  7633                           
  7634                           ;RF_Control_B1.c: 216: if (RF_Data[12] == Product->Data[12] && RF_Data[13] == Product->D
      +                          ata[13] && RF_Data[14] == Product->Data[14]) {
  7635  002D' 0800'              	movf	_Product,w
  7636  002E' 3E0C               	addlw	12
  7637  002F' 0086               	movwf	6
  7638  0030' 3001               	movlw	1	; select bank2/3
  7639  0031' 0087               	movwf	7
  7640  0032' 0021               	movlb	1	; select bank1
  7641  0033' 080C'              	movf	(_RF_Data^(0+128)+12),w
  7642  0034' 0601               	xorwf	1,w
  7643  0035' 1D03               	skipz
  7644  0036' 0008               	return
  7645  0037' 0800'              	movf	_Product,w
  7646  0038' 3E0D               	addlw	13
  7647  0039' 0086               	movwf	6
  7648  003A' 3001               	movlw	1	; select bank2/3
  7649  003B' 0087               	movwf	7
  7650  003C' 080D'              	movf	(_RF_Data^(0+128)+13),w
  7651  003D' 0601               	xorwf	1,w
  7652  003E' 1D03               	skipz
  7653  003F' 0008               	return
  7654  0040' 0800'              	movf	_Product,w
  7655  0041' 3E0E               	addlw	14
  7656  0042' 0086               	movwf	6
  7657  0043' 3001               	movlw	1	; select bank2/3
  7658  0044' 0087               	movwf	7
  7659  0045' 080E'              	movf	(_RF_Data^(0+128)+14),w
  7660  0046' 0601               	xorwf	1,w
  7661  0047' 1D03               	skipz
  7662  0048' 0008               	return
  7663                           
  7664                           ;RF_Control_B1.c: 217: setControl_Lights_Table(1);
  7665  0049' 3001               	movlw	1
  7666  004A' 3180' 2000'        	fcall	_setControl_Lights_Table
  7667                           
  7668                           ;RF_Control_B1.c: 224: {
  7669                           ;RF_Control_B1.c: 225: ;
  7670                           
  7671                           ;RF_Control_B1.c: 221: {
  7672                           ;RF_Control_B1.c: 222: ;
  7673                           ;RF_Control_B1.c: 223: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  7674                           
  7675                           ;RF_Control_B1.c: 218: }
  7676                           ;RF_Control_B1.c: 219: }
  7677                           ;RF_Control_B1.c: 220: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  7678  004C' 0008               	return
  7679  004D'                    __end_of_getRxData:	
  7680                           
  7681                           	psect	text30
  7682  0000'                    __ptext30:	
  7683 ;; *************** function _setLog_Code *****************
  7684 ;; Defined at:
  7685 ;;		line 235 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7686 ;; Parameters:    Size  Location     Type
  7687 ;;  rf              1    wreg     unsigned char 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;  rf              1   11[BANK0 ] unsigned char 
  7690 ;; Return value:  Size  Location     Type
  7691 ;;		None               void
  7692 ;; Registers used:
  7693 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7699 ;;      Params:         0       0       0       0       0       0       0       0
  7700 ;;      Locals:         0       1       0       0       0       0       0       0
  7701 ;;      Temps:          0       1       0       0       0       0       0       0
  7702 ;;      Totals:         0       2       0       0       0       0       0       0
  7703 ;;Total ram usage:        2 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; Hardware stack levels required when called:    6
  7706 ;; This function calls:
  7707 ;;		_RfPointSelect
  7708 ;;		_setBuz
  7709 ;; This function is called by:
  7710 ;;		_getRxData
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _setLog_Code
  7716  0000'                    _setLog_Code:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7720                           ;setLog_Code@rf stored from wreg
  7721  0000' 0020               	movlb	0	; select bank0
  7722  0001' 008B'              	movwf	setLog_Code@rf
  7723                           
  7724                           ;RF_Control_B1.c: 236: RfPointSelect(rf);
  7725  0002' 080B'              	movf	setLog_Code@rf,w
  7726  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
  7727                           
  7728                           ;RF_Control_B1.c: 237: Product->Data[12]=RF_Data[12];
  7729  0006' 0021               	movlb	1	; select bank1
  7730  0007' 080C'              	movf	(_RF_Data^(0+128)+12),w
  7731  0008' 0020               	movlb	0	; select bank0
  7732  0009' 008A'              	movwf	??_setLog_Code
  7733  000A' 0800'              	movf	_Product,w
  7734  000B' 3E0C               	addlw	12
  7735  000C' 0086               	movwf	6
  7736  000D' 3001               	movlw	1	; select bank2/3
  7737  000E' 0087               	movwf	7
  7738  000F' 080A'              	movf	??_setLog_Code,w
  7739  0010' 0081               	movwf	1
  7740                           
  7741                           ;RF_Control_B1.c: 238: Product->Data[13]=RF_Data[13];
  7742  0011' 0021               	movlb	1	; select bank1
  7743  0012' 080D'              	movf	(_RF_Data^(0+128)+13),w
  7744  0013' 0020               	movlb	0	; select bank0
  7745  0014' 008A'              	movwf	??_setLog_Code
  7746  0015' 0800'              	movf	_Product,w
  7747  0016' 3E0D               	addlw	13
  7748  0017' 0086               	movwf	6
  7749  0018' 3001               	movlw	1	; select bank2/3
  7750  0019' 0087               	movwf	7
  7751  001A' 080A'              	movf	??_setLog_Code,w
  7752  001B' 0081               	movwf	1
  7753                           
  7754                           ;RF_Control_B1.c: 239: Product->Data[14]=RF_Data[14];
  7755  001C' 0021               	movlb	1	; select bank1
  7756  001D' 080E'              	movf	(_RF_Data^(0+128)+14),w
  7757  001E' 0020               	movlb	0	; select bank0
  7758  001F' 008A'              	movwf	??_setLog_Code
  7759  0020' 0800'              	movf	_Product,w
  7760  0021' 3E0E               	addlw	14
  7761  0022' 0086               	movwf	6
  7762  0023' 3001               	movlw	1	; select bank2/3
  7763  0024' 0087               	movwf	7
  7764  0025' 080A'              	movf	??_setLog_Code,w
  7765  0026' 0081               	movwf	1
  7766                           
  7767                           ;RF_Control_B1.c: 240: setBuz(1, 100);
  7768  0027' 3064               	movlw	100
  7769  0028' 0086'              	movwf	setBuz@time
  7770  0029' 3000               	movlw	0
  7771  002A' 0087'              	movwf	setBuz@time+1
  7772  002B' 3001               	movlw	1
  7773  002C' 3180' 2000' 3180'  	fcall	_setBuz
  7774                           
  7775                           ;RF_Control_B1.c: 241: RF->Learn = 0;
  7776  002F' 0021               	movlb	1	; select bank1
  7777  0030' 0800'              	movf	_RF^(0+128),w
  7778  0031' 0086               	movwf	6
  7779  0032' 0187               	clrf	7
  7780  0033' 1301               	bcf	1,6
  7781                           
  7782                           ;RF_Control_B1.c: 242: if (myMain->First) {
  7783  0034' 0800'              	movf	_myMain^(0+128),w
  7784  0035' 3E03               	addlw	3
  7785  0036' 0086               	movwf	6
  7786  0037' 3001               	movlw	1	; select bank2/3
  7787  0038' 0087               	movwf	7
  7788  0039' 1C81               	btfss	1,1
  7789  003A' 2800'              	goto	l2253
  7790                           
  7791                           ;RF_Control_B1.c: 243: Memory->LoopSave=1;
  7792  003B' 0800'              	movf	_Memory^(0+128),w
  7793  003C' 3E22               	addlw	34
  7794  003D' 0086               	movwf	6
  7795  003E' 3001               	movlw	1	; select bank2/3
  7796  003F' 0087               	movwf	7
  7797  0040' 1501               	bsf	1,2
  7798  0041'                    l2253:	
  7799                           
  7800                           ;RF_Control_B1.c: 244: }
  7801                           ;RF_Control_B1.c: 245: Memory->Modify=1;
  7802  0041' 0800'              	movf	_Memory^(0+128),w
  7803  0042' 3E22               	addlw	34
  7804  0043' 0086               	movwf	6
  7805  0044' 3001               	movlw	1	; select bank2/3
  7806  0045' 0087               	movwf	7
  7807  0046' 1401               	bsf	1,0
  7808  0047' 0008               	return
  7809  0048'                    __end_of_setLog_Code:	
  7810                           
  7811                           	psect	text31
  7812  0000'                    __ptext31:	
  7813 ;; *************** function _setControl_Lights_Table *****************
  7814 ;; Defined at:
  7815 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  rf              1    wreg     unsigned char 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  rf              1   71[BANK0 ] unsigned char 
  7820 ;; Return value:  Size  Location     Type
  7821 ;;		None               void
  7822 ;; Registers used:
  7823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7824 ;; Tracked objects:
  7825 ;;		On entry : 0/0
  7826 ;;		On exit  : 0/0
  7827 ;;		Unchanged: 0/0
  7828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7829 ;;      Params:         0       0       0       0       0       0       0       0
  7830 ;;      Locals:         0       1       0       0       0       0       0       0
  7831 ;;      Temps:          0       0       0       0       0       0       0       0
  7832 ;;      Totals:         0       1       0       0       0       0       0       0
  7833 ;;Total ram usage:        1 bytes
  7834 ;; Hardware stack levels used:    1
  7835 ;; Hardware stack levels required when called:   10
  7836 ;; This function calls:
  7837 ;;		_RfPointSelect
  7838 ;;		_setBuz
  7839 ;;		_setDimmerLights
  7840 ;;		_setRFSW_AdjControl
  7841 ;;		_setRFSW_Control
  7842 ;;		_setRFSW_Status
  7843 ;;		_setSw_Status
  7844 ;;		_setTxData
  7845 ;; This function is called by:
  7846 ;;		_getRxData
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _setControl_Lights_Table
  7852  0000'                    _setControl_Lights_Table:	
  7853                           
  7854                           ;incstack = 0
  7855                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7856                           ;setControl_Lights_Table@rf stored from wreg
  7857  0000' 0020               	movlb	0	; select bank0
  7858  0001' 00C7'              	movwf	setControl_Lights_Table@rf
  7859                           
  7860                           ;RF_Control_B1.c: 250: RfPointSelect(rf);
  7861  0002' 0847'              	movf	setControl_Lights_Table@rf,w
  7862  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
  7863                           
  7864                           ;RF_Control_B1.c: 251: if (RF_Data[15] == 0x00) {
  7865  0006' 0021               	movlb	1	; select bank1
  7866  0007' 088F'              	movf	(_RF_Data^(0+128)+15),f
  7867  0008' 1D03               	skipz
  7868  0009' 2800'              	goto	l8421
  7869                           
  7870                           ;RF_Control_B1.c: 253: setDimmerLights(1, 0);
  7871  000A' 0020               	movlb	0	; select bank0
  7872  000B' 0184'              	clrf	setDimmerLights@status
  7873  000C' 3001               	movlw	1
  7874  000D' 3180' 2000' 3180'  	fcall	_setDimmerLights
  7875                           
  7876                           ;RF_Control_B1.c: 254: setRFSW_Status(1, 0);
  7877  0010' 0020               	movlb	0	; select bank0
  7878  0011' 0182'              	clrf	setRFSW_Status@command
  7879  0012' 3001               	movlw	1
  7880  0013' 3180' 2000' 3180'  	fcall	_setRFSW_Status
  7881                           
  7882                           ;RF_Control_B1.c: 255: setSw_Status(1, 0);
  7883  0016' 0020               	movlb	0	; select bank0
  7884  0017' 0182'              	clrf	setSw_Status@command
  7885  0018' 3001               	movlw	1
  7886  0019' 3180' 2000' 3180'  	fcall	_setSw_Status
  7887                           
  7888                           ;RF_Control_B1.c: 268: Product->Data[9]=0;
  7889  001C' 0800'              	movf	_Product,w
  7890  001D' 3E09               	addlw	9
  7891  001E' 0086               	movwf	6
  7892  001F' 3001               	movlw	1	; select bank2/3
  7893  0020' 0087               	movwf	7
  7894  0021' 0181               	clrf	1
  7895                           
  7896                           ;RF_Control_B1.c: 269: Product->Data[11]=0;
  7897  0022' 0800'              	movf	_Product,w
  7898  0023' 3E0B               	addlw	11
  7899  0024' 0086               	movwf	6
  7900  0025' 3001               	movlw	1	; select bank2/3
  7901  0026' 0087               	movwf	7
  7902  0027' 0181               	clrf	1
  7903                           
  7904                           ;RF_Control_B1.c: 270: Product->Data[15]=0;
  7905  0028' 0800'              	movf	_Product,w
  7906  0029' 3E0F               	addlw	15
  7907  002A' 0086               	movwf	6
  7908  002B' 3001               	movlw	1	; select bank2/3
  7909  002C' 0087               	movwf	7
  7910  002D' 0181               	clrf	1
  7911                           
  7912                           ;RF_Control_B1.c: 271: Product->Data[17]=0;
  7913  002E' 0800'              	movf	_Product,w
  7914  002F' 3E11               	addlw	17
  7915  0030' 0086               	movwf	6
  7916  0031' 3001               	movlw	1	; select bank2/3
  7917  0032' 0087               	movwf	7
  7918  0033' 0181               	clrf	1
  7919                           
  7920                           ;RF_Control_B1.c: 272: setBuz(1, 100);
  7921  0034' 3064               	movlw	100
  7922  0035' 0020               	movlb	0	; select bank0
  7923  0036' 0086'              	movwf	setBuz@time
  7924  0037' 3000               	movlw	0
  7925  0038' 0087'              	movwf	setBuz@time+1
  7926  0039' 3001               	movlw	1
  7927  003A' 3180' 2000' 3180'  	fcall	_setBuz
  7928                           
  7929                           ;RF_Control_B1.c: 273: setTxData(1);
  7930  003D' 3001               	movlw	1
  7931  003E' 3180' 2000'        	fcall	_setTxData
  7932                           
  7933                           ;RF_Control_B1.c: 274: } else if (RF_Data[15] == 0x20) {
  7934  0040' 0008               	return
  7935  0041'                    l8421:	
  7936  0041' 0021               	movlb	1	; select bank1
  7937  0042' 080F'              	movf	(_RF_Data^(0+128)+15),w
  7938  0043' 3A20               	xorlw	32
  7939  0044' 1D03               	skipz
  7940  0045' 2800'              	goto	l8427
  7941                           
  7942                           ;RF_Control_B1.c: 275: Product->Data[9]=0;
  7943  0046' 0800'              	movf	_Product,w
  7944  0047' 3E09               	addlw	9
  7945  0048' 0086               	movwf	6
  7946  0049' 3001               	movlw	1	; select bank2/3
  7947  004A' 0087               	movwf	7
  7948  004B' 0181               	clrf	1
  7949                           
  7950                           ;RF_Control_B1.c: 276: Product->Data[11]=0;
  7951  004C' 0800'              	movf	_Product,w
  7952  004D' 3E0B               	addlw	11
  7953  004E' 0086               	movwf	6
  7954  004F' 3001               	movlw	1	; select bank2/3
  7955  0050' 0087               	movwf	7
  7956  0051' 0181               	clrf	1
  7957                           
  7958                           ;RF_Control_B1.c: 277: Product->Data[17]=0;
  7959  0052' 0800'              	movf	_Product,w
  7960  0053' 3E11               	addlw	17
  7961  0054' 0086               	movwf	6
  7962  0055' 3001               	movlw	1	; select bank2/3
  7963  0056' 0087               	movwf	7
  7964  0057' 0181               	clrf	1
  7965                           
  7966                           ;RF_Control_B1.c: 278: setTxData(1);
  7967  0058' 3001               	movlw	1
  7968  0059' 3180' 2000'        	fcall	_setTxData
  7969                           
  7970                           ;RF_Control_B1.c: 279: }
  7971  005B' 0008               	return
  7972  005C'                    l8427:	
  7973                           
  7974                           ;RF_Control_B1.c: 281: else if (RF_Data[15] == 0x01) {
  7975  005C' 0021               	movlb	1	; select bank1
  7976  005D' 080F'              	movf	(_RF_Data^(0+128)+15),w
  7977  005E' 3A01               	xorlw	1
  7978  005F' 1D03               	skipz
  7979  0060' 2800'              	goto	l8431
  7980                           
  7981                           ;RF_Control_B1.c: 282: setRFSW_Control(1);
  7982  0061' 3001               	movlw	1
  7983  0062' 3180' 2000'        	fcall	_setRFSW_Control
  7984                           
  7985                           ;RF_Control_B1.c: 283: }
  7986  0064' 0008               	return
  7987  0065'                    l8431:	
  7988                           
  7989                           ;RF_Control_B1.c: 285: else if (RF_Data[15] == 0x11) {
  7990  0065' 0021               	movlb	1	; select bank1
  7991  0066' 080F'              	movf	(_RF_Data^(0+128)+15),w
  7992  0067' 3A11               	xorlw	17
  7993  0068' 1D03               	skipz
  7994  0069' 0008               	return
  7995                           
  7996                           ;RF_Control_B1.c: 286: setRFSW_AdjControl(1);
  7997  006A' 3001               	movlw	1
  7998  006B' 3180' 2000'        	fcall	_setRFSW_AdjControl
  7999  006D' 0008               	return
  8000  006E'                    __end_of_setControl_Lights_Table:	
  8001                           
  8002                           	psect	text32
  8003  0000'                    __ptext32:	
  8004 ;; *************** function _setRFSW_Control *****************
  8005 ;; Defined at:
  8006 ;;		line 334 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  sw              1    wreg     unsigned char 
  8009 ;; Auto vars:     Size  Location     Type
  8010 ;;  sw              1   67[BANK0 ] unsigned char 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;		None               void
  8013 ;; Registers used:
  8014 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8020 ;;      Params:         0       0       0       0       0       0       0       0
  8021 ;;      Locals:         0       1       0       0       0       0       0       0
  8022 ;;      Temps:          0       1       0       0       0       0       0       0
  8023 ;;      Totals:         0       2       0       0       0       0       0       0
  8024 ;;Total ram usage:        2 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    8
  8027 ;; This function calls:
  8028 ;;		_RfSWPointSelect
  8029 ;;		_setBuz
  8030 ;;		_setDelayOff_GO
  8031 ;;		_setDimmerLights_Switch
  8032 ;;		_setDimmerLights_Trigger
  8033 ;;		_setRF_DimmerLights
  8034 ;;		_setSw_Status
  8035 ;;		_setTxData
  8036 ;; This function is called by:
  8037 ;;		_setControl_Lights_Table
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _setRFSW_Control
  8043  0000'                    _setRFSW_Control:	
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8047                           ;setRFSW_Control@sw stored from wreg
  8048  0000' 0020               	movlb	0	; select bank0
  8049  0001' 00C3'              	movwf	setRFSW_Control@sw
  8050                           
  8051                           ;RF_Control_B1.c: 335: RfSWPointSelect(sw);
  8052  0002' 0843'              	movf	setRFSW_Control@sw,w
  8053  0003' 3180' 2000' 3180'  	fcall	_RfSWPointSelect
  8054                           
  8055                           ;RF_Control_B1.c: 336: if (!RFSW->Status) {
  8056  0006' 0021               	movlb	1	; select bank1
  8057  0007' 0800'              	movf	_RFSW^(0+128),w
  8058  0008' 0086               	movwf	6
  8059  0009' 0187               	clrf	7
  8060  000A' 1801               	btfsc	1,0
  8061  000B' 2800'              	goto	l8311
  8062                           
  8063                           ;RF_Control_B1.c: 337: if (RF_Data[16] == 0x80) {
  8064  000C' 0810'              	movf	(_RF_Data^(0+128)+16),w
  8065  000D' 3A80               	xorlw	128
  8066  000E' 1D03               	skipz
  8067  000F' 2800'              	goto	l8301
  8068                           
  8069                           ;RF_Control_B1.c: 338: setDelayOff_GO(sw, 1, RF_Data[17]);
  8070  0010' 0020               	movlb	0	; select bank0
  8071  0011' 0183'              	clrf	setDelayOff_GO@command
  8072  0012' 0A83'              	incf	setDelayOff_GO@command,f
  8073  0013' 0021               	movlb	1	; select bank1
  8074  0014' 0811'              	movf	(_RF_Data^(0+128)+17),w
  8075  0015' 0020               	movlb	0	; select bank0
  8076  0016' 00C2'              	movwf	??_setRFSW_Control
  8077  0017' 0842'              	movf	??_setRFSW_Control,w
  8078  0018' 0084'              	movwf	setDelayOff_GO@value
  8079  0019' 0843'              	movf	setRFSW_Control@sw,w
  8080  001A' 3180' 2000' 3180'  	fcall	_setDelayOff_GO
  8081  001D'                    l8301:	
  8082                           
  8083                           ;RF_Control_B1.c: 339: }
  8084                           ;RF_Control_B1.c: 340: RFSW->Status = 1;
  8085  001D' 0021               	movlb	1	; select bank1
  8086  001E' 0800'              	movf	_RFSW^(0+128),w
  8087  001F' 0086               	movwf	6
  8088  0020' 0187               	clrf	7
  8089  0021' 1401               	bsf	1,0
  8090                           
  8091                           ;RF_Control_B1.c: 341: setSw_Status(sw, 1);
  8092  0022' 0020               	movlb	0	; select bank0
  8093  0023' 0182'              	clrf	setSw_Status@command
  8094  0024' 0A82'              	incf	setSw_Status@command,f
  8095  0025' 0843'              	movf	setRFSW_Control@sw,w
  8096  0026' 3180' 2000' 3180'  	fcall	_setSw_Status
  8097                           
  8098                           ;RF_Control_B1.c: 343: setDimmerLights_Trigger(sw, 1);
  8099  0029' 0020               	movlb	0	; select bank0
  8100  002A' 0182'              	clrf	setDimmerLights_Trigger@command
  8101  002B' 0A82'              	incf	setDimmerLights_Trigger@command,f
  8102  002C' 0843'              	movf	setRFSW_Control@sw,w
  8103  002D' 3180' 2000' 3180'  	fcall	_setDimmerLights_Trigger
  8104                           
  8105                           ;RF_Control_B1.c: 344: setDimmerLights_Switch(sw, 1);
  8106  0030' 0020               	movlb	0	; select bank0
  8107  0031' 0182'              	clrf	setDimmerLights_Switch@command
  8108  0032' 0A82'              	incf	setDimmerLights_Switch@command,f
  8109  0033' 0843'              	movf	setRFSW_Control@sw,w
  8110  0034' 3180' 2000' 3180'  	fcall	_setDimmerLights_Switch
  8111                           
  8112                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, RFSW->Status);
  8113  0037' 0021               	movlb	1	; select bank1
  8114  0038' 0800'              	movf	_RFSW^(0+128),w
  8115  0039' 0086               	movwf	6
  8116  003A' 0187               	clrf	7
  8117  003B' 3000               	movlw	0
  8118  003C' 1801               	btfsc	1,0
  8119  003D' 3001               	movlw	1
  8120  003E' 0020               	movlb	0	; select bank0
  8121  003F' 00BD'              	movwf	setRF_DimmerLights@on
  8122  0040' 2800'              	goto	L2
  8123  0041'                    l8311:	
  8124                           ;RF_Control_B1.c: 347: } else {
  8125                           
  8126                           
  8127                           ;RF_Control_B1.c: 348: if (RF_Data[16] == 0x80) {
  8128  0041' 0021               	movlb	1	; select bank1
  8129  0042' 0810'              	movf	(_RF_Data^(0+128)+16),w
  8130  0043' 3A80               	xorlw	128
  8131  0044' 1D03               	skipz
  8132  0045' 2800'              	goto	l8315
  8133                           
  8134                           ;RF_Control_B1.c: 349: setDelayOff_GO(sw, 1, RF_Data[17]);
  8135  0046' 0020               	movlb	0	; select bank0
  8136  0047' 0183'              	clrf	setDelayOff_GO@command
  8137  0048' 0A83'              	incf	setDelayOff_GO@command,f
  8138  0049' 0021               	movlb	1	; select bank1
  8139  004A' 0811'              	movf	(_RF_Data^(0+128)+17),w
  8140  004B' 0020               	movlb	0	; select bank0
  8141  004C' 00C2'              	movwf	??_setRFSW_Control
  8142  004D' 0842'              	movf	??_setRFSW_Control,w
  8143  004E' 0084'              	movwf	setDelayOff_GO@value
  8144  004F' 0843'              	movf	setRFSW_Control@sw,w
  8145  0050' 3180' 2000' 3180'  	fcall	_setDelayOff_GO
  8146                           
  8147                           ;RF_Control_B1.c: 350: setRF_DimmerLights(sw, 1);
  8148  0053' 0020               	movlb	0	; select bank0
  8149  0054' 01BD'              	clrf	setRF_DimmerLights@on
  8150  0055' 0ABD'              	incf	setRF_DimmerLights@on,f
  8151  0056' 2800'              	goto	L2
  8152  0057'                    l8315:	
  8153                           ;RF_Control_B1.c: 351: } else {
  8154                           
  8155                           
  8156                           ;RF_Control_B1.c: 352: RFSW->Status = 0;
  8157  0057' 0021               	movlb	1	; select bank1
  8158  0058' 0800'              	movf	_RFSW^(0+128),w
  8159  0059' 0086               	movwf	6
  8160  005A' 0187               	clrf	7
  8161  005B' 1001               	bcf	1,0
  8162                           
  8163                           ;RF_Control_B1.c: 353: setSw_Status(sw, 0);
  8164  005C' 0020               	movlb	0	; select bank0
  8165  005D' 0182'              	clrf	setSw_Status@command
  8166  005E' 0843'              	movf	setRFSW_Control@sw,w
  8167  005F' 3180' 2000' 3180'  	fcall	_setSw_Status
  8168                           
  8169                           ;RF_Control_B1.c: 355: setDimmerLights_Trigger(sw, 1);
  8170  0062' 0020               	movlb	0	; select bank0
  8171  0063' 0182'              	clrf	setDimmerLights_Trigger@command
  8172  0064' 0A82'              	incf	setDimmerLights_Trigger@command,f
  8173  0065' 0843'              	movf	setRFSW_Control@sw,w
  8174  0066' 3180' 2000' 3180'  	fcall	_setDimmerLights_Trigger
  8175                           
  8176                           ;RF_Control_B1.c: 356: setDimmerLights_Switch(sw, RFSW->Status);
  8177  0069' 0021               	movlb	1	; select bank1
  8178  006A' 0800'              	movf	_RFSW^(0+128),w
  8179  006B' 0086               	movwf	6
  8180  006C' 0187               	clrf	7
  8181  006D' 3000               	movlw	0
  8182  006E' 1801               	btfsc	1,0
  8183  006F' 3001               	movlw	1
  8184  0070' 0020               	movlb	0	; select bank0
  8185  0071' 0082'              	movwf	setDimmerLights_Switch@command
  8186  0072' 0843'              	movf	setRFSW_Control@sw,w
  8187  0073' 3180' 2000' 3180'  	fcall	_setDimmerLights_Switch
  8188                           
  8189                           ;RF_Control_B1.c: 358: setDelayOff_GO(sw, 0, 0);
  8190  0076' 0020               	movlb	0	; select bank0
  8191  0077' 0183'              	clrf	setDelayOff_GO@command
  8192  0078' 0184'              	clrf	setDelayOff_GO@value
  8193  0079' 0843'              	movf	setRFSW_Control@sw,w
  8194  007A' 3180' 2000' 3180'  	fcall	_setDelayOff_GO
  8195                           
  8196                           ;RF_Control_B1.c: 359: setRF_DimmerLights(sw, 0);
  8197  007D' 0020               	movlb	0	; select bank0
  8198  007E' 01BD'              	clrf	setRF_DimmerLights@on
  8199  007F'                    L2:	
  8200  007F' 0843'              	movf	setRFSW_Control@sw,w
  8201  0080' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
  8202                           
  8203                           ;RF_Control_B1.c: 360: }
  8204                           ;RF_Control_B1.c: 361: }
  8205                           ;RF_Control_B1.c: 362: setBuz(1, 100);
  8206  0083' 3064               	movlw	100
  8207  0084' 0020               	movlb	0	; select bank0
  8208  0085' 0086'              	movwf	setBuz@time
  8209  0086' 3000               	movlw	0
  8210  0087' 0087'              	movwf	setBuz@time+1
  8211  0088' 3001               	movlw	1
  8212  0089' 3180' 2000' 3180'  	fcall	_setBuz
  8213                           
  8214                           ;RF_Control_B1.c: 363: setTxData(1);
  8215  008C' 3001               	movlw	1
  8216  008D' 3180' 2000'        	fcall	_setTxData
  8217  008F' 0008               	return
  8218  0090'                    __end_of_setRFSW_Control:	
  8219                           
  8220                           	psect	text33
  8221  0000'                    __ptext33:	
  8222 ;; *************** function _setDelayOff_GO *****************
  8223 ;; Defined at:
  8224 ;;		line 92 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  8225 ;; Parameters:    Size  Location     Type
  8226 ;;  sw              1    wreg     unsigned char 
  8227 ;;  command         1    3[BANK0 ] unsigned char 
  8228 ;;  value           1    4[BANK0 ] unsigned char 
  8229 ;; Auto vars:     Size  Location     Type
  8230 ;;  sw              1    7[BANK0 ] unsigned char 
  8231 ;; Return value:  Size  Location     Type
  8232 ;;		None               void
  8233 ;; Registers used:
  8234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8235 ;; Tracked objects:
  8236 ;;		On entry : 0/0
  8237 ;;		On exit  : 0/0
  8238 ;;		Unchanged: 0/0
  8239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8240 ;;      Params:         0       2       0       0       0       0       0       0
  8241 ;;      Locals:         0       1       0       0       0       0       0       0
  8242 ;;      Temps:          0       2       0       0       0       0       0       0
  8243 ;;      Totals:         0       5       0       0       0       0       0       0
  8244 ;;Total ram usage:        5 bytes
  8245 ;; Hardware stack levels used:    1
  8246 ;; Hardware stack levels required when called:    5
  8247 ;; This function calls:
  8248 ;;		_DelayOffPointSelect
  8249 ;;		_DelayTimejudge
  8250 ;; This function is called by:
  8251 ;;		_setRFSW_Control
  8252 ;;		_Sw_DimmerOffFunc
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           
  8257                           ;psect for function _setDelayOff_GO
  8258  0000'                    _setDelayOff_GO:	
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8262                           ;setDelayOff_GO@sw stored from wreg
  8263  0000' 0020               	movlb	0	; select bank0
  8264  0001' 0087'              	movwf	setDelayOff_GO@sw
  8265                           
  8266                           ;DelayOff_B1.c: 94: DelayOffPointSelect(sw);
  8267  0002' 0807'              	movf	setDelayOff_GO@sw,w
  8268  0003' 3180' 2000' 3180'  	fcall	_DelayOffPointSelect
  8269                           
  8270                           ;DelayOff_B1.c: 95: if(DelayOff->Enable)
  8271  0006' 0021               	movlb	1	; select bank1
  8272  0007' 0800'              	movf	_DelayOff^(0+128),w
  8273  0008' 0086               	movwf	6
  8274  0009' 0187               	clrf	7
  8275  000A' 1C01               	btfss	1,0
  8276  000B' 0008               	return
  8277                           
  8278                           ;DelayOff_B1.c: 96: {
  8279                           ;DelayOff_B1.c: 97: DelayOff->GO=command;
  8280  000C' 0800'              	movf	_DelayOff^(0+128),w
  8281  000D' 0086               	movwf	6
  8282  000E' 0187               	clrf	7
  8283  000F' 0020               	movlb	0	; select bank0
  8284  0010' 0803'              	movf	setDelayOff_GO@command,w
  8285  0011' 1081               	bcf	1,1
  8286  0012' 1D03               	skipz
  8287  0013' 1481               	bsf	1,1
  8288                           
  8289                           ;DelayOff_B1.c: 98: if(command)
  8290  0014' 0803'              	movf	setDelayOff_GO@command,w
  8291  0015' 1903               	btfsc	3,2
  8292  0016' 2800'              	goto	l6163
  8293                           
  8294                           ;DelayOff_B1.c: 99: {
  8295                           ;DelayOff_B1.c: 100: DelayOff->Value=DelayTimejudge(value);
  8296  0017' 0804'              	movf	setDelayOff_GO@value,w
  8297  0018' 3180' 2000' 3180'  	fcall	_DelayTimejudge
  8298  001B' 0020               	movlb	0	; select bank0
  8299  001C' 0085'              	movwf	??_setDelayOff_GO
  8300  001D' 0021               	movlb	1	; select bank1
  8301  001E' 0A00'              	incf	_DelayOff^(0+128),w
  8302  001F' 0086               	movwf	6
  8303  0020' 0187               	clrf	7
  8304  0021' 0020               	movlb	0	; select bank0
  8305  0022' 0805'              	movf	??_setDelayOff_GO,w
  8306  0023' 0081               	movwf	1
  8307                           
  8308                           ;DelayOff_B1.c: 101: if(((value%16)==5 || !(value%16)) && value <= 0x25)
  8309  0024' 300F               	movlw	15
  8310  0025' 0504'              	andwf	setDelayOff_GO@value,w
  8311  0026' 0085'              	movwf	??_setDelayOff_GO
  8312  0027' 0805'              	movf	??_setDelayOff_GO,w
  8313  0028' 3A05               	xorlw	5
  8314  0029' 1903               	skipnz
  8315  002A' 2800'              	goto	l6157
  8316  002B' 0804'              	movf	setDelayOff_GO@value,w
  8317  002C' 390F               	andlw	15
  8318  002D' 1D03               	btfss	3,2
  8319  002E' 2800'              	goto	l6161
  8320  002F'                    l6157:	
  8321  002F' 3026               	movlw	38
  8322  0030' 0204'              	subwf	setDelayOff_GO@value,w
  8323  0031' 1803               	skipnc
  8324  0032' 2800'              	goto	l6161
  8325                           
  8326                           ;DelayOff_B1.c: 102: {
  8327                           ;DelayOff_B1.c: 103: Product->Data[26+sw]=value;
  8328  0033' 0804'              	movf	setDelayOff_GO@value,w
  8329  0034' 2800'              	goto	L3
  8330  0035'                    l6161:	
  8331                           ;DelayOff_B1.c: 104: }
  8332                           
  8333                           
  8334                           ;DelayOff_B1.c: 105: else
  8335                           ;DelayOff_B1.c: 106: {
  8336                           ;DelayOff_B1.c: 107: Product->Data[26+sw]=0x05;
  8337  0035' 3005               	movlw	5
  8338  0036'                    L3:	
  8339  0036' 0085'              	movwf	??_setDelayOff_GO
  8340  0037' 0807'              	movf	setDelayOff_GO@sw,w
  8341  0038' 3E1A               	addlw	26
  8342  0039' 0700'              	addwf	_Product,w
  8343  003A' 0086'              	movwf	??_setDelayOff_GO+1
  8344  003B' 0806'              	movf	??_setDelayOff_GO+1,w
  8345  003C' 0086               	movwf	6
  8346  003D' 3001               	movlw	1	; select bank2/3
  8347  003E' 0087               	movwf	7
  8348  003F' 0805'              	movf	??_setDelayOff_GO,w
  8349  0040' 0081               	movwf	1
  8350                           
  8351                           ;DelayOff_B1.c: 108: }
  8352                           ;DelayOff_B1.c: 109: }
  8353  0041' 2800'              	goto	l6167
  8354  0042'                    l6163:	
  8355                           
  8356                           ;DelayOff_B1.c: 110: else if(!command)
  8357  0042' 0883'              	movf	setDelayOff_GO@command,f
  8358  0043' 1D03               	skipz
  8359  0044' 2800'              	goto	l6167
  8360                           
  8361                           ;DelayOff_B1.c: 111: {
  8362                           ;DelayOff_B1.c: 112: Product->Data[sw+26]=0;
  8363  0045' 0807'              	movf	setDelayOff_GO@sw,w
  8364  0046' 3E1A               	addlw	26
  8365  0047' 0700'              	addwf	_Product,w
  8366  0048' 0085'              	movwf	??_setDelayOff_GO
  8367  0049' 0805'              	movf	??_setDelayOff_GO,w
  8368  004A' 0086               	movwf	6
  8369  004B' 3001               	movlw	1	; select bank2/3
  8370  004C' 0087               	movwf	7
  8371  004D' 0181               	clrf	1
  8372  004E'                    l6167:	
  8373                           
  8374                           ;DelayOff_B1.c: 113: }
  8375                           ;DelayOff_B1.c: 114: DelayOff->SecondTime=0;
  8376  004E' 0021               	movlb	1	; select bank1
  8377  004F' 0800'              	movf	_DelayOff^(0+128),w
  8378  0050' 3E02               	addlw	2
  8379  0051' 0086               	movwf	6
  8380  0052' 0187               	clrf	7
  8381  0053' 3000               	movlw	0
  8382  0054' 3FC0               	movwi [0]fsr1
  8383  0055' 3FC1               	movwi [1]fsr1
  8384                           
  8385                           ;DelayOff_B1.c: 115: DelayOff->MinuteTime=0;
  8386  0056' 0800'              	movf	_DelayOff^(0+128),w
  8387  0057' 3E04               	addlw	4
  8388  0058' 0086               	movwf	6
  8389  0059' 0187               	clrf	7
  8390  005A' 0181               	clrf	1
  8391  005B' 0008               	return
  8392  005C'                    __end_of_setDelayOff_GO:	
  8393                           
  8394                           	psect	text34
  8395  0000'                    __ptext34:	
  8396 ;; *************** function _DelayTimejudge *****************
  8397 ;; Defined at:
  8398 ;;		line 119 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  value           1    wreg     unsigned char 
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  value           1    2[BANK0 ] unsigned char 
  8403 ;;  i               1    1[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      unsigned char 
  8406 ;; Registers used:
  8407 ;;		wreg
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8413 ;;      Params:         0       0       0       0       0       0       0       0
  8414 ;;      Locals:         0       2       0       0       0       0       0       0
  8415 ;;      Temps:          0       1       0       0       0       0       0       0
  8416 ;;      Totals:         0       3       0       0       0       0       0       0
  8417 ;;Total ram usage:        3 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    4
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_setDelayOff_GO
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           
  8428                           ;psect for function _DelayTimejudge
  8429  0000'                    _DelayTimejudge:	
  8430                           
  8431                           ;incstack = 0
  8432                           ; Regs used in _DelayTimejudge: [wreg]
  8433                           ;DelayTimejudge@value stored from wreg
  8434  0000' 0020               	movlb	0	; select bank0
  8435  0001' 0082'              	movwf	DelayTimejudge@value
  8436                           
  8437                           ;DelayOff_B1.c: 121: char i=5;
  8438  0002' 3005               	movlw	5
  8439  0003' 0080'              	movwf	??_DelayTimejudge
  8440  0004' 0800'              	movf	??_DelayTimejudge,w
  8441  0005' 0081'              	movwf	DelayTimejudge@i
  8442                           
  8443                           ;DelayOff_B1.c: 122: if(value == 0x05)
  8444  0006' 0802'              	movf	DelayTimejudge@value,w
  8445  0007' 3A05               	xorlw	5
  8446  0008' 1D03               	skipz
  8447  0009' 2800'              	goto	l6003
  8448                           
  8449                           ;DelayOff_B1.c: 123: {
  8450                           ;DelayOff_B1.c: 124: i=5;
  8451  000A' 3005               	movlw	5
  8452  000B' 2800'              	goto	L8
  8453  000C'                    l6003:	
  8454                           ;DelayOff_B1.c: 125: }
  8455                           
  8456                           
  8457                           ;DelayOff_B1.c: 126: else if(value == 0x10)
  8458  000C' 0802'              	movf	DelayTimejudge@value,w
  8459  000D' 3A10               	xorlw	16
  8460  000E' 1D03               	skipz
  8461  000F' 2800'              	goto	l6007
  8462                           
  8463                           ;DelayOff_B1.c: 127: {
  8464                           ;DelayOff_B1.c: 128: i=10;
  8465  0010' 300A               	movlw	10
  8466  0011' 2800'              	goto	L8
  8467  0012'                    l6007:	
  8468                           ;DelayOff_B1.c: 129: }
  8469                           
  8470                           
  8471                           ;DelayOff_B1.c: 130: else if(value == 0x15)
  8472  0012' 0802'              	movf	DelayTimejudge@value,w
  8473  0013' 3A15               	xorlw	21
  8474  0014' 1D03               	skipz
  8475  0015' 2800'              	goto	l6011
  8476                           
  8477                           ;DelayOff_B1.c: 131: {
  8478                           ;DelayOff_B1.c: 132: i=15;
  8479  0016' 300F               	movlw	15
  8480  0017' 2800'              	goto	L8
  8481  0018'                    l6011:	
  8482                           ;DelayOff_B1.c: 133: }
  8483                           
  8484                           
  8485                           ;DelayOff_B1.c: 134: else if(value == 0x20)
  8486  0018' 0802'              	movf	DelayTimejudge@value,w
  8487  0019' 3A20               	xorlw	32
  8488  001A' 1D03               	skipz
  8489  001B' 2800'              	goto	l6015
  8490                           
  8491                           ;DelayOff_B1.c: 135: {
  8492                           ;DelayOff_B1.c: 136: i=20;
  8493  001C' 3014               	movlw	20
  8494  001D' 2800'              	goto	L8
  8495  001E'                    l6015:	
  8496                           ;DelayOff_B1.c: 137: }
  8497                           
  8498                           
  8499                           ;DelayOff_B1.c: 138: else if(value == 0x25)
  8500  001E' 0802'              	movf	DelayTimejudge@value,w
  8501  001F' 3A25               	xorlw	37
  8502  0020' 1D03               	skipz
  8503  0021' 2800'              	goto	l6019
  8504                           
  8505                           ;DelayOff_B1.c: 139: {
  8506                           ;DelayOff_B1.c: 140: i=25;
  8507  0022' 3019               	movlw	25
  8508  0023' 2800'              	goto	L8
  8509  0024'                    l6019:	
  8510                           ;DelayOff_B1.c: 141: }
  8511                           
  8512                           
  8513                           ;DelayOff_B1.c: 142: else if(value == 0x30)
  8514  0024' 0802'              	movf	DelayTimejudge@value,w
  8515  0025' 3A30               	xorlw	48
  8516  0026' 1D03               	skipz
  8517  0027' 2800'              	goto	l628
  8518                           
  8519                           ;DelayOff_B1.c: 143: {
  8520                           ;DelayOff_B1.c: 144: i=30;
  8521  0028' 301E               	movlw	30
  8522  0029'                    L8:	
  8523  0029' 0080'              	movwf	??_DelayTimejudge
  8524  002A' 0800'              	movf	??_DelayTimejudge,w
  8525  002B' 0081'              	movwf	DelayTimejudge@i
  8526  002C'                    l628:	
  8527                           
  8528                           ;DelayOff_B1.c: 145: }
  8529                           ;DelayOff_B1.c: 146: return i;
  8530  002C' 0801'              	movf	DelayTimejudge@i,w
  8531  002D' 0008               	return
  8532  002E'                    __end_of_DelayTimejudge:	
  8533                           
  8534                           	psect	text35
  8535  0000'                    __ptext35:	
  8536 ;; *************** function _setRFSW_AdjControl *****************
  8537 ;; Defined at:
  8538 ;;		line 367 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;  sw              1    wreg     unsigned char 
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;  sw              1   70[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;		None               void
  8545 ;; Registers used:
  8546 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8552 ;;      Params:         0       0       0       0       0       0       0       0
  8553 ;;      Locals:         0       1       0       0       0       0       0       0
  8554 ;;      Temps:          0       2       0       0       0       0       0       0
  8555 ;;      Totals:         0       3       0       0       0       0       0       0
  8556 ;;Total ram usage:        3 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    9
  8559 ;; This function calls:
  8560 ;;		_RfSWPointSelect
  8561 ;;		_setRF_DimmerValue
  8562 ;;		_setTxData
  8563 ;; This function is called by:
  8564 ;;		_setControl_Lights_Table
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           
  8569                           ;psect for function _setRFSW_AdjControl
  8570  0000'                    _setRFSW_AdjControl:	
  8571                           
  8572                           ;incstack = 0
  8573                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8574                           ;setRFSW_AdjControl@sw stored from wreg
  8575  0000' 0020               	movlb	0	; select bank0
  8576  0001' 00C6'              	movwf	setRFSW_AdjControl@sw
  8577                           
  8578                           ;RF_Control_B1.c: 368: RfSWPointSelect(sw);
  8579  0002' 0846'              	movf	setRFSW_AdjControl@sw,w
  8580  0003' 3180' 2000' 3180'  	fcall	_RfSWPointSelect
  8581                           
  8582                           ;RF_Control_B1.c: 369: if (RFSW->Status) {
  8583  0006' 0021               	movlb	1	; select bank1
  8584  0007' 0800'              	movf	_RFSW^(0+128),w
  8585  0008' 0086               	movwf	6
  8586  0009' 0187               	clrf	7
  8587  000A' 1C01               	btfss	1,0
  8588  000B' 2800'              	goto	l6409
  8589                           
  8590                           ;RF_Control_B1.c: 370: Memory->Modify=1;
  8591  000C' 0800'              	movf	_Memory^(0+128),w
  8592  000D' 3E22               	addlw	34
  8593  000E' 0086               	movwf	6
  8594  000F' 3001               	movlw	1	; select bank2/3
  8595  0010' 0087               	movwf	7
  8596  0011' 1401               	bsf	1,0
  8597                           
  8598                           ;RF_Control_B1.c: 371: setRF_DimmerValue(sw);
  8599  0012' 0020               	movlb	0	; select bank0
  8600  0013' 0846'              	movf	setRFSW_AdjControl@sw,w
  8601  0014' 3180' 2000' 3180'  	fcall	_setRF_DimmerValue
  8602                           
  8603                           ;RF_Control_B1.c: 372: } else {
  8604  0017' 2800'              	goto	l2280
  8605  0018'                    l6409:	
  8606                           
  8607                           ;RF_Control_B1.c: 373: Product->Data[9]=Product->Data[20 + sw];
  8608  0018' 0020               	movlb	0	; select bank0
  8609  0019' 0846'              	movf	setRFSW_AdjControl@sw,w
  8610  001A' 3E14               	addlw	20
  8611  001B' 0700'              	addwf	_Product,w
  8612  001C' 00C4'              	movwf	??_setRFSW_AdjControl
  8613  001D' 0844'              	movf	??_setRFSW_AdjControl,w
  8614  001E' 0086               	movwf	6
  8615  001F' 3001               	movlw	1	; select bank2/3
  8616  0020' 0087               	movwf	7
  8617  0021' 0801               	movf	1,w
  8618  0022' 00C5'              	movwf	??_setRFSW_AdjControl+1
  8619  0023' 0800'              	movf	_Product,w
  8620  0024' 3E09               	addlw	9
  8621  0025' 0086               	movwf	6
  8622  0026' 3001               	movlw	1	; select bank2/3
  8623  0027' 0087               	movwf	7
  8624  0028' 0845'              	movf	??_setRFSW_AdjControl+1,w
  8625  0029' 0081               	movwf	1
  8626  002A'                    l2280:	
  8627                           
  8628                           ;RF_Control_B1.c: 374: }
  8629                           ;RF_Control_B1.c: 375: Product->Data[17]=Product->Data[26 + sw];
  8630  002A' 0020               	movlb	0	; select bank0
  8631  002B' 0846'              	movf	setRFSW_AdjControl@sw,w
  8632  002C' 3E1A               	addlw	26
  8633  002D' 0700'              	addwf	_Product,w
  8634  002E' 00C4'              	movwf	??_setRFSW_AdjControl
  8635  002F' 0844'              	movf	??_setRFSW_AdjControl,w
  8636  0030' 0086               	movwf	6
  8637  0031' 3001               	movlw	1	; select bank2/3
  8638  0032' 0087               	movwf	7
  8639  0033' 0801               	movf	1,w
  8640  0034' 00C5'              	movwf	??_setRFSW_AdjControl+1
  8641  0035' 0800'              	movf	_Product,w
  8642  0036' 3E11               	addlw	17
  8643  0037' 0086               	movwf	6
  8644  0038' 3001               	movlw	1	; select bank2/3
  8645  0039' 0087               	movwf	7
  8646  003A' 0845'              	movf	??_setRFSW_AdjControl+1,w
  8647  003B' 0081               	movwf	1
  8648                           
  8649                           ;RF_Control_B1.c: 376: setTxData(1);
  8650  003C' 3001               	movlw	1
  8651  003D' 3180' 2000'        	fcall	_setTxData
  8652  003F' 0008               	return
  8653  0040'                    __end_of_setRFSW_AdjControl:	
  8654                           
  8655                           	psect	text36
  8656  0000'                    __ptext36:	
  8657 ;; *************** function _setRF_DimmerValue *****************
  8658 ;; Defined at:
  8659 ;;		line 387 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  8660 ;; Parameters:    Size  Location     Type
  8661 ;;  lights          1    wreg     unsigned char 
  8662 ;; Auto vars:     Size  Location     Type
  8663 ;;  lights          1   67[BANK0 ] unsigned char 
  8664 ;; Return value:  Size  Location     Type
  8665 ;;		None               void
  8666 ;; Registers used:
  8667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8668 ;; Tracked objects:
  8669 ;;		On entry : 0/0
  8670 ;;		On exit  : 0/0
  8671 ;;		Unchanged: 0/0
  8672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8673 ;;      Params:         0       0       0       0       0       0       0       0
  8674 ;;      Locals:         0       1       0       0       0       0       0       0
  8675 ;;      Temps:          0       2       0       0       0       0       0       0
  8676 ;;      Totals:         0       3       0       0       0       0       0       0
  8677 ;;Total ram usage:        3 bytes
  8678 ;; Hardware stack levels used:    1
  8679 ;; Hardware stack levels required when called:    8
  8680 ;; This function calls:
  8681 ;;		_setDimmerLights_AdjRF
  8682 ;; This function is called by:
  8683 ;;		_setRFSW_AdjControl
  8684 ;; This function uses a non-reentrant model
  8685 ;;
  8686                           
  8687                           
  8688                           ;psect for function _setRF_DimmerValue
  8689  0000'                    _setRF_DimmerValue:	
  8690                           
  8691                           ;incstack = 0
  8692                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8693                           ;setRF_DimmerValue@lights stored from wreg
  8694  0000' 0020               	movlb	0	; select bank0
  8695  0001' 00C3'              	movwf	setRF_DimmerValue@lights
  8696                           
  8697                           ;RF_Control_B1.c: 388: if (RF_Data[9] > 0x64) {
  8698  0002' 3065               	movlw	101
  8699  0003' 0021               	movlb	1	; select bank1
  8700  0004' 0209'              	subwf	(_RF_Data^(0+128)+9),w
  8701  0005' 1C03               	skipc
  8702  0006' 2800'              	goto	l6257
  8703                           
  8704                           ;RF_Control_B1.c: 389: RF_Data[9] = 0x64;
  8705  0007' 3064               	movlw	100
  8706  0008' 0020               	movlb	0	; select bank0
  8707  0009' 00C1'              	movwf	??_setRF_DimmerValue
  8708  000A' 0841'              	movf	??_setRF_DimmerValue,w
  8709  000B' 0021               	movlb	1	; select bank1
  8710  000C' 0089'              	movwf	(_RF_Data^(0+128)+9)
  8711  000D'                    l6257:	
  8712                           
  8713                           ;RF_Control_B1.c: 390: }
  8714                           ;RF_Control_B1.c: 391: Product->Data[9]=RF_Data[9];
  8715  000D' 0809'              	movf	(_RF_Data^(0+128)+9),w
  8716  000E' 0020               	movlb	0	; select bank0
  8717  000F' 00C1'              	movwf	??_setRF_DimmerValue
  8718  0010' 0800'              	movf	_Product,w
  8719  0011' 3E09               	addlw	9
  8720  0012' 0086               	movwf	6
  8721  0013' 3001               	movlw	1	; select bank2/3
  8722  0014' 0087               	movwf	7
  8723  0015' 0841'              	movf	??_setRF_DimmerValue,w
  8724  0016' 0081               	movwf	1
  8725                           
  8726                           ;RF_Control_B1.c: 392: Product->Data[11]=lights;
  8727  0017' 0843'              	movf	setRF_DimmerValue@lights,w
  8728  0018' 00C1'              	movwf	??_setRF_DimmerValue
  8729  0019' 0800'              	movf	_Product,w
  8730  001A' 3E0B               	addlw	11
  8731  001B' 0086               	movwf	6
  8732  001C' 3001               	movlw	1	; select bank2/3
  8733  001D' 0087               	movwf	7
  8734  001E' 0841'              	movf	??_setRF_DimmerValue,w
  8735  001F' 0081               	movwf	1
  8736                           
  8737                           ;RF_Control_B1.c: 393: Product->Data[(20 + lights)]=Product->Data[9];
  8738  0020' 0800'              	movf	_Product,w
  8739  0021' 3E09               	addlw	9
  8740  0022' 0086               	movwf	6
  8741  0023' 3001               	movlw	1	; select bank2/3
  8742  0024' 0087               	movwf	7
  8743  0025' 0801               	movf	1,w
  8744  0026' 00C1'              	movwf	??_setRF_DimmerValue
  8745  0027' 0843'              	movf	setRF_DimmerValue@lights,w
  8746  0028' 3E14               	addlw	20
  8747  0029' 0700'              	addwf	_Product,w
  8748  002A' 00C2'              	movwf	??_setRF_DimmerValue+1
  8749  002B' 0842'              	movf	??_setRF_DimmerValue+1,w
  8750  002C' 0086               	movwf	6
  8751  002D' 3001               	movlw	1	; select bank2/3
  8752  002E' 0087               	movwf	7
  8753  002F' 0841'              	movf	??_setRF_DimmerValue,w
  8754  0030' 0081               	movwf	1
  8755                           
  8756                           ;RF_Control_B1.c: 394: setDimmerLights_AdjRF(lights);
  8757  0031' 0843'              	movf	setRF_DimmerValue@lights,w
  8758  0032' 3180' 2000'        	fcall	_setDimmerLights_AdjRF
  8759  0034' 0008               	return
  8760  0035'                    __end_of_setRF_DimmerValue:	
  8761                           
  8762                           	psect	text37
  8763  0000'                    __ptext37:	
  8764 ;; *************** function _setDimmerLights_AdjRF *****************
  8765 ;; Defined at:
  8766 ;;		line 423 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;  lights          1    wreg     unsigned char 
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;  lights          1   64[BANK0 ] unsigned char 
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8780 ;;      Params:         0       0       0       0       0       0       0       0
  8781 ;;      Locals:         0       1       0       0       0       0       0       0
  8782 ;;      Temps:          0       1       0       0       0       0       0       0
  8783 ;;      Totals:         0       2       0       0       0       0       0       0
  8784 ;;Total ram usage:        2 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    7
  8787 ;; This function calls:
  8788 ;;		_DimmerLightsPointSelect
  8789 ;;		_getPercentValue
  8790 ;; This function is called by:
  8791 ;;		_setRF_DimmerValue
  8792 ;; This function uses a non-reentrant model
  8793 ;;
  8794                           
  8795                           
  8796                           ;psect for function _setDimmerLights_AdjRF
  8797  0000'                    _setDimmerLights_AdjRF:	
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8801                           ;setDimmerLights_AdjRF@lights stored from wreg
  8802  0000' 0020               	movlb	0	; select bank0
  8803  0001' 00C0'              	movwf	setDimmerLights_AdjRF@lights
  8804                           
  8805                           ;Dimmer_B1.c: 425: DimmerLightsPointSelect(lights);
  8806  0002' 0840'              	movf	setDimmerLights_AdjRF@lights,w
  8807  0003' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
  8808                           
  8809                           ;Dimmer_B1.c: 426: DimmerLights->AdjRF=1;
  8810  0006' 0800'              	movf	_DimmerLights,w
  8811  0007' 0086               	movwf	6
  8812  0008' 3001               	movlw	1	; select bank2/3
  8813  0009' 0087               	movwf	7
  8814  000A' 1501               	bsf	1,2
  8815                           
  8816                           ;Dimmer_B1.c: 427: DimmerLights->Signal=1;
  8817  000B' 0800'              	movf	_DimmerLights,w
  8818  000C' 0086               	movwf	6
  8819  000D' 3001               	movlw	1	; select bank2/3
  8820  000E' 0087               	movwf	7
  8821  000F' 1481               	bsf	1,1
  8822                           
  8823                           ;Dimmer_B1.c: 428: DimmerLights->MaxmumValue=getPercentValue(Product->Data[9]);
  8824  0010' 0800'              	movf	_Product,w
  8825  0011' 3E09               	addlw	9
  8826  0012' 0086               	movwf	6
  8827  0013' 3001               	movlw	1	; select bank2/3
  8828  0014' 0087               	movwf	7
  8829  0015' 0801               	movf	1,w
  8830  0016' 3180' 2000'        	fcall	_getPercentValue
  8831  0018' 0020               	movlb	0	; select bank0
  8832  0019' 00BF'              	movwf	??_setDimmerLights_AdjRF
  8833  001A' 0800'              	movf	_DimmerLights,w
  8834  001B' 3E05               	addlw	5
  8835  001C' 0086               	movwf	6
  8836  001D' 3001               	movlw	1	; select bank2/3
  8837  001E' 0087               	movwf	7
  8838  001F' 083F'              	movf	??_setDimmerLights_AdjRF,w
  8839  0020' 0081               	movwf	1
  8840  0021' 0008               	return
  8841  0022'                    __end_of_setDimmerLights_AdjRF:	
  8842                           
  8843                           	psect	text38
  8844  0000'                    __ptext38:	
  8845 ;; *************** function _getPercentValue *****************
  8846 ;; Defined at:
  8847 ;;		line 490 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
  8848 ;; Parameters:    Size  Location     Type
  8849 ;;  value           1    wreg     unsigned char 
  8850 ;; Auto vars:     Size  Location     Type
  8851 ;;  value           1   59[BANK0 ] unsigned char 
  8852 ;;  i               3   60[BANK0 ] float 
  8853 ;; Return value:  Size  Location     Type
  8854 ;;                  1    wreg      unsigned char 
  8855 ;; Registers used:
  8856 ;;		wreg, status,2, status,0, pclath, cstack
  8857 ;; Tracked objects:
  8858 ;;		On entry : 0/0
  8859 ;;		On exit  : 0/0
  8860 ;;		Unchanged: 0/0
  8861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8862 ;;      Params:         0       0       0       0       0       0       0       0
  8863 ;;      Locals:         0       4       0       0       0       0       0       0
  8864 ;;      Temps:          0       2       0       0       0       0       0       0
  8865 ;;      Totals:         0       6       0       0       0       0       0       0
  8866 ;;Total ram usage:        6 bytes
  8867 ;; Hardware stack levels used:    1
  8868 ;; Hardware stack levels required when called:    6
  8869 ;; This function calls:
  8870 ;;		___awtoft
  8871 ;;		___ftadd
  8872 ;;		___ftdiv
  8873 ;;		___ftmul
  8874 ;;		___fttol
  8875 ;; This function is called by:
  8876 ;;		_setDimmerLights_AdjRF
  8877 ;; This function uses a non-reentrant model
  8878 ;;
  8879                           
  8880                           
  8881                           ;psect for function _getPercentValue
  8882  0000'                    _getPercentValue:	
  8883                           
  8884                           ;incstack = 0
  8885                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8886                           ;getPercentValue@value stored from wreg
  8887  0000' 0020               	movlb	0	; select bank0
  8888  0001' 00BB'              	movwf	getPercentValue@value
  8889                           
  8890                           ;Dimmer_B1.c: 493: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
  8891  0002' 3000               	movlw	0
  8892  0003' 00BC'              	movwf	getPercentValue@i
  8893  0004' 3054               	movlw	84
  8894  0005' 00BD'              	movwf	getPercentValue@i+1
  8895  0006' 3042               	movlw	66
  8896  0007' 00BE'              	movwf	getPercentValue@i+2
  8897                           
  8898                           ;Dimmer_B1.c: 494: i/=100;
  8899  0008' 3000               	movlw	0
  8900  0009' 008E'              	movwf	___ftdiv@f2
  8901  000A' 30C8               	movlw	200
  8902  000B' 008F'              	movwf	___ftdiv@f2+1
  8903  000C' 3042               	movlw	66
  8904  000D' 0090'              	movwf	___ftdiv@f2+2
  8905  000E' 083C'              	movf	getPercentValue@i,w
  8906  000F' 0091'              	movwf	___ftdiv@f1
  8907  0010' 083D'              	movf	getPercentValue@i+1,w
  8908  0011' 0092'              	movwf	___ftdiv@f1+1
  8909  0012' 083E'              	movf	getPercentValue@i+2,w
  8910  0013' 0093'              	movwf	___ftdiv@f1+2
  8911  0014' 3180' 2000' 3180'  	fcall	___ftdiv
  8912  0017' 0020               	movlb	0	; select bank0
  8913  0018' 080E'              	movf	?___ftdiv,w
  8914  0019' 00BC'              	movwf	getPercentValue@i
  8915  001A' 080F'              	movf	?___ftdiv+1,w
  8916  001B' 00BD'              	movwf	getPercentValue@i+1
  8917  001C' 0810'              	movf	?___ftdiv+2,w
  8918  001D' 00BE'              	movwf	getPercentValue@i+2
  8919                           
  8920                           ;Dimmer_B1.c: 495: return (char)(((100-value)*i)+((char)((100-55)*1.5)));
  8921  001E' 083B'              	movf	getPercentValue@value,w
  8922  001F' 00B9'              	movwf	??_getPercentValue
  8923  0020' 01BA'              	clrf	??_getPercentValue+1
  8924  0021' 09B9'              	comf	??_getPercentValue,f
  8925  0022' 09BA'              	comf	??_getPercentValue+1,f
  8926  0023' 0AB9'              	incf	??_getPercentValue,f
  8927  0024' 1903               	skipnz
  8928  0025' 0ABA'              	incf	??_getPercentValue+1,f
  8929  0026' 0839'              	movf	??_getPercentValue,w
  8930  0027' 3E64               	addlw	100
  8931  0028' 0088'              	movwf	___awtoft@c
  8932  0029' 3000               	movlw	0
  8933  002A' 3D3A'              	addwfc	??_getPercentValue+1,w
  8934  002B' 0089'              	movwf	___awtoft@c+1
  8935  002C' 3180' 2000' 3180'  	fcall	___awtoft
  8936  002F' 0020               	movlb	0	; select bank0
  8937  0030' 0808'              	movf	?___awtoft,w
  8938  0031' 0091'              	movwf	___ftmul@f2
  8939  0032' 0809'              	movf	?___awtoft+1,w
  8940  0033' 0092'              	movwf	___ftmul@f2+1
  8941  0034' 080A'              	movf	?___awtoft+2,w
  8942  0035' 0093'              	movwf	___ftmul@f2+2
  8943  0036' 083C'              	movf	getPercentValue@i,w
  8944  0037' 008E'              	movwf	___ftmul@f1
  8945  0038' 083D'              	movf	getPercentValue@i+1,w
  8946  0039' 008F'              	movwf	___ftmul@f1+1
  8947  003A' 083E'              	movf	getPercentValue@i+2,w
  8948  003B' 0090'              	movwf	___ftmul@f1+2
  8949  003C' 3180' 2000' 3180'  	fcall	___ftmul
  8950  003F' 0020               	movlb	0	; select bank0
  8951  0040' 080E'              	movf	?___ftmul,w
  8952  0041' 00A1'              	movwf	___ftadd@f2
  8953  0042' 080F'              	movf	?___ftmul+1,w
  8954  0043' 00A2'              	movwf	___ftadd@f2+1
  8955  0044' 0810'              	movf	?___ftmul+2,w
  8956  0045' 00A3'              	movwf	___ftadd@f2+2
  8957  0046' 3000               	movlw	0
  8958  0047' 009E'              	movwf	___ftadd@f1
  8959  0048' 3086               	movlw	134
  8960  0049' 009F'              	movwf	___ftadd@f1+1
  8961  004A' 3042               	movlw	66
  8962  004B' 00A0'              	movwf	___ftadd@f1+2
  8963  004C' 3180' 2000' 3180'  	fcall	___ftadd
  8964  004F' 0020               	movlb	0	; select bank0
  8965  0050' 081E'              	movf	?___ftadd,w
  8966  0051' 00AB'              	movwf	___fttol@f1
  8967  0052' 081F'              	movf	?___ftadd+1,w
  8968  0053' 00AC'              	movwf	___fttol@f1+1
  8969  0054' 0820'              	movf	?___ftadd+2,w
  8970  0055' 00AD'              	movwf	___fttol@f1+2
  8971  0056' 3180' 2000'        	fcall	___fttol
  8972  0058' 0020               	movlb	0	; select bank0
  8973  0059' 082B'              	movf	?___fttol,w
  8974  005A' 0008               	return
  8975  005B'                    __end_of_getPercentValue:	
  8976                           
  8977                           	psect	text39
  8978  0000'                    __ptext39:	
  8979 ;; *************** function ___ftmul *****************
  8980 ;; Defined at:
  8981 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;  f1              3   14[BANK0 ] float 
  8984 ;;  f2              3   17[BANK0 ] float 
  8985 ;; Auto vars:     Size  Location     Type
  8986 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8987 ;;  sign            1   29[BANK0 ] unsigned char 
  8988 ;;  cntr            1   28[BANK0 ] unsigned char 
  8989 ;;  exp             1   24[BANK0 ] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  3   14[BANK0 ] float 
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0, pclath, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8999 ;;      Params:         0       6       0       0       0       0       0       0
  9000 ;;      Locals:         0       6       0       0       0       0       0       0
  9001 ;;      Temps:          0       4       0       0       0       0       0       0
  9002 ;;      Totals:         0      16       0       0       0       0       0       0
  9003 ;;Total ram usage:       16 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    5
  9006 ;; This function calls:
  9007 ;;		___ftpack
  9008 ;; This function is called by:
  9009 ;;		_getPercentValue
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           
  9014                           ;psect for function ___ftmul
  9015  0000'                    ___ftmul:	
  9016                           
  9017                           ;incstack = 0
  9018                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9019  0000' 0020               	movlb	0	; select bank0
  9020  0001' 080E'              	movf	___ftmul@f1,w
  9021  0002' 0094'              	movwf	??___ftmul
  9022  0003' 080F'              	movf	___ftmul@f1+1,w
  9023  0004' 0095'              	movwf	??___ftmul+1
  9024  0005' 0810'              	movf	___ftmul@f1+2,w
  9025  0006' 0096'              	movwf	??___ftmul+2
  9026  0007' 1003               	clrc
  9027  0008' 0D15'              	rlf	??___ftmul+1,w
  9028  0009' 0D16'              	rlf	??___ftmul+2,w
  9029  000A' 0097'              	movwf	??___ftmul+3
  9030  000B' 0817'              	movf	??___ftmul+3,w
  9031  000C' 0098'              	movwf	___ftmul@exp
  9032  000D' 0898'              	movf	___ftmul@exp,f
  9033  000E' 1D03               	skipz
  9034  000F' 2800'              	goto	l5895
  9035  0010' 3000               	movlw	0
  9036  0011' 008E'              	movwf	?___ftmul
  9037  0012' 3000               	movlw	0
  9038  0013' 008F'              	movwf	?___ftmul+1
  9039  0014' 3000               	movlw	0
  9040  0015' 0090'              	movwf	?___ftmul+2
  9041  0016' 0008               	return
  9042  0017'                    l5895:	
  9043  0017' 0811'              	movf	___ftmul@f2,w
  9044  0018' 0094'              	movwf	??___ftmul
  9045  0019' 0812'              	movf	___ftmul@f2+1,w
  9046  001A' 0095'              	movwf	??___ftmul+1
  9047  001B' 0813'              	movf	___ftmul@f2+2,w
  9048  001C' 0096'              	movwf	??___ftmul+2
  9049  001D' 1003               	clrc
  9050  001E' 0D15'              	rlf	??___ftmul+1,w
  9051  001F' 0D16'              	rlf	??___ftmul+2,w
  9052  0020' 0097'              	movwf	??___ftmul+3
  9053  0021' 0817'              	movf	??___ftmul+3,w
  9054  0022' 009D'              	movwf	___ftmul@sign
  9055  0023' 089D'              	movf	___ftmul@sign,f
  9056  0024' 1D03               	skipz
  9057  0025' 2800'              	goto	l5901
  9058  0026' 3000               	movlw	0
  9059  0027' 008E'              	movwf	?___ftmul
  9060  0028' 3000               	movlw	0
  9061  0029' 008F'              	movwf	?___ftmul+1
  9062  002A' 3000               	movlw	0
  9063  002B' 0090'              	movwf	?___ftmul+2
  9064  002C' 0008               	return
  9065  002D'                    l5901:	
  9066  002D' 081D'              	movf	___ftmul@sign,w
  9067  002E' 3E7B               	addlw	123
  9068  002F' 0094'              	movwf	??___ftmul
  9069  0030' 0814'              	movf	??___ftmul,w
  9070  0031' 0798'              	addwf	___ftmul@exp,f
  9071  0032' 080E'              	movf	___ftmul@f1,w
  9072  0033' 0094'              	movwf	??___ftmul
  9073  0034' 080F'              	movf	___ftmul@f1+1,w
  9074  0035' 0095'              	movwf	??___ftmul+1
  9075  0036' 0810'              	movf	___ftmul@f1+2,w
  9076  0037' 0096'              	movwf	??___ftmul+2
  9077  0038' 3010               	movlw	16
  9078  0039'                    u4205:	
  9079  0039' 3696'              	lsrf	??___ftmul+2,f
  9080  003A' 0C95'              	rrf	??___ftmul+1,f
  9081  003B' 0C94'              	rrf	??___ftmul,f
  9082  003C' 0B89               	decfsz	9,f
  9083  003D' 2800'              	goto	u4205
  9084  003E' 0814'              	movf	??___ftmul,w
  9085  003F' 0097'              	movwf	??___ftmul+3
  9086  0040' 0817'              	movf	??___ftmul+3,w
  9087  0041' 009D'              	movwf	___ftmul@sign
  9088  0042' 0811'              	movf	___ftmul@f2,w
  9089  0043' 0094'              	movwf	??___ftmul
  9090  0044' 0812'              	movf	___ftmul@f2+1,w
  9091  0045' 0095'              	movwf	??___ftmul+1
  9092  0046' 0813'              	movf	___ftmul@f2+2,w
  9093  0047' 0096'              	movwf	??___ftmul+2
  9094  0048' 3010               	movlw	16
  9095  0049'                    u4215:	
  9096  0049' 3696'              	lsrf	??___ftmul+2,f
  9097  004A' 0C95'              	rrf	??___ftmul+1,f
  9098  004B' 0C94'              	rrf	??___ftmul,f
  9099  004C' 0B89               	decfsz	9,f
  9100  004D' 2800'              	goto	u4215
  9101  004E' 0814'              	movf	??___ftmul,w
  9102  004F' 0097'              	movwf	??___ftmul+3
  9103  0050' 0817'              	movf	??___ftmul+3,w
  9104  0051' 069D'              	xorwf	___ftmul@sign,f
  9105  0052' 3080               	movlw	128
  9106  0053' 0094'              	movwf	??___ftmul
  9107  0054' 0814'              	movf	??___ftmul,w
  9108  0055' 059D'              	andwf	___ftmul@sign,f
  9109  0056' 178F'              	bsf	___ftmul@f1+1,7
  9110  0057' 1792'              	bsf	___ftmul@f2+1,7
  9111  0058' 30FF               	movlw	255
  9112  0059' 0591'              	andwf	___ftmul@f2,f
  9113  005A' 30FF               	movlw	255
  9114  005B' 0592'              	andwf	___ftmul@f2+1,f
  9115  005C' 3000               	movlw	0
  9116  005D' 0593'              	andwf	___ftmul@f2+2,f
  9117  005E' 3000               	movlw	0
  9118  005F' 0099'              	movwf	___ftmul@f3_as_product
  9119  0060' 3000               	movlw	0
  9120  0061' 009A'              	movwf	___ftmul@f3_as_product+1
  9121  0062' 3000               	movlw	0
  9122  0063' 009B'              	movwf	___ftmul@f3_as_product+2
  9123  0064' 3007               	movlw	7
  9124  0065' 0094'              	movwf	??___ftmul
  9125  0066' 0814'              	movf	??___ftmul,w
  9126  0067' 009C'              	movwf	___ftmul@cntr
  9127  0068'                    l5913:	
  9128  0068' 1C0E'              	btfss	___ftmul@f1,0
  9129  0069' 2800'              	goto	l5917
  9130  006A' 0811'              	movf	___ftmul@f2,w
  9131  006B' 0799'              	addwf	___ftmul@f3_as_product,f
  9132  006C' 0812'              	movf	___ftmul@f2+1,w
  9133  006D' 3D9A'              	addwfc	___ftmul@f3_as_product+1,f
  9134  006E' 0813'              	movf	___ftmul@f2+2,w
  9135  006F' 3D9B'              	addwfc	___ftmul@f3_as_product+2,f
  9136  0070'                    l5917:	
  9137  0070' 3001               	movlw	1
  9138  0071'                    u4235:	
  9139  0071' 3690'              	lsrf	___ftmul@f1+2,f
  9140  0072' 0C8F'              	rrf	___ftmul@f1+1,f
  9141  0073' 0C8E'              	rrf	___ftmul@f1,f
  9142  0074' 0B89               	decfsz	9,f
  9143  0075' 2800'              	goto	u4235
  9144  0076' 3001               	movlw	1
  9145  0077'                    u4245:	
  9146  0077' 3591'              	lslf	___ftmul@f2,f
  9147  0078' 0D92'              	rlf	___ftmul@f2+1,f
  9148  0079' 0D93'              	rlf	___ftmul@f2+2,f
  9149  007A' 0B89               	decfsz	9,f
  9150  007B' 2800'              	goto	u4245
  9151  007C' 3001               	movlw	1
  9152  007D' 029C'              	subwf	___ftmul@cntr,f
  9153  007E' 1D03               	btfss	3,2
  9154  007F' 2800'              	goto	l5913
  9155  0080' 3009               	movlw	9
  9156  0081' 0094'              	movwf	??___ftmul
  9157  0082' 0814'              	movf	??___ftmul,w
  9158  0083' 009C'              	movwf	___ftmul@cntr
  9159  0084'                    l5925:	
  9160  0084' 1C0E'              	btfss	___ftmul@f1,0
  9161  0085' 2800'              	goto	l5929
  9162  0086' 0811'              	movf	___ftmul@f2,w
  9163  0087' 0799'              	addwf	___ftmul@f3_as_product,f
  9164  0088' 0812'              	movf	___ftmul@f2+1,w
  9165  0089' 3D9A'              	addwfc	___ftmul@f3_as_product+1,f
  9166  008A' 0813'              	movf	___ftmul@f2+2,w
  9167  008B' 3D9B'              	addwfc	___ftmul@f3_as_product+2,f
  9168  008C'                    l5929:	
  9169  008C' 3001               	movlw	1
  9170  008D'                    u4275:	
  9171  008D' 3690'              	lsrf	___ftmul@f1+2,f
  9172  008E' 0C8F'              	rrf	___ftmul@f1+1,f
  9173  008F' 0C8E'              	rrf	___ftmul@f1,f
  9174  0090' 0B89               	decfsz	9,f
  9175  0091' 2800'              	goto	u4275
  9176  0092' 3001               	movlw	1
  9177  0093'                    u4285:	
  9178  0093' 369B'              	lsrf	___ftmul@f3_as_product+2,f
  9179  0094' 0C9A'              	rrf	___ftmul@f3_as_product+1,f
  9180  0095' 0C99'              	rrf	___ftmul@f3_as_product,f
  9181  0096' 0B89               	decfsz	9,f
  9182  0097' 2800'              	goto	u4285
  9183  0098' 3001               	movlw	1
  9184  0099' 029C'              	subwf	___ftmul@cntr,f
  9185  009A' 1D03               	btfss	3,2
  9186  009B' 2800'              	goto	l5925
  9187  009C' 0819'              	movf	___ftmul@f3_as_product,w
  9188  009D' 0080'              	movwf	___ftpack@arg
  9189  009E' 081A'              	movf	___ftmul@f3_as_product+1,w
  9190  009F' 0081'              	movwf	___ftpack@arg+1
  9191  00A0' 081B'              	movf	___ftmul@f3_as_product+2,w
  9192  00A1' 0082'              	movwf	___ftpack@arg+2
  9193  00A2' 0818'              	movf	___ftmul@exp,w
  9194  00A3' 0094'              	movwf	??___ftmul
  9195  00A4' 0814'              	movf	??___ftmul,w
  9196  00A5' 0083'              	movwf	___ftpack@exp
  9197  00A6' 081D'              	movf	___ftmul@sign,w
  9198  00A7' 0095'              	movwf	??___ftmul+1
  9199  00A8' 0815'              	movf	??___ftmul+1,w
  9200  00A9' 0084'              	movwf	___ftpack@sign
  9201  00AA' 3180' 2000'        	fcall	___ftpack
  9202  00AC' 0020               	movlb	0	; select bank0
  9203  00AD' 0800'              	movf	?___ftpack,w
  9204  00AE' 008E'              	movwf	?___ftmul
  9205  00AF' 0801'              	movf	?___ftpack+1,w
  9206  00B0' 008F'              	movwf	?___ftmul+1
  9207  00B1' 0802'              	movf	?___ftpack+2,w
  9208  00B2' 0090'              	movwf	?___ftmul+2
  9209  00B3' 0008               	return
  9210  00B4'                    __end_of___ftmul:	
  9211                           
  9212                           	psect	text40
  9213  0000'                    __ptext40:	
  9214 ;; *************** function ___ftadd *****************
  9215 ;; Defined at:
  9216 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  9217 ;; Parameters:    Size  Location     Type
  9218 ;;  f1              3   30[BANK0 ] float 
  9219 ;;  f2              3   33[BANK0 ] float 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  exp1            1   42[BANK0 ] unsigned char 
  9222 ;;  exp2            1   41[BANK0 ] unsigned char 
  9223 ;;  sign            1   40[BANK0 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  3   30[BANK0 ] float 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, pclath, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9233 ;;      Params:         0       6       0       0       0       0       0       0
  9234 ;;      Locals:         0       3       0       0       0       0       0       0
  9235 ;;      Temps:          0       4       0       0       0       0       0       0
  9236 ;;      Totals:         0      13       0       0       0       0       0       0
  9237 ;;Total ram usage:       13 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    5
  9240 ;; This function calls:
  9241 ;;		___ftpack
  9242 ;; This function is called by:
  9243 ;;		_getPercentValue
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function ___ftadd
  9249  0000'                    ___ftadd:	
  9250                           
  9251                           ;incstack = 0
  9252                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9253  0000' 0020               	movlb	0	; select bank0
  9254  0001' 081E'              	movf	___ftadd@f1,w
  9255  0002' 00A4'              	movwf	??___ftadd
  9256  0003' 081F'              	movf	___ftadd@f1+1,w
  9257  0004' 00A5'              	movwf	??___ftadd+1
  9258  0005' 0820'              	movf	___ftadd@f1+2,w
  9259  0006' 00A6'              	movwf	??___ftadd+2
  9260  0007' 1003               	clrc
  9261  0008' 0D25'              	rlf	??___ftadd+1,w
  9262  0009' 0D26'              	rlf	??___ftadd+2,w
  9263  000A' 00A7'              	movwf	??___ftadd+3
  9264  000B' 0827'              	movf	??___ftadd+3,w
  9265  000C' 00AA'              	movwf	___ftadd@exp1
  9266  000D' 0821'              	movf	___ftadd@f2,w
  9267  000E' 00A4'              	movwf	??___ftadd
  9268  000F' 0822'              	movf	___ftadd@f2+1,w
  9269  0010' 00A5'              	movwf	??___ftadd+1
  9270  0011' 0823'              	movf	___ftadd@f2+2,w
  9271  0012' 00A6'              	movwf	??___ftadd+2
  9272  0013' 1003               	clrc
  9273  0014' 0D25'              	rlf	??___ftadd+1,w
  9274  0015' 0D26'              	rlf	??___ftadd+2,w
  9275  0016' 00A7'              	movwf	??___ftadd+3
  9276  0017' 0827'              	movf	??___ftadd+3,w
  9277  0018' 00A9'              	movwf	___ftadd@exp2
  9278  0019' 082A'              	movf	___ftadd@exp1,w
  9279  001A' 1903               	btfsc	3,2
  9280  001B' 2800'              	goto	l5783
  9281  001C' 0829'              	movf	___ftadd@exp2,w
  9282  001D' 022A'              	subwf	___ftadd@exp1,w
  9283  001E' 1803               	skipnc
  9284  001F' 2800'              	goto	l5787
  9285  0020' 032A'              	decf	___ftadd@exp1,w
  9286  0021' 3AFF               	xorlw	255
  9287  0022' 0729'              	addwf	___ftadd@exp2,w
  9288  0023' 00A4'              	movwf	??___ftadd
  9289  0024' 3019               	movlw	25
  9290  0025' 0224'              	subwf	??___ftadd,w
  9291  0026' 1C03               	skipc
  9292  0027' 2800'              	goto	l5787
  9293  0028'                    l5783:	
  9294  0028' 0821'              	movf	___ftadd@f2,w
  9295  0029' 009E'              	movwf	?___ftadd
  9296  002A' 0822'              	movf	___ftadd@f2+1,w
  9297  002B' 009F'              	movwf	?___ftadd+1
  9298  002C' 0823'              	movf	___ftadd@f2+2,w
  9299  002D' 00A0'              	movwf	?___ftadd+2
  9300  002E' 0008               	return
  9301  002F'                    l5787:	
  9302  002F' 0829'              	movf	___ftadd@exp2,w
  9303  0030' 1903               	btfsc	3,2
  9304  0031' 0008               	return
  9305  0032' 082A'              	movf	___ftadd@exp1,w
  9306  0033' 0229'              	subwf	___ftadd@exp2,w
  9307  0034' 1803               	skipnc
  9308  0035' 2800'              	goto	l5793
  9309  0036' 0329'              	decf	___ftadd@exp2,w
  9310  0037' 3AFF               	xorlw	255
  9311  0038' 072A'              	addwf	___ftadd@exp1,w
  9312  0039' 00A4'              	movwf	??___ftadd
  9313  003A' 3019               	movlw	25
  9314  003B' 0224'              	subwf	??___ftadd,w
  9315  003C' 1803               	btfsc	3,0
  9316  003D' 0008               	return
  9317  003E'                    l5793:	
  9318  003E' 3006               	movlw	6
  9319  003F' 00A4'              	movwf	??___ftadd
  9320  0040' 0824'              	movf	??___ftadd,w
  9321  0041' 00A8'              	movwf	___ftadd@sign
  9322  0042' 1BA0'              	btfsc	___ftadd@f1+2,7
  9323  0043' 17A8'              	bsf	___ftadd@sign,7
  9324  0044' 1BA3'              	btfsc	___ftadd@f2+2,7
  9325  0045' 1728'              	bsf	___ftadd@sign,6
  9326  0046' 179F'              	bsf	___ftadd@f1+1,7
  9327  0047' 30FF               	movlw	255
  9328  0048' 059E'              	andwf	___ftadd@f1,f
  9329  0049' 30FF               	movlw	255
  9330  004A' 059F'              	andwf	___ftadd@f1+1,f
  9331  004B' 3000               	movlw	0
  9332  004C' 05A0'              	andwf	___ftadd@f1+2,f
  9333  004D' 17A2'              	bsf	___ftadd@f2+1,7
  9334  004E' 30FF               	movlw	255
  9335  004F' 05A1'              	andwf	___ftadd@f2,f
  9336  0050' 30FF               	movlw	255
  9337  0051' 05A2'              	andwf	___ftadd@f2+1,f
  9338  0052' 3000               	movlw	0
  9339  0053' 05A3'              	andwf	___ftadd@f2+2,f
  9340  0054' 0829'              	movf	___ftadd@exp2,w
  9341  0055' 022A'              	subwf	___ftadd@exp1,w
  9342  0056' 1803               	skipnc
  9343  0057' 2800'              	goto	l5815
  9344  0058'                    l5805:	
  9345  0058' 3001               	movlw	1
  9346  0059'                    u3965:	
  9347  0059' 35A1'              	lslf	___ftadd@f2,f
  9348  005A' 0DA2'              	rlf	___ftadd@f2+1,f
  9349  005B' 0DA3'              	rlf	___ftadd@f2+2,f
  9350  005C' 0B89               	decfsz	9,f
  9351  005D' 2800'              	goto	u3965
  9352  005E' 3001               	movlw	1
  9353  005F' 02A9'              	subwf	___ftadd@exp2,f
  9354  0060' 0829'              	movf	___ftadd@exp2,w
  9355  0061' 062A'              	xorwf	___ftadd@exp1,w
  9356  0062' 1903               	skipnz
  9357  0063' 2800'              	goto	l5813
  9358  0064' 3001               	movlw	1
  9359  0065' 02A8'              	subwf	___ftadd@sign,f
  9360  0066' 0828'              	movf	___ftadd@sign,w
  9361  0067' 3907               	andlw	7
  9362  0068' 1903               	btfsc	3,2
  9363  0069' 2800'              	goto	l5813
  9364  006A' 2800'              	goto	l5805
  9365  006B'                    l5811:	
  9366  006B' 3001               	movlw	1
  9367  006C'                    u3995:	
  9368  006C' 36A0'              	lsrf	___ftadd@f1+2,f
  9369  006D' 0C9F'              	rrf	___ftadd@f1+1,f
  9370  006E' 0C9E'              	rrf	___ftadd@f1,f
  9371  006F' 0B89               	decfsz	9,f
  9372  0070' 2800'              	goto	u3995
  9373  0071' 3001               	movlw	1
  9374  0072' 00A4'              	movwf	??___ftadd
  9375  0073' 0824'              	movf	??___ftadd,w
  9376  0074' 07AA'              	addwf	___ftadd@exp1,f
  9377  0075'                    l5813:	
  9378  0075' 082A'              	movf	___ftadd@exp1,w
  9379  0076' 0629'              	xorwf	___ftadd@exp2,w
  9380  0077' 1903               	btfsc	3,2
  9381  0078' 2800'              	goto	l3184
  9382  0079' 2800'              	goto	l5811
  9383  007A'                    l5815:	
  9384  007A' 082A'              	movf	___ftadd@exp1,w
  9385  007B' 0229'              	subwf	___ftadd@exp2,w
  9386  007C' 1803               	skipnc
  9387  007D' 2800'              	goto	l3184
  9388  007E'                    l5817:	
  9389  007E' 3001               	movlw	1
  9390  007F'                    u4025:	
  9391  007F' 359E'              	lslf	___ftadd@f1,f
  9392  0080' 0D9F'              	rlf	___ftadd@f1+1,f
  9393  0081' 0DA0'              	rlf	___ftadd@f1+2,f
  9394  0082' 0B89               	decfsz	9,f
  9395  0083' 2800'              	goto	u4025
  9396  0084' 3001               	movlw	1
  9397  0085' 02AA'              	subwf	___ftadd@exp1,f
  9398  0086' 0829'              	movf	___ftadd@exp2,w
  9399  0087' 062A'              	xorwf	___ftadd@exp1,w
  9400  0088' 1903               	skipnz
  9401  0089' 2800'              	goto	l5825
  9402  008A' 3001               	movlw	1
  9403  008B' 02A8'              	subwf	___ftadd@sign,f
  9404  008C' 0828'              	movf	___ftadd@sign,w
  9405  008D' 3907               	andlw	7
  9406  008E' 1903               	btfsc	3,2
  9407  008F' 2800'              	goto	l5825
  9408  0090' 2800'              	goto	l5817
  9409  0091'                    l5823:	
  9410  0091' 3001               	movlw	1
  9411  0092'                    u4055:	
  9412  0092' 36A3'              	lsrf	___ftadd@f2+2,f
  9413  0093' 0CA2'              	rrf	___ftadd@f2+1,f
  9414  0094' 0CA1'              	rrf	___ftadd@f2,f
  9415  0095' 0B89               	decfsz	9,f
  9416  0096' 2800'              	goto	u4055
  9417  0097' 3001               	movlw	1
  9418  0098' 00A4'              	movwf	??___ftadd
  9419  0099' 0824'              	movf	??___ftadd,w
  9420  009A' 07A9'              	addwf	___ftadd@exp2,f
  9421  009B'                    l5825:	
  9422  009B' 082A'              	movf	___ftadd@exp1,w
  9423  009C' 0629'              	xorwf	___ftadd@exp2,w
  9424  009D' 1D03               	skipz
  9425  009E' 2800'              	goto	l5823
  9426  009F'                    l3184:	
  9427  009F' 1FA8'              	btfss	___ftadd@sign,7
  9428  00A0' 2800'              	goto	l5829
  9429  00A1' 30FF               	movlw	255
  9430  00A2' 069E'              	xorwf	___ftadd@f1,f
  9431  00A3' 30FF               	movlw	255
  9432  00A4' 069F'              	xorwf	___ftadd@f1+1,f
  9433  00A5' 30FF               	movlw	255
  9434  00A6' 06A0'              	xorwf	___ftadd@f1+2,f
  9435  00A7' 3001               	movlw	1
  9436  00A8' 079E'              	addwf	___ftadd@f1,f
  9437  00A9' 3000               	movlw	0
  9438  00AA' 1803               	skipnc
  9439  00AB' 3001               	movlw	1
  9440  00AC' 079F'              	addwf	___ftadd@f1+1,f
  9441  00AD' 3000               	movlw	0
  9442  00AE' 1803               	skipnc
  9443  00AF' 3001               	movlw	1
  9444  00B0' 07A0'              	addwf	___ftadd@f1+2,f
  9445  00B1'                    l5829:	
  9446  00B1' 1F28'              	btfss	___ftadd@sign,6
  9447  00B2' 2800'              	goto	l5833
  9448  00B3' 30FF               	movlw	255
  9449  00B4' 06A1'              	xorwf	___ftadd@f2,f
  9450  00B5' 30FF               	movlw	255
  9451  00B6' 06A2'              	xorwf	___ftadd@f2+1,f
  9452  00B7' 30FF               	movlw	255
  9453  00B8' 06A3'              	xorwf	___ftadd@f2+2,f
  9454  00B9' 3001               	movlw	1
  9455  00BA' 07A1'              	addwf	___ftadd@f2,f
  9456  00BB' 3000               	movlw	0
  9457  00BC' 1803               	skipnc
  9458  00BD' 3001               	movlw	1
  9459  00BE' 07A2'              	addwf	___ftadd@f2+1,f
  9460  00BF' 3000               	movlw	0
  9461  00C0' 1803               	skipnc
  9462  00C1' 3001               	movlw	1
  9463  00C2' 07A3'              	addwf	___ftadd@f2+2,f
  9464  00C3'                    l5833:	
  9465  00C3' 01A8'              	clrf	___ftadd@sign
  9466  00C4' 081E'              	movf	___ftadd@f1,w
  9467  00C5' 07A1'              	addwf	___ftadd@f2,f
  9468  00C6' 081F'              	movf	___ftadd@f1+1,w
  9469  00C7' 3DA2'              	addwfc	___ftadd@f2+1,f
  9470  00C8' 0820'              	movf	___ftadd@f1+2,w
  9471  00C9' 3DA3'              	addwfc	___ftadd@f2+2,f
  9472  00CA' 1FA3'              	btfss	___ftadd@f2+2,7
  9473  00CB' 2800'              	goto	l5843
  9474  00CC' 30FF               	movlw	255
  9475  00CD' 06A1'              	xorwf	___ftadd@f2,f
  9476  00CE' 30FF               	movlw	255
  9477  00CF' 06A2'              	xorwf	___ftadd@f2+1,f
  9478  00D0' 30FF               	movlw	255
  9479  00D1' 06A3'              	xorwf	___ftadd@f2+2,f
  9480  00D2' 3001               	movlw	1
  9481  00D3' 07A1'              	addwf	___ftadd@f2,f
  9482  00D4' 3000               	movlw	0
  9483  00D5' 1803               	skipnc
  9484  00D6' 3001               	movlw	1
  9485  00D7' 07A2'              	addwf	___ftadd@f2+1,f
  9486  00D8' 3000               	movlw	0
  9487  00D9' 1803               	skipnc
  9488  00DA' 3001               	movlw	1
  9489  00DB' 07A3'              	addwf	___ftadd@f2+2,f
  9490  00DC' 01A8'              	clrf	___ftadd@sign
  9491  00DD' 0AA8'              	incf	___ftadd@sign,f
  9492  00DE'                    l5843:	
  9493  00DE' 0821'              	movf	___ftadd@f2,w
  9494  00DF' 0080'              	movwf	___ftpack@arg
  9495  00E0' 0822'              	movf	___ftadd@f2+1,w
  9496  00E1' 0081'              	movwf	___ftpack@arg+1
  9497  00E2' 0823'              	movf	___ftadd@f2+2,w
  9498  00E3' 0082'              	movwf	___ftpack@arg+2
  9499  00E4' 082A'              	movf	___ftadd@exp1,w
  9500  00E5' 00A4'              	movwf	??___ftadd
  9501  00E6' 0824'              	movf	??___ftadd,w
  9502  00E7' 0083'              	movwf	___ftpack@exp
  9503  00E8' 0828'              	movf	___ftadd@sign,w
  9504  00E9' 00A5'              	movwf	??___ftadd+1
  9505  00EA' 0825'              	movf	??___ftadd+1,w
  9506  00EB' 0084'              	movwf	___ftpack@sign
  9507  00EC' 3180' 2000'        	fcall	___ftpack
  9508  00EE' 0020               	movlb	0	; select bank0
  9509  00EF' 0800'              	movf	?___ftpack,w
  9510  00F0' 009E'              	movwf	?___ftadd
  9511  00F1' 0801'              	movf	?___ftpack+1,w
  9512  00F2' 009F'              	movwf	?___ftadd+1
  9513  00F3' 0802'              	movf	?___ftpack+2,w
  9514  00F4' 00A0'              	movwf	?___ftadd+2
  9515  00F5' 0008               	return
  9516  00F6'                    __end_of___ftadd:	
  9517                           
  9518                           	psect	text41
  9519  0000'                    __ptext41:	
  9520 ;; *************** function _RF_RxDisable *****************
  9521 ;; Defined at:
  9522 ;;		line 187 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  rf              1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  rf              1    4[BANK0 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;		None               void
  9529 ;; Registers used:
  9530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9536 ;;      Params:         0       0       0       0       0       0       0       0
  9537 ;;      Locals:         0       1       0       0       0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0       0
  9539 ;;      Totals:         0       1       0       0       0       0       0       0
  9540 ;;Total ram usage:        1 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:    6
  9543 ;; This function calls:
  9544 ;;		_CC2500_WriteCommand
  9545 ;;		_RfPointSelect
  9546 ;;		_setINT_GO
  9547 ;; This function is called by:
  9548 ;;		_setRF_Main
  9549 ;; This function uses a non-reentrant model
  9550 ;;
  9551                           
  9552                           
  9553                           ;psect for function _RF_RxDisable
  9554  0000'                    _RF_RxDisable:	
  9555                           
  9556                           ;incstack = 0
  9557                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9558                           ;RF_RxDisable@rf stored from wreg
  9559  0000' 0020               	movlb	0	; select bank0
  9560  0001' 0084'              	movwf	RF_RxDisable@rf
  9561                           
  9562                           ;RF_Control_B1.c: 188: RfPointSelect(rf);
  9563  0002' 0804'              	movf	RF_RxDisable@rf,w
  9564  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
  9565                           
  9566                           ;RF_Control_B1.c: 190: if (RF->RxStatus) {
  9567  0006' 0021               	movlb	1	; select bank1
  9568  0007' 0800'              	movf	_RF^(0+128),w
  9569  0008' 0086               	movwf	6
  9570  0009' 0187               	clrf	7
  9571  000A' 1D81               	btfss	1,3
  9572  000B' 0008               	return
  9573                           
  9574                           ;RF_Control_B1.c: 191: RF->RxStatus = 0;
  9575  000C' 0800'              	movf	_RF^(0+128),w
  9576  000D' 0086               	movwf	6
  9577  000E' 0187               	clrf	7
  9578  000F' 1181               	bcf	1,3
  9579                           
  9580                           ;RF_Control_B1.c: 192: RF->ReceiveGO = 0;
  9581  0010' 0800'              	movf	_RF^(0+128),w
  9582  0011' 0086               	movwf	6
  9583  0012' 0187               	clrf	7
  9584  0013' 1081               	bcf	1,1
  9585                           
  9586                           ;RF_Control_B1.c: 193: RF->DebounceTime = 0;
  9587  0014' 0A00'              	incf	_RF^(0+128),w
  9588  0015' 0086               	movwf	6
  9589  0016' 0187               	clrf	7
  9590  0017' 0181               	clrf	1
  9591                           
  9592                           ;RF_Control_B1.c: 194: RF->Debounce = 0;
  9593  0018' 0800'              	movf	_RF^(0+128),w
  9594  0019' 0086               	movwf	6
  9595  001A' 0187               	clrf	7
  9596  001B' 1281               	bcf	1,5
  9597                           
  9598                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x36);
  9599  001C' 3036               	movlw	54
  9600  001D' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9601                           
  9602                           ;RF_Control_B1.c: 196: CC2500_WriteCommand(0x3A);
  9603  0020' 303A               	movlw	58
  9604  0021' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9605                           
  9606                           ;RF_Control_B1.c: 197: setINT_GO(0);
  9607  0024' 3000               	movlw	0
  9608  0025' 3180' 2000'        	fcall	_setINT_GO
  9609  0027' 0008               	return
  9610  0028'                    __end_of_RF_RxDisable:	
  9611                           
  9612                           	psect	text42
  9613  0000'                    __ptext42:	
  9614 ;; *************** function _CC2500_TxData *****************
  9615 ;; Defined at:
  9616 ;;		line 32 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;		None               void
  9623 ;; Registers used:
  9624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9630 ;;      Params:         0       0       0       0       0       0       0       0
  9631 ;;      Locals:         0       1       0       0       0       0       0       0
  9632 ;;      Temps:          0       1       0       0       0       0       0       0
  9633 ;;      Totals:         0       2       0       0       0       0       0       0
  9634 ;;Total ram usage:        2 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    6
  9637 ;; This function calls:
  9638 ;;		_CC2500_WriteByte
  9639 ;;		_CC2500_WriteCommand
  9640 ;; This function is called by:
  9641 ;;		_setRF_Main
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           
  9646                           ;psect for function _CC2500_TxData
  9647  0000'                    _CC2500_TxData:	
  9648                           
  9649                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9650                           ;CC2500_B1.c: 35: RC4 = 0;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9654  0000' 0020               	movlb	0	; select bank0
  9655  0001' 120E               	bcf	14,4	;volatile
  9656                           
  9657                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9658  0002' 307F               	movlw	127
  9659  0003' 0084'              	movwf	??_CC2500_TxData
  9660  0004' 0804'              	movf	??_CC2500_TxData,w
  9661  0005' 0021               	movlb	1	; select bank1
  9662  0006' 0080'              	movwf	_SPI0Buffer^(0+128)
  9663  0007'                    l271:	
  9664                           ;CC2500_B1.c: 37: while (RC2 == 1);
  9665                           
  9666  0007' 0020               	movlb	0	; select bank0
  9667  0008' 190E               	btfsc	14,2	;volatile
  9668  0009' 2800'              	goto	l271
  9669                           
  9670                           ;CC2500_B1.c: 38: CC2500_WriteByte();
  9671  000A' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
  9672                           
  9673                           ;CC2500_B1.c: 39: SPI0Buffer = Tx_Length;
  9674  000D' 0021               	movlb	1	; select bank1
  9675  000E' 0800'              	movf	_Tx_Length^(0+128),w
  9676  000F' 0020               	movlb	0	; select bank0
  9677  0010' 0084'              	movwf	??_CC2500_TxData
  9678  0011' 0804'              	movf	??_CC2500_TxData,w
  9679  0012' 0021               	movlb	1	; select bank1
  9680  0013' 0080'              	movwf	_SPI0Buffer^(0+128)
  9681                           
  9682                           ;CC2500_B1.c: 40: CC2500_WriteByte();
  9683  0014' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
  9684                           
  9685                           ;CC2500_B1.c: 41: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9686  0017' 0020               	movlb	0	; select bank0
  9687  0018' 0185'              	clrf	CC2500_TxData@loop_e
  9688  0019'                    l6553:	
  9689  0019' 0021               	movlb	1	; select bank1
  9690  001A' 0800'              	movf	_Tx_Length^(0+128),w
  9691  001B' 0020               	movlb	0	; select bank0
  9692  001C' 0205'              	subwf	CC2500_TxData@loop_e,w
  9693  001D' 1803               	btfsc	3,0
  9694  001E' 2800'              	goto	l276
  9695                           
  9696                           ;CC2500_B1.c: 42: SPI0Buffer = RF_Data[loop_e];
  9697  001F' 0805'              	movf	CC2500_TxData@loop_e,w
  9698  0020' 3E00'              	addlw	_RF_Data& (0+255)
  9699  0021' 0086               	movwf	6
  9700  0022' 0187               	clrf	7
  9701  0023' 0801               	movf	1,w
  9702  0024' 0084'              	movwf	??_CC2500_TxData
  9703  0025' 0804'              	movf	??_CC2500_TxData,w
  9704  0026' 0021               	movlb	1	; select bank1
  9705  0027' 0080'              	movwf	_SPI0Buffer^(0+128)
  9706                           
  9707                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  9708  0028' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
  9709  002B' 3001               	movlw	1
  9710  002C' 0020               	movlb	0	; select bank0
  9711  002D' 0084'              	movwf	??_CC2500_TxData
  9712  002E' 0804'              	movf	??_CC2500_TxData,w
  9713  002F' 0785'              	addwf	CC2500_TxData@loop_e,f
  9714  0030' 2800'              	goto	l6553
  9715  0031'                    l276:	
  9716                           
  9717                           ;CC2500_B1.c: 44: }
  9718                           ;CC2500_B1.c: 45: RC4 = 1;
  9719  0031' 160E               	bsf	14,4	;volatile
  9720                           
  9721                           ;CC2500_B1.c: 46: CC2500_WriteCommand(0x35);
  9722  0032' 3035               	movlw	53
  9723  0033' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9724  0036'                    l277:	
  9725                           ;CC2500_B1.c: 47: while (RB0 == 0);
  9726                           
  9727  0036' 0020               	movlb	0	; select bank0
  9728  0037' 1C0D               	btfss	13,0	;volatile
  9729  0038' 2800'              	goto	l277
  9730  0039'                    l280:	
  9731                           ;CC2500_B1.c: 48: while (RB0 == 1);
  9732                           
  9733  0039' 180D               	btfsc	13,0	;volatile
  9734  003A' 2800'              	goto	l280
  9735                           
  9736                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x36);
  9737  003B' 3036               	movlw	54
  9738  003C' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9739                           
  9740                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x3B);
  9741  003F' 303B               	movlw	59
  9742  0040' 3180' 2000'        	fcall	_CC2500_WriteCommand
  9743                           
  9744                           ;CC2500_B1.c: 51: Transceive_OK = 1;
  9745  0042' 1400'              	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9746  0043' 0008               	return
  9747  0044'                    __end_of_CC2500_TxData:	
  9748                           
  9749                           	psect	text43
  9750  0000'                    __ptext43:	
  9751 ;; *************** function _CC2500_RxData *****************
  9752 ;; Defined at:
  9753 ;;		line 57 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;		None
  9756 ;; Auto vars:     Size  Location     Type
  9757 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9758 ;; Return value:  Size  Location     Type
  9759 ;;		None               void
  9760 ;; Registers used:
  9761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9762 ;; Tracked objects:
  9763 ;;		On entry : 0/0
  9764 ;;		On exit  : 0/0
  9765 ;;		Unchanged: 0/0
  9766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9767 ;;      Params:         0       0       0       0       0       0       0       0
  9768 ;;      Locals:         0       1       0       0       0       0       0       0
  9769 ;;      Temps:          0       1       0       0       0       0       0       0
  9770 ;;      Totals:         0       2       0       0       0       0       0       0
  9771 ;;Total ram usage:        2 bytes
  9772 ;; Hardware stack levels used:    1
  9773 ;; Hardware stack levels required when called:    6
  9774 ;; This function calls:
  9775 ;;		_CC2500_ReadByte
  9776 ;;		_CC2500_ReadStatus
  9777 ;;		_CC2500_WriteByte
  9778 ;;		_CC2500_WriteCommand
  9779 ;;		_setRF_RxStatus
  9780 ;; This function is called by:
  9781 ;;		_setRF_Main
  9782 ;; This function uses a non-reentrant model
  9783 ;;
  9784                           
  9785                           
  9786                           ;psect for function _CC2500_RxData
  9787  0000'                    _CC2500_RxData:	
  9788                           
  9789                           ;CC2500_B1.c: 58: unsigned char loop_f;
  9790                           ;CC2500_B1.c: 62: if (RB0 == 1)
  9791                           
  9792                           ;incstack = 0
  9793                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9794  0000' 0020               	movlb	0	; select bank0
  9795  0001' 180D               	btfsc	13,0	;volatile
  9796  0002'                    l287:	
  9797                           ;CC2500_B1.c: 63: {
  9798                           ;CC2500_B1.c: 64: while (RB0 == 1);
  9799                           
  9800  0002' 180D               	btfsc	13,0	;volatile
  9801  0003' 2800'              	goto	l287
  9802                           
  9803                           ;CC2500_B1.c: 65: }
  9804                           ;CC2500_B1.c: 66: CC2500_ReadStatus(0x3B);
  9805  0004' 303B               	movlw	59
  9806  0005' 3180' 2000' 3180'  	fcall	_CC2500_ReadStatus
  9807                           
  9808                           ;CC2500_B1.c: 67: if (s_data != 0)
  9809  0008' 0021               	movlb	1	; select bank1
  9810  0009' 0800'              	movf	_s_data^(0+128),w
  9811  000A' 1903               	btfsc	3,2
  9812  000B' 2800'              	goto	l8473
  9813                           
  9814                           ;CC2500_B1.c: 69: {
  9815                           ;CC2500_B1.c: 70: RC4 = 0;
  9816  000C' 0020               	movlb	0	; select bank0
  9817  000D' 120E               	bcf	14,4	;volatile
  9818                           
  9819                           ;CC2500_B1.c: 71: SPI0Buffer = 0x3F + 0xC0;
  9820  000E' 30FF               	movlw	255
  9821  000F' 0084'              	movwf	??_CC2500_RxData
  9822  0010' 0804'              	movf	??_CC2500_RxData,w
  9823  0011' 0021               	movlb	1	; select bank1
  9824  0012' 0080'              	movwf	_SPI0Buffer^(0+128)
  9825  0013'                    l291:	
  9826                           ;CC2500_B1.c: 72: while (RC2 == 1);
  9827                           
  9828  0013' 0020               	movlb	0	; select bank0
  9829  0014' 190E               	btfsc	14,2	;volatile
  9830  0015' 2800'              	goto	l291
  9831                           
  9832                           ;CC2500_B1.c: 73: CC2500_WriteByte();
  9833  0016' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
  9834                           
  9835                           ;CC2500_B1.c: 75: CC2500_ReadByte();
  9836  0019' 3180' 2000' 3180'  	fcall	_CC2500_ReadByte
  9837                           
  9838                           ;CC2500_B1.c: 76: Rx_Length = SPI0Buffer;
  9839  001C' 0021               	movlb	1	; select bank1
  9840  001D' 0800'              	movf	_SPI0Buffer^(0+128),w
  9841  001E' 0020               	movlb	0	; select bank0
  9842  001F' 0084'              	movwf	??_CC2500_RxData
  9843  0020' 0804'              	movf	??_CC2500_RxData,w
  9844  0021' 0021               	movlb	1	; select bank1
  9845  0022' 0080'              	movwf	_Rx_Length^(0+128)
  9846                           
  9847                           ;CC2500_B1.c: 77: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9848  0023' 0020               	movlb	0	; select bank0
  9849  0024' 0185'              	clrf	CC2500_RxData@loop_f
  9850  0025'                    l8459:	
  9851  0025' 0021               	movlb	1	; select bank1
  9852  0026' 0800'              	movf	_Rx_Length^(0+128),w
  9853  0027' 0020               	movlb	0	; select bank0
  9854  0028' 0205'              	subwf	CC2500_RxData@loop_f,w
  9855  0029' 1803               	btfsc	3,0
  9856  002A' 2800'              	goto	l8461
  9857                           
  9858                           ;CC2500_B1.c: 78: CC2500_ReadByte();
  9859  002B' 3180' 2000' 3180'  	fcall	_CC2500_ReadByte
  9860                           
  9861                           ;CC2500_B1.c: 79: RF_Data[loop_f] = SPI0Buffer;
  9862  002E' 0021               	movlb	1	; select bank1
  9863  002F' 0800'              	movf	_SPI0Buffer^(0+128),w
  9864  0030' 0020               	movlb	0	; select bank0
  9865  0031' 0084'              	movwf	??_CC2500_RxData
  9866  0032' 0805'              	movf	CC2500_RxData@loop_f,w
  9867  0033' 3E00'              	addlw	_RF_Data& (0+255)
  9868  0034' 0086               	movwf	6
  9869  0035' 0187               	clrf	7
  9870  0036' 0804'              	movf	??_CC2500_RxData,w
  9871  0037' 0081               	movwf	1
  9872  0038' 3001               	movlw	1
  9873  0039' 0084'              	movwf	??_CC2500_RxData
  9874  003A' 0804'              	movf	??_CC2500_RxData,w
  9875  003B' 0785'              	addwf	CC2500_RxData@loop_f,f
  9876  003C' 2800'              	goto	l8459
  9877  003D'                    l8461:	
  9878                           
  9879                           ;CC2500_B1.c: 80: }
  9880                           ;CC2500_B1.c: 81: CC2500_ReadByte();
  9881  003D' 3180' 2000' 3180'  	fcall	_CC2500_ReadByte
  9882                           
  9883                           ;CC2500_B1.c: 82: RSSI = SPI0Buffer;
  9884  0040' 0021               	movlb	1	; select bank1
  9885  0041' 0800'              	movf	_SPI0Buffer^(0+128),w
  9886  0042' 0020               	movlb	0	; select bank0
  9887  0043' 0084'              	movwf	??_CC2500_RxData
  9888  0044' 0804'              	movf	??_CC2500_RxData,w
  9889  0045' 0021               	movlb	1	; select bank1
  9890  0046' 0080'              	movwf	_RSSI^(0+128)
  9891                           
  9892                           ;CC2500_B1.c: 83: CC2500_ReadByte();
  9893  0047' 3180' 2000' 3180'  	fcall	_CC2500_ReadByte
  9894                           
  9895                           ;CC2500_B1.c: 84: CRC = SPI0Buffer;
  9896  004A' 0021               	movlb	1	; select bank1
  9897  004B' 0800'              	movf	_SPI0Buffer^(0+128),w
  9898  004C' 0020               	movlb	0	; select bank0
  9899  004D' 0084'              	movwf	??_CC2500_RxData
  9900  004E' 0804'              	movf	??_CC2500_RxData,w
  9901  004F' 0021               	movlb	1	; select bank1
  9902  0050' 0080'              	movwf	_CRC^(0+128)
  9903                           
  9904                           ;CC2500_B1.c: 85: RC4 = 1;
  9905  0051' 0020               	movlb	0	; select bank0
  9906  0052' 160E               	bsf	14,4	;volatile
  9907                           
  9908                           ;CC2500_B1.c: 86: if (CRC & 0x80)
  9909  0053' 0021               	movlb	1	; select bank1
  9910  0054' 1B80'              	btfsc	_CRC^(0+128),7
  9911                           
  9912                           ;CC2500_B1.c: 87: Receive_OK = 1;
  9913  0055' 1400'              	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9914  0056'                    l8473:	
  9915                           
  9916                           ;CC2500_B1.c: 88: }
  9917                           ;CC2500_B1.c: 89: CC2500_WriteCommand(0x36);
  9918  0056' 3036               	movlw	54
  9919  0057' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9920                           
  9921                           ;CC2500_B1.c: 90: CC2500_WriteCommand(0x3A);
  9922  005A' 303A               	movlw	58
  9923  005B' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
  9924                           
  9925                           ;CC2500_B1.c: 91: setRF_RxStatus(1, 0);
  9926  005E' 0020               	movlb	0	; select bank0
  9927  005F' 0182'              	clrf	setRF_RxStatus@command
  9928  0060' 3001               	movlw	1
  9929  0061' 3180' 2000'        	fcall	_setRF_RxStatus
  9930  0063' 0008               	return
  9931  0064'                    __end_of_CC2500_RxData:	
  9932                           
  9933                           	psect	text44
  9934  0000'                    __ptext44:	
  9935 ;; *************** function _setRF_RxStatus *****************
  9936 ;; Defined at:
  9937 ;;		line 42 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
  9938 ;; Parameters:    Size  Location     Type
  9939 ;;  rf              1    wreg     unsigned char 
  9940 ;;  command         1    2[BANK0 ] unsigned char 
  9941 ;; Auto vars:     Size  Location     Type
  9942 ;;  rf              1    3[BANK0 ] unsigned char 
  9943 ;; Return value:  Size  Location     Type
  9944 ;;		None               void
  9945 ;; Registers used:
  9946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9947 ;; Tracked objects:
  9948 ;;		On entry : 0/0
  9949 ;;		On exit  : 0/0
  9950 ;;		Unchanged: 0/0
  9951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9952 ;;      Params:         0       1       0       0       0       0       0       0
  9953 ;;      Locals:         0       1       0       0       0       0       0       0
  9954 ;;      Temps:          0       0       0       0       0       0       0       0
  9955 ;;      Totals:         0       2       0       0       0       0       0       0
  9956 ;;Total ram usage:        2 bytes
  9957 ;; Hardware stack levels used:    1
  9958 ;; Hardware stack levels required when called:    5
  9959 ;; This function calls:
  9960 ;;		_RfPointSelect
  9961 ;; This function is called by:
  9962 ;;		_CC2500_RxData
  9963 ;; This function uses a non-reentrant model
  9964 ;;
  9965                           
  9966                           
  9967                           ;psect for function _setRF_RxStatus
  9968  0000'                    _setRF_RxStatus:	
  9969                           
  9970                           ;incstack = 0
  9971                           ; Regs used in _setRF_RxStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9972                           ;setRF_RxStatus@rf stored from wreg
  9973  0000' 0020               	movlb	0	; select bank0
  9974  0001' 0083'              	movwf	setRF_RxStatus@rf
  9975                           
  9976                           ;RF_Control_B1.c: 43: RfPointSelect(rf);
  9977  0002' 0803'              	movf	setRF_RxStatus@rf,w
  9978  0003' 3180' 2000'        	fcall	_RfPointSelect
  9979                           
  9980                           ;RF_Control_B1.c: 44: RF->RxStatus = command;
  9981  0005' 0021               	movlb	1	; select bank1
  9982  0006' 0800'              	movf	_RF^(0+128),w
  9983  0007' 0086               	movwf	6
  9984  0008' 0187               	clrf	7
  9985  0009' 0020               	movlb	0	; select bank0
  9986  000A' 0802'              	movf	setRF_RxStatus@command,w
  9987  000B' 1181               	bcf	1,3
  9988  000C' 1D03               	skipz
  9989  000D' 1581               	bsf	1,3
  9990  000E' 0008               	return
  9991  000F'                    __end_of_setRF_RxStatus:	
  9992                           
  9993                           	psect	text45
  9994  0000'                    __ptext45:	
  9995 ;; *************** function _CC2500_ReadStatus *****************
  9996 ;; Defined at:
  9997 ;;		line 263 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
  9998 ;; Parameters:    Size  Location     Type
  9999 ;;  status_addr     1    wreg     unsigned char 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  status_addr     1    3[BANK0 ] unsigned char 
 10002 ;; Return value:  Size  Location     Type
 10003 ;;		None               void
 10004 ;; Registers used:
 10005 ;;		wreg, status,2, status,0, pclath, cstack
 10006 ;; Tracked objects:
 10007 ;;		On entry : 0/0
 10008 ;;		On exit  : 0/0
 10009 ;;		Unchanged: 0/0
 10010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10011 ;;      Params:         0       0       0       0       0       0       0       0
 10012 ;;      Locals:         0       1       0       0       0       0       0       0
 10013 ;;      Temps:          0       1       0       0       0       0       0       0
 10014 ;;      Totals:         0       2       0       0       0       0       0       0
 10015 ;;Total ram usage:        2 bytes
 10016 ;; Hardware stack levels used:    1
 10017 ;; Hardware stack levels required when called:    5
 10018 ;; This function calls:
 10019 ;;		_CC2500_ReadByte
 10020 ;;		_CC2500_WriteByte
 10021 ;; This function is called by:
 10022 ;;		_CC2500_RxData
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function _CC2500_ReadStatus
 10028  0000'                    _CC2500_ReadStatus:	
 10029                           
 10030                           ;incstack = 0
 10031                           ; Regs used in _CC2500_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
 10032                           ;CC2500_ReadStatus@status_addr stored from wreg
 10033  0000' 0020               	movlb	0	; select bank0
 10034  0001' 0083'              	movwf	CC2500_ReadStatus@status_addr
 10035                           
 10036                           ;CC2500_B1.c: 264: RC4 = 0;
 10037  0002' 120E               	bcf	14,4	;volatile
 10038                           
 10039                           ;CC2500_B1.c: 265: SPI0Buffer = status_addr + 0xC0;
 10040  0003' 0803'              	movf	CC2500_ReadStatus@status_addr,w
 10041  0004' 3EC0               	addlw	192
 10042  0005' 0082'              	movwf	??_CC2500_ReadStatus
 10043  0006' 0802'              	movf	??_CC2500_ReadStatus,w
 10044  0007' 0021               	movlb	1	; select bank1
 10045  0008' 0080'              	movwf	_SPI0Buffer^(0+128)
 10046  0009'                    l367:	
 10047                           ;CC2500_B1.c: 267: while (RC2 == 1);
 10048                           
 10049  0009' 0020               	movlb	0	; select bank0
 10050  000A' 190E               	btfsc	14,2	;volatile
 10051  000B' 2800'              	goto	l367
 10052                           
 10053                           ;CC2500_B1.c: 269: CC2500_WriteByte();
 10054  000C' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
 10055                           
 10056                           ;CC2500_B1.c: 270: CC2500_ReadByte();
 10057  000F' 3180' 2000'        	fcall	_CC2500_ReadByte
 10058                           
 10059                           ;CC2500_B1.c: 271: RC4 = 1;
 10060  0011' 0020               	movlb	0	; select bank0
 10061  0012' 160E               	bsf	14,4	;volatile
 10062                           
 10063                           ;CC2500_B1.c: 273: s_data = SPI0Buffer;
 10064  0013' 0021               	movlb	1	; select bank1
 10065  0014' 0800'              	movf	_SPI0Buffer^(0+128),w
 10066  0015' 0020               	movlb	0	; select bank0
 10067  0016' 0082'              	movwf	??_CC2500_ReadStatus
 10068  0017' 0802'              	movf	??_CC2500_ReadStatus,w
 10069  0018' 0021               	movlb	1	; select bank1
 10070  0019' 0080'              	movwf	_s_data^(0+128)
 10071  001A' 0008               	return
 10072  001B'                    __end_of_CC2500_ReadStatus:	
 10073                           
 10074                           	psect	text46
 10075  0000'                    __ptext46:	
 10076 ;; *************** function _CC2500_ReadByte *****************
 10077 ;; Defined at:
 10078 ;;		line 207 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 10079 ;; Parameters:    Size  Location     Type
 10080 ;;		None
 10081 ;; Auto vars:     Size  Location     Type
 10082 ;;  loop_b          1    1[BANK0 ] unsigned char 
 10083 ;; Return value:  Size  Location     Type
 10084 ;;		None               void
 10085 ;; Registers used:
 10086 ;;		wreg, status,2, status,0
 10087 ;; Tracked objects:
 10088 ;;		On entry : 0/0
 10089 ;;		On exit  : 0/0
 10090 ;;		Unchanged: 0/0
 10091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10092 ;;      Params:         0       0       0       0       0       0       0       0
 10093 ;;      Locals:         0       1       0       0       0       0       0       0
 10094 ;;      Temps:          0       1       0       0       0       0       0       0
 10095 ;;      Totals:         0       2       0       0       0       0       0       0
 10096 ;;Total ram usage:        2 bytes
 10097 ;; Hardware stack levels used:    1
 10098 ;; Hardware stack levels required when called:    4
 10099 ;; This function calls:
 10100 ;;		Nothing
 10101 ;; This function is called by:
 10102 ;;		_CC2500_RxData
 10103 ;;		_CC2500_ReadStatus
 10104 ;;		_CC2500_ReadREG
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _CC2500_ReadByte
 10110  0000'                    _CC2500_ReadByte:	
 10111                           
 10112                           ;CC2500_B1.c: 208: unsigned char loop_b;
 10113                           ;CC2500_B1.c: 209: for (loop_b = 0; loop_b < 8; loop_b++) {
 10114                           
 10115                           ;incstack = 0
 10116                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
 10117  0000' 0020               	movlb	0	; select bank0
 10118  0001' 0181'              	clrf	CC2500_ReadByte@loop_b
 10119  0002'                    L9:	
 10120  0002' 3008               	movlw	8
 10121  0003' 0201'              	subwf	CC2500_ReadByte@loop_b,w
 10122  0004' 1803               	btfsc	3,0
 10123  0005' 0008               	return
 10124                           
 10125                           ;CC2500_B1.c: 210: RC1 = 1;
 10126  0006' 148E               	bsf	14,1	;volatile
 10127                           
 10128                           ;CC2500_B1.c: 211: SPI0Buffer <<= 1;
 10129  0007' 1003               	clrc
 10130  0008' 0021               	movlb	1	; select bank1
 10131  0009' 0D80'              	rlf	_SPI0Buffer^(0+128),f
 10132                           
 10133                           ;CC2500_B1.c: 212: if (RC2 == 1)
 10134  000A' 0020               	movlb	0	; select bank0
 10135  000B' 1D0E               	btfss	14,2	;volatile
 10136  000C' 2800'              	goto	l6293
 10137                           
 10138                           ;CC2500_B1.c: 213: SPI0Buffer |= 0x01;
 10139  000D' 0021               	movlb	1	; select bank1
 10140  000E' 1400'              	bsf	_SPI0Buffer^(0+128),0
 10141  000F' 2800'              	goto	l6295
 10142  0010'                    l6293:	
 10143                           
 10144                           ;CC2500_B1.c: 214: else
 10145                           ;CC2500_B1.c: 215: SPI0Buffer &= 0xFE;
 10146  0010' 30FE               	movlw	254
 10147  0011' 0020               	movlb	0	; select bank0
 10148  0012' 0080'              	movwf	??_CC2500_ReadByte
 10149  0013' 0800'              	movf	??_CC2500_ReadByte,w
 10150  0014' 0021               	movlb	1	; select bank1
 10151  0015' 0580'              	andwf	_SPI0Buffer^(0+128),f
 10152  0016'                    l6295:	
 10153                           
 10154                           ;CC2500_B1.c: 216: RC1 = 0;
 10155  0016' 0020               	movlb	0	; select bank0
 10156  0017' 108E               	bcf	14,1	;volatile
 10157  0018' 3001               	movlw	1
 10158  0019' 0080'              	movwf	??_CC2500_ReadByte
 10159  001A' 0800'              	movf	??_CC2500_ReadByte,w
 10160  001B' 0781'              	addwf	CC2500_ReadByte@loop_b,f
 10161  001C' 2800'              	goto	L9
 10162  001D'                    __end_of_CC2500_ReadByte:	
 10163                           
 10164                           	psect	text47
 10165  0000'                    __ptext47:	
 10166 ;; *************** function _RF_Initialization *****************
 10167 ;; Defined at:
 10168 ;;		line 16 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 10169 ;; Parameters:    Size  Location     Type
 10170 ;;		None
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;		None
 10173 ;; Return value:  Size  Location     Type
 10174 ;;		None               void
 10175 ;; Registers used:
 10176 ;;		wreg, status,2, status,0, pclath, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10182 ;;      Params:         0       0       0       0       0       0       0       0
 10183 ;;      Locals:         0       0       0       0       0       0       0       0
 10184 ;;      Temps:          0       0       0       0       0       0       0       0
 10185 ;;      Totals:         0       0       0       0       0       0       0       0
 10186 ;;Total ram usage:        0 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:    5
 10189 ;; This function calls:
 10190 ;;		_setRF_Initialization
 10191 ;; This function is called by:
 10192 ;;		_main
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           
 10197                           ;psect for function _RF_Initialization
 10198  0000'                    _RF_Initialization:	
 10199                           
 10200                           ;RF_Control_B1.c: 18: setRF_Initialization(1);
 10201                           
 10202                           ;incstack = 0
 10203                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10204  0000' 3001               	movlw	1
 10205  0001' 3180' 2000'        	fcall	_setRF_Initialization
 10206  0003' 0008               	return
 10207  0004'                    __end_of_RF_Initialization:	
 10208                           
 10209                           	psect	text48
 10210  0000'                    __ptext48:	
 10211 ;; *************** function _setRF_Initialization *****************
 10212 ;; Defined at:
 10213 ;;		line 49 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 10214 ;; Parameters:    Size  Location     Type
 10215 ;;  rf              1    wreg     unsigned char 
 10216 ;; Auto vars:     Size  Location     Type
 10217 ;;  rf              1    0[COMMON] unsigned char 
 10218 ;; Return value:  Size  Location     Type
 10219 ;;		None               void
 10220 ;; Registers used:
 10221 ;;		wreg
 10222 ;; Tracked objects:
 10223 ;;		On entry : 0/0
 10224 ;;		On exit  : 0/0
 10225 ;;		Unchanged: 0/0
 10226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10227 ;;      Params:         0       0       0       0       0       0       0       0
 10228 ;;      Locals:         0       0       0       0       0       0       0       0
 10229 ;;      Temps:          0       1       0       0       0       0       0       0
 10230 ;;      Totals:         0       1       0       0       0       0       0       0
 10231 ;;Total ram usage:        1 bytes
 10232 ;; Hardware stack levels used:    1
 10233 ;; Hardware stack levels required when called:    4
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		_RF_Initialization
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           
 10242                           ;psect for function _setRF_Initialization
 10243  0000'                    _setRF_Initialization:	
 10244                           
 10245                           ;RF_Control_B1.c: 52: Tx_Length = 21;
 10246                           
 10247                           ;incstack = 0
 10248                           ; Regs used in _setRF_Initialization: [wreg]
 10249  0000' 3015               	movlw	21
 10250  0001' 0020               	movlb	0	; select bank0
 10251  0002' 0080'              	movwf	??_setRF_Initialization
 10252  0003' 0800'              	movf	??_setRF_Initialization,w
 10253  0004' 0021               	movlb	1	; select bank1
 10254  0005' 0080'              	movwf	_Tx_Length^(0+128)
 10255  0006' 0008               	return
 10256  0007'                    __end_of_setRF_Initialization:	
 10257                           
 10258                           	psect	text49
 10259  0000'                    __ptext49:	
 10260 ;; *************** function _PowerFault_Main *****************
 10261 ;; Defined at:
 10262 ;;		line 22 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;		None               void
 10269 ;; Registers used:
 10270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10276 ;;      Params:         0       0       0       0       0       0       0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; Hardware stack levels required when called:   10
 10283 ;; This function calls:
 10284 ;;		_setPowerFault_Main
 10285 ;; This function is called by:
 10286 ;;		_main
 10287 ;; This function uses a non-reentrant model
 10288 ;;
 10289                           
 10290                           
 10291                           ;psect for function _PowerFault_Main
 10292  0000'                    _PowerFault_Main:	
 10293                           
 10294                           ;PowerFault_B1.c: 25: setPowerFault_Main();
 10295                           
 10296                           ;incstack = 0
 10297                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10298  0000' 3180' 2000'        	fcall	_setPowerFault_Main
 10299  0002' 0008               	return
 10300  0003'                    __end_of_PowerFault_Main:	
 10301                           
 10302                           	psect	text50
 10303  0000'                    __ptext50:	
 10304 ;; *************** function _setPowerFault_Main *****************
 10305 ;; Defined at:
 10306 ;;		line 61 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;		None               void
 10313 ;; Registers used:
 10314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10320 ;;      Params:         0       0       0       0       0       0       0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0
 10322 ;;      Temps:          0       2       0       0       0       0       0       0
 10323 ;;      Totals:         0       2       0       0       0       0       0       0
 10324 ;;Total ram usage:        2 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; Hardware stack levels required when called:    9
 10327 ;; This function calls:
 10328 ;;		_getLoad_Safe
 10329 ;;		_getTemp_Safe
 10330 ;;		_setPowerFault_Exceptions
 10331 ;; This function is called by:
 10332 ;;		_PowerFault_Main
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function _setPowerFault_Main
 10338  0000'                    _setPowerFault_Main:	
 10339                           
 10340                           ;PowerFault_B1.c: 63: if(PF->Enable)
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10344  0000' 0021               	movlb	1	; select bank1
 10345  0001' 0800'              	movf	_PF^(0+128),w
 10346  0002' 0086               	movwf	6
 10347  0003' 3001               	movlw	1	; select bank2/3
 10348  0004' 0087               	movwf	7
 10349  0005' 1C01               	btfss	1,0
 10350  0006' 0008               	return
 10351                           
 10352                           ;PowerFault_B1.c: 64: {
 10353                           ;PowerFault_B1.c: 65: if(PF->ADtoGO == 0)
 10354  0007' 0800'              	movf	_PF^(0+128),w
 10355  0008' 0086               	movwf	6
 10356  0009' 3001               	movlw	1	; select bank2/3
 10357  000A' 0087               	movwf	7
 10358  000B' 1981               	btfsc	1,3
 10359  000C' 2800'              	goto	l8971
 10360                           
 10361                           ;PowerFault_B1.c: 66: {
 10362                           ;PowerFault_B1.c: 67: PF->Time++;
 10363  000D' 0800'              	movf	_PF^(0+128),w
 10364  000E' 3E02               	addlw	2
 10365  000F' 0086               	movwf	6
 10366  0010' 3001               	movlw	1	; select bank2/3
 10367  0011' 0087               	movwf	7
 10368  0012' 3001               	movlw	1
 10369  0013' 0781               	addwf	1,f
 10370  0014' 3141               	addfsr 1,1
 10371  0015' 1803               	skipnc
 10372  0016' 0A81               	incf	1,f
 10373                           
 10374                           ;PowerFault_B1.c: 68: if(PF->Time >= 700)
 10375  0017' 0800'              	movf	_PF^(0+128),w
 10376  0018' 3E02               	addlw	2
 10377  0019' 0086               	movwf	6
 10378  001A' 3001               	movlw	1	; select bank2/3
 10379  001B' 0087               	movwf	7
 10380  001C' 3F40               	moviw [0]fsr1
 10381  001D' 0020               	movlb	0	; select bank0
 10382  001E' 008D'              	movwf	??_setPowerFault_Main
 10383  001F' 3F41               	moviw [1]fsr1
 10384  0020' 008E'              	movwf	??_setPowerFault_Main+1
 10385  0021' 3002               	movlw	2
 10386  0022' 020E'              	subwf	??_setPowerFault_Main+1,w
 10387  0023' 30BC               	movlw	188
 10388  0024' 1903               	skipnz
 10389  0025' 020D'              	subwf	??_setPowerFault_Main,w
 10390  0026' 1C03               	skipc
 10391  0027' 0008               	return
 10392                           
 10393                           ;PowerFault_B1.c: 69: {
 10394                           ;PowerFault_B1.c: 70: if(getLoad_Safe() && getTemp_Safe())
 10395  0028' 3180' 2000' 3180'  	fcall	_getLoad_Safe
 10396  002B' 3A00               	xorlw	0
 10397  002C' 1903               	skipnz
 10398  002D' 2800'              	goto	l8969
 10399  002E' 3180' 2000' 3180'  	fcall	_getTemp_Safe
 10400  0031' 3A00               	xorlw	0
 10401  0032' 1903               	skipnz
 10402  0033' 2800'              	goto	l8969
 10403                           
 10404                           ;PowerFault_B1.c: 71: {
 10405                           ;PowerFault_B1.c: 72: PF->Time=0;
 10406  0034' 0021               	movlb	1	; select bank1
 10407  0035' 0800'              	movf	_PF^(0+128),w
 10408  0036' 3E02               	addlw	2
 10409  0037' 0086               	movwf	6
 10410  0038' 3001               	movlw	1	; select bank2/3
 10411  0039' 0087               	movwf	7
 10412  003A' 3000               	movlw	0
 10413  003B' 3FC0               	movwi [0]fsr1
 10414  003C' 3FC1               	movwi [1]fsr1
 10415                           
 10416                           ;PowerFault_B1.c: 73: PF->ADtoGO=1;
 10417  003D' 0800'              	movf	_PF^(0+128),w
 10418  003E' 0086               	movwf	6
 10419  003F' 3001               	movlw	1	; select bank2/3
 10420  0040' 0087               	movwf	7
 10421  0041' 1581               	bsf	1,3
 10422                           
 10423                           ;PowerFault_B1.c: 74: PF->Safe=0;
 10424  0042' 0800'              	movf	_PF^(0+128),w
 10425  0043' 0086               	movwf	6
 10426  0044' 3001               	movlw	1	; select bank2/3
 10427  0045' 0087               	movwf	7
 10428  0046' 1101               	bcf	1,2
 10429                           
 10430                           ;PowerFault_B1.c: 75: }
 10431  0047' 0008               	return
 10432  0048'                    l8969:	
 10433                           
 10434                           ;PowerFault_B1.c: 76: else
 10435                           ;PowerFault_B1.c: 77: {
 10436                           ;PowerFault_B1.c: 78: PF->Time=700;
 10437  0048' 0021               	movlb	1	; select bank1
 10438  0049' 0800'              	movf	_PF^(0+128),w
 10439  004A' 3E02               	addlw	2
 10440  004B' 0086               	movwf	6
 10441  004C' 3001               	movlw	1	; select bank2/3
 10442  004D' 0087               	movwf	7
 10443  004E' 30BC               	movlw	188
 10444  004F' 3FC0               	movwi [0]fsr1
 10445  0050' 3002               	movlw	2
 10446  0051' 3FC1               	movwi [1]fsr1
 10447                           
 10448                           ;PowerFault_B1.c: 79: }
 10449                           ;PowerFault_B1.c: 80: }
 10450                           ;PowerFault_B1.c: 81: }
 10451  0052' 0008               	return
 10452  0053'                    l8971:	
 10453                           
 10454                           ;PowerFault_B1.c: 82: else
 10455                           ;PowerFault_B1.c: 83: {
 10456                           ;PowerFault_B1.c: 84: PF->Time++;
 10457  0053' 0800'              	movf	_PF^(0+128),w
 10458  0054' 3E02               	addlw	2
 10459  0055' 0086               	movwf	6
 10460  0056' 3001               	movlw	1	; select bank2/3
 10461  0057' 0087               	movwf	7
 10462  0058' 3001               	movlw	1
 10463  0059' 0781               	addwf	1,f
 10464  005A' 3141               	addfsr 1,1
 10465  005B' 1803               	skipnc
 10466  005C' 0A81               	incf	1,f
 10467                           
 10468                           ;PowerFault_B1.c: 85: if(PF->Time >= 2)
 10469  005D' 0800'              	movf	_PF^(0+128),w
 10470  005E' 3E02               	addlw	2
 10471  005F' 0086               	movwf	6
 10472  0060' 3001               	movlw	1	; select bank2/3
 10473  0061' 0087               	movwf	7
 10474  0062' 3F40               	moviw [0]fsr1
 10475  0063' 0020               	movlb	0	; select bank0
 10476  0064' 008D'              	movwf	??_setPowerFault_Main
 10477  0065' 3F41               	moviw [1]fsr1
 10478  0066' 008E'              	movwf	??_setPowerFault_Main+1
 10479  0067' 3000               	movlw	0
 10480  0068' 020E'              	subwf	??_setPowerFault_Main+1,w
 10481  0069' 3002               	movlw	2
 10482  006A' 1903               	skipnz
 10483  006B' 020D'              	subwf	??_setPowerFault_Main,w
 10484  006C' 1C03               	skipc
 10485  006D' 0008               	return
 10486                           
 10487                           ;PowerFault_B1.c: 86: {
 10488                           ;PowerFault_B1.c: 87: PF->Time=0;
 10489  006E' 0021               	movlb	1	; select bank1
 10490  006F' 0800'              	movf	_PF^(0+128),w
 10491  0070' 3E02               	addlw	2
 10492  0071' 0086               	movwf	6
 10493  0072' 3001               	movlw	1	; select bank2/3
 10494  0073' 0087               	movwf	7
 10495  0074' 3000               	movlw	0
 10496  0075' 3FC0               	movwi [0]fsr1
 10497  0076' 3FC1               	movwi [1]fsr1
 10498                           
 10499                           ;PowerFault_B1.c: 88: PF->ADtoGO=0;
 10500  0077' 0800'              	movf	_PF^(0+128),w
 10501  0078' 0086               	movwf	6
 10502  0079' 3001               	movlw	1	; select bank2/3
 10503  007A' 0087               	movwf	7
 10504  007B' 1181               	bcf	1,3
 10505                           
 10506                           ;PowerFault_B1.c: 90: if(PF->ERROR)
 10507  007C' 0800'              	movf	_PF^(0+128),w
 10508  007D' 0086               	movwf	6
 10509  007E' 3001               	movlw	1	; select bank2/3
 10510  007F' 0087               	movwf	7
 10511  0080' 1C81               	btfss	1,1
 10512  0081' 2800'              	goto	l8991
 10513                           
 10514                           ;PowerFault_B1.c: 91: {
 10515                           ;PowerFault_B1.c: 92: if(PF->AD <= (300+100) && PF->AD >= (300-100))
 10516  0082' 0800'              	movf	_PF^(0+128),w
 10517  0083' 3E04               	addlw	4
 10518  0084' 0086               	movwf	6
 10519  0085' 3001               	movlw	1	; select bank2/3
 10520  0086' 0087               	movwf	7
 10521  0087' 3F40               	moviw [0]fsr1
 10522  0088' 0020               	movlb	0	; select bank0
 10523  0089' 008D'              	movwf	??_setPowerFault_Main
 10524  008A' 3F41               	moviw [1]fsr1
 10525  008B' 008E'              	movwf	??_setPowerFault_Main+1
 10526  008C' 3001               	movlw	1
 10527  008D' 020E'              	subwf	??_setPowerFault_Main+1,w
 10528  008E' 3091               	movlw	145
 10529  008F' 1903               	skipnz
 10530  0090' 020D'              	subwf	??_setPowerFault_Main,w
 10531  0091' 1803               	skipnc
 10532  0092' 2800'              	goto	l9003
 10533  0093' 0021               	movlb	1	; select bank1
 10534  0094' 0800'              	movf	_PF^(0+128),w
 10535  0095' 3E04               	addlw	4
 10536  0096' 0086               	movwf	6
 10537  0097' 3001               	movlw	1	; select bank2/3
 10538  0098' 0087               	movwf	7
 10539  0099' 3F40               	moviw [0]fsr1
 10540  009A' 0020               	movlb	0	; select bank0
 10541  009B' 008D'              	movwf	??_setPowerFault_Main
 10542  009C' 3F41               	moviw [1]fsr1
 10543  009D' 008E'              	movwf	??_setPowerFault_Main+1
 10544  009E' 3000               	movlw	0
 10545  009F' 020E'              	subwf	??_setPowerFault_Main+1,w
 10546  00A0' 30C8               	movlw	200
 10547  00A1' 1903               	skipnz
 10548  00A2' 020D'              	subwf	??_setPowerFault_Main,w
 10549  00A3' 1C03               	skipc
 10550  00A4' 2800'              	goto	l9003
 10551                           
 10552                           ;PowerFault_B1.c: 93: {
 10553                           ;PowerFault_B1.c: 94: PF->Count++;
 10554  00A5' 3001               	movlw	1
 10555  00A6' 008D'              	movwf	??_setPowerFault_Main
 10556  00A7' 0021               	movlb	1	; select bank1
 10557  00A8' 0A00'              	incf	_PF^(0+128),w
 10558  00A9' 0086               	movwf	6
 10559  00AA' 3001               	movlw	1	; select bank2/3
 10560  00AB' 0087               	movwf	7
 10561  00AC' 0020               	movlb	0	; select bank0
 10562  00AD' 080D'              	movf	??_setPowerFault_Main,w
 10563  00AE' 0781               	addwf	1,f
 10564                           
 10565                           ;PowerFault_B1.c: 95: if(PF->Count > 1)
 10566  00AF' 0021               	movlb	1	; select bank1
 10567  00B0' 0A00'              	incf	_PF^(0+128),w
 10568  00B1' 0086               	movwf	6
 10569  00B2' 3001               	movlw	1	; select bank2/3
 10570  00B3' 0087               	movwf	7
 10571  00B4' 3002               	movlw	2
 10572  00B5' 0201               	subwf	1,w
 10573  00B6' 1C03               	skipc
 10574  00B7' 2800'              	goto	l9005
 10575                           
 10576                           ;PowerFault_B1.c: 96: {
 10577                           ;PowerFault_B1.c: 97: PF->Count=0;
 10578  00B8' 0A00'              	incf	_PF^(0+128),w
 10579  00B9' 0086               	movwf	6
 10580  00BA' 3001               	movlw	1	; select bank2/3
 10581  00BB' 0087               	movwf	7
 10582  00BC' 0181               	clrf	1
 10583                           
 10584                           ;PowerFault_B1.c: 98: setPowerFault_Exceptions(0);
 10585  00BD' 3000               	movlw	0
 10586  00BE' 3180' 2000' 3180'  	fcall	_setPowerFault_Exceptions
 10587                           
 10588                           ;PowerFault_B1.c: 99: }
 10589                           ;PowerFault_B1.c: 100: }
 10590  00C1' 2800'              	goto	l9005
 10591  00C2'                    l8991:	
 10592                           ;PowerFault_B1.c: 104: }
 10593                           ;PowerFault_B1.c: 105: }
 10594                           
 10595                           ;PowerFault_B1.c: 101: else
 10596                           ;PowerFault_B1.c: 102: {
 10597                           ;PowerFault_B1.c: 103: PF->Count=0;
 10598                           
 10599                           
 10600                           ;PowerFault_B1.c: 106: else
 10601                           ;PowerFault_B1.c: 107: {
 10602                           ;PowerFault_B1.c: 108: if(PF->AD >= (300+100) || PF->AD <= (310-100))
 10603  00C2' 0800'              	movf	_PF^(0+128),w
 10604  00C3' 3E04               	addlw	4
 10605  00C4' 0086               	movwf	6
 10606  00C5' 3001               	movlw	1	; select bank2/3
 10607  00C6' 0087               	movwf	7
 10608  00C7' 3F40               	moviw [0]fsr1
 10609  00C8' 0020               	movlb	0	; select bank0
 10610  00C9' 008D'              	movwf	??_setPowerFault_Main
 10611  00CA' 3F41               	moviw [1]fsr1
 10612  00CB' 008E'              	movwf	??_setPowerFault_Main+1
 10613  00CC' 3001               	movlw	1
 10614  00CD' 020E'              	subwf	??_setPowerFault_Main+1,w
 10615  00CE' 3090               	movlw	144
 10616  00CF' 1903               	skipnz
 10617  00D0' 020D'              	subwf	??_setPowerFault_Main,w
 10618  00D1' 1803               	skipnc
 10619  00D2' 2800'              	goto	l8995
 10620  00D3' 0021               	movlb	1	; select bank1
 10621  00D4' 0800'              	movf	_PF^(0+128),w
 10622  00D5' 3E04               	addlw	4
 10623  00D6' 0086               	movwf	6
 10624  00D7' 3001               	movlw	1	; select bank2/3
 10625  00D8' 0087               	movwf	7
 10626  00D9' 3F40               	moviw [0]fsr1
 10627  00DA' 0020               	movlb	0	; select bank0
 10628  00DB' 008D'              	movwf	??_setPowerFault_Main
 10629  00DC' 3F41               	moviw [1]fsr1
 10630  00DD' 008E'              	movwf	??_setPowerFault_Main+1
 10631  00DE' 3000               	movlw	0
 10632  00DF' 020E'              	subwf	??_setPowerFault_Main+1,w
 10633  00E0' 30D3               	movlw	211
 10634  00E1' 1903               	skipnz
 10635  00E2' 020D'              	subwf	??_setPowerFault_Main,w
 10636  00E3' 1803               	skipnc
 10637  00E4' 2800'              	goto	l9003
 10638  00E5'                    l8995:	
 10639                           
 10640                           ;PowerFault_B1.c: 109: {
 10641                           ;PowerFault_B1.c: 110: PF->Count++;
 10642  00E5' 3001               	movlw	1
 10643  00E6' 008D'              	movwf	??_setPowerFault_Main
 10644  00E7' 0021               	movlb	1	; select bank1
 10645  00E8' 0A00'              	incf	_PF^(0+128),w
 10646  00E9' 0086               	movwf	6
 10647  00EA' 3001               	movlw	1	; select bank2/3
 10648  00EB' 0087               	movwf	7
 10649  00EC' 0020               	movlb	0	; select bank0
 10650  00ED' 080D'              	movf	??_setPowerFault_Main,w
 10651  00EE' 0781               	addwf	1,f
 10652                           
 10653                           ;PowerFault_B1.c: 111: if(PF->Count > 1)
 10654  00EF' 0021               	movlb	1	; select bank1
 10655  00F0' 0A00'              	incf	_PF^(0+128),w
 10656  00F1' 0086               	movwf	6
 10657  00F2' 3001               	movlw	1	; select bank2/3
 10658  00F3' 0087               	movwf	7
 10659  00F4' 3002               	movlw	2
 10660  00F5' 0201               	subwf	1,w
 10661  00F6' 1C03               	skipc
 10662  00F7' 2800'              	goto	l9005
 10663                           
 10664                           ;PowerFault_B1.c: 112: {
 10665                           ;PowerFault_B1.c: 113: PF->Count=0;
 10666  00F8' 0A00'              	incf	_PF^(0+128),w
 10667  00F9' 0086               	movwf	6
 10668  00FA' 3001               	movlw	1	; select bank2/3
 10669  00FB' 0087               	movwf	7
 10670  00FC' 0181               	clrf	1
 10671                           
 10672                           ;PowerFault_B1.c: 114: setPowerFault_Exceptions(1);
 10673  00FD' 3001               	movlw	1
 10674  00FE' 3180' 2000' 3180'  	fcall	_setPowerFault_Exceptions
 10675                           
 10676                           ;PowerFault_B1.c: 115: }
 10677                           ;PowerFault_B1.c: 116: }
 10678  0101' 2800'              	goto	l9005
 10679  0102'                    l9003:	
 10680                           
 10681                           ;PowerFault_B1.c: 117: else
 10682                           ;PowerFault_B1.c: 118: {
 10683                           ;PowerFault_B1.c: 119: PF->Count=0;
 10684  0102' 0021               	movlb	1	; select bank1
 10685  0103' 0A00'              	incf	_PF^(0+128),w
 10686  0104' 0086               	movwf	6
 10687  0105' 3001               	movlw	1	; select bank2/3
 10688  0106' 0087               	movwf	7
 10689  0107' 0181               	clrf	1
 10690  0108'                    l9005:	
 10691                           
 10692                           ;PowerFault_B1.c: 120: }
 10693                           ;PowerFault_B1.c: 122: }
 10694                           ;PowerFault_B1.c: 123: if(PF->ERROR == 0)
 10695  0108' 0021               	movlb	1	; select bank1
 10696  0109' 0800'              	movf	_PF^(0+128),w
 10697  010A' 0086               	movwf	6
 10698  010B' 3001               	movlw	1	; select bank2/3
 10699  010C' 0087               	movwf	7
 10700  010D' 1881               	btfsc	1,1
 10701  010E' 2800'              	goto	l2027
 10702                           
 10703                           ;PowerFault_B1.c: 124: {
 10704                           ;PowerFault_B1.c: 125: PF->Safe=1;
 10705  010F' 0800'              	movf	_PF^(0+128),w
 10706  0110' 0086               	movwf	6
 10707  0111' 3001               	movlw	1	; select bank2/3
 10708  0112' 0087               	movwf	7
 10709  0113' 1501               	bsf	1,2
 10710  0114'                    l2027:	
 10711                           
 10712                           ;PowerFault_B1.c: 126: }
 10713                           ;PowerFault_B1.c: 127: PF->AD=0;
 10714  0114' 0800'              	movf	_PF^(0+128),w
 10715  0115' 3E04               	addlw	4
 10716  0116' 0086               	movwf	6
 10717  0117' 3001               	movlw	1	; select bank2/3
 10718  0118' 0087               	movwf	7
 10719  0119' 3000               	movlw	0
 10720  011A' 3FC0               	movwi [0]fsr1
 10721  011B' 3FC1               	movwi [1]fsr1
 10722  011C' 0008               	return
 10723  011D'                    __end_of_setPowerFault_Main:	
 10724                           
 10725                           	psect	text51
 10726  0000'                    __ptext51:	
 10727 ;; *************** function _setPowerFault_Exceptions *****************
 10728 ;; Defined at:
 10729 ;;		line 133 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10730 ;; Parameters:    Size  Location     Type
 10731 ;;  command         1    wreg     unsigned char 
 10732 ;; Auto vars:     Size  Location     Type
 10733 ;;  command         1   12[BANK0 ] unsigned char 
 10734 ;; Return value:  Size  Location     Type
 10735 ;;		None               void
 10736 ;; Registers used:
 10737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10738 ;; Tracked objects:
 10739 ;;		On entry : 0/0
 10740 ;;		On exit  : 0/0
 10741 ;;		Unchanged: 0/0
 10742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10743 ;;      Params:         0       0       0       0       0       0       0       0
 10744 ;;      Locals:         0       1       0       0       0       0       0       0
 10745 ;;      Temps:          0       1       0       0       0       0       0       0
 10746 ;;      Totals:         0       2       0       0       0       0       0       0
 10747 ;;Total ram usage:        2 bytes
 10748 ;; Hardware stack levels used:    1
 10749 ;; Hardware stack levels required when called:    8
 10750 ;; This function calls:
 10751 ;;		_DimmerLights_Exceptions
 10752 ;;		_setLED
 10753 ;;		_setRF_Enable
 10754 ;;		_setSw_Enable
 10755 ;; This function is called by:
 10756 ;;		_setPowerFault_Main
 10757 ;; This function uses a non-reentrant model
 10758 ;;
 10759                           
 10760                           
 10761                           ;psect for function _setPowerFault_Exceptions
 10762  0000'                    _setPowerFault_Exceptions:	
 10763                           
 10764                           ;incstack = 0
 10765                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10766                           ;setPowerFault_Exceptions@command stored from wreg
 10767  0000' 0020               	movlb	0	; select bank0
 10768  0001' 008C'              	movwf	setPowerFault_Exceptions@command
 10769                           
 10770                           ;PowerFault_B1.c: 135: PF->ERROR=command;
 10771  0002' 0021               	movlb	1	; select bank1
 10772  0003' 0800'              	movf	_PF^(0+128),w
 10773  0004' 0086               	movwf	6
 10774  0005' 3001               	movlw	1	; select bank2/3
 10775  0006' 0087               	movwf	7
 10776  0007' 0020               	movlb	0	; select bank0
 10777  0008' 080C'              	movf	setPowerFault_Exceptions@command,w
 10778  0009' 1081               	bcf	1,1
 10779  000A' 1D03               	skipz
 10780  000B' 1481               	bsf	1,1
 10781                           
 10782                           ;PowerFault_B1.c: 136: PF->Safe=(~command) & 0x01;
 10783  000C' 090C'              	comf	setPowerFault_Exceptions@command,w
 10784  000D' 3901               	andlw	1
 10785  000E' 008B'              	movwf	??_setPowerFault_Exceptions
 10786  000F' 0021               	movlb	1	; select bank1
 10787  0010' 0800'              	movf	_PF^(0+128),w
 10788  0011' 0086               	movwf	6
 10789  0012' 3001               	movlw	1	; select bank2/3
 10790  0013' 0087               	movwf	7
 10791  0014' 0020               	movlb	0	; select bank0
 10792  0015' 0D8B'              	rlf	??_setPowerFault_Exceptions,f
 10793  0016' 0D8B'              	rlf	??_setPowerFault_Exceptions,f
 10794  0017' 0801               	movf	1,w
 10795  0018' 060B'              	xorwf	??_setPowerFault_Exceptions,w
 10796  0019' 39FB               	andlw	-5
 10797  001A' 060B'              	xorwf	??_setPowerFault_Exceptions,w
 10798  001B' 0081               	movwf	1
 10799                           
 10800                           ;PowerFault_B1.c: 137: if(command == 1)
 10801  001C' 080C'              	movf	setPowerFault_Exceptions@command,w
 10802  001D' 3A01               	xorlw	1
 10803  001E' 1D03               	skipz
 10804  001F' 2800'              	goto	l2031
 10805                           
 10806                           ;PowerFault_B1.c: 138: {
 10807                           ;PowerFault_B1.c: 139: DimmerLights_Exceptions(3);
 10808  0020' 3003               	movlw	3
 10809  0021' 3180' 2000' 3180'  	fcall	_DimmerLights_Exceptions
 10810                           
 10811                           ;PowerFault_B1.c: 141: setLED(2,1);
 10812  0024' 0020               	movlb	0	; select bank0
 10813  0025' 0182'              	clrf	setLED@command
 10814  0026' 0A82'              	incf	setLED@command,f
 10815  0027' 3002               	movlw	2
 10816  0028' 3180' 2000' 3180'  	fcall	_setLED
 10817  002B'                    l2031:	
 10818                           
 10819                           ;PowerFault_B1.c: 143: }
 10820                           ;PowerFault_B1.c: 144: setLED(99,command+10);
 10821  002B' 0020               	movlb	0	; select bank0
 10822  002C' 080C'              	movf	setPowerFault_Exceptions@command,w
 10823  002D' 3E0A               	addlw	10
 10824  002E' 008B'              	movwf	??_setPowerFault_Exceptions
 10825  002F' 080B'              	movf	??_setPowerFault_Exceptions,w
 10826  0030' 0082'              	movwf	setLED@command
 10827  0031' 3063               	movlw	99
 10828  0032' 3180' 2000' 3180'  	fcall	_setLED
 10829                           
 10830                           ;PowerFault_B1.c: 146: setSw_Enable((~command) & 0x01);
 10831  0035' 0020               	movlb	0	; select bank0
 10832  0036' 090C'              	comf	setPowerFault_Exceptions@command,w
 10833  0037' 3901               	andlw	1
 10834  0038' 3180' 2000' 3180'  	fcall	_setSw_Enable
 10835                           
 10836                           ;PowerFault_B1.c: 148: setRF_Enable(1,(~command) & 0x01);
 10837  003B' 0020               	movlb	0	; select bank0
 10838  003C' 090C'              	comf	setPowerFault_Exceptions@command,w
 10839  003D' 3901               	andlw	1
 10840  003E' 008B'              	movwf	??_setPowerFault_Exceptions
 10841  003F' 080B'              	movf	??_setPowerFault_Exceptions,w
 10842  0040' 0082'              	movwf	setRF_Enable@command
 10843  0041' 3001               	movlw	1
 10844  0042' 3180' 2000'        	fcall	_setRF_Enable
 10845  0044' 0008               	return
 10846  0045'                    __end_of_setPowerFault_Exceptions:	
 10847                           
 10848                           	psect	text52
 10849  0000'                    __ptext52:	
 10850 ;; *************** function _getLoad_Safe *****************
 10851 ;; Defined at:
 10852 ;;		line 298 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 10853 ;; Parameters:    Size  Location     Type
 10854 ;;		None
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;		None
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10866 ;;      Params:         0       0       0       0       0       0       0       0
 10867 ;;      Locals:         0       0       0       0       0       0       0       0
 10868 ;;      Temps:          0       1       0       0       0       0       0       0
 10869 ;;      Totals:         0       1       0       0       0       0       0       0
 10870 ;;Total ram usage:        1 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    4
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_setTemp_Main
 10877 ;;		_setPowerFault_Main
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _getLoad_Safe
 10883  0000'                    _getLoad_Safe:	
 10884                           
 10885                           ;OverLoad_B1.c: 299: return Load->Safe;
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _getLoad_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 10889  0000' 0804'              	movf	_Load,w
 10890  0001' 0086               	movwf	6
 10891  0002' 3002               	movlw	2	; select bank4/5
 10892  0003' 0087               	movwf	7
 10893  0004' 0C01               	rrf	1,w
 10894  0005' 0020               	movlb	0	; select bank0
 10895  0006' 0080'              	movwf	??_getLoad_Safe
 10896  0007' 0C80'              	rrf	??_getLoad_Safe,f
 10897  0008' 0C00'              	rrf	??_getLoad_Safe,w
 10898  0009' 3901               	andlw	1
 10899  000A' 0008               	return
 10900  000B'                    __end_of_getLoad_Safe:	
 10901                           
 10902                           	psect	text53
 10903  0000'                    __ptext53:	
 10904 ;; *************** function _PowerFault_Initialization *****************
 10905 ;; Defined at:
 10906 ;;		line 15 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10907 ;; Parameters:    Size  Location     Type
 10908 ;;		None
 10909 ;; Auto vars:     Size  Location     Type
 10910 ;;		None
 10911 ;; Return value:  Size  Location     Type
 10912 ;;		None               void
 10913 ;; Registers used:
 10914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10920 ;;      Params:         0       0       0       0       0       0       0       0
 10921 ;;      Locals:         0       0       0       0       0       0       0       0
 10922 ;;      Temps:          0       0       0       0       0       0       0       0
 10923 ;;      Totals:         0       0       0       0       0       0       0       0
 10924 ;;Total ram usage:        0 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    5
 10927 ;; This function calls:
 10928 ;;		_setPowerFault_Initialization
 10929 ;; This function is called by:
 10930 ;;		_main
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _PowerFault_Initialization
 10936  0000'                    _PowerFault_Initialization:	
 10937                           
 10938                           ;PowerFault_B1.c: 18: setPowerFault_Initialization();
 10939                           
 10940                           ;incstack = 0
 10941                           ; Regs used in _PowerFault_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 10942  0000' 3180' 2000'        	fcall	_setPowerFault_Initialization
 10943  0002' 0008               	return
 10944  0003'                    __end_of_PowerFault_Initialization:	
 10945                           
 10946                           	psect	text54
 10947  0000'                    __ptext54:	
 10948 ;; *************** function _setPowerFault_Initialization *****************
 10949 ;; Defined at:
 10950 ;;		line 29 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;		None
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;		None
 10955 ;; Return value:  Size  Location     Type
 10956 ;;		None               void
 10957 ;; Registers used:
 10958 ;;		wreg, fsr1l, fsr1h
 10959 ;; Tracked objects:
 10960 ;;		On entry : 0/0
 10961 ;;		On exit  : 0/0
 10962 ;;		Unchanged: 0/0
 10963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10964 ;;      Params:         0       0       0       0       0       0       0       0
 10965 ;;      Locals:         0       0       0       0       0       0       0       0
 10966 ;;      Temps:          0       1       0       0       0       0       0       0
 10967 ;;      Totals:         0       1       0       0       0       0       0       0
 10968 ;;Total ram usage:        1 bytes
 10969 ;; Hardware stack levels used:    1
 10970 ;; Hardware stack levels required when called:    4
 10971 ;; This function calls:
 10972 ;;		Nothing
 10973 ;; This function is called by:
 10974 ;;		_PowerFault_Initialization
 10975 ;; This function uses a non-reentrant model
 10976 ;;
 10977                           
 10978                           
 10979                           ;psect for function _setPowerFault_Initialization
 10980  0000'                    _setPowerFault_Initialization:	
 10981                           
 10982                           ;PowerFault_B1.c: 31: PF=&PF1;
 10983                           
 10984                           ;incstack = 0
 10985                           ; Regs used in _setPowerFault_Initialization: [wregfsr1]
 10986  0000' 3000'              	movlw	_PF1& (0+255)
 10987  0001' 0020               	movlb	0	; select bank0
 10988  0002' 0080'              	movwf	??_setPowerFault_Initialization
 10989  0003' 0800'              	movf	??_setPowerFault_Initialization,w
 10990  0004' 0021               	movlb	1	; select bank1
 10991  0005' 0080'              	movwf	_PF^(0+128)
 10992                           
 10993                           ;PowerFault_B1.c: 32: PF->Enable=1;
 10994  0006' 0800'              	movf	_PF^(0+128),w
 10995  0007' 0086               	movwf	6
 10996  0008' 3001               	movlw	1	; select bank2/3
 10997  0009' 0087               	movwf	7
 10998  000A' 1401               	bsf	1,0
 10999                           
 11000                           ;PowerFault_B1.c: 33: PF->Safe=1;
 11001  000B' 0800'              	movf	_PF^(0+128),w
 11002  000C' 0086               	movwf	6
 11003  000D' 3001               	movlw	1	; select bank2/3
 11004  000E' 0087               	movwf	7
 11005  000F' 1501               	bsf	1,2
 11006  0010' 0008               	return
 11007  0011'                    __end_of_setPowerFault_Initialization:	
 11008                           
 11009                           	psect	text55
 11010  0000'                    __ptext55:	
 11011 ;; *************** function _Mcu_Initialization *****************
 11012 ;; Defined at:
 11013 ;;		line 28 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11014 ;; Parameters:    Size  Location     Type
 11015 ;;		None
 11016 ;; Auto vars:     Size  Location     Type
 11017 ;;		None
 11018 ;; Return value:  Size  Location     Type
 11019 ;;		None               void
 11020 ;; Registers used:
 11021 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11022 ;; Tracked objects:
 11023 ;;		On entry : 0/0
 11024 ;;		On exit  : 0/0
 11025 ;;		Unchanged: 0/0
 11026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11027 ;;      Params:         0       0       0       0       0       0       0       0
 11028 ;;      Locals:         0       0       0       0       0       0       0       0
 11029 ;;      Temps:          0       1       0       0       0       0       0       0
 11030 ;;      Totals:         0       1       0       0       0       0       0       0
 11031 ;;Total ram usage:        1 bytes
 11032 ;; Hardware stack levels used:    1
 11033 ;; Hardware stack levels required when called:    5
 11034 ;; This function calls:
 11035 ;;		_ADC_Set
 11036 ;;		_Fosc_Set
 11037 ;;		_INT_Set
 11038 ;;		_IOC_Set
 11039 ;;		_IO_Set
 11040 ;;		_TMR0_Set
 11041 ;;		_WDT_Set
 11042 ;; This function is called by:
 11043 ;;		_main
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047                           
 11048                           ;psect for function _Mcu_Initialization
 11049  0000'                    _Mcu_Initialization:	
 11050                           
 11051                           ;MCU_B1.c: 30: Fosc_Set();
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _Mcu_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11055  0000' 3180' 2000' 3180'  	fcall	_Fosc_Set
 11056                           
 11057                           ;MCU_B1.c: 32: IO_Set();
 11058  0003' 3180' 2000' 3180'  	fcall	_IO_Set
 11059                           
 11060                           ;MCU_B1.c: 34: TMR0_Set();
 11061  0006' 3180' 2000' 3180'  	fcall	_TMR0_Set
 11062                           
 11063                           ;MCU_B1.c: 36: ;;
 11064                           ;MCU_B1.c: 38: ADC_Set();
 11065  0009' 3180' 2000' 3180'  	fcall	_ADC_Set
 11066                           
 11067                           ;MCU_B1.c: 42: INT_Set();
 11068  000C' 3180' 2000' 3180'  	fcall	_INT_Set
 11069                           
 11070                           ;MCU_B1.c: 44: IOC_Set();
 11071  000F' 3180' 2000' 3180'  	fcall	_IOC_Set
 11072                           
 11073                           ;MCU_B1.c: 46: ;;
 11074                           ;MCU_B1.c: 48: ;;
 11075                           ;MCU_B1.c: 50: Memory=&VarMemory;
 11076  0012' 3000'              	movlw	_VarMemory& (0+255)
 11077  0013' 0020               	movlb	0	; select bank0
 11078  0014' 0081'              	movwf	??_Mcu_Initialization
 11079  0015' 0801'              	movf	??_Mcu_Initialization,w
 11080  0016' 0021               	movlb	1	; select bank1
 11081  0017' 0080'              	movwf	_Memory^(0+128)
 11082                           
 11083                           ;MCU_B1.c: 52: WDT_Set();
 11084  0018' 3180' 2000'        	fcall	_WDT_Set
 11085  001A' 0008               	return
 11086  001B'                    __end_of_Mcu_Initialization:	
 11087                           
 11088                           	psect	text56
 11089  0000'                    __ptext56:	
 11090 ;; *************** function _WDT_Set *****************
 11091 ;; Defined at:
 11092 ;;		line 944 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;		None
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;		None
 11097 ;; Return value:  Size  Location     Type
 11098 ;;		None               void
 11099 ;; Registers used:
 11100 ;;		wreg, fsr1l, fsr1h
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11106 ;;      Params:         0       0       0       0       0       0       0       0
 11107 ;;      Locals:         0       0       0       0       0       0       0       0
 11108 ;;      Temps:          0       1       0       0       0       0       0       0
 11109 ;;      Totals:         0       1       0       0       0       0       0       0
 11110 ;;Total ram usage:        1 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:    4
 11113 ;; This function calls:
 11114 ;;		Nothing
 11115 ;; This function is called by:
 11116 ;;		_Mcu_Initialization
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           
 11121                           ;psect for function _WDT_Set
 11122  0000'                    _WDT_Set:	
 11123                           
 11124                           ;MCU_B1.c: 945: WDTCON = 0b00010111;;
 11125                           
 11126                           ;incstack = 0
 11127                           ; Regs used in _WDT_Set: [wregfsr1]
 11128  0000' 3017               	movlw	23
 11129  0001' 0021               	movlb	1	; select bank1
 11130  0002' 0097               	movwf	23	;volatile
 11131                           
 11132                           ;MCU_B1.c: 946: WDT = &_WDT;
 11133  0003' 3000'              	movlw	__WDT& (0+255)
 11134  0004' 0020               	movlb	0	; select bank0
 11135  0005' 0080'              	movwf	??_WDT_Set
 11136  0006' 0800'              	movf	??_WDT_Set,w
 11137  0007' 0021               	movlb	1	; select bank1
 11138  0008' 0080'              	movwf	_WDT^(0+128)
 11139                           
 11140                           ;MCU_B1.c: 947: WDT->Enable = 1;
 11141  0009' 0800'              	movf	_WDT^(0+128),w
 11142  000A' 0086               	movwf	6
 11143  000B' 0187               	clrf	7
 11144  000C' 1401               	bsf	1,0
 11145                           
 11146                           ;MCU_B1.c: 948: WDT->Count = 10;
 11147  000D' 300A               	movlw	10
 11148  000E' 0020               	movlb	0	; select bank0
 11149  000F' 0080'              	movwf	??_WDT_Set
 11150  0010' 0021               	movlb	1	; select bank1
 11151  0011' 0A00'              	incf	_WDT^(0+128),w
 11152  0012' 0086               	movwf	6
 11153  0013' 0187               	clrf	7
 11154  0014' 0020               	movlb	0	; select bank0
 11155  0015' 0800'              	movf	??_WDT_Set,w
 11156  0016' 0081               	movwf	1
 11157  0017' 0008               	return
 11158  0018'                    __end_of_WDT_Set:	
 11159                           
 11160                           	psect	text57
 11161  0000'                    __ptext57:	
 11162 ;; *************** function _TMR0_Set *****************
 11163 ;; Defined at:
 11164 ;;		line 126 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11165 ;; Parameters:    Size  Location     Type
 11166 ;;		None
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;		None               void
 11171 ;; Registers used:
 11172 ;;		wreg, status,2
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11178 ;;      Params:         0       0       0       0       0       0       0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0       0
 11180 ;;      Temps:          0       1       0       0       0       0       0       0
 11181 ;;      Totals:         0       1       0       0       0       0       0       0
 11182 ;;Total ram usage:        1 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    4
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		_Mcu_Initialization
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           
 11193                           ;psect for function _TMR0_Set
 11194  0000'                    _TMR0_Set:	
 11195                           
 11196                           ;MCU_B1.c: 127: Timer0 = &VarTimer0;
 11197                           
 11198                           ;incstack = 0
 11199                           ; Regs used in _TMR0_Set: [wreg+status,2]
 11200  0000' 3000'              	movlw	_VarTimer0& (0+255)
 11201  0001' 0020               	movlb	0	; select bank0
 11202  0002' 0080'              	movwf	??_TMR0_Set
 11203  0003' 0800'              	movf	??_TMR0_Set,w
 11204  0004' 0021               	movlb	1	; select bank1
 11205  0005' 0080'              	movwf	_Timer0^(0+128)
 11206                           
 11207                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 11208  0006' 0195               	clrf	21	;volatile
 11209                           
 11210                           ;MCU_B1.c: 129: TMR0 = (256-90);
 11211  0007' 30A6               	movlw	166
 11212  0008' 0020               	movlb	0	; select bank0
 11213  0009' 0095               	movwf	21	;volatile
 11214                           
 11215                           ;MCU_B1.c: 130: TMR0IE = 1;
 11216  000A' 168B               	bsf	11,5	;volatile
 11217                           
 11218                           ;MCU_B1.c: 131: GIE = 1;
 11219  000B' 178B               	bsf	11,7	;volatile
 11220  000C' 0008               	return
 11221  000D'                    __end_of_TMR0_Set:	
 11222                           
 11223                           	psect	text58
 11224  0000'                    __ptext58:	
 11225 ;; *************** function _IO_Set *****************
 11226 ;; Defined at:
 11227 ;;		line 60 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11228 ;; Parameters:    Size  Location     Type
 11229 ;;		None
 11230 ;; Auto vars:     Size  Location     Type
 11231 ;;		None
 11232 ;; Return value:  Size  Location     Type
 11233 ;;		None               void
 11234 ;; Registers used:
 11235 ;;		wreg, status,2
 11236 ;; Tracked objects:
 11237 ;;		On entry : 0/0
 11238 ;;		On exit  : 0/0
 11239 ;;		Unchanged: 0/0
 11240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11241 ;;      Params:         0       0       0       0       0       0       0       0
 11242 ;;      Locals:         0       0       0       0       0       0       0       0
 11243 ;;      Temps:          0       0       0       0       0       0       0       0
 11244 ;;      Totals:         0       0       0       0       0       0       0       0
 11245 ;;Total ram usage:        0 bytes
 11246 ;; Hardware stack levels used:    1
 11247 ;; Hardware stack levels required when called:    4
 11248 ;; This function calls:
 11249 ;;		Nothing
 11250 ;; This function is called by:
 11251 ;;		_Mcu_Initialization
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           
 11256                           ;psect for function _IO_Set
 11257  0000'                    _IO_Set:	
 11258                           
 11259                           ;MCU_B1.c: 73: TRISA = 0b01110111;;
 11260                           
 11261                           ;incstack = 0
 11262                           ; Regs used in _IO_Set: [wreg+status,2]
 11263  0000' 3077               	movlw	119
 11264  0001' 0021               	movlb	1	; select bank1
 11265  0002' 008C               	movwf	12	;volatile
 11266                           
 11267                           ;MCU_B1.c: 74: TRISB = 0b00000111;;
 11268  0003' 3007               	movlw	7
 11269  0004' 008D               	movwf	13	;volatile
 11270                           
 11271                           ;MCU_B1.c: 75: TRISC = 0b00001100;;
 11272  0005' 300C               	movlw	12
 11273  0006' 008E               	movwf	14	;volatile
 11274                           
 11275                           ;MCU_B1.c: 76: LATA = 0b00000000;;
 11276  0007' 0022               	movlb	2	; select bank2
 11277  0008' 018C               	clrf	12	;volatile
 11278                           
 11279                           ;MCU_B1.c: 77: LATB = 0b00000010;;
 11280  0009' 3002               	movlw	2
 11281  000A' 008D               	movwf	13	;volatile
 11282                           
 11283                           ;MCU_B1.c: 78: LATC = 0b00000000;;
 11284  000B' 018E               	clrf	14	;volatile
 11285                           
 11286                           ;MCU_B1.c: 79: ANSELA = 0b00100010;;
 11287  000C' 3022               	movlw	34
 11288  000D' 0023               	movlb	3	; select bank3
 11289  000E' 008C               	movwf	12	;volatile
 11290                           
 11291                           ;MCU_B1.c: 80: ANSELB = 0b00000000;;
 11292  000F' 018D               	clrf	13	;volatile
 11293                           
 11294                           ;MCU_B1.c: 81: ANSELC = 0b00000000;;
 11295  0010' 018E               	clrf	14	;volatile
 11296                           
 11297                           ;MCU_B1.c: 82: PORTA = 0b01110111;;
 11298  0011' 3077               	movlw	119
 11299  0012' 0020               	movlb	0	; select bank0
 11300  0013' 008C               	movwf	12	;volatile
 11301                           
 11302                           ;MCU_B1.c: 83: PORTB = 0b00000111;;
 11303  0014' 3007               	movlw	7
 11304  0015' 008D               	movwf	13	;volatile
 11305                           
 11306                           ;MCU_B1.c: 84: PORTC = 0b00001100;;
 11307  0016' 300C               	movlw	12
 11308  0017' 008E               	movwf	14	;volatile
 11309  0018' 0008               	return
 11310  0019'                    __end_of_IO_Set:	
 11311                           
 11312                           	psect	text59
 11313  0000'                    __ptext59:	
 11314 ;; *************** function _IOC_Set *****************
 11315 ;; Defined at:
 11316 ;;		line 308 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;		None
 11321 ;; Return value:  Size  Location     Type
 11322 ;;		None               void
 11323 ;; Registers used:
 11324 ;;		wreg, status,2
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11330 ;;      Params:         0       0       0       0       0       0       0       0
 11331 ;;      Locals:         0       0       0       0       0       0       0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0       0
 11333 ;;      Totals:         0       0       0       0       0       0       0       0
 11334 ;;Total ram usage:        0 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    4
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_Mcu_Initialization
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _IOC_Set
 11346  0000'                    _IOC_Set:	
 11347                           
 11348                           ;MCU_B1.c: 309: WPUB2 = 0;
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _IOC_Set: [wreg+status,2]
 11352  0000' 0024               	movlb	4	; select bank4
 11353  0001' 110D               	bcf	13,2	;volatile
 11354                           
 11355                           ;MCU_B1.c: 311: IOCBP = 0b00000100;
 11356  0002' 3004               	movlw	4
 11357  0003' 0027               	movlb	7	; select bank7
 11358  0004' 0094               	movwf	20	;volatile
 11359                           
 11360                           ;MCU_B1.c: 312: IOCBN = 0b00000100;
 11361  0005' 3004               	movlw	4
 11362  0006' 0095               	movwf	21	;volatile
 11363                           
 11364                           ;MCU_B1.c: 327: IOCBF = 0b00000000;
 11365  0007' 0196               	clrf	22	;volatile
 11366                           
 11367                           ;MCU_B1.c: 329: IOCIE = 1;
 11368  0008' 158B               	bsf	11,3	;volatile
 11369                           
 11370                           ;MCU_B1.c: 330: IOCIF = 0;
 11371  0009' 100B               	bcf	11,0	;volatile
 11372                           
 11373                           ;MCU_B1.c: 331: PEIE = 1;
 11374  000A' 170B               	bsf	11,6	;volatile
 11375                           
 11376                           ;MCU_B1.c: 332: GIE = 1;
 11377  000B' 178B               	bsf	11,7	;volatile
 11378  000C' 0008               	return
 11379  000D'                    __end_of_IOC_Set:	
 11380                           
 11381                           	psect	text60
 11382  0000'                    __ptext60:	
 11383 ;; *************** function _INT_Set *****************
 11384 ;; Defined at:
 11385 ;;		line 281 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;		None
 11390 ;; Return value:  Size  Location     Type
 11391 ;;		None               void
 11392 ;; Registers used:
 11393 ;;		None
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11399 ;;      Params:         0       0       0       0       0       0       0       0
 11400 ;;      Locals:         0       0       0       0       0       0       0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0
 11402 ;;      Totals:         0       0       0       0       0       0       0       0
 11403 ;;Total ram usage:        0 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    4
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		_Mcu_Initialization
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _INT_Set
 11415  0000'                    _INT_Set:	
 11416                           
 11417                           ;MCU_B1.c: 282: WPUB0 = 0;
 11418                           
 11419                           ;incstack = 0
 11420                           ; Regs used in _INT_Set: []
 11421  0000' 0024               	movlb	4	; select bank4
 11422  0001' 100D               	bcf	13,0	;volatile
 11423                           
 11424                           ;MCU_B1.c: 283: INTE = 1;
 11425  0002' 160B               	bsf	11,4	;volatile
 11426                           
 11427                           ;MCU_B1.c: 284: PEIE = 1;
 11428  0003' 170B               	bsf	11,6	;volatile
 11429                           
 11430                           ;MCU_B1.c: 285: GIE = 1;
 11431  0004' 178B               	bsf	11,7	;volatile
 11432  0005' 0008               	return
 11433  0006'                    __end_of_INT_Set:	
 11434                           
 11435                           	psect	text61
 11436  0000'                    __ptext61:	
 11437 ;; *************** function _Fosc_Set *****************
 11438 ;; Defined at:
 11439 ;;		line 56 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;		None
 11444 ;; Return value:  Size  Location     Type
 11445 ;;		None               void
 11446 ;; Registers used:
 11447 ;;		wreg
 11448 ;; Tracked objects:
 11449 ;;		On entry : 0/0
 11450 ;;		On exit  : 0/0
 11451 ;;		Unchanged: 0/0
 11452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11453 ;;      Params:         0       0       0       0       0       0       0       0
 11454 ;;      Locals:         0       0       0       0       0       0       0       0
 11455 ;;      Temps:          0       0       0       0       0       0       0       0
 11456 ;;      Totals:         0       0       0       0       0       0       0       0
 11457 ;;Total ram usage:        0 bytes
 11458 ;; Hardware stack levels used:    1
 11459 ;; Hardware stack levels required when called:    4
 11460 ;; This function calls:
 11461 ;;		Nothing
 11462 ;; This function is called by:
 11463 ;;		_Mcu_Initialization
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           
 11468                           ;psect for function _Fosc_Set
 11469  0000'                    _Fosc_Set:	
 11470                           
 11471                           ;MCU_B1.c: 57: OSCCON = 0x78;
 11472                           
 11473                           ;incstack = 0
 11474                           ; Regs used in _Fosc_Set: [wreg]
 11475  0000' 3078               	movlw	120
 11476  0001' 0021               	movlb	1	; select bank1
 11477  0002' 0099               	movwf	25	;volatile
 11478  0003' 0008               	return
 11479  0004'                    __end_of_Fosc_Set:	
 11480                           
 11481                           	psect	text62
 11482  0000'                    __ptext62:	
 11483 ;; *************** function _ADC_Set *****************
 11484 ;; Defined at:
 11485 ;;		line 367 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 11486 ;; Parameters:    Size  Location     Type
 11487 ;;		None
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;		None
 11490 ;; Return value:  Size  Location     Type
 11491 ;;		None               void
 11492 ;; Registers used:
 11493 ;;		wreg
 11494 ;; Tracked objects:
 11495 ;;		On entry : 0/0
 11496 ;;		On exit  : 0/0
 11497 ;;		Unchanged: 0/0
 11498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11499 ;;      Params:         0       0       0       0       0       0       0       0
 11500 ;;      Locals:         0       0       0       0       0       0       0       0
 11501 ;;      Temps:          0       0       0       0       0       0       0       0
 11502 ;;      Totals:         0       0       0       0       0       0       0       0
 11503 ;;Total ram usage:        0 bytes
 11504 ;; Hardware stack levels used:    1
 11505 ;; Hardware stack levels required when called:    4
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_Mcu_Initialization
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           
 11514                           ;psect for function _ADC_Set
 11515  0000'                    _ADC_Set:	
 11516                           
 11517                           ;MCU_B1.c: 368: ADCON1 = 0xf2;
 11518                           
 11519                           ;incstack = 0
 11520                           ; Regs used in _ADC_Set: [wreg]
 11521  0000' 30F2               	movlw	242
 11522  0001' 0021               	movlb	1	; select bank1
 11523  0002' 009E               	movwf	30	;volatile
 11524                           
 11525                           ;MCU_B1.c: 369: FVRCON = 0xc0;
 11526  0003' 30C0               	movlw	192
 11527  0004' 0022               	movlb	2	; select bank2
 11528  0005' 0097               	movwf	23	;volatile
 11529  0006' 0008               	return
 11530  0007'                    __end_of_ADC_Set:	
 11531                           
 11532                           	psect	text63
 11533  0000'                    __ptext63:	
 11534 ;; *************** function _Load_Main *****************
 11535 ;; Defined at:
 11536 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 11537 ;; Parameters:    Size  Location     Type
 11538 ;;		None
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  i               1   17[BANK0 ] unsigned char 
 11541 ;; Return value:  Size  Location     Type
 11542 ;;		None               void
 11543 ;; Registers used:
 11544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11550 ;;      Params:         0       0       0       0       0       0       0       0
 11551 ;;      Locals:         0       1       0       0       0       0       0       0
 11552 ;;      Temps:          0       4       0       0       0       0       0       0
 11553 ;;      Totals:         0       5       0       0       0       0       0       0
 11554 ;;Total ram usage:        5 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; Hardware stack levels required when called:    9
 11557 ;; This function calls:
 11558 ;;		___lwdiv
 11559 ;;		___wmul
 11560 ;;		_getPF_Safe
 11561 ;;		_getTemp_Safe
 11562 ;;		_setDimmerLights_Clear
 11563 ;;		_setLoad_AH_AL_Restore
 11564 ;;		_setLoad_Exceptions
 11565 ;; This function is called by:
 11566 ;;		_main
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           
 11571                           ;psect for function _Load_Main
 11572  0000'                    _Load_Main:	
 11573                           
 11574                           ;OverLoad_B1.c: 41: char i;
 11575                           ;OverLoad_B1.c: 42: if (Load->ERROR) {
 11576                           
 11577                           ;incstack = 0
 11578                           ; Regs used in _Load_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11579  0000' 0804'              	movf	_Load,w
 11580  0001' 0086               	movwf	6
 11581  0002' 3002               	movlw	2	; select bank4/5
 11582  0003' 0087               	movwf	7
 11583  0004' 1E81               	btfss	1,5
 11584  0005' 2800'              	goto	l9313
 11585                           
 11586                           ;OverLoad_B1.c: 43: Load->ErrorTime++;
 11587  0006' 0804'              	movf	_Load,w
 11588  0007' 3E03               	addlw	3
 11589  0008' 0086               	movwf	6
 11590  0009' 3002               	movlw	2	; select bank4/5
 11591  000A' 0087               	movwf	7
 11592  000B' 3001               	movlw	1
 11593  000C' 0781               	addwf	1,f
 11594  000D' 3141               	addfsr 1,1
 11595  000E' 1803               	skipnc
 11596  000F' 0A81               	incf	1,f
 11597                           
 11598                           ;OverLoad_B1.c: 44: if (Load->ErrorTime >= 1000)
 11599  0010' 0804'              	movf	_Load,w
 11600  0011' 3E03               	addlw	3
 11601  0012' 0086               	movwf	6
 11602  0013' 3002               	movlw	2	; select bank4/5
 11603  0014' 0087               	movwf	7
 11604  0015' 3F40               	moviw [0]fsr1
 11605  0016' 0020               	movlb	0	; select bank0
 11606  0017' 008D'              	movwf	??_Load_Main
 11607  0018' 3F41               	moviw [1]fsr1
 11608  0019' 008E'              	movwf	??_Load_Main+1
 11609  001A' 3003               	movlw	3
 11610  001B' 020E'              	subwf	??_Load_Main+1,w
 11611  001C' 30E8               	movlw	232
 11612  001D' 1903               	skipnz
 11613  001E' 020D'              	subwf	??_Load_Main,w
 11614  001F' 1C03               	skipc
 11615  0020' 0008               	return
 11616                           
 11617                           ;OverLoad_B1.c: 45: {
 11618                           ;OverLoad_B1.c: 46: Load->ErrorTime = 0;
 11619  0021' 0804'              	movf	_Load,w
 11620  0022' 3E03               	addlw	3
 11621  0023' 0086               	movwf	6
 11622  0024' 3002               	movlw	2	; select bank4/5
 11623  0025' 0087               	movwf	7
 11624  0026' 3000               	movlw	0
 11625  0027' 3FC0               	movwi [0]fsr1
 11626  0028' 3FC1               	movwi [1]fsr1
 11627                           
 11628                           ;OverLoad_B1.c: 47: setLoad_Exceptions(0);
 11629  0029' 3000               	movlw	0
 11630  002A' 3180' 2000'        	fcall	_setLoad_Exceptions
 11631                           
 11632                           ;OverLoad_B1.c: 48: }
 11633                           ;OverLoad_B1.c: 49: } else {
 11634  002C' 0008               	return
 11635  002D'                    l9313:	
 11636                           
 11637                           ;OverLoad_B1.c: 50: if (Load->ADtoGO) {
 11638  002D' 0804'              	movf	_Load,w
 11639  002E' 0086               	movwf	6
 11640  002F' 3002               	movlw	2	; select bank4/5
 11641  0030' 0087               	movwf	7
 11642  0031' 1E01               	btfss	1,4
 11643  0032' 2800'              	goto	l9395
 11644                           
 11645                           ;OverLoad_B1.c: 51: Load->Time++;
 11646  0033' 0A04'              	incf	_Load,w
 11647  0034' 0086               	movwf	6
 11648  0035' 3002               	movlw	2	; select bank4/5
 11649  0036' 0087               	movwf	7
 11650  0037' 3001               	movlw	1
 11651  0038' 0781               	addwf	1,f
 11652  0039' 3141               	addfsr 1,1
 11653  003A' 1803               	skipnc
 11654  003B' 0A81               	incf	1,f
 11655                           
 11656                           ;OverLoad_B1.c: 52: if (Load->Time >= 5)
 11657  003C' 0A04'              	incf	_Load,w
 11658  003D' 0086               	movwf	6
 11659  003E' 3002               	movlw	2	; select bank4/5
 11660  003F' 0087               	movwf	7
 11661  0040' 3F40               	moviw [0]fsr1
 11662  0041' 0020               	movlb	0	; select bank0
 11663  0042' 008D'              	movwf	??_Load_Main
 11664  0043' 3F41               	moviw [1]fsr1
 11665  0044' 008E'              	movwf	??_Load_Main+1
 11666  0045' 3000               	movlw	0
 11667  0046' 020E'              	subwf	??_Load_Main+1,w
 11668  0047' 3005               	movlw	5
 11669  0048' 1903               	skipnz
 11670  0049' 020D'              	subwf	??_Load_Main,w
 11671  004A' 1C03               	skipc
 11672  004B' 0008               	return
 11673                           
 11674                           ;OverLoad_B1.c: 53: {
 11675                           ;OverLoad_B1.c: 54: Load->Time = 0;
 11676  004C' 0A04'              	incf	_Load,w
 11677  004D' 0086               	movwf	6
 11678  004E' 3002               	movlw	2	; select bank4/5
 11679  004F' 0087               	movwf	7
 11680  0050' 3000               	movlw	0
 11681  0051' 3FC0               	movwi [0]fsr1
 11682  0052' 3FC1               	movwi [1]fsr1
 11683                           
 11684                           ;OverLoad_B1.c: 55: Load->ADtoGO = 0;
 11685  0053' 0804'              	movf	_Load,w
 11686  0054' 0086               	movwf	6
 11687  0055' 3002               	movlw	2	; select bank4/5
 11688  0056' 0087               	movwf	7
 11689  0057' 1201               	bcf	1,4
 11690                           
 11691                           ;OverLoad_B1.c: 56: Load->LightsCount = Load->Lights1Status + Load->Lights2Status + Load
      +                          ->Lights3Status;
 11692  0058' 0804'              	movf	_Load,w
 11693  0059' 3E45               	addlw	69
 11694  005A' 0086               	movwf	6
 11695  005B' 3002               	movlw	2	; select bank4/5
 11696  005C' 0087               	movwf	7
 11697  005D' 0804'              	movf	_Load,w
 11698  005E' 3E44               	addlw	68
 11699  005F' 0084               	movwf	4
 11700  0060' 3002               	movlw	2	; select bank4/5
 11701  0061' 0085               	movwf	5
 11702  0062' 0800               	movf	0,w
 11703  0063' 008D'              	movwf	??_Load_Main
 11704  0064' 0804'              	movf	_Load,w
 11705  0065' 3E43               	addlw	67
 11706  0066' 0084               	movwf	4
 11707  0067' 3002               	movlw	2	; select bank4/5
 11708  0068' 0085               	movwf	5
 11709  0069' 0800               	movf	0,w
 11710  006A' 070D'              	addwf	??_Load_Main,w
 11711  006B' 0701               	addwf	1,w
 11712  006C' 008E'              	movwf	??_Load_Main+1
 11713  006D' 0804'              	movf	_Load,w
 11714  006E' 3E3E               	addlw	62
 11715  006F' 0086               	movwf	6
 11716  0070' 3002               	movlw	2	; select bank4/5
 11717  0071' 0087               	movwf	7
 11718  0072' 080E'              	movf	??_Load_Main+1,w
 11719  0073' 0081               	movwf	1
 11720                           
 11721                           ;OverLoad_B1.c: 57: for (i = 1; i < 4; i++) {
 11722  0074' 0191'              	clrf	Load_Main@i
 11723  0075' 0A91'              	incf	Load_Main@i,f
 11724  0076' 3004               	movlw	4
 11725  0077' 0211'              	subwf	Load_Main@i,w
 11726  0078' 1803               	btfsc	3,0
 11727  0079' 2800'              	goto	l9335
 11728  007A'                    l9329:	
 11729                           
 11730                           ;OverLoad_B1.c: 58: Load->ADH += Load->AH[i];
 11731  007A' 3511'              	lslf	Load_Main@i,w
 11732  007B' 3E08               	addlw	8
 11733  007C' 0704'              	addwf	_Load,w
 11734  007D' 008D'              	movwf	??_Load_Main
 11735  007E' 080D'              	movf	??_Load_Main,w
 11736  007F' 0086               	movwf	6
 11737  0080' 3002               	movlw	2	; select bank4/5
 11738  0081' 0087               	movwf	7
 11739  0082' 0804'              	movf	_Load,w
 11740  0083' 3E2E               	addlw	46
 11741  0084' 0084               	movwf	4
 11742  0085' 3002               	movlw	2	; select bank4/5
 11743  0086' 0085               	movwf	5
 11744  0087' 3F40               	moviw [0]fsr1
 11745  0088' 0780               	addwf	0,f
 11746  0089' 3101               	addfsr 0,1
 11747  008A' 3F41               	moviw [1]fsr1
 11748  008B' 3D80               	addwfc	0,f
 11749  008C' 313F               	addfsr 0,-1
 11750                           
 11751                           ;OverLoad_B1.c: 59: Load->ADL += Load->AL[i];
 11752  008D' 3511'              	lslf	Load_Main@i,w
 11753  008E' 3E1A               	addlw	26
 11754  008F' 0704'              	addwf	_Load,w
 11755  0090' 008D'              	movwf	??_Load_Main
 11756  0091' 080D'              	movf	??_Load_Main,w
 11757  0092' 0086               	movwf	6
 11758  0093' 3002               	movlw	2	; select bank4/5
 11759  0094' 0087               	movwf	7
 11760  0095' 0804'              	movf	_Load,w
 11761  0096' 3E30               	addlw	48
 11762  0097' 0084               	movwf	4
 11763  0098' 3002               	movlw	2	; select bank4/5
 11764  0099' 0085               	movwf	5
 11765  009A' 3F40               	moviw [0]fsr1
 11766  009B' 0780               	addwf	0,f
 11767  009C' 3101               	addfsr 0,1
 11768  009D' 3F41               	moviw [1]fsr1
 11769  009E' 3D80               	addwfc	0,f
 11770  009F' 313F               	addfsr 0,-1
 11771  00A0' 3001               	movlw	1
 11772  00A1' 008D'              	movwf	??_Load_Main
 11773  00A2' 080D'              	movf	??_Load_Main,w
 11774  00A3' 0791'              	addwf	Load_Main@i,f
 11775  00A4' 3004               	movlw	4
 11776  00A5' 0211'              	subwf	Load_Main@i,w
 11777  00A6' 1C03               	skipc
 11778  00A7' 2800'              	goto	l9329
 11779  00A8'                    l9335:	
 11780                           
 11781                           ;OverLoad_B1.c: 60: }
 11782                           ;OverLoad_B1.c: 61: Load->ADH /= 3;
 11783  00A8' 3003               	movlw	3
 11784  00A9' 0080'              	movwf	___lwdiv@divisor
 11785  00AA' 3000               	movlw	0
 11786  00AB' 0081'              	movwf	___lwdiv@divisor+1
 11787  00AC' 0804'              	movf	_Load,w
 11788  00AD' 3E2E               	addlw	46
 11789  00AE' 0086               	movwf	6
 11790  00AF' 3002               	movlw	2	; select bank4/5
 11791  00B0' 0087               	movwf	7
 11792  00B1' 3F40               	moviw [0]fsr1
 11793  00B2' 0082'              	movwf	___lwdiv@dividend
 11794  00B3' 3F41               	moviw [1]fsr1
 11795  00B4' 0083'              	movwf	___lwdiv@dividend+1
 11796  00B5' 3180' 2000' 3180'  	fcall	___lwdiv
 11797  00B8' 0804'              	movf	_Load,w
 11798  00B9' 3E2E               	addlw	46
 11799  00BA' 0086               	movwf	6
 11800  00BB' 3002               	movlw	2	; select bank4/5
 11801  00BC' 0087               	movwf	7
 11802  00BD' 0020               	movlb	0	; select bank0
 11803  00BE' 0800'              	movf	?___lwdiv,w
 11804  00BF' 3FC0               	movwi [0]fsr1
 11805  00C0' 0801'              	movf	?___lwdiv+1,w
 11806  00C1' 3FC1               	movwi [1]fsr1
 11807                           
 11808                           ;OverLoad_B1.c: 62: Load->ADL /= 3;
 11809  00C2' 3003               	movlw	3
 11810  00C3' 0080'              	movwf	___lwdiv@divisor
 11811  00C4' 3000               	movlw	0
 11812  00C5' 0081'              	movwf	___lwdiv@divisor+1
 11813  00C6' 0804'              	movf	_Load,w
 11814  00C7' 3E30               	addlw	48
 11815  00C8' 0086               	movwf	6
 11816  00C9' 3002               	movlw	2	; select bank4/5
 11817  00CA' 0087               	movwf	7
 11818  00CB' 3F40               	moviw [0]fsr1
 11819  00CC' 0082'              	movwf	___lwdiv@dividend
 11820  00CD' 3F41               	moviw [1]fsr1
 11821  00CE' 0083'              	movwf	___lwdiv@dividend+1
 11822  00CF' 3180' 2000' 3180'  	fcall	___lwdiv
 11823  00D2' 0804'              	movf	_Load,w
 11824  00D3' 3E30               	addlw	48
 11825  00D4' 0086               	movwf	6
 11826  00D5' 3002               	movlw	2	; select bank4/5
 11827  00D6' 0087               	movwf	7
 11828  00D7' 0020               	movlb	0	; select bank0
 11829  00D8' 0800'              	movf	?___lwdiv,w
 11830  00D9' 3FC0               	movwi [0]fsr1
 11831  00DA' 0801'              	movf	?___lwdiv+1,w
 11832  00DB' 3FC1               	movwi [1]fsr1
 11833                           
 11834                           ;OverLoad_B1.c: 63: if (Load->ADH > Load->ADL) {
 11835  00DC' 0804'              	movf	_Load,w
 11836  00DD' 3E2E               	addlw	46
 11837  00DE' 0086               	movwf	6
 11838  00DF' 3002               	movlw	2	; select bank4/5
 11839  00E0' 0087               	movwf	7
 11840  00E1' 3F40               	moviw [0]fsr1
 11841  00E2' 008D'              	movwf	??_Load_Main
 11842  00E3' 3F41               	moviw [1]fsr1
 11843  00E4' 008E'              	movwf	??_Load_Main+1
 11844  00E5' 0804'              	movf	_Load,w
 11845  00E6' 3E30               	addlw	48
 11846  00E7' 0086               	movwf	6
 11847  00E8' 3002               	movlw	2	; select bank4/5
 11848  00E9' 0087               	movwf	7
 11849  00EA' 3F40               	moviw [0]fsr1
 11850  00EB' 008F'              	movwf	??_Load_Main+2
 11851  00EC' 3F41               	moviw [1]fsr1
 11852  00ED' 0090'              	movwf	??_Load_Main+3
 11853  00EE' 080E'              	movf	??_Load_Main+1,w
 11854  00EF' 0210'              	subwf	??_Load_Main+3,w
 11855  00F0' 1D03               	skipz
 11856  00F1' 2800'              	goto	u9285
 11857  00F2' 080D'              	movf	??_Load_Main,w
 11858  00F3' 020F'              	subwf	??_Load_Main+2,w
 11859  00F4'                    u9285:	
 11860  00F4' 1803               	skipnc
 11861  00F5' 2800'              	goto	l9393
 11862                           
 11863                           ;OverLoad_B1.c: 64: Load->AD = (Load->ADH - Load->ADL);
 11864  00F6' 0804'              	movf	_Load,w
 11865  00F7' 3E2E               	addlw	46
 11866  00F8' 0086               	movwf	6
 11867  00F9' 3002               	movlw	2	; select bank4/5
 11868  00FA' 0087               	movwf	7
 11869  00FB' 0804'              	movf	_Load,w
 11870  00FC' 3E30               	addlw	48
 11871  00FD' 0084               	movwf	4
 11872  00FE' 3002               	movlw	2	; select bank4/5
 11873  00FF' 0085               	movwf	5
 11874  0100' 3F00               	moviw [0]fsr0
 11875  0101' 008D'              	movwf	??_Load_Main
 11876  0102' 3F01               	moviw [1]fsr0
 11877  0103' 008E'              	movwf	??_Load_Main+1
 11878  0104' 098D'              	comf	??_Load_Main,f
 11879  0105' 098E'              	comf	??_Load_Main+1,f
 11880  0106' 0A8D'              	incf	??_Load_Main,f
 11881  0107' 1903               	skipnz
 11882  0108' 0A8E'              	incf	??_Load_Main+1,f
 11883  0109' 3F40               	moviw [0]fsr1
 11884  010A' 070D'              	addwf	??_Load_Main,w
 11885  010B' 008F'              	movwf	??_Load_Main+2
 11886  010C' 3F41               	moviw [1]fsr1
 11887  010D' 3D0E'              	addwfc	??_Load_Main+1,w
 11888  010E' 0090'              	movwf	??_Load_Main+3
 11889  010F' 0804'              	movf	_Load,w
 11890  0110' 3E2C               	addlw	44
 11891  0111' 0086               	movwf	6
 11892  0112' 3002               	movlw	2	; select bank4/5
 11893  0113' 0087               	movwf	7
 11894  0114' 080F'              	movf	??_Load_Main+2,w
 11895  0115' 3FC0               	movwi [0]fsr1
 11896  0116' 0810'              	movf	??_Load_Main+3,w
 11897  0117' 3FC1               	movwi [1]fsr1
 11898                           
 11899                           ;OverLoad_B1.c: 66: if (Load->Count < 2) {
 11900  0118' 0804'              	movf	_Load,w
 11901  0119' 3E3A               	addlw	58
 11902  011A' 0086               	movwf	6
 11903  011B' 3002               	movlw	2	; select bank4/5
 11904  011C' 0087               	movwf	7
 11905  011D' 3002               	movlw	2
 11906  011E' 0201               	subwf	1,w
 11907  011F' 1803               	skipnc
 11908  0120' 2800'              	goto	l9357
 11909                           
 11910                           ;OverLoad_B1.c: 67: Load->Count++;
 11911  0121' 3001               	movlw	1
 11912  0122' 008D'              	movwf	??_Load_Main
 11913  0123' 0804'              	movf	_Load,w
 11914  0124' 3E3A               	addlw	58
 11915  0125' 0086               	movwf	6
 11916  0126' 3002               	movlw	2	; select bank4/5
 11917  0127' 0087               	movwf	7
 11918  0128' 080D'              	movf	??_Load_Main,w
 11919  0129' 0781               	addwf	1,f
 11920                           
 11921                           ;OverLoad_B1.c: 68: if (Load->Count == 1) {
 11922  012A' 0804'              	movf	_Load,w
 11923  012B' 3E3A               	addlw	58
 11924  012C' 0086               	movwf	6
 11925  012D' 3002               	movlw	2	; select bank4/5
 11926  012E' 0087               	movwf	7
 11927  012F' 0801               	movf	1,w
 11928  0130' 3A01               	xorlw	1
 11929  0131' 1D03               	skipz
 11930  0132' 2800'              	goto	l9349
 11931                           
 11932                           ;OverLoad_B1.c: 69: Load->JudgeValue = 500;
 11933  0133' 0804'              	movf	_Load,w
 11934  0134' 3E36               	addlw	54
 11935  0135' 0086               	movwf	6
 11936  0136' 3002               	movlw	2	; select bank4/5
 11937  0137' 0087               	movwf	7
 11938  0138' 30F4               	movlw	244
 11939  0139' 3FC0               	movwi [0]fsr1
 11940  013A' 3001               	movlw	1
 11941  013B' 3FC1               	movwi [1]fsr1
 11942                           
 11943                           ;OverLoad_B1.c: 70: } else if (Load->Count == 2) {
 11944  013C' 2800'              	goto	l9357
 11945  013D'                    l9349:	
 11946  013D' 0804'              	movf	_Load,w
 11947  013E' 3E3A               	addlw	58
 11948  013F' 0086               	movwf	6
 11949  0140' 3002               	movlw	2	; select bank4/5
 11950  0141' 0087               	movwf	7
 11951  0142' 0801               	movf	1,w
 11952  0143' 3A02               	xorlw	2
 11953  0144' 1D03               	skipz
 11954  0145' 2800'              	goto	l9357
 11955                           
 11956                           ;OverLoad_B1.c: 71: if (Load->LightsCount == 1) {
 11957  0146' 0804'              	movf	_Load,w
 11958  0147' 3E3E               	addlw	62
 11959  0148' 0086               	movwf	6
 11960  0149' 3002               	movlw	2	; select bank4/5
 11961  014A' 0087               	movwf	7
 11962  014B' 0801               	movf	1,w
 11963  014C' 3A01               	xorlw	1
 11964  014D' 1D03               	skipz
 11965  014E' 2800'              	goto	l9355
 11966                           
 11967                           ;OverLoad_B1.c: 72: Load->JudgeValue = 0x42;
 11968  014F' 0804'              	movf	_Load,w
 11969  0150' 3E36               	addlw	54
 11970  0151' 0086               	movwf	6
 11971  0152' 3002               	movlw	2	; select bank4/5
 11972  0153' 0087               	movwf	7
 11973  0154' 3042               	movlw	66
 11974  0155' 3FC0               	movwi [0]fsr1
 11975  0156' 3000               	movlw	0
 11976  0157' 3FC1               	movwi [1]fsr1
 11977                           
 11978                           ;OverLoad_B1.c: 73: } else {
 11979  0158' 2800'              	goto	l9357
 11980  0159'                    l9355:	
 11981                           
 11982                           ;OverLoad_B1.c: 74: Load->JudgeValue = (0x42 + Load->TotalLoad) - 0x08;
 11983  0159' 0804'              	movf	_Load,w
 11984  015A' 3E06               	addlw	6
 11985  015B' 0086               	movwf	6
 11986  015C' 3002               	movlw	2	; select bank4/5
 11987  015D' 0087               	movwf	7
 11988  015E' 3F40               	moviw [0]fsr1
 11989  015F' 008D'              	movwf	??_Load_Main
 11990  0160' 3F41               	moviw [1]fsr1
 11991  0161' 008E'              	movwf	??_Load_Main+1
 11992  0162' 080D'              	movf	??_Load_Main,w
 11993  0163' 3E3A               	addlw	58
 11994  0164' 008F'              	movwf	??_Load_Main+2
 11995  0165' 3000               	movlw	0
 11996  0166' 3D0E'              	addwfc	??_Load_Main+1,w
 11997  0167' 0090'              	movwf	??_Load_Main+3
 11998  0168' 0804'              	movf	_Load,w
 11999  0169' 3E36               	addlw	54
 12000  016A' 0086               	movwf	6
 12001  016B' 3002               	movlw	2	; select bank4/5
 12002  016C' 0087               	movwf	7
 12003  016D' 080F'              	movf	??_Load_Main+2,w
 12004  016E' 3FC0               	movwi [0]fsr1
 12005  016F' 0810'              	movf	??_Load_Main+3,w
 12006  0170' 3FC1               	movwi [1]fsr1
 12007  0171'                    l9357:	
 12008                           
 12009                           ;OverLoad_B1.c: 75: }
 12010                           ;OverLoad_B1.c: 76: }
 12011                           ;OverLoad_B1.c: 77: }
 12012                           ;OverLoad_B1.c: 79: if (Load->AD >= Load->JudgeValue) {
 12013  0171' 0804'              	movf	_Load,w
 12014  0172' 3E36               	addlw	54
 12015  0173' 0086               	movwf	6
 12016  0174' 3002               	movlw	2	; select bank4/5
 12017  0175' 0087               	movwf	7
 12018  0176' 3F40               	moviw [0]fsr1
 12019  0177' 008D'              	movwf	??_Load_Main
 12020  0178' 3F41               	moviw [1]fsr1
 12021  0179' 008E'              	movwf	??_Load_Main+1
 12022  017A' 0804'              	movf	_Load,w
 12023  017B' 3E2C               	addlw	44
 12024  017C' 0086               	movwf	6
 12025  017D' 3002               	movlw	2	; select bank4/5
 12026  017E' 0087               	movwf	7
 12027  017F' 3F40               	moviw [0]fsr1
 12028  0180' 008F'              	movwf	??_Load_Main+2
 12029  0181' 3F41               	moviw [1]fsr1
 12030  0182' 0090'              	movwf	??_Load_Main+3
 12031  0183' 080E'              	movf	??_Load_Main+1,w
 12032  0184' 0210'              	subwf	??_Load_Main+3,w
 12033  0185' 1D03               	skipz
 12034  0186' 2800'              	goto	u9335
 12035  0187' 080D'              	movf	??_Load_Main,w
 12036  0188' 020F'              	subwf	??_Load_Main+2,w
 12037  0189'                    u9335:	
 12038  0189' 1C03               	skipc
 12039  018A' 2800'              	goto	l9367
 12040                           
 12041                           ;OverLoad_B1.c: 80: Load->ErrorCount++;
 12042  018B' 3001               	movlw	1
 12043  018C' 008D'              	movwf	??_Load_Main
 12044  018D' 0804'              	movf	_Load,w
 12045  018E' 3E3C               	addlw	60
 12046  018F' 0086               	movwf	6
 12047  0190' 3002               	movlw	2	; select bank4/5
 12048  0191' 0087               	movwf	7
 12049  0192' 080D'              	movf	??_Load_Main,w
 12050  0193' 0781               	addwf	1,f
 12051                           
 12052                           ;OverLoad_B1.c: 81: if (Load->ErrorCount > 2) {
 12053  0194' 0804'              	movf	_Load,w
 12054  0195' 3E3C               	addlw	60
 12055  0196' 0086               	movwf	6
 12056  0197' 3002               	movlw	2	; select bank4/5
 12057  0198' 0087               	movwf	7
 12058  0199' 3003               	movlw	3
 12059  019A' 0201               	subwf	1,w
 12060  019B' 1C03               	skipc
 12061  019C' 2800'              	goto	l9393
 12062                           
 12063                           ;OverLoad_B1.c: 82: Load->ErrorCount = 0;
 12064  019D' 0804'              	movf	_Load,w
 12065  019E' 3E3C               	addlw	60
 12066  019F' 0086               	movwf	6
 12067  01A0' 3002               	movlw	2	; select bank4/5
 12068  01A1' 0087               	movwf	7
 12069  01A2' 0181               	clrf	1
 12070                           
 12071                           ;OverLoad_B1.c: 83: setLoad_Exceptions(1);
 12072  01A3' 3001               	movlw	1
 12073  01A4' 3180' 2000' 3180'  	fcall	_setLoad_Exceptions
 12074                           
 12075                           ;OverLoad_B1.c: 92: }
 12076                           ;OverLoad_B1.c: 93: } else {
 12077  01A7' 2800'              	goto	l9393
 12078  01A8'                    l9367:	
 12079                           
 12080                           ;OverLoad_B1.c: 94: Load->ErrorCount = 0;
 12081  01A8' 0804'              	movf	_Load,w
 12082  01A9' 3E3C               	addlw	60
 12083  01AA' 0086               	movwf	6
 12084  01AB' 3002               	movlw	2	; select bank4/5
 12085  01AC' 0087               	movwf	7
 12086  01AD' 0181               	clrf	1
 12087                           
 12088                           ;OverLoad_B1.c: 95: if (Load->SafeCount < 10) {
 12089  01AE' 0804'              	movf	_Load,w
 12090  01AF' 3E42               	addlw	66
 12091  01B0' 0086               	movwf	6
 12092  01B1' 3002               	movlw	2	; select bank4/5
 12093  01B2' 0087               	movwf	7
 12094  01B3' 300A               	movlw	10
 12095  01B4' 0201               	subwf	1,w
 12096  01B5' 1803               	skipnc
 12097  01B6' 2800'              	goto	l9373
 12098                           
 12099                           ;OverLoad_B1.c: 96: Load->SafeCount++;
 12100  01B7' 3001               	movlw	1
 12101  01B8' 0020               	movlb	0	; select bank0
 12102  01B9' 008D'              	movwf	??_Load_Main
 12103  01BA' 0804'              	movf	_Load,w
 12104  01BB' 3E42               	addlw	66
 12105  01BC' 0086               	movwf	6
 12106  01BD' 3002               	movlw	2	; select bank4/5
 12107  01BE' 0087               	movwf	7
 12108  01BF' 080D'              	movf	??_Load_Main,w
 12109  01C0' 0781               	addwf	1,f
 12110  01C1'                    l9373:	
 12111                           
 12112                           ;OverLoad_B1.c: 97: }
 12113                           ;OverLoad_B1.c: 98: if (Load->SafeCount >= 10) {
 12114  01C1' 0804'              	movf	_Load,w
 12115  01C2' 3E42               	addlw	66
 12116  01C3' 0086               	movwf	6
 12117  01C4' 3002               	movlw	2	; select bank4/5
 12118  01C5' 0087               	movwf	7
 12119  01C6' 300A               	movlw	10
 12120  01C7' 0201               	subwf	1,w
 12121  01C8' 1C03               	skipc
 12122  01C9' 2800'              	goto	l9393
 12123                           
 12124                           ;OverLoad_B1.c: 99: Load->Safe = 1;
 12125  01CA' 0804'              	movf	_Load,w
 12126  01CB' 0086               	movwf	6
 12127  01CC' 3002               	movlw	2	; select bank4/5
 12128  01CD' 0087               	movwf	7
 12129  01CE' 1581               	bsf	1,3
 12130                           
 12131                           ;OverLoad_B1.c: 103: setDimmerLights_Clear(1, 1);
 12132  01CF' 0020               	movlb	0	; select bank0
 12133  01D0' 0182'              	clrf	setDimmerLights_Clear@command
 12134  01D1' 0A82'              	incf	setDimmerLights_Clear@command,f
 12135  01D2' 3001               	movlw	1
 12136  01D3' 3180' 2000' 3180'  	fcall	_setDimmerLights_Clear
 12137                           
 12138                           ;OverLoad_B1.c: 107: ;;
 12139                           ;OverLoad_B1.c: 132: if (Load->StatusOn) {
 12140  01D6' 0804'              	movf	_Load,w
 12141  01D7' 3E46               	addlw	70
 12142  01D8' 0086               	movwf	6
 12143  01D9' 3002               	movlw	2	; select bank4/5
 12144  01DA' 0087               	movwf	7
 12145  01DB' 1C01               	btfss	1,0
 12146  01DC' 2800'              	goto	l9385
 12147                           
 12148                           ;OverLoad_B1.c: 133: Load->StatusOn = 0;
 12149  01DD' 0804'              	movf	_Load,w
 12150  01DE' 3E46               	addlw	70
 12151  01DF' 0086               	movwf	6
 12152  01E0' 3002               	movlw	2	; select bank4/5
 12153  01E1' 0087               	movwf	7
 12154  01E2' 1001               	bcf	1,0
 12155                           
 12156                           ;OverLoad_B1.c: 134: Load->TotalLoad = Load->AD;
 12157  01E3' 0804'              	movf	_Load,w
 12158  01E4' 3E2C               	addlw	44
 12159  01E5' 0086               	movwf	6
 12160  01E6' 3002               	movlw	2	; select bank4/5
 12161  01E7' 0087               	movwf	7
 12162  01E8' 0804'              	movf	_Load,w
 12163  01E9' 3E06               	addlw	6
 12164  01EA' 0084               	movwf	4
 12165  01EB' 3002               	movlw	2	; select bank4/5
 12166  01EC' 0085               	movwf	5
 12167  01ED' 3F40               	moviw [0]fsr1
 12168  01EE' 3F80               	movwi [0]fsr0
 12169  01EF' 3F41               	moviw [1]fsr1
 12170  01F0' 3F81               	movwi [1]fsr0
 12171  01F1'                    l9385:	
 12172                           
 12173                           ;OverLoad_B1.c: 136: }
 12174                           ;OverLoad_B1.c: 138: if (Load->StatusOff) {
 12175  01F1' 0804'              	movf	_Load,w
 12176  01F2' 3E46               	addlw	70
 12177  01F3' 0086               	movwf	6
 12178  01F4' 3002               	movlw	2	; select bank4/5
 12179  01F5' 0087               	movwf	7
 12180  01F6' 1C81               	btfss	1,1
 12181  01F7' 2800'              	goto	l9393
 12182                           
 12183                           ;OverLoad_B1.c: 139: Load->StatusOff = 0;
 12184  01F8' 0804'              	movf	_Load,w
 12185  01F9' 3E46               	addlw	70
 12186  01FA' 0086               	movwf	6
 12187  01FB' 3002               	movlw	2	; select bank4/5
 12188  01FC' 0087               	movwf	7
 12189  01FD' 1081               	bcf	1,1
 12190                           
 12191                           ;OverLoad_B1.c: 140: Load->TotalLoad = Load->AD;
 12192  01FE' 0804'              	movf	_Load,w
 12193  01FF' 3E2C               	addlw	44
 12194  0200' 0086               	movwf	6
 12195  0201' 3002               	movlw	2	; select bank4/5
 12196  0202' 0087               	movwf	7
 12197  0203' 0804'              	movf	_Load,w
 12198  0204' 3E06               	addlw	6
 12199  0205' 0084               	movwf	4
 12200  0206' 3002               	movlw	2	; select bank4/5
 12201  0207' 0085               	movwf	5
 12202  0208' 3F40               	moviw [0]fsr1
 12203  0209' 3F80               	movwi [0]fsr0
 12204  020A' 3F41               	moviw [1]fsr1
 12205  020B' 3F81               	movwi [1]fsr0
 12206                           
 12207                           ;OverLoad_B1.c: 141: Load->JudgeValue = 0x42 * Load->LightsCount;
 12208  020C' 0804'              	movf	_Load,w
 12209  020D' 3E3E               	addlw	62
 12210  020E' 0086               	movwf	6
 12211  020F' 3002               	movlw	2	; select bank4/5
 12212  0210' 0087               	movwf	7
 12213  0211' 0801               	movf	1,w
 12214  0212' 0020               	movlb	0	; select bank0
 12215  0213' 008D'              	movwf	??_Load_Main
 12216  0214' 018E'              	clrf	??_Load_Main+1
 12217  0215' 080D'              	movf	??_Load_Main,w
 12218  0216' 0080'              	movwf	___wmul@multiplier
 12219  0217' 080E'              	movf	??_Load_Main+1,w
 12220  0218' 0081'              	movwf	___wmul@multiplier+1
 12221  0219' 3042               	movlw	66
 12222  021A' 0082'              	movwf	___wmul@multiplicand
 12223  021B' 3000               	movlw	0
 12224  021C' 0083'              	movwf	___wmul@multiplicand+1
 12225  021D' 3180' 2000' 3180'  	fcall	___wmul
 12226  0220' 0804'              	movf	_Load,w
 12227  0221' 3E36               	addlw	54
 12228  0222' 0086               	movwf	6
 12229  0223' 3002               	movlw	2	; select bank4/5
 12230  0224' 0087               	movwf	7
 12231  0225' 0020               	movlb	0	; select bank0
 12232  0226' 0800'              	movf	?___wmul,w
 12233  0227' 3FC0               	movwi [0]fsr1
 12234  0228' 0801'              	movf	?___wmul+1,w
 12235  0229' 3FC1               	movwi [1]fsr1
 12236  022A'                    l9393:	
 12237                           
 12238                           ;OverLoad_B1.c: 142: }
 12239                           ;OverLoad_B1.c: 143: }
 12240                           ;OverLoad_B1.c: 144: }
 12241                           ;OverLoad_B1.c: 145: }
 12242                           ;OverLoad_B1.c: 146: setLoad_AH_AL_Restore();
 12243  022A' 3180' 2000'        	fcall	_setLoad_AH_AL_Restore
 12244                           
 12245                           ;OverLoad_B1.c: 158: }
 12246                           ;OverLoad_B1.c: 159: } else {
 12247  022C' 0008               	return
 12248  022D'                    l9395:	
 12249                           
 12250                           ;OverLoad_B1.c: 160: if (Load->GO) {
 12251  022D' 0804'              	movf	_Load,w
 12252  022E' 0086               	movwf	6
 12253  022F' 3002               	movlw	2	; select bank4/5
 12254  0230' 0087               	movwf	7
 12255  0231' 1C81               	btfss	1,1
 12256  0232' 2800'              	goto	l9407
 12257                           
 12258                           ;OverLoad_B1.c: 161: if (!Load->LightsON) {
 12259  0233' 0804'              	movf	_Load,w
 12260  0234' 0086               	movwf	6
 12261  0235' 3002               	movlw	2	; select bank4/5
 12262  0236' 0087               	movwf	7
 12263  0237' 1901               	btfsc	1,2
 12264  0238' 2800'              	goto	l9401
 12265                           
 12266                           ;OverLoad_B1.c: 162: Load->LightsON = 1;
 12267  0239' 0804'              	movf	_Load,w
 12268  023A' 0086               	movwf	6
 12269  023B' 3002               	movlw	2	; select bank4/5
 12270  023C' 0087               	movwf	7
 12271  023D' 1501               	bsf	1,2
 12272                           
 12273                           ;OverLoad_B1.c: 163: Load->Safe = 0;
 12274  023E' 0804'              	movf	_Load,w
 12275  023F' 0086               	movwf	6
 12276  0240' 3002               	movlw	2	; select bank4/5
 12277  0241' 0087               	movwf	7
 12278  0242' 1181               	bcf	1,3
 12279  0243'                    l9401:	
 12280                           
 12281                           ;OverLoad_B1.c: 164: }
 12282                           ;OverLoad_B1.c: 165: if (getTemp_Safe() && getPF_Safe()) {
 12283  0243' 3180' 2000' 3180'  	fcall	_getTemp_Safe
 12284  0246' 3A00               	xorlw	0
 12285  0247' 1903               	skipnz
 12286  0248' 0008               	return
 12287  0249' 3180' 2000' 3180'  	fcall	_getPF_Safe
 12288  024C' 3A00               	xorlw	0
 12289  024D' 1903               	skipnz
 12290  024E' 0008               	return
 12291                           
 12292                           ;OverLoad_B1.c: 166: Load->ADtoGO = 1;
 12293  024F' 0804'              	movf	_Load,w
 12294  0250' 0086               	movwf	6
 12295  0251' 3002               	movlw	2	; select bank4/5
 12296  0252' 0087               	movwf	7
 12297  0253' 1601               	bsf	1,4
 12298                           
 12299                           ;OverLoad_B1.c: 167: }
 12300                           ;OverLoad_B1.c: 168: } else {
 12301  0254' 0008               	return
 12302  0255'                    l9407:	
 12303                           
 12304                           ;OverLoad_B1.c: 169: if (Load->LightsON) {
 12305  0255' 0804'              	movf	_Load,w
 12306  0256' 0086               	movwf	6
 12307  0257' 3002               	movlw	2	; select bank4/5
 12308  0258' 0087               	movwf	7
 12309  0259' 1D01               	btfss	1,2
 12310  025A' 0008               	return
 12311                           
 12312                           ;OverLoad_B1.c: 170: Load->LightsON = 0;
 12313  025B' 0804'              	movf	_Load,w
 12314  025C' 0086               	movwf	6
 12315  025D' 3002               	movlw	2	; select bank4/5
 12316  025E' 0087               	movwf	7
 12317  025F' 1101               	bcf	1,2
 12318                           
 12319                           ;OverLoad_B1.c: 171: Load->Safe = 1;
 12320  0260' 0804'              	movf	_Load,w
 12321  0261' 0086               	movwf	6
 12322  0262' 3002               	movlw	2	; select bank4/5
 12323  0263' 0087               	movwf	7
 12324  0264' 1581               	bsf	1,3
 12325                           
 12326                           ;OverLoad_B1.c: 172: Load->ErrorCount = 0;
 12327  0265' 0804'              	movf	_Load,w
 12328  0266' 3E3C               	addlw	60
 12329  0267' 0086               	movwf	6
 12330  0268' 3002               	movlw	2	; select bank4/5
 12331  0269' 0087               	movwf	7
 12332  026A' 0181               	clrf	1
 12333                           
 12334                           ;OverLoad_B1.c: 173: Load->Count = 0;
 12335  026B' 0804'              	movf	_Load,w
 12336  026C' 3E3A               	addlw	58
 12337  026D' 0086               	movwf	6
 12338  026E' 3002               	movlw	2	; select bank4/5
 12339  026F' 0087               	movwf	7
 12340  0270' 0181               	clrf	1
 12341                           
 12342                           ;OverLoad_B1.c: 174: Load->TotalLoad = 0;
 12343  0271' 0804'              	movf	_Load,w
 12344  0272' 3E06               	addlw	6
 12345  0273' 0086               	movwf	6
 12346  0274' 3002               	movlw	2	; select bank4/5
 12347  0275' 0087               	movwf	7
 12348  0276' 3000               	movlw	0
 12349  0277' 3FC0               	movwi [0]fsr1
 12350  0278' 3FC1               	movwi [1]fsr1
 12351                           
 12352                           ;OverLoad_B1.c: 175: Load->NumberCount = 0;
 12353  0279' 0804'              	movf	_Load,w
 12354  027A' 3E3F               	addlw	63
 12355  027B' 0086               	movwf	6
 12356  027C' 3002               	movlw	2	; select bank4/5
 12357  027D' 0087               	movwf	7
 12358  027E' 0181               	clrf	1
 12359                           
 12360                           ;OverLoad_B1.c: 176: Load->StatusOn = 0;
 12361  027F' 0804'              	movf	_Load,w
 12362  0280' 3E46               	addlw	70
 12363  0281' 0086               	movwf	6
 12364  0282' 3002               	movlw	2	; select bank4/5
 12365  0283' 0087               	movwf	7
 12366  0284' 1001               	bcf	1,0
 12367                           
 12368                           ;OverLoad_B1.c: 177: Load->StatusOff = 0;
 12369  0285' 0804'              	movf	_Load,w
 12370  0286' 3E46               	addlw	70
 12371  0287' 0086               	movwf	6
 12372  0288' 3002               	movlw	2	; select bank4/5
 12373  0289' 0087               	movwf	7
 12374  028A' 1081               	bcf	1,1
 12375                           
 12376                           ;OverLoad_B1.c: 178: Load->AD = 0;
 12377  028B' 0804'              	movf	_Load,w
 12378  028C' 3E2C               	addlw	44
 12379  028D' 0086               	movwf	6
 12380  028E' 3002               	movlw	2	; select bank4/5
 12381  028F' 0087               	movwf	7
 12382  0290' 3000               	movlw	0
 12383  0291' 3FC0               	movwi [0]fsr1
 12384  0292' 3FC1               	movwi [1]fsr1
 12385                           
 12386                           ;OverLoad_B1.c: 179: setLoad_AH_AL_Restore();
 12387  0293' 3180' 2000' 3180'  	fcall	_setLoad_AH_AL_Restore
 12388                           
 12389                           ;OverLoad_B1.c: 183: setDimmerLights_Clear(1, 1);
 12390  0296' 0020               	movlb	0	; select bank0
 12391  0297' 0182'              	clrf	setDimmerLights_Clear@command
 12392  0298' 0A82'              	incf	setDimmerLights_Clear@command,f
 12393  0299' 3001               	movlw	1
 12394  029A' 3180' 2000'        	fcall	_setDimmerLights_Clear
 12395                           
 12396                           ;OverLoad_B1.c: 187: ;;
 12397  029C' 0008               	return
 12398  029D'                    __end_of_Load_Main:	
 12399                           
 12400                           	psect	text64
 12401  0000'                    __ptext64:	
 12402 ;; *************** function _setLoad_Exceptions *****************
 12403 ;; Defined at:
 12404 ;;		line 232 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;  command         1    wreg     unsigned char 
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  command         1   12[BANK0 ] unsigned char 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;		None               void
 12411 ;; Registers used:
 12412 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12418 ;;      Params:         0       0       0       0       0       0       0       0
 12419 ;;      Locals:         0       1       0       0       0       0       0       0
 12420 ;;      Temps:          0       1       0       0       0       0       0       0
 12421 ;;      Totals:         0       2       0       0       0       0       0       0
 12422 ;;Total ram usage:        2 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    8
 12425 ;; This function calls:
 12426 ;;		_DimmerLights_Exceptions
 12427 ;;		_setLED
 12428 ;;		_setRF_Enable
 12429 ;;		_setSw_Enable
 12430 ;; This function is called by:
 12431 ;;		_Load_Main
 12432 ;; This function uses a non-reentrant model
 12433 ;;
 12434                           
 12435                           
 12436                           ;psect for function _setLoad_Exceptions
 12437  0000'                    _setLoad_Exceptions:	
 12438                           
 12439                           ;incstack = 0
 12440                           ; Regs used in _setLoad_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12441                           ;setLoad_Exceptions@command stored from wreg
 12442  0000' 0020               	movlb	0	; select bank0
 12443  0001' 008C'              	movwf	setLoad_Exceptions@command
 12444                           
 12445                           ;OverLoad_B1.c: 233: Load->ERROR = command;
 12446  0002' 0804'              	movf	_Load,w
 12447  0003' 0086               	movwf	6
 12448  0004' 3002               	movlw	2	; select bank4/5
 12449  0005' 0087               	movwf	7
 12450  0006' 080C'              	movf	setLoad_Exceptions@command,w
 12451  0007' 1281               	bcf	1,5
 12452  0008' 1D03               	skipz
 12453  0009' 1681               	bsf	1,5
 12454                           
 12455                           ;OverLoad_B1.c: 234: Load->Safe = (~command) & 0x01;
 12456  000A' 090C'              	comf	setLoad_Exceptions@command,w
 12457  000B' 3901               	andlw	1
 12458  000C' 008B'              	movwf	??_setLoad_Exceptions
 12459  000D' 0804'              	movf	_Load,w
 12460  000E' 0086               	movwf	6
 12461  000F' 3002               	movlw	2	; select bank4/5
 12462  0010' 0087               	movwf	7
 12463  0011' 0D8B'              	rlf	??_setLoad_Exceptions,f
 12464  0012' 0D8B'              	rlf	??_setLoad_Exceptions,f
 12465  0013' 0D8B'              	rlf	??_setLoad_Exceptions,f
 12466  0014' 0801               	movf	1,w
 12467  0015' 060B'              	xorwf	??_setLoad_Exceptions,w
 12468  0016' 39F7               	andlw	-9
 12469  0017' 060B'              	xorwf	??_setLoad_Exceptions,w
 12470  0018' 0081               	movwf	1
 12471                           
 12472                           ;OverLoad_B1.c: 235: Load->ErrorStatus = command;
 12473  0019' 080C'              	movf	setLoad_Exceptions@command,w
 12474  001A' 008B'              	movwf	??_setLoad_Exceptions
 12475  001B' 0804'              	movf	_Load,w
 12476  001C' 3E05               	addlw	5
 12477  001D' 0086               	movwf	6
 12478  001E' 3002               	movlw	2	; select bank4/5
 12479  001F' 0087               	movwf	7
 12480  0020' 080B'              	movf	??_setLoad_Exceptions,w
 12481  0021' 0081               	movwf	1
 12482                           
 12483                           ;OverLoad_B1.c: 237: if (command) {
 12484  0022' 080C'              	movf	setLoad_Exceptions@command,w
 12485  0023' 1903               	btfsc	3,2
 12486  0024' 2800'              	goto	l1566
 12487                           
 12488                           ;OverLoad_B1.c: 238: DimmerLights_Exceptions(2);
 12489  0025' 3002               	movlw	2
 12490  0026' 3180' 2000' 3180'  	fcall	_DimmerLights_Exceptions
 12491                           
 12492                           ;OverLoad_B1.c: 240: setLED(2, 1);
 12493  0029' 0020               	movlb	0	; select bank0
 12494  002A' 0182'              	clrf	setLED@command
 12495  002B' 0A82'              	incf	setLED@command,f
 12496  002C' 3002               	movlw	2
 12497  002D' 3180' 2000' 3180'  	fcall	_setLED
 12498  0030'                    l1566:	
 12499                           
 12500                           ;OverLoad_B1.c: 242: }
 12501                           ;OverLoad_B1.c: 243: setLED(99, command + 10);
 12502  0030' 0020               	movlb	0	; select bank0
 12503  0031' 080C'              	movf	setLoad_Exceptions@command,w
 12504  0032' 3E0A               	addlw	10
 12505  0033' 008B'              	movwf	??_setLoad_Exceptions
 12506  0034' 080B'              	movf	??_setLoad_Exceptions,w
 12507  0035' 0082'              	movwf	setLED@command
 12508  0036' 3063               	movlw	99
 12509  0037' 3180' 2000' 3180'  	fcall	_setLED
 12510                           
 12511                           ;OverLoad_B1.c: 245: setSw_Enable((~command) & 0x01);
 12512  003A' 0020               	movlb	0	; select bank0
 12513  003B' 090C'              	comf	setLoad_Exceptions@command,w
 12514  003C' 3901               	andlw	1
 12515  003D' 3180' 2000' 3180'  	fcall	_setSw_Enable
 12516                           
 12517                           ;OverLoad_B1.c: 247: setRF_Enable(1, (~command) & 0x01);
 12518  0040' 0020               	movlb	0	; select bank0
 12519  0041' 090C'              	comf	setLoad_Exceptions@command,w
 12520  0042' 3901               	andlw	1
 12521  0043' 008B'              	movwf	??_setLoad_Exceptions
 12522  0044' 080B'              	movf	??_setLoad_Exceptions,w
 12523  0045' 0082'              	movwf	setRF_Enable@command
 12524  0046' 3001               	movlw	1
 12525  0047' 3180' 2000'        	fcall	_setRF_Enable
 12526  0049' 0008               	return
 12527  004A'                    __end_of_setLoad_Exceptions:	
 12528                           
 12529                           	psect	text65
 12530  0000'                    __ptext65:	
 12531 ;; *************** function _setSw_Enable *****************
 12532 ;; Defined at:
 12533 ;;		line 85 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 12534 ;; Parameters:    Size  Location     Type
 12535 ;;  command         1    wreg     unsigned char 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  command         1    2[BANK0 ] unsigned char 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;		None               void
 12540 ;; Registers used:
 12541 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12547 ;;      Params:         0       0       0       0       0       0       0       0
 12548 ;;      Locals:         0       1       0       0       0       0       0       0
 12549 ;;      Temps:          0       0       0       0       0       0       0       0
 12550 ;;      Totals:         0       1       0       0       0       0       0       0
 12551 ;;Total ram usage:        1 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    5
 12554 ;; This function calls:
 12555 ;;		_SwPointSelect
 12556 ;; This function is called by:
 12557 ;;		_setLoad_Exceptions
 12558 ;;		_setOverTemp_Exceptions
 12559 ;;		_setPowerFault_Exceptions
 12560 ;;		_my_Main
 12561 ;; This function uses a non-reentrant model
 12562 ;;
 12563                           
 12564                           
 12565                           ;psect for function _setSw_Enable
 12566  0000'                    _setSw_Enable:	
 12567                           
 12568                           ;incstack = 0
 12569                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12570                           ;setSw_Enable@command stored from wreg
 12571  0000' 0020               	movlb	0	; select bank0
 12572  0001' 0082'              	movwf	setSw_Enable@command
 12573                           
 12574                           ;Switch_B1.c: 88: SwPointSelect(1);
 12575  0002' 3001               	movlw	1
 12576  0003' 3180' 2000'        	fcall	_SwPointSelect
 12577                           
 12578                           ;Switch_B1.c: 89: Sw->Enable = command;
 12579  0005' 0802'              	movf	_Sw,w
 12580  0006' 0086               	movwf	6
 12581  0007' 3001               	movlw	1	; select bank2/3
 12582  0008' 0087               	movwf	7
 12583  0009' 0020               	movlb	0	; select bank0
 12584  000A' 0802'              	movf	setSw_Enable@command,w
 12585  000B' 1001               	bcf	1,0
 12586  000C' 1D03               	skipz
 12587  000D' 1401               	bsf	1,0
 12588  000E' 0008               	return
 12589  000F'                    __end_of_setSw_Enable:	
 12590                           
 12591                           	psect	text66
 12592  0000'                    __ptext66:	
 12593 ;; *************** function _setRF_Enable *****************
 12594 ;; Defined at:
 12595 ;;		line 174 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;  rf              1    wreg     unsigned char 
 12598 ;;  command         1    2[BANK0 ] unsigned char 
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;  rf              1    3[BANK0 ] unsigned char 
 12601 ;; Return value:  Size  Location     Type
 12602 ;;		None               void
 12603 ;; Registers used:
 12604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12610 ;;      Params:         0       1       0       0       0       0       0       0
 12611 ;;      Locals:         0       1       0       0       0       0       0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0       0
 12613 ;;      Totals:         0       2       0       0       0       0       0       0
 12614 ;;Total ram usage:        2 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; Hardware stack levels required when called:    5
 12617 ;; This function calls:
 12618 ;;		_RfPointSelect
 12619 ;;		_setINT_GO
 12620 ;; This function is called by:
 12621 ;;		_setLoad_Exceptions
 12622 ;;		_setOverTemp_Exceptions
 12623 ;;		_setPowerFault_Exceptions
 12624 ;;		_my_Main
 12625 ;; This function uses a non-reentrant model
 12626 ;;
 12627                           
 12628                           
 12629                           ;psect for function _setRF_Enable
 12630  0000'                    _setRF_Enable:	
 12631                           
 12632                           ;incstack = 0
 12633                           ; Regs used in _setRF_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12634                           ;setRF_Enable@rf stored from wreg
 12635  0000' 0020               	movlb	0	; select bank0
 12636  0001' 0083'              	movwf	setRF_Enable@rf
 12637                           
 12638                           ;RF_Control_B1.c: 175: RfPointSelect(rf);
 12639  0002' 0803'              	movf	setRF_Enable@rf,w
 12640  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
 12641                           
 12642                           ;RF_Control_B1.c: 176: RF->Enable = command;
 12643  0006' 0021               	movlb	1	; select bank1
 12644  0007' 0800'              	movf	_RF^(0+128),w
 12645  0008' 0086               	movwf	6
 12646  0009' 0187               	clrf	7
 12647  000A' 0020               	movlb	0	; select bank0
 12648  000B' 0802'              	movf	setRF_Enable@command,w
 12649  000C' 1001               	bcf	1,0
 12650  000D' 1D03               	skipz
 12651  000E' 1401               	bsf	1,0
 12652                           
 12653                           ;RF_Control_B1.c: 177: RF->Learn = 0;
 12654  000F' 0021               	movlb	1	; select bank1
 12655  0010' 0800'              	movf	_RF^(0+128),w
 12656  0011' 0086               	movwf	6
 12657  0012' 0187               	clrf	7
 12658  0013' 1301               	bcf	1,6
 12659                           
 12660                           ;RF_Control_B1.c: 178: RF->TransceiveGO = 0;
 12661  0014' 0800'              	movf	_RF^(0+128),w
 12662  0015' 0086               	movwf	6
 12663  0016' 0187               	clrf	7
 12664  0017' 1101               	bcf	1,2
 12665                           
 12666                           ;RF_Control_B1.c: 179: RF->RxStatus = 0;
 12667  0018' 0800'              	movf	_RF^(0+128),w
 12668  0019' 0086               	movwf	6
 12669  001A' 0187               	clrf	7
 12670  001B' 1181               	bcf	1,3
 12671                           
 12672                           ;RF_Control_B1.c: 180: RF->ReceiveGO = 0;
 12673  001C' 0800'              	movf	_RF^(0+128),w
 12674  001D' 0086               	movwf	6
 12675  001E' 0187               	clrf	7
 12676  001F' 1081               	bcf	1,1
 12677                           
 12678                           ;RF_Control_B1.c: 181: RF->DebounceTime = 0;
 12679  0020' 0A00'              	incf	_RF^(0+128),w
 12680  0021' 0086               	movwf	6
 12681  0022' 0187               	clrf	7
 12682  0023' 0181               	clrf	1
 12683                           
 12684                           ;RF_Control_B1.c: 182: RF->Debounce = 0;
 12685  0024' 0800'              	movf	_RF^(0+128),w
 12686  0025' 0086               	movwf	6
 12687  0026' 0187               	clrf	7
 12688  0027' 1281               	bcf	1,5
 12689                           
 12690                           ;RF_Control_B1.c: 183: setINT_GO(0);
 12691  0028' 3000               	movlw	0
 12692  0029' 3180' 2000'        	fcall	_setINT_GO
 12693  002B' 0008               	return
 12694  002C'                    __end_of_setRF_Enable:	
 12695                           
 12696                           	psect	text67
 12697  0000'                    __ptext67:	
 12698 ;; *************** function _setINT_GO *****************
 12699 ;; Defined at:
 12700 ;;		line 298 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 12701 ;; Parameters:    Size  Location     Type
 12702 ;;  command         1    wreg     unsigned char 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  command         1    0[BANK0 ] unsigned char 
 12705 ;; Return value:  Size  Location     Type
 12706 ;;		None               void
 12707 ;; Registers used:
 12708 ;;		wreg
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12714 ;;      Params:         0       0       0       0       0       0       0       0
 12715 ;;      Locals:         0       1       0       0       0       0       0       0
 12716 ;;      Temps:          0       0       0       0       0       0       0       0
 12717 ;;      Totals:         0       1       0       0       0       0       0       0
 12718 ;;Total ram usage:        1 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; Hardware stack levels required when called:    4
 12721 ;; This function calls:
 12722 ;;		Nothing
 12723 ;; This function is called by:
 12724 ;;		_setRF_Main
 12725 ;;		_setRF_Enable
 12726 ;;		_RF_RxDisable
 12727 ;; This function uses a non-reentrant model
 12728 ;;
 12729                           
 12730                           
 12731                           ;psect for function _setINT_GO
 12732  0000'                    _setINT_GO:	
 12733                           
 12734                           ;incstack = 0
 12735                           ; Regs used in _setINT_GO: [wreg]
 12736                           ;setINT_GO@command stored from wreg
 12737  0000' 0020               	movlb	0	; select bank0
 12738  0001' 0080'              	movwf	setINT_GO@command
 12739                           
 12740                           ;MCU_B1.c: 299: INTF = 0;
 12741  0002' 108B               	bcf	11,1	;volatile
 12742                           
 12743                           ;MCU_B1.c: 300: INTE = command;
 12744  0003' 1C00'              	btfss	setINT_GO@command,0
 12745  0004' 2800'              	goto	u7810
 12746  0005' 160B               	bsf	11,4	;volatile
 12747  0006' 0008               	return
 12748  0007'                    u7810:	
 12749  0007' 120B               	bcf	11,4	;volatile
 12750  0008' 0008               	return
 12751  0009'                    __end_of_setINT_GO:	
 12752                           
 12753                           	psect	text68
 12754  0000'                    __ptext68:	
 12755 ;; *************** function _DimmerLights_Exceptions *****************
 12756 ;; Defined at:
 12757 ;;		line 246 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;  status          1    wreg     unsigned char 
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;  status          1   10[BANK0 ] unsigned char 
 12762 ;; Return value:  Size  Location     Type
 12763 ;;		None               void
 12764 ;; Registers used:
 12765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12771 ;;      Params:         0       0       0       0       0       0       0       0
 12772 ;;      Locals:         0       1       0       0       0       0       0       0
 12773 ;;      Temps:          0       0       0       0       0       0       0       0
 12774 ;;      Totals:         0       1       0       0       0       0       0       0
 12775 ;;Total ram usage:        1 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:    7
 12778 ;; This function calls:
 12779 ;;		_getDimmerLights_StatusFlag
 12780 ;;		_setBuz
 12781 ;;		_setDimmerLights_ERROR
 12782 ;;		_setDimmerLights_TriggerERROR
 12783 ;; This function is called by:
 12784 ;;		_setLoad_Exceptions
 12785 ;;		_setOverTemp_Exceptions
 12786 ;;		_setPowerFault_Exceptions
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _DimmerLights_Exceptions
 12792  0000'                    _DimmerLights_Exceptions:	
 12793                           
 12794                           ;incstack = 0
 12795                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12796                           ;DimmerLights_Exceptions@status stored from wreg
 12797  0000' 0020               	movlb	0	; select bank0
 12798  0001' 008A'              	movwf	DimmerLights_Exceptions@status
 12799                           
 12800                           ;Dimmer_B1.c: 248: if(status == 1)
 12801  0002' 080A'              	movf	DimmerLights_Exceptions@status,w
 12802  0003' 3A01               	xorlw	1
 12803  0004' 1D03               	skipz
 12804  0005' 2800'              	goto	l8341
 12805                           
 12806                           ;Dimmer_B1.c: 249: {
 12807                           ;Dimmer_B1.c: 250: if(getDimmerLights_StatusFlag())
 12808  0006' 3180' 2000' 3180'  	fcall	_getDimmerLights_StatusFlag
 12809  0009' 3A00               	xorlw	0
 12810  000A' 1903               	skipnz
 12811  000B' 2800'              	goto	l8347
 12812                           
 12813                           ;Dimmer_B1.c: 251: {
 12814                           ;Dimmer_B1.c: 252: setBuz(10,300);
 12815  000C' 302C               	movlw	44
 12816  000D' 0020               	movlb	0	; select bank0
 12817  000E' 0086'              	movwf	setBuz@time
 12818  000F' 3001               	movlw	1
 12819  0010' 0087'              	movwf	setBuz@time+1
 12820  0011' 300A               	movlw	10
 12821  0012' 3180' 2000' 3180'  	fcall	_setBuz
 12822  0015' 2800'              	goto	l8347
 12823  0016'                    l8341:	
 12824                           ;Dimmer_B1.c: 264: }
 12825                           
 12826                           ;Dimmer_B1.c: 253: }
 12827                           ;Dimmer_B1.c: 256: setDimmerLights_ERROR(1);
 12828                           
 12829                           
 12830                           ;Dimmer_B1.c: 265: else if(status == 2)
 12831  0016' 0020               	movlb	0	; select bank0
 12832  0017' 080A'              	movf	DimmerLights_Exceptions@status,w
 12833  0018' 3A02               	xorlw	2
 12834  0019' 1D03               	skipz
 12835  001A' 2800'              	goto	l8345
 12836                           
 12837                           ;Dimmer_B1.c: 266: {
 12838                           ;Dimmer_B1.c: 267: setBuz(5,300);
 12839  001B' 302C               	movlw	44
 12840  001C' 0086'              	movwf	setBuz@time
 12841  001D' 3001               	movlw	1
 12842  001E' 0087'              	movwf	setBuz@time+1
 12843  001F' 3005               	movlw	5
 12844  0020' 3180' 2000' 3180'  	fcall	_setBuz
 12845                           
 12846                           ;Dimmer_B1.c: 268: setDimmerLights_ERROR(Dimmer->Load);
 12847  0023' 0021               	movlb	1	; select bank1
 12848  0024' 0A00'              	incf	_Dimmer^(0+128),w
 12849  0025' 0086               	movwf	6
 12850  0026' 0187               	clrf	7
 12851  0027' 0801               	movf	1,w
 12852  0028' 2800'              	goto	L10
 12853  0029'                    l8345:	
 12854                           ;Dimmer_B1.c: 269: }
 12855                           
 12856                           
 12857                           ;Dimmer_B1.c: 270: else if(status == 3)
 12858  0029' 0020               	movlb	0	; select bank0
 12859  002A' 080A'              	movf	DimmerLights_Exceptions@status,w
 12860  002B' 3A03               	xorlw	3
 12861  002C' 1D03               	skipz
 12862  002D' 2800'              	goto	l818
 12863  002E'                    l8347:	
 12864                           
 12865                           ;Dimmer_B1.c: 271: {
 12866                           ;Dimmer_B1.c: 273: setDimmerLights_ERROR(1);
 12867  002E' 3001               	movlw	1
 12868  002F'                    L10:	
 12869  002F' 3180' 2000' 3180'  	fcall	_setDimmerLights_ERROR
 12870  0032'                    l818:	
 12871                           
 12872                           ;Dimmer_B1.c: 281: }
 12873                           ;Dimmer_B1.c: 284: setDimmerLights_TriggerERROR(1,0);
 12874  0032' 0020               	movlb	0	; select bank0
 12875  0033' 0182'              	clrf	setDimmerLights_TriggerERROR@command
 12876  0034' 3001               	movlw	1
 12877  0035' 3180' 2000' 3180'  	fcall	_setDimmerLights_TriggerERROR
 12878                           
 12879                           ;Dimmer_B1.c: 293: if(myMain->SelfTest == 0)
 12880  0038' 0021               	movlb	1	; select bank1
 12881  0039' 0800'              	movf	_myMain^(0+128),w
 12882  003A' 3E03               	addlw	3
 12883  003B' 0086               	movwf	6
 12884  003C' 3001               	movlw	1	; select bank2/3
 12885  003D' 0087               	movwf	7
 12886  003E' 1801               	btfsc	1,0
 12887  003F' 0008               	return
 12888                           
 12889                           ;Dimmer_B1.c: 294: {
 12890                           ;Dimmer_B1.c: 295: myMain->i=0;
 12891  0040' 0800'              	movf	_myMain^(0+128),w
 12892  0041' 3E0F               	addlw	15
 12893  0042' 0086               	movwf	6
 12894  0043' 3001               	movlw	1	; select bank2/3
 12895  0044' 0087               	movwf	7
 12896  0045' 1001               	bcf	1,0
 12897                           
 12898                           ;Dimmer_B1.c: 296: myMain->j=0;
 12899  0046' 0800'              	movf	_myMain^(0+128),w
 12900  0047' 3E0F               	addlw	15
 12901  0048' 0086               	movwf	6
 12902  0049' 3001               	movlw	1	; select bank2/3
 12903  004A' 0087               	movwf	7
 12904  004B' 1081               	bcf	1,1
 12905                           
 12906                           ;Dimmer_B1.c: 297: myMain->k=1;
 12907  004C' 0800'              	movf	_myMain^(0+128),w
 12908  004D' 3E0F               	addlw	15
 12909  004E' 0086               	movwf	6
 12910  004F' 3001               	movlw	1	; select bank2/3
 12911  0050' 0087               	movwf	7
 12912  0051' 1501               	bsf	1,2
 12913                           
 12914                           ;Dimmer_B1.c: 298: myMain->Count2=0;
 12915  0052' 0800'              	movf	_myMain^(0+128),w
 12916  0053' 3E08               	addlw	8
 12917  0054' 0086               	movwf	6
 12918  0055' 3001               	movlw	1	; select bank2/3
 12919  0056' 0087               	movwf	7
 12920  0057' 3000               	movlw	0
 12921  0058' 3FC0               	movwi [0]fsr1
 12922  0059' 3FC1               	movwi [1]fsr1
 12923  005A' 0008               	return
 12924  005B'                    __end_of_DimmerLights_Exceptions:	
 12925                           
 12926                           	psect	text69
 12927  0000'                    __ptext69:	
 12928 ;; *************** function _setDimmerLights_TriggerERROR *****************
 12929 ;; Defined at:
 12930 ;;		line 320 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 12931 ;; Parameters:    Size  Location     Type
 12932 ;;  lights          1    wreg     unsigned char 
 12933 ;;  command         1    2[BANK0 ] unsigned char 
 12934 ;; Auto vars:     Size  Location     Type
 12935 ;;  lights          1    3[BANK0 ] unsigned char 
 12936 ;; Return value:  Size  Location     Type
 12937 ;;		None               void
 12938 ;; Registers used:
 12939 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12940 ;; Tracked objects:
 12941 ;;		On entry : 0/0
 12942 ;;		On exit  : 0/0
 12943 ;;		Unchanged: 0/0
 12944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12945 ;;      Params:         0       1       0       0       0       0       0       0
 12946 ;;      Locals:         0       1       0       0       0       0       0       0
 12947 ;;      Temps:          0       0       0       0       0       0       0       0
 12948 ;;      Totals:         0       2       0       0       0       0       0       0
 12949 ;;Total ram usage:        2 bytes
 12950 ;; Hardware stack levels used:    1
 12951 ;; Hardware stack levels required when called:    5
 12952 ;; This function calls:
 12953 ;;		_DimmerLightsPointSelect
 12954 ;; This function is called by:
 12955 ;;		_DimmerLights_Exceptions
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           
 12960                           ;psect for function _setDimmerLights_TriggerERROR
 12961  0000'                    _setDimmerLights_TriggerERROR:	
 12962                           
 12963                           ;incstack = 0
 12964                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 12965                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 12966  0000' 0020               	movlb	0	; select bank0
 12967  0001' 0083'              	movwf	setDimmerLights_TriggerERROR@lights
 12968                           
 12969                           ;Dimmer_B1.c: 322: DimmerLightsPointSelect(lights);
 12970  0002' 0803'              	movf	setDimmerLights_TriggerERROR@lights,w
 12971  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
 12972                           
 12973                           ;Dimmer_B1.c: 323: DimmerLights->Trigger=command;
 12974  0005' 0800'              	movf	_DimmerLights,w
 12975  0006' 3E09               	addlw	9
 12976  0007' 0086               	movwf	6
 12977  0008' 3001               	movlw	1	; select bank2/3
 12978  0009' 0087               	movwf	7
 12979  000A' 0020               	movlb	0	; select bank0
 12980  000B' 0802'              	movf	setDimmerLights_TriggerERROR@command,w
 12981  000C' 1081               	bcf	1,1
 12982  000D' 1D03               	skipz
 12983  000E' 1481               	bsf	1,1
 12984                           
 12985                           ;Dimmer_B1.c: 324: DimmerLights->Switch=command;
 12986  000F' 0800'              	movf	_DimmerLights,w
 12987  0010' 3E09               	addlw	9
 12988  0011' 0086               	movwf	6
 12989  0012' 3001               	movlw	1	; select bank2/3
 12990  0013' 0087               	movwf	7
 12991  0014' 0802'              	movf	setDimmerLights_TriggerERROR@command,w
 12992  0015' 1001               	bcf	1,0
 12993  0016' 1D03               	skipz
 12994  0017' 1401               	bsf	1,0
 12995                           
 12996                           ;Dimmer_B1.c: 325: DimmerLights->TriggerAdj=command;
 12997  0018' 0800'              	movf	_DimmerLights,w
 12998  0019' 3E09               	addlw	9
 12999  001A' 0086               	movwf	6
 13000  001B' 3001               	movlw	1	; select bank2/3
 13001  001C' 0087               	movwf	7
 13002  001D' 0802'              	movf	setDimmerLights_TriggerERROR@command,w
 13003  001E' 1181               	bcf	1,3
 13004  001F' 1D03               	skipz
 13005  0020' 1581               	bsf	1,3
 13006                           
 13007                           ;Dimmer_B1.c: 326: DimmerLights->AdjGo=command;
 13008  0021' 0800'              	movf	_DimmerLights,w
 13009  0022' 3E09               	addlw	9
 13010  0023' 0086               	movwf	6
 13011  0024' 3001               	movlw	1	; select bank2/3
 13012  0025' 0087               	movwf	7
 13013  0026' 0802'              	movf	setDimmerLights_TriggerERROR@command,w
 13014  0027' 1101               	bcf	1,2
 13015  0028' 1D03               	skipz
 13016  0029' 1501               	bsf	1,2
 13017  002A' 0008               	return
 13018  002B'                    __end_of_setDimmerLights_TriggerERROR:	
 13019                           
 13020                           	psect	text70
 13021  0000'                    __ptext70:	
 13022 ;; *************** function _setDimmerLights_ERROR *****************
 13023 ;; Defined at:
 13024 ;;		line 302 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13025 ;; Parameters:    Size  Location     Type
 13026 ;;  lights          1    wreg     unsigned char 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  lights          1    5[BANK0 ] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;		None               void
 13031 ;; Registers used:
 13032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13038 ;;      Params:         0       0       0       0       0       0       0       0
 13039 ;;      Locals:         0       1       0       0       0       0       0       0
 13040 ;;      Temps:          0       1       0       0       0       0       0       0
 13041 ;;      Totals:         0       2       0       0       0       0       0       0
 13042 ;;Total ram usage:        2 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    6
 13045 ;; This function calls:
 13046 ;;		_DimmerLightsPointSelect
 13047 ;;		_setLED
 13048 ;;		_setLoad_StatusOff
 13049 ;;		_setRFSW_Status
 13050 ;;		_setSw_Status
 13051 ;; This function is called by:
 13052 ;;		_DimmerLights_Exceptions
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _setDimmerLights_ERROR
 13058  0000'                    _setDimmerLights_ERROR:	
 13059                           
 13060                           ;incstack = 0
 13061                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13062                           ;setDimmerLights_ERROR@lights stored from wreg
 13063  0000' 0020               	movlb	0	; select bank0
 13064  0001' 0085'              	movwf	setDimmerLights_ERROR@lights
 13065                           
 13066                           ;Dimmer_B1.c: 304: DimmerLightsPointSelect(lights);
 13067  0002' 0805'              	movf	setDimmerLights_ERROR@lights,w
 13068  0003' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
 13069                           
 13070                           ;Dimmer_B1.c: 305: if(DimmerLights->Status)
 13071  0006' 0800'              	movf	_DimmerLights,w
 13072  0007' 0086               	movwf	6
 13073  0008' 3001               	movlw	1	; select bank2/3
 13074  0009' 0087               	movwf	7
 13075  000A' 1E81               	btfss	1,5
 13076  000B' 0008               	return
 13077                           
 13078                           ;Dimmer_B1.c: 306: {
 13079                           ;Dimmer_B1.c: 307: DimmerLights->Signal=0;
 13080  000C' 0800'              	movf	_DimmerLights,w
 13081  000D' 0086               	movwf	6
 13082  000E' 3001               	movlw	1	; select bank2/3
 13083  000F' 0087               	movwf	7
 13084  0010' 1081               	bcf	1,1
 13085                           
 13086                           ;Dimmer_B1.c: 308: DimmerLights->AdjFlag=0;
 13087  0011' 0800'              	movf	_DimmerLights,w
 13088  0012' 0086               	movwf	6
 13089  0013' 3001               	movlw	1	; select bank2/3
 13090  0014' 0087               	movwf	7
 13091  0015' 1181               	bcf	1,3
 13092                           
 13093                           ;Dimmer_B1.c: 309: DimmerLights->AdjStatus=0;
 13094  0016' 0800'              	movf	_DimmerLights,w
 13095  0017' 0086               	movwf	6
 13096  0018' 3001               	movlw	1	; select bank2/3
 13097  0019' 0087               	movwf	7
 13098  001A' 1201               	bcf	1,4
 13099                           
 13100                           ;Dimmer_B1.c: 310: DimmerLights->StatusFlag=0;
 13101  001B' 0800'              	movf	_DimmerLights,w
 13102  001C' 0086               	movwf	6
 13103  001D' 3001               	movlw	1	; select bank2/3
 13104  001E' 0087               	movwf	7
 13105  001F' 1301               	bcf	1,6
 13106                           
 13107                           ;Dimmer_B1.c: 311: DimmerLights->DimmingTimeValue=3;
 13108  0020' 3003               	movlw	3
 13109  0021' 0020               	movlb	0	; select bank0
 13110  0022' 0084'              	movwf	??_setDimmerLights_ERROR
 13111  0023' 0800'              	movf	_DimmerLights,w
 13112  0024' 3E02               	addlw	2
 13113  0025' 0086               	movwf	6
 13114  0026' 3001               	movlw	1	; select bank2/3
 13115  0027' 0087               	movwf	7
 13116  0028' 0804'              	movf	??_setDimmerLights_ERROR,w
 13117  0029' 0081               	movwf	1
 13118                           
 13119                           ;Dimmer_B1.c: 312: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 13120  002A' 0800'              	movf	_DimmerLights,w
 13121  002B' 3E06               	addlw	6
 13122  002C' 0086               	movwf	6
 13123  002D' 3001               	movlw	1	; select bank2/3
 13124  002E' 0087               	movwf	7
 13125  002F' 0801               	movf	1,w
 13126  0030' 0084'              	movwf	??_setDimmerLights_ERROR
 13127  0031' 0800'              	movf	_DimmerLights,w
 13128  0032' 3E04               	addlw	4
 13129  0033' 0086               	movwf	6
 13130  0034' 3001               	movlw	1	; select bank2/3
 13131  0035' 0087               	movwf	7
 13132  0036' 0804'              	movf	??_setDimmerLights_ERROR,w
 13133  0037' 0081               	movwf	1
 13134                           
 13135                           ;Dimmer_B1.c: 313: Dimmer->Detect=1;
 13136  0038' 0021               	movlb	1	; select bank1
 13137  0039' 0800'              	movf	_Dimmer^(0+128),w
 13138  003A' 0086               	movwf	6
 13139  003B' 0187               	clrf	7
 13140  003C' 1401               	bsf	1,0
 13141                           
 13142                           ;Dimmer_B1.c: 314: setLoad_StatusOff(lights,1);
 13143  003D' 0020               	movlb	0	; select bank0
 13144  003E' 0180'              	clrf	setLoad_StatusOff@command
 13145  003F' 0A80'              	incf	setLoad_StatusOff@command,f
 13146  0040' 0805'              	movf	setDimmerLights_ERROR@lights,w
 13147  0041' 3180' 2000' 3180'  	fcall	_setLoad_StatusOff
 13148                           
 13149                           ;Dimmer_B1.c: 315: setLED(lights,1);
 13150  0044' 0020               	movlb	0	; select bank0
 13151  0045' 0182'              	clrf	setLED@command
 13152  0046' 0A82'              	incf	setLED@command,f
 13153  0047' 0805'              	movf	setDimmerLights_ERROR@lights,w
 13154  0048' 3180' 2000' 3180'  	fcall	_setLED
 13155                           
 13156                           ;Dimmer_B1.c: 316: setSw_Status(lights,0);
 13157  004B' 0020               	movlb	0	; select bank0
 13158  004C' 0182'              	clrf	setSw_Status@command
 13159  004D' 0805'              	movf	setDimmerLights_ERROR@lights,w
 13160  004E' 3180' 2000' 3180'  	fcall	_setSw_Status
 13161                           
 13162                           ;Dimmer_B1.c: 317: setRFSW_Status(lights,0);
 13163  0051' 0020               	movlb	0	; select bank0
 13164  0052' 0182'              	clrf	setRFSW_Status@command
 13165  0053' 0805'              	movf	setDimmerLights_ERROR@lights,w
 13166  0054' 3180' 2000'        	fcall	_setRFSW_Status
 13167  0056' 0008               	return
 13168  0057'                    __end_of_setDimmerLights_ERROR:	
 13169                           
 13170                           	psect	text71
 13171  0000'                    __ptext71:	
 13172 ;; *************** function _setDimmerLights_Clear *****************
 13173 ;; Defined at:
 13174 ;;		line 456 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;  lights          1    wreg     unsigned char 
 13177 ;;  command         1    2[BANK0 ] unsigned char 
 13178 ;; Auto vars:     Size  Location     Type
 13179 ;;  lights          1    3[BANK0 ] unsigned char 
 13180 ;; Return value:  Size  Location     Type
 13181 ;;		None               void
 13182 ;; Registers used:
 13183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13184 ;; Tracked objects:
 13185 ;;		On entry : 0/0
 13186 ;;		On exit  : 0/0
 13187 ;;		Unchanged: 0/0
 13188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13189 ;;      Params:         0       1       0       0       0       0       0       0
 13190 ;;      Locals:         0       1       0       0       0       0       0       0
 13191 ;;      Temps:          0       0       0       0       0       0       0       0
 13192 ;;      Totals:         0       2       0       0       0       0       0       0
 13193 ;;Total ram usage:        2 bytes
 13194 ;; Hardware stack levels used:    1
 13195 ;; Hardware stack levels required when called:    5
 13196 ;; This function calls:
 13197 ;;		_DimmerLightsPointSelect
 13198 ;; This function is called by:
 13199 ;;		_Load_Main
 13200 ;; This function uses a non-reentrant model
 13201 ;;
 13202                           
 13203                           
 13204                           ;psect for function _setDimmerLights_Clear
 13205  0000'                    _setDimmerLights_Clear:	
 13206                           
 13207                           ;incstack = 0
 13208                           ; Regs used in _setDimmerLights_Clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13209                           ;setDimmerLights_Clear@lights stored from wreg
 13210  0000' 0020               	movlb	0	; select bank0
 13211  0001' 0083'              	movwf	setDimmerLights_Clear@lights
 13212                           
 13213                           ;Dimmer_B1.c: 458: DimmerLightsPointSelect(lights);
 13214  0002' 0803'              	movf	setDimmerLights_Clear@lights,w
 13215  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
 13216                           
 13217                           ;Dimmer_B1.c: 459: DimmerLights->Clear=command;
 13218  0005' 0800'              	movf	_DimmerLights,w
 13219  0006' 3E0C               	addlw	12
 13220  0007' 0086               	movwf	6
 13221  0008' 3001               	movlw	1	; select bank2/3
 13222  0009' 0087               	movwf	7
 13223  000A' 0020               	movlb	0	; select bank0
 13224  000B' 0802'              	movf	setDimmerLights_Clear@command,w
 13225  000C' 1001               	bcf	1,0
 13226  000D' 1D03               	skipz
 13227  000E' 1401               	bsf	1,0
 13228  000F' 0008               	return
 13229  0010'                    __end_of_setDimmerLights_Clear:	
 13230                           
 13231                           	psect	text72
 13232  0000'                    __ptext72:	
 13233 ;; *************** function _getTemp_Safe *****************
 13234 ;; Defined at:
 13235 ;;		line 26 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverTemperature_B1.c"
 13236 ;; Parameters:    Size  Location     Type
 13237 ;;		None
 13238 ;; Auto vars:     Size  Location     Type
 13239 ;;		None
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  1    wreg      unsigned char 
 13242 ;; Registers used:
 13243 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13244 ;; Tracked objects:
 13245 ;;		On entry : 0/0
 13246 ;;		On exit  : 0/0
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13249 ;;      Params:         0       0       0       0       0       0       0       0
 13250 ;;      Locals:         0       0       0       0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0
 13252 ;;      Totals:         0       0       0       0       0       0       0       0
 13253 ;;Total ram usage:        0 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:    4
 13256 ;; This function calls:
 13257 ;;		Nothing
 13258 ;; This function is called by:
 13259 ;;		_Load_Main
 13260 ;;		_setPowerFault_Main
 13261 ;; This function uses a non-reentrant model
 13262 ;;
 13263                           
 13264                           
 13265                           ;psect for function _getTemp_Safe
 13266  0000'                    _getTemp_Safe:	
 13267                           
 13268                           ;OverTemperature_B1.c: 28: return Temp->Safe;
 13269                           
 13270                           ;incstack = 0
 13271                           ; Regs used in _getTemp_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13272  0000' 0803'              	movf	_Temp,w
 13273  0001' 0086               	movwf	6
 13274  0002' 3001               	movlw	1	; select bank2/3
 13275  0003' 0087               	movwf	7
 13276  0004' 0E01               	swapf	1,w
 13277  0005' 3901               	andlw	1
 13278  0006' 0008               	return
 13279  0007'                    __end_of_getTemp_Safe:	
 13280                           
 13281                           	psect	text73
 13282  0000'                    __ptext73:	
 13283 ;; *************** function _getPF_Safe *****************
 13284 ;; Defined at:
 13285 ;;		line 40 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/PowerFault_B1.c"
 13286 ;; Parameters:    Size  Location     Type
 13287 ;;		None
 13288 ;; Auto vars:     Size  Location     Type
 13289 ;;		None
 13290 ;; Return value:  Size  Location     Type
 13291 ;;                  1    wreg      unsigned char 
 13292 ;; Registers used:
 13293 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13294 ;; Tracked objects:
 13295 ;;		On entry : 0/0
 13296 ;;		On exit  : 0/0
 13297 ;;		Unchanged: 0/0
 13298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13299 ;;      Params:         0       0       0       0       0       0       0       0
 13300 ;;      Locals:         0       0       0       0       0       0       0       0
 13301 ;;      Temps:          0       0       0       0       0       0       0       0
 13302 ;;      Totals:         0       0       0       0       0       0       0       0
 13303 ;;Total ram usage:        0 bytes
 13304 ;; Hardware stack levels used:    1
 13305 ;; Hardware stack levels required when called:    4
 13306 ;; This function calls:
 13307 ;;		Nothing
 13308 ;; This function is called by:
 13309 ;;		_Load_Main
 13310 ;;		_setTemp_Main
 13311 ;; This function uses a non-reentrant model
 13312 ;;
 13313                           
 13314                           
 13315                           ;psect for function _getPF_Safe
 13316  0000'                    _getPF_Safe:	
 13317                           
 13318                           ;PowerFault_B1.c: 42: return PF->Safe;
 13319                           
 13320                           ;incstack = 0
 13321                           ; Regs used in _getPF_Safe: [wreg+fsr1l+fsr1h+status,2+status,0]
 13322  0000' 0021               	movlb	1	; select bank1
 13323  0001' 0800'              	movf	_PF^(0+128),w
 13324  0002' 0086               	movwf	6
 13325  0003' 3001               	movlw	1	; select bank2/3
 13326  0004' 0087               	movwf	7
 13327  0005' 0C01               	rrf	1,w
 13328  0006' 0C89               	rrf	9,f
 13329  0007' 3901               	andlw	1
 13330  0008' 0008               	return
 13331  0009'                    __end_of_getPF_Safe:	
 13332                           
 13333                           	psect	text74
 13334  0000'                    __ptext74:	
 13335 ;; *************** function ___lwdiv *****************
 13336 ;; Defined at:
 13337 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 13338 ;; Parameters:    Size  Location     Type
 13339 ;;  divisor         2    0[BANK0 ] unsigned int 
 13340 ;;  dividend        2    2[BANK0 ] unsigned int 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  quotient        2    5[BANK0 ] unsigned int 
 13343 ;;  counter         1    7[BANK0 ] unsigned char 
 13344 ;; Return value:  Size  Location     Type
 13345 ;;                  2    0[BANK0 ] unsigned int 
 13346 ;; Registers used:
 13347 ;;		wreg, status,2, status,0
 13348 ;; Tracked objects:
 13349 ;;		On entry : 0/0
 13350 ;;		On exit  : 0/0
 13351 ;;		Unchanged: 0/0
 13352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13353 ;;      Params:         0       4       0       0       0       0       0       0
 13354 ;;      Locals:         0       3       0       0       0       0       0       0
 13355 ;;      Temps:          0       1       0       0       0       0       0       0
 13356 ;;      Totals:         0       8       0       0       0       0       0       0
 13357 ;;Total ram usage:        8 bytes
 13358 ;; Hardware stack levels used:    1
 13359 ;; Hardware stack levels required when called:    4
 13360 ;; This function calls:
 13361 ;;		Nothing
 13362 ;; This function is called by:
 13363 ;;		_Load_Main
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function ___lwdiv
 13369  0000'                    ___lwdiv:	
 13370                           
 13371                           ;incstack = 0
 13372                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 13373  0000' 0020               	movlb	0	; select bank0
 13374  0001' 0185'              	clrf	___lwdiv@quotient
 13375  0002' 0186'              	clrf	___lwdiv@quotient+1
 13376  0003' 0801'              	movf	___lwdiv@divisor+1,w
 13377  0004' 0400'              	iorwf	___lwdiv@divisor,w
 13378  0005' 1903               	skipnz
 13379  0006' 2800'              	goto	l7463
 13380  0007' 0187'              	clrf	___lwdiv@counter
 13381  0008' 0A87'              	incf	___lwdiv@counter,f
 13382  0009'                    l7451:	
 13383  0009' 1B81'              	btfsc	___lwdiv@divisor+1,7
 13384  000A' 2800'              	goto	l7453
 13385  000B' 3001               	movlw	1
 13386  000C'                    u6475:	
 13387  000C' 3580'              	lslf	___lwdiv@divisor,f
 13388  000D' 0D81'              	rlf	___lwdiv@divisor+1,f
 13389  000E' 0B89               	decfsz	9,f
 13390  000F' 2800'              	goto	u6475
 13391  0010' 3001               	movlw	1
 13392  0011' 0084'              	movwf	??___lwdiv
 13393  0012' 0804'              	movf	??___lwdiv,w
 13394  0013' 0787'              	addwf	___lwdiv@counter,f
 13395  0014' 2800'              	goto	l7451
 13396  0015'                    l7453:	
 13397  0015' 3001               	movlw	1
 13398  0016'                    u6495:	
 13399  0016' 3585'              	lslf	___lwdiv@quotient,f
 13400  0017' 0D86'              	rlf	___lwdiv@quotient+1,f
 13401  0018' 0B89               	decfsz	9,f
 13402  0019' 2800'              	goto	u6495
 13403  001A' 0801'              	movf	___lwdiv@divisor+1,w
 13404  001B' 0203'              	subwf	___lwdiv@dividend+1,w
 13405  001C' 1D03               	skipz
 13406  001D' 2800'              	goto	u6505
 13407  001E' 0800'              	movf	___lwdiv@divisor,w
 13408  001F' 0202'              	subwf	___lwdiv@dividend,w
 13409  0020'                    u6505:	
 13410  0020' 1C03               	skipc
 13411  0021' 2800'              	goto	l7459
 13412  0022' 0800'              	movf	___lwdiv@divisor,w
 13413  0023' 0282'              	subwf	___lwdiv@dividend,f
 13414  0024' 0801'              	movf	___lwdiv@divisor+1,w
 13415  0025' 3B83'              	subwfb	___lwdiv@dividend+1,f
 13416  0026' 1405'              	bsf	___lwdiv@quotient,0
 13417  0027'                    l7459:	
 13418  0027' 3001               	movlw	1
 13419  0028'                    u6515:	
 13420  0028' 3681'              	lsrf	___lwdiv@divisor+1,f
 13421  0029' 0C80'              	rrf	___lwdiv@divisor,f
 13422  002A' 0B89               	decfsz	9,f
 13423  002B' 2800'              	goto	u6515
 13424  002C' 3001               	movlw	1
 13425  002D' 0287'              	subwf	___lwdiv@counter,f
 13426  002E' 1D03               	btfss	3,2
 13427  002F' 2800'              	goto	l7453
 13428  0030'                    l7463:	
 13429  0030' 0806'              	movf	___lwdiv@quotient+1,w
 13430  0031' 0181'              	clrf	?___lwdiv+1
 13431  0032' 0781'              	addwf	?___lwdiv+1,f
 13432  0033' 0805'              	movf	___lwdiv@quotient,w
 13433  0034' 0180'              	clrf	?___lwdiv
 13434  0035' 0780'              	addwf	?___lwdiv,f
 13435  0036' 0008               	return
 13436  0037'                    __end_of___lwdiv:	
 13437                           
 13438                           	psect	text75
 13439  0000'                    __ptext75:	
 13440 ;; *************** function _Load_Initialization *****************
 13441 ;; Defined at:
 13442 ;;		line 9 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;		None
 13447 ;; Return value:  Size  Location     Type
 13448 ;;		None               void
 13449 ;; Registers used:
 13450 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13456 ;;      Params:         0       0       0       0       0       0       0       0
 13457 ;;      Locals:         0       0       0       0       0       0       0       0
 13458 ;;      Temps:          0       1       0       0       0       0       0       0
 13459 ;;      Totals:         0       1       0       0       0       0       0       0
 13460 ;;Total ram usage:        1 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    5
 13463 ;; This function calls:
 13464 ;;		_setLoad_AH_AL_Restore
 13465 ;; This function is called by:
 13466 ;;		_main
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           
 13471                           ;psect for function _Load_Initialization
 13472  0000'                    _Load_Initialization:	
 13473                           
 13474                           ;OverLoad_B1.c: 10: Load = &Load1;
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13478  0000' 3000'              	movlw	_Load1& (0+255)
 13479  0001' 0020               	movlb	0	; select bank0
 13480  0002' 0082'              	movwf	??_Load_Initialization
 13481  0003' 0802'              	movf	??_Load_Initialization,w
 13482  0004' 0084'              	movwf	_Load
 13483                           
 13484                           ;OverLoad_B1.c: 11: Load->Safe = 1;
 13485  0005' 0804'              	movf	_Load,w
 13486  0006' 0086               	movwf	6
 13487  0007' 3002               	movlw	2	; select bank4/5
 13488  0008' 0087               	movwf	7
 13489  0009' 1581               	bsf	1,3
 13490                           
 13491                           ;OverLoad_B1.c: 12: setLoad_AH_AL_Restore();
 13492  000A' 3180' 2000'        	fcall	_setLoad_AH_AL_Restore
 13493  000C' 0008               	return
 13494  000D'                    __end_of_Load_Initialization:	
 13495                           
 13496                           	psect	text76
 13497  0000'                    __ptext76:	
 13498 ;; *************** function _setLoad_AH_AL_Restore *****************
 13499 ;; Defined at:
 13500 ;;		line 307 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;		None
 13503 ;; Auto vars:     Size  Location     Type
 13504 ;;  i               1    1[BANK0 ] unsigned char 
 13505 ;; Return value:  Size  Location     Type
 13506 ;;		None               void
 13507 ;; Registers used:
 13508 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13509 ;; Tracked objects:
 13510 ;;		On entry : 0/0
 13511 ;;		On exit  : 0/0
 13512 ;;		Unchanged: 0/0
 13513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13514 ;;      Params:         0       0       0       0       0       0       0       0
 13515 ;;      Locals:         0       1       0       0       0       0       0       0
 13516 ;;      Temps:          0       1       0       0       0       0       0       0
 13517 ;;      Totals:         0       2       0       0       0       0       0       0
 13518 ;;Total ram usage:        2 bytes
 13519 ;; Hardware stack levels used:    1
 13520 ;; Hardware stack levels required when called:    4
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		_Load_Initialization
 13525 ;;		_Load_Main
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _setLoad_AH_AL_Restore
 13531  0000'                    _setLoad_AH_AL_Restore:	
 13532                           
 13533                           ;OverLoad_B1.c: 308: char i;
 13534                           ;OverLoad_B1.c: 309: for (i = 0; i < 5; i++) {
 13535                           
 13536                           ;incstack = 0
 13537                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 13538  0000' 0020               	movlb	0	; select bank0
 13539  0001' 0181'              	clrf	setLoad_AH_AL_Restore@i
 13540  0002'                    L11:	
 13541  0002' 3005               	movlw	5
 13542  0003' 0201'              	subwf	setLoad_AH_AL_Restore@i,w
 13543  0004' 1803               	btfsc	3,0
 13544  0005' 0008               	return
 13545                           
 13546                           ;OverLoad_B1.c: 310: Load->AH[i] = 0;
 13547  0006' 3501'              	lslf	setLoad_AH_AL_Restore@i,w
 13548  0007' 3E08               	addlw	8
 13549  0008' 0704'              	addwf	_Load,w
 13550  0009' 0080'              	movwf	??_setLoad_AH_AL_Restore
 13551  000A' 0800'              	movf	??_setLoad_AH_AL_Restore,w
 13552  000B' 0086               	movwf	6
 13553  000C' 3002               	movlw	2	; select bank4/5
 13554  000D' 0087               	movwf	7
 13555  000E' 3000               	movlw	0
 13556  000F' 3FC0               	movwi [0]fsr1
 13557  0010' 3FC1               	movwi [1]fsr1
 13558                           
 13559                           ;OverLoad_B1.c: 311: Load->AL[i] = 0xffff;
 13560  0011' 3501'              	lslf	setLoad_AH_AL_Restore@i,w
 13561  0012' 3E1A               	addlw	26
 13562  0013' 0704'              	addwf	_Load,w
 13563  0014' 0080'              	movwf	??_setLoad_AH_AL_Restore
 13564  0015' 0800'              	movf	??_setLoad_AH_AL_Restore,w
 13565  0016' 0086               	movwf	6
 13566  0017' 3002               	movlw	2	; select bank4/5
 13567  0018' 0087               	movwf	7
 13568  0019' 30FF               	movlw	255
 13569  001A' 3FC0               	movwi [0]fsr1
 13570  001B' 30FF               	movlw	255
 13571  001C' 3FC1               	movwi [1]fsr1
 13572  001D' 3001               	movlw	1
 13573  001E' 0080'              	movwf	??_setLoad_AH_AL_Restore
 13574  001F' 0800'              	movf	??_setLoad_AH_AL_Restore,w
 13575  0020' 0781'              	addwf	setLoad_AH_AL_Restore@i,f
 13576  0021' 2800'              	goto	L11
 13577  0022'                    __end_of_setLoad_AH_AL_Restore:	
 13578                           
 13579                           	psect	text77
 13580  0000'                    __ptext77:	
 13581 ;; *************** function _LED_Main *****************
 13582 ;; Defined at:
 13583 ;;		line 51 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13584 ;; Parameters:    Size  Location     Type
 13585 ;;		None
 13586 ;; Auto vars:     Size  Location     Type
 13587 ;;		None
 13588 ;; Return value:  Size  Location     Type
 13589 ;;		None               void
 13590 ;; Registers used:
 13591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13592 ;; Tracked objects:
 13593 ;;		On entry : 0/0
 13594 ;;		On exit  : 0/0
 13595 ;;		Unchanged: 0/0
 13596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13597 ;;      Params:         0       0       0       0       0       0       0       0
 13598 ;;      Locals:         0       0       0       0       0       0       0       0
 13599 ;;      Temps:          0       0       0       0       0       0       0       0
 13600 ;;      Totals:         0       0       0       0       0       0       0       0
 13601 ;;Total ram usage:        0 bytes
 13602 ;; Hardware stack levels used:    1
 13603 ;; Hardware stack levels required when called:    6
 13604 ;; This function calls:
 13605 ;;		_setLED_Main
 13606 ;; This function is called by:
 13607 ;;		_main
 13608 ;; This function uses a non-reentrant model
 13609 ;;
 13610                           
 13611                           
 13612                           ;psect for function _LED_Main
 13613  0000'                    _LED_Main:	
 13614                           
 13615                           ;LED_B1.c: 54: setLED_Main(1);
 13616                           
 13617                           ;incstack = 0
 13618                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13619  0000' 3001               	movlw	1
 13620  0001' 3180' 2000' 3180'  	fcall	_setLED_Main
 13621                           
 13622                           ;LED_B1.c: 57: setLED_Main(2);
 13623  0004' 3002               	movlw	2
 13624  0005' 3180' 2000' 3180'  	fcall	_setLED_Main
 13625                           
 13626                           ;LED_B1.c: 63: setLED_Main(99);
 13627  0008' 3063               	movlw	99
 13628  0009' 3180' 2000'        	fcall	_setLED_Main
 13629  000B' 0008               	return
 13630  000C'                    __end_of_LED_Main:	
 13631                           
 13632                           	psect	text78
 13633  0000'                    __ptext78:	
 13634 ;; *************** function _setLED_Main *****************
 13635 ;; Defined at:
 13636 ;;		line 214 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  led             1    wreg     unsigned char 
 13639 ;; Auto vars:     Size  Location     Type
 13640 ;;  led             1    4[BANK0 ] unsigned char 
 13641 ;; Return value:  Size  Location     Type
 13642 ;;		None               void
 13643 ;; Registers used:
 13644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13645 ;; Tracked objects:
 13646 ;;		On entry : 0/0
 13647 ;;		On exit  : 0/0
 13648 ;;		Unchanged: 0/0
 13649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13650 ;;      Params:         0       0       0       0       0       0       0       0
 13651 ;;      Locals:         0       1       0       0       0       0       0       0
 13652 ;;      Temps:          0       2       0       0       0       0       0       0
 13653 ;;      Totals:         0       3       0       0       0       0       0       0
 13654 ;;Total ram usage:        3 bytes
 13655 ;; Hardware stack levels used:    1
 13656 ;; Hardware stack levels required when called:    5
 13657 ;; This function calls:
 13658 ;;		_LedPointSelect
 13659 ;; This function is called by:
 13660 ;;		_LED_Main
 13661 ;; This function uses a non-reentrant model
 13662 ;;
 13663                           
 13664                           
 13665                           ;psect for function _setLED_Main
 13666  0000'                    _setLED_Main:	
 13667                           
 13668                           ;incstack = 0
 13669                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13670                           ;setLED_Main@led stored from wreg
 13671  0000' 0020               	movlb	0	; select bank0
 13672  0001' 0084'              	movwf	setLED_Main@led
 13673                           
 13674                           ;LED_B1.c: 216: LedPointSelect(led);
 13675  0002' 0804'              	movf	setLED_Main@led,w
 13676  0003' 3180' 2000' 3180'  	fcall	_LedPointSelect
 13677                           
 13678                           ;LED_B1.c: 217: if(LED->GO)
 13679  0006' 0021               	movlb	1	; select bank1
 13680  0007' 0800'              	movf	_LED^(0+128),w
 13681  0008' 0086               	movwf	6
 13682  0009' 0187               	clrf	7
 13683  000A' 1C81               	btfss	1,1
 13684  000B' 0008               	return
 13685                           
 13686                           ;LED_B1.c: 218: {
 13687                           ;LED_B1.c: 219: LED->Time++;
 13688  000C' 0A00'              	incf	_LED^(0+128),w
 13689  000D' 0086               	movwf	6
 13690  000E' 0187               	clrf	7
 13691  000F' 3001               	movlw	1
 13692  0010' 0781               	addwf	1,f
 13693  0011' 3141               	addfsr 1,1
 13694  0012' 1803               	skipnc
 13695  0013' 0A81               	incf	1,f
 13696                           
 13697                           ;LED_B1.c: 220: if(LED->Time >= 500/10)
 13698  0014' 0A00'              	incf	_LED^(0+128),w
 13699  0015' 0086               	movwf	6
 13700  0016' 0187               	clrf	7
 13701  0017' 3F40               	moviw [0]fsr1
 13702  0018' 0020               	movlb	0	; select bank0
 13703  0019' 0082'              	movwf	??_setLED_Main
 13704  001A' 3F41               	moviw [1]fsr1
 13705  001B' 0083'              	movwf	??_setLED_Main+1
 13706  001C' 3000               	movlw	0
 13707  001D' 0203'              	subwf	??_setLED_Main+1,w
 13708  001E' 3032               	movlw	50
 13709  001F' 1903               	skipnz
 13710  0020' 0202'              	subwf	??_setLED_Main,w
 13711  0021' 1C03               	skipc
 13712  0022' 0008               	return
 13713                           
 13714                           ;LED_B1.c: 221: {
 13715                           ;LED_B1.c: 222: LED->Time=0;
 13716  0023' 0021               	movlb	1	; select bank1
 13717  0024' 0A00'              	incf	_LED^(0+128),w
 13718  0025' 0086               	movwf	6
 13719  0026' 0187               	clrf	7
 13720  0027' 3000               	movlw	0
 13721  0028' 3FC0               	movwi [0]fsr1
 13722  0029' 3FC1               	movwi [1]fsr1
 13723                           
 13724                           ;LED_B1.c: 224: if(led == 1)
 13725  002A' 0020               	movlb	0	; select bank0
 13726  002B' 0804'              	movf	setLED_Main@led,w
 13727  002C' 3A01               	xorlw	1
 13728  002D' 1D03               	skipz
 13729  002E' 2800'              	goto	l7025
 13730                           
 13731                           ;LED_B1.c: 225: {
 13732                           ;LED_B1.c: 226: RA3=~RA3;
 13733  002F' 3008               	movlw	8
 13734  0030' 068C               	xorwf	12,f
 13735                           
 13736                           ;LED_B1.c: 227: }
 13737  0031' 0008               	return
 13738  0032'                    l7025:	
 13739                           
 13740                           ;LED_B1.c: 230: else if(led == 2)
 13741  0032' 0804'              	movf	setLED_Main@led,w
 13742  0033' 3A02               	xorlw	2
 13743  0034' 1D03               	skipz
 13744  0035' 2800'              	goto	l7029
 13745                           
 13746                           ;LED_B1.c: 231: {
 13747                           ;LED_B1.c: 232: RC7=~RC7;
 13748  0036' 3080               	movlw	128
 13749  0037' 068E               	xorwf	14,f
 13750                           
 13751                           ;LED_B1.c: 233: }
 13752  0038' 0008               	return
 13753  0039'                    l7029:	
 13754                           
 13755                           ;LED_B1.c: 242: else if(led == 99)
 13756  0039' 0804'              	movf	setLED_Main@led,w
 13757  003A' 3A63               	xorlw	99
 13758  003B' 1D03               	skipz
 13759  003C' 0008               	return
 13760                           
 13761                           ;LED_B1.c: 243: {
 13762                           ;LED_B1.c: 244: RB5=~RB5;
 13763  003D' 3020               	movlw	32
 13764  003E' 068D               	xorwf	13,f
 13765  003F' 0008               	return
 13766  0040'                    __end_of_setLED_Main:	
 13767                           
 13768                           	psect	text79
 13769  0000'                    __ptext79:	
 13770 ;; *************** function _LED_Initialization *****************
 13771 ;; Defined at:
 13772 ;;		line 35 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;		None
 13775 ;; Auto vars:     Size  Location     Type
 13776 ;;		None
 13777 ;; Return value:  Size  Location     Type
 13778 ;;		None               void
 13779 ;; Registers used:
 13780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13781 ;; Tracked objects:
 13782 ;;		On entry : 0/0
 13783 ;;		On exit  : 0/0
 13784 ;;		Unchanged: 0/0
 13785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13786 ;;      Params:         0       0       0       0       0       0       0       0
 13787 ;;      Locals:         0       0       0       0       0       0       0       0
 13788 ;;      Temps:          0       0       0       0       0       0       0       0
 13789 ;;      Totals:         0       0       0       0       0       0       0       0
 13790 ;;Total ram usage:        0 bytes
 13791 ;; Hardware stack levels used:    1
 13792 ;; Hardware stack levels required when called:    7
 13793 ;; This function calls:
 13794 ;;		_setLED_Initialization
 13795 ;; This function is called by:
 13796 ;;		_main
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           
 13801                           ;psect for function _LED_Initialization
 13802  0000'                    _LED_Initialization:	
 13803                           
 13804                           ;LED_B1.c: 38: setLED_Initialization(1);
 13805                           
 13806                           ;incstack = 0
 13807                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13808  0000' 3001               	movlw	1
 13809  0001' 3180' 2000' 3180'  	fcall	_setLED_Initialization
 13810                           
 13811                           ;LED_B1.c: 41: setLED_Initialization(2);
 13812  0004' 3002               	movlw	2
 13813  0005' 3180' 2000' 3180'  	fcall	_setLED_Initialization
 13814                           
 13815                           ;LED_B1.c: 47: setLED_Initialization(99);
 13816  0008' 3063               	movlw	99
 13817  0009' 3180' 2000'        	fcall	_setLED_Initialization
 13818  000B' 0008               	return
 13819  000C'                    __end_of_LED_Initialization:	
 13820                           
 13821                           	psect	text80
 13822  0000'                    __ptext80:	
 13823 ;; *************** function _setLED_Initialization *****************
 13824 ;; Defined at:
 13825 ;;		line 67 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  led             1    wreg     unsigned char 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;  led             1    4[BANK0 ] unsigned char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;		None               void
 13832 ;; Registers used:
 13833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13839 ;;      Params:         0       0       0       0       0       0       0       0
 13840 ;;      Locals:         0       1       0       0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0
 13842 ;;      Totals:         0       1       0       0       0       0       0       0
 13843 ;;Total ram usage:        1 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    6
 13846 ;; This function calls:
 13847 ;;		_LedPointSelect
 13848 ;;		_setLED
 13849 ;; This function is called by:
 13850 ;;		_LED_Initialization
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function _setLED_Initialization
 13856  0000'                    _setLED_Initialization:	
 13857                           
 13858                           ;incstack = 0
 13859                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13860                           ;setLED_Initialization@led stored from wreg
 13861  0000' 0020               	movlb	0	; select bank0
 13862  0001' 0084'              	movwf	setLED_Initialization@led
 13863                           
 13864                           ;LED_B1.c: 69: LedPointSelect(led);
 13865  0002' 0804'              	movf	setLED_Initialization@led,w
 13866  0003' 3180' 2000' 3180'  	fcall	_LedPointSelect
 13867                           
 13868                           ;LED_B1.c: 70: LED->Enable=1;
 13869  0006' 0021               	movlb	1	; select bank1
 13870  0007' 0800'              	movf	_LED^(0+128),w
 13871  0008' 0086               	movwf	6
 13872  0009' 0187               	clrf	7
 13873  000A' 1401               	bsf	1,0
 13874                           
 13875                           ;LED_B1.c: 71: setLED(led,0);
 13876  000B' 0020               	movlb	0	; select bank0
 13877  000C' 0182'              	clrf	setLED@command
 13878  000D' 0804'              	movf	setLED_Initialization@led,w
 13879  000E' 3180' 2000'        	fcall	_setLED
 13880  0010' 0008               	return
 13881  0011'                    __end_of_setLED_Initialization:	
 13882                           
 13883                           	psect	text81
 13884  0000'                    __ptext81:	
 13885 ;; *************** function _Flash_Memory_Main *****************
 13886 ;; Defined at:
 13887 ;;		line 846 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 13888 ;; Parameters:    Size  Location     Type
 13889 ;;		None
 13890 ;; Auto vars:     Size  Location     Type
 13891 ;;		None
 13892 ;; Return value:  Size  Location     Type
 13893 ;;		None               void
 13894 ;; Registers used:
 13895 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13896 ;; Tracked objects:
 13897 ;;		On entry : 0/0
 13898 ;;		On exit  : 0/0
 13899 ;;		Unchanged: 0/0
 13900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13901 ;;      Params:         0       0       0       0       0       0       0       0
 13902 ;;      Locals:         0       0       0       0       0       0       0       0
 13903 ;;      Temps:          0       0       0       0       0       0       0       0
 13904 ;;      Totals:         0       0       0       0       0       0       0       0
 13905 ;;Total ram usage:        0 bytes
 13906 ;; Hardware stack levels used:    1
 13907 ;; Hardware stack levels required when called:    7
 13908 ;; This function calls:
 13909 ;;		_Flash_Memory_Modify
 13910 ;; This function is called by:
 13911 ;;		_main
 13912 ;; This function uses a non-reentrant model
 13913 ;;
 13914                           
 13915                           
 13916                           ;psect for function _Flash_Memory_Main
 13917  0000'                    _Flash_Memory_Main:	
 13918                           
 13919                           ;MCU_B1.c: 847: if (Memory->GO) {
 13920                           
 13921                           ;incstack = 0
 13922                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13923  0000' 0021               	movlb	1	; select bank1
 13924  0001' 0800'              	movf	_Memory^(0+128),w
 13925  0002' 3E22               	addlw	34
 13926  0003' 0086               	movwf	6
 13927  0004' 3001               	movlw	1	; select bank2/3
 13928  0005' 0087               	movwf	7
 13929  0006' 1C81               	btfss	1,1
 13930  0007' 0008               	return
 13931                           
 13932                           ;MCU_B1.c: 848: if (Memory->Modify) {
 13933  0008' 0800'              	movf	_Memory^(0+128),w
 13934  0009' 3E22               	addlw	34
 13935  000A' 0086               	movwf	6
 13936  000B' 3001               	movlw	1	; select bank2/3
 13937  000C' 0087               	movwf	7
 13938  000D' 1C01               	btfss	1,0
 13939  000E' 2800'              	goto	l9255
 13940                           
 13941                           ;MCU_B1.c: 849: Memory->Time++;
 13942  000F' 0800'              	movf	_Memory^(0+128),w
 13943  0010' 3E23               	addlw	35
 13944  0011' 0086               	movwf	6
 13945  0012' 3001               	movlw	1	; select bank2/3
 13946  0013' 0087               	movwf	7
 13947  0014' 3001               	movlw	1
 13948  0015' 0781               	addwf	1,f
 13949  0016' 3141               	addfsr 1,1
 13950  0017' 1803               	skipnc
 13951  0018' 0A81               	incf	1,f
 13952                           
 13953                           ;MCU_B1.c: 850: if (Memory->Time == 25)
 13954  0019' 0800'              	movf	_Memory^(0+128),w
 13955  001A' 3E23               	addlw	35
 13956  001B' 0086               	movwf	6
 13957  001C' 3001               	movlw	1	; select bank2/3
 13958  001D' 0087               	movwf	7
 13959  001E' 3F40               	moviw [0]fsr1
 13960  001F' 3A19               	xorlw	25
 13961  0020' 1D03               	skipz
 13962  0021' 2800'              	goto	u9115
 13963  0022' 3F41               	moviw [1]fsr1
 13964  0023' 3A00               	xorlw	0
 13965  0024'                    u9115:	
 13966  0024' 1D03               	skipz
 13967  0025' 0008               	return
 13968                           
 13969                           ;MCU_B1.c: 851: {
 13970                           ;MCU_B1.c: 852: Memory->Time = 0;
 13971  0026' 0800'              	movf	_Memory^(0+128),w
 13972  0027' 3E23               	addlw	35
 13973  0028' 0086               	movwf	6
 13974  0029' 3001               	movlw	1	; select bank2/3
 13975  002A' 0087               	movwf	7
 13976  002B' 3000               	movlw	0
 13977  002C' 3FC0               	movwi [0]fsr1
 13978  002D' 3FC1               	movwi [1]fsr1
 13979                           
 13980                           ;MCU_B1.c: 853: Memory->Modify = 0;
 13981  002E' 0800'              	movf	_Memory^(0+128),w
 13982  002F' 3E22               	addlw	34
 13983  0030' 0086               	movwf	6
 13984  0031' 3001               	movlw	1	; select bank2/3
 13985  0032' 0087               	movwf	7
 13986  0033' 1001               	bcf	1,0
 13987                           
 13988                           ;MCU_B1.c: 854: Memory->GO = 0;
 13989  0034' 0800'              	movf	_Memory^(0+128),w
 13990  0035' 3E22               	addlw	34
 13991  0036' 0086               	movwf	6
 13992  0037' 3001               	movlw	1	; select bank2/3
 13993  0038' 0087               	movwf	7
 13994  0039' 1081               	bcf	1,1
 13995                           
 13996                           ;MCU_B1.c: 855: Flash_Memory_Modify();
 13997  003A' 3180' 2000'        	fcall	_Flash_Memory_Modify
 13998                           
 13999                           ;MCU_B1.c: 857: }
 14000                           ;MCU_B1.c: 858: } else {
 14001  003C' 0008               	return
 14002  003D'                    l9255:	
 14003                           
 14004                           ;MCU_B1.c: 859: Memory->GO = 0;
 14005  003D' 0021               	movlb	1	; select bank1
 14006  003E' 0800'              	movf	_Memory^(0+128),w
 14007  003F' 3E22               	addlw	34
 14008  0040' 0086               	movwf	6
 14009  0041' 3001               	movlw	1	; select bank2/3
 14010  0042' 0087               	movwf	7
 14011  0043' 1081               	bcf	1,1
 14012  0044' 0008               	return
 14013  0045'                    __end_of_Flash_Memory_Main:	
 14014                           
 14015                           	psect	text82
 14016  0000'                    __ptext82:	
 14017 ;; *************** function _Flash_Memory_Modify *****************
 14018 ;; Defined at:
 14019 ;;		line 916 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;		None
 14022 ;; Auto vars:     Size  Location     Type
 14023 ;;  i               1    6[BANK0 ] unsigned char 
 14024 ;; Return value:  Size  Location     Type
 14025 ;;		None               void
 14026 ;; Registers used:
 14027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14028 ;; Tracked objects:
 14029 ;;		On entry : 0/0
 14030 ;;		On exit  : 0/0
 14031 ;;		Unchanged: 0/0
 14032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14033 ;;      Params:         0       0       0       0       0       0       0       0
 14034 ;;      Locals:         0       1       0       0       0       0       0       0
 14035 ;;      Temps:          0       2       0       0       0       0       0       0
 14036 ;;      Totals:         0       3       0       0       0       0       0       0
 14037 ;;Total ram usage:        3 bytes
 14038 ;; Hardware stack levels used:    1
 14039 ;; Hardware stack levels required when called:    6
 14040 ;; This function calls:
 14041 ;;		_Flash_Memory_Erasing
 14042 ;;		_Flash_Memory_Read
 14043 ;;		_Flash_Memory_Write
 14044 ;; This function is called by:
 14045 ;;		_Flash_Memory_Main
 14046 ;; This function uses a non-reentrant model
 14047 ;;
 14048                           
 14049                           
 14050                           ;psect for function _Flash_Memory_Modify
 14051  0000'                    _Flash_Memory_Modify:	
 14052                           
 14053                           ;MCU_B1.c: 917: char i;
 14054                           ;MCU_B1.c: 918: for (i = 0; i < 32; i++) {
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14058  0000' 0020               	movlb	0	; select bank0
 14059  0001' 0186'              	clrf	Flash_Memory_Modify@i
 14060  0002' 3020               	movlw	32
 14061  0003' 0206'              	subwf	Flash_Memory_Modify@i,w
 14062  0004' 1803               	btfsc	3,0
 14063  0005' 2800'              	goto	l8865
 14064  0006'                    l8859:	
 14065                           
 14066                           ;MCU_B1.c: 919: Memory->Data[i] = Flash_Memory_Read(i);
 14067  0006' 0806'              	movf	Flash_Memory_Modify@i,w
 14068  0007' 3180' 2000' 3180'  	fcall	_Flash_Memory_Read
 14069  000A' 0020               	movlb	0	; select bank0
 14070  000B' 0084'              	movwf	??_Flash_Memory_Modify
 14071  000C' 0806'              	movf	Flash_Memory_Modify@i,w
 14072  000D' 0021               	movlb	1	; select bank1
 14073  000E' 0700'              	addwf	_Memory^(0+128),w
 14074  000F' 0020               	movlb	0	; select bank0
 14075  0010' 0085'              	movwf	??_Flash_Memory_Modify+1
 14076  0011' 0805'              	movf	??_Flash_Memory_Modify+1,w
 14077  0012' 0086               	movwf	6
 14078  0013' 3001               	movlw	1	; select bank2/3
 14079  0014' 0087               	movwf	7
 14080  0015' 0804'              	movf	??_Flash_Memory_Modify,w
 14081  0016' 0081               	movwf	1
 14082  0017' 3001               	movlw	1
 14083  0018' 0084'              	movwf	??_Flash_Memory_Modify
 14084  0019' 0804'              	movf	??_Flash_Memory_Modify,w
 14085  001A' 0786'              	addwf	Flash_Memory_Modify@i,f
 14086  001B' 3020               	movlw	32
 14087  001C' 0206'              	subwf	Flash_Memory_Modify@i,w
 14088  001D' 1C03               	skipc
 14089  001E' 2800'              	goto	l8859
 14090  001F'                    l8865:	
 14091                           
 14092                           ;MCU_B1.c: 920: }
 14093                           ;MCU_B1.c: 921: Memory->Data[0]=Product->Data[12];
 14094  001F' 0800'              	movf	_Product,w
 14095  0020' 3E0C               	addlw	12
 14096  0021' 0086               	movwf	6
 14097  0022' 3001               	movlw	1	; select bank2/3
 14098  0023' 0087               	movwf	7
 14099  0024' 0801               	movf	1,w
 14100  0025' 0084'              	movwf	??_Flash_Memory_Modify
 14101  0026' 0021               	movlb	1	; select bank1
 14102  0027' 0800'              	movf	_Memory^(0+128),w
 14103  0028' 0086               	movwf	6
 14104  0029' 3001               	movlw	1	; select bank2/3
 14105  002A' 0087               	movwf	7
 14106  002B' 0020               	movlb	0	; select bank0
 14107  002C' 0804'              	movf	??_Flash_Memory_Modify,w
 14108  002D' 0081               	movwf	1
 14109                           
 14110                           ;MCU_B1.c: 922: Memory->Data[1]=Product->Data[13];
 14111  002E' 0800'              	movf	_Product,w
 14112  002F' 3E0D               	addlw	13
 14113  0030' 0086               	movwf	6
 14114  0031' 3001               	movlw	1	; select bank2/3
 14115  0032' 0087               	movwf	7
 14116  0033' 0801               	movf	1,w
 14117  0034' 0084'              	movwf	??_Flash_Memory_Modify
 14118  0035' 0021               	movlb	1	; select bank1
 14119  0036' 0A00'              	incf	_Memory^(0+128),w
 14120  0037' 0086               	movwf	6
 14121  0038' 3001               	movlw	1	; select bank2/3
 14122  0039' 0087               	movwf	7
 14123  003A' 0020               	movlb	0	; select bank0
 14124  003B' 0804'              	movf	??_Flash_Memory_Modify,w
 14125  003C' 0081               	movwf	1
 14126                           
 14127                           ;MCU_B1.c: 923: Memory->Data[2]=Product->Data[14];
 14128  003D' 0800'              	movf	_Product,w
 14129  003E' 3E0E               	addlw	14
 14130  003F' 0086               	movwf	6
 14131  0040' 3001               	movlw	1	; select bank2/3
 14132  0041' 0087               	movwf	7
 14133  0042' 0801               	movf	1,w
 14134  0043' 0084'              	movwf	??_Flash_Memory_Modify
 14135  0044' 0021               	movlb	1	; select bank1
 14136  0045' 0800'              	movf	_Memory^(0+128),w
 14137  0046' 3E02               	addlw	2
 14138  0047' 0086               	movwf	6
 14139  0048' 3001               	movlw	1	; select bank2/3
 14140  0049' 0087               	movwf	7
 14141  004A' 0020               	movlb	0	; select bank0
 14142  004B' 0804'              	movf	??_Flash_Memory_Modify,w
 14143  004C' 0081               	movwf	1
 14144                           
 14145                           ;MCU_B1.c: 929: if (Memory->LoopSave) {
 14146  004D' 0021               	movlb	1	; select bank1
 14147  004E' 0800'              	movf	_Memory^(0+128),w
 14148  004F' 3E22               	addlw	34
 14149  0050' 0086               	movwf	6
 14150  0051' 3001               	movlw	1	; select bank2/3
 14151  0052' 0087               	movwf	7
 14152  0053' 1D01               	btfss	1,2
 14153  0054' 2800'              	goto	l8869
 14154                           
 14155                           ;MCU_B1.c: 930: Memory->LoopSave = 0;
 14156  0055' 0800'              	movf	_Memory^(0+128),w
 14157  0056' 3E22               	addlw	34
 14158  0057' 0086               	movwf	6
 14159  0058' 3001               	movlw	1	; select bank2/3
 14160  0059' 0087               	movwf	7
 14161  005A' 1101               	bcf	1,2
 14162                           
 14163                           ;MCU_B1.c: 931: myMain->FirstOpen = 0;
 14164  005B' 0800'              	movf	_myMain^(0+128),w
 14165  005C' 0086               	movwf	6
 14166  005D' 3001               	movlw	1	; select bank2/3
 14167  005E' 0087               	movwf	7
 14168  005F' 1281               	bcf	1,5
 14169                           
 14170                           ;MCU_B1.c: 932: myMain->First = 0;
 14171  0060' 0800'              	movf	_myMain^(0+128),w
 14172  0061' 3E03               	addlw	3
 14173  0062' 0086               	movwf	6
 14174  0063' 3001               	movlw	1	; select bank2/3
 14175  0064' 0087               	movwf	7
 14176  0065' 1081               	bcf	1,1
 14177  0066'                    l8869:	
 14178                           
 14179                           ;MCU_B1.c: 934: }
 14180                           ;MCU_B1.c: 935: GIE = 0;
 14181  0066' 138B               	bcf	11,7	;volatile
 14182                           
 14183                           ;MCU_B1.c: 936: Flash_Memory_Erasing();
 14184  0067' 3180' 2000' 3180'  	fcall	_Flash_Memory_Erasing
 14185                           
 14186                           ;MCU_B1.c: 937: Flash_Memory_Write();
 14187  006A' 3180' 2000'        	fcall	_Flash_Memory_Write
 14188                           
 14189                           ;MCU_B1.c: 938: GIE = 1;
 14190  006C' 178B               	bsf	11,7	;volatile
 14191  006D' 0008               	return
 14192  006E'                    __end_of_Flash_Memory_Modify:	
 14193                           
 14194                           	psect	text83
 14195  0000'                    __ptext83:	
 14196 ;; *************** function _Flash_Memory_Erasing *****************
 14197 ;; Defined at:
 14198 ;;		line 905 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14199 ;; Parameters:    Size  Location     Type
 14200 ;;		None
 14201 ;; Auto vars:     Size  Location     Type
 14202 ;;		None
 14203 ;; Return value:  Size  Location     Type
 14204 ;;		None               void
 14205 ;; Registers used:
 14206 ;;		wreg, status,2, status,0, pclath, cstack
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14212 ;;      Params:         0       0       0       0       0       0       0       0
 14213 ;;      Locals:         0       0       0       0       0       0       0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0       0
 14215 ;;      Totals:         0       0       0       0       0       0       0       0
 14216 ;;Total ram usage:        0 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    5
 14219 ;; This function calls:
 14220 ;;		_Flash_Memory_Unlock
 14221 ;; This function is called by:
 14222 ;;		_Flash_Memory_Modify
 14223 ;; This function uses a non-reentrant model
 14224 ;;
 14225                           
 14226                           
 14227                           ;psect for function _Flash_Memory_Erasing
 14228  0000'                    _Flash_Memory_Erasing:	
 14229                           
 14230                           ;MCU_B1.c: 906: CFGS = 0;
 14231                           
 14232                           ;incstack = 0
 14233                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 14234  0000' 0023               	movlb	3	; select bank3
 14235  0001' 1315               	bcf	21,6	;volatile
 14236                           
 14237                           ;MCU_B1.c: 907: PMADRH = 0x30;
 14238  0002' 3030               	movlw	48
 14239  0003' 0092               	movwf	18	;volatile
 14240                           
 14241                           ;MCU_B1.c: 908: PMADRL = 0x00;
 14242  0004' 0191               	clrf	17	;volatile
 14243                           
 14244                           ;MCU_B1.c: 909: FREE = 1;
 14245  0005' 1615               	bsf	21,4	;volatile
 14246                           
 14247                           ;MCU_B1.c: 910: WREN = 1;
 14248  0006' 1515               	bsf	21,2	;volatile
 14249                           
 14250                           ;MCU_B1.c: 911: Flash_Memory_Unlock();
 14251  0007' 3180' 2000'        	fcall	_Flash_Memory_Unlock
 14252                           
 14253                           ;MCU_B1.c: 912: WREN = 0;
 14254  0009' 0023               	movlb	3	; select bank3
 14255  000A' 1115               	bcf	21,2	;volatile
 14256  000B' 0008               	return
 14257  000C'                    __end_of_Flash_Memory_Erasing:	
 14258                           
 14259                           	psect	text84
 14260  0000'                    __ptext84:	
 14261 ;; *************** function _Flash_Memory_Initialization *****************
 14262 ;; Defined at:
 14263 ;;		line 805 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;		None
 14266 ;; Auto vars:     Size  Location     Type
 14267 ;;  i               1   62[BANK0 ] unsigned char 
 14268 ;; Return value:  Size  Location     Type
 14269 ;;		None               void
 14270 ;; Registers used:
 14271 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14272 ;; Tracked objects:
 14273 ;;		On entry : 0/0
 14274 ;;		On exit  : 0/0
 14275 ;;		Unchanged: 0/0
 14276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14277 ;;      Params:         0       0       0       0       0       0       0       0
 14278 ;;      Locals:         0       1       0       0       0       0       0       0
 14279 ;;      Temps:          0       1       0       0       0       0       0       0
 14280 ;;      Totals:         0       2       0       0       0       0       0       0
 14281 ;;Total ram usage:        2 bytes
 14282 ;; Hardware stack levels used:    1
 14283 ;; Hardware stack levels required when called:    7
 14284 ;; This function calls:
 14285 ;;		_Flash_Memory_Read
 14286 ;;		_Flash_Memory_Write
 14287 ;;		_setPercentValue
 14288 ;; This function is called by:
 14289 ;;		_main
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           
 14294                           ;psect for function _Flash_Memory_Initialization
 14295  0000'                    _Flash_Memory_Initialization:	
 14296                           
 14297                           ;MCU_B1.c: 806: char i;
 14298                           ;MCU_B1.c: 807: if (Flash_Memory_Read(31) == 0xaa) {
 14299                           
 14300                           ;incstack = 0
 14301                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 14302  0000' 301F               	movlw	31
 14303  0001' 3180' 2000' 3180'  	fcall	_Flash_Memory_Read
 14304  0004' 3AAA               	xorlw	170
 14305  0005' 1D03               	skipz
 14306  0006' 2800'              	goto	l9211
 14307                           
 14308                           ;MCU_B1.c: 808: Product->Data[12] = Flash_Memory_Read(0);
 14309  0007' 3000               	movlw	0
 14310  0008' 3180' 2000' 3180'  	fcall	_Flash_Memory_Read
 14311  000B' 0020               	movlb	0	; select bank0
 14312  000C' 00BD'              	movwf	??_Flash_Memory_Initialization
 14313  000D' 0800'              	movf	_Product,w
 14314  000E' 3E0C               	addlw	12
 14315  000F' 0086               	movwf	6
 14316  0010' 3001               	movlw	1	; select bank2/3
 14317  0011' 0087               	movwf	7
 14318  0012' 083D'              	movf	??_Flash_Memory_Initialization,w
 14319  0013' 0081               	movwf	1
 14320                           
 14321                           ;MCU_B1.c: 809: Product->Data[13] = Flash_Memory_Read(1);
 14322  0014' 3001               	movlw	1
 14323  0015' 3180' 2000' 3180'  	fcall	_Flash_Memory_Read
 14324  0018' 0020               	movlb	0	; select bank0
 14325  0019' 00BD'              	movwf	??_Flash_Memory_Initialization
 14326  001A' 0800'              	movf	_Product,w
 14327  001B' 3E0D               	addlw	13
 14328  001C' 0086               	movwf	6
 14329  001D' 3001               	movlw	1	; select bank2/3
 14330  001E' 0087               	movwf	7
 14331  001F' 083D'              	movf	??_Flash_Memory_Initialization,w
 14332  0020' 0081               	movwf	1
 14333                           
 14334                           ;MCU_B1.c: 810: Product->Data[14] = Flash_Memory_Read(2);
 14335  0021' 3002               	movlw	2
 14336  0022' 3180' 2000' 3180'  	fcall	_Flash_Memory_Read
 14337  0025' 0020               	movlb	0	; select bank0
 14338  0026' 00BD'              	movwf	??_Flash_Memory_Initialization
 14339  0027' 0800'              	movf	_Product,w
 14340  0028' 3E0E               	addlw	14
 14341  0029' 0086               	movwf	6
 14342  002A' 3001               	movlw	1	; select bank2/3
 14343  002B' 0087               	movwf	7
 14344  002C' 083D'              	movf	??_Flash_Memory_Initialization,w
 14345  002D' 0081               	movwf	1
 14346                           
 14347                           ;MCU_B1.c: 816: i = setPercentValue(((char)((100-55)*1.5)));
 14348  002E' 3043               	movlw	67
 14349  002F' 3180' 2000' 3180'  	fcall	_setPercentValue
 14350  0032' 0020               	movlb	0	; select bank0
 14351  0033' 00BD'              	movwf	??_Flash_Memory_Initialization
 14352  0034' 083D'              	movf	??_Flash_Memory_Initialization,w
 14353  0035' 00BE'              	movwf	Flash_Memory_Initialization@i
 14354                           
 14355                           ;MCU_B1.c: 817: Product->Data[21] = i;
 14356  0036' 083E'              	movf	Flash_Memory_Initialization@i,w
 14357  0037' 00BD'              	movwf	??_Flash_Memory_Initialization
 14358  0038' 0800'              	movf	_Product,w
 14359  0039' 3E15               	addlw	21
 14360  003A' 0086               	movwf	6
 14361  003B' 3001               	movlw	1	; select bank2/3
 14362  003C' 0087               	movwf	7
 14363  003D' 083D'              	movf	??_Flash_Memory_Initialization,w
 14364  003E' 0081               	movwf	1
 14365                           
 14366                           ;MCU_B1.c: 818: Product->Data[22] = i;
 14367  003F' 083E'              	movf	Flash_Memory_Initialization@i,w
 14368  0040' 00BD'              	movwf	??_Flash_Memory_Initialization
 14369  0041' 0800'              	movf	_Product,w
 14370  0042' 3E16               	addlw	22
 14371  0043' 0086               	movwf	6
 14372  0044' 3001               	movlw	1	; select bank2/3
 14373  0045' 0087               	movwf	7
 14374  0046' 083D'              	movf	??_Flash_Memory_Initialization,w
 14375  0047' 0081               	movwf	1
 14376                           
 14377                           ;MCU_B1.c: 819: Product->Data[23] = i;
 14378  0048' 083E'              	movf	Flash_Memory_Initialization@i,w
 14379  0049' 00BD'              	movwf	??_Flash_Memory_Initialization
 14380  004A' 0800'              	movf	_Product,w
 14381  004B' 3E17               	addlw	23
 14382  004C' 0086               	movwf	6
 14383  004D' 3001               	movlw	1	; select bank2/3
 14384  004E' 0087               	movwf	7
 14385  004F' 083D'              	movf	??_Flash_Memory_Initialization,w
 14386  0050' 0081               	movwf	1
 14387                           
 14388                           ;MCU_B1.c: 821: if (Product->Data[12] == 0xff && Product->Data[13] == 0xff && Product->D
      +                          ata[14] == 0xff) {
 14389  0051' 0800'              	movf	_Product,w
 14390  0052' 3E0C               	addlw	12
 14391  0053' 0086               	movwf	6
 14392  0054' 3001               	movlw	1	; select bank2/3
 14393  0055' 0087               	movwf	7
 14394  0056' 0801               	movf	1,w
 14395  0057' 3AFF               	xorlw	255
 14396  0058' 1D03               	skipz
 14397  0059' 0008               	return
 14398  005A' 0800'              	movf	_Product,w
 14399  005B' 3E0D               	addlw	13
 14400  005C' 0086               	movwf	6
 14401  005D' 3001               	movlw	1	; select bank2/3
 14402  005E' 0087               	movwf	7
 14403  005F' 0801               	movf	1,w
 14404  0060' 3AFF               	xorlw	255
 14405  0061' 1D03               	skipz
 14406  0062' 0008               	return
 14407  0063' 0800'              	movf	_Product,w
 14408  0064' 3E0E               	addlw	14
 14409  0065' 0086               	movwf	6
 14410  0066' 3001               	movlw	1	; select bank2/3
 14411  0067' 0087               	movwf	7
 14412  0068' 0801               	movf	1,w
 14413  0069' 3AFF               	xorlw	255
 14414  006A' 1D03               	skipz
 14415  006B' 0008               	return
 14416                           
 14417                           ;MCU_B1.c: 822: myMain->FirstOpen = 1;
 14418  006C' 0021               	movlb	1	; select bank1
 14419  006D' 0800'              	movf	_myMain^(0+128),w
 14420  006E' 0086               	movwf	6
 14421  006F' 3001               	movlw	1	; select bank2/3
 14422  0070' 0087               	movwf	7
 14423  0071' 1681               	bsf	1,5
 14424                           
 14425                           ;MCU_B1.c: 823: myMain->First = 1;
 14426  0072' 0800'              	movf	_myMain^(0+128),w
 14427  0073' 3E03               	addlw	3
 14428  0074' 0086               	movwf	6
 14429  0075' 3001               	movlw	1	; select bank2/3
 14430  0076' 0087               	movwf	7
 14431  0077' 1481               	bsf	1,1
 14432                           
 14433                           ;MCU_B1.c: 824: }
 14434                           ;MCU_B1.c: 825: } else {
 14435  0078' 0008               	return
 14436  0079'                    l9211:	
 14437                           
 14438                           ;MCU_B1.c: 826: i = setPercentValue(((char)((100-55)*1.5)));
 14439  0079' 3043               	movlw	67
 14440  007A' 3180' 2000' 3180'  	fcall	_setPercentValue
 14441  007D' 0020               	movlb	0	; select bank0
 14442  007E' 00BD'              	movwf	??_Flash_Memory_Initialization
 14443  007F' 083D'              	movf	??_Flash_Memory_Initialization,w
 14444  0080' 00BE'              	movwf	Flash_Memory_Initialization@i
 14445                           
 14446                           ;MCU_B1.c: 827: Memory->Data[0]=0xff;
 14447  0081' 30FF               	movlw	255
 14448  0082' 00BD'              	movwf	??_Flash_Memory_Initialization
 14449  0083' 0021               	movlb	1	; select bank1
 14450  0084' 0800'              	movf	_Memory^(0+128),w
 14451  0085' 0086               	movwf	6
 14452  0086' 3001               	movlw	1	; select bank2/3
 14453  0087' 0087               	movwf	7
 14454  0088' 0020               	movlb	0	; select bank0
 14455  0089' 083D'              	movf	??_Flash_Memory_Initialization,w
 14456  008A' 0081               	movwf	1
 14457                           
 14458                           ;MCU_B1.c: 828: Memory->Data[1]=0xff;
 14459  008B' 30FF               	movlw	255
 14460  008C' 00BD'              	movwf	??_Flash_Memory_Initialization
 14461  008D' 0021               	movlb	1	; select bank1
 14462  008E' 0A00'              	incf	_Memory^(0+128),w
 14463  008F' 0086               	movwf	6
 14464  0090' 3001               	movlw	1	; select bank2/3
 14465  0091' 0087               	movwf	7
 14466  0092' 0020               	movlb	0	; select bank0
 14467  0093' 083D'              	movf	??_Flash_Memory_Initialization,w
 14468  0094' 0081               	movwf	1
 14469                           
 14470                           ;MCU_B1.c: 829: Memory->Data[2]=0xff;
 14471  0095' 30FF               	movlw	255
 14472  0096' 00BD'              	movwf	??_Flash_Memory_Initialization
 14473  0097' 0021               	movlb	1	; select bank1
 14474  0098' 0800'              	movf	_Memory^(0+128),w
 14475  0099' 3E02               	addlw	2
 14476  009A' 0086               	movwf	6
 14477  009B' 3001               	movlw	1	; select bank2/3
 14478  009C' 0087               	movwf	7
 14479  009D' 0020               	movlb	0	; select bank0
 14480  009E' 083D'              	movf	??_Flash_Memory_Initialization,w
 14481  009F' 0081               	movwf	1
 14482                           
 14483                           ;MCU_B1.c: 830: Memory->Data[3]=0xff;
 14484  00A0' 30FF               	movlw	255
 14485  00A1' 00BD'              	movwf	??_Flash_Memory_Initialization
 14486  00A2' 0021               	movlb	1	; select bank1
 14487  00A3' 0800'              	movf	_Memory^(0+128),w
 14488  00A4' 3E03               	addlw	3
 14489  00A5' 0086               	movwf	6
 14490  00A6' 3001               	movlw	1	; select bank2/3
 14491  00A7' 0087               	movwf	7
 14492  00A8' 0020               	movlb	0	; select bank0
 14493  00A9' 083D'              	movf	??_Flash_Memory_Initialization,w
 14494  00AA' 0081               	movwf	1
 14495                           
 14496                           ;MCU_B1.c: 831: Memory->Data[4]=0xff;
 14497  00AB' 30FF               	movlw	255
 14498  00AC' 00BD'              	movwf	??_Flash_Memory_Initialization
 14499  00AD' 0021               	movlb	1	; select bank1
 14500  00AE' 0800'              	movf	_Memory^(0+128),w
 14501  00AF' 3E04               	addlw	4
 14502  00B0' 0086               	movwf	6
 14503  00B1' 3001               	movlw	1	; select bank2/3
 14504  00B2' 0087               	movwf	7
 14505  00B3' 0020               	movlb	0	; select bank0
 14506  00B4' 083D'              	movf	??_Flash_Memory_Initialization,w
 14507  00B5' 0081               	movwf	1
 14508                           
 14509                           ;MCU_B1.c: 832: Memory->Data[5]=0xff;
 14510  00B6' 30FF               	movlw	255
 14511  00B7' 00BD'              	movwf	??_Flash_Memory_Initialization
 14512  00B8' 0021               	movlb	1	; select bank1
 14513  00B9' 0800'              	movf	_Memory^(0+128),w
 14514  00BA' 3E05               	addlw	5
 14515  00BB' 0086               	movwf	6
 14516  00BC' 3001               	movlw	1	; select bank2/3
 14517  00BD' 0087               	movwf	7
 14518  00BE' 0020               	movlb	0	; select bank0
 14519  00BF' 083D'              	movf	??_Flash_Memory_Initialization,w
 14520  00C0' 0081               	movwf	1
 14521                           
 14522                           ;MCU_B1.c: 833: Memory->Data[31]=0xaa;
 14523  00C1' 30AA               	movlw	170
 14524  00C2' 00BD'              	movwf	??_Flash_Memory_Initialization
 14525  00C3' 0021               	movlb	1	; select bank1
 14526  00C4' 0800'              	movf	_Memory^(0+128),w
 14527  00C5' 3E1F               	addlw	31
 14528  00C6' 0086               	movwf	6
 14529  00C7' 3001               	movlw	1	; select bank2/3
 14530  00C8' 0087               	movwf	7
 14531  00C9' 0020               	movlb	0	; select bank0
 14532  00CA' 083D'              	movf	??_Flash_Memory_Initialization,w
 14533  00CB' 0081               	movwf	1
 14534                           
 14535                           ;MCU_B1.c: 834: Product->Data[21] = i;
 14536  00CC' 083E'              	movf	Flash_Memory_Initialization@i,w
 14537  00CD' 00BD'              	movwf	??_Flash_Memory_Initialization
 14538  00CE' 0800'              	movf	_Product,w
 14539  00CF' 3E15               	addlw	21
 14540  00D0' 0086               	movwf	6
 14541  00D1' 3001               	movlw	1	; select bank2/3
 14542  00D2' 0087               	movwf	7
 14543  00D3' 083D'              	movf	??_Flash_Memory_Initialization,w
 14544  00D4' 0081               	movwf	1
 14545                           
 14546                           ;MCU_B1.c: 835: Product->Data[22] = i;
 14547  00D5' 083E'              	movf	Flash_Memory_Initialization@i,w
 14548  00D6' 00BD'              	movwf	??_Flash_Memory_Initialization
 14549  00D7' 0800'              	movf	_Product,w
 14550  00D8' 3E16               	addlw	22
 14551  00D9' 0086               	movwf	6
 14552  00DA' 3001               	movlw	1	; select bank2/3
 14553  00DB' 0087               	movwf	7
 14554  00DC' 083D'              	movf	??_Flash_Memory_Initialization,w
 14555  00DD' 0081               	movwf	1
 14556                           
 14557                           ;MCU_B1.c: 836: Product->Data[23] = i;
 14558  00DE' 083E'              	movf	Flash_Memory_Initialization@i,w
 14559  00DF' 00BD'              	movwf	??_Flash_Memory_Initialization
 14560  00E0' 0800'              	movf	_Product,w
 14561  00E1' 3E17               	addlw	23
 14562  00E2' 0086               	movwf	6
 14563  00E3' 3001               	movlw	1	; select bank2/3
 14564  00E4' 0087               	movwf	7
 14565  00E5' 083D'              	movf	??_Flash_Memory_Initialization,w
 14566  00E6' 0081               	movwf	1
 14567                           
 14568                           ;MCU_B1.c: 837: GIE = 0;
 14569  00E7' 138B               	bcf	11,7	;volatile
 14570                           
 14571                           ;MCU_B1.c: 838: Flash_Memory_Write();
 14572  00E8' 3180' 2000'        	fcall	_Flash_Memory_Write
 14573                           
 14574                           ;MCU_B1.c: 839: GIE = 1;
 14575  00EA' 178B               	bsf	11,7	;volatile
 14576                           
 14577                           ;MCU_B1.c: 840: myMain->FirstOpen = 1;
 14578  00EB' 0021               	movlb	1	; select bank1
 14579  00EC' 0800'              	movf	_myMain^(0+128),w
 14580  00ED' 0086               	movwf	6
 14581  00EE' 3001               	movlw	1	; select bank2/3
 14582  00EF' 0087               	movwf	7
 14583  00F0' 1681               	bsf	1,5
 14584                           
 14585                           ;MCU_B1.c: 841: myMain->First = 1;
 14586  00F1' 0800'              	movf	_myMain^(0+128),w
 14587  00F2' 3E03               	addlw	3
 14588  00F3' 0086               	movwf	6
 14589  00F4' 3001               	movlw	1	; select bank2/3
 14590  00F5' 0087               	movwf	7
 14591  00F6' 1481               	bsf	1,1
 14592  00F7' 0008               	return
 14593  00F8'                    __end_of_Flash_Memory_Initialization:	
 14594                           
 14595                           	psect	text85
 14596  0000'                    __ptext85:	
 14597 ;; *************** function _Flash_Memory_Write *****************
 14598 ;; Defined at:
 14599 ;;		line 886 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;		None
 14602 ;; Auto vars:     Size  Location     Type
 14603 ;;  i               1    1[BANK0 ] unsigned char 
 14604 ;; Return value:  Size  Location     Type
 14605 ;;		None               void
 14606 ;; Registers used:
 14607 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14608 ;; Tracked objects:
 14609 ;;		On entry : 0/0
 14610 ;;		On exit  : 0/0
 14611 ;;		Unchanged: 0/0
 14612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14613 ;;      Params:         0       0       0       0       0       0       0       0
 14614 ;;      Locals:         0       1       0       0       0       0       0       0
 14615 ;;      Temps:          0       1       0       0       0       0       0       0
 14616 ;;      Totals:         0       2       0       0       0       0       0       0
 14617 ;;Total ram usage:        2 bytes
 14618 ;; Hardware stack levels used:    1
 14619 ;; Hardware stack levels required when called:    5
 14620 ;; This function calls:
 14621 ;;		_Flash_Memory_Unlock
 14622 ;; This function is called by:
 14623 ;;		_Flash_Memory_Initialization
 14624 ;;		_Flash_Memory_Modify
 14625 ;; This function uses a non-reentrant model
 14626 ;;
 14627                           
 14628                           
 14629                           ;psect for function _Flash_Memory_Write
 14630  0000'                    _Flash_Memory_Write:	
 14631                           
 14632                           ;MCU_B1.c: 887: char i;
 14633                           ;MCU_B1.c: 888: CFGS = 0;
 14634                           
 14635                           ;incstack = 0
 14636                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14637  0000' 0023               	movlb	3	; select bank3
 14638  0001' 1315               	bcf	21,6	;volatile
 14639                           
 14640                           ;MCU_B1.c: 889: PMADRH = 0x30;
 14641  0002' 3030               	movlw	48
 14642  0003' 0092               	movwf	18	;volatile
 14643                           
 14644                           ;MCU_B1.c: 890: PMDATH = 0;
 14645  0004' 0194               	clrf	20	;volatile
 14646                           
 14647                           ;MCU_B1.c: 891: FREE = 0;
 14648  0005' 1215               	bcf	21,4	;volatile
 14649                           
 14650                           ;MCU_B1.c: 892: LWLO = 1;
 14651  0006' 1695               	bsf	21,5	;volatile
 14652                           
 14653                           ;MCU_B1.c: 893: WREN = 1;
 14654  0007' 1515               	bsf	21,2	;volatile
 14655                           
 14656                           ;MCU_B1.c: 894: for (i = 0; i < 32; i++) {
 14657  0008' 0020               	movlb	0	; select bank0
 14658  0009' 0181'              	clrf	Flash_Memory_Write@i
 14659  000A' 3020               	movlw	32
 14660  000B' 0201'              	subwf	Flash_Memory_Write@i,w
 14661  000C' 1803               	btfsc	3,0
 14662  000D' 2800'              	goto	l1380
 14663  000E'                    l8521:	
 14664                           
 14665                           ;MCU_B1.c: 895: PMADRL = i;
 14666  000E' 0801'              	movf	Flash_Memory_Write@i,w
 14667  000F' 0023               	movlb	3	; select bank3
 14668  0010' 0091               	movwf	17	;volatile
 14669                           
 14670                           ;MCU_B1.c: 896: PMDATL = Memory->Data[i];
 14671  0011' 0020               	movlb	0	; select bank0
 14672  0012' 0801'              	movf	Flash_Memory_Write@i,w
 14673  0013' 0021               	movlb	1	; select bank1
 14674  0014' 0700'              	addwf	_Memory^(0+128),w
 14675  0015' 0020               	movlb	0	; select bank0
 14676  0016' 0080'              	movwf	??_Flash_Memory_Write
 14677  0017' 0800'              	movf	??_Flash_Memory_Write,w
 14678  0018' 0086               	movwf	6
 14679  0019' 3001               	movlw	1	; select bank2/3
 14680  001A' 0087               	movwf	7
 14681  001B' 0801               	movf	1,w
 14682  001C' 0023               	movlb	3	; select bank3
 14683  001D' 0093               	movwf	19	;volatile
 14684                           
 14685                           ;MCU_B1.c: 897: Flash_Memory_Unlock();
 14686  001E' 3180' 2000' 3180'  	fcall	_Flash_Memory_Unlock
 14687  0021' 3001               	movlw	1
 14688  0022' 0020               	movlb	0	; select bank0
 14689  0023' 0080'              	movwf	??_Flash_Memory_Write
 14690  0024' 0800'              	movf	??_Flash_Memory_Write,w
 14691  0025' 0781'              	addwf	Flash_Memory_Write@i,f
 14692  0026' 3020               	movlw	32
 14693  0027' 0201'              	subwf	Flash_Memory_Write@i,w
 14694  0028' 1C03               	skipc
 14695  0029' 2800'              	goto	l8521
 14696  002A'                    l1380:	
 14697                           
 14698                           ;MCU_B1.c: 898: }
 14699                           ;MCU_B1.c: 899: LWLO = 0;
 14700  002A' 0023               	movlb	3	; select bank3
 14701  002B' 1295               	bcf	21,5	;volatile
 14702                           
 14703                           ;MCU_B1.c: 900: Flash_Memory_Unlock();
 14704  002C' 3180' 2000'        	fcall	_Flash_Memory_Unlock
 14705                           
 14706                           ;MCU_B1.c: 901: WREN = 0;
 14707  002E' 0023               	movlb	3	; select bank3
 14708  002F' 1115               	bcf	21,2	;volatile
 14709  0030' 0008               	return
 14710  0031'                    __end_of_Flash_Memory_Write:	
 14711                           
 14712                           	psect	text86
 14713  0000'                    __ptext86:	
 14714 ;; *************** function _Flash_Memory_Unlock *****************
 14715 ;; Defined at:
 14716 ;;		line 865 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;		None
 14719 ;; Auto vars:     Size  Location     Type
 14720 ;;		None
 14721 ;; Return value:  Size  Location     Type
 14722 ;;		None               void
 14723 ;; Registers used:
 14724 ;;		wreg
 14725 ;; Tracked objects:
 14726 ;;		On entry : 0/0
 14727 ;;		On exit  : 0/0
 14728 ;;		Unchanged: 0/0
 14729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14730 ;;      Params:         0       0       0       0       0       0       0       0
 14731 ;;      Locals:         0       0       0       0       0       0       0       0
 14732 ;;      Temps:          0       0       0       0       0       0       0       0
 14733 ;;      Totals:         0       0       0       0       0       0       0       0
 14734 ;;Total ram usage:        0 bytes
 14735 ;; Hardware stack levels used:    1
 14736 ;; Hardware stack levels required when called:    4
 14737 ;; This function calls:
 14738 ;;		Nothing
 14739 ;; This function is called by:
 14740 ;;		_Flash_Memory_Write
 14741 ;;		_Flash_Memory_Erasing
 14742 ;; This function uses a non-reentrant model
 14743 ;;
 14744                           
 14745                           
 14746                           ;psect for function _Flash_Memory_Unlock
 14747  0000'                    _Flash_Memory_Unlock:	
 14748                           
 14749                           ;MCU_B1.c: 866: PMCON2 = 0x55;
 14750                           
 14751                           ;incstack = 0
 14752                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 14753  0000' 3055               	movlw	85
 14754  0001' 0023               	movlb	3	; select bank3
 14755  0002' 0096               	movwf	22	;volatile
 14756                           
 14757                           ;MCU_B1.c: 867: PMCON2 = 0xaa;
 14758  0003' 30AA               	movlw	170
 14759  0004' 0096               	movwf	22	;volatile
 14760                           
 14761                           ;MCU_B1.c: 868: WR = 1;
 14762  0005' 1495               	bsf	21,1	;volatile
 14763                           
 14764                           ;MCU_B1.c: 869: __nop();
 14765  0006' 0000               	nop
 14766                           
 14767                           ;MCU_B1.c: 870: __nop();
 14768  0007' 0000               	nop
 14769  0008' 0008               	return
 14770  0009'                    __end_of_Flash_Memory_Unlock:	
 14771                           
 14772                           	psect	text87
 14773  0000'                    __ptext87:	
 14774 ;; *************** function _Flash_Memory_Read *****************
 14775 ;; Defined at:
 14776 ;;		line 874 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 14777 ;; Parameters:    Size  Location     Type
 14778 ;;  address         1    wreg     unsigned char 
 14779 ;; Auto vars:     Size  Location     Type
 14780 ;;  address         1    2[BANK0 ] unsigned char 
 14781 ;;  ret             1    3[BANK0 ] unsigned char 
 14782 ;;  i               1    1[BANK0 ] unsigned char 
 14783 ;; Return value:  Size  Location     Type
 14784 ;;                  1    wreg      unsigned char 
 14785 ;; Registers used:
 14786 ;;		wreg, status,2
 14787 ;; Tracked objects:
 14788 ;;		On entry : 0/0
 14789 ;;		On exit  : 0/0
 14790 ;;		Unchanged: 0/0
 14791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14792 ;;      Params:         0       0       0       0       0       0       0       0
 14793 ;;      Locals:         0       3       0       0       0       0       0       0
 14794 ;;      Temps:          0       1       0       0       0       0       0       0
 14795 ;;      Totals:         0       4       0       0       0       0       0       0
 14796 ;;Total ram usage:        4 bytes
 14797 ;; Hardware stack levels used:    1
 14798 ;; Hardware stack levels required when called:    4
 14799 ;; This function calls:
 14800 ;;		Nothing
 14801 ;; This function is called by:
 14802 ;;		_Flash_Memory_Initialization
 14803 ;;		_Flash_Memory_Modify
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           
 14808                           ;psect for function _Flash_Memory_Read
 14809  0000'                    _Flash_Memory_Read:	
 14810                           
 14811                           ;incstack = 0
 14812                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 14813                           ;Flash_Memory_Read@address stored from wreg
 14814  0000' 0020               	movlb	0	; select bank0
 14815  0001' 0082'              	movwf	Flash_Memory_Read@address
 14816                           
 14817                           ;MCU_B1.c: 875: char i, ret = 0;
 14818  0002' 0183'              	clrf	Flash_Memory_Read@ret
 14819                           
 14820                           ;MCU_B1.c: 876: PMADRH = 0x30;
 14821  0003' 3030               	movlw	48
 14822  0004' 0023               	movlb	3	; select bank3
 14823  0005' 0092               	movwf	18	;volatile
 14824                           
 14825                           ;MCU_B1.c: 877: PMADRL = address;
 14826  0006' 0020               	movlb	0	; select bank0
 14827  0007' 0802'              	movf	Flash_Memory_Read@address,w
 14828  0008' 0023               	movlb	3	; select bank3
 14829  0009' 0091               	movwf	17	;volatile
 14830                           
 14831                           ;MCU_B1.c: 878: CFGS = 0;
 14832  000A' 1315               	bcf	21,6	;volatile
 14833                           
 14834                           ;MCU_B1.c: 879: RD = 1;
 14835  000B' 1415               	bsf	21,0	;volatile
 14836                           
 14837                           ;MCU_B1.c: 880: i = PMDATH;
 14838  000C' 0814               	movf	20,w	;volatile
 14839  000D' 0020               	movlb	0	; select bank0
 14840  000E' 0080'              	movwf	??_Flash_Memory_Read
 14841  000F' 0800'              	movf	??_Flash_Memory_Read,w
 14842  0010' 0081'              	movwf	Flash_Memory_Read@i
 14843                           
 14844                           ;MCU_B1.c: 881: ret = PMDATL;
 14845  0011' 0023               	movlb	3	; select bank3
 14846  0012' 0813               	movf	19,w	;volatile
 14847  0013' 0020               	movlb	0	; select bank0
 14848  0014' 0080'              	movwf	??_Flash_Memory_Read
 14849  0015' 0800'              	movf	??_Flash_Memory_Read,w
 14850  0016' 0083'              	movwf	Flash_Memory_Read@ret
 14851                           
 14852                           ;MCU_B1.c: 882: return ret;
 14853  0017' 0803'              	movf	Flash_Memory_Read@ret,w
 14854  0018' 0008               	return
 14855  0019'                    __end_of_Flash_Memory_Read:	
 14856                           
 14857                           	psect	text88
 14858  0000'                    __ptext88:	
 14859 ;; *************** function _DimmerLights_Main *****************
 14860 ;; Defined at:
 14861 ;;		line 114 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14862 ;; Parameters:    Size  Location     Type
 14863 ;;		None
 14864 ;; Auto vars:     Size  Location     Type
 14865 ;;		None
 14866 ;; Return value:  Size  Location     Type
 14867 ;;		None               void
 14868 ;; Registers used:
 14869 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14870 ;; Tracked objects:
 14871 ;;		On entry : 0/0
 14872 ;;		On exit  : 0/0
 14873 ;;		Unchanged: 0/0
 14874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14875 ;;      Params:         0       0       0       0       0       0       0       0
 14876 ;;      Locals:         0       0       0       0       0       0       0       0
 14877 ;;      Temps:          0       0       0       0       0       0       0       0
 14878 ;;      Totals:         0       0       0       0       0       0       0       0
 14879 ;;Total ram usage:        0 bytes
 14880 ;; Hardware stack levels used:    1
 14881 ;; Hardware stack levels required when called:   10
 14882 ;; This function calls:
 14883 ;;		_DimmerLights_Close
 14884 ;;		_setDimmerLights_Main
 14885 ;; This function is called by:
 14886 ;;		_main
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           
 14891                           ;psect for function _DimmerLights_Main
 14892  0000'                    _DimmerLights_Main:	
 14893                           
 14894                           ;Dimmer_B1.c: 117: setDimmerLights_Main(1);
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14898  0000' 3001               	movlw	1
 14899  0001' 3180' 2000' 3180'  	fcall	_setDimmerLights_Main
 14900                           
 14901                           ;Dimmer_B1.c: 128: DimmerLights_Close();
 14902  0004' 3180' 2000'        	fcall	_DimmerLights_Close
 14903  0006' 0008               	return
 14904  0007'                    __end_of_DimmerLights_Main:	
 14905                           
 14906                           	psect	text89
 14907  0000'                    __ptext89:	
 14908 ;; *************** function _setDimmerLights_Main *****************
 14909 ;; Defined at:
 14910 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 14911 ;; Parameters:    Size  Location     Type
 14912 ;;  lights          1    wreg     unsigned char 
 14913 ;; Auto vars:     Size  Location     Type
 14914 ;;  lights          1   70[BANK0 ] unsigned char 
 14915 ;;  clear           1   69[BANK0 ] unsigned char 
 14916 ;; Return value:  Size  Location     Type
 14917 ;;		None               void
 14918 ;; Registers used:
 14919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14920 ;; Tracked objects:
 14921 ;;		On entry : 0/0
 14922 ;;		On exit  : 0/0
 14923 ;;		Unchanged: 0/0
 14924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14925 ;;      Params:         0       0       0       0       0       0       0       0
 14926 ;;      Locals:         0       2       0       0       0       0       0       0
 14927 ;;      Temps:          0       0       0       0       0       0       0       0
 14928 ;;      Totals:         0       2       0       0       0       0       0       0
 14929 ;;Total ram usage:        2 bytes
 14930 ;; Hardware stack levels used:    1
 14931 ;; Hardware stack levels required when called:    9
 14932 ;; This function calls:
 14933 ;;		_DimmerLightsPointSelect
 14934 ;;		_setBuz
 14935 ;;		_setDimmerLights
 14936 ;;		_setDimmerLights_Adj
 14937 ;; This function is called by:
 14938 ;;		_DimmerLights_Main
 14939 ;; This function uses a non-reentrant model
 14940 ;;
 14941                           
 14942                           
 14943                           ;psect for function _setDimmerLights_Main
 14944  0000'                    _setDimmerLights_Main:	
 14945                           
 14946                           ;incstack = 0
 14947                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14948                           ;setDimmerLights_Main@lights stored from wreg
 14949  0000' 0020               	movlb	0	; select bank0
 14950  0001' 00C6'              	movwf	setDimmerLights_Main@lights
 14951                           
 14952                           ;Dimmer_B1.c: 133: char clear=1;
 14953  0002' 01C5'              	clrf	setDimmerLights_Main@clear
 14954  0003' 0AC5'              	incf	setDimmerLights_Main@clear,f
 14955                           
 14956                           ;Dimmer_B1.c: 134: DimmerLightsPointSelect(lights);
 14957  0004' 0846'              	movf	setDimmerLights_Main@lights,w
 14958  0005' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
 14959                           
 14960                           ;Dimmer_B1.c: 162: if(DimmerLights->Trigger)
 14961  0008' 0800'              	movf	_DimmerLights,w
 14962  0009' 3E09               	addlw	9
 14963  000A' 0086               	movwf	6
 14964  000B' 3001               	movlw	1	; select bank2/3
 14965  000C' 0087               	movwf	7
 14966  000D' 1C81               	btfss	1,1
 14967  000E' 2800'              	goto	l8783
 14968                           
 14969                           ;Dimmer_B1.c: 163: {
 14970                           ;Dimmer_B1.c: 164: if(clear)
 14971  000F' 0020               	movlb	0	; select bank0
 14972  0010' 0845'              	movf	setDimmerLights_Main@clear,w
 14973  0011' 1903               	btfsc	3,2
 14974  0012' 0008               	return
 14975                           
 14976                           ;Dimmer_B1.c: 165: {
 14977                           ;Dimmer_B1.c: 166: if(DimmerLights->Switch)
 14978  0013' 0800'              	movf	_DimmerLights,w
 14979  0014' 3E09               	addlw	9
 14980  0015' 0086               	movwf	6
 14981  0016' 3001               	movlw	1	; select bank2/3
 14982  0017' 0087               	movwf	7
 14983  0018' 1C01               	btfss	1,0
 14984  0019' 2800'              	goto	l8777
 14985                           
 14986                           ;Dimmer_B1.c: 167: {
 14987                           ;Dimmer_B1.c: 168: DimmerLights->Trigger=0;
 14988  001A' 0800'              	movf	_DimmerLights,w
 14989  001B' 3E09               	addlw	9
 14990  001C' 0086               	movwf	6
 14991  001D' 3001               	movlw	1	; select bank2/3
 14992  001E' 0087               	movwf	7
 14993  001F' 1081               	bcf	1,1
 14994                           
 14995                           ;Dimmer_B1.c: 169: setDimmerLights(lights,1);
 14996  0020' 0184'              	clrf	setDimmerLights@status
 14997  0021' 0A84'              	incf	setDimmerLights@status,f
 14998  0022' 0846'              	movf	setDimmerLights_Main@lights,w
 14999  0023' 3180' 2000'        	fcall	_setDimmerLights
 15000                           
 15001                           ;Dimmer_B1.c: 172: DimmerLights->Clear=0;
 15002  0025' 0800'              	movf	_DimmerLights,w
 15003  0026' 3E0C               	addlw	12
 15004  0027' 0086               	movwf	6
 15005  0028' 3001               	movlw	1	; select bank2/3
 15006  0029' 0087               	movwf	7
 15007  002A' 1001               	bcf	1,0
 15008                           
 15009                           ;Dimmer_B1.c: 174: }
 15010  002B' 0020               	movlb	0	; select bank0
 15011  002C' 0008               	return
 15012  002D'                    l8777:	
 15013                           
 15014                           ;Dimmer_B1.c: 175: else
 15015                           ;Dimmer_B1.c: 176: {
 15016                           ;Dimmer_B1.c: 177: DimmerLights->Trigger=0;
 15017  002D' 0800'              	movf	_DimmerLights,w
 15018  002E' 3E09               	addlw	9
 15019  002F' 0086               	movwf	6
 15020  0030' 3001               	movlw	1	; select bank2/3
 15021  0031' 0087               	movwf	7
 15022  0032' 1081               	bcf	1,1
 15023                           
 15024                           ;Dimmer_B1.c: 178: setDimmerLights(lights,0);
 15025  0033' 0020               	movlb	0	; select bank0
 15026  0034' 0184'              	clrf	setDimmerLights@status
 15027  0035' 0846'              	movf	setDimmerLights_Main@lights,w
 15028  0036' 3180' 2000'        	fcall	_setDimmerLights
 15029                           
 15030                           ;Dimmer_B1.c: 181: DimmerLights->Clear=0;
 15031  0038' 0800'              	movf	_DimmerLights,w
 15032  0039' 3E0C               	addlw	12
 15033  003A' 0086               	movwf	6
 15034  003B' 3001               	movlw	1	; select bank2/3
 15035  003C' 0087               	movwf	7
 15036  003D' 1001               	bcf	1,0
 15037  003E' 0020               	movlb	0	; select bank0
 15038  003F' 0008               	return
 15039  0040'                    l8783:	
 15040                           ;Dimmer_B1.c: 183: }
 15041                           ;Dimmer_B1.c: 184: }
 15042                           ;Dimmer_B1.c: 185: }
 15043                           
 15044                           
 15045                           ;Dimmer_B1.c: 186: else
 15046                           ;Dimmer_B1.c: 187: {
 15047                           ;Dimmer_B1.c: 188: if(DimmerLights->TriggerAdj)
 15048  0040' 0800'              	movf	_DimmerLights,w
 15049  0041' 3E09               	addlw	9
 15050  0042' 0086               	movwf	6
 15051  0043' 3001               	movlw	1	; select bank2/3
 15052  0044' 0087               	movwf	7
 15053  0045' 1981               	btfsc	1,3
 15054  0046' 2800'              	goto	l8785
 15055  0047' 0020               	movlb	0	; select bank0
 15056  0048' 0008               	return
 15057  0049'                    l8785:	
 15058                           
 15059                           ;Dimmer_B1.c: 189: {
 15060                           ;Dimmer_B1.c: 190: if(clear)
 15061  0049' 0020               	movlb	0	; select bank0
 15062  004A' 0845'              	movf	setDimmerLights_Main@clear,w
 15063  004B' 1903               	btfsc	3,2
 15064  004C' 0008               	return
 15065                           
 15066                           ;Dimmer_B1.c: 191: {
 15067                           ;Dimmer_B1.c: 192: DimmerLightsPointSelect(lights);
 15068  004D' 0846'              	movf	setDimmerLights_Main@lights,w
 15069  004E' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
 15070                           
 15071                           ;Dimmer_B1.c: 193: DimmerLights->TriggerAdj=0;
 15072  0051' 0800'              	movf	_DimmerLights,w
 15073  0052' 3E09               	addlw	9
 15074  0053' 0086               	movwf	6
 15075  0054' 3001               	movlw	1	; select bank2/3
 15076  0055' 0087               	movwf	7
 15077  0056' 1181               	bcf	1,3
 15078                           
 15079                           ;Dimmer_B1.c: 194: if(DimmerLights->AdjGo)
 15080  0057' 0800'              	movf	_DimmerLights,w
 15081  0058' 3E09               	addlw	9
 15082  0059' 0086               	movwf	6
 15083  005A' 3001               	movlw	1	; select bank2/3
 15084  005B' 0087               	movwf	7
 15085  005C' 1D01               	btfss	1,2
 15086  005D' 2800'              	goto	l8795
 15087                           
 15088                           ;Dimmer_B1.c: 195: {
 15089                           ;Dimmer_B1.c: 196: setDimmerLights_Adj(lights,1);
 15090  005E' 0020               	movlb	0	; select bank0
 15091  005F' 01C2'              	clrf	setDimmerLights_Adj@status
 15092  0060' 0AC2'              	incf	setDimmerLights_Adj@status,f
 15093  0061' 0846'              	movf	setDimmerLights_Main@lights,w
 15094  0062' 3180' 2000' 3180'  	fcall	_setDimmerLights_Adj
 15095                           
 15096                           ;Dimmer_B1.c: 197: setBuz(1,100);
 15097  0065' 3064               	movlw	100
 15098  0066' 0020               	movlb	0	; select bank0
 15099  0067' 0086'              	movwf	setBuz@time
 15100  0068' 3000               	movlw	0
 15101  0069' 0087'              	movwf	setBuz@time+1
 15102  006A' 3001               	movlw	1
 15103  006B' 3180' 2000'        	fcall	_setBuz
 15104                           
 15105                           ;Dimmer_B1.c: 198: }
 15106  006D' 0020               	movlb	0	; select bank0
 15107  006E' 0008               	return
 15108  006F'                    l8795:	
 15109                           
 15110                           ;Dimmer_B1.c: 199: else
 15111                           ;Dimmer_B1.c: 200: {
 15112                           ;Dimmer_B1.c: 201: setDimmerLights_Adj(lights,0);
 15113  006F' 0020               	movlb	0	; select bank0
 15114  0070' 01C2'              	clrf	setDimmerLights_Adj@status
 15115  0071' 0846'              	movf	setDimmerLights_Main@lights,w
 15116  0072' 3180' 2000'        	fcall	_setDimmerLights_Adj
 15117  0074' 0020               	movlb	0	; select bank0
 15118  0075' 0008               	return
 15119  0076'                    __end_of_setDimmerLights_Main:	
 15120                           
 15121                           	psect	text90
 15122  0000'                    __ptext90:	
 15123 ;; *************** function _setDimmerLights_Adj *****************
 15124 ;; Defined at:
 15125 ;;		line 388 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15126 ;; Parameters:    Size  Location     Type
 15127 ;;  lights          1    wreg     unsigned char 
 15128 ;;  status          1   66[BANK0 ] unsigned char 
 15129 ;; Auto vars:     Size  Location     Type
 15130 ;;  lights          1   68[BANK0 ] unsigned char 
 15131 ;; Return value:  Size  Location     Type
 15132 ;;		None               void
 15133 ;; Registers used:
 15134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15135 ;; Tracked objects:
 15136 ;;		On entry : 0/0
 15137 ;;		On exit  : 0/0
 15138 ;;		Unchanged: 0/0
 15139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15140 ;;      Params:         0       1       0       0       0       0       0       0
 15141 ;;      Locals:         0       1       0       0       0       0       0       0
 15142 ;;      Temps:          0       1       0       0       0       0       0       0
 15143 ;;      Totals:         0       3       0       0       0       0       0       0
 15144 ;;Total ram usage:        3 bytes
 15145 ;; Hardware stack levels used:    1
 15146 ;; Hardware stack levels required when called:    8
 15147 ;; This function calls:
 15148 ;;		_DimmerLightsPointSelect
 15149 ;;		_setLoad_StatusOff
 15150 ;;		_setRF_DimmerLights
 15151 ;;		_setTxData
 15152 ;; This function is called by:
 15153 ;;		_setDimmerLights_Main
 15154 ;; This function uses a non-reentrant model
 15155 ;;
 15156                           
 15157                           
 15158                           ;psect for function _setDimmerLights_Adj
 15159  0000'                    _setDimmerLights_Adj:	
 15160                           
 15161                           ;incstack = 0
 15162                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15163                           ;setDimmerLights_Adj@lights stored from wreg
 15164  0000' 0020               	movlb	0	; select bank0
 15165  0001' 00C4'              	movwf	setDimmerLights_Adj@lights
 15166                           
 15167                           ;Dimmer_B1.c: 390: DimmerLightsPointSelect(lights);
 15168  0002' 0844'              	movf	setDimmerLights_Adj@lights,w
 15169  0003' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
 15170                           
 15171                           ;Dimmer_B1.c: 391: if(status)
 15172  0006' 0020               	movlb	0	; select bank0
 15173  0007' 0842'              	movf	setDimmerLights_Adj@status,w
 15174  0008' 1903               	btfsc	3,2
 15175  0009' 2800'              	goto	l8497
 15176                           
 15177                           ;Dimmer_B1.c: 392: {
 15178                           ;Dimmer_B1.c: 393: DimmerLights->AdjFlag=1;
 15179  000A' 0800'              	movf	_DimmerLights,w
 15180  000B' 0086               	movwf	6
 15181  000C' 3001               	movlw	1	; select bank2/3
 15182  000D' 0087               	movwf	7
 15183  000E' 1581               	bsf	1,3
 15184                           
 15185                           ;Dimmer_B1.c: 394: DimmerLights->Signal=1;
 15186  000F' 0800'              	movf	_DimmerLights,w
 15187  0010' 0086               	movwf	6
 15188  0011' 3001               	movlw	1	; select bank2/3
 15189  0012' 0087               	movwf	7
 15190  0013' 1481               	bsf	1,1
 15191                           
 15192                           ;Dimmer_B1.c: 395: }
 15193  0014' 0008               	return
 15194  0015'                    l8497:	
 15195                           
 15196                           ;Dimmer_B1.c: 396: else
 15197                           ;Dimmer_B1.c: 397: {
 15198                           ;Dimmer_B1.c: 398: if(DimmerLights->AdjFlag)
 15199  0015' 0800'              	movf	_DimmerLights,w
 15200  0016' 0086               	movwf	6
 15201  0017' 3001               	movlw	1	; select bank2/3
 15202  0018' 0087               	movwf	7
 15203  0019' 1D81               	btfss	1,3
 15204  001A' 0008               	return
 15205                           
 15206                           ;Dimmer_B1.c: 399: {
 15207                           ;Dimmer_B1.c: 400: DimmerLights->Signal=0;
 15208  001B' 0800'              	movf	_DimmerLights,w
 15209  001C' 0086               	movwf	6
 15210  001D' 3001               	movlw	1	; select bank2/3
 15211  001E' 0087               	movwf	7
 15212  001F' 1081               	bcf	1,1
 15213                           
 15214                           ;Dimmer_B1.c: 401: DimmerLights->AdjFlag=0;
 15215  0020' 0800'              	movf	_DimmerLights,w
 15216  0021' 0086               	movwf	6
 15217  0022' 3001               	movlw	1	; select bank2/3
 15218  0023' 0087               	movwf	7
 15219  0024' 1181               	bcf	1,3
 15220                           
 15221                           ;Dimmer_B1.c: 402: setLoad_StatusOff(0,1);
 15222  0025' 0180'              	clrf	setLoad_StatusOff@command
 15223  0026' 0A80'              	incf	setLoad_StatusOff@command,f
 15224  0027' 3000               	movlw	0
 15225  0028' 3180' 2000' 3180'  	fcall	_setLoad_StatusOff
 15226                           
 15227                           ;Dimmer_B1.c: 403: DimmerLights->MaxmumValue=DimmerLights->DimmingValue;
 15228  002B' 0800'              	movf	_DimmerLights,w
 15229  002C' 3E04               	addlw	4
 15230  002D' 0086               	movwf	6
 15231  002E' 3001               	movlw	1	; select bank2/3
 15232  002F' 0087               	movwf	7
 15233  0030' 0801               	movf	1,w
 15234  0031' 0020               	movlb	0	; select bank0
 15235  0032' 00C3'              	movwf	??_setDimmerLights_Adj
 15236  0033' 0800'              	movf	_DimmerLights,w
 15237  0034' 3E05               	addlw	5
 15238  0035' 0086               	movwf	6
 15239  0036' 3001               	movlw	1	; select bank2/3
 15240  0037' 0087               	movwf	7
 15241  0038' 0843'              	movf	??_setDimmerLights_Adj,w
 15242  0039' 0081               	movwf	1
 15243                           
 15244                           ;Dimmer_B1.c: 411: setRF_DimmerLights(lights,1);
 15245  003A' 01BD'              	clrf	setRF_DimmerLights@on
 15246  003B' 0ABD'              	incf	setRF_DimmerLights@on,f
 15247  003C' 0844'              	movf	setDimmerLights_Adj@lights,w
 15248  003D' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
 15249                           
 15250                           ;Dimmer_B1.c: 412: setTxData(1);
 15251  0040' 3001               	movlw	1
 15252  0041' 3180' 2000'        	fcall	_setTxData
 15253  0043' 0008               	return
 15254  0044'                    __end_of_setDimmerLights_Adj:	
 15255                           
 15256                           	psect	text91
 15257  0000'                    __ptext91:	
 15258 ;; *************** function _setLoad_StatusOff *****************
 15259 ;; Defined at:
 15260 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;  lights          1    wreg     unsigned char 
 15263 ;;  command         1    0[BANK0 ] unsigned char 
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  lights          1    1[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;		None               void
 15268 ;; Registers used:
 15269 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15275 ;;      Params:         0       1       0       0       0       0       0       0
 15276 ;;      Locals:         0       1       0       0       0       0       0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0
 15278 ;;      Totals:         0       2       0       0       0       0       0       0
 15279 ;;Total ram usage:        2 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:    4
 15282 ;; This function calls:
 15283 ;;		Nothing
 15284 ;; This function is called by:
 15285 ;;		_setDimmerLights_ERROR
 15286 ;;		_setDimmerLights_Adj
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           
 15291                           ;psect for function _setLoad_StatusOff
 15292  0000'                    _setLoad_StatusOff:	
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 15296                           ;setLoad_StatusOff@lights stored from wreg
 15297  0000' 0020               	movlb	0	; select bank0
 15298  0001' 0081'              	movwf	setLoad_StatusOff@lights
 15299                           
 15300                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 15301  0002' 0804'              	movf	_Load,w
 15302  0003' 3E46               	addlw	70
 15303  0004' 0086               	movwf	6
 15304  0005' 3002               	movlw	2	; select bank4/5
 15305  0006' 0087               	movwf	7
 15306  0007' 0800'              	movf	setLoad_StatusOff@command,w
 15307  0008' 1081               	bcf	1,1
 15308  0009' 1D03               	skipz
 15309  000A' 1481               	bsf	1,1
 15310                           
 15311                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 15312  000B' 0804'              	movf	_Load,w
 15313  000C' 3E42               	addlw	66
 15314  000D' 0086               	movwf	6
 15315  000E' 3002               	movlw	2	; select bank4/5
 15316  000F' 0087               	movwf	7
 15317  0010' 3002               	movlw	2
 15318  0011' 0281               	subwf	1,f
 15319                           
 15320                           ;OverLoad_B1.c: 287: if (lights == 1) {
 15321  0012' 0801'              	movf	setLoad_StatusOff@lights,w
 15322  0013' 3A01               	xorlw	1
 15323  0014' 1D03               	skipz
 15324  0015' 2800'              	goto	l8157
 15325                           
 15326                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 15327  0016' 0804'              	movf	_Load,w
 15328  0017' 3E43               	addlw	67
 15329  0018' 0086               	movwf	6
 15330  0019' 3002               	movlw	2	; select bank4/5
 15331  001A' 0087               	movwf	7
 15332  001B' 0181               	clrf	1
 15333  001C'                    l8157:	
 15334                           
 15335                           ;OverLoad_B1.c: 289: }
 15336                           ;OverLoad_B1.c: 290: if (lights == 2) {
 15337  001C' 0801'              	movf	setLoad_StatusOff@lights,w
 15338  001D' 3A02               	xorlw	2
 15339  001E' 1D03               	skipz
 15340  001F' 2800'              	goto	l8161
 15341                           
 15342                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 15343  0020' 0804'              	movf	_Load,w
 15344  0021' 3E44               	addlw	68
 15345  0022' 0086               	movwf	6
 15346  0023' 3002               	movlw	2	; select bank4/5
 15347  0024' 0087               	movwf	7
 15348  0025' 0181               	clrf	1
 15349  0026'                    l8161:	
 15350                           
 15351                           ;OverLoad_B1.c: 292: }
 15352                           ;OverLoad_B1.c: 293: if (lights == 3) {
 15353  0026' 0801'              	movf	setLoad_StatusOff@lights,w
 15354  0027' 3A03               	xorlw	3
 15355  0028' 1D03               	skipz
 15356  0029' 0008               	return
 15357                           
 15358                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 15359  002A' 0804'              	movf	_Load,w
 15360  002B' 3E45               	addlw	69
 15361  002C' 0086               	movwf	6
 15362  002D' 3002               	movlw	2	; select bank4/5
 15363  002E' 0087               	movwf	7
 15364  002F' 0181               	clrf	1
 15365  0030' 0008               	return
 15366  0031'                    __end_of_setLoad_StatusOff:	
 15367                           
 15368                           	psect	text92
 15369  0000'                    __ptext92:	
 15370 ;; *************** function _setDimmerLights *****************
 15371 ;; Defined at:
 15372 ;;		line 330 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 15373 ;; Parameters:    Size  Location     Type
 15374 ;;  lights          1    wreg     unsigned char 
 15375 ;;  status          1    4[BANK0 ] unsigned char 
 15376 ;; Auto vars:     Size  Location     Type
 15377 ;;  lights          1    6[BANK0 ] unsigned char 
 15378 ;; Return value:  Size  Location     Type
 15379 ;;		None               void
 15380 ;; Registers used:
 15381 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15382 ;; Tracked objects:
 15383 ;;		On entry : 0/0
 15384 ;;		On exit  : 0/0
 15385 ;;		Unchanged: 0/0
 15386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15387 ;;      Params:         0       1       0       0       0       0       0       0
 15388 ;;      Locals:         0       1       0       0       0       0       0       0
 15389 ;;      Temps:          0       1       0       0       0       0       0       0
 15390 ;;      Totals:         0       3       0       0       0       0       0       0
 15391 ;;Total ram usage:        3 bytes
 15392 ;; Hardware stack levels used:    1
 15393 ;; Hardware stack levels required when called:    6
 15394 ;; This function calls:
 15395 ;;		_DimmerLightsPointSelect
 15396 ;;		_setLED
 15397 ;;		_setLoad_Count
 15398 ;;		_setLoad_StatusOn
 15399 ;; This function is called by:
 15400 ;;		_setDimmerLights_Main
 15401 ;;		_setControl_Lights_Table
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           
 15406                           ;psect for function _setDimmerLights
 15407  0000'                    _setDimmerLights:	
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15411                           ;setDimmerLights@lights stored from wreg
 15412  0000' 0020               	movlb	0	; select bank0
 15413  0001' 0086'              	movwf	setDimmerLights@lights
 15414                           
 15415                           ;Dimmer_B1.c: 332: DimmerLightsPointSelect(lights);
 15416  0002' 0806'              	movf	setDimmerLights@lights,w
 15417  0003' 3180' 2000' 3180'  	fcall	_DimmerLightsPointSelect
 15418                           
 15419                           ;Dimmer_B1.c: 333: Dimmer->Load=lights;
 15420  0006' 0020               	movlb	0	; select bank0
 15421  0007' 0806'              	movf	setDimmerLights@lights,w
 15422  0008' 0085'              	movwf	??_setDimmerLights
 15423  0009' 0021               	movlb	1	; select bank1
 15424  000A' 0A00'              	incf	_Dimmer^(0+128),w
 15425  000B' 0086               	movwf	6
 15426  000C' 0187               	clrf	7
 15427  000D' 0020               	movlb	0	; select bank0
 15428  000E' 0805'              	movf	??_setDimmerLights,w
 15429  000F' 0081               	movwf	1
 15430                           
 15431                           ;Dimmer_B1.c: 334: if(status)
 15432  0010' 0804'              	movf	setDimmerLights@status,w
 15433  0011' 1903               	btfsc	3,2
 15434  0012' 2800'              	goto	l8263
 15435                           
 15436                           ;Dimmer_B1.c: 335: {
 15437                           ;Dimmer_B1.c: 336: DimmerLights->Status=1;
 15438  0013' 0800'              	movf	_DimmerLights,w
 15439  0014' 0086               	movwf	6
 15440  0015' 3001               	movlw	1	; select bank2/3
 15441  0016' 0087               	movwf	7
 15442  0017' 1681               	bsf	1,5
 15443                           
 15444                           ;Dimmer_B1.c: 337: setLED(lights,0);
 15445  0018' 0182'              	clrf	setLED@command
 15446  0019' 0806'              	movf	setDimmerLights@lights,w
 15447  001A' 3180' 2000' 3180'  	fcall	_setLED
 15448                           
 15449                           ;Dimmer_B1.c: 338: RC7=!0;
 15450  001D' 0020               	movlb	0	; select bank0
 15451  001E' 178E               	bsf	14,7	;volatile
 15452                           
 15453                           ;Dimmer_B1.c: 339: setLoad_Count(0);
 15454  001F' 3000               	movlw	0
 15455  0020' 3180' 2000' 3180'  	fcall	_setLoad_Count
 15456                           
 15457                           ;Dimmer_B1.c: 341: DimmerLights->Signal=1;
 15458  0023' 0800'              	movf	_DimmerLights,w
 15459  0024' 0086               	movwf	6
 15460  0025' 3001               	movlw	1	; select bank2/3
 15461  0026' 0087               	movwf	7
 15462  0027' 1481               	bsf	1,1
 15463                           
 15464                           ;Dimmer_B1.c: 342: DimmerLights->DimmingTimeValue=3;
 15465  0028' 3003               	movlw	3
 15466  0029' 0020               	movlb	0	; select bank0
 15467  002A' 0085'              	movwf	??_setDimmerLights
 15468  002B' 0800'              	movf	_DimmerLights,w
 15469  002C' 3E02               	addlw	2
 15470  002D' 0086               	movwf	6
 15471  002E' 3001               	movlw	1	; select bank2/3
 15472  002F' 0087               	movwf	7
 15473  0030' 0805'              	movf	??_setDimmerLights,w
 15474  0031' 0081               	movwf	1
 15475                           
 15476                           ;Dimmer_B1.c: 344: if(!DimmerLights->StatusFlag)
 15477  0032' 0800'              	movf	_DimmerLights,w
 15478  0033' 0086               	movwf	6
 15479  0034' 3001               	movlw	1	; select bank2/3
 15480  0035' 0087               	movwf	7
 15481  0036' 1B01               	btfsc	1,6
 15482  0037' 0008               	return
 15483                           
 15484                           ;Dimmer_B1.c: 345: {
 15485                           ;Dimmer_B1.c: 346: DimmerLights->StatusFlag=1;
 15486  0038' 0800'              	movf	_DimmerLights,w
 15487  0039' 0086               	movwf	6
 15488  003A' 3001               	movlw	1	; select bank2/3
 15489  003B' 0087               	movwf	7
 15490  003C' 1701               	bsf	1,6
 15491                           
 15492                           ;Dimmer_B1.c: 347: setLoad_StatusOn(lights,1);
 15493  003D' 0180'              	clrf	setLoad_StatusOn@command
 15494  003E' 0A80'              	incf	setLoad_StatusOn@command,f
 15495  003F' 0806'              	movf	setDimmerLights@lights,w
 15496  0040' 3180' 2000'        	fcall	_setLoad_StatusOn
 15497                           
 15498                           ;Dimmer_B1.c: 348: Memory->GO=0; if(!0) { Memory->Time=0; } ;;
 15499  0042' 0021               	movlb	1	; select bank1
 15500  0043' 0800'              	movf	_Memory^(0+128),w
 15501  0044' 3E22               	addlw	34
 15502  0045' 0086               	movwf	6
 15503  0046' 3001               	movlw	1	; select bank2/3
 15504  0047' 0087               	movwf	7
 15505  0048' 1081               	bcf	1,1
 15506  0049' 0800'              	movf	_Memory^(0+128),w
 15507  004A' 3E23               	addlw	35
 15508  004B' 0086               	movwf	6
 15509  004C' 3001               	movlw	1	; select bank2/3
 15510  004D' 0087               	movwf	7
 15511  004E' 3000               	movlw	0
 15512  004F' 3FC0               	movwi [0]fsr1
 15513  0050' 3FC1               	movwi [1]fsr1
 15514                           
 15515                           ;Dimmer_B1.c: 351: DimmerLights->DimmingValue=DimmerLights->MaxmumValue;
 15516  0051' 0800'              	movf	_DimmerLights,w
 15517  0052' 3E05               	addlw	5
 15518  0053' 0086               	movwf	6
 15519  0054' 3001               	movlw	1	; select bank2/3
 15520  0055' 0087               	movwf	7
 15521  0056' 0801               	movf	1,w
 15522  0057' 0020               	movlb	0	; select bank0
 15523  0058' 0085'              	movwf	??_setDimmerLights
 15524  0059' 0800'              	movf	_DimmerLights,w
 15525  005A' 3E04               	addlw	4
 15526  005B' 0086               	movwf	6
 15527  005C' 3001               	movlw	1	; select bank2/3
 15528  005D' 0087               	movwf	7
 15529  005E' 0805'              	movf	??_setDimmerLights,w
 15530  005F' 0081               	movwf	1
 15531                           
 15532                           ;Dimmer_B1.c: 355: DimmerLights->DimmingValue=((char)((100-55)*1.5));
 15533  0060' 3043               	movlw	67
 15534  0061' 0085'              	movwf	??_setDimmerLights
 15535  0062' 0800'              	movf	_DimmerLights,w
 15536  0063' 3E04               	addlw	4
 15537  0064' 0086               	movwf	6
 15538  0065' 3001               	movlw	1	; select bank2/3
 15539  0066' 0087               	movwf	7
 15540  0067' 0805'              	movf	??_setDimmerLights,w
 15541  0068' 0081               	movwf	1
 15542                           
 15543                           ;Dimmer_B1.c: 357: }
 15544                           ;Dimmer_B1.c: 358: }
 15545  0069' 0008               	return
 15546  006A'                    l8263:	
 15547                           
 15548                           ;Dimmer_B1.c: 359: else
 15549                           ;Dimmer_B1.c: 360: {
 15550                           ;Dimmer_B1.c: 361: DimmerLights->Status=0;
 15551  006A' 0800'              	movf	_DimmerLights,w
 15552  006B' 0086               	movwf	6
 15553  006C' 3001               	movlw	1	; select bank2/3
 15554  006D' 0087               	movwf	7
 15555  006E' 1281               	bcf	1,5
 15556                           
 15557                           ;Dimmer_B1.c: 363: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 15558  006F' 0800'              	movf	_DimmerLights,w
 15559  0070' 3E06               	addlw	6
 15560  0071' 0086               	movwf	6
 15561  0072' 3001               	movlw	1	; select bank2/3
 15562  0073' 0087               	movwf	7
 15563  0074' 0801               	movf	1,w
 15564  0075' 0085'              	movwf	??_setDimmerLights
 15565  0076' 0800'              	movf	_DimmerLights,w
 15566  0077' 3E04               	addlw	4
 15567  0078' 0086               	movwf	6
 15568  0079' 3001               	movlw	1	; select bank2/3
 15569  007A' 0087               	movwf	7
 15570  007B' 0805'              	movf	??_setDimmerLights,w
 15571  007C' 0081               	movwf	1
 15572                           
 15573                           ;Dimmer_B1.c: 370: DimmerLights->Signal=1;
 15574  007D' 0800'              	movf	_DimmerLights,w
 15575  007E' 0086               	movwf	6
 15576  007F' 3001               	movlw	1	; select bank2/3
 15577  0080' 0087               	movwf	7
 15578  0081' 1481               	bsf	1,1
 15579                           
 15580                           ;Dimmer_B1.c: 371: DimmerLights->AdjFlag=0;
 15581  0082' 0800'              	movf	_DimmerLights,w
 15582  0083' 0086               	movwf	6
 15583  0084' 3001               	movlw	1	; select bank2/3
 15584  0085' 0087               	movwf	7
 15585  0086' 1181               	bcf	1,3
 15586                           
 15587                           ;Dimmer_B1.c: 372: DimmerLights->AdjStatus=0;
 15588  0087' 0800'              	movf	_DimmerLights,w
 15589  0088' 0086               	movwf	6
 15590  0089' 3001               	movlw	1	; select bank2/3
 15591  008A' 0087               	movwf	7
 15592  008B' 1201               	bcf	1,4
 15593                           
 15594                           ;Dimmer_B1.c: 373: DimmerLights->DimmingTimeValue=3;
 15595  008C' 3003               	movlw	3
 15596  008D' 0085'              	movwf	??_setDimmerLights
 15597  008E' 0800'              	movf	_DimmerLights,w
 15598  008F' 3E02               	addlw	2
 15599  0090' 0086               	movwf	6
 15600  0091' 3001               	movlw	1	; select bank2/3
 15601  0092' 0087               	movwf	7
 15602  0093' 0805'              	movf	??_setDimmerLights,w
 15603  0094' 0081               	movwf	1
 15604  0095' 0008               	return
 15605  0096'                    __end_of_setDimmerLights:	
 15606                           
 15607                           	psect	text93
 15608  0000'                    __ptext93:	
 15609 ;; *************** function _setLoad_StatusOn *****************
 15610 ;; Defined at:
 15611 ;;		line 269 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;  lights          1    wreg     unsigned char 
 15614 ;;  command         1    0[BANK0 ] unsigned char 
 15615 ;; Auto vars:     Size  Location     Type
 15616 ;;  lights          1    1[BANK0 ] unsigned char 
 15617 ;; Return value:  Size  Location     Type
 15618 ;;		None               void
 15619 ;; Registers used:
 15620 ;;		wreg, fsr1l, fsr1h
 15621 ;; Tracked objects:
 15622 ;;		On entry : 0/0
 15623 ;;		On exit  : 0/0
 15624 ;;		Unchanged: 0/0
 15625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15626 ;;      Params:         0       1       0       0       0       0       0       0
 15627 ;;      Locals:         0       1       0       0       0       0       0       0
 15628 ;;      Temps:          0       0       0       0       0       0       0       0
 15629 ;;      Totals:         0       2       0       0       0       0       0       0
 15630 ;;Total ram usage:        2 bytes
 15631 ;; Hardware stack levels used:    1
 15632 ;; Hardware stack levels required when called:    4
 15633 ;; This function calls:
 15634 ;;		Nothing
 15635 ;; This function is called by:
 15636 ;;		_setDimmerLights
 15637 ;; This function uses a non-reentrant model
 15638 ;;
 15639                           
 15640                           
 15641                           ;psect for function _setLoad_StatusOn
 15642  0000'                    _setLoad_StatusOn:	
 15643                           
 15644                           ;incstack = 0
 15645                           ; Regs used in _setLoad_StatusOn: [wregfsr1]
 15646                           ;setLoad_StatusOn@lights stored from wreg
 15647  0000' 0020               	movlb	0	; select bank0
 15648  0001' 0081'              	movwf	setLoad_StatusOn@lights
 15649                           
 15650                           ;OverLoad_B1.c: 270: Load->GO = 1;
 15651  0002' 0804'              	movf	_Load,w
 15652  0003' 0086               	movwf	6
 15653  0004' 3002               	movlw	2	; select bank4/5
 15654  0005' 0087               	movwf	7
 15655  0006' 1481               	bsf	1,1
 15656                           
 15657                           ;OverLoad_B1.c: 271: Load->StatusOn = command;
 15658  0007' 0804'              	movf	_Load,w
 15659  0008' 3E46               	addlw	70
 15660  0009' 0086               	movwf	6
 15661  000A' 3002               	movlw	2	; select bank4/5
 15662  000B' 0087               	movwf	7
 15663  000C' 0800'              	movf	setLoad_StatusOn@command,w
 15664  000D' 1001               	bcf	1,0
 15665  000E' 1D03               	skipz
 15666  000F' 1401               	bsf	1,0
 15667                           
 15668                           ;OverLoad_B1.c: 273: if (lights == 1) {
 15669  0010' 0801'              	movf	setLoad_StatusOn@lights,w
 15670  0011' 3A01               	xorlw	1
 15671  0012' 1D03               	skipz
 15672  0013' 2800'              	goto	l8221
 15673                           
 15674                           ;OverLoad_B1.c: 274: Load->Lights1Status = 1;
 15675  0014' 0804'              	movf	_Load,w
 15676  0015' 3E43               	addlw	67
 15677  0016' 0086               	movwf	6
 15678  0017' 3002               	movlw	2	; select bank4/5
 15679  0018' 0087               	movwf	7
 15680  0019' 0181               	clrf	1
 15681  001A' 0A81               	incf	1,f
 15682  001B'                    l8221:	
 15683                           
 15684                           ;OverLoad_B1.c: 275: }
 15685                           ;OverLoad_B1.c: 276: if (lights == 2) {
 15686  001B' 0801'              	movf	setLoad_StatusOn@lights,w
 15687  001C' 3A02               	xorlw	2
 15688  001D' 1D03               	skipz
 15689  001E' 2800'              	goto	l8225
 15690                           
 15691                           ;OverLoad_B1.c: 277: Load->Lights2Status = 1;
 15692  001F' 0804'              	movf	_Load,w
 15693  0020' 3E44               	addlw	68
 15694  0021' 0086               	movwf	6
 15695  0022' 3002               	movlw	2	; select bank4/5
 15696  0023' 0087               	movwf	7
 15697  0024' 0181               	clrf	1
 15698  0025' 0A81               	incf	1,f
 15699  0026'                    l8225:	
 15700                           
 15701                           ;OverLoad_B1.c: 278: }
 15702                           ;OverLoad_B1.c: 279: if (lights == 3) {
 15703  0026' 0801'              	movf	setLoad_StatusOn@lights,w
 15704  0027' 3A03               	xorlw	3
 15705  0028' 1D03               	skipz
 15706  0029' 0008               	return
 15707                           
 15708                           ;OverLoad_B1.c: 280: Load->Lights3Status = 1;
 15709  002A' 0804'              	movf	_Load,w
 15710  002B' 3E45               	addlw	69
 15711  002C' 0086               	movwf	6
 15712  002D' 3002               	movlw	2	; select bank4/5
 15713  002E' 0087               	movwf	7
 15714  002F' 0181               	clrf	1
 15715  0030' 0A81               	incf	1,f
 15716  0031' 0008               	return
 15717  0032'                    __end_of_setLoad_StatusOn:	
 15718                           
 15719                           	psect	text94
 15720  0000'                    __ptext94:	
 15721 ;; *************** function _setLoad_Count *****************
 15722 ;; Defined at:
 15723 ;;		line 254 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 15724 ;; Parameters:    Size  Location     Type
 15725 ;;  command         1    wreg     unsigned char 
 15726 ;; Auto vars:     Size  Location     Type
 15727 ;;  command         1    1[BANK0 ] unsigned char 
 15728 ;; Return value:  Size  Location     Type
 15729 ;;		None               void
 15730 ;; Registers used:
 15731 ;;		wreg, fsr1l, fsr1h
 15732 ;; Tracked objects:
 15733 ;;		On entry : 0/0
 15734 ;;		On exit  : 0/0
 15735 ;;		Unchanged: 0/0
 15736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15737 ;;      Params:         0       0       0       0       0       0       0       0
 15738 ;;      Locals:         0       1       0       0       0       0       0       0
 15739 ;;      Temps:          0       1       0       0       0       0       0       0
 15740 ;;      Totals:         0       2       0       0       0       0       0       0
 15741 ;;Total ram usage:        2 bytes
 15742 ;; Hardware stack levels used:    1
 15743 ;; Hardware stack levels required when called:    4
 15744 ;; This function calls:
 15745 ;;		Nothing
 15746 ;; This function is called by:
 15747 ;;		_setDimmerLights
 15748 ;; This function uses a non-reentrant model
 15749 ;;
 15750                           
 15751                           
 15752                           ;psect for function _setLoad_Count
 15753  0000'                    _setLoad_Count:	
 15754                           
 15755                           ;incstack = 0
 15756                           ; Regs used in _setLoad_Count: [wregfsr1]
 15757                           ;setLoad_Count@command stored from wreg
 15758  0000' 0020               	movlb	0	; select bank0
 15759  0001' 0081'              	movwf	setLoad_Count@command
 15760                           
 15761                           ;OverLoad_B1.c: 255: Load->Count = command;
 15762  0002' 0801'              	movf	setLoad_Count@command,w
 15763  0003' 0080'              	movwf	??_setLoad_Count
 15764  0004' 0804'              	movf	_Load,w
 15765  0005' 3E3A               	addlw	58
 15766  0006' 0086               	movwf	6
 15767  0007' 3002               	movlw	2	; select bank4/5
 15768  0008' 0087               	movwf	7
 15769  0009' 0800'              	movf	??_setLoad_Count,w
 15770  000A' 0081               	movwf	1
 15771                           
 15772                           ;OverLoad_B1.c: 256: Load->SafeCount = command;
 15773  000B' 0801'              	movf	setLoad_Count@command,w
 15774  000C' 0080'              	movwf	??_setLoad_Count
 15775  000D' 0804'              	movf	_Load,w
 15776  000E' 3E42               	addlw	66
 15777  000F' 0086               	movwf	6
 15778  0010' 3002               	movlw	2	; select bank4/5
 15779  0011' 0087               	movwf	7
 15780  0012' 0800'              	movf	??_setLoad_Count,w
 15781  0013' 0081               	movwf	1
 15782  0014' 0008               	return
 15783  0015'                    __end_of_setLoad_Count:	
 15784                           
 15785                           	psect	text95
 15786  0000'                    __ptext95:	
 15787 ;; *************** function _setLED *****************
 15788 ;; Defined at:
 15789 ;;		line 74 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 15790 ;; Parameters:    Size  Location     Type
 15791 ;;  led             1    wreg     unsigned char 
 15792 ;;  command         1    2[BANK0 ] unsigned char 
 15793 ;; Auto vars:     Size  Location     Type
 15794 ;;  led             1    3[BANK0 ] unsigned char 
 15795 ;; Return value:  Size  Location     Type
 15796 ;;		None               void
 15797 ;; Registers used:
 15798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15799 ;; Tracked objects:
 15800 ;;		On entry : 0/0
 15801 ;;		On exit  : 0/0
 15802 ;;		Unchanged: 0/0
 15803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15804 ;;      Params:         0       1       0       0       0       0       0       0
 15805 ;;      Locals:         0       1       0       0       0       0       0       0
 15806 ;;      Temps:          0       0       0       0       0       0       0       0
 15807 ;;      Totals:         0       2       0       0       0       0       0       0
 15808 ;;Total ram usage:        2 bytes
 15809 ;; Hardware stack levels used:    1
 15810 ;; Hardware stack levels required when called:    5
 15811 ;; This function calls:
 15812 ;;		_LedPointSelect
 15813 ;; This function is called by:
 15814 ;;		_setDimmerLights_ERROR
 15815 ;;		_setDimmerLights
 15816 ;;		_setLED_Initialization
 15817 ;;		_setLoad_Exceptions
 15818 ;;		_setOverTemp_Exceptions
 15819 ;;		_setPowerFault_Exceptions
 15820 ;;		_setSw_Initialization
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           
 15825                           ;psect for function _setLED
 15826  0000'                    _setLED:	
 15827                           
 15828                           ;incstack = 0
 15829                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15830                           ;setLED@led stored from wreg
 15831  0000' 0020               	movlb	0	; select bank0
 15832  0001' 0083'              	movwf	setLED@led
 15833                           
 15834                           ;LED_B1.c: 76: LedPointSelect(led);
 15835  0002' 0803'              	movf	setLED@led,w
 15836  0003' 3180' 2000' 3180'  	fcall	_LedPointSelect
 15837                           
 15838                           ;LED_B1.c: 77: if(command == 0)
 15839  0006' 0020               	movlb	0	; select bank0
 15840  0007' 0882'              	movf	setLED@command,f
 15841  0008' 1D03               	skipz
 15842  0009' 2800'              	goto	l8181
 15843                           
 15844                           ;LED_B1.c: 78: {
 15845                           ;LED_B1.c: 80: if(led == 1)
 15846  000A' 0803'              	movf	setLED@led,w
 15847  000B' 3A01               	xorlw	1
 15848  000C' 1D03               	skipz
 15849  000D' 2800'              	goto	l8173
 15850                           
 15851                           ;LED_B1.c: 81: {
 15852                           ;LED_B1.c: 85: RA3=1;
 15853  000E' 158C               	bsf	12,3	;volatile
 15854                           
 15855                           ;LED_B1.c: 87: }
 15856  000F' 0008               	return
 15857  0010'                    l8173:	
 15858                           
 15859                           ;LED_B1.c: 90: else if(led == 2)
 15860  0010' 0803'              	movf	setLED@led,w
 15861  0011' 3A02               	xorlw	2
 15862  0012' 1D03               	skipz
 15863  0013' 2800'              	goto	l8177
 15864                           
 15865                           ;LED_B1.c: 91: {
 15866                           ;LED_B1.c: 95: RC7=1;
 15867  0014' 178E               	bsf	14,7	;volatile
 15868                           
 15869                           ;LED_B1.c: 97: }
 15870  0015' 0008               	return
 15871  0016'                    l8177:	
 15872                           
 15873                           ;LED_B1.c: 110: else if(led == 99)
 15874  0016' 0803'              	movf	setLED@led,w
 15875  0017' 3A63               	xorlw	99
 15876  0018' 1D03               	skipz
 15877  0019' 0008               	return
 15878                           
 15879                           ;LED_B1.c: 111: {
 15880                           ;LED_B1.c: 115: RB5=1;
 15881  001A' 168D               	bsf	13,5	;volatile
 15882                           
 15883                           ;LED_B1.c: 117: }
 15884                           ;LED_B1.c: 119: }
 15885  001B' 0008               	return
 15886  001C'                    l8181:	
 15887                           
 15888                           ;LED_B1.c: 120: else if(command == 1)
 15889  001C' 0802'              	movf	setLED@command,w
 15890  001D' 3A01               	xorlw	1
 15891  001E' 1D03               	skipz
 15892  001F' 2800'              	goto	l8195
 15893                           
 15894                           ;LED_B1.c: 121: {
 15895                           ;LED_B1.c: 123: if(led == 1)
 15896  0020' 0803'              	movf	setLED@led,w
 15897  0021' 3A01               	xorlw	1
 15898  0022' 1D03               	skipz
 15899  0023' 2800'              	goto	l8187
 15900                           
 15901                           ;LED_B1.c: 124: {
 15902                           ;LED_B1.c: 128: RA3=0;
 15903  0024' 118C               	bcf	12,3	;volatile
 15904                           
 15905                           ;LED_B1.c: 130: }
 15906  0025' 0008               	return
 15907  0026'                    l8187:	
 15908                           
 15909                           ;LED_B1.c: 133: else if(led == 2)
 15910  0026' 0803'              	movf	setLED@led,w
 15911  0027' 3A02               	xorlw	2
 15912  0028' 1D03               	skipz
 15913  0029' 2800'              	goto	l8191
 15914                           
 15915                           ;LED_B1.c: 134: {
 15916                           ;LED_B1.c: 138: RC7=0;
 15917  002A' 138E               	bcf	14,7	;volatile
 15918                           
 15919                           ;LED_B1.c: 140: }
 15920  002B' 0008               	return
 15921  002C'                    l8191:	
 15922                           
 15923                           ;LED_B1.c: 153: else if(led == 99)
 15924  002C' 0803'              	movf	setLED@led,w
 15925  002D' 3A63               	xorlw	99
 15926  002E' 1D03               	skipz
 15927  002F' 0008               	return
 15928                           
 15929                           ;LED_B1.c: 154: {
 15930                           ;LED_B1.c: 158: RB5=0;
 15931  0030' 128D               	bcf	13,5	;volatile
 15932                           
 15933                           ;LED_B1.c: 160: }
 15934                           ;LED_B1.c: 162: }
 15935  0031' 0008               	return
 15936  0032'                    l8195:	
 15937                           
 15938                           ;LED_B1.c: 163: else if(command == 10)
 15939  0032' 0802'              	movf	setLED@command,w
 15940  0033' 3A0A               	xorlw	10
 15941  0034' 1D03               	skipz
 15942  0035' 2800'              	goto	l8211
 15943                           
 15944                           ;LED_B1.c: 164: {
 15945                           ;LED_B1.c: 165: LED->GO=0;
 15946  0036' 0021               	movlb	1	; select bank1
 15947  0037' 0800'              	movf	_LED^(0+128),w
 15948  0038' 0086               	movwf	6
 15949  0039' 0187               	clrf	7
 15950  003A' 1081               	bcf	1,1
 15951                           
 15952                           ;LED_B1.c: 166: LED->Time=0;
 15953  003B' 0A00'              	incf	_LED^(0+128),w
 15954  003C' 0086               	movwf	6
 15955  003D' 0187               	clrf	7
 15956  003E' 3000               	movlw	0
 15957  003F' 3FC0               	movwi [0]fsr1
 15958  0040' 3FC1               	movwi [1]fsr1
 15959                           
 15960                           ;LED_B1.c: 168: if(led == 1)
 15961  0041' 0020               	movlb	0	; select bank0
 15962  0042' 0803'              	movf	setLED@led,w
 15963  0043' 3A01               	xorlw	1
 15964  0044' 1D03               	skipz
 15965  0045' 2800'              	goto	l8203
 15966                           
 15967                           ;LED_B1.c: 169: {
 15968                           ;LED_B1.c: 173: RA3=1;
 15969  0046' 158C               	bsf	12,3	;volatile
 15970                           
 15971                           ;LED_B1.c: 175: }
 15972  0047' 0008               	return
 15973  0048'                    l8203:	
 15974                           
 15975                           ;LED_B1.c: 178: else if(led == 2)
 15976  0048' 0803'              	movf	setLED@led,w
 15977  0049' 3A02               	xorlw	2
 15978  004A' 1D03               	skipz
 15979  004B' 2800'              	goto	l8207
 15980                           
 15981                           ;LED_B1.c: 179: {
 15982                           ;LED_B1.c: 183: RC7=1;
 15983  004C' 178E               	bsf	14,7	;volatile
 15984                           
 15985                           ;LED_B1.c: 185: }
 15986  004D' 0008               	return
 15987  004E'                    l8207:	
 15988                           
 15989                           ;LED_B1.c: 198: else if(led == 99)
 15990  004E' 0803'              	movf	setLED@led,w
 15991  004F' 3A63               	xorlw	99
 15992  0050' 1D03               	skipz
 15993  0051' 0008               	return
 15994                           
 15995                           ;LED_B1.c: 199: {
 15996                           ;LED_B1.c: 203: RB5=1;
 15997  0052' 168D               	bsf	13,5	;volatile
 15998                           
 15999                           ;LED_B1.c: 205: }
 16000                           ;LED_B1.c: 207: }
 16001  0053' 0008               	return
 16002  0054'                    l8211:	
 16003                           
 16004                           ;LED_B1.c: 208: else if(command == 11)
 16005  0054' 0802'              	movf	setLED@command,w
 16006  0055' 3A0B               	xorlw	11
 16007  0056' 1D03               	skipz
 16008  0057' 0008               	return
 16009                           
 16010                           ;LED_B1.c: 209: {
 16011                           ;LED_B1.c: 210: LED->GO=1;
 16012  0058' 0021               	movlb	1	; select bank1
 16013  0059' 0800'              	movf	_LED^(0+128),w
 16014  005A' 0086               	movwf	6
 16015  005B' 0187               	clrf	7
 16016  005C' 1481               	bsf	1,1
 16017  005D' 0008               	return
 16018  005E'                    __end_of_setLED:	
 16019                           
 16020                           	psect	text96
 16021  0000'                    __ptext96:	
 16022 ;; *************** function _LedPointSelect *****************
 16023 ;; Defined at:
 16024 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/LED_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;  led             1    wreg     unsigned char 
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;  led             1    1[BANK0 ] unsigned char 
 16029 ;; Return value:  Size  Location     Type
 16030 ;;		None               void
 16031 ;; Registers used:
 16032 ;;		wreg
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16038 ;;      Params:         0       0       0       0       0       0       0       0
 16039 ;;      Locals:         0       1       0       0       0       0       0       0
 16040 ;;      Temps:          0       1       0       0       0       0       0       0
 16041 ;;      Totals:         0       2       0       0       0       0       0       0
 16042 ;;Total ram usage:        2 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    4
 16045 ;; This function calls:
 16046 ;;		Nothing
 16047 ;; This function is called by:
 16048 ;;		_setLED_Initialization
 16049 ;;		_setLED
 16050 ;;		_setLED_Main
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           
 16055                           ;psect for function _LedPointSelect
 16056  0000'                    _LedPointSelect:	
 16057                           
 16058                           ;incstack = 0
 16059                           ; Regs used in _LedPointSelect: [wreg]
 16060                           ;LedPointSelect@led stored from wreg
 16061  0000' 0020               	movlb	0	; select bank0
 16062  0001' 0081'              	movwf	LedPointSelect@led
 16063                           
 16064                           ;LED_B1.c: 10: if(led == 1)
 16065  0002' 0801'              	movf	LedPointSelect@led,w
 16066  0003' 3A01               	xorlw	1
 16067  0004' 1D03               	skipz
 16068  0005' 2800'              	goto	l6045
 16069                           
 16070                           ;LED_B1.c: 11: {
 16071                           ;LED_B1.c: 12: LED=&VarLED1;
 16072  0006' 3000'              	movlw	_VarLED1& (0+255)
 16073  0007' 0080'              	movwf	??_LedPointSelect
 16074  0008' 0800'              	movf	??_LedPointSelect,w
 16075  0009' 0021               	movlb	1	; select bank1
 16076  000A' 0080'              	movwf	_LED^(0+128)
 16077                           
 16078                           ;LED_B1.c: 13: }
 16079  000B' 0008               	return
 16080  000C'                    l6045:	
 16081                           
 16082                           ;LED_B1.c: 16: else if(led == 2)
 16083  000C' 0020               	movlb	0	; select bank0
 16084  000D' 0801'              	movf	LedPointSelect@led,w
 16085  000E' 3A02               	xorlw	2
 16086  000F' 1D03               	skipz
 16087  0010' 2800'              	goto	l6049
 16088                           
 16089                           ;LED_B1.c: 17: {
 16090                           ;LED_B1.c: 18: LED=&VarLED2;
 16091  0011' 3000'              	movlw	_VarLED2& (0+255)
 16092  0012' 0080'              	movwf	??_LedPointSelect
 16093  0013' 0800'              	movf	??_LedPointSelect,w
 16094  0014' 0021               	movlb	1	; select bank1
 16095  0015' 0080'              	movwf	_LED^(0+128)
 16096                           
 16097                           ;LED_B1.c: 19: }
 16098  0016' 0008               	return
 16099  0017'                    l6049:	
 16100                           
 16101                           ;LED_B1.c: 28: else if(led == 99)
 16102  0017' 0020               	movlb	0	; select bank0
 16103  0018' 0801'              	movf	LedPointSelect@led,w
 16104  0019' 3A63               	xorlw	99
 16105  001A' 1D03               	skipz
 16106  001B' 0008               	return
 16107                           
 16108                           ;LED_B1.c: 29: {
 16109                           ;LED_B1.c: 30: LED=&VarErrLED;
 16110  001C' 3000'              	movlw	_VarErrLED& (0+255)
 16111  001D' 0080'              	movwf	??_LedPointSelect
 16112  001E' 0800'              	movf	??_LedPointSelect,w
 16113  001F' 0021               	movlb	1	; select bank1
 16114  0020' 0080'              	movwf	_LED^(0+128)
 16115  0021' 0008               	return
 16116  0022'                    __end_of_LedPointSelect:	
 16117                           
 16118                           	psect	text97
 16119  0000'                    __ptext97:	
 16120 ;; *************** function _DimmerLights_Close *****************
 16121 ;; Defined at:
 16122 ;;		line 101 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;		None
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;		None
 16127 ;; Return value:  Size  Location     Type
 16128 ;;		None               void
 16129 ;; Registers used:
 16130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16131 ;; Tracked objects:
 16132 ;;		On entry : 0/0
 16133 ;;		On exit  : 0/0
 16134 ;;		Unchanged: 0/0
 16135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16136 ;;      Params:         0       0       0       0       0       0       0       0
 16137 ;;      Locals:         0       0       0       0       0       0       0       0
 16138 ;;      Temps:          0       0       0       0       0       0       0       0
 16139 ;;      Totals:         0       0       0       0       0       0       0       0
 16140 ;;Total ram usage:        0 bytes
 16141 ;; Hardware stack levels used:    1
 16142 ;; Hardware stack levels required when called:    5
 16143 ;; This function calls:
 16144 ;;		_getDimmerLights_StatusFlag
 16145 ;;		_setLoad_GO
 16146 ;; This function is called by:
 16147 ;;		_DimmerLights_Main
 16148 ;; This function uses a non-reentrant model
 16149 ;;
 16150                           
 16151                           
 16152                           ;psect for function _DimmerLights_Close
 16153  0000'                    _DimmerLights_Close:	
 16154                           
 16155                           ;Dimmer_B1.c: 103: if(Dimmer->Detect)
 16156                           
 16157                           ;incstack = 0
 16158                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16159  0000' 0021               	movlb	1	; select bank1
 16160  0001' 0800'              	movf	_Dimmer^(0+128),w
 16161  0002' 0086               	movwf	6
 16162  0003' 0187               	clrf	7
 16163  0004' 1C01               	btfss	1,0
 16164  0005' 0008               	return
 16165                           
 16166                           ;Dimmer_B1.c: 104: {
 16167                           ;Dimmer_B1.c: 105: Dimmer->Detect=0;
 16168  0006' 0800'              	movf	_Dimmer^(0+128),w
 16169  0007' 0086               	movwf	6
 16170  0008' 0187               	clrf	7
 16171  0009' 1001               	bcf	1,0
 16172                           
 16173                           ;Dimmer_B1.c: 106: if(!getDimmerLights_StatusFlag())
 16174  000A' 3180' 2000' 3180'  	fcall	_getDimmerLights_StatusFlag
 16175  000D' 3800               	iorlw	0
 16176  000E' 1D03               	skipz
 16177  000F' 0008               	return
 16178                           
 16179                           ;Dimmer_B1.c: 107: {
 16180                           ;Dimmer_B1.c: 108: setLoad_GO(0);
 16181  0010' 3000               	movlw	0
 16182  0011' 3180' 2000'        	fcall	_setLoad_GO
 16183                           
 16184                           ;Dimmer_B1.c: 109: Memory->GO=1; if(!1) { Memory->Time=1; } ;;
 16185  0013' 0021               	movlb	1	; select bank1
 16186  0014' 0800'              	movf	_Memory^(0+128),w
 16187  0015' 3E22               	addlw	34
 16188  0016' 0086               	movwf	6
 16189  0017' 3001               	movlw	1	; select bank2/3
 16190  0018' 0087               	movwf	7
 16191  0019' 1481               	bsf	1,1
 16192  001A' 0008               	return
 16193  001B'                    __end_of_DimmerLights_Close:	
 16194                           
 16195                           	psect	text98
 16196  0000'                    __ptext98:	
 16197 ;; *************** function _setLoad_GO *****************
 16198 ;; Defined at:
 16199 ;;		line 265 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 16200 ;; Parameters:    Size  Location     Type
 16201 ;;  command         1    wreg     unsigned char 
 16202 ;; Auto vars:     Size  Location     Type
 16203 ;;  command         1    0[BANK0 ] unsigned char 
 16204 ;; Return value:  Size  Location     Type
 16205 ;;		None               void
 16206 ;; Registers used:
 16207 ;;		wreg, fsr1l, fsr1h
 16208 ;; Tracked objects:
 16209 ;;		On entry : 0/0
 16210 ;;		On exit  : 0/0
 16211 ;;		Unchanged: 0/0
 16212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16213 ;;      Params:         0       0       0       0       0       0       0       0
 16214 ;;      Locals:         0       1       0       0       0       0       0       0
 16215 ;;      Temps:          0       0       0       0       0       0       0       0
 16216 ;;      Totals:         0       1       0       0       0       0       0       0
 16217 ;;Total ram usage:        1 bytes
 16218 ;; Hardware stack levels used:    1
 16219 ;; Hardware stack levels required when called:    4
 16220 ;; This function calls:
 16221 ;;		Nothing
 16222 ;; This function is called by:
 16223 ;;		_DimmerLights_Close
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           
 16228                           ;psect for function _setLoad_GO
 16229  0000'                    _setLoad_GO:	
 16230                           
 16231                           ;incstack = 0
 16232                           ; Regs used in _setLoad_GO: [wregfsr1]
 16233                           ;setLoad_GO@command stored from wreg
 16234  0000' 0020               	movlb	0	; select bank0
 16235  0001' 0080'              	movwf	setLoad_GO@command
 16236                           
 16237                           ;OverLoad_B1.c: 266: Load->GO = command;
 16238  0002' 0804'              	movf	_Load,w
 16239  0003' 0086               	movwf	6
 16240  0004' 3002               	movlw	2	; select bank4/5
 16241  0005' 0087               	movwf	7
 16242  0006' 0800'              	movf	setLoad_GO@command,w
 16243  0007' 1081               	bcf	1,1
 16244  0008' 1D03               	skipz
 16245  0009' 1481               	bsf	1,1
 16246  000A' 0008               	return
 16247  000B'                    __end_of_setLoad_GO:	
 16248                           
 16249                           	psect	text99
 16250  0000'                    __ptext99:	
 16251 ;; *************** function _getDimmerLights_StatusFlag *****************
 16252 ;; Defined at:
 16253 ;;		line 208 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;		None
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  Status          1    0[BANK0 ] unsigned char 
 16258 ;; Return value:  Size  Location     Type
 16259 ;;                  1    wreg      unsigned char 
 16260 ;; Registers used:
 16261 ;;		wreg, fsr1l, fsr1h, status,2
 16262 ;; Tracked objects:
 16263 ;;		On entry : 0/0
 16264 ;;		On exit  : 0/0
 16265 ;;		Unchanged: 0/0
 16266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16267 ;;      Params:         0       0       0       0       0       0       0       0
 16268 ;;      Locals:         0       1       0       0       0       0       0       0
 16269 ;;      Temps:          0       0       0       0       0       0       0       0
 16270 ;;      Totals:         0       1       0       0       0       0       0       0
 16271 ;;Total ram usage:        1 bytes
 16272 ;; Hardware stack levels used:    1
 16273 ;; Hardware stack levels required when called:    4
 16274 ;; This function calls:
 16275 ;;		Nothing
 16276 ;; This function is called by:
 16277 ;;		_DimmerLights_Close
 16278 ;;		_DimmerLights_Exceptions
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           
 16283                           ;psect for function _getDimmerLights_StatusFlag
 16284  0000'                    _getDimmerLights_StatusFlag:	
 16285                           
 16286                           ;Dimmer_B1.c: 210: char Status=0;
 16287                           
 16288                           ;incstack = 0
 16289                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+fsr1l+fsr1h+status,2]
 16290  0000' 0020               	movlb	0	; select bank0
 16291  0001' 0180'              	clrf	getDimmerLights_StatusFlag@Status
 16292                           
 16293                           ;Dimmer_B1.c: 221: Status=(DimmerLights11->StatusFlag)?1:0;
 16294  0002' 0801'              	movf	_DimmerLights11,w
 16295  0003' 0086               	movwf	6
 16296  0004' 3001               	movlw	1	; select bank2/3
 16297  0005' 0087               	movwf	7
 16298  0006' 3000               	movlw	0
 16299  0007' 1B01               	btfsc	1,6
 16300  0008' 3001               	movlw	1
 16301  0009' 0080'              	movwf	getDimmerLights_StatusFlag@Status
 16302                           
 16303                           ;Dimmer_B1.c: 224: return Status;
 16304  000A' 0800'              	movf	getDimmerLights_StatusFlag@Status,w
 16305  000B' 0008               	return
 16306  000C'                    __end_of_getDimmerLights_StatusFlag:	
 16307                           
 16308                           	psect	text100
 16309  0000'                    __ptext100:	
 16310 ;; *************** function _DimmerLights_Initialization *****************
 16311 ;; Defined at:
 16312 ;;		line 41 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16313 ;; Parameters:    Size  Location     Type
 16314 ;;		None
 16315 ;; Auto vars:     Size  Location     Type
 16316 ;;		None
 16317 ;; Return value:  Size  Location     Type
 16318 ;;		None               void
 16319 ;; Registers used:
 16320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16321 ;; Tracked objects:
 16322 ;;		On entry : 0/0
 16323 ;;		On exit  : 0/0
 16324 ;;		Unchanged: 0/0
 16325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16326 ;;      Params:         0       0       0       0       0       0       0       0
 16327 ;;      Locals:         0       0       0       0       0       0       0       0
 16328 ;;      Temps:          0       1       0       0       0       0       0       0
 16329 ;;      Totals:         0       1       0       0       0       0       0       0
 16330 ;;Total ram usage:        1 bytes
 16331 ;; Hardware stack levels used:    1
 16332 ;; Hardware stack levels required when called:    6
 16333 ;; This function calls:
 16334 ;;		_Dimmer_Initialization
 16335 ;;		_setDimmerLights_Initialization
 16336 ;; This function is called by:
 16337 ;;		_main
 16338 ;; This function uses a non-reentrant model
 16339 ;;
 16340                           
 16341                           
 16342                           ;psect for function _DimmerLights_Initialization
 16343  0000'                    _DimmerLights_Initialization:	
 16344                           
 16345                           ;Dimmer_B1.c: 44: DimmerLights11=&DimmerLights1;
 16346                           
 16347                           ;incstack = 0
 16348                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16349  0000' 3000'              	movlw	_DimmerLights1& (0+255)
 16350  0001' 0020               	movlb	0	; select bank0
 16351  0002' 0084'              	movwf	??_DimmerLights_Initialization
 16352  0003' 0804'              	movf	??_DimmerLights_Initialization,w
 16353  0004' 0081'              	movwf	_DimmerLights11
 16354                           
 16355                           ;Dimmer_B1.c: 45: setDimmerLights_Initialization(1);
 16356  0005' 3001               	movlw	1
 16357  0006' 3180' 2000' 3180'  	fcall	_setDimmerLights_Initialization
 16358                           
 16359                           ;Dimmer_B1.c: 59: Dimmer_Initialization();
 16360  0009' 3180' 2000'        	fcall	_Dimmer_Initialization
 16361  000B' 0008               	return
 16362  000C'                    __end_of_DimmerLights_Initialization:	
 16363                           
 16364                           	psect	text101
 16365  0000'                    __ptext101:	
 16366 ;; *************** function _setDimmerLights_Initialization *****************
 16367 ;; Defined at:
 16368 ;;		line 63 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  lights          1    wreg     unsigned char 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  lights          1    3[BANK0 ] unsigned char 
 16373 ;; Return value:  Size  Location     Type
 16374 ;;		None               void
 16375 ;; Registers used:
 16376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16377 ;; Tracked objects:
 16378 ;;		On entry : 0/0
 16379 ;;		On exit  : 0/0
 16380 ;;		Unchanged: 0/0
 16381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16382 ;;      Params:         0       0       0       0       0       0       0       0
 16383 ;;      Locals:         0       1       0       0       0       0       0       0
 16384 ;;      Temps:          0       1       0       0       0       0       0       0
 16385 ;;      Totals:         0       2       0       0       0       0       0       0
 16386 ;;Total ram usage:        2 bytes
 16387 ;; Hardware stack levels used:    1
 16388 ;; Hardware stack levels required when called:    5
 16389 ;; This function calls:
 16390 ;;		_DimmerLightsPointSelect
 16391 ;; This function is called by:
 16392 ;;		_DimmerLights_Initialization
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           
 16397                           ;psect for function _setDimmerLights_Initialization
 16398  0000'                    _setDimmerLights_Initialization:	
 16399                           
 16400                           ;incstack = 0
 16401                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 16402                           ;setDimmerLights_Initialization@lights stored from wreg
 16403  0000' 0020               	movlb	0	; select bank0
 16404  0001' 0083'              	movwf	setDimmerLights_Initialization@lights
 16405                           
 16406                           ;Dimmer_B1.c: 65: DimmerLightsPointSelect(lights);
 16407  0002' 0803'              	movf	setDimmerLights_Initialization@lights,w
 16408  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
 16409                           
 16410                           ;Dimmer_B1.c: 66: DimmerLights->Clear=1;
 16411  0005' 0800'              	movf	_DimmerLights,w
 16412  0006' 3E0C               	addlw	12
 16413  0007' 0086               	movwf	6
 16414  0008' 3001               	movlw	1	; select bank2/3
 16415  0009' 0087               	movwf	7
 16416  000A' 1401               	bsf	1,0
 16417                           
 16418                           ;Dimmer_B1.c: 72: DimmerLights->MaxmumValue=((char)((100-55)*1.5));
 16419  000B' 3043               	movlw	67
 16420  000C' 0020               	movlb	0	; select bank0
 16421  000D' 0082'              	movwf	??_setDimmerLights_Initialization
 16422  000E' 0800'              	movf	_DimmerLights,w
 16423  000F' 3E05               	addlw	5
 16424  0010' 0086               	movwf	6
 16425  0011' 3001               	movlw	1	; select bank2/3
 16426  0012' 0087               	movwf	7
 16427  0013' 0802'              	movf	??_setDimmerLights_Initialization,w
 16428  0014' 0081               	movwf	1
 16429                           
 16430                           ;Dimmer_B1.c: 73: DimmerLights->MinimumValue=((char)((100-20)*1.5));
 16431  0015' 3078               	movlw	120
 16432  0016' 0082'              	movwf	??_setDimmerLights_Initialization
 16433  0017' 0800'              	movf	_DimmerLights,w
 16434  0018' 3E06               	addlw	6
 16435  0019' 0086               	movwf	6
 16436  001A' 3001               	movlw	1	; select bank2/3
 16437  001B' 0087               	movwf	7
 16438  001C' 0802'              	movf	??_setDimmerLights_Initialization,w
 16439  001D' 0081               	movwf	1
 16440                           
 16441                           ;Dimmer_B1.c: 83: DimmerLights->DimmingValue=DimmerLights->MinimumValue;
 16442  001E' 0800'              	movf	_DimmerLights,w
 16443  001F' 3E06               	addlw	6
 16444  0020' 0086               	movwf	6
 16445  0021' 3001               	movlw	1	; select bank2/3
 16446  0022' 0087               	movwf	7
 16447  0023' 0801               	movf	1,w
 16448  0024' 0082'              	movwf	??_setDimmerLights_Initialization
 16449  0025' 0800'              	movf	_DimmerLights,w
 16450  0026' 3E04               	addlw	4
 16451  0027' 0086               	movwf	6
 16452  0028' 3001               	movlw	1	; select bank2/3
 16453  0029' 0087               	movwf	7
 16454  002A' 0802'              	movf	??_setDimmerLights_Initialization,w
 16455  002B' 0081               	movwf	1
 16456  002C' 0008               	return
 16457  002D'                    __end_of_setDimmerLights_Initialization:	
 16458                           
 16459                           	psect	text102
 16460  0000'                    __ptext102:	
 16461 ;; *************** function _Dimmer_Initialization *****************
 16462 ;; Defined at:
 16463 ;;		line 520 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;		None
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;		None
 16468 ;; Return value:  Size  Location     Type
 16469 ;;		None               void
 16470 ;; Registers used:
 16471 ;;		wreg
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16477 ;;      Params:         0       0       0       0       0       0       0       0
 16478 ;;      Locals:         0       0       0       0       0       0       0       0
 16479 ;;      Temps:          0       1       0       0       0       0       0       0
 16480 ;;      Totals:         0       1       0       0       0       0       0       0
 16481 ;;Total ram usage:        1 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    4
 16484 ;; This function calls:
 16485 ;;		Nothing
 16486 ;; This function is called by:
 16487 ;;		_DimmerLights_Initialization
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function _Dimmer_Initialization
 16493  0000'                    _Dimmer_Initialization:	
 16494                           
 16495                           ;Dimmer_B1.c: 522: Dimmer=&Dimmer1;
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in _Dimmer_Initialization: [wreg]
 16499  0000' 3000'              	movlw	_Dimmer1& (0+255)
 16500  0001' 0020               	movlb	0	; select bank0
 16501  0002' 0080'              	movwf	??_Dimmer_Initialization
 16502  0003' 0800'              	movf	??_Dimmer_Initialization,w
 16503  0004' 0021               	movlb	1	; select bank1
 16504  0005' 0080'              	movwf	_Dimmer^(0+128)
 16505  0006' 0008               	return
 16506  0007'                    __end_of_Dimmer_Initialization:	
 16507                           
 16508                           	psect	text103
 16509  0000'                    __ptext103:	
 16510 ;; *************** function _DelayOff_Main *****************
 16511 ;; Defined at:
 16512 ;;		line 45 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;		None
 16515 ;; Auto vars:     Size  Location     Type
 16516 ;;		None
 16517 ;; Return value:  Size  Location     Type
 16518 ;;		None               void
 16519 ;; Registers used:
 16520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16521 ;; Tracked objects:
 16522 ;;		On entry : 0/0
 16523 ;;		On exit  : 0/0
 16524 ;;		Unchanged: 0/0
 16525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16526 ;;      Params:         0       0       0       0       0       0       0       0
 16527 ;;      Locals:         0       0       0       0       0       0       0       0
 16528 ;;      Temps:          0       0       0       0       0       0       0       0
 16529 ;;      Totals:         0       0       0       0       0       0       0       0
 16530 ;;Total ram usage:        0 bytes
 16531 ;; Hardware stack levels used:    1
 16532 ;; Hardware stack levels required when called:    9
 16533 ;; This function calls:
 16534 ;;		_DlyOff_Main
 16535 ;; This function is called by:
 16536 ;;		_main
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           
 16541                           ;psect for function _DelayOff_Main
 16542  0000'                    _DelayOff_Main:	
 16543                           
 16544                           ;DelayOff_B1.c: 48: DlyOff_Main(1);
 16545                           
 16546                           ;incstack = 0
 16547                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16548  0000' 3001               	movlw	1
 16549  0001' 3180' 2000'        	fcall	_DlyOff_Main
 16550  0003' 0008               	return
 16551  0004'                    __end_of_DelayOff_Main:	
 16552                           
 16553                           	psect	text104
 16554  0000'                    __ptext104:	
 16555 ;; *************** function _DlyOff_Main *****************
 16556 ;; Defined at:
 16557 ;;		line 66 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 16558 ;; Parameters:    Size  Location     Type
 16559 ;;  sw              1    wreg     unsigned char 
 16560 ;; Auto vars:     Size  Location     Type
 16561 ;;  sw              1   68[BANK0 ] unsigned char 
 16562 ;; Return value:  Size  Location     Type
 16563 ;;		None               void
 16564 ;; Registers used:
 16565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16571 ;;      Params:         0       0       0       0       0       0       0       0
 16572 ;;      Locals:         0       1       0       0       0       0       0       0
 16573 ;;      Temps:          0       2       0       0       0       0       0       0
 16574 ;;      Totals:         0       3       0       0       0       0       0       0
 16575 ;;Total ram usage:        3 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; Hardware stack levels required when called:    8
 16578 ;; This function calls:
 16579 ;;		_DelayOffPointSelect
 16580 ;;		_setBuz
 16581 ;;		_setDimmerLights_Switch
 16582 ;;		_setDimmerLights_Trigger
 16583 ;;		_setRFSW_Status
 16584 ;;		_setRF_DimmerLights
 16585 ;;		_setSw_Status
 16586 ;;		_setTxData
 16587 ;; This function is called by:
 16588 ;;		_DelayOff_Main
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _DlyOff_Main
 16594  0000'                    _DlyOff_Main:	
 16595                           
 16596                           ;incstack = 0
 16597                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16598                           ;DlyOff_Main@sw stored from wreg
 16599  0000' 0020               	movlb	0	; select bank0
 16600  0001' 00C4'              	movwf	DlyOff_Main@sw
 16601                           
 16602                           ;DelayOff_B1.c: 68: DelayOffPointSelect(sw);
 16603  0002' 0844'              	movf	DlyOff_Main@sw,w
 16604  0003' 3180' 2000' 3180'  	fcall	_DelayOffPointSelect
 16605                           
 16606                           ;DelayOff_B1.c: 69: if(DelayOff->GO)
 16607  0006' 0021               	movlb	1	; select bank1
 16608  0007' 0800'              	movf	_DelayOff^(0+128),w
 16609  0008' 0086               	movwf	6
 16610  0009' 0187               	clrf	7
 16611  000A' 1C81               	btfss	1,1
 16612  000B' 0008               	return
 16613                           
 16614                           ;DelayOff_B1.c: 70: {
 16615                           ;DelayOff_B1.c: 71: DelayOff->SecondTime++;
 16616  000C' 0800'              	movf	_DelayOff^(0+128),w
 16617  000D' 3E02               	addlw	2
 16618  000E' 0086               	movwf	6
 16619  000F' 0187               	clrf	7
 16620  0010' 3001               	movlw	1
 16621  0011' 0781               	addwf	1,f
 16622  0012' 3141               	addfsr 1,1
 16623  0013' 1803               	skipnc
 16624  0014' 0A81               	incf	1,f
 16625                           
 16626                           ;DelayOff_B1.c: 72: if(DelayOff->SecondTime >= 5600)
 16627  0015' 0800'              	movf	_DelayOff^(0+128),w
 16628  0016' 3E02               	addlw	2
 16629  0017' 0086               	movwf	6
 16630  0018' 0187               	clrf	7
 16631  0019' 3F40               	moviw [0]fsr1
 16632  001A' 0020               	movlb	0	; select bank0
 16633  001B' 00C2'              	movwf	??_DlyOff_Main
 16634  001C' 3F41               	moviw [1]fsr1
 16635  001D' 00C3'              	movwf	??_DlyOff_Main+1
 16636  001E' 3015               	movlw	21
 16637  001F' 0243'              	subwf	??_DlyOff_Main+1,w
 16638  0020' 30E0               	movlw	224
 16639  0021' 1903               	skipnz
 16640  0022' 0242'              	subwf	??_DlyOff_Main,w
 16641  0023' 1C03               	skipc
 16642  0024' 0008               	return
 16643                           
 16644                           ;DelayOff_B1.c: 73: {
 16645                           ;DelayOff_B1.c: 74: DelayOff->SecondTime=0;
 16646  0025' 0021               	movlb	1	; select bank1
 16647  0026' 0800'              	movf	_DelayOff^(0+128),w
 16648  0027' 3E02               	addlw	2
 16649  0028' 0086               	movwf	6
 16650  0029' 0187               	clrf	7
 16651  002A' 3000               	movlw	0
 16652  002B' 3FC0               	movwi [0]fsr1
 16653  002C' 3FC1               	movwi [1]fsr1
 16654                           
 16655                           ;DelayOff_B1.c: 75: DelayOff->MinuteTime++;
 16656  002D' 3001               	movlw	1
 16657  002E' 0020               	movlb	0	; select bank0
 16658  002F' 00C2'              	movwf	??_DlyOff_Main
 16659  0030' 0021               	movlb	1	; select bank1
 16660  0031' 0800'              	movf	_DelayOff^(0+128),w
 16661  0032' 3E04               	addlw	4
 16662  0033' 0086               	movwf	6
 16663  0034' 0187               	clrf	7
 16664  0035' 0020               	movlb	0	; select bank0
 16665  0036' 0842'              	movf	??_DlyOff_Main,w
 16666  0037' 0781               	addwf	1,f
 16667                           
 16668                           ;DelayOff_B1.c: 76: if(DelayOff->MinuteTime >= DelayOff->Value)
 16669  0038' 0021               	movlb	1	; select bank1
 16670  0039' 0800'              	movf	_DelayOff^(0+128),w
 16671  003A' 3E04               	addlw	4
 16672  003B' 0086               	movwf	6
 16673  003C' 0187               	clrf	7
 16674  003D' 0A00'              	incf	_DelayOff^(0+128),w
 16675  003E' 0084               	movwf	4
 16676  003F' 0185               	clrf	5
 16677  0040' 0800               	movf	0,w
 16678  0041' 0201               	subwf	1,w
 16679  0042' 1C03               	skipc
 16680  0043' 0008               	return
 16681                           
 16682                           ;DelayOff_B1.c: 77: {
 16683                           ;DelayOff_B1.c: 78: DelayOff->MinuteTime=0;
 16684  0044' 0800'              	movf	_DelayOff^(0+128),w
 16685  0045' 3E04               	addlw	4
 16686  0046' 0086               	movwf	6
 16687  0047' 0187               	clrf	7
 16688  0048' 0181               	clrf	1
 16689                           
 16690                           ;DelayOff_B1.c: 79: DelayOff->GO=0;
 16691  0049' 0800'              	movf	_DelayOff^(0+128),w
 16692  004A' 0086               	movwf	6
 16693  004B' 0187               	clrf	7
 16694  004C' 1081               	bcf	1,1
 16695                           
 16696                           ;DelayOff_B1.c: 80: setSw_Status(sw,0);
 16697  004D' 0020               	movlb	0	; select bank0
 16698  004E' 0182'              	clrf	setSw_Status@command
 16699  004F' 0844'              	movf	DlyOff_Main@sw,w
 16700  0050' 3180' 2000' 3180'  	fcall	_setSw_Status
 16701                           
 16702                           ;DelayOff_B1.c: 81: setRFSW_Status(sw,0);
 16703  0053' 0020               	movlb	0	; select bank0
 16704  0054' 0182'              	clrf	setRFSW_Status@command
 16705  0055' 0844'              	movf	DlyOff_Main@sw,w
 16706  0056' 3180' 2000' 3180'  	fcall	_setRFSW_Status
 16707                           
 16708                           ;DelayOff_B1.c: 82: setRF_DimmerLights(sw,0);
 16709  0059' 0020               	movlb	0	; select bank0
 16710  005A' 01BD'              	clrf	setRF_DimmerLights@on
 16711  005B' 0844'              	movf	DlyOff_Main@sw,w
 16712  005C' 3180' 2000' 3180'  	fcall	_setRF_DimmerLights
 16713                           
 16714                           ;DelayOff_B1.c: 83: setDimmerLights_Trigger(sw,1);
 16715  005F' 0020               	movlb	0	; select bank0
 16716  0060' 0182'              	clrf	setDimmerLights_Trigger@command
 16717  0061' 0A82'              	incf	setDimmerLights_Trigger@command,f
 16718  0062' 0844'              	movf	DlyOff_Main@sw,w
 16719  0063' 3180' 2000' 3180'  	fcall	_setDimmerLights_Trigger
 16720                           
 16721                           ;DelayOff_B1.c: 84: setDimmerLights_Switch(sw,0);
 16722  0066' 0020               	movlb	0	; select bank0
 16723  0067' 0182'              	clrf	setDimmerLights_Switch@command
 16724  0068' 0844'              	movf	DlyOff_Main@sw,w
 16725  0069' 3180' 2000' 3180'  	fcall	_setDimmerLights_Switch
 16726                           
 16727                           ;DelayOff_B1.c: 85: setTxData(1);
 16728  006C' 3001               	movlw	1
 16729  006D' 3180' 2000' 3180'  	fcall	_setTxData
 16730                           
 16731                           ;DelayOff_B1.c: 86: setBuz(1,100);
 16732  0070' 3064               	movlw	100
 16733  0071' 0020               	movlb	0	; select bank0
 16734  0072' 0086'              	movwf	setBuz@time
 16735  0073' 3000               	movlw	0
 16736  0074' 0087'              	movwf	setBuz@time+1
 16737  0075' 3001               	movlw	1
 16738  0076' 3180' 2000'        	fcall	_setBuz
 16739  0078' 0008               	return
 16740  0079'                    __end_of_DlyOff_Main:	
 16741                           
 16742                           	psect	text105
 16743  0000'                    __ptext105:	
 16744 ;; *************** function _setTxData *****************
 16745 ;; Defined at:
 16746 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 16747 ;; Parameters:    Size  Location     Type
 16748 ;;  rf              1    wreg     unsigned char 
 16749 ;; Auto vars:     Size  Location     Type
 16750 ;;  rf              1    3[BANK0 ] unsigned char 
 16751 ;;  i               1    0        unsigned char 
 16752 ;; Return value:  Size  Location     Type
 16753 ;;		None               void
 16754 ;; Registers used:
 16755 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16756 ;; Tracked objects:
 16757 ;;		On entry : 0/0
 16758 ;;		On exit  : 0/0
 16759 ;;		Unchanged: 0/0
 16760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 16761 ;;      Params:         0       0       0       0       0       0       0       0
 16762 ;;      Locals:         0       1       0       0       0       0       0       0
 16763 ;;      Temps:          0       1       0       0       0       0       0       0
 16764 ;;      Totals:         0       2       0       0       0       0       0       0
 16765 ;;Total ram usage:        2 bytes
 16766 ;; Hardware stack levels used:    1
 16767 ;; Hardware stack levels required when called:    5
 16768 ;; This function calls:
 16769 ;;		_RfPointSelect
 16770 ;; This function is called by:
 16771 ;;		_DlyOff_Main
 16772 ;;		_setDimmerLights_Adj
 16773 ;;		_setControl_Lights_Table
 16774 ;;		_setRFSW_Control
 16775 ;;		_setRFSW_AdjControl
 16776 ;;		_Sw_DimmerOnFunc
 16777 ;;		_Sw_DimmerOffFunc
 16778 ;; This function uses a non-reentrant model
 16779 ;;
 16780                           
 16781                           
 16782                           ;psect for function _setTxData
 16783  0000'                    _setTxData:	
 16784                           
 16785                           ;incstack = 0
 16786                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16787                           ;setTxData@rf stored from wreg
 16788  0000' 0020               	movlb	0	; select bank0
 16789  0001' 0083'              	movwf	setTxData@rf
 16790                           
 16791                           ;RF_Control_B1.c: 132: char i;
 16792                           ;RF_Control_B1.c: 133: RfPointSelect(rf);
 16793  0002' 0803'              	movf	setTxData@rf,w
 16794  0003' 3180' 2000' 3180'  	fcall	_RfPointSelect
 16795                           
 16796                           ;RF_Control_B1.c: 134: if (RF->Enable) {
 16797  0006' 0021               	movlb	1	; select bank1
 16798  0007' 0800'              	movf	_RF^(0+128),w
 16799  0008' 0086               	movwf	6
 16800  0009' 0187               	clrf	7
 16801  000A' 1C01               	btfss	1,0
 16802  000B' 0008               	return
 16803                           
 16804                           ;RF_Control_B1.c: 136: if (!RF->TransceiveGO) {
 16805  000C' 0800'              	movf	_RF^(0+128),w
 16806  000D' 0086               	movwf	6
 16807  000E' 0187               	clrf	7
 16808  000F' 1901               	btfsc	1,2
 16809  0010' 0008               	return
 16810                           
 16811                           ;RF_Control_B1.c: 137: RF->TransceiveGO = 1;
 16812  0011' 0800'              	movf	_RF^(0+128),w
 16813  0012' 0086               	movwf	6
 16814  0013' 0187               	clrf	7
 16815  0014' 1501               	bsf	1,2
 16816                           
 16817                           ;RF_Control_B1.c: 146: RF_Data[0] = 0x63;
 16818  0015' 3063               	movlw	99
 16819  0016' 0020               	movlb	0	; select bank0
 16820  0017' 0082'              	movwf	??_setTxData
 16821  0018' 0802'              	movf	??_setTxData,w
 16822  0019' 0021               	movlb	1	; select bank1
 16823  001A' 0080'              	movwf	_RF_Data^(0+128)
 16824                           
 16825                           ;RF_Control_B1.c: 147: RF_Data[1] = 0x02;
 16826  001B' 3002               	movlw	2
 16827  001C' 0020               	movlb	0	; select bank0
 16828  001D' 0082'              	movwf	??_setTxData
 16829  001E' 0802'              	movf	??_setTxData,w
 16830  001F' 0021               	movlb	1	; select bank1
 16831  0020' 0081'              	movwf	(_RF_Data^(0+128)+1)
 16832                           
 16833                           ;RF_Control_B1.c: 148: RF_Data[2] = Product->Data[2];
 16834  0021' 0800'              	movf	_Product,w
 16835  0022' 0086               	movwf	6
 16836  0023' 3001               	movlw	1	; select bank2/3
 16837  0024' 0087               	movwf	7
 16838  0025' 3001               	movlw	1	; select bank2/3
 16839  0026' 3F42               	moviw [2]fsr1
 16840  0027' 0082'              	movwf	(_RF_Data^(0+128)+2)
 16841                           
 16842                           ;RF_Control_B1.c: 149: RF_Data[3] = Product->Data[3];
 16843  0028' 0800'              	movf	_Product,w
 16844  0029' 0086               	movwf	6
 16845  002A' 3001               	movlw	1	; select bank2/3
 16846  002B' 0087               	movwf	7
 16847  002C' 3001               	movlw	1	; select bank2/3
 16848  002D' 3F43               	moviw [3]fsr1
 16849  002E' 0083'              	movwf	(_RF_Data^(0+128)+3)
 16850                           
 16851                           ;RF_Control_B1.c: 150: RF_Data[4] = Product->Data[4];
 16852  002F' 0800'              	movf	_Product,w
 16853  0030' 0086               	movwf	6
 16854  0031' 3001               	movlw	1	; select bank2/3
 16855  0032' 0087               	movwf	7
 16856  0033' 3001               	movlw	1	; select bank2/3
 16857  0034' 3F44               	moviw [4]fsr1
 16858  0035' 0084'              	movwf	(_RF_Data^(0+128)+4)
 16859                           
 16860                           ;RF_Control_B1.c: 151: RF_Data[5] = Product->Data[5];
 16861  0036' 0800'              	movf	_Product,w
 16862  0037' 0086               	movwf	6
 16863  0038' 3001               	movlw	1	; select bank2/3
 16864  0039' 0087               	movwf	7
 16865  003A' 3001               	movlw	1	; select bank2/3
 16866  003B' 3F45               	moviw [5]fsr1
 16867  003C' 0085'              	movwf	(_RF_Data^(0+128)+5)
 16868                           
 16869                           ;RF_Control_B1.c: 152: RF_Data[6] = Product->Data[6];
 16870  003D' 0800'              	movf	_Product,w
 16871  003E' 0086               	movwf	6
 16872  003F' 3001               	movlw	1	; select bank2/3
 16873  0040' 0087               	movwf	7
 16874  0041' 3001               	movlw	1	; select bank2/3
 16875  0042' 3F46               	moviw [6]fsr1
 16876  0043' 0086'              	movwf	(_RF_Data^(0+128)+6)
 16877                           
 16878                           ;RF_Control_B1.c: 153: RF_Data[7] = Product->Data[7];
 16879  0044' 0800'              	movf	_Product,w
 16880  0045' 0086               	movwf	6
 16881  0046' 3001               	movlw	1	; select bank2/3
 16882  0047' 0087               	movwf	7
 16883  0048' 3001               	movlw	1	; select bank2/3
 16884  0049' 3F47               	moviw [7]fsr1
 16885  004A' 0087'              	movwf	(_RF_Data^(0+128)+7)
 16886                           
 16887                           ;RF_Control_B1.c: 154: RF_Data[8] = Product->Data[8];
 16888  004B' 0800'              	movf	_Product,w
 16889  004C' 0086               	movwf	6
 16890  004D' 3001               	movlw	1	; select bank2/3
 16891  004E' 0087               	movwf	7
 16892  004F' 3001               	movlw	1	; select bank2/3
 16893  0050' 3F48               	moviw [8]fsr1
 16894  0051' 0088'              	movwf	(_RF_Data^(0+128)+8)
 16895                           
 16896                           ;RF_Control_B1.c: 155: RF_Data[9] = Product->Data[9];
 16897  0052' 0800'              	movf	_Product,w
 16898  0053' 0086               	movwf	6
 16899  0054' 3001               	movlw	1	; select bank2/3
 16900  0055' 0087               	movwf	7
 16901  0056' 3001               	movlw	1	; select bank2/3
 16902  0057' 3F49               	moviw [9]fsr1
 16903  0058' 0089'              	movwf	(_RF_Data^(0+128)+9)
 16904                           
 16905                           ;RF_Control_B1.c: 156: RF_Data[10] = Product->Data[10];
 16906  0059' 0800'              	movf	_Product,w
 16907  005A' 0086               	movwf	6
 16908  005B' 3001               	movlw	1	; select bank2/3
 16909  005C' 0087               	movwf	7
 16910  005D' 3001               	movlw	1	; select bank2/3
 16911  005E' 3F4A               	moviw [10]fsr1
 16912  005F' 008A'              	movwf	(_RF_Data^(0+128)+10)
 16913                           
 16914                           ;RF_Control_B1.c: 157: RF_Data[11] = Product->Data[11];
 16915  0060' 0800'              	movf	_Product,w
 16916  0061' 0086               	movwf	6
 16917  0062' 3001               	movlw	1	; select bank2/3
 16918  0063' 0087               	movwf	7
 16919  0064' 3001               	movlw	1	; select bank2/3
 16920  0065' 3F4B               	moviw [11]fsr1
 16921  0066' 008B'              	movwf	(_RF_Data^(0+128)+11)
 16922                           
 16923                           ;RF_Control_B1.c: 158: RF_Data[12] = Product->Data[12];
 16924  0067' 0800'              	movf	_Product,w
 16925  0068' 0086               	movwf	6
 16926  0069' 3001               	movlw	1	; select bank2/3
 16927  006A' 0087               	movwf	7
 16928  006B' 3001               	movlw	1	; select bank2/3
 16929  006C' 3F4C               	moviw [12]fsr1
 16930  006D' 008C'              	movwf	(_RF_Data^(0+128)+12)
 16931                           
 16932                           ;RF_Control_B1.c: 159: RF_Data[13] = Product->Data[13];
 16933  006E' 0800'              	movf	_Product,w
 16934  006F' 0086               	movwf	6
 16935  0070' 3001               	movlw	1	; select bank2/3
 16936  0071' 0087               	movwf	7
 16937  0072' 3001               	movlw	1	; select bank2/3
 16938  0073' 3F4D               	moviw [13]fsr1
 16939  0074' 008D'              	movwf	(_RF_Data^(0+128)+13)
 16940                           
 16941                           ;RF_Control_B1.c: 160: RF_Data[14] = Product->Data[14];
 16942  0075' 0800'              	movf	_Product,w
 16943  0076' 0086               	movwf	6
 16944  0077' 3001               	movlw	1	; select bank2/3
 16945  0078' 0087               	movwf	7
 16946  0079' 3001               	movlw	1	; select bank2/3
 16947  007A' 3F4E               	moviw [14]fsr1
 16948  007B' 008E'              	movwf	(_RF_Data^(0+128)+14)
 16949                           
 16950                           ;RF_Control_B1.c: 161: RF_Data[15] = Product->Data[15];
 16951  007C' 0800'              	movf	_Product,w
 16952  007D' 0086               	movwf	6
 16953  007E' 3001               	movlw	1	; select bank2/3
 16954  007F' 0087               	movwf	7
 16955  0080' 3001               	movlw	1	; select bank2/3
 16956  0081' 3F4F               	moviw [15]fsr1
 16957  0082' 008F'              	movwf	(_RF_Data^(0+128)+15)
 16958                           
 16959                           ;RF_Control_B1.c: 162: RF_Data[16] = Product->Data[16];
 16960  0083' 0800'              	movf	_Product,w
 16961  0084' 0086               	movwf	6
 16962  0085' 3001               	movlw	1	; select bank2/3
 16963  0086' 0087               	movwf	7
 16964  0087' 3001               	movlw	1	; select bank2/3
 16965  0088' 3F50               	moviw [16]fsr1
 16966  0089' 0090'              	movwf	(_RF_Data^(0+128)+16)
 16967                           
 16968                           ;RF_Control_B1.c: 163: RF_Data[17] = Product->Data[17];
 16969  008A' 0800'              	movf	_Product,w
 16970  008B' 0086               	movwf	6
 16971  008C' 3001               	movlw	1	; select bank2/3
 16972  008D' 0087               	movwf	7
 16973  008E' 3001               	movlw	1	; select bank2/3
 16974  008F' 3F51               	moviw [17]fsr1
 16975  0090' 0091'              	movwf	(_RF_Data^(0+128)+17)
 16976                           
 16977                           ;RF_Control_B1.c: 164: RF_Data[18] = Product->Data[18];
 16978  0091' 0800'              	movf	_Product,w
 16979  0092' 0086               	movwf	6
 16980  0093' 3001               	movlw	1	; select bank2/3
 16981  0094' 0087               	movwf	7
 16982  0095' 3001               	movlw	1	; select bank2/3
 16983  0096' 3F52               	moviw [18]fsr1
 16984  0097' 0092'              	movwf	(_RF_Data^(0+128)+18)
 16985                           
 16986                           ;RF_Control_B1.c: 165: RF_Data[19] = Product->Data[19];
 16987  0098' 0800'              	movf	_Product,w
 16988  0099' 0086               	movwf	6
 16989  009A' 3001               	movlw	1	; select bank2/3
 16990  009B' 0087               	movwf	7
 16991  009C' 3001               	movlw	1	; select bank2/3
 16992  009D' 3F53               	moviw [19]fsr1
 16993  009E' 0093'              	movwf	(_RF_Data^(0+128)+19)
 16994                           
 16995                           ;RF_Control_B1.c: 166: RF_Data[20] = 209;
 16996  009F' 30D1               	movlw	209
 16997  00A0' 0020               	movlb	0	; select bank0
 16998  00A1' 0082'              	movwf	??_setTxData
 16999  00A2' 0802'              	movf	??_setTxData,w
 17000  00A3' 0021               	movlb	1	; select bank1
 17001  00A4' 0094'              	movwf	(_RF_Data^(0+128)+20)
 17002  00A5' 0008               	return
 17003  00A6'                    __end_of_setTxData:	
 17004                           
 17005                           	psect	text106
 17006  0000'                    __ptext106:	
 17007 ;; *************** function _RfPointSelect *****************
 17008 ;; Defined at:
 17009 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  rf              1    wreg     unsigned char 
 17012 ;; Auto vars:     Size  Location     Type
 17013 ;;  rf              1    1[BANK0 ] unsigned char 
 17014 ;; Return value:  Size  Location     Type
 17015 ;;		None               void
 17016 ;; Registers used:
 17017 ;;		wreg
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17023 ;;      Params:         0       0       0       0       0       0       0       0
 17024 ;;      Locals:         0       1       0       0       0       0       0       0
 17025 ;;      Temps:          0       1       0       0       0       0       0       0
 17026 ;;      Totals:         0       2       0       0       0       0       0       0
 17027 ;;Total ram usage:        2 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    4
 17030 ;; This function calls:
 17031 ;;		Nothing
 17032 ;; This function is called by:
 17033 ;;		_setRF_Learn
 17034 ;;		_setRF_RxStatus
 17035 ;;		_setRF_Main
 17036 ;;		_setTxData
 17037 ;;		_setRF_Enable
 17038 ;;		_RF_RxDisable
 17039 ;;		_getRxData
 17040 ;;		_setLog_Code
 17041 ;;		_setControl_Lights_Table
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           
 17046                           ;psect for function _RfPointSelect
 17047  0000'                    _RfPointSelect:	
 17048                           
 17049                           ;incstack = 0
 17050                           ; Regs used in _RfPointSelect: [wreg]
 17051                           ;RfPointSelect@rf stored from wreg
 17052  0000' 0020               	movlb	0	; select bank0
 17053  0001' 0081'              	movwf	RfPointSelect@rf
 17054                           
 17055                           ;RF_Control_B1.c: 9: if (rf == 1) {
 17056  0002' 0801'              	movf	RfPointSelect@rf,w
 17057  0003' 3A01               	xorlw	1
 17058  0004' 1D03               	skipz
 17059  0005' 0008               	return
 17060                           
 17061                           ;RF_Control_B1.c: 10: RF = &RF1;
 17062  0006' 3000'              	movlw	_RF1& (0+255)
 17063  0007' 0080'              	movwf	??_RfPointSelect
 17064  0008' 0800'              	movf	??_RfPointSelect,w
 17065  0009' 0021               	movlb	1	; select bank1
 17066  000A' 0080'              	movwf	_RF^(0+128)
 17067  000B' 0008               	return
 17068  000C'                    __end_of_RfPointSelect:	
 17069                           
 17070                           	psect	text107
 17071  0000'                    __ptext107:	
 17072 ;; *************** function _setSw_Status *****************
 17073 ;; Defined at:
 17074 ;;		line 105 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  sw              1    wreg     unsigned char 
 17077 ;;  command         1    2[BANK0 ] unsigned char 
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;  sw              1    3[BANK0 ] unsigned char 
 17080 ;; Return value:  Size  Location     Type
 17081 ;;		None               void
 17082 ;; Registers used:
 17083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17084 ;; Tracked objects:
 17085 ;;		On entry : 0/0
 17086 ;;		On exit  : 0/0
 17087 ;;		Unchanged: 0/0
 17088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17089 ;;      Params:         0       1       0       0       0       0       0       0
 17090 ;;      Locals:         0       1       0       0       0       0       0       0
 17091 ;;      Temps:          0       0       0       0       0       0       0       0
 17092 ;;      Totals:         0       2       0       0       0       0       0       0
 17093 ;;Total ram usage:        2 bytes
 17094 ;; Hardware stack levels used:    1
 17095 ;; Hardware stack levels required when called:    5
 17096 ;; This function calls:
 17097 ;;		_SwPointSelect
 17098 ;; This function is called by:
 17099 ;;		_DlyOff_Main
 17100 ;;		_setDimmerLights_ERROR
 17101 ;;		_setControl_Lights_Table
 17102 ;;		_setRFSW_Control
 17103 ;; This function uses a non-reentrant model
 17104 ;;
 17105                           
 17106                           
 17107                           ;psect for function _setSw_Status
 17108  0000'                    _setSw_Status:	
 17109                           
 17110                           ;incstack = 0
 17111                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17112                           ;setSw_Status@sw stored from wreg
 17113  0000' 0020               	movlb	0	; select bank0
 17114  0001' 0083'              	movwf	setSw_Status@sw
 17115                           
 17116                           ;Switch_B1.c: 106: SwPointSelect(sw);
 17117  0002' 0803'              	movf	setSw_Status@sw,w
 17118  0003' 3180' 2000'        	fcall	_SwPointSelect
 17119                           
 17120                           ;Switch_B1.c: 107: Sw->Status = command;
 17121  0005' 0802'              	movf	_Sw,w
 17122  0006' 0086               	movwf	6
 17123  0007' 3001               	movlw	1	; select bank2/3
 17124  0008' 0087               	movwf	7
 17125  0009' 0020               	movlb	0	; select bank0
 17126  000A' 0802'              	movf	setSw_Status@command,w
 17127  000B' 1301               	bcf	1,6
 17128  000C' 1D03               	skipz
 17129  000D' 1701               	bsf	1,6
 17130  000E' 0008               	return
 17131  000F'                    __end_of_setSw_Status:	
 17132                           
 17133                           	psect	text108
 17134  0000'                    __ptext108:	
 17135 ;; *************** function _SwPointSelect *****************
 17136 ;; Defined at:
 17137 ;;		line 17 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Switch_B1.c"
 17138 ;; Parameters:    Size  Location     Type
 17139 ;;  sw              1    wreg     unsigned char 
 17140 ;; Auto vars:     Size  Location     Type
 17141 ;;  sw              1    1[BANK0 ] unsigned char 
 17142 ;; Return value:  Size  Location     Type
 17143 ;;		None               void
 17144 ;; Registers used:
 17145 ;;		wreg
 17146 ;; Tracked objects:
 17147 ;;		On entry : 0/0
 17148 ;;		On exit  : 0/0
 17149 ;;		Unchanged: 0/0
 17150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17151 ;;      Params:         0       0       0       0       0       0       0       0
 17152 ;;      Locals:         0       1       0       0       0       0       0       0
 17153 ;;      Temps:          0       1       0       0       0       0       0       0
 17154 ;;      Totals:         0       2       0       0       0       0       0       0
 17155 ;;Total ram usage:        2 bytes
 17156 ;; Hardware stack levels used:    1
 17157 ;; Hardware stack levels required when called:    4
 17158 ;; This function calls:
 17159 ;;		Nothing
 17160 ;; This function is called by:
 17161 ;;		_setSw_Enable
 17162 ;;		_setSw_Status
 17163 ;;		_setSw_Main
 17164 ;;		_Sw_Detect
 17165 ;; This function uses a non-reentrant model
 17166 ;;
 17167                           
 17168                           
 17169                           ;psect for function _SwPointSelect
 17170  0000'                    _SwPointSelect:	
 17171                           
 17172                           ;incstack = 0
 17173                           ; Regs used in _SwPointSelect: [wreg]
 17174                           ;SwPointSelect@sw stored from wreg
 17175  0000' 0020               	movlb	0	; select bank0
 17176  0001' 0081'              	movwf	SwPointSelect@sw
 17177                           
 17178                           ;Switch_B1.c: 20: if (sw == 1) {
 17179  0002' 0801'              	movf	SwPointSelect@sw,w
 17180  0003' 3A01               	xorlw	1
 17181  0004' 1D03               	skipz
 17182  0005' 0008               	return
 17183                           
 17184                           ;Switch_B1.c: 21: Sw = &Sw1;
 17185  0006' 3000'              	movlw	_Sw1& (0+255)
 17186  0007' 0080'              	movwf	??_SwPointSelect
 17187  0008' 0800'              	movf	??_SwPointSelect,w
 17188  0009' 0082'              	movwf	_Sw
 17189  000A' 0008               	return
 17190  000B'                    __end_of_SwPointSelect:	
 17191                           
 17192                           	psect	text109
 17193  0000'                    __ptext109:	
 17194 ;; *************** function _setRF_DimmerLights *****************
 17195 ;; Defined at:
 17196 ;;		line 398 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 17197 ;; Parameters:    Size  Location     Type
 17198 ;;  lights          1    wreg     unsigned char 
 17199 ;;  on              1   61[BANK0 ] unsigned char 
 17200 ;; Auto vars:     Size  Location     Type
 17201 ;;  lights          1   65[BANK0 ] unsigned char 
 17202 ;;  status          1   64[BANK0 ] unsigned char 
 17203 ;; Return value:  Size  Location     Type
 17204 ;;		None               void
 17205 ;; Registers used:
 17206 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17207 ;; Tracked objects:
 17208 ;;		On entry : 0/0
 17209 ;;		On exit  : 0/0
 17210 ;;		Unchanged: 0/0
 17211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17212 ;;      Params:         0       1       0       0       0       0       0       0
 17213 ;;      Locals:         0       2       0       0       0       0       0       0
 17214 ;;      Temps:          0       2       0       0       0       0       0       0
 17215 ;;      Totals:         0       5       0       0       0       0       0       0
 17216 ;;Total ram usage:        5 bytes
 17217 ;; Hardware stack levels used:    1
 17218 ;; Hardware stack levels required when called:    7
 17219 ;; This function calls:
 17220 ;;		_setPercentValue
 17221 ;; This function is called by:
 17222 ;;		_DlyOff_Main
 17223 ;;		_setDimmerLights_Adj
 17224 ;;		_setRFSW_Control
 17225 ;;		_Sw_DimmerOnFunc
 17226 ;;		_Sw_DimmerOffFunc
 17227 ;; This function uses a non-reentrant model
 17228 ;;
 17229                           
 17230                           
 17231                           ;psect for function _setRF_DimmerLights
 17232  0000'                    _setRF_DimmerLights:	
 17233                           
 17234                           ;incstack = 0
 17235                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17236                           ;setRF_DimmerLights@lights stored from wreg
 17237  0000' 0020               	movlb	0	; select bank0
 17238  0001' 00C1'              	movwf	setRF_DimmerLights@lights
 17239                           
 17240                           ;RF_Control_B1.c: 399: char status;
 17241                           ;RF_Control_B1.c: 400: status = 1;
 17242  0002' 01C0'              	clrf	setRF_DimmerLights@status
 17243  0003' 0AC0'              	incf	setRF_DimmerLights@status,f
 17244                           
 17245                           ;RF_Control_B1.c: 401: status <<= (lights - 1);
 17246  0004' 0841'              	movf	setRF_DimmerLights@lights,w
 17247  0005' 3EFF               	addlw	-1
 17248  0006' 0A89               	incf	9,f
 17249  0007' 2800'              	goto	u7570
 17250  0008'                    u7575:	
 17251  0008' 1003               	clrc
 17252  0009' 0DC0'              	rlf	setRF_DimmerLights@status,f
 17253  000A'                    u7570:	
 17254  000A' 3EFF               	addlw	-1
 17255  000B' 1D03               	skipz
 17256  000C' 2800'              	goto	u7575
 17257                           
 17258                           ;RF_Control_B1.c: 402: Product->Data[11]=lights;
 17259  000D' 0841'              	movf	setRF_DimmerLights@lights,w
 17260  000E' 00BE'              	movwf	??_setRF_DimmerLights
 17261  000F' 0800'              	movf	_Product,w
 17262  0010' 3E0B               	addlw	11
 17263  0011' 0086               	movwf	6
 17264  0012' 3001               	movlw	1	; select bank2/3
 17265  0013' 0087               	movwf	7
 17266  0014' 083E'              	movf	??_setRF_DimmerLights,w
 17267  0015' 0081               	movwf	1
 17268                           
 17269                           ;RF_Control_B1.c: 405: Product->Data[(20 + lights)]=setPercentValue(((char)((100-55)*1.5
      +                          )));
 17270  0016' 3043               	movlw	67
 17271  0017' 3180' 2000' 3180'  	fcall	_setPercentValue
 17272  001A' 0020               	movlb	0	; select bank0
 17273  001B' 00BE'              	movwf	??_setRF_DimmerLights
 17274  001C' 0841'              	movf	setRF_DimmerLights@lights,w
 17275  001D' 3E14               	addlw	20
 17276  001E' 0700'              	addwf	_Product,w
 17277  001F' 00BF'              	movwf	??_setRF_DimmerLights+1
 17278  0020' 083F'              	movf	??_setRF_DimmerLights+1,w
 17279  0021' 0086               	movwf	6
 17280  0022' 3001               	movlw	1	; select bank2/3
 17281  0023' 0087               	movwf	7
 17282  0024' 083E'              	movf	??_setRF_DimmerLights,w
 17283  0025' 0081               	movwf	1
 17284                           
 17285                           ;RF_Control_B1.c: 408: Product->Data[9]=Product->Data[20 + lights];
 17286  0026' 0841'              	movf	setRF_DimmerLights@lights,w
 17287  0027' 3E14               	addlw	20
 17288  0028' 0700'              	addwf	_Product,w
 17289  0029' 00BE'              	movwf	??_setRF_DimmerLights
 17290  002A' 083E'              	movf	??_setRF_DimmerLights,w
 17291  002B' 0086               	movwf	6
 17292  002C' 3001               	movlw	1	; select bank2/3
 17293  002D' 0087               	movwf	7
 17294  002E' 0801               	movf	1,w
 17295  002F' 00BF'              	movwf	??_setRF_DimmerLights+1
 17296  0030' 0800'              	movf	_Product,w
 17297  0031' 3E09               	addlw	9
 17298  0032' 0086               	movwf	6
 17299  0033' 3001               	movlw	1	; select bank2/3
 17300  0034' 0087               	movwf	7
 17301  0035' 083F'              	movf	??_setRF_DimmerLights+1,w
 17302  0036' 0081               	movwf	1
 17303                           
 17304                           ;RF_Control_B1.c: 409: Product->Data[17]=Product->Data[26 + lights];
 17305  0037' 0841'              	movf	setRF_DimmerLights@lights,w
 17306  0038' 3E1A               	addlw	26
 17307  0039' 0700'              	addwf	_Product,w
 17308  003A' 00BE'              	movwf	??_setRF_DimmerLights
 17309  003B' 083E'              	movf	??_setRF_DimmerLights,w
 17310  003C' 0086               	movwf	6
 17311  003D' 3001               	movlw	1	; select bank2/3
 17312  003E' 0087               	movwf	7
 17313  003F' 0801               	movf	1,w
 17314  0040' 00BF'              	movwf	??_setRF_DimmerLights+1
 17315  0041' 0800'              	movf	_Product,w
 17316  0042' 3E11               	addlw	17
 17317  0043' 0086               	movwf	6
 17318  0044' 3001               	movlw	1	; select bank2/3
 17319  0045' 0087               	movwf	7
 17320  0046' 083F'              	movf	??_setRF_DimmerLights+1,w
 17321  0047' 0081               	movwf	1
 17322                           
 17323                           ;RF_Control_B1.c: 410: if (on) {
 17324  0048' 083D'              	movf	setRF_DimmerLights@on,w
 17325  0049' 1903               	btfsc	3,2
 17326  004A' 2800'              	goto	l8139
 17327                           
 17328                           ;RF_Control_B1.c: 411: Product->Data[15]=(Product->Data[15] | status);
 17329  004B' 0800'              	movf	_Product,w
 17330  004C' 3E0F               	addlw	15
 17331  004D' 0086               	movwf	6
 17332  004E' 3001               	movlw	1	; select bank2/3
 17333  004F' 0087               	movwf	7
 17334  0050' 0801               	movf	1,w
 17335  0051' 0440'              	iorwf	setRF_DimmerLights@status,w
 17336  0052' 00BE'              	movwf	??_setRF_DimmerLights
 17337  0053' 0800'              	movf	_Product,w
 17338  0054' 3E0F               	addlw	15
 17339  0055' 0086               	movwf	6
 17340  0056' 3001               	movlw	1	; select bank2/3
 17341  0057' 0087               	movwf	7
 17342  0058' 083E'              	movf	??_setRF_DimmerLights,w
 17343  0059' 0081               	movwf	1
 17344                           
 17345                           ;RF_Control_B1.c: 412: } else {
 17346  005A' 0008               	return
 17347  005B'                    l8139:	
 17348                           
 17349                           ;RF_Control_B1.c: 413: Product->Data[15]=(Product->Data[15]&(~status));
 17350  005B' 0800'              	movf	_Product,w
 17351  005C' 3E0F               	addlw	15
 17352  005D' 0086               	movwf	6
 17353  005E' 3001               	movlw	1	; select bank2/3
 17354  005F' 0087               	movwf	7
 17355  0060' 0940'              	comf	setRF_DimmerLights@status,w
 17356  0061' 0501               	andwf	1,w
 17357  0062' 00BE'              	movwf	??_setRF_DimmerLights
 17358  0063' 0800'              	movf	_Product,w
 17359  0064' 3E0F               	addlw	15
 17360  0065' 0086               	movwf	6
 17361  0066' 3001               	movlw	1	; select bank2/3
 17362  0067' 0087               	movwf	7
 17363  0068' 083E'              	movf	??_setRF_DimmerLights,w
 17364  0069' 0081               	movwf	1
 17365  006A' 0008               	return
 17366  006B'                    __end_of_setRF_DimmerLights:	
 17367                           
 17368                           	psect	text110
 17369  0000'                    __ptext110:	
 17370 ;; *************** function _setPercentValue *****************
 17371 ;; Defined at:
 17372 ;;		line 505 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 17373 ;; Parameters:    Size  Location     Type
 17374 ;;  value           1    wreg     unsigned char 
 17375 ;; Auto vars:     Size  Location     Type
 17376 ;;  value           1   57[BANK0 ] unsigned char 
 17377 ;;  i               3   58[BANK0 ] float 
 17378 ;; Return value:  Size  Location     Type
 17379 ;;                  1    wreg      unsigned char 
 17380 ;; Registers used:
 17381 ;;		wreg, status,2, status,0, pclath, cstack
 17382 ;; Tracked objects:
 17383 ;;		On entry : 0/0
 17384 ;;		On exit  : 0/0
 17385 ;;		Unchanged: 0/0
 17386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17387 ;;      Params:         0       0       0       0       0       0       0       0
 17388 ;;      Locals:         0       4       0       0       0       0       0       0
 17389 ;;      Temps:          0       0       0       0       0       0       0       0
 17390 ;;      Totals:         0       4       0       0       0       0       0       0
 17391 ;;Total ram usage:        4 bytes
 17392 ;; Hardware stack levels used:    1
 17393 ;; Hardware stack levels required when called:    6
 17394 ;; This function calls:
 17395 ;;		___awtoft
 17396 ;;		___ftdiv
 17397 ;;		___fttol
 17398 ;; This function is called by:
 17399 ;;		_Flash_Memory_Initialization
 17400 ;;		_setRF_DimmerLights
 17401 ;; This function uses a non-reentrant model
 17402 ;;
 17403                           
 17404                           
 17405                           ;psect for function _setPercentValue
 17406  0000'                    _setPercentValue:	
 17407                           
 17408                           ;incstack = 0
 17409                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 17410                           ;setPercentValue@value stored from wreg
 17411  0000' 0020               	movlb	0	; select bank0
 17412  0001' 00B9'              	movwf	setPercentValue@value
 17413                           
 17414                           ;Dimmer_B1.c: 508: float i=((char)((100-20)*1.5))-((char)((100-55)*1.5));
 17415  0002' 3000               	movlw	0
 17416  0003' 00BA'              	movwf	setPercentValue@i
 17417  0004' 3054               	movlw	84
 17418  0005' 00BB'              	movwf	setPercentValue@i+1
 17419  0006' 3042               	movlw	66
 17420  0007' 00BC'              	movwf	setPercentValue@i+2
 17421                           
 17422                           ;Dimmer_B1.c: 509: i/=100;
 17423  0008' 3000               	movlw	0
 17424  0009' 008E'              	movwf	___ftdiv@f2
 17425  000A' 30C8               	movlw	200
 17426  000B' 008F'              	movwf	___ftdiv@f2+1
 17427  000C' 3042               	movlw	66
 17428  000D' 0090'              	movwf	___ftdiv@f2+2
 17429  000E' 083A'              	movf	setPercentValue@i,w
 17430  000F' 0091'              	movwf	___ftdiv@f1
 17431  0010' 083B'              	movf	setPercentValue@i+1,w
 17432  0011' 0092'              	movwf	___ftdiv@f1+1
 17433  0012' 083C'              	movf	setPercentValue@i+2,w
 17434  0013' 0093'              	movwf	___ftdiv@f1+2
 17435  0014' 3180' 2000' 3180'  	fcall	___ftdiv
 17436  0017' 0020               	movlb	0	; select bank0
 17437  0018' 080E'              	movf	?___ftdiv,w
 17438  0019' 00BA'              	movwf	setPercentValue@i
 17439  001A' 080F'              	movf	?___ftdiv+1,w
 17440  001B' 00BB'              	movwf	setPercentValue@i+1
 17441  001C' 0810'              	movf	?___ftdiv+2,w
 17442  001D' 00BC'              	movwf	setPercentValue@i+2
 17443                           
 17444                           ;Dimmer_B1.c: 510: return (100-(char)((value-((char)((100-55)*1.5)))/i));
 17445  001E' 0839'              	movf	setPercentValue@value,w
 17446  001F' 3EBD               	addlw	189
 17447  0020' 0088'              	movwf	___awtoft@c
 17448  0021' 30FF               	movlw	255
 17449  0022' 1803               	skipnc
 17450  0023' 3000               	movlw	0
 17451  0024' 0089'              	movwf	___awtoft@c+1
 17452  0025' 3180' 2000' 3180'  	fcall	___awtoft
 17453  0028' 0020               	movlb	0	; select bank0
 17454  0029' 0808'              	movf	?___awtoft,w
 17455  002A' 0091'              	movwf	___ftdiv@f1
 17456  002B' 0809'              	movf	?___awtoft+1,w
 17457  002C' 0092'              	movwf	___ftdiv@f1+1
 17458  002D' 080A'              	movf	?___awtoft+2,w
 17459  002E' 0093'              	movwf	___ftdiv@f1+2
 17460  002F' 083A'              	movf	setPercentValue@i,w
 17461  0030' 008E'              	movwf	___ftdiv@f2
 17462  0031' 083B'              	movf	setPercentValue@i+1,w
 17463  0032' 008F'              	movwf	___ftdiv@f2+1
 17464  0033' 083C'              	movf	setPercentValue@i+2,w
 17465  0034' 0090'              	movwf	___ftdiv@f2+2
 17466  0035' 3180' 2000' 3180'  	fcall	___ftdiv
 17467  0038' 0020               	movlb	0	; select bank0
 17468  0039' 080E'              	movf	?___ftdiv,w
 17469  003A' 00AB'              	movwf	___fttol@f1
 17470  003B' 080F'              	movf	?___ftdiv+1,w
 17471  003C' 00AC'              	movwf	___fttol@f1+1
 17472  003D' 0810'              	movf	?___ftdiv+2,w
 17473  003E' 00AD'              	movwf	___fttol@f1+2
 17474  003F' 3180' 2000'        	fcall	___fttol
 17475  0041' 0020               	movlb	0	; select bank0
 17476  0042' 032B'              	decf	?___fttol,w
 17477  0043' 3AFF               	xorlw	255
 17478  0044' 3E64               	addlw	100
 17479  0045' 0008               	return
 17480  0046'                    __end_of_setPercentValue:	
 17481                           
 17482                           	psect	text111
 17483  0000'                    __ptext111:	
 17484 ;; *************** function ___fttol *****************
 17485 ;; Defined at:
 17486 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17487 ;; Parameters:    Size  Location     Type
 17488 ;;  f1              3   43[BANK0 ] float 
 17489 ;; Auto vars:     Size  Location     Type
 17490 ;;  lval            4   52[BANK0 ] unsigned long 
 17491 ;;  exp1            1   56[BANK0 ] unsigned char 
 17492 ;;  sign1           1   51[BANK0 ] unsigned char 
 17493 ;; Return value:  Size  Location     Type
 17494 ;;                  4   43[BANK0 ] long 
 17495 ;; Registers used:
 17496 ;;		wreg, status,2, status,0
 17497 ;; Tracked objects:
 17498 ;;		On entry : 0/0
 17499 ;;		On exit  : 0/0
 17500 ;;		Unchanged: 0/0
 17501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17502 ;;      Params:         0       4       0       0       0       0       0       0
 17503 ;;      Locals:         0       6       0       0       0       0       0       0
 17504 ;;      Temps:          0       4       0       0       0       0       0       0
 17505 ;;      Totals:         0      14       0       0       0       0       0       0
 17506 ;;Total ram usage:       14 bytes
 17507 ;; Hardware stack levels used:    1
 17508 ;; Hardware stack levels required when called:    4
 17509 ;; This function calls:
 17510 ;;		Nothing
 17511 ;; This function is called by:
 17512 ;;		_getPercentValue
 17513 ;;		_setPercentValue
 17514 ;; This function uses a non-reentrant model
 17515 ;;
 17516                           
 17517                           
 17518                           ;psect for function ___fttol
 17519  0000'                    ___fttol:	
 17520                           
 17521                           ;incstack = 0
 17522                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17523  0000' 0020               	movlb	0	; select bank0
 17524  0001' 082B'              	movf	___fttol@f1,w
 17525  0002' 00AF'              	movwf	??___fttol
 17526  0003' 082C'              	movf	___fttol@f1+1,w
 17527  0004' 00B0'              	movwf	??___fttol+1
 17528  0005' 082D'              	movf	___fttol@f1+2,w
 17529  0006' 00B1'              	movwf	??___fttol+2
 17530  0007' 1003               	clrc
 17531  0008' 0D30'              	rlf	??___fttol+1,w
 17532  0009' 0D31'              	rlf	??___fttol+2,w
 17533  000A' 00B2'              	movwf	??___fttol+3
 17534  000B' 0832'              	movf	??___fttol+3,w
 17535  000C' 00B8'              	movwf	___fttol@exp1
 17536  000D' 08B8'              	movf	___fttol@exp1,f
 17537  000E' 1D03               	skipz
 17538  000F' 2800'              	goto	l5945
 17539  0010' 3000               	movlw	0
 17540  0011' 00AE'              	movwf	?___fttol+3
 17541  0012' 3000               	movlw	0
 17542  0013' 00AD'              	movwf	?___fttol+2
 17543  0014' 3000               	movlw	0
 17544  0015' 00AC'              	movwf	?___fttol+1
 17545  0016' 3000               	movlw	0
 17546  0017' 00AB'              	movwf	?___fttol
 17547  0018' 0008               	return
 17548  0019'                    l5945:	
 17549  0019' 082B'              	movf	___fttol@f1,w
 17550  001A' 00AF'              	movwf	??___fttol
 17551  001B' 082C'              	movf	___fttol@f1+1,w
 17552  001C' 00B0'              	movwf	??___fttol+1
 17553  001D' 082D'              	movf	___fttol@f1+2,w
 17554  001E' 00B1'              	movwf	??___fttol+2
 17555  001F' 3017               	movlw	23
 17556  0020'                    u4315:	
 17557  0020' 36B1'              	lsrf	??___fttol+2,f
 17558  0021' 0CB0'              	rrf	??___fttol+1,f
 17559  0022' 0CAF'              	rrf	??___fttol,f
 17560  0023' 0B89               	decfsz	9,f
 17561  0024' 2800'              	goto	u4315
 17562  0025' 082F'              	movf	??___fttol,w
 17563  0026' 00B2'              	movwf	??___fttol+3
 17564  0027' 0832'              	movf	??___fttol+3,w
 17565  0028' 00B3'              	movwf	___fttol@sign1
 17566  0029' 17AC'              	bsf	___fttol@f1+1,7
 17567  002A' 30FF               	movlw	255
 17568  002B' 05AB'              	andwf	___fttol@f1,f
 17569  002C' 30FF               	movlw	255
 17570  002D' 05AC'              	andwf	___fttol@f1+1,f
 17571  002E' 3000               	movlw	0
 17572  002F' 05AD'              	andwf	___fttol@f1+2,f
 17573  0030' 082B'              	movf	___fttol@f1,w
 17574  0031' 00B4'              	movwf	___fttol@lval
 17575  0032' 082C'              	movf	___fttol@f1+1,w
 17576  0033' 00B5'              	movwf	___fttol@lval+1
 17577  0034' 082D'              	movf	___fttol@f1+2,w
 17578  0035' 00B6'              	movwf	___fttol@lval+2
 17579  0036' 01B7'              	clrf	___fttol@lval+3
 17580  0037' 308E               	movlw	142
 17581  0038' 02B8'              	subwf	___fttol@exp1,f
 17582  0039' 1FB8'              	btfss	___fttol@exp1,7
 17583  003A' 2800'              	goto	l5965
 17584  003B' 0838'              	movf	___fttol@exp1,w
 17585  003C' 3A80               	xorlw	128
 17586  003D' 3E8F               	addlw	143
 17587  003E' 1803               	skipnc
 17588  003F' 2800'              	goto	l5963
 17589  0040' 3000               	movlw	0
 17590  0041' 00AE'              	movwf	?___fttol+3
 17591  0042' 3000               	movlw	0
 17592  0043' 00AD'              	movwf	?___fttol+2
 17593  0044' 3000               	movlw	0
 17594  0045' 00AC'              	movwf	?___fttol+1
 17595  0046' 3000               	movlw	0
 17596  0047' 00AB'              	movwf	?___fttol
 17597  0048' 0008               	return
 17598  0049'                    l5963:	
 17599  0049' 3001               	movlw	1
 17600  004A'                    u4345:	
 17601  004A' 36B7'              	lsrf	___fttol@lval+3,f
 17602  004B' 0CB6'              	rrf	___fttol@lval+2,f
 17603  004C' 0CB5'              	rrf	___fttol@lval+1,f
 17604  004D' 0CB4'              	rrf	___fttol@lval,f
 17605  004E' 0B89               	decfsz	9,f
 17606  004F' 2800'              	goto	u4345
 17607  0050' 3001               	movlw	1
 17608  0051' 00AF'              	movwf	??___fttol
 17609  0052' 082F'              	movf	??___fttol,w
 17610  0053' 07B8'              	addwf	___fttol@exp1,f
 17611  0054' 1903               	btfsc	3,2
 17612  0055' 2800'              	goto	l5975
 17613  0056' 2800'              	goto	l5963
 17614  0057'                    l5965:	
 17615  0057' 3018               	movlw	24
 17616  0058' 0238'              	subwf	___fttol@exp1,w
 17617  0059' 1C03               	skipc
 17618  005A' 2800'              	goto	l5973
 17619  005B' 3000               	movlw	0
 17620  005C' 00AE'              	movwf	?___fttol+3
 17621  005D' 3000               	movlw	0
 17622  005E' 00AD'              	movwf	?___fttol+2
 17623  005F' 3000               	movlw	0
 17624  0060' 00AC'              	movwf	?___fttol+1
 17625  0061' 3000               	movlw	0
 17626  0062' 00AB'              	movwf	?___fttol
 17627  0063' 0008               	return
 17628  0064'                    l5971:	
 17629  0064' 3001               	movlw	1
 17630  0065'                    u4375:	
 17631  0065' 35B4'              	lslf	___fttol@lval,f
 17632  0066' 0DB5'              	rlf	___fttol@lval+1,f
 17633  0067' 0DB6'              	rlf	___fttol@lval+2,f
 17634  0068' 0DB7'              	rlf	___fttol@lval+3,f
 17635  0069' 0B89               	decfsz	9,f
 17636  006A' 2800'              	goto	u4375
 17637  006B' 3001               	movlw	1
 17638  006C' 02B8'              	subwf	___fttol@exp1,f
 17639  006D'                    l5973:	
 17640  006D' 08B8'              	movf	___fttol@exp1,f
 17641  006E' 1D03               	skipz
 17642  006F' 2800'              	goto	l5971
 17643  0070'                    l5975:	
 17644  0070' 0833'              	movf	___fttol@sign1,w
 17645  0071' 1903               	btfsc	3,2
 17646  0072' 2800'              	goto	l5979
 17647  0073' 09B4'              	comf	___fttol@lval,f
 17648  0074' 09B5'              	comf	___fttol@lval+1,f
 17649  0075' 09B6'              	comf	___fttol@lval+2,f
 17650  0076' 09B7'              	comf	___fttol@lval+3,f
 17651  0077' 0AB4'              	incf	___fttol@lval,f
 17652  0078' 1903               	skipnz
 17653  0079' 0AB5'              	incf	___fttol@lval+1,f
 17654  007A' 1903               	skipnz
 17655  007B' 0AB6'              	incf	___fttol@lval+2,f
 17656  007C' 1903               	skipnz
 17657  007D' 0AB7'              	incf	___fttol@lval+3,f
 17658  007E'                    l5979:	
 17659  007E' 0837'              	movf	___fttol@lval+3,w
 17660  007F' 00AE'              	movwf	?___fttol+3
 17661  0080' 0836'              	movf	___fttol@lval+2,w
 17662  0081' 00AD'              	movwf	?___fttol+2
 17663  0082' 0835'              	movf	___fttol@lval+1,w
 17664  0083' 00AC'              	movwf	?___fttol+1
 17665  0084' 0834'              	movf	___fttol@lval,w
 17666  0085' 00AB'              	movwf	?___fttol
 17667  0086' 0008               	return
 17668  0087'                    __end_of___fttol:	
 17669                           
 17670                           	psect	text112
 17671  0000'                    __ptext112:	
 17672 ;; *************** function ___ftdiv *****************
 17673 ;; Defined at:
 17674 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;  f2              3   14[BANK0 ] float 
 17677 ;;  f1              3   17[BANK0 ] float 
 17678 ;; Auto vars:     Size  Location     Type
 17679 ;;  f3              3   25[BANK0 ] float 
 17680 ;;  sign            1   29[BANK0 ] unsigned char 
 17681 ;;  exp             1   28[BANK0 ] unsigned char 
 17682 ;;  cntr            1   24[BANK0 ] unsigned char 
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  3   14[BANK0 ] float 
 17685 ;; Registers used:
 17686 ;;		wreg, status,2, status,0, pclath, cstack
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17692 ;;      Params:         0       6       0       0       0       0       0       0
 17693 ;;      Locals:         0       6       0       0       0       0       0       0
 17694 ;;      Temps:          0       4       0       0       0       0       0       0
 17695 ;;      Totals:         0      16       0       0       0       0       0       0
 17696 ;;Total ram usage:       16 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    5
 17699 ;; This function calls:
 17700 ;;		___ftpack
 17701 ;; This function is called by:
 17702 ;;		_getPercentValue
 17703 ;;		_setPercentValue
 17704 ;; This function uses a non-reentrant model
 17705 ;;
 17706                           
 17707                           
 17708                           ;psect for function ___ftdiv
 17709  0000'                    ___ftdiv:	
 17710                           
 17711                           ;incstack = 0
 17712                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17713  0000' 0020               	movlb	0	; select bank0
 17714  0001' 0811'              	movf	___ftdiv@f1,w
 17715  0002' 0094'              	movwf	??___ftdiv
 17716  0003' 0812'              	movf	___ftdiv@f1+1,w
 17717  0004' 0095'              	movwf	??___ftdiv+1
 17718  0005' 0813'              	movf	___ftdiv@f1+2,w
 17719  0006' 0096'              	movwf	??___ftdiv+2
 17720  0007' 1003               	clrc
 17721  0008' 0D15'              	rlf	??___ftdiv+1,w
 17722  0009' 0D16'              	rlf	??___ftdiv+2,w
 17723  000A' 0097'              	movwf	??___ftdiv+3
 17724  000B' 0817'              	movf	??___ftdiv+3,w
 17725  000C' 009C'              	movwf	___ftdiv@exp
 17726  000D' 089C'              	movf	___ftdiv@exp,f
 17727  000E' 1D03               	skipz
 17728  000F' 2800'              	goto	l5853
 17729  0010' 3000               	movlw	0
 17730  0011' 008E'              	movwf	?___ftdiv
 17731  0012' 3000               	movlw	0
 17732  0013' 008F'              	movwf	?___ftdiv+1
 17733  0014' 3000               	movlw	0
 17734  0015' 0090'              	movwf	?___ftdiv+2
 17735  0016' 0008               	return
 17736  0017'                    l5853:	
 17737  0017' 080E'              	movf	___ftdiv@f2,w
 17738  0018' 0094'              	movwf	??___ftdiv
 17739  0019' 080F'              	movf	___ftdiv@f2+1,w
 17740  001A' 0095'              	movwf	??___ftdiv+1
 17741  001B' 0810'              	movf	___ftdiv@f2+2,w
 17742  001C' 0096'              	movwf	??___ftdiv+2
 17743  001D' 1003               	clrc
 17744  001E' 0D15'              	rlf	??___ftdiv+1,w
 17745  001F' 0D16'              	rlf	??___ftdiv+2,w
 17746  0020' 0097'              	movwf	??___ftdiv+3
 17747  0021' 0817'              	movf	??___ftdiv+3,w
 17748  0022' 009D'              	movwf	___ftdiv@sign
 17749  0023' 089D'              	movf	___ftdiv@sign,f
 17750  0024' 1D03               	skipz
 17751  0025' 2800'              	goto	l5859
 17752  0026' 3000               	movlw	0
 17753  0027' 008E'              	movwf	?___ftdiv
 17754  0028' 3000               	movlw	0
 17755  0029' 008F'              	movwf	?___ftdiv+1
 17756  002A' 3000               	movlw	0
 17757  002B' 0090'              	movwf	?___ftdiv+2
 17758  002C' 0008               	return
 17759  002D'                    l5859:	
 17760  002D' 3000               	movlw	0
 17761  002E' 0099'              	movwf	___ftdiv@f3
 17762  002F' 3000               	movlw	0
 17763  0030' 009A'              	movwf	___ftdiv@f3+1
 17764  0031' 3000               	movlw	0
 17765  0032' 009B'              	movwf	___ftdiv@f3+2
 17766  0033' 3089               	movlw	137
 17767  0034' 071D'              	addwf	___ftdiv@sign,w
 17768  0035' 0094'              	movwf	??___ftdiv
 17769  0036' 0814'              	movf	??___ftdiv,w
 17770  0037' 029C'              	subwf	___ftdiv@exp,f
 17771  0038' 0811'              	movf	___ftdiv@f1,w
 17772  0039' 0094'              	movwf	??___ftdiv
 17773  003A' 0812'              	movf	___ftdiv@f1+1,w
 17774  003B' 0095'              	movwf	??___ftdiv+1
 17775  003C' 0813'              	movf	___ftdiv@f1+2,w
 17776  003D' 0096'              	movwf	??___ftdiv+2
 17777  003E' 3010               	movlw	16
 17778  003F'                    u4125:	
 17779  003F' 3696'              	lsrf	??___ftdiv+2,f
 17780  0040' 0C95'              	rrf	??___ftdiv+1,f
 17781  0041' 0C94'              	rrf	??___ftdiv,f
 17782  0042' 0B89               	decfsz	9,f
 17783  0043' 2800'              	goto	u4125
 17784  0044' 0814'              	movf	??___ftdiv,w
 17785  0045' 0097'              	movwf	??___ftdiv+3
 17786  0046' 0817'              	movf	??___ftdiv+3,w
 17787  0047' 009D'              	movwf	___ftdiv@sign
 17788  0048' 080E'              	movf	___ftdiv@f2,w
 17789  0049' 0094'              	movwf	??___ftdiv
 17790  004A' 080F'              	movf	___ftdiv@f2+1,w
 17791  004B' 0095'              	movwf	??___ftdiv+1
 17792  004C' 0810'              	movf	___ftdiv@f2+2,w
 17793  004D' 0096'              	movwf	??___ftdiv+2
 17794  004E' 3010               	movlw	16
 17795  004F'                    u4135:	
 17796  004F' 3696'              	lsrf	??___ftdiv+2,f
 17797  0050' 0C95'              	rrf	??___ftdiv+1,f
 17798  0051' 0C94'              	rrf	??___ftdiv,f
 17799  0052' 0B89               	decfsz	9,f
 17800  0053' 2800'              	goto	u4135
 17801  0054' 0814'              	movf	??___ftdiv,w
 17802  0055' 0097'              	movwf	??___ftdiv+3
 17803  0056' 0817'              	movf	??___ftdiv+3,w
 17804  0057' 069D'              	xorwf	___ftdiv@sign,f
 17805  0058' 3080               	movlw	128
 17806  0059' 0094'              	movwf	??___ftdiv
 17807  005A' 0814'              	movf	??___ftdiv,w
 17808  005B' 059D'              	andwf	___ftdiv@sign,f
 17809  005C' 1792'              	bsf	___ftdiv@f1+1,7
 17810  005D' 30FF               	movlw	255
 17811  005E' 0591'              	andwf	___ftdiv@f1,f
 17812  005F' 30FF               	movlw	255
 17813  0060' 0592'              	andwf	___ftdiv@f1+1,f
 17814  0061' 3000               	movlw	0
 17815  0062' 0593'              	andwf	___ftdiv@f1+2,f
 17816  0063' 178F'              	bsf	___ftdiv@f2+1,7
 17817  0064' 30FF               	movlw	255
 17818  0065' 058E'              	andwf	___ftdiv@f2,f
 17819  0066' 30FF               	movlw	255
 17820  0067' 058F'              	andwf	___ftdiv@f2+1,f
 17821  0068' 3000               	movlw	0
 17822  0069' 0590'              	andwf	___ftdiv@f2+2,f
 17823  006A' 3018               	movlw	24
 17824  006B' 0094'              	movwf	??___ftdiv
 17825  006C' 0814'              	movf	??___ftdiv,w
 17826  006D' 0098'              	movwf	___ftdiv@cntr
 17827  006E'                    l5873:	
 17828  006E' 3001               	movlw	1
 17829  006F'                    u4145:	
 17830  006F' 3599'              	lslf	___ftdiv@f3,f
 17831  0070' 0D9A'              	rlf	___ftdiv@f3+1,f
 17832  0071' 0D9B'              	rlf	___ftdiv@f3+2,f
 17833  0072' 0B89               	decfsz	9,f
 17834  0073' 2800'              	goto	u4145
 17835  0074' 0810'              	movf	___ftdiv@f2+2,w
 17836  0075' 0213'              	subwf	___ftdiv@f1+2,w
 17837  0076' 1D03               	skipz
 17838  0077' 2800'              	goto	u4155
 17839  0078' 080F'              	movf	___ftdiv@f2+1,w
 17840  0079' 0212'              	subwf	___ftdiv@f1+1,w
 17841  007A' 1D03               	skipz
 17842  007B' 2800'              	goto	u4155
 17843  007C' 080E'              	movf	___ftdiv@f2,w
 17844  007D' 0211'              	subwf	___ftdiv@f1,w
 17845  007E'                    u4155:	
 17846  007E' 1C03               	skipc
 17847  007F' 2800'              	goto	l5881
 17848  0080' 080E'              	movf	___ftdiv@f2,w
 17849  0081' 0291'              	subwf	___ftdiv@f1,f
 17850  0082' 080F'              	movf	___ftdiv@f2+1,w
 17851  0083' 3B92'              	subwfb	___ftdiv@f1+1,f
 17852  0084' 0810'              	movf	___ftdiv@f2+2,w
 17853  0085' 3B93'              	subwfb	___ftdiv@f1+2,f
 17854  0086' 1419'              	bsf	___ftdiv@f3,0
 17855  0087'                    l5881:	
 17856  0087' 3001               	movlw	1
 17857  0088'                    u4165:	
 17858  0088' 3591'              	lslf	___ftdiv@f1,f
 17859  0089' 0D92'              	rlf	___ftdiv@f1+1,f
 17860  008A' 0D93'              	rlf	___ftdiv@f1+2,f
 17861  008B' 0B89               	decfsz	9,f
 17862  008C' 2800'              	goto	u4165
 17863  008D' 3001               	movlw	1
 17864  008E' 0298'              	subwf	___ftdiv@cntr,f
 17865  008F' 1D03               	btfss	3,2
 17866  0090' 2800'              	goto	l5873
 17867  0091' 0819'              	movf	___ftdiv@f3,w
 17868  0092' 0080'              	movwf	___ftpack@arg
 17869  0093' 081A'              	movf	___ftdiv@f3+1,w
 17870  0094' 0081'              	movwf	___ftpack@arg+1
 17871  0095' 081B'              	movf	___ftdiv@f3+2,w
 17872  0096' 0082'              	movwf	___ftpack@arg+2
 17873  0097' 081C'              	movf	___ftdiv@exp,w
 17874  0098' 0094'              	movwf	??___ftdiv
 17875  0099' 0814'              	movf	??___ftdiv,w
 17876  009A' 0083'              	movwf	___ftpack@exp
 17877  009B' 081D'              	movf	___ftdiv@sign,w
 17878  009C' 0095'              	movwf	??___ftdiv+1
 17879  009D' 0815'              	movf	??___ftdiv+1,w
 17880  009E' 0084'              	movwf	___ftpack@sign
 17881  009F' 3180' 2000'        	fcall	___ftpack
 17882  00A1' 0020               	movlb	0	; select bank0
 17883  00A2' 0800'              	movf	?___ftpack,w
 17884  00A3' 008E'              	movwf	?___ftdiv
 17885  00A4' 0801'              	movf	?___ftpack+1,w
 17886  00A5' 008F'              	movwf	?___ftdiv+1
 17887  00A6' 0802'              	movf	?___ftpack+2,w
 17888  00A7' 0090'              	movwf	?___ftdiv+2
 17889  00A8' 0008               	return
 17890  00A9'                    __end_of___ftdiv:	
 17891                           
 17892                           	psect	text113
 17893  0000'                    __ptext113:	
 17894 ;; *************** function ___awtoft *****************
 17895 ;; Defined at:
 17896 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17897 ;; Parameters:    Size  Location     Type
 17898 ;;  c               2    8[BANK0 ] int 
 17899 ;; Auto vars:     Size  Location     Type
 17900 ;;  sign            1   13[BANK0 ] unsigned char 
 17901 ;; Return value:  Size  Location     Type
 17902 ;;                  3    8[BANK0 ] float 
 17903 ;; Registers used:
 17904 ;;		wreg, status,2, status,0, pclath, cstack
 17905 ;; Tracked objects:
 17906 ;;		On entry : 0/0
 17907 ;;		On exit  : 0/0
 17908 ;;		Unchanged: 0/0
 17909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17910 ;;      Params:         0       3       0       0       0       0       0       0
 17911 ;;      Locals:         0       1       0       0       0       0       0       0
 17912 ;;      Temps:          0       2       0       0       0       0       0       0
 17913 ;;      Totals:         0       6       0       0       0       0       0       0
 17914 ;;Total ram usage:        6 bytes
 17915 ;; Hardware stack levels used:    1
 17916 ;; Hardware stack levels required when called:    5
 17917 ;; This function calls:
 17918 ;;		___ftpack
 17919 ;; This function is called by:
 17920 ;;		_getPercentValue
 17921 ;;		_setPercentValue
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           
 17926                           ;psect for function ___awtoft
 17927  0000'                    ___awtoft:	
 17928                           
 17929                           ;incstack = 0
 17930                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17931  0000' 0020               	movlb	0	; select bank0
 17932  0001' 018D'              	clrf	___awtoft@sign
 17933  0002' 1F89'              	btfss	___awtoft@c+1,7
 17934  0003' 2800'              	goto	l5771
 17935  0004' 0988'              	comf	___awtoft@c,f
 17936  0005' 0989'              	comf	___awtoft@c+1,f
 17937  0006' 0A88'              	incf	___awtoft@c,f
 17938  0007' 1903               	skipnz
 17939  0008' 0A89'              	incf	___awtoft@c+1,f
 17940  0009' 018D'              	clrf	___awtoft@sign
 17941  000A' 0A8D'              	incf	___awtoft@sign,f
 17942  000B'                    l5771:	
 17943  000B' 0808'              	movf	___awtoft@c,w
 17944  000C' 0080'              	movwf	___ftpack@arg
 17945  000D' 0809'              	movf	___awtoft@c+1,w
 17946  000E' 0081'              	movwf	___ftpack@arg+1
 17947  000F' 0182'              	clrf	___ftpack@arg+2
 17948  0010' 308E               	movlw	142
 17949  0011' 008B'              	movwf	??___awtoft
 17950  0012' 080B'              	movf	??___awtoft,w
 17951  0013' 0083'              	movwf	___ftpack@exp
 17952  0014' 080D'              	movf	___awtoft@sign,w
 17953  0015' 008C'              	movwf	??___awtoft+1
 17954  0016' 080C'              	movf	??___awtoft+1,w
 17955  0017' 0084'              	movwf	___ftpack@sign
 17956  0018' 3180' 2000'        	fcall	___ftpack
 17957  001A' 0020               	movlb	0	; select bank0
 17958  001B' 0800'              	movf	?___ftpack,w
 17959  001C' 0088'              	movwf	?___awtoft
 17960  001D' 0801'              	movf	?___ftpack+1,w
 17961  001E' 0089'              	movwf	?___awtoft+1
 17962  001F' 0802'              	movf	?___ftpack+2,w
 17963  0020' 008A'              	movwf	?___awtoft+2
 17964  0021' 0008               	return
 17965  0022'                    __end_of___awtoft:	
 17966                           
 17967                           	psect	text114
 17968  0000'                    __ptext114:	
 17969 ;; *************** function ___ftpack *****************
 17970 ;; Defined at:
 17971 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17972 ;; Parameters:    Size  Location     Type
 17973 ;;  arg             3    0[BANK0 ] unsigned um
 17974 ;;  exp             1    3[BANK0 ] unsigned char 
 17975 ;;  sign            1    4[BANK0 ] unsigned char 
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;		None
 17978 ;; Return value:  Size  Location     Type
 17979 ;;                  3    0[BANK0 ] float 
 17980 ;; Registers used:
 17981 ;;		wreg, status,2, status,0
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 17987 ;;      Params:         0       5       0       0       0       0       0       0
 17988 ;;      Locals:         0       0       0       0       0       0       0       0
 17989 ;;      Temps:          0       3       0       0       0       0       0       0
 17990 ;;      Totals:         0       8       0       0       0       0       0       0
 17991 ;;Total ram usage:        8 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; Hardware stack levels required when called:    4
 17994 ;; This function calls:
 17995 ;;		Nothing
 17996 ;; This function is called by:
 17997 ;;		___awtoft
 17998 ;;		___ftadd
 17999 ;;		___ftdiv
 18000 ;;		___ftmul
 18001 ;; This function uses a non-reentrant model
 18002 ;;
 18003                           
 18004                           
 18005                           ;psect for function ___ftpack
 18006  0000'                    ___ftpack:	
 18007                           
 18008                           ;incstack = 0
 18009                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18010  0000' 0020               	movlb	0	; select bank0
 18011  0001' 0803'              	movf	___ftpack@exp,w
 18012  0002' 1903               	btfsc	3,2
 18013  0003' 2800'              	goto	l5737
 18014  0004' 0802'              	movf	___ftpack@arg+2,w
 18015  0005' 0401'              	iorwf	___ftpack@arg+1,w
 18016  0006' 0400'              	iorwf	___ftpack@arg,w
 18017  0007' 1D03               	skipz
 18018  0008' 2800'              	goto	l5743
 18019  0009'                    l5737:	
 18020  0009' 3000               	movlw	0
 18021  000A' 0080'              	movwf	?___ftpack
 18022  000B' 3000               	movlw	0
 18023  000C' 0081'              	movwf	?___ftpack+1
 18024  000D' 3000               	movlw	0
 18025  000E' 0082'              	movwf	?___ftpack+2
 18026  000F' 0008               	return
 18027  0010'                    l5741:	
 18028  0010' 3001               	movlw	1
 18029  0011' 0085'              	movwf	??___ftpack
 18030  0012' 0805'              	movf	??___ftpack,w
 18031  0013' 0783'              	addwf	___ftpack@exp,f
 18032  0014' 3001               	movlw	1
 18033  0015'                    u3775:	
 18034  0015' 3682'              	lsrf	___ftpack@arg+2,f
 18035  0016' 0C81'              	rrf	___ftpack@arg+1,f
 18036  0017' 0C80'              	rrf	___ftpack@arg,f
 18037  0018' 0B89               	decfsz	9,f
 18038  0019' 2800'              	goto	u3775
 18039  001A'                    l5743:	
 18040  001A' 30FE               	movlw	254
 18041  001B' 0502'              	andwf	___ftpack@arg+2,w
 18042  001C' 1903               	btfsc	3,2
 18043  001D' 2800'              	goto	l3155
 18044  001E' 2800'              	goto	l5741
 18045  001F'                    l5745:	
 18046  001F' 3001               	movlw	1
 18047  0020' 0085'              	movwf	??___ftpack
 18048  0021' 0805'              	movf	??___ftpack,w
 18049  0022' 0783'              	addwf	___ftpack@exp,f
 18050  0023' 3001               	movlw	1
 18051  0024' 0780'              	addwf	___ftpack@arg,f
 18052  0025' 3000               	movlw	0
 18053  0026' 1803               	skipnc
 18054  0027' 3001               	movlw	1
 18055  0028' 0781'              	addwf	___ftpack@arg+1,f
 18056  0029' 3000               	movlw	0
 18057  002A' 1803               	skipnc
 18058  002B' 3001               	movlw	1
 18059  002C' 0782'              	addwf	___ftpack@arg+2,f
 18060  002D' 3001               	movlw	1
 18061  002E'                    u3795:	
 18062  002E' 3682'              	lsrf	___ftpack@arg+2,f
 18063  002F' 0C81'              	rrf	___ftpack@arg+1,f
 18064  0030' 0C80'              	rrf	___ftpack@arg,f
 18065  0031' 0B89               	decfsz	9,f
 18066  0032' 2800'              	goto	u3795
 18067  0033'                    l3155:	
 18068  0033' 30FF               	movlw	255
 18069  0034' 0502'              	andwf	___ftpack@arg+2,w
 18070  0035' 1903               	btfsc	3,2
 18071  0036' 2800'              	goto	l5753
 18072  0037' 2800'              	goto	l5745
 18073  0038'                    l5751:	
 18074  0038' 3001               	movlw	1
 18075  0039' 0283'              	subwf	___ftpack@exp,f
 18076  003A' 3001               	movlw	1
 18077  003B'                    u3815:	
 18078  003B' 3580'              	lslf	___ftpack@arg,f
 18079  003C' 0D81'              	rlf	___ftpack@arg+1,f
 18080  003D' 0D82'              	rlf	___ftpack@arg+2,f
 18081  003E' 0B89               	decfsz	9,f
 18082  003F' 2800'              	goto	u3815
 18083  0040'                    l5753:	
 18084  0040' 1F81'              	btfss	___ftpack@arg+1,7
 18085  0041' 2800'              	goto	l5751
 18086  0042' 1803'              	btfsc	___ftpack@exp,0
 18087  0043' 2800'              	goto	l3161
 18088  0044' 30FF               	movlw	255
 18089  0045' 0580'              	andwf	___ftpack@arg,f
 18090  0046' 307F               	movlw	127
 18091  0047' 0581'              	andwf	___ftpack@arg+1,f
 18092  0048' 30FF               	movlw	255
 18093  0049' 0582'              	andwf	___ftpack@arg+2,f
 18094  004A'                    l3161:	
 18095  004A' 1003               	clrc
 18096  004B' 0C83'              	rrf	___ftpack@exp,f
 18097  004C' 0803'              	movf	___ftpack@exp,w
 18098  004D' 0085'              	movwf	??___ftpack
 18099  004E' 0186'              	clrf	??___ftpack+1
 18100  004F' 0187'              	clrf	??___ftpack+2
 18101  0050' 3010               	movlw	16
 18102  0051'                    u3845:	
 18103  0051' 3585'              	lslf	??___ftpack,f
 18104  0052' 0D86'              	rlf	??___ftpack+1,f
 18105  0053' 0D87'              	rlf	??___ftpack+2,f
 18106  0054' 0B89               	decfsz	9,f
 18107  0055' 2800'              	goto	u3845
 18108  0056' 0805'              	movf	??___ftpack,w
 18109  0057' 0480'              	iorwf	___ftpack@arg,f
 18110  0058' 0806'              	movf	??___ftpack+1,w
 18111  0059' 0481'              	iorwf	___ftpack@arg+1,f
 18112  005A' 0807'              	movf	??___ftpack+2,w
 18113  005B' 0482'              	iorwf	___ftpack@arg+2,f
 18114  005C' 0804'              	movf	___ftpack@sign,w
 18115  005D' 1903               	btfsc	3,2
 18116  005E' 0008               	return
 18117  005F' 1782'              	bsf	___ftpack@arg+2,7
 18118  0060' 0008               	return
 18119  0061'                    __end_of___ftpack:	
 18120                           
 18121                           	psect	text115
 18122  0000'                    __ptext115:	
 18123 ;; *************** function _setRFSW_Status *****************
 18124 ;; Defined at:
 18125 ;;		line 380 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 18126 ;; Parameters:    Size  Location     Type
 18127 ;;  sw              1    wreg     unsigned char 
 18128 ;;  command         1    2[BANK0 ] unsigned char 
 18129 ;; Auto vars:     Size  Location     Type
 18130 ;;  sw              1    3[BANK0 ] unsigned char 
 18131 ;; Return value:  Size  Location     Type
 18132 ;;		None               void
 18133 ;; Registers used:
 18134 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18135 ;; Tracked objects:
 18136 ;;		On entry : 0/0
 18137 ;;		On exit  : 0/0
 18138 ;;		Unchanged: 0/0
 18139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18140 ;;      Params:         0       1       0       0       0       0       0       0
 18141 ;;      Locals:         0       1       0       0       0       0       0       0
 18142 ;;      Temps:          0       0       0       0       0       0       0       0
 18143 ;;      Totals:         0       2       0       0       0       0       0       0
 18144 ;;Total ram usage:        2 bytes
 18145 ;; Hardware stack levels used:    1
 18146 ;; Hardware stack levels required when called:    5
 18147 ;; This function calls:
 18148 ;;		_RfSWPointSelect
 18149 ;; This function is called by:
 18150 ;;		_DlyOff_Main
 18151 ;;		_setDimmerLights_ERROR
 18152 ;;		_setControl_Lights_Table
 18153 ;;		_Sw_DimmerOnFunc
 18154 ;;		_Sw_DimmerAdjFunc
 18155 ;; This function uses a non-reentrant model
 18156 ;;
 18157                           
 18158                           
 18159                           ;psect for function _setRFSW_Status
 18160  0000'                    _setRFSW_Status:	
 18161                           
 18162                           ;incstack = 0
 18163                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18164                           ;setRFSW_Status@sw stored from wreg
 18165  0000' 0020               	movlb	0	; select bank0
 18166  0001' 0083'              	movwf	setRFSW_Status@sw
 18167                           
 18168                           ;RF_Control_B1.c: 381: RfSWPointSelect(sw);
 18169  0002' 0803'              	movf	setRFSW_Status@sw,w
 18170  0003' 3180' 2000'        	fcall	_RfSWPointSelect
 18171                           
 18172                           ;RF_Control_B1.c: 382: RFSW->Status = command;
 18173  0005' 0021               	movlb	1	; select bank1
 18174  0006' 0800'              	movf	_RFSW^(0+128),w
 18175  0007' 0086               	movwf	6
 18176  0008' 0187               	clrf	7
 18177  0009' 0020               	movlb	0	; select bank0
 18178  000A' 0802'              	movf	setRFSW_Status@command,w
 18179  000B' 1001               	bcf	1,0
 18180  000C' 1D03               	skipz
 18181  000D' 1401               	bsf	1,0
 18182  000E' 0008               	return
 18183  000F'                    __end_of_setRFSW_Status:	
 18184                           
 18185                           	psect	text116
 18186  0000'                    __ptext116:	
 18187 ;; *************** function _RfSWPointSelect *****************
 18188 ;; Defined at:
 18189 ;;		line 315 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 18190 ;; Parameters:    Size  Location     Type
 18191 ;;  sw              1    wreg     unsigned char 
 18192 ;; Auto vars:     Size  Location     Type
 18193 ;;  sw              1    1[BANK0 ] unsigned char 
 18194 ;; Return value:  Size  Location     Type
 18195 ;;		None               void
 18196 ;; Registers used:
 18197 ;;		wreg
 18198 ;; Tracked objects:
 18199 ;;		On entry : 0/0
 18200 ;;		On exit  : 0/0
 18201 ;;		Unchanged: 0/0
 18202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18203 ;;      Params:         0       0       0       0       0       0       0       0
 18204 ;;      Locals:         0       1       0       0       0       0       0       0
 18205 ;;      Temps:          0       1       0       0       0       0       0       0
 18206 ;;      Totals:         0       2       0       0       0       0       0       0
 18207 ;;Total ram usage:        2 bytes
 18208 ;; Hardware stack levels used:    1
 18209 ;; Hardware stack levels required when called:    4
 18210 ;; This function calls:
 18211 ;;		Nothing
 18212 ;; This function is called by:
 18213 ;;		_setRFSW_Control
 18214 ;;		_setRFSW_AdjControl
 18215 ;;		_setRFSW_Status
 18216 ;; This function uses a non-reentrant model
 18217 ;;
 18218                           
 18219                           
 18220                           ;psect for function _RfSWPointSelect
 18221  0000'                    _RfSWPointSelect:	
 18222                           
 18223                           ;incstack = 0
 18224                           ; Regs used in _RfSWPointSelect: [wreg]
 18225                           ;RfSWPointSelect@sw stored from wreg
 18226  0000' 0020               	movlb	0	; select bank0
 18227  0001' 0081'              	movwf	RfSWPointSelect@sw
 18228                           
 18229                           ;RF_Control_B1.c: 317: if (sw == 1) {
 18230  0002' 0801'              	movf	RfSWPointSelect@sw,w
 18231  0003' 3A01               	xorlw	1
 18232  0004' 1D03               	skipz
 18233  0005' 0008               	return
 18234                           
 18235                           ;RF_Control_B1.c: 318: RFSW = &RFSW1;
 18236  0006' 3000'              	movlw	_RFSW1& (0+255)
 18237  0007' 0080'              	movwf	??_RfSWPointSelect
 18238  0008' 0800'              	movf	??_RfSWPointSelect,w
 18239  0009' 0021               	movlb	1	; select bank1
 18240  000A' 0080'              	movwf	_RFSW^(0+128)
 18241  000B' 0008               	return
 18242  000C'                    __end_of_RfSWPointSelect:	
 18243                           
 18244                           	psect	text117
 18245  0000'                    __ptext117:	
 18246 ;; *************** function _setDimmerLights_Trigger *****************
 18247 ;; Defined at:
 18248 ;;		line 445 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18249 ;; Parameters:    Size  Location     Type
 18250 ;;  lights          1    wreg     unsigned char 
 18251 ;;  command         1    2[BANK0 ] unsigned char 
 18252 ;; Auto vars:     Size  Location     Type
 18253 ;;  lights          1    3[BANK0 ] unsigned char 
 18254 ;; Return value:  Size  Location     Type
 18255 ;;		None               void
 18256 ;; Registers used:
 18257 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18258 ;; Tracked objects:
 18259 ;;		On entry : 0/0
 18260 ;;		On exit  : 0/0
 18261 ;;		Unchanged: 0/0
 18262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18263 ;;      Params:         0       1       0       0       0       0       0       0
 18264 ;;      Locals:         0       1       0       0       0       0       0       0
 18265 ;;      Temps:          0       0       0       0       0       0       0       0
 18266 ;;      Totals:         0       2       0       0       0       0       0       0
 18267 ;;Total ram usage:        2 bytes
 18268 ;; Hardware stack levels used:    1
 18269 ;; Hardware stack levels required when called:    5
 18270 ;; This function calls:
 18271 ;;		_DimmerLightsPointSelect
 18272 ;; This function is called by:
 18273 ;;		_DlyOff_Main
 18274 ;;		_setRFSW_Control
 18275 ;;		_Sw_DimmerOnFunc
 18276 ;;		_Sw_DimmerOffFunc
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           
 18281                           ;psect for function _setDimmerLights_Trigger
 18282  0000'                    _setDimmerLights_Trigger:	
 18283                           
 18284                           ;incstack = 0
 18285                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18286                           ;setDimmerLights_Trigger@lights stored from wreg
 18287  0000' 0020               	movlb	0	; select bank0
 18288  0001' 0083'              	movwf	setDimmerLights_Trigger@lights
 18289                           
 18290                           ;Dimmer_B1.c: 447: DimmerLightsPointSelect(lights);
 18291  0002' 0803'              	movf	setDimmerLights_Trigger@lights,w
 18292  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
 18293                           
 18294                           ;Dimmer_B1.c: 448: DimmerLights->Trigger=command;
 18295  0005' 0800'              	movf	_DimmerLights,w
 18296  0006' 3E09               	addlw	9
 18297  0007' 0086               	movwf	6
 18298  0008' 3001               	movlw	1	; select bank2/3
 18299  0009' 0087               	movwf	7
 18300  000A' 0020               	movlb	0	; select bank0
 18301  000B' 0802'              	movf	setDimmerLights_Trigger@command,w
 18302  000C' 1081               	bcf	1,1
 18303  000D' 1D03               	skipz
 18304  000E' 1481               	bsf	1,1
 18305  000F' 0008               	return
 18306  0010'                    __end_of_setDimmerLights_Trigger:	
 18307                           
 18308                           	psect	text118
 18309  0000'                    __ptext118:	
 18310 ;; *************** function _setDimmerLights_Switch *****************
 18311 ;; Defined at:
 18312 ;;		line 435 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18313 ;; Parameters:    Size  Location     Type
 18314 ;;  lights          1    wreg     unsigned char 
 18315 ;;  command         1    2[BANK0 ] unsigned char 
 18316 ;; Auto vars:     Size  Location     Type
 18317 ;;  lights          1    3[BANK0 ] unsigned char 
 18318 ;; Return value:  Size  Location     Type
 18319 ;;		None               void
 18320 ;; Registers used:
 18321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18322 ;; Tracked objects:
 18323 ;;		On entry : 0/0
 18324 ;;		On exit  : 0/0
 18325 ;;		Unchanged: 0/0
 18326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18327 ;;      Params:         0       1       0       0       0       0       0       0
 18328 ;;      Locals:         0       1       0       0       0       0       0       0
 18329 ;;      Temps:          0       0       0       0       0       0       0       0
 18330 ;;      Totals:         0       2       0       0       0       0       0       0
 18331 ;;Total ram usage:        2 bytes
 18332 ;; Hardware stack levels used:    1
 18333 ;; Hardware stack levels required when called:    5
 18334 ;; This function calls:
 18335 ;;		_DimmerLightsPointSelect
 18336 ;; This function is called by:
 18337 ;;		_DlyOff_Main
 18338 ;;		_setRFSW_Control
 18339 ;;		_Sw_DimmerOnFunc
 18340 ;;		_Sw_DimmerOffFunc
 18341 ;; This function uses a non-reentrant model
 18342 ;;
 18343                           
 18344                           
 18345                           ;psect for function _setDimmerLights_Switch
 18346  0000'                    _setDimmerLights_Switch:	
 18347                           
 18348                           ;incstack = 0
 18349                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18350                           ;setDimmerLights_Switch@lights stored from wreg
 18351  0000' 0020               	movlb	0	; select bank0
 18352  0001' 0083'              	movwf	setDimmerLights_Switch@lights
 18353                           
 18354                           ;Dimmer_B1.c: 437: DimmerLightsPointSelect(lights);
 18355  0002' 0803'              	movf	setDimmerLights_Switch@lights,w
 18356  0003' 3180' 2000'        	fcall	_DimmerLightsPointSelect
 18357                           
 18358                           ;Dimmer_B1.c: 438: DimmerLights->Switch=command;
 18359  0005' 0800'              	movf	_DimmerLights,w
 18360  0006' 3E09               	addlw	9
 18361  0007' 0086               	movwf	6
 18362  0008' 3001               	movlw	1	; select bank2/3
 18363  0009' 0087               	movwf	7
 18364  000A' 0020               	movlb	0	; select bank0
 18365  000B' 0802'              	movf	setDimmerLights_Switch@command,w
 18366  000C' 1001               	bcf	1,0
 18367  000D' 1D03               	skipz
 18368  000E' 1401               	bsf	1,0
 18369  000F' 0008               	return
 18370  0010'                    __end_of_setDimmerLights_Switch:	
 18371                           
 18372                           	psect	text119
 18373  0000'                    __ptext119:	
 18374 ;; *************** function _DimmerLightsPointSelect *****************
 18375 ;; Defined at:
 18376 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Dimmer_B1.c"
 18377 ;; Parameters:    Size  Location     Type
 18378 ;;  lights          1    wreg     unsigned char 
 18379 ;; Auto vars:     Size  Location     Type
 18380 ;;  lights          1    1[BANK0 ] unsigned char 
 18381 ;; Return value:  Size  Location     Type
 18382 ;;		None               void
 18383 ;; Registers used:
 18384 ;;		wreg
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18390 ;;      Params:         0       0       0       0       0       0       0       0
 18391 ;;      Locals:         0       1       0       0       0       0       0       0
 18392 ;;      Temps:          0       1       0       0       0       0       0       0
 18393 ;;      Totals:         0       2       0       0       0       0       0       0
 18394 ;;Total ram usage:        2 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    4
 18397 ;; This function calls:
 18398 ;;		Nothing
 18399 ;; This function is called by:
 18400 ;;		_setDimmerLights_Initialization
 18401 ;;		_setDimmerLights_Main
 18402 ;;		_setDimmerLights_ERROR
 18403 ;;		_setDimmerLights_TriggerERROR
 18404 ;;		_setDimmerLights
 18405 ;;		_setDimmerLights_Adj
 18406 ;;		_setDimmerLights_AdjRF
 18407 ;;		_setDimmerLights_Switch
 18408 ;;		_setDimmerLights_AdjGo
 18409 ;;		_setDimmerLights_Trigger
 18410 ;;		_setDimmerLights_TriggerAdj
 18411 ;;		_setDimmerLights_Clear
 18412 ;;		_setDimmerLights_GO
 18413 ;;		_setDimmerLights_MaxmumValue
 18414 ;; This function uses a non-reentrant model
 18415 ;;
 18416                           
 18417                           
 18418                           ;psect for function _DimmerLightsPointSelect
 18419  0000'                    _DimmerLightsPointSelect:	
 18420                           
 18421                           ;incstack = 0
 18422                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 18423                           ;DimmerLightsPointSelect@lights stored from wreg
 18424  0000' 0020               	movlb	0	; select bank0
 18425  0001' 0081'              	movwf	DimmerLightsPointSelect@lights
 18426                           
 18427                           ;Dimmer_B1.c: 10: if(lights == 1)
 18428  0002' 0801'              	movf	DimmerLightsPointSelect@lights,w
 18429  0003' 3A01               	xorlw	1
 18430  0004' 1D03               	skipz
 18431  0005' 0008               	return
 18432                           
 18433                           ;Dimmer_B1.c: 11: {
 18434                           ;Dimmer_B1.c: 12: DimmerLights=&DimmerLights1;
 18435  0006' 3000'              	movlw	_DimmerLights1& (0+255)
 18436  0007' 0080'              	movwf	??_DimmerLightsPointSelect
 18437  0008' 0800'              	movf	??_DimmerLightsPointSelect,w
 18438  0009' 0080'              	movwf	_DimmerLights
 18439  000A' 0008               	return
 18440  000B'                    __end_of_DimmerLightsPointSelect:	
 18441                           
 18442                           	psect	text120
 18443  0000'                    __ptext120:	
 18444 ;; *************** function _setBuz *****************
 18445 ;; Defined at:
 18446 ;;		line 23 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 18447 ;; Parameters:    Size  Location     Type
 18448 ;;  count           1    wreg     unsigned char 
 18449 ;;  time            2    6[BANK0 ] int 
 18450 ;; Auto vars:     Size  Location     Type
 18451 ;;  count           1    9[BANK0 ] unsigned char 
 18452 ;; Return value:  Size  Location     Type
 18453 ;;		None               void
 18454 ;; Registers used:
 18455 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18456 ;; Tracked objects:
 18457 ;;		On entry : 0/0
 18458 ;;		On exit  : 0/0
 18459 ;;		Unchanged: 0/0
 18460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18461 ;;      Params:         0       2       0       0       0       0       0       0
 18462 ;;      Locals:         0       1       0       0       0       0       0       0
 18463 ;;      Temps:          0       1       0       0       0       0       0       0
 18464 ;;      Totals:         0       4       0       0       0       0       0       0
 18465 ;;Total ram usage:        4 bytes
 18466 ;; Hardware stack levels used:    1
 18467 ;; Hardware stack levels required when called:    5
 18468 ;; This function calls:
 18469 ;;		___wmul
 18470 ;; This function is called by:
 18471 ;;		_DlyOff_Main
 18472 ;;		_setDimmerLights_Main
 18473 ;;		_DimmerLights_Exceptions
 18474 ;;		_setOverTemp_Exceptions
 18475 ;;		_setLog_Code
 18476 ;;		_setControl_Lights_Table
 18477 ;;		_setRFSW_Control
 18478 ;;		_setSw_Main
 18479 ;;		_Sw_DimmerOnFunc
 18480 ;;		_my_Main
 18481 ;; This function uses a non-reentrant model
 18482 ;;
 18483                           
 18484                           
 18485                           ;psect for function _setBuz
 18486  0000'                    _setBuz:	
 18487                           
 18488                           ;incstack = 0
 18489                           ; Regs used in _setBuz: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18490                           ;setBuz@count stored from wreg
 18491  0000' 0020               	movlb	0	; select bank0
 18492  0001' 0089'              	movwf	setBuz@count
 18493                           
 18494                           ;Buzzer_B1.c: 24: time *= 20;
 18495  0002' 3014               	movlw	20
 18496  0003' 0080'              	movwf	___wmul@multiplier
 18497  0004' 3000               	movlw	0
 18498  0005' 0081'              	movwf	___wmul@multiplier+1
 18499  0006' 0807'              	movf	setBuz@time+1,w
 18500  0007' 0183'              	clrf	___wmul@multiplicand+1
 18501  0008' 0783'              	addwf	___wmul@multiplicand+1,f
 18502  0009' 0806'              	movf	setBuz@time,w
 18503  000A' 0182'              	clrf	___wmul@multiplicand
 18504  000B' 0782'              	addwf	___wmul@multiplicand,f
 18505  000C' 3180' 2000' 3180'  	fcall	___wmul
 18506  000F' 0020               	movlb	0	; select bank0
 18507  0010' 0801'              	movf	?___wmul+1,w
 18508  0011' 0187'              	clrf	setBuz@time+1
 18509  0012' 0787'              	addwf	setBuz@time+1,f
 18510  0013' 0800'              	movf	?___wmul,w
 18511  0014' 0186'              	clrf	setBuz@time
 18512  0015' 0786'              	addwf	setBuz@time,f
 18513                           
 18514                           ;Buzzer_B1.c: 25: if (Buz->Enable) {
 18515  0016' 0021               	movlb	1	; select bank1
 18516  0017' 0800'              	movf	_Buz^(0+128),w
 18517  0018' 0086               	movwf	6
 18518  0019' 3001               	movlw	1	; select bank2/3
 18519  001A' 0087               	movwf	7
 18520  001B' 1C01               	btfss	1,0
 18521  001C' 0008               	return
 18522                           
 18523                           ;Buzzer_B1.c: 26: if (!Buz->GO) {
 18524  001D' 0800'              	movf	_Buz^(0+128),w
 18525  001E' 0086               	movwf	6
 18526  001F' 3001               	movlw	1	; select bank2/3
 18527  0020' 0087               	movwf	7
 18528  0021' 1881               	btfsc	1,1
 18529  0022' 2800'              	goto	l8107
 18530                           
 18531                           ;Buzzer_B1.c: 27: Buz->GO = 1;
 18532  0023' 0800'              	movf	_Buz^(0+128),w
 18533  0024' 0086               	movwf	6
 18534  0025' 3001               	movlw	1	; select bank2/3
 18535  0026' 0087               	movwf	7
 18536  0027' 1481               	bsf	1,1
 18537                           
 18538                           ;Buzzer_B1.c: 28: Buz->Count = count;
 18539  0028' 0020               	movlb	0	; select bank0
 18540  0029' 0809'              	movf	setBuz@count,w
 18541  002A' 0088'              	movwf	??_setBuz
 18542  002B' 0021               	movlb	1	; select bank1
 18543  002C' 0800'              	movf	_Buz^(0+128),w
 18544  002D' 3E03               	addlw	3
 18545  002E' 0086               	movwf	6
 18546  002F' 3001               	movlw	1	; select bank2/3
 18547  0030' 0087               	movwf	7
 18548  0031' 0020               	movlb	0	; select bank0
 18549  0032' 0808'              	movf	??_setBuz,w
 18550  0033' 0081               	movwf	1
 18551                           
 18552                           ;Buzzer_B1.c: 29: Buz->TimeValue = time;
 18553  0034' 0021               	movlb	1	; select bank1
 18554  0035' 0800'              	movf	_Buz^(0+128),w
 18555  0036' 3E06               	addlw	6
 18556  0037' 0086               	movwf	6
 18557  0038' 3001               	movlw	1	; select bank2/3
 18558  0039' 0087               	movwf	7
 18559  003A' 0020               	movlb	0	; select bank0
 18560  003B' 0806'              	movf	setBuz@time,w
 18561  003C' 3FC0               	movwi [0]fsr1
 18562  003D' 0807'              	movf	setBuz@time+1,w
 18563  003E' 3FC1               	movwi [1]fsr1
 18564                           
 18565                           ;Buzzer_B1.c: 31: RB3 = 1;
 18566  003F' 158D               	bsf	13,3	;volatile
 18567                           
 18568                           ;Buzzer_B1.c: 32: } else {
 18569  0040' 0008               	return
 18570  0041'                    l8107:	
 18571                           
 18572                           ;Buzzer_B1.c: 33: if (!Buz->BufferStatus1) {
 18573  0041' 0021               	movlb	1	; select bank1
 18574  0042' 0800'              	movf	_Buz^(0+128),w
 18575  0043' 0086               	movwf	6
 18576  0044' 3001               	movlw	1	; select bank2/3
 18577  0045' 0087               	movwf	7
 18578  0046' 1981               	btfsc	1,3
 18579  0047' 2800'              	goto	l8111
 18580                           
 18581                           ;Buzzer_B1.c: 34: Buz->BufferStatus1 = 1;
 18582  0048' 0800'              	movf	_Buz^(0+128),w
 18583  0049' 0086               	movwf	6
 18584  004A' 3001               	movlw	1	; select bank2/3
 18585  004B' 0087               	movwf	7
 18586  004C' 1581               	bsf	1,3
 18587                           
 18588                           ;Buzzer_B1.c: 35: Buz->CountBuffer1 = count;
 18589  004D' 0020               	movlb	0	; select bank0
 18590  004E' 0809'              	movf	setBuz@count,w
 18591  004F' 0088'              	movwf	??_setBuz
 18592  0050' 0021               	movlb	1	; select bank1
 18593  0051' 0800'              	movf	_Buz^(0+128),w
 18594  0052' 3E04               	addlw	4
 18595  0053' 0086               	movwf	6
 18596  0054' 3001               	movlw	1	; select bank2/3
 18597  0055' 0087               	movwf	7
 18598  0056' 0020               	movlb	0	; select bank0
 18599  0057' 0808'              	movf	??_setBuz,w
 18600  0058' 0081               	movwf	1
 18601                           
 18602                           ;Buzzer_B1.c: 36: Buz->TimeValueBuffer1 = time;
 18603  0059' 0021               	movlb	1	; select bank1
 18604  005A' 0800'              	movf	_Buz^(0+128),w
 18605  005B' 3E08               	addlw	8
 18606  005C' 0086               	movwf	6
 18607  005D' 3001               	movlw	1	; select bank2/3
 18608  005E' 0087               	movwf	7
 18609  005F' 0020               	movlb	0	; select bank0
 18610  0060' 0806'              	movf	setBuz@time,w
 18611  0061' 3FC0               	movwi [0]fsr1
 18612  0062' 0807'              	movf	setBuz@time+1,w
 18613  0063' 3FC1               	movwi [1]fsr1
 18614                           
 18615                           ;Buzzer_B1.c: 37: } else if (!Buz->BufferStatus2) {
 18616  0064' 0008               	return
 18617  0065'                    l8111:	
 18618  0065' 0021               	movlb	1	; select bank1
 18619  0066' 0800'              	movf	_Buz^(0+128),w
 18620  0067' 0086               	movwf	6
 18621  0068' 3001               	movlw	1	; select bank2/3
 18622  0069' 0087               	movwf	7
 18623  006A' 1A01               	btfsc	1,4
 18624  006B' 0008               	return
 18625                           
 18626                           ;Buzzer_B1.c: 38: Buz->BufferStatus2 = 1;
 18627  006C' 0800'              	movf	_Buz^(0+128),w
 18628  006D' 0086               	movwf	6
 18629  006E' 3001               	movlw	1	; select bank2/3
 18630  006F' 0087               	movwf	7
 18631  0070' 1601               	bsf	1,4
 18632                           
 18633                           ;Buzzer_B1.c: 39: Buz->CountBuffer2 = count;
 18634  0071' 0020               	movlb	0	; select bank0
 18635  0072' 0809'              	movf	setBuz@count,w
 18636  0073' 0088'              	movwf	??_setBuz
 18637  0074' 0021               	movlb	1	; select bank1
 18638  0075' 0800'              	movf	_Buz^(0+128),w
 18639  0076' 3E05               	addlw	5
 18640  0077' 0086               	movwf	6
 18641  0078' 3001               	movlw	1	; select bank2/3
 18642  0079' 0087               	movwf	7
 18643  007A' 0020               	movlb	0	; select bank0
 18644  007B' 0808'              	movf	??_setBuz,w
 18645  007C' 0081               	movwf	1
 18646                           
 18647                           ;Buzzer_B1.c: 40: Buz->TimeValueBuffer2 = time;
 18648  007D' 0021               	movlb	1	; select bank1
 18649  007E' 0800'              	movf	_Buz^(0+128),w
 18650  007F' 3E0A               	addlw	10
 18651  0080' 0086               	movwf	6
 18652  0081' 3001               	movlw	1	; select bank2/3
 18653  0082' 0087               	movwf	7
 18654  0083' 0020               	movlb	0	; select bank0
 18655  0084' 0806'              	movf	setBuz@time,w
 18656  0085' 3FC0               	movwi [0]fsr1
 18657  0086' 0807'              	movf	setBuz@time+1,w
 18658  0087' 3FC1               	movwi [1]fsr1
 18659  0088' 0008               	return
 18660  0089'                    __end_of_setBuz:	
 18661                           
 18662                           	psect	text121
 18663  0000'                    __ptext121:	
 18664 ;; *************** function ___wmul *****************
 18665 ;; Defined at:
 18666 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 18667 ;; Parameters:    Size  Location     Type
 18668 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18669 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18670 ;; Auto vars:     Size  Location     Type
 18671 ;;  product         2    4[BANK0 ] unsigned int 
 18672 ;; Return value:  Size  Location     Type
 18673 ;;                  2    0[BANK0 ] unsigned int 
 18674 ;; Registers used:
 18675 ;;		wreg, status,2, status,0
 18676 ;; Tracked objects:
 18677 ;;		On entry : 0/0
 18678 ;;		On exit  : 0/0
 18679 ;;		Unchanged: 0/0
 18680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18681 ;;      Params:         0       4       0       0       0       0       0       0
 18682 ;;      Locals:         0       2       0       0       0       0       0       0
 18683 ;;      Temps:          0       0       0       0       0       0       0       0
 18684 ;;      Totals:         0       6       0       0       0       0       0       0
 18685 ;;Total ram usage:        6 bytes
 18686 ;; Hardware stack levels used:    1
 18687 ;; Hardware stack levels required when called:    4
 18688 ;; This function calls:
 18689 ;;		Nothing
 18690 ;; This function is called by:
 18691 ;;		_setBuz
 18692 ;;		_Load_Main
 18693 ;; This function uses a non-reentrant model
 18694 ;;
 18695                           
 18696                           
 18697                           ;psect for function ___wmul
 18698  0000'                    ___wmul:	
 18699                           
 18700                           ;incstack = 0
 18701                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 18702  0000' 0020               	movlb	0	; select bank0
 18703  0001' 0184'              	clrf	___wmul@product
 18704  0002' 0185'              	clrf	___wmul@product+1
 18705  0003'                    l8087:	
 18706  0003' 1C00'              	btfss	___wmul@multiplier,0
 18707  0004' 2800'              	goto	l2994
 18708  0005' 0802'              	movf	___wmul@multiplicand,w
 18709  0006' 0784'              	addwf	___wmul@product,f
 18710  0007' 0803'              	movf	___wmul@multiplicand+1,w
 18711  0008' 3D85'              	addwfc	___wmul@product+1,f
 18712  0009'                    l2994:	
 18713  0009' 3001               	movlw	1
 18714  000A'                    u7505:	
 18715  000A' 3582'              	lslf	___wmul@multiplicand,f
 18716  000B' 0D83'              	rlf	___wmul@multiplicand+1,f
 18717  000C' 0B89               	decfsz	9,f
 18718  000D' 2800'              	goto	u7505
 18719  000E' 3001               	movlw	1
 18720  000F'                    u7515:	
 18721  000F' 3681'              	lsrf	___wmul@multiplier+1,f
 18722  0010' 0C80'              	rrf	___wmul@multiplier,f
 18723  0011' 0B89               	decfsz	9,f
 18724  0012' 2800'              	goto	u7515
 18725  0013' 0801'              	movf	___wmul@multiplier+1,w
 18726  0014' 0400'              	iorwf	___wmul@multiplier,w
 18727  0015' 1D03               	skipz
 18728  0016' 2800'              	goto	l8087
 18729  0017' 0805'              	movf	___wmul@product+1,w
 18730  0018' 0181'              	clrf	?___wmul+1
 18731  0019' 0781'              	addwf	?___wmul+1,f
 18732  001A' 0804'              	movf	___wmul@product,w
 18733  001B' 0180'              	clrf	?___wmul
 18734  001C' 0780'              	addwf	?___wmul,f
 18735  001D' 0008               	return
 18736  001E'                    __end_of___wmul:	
 18737                           
 18738                           	psect	text122
 18739  0000'                    __ptext122:	
 18740 ;; *************** function _DelayOff_Initialization *****************
 18741 ;; Defined at:
 18742 ;;		line 30 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18743 ;; Parameters:    Size  Location     Type
 18744 ;;		None
 18745 ;; Auto vars:     Size  Location     Type
 18746 ;;		None
 18747 ;; Return value:  Size  Location     Type
 18748 ;;		None               void
 18749 ;; Registers used:
 18750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18751 ;; Tracked objects:
 18752 ;;		On entry : 0/0
 18753 ;;		On exit  : 0/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18756 ;;      Params:         0       0       0       0       0       0       0       0
 18757 ;;      Locals:         0       0       0       0       0       0       0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0       0
 18759 ;;      Totals:         0       0       0       0       0       0       0       0
 18760 ;;Total ram usage:        0 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    6
 18763 ;; This function calls:
 18764 ;;		_DlyOff_Initialization
 18765 ;; This function is called by:
 18766 ;;		_main
 18767 ;; This function uses a non-reentrant model
 18768 ;;
 18769                           
 18770                           
 18771                           ;psect for function _DelayOff_Initialization
 18772  0000'                    _DelayOff_Initialization:	
 18773                           
 18774                           ;DelayOff_B1.c: 33: DlyOff_Initialization(1);
 18775                           
 18776                           ;incstack = 0
 18777                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 18778  0000' 3001               	movlw	1
 18779  0001' 3180' 2000'        	fcall	_DlyOff_Initialization
 18780  0003' 0008               	return
 18781  0004'                    __end_of_DelayOff_Initialization:	
 18782                           
 18783                           	psect	text123
 18784  0000'                    __ptext123:	
 18785 ;; *************** function _DlyOff_Initialization *****************
 18786 ;; Defined at:
 18787 ;;		line 60 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18788 ;; Parameters:    Size  Location     Type
 18789 ;;  sw              1    wreg     unsigned char 
 18790 ;; Auto vars:     Size  Location     Type
 18791 ;;  sw              1    2[BANK0 ] unsigned char 
 18792 ;; Return value:  Size  Location     Type
 18793 ;;		None               void
 18794 ;; Registers used:
 18795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18796 ;; Tracked objects:
 18797 ;;		On entry : 0/0
 18798 ;;		On exit  : 0/0
 18799 ;;		Unchanged: 0/0
 18800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18801 ;;      Params:         0       0       0       0       0       0       0       0
 18802 ;;      Locals:         0       1       0       0       0       0       0       0
 18803 ;;      Temps:          0       0       0       0       0       0       0       0
 18804 ;;      Totals:         0       1       0       0       0       0       0       0
 18805 ;;Total ram usage:        1 bytes
 18806 ;; Hardware stack levels used:    1
 18807 ;; Hardware stack levels required when called:    5
 18808 ;; This function calls:
 18809 ;;		_DelayOffPointSelect
 18810 ;; This function is called by:
 18811 ;;		_DelayOff_Initialization
 18812 ;; This function uses a non-reentrant model
 18813 ;;
 18814                           
 18815                           
 18816                           ;psect for function _DlyOff_Initialization
 18817  0000'                    _DlyOff_Initialization:	
 18818                           
 18819                           ;incstack = 0
 18820                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18821                           ;DlyOff_Initialization@sw stored from wreg
 18822  0000' 0020               	movlb	0	; select bank0
 18823  0001' 0082'              	movwf	DlyOff_Initialization@sw
 18824                           
 18825                           ;DelayOff_B1.c: 62: DelayOffPointSelect(sw);
 18826  0002' 0802'              	movf	DlyOff_Initialization@sw,w
 18827  0003' 3180' 2000'        	fcall	_DelayOffPointSelect
 18828                           
 18829                           ;DelayOff_B1.c: 63: DelayOff->Enable=1;
 18830  0005' 0021               	movlb	1	; select bank1
 18831  0006' 0800'              	movf	_DelayOff^(0+128),w
 18832  0007' 0086               	movwf	6
 18833  0008' 0187               	clrf	7
 18834  0009' 1401               	bsf	1,0
 18835  000A' 0008               	return
 18836  000B'                    __end_of_DlyOff_Initialization:	
 18837                           
 18838                           	psect	text124
 18839  0000'                    __ptext124:	
 18840 ;; *************** function _DelayOffPointSelect *****************
 18841 ;; Defined at:
 18842 ;;		line 8 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/DelayOff_B1.c"
 18843 ;; Parameters:    Size  Location     Type
 18844 ;;  sw              1    wreg     unsigned char 
 18845 ;; Auto vars:     Size  Location     Type
 18846 ;;  sw              1    1[BANK0 ] unsigned char 
 18847 ;; Return value:  Size  Location     Type
 18848 ;;		None               void
 18849 ;; Registers used:
 18850 ;;		wreg
 18851 ;; Tracked objects:
 18852 ;;		On entry : 0/0
 18853 ;;		On exit  : 0/0
 18854 ;;		Unchanged: 0/0
 18855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18856 ;;      Params:         0       0       0       0       0       0       0       0
 18857 ;;      Locals:         0       1       0       0       0       0       0       0
 18858 ;;      Temps:          0       1       0       0       0       0       0       0
 18859 ;;      Totals:         0       2       0       0       0       0       0       0
 18860 ;;Total ram usage:        2 bytes
 18861 ;; Hardware stack levels used:    1
 18862 ;; Hardware stack levels required when called:    4
 18863 ;; This function calls:
 18864 ;;		Nothing
 18865 ;; This function is called by:
 18866 ;;		_DlyOff_Initialization
 18867 ;;		_DlyOff_Main
 18868 ;;		_setDelayOff_GO
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           
 18873                           ;psect for function _DelayOffPointSelect
 18874  0000'                    _DelayOffPointSelect:	
 18875                           
 18876                           ;incstack = 0
 18877                           ; Regs used in _DelayOffPointSelect: [wreg]
 18878                           ;DelayOffPointSelect@sw stored from wreg
 18879  0000' 0020               	movlb	0	; select bank0
 18880  0001' 0081'              	movwf	DelayOffPointSelect@sw
 18881                           
 18882                           ;DelayOff_B1.c: 11: if(sw == 1)
 18883  0002' 0801'              	movf	DelayOffPointSelect@sw,w
 18884  0003' 3A01               	xorlw	1
 18885  0004' 1D03               	skipz
 18886  0005' 0008               	return
 18887                           
 18888                           ;DelayOff_B1.c: 12: {
 18889                           ;DelayOff_B1.c: 13: DelayOff=&DlySw1;
 18890  0006' 3000'              	movlw	_DlySw1& (0+255)
 18891  0007' 0080'              	movwf	??_DelayOffPointSelect
 18892  0008' 0800'              	movf	??_DelayOffPointSelect,w
 18893  0009' 0021               	movlb	1	; select bank1
 18894  000A' 0080'              	movwf	_DelayOff^(0+128)
 18895  000B' 0008               	return
 18896  000C'                    __end_of_DelayOffPointSelect:	
 18897                           
 18898                           	psect	text125
 18899  0000'                    __ptext125:	
 18900 ;; *************** function _CC2500_PowerOnInitial *****************
 18901 ;; Defined at:
 18902 ;;		line 97 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18903 ;; Parameters:    Size  Location     Type
 18904 ;;		None
 18905 ;; Auto vars:     Size  Location     Type
 18906 ;;		None
 18907 ;; Return value:  Size  Location     Type
 18908 ;;		None               void
 18909 ;; Registers used:
 18910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 18911 ;; Tracked objects:
 18912 ;;		On entry : 0/0
 18913 ;;		On exit  : 0/0
 18914 ;;		Unchanged: 0/0
 18915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18916 ;;      Params:         0       0       0       0       0       0       0       0
 18917 ;;      Locals:         0       0       0       0       0       0       0       0
 18918 ;;      Temps:          0       0       0       0       0       0       0       0
 18919 ;;      Totals:         0       0       0       0       0       0       0       0
 18920 ;;Total ram usage:        0 bytes
 18921 ;; Hardware stack levels used:    1
 18922 ;; Hardware stack levels required when called:    7
 18923 ;; This function calls:
 18924 ;;		_CC2500_ClearRXFIFO
 18925 ;;		_CC2500_ClearTXFIFO
 18926 ;;		_CC2500_FrequencyCabr
 18927 ;;		_CC2500_InitPATable
 18928 ;;		_CC2500_InitSetREG
 18929 ;;		_CC2500_PowerRST
 18930 ;;		_CC2500_SIDLEMode
 18931 ;; This function is called by:
 18932 ;;		_main
 18933 ;; This function uses a non-reentrant model
 18934 ;;
 18935                           
 18936                           
 18937                           ;psect for function _CC2500_PowerOnInitial
 18938  0000'                    _CC2500_PowerOnInitial:	
 18939                           
 18940                           ;CC2500_B1.c: 98: CC2500_PowerRST();
 18941                           
 18942                           ;incstack = 0
 18943                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 18944  0000' 3180' 2000' 3180'  	fcall	_CC2500_PowerRST
 18945                           
 18946                           ;CC2500_B1.c: 99: CC2500_InitSetREG();
 18947  0003' 3180' 2000' 3180'  	fcall	_CC2500_InitSetREG
 18948                           
 18949                           ;CC2500_B1.c: 100: CC2500_InitPATable();
 18950  0006' 3180' 2000' 3180'  	fcall	_CC2500_InitPATable
 18951                           
 18952                           ;CC2500_B1.c: 101: CC2500_ClearTXFIFO();
 18953  0009' 3180' 2000' 3180'  	fcall	_CC2500_ClearTXFIFO
 18954                           
 18955                           ;CC2500_B1.c: 102: CC2500_ClearRXFIFO();
 18956  000C' 3180' 2000' 3180'  	fcall	_CC2500_ClearRXFIFO
 18957                           
 18958                           ;CC2500_B1.c: 103: CC2500_FrequencyCabr();
 18959  000F' 3180' 2000' 3180'  	fcall	_CC2500_FrequencyCabr
 18960                           
 18961                           ;CC2500_B1.c: 104: CC2500_SIDLEMode();
 18962  0012' 3180' 2000'        	fcall	_CC2500_SIDLEMode
 18963  0014' 0008               	return
 18964  0015'                    __end_of_CC2500_PowerOnInitial:	
 18965                           
 18966                           	psect	text126
 18967  0000'                    __ptext126:	
 18968 ;; *************** function _CC2500_SIDLEMode *****************
 18969 ;; Defined at:
 18970 ;;		line 181 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 18971 ;; Parameters:    Size  Location     Type
 18972 ;;		None
 18973 ;; Auto vars:     Size  Location     Type
 18974 ;;		None
 18975 ;; Return value:  Size  Location     Type
 18976 ;;		None               void
 18977 ;; Registers used:
 18978 ;;		wreg, status,2, status,0, pclath, cstack
 18979 ;; Tracked objects:
 18980 ;;		On entry : 0/0
 18981 ;;		On exit  : 0/0
 18982 ;;		Unchanged: 0/0
 18983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 18984 ;;      Params:         0       0       0       0       0       0       0       0
 18985 ;;      Locals:         0       0       0       0       0       0       0       0
 18986 ;;      Temps:          0       0       0       0       0       0       0       0
 18987 ;;      Totals:         0       0       0       0       0       0       0       0
 18988 ;;Total ram usage:        0 bytes
 18989 ;; Hardware stack levels used:    1
 18990 ;; Hardware stack levels required when called:    6
 18991 ;; This function calls:
 18992 ;;		_CC2500_WriteCommand
 18993 ;; This function is called by:
 18994 ;;		_CC2500_PowerOnInitial
 18995 ;; This function uses a non-reentrant model
 18996 ;;
 18997                           
 18998                           
 18999                           ;psect for function _CC2500_SIDLEMode
 19000  0000'                    _CC2500_SIDLEMode:	
 19001                           
 19002                           ;CC2500_B1.c: 182: CC2500_WriteCommand(0x36);
 19003                           
 19004                           ;incstack = 0
 19005                           ; Regs used in _CC2500_SIDLEMode: [wreg+status,2+status,0+pclath+cstack]
 19006  0000' 3036               	movlw	54
 19007  0001' 3180' 2000'        	fcall	_CC2500_WriteCommand
 19008  0003' 0008               	return
 19009  0004'                    __end_of_CC2500_SIDLEMode:	
 19010                           
 19011                           	psect	text127
 19012  0000'                    __ptext127:	
 19013 ;; *************** function _CC2500_PowerRST *****************
 19014 ;; Defined at:
 19015 ;;		line 110 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;		None               void
 19022 ;; Registers used:
 19023 ;;		wreg, status,2, status,0, pclath, cstack
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19029 ;;      Params:         0       0       0       0       0       0       0       0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0
 19031 ;;      Temps:          0       1       0       0       0       0       0       0
 19032 ;;      Totals:         0       1       0       0       0       0       0       0
 19033 ;;Total ram usage:        1 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    5
 19036 ;; This function calls:
 19037 ;;		_CC2500_WriteByte
 19038 ;;		_DelayTime_1us
 19039 ;; This function is called by:
 19040 ;;		_CC2500_PowerOnInitial
 19041 ;; This function uses a non-reentrant model
 19042 ;;
 19043                           
 19044                           
 19045                           ;psect for function _CC2500_PowerRST
 19046  0000'                    _CC2500_PowerRST:	
 19047                           
 19048                           ;CC2500_B1.c: 111: RC1 = 0;
 19049                           
 19050                           ;incstack = 0
 19051                           ; Regs used in _CC2500_PowerRST: [wreg+status,2+status,0+pclath+cstack]
 19052  0000' 0020               	movlb	0	; select bank0
 19053  0001' 108E               	bcf	14,1	;volatile
 19054                           
 19055                           ;CC2500_B1.c: 112: RC0 = 0;
 19056  0002' 100E               	bcf	14,0	;volatile
 19057                           
 19058                           ;CC2500_B1.c: 113: RC4 = 1;
 19059  0003' 160E               	bsf	14,4	;volatile
 19060                           
 19061                           ;CC2500_B1.c: 114: DelayTime_1us(10);
 19062  0004' 300A               	movlw	10
 19063  0005' 0080'              	movwf	DelayTime_1us@count
 19064  0006' 3000               	movlw	0
 19065  0007' 0081'              	movwf	DelayTime_1us@count+1
 19066  0008' 3180' 2000' 3180'  	fcall	_DelayTime_1us
 19067                           
 19068                           ;CC2500_B1.c: 115: RC4 = 0;
 19069  000B' 0020               	movlb	0	; select bank0
 19070  000C' 120E               	bcf	14,4	;volatile
 19071                           
 19072                           ;CC2500_B1.c: 116: DelayTime_1us(10);
 19073  000D' 300A               	movlw	10
 19074  000E' 0080'              	movwf	DelayTime_1us@count
 19075  000F' 3000               	movlw	0
 19076  0010' 0081'              	movwf	DelayTime_1us@count+1
 19077  0011' 3180' 2000' 3180'  	fcall	_DelayTime_1us
 19078                           
 19079                           ;CC2500_B1.c: 117: RC4 = 1;
 19080  0014' 0020               	movlb	0	; select bank0
 19081  0015' 160E               	bsf	14,4	;volatile
 19082                           
 19083                           ;CC2500_B1.c: 118: DelayTime_1us(40);
 19084  0016' 3028               	movlw	40
 19085  0017' 0080'              	movwf	DelayTime_1us@count
 19086  0018' 3000               	movlw	0
 19087  0019' 0081'              	movwf	DelayTime_1us@count+1
 19088  001A' 3180' 2000' 3180'  	fcall	_DelayTime_1us
 19089                           
 19090                           ;CC2500_B1.c: 119: RC4 = 0;
 19091  001D' 0020               	movlb	0	; select bank0
 19092  001E' 120E               	bcf	14,4	;volatile
 19093                           
 19094                           ;CC2500_B1.c: 120: SPI0Buffer = 0x30;
 19095  001F' 3030               	movlw	48
 19096  0020' 0086'              	movwf	??_CC2500_PowerRST
 19097  0021' 0806'              	movf	??_CC2500_PowerRST,w
 19098  0022' 0021               	movlb	1	; select bank1
 19099  0023' 0080'              	movwf	_SPI0Buffer^(0+128)
 19100  0024'                    l304:	
 19101                           ;CC2500_B1.c: 121: while (RC2 == 1);
 19102                           
 19103  0024' 0020               	movlb	0	; select bank0
 19104  0025' 190E               	btfsc	14,2	;volatile
 19105  0026' 2800'              	goto	l304
 19106                           
 19107                           ;CC2500_B1.c: 122: CC2500_WriteByte();
 19108  0027' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
 19109  002A'                    l307:	
 19110                           ;CC2500_B1.c: 123: while (RC2 == 1);
 19111                           
 19112  002A' 0020               	movlb	0	; select bank0
 19113  002B' 190E               	btfsc	14,2	;volatile
 19114  002C' 2800'              	goto	l307
 19115                           
 19116                           ;CC2500_B1.c: 124: RC0 = 0;
 19117  002D' 100E               	bcf	14,0	;volatile
 19118                           
 19119                           ;CC2500_B1.c: 125: RC4 = 1;
 19120  002E' 160E               	bsf	14,4	;volatile
 19121  002F' 0008               	return
 19122  0030'                    __end_of_CC2500_PowerRST:	
 19123                           
 19124                           	psect	text128
 19125  0000'                    __ptext128:	
 19126 ;; *************** function _CC2500_InitSetREG *****************
 19127 ;; Defined at:
 19128 ;;		line 131 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19129 ;; Parameters:    Size  Location     Type
 19130 ;;		None
 19131 ;; Auto vars:     Size  Location     Type
 19132 ;;  loop_c          1    8[BANK0 ] unsigned char 
 19133 ;;  temp2           1    7[BANK0 ] unsigned char 
 19134 ;;  temp1           1    6[BANK0 ] unsigned char 
 19135 ;; Return value:  Size  Location     Type
 19136 ;;		None               void
 19137 ;; Registers used:
 19138 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19139 ;; Tracked objects:
 19140 ;;		On entry : 0/0
 19141 ;;		On exit  : 0/0
 19142 ;;		Unchanged: 0/0
 19143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19144 ;;      Params:         0       0       0       0       0       0       0       0
 19145 ;;      Locals:         0       3       0       0       0       0       0       0
 19146 ;;      Temps:          0       1       0       0       0       0       0       0
 19147 ;;      Totals:         0       4       0       0       0       0       0       0
 19148 ;;Total ram usage:        4 bytes
 19149 ;; Hardware stack levels used:    1
 19150 ;; Hardware stack levels required when called:    6
 19151 ;; This function calls:
 19152 ;;		_CC2500_WriteREG
 19153 ;; This function is called by:
 19154 ;;		_CC2500_PowerOnInitial
 19155 ;; This function uses a non-reentrant model
 19156 ;;
 19157                           
 19158                           
 19159                           ;psect for function _CC2500_InitSetREG
 19160  0000'                    _CC2500_InitSetREG:	
 19161                           
 19162                           ;CC2500_B1.c: 132: unsigned char loop_c;
 19163                           ;CC2500_B1.c: 133: unsigned char temp1, temp2;
 19164                           ;CC2500_B1.c: 135: for (loop_c = 0; loop_c < 47; loop_c++) {
 19165                           
 19166                           ;incstack = 0
 19167                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19168  0000' 0020               	movlb	0	; select bank0
 19169  0001' 0188'              	clrf	CC2500_InitSetREG@loop_c
 19170  0002'                    L12:	
 19171  0002' 302F               	movlw	47
 19172  0003' 0208'              	subwf	CC2500_InitSetREG@loop_c,w
 19173  0004' 1803               	btfsc	3,0
 19174  0005' 0008               	return
 19175                           
 19176                           ;CC2500_B1.c: 136: temp1 = CC2500_registers_address[loop_c];
 19177  0006' 0808'              	movf	CC2500_InitSetREG@loop_c,w
 19178  0007' 3E00'              	addlw	low (_CC2500_registers_address| (0+32768))
 19179  0008' 0084               	movwf	4
 19180  0009' 3000'              	movlw	high (_CC2500_registers_address| (0+32768))
 19181  000A' 1803               	skipnc
 19182  000B' 3E01               	addlw	1
 19183  000C' 0085               	movwf	5
 19184  000D' 0800               	movf	0,w	;code access
 19185  000E' 0085'              	movwf	??_CC2500_InitSetREG
 19186  000F' 0805'              	movf	??_CC2500_InitSetREG,w
 19187  0010' 0086'              	movwf	CC2500_InitSetREG@temp1
 19188                           
 19189                           ;CC2500_B1.c: 137: temp2 = CC2500_rfSettings[loop_c];
 19190  0011' 0808'              	movf	CC2500_InitSetREG@loop_c,w
 19191  0012' 3E00'              	addlw	low (_CC2500_rfSettings| (0+32768))
 19192  0013' 0084               	movwf	4
 19193  0014' 3000'              	movlw	high (_CC2500_rfSettings| (0+32768))
 19194  0015' 1803               	skipnc
 19195  0016' 3E01               	addlw	1
 19196  0017' 0085               	movwf	5
 19197  0018' 0800               	movf	0,w	;code access
 19198  0019' 0085'              	movwf	??_CC2500_InitSetREG
 19199  001A' 0805'              	movf	??_CC2500_InitSetREG,w
 19200  001B' 0087'              	movwf	CC2500_InitSetREG@temp2
 19201                           
 19202                           ;CC2500_B1.c: 139: CC2500_WriteREG(temp1, temp2);
 19203  001C' 0807'              	movf	CC2500_InitSetREG@temp2,w
 19204  001D' 0085'              	movwf	??_CC2500_InitSetREG
 19205  001E' 0805'              	movf	??_CC2500_InitSetREG,w
 19206  001F' 0082'              	movwf	CC2500_WriteREG@value
 19207  0020' 0806'              	movf	CC2500_InitSetREG@temp1,w
 19208  0021' 3180' 2000' 3180'  	fcall	_CC2500_WriteREG
 19209  0024' 3001               	movlw	1
 19210  0025' 0020               	movlb	0	; select bank0
 19211  0026' 0085'              	movwf	??_CC2500_InitSetREG
 19212  0027' 0805'              	movf	??_CC2500_InitSetREG,w
 19213  0028' 0788'              	addwf	CC2500_InitSetREG@loop_c,f
 19214  0029' 2800'              	goto	L12
 19215  002A'                    __end_of_CC2500_InitSetREG:	
 19216                           
 19217                           	psect	text129
 19218  0000'                    __ptext129:	
 19219 ;; *************** function _CC2500_InitPATable *****************
 19220 ;; Defined at:
 19221 ;;		line 146 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19222 ;; Parameters:    Size  Location     Type
 19223 ;;		None
 19224 ;; Auto vars:     Size  Location     Type
 19225 ;;  loop_d          1    7[BANK0 ] unsigned char 
 19226 ;;  temp            1    6[BANK0 ] unsigned char 
 19227 ;; Return value:  Size  Location     Type
 19228 ;;		None               void
 19229 ;; Registers used:
 19230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19231 ;; Tracked objects:
 19232 ;;		On entry : 0/0
 19233 ;;		On exit  : 0/0
 19234 ;;		Unchanged: 0/0
 19235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19236 ;;      Params:         0       0       0       0       0       0       0       0
 19237 ;;      Locals:         0       2       0       0       0       0       0       0
 19238 ;;      Temps:          0       1       0       0       0       0       0       0
 19239 ;;      Totals:         0       3       0       0       0       0       0       0
 19240 ;;Total ram usage:        3 bytes
 19241 ;; Hardware stack levels used:    1
 19242 ;; Hardware stack levels required when called:    6
 19243 ;; This function calls:
 19244 ;;		_CC2500_WriteREG
 19245 ;; This function is called by:
 19246 ;;		_CC2500_PowerOnInitial
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           
 19251                           ;psect for function _CC2500_InitPATable
 19252  0000'                    _CC2500_InitPATable:	
 19253                           
 19254                           ;CC2500_B1.c: 147: unsigned char loop_d;
 19255                           ;CC2500_B1.c: 148: unsigned char temp;
 19256                           ;CC2500_B1.c: 150: for (loop_d = 0; loop_d < 8; loop_d++) {
 19257                           
 19258                           ;incstack = 0
 19259                           ; Regs used in _CC2500_InitPATable: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19260  0000' 0020               	movlb	0	; select bank0
 19261  0001' 0187'              	clrf	CC2500_InitPATable@loop_d
 19262  0002'                    L13:	
 19263  0002' 3008               	movlw	8
 19264  0003' 0207'              	subwf	CC2500_InitPATable@loop_d,w
 19265  0004' 1803               	btfsc	3,0
 19266  0005' 0008               	return
 19267                           
 19268                           ;CC2500_B1.c: 151: temp = CC2500_patable_vaule[loop_d];
 19269  0006' 0807'              	movf	CC2500_InitPATable@loop_d,w
 19270  0007' 3E00'              	addlw	low (_CC2500_patable_vaule| (0+32768))
 19271  0008' 0084               	movwf	4
 19272  0009' 3000'              	movlw	high (_CC2500_patable_vaule| (0+32768))
 19273  000A' 1803               	skipnc
 19274  000B' 3E01               	addlw	1
 19275  000C' 0085               	movwf	5
 19276  000D' 0800               	movf	0,w	;code access
 19277  000E' 0085'              	movwf	??_CC2500_InitPATable
 19278  000F' 0805'              	movf	??_CC2500_InitPATable,w
 19279  0010' 0086'              	movwf	CC2500_InitPATable@temp
 19280                           
 19281                           ;CC2500_B1.c: 152: CC2500_WriteREG(0x3E, temp);
 19282  0011' 0806'              	movf	CC2500_InitPATable@temp,w
 19283  0012' 0085'              	movwf	??_CC2500_InitPATable
 19284  0013' 0805'              	movf	??_CC2500_InitPATable,w
 19285  0014' 0082'              	movwf	CC2500_WriteREG@value
 19286  0015' 303E               	movlw	62
 19287  0016' 3180' 2000' 3180'  	fcall	_CC2500_WriteREG
 19288  0019' 3001               	movlw	1
 19289  001A' 0020               	movlb	0	; select bank0
 19290  001B' 0085'              	movwf	??_CC2500_InitPATable
 19291  001C' 0805'              	movf	??_CC2500_InitPATable,w
 19292  001D' 0787'              	addwf	CC2500_InitPATable@loop_d,f
 19293  001E' 2800'              	goto	L13
 19294  001F'                    __end_of_CC2500_InitPATable:	
 19295                           
 19296                           	psect	text130
 19297  0000'                    __ptext130:	
 19298 ;; *************** function _CC2500_WriteREG *****************
 19299 ;; Defined at:
 19300 ;;		line 223 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19301 ;; Parameters:    Size  Location     Type
 19302 ;;  w_addr          1    wreg     unsigned char 
 19303 ;;  value           1    2[BANK0 ] unsigned char 
 19304 ;; Auto vars:     Size  Location     Type
 19305 ;;  w_addr          1    4[BANK0 ] unsigned char 
 19306 ;; Return value:  Size  Location     Type
 19307 ;;		None               void
 19308 ;; Registers used:
 19309 ;;		wreg, status,2, status,0, pclath, cstack
 19310 ;; Tracked objects:
 19311 ;;		On entry : 0/0
 19312 ;;		On exit  : 0/0
 19313 ;;		Unchanged: 0/0
 19314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19315 ;;      Params:         0       1       0       0       0       0       0       0
 19316 ;;      Locals:         0       1       0       0       0       0       0       0
 19317 ;;      Temps:          0       1       0       0       0       0       0       0
 19318 ;;      Totals:         0       3       0       0       0       0       0       0
 19319 ;;Total ram usage:        3 bytes
 19320 ;; Hardware stack levels used:    1
 19321 ;; Hardware stack levels required when called:    5
 19322 ;; This function calls:
 19323 ;;		_CC2500_WriteByte
 19324 ;; This function is called by:
 19325 ;;		_CC2500_InitSetREG
 19326 ;;		_CC2500_InitPATable
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           
 19331                           ;psect for function _CC2500_WriteREG
 19332  0000'                    _CC2500_WriteREG:	
 19333                           
 19334                           ;incstack = 0
 19335                           ; Regs used in _CC2500_WriteREG: [wreg+status,2+status,0+pclath+cstack]
 19336                           ;CC2500_WriteREG@w_addr stored from wreg
 19337  0000' 0020               	movlb	0	; select bank0
 19338  0001' 0084'              	movwf	CC2500_WriteREG@w_addr
 19339                           
 19340                           ;CC2500_B1.c: 224: RC4 = 0;
 19341  0002' 120E               	bcf	14,4	;volatile
 19342                           
 19343                           ;CC2500_B1.c: 225: SPI0Buffer = w_addr;
 19344  0003' 0804'              	movf	CC2500_WriteREG@w_addr,w
 19345  0004' 0083'              	movwf	??_CC2500_WriteREG
 19346  0005' 0803'              	movf	??_CC2500_WriteREG,w
 19347  0006' 0021               	movlb	1	; select bank1
 19348  0007' 0080'              	movwf	_SPI0Buffer^(0+128)
 19349  0008'                    l349:	
 19350                           ;CC2500_B1.c: 226: while (RC2 == 1);
 19351                           
 19352  0008' 0020               	movlb	0	; select bank0
 19353  0009' 190E               	btfsc	14,2	;volatile
 19354  000A' 2800'              	goto	l349
 19355                           
 19356                           ;CC2500_B1.c: 227: CC2500_WriteByte();
 19357  000B' 3180' 2000' 3180'  	fcall	_CC2500_WriteByte
 19358                           
 19359                           ;CC2500_B1.c: 228: SPI0Buffer = value;
 19360  000E' 0020               	movlb	0	; select bank0
 19361  000F' 0802'              	movf	CC2500_WriteREG@value,w
 19362  0010' 0083'              	movwf	??_CC2500_WriteREG
 19363  0011' 0803'              	movf	??_CC2500_WriteREG,w
 19364  0012' 0021               	movlb	1	; select bank1
 19365  0013' 0080'              	movwf	_SPI0Buffer^(0+128)
 19366                           
 19367                           ;CC2500_B1.c: 229: CC2500_WriteByte();
 19368  0014' 3180' 2000'        	fcall	_CC2500_WriteByte
 19369                           
 19370                           ;CC2500_B1.c: 230: RC4 = 1;
 19371  0016' 0020               	movlb	0	; select bank0
 19372  0017' 160E               	bsf	14,4	;volatile
 19373  0018' 0008               	return
 19374  0019'                    __end_of_CC2500_WriteREG:	
 19375                           
 19376                           	psect	text131
 19377  0000'                    __ptext131:	
 19378 ;; *************** function _CC2500_FrequencyCabr *****************
 19379 ;; Defined at:
 19380 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19381 ;; Parameters:    Size  Location     Type
 19382 ;;		None
 19383 ;; Auto vars:     Size  Location     Type
 19384 ;;		None
 19385 ;; Return value:  Size  Location     Type
 19386 ;;		None               void
 19387 ;; Registers used:
 19388 ;;		wreg, status,2, status,0, pclath, cstack
 19389 ;; Tracked objects:
 19390 ;;		On entry : 0/0
 19391 ;;		On exit  : 0/0
 19392 ;;		Unchanged: 0/0
 19393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19394 ;;      Params:         0       0       0       0       0       0       0       0
 19395 ;;      Locals:         0       0       0       0       0       0       0       0
 19396 ;;      Temps:          0       0       0       0       0       0       0       0
 19397 ;;      Totals:         0       0       0       0       0       0       0       0
 19398 ;;Total ram usage:        0 bytes
 19399 ;; Hardware stack levels used:    1
 19400 ;; Hardware stack levels required when called:    6
 19401 ;; This function calls:
 19402 ;;		_CC2500_WriteCommand
 19403 ;;		_DelayTime_1us
 19404 ;; This function is called by:
 19405 ;;		_CC2500_PowerOnInitial
 19406 ;; This function uses a non-reentrant model
 19407 ;;
 19408                           
 19409                           
 19410                           ;psect for function _CC2500_FrequencyCabr
 19411  0000'                    _CC2500_FrequencyCabr:	
 19412                           
 19413                           ;CC2500_B1.c: 174: CC2500_WriteCommand(0x33);
 19414                           
 19415                           ;incstack = 0
 19416                           ; Regs used in _CC2500_FrequencyCabr: [wreg+status,2+status,0+pclath+cstack]
 19417  0000' 3033               	movlw	51
 19418  0001' 3180' 2000' 3180'  	fcall	_CC2500_WriteCommand
 19419                           
 19420                           ;CC2500_B1.c: 175: DelayTime_1us(1000);
 19421  0004' 30E8               	movlw	232
 19422  0005' 0020               	movlb	0	; select bank0
 19423  0006' 0080'              	movwf	DelayTime_1us@count
 19424  0007' 3003               	movlw	3
 19425  0008' 0081'              	movwf	DelayTime_1us@count+1
 19426  0009' 3180' 2000'        	fcall	_DelayTime_1us
 19427  000B' 0008               	return
 19428  000C'                    __end_of_CC2500_FrequencyCabr:	
 19429                           
 19430                           	psect	text132
 19431  0000'                    __ptext132:	
 19432 ;; *************** function _DelayTime_1us *****************
 19433 ;; Defined at:
 19434 ;;		line 279 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19435 ;; Parameters:    Size  Location     Type
 19436 ;;  count           2    0[BANK0 ] int 
 19437 ;; Auto vars:     Size  Location     Type
 19438 ;;  j               2    4[BANK0 ] unsigned int 
 19439 ;;  i               2    2[BANK0 ] unsigned int 
 19440 ;; Return value:  Size  Location     Type
 19441 ;;		None               void
 19442 ;; Registers used:
 19443 ;;		wreg, status,2
 19444 ;; Tracked objects:
 19445 ;;		On entry : 0/0
 19446 ;;		On exit  : 0/0
 19447 ;;		Unchanged: 0/0
 19448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19449 ;;      Params:         0       2       0       0       0       0       0       0
 19450 ;;      Locals:         0       4       0       0       0       0       0       0
 19451 ;;      Temps:          0       0       0       0       0       0       0       0
 19452 ;;      Totals:         0       6       0       0       0       0       0       0
 19453 ;;Total ram usage:        6 bytes
 19454 ;; Hardware stack levels used:    1
 19455 ;; Hardware stack levels required when called:    4
 19456 ;; This function calls:
 19457 ;;		Nothing
 19458 ;; This function is called by:
 19459 ;;		_CC2500_PowerRST
 19460 ;;		_CC2500_FrequencyCabr
 19461 ;; This function uses a non-reentrant model
 19462 ;;
 19463                           
 19464                           
 19465                           ;psect for function _DelayTime_1us
 19466  0000'                    _DelayTime_1us:	
 19467                           
 19468                           ;CC2500_B1.c: 280: unsigned int i, j;
 19469                           ;CC2500_B1.c: 281: for (i = 1; i < count; i++)
 19470                           
 19471                           ;incstack = 0
 19472                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 19473  0000' 3001               	movlw	1
 19474  0001' 0020               	movlb	0	; select bank0
 19475  0002' 0082'              	movwf	DelayTime_1us@i
 19476  0003' 3000               	movlw	0
 19477  0004' 0083'              	movwf	DelayTime_1us@i+1
 19478  0005'                    l373:	
 19479  0005' 0801'              	movf	DelayTime_1us@count+1,w
 19480  0006' 0203'              	subwf	DelayTime_1us@i+1,w
 19481  0007' 1D03               	skipz
 19482  0008' 2800'              	goto	u8045
 19483  0009' 0800'              	movf	DelayTime_1us@count,w
 19484  000A' 0202'              	subwf	DelayTime_1us@i,w
 19485  000B'                    u8045:	
 19486  000B' 1803               	btfsc	3,0
 19487  000C' 0008               	return
 19488                           
 19489                           ;CC2500_B1.c: 282: for (j = 0; j <= 1; j++);
 19490  000D' 0184'              	clrf	DelayTime_1us@j
 19491  000E' 0185'              	clrf	DelayTime_1us@j+1
 19492  000F' 3000               	movlw	0
 19493  0010' 0205'              	subwf	DelayTime_1us@j+1,w
 19494  0011' 3002               	movlw	2
 19495  0012' 1903               	skipnz
 19496  0013' 0204'              	subwf	DelayTime_1us@j,w
 19497  0014' 1803               	btfsc	3,0
 19498  0015' 2800'              	goto	l8487
 19499  0016'                    l8485:	
 19500  0016' 3001               	movlw	1
 19501  0017' 0784'              	addwf	DelayTime_1us@j,f
 19502  0018' 3000               	movlw	0
 19503  0019' 3D85'              	addwfc	DelayTime_1us@j+1,f
 19504  001A' 3000               	movlw	0
 19505  001B' 0205'              	subwf	DelayTime_1us@j+1,w
 19506  001C' 3002               	movlw	2
 19507  001D' 1903               	skipnz
 19508  001E' 0204'              	subwf	DelayTime_1us@j,w
 19509  001F' 1C03               	skipc
 19510  0020' 2800'              	goto	l8485
 19511  0021'                    l8487:	
 19512  0021' 3001               	movlw	1
 19513  0022' 0782'              	addwf	DelayTime_1us@i,f
 19514  0023' 3000               	movlw	0
 19515  0024' 3D83'              	addwfc	DelayTime_1us@i+1,f
 19516  0025' 2800'              	goto	l373
 19517  0026'                    __end_of_DelayTime_1us:	
 19518                           
 19519                           	psect	text133
 19520  0000'                    __ptext133:	
 19521 ;; *************** function _CC2500_ClearTXFIFO *****************
 19522 ;; Defined at:
 19523 ;;		line 159 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19524 ;; Parameters:    Size  Location     Type
 19525 ;;		None
 19526 ;; Auto vars:     Size  Location     Type
 19527 ;;		None
 19528 ;; Return value:  Size  Location     Type
 19529 ;;		None               void
 19530 ;; Registers used:
 19531 ;;		wreg, status,2, status,0, pclath, cstack
 19532 ;; Tracked objects:
 19533 ;;		On entry : 0/0
 19534 ;;		On exit  : 0/0
 19535 ;;		Unchanged: 0/0
 19536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19537 ;;      Params:         0       0       0       0       0       0       0       0
 19538 ;;      Locals:         0       0       0       0       0       0       0       0
 19539 ;;      Temps:          0       0       0       0       0       0       0       0
 19540 ;;      Totals:         0       0       0       0       0       0       0       0
 19541 ;;Total ram usage:        0 bytes
 19542 ;; Hardware stack levels used:    1
 19543 ;; Hardware stack levels required when called:    6
 19544 ;; This function calls:
 19545 ;;		_CC2500_WriteCommand
 19546 ;; This function is called by:
 19547 ;;		_CC2500_PowerOnInitial
 19548 ;; This function uses a non-reentrant model
 19549 ;;
 19550                           
 19551                           
 19552                           ;psect for function _CC2500_ClearTXFIFO
 19553  0000'                    _CC2500_ClearTXFIFO:	
 19554                           
 19555                           ;CC2500_B1.c: 160: CC2500_WriteCommand(0x3B);
 19556                           
 19557                           ;incstack = 0
 19558                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19559  0000' 303B               	movlw	59
 19560  0001' 3180' 2000'        	fcall	_CC2500_WriteCommand
 19561  0003' 0008               	return
 19562  0004'                    __end_of_CC2500_ClearTXFIFO:	
 19563                           
 19564                           	psect	text134
 19565  0000'                    __ptext134:	
 19566 ;; *************** function _CC2500_ClearRXFIFO *****************
 19567 ;; Defined at:
 19568 ;;		line 166 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19569 ;; Parameters:    Size  Location     Type
 19570 ;;		None
 19571 ;; Auto vars:     Size  Location     Type
 19572 ;;		None
 19573 ;; Return value:  Size  Location     Type
 19574 ;;		None               void
 19575 ;; Registers used:
 19576 ;;		wreg, status,2, status,0, pclath, cstack
 19577 ;; Tracked objects:
 19578 ;;		On entry : 0/0
 19579 ;;		On exit  : 0/0
 19580 ;;		Unchanged: 0/0
 19581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19582 ;;      Params:         0       0       0       0       0       0       0       0
 19583 ;;      Locals:         0       0       0       0       0       0       0       0
 19584 ;;      Temps:          0       0       0       0       0       0       0       0
 19585 ;;      Totals:         0       0       0       0       0       0       0       0
 19586 ;;Total ram usage:        0 bytes
 19587 ;; Hardware stack levels used:    1
 19588 ;; Hardware stack levels required when called:    6
 19589 ;; This function calls:
 19590 ;;		_CC2500_WriteCommand
 19591 ;; This function is called by:
 19592 ;;		_CC2500_PowerOnInitial
 19593 ;; This function uses a non-reentrant model
 19594 ;;
 19595                           
 19596                           
 19597                           ;psect for function _CC2500_ClearRXFIFO
 19598  0000'                    _CC2500_ClearRXFIFO:	
 19599                           
 19600                           ;CC2500_B1.c: 167: CC2500_WriteCommand(0x3A);
 19601                           
 19602                           ;incstack = 0
 19603                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+status,2+status,0+pclath+cstack]
 19604  0000' 303A               	movlw	58
 19605  0001' 3180' 2000'        	fcall	_CC2500_WriteCommand
 19606  0003' 0008               	return
 19607  0004'                    __end_of_CC2500_ClearRXFIFO:	
 19608                           
 19609                           	psect	text135
 19610  0000'                    __ptext135:	
 19611 ;; *************** function _CC2500_WriteCommand *****************
 19612 ;; Defined at:
 19613 ;;		line 249 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19614 ;; Parameters:    Size  Location     Type
 19615 ;;  command         1    wreg     unsigned char 
 19616 ;; Auto vars:     Size  Location     Type
 19617 ;;  command         1    3[BANK0 ] unsigned char 
 19618 ;; Return value:  Size  Location     Type
 19619 ;;		None               void
 19620 ;; Registers used:
 19621 ;;		wreg, status,2, status,0, pclath, cstack
 19622 ;; Tracked objects:
 19623 ;;		On entry : 0/0
 19624 ;;		On exit  : 0/0
 19625 ;;		Unchanged: 0/0
 19626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19627 ;;      Params:         0       0       0       0       0       0       0       0
 19628 ;;      Locals:         0       1       0       0       0       0       0       0
 19629 ;;      Temps:          0       1       0       0       0       0       0       0
 19630 ;;      Totals:         0       2       0       0       0       0       0       0
 19631 ;;Total ram usage:        2 bytes
 19632 ;; Hardware stack levels used:    1
 19633 ;; Hardware stack levels required when called:    5
 19634 ;; This function calls:
 19635 ;;		_CC2500_WriteByte
 19636 ;; This function is called by:
 19637 ;;		_CC2500_TxData
 19638 ;;		_CC2500_RxData
 19639 ;;		_CC2500_ClearTXFIFO
 19640 ;;		_CC2500_ClearRXFIFO
 19641 ;;		_CC2500_FrequencyCabr
 19642 ;;		_CC2500_SIDLEMode
 19643 ;;		_setRF_Main
 19644 ;;		_RF_RxDisable
 19645 ;; This function uses a non-reentrant model
 19646 ;;
 19647                           
 19648                           
 19649                           ;psect for function _CC2500_WriteCommand
 19650  0000'                    _CC2500_WriteCommand:	
 19651                           
 19652                           ;incstack = 0
 19653                           ; Regs used in _CC2500_WriteCommand: [wreg+status,2+status,0+pclath+cstack]
 19654                           ;CC2500_WriteCommand@command stored from wreg
 19655  0000' 0020               	movlb	0	; select bank0
 19656  0001' 0083'              	movwf	CC2500_WriteCommand@command
 19657                           
 19658                           ;CC2500_B1.c: 250: RC4 = 0;
 19659  0002' 120E               	bcf	14,4	;volatile
 19660                           
 19661                           ;CC2500_B1.c: 251: SPI0Buffer = command;
 19662  0003' 0803'              	movf	CC2500_WriteCommand@command,w
 19663  0004' 0082'              	movwf	??_CC2500_WriteCommand
 19664  0005' 0802'              	movf	??_CC2500_WriteCommand,w
 19665  0006' 0021               	movlb	1	; select bank1
 19666  0007' 0080'              	movwf	_SPI0Buffer^(0+128)
 19667  0008'                    l361:	
 19668                           ;CC2500_B1.c: 253: while (RC2 == 1);
 19669                           
 19670  0008' 0020               	movlb	0	; select bank0
 19671  0009' 190E               	btfsc	14,2	;volatile
 19672  000A' 2800'              	goto	l361
 19673                           
 19674                           ;CC2500_B1.c: 255: CC2500_WriteByte();
 19675  000B' 3180' 2000'        	fcall	_CC2500_WriteByte
 19676                           
 19677                           ;CC2500_B1.c: 256: RC4 = 1;
 19678  000D' 0020               	movlb	0	; select bank0
 19679  000E' 160E               	bsf	14,4	;volatile
 19680  000F' 0008               	return
 19681  0010'                    __end_of_CC2500_WriteCommand:	
 19682                           
 19683                           	psect	text136
 19684  0000'                    __ptext136:	
 19685 ;; *************** function _CC2500_WriteByte *****************
 19686 ;; Defined at:
 19687 ;;		line 191 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/CC2500_B1.c"
 19688 ;; Parameters:    Size  Location     Type
 19689 ;;		None
 19690 ;; Auto vars:     Size  Location     Type
 19691 ;;  loop_a          1    1[BANK0 ] unsigned char 
 19692 ;; Return value:  Size  Location     Type
 19693 ;;		None               void
 19694 ;; Registers used:
 19695 ;;		wreg, status,2, status,0
 19696 ;; Tracked objects:
 19697 ;;		On entry : 0/0
 19698 ;;		On exit  : 0/0
 19699 ;;		Unchanged: 0/0
 19700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19701 ;;      Params:         0       0       0       0       0       0       0       0
 19702 ;;      Locals:         0       1       0       0       0       0       0       0
 19703 ;;      Temps:          0       1       0       0       0       0       0       0
 19704 ;;      Totals:         0       2       0       0       0       0       0       0
 19705 ;;Total ram usage:        2 bytes
 19706 ;; Hardware stack levels used:    1
 19707 ;; Hardware stack levels required when called:    4
 19708 ;; This function calls:
 19709 ;;		Nothing
 19710 ;; This function is called by:
 19711 ;;		_CC2500_TxData
 19712 ;;		_CC2500_RxData
 19713 ;;		_CC2500_PowerRST
 19714 ;;		_CC2500_WriteREG
 19715 ;;		_CC2500_WriteCommand
 19716 ;;		_CC2500_ReadStatus
 19717 ;;		_CC2500_ReadREG
 19718 ;; This function uses a non-reentrant model
 19719 ;;
 19720                           
 19721                           
 19722                           ;psect for function _CC2500_WriteByte
 19723  0000'                    _CC2500_WriteByte:	
 19724                           
 19725                           ;CC2500_B1.c: 192: unsigned char loop_a;
 19726                           ;CC2500_B1.c: 193: for (loop_a = 0; loop_a < 8; loop_a++) {
 19727                           
 19728                           ;incstack = 0
 19729                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 19730  0000' 0020               	movlb	0	; select bank0
 19731  0001' 0181'              	clrf	CC2500_WriteByte@loop_a
 19732  0002'                    L14:	
 19733  0002' 3008               	movlw	8
 19734  0003' 0201'              	subwf	CC2500_WriteByte@loop_a,w
 19735  0004' 1803               	btfsc	3,0
 19736  0005' 0008               	return
 19737                           
 19738                           ;CC2500_B1.c: 194: if (SPI0Buffer & 0x80)
 19739  0006' 0021               	movlb	1	; select bank1
 19740  0007' 1F80'              	btfss	_SPI0Buffer^(0+128),7
 19741  0008' 2800'              	goto	l337
 19742                           
 19743                           ;CC2500_B1.c: 195: RC0 = 1;
 19744  0009' 0020               	movlb	0	; select bank0
 19745  000A' 140E               	bsf	14,0	;volatile
 19746  000B' 2800'              	goto	l338
 19747  000C'                    l337:	
 19748                           
 19749                           ;CC2500_B1.c: 196: else
 19750                           ;CC2500_B1.c: 197: RC0 = 0;
 19751  000C' 0020               	movlb	0	; select bank0
 19752  000D' 100E               	bcf	14,0	;volatile
 19753  000E'                    l338:	
 19754                           
 19755                           ;CC2500_B1.c: 198: RC1 = 1;
 19756  000E' 148E               	bsf	14,1	;volatile
 19757                           
 19758                           ;CC2500_B1.c: 199: SPI0Buffer <<= 1;
 19759  000F' 1003               	clrc
 19760  0010' 0021               	movlb	1	; select bank1
 19761  0011' 0D80'              	rlf	_SPI0Buffer^(0+128),f
 19762                           
 19763                           ;CC2500_B1.c: 200: RC1 = 0;
 19764  0012' 0020               	movlb	0	; select bank0
 19765  0013' 108E               	bcf	14,1	;volatile
 19766  0014' 3001               	movlw	1
 19767  0015' 0080'              	movwf	??_CC2500_WriteByte
 19768  0016' 0800'              	movf	??_CC2500_WriteByte,w
 19769  0017' 0781'              	addwf	CC2500_WriteByte@loop_a,f
 19770  0018' 2800'              	goto	L14
 19771  0019'                    __end_of_CC2500_WriteByte:	
 19772                           
 19773                           	psect	text137
 19774  0000'                    __ptext137:	
 19775 ;; *************** function _Buzzer_Main *****************
 19776 ;; Defined at:
 19777 ;;		line 47 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 19778 ;; Parameters:    Size  Location     Type
 19779 ;;		None
 19780 ;; Auto vars:     Size  Location     Type
 19781 ;;		None
 19782 ;; Return value:  Size  Location     Type
 19783 ;;		None               void
 19784 ;; Registers used:
 19785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 19786 ;; Tracked objects:
 19787 ;;		On entry : 0/0
 19788 ;;		On exit  : 0/0
 19789 ;;		Unchanged: 0/0
 19790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 19791 ;;      Params:         0       0       0       0       0       0       0       0
 19792 ;;      Locals:         0       0       0       0       0       0       0       0
 19793 ;;      Temps:          0       4       0       0       0       0       0       0
 19794 ;;      Totals:         0       4       0       0       0       0       0       0
 19795 ;;Total ram usage:        4 bytes
 19796 ;; Hardware stack levels used:    1
 19797 ;; Hardware stack levels required when called:    4
 19798 ;; This function calls:
 19799 ;;		Nothing
 19800 ;; This function is called by:
 19801 ;;		_main
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           
 19806                           ;psect for function _Buzzer_Main
 19807  0000'                    _Buzzer_Main:	
 19808                           
 19809                           ;Buzzer_B1.c: 48: Buz->Switch = (RB3) ? 1 : 0;
 19810                           
 19811                           ;incstack = 0
 19812                           ; Regs used in _Buzzer_Main: [wreg-fsr1h+status,2+status,0]
 19813  0000' 0021               	movlb	1	; select bank1
 19814  0001' 0800'              	movf	_Buz^(0+128),w
 19815  0002' 0086               	movwf	6
 19816  0003' 3001               	movlw	1	; select bank2/3
 19817  0004' 0087               	movwf	7
 19818  0005' 1281               	bcf	1,5
 19819  0006' 0020               	movlb	0	; select bank0
 19820  0007' 198D               	btfsc	13,3	;volatile
 19821  0008' 1681               	bsf	1,5
 19822                           
 19823                           ;Buzzer_B1.c: 50: if (Buz->GO) {
 19824  0009' 0021               	movlb	1	; select bank1
 19825  000A' 0800'              	movf	_Buz^(0+128),w
 19826  000B' 0086               	movwf	6
 19827  000C' 3001               	movlw	1	; select bank2/3
 19828  000D' 0087               	movwf	7
 19829  000E' 1C81               	btfss	1,1
 19830  000F' 0008               	return
 19831                           
 19832                           ;Buzzer_B1.c: 52: if (Buz->Time >= Buz->TimeValue) {
 19833  0010' 0800'              	movf	_Buz^(0+128),w
 19834  0011' 3E06               	addlw	6
 19835  0012' 0086               	movwf	6
 19836  0013' 3001               	movlw	1	; select bank2/3
 19837  0014' 0087               	movwf	7
 19838  0015' 3F40               	moviw [0]fsr1
 19839  0016' 0020               	movlb	0	; select bank0
 19840  0017' 0080'              	movwf	??_Buzzer_Main
 19841  0018' 3F41               	moviw [1]fsr1
 19842  0019' 0081'              	movwf	??_Buzzer_Main+1
 19843  001A' 0021               	movlb	1	; select bank1
 19844  001B' 0A00'              	incf	_Buz^(0+128),w
 19845  001C' 0086               	movwf	6
 19846  001D' 3001               	movlw	1	; select bank2/3
 19847  001E' 0087               	movwf	7
 19848  001F' 3F40               	moviw [0]fsr1
 19849  0020' 0020               	movlb	0	; select bank0
 19850  0021' 0082'              	movwf	??_Buzzer_Main+2
 19851  0022' 3F41               	moviw [1]fsr1
 19852  0023' 0083'              	movwf	??_Buzzer_Main+3
 19853  0024' 0801'              	movf	??_Buzzer_Main+1,w
 19854  0025' 0203'              	subwf	??_Buzzer_Main+3,w
 19855  0026' 1D03               	skipz
 19856  0027' 2800'              	goto	u6585
 19857  0028' 0800'              	movf	??_Buzzer_Main,w
 19858  0029' 0202'              	subwf	??_Buzzer_Main+2,w
 19859  002A'                    u6585:	
 19860  002A' 1C03               	skipc
 19861  002B' 0008               	return
 19862                           
 19863                           ;Buzzer_B1.c: 53: Buz->Time = 0;
 19864  002C' 0021               	movlb	1	; select bank1
 19865  002D' 0A00'              	incf	_Buz^(0+128),w
 19866  002E' 0086               	movwf	6
 19867  002F' 3001               	movlw	1	; select bank2/3
 19868  0030' 0087               	movwf	7
 19869  0031' 3000               	movlw	0
 19870  0032' 3FC0               	movwi [0]fsr1
 19871  0033' 3FC1               	movwi [1]fsr1
 19872                           
 19873                           ;Buzzer_B1.c: 54: if (!Buz->Switch) {
 19874  0034' 0800'              	movf	_Buz^(0+128),w
 19875  0035' 0086               	movwf	6
 19876  0036' 3001               	movlw	1	; select bank2/3
 19877  0037' 0087               	movwf	7
 19878  0038' 1A81               	btfsc	1,5
 19879  0039' 2800'              	goto	l7513
 19880                           
 19881                           ;Buzzer_B1.c: 55: if (Buz->Count == 0) {
 19882  003A' 0800'              	movf	_Buz^(0+128),w
 19883  003B' 3E03               	addlw	3
 19884  003C' 0086               	movwf	6
 19885  003D' 3001               	movlw	1	; select bank2/3
 19886  003E' 0087               	movwf	7
 19887  003F' 0881               	movf	1,f
 19888  0040' 1D03               	skipz
 19889  0041' 2800'              	goto	l7509
 19890                           
 19891                           ;Buzzer_B1.c: 56: if (Buz->BufferStatus1) {
 19892  0042' 0800'              	movf	_Buz^(0+128),w
 19893  0043' 0086               	movwf	6
 19894  0044' 3001               	movlw	1	; select bank2/3
 19895  0045' 0087               	movwf	7
 19896  0046' 1D81               	btfss	1,3
 19897  0047' 2800'              	goto	l7501
 19898                           
 19899                           ;Buzzer_B1.c: 57: Buz->BufferStatus1 = 0;
 19900  0048' 0800'              	movf	_Buz^(0+128),w
 19901  0049' 0086               	movwf	6
 19902  004A' 3001               	movlw	1	; select bank2/3
 19903  004B' 0087               	movwf	7
 19904  004C' 1181               	bcf	1,3
 19905                           
 19906                           ;Buzzer_B1.c: 58: Buz->Count = Buz->CountBuffer1;
 19907  004D' 0800'              	movf	_Buz^(0+128),w
 19908  004E' 3E04               	addlw	4
 19909  004F' 0086               	movwf	6
 19910  0050' 3001               	movlw	1	; select bank2/3
 19911  0051' 0087               	movwf	7
 19912  0052' 0801               	movf	1,w
 19913  0053' 0020               	movlb	0	; select bank0
 19914  0054' 0080'              	movwf	??_Buzzer_Main
 19915  0055' 0021               	movlb	1	; select bank1
 19916  0056' 0800'              	movf	_Buz^(0+128),w
 19917  0057' 3E03               	addlw	3
 19918  0058' 0086               	movwf	6
 19919  0059' 3001               	movlw	1	; select bank2/3
 19920  005A' 0087               	movwf	7
 19921  005B' 0020               	movlb	0	; select bank0
 19922  005C' 0800'              	movf	??_Buzzer_Main,w
 19923  005D' 0081               	movwf	1
 19924                           
 19925                           ;Buzzer_B1.c: 59: Buz->TimeValue = Buz->TimeValueBuffer1;
 19926  005E' 0021               	movlb	1	; select bank1
 19927  005F' 0800'              	movf	_Buz^(0+128),w
 19928  0060' 3E08               	addlw	8
 19929  0061' 0086               	movwf	6
 19930  0062' 3001               	movlw	1	; select bank2/3
 19931  0063' 0087               	movwf	7
 19932  0064' 0800'              	movf	_Buz^(0+128),w
 19933  0065' 3E06               	addlw	6
 19934  0066' 0084               	movwf	4
 19935  0067' 3001               	movlw	1	; select bank2/3
 19936  0068' 0085               	movwf	5
 19937  0069' 3F40               	moviw [0]fsr1
 19938  006A' 3F80               	movwi [0]fsr0
 19939  006B' 3F41               	moviw [1]fsr1
 19940  006C' 3F81               	movwi [1]fsr0
 19941                           
 19942                           ;Buzzer_B1.c: 60: } else if (Buz->BufferStatus2) {
 19943  006D' 0008               	return
 19944  006E'                    l7501:	
 19945  006E' 0800'              	movf	_Buz^(0+128),w
 19946  006F' 0086               	movwf	6
 19947  0070' 3001               	movlw	1	; select bank2/3
 19948  0071' 0087               	movwf	7
 19949  0072' 1E01               	btfss	1,4
 19950  0073' 2800'              	goto	l7507
 19951                           
 19952                           ;Buzzer_B1.c: 61: Buz->BufferStatus2 = 0;
 19953  0074' 0800'              	movf	_Buz^(0+128),w
 19954  0075' 0086               	movwf	6
 19955  0076' 3001               	movlw	1	; select bank2/3
 19956  0077' 0087               	movwf	7
 19957  0078' 1201               	bcf	1,4
 19958                           
 19959                           ;Buzzer_B1.c: 62: Buz->Count = Buz->CountBuffer2;
 19960  0079' 0800'              	movf	_Buz^(0+128),w
 19961  007A' 3E05               	addlw	5
 19962  007B' 0086               	movwf	6
 19963  007C' 3001               	movlw	1	; select bank2/3
 19964  007D' 0087               	movwf	7
 19965  007E' 0801               	movf	1,w
 19966  007F' 0020               	movlb	0	; select bank0
 19967  0080' 0080'              	movwf	??_Buzzer_Main
 19968  0081' 0021               	movlb	1	; select bank1
 19969  0082' 0800'              	movf	_Buz^(0+128),w
 19970  0083' 3E03               	addlw	3
 19971  0084' 0086               	movwf	6
 19972  0085' 3001               	movlw	1	; select bank2/3
 19973  0086' 0087               	movwf	7
 19974  0087' 0020               	movlb	0	; select bank0
 19975  0088' 0800'              	movf	??_Buzzer_Main,w
 19976  0089' 0081               	movwf	1
 19977                           
 19978                           ;Buzzer_B1.c: 63: Buz->TimeValue = Buz->TimeValueBuffer2;
 19979  008A' 0021               	movlb	1	; select bank1
 19980  008B' 0800'              	movf	_Buz^(0+128),w
 19981  008C' 3E0A               	addlw	10
 19982  008D' 0086               	movwf	6
 19983  008E' 3001               	movlw	1	; select bank2/3
 19984  008F' 0087               	movwf	7
 19985  0090' 0800'              	movf	_Buz^(0+128),w
 19986  0091' 3E06               	addlw	6
 19987  0092' 0084               	movwf	4
 19988  0093' 3001               	movlw	1	; select bank2/3
 19989  0094' 0085               	movwf	5
 19990  0095' 3F40               	moviw [0]fsr1
 19991  0096' 3F80               	movwi [0]fsr0
 19992  0097' 3F41               	moviw [1]fsr1
 19993  0098' 3F81               	movwi [1]fsr0
 19994                           
 19995                           ;Buzzer_B1.c: 64: } else {
 19996  0099' 0008               	return
 19997  009A'                    l7507:	
 19998                           
 19999                           ;Buzzer_B1.c: 65: Buz->GO = 0;
 20000  009A' 0800'              	movf	_Buz^(0+128),w
 20001  009B' 0086               	movwf	6
 20002  009C' 3001               	movlw	1	; select bank2/3
 20003  009D' 0087               	movwf	7
 20004  009E' 1081               	bcf	1,1
 20005                           
 20006                           ;Buzzer_B1.c: 66: }
 20007                           ;Buzzer_B1.c: 67: } else {
 20008  009F' 0008               	return
 20009  00A0'                    l7509:	
 20010                           
 20011                           ;Buzzer_B1.c: 68: Buz->Switch = 1;
 20012  00A0' 0800'              	movf	_Buz^(0+128),w
 20013  00A1' 0086               	movwf	6
 20014  00A2' 3001               	movlw	1	; select bank2/3
 20015  00A3' 0087               	movwf	7
 20016  00A4' 1681               	bsf	1,5
 20017                           
 20018                           ;Buzzer_B1.c: 70: RB3 = 1;
 20019  00A5' 0020               	movlb	0	; select bank0
 20020  00A6' 158D               	bsf	13,3	;volatile
 20021                           
 20022                           ;Buzzer_B1.c: 71: }
 20023                           ;Buzzer_B1.c: 72: } else {
 20024  00A7' 0008               	return
 20025  00A8'                    l7513:	
 20026                           
 20027                           ;Buzzer_B1.c: 73: Buz->Switch = 0;
 20028  00A8' 0021               	movlb	1	; select bank1
 20029  00A9' 0800'              	movf	_Buz^(0+128),w
 20030  00AA' 0086               	movwf	6
 20031  00AB' 3001               	movlw	1	; select bank2/3
 20032  00AC' 0087               	movwf	7
 20033  00AD' 1281               	bcf	1,5
 20034                           
 20035                           ;Buzzer_B1.c: 75: RB3 = 0;
 20036  00AE' 0020               	movlb	0	; select bank0
 20037  00AF' 118D               	bcf	13,3	;volatile
 20038                           
 20039                           ;Buzzer_B1.c: 77: Buz->Count--;
 20040  00B0' 0021               	movlb	1	; select bank1
 20041  00B1' 0800'              	movf	_Buz^(0+128),w
 20042  00B2' 3E03               	addlw	3
 20043  00B3' 0086               	movwf	6
 20044  00B4' 3001               	movlw	1	; select bank2/3
 20045  00B5' 0087               	movwf	7
 20046  00B6' 3001               	movlw	1
 20047  00B7' 0281               	subwf	1,f
 20048  00B8' 0008               	return
 20049  00B9'                    __end_of_Buzzer_Main:	
 20050                           
 20051                           	psect	text138
 20052  0000'                    __ptext138:	
 20053 ;; *************** function _Buzzer_Initialization *****************
 20054 ;; Defined at:
 20055 ;;		line 11 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/Buzzer_B1.c"
 20056 ;; Parameters:    Size  Location     Type
 20057 ;;		None
 20058 ;; Auto vars:     Size  Location     Type
 20059 ;;		None
 20060 ;; Return value:  Size  Location     Type
 20061 ;;		None               void
 20062 ;; Registers used:
 20063 ;;		wreg, fsr1l, fsr1h
 20064 ;; Tracked objects:
 20065 ;;		On entry : 0/0
 20066 ;;		On exit  : 0/0
 20067 ;;		Unchanged: 0/0
 20068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20069 ;;      Params:         0       0       0       0       0       0       0       0
 20070 ;;      Locals:         0       0       0       0       0       0       0       0
 20071 ;;      Temps:          0       1       0       0       0       0       0       0
 20072 ;;      Totals:         0       1       0       0       0       0       0       0
 20073 ;;Total ram usage:        1 bytes
 20074 ;; Hardware stack levels used:    1
 20075 ;; Hardware stack levels required when called:    4
 20076 ;; This function calls:
 20077 ;;		Nothing
 20078 ;; This function is called by:
 20079 ;;		_main
 20080 ;; This function uses a non-reentrant model
 20081 ;;
 20082                           
 20083                           
 20084                           ;psect for function _Buzzer_Initialization
 20085  0000'                    _Buzzer_Initialization:	
 20086                           
 20087                           ;Buzzer_B1.c: 12: Buz = &Buz1;
 20088                           
 20089                           ;incstack = 0
 20090                           ; Regs used in _Buzzer_Initialization: [wregfsr1]
 20091  0000' 3000'              	movlw	_Buz1& (0+255)
 20092  0001' 0020               	movlb	0	; select bank0
 20093  0002' 0080'              	movwf	??_Buzzer_Initialization
 20094  0003' 0800'              	movf	??_Buzzer_Initialization,w
 20095  0004' 0021               	movlb	1	; select bank1
 20096  0005' 0080'              	movwf	_Buz^(0+128)
 20097                           
 20098                           ;Buzzer_B1.c: 13: Buz->Enable = 1;
 20099  0006' 0800'              	movf	_Buz^(0+128),w
 20100  0007' 0086               	movwf	6
 20101  0008' 3001               	movlw	1	; select bank2/3
 20102  0009' 0087               	movwf	7
 20103  000A' 1401               	bsf	1,0
 20104  000B' 0008               	return
 20105  000C'                    __end_of_Buzzer_Initialization:	
 20106                           
 20107                           	psect	intentry
 20108  0000'                    __pintentry:	
 20109 ;; *************** function _ISR *****************
 20110 ;; Defined at:
 20111 ;;		line 107 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20112 ;; Parameters:    Size  Location     Type
 20113 ;;		None
 20114 ;; Auto vars:     Size  Location     Type
 20115 ;;		None
 20116 ;; Return value:  Size  Location     Type
 20117 ;;		None               void
 20118 ;; Registers used:
 20119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20120 ;; Tracked objects:
 20121 ;;		On entry : 0/0
 20122 ;;		On exit  : 0/0
 20123 ;;		Unchanged: 0/0
 20124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20125 ;;      Params:         0       0       0       0       0       0       0       0
 20126 ;;      Locals:         0       0       0       0       0       0       0       0
 20127 ;;      Temps:          1       0       0       0       0       0       0       0
 20128 ;;      Totals:         1       0       0       0       0       0       0       0
 20129 ;;Total ram usage:        1 bytes
 20130 ;; Hardware stack levels used:    1
 20131 ;; Hardware stack levels required when called:    3
 20132 ;; This function calls:
 20133 ;;		_INT_ISR
 20134 ;;		_IOC_ISR
 20135 ;;		_TMR0_ISR
 20136 ;; This function is called by:
 20137 ;;		Interrupt level 1
 20138 ;; This function uses a non-reentrant model
 20139 ;;
 20140                           
 20141  0000'                    _ISR:	
 20142                           
 20143                           ;incstack = 0
 20144                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20145  0000' 147E               	bsf	126,0	;set compiler interrupt flag
 20146  0001' 3180'              	pagesel	$
 20147  0002' 0020               	movlb	0	; select bank0
 20148  0003' 087F               	movf	127,w
 20149  0004' 0086'              	movwf	??_ISR
 20150                           
 20151                           ;MCU_B1.c: 109: IOC_ISR();
 20152  0005' 3180' 2000' 3180'  	fcall	_IOC_ISR
 20153                           
 20154                           ;MCU_B1.c: 111: TMR0_ISR();
 20155  0008' 3180' 2000' 3180'  	fcall	_TMR0_ISR
 20156                           
 20157                           ;MCU_B1.c: 113: ;;
 20158                           ;MCU_B1.c: 117: INT_ISR();
 20159  000B' 3180' 2000'        	fcall	_INT_ISR
 20160  000D' 0806'              	movf	??_ISR,w
 20161  000E' 0020               	movlb	0	; select bank0
 20162  000F' 00FF               	movwf	127
 20163  0010' 107E               	bcf	126,0	;clear compiler interrupt flag
 20164  0011' 0009               	retfie
 20165  0012'                    __end_of_ISR:	
 20166                           
 20167                           	psect	text140
 20168  0000'                    __ptext140:	
 20169 ;; *************** function _TMR0_ISR *****************
 20170 ;; Defined at:
 20171 ;;		line 135 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20172 ;; Parameters:    Size  Location     Type
 20173 ;;		None
 20174 ;; Auto vars:     Size  Location     Type
 20175 ;;		None
 20176 ;; Return value:  Size  Location     Type
 20177 ;;		None               void
 20178 ;; Registers used:
 20179 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20180 ;; Tracked objects:
 20181 ;;		On entry : 0/0
 20182 ;;		On exit  : 0/0
 20183 ;;		Unchanged: 0/0
 20184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20185 ;;      Params:         0       0       0       0       0       0       0       0
 20186 ;;      Locals:         0       0       0       0       0       0       0       0
 20187 ;;      Temps:          4       0       0       0       0       0       0       0
 20188 ;;      Totals:         4       0       0       0       0       0       0       0
 20189 ;;Total ram usage:        4 bytes
 20190 ;; Hardware stack levels used:    1
 20191 ;; Hardware stack levels required when called:    1
 20192 ;; This function calls:
 20193 ;;		i1_setLoad_StatusOff
 20194 ;; This function is called by:
 20195 ;;		_ISR
 20196 ;; This function uses a non-reentrant model
 20197 ;;
 20198                           
 20199                           
 20200                           ;psect for function _TMR0_ISR
 20201  0000'                    _TMR0_ISR:	
 20202                           
 20203                           ;MCU_B1.c: 136: if (TMR0IE && TMR0IF) {
 20204                           
 20205                           ;incstack = 0
 20206                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20207  0000' 1E8B               	btfss	11,5	;volatile
 20208  0001' 0008               	return
 20209  0002' 1D0B               	btfss	11,2	;volatile
 20210  0003' 0008               	return
 20211                           
 20212                           ;MCU_B1.c: 137: TMR0 = (256-90);
 20213  0004' 30A6               	movlw	166
 20214  0005' 0020               	movlb	0	; select bank0
 20215  0006' 0095               	movwf	21	;volatile
 20216                           
 20217                           ;MCU_B1.c: 138: TMR0IF = 0;
 20218  0007' 110B               	bcf	11,2	;volatile
 20219                           
 20220                           ;MCU_B1.c: 143: if(DimmerLights11->GO) { DimmerLights11->Count++; if(DimmerLights11->Cou
      +                          nt >= (DimmerLights11->DimmingValue-Dimmer->Correction)) { DimmerLights11->Count=0; Dimm
      +                          erLights11->GO=0; DimmerLights11->Flag=1; if(DimmerLights11->StatusFlag) { RA7=1; RB4=1;
      +                           }
 20221  0008' 0801'              	movf	_DimmerLights11,w
 20222  0009' 0086               	movwf	6
 20223  000A' 3001               	movlw	1	; select bank2/3
 20224  000B' 0087               	movwf	7
 20225  000C' 1C01               	btfss	1,0
 20226  000D' 2800'              	goto	i1l7589
 20227  000E' 3001               	movlw	1
 20228  000F' 0082'              	movwf	??_TMR0_ISR
 20229  0010' 0801'              	movf	_DimmerLights11,w
 20230  0011' 3E03               	addlw	3
 20231  0012' 0086               	movwf	6
 20232  0013' 3001               	movlw	1	; select bank2/3
 20233  0014' 0087               	movwf	7
 20234  0015' 0802'              	movf	??_TMR0_ISR,w
 20235  0016' 0781               	addwf	1,f
 20236  0017' 0021               	movlb	1	; select bank1
 20237  0018' 0800'              	movf	_Dimmer^(0+128),w
 20238  0019' 3E02               	addlw	2
 20239  001A' 0086               	movwf	6
 20240  001B' 0187               	clrf	7
 20241  001C' 0801               	movf	1,w
 20242  001D' 0082'              	movwf	??_TMR0_ISR
 20243  001E' 0183'              	clrf	??_TMR0_ISR+1
 20244  001F' 0982'              	comf	??_TMR0_ISR,f
 20245  0020' 0983'              	comf	??_TMR0_ISR+1,f
 20246  0021' 0A82'              	incf	??_TMR0_ISR,f
 20247  0022' 1903               	skipnz
 20248  0023' 0A83'              	incf	??_TMR0_ISR+1,f
 20249  0024' 0801'              	movf	_DimmerLights11,w
 20250  0025' 3E04               	addlw	4
 20251  0026' 0086               	movwf	6
 20252  0027' 3001               	movlw	1	; select bank2/3
 20253  0028' 0087               	movwf	7
 20254  0029' 0801               	movf	1,w
 20255  002A' 0702'              	addwf	??_TMR0_ISR,w
 20256  002B' 0084'              	movwf	??_TMR0_ISR+2
 20257  002C' 0803'              	movf	??_TMR0_ISR+1,w
 20258  002D' 1803               	skipnc
 20259  002E' 0A03'              	incf	??_TMR0_ISR+1,w
 20260  002F' 0085'              	movwf	??_TMR0_ISR+3
 20261  0030' 0801'              	movf	_DimmerLights11,w
 20262  0031' 3E03               	addlw	3
 20263  0032' 0086               	movwf	6
 20264  0033' 3001               	movlw	1	; select bank2/3
 20265  0034' 0087               	movwf	7
 20266  0035' 0805'              	movf	??_TMR0_ISR+3,w
 20267  0036' 3A80               	xorlw	128
 20268  0037' 3C80               	sublw	128
 20269  0038' 1D03               	skipz
 20270  0039' 2800'              	goto	u670_25
 20271  003A' 0804'              	movf	??_TMR0_ISR+2,w
 20272  003B' 0201               	subwf	1,w
 20273  003C'                    u670_25:	
 20274  003C' 1C03               	skipc
 20275  003D' 2800'              	goto	i1l7659
 20276  003E' 0801'              	movf	_DimmerLights11,w
 20277  003F' 3E03               	addlw	3
 20278  0040' 0086               	movwf	6
 20279  0041' 3001               	movlw	1	; select bank2/3
 20280  0042' 0087               	movwf	7
 20281  0043' 0181               	clrf	1
 20282  0044' 0801'              	movf	_DimmerLights11,w
 20283  0045' 0086               	movwf	6
 20284  0046' 3001               	movlw	1	; select bank2/3
 20285  0047' 0087               	movwf	7
 20286  0048' 1001               	bcf	1,0
 20287  0049' 0801'              	movf	_DimmerLights11,w
 20288  004A' 3E07               	addlw	7
 20289  004B' 0086               	movwf	6
 20290  004C' 3001               	movlw	1	; select bank2/3
 20291  004D' 0087               	movwf	7
 20292  004E' 1401               	bsf	1,0
 20293  004F' 0801'              	movf	_DimmerLights11,w
 20294  0050' 0086               	movwf	6
 20295  0051' 3001               	movlw	1	; select bank2/3
 20296  0052' 0087               	movwf	7
 20297  0053' 1F01               	btfss	1,6
 20298  0054' 2800'              	goto	i1l7659
 20299  0055' 0020               	movlb	0	; select bank0
 20300  0056' 178C               	bsf	12,7	;volatile
 20301  0057' 160D               	bsf	13,4	;volatile
 20302  0058' 2800'              	goto	i1l7659
 20303  0059'                    i1l7589:	
 20304  0059' 0801'              	movf	_DimmerLights11,w
 20305  005A' 3E07               	addlw	7
 20306  005B' 0086               	movwf	6
 20307  005C' 3001               	movlw	1	; select bank2/3
 20308  005D' 0087               	movwf	7
 20309  005E' 1C01               	btfss	1,0
 20310  005F' 2800'              	goto	i1l7649
 20311  0060' 0801'              	movf	_DimmerLights11,w
 20312  0061' 3E07               	addlw	7
 20313  0062' 0086               	movwf	6
 20314  0063' 3001               	movlw	1	; select bank2/3
 20315  0064' 0087               	movwf	7
 20316  0065' 1001               	bcf	1,0
 20317  0066' 0801'              	movf	_DimmerLights11,w
 20318  0067' 0086               	movwf	6
 20319  0068' 3001               	movlw	1	; select bank2/3
 20320  0069' 0087               	movwf	7
 20321  006A' 1C81               	btfss	1,1
 20322  006B' 2800'              	goto	i1l7649
 20323  006C' 3001               	movlw	1
 20324  006D' 0082'              	movwf	??_TMR0_ISR
 20325  006E' 0A01'              	incf	_DimmerLights11,w
 20326  006F' 0086               	movwf	6
 20327  0070' 3001               	movlw	1	; select bank2/3
 20328  0071' 0087               	movwf	7
 20329  0072' 0802'              	movf	??_TMR0_ISR,w
 20330  0073' 0781               	addwf	1,f
 20331  0074' 0A01'              	incf	_DimmerLights11,w
 20332  0075' 0086               	movwf	6
 20333  0076' 3001               	movlw	1	; select bank2/3
 20334  0077' 0087               	movwf	7
 20335  0078' 0801'              	movf	_DimmerLights11,w
 20336  0079' 3E02               	addlw	2
 20337  007A' 0084               	movwf	4
 20338  007B' 3001               	movlw	1	; select bank2/3
 20339  007C' 0085               	movwf	5
 20340  007D' 0800               	movf	0,w
 20341  007E' 0201               	subwf	1,w
 20342  007F' 1C03               	skipc
 20343  0080' 2800'              	goto	i1l7649
 20344  0081' 0A01'              	incf	_DimmerLights11,w
 20345  0082' 0086               	movwf	6
 20346  0083' 3001               	movlw	1	; select bank2/3
 20347  0084' 0087               	movwf	7
 20348  0085' 0181               	clrf	1
 20349  0086' 0801'              	movf	_DimmerLights11,w
 20350  0087' 0086               	movwf	6
 20351  0088' 3001               	movlw	1	; select bank2/3
 20352  0089' 0087               	movwf	7
 20353  008A' 1D81               	btfss	1,3
 20354  008B' 2800'              	goto	i1l7615
 20355  008C' 0801'              	movf	_DimmerLights11,w
 20356  008D' 0086               	movwf	6
 20357  008E' 3001               	movlw	1	; select bank2/3
 20358  008F' 0087               	movwf	7
 20359  0090' 1A01               	btfsc	1,4
 20360  0091' 2800'              	goto	i1l7609
 20361  0092' 0801'              	movf	_DimmerLights11,w
 20362  0093' 3E04               	addlw	4
 20363  0094' 0086               	movwf	6
 20364  0095' 3001               	movlw	1	; select bank2/3
 20365  0096' 0087               	movwf	7
 20366  0097' 3044               	movlw	68
 20367  0098' 0201               	subwf	1,w
 20368  0099' 1C03               	skipc
 20369  009A' 2800'              	goto	i1l7607
 20370  009B' 0801'              	movf	_DimmerLights11,w
 20371  009C' 3E04               	addlw	4
 20372  009D' 0086               	movwf	6
 20373  009E' 3001               	movlw	1	; select bank2/3
 20374  009F' 0087               	movwf	7
 20375  00A0' 3001               	movlw	1
 20376  00A1' 0281               	subwf	1,f
 20377  00A2' 2800'              	goto	i1l7649
 20378  00A3'                    i1l7607:	
 20379  00A3' 0801'              	movf	_DimmerLights11,w
 20380  00A4' 0086               	movwf	6
 20381  00A5' 3001               	movlw	1	; select bank2/3
 20382  00A6' 0087               	movwf	7
 20383  00A7' 1601               	bsf	1,4
 20384  00A8' 2800'              	goto	i1l7649
 20385  00A9'                    i1l7609:	
 20386  00A9' 0801'              	movf	_DimmerLights11,w
 20387  00AA' 3E04               	addlw	4
 20388  00AB' 0086               	movwf	6
 20389  00AC' 3001               	movlw	1	; select bank2/3
 20390  00AD' 0087               	movwf	7
 20391  00AE' 3078               	movlw	120
 20392  00AF' 0201               	subwf	1,w
 20393  00B0' 1803               	skipnc
 20394  00B1' 2800'              	goto	i1l7613
 20395  00B2' 3001               	movlw	1
 20396  00B3' 0082'              	movwf	??_TMR0_ISR
 20397  00B4' 0801'              	movf	_DimmerLights11,w
 20398  00B5' 3E04               	addlw	4
 20399  00B6' 0086               	movwf	6
 20400  00B7' 3001               	movlw	1	; select bank2/3
 20401  00B8' 0087               	movwf	7
 20402  00B9' 0802'              	movf	??_TMR0_ISR,w
 20403  00BA' 0781               	addwf	1,f
 20404  00BB' 2800'              	goto	i1l7649
 20405  00BC'                    i1l7613:	
 20406  00BC' 0801'              	movf	_DimmerLights11,w
 20407  00BD' 0086               	movwf	6
 20408  00BE' 3001               	movlw	1	; select bank2/3
 20409  00BF' 0087               	movwf	7
 20410  00C0' 1201               	bcf	1,4
 20411  00C1' 2800'              	goto	i1l7649
 20412  00C2'                    i1l7615:	
 20413  00C2' 0801'              	movf	_DimmerLights11,w
 20414  00C3' 0086               	movwf	6
 20415  00C4' 3001               	movlw	1	; select bank2/3
 20416  00C5' 0087               	movwf	7
 20417  00C6' 1D01               	btfss	1,2
 20418  00C7' 2800'              	goto	i1l7629
 20419  00C8' 0801'              	movf	_DimmerLights11,w
 20420  00C9' 3E05               	addlw	5
 20421  00CA' 0086               	movwf	6
 20422  00CB' 3001               	movlw	1	; select bank2/3
 20423  00CC' 0087               	movwf	7
 20424  00CD' 0801'              	movf	_DimmerLights11,w
 20425  00CE' 3E04               	addlw	4
 20426  00CF' 0084               	movwf	4
 20427  00D0' 3001               	movlw	1	; select bank2/3
 20428  00D1' 0085               	movwf	5
 20429  00D2' 0800               	movf	0,w
 20430  00D3' 0201               	subwf	1,w
 20431  00D4' 1803               	skipnc
 20432  00D5' 2800'              	goto	i1l7621
 20433  00D6' 0801'              	movf	_DimmerLights11,w
 20434  00D7' 3E04               	addlw	4
 20435  00D8' 0086               	movwf	6
 20436  00D9' 3001               	movlw	1	; select bank2/3
 20437  00DA' 0087               	movwf	7
 20438  00DB' 3001               	movlw	1
 20439  00DC' 0281               	subwf	1,f
 20440  00DD' 2800'              	goto	i1l7625
 20441  00DE'                    i1l7621:	
 20442  00DE' 0801'              	movf	_DimmerLights11,w
 20443  00DF' 3E04               	addlw	4
 20444  00E0' 0086               	movwf	6
 20445  00E1' 3001               	movlw	1	; select bank2/3
 20446  00E2' 0087               	movwf	7
 20447  00E3' 0801'              	movf	_DimmerLights11,w
 20448  00E4' 3E05               	addlw	5
 20449  00E5' 0084               	movwf	4
 20450  00E6' 3001               	movlw	1	; select bank2/3
 20451  00E7' 0085               	movwf	5
 20452  00E8' 0800               	movf	0,w
 20453  00E9' 0201               	subwf	1,w
 20454  00EA' 1803               	skipnc
 20455  00EB' 2800'              	goto	i1l7625
 20456  00EC' 3001               	movlw	1
 20457  00ED' 0082'              	movwf	??_TMR0_ISR
 20458  00EE' 0801'              	movf	_DimmerLights11,w
 20459  00EF' 3E04               	addlw	4
 20460  00F0' 0086               	movwf	6
 20461  00F1' 3001               	movlw	1	; select bank2/3
 20462  00F2' 0087               	movwf	7
 20463  00F3' 0802'              	movf	??_TMR0_ISR,w
 20464  00F4' 0781               	addwf	1,f
 20465  00F5'                    i1l7625:	
 20466  00F5' 0801'              	movf	_DimmerLights11,w
 20467  00F6' 3E05               	addlw	5
 20468  00F7' 0086               	movwf	6
 20469  00F8' 3001               	movlw	1	; select bank2/3
 20470  00F9' 0087               	movwf	7
 20471  00FA' 0801'              	movf	_DimmerLights11,w
 20472  00FB' 3E04               	addlw	4
 20473  00FC' 0084               	movwf	4
 20474  00FD' 3001               	movlw	1	; select bank2/3
 20475  00FE' 0085               	movwf	5
 20476  00FF' 0800               	movf	0,w
 20477  0100' 0601               	xorwf	1,w
 20478  0101' 1D03               	skipz
 20479  0102' 2800'              	goto	i1l7649
 20480  0103' 0801'              	movf	_DimmerLights11,w
 20481  0104' 0086               	movwf	6
 20482  0105' 3001               	movlw	1	; select bank2/3
 20483  0106' 0087               	movwf	7
 20484  0107' 1101               	bcf	1,2
 20485  0108' 2800'              	goto	i1l7635
 20486  0109'                    i1l7629:	
 20487  0109' 0801'              	movf	_DimmerLights11,w
 20488  010A' 0086               	movwf	6
 20489  010B' 3001               	movlw	1	; select bank2/3
 20490  010C' 0087               	movwf	7
 20491  010D' 1E81               	btfss	1,5
 20492  010E' 2800'              	goto	i1l7637
 20493  010F' 0801'              	movf	_DimmerLights11,w
 20494  0110' 3E04               	addlw	4
 20495  0111' 0086               	movwf	6
 20496  0112' 3001               	movlw	1	; select bank2/3
 20497  0113' 0087               	movwf	7
 20498  0114' 3001               	movlw	1
 20499  0115' 0281               	subwf	1,f
 20500  0116' 0801'              	movf	_DimmerLights11,w
 20501  0117' 3E05               	addlw	5
 20502  0118' 0086               	movwf	6
 20503  0119' 3001               	movlw	1	; select bank2/3
 20504  011A' 0087               	movwf	7
 20505  011B' 0801'              	movf	_DimmerLights11,w
 20506  011C' 3E04               	addlw	4
 20507  011D' 0084               	movwf	4
 20508  011E' 3001               	movlw	1	; select bank2/3
 20509  011F' 0085               	movwf	5
 20510  0120' 0800               	movf	0,w
 20511  0121' 0201               	subwf	1,w
 20512  0122' 1C03               	skipc
 20513  0123' 2800'              	goto	i1l7649
 20514  0124'                    i1l7635:	
 20515  0124' 0801'              	movf	_DimmerLights11,w
 20516  0125' 0086               	movwf	6
 20517  0126' 3001               	movlw	1	; select bank2/3
 20518  0127' 0087               	movwf	7
 20519  0128' 1081               	bcf	1,1
 20520  0129' 2800'              	goto	i1l7649
 20521  012A'                    i1l7637:	
 20522  012A' 3001               	movlw	1
 20523  012B' 0082'              	movwf	??_TMR0_ISR
 20524  012C' 0801'              	movf	_DimmerLights11,w
 20525  012D' 3E04               	addlw	4
 20526  012E' 0086               	movwf	6
 20527  012F' 3001               	movlw	1	; select bank2/3
 20528  0130' 0087               	movwf	7
 20529  0131' 0802'              	movf	??_TMR0_ISR,w
 20530  0132' 0781               	addwf	1,f
 20531  0133' 0801'              	movf	_DimmerLights11,w
 20532  0134' 3E04               	addlw	4
 20533  0135' 0086               	movwf	6
 20534  0136' 3001               	movlw	1	; select bank2/3
 20535  0137' 0087               	movwf	7
 20536  0138' 0801'              	movf	_DimmerLights11,w
 20537  0139' 3E06               	addlw	6
 20538  013A' 0084               	movwf	4
 20539  013B' 3001               	movlw	1	; select bank2/3
 20540  013C' 0085               	movwf	5
 20541  013D' 0800               	movf	0,w
 20542  013E' 0201               	subwf	1,w
 20543  013F' 1C03               	skipc
 20544  0140' 2800'              	goto	i1l7649
 20545  0141' 0801'              	movf	_DimmerLights11,w
 20546  0142' 0086               	movwf	6
 20547  0143' 3001               	movlw	1	; select bank2/3
 20548  0144' 0087               	movwf	7
 20549  0145' 1081               	bcf	1,1
 20550  0146' 0801'              	movf	_DimmerLights11,w
 20551  0147' 0086               	movwf	6
 20552  0148' 3001               	movlw	1	; select bank2/3
 20553  0149' 0087               	movwf	7
 20554  014A' 1301               	bcf	1,6
 20555  014B' 0801'              	movf	_DimmerLights11,w
 20556  014C' 3E0C               	addlw	12
 20557  014D' 0086               	movwf	6
 20558  014E' 3001               	movlw	1	; select bank2/3
 20559  014F' 0087               	movwf	7
 20560  0150' 1401               	bsf	1,0
 20561  0151' 0021               	movlb	1	; select bank1
 20562  0152' 0800'              	movf	_Dimmer^(0+128),w
 20563  0153' 0086               	movwf	6
 20564  0154' 0187               	clrf	7
 20565  0155' 1401               	bsf	1,0
 20566  0156' 0020               	movlb	0	; select bank0
 20567  0157' 118C               	bcf	12,3	;volatile
 20568  0158' 138E               	bcf	14,7	;volatile
 20569  0159' 0180'              	clrf	i1setLoad_StatusOff@command
 20570  015A' 0A80'              	incf	i1setLoad_StatusOff@command,f
 20571  015B' 3001               	movlw	1
 20572  015C' 3180' 2000' 3180'  	fcall	i1_setLoad_StatusOff
 20573  015F'                    i1l7649:	
 20574  015F' 0020               	movlb	0	; select bank0
 20575  0160' 1F8C               	btfss	12,7	;volatile
 20576  0161' 2800'              	goto	i1l7659
 20577  0162' 3001               	movlw	1
 20578  0163' 0082'              	movwf	??_TMR0_ISR
 20579  0164' 0801'              	movf	_DimmerLights11,w
 20580  0165' 3E08               	addlw	8
 20581  0166' 0086               	movwf	6
 20582  0167' 3001               	movlw	1	; select bank2/3
 20583  0168' 0087               	movwf	7
 20584  0169' 0802'              	movf	??_TMR0_ISR,w
 20585  016A' 0781               	addwf	1,f
 20586  016B' 0801'              	movf	_DimmerLights11,w
 20587  016C' 3E04               	addlw	4
 20588  016D' 0086               	movwf	6
 20589  016E' 3001               	movlw	1	; select bank2/3
 20590  016F' 0087               	movwf	7
 20591  0170' 0801               	movf	1,w
 20592  0171' 0082'              	movwf	??_TMR0_ISR
 20593  0172' 0183'              	clrf	??_TMR0_ISR+1
 20594  0173' 0982'              	comf	??_TMR0_ISR,f
 20595  0174' 0983'              	comf	??_TMR0_ISR+1,f
 20596  0175' 0A82'              	incf	??_TMR0_ISR,f
 20597  0176' 1903               	skipnz
 20598  0177' 0A83'              	incf	??_TMR0_ISR+1,f
 20599  0178' 0802'              	movf	??_TMR0_ISR,w
 20600  0179' 3E78               	addlw	120
 20601  017A' 0084'              	movwf	??_TMR0_ISR+2
 20602  017B' 3000               	movlw	0
 20603  017C' 3D03'              	addwfc	??_TMR0_ISR+1,w
 20604  017D' 0085'              	movwf	??_TMR0_ISR+3
 20605  017E' 0801'              	movf	_DimmerLights11,w
 20606  017F' 3E08               	addlw	8
 20607  0180' 0086               	movwf	6
 20608  0181' 3001               	movlw	1	; select bank2/3
 20609  0182' 0087               	movwf	7
 20610  0183' 0805'              	movf	??_TMR0_ISR+3,w
 20611  0184' 3A80               	xorlw	128
 20612  0185' 3C80               	sublw	128
 20613  0186' 1D03               	skipz
 20614  0187' 2800'              	goto	u687_25
 20615  0188' 0804'              	movf	??_TMR0_ISR+2,w
 20616  0189' 0201               	subwf	1,w
 20617  018A'                    u687_25:	
 20618  018A' 1C03               	skipc
 20619  018B' 2800'              	goto	i1l7659
 20620  018C' 0801'              	movf	_DimmerLights11,w
 20621  018D' 3E08               	addlw	8
 20622  018E' 0086               	movwf	6
 20623  018F' 3001               	movlw	1	; select bank2/3
 20624  0190' 0087               	movwf	7
 20625  0191' 0181               	clrf	1
 20626  0192' 0020               	movlb	0	; select bank0
 20627  0193' 138C               	bcf	12,7	;volatile
 20628  0194' 120D               	bcf	13,4	;volatile
 20629  0195'                    i1l7659:	
 20630                           
 20631                           ;MCU_B1.c: 156: Timer0->Count++;
 20632  0195' 0021               	movlb	1	; select bank1
 20633  0196' 0A00'              	incf	_Timer0^(0+128),w
 20634  0197' 0086               	movwf	6
 20635  0198' 0187               	clrf	7
 20636  0199' 3001               	movlw	1
 20637  019A' 0781               	addwf	1,f
 20638  019B' 3141               	addfsr 1,1
 20639  019C' 1803               	skipnc
 20640  019D' 0A81               	incf	1,f
 20641                           
 20642                           ;MCU_B1.c: 157: if (Timer0->Count == 200) {
 20643  019E' 0A00'              	incf	_Timer0^(0+128),w
 20644  019F' 0086               	movwf	6
 20645  01A0' 0187               	clrf	7
 20646  01A1' 3F40               	moviw [0]fsr1
 20647  01A2' 3AC8               	xorlw	200
 20648  01A3' 1D03               	skipz
 20649  01A4' 2800'              	goto	u688_25
 20650  01A5' 3F41               	moviw [1]fsr1
 20651  01A6' 3A00               	xorlw	0
 20652  01A7'                    u688_25:	
 20653  01A7' 1D03               	skipz
 20654  01A8' 2800'              	goto	i1l1322
 20655                           
 20656                           ;MCU_B1.c: 158: Timer0->Count = 0;
 20657  01A9' 0A00'              	incf	_Timer0^(0+128),w
 20658  01AA' 0086               	movwf	6
 20659  01AB' 0187               	clrf	7
 20660  01AC' 3000               	movlw	0
 20661  01AD' 3FC0               	movwi [0]fsr1
 20662  01AE' 3FC1               	movwi [1]fsr1
 20663                           
 20664                           ;MCU_B1.c: 159: myMain->T0_Timerout = 1;
 20665  01AF' 0800'              	movf	_myMain^(0+128),w
 20666  01B0' 0086               	movwf	6
 20667  01B1' 3001               	movlw	1	; select bank2/3
 20668  01B2' 0087               	movwf	7
 20669  01B3' 1481               	bsf	1,1
 20670  01B4'                    i1l1322:	
 20671                           
 20672                           ;MCU_B1.c: 160: }
 20673                           ;MCU_B1.c: 163: if (Buz->GO) {
 20674  01B4' 0800'              	movf	_Buz^(0+128),w
 20675  01B5' 0086               	movwf	6
 20676  01B6' 3001               	movlw	1	; select bank2/3
 20677  01B7' 0087               	movwf	7
 20678  01B8' 1C81               	btfss	1,1
 20679  01B9' 0008               	return
 20680                           
 20681                           ;MCU_B1.c: 164: Buz->Time++;
 20682  01BA' 0A00'              	incf	_Buz^(0+128),w
 20683  01BB' 0086               	movwf	6
 20684  01BC' 3001               	movlw	1	; select bank2/3
 20685  01BD' 0087               	movwf	7
 20686  01BE' 3001               	movlw	1
 20687  01BF' 0781               	addwf	1,f
 20688  01C0' 3141               	addfsr 1,1
 20689  01C1' 1803               	skipnc
 20690  01C2' 0A81               	incf	1,f
 20691  01C3' 0008               	return
 20692  01C4'                    __end_of_TMR0_ISR:	
 20693                           
 20694                           	psect	text141
 20695  0000'                    __ptext141:	
 20696 ;; *************** function i1_setLoad_StatusOff *****************
 20697 ;; Defined at:
 20698 ;;		line 284 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/OverLoad_B1.c"
 20699 ;; Parameters:    Size  Location     Type
 20700 ;;  lights          1    wreg     unsigned char 
 20701 ;;  command         1    0[COMMON] unsigned char 
 20702 ;; Auto vars:     Size  Location     Type
 20703 ;;  lights          1    1[COMMON] unsigned char 
 20704 ;; Return value:  Size  Location     Type
 20705 ;;		None               void
 20706 ;; Registers used:
 20707 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20708 ;; Tracked objects:
 20709 ;;		On entry : 0/0
 20710 ;;		On exit  : 0/0
 20711 ;;		Unchanged: 0/0
 20712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20713 ;;      Params:         1       0       0       0       0       0       0       0
 20714 ;;      Locals:         1       0       0       0       0       0       0       0
 20715 ;;      Temps:          0       0       0       0       0       0       0       0
 20716 ;;      Totals:         2       0       0       0       0       0       0       0
 20717 ;;Total ram usage:        2 bytes
 20718 ;; Hardware stack levels used:    1
 20719 ;; This function calls:
 20720 ;;		Nothing
 20721 ;; This function is called by:
 20722 ;;		_TMR0_ISR
 20723 ;; This function uses a non-reentrant model
 20724 ;;
 20725                           
 20726                           
 20727                           ;psect for function i1_setLoad_StatusOff
 20728  0000'                    i1_setLoad_StatusOff:	
 20729                           
 20730                           ;incstack = 0
 20731                           ; Regs used in i1_setLoad_StatusOff: [wreg+fsr1l+fsr1h+status,2+status,0]
 20732                           ;i1setLoad_StatusOff@lights stored from wreg
 20733  0000' 0081'              	movwf	i1setLoad_StatusOff@lights
 20734                           
 20735                           ;OverLoad_B1.c: 285: Load->StatusOff = command;
 20736  0001' 0804'              	movf	_Load,w
 20737  0002' 3E46               	addlw	70
 20738  0003' 0086               	movwf	6
 20739  0004' 3002               	movlw	2	; select bank4/5
 20740  0005' 0087               	movwf	7
 20741  0006' 0800'              	movf	i1setLoad_StatusOff@command,w
 20742  0007' 1081               	bcf	1,1
 20743  0008' 1D03               	skipz
 20744  0009' 1481               	bsf	1,1
 20745                           
 20746                           ;OverLoad_B1.c: 286: Load->SafeCount -= 2;
 20747  000A' 0804'              	movf	_Load,w
 20748  000B' 3E42               	addlw	66
 20749  000C' 0086               	movwf	6
 20750  000D' 3002               	movlw	2	; select bank4/5
 20751  000E' 0087               	movwf	7
 20752  000F' 3002               	movlw	2
 20753  0010' 0281               	subwf	1,f
 20754                           
 20755                           ;OverLoad_B1.c: 287: if (lights == 1) {
 20756  0011' 0801'              	movf	i1setLoad_StatusOff@lights,w
 20757  0012' 3A01               	xorlw	1
 20758  0013' 1D03               	skipz
 20759  0014' 2800'              	goto	i1l7475
 20760                           
 20761                           ;OverLoad_B1.c: 288: Load->Lights1Status = 0;
 20762  0015' 0804'              	movf	_Load,w
 20763  0016' 3E43               	addlw	67
 20764  0017' 0086               	movwf	6
 20765  0018' 3002               	movlw	2	; select bank4/5
 20766  0019' 0087               	movwf	7
 20767  001A' 0181               	clrf	1
 20768  001B'                    i1l7475:	
 20769                           
 20770                           ;OverLoad_B1.c: 289: }
 20771                           ;OverLoad_B1.c: 290: if (lights == 2) {
 20772  001B' 0801'              	movf	i1setLoad_StatusOff@lights,w
 20773  001C' 3A02               	xorlw	2
 20774  001D' 1D03               	skipz
 20775  001E' 2800'              	goto	i1l7479
 20776                           
 20777                           ;OverLoad_B1.c: 291: Load->Lights2Status = 0;
 20778  001F' 0804'              	movf	_Load,w
 20779  0020' 3E44               	addlw	68
 20780  0021' 0086               	movwf	6
 20781  0022' 3002               	movlw	2	; select bank4/5
 20782  0023' 0087               	movwf	7
 20783  0024' 0181               	clrf	1
 20784  0025'                    i1l7479:	
 20785                           
 20786                           ;OverLoad_B1.c: 292: }
 20787                           ;OverLoad_B1.c: 293: if (lights == 3) {
 20788  0025' 0801'              	movf	i1setLoad_StatusOff@lights,w
 20789  0026' 3A03               	xorlw	3
 20790  0027' 1D03               	skipz
 20791  0028' 0008               	return
 20792                           
 20793                           ;OverLoad_B1.c: 294: Load->Lights3Status = 0;
 20794  0029' 0804'              	movf	_Load,w
 20795  002A' 3E45               	addlw	69
 20796  002B' 0086               	movwf	6
 20797  002C' 3002               	movlw	2	; select bank4/5
 20798  002D' 0087               	movwf	7
 20799  002E' 0181               	clrf	1
 20800  002F' 0008               	return
 20801  0030'                    __end_ofi1_setLoad_StatusOff:	
 20802                           
 20803                           	psect	text142
 20804  0000'                    __ptext142:	
 20805 ;; *************** function _IOC_ISR *****************
 20806 ;; Defined at:
 20807 ;;		line 336 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20808 ;; Parameters:    Size  Location     Type
 20809 ;;		None
 20810 ;; Auto vars:     Size  Location     Type
 20811 ;;		None
 20812 ;; Return value:  Size  Location     Type
 20813 ;;		None               void
 20814 ;; Registers used:
 20815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20816 ;; Tracked objects:
 20817 ;;		On entry : 0/0
 20818 ;;		On exit  : 0/0
 20819 ;;		Unchanged: 0/0
 20820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20821 ;;      Params:         0       0       0       0       0       0       0       0
 20822 ;;      Locals:         0       0       0       0       0       0       0       0
 20823 ;;      Temps:          1       0       0       0       0       0       0       0
 20824 ;;      Totals:         1       0       0       0       0       0       0       0
 20825 ;;Total ram usage:        1 bytes
 20826 ;; Hardware stack levels used:    1
 20827 ;; Hardware stack levels required when called:    1
 20828 ;; This function calls:
 20829 ;;		_setDimmerReClock
 20830 ;; This function is called by:
 20831 ;;		_ISR
 20832 ;; This function uses a non-reentrant model
 20833 ;;
 20834                           
 20835                           
 20836                           ;psect for function _IOC_ISR
 20837  0000'                    _IOC_ISR:	
 20838                           
 20839                           ;MCU_B1.c: 337: if (IOCIE && IOCBF2) {
 20840                           
 20841                           ;incstack = 0
 20842                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20843  0000' 1D8B               	btfss	11,3	;volatile
 20844  0001' 0008               	return
 20845  0002' 0027               	movlb	7	; select bank7
 20846  0003' 1D16               	btfss	22,2	;volatile
 20847  0004' 0008               	return
 20848                           
 20849                           ;MCU_B1.c: 338: IOCBF2 = 0;
 20850  0005' 1116               	bcf	22,2	;volatile
 20851                           
 20852                           ;MCU_B1.c: 339: IOCIF = 0;
 20853  0006' 100B               	bcf	11,0	;volatile
 20854                           
 20855                           ;MCU_B1.c: 340: if (myMain->PowerON) {
 20856  0007' 0021               	movlb	1	; select bank1
 20857  0008' 0800'              	movf	_myMain^(0+128),w
 20858  0009' 0086               	movwf	6
 20859  000A' 3001               	movlw	1	; select bank2/3
 20860  000B' 0087               	movwf	7
 20861  000C' 1C01               	btfss	1,0
 20862  000D' 0008               	return
 20863                           
 20864                           ;MCU_B1.c: 344: setDimmerReClock();
 20865  000E' 3180' 2000' 3180'  	fcall	_setDimmerReClock
 20866                           
 20867                           ;MCU_B1.c: 345: if (RB2) {
 20868  0011' 0020               	movlb	0	; select bank0
 20869  0012' 1D0D               	btfss	13,2	;volatile
 20870  0013' 2800'              	goto	i1l7565
 20871                           
 20872                           ;MCU_B1.c: 346: Dimmer->Correction = 0;
 20873  0014' 0021               	movlb	1	; select bank1
 20874  0015' 0800'              	movf	_Dimmer^(0+128),w
 20875  0016' 3E02               	addlw	2
 20876  0017' 0086               	movwf	6
 20877  0018' 0187               	clrf	7
 20878  0019' 0181               	clrf	1
 20879                           
 20880                           ;MCU_B1.c: 347: } else {
 20881  001A' 0008               	return
 20882  001B'                    i1l7565:	
 20883                           
 20884                           ;MCU_B1.c: 348: Dimmer->Correction = 8;
 20885  001B' 3008               	movlw	8
 20886  001C' 0080'              	movwf	??_IOC_ISR
 20887  001D' 0021               	movlb	1	; select bank1
 20888  001E' 0800'              	movf	_Dimmer^(0+128),w
 20889  001F' 3E02               	addlw	2
 20890  0020' 0086               	movwf	6
 20891  0021' 0187               	clrf	7
 20892  0022' 0800'              	movf	??_IOC_ISR,w
 20893  0023' 0081               	movwf	1
 20894  0024' 0008               	return
 20895  0025'                    __end_of_IOC_ISR:	
 20896                           
 20897                           	psect	text143
 20898  0000'                    __ptext143:	
 20899 ;; *************** function _setDimmerReClock *****************
 20900 ;; Defined at:
 20901 ;;		line 173 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20902 ;; Parameters:    Size  Location     Type
 20903 ;;		None
 20904 ;; Auto vars:     Size  Location     Type
 20905 ;;		None
 20906 ;; Return value:  Size  Location     Type
 20907 ;;		None               void
 20908 ;; Registers used:
 20909 ;;		wreg, fsr1l, fsr1h
 20910 ;; Tracked objects:
 20911 ;;		On entry : 0/0
 20912 ;;		On exit  : 0/0
 20913 ;;		Unchanged: 0/0
 20914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20915 ;;      Params:         0       0       0       0       0       0       0       0
 20916 ;;      Locals:         0       0       0       0       0       0       0       0
 20917 ;;      Temps:          0       0       0       0       0       0       0       0
 20918 ;;      Totals:         0       0       0       0       0       0       0       0
 20919 ;;Total ram usage:        0 bytes
 20920 ;; Hardware stack levels used:    1
 20921 ;; This function calls:
 20922 ;;		Nothing
 20923 ;; This function is called by:
 20924 ;;		_IOC_ISR
 20925 ;; This function uses a non-reentrant model
 20926 ;;
 20927                           
 20928                           
 20929                           ;psect for function _setDimmerReClock
 20930  0000'                    _setDimmerReClock:	
 20931                           
 20932                           ;MCU_B1.c: 174: TMR0 = 255;
 20933                           
 20934                           ;incstack = 0
 20935                           ; Regs used in _setDimmerReClock: [wregfsr1]
 20936  0000' 30FF               	movlw	255
 20937  0001' 0020               	movlb	0	; select bank0
 20938  0002' 0095               	movwf	21	;volatile
 20939                           
 20940                           ;MCU_B1.c: 179: if (!DimmerLights11->GO) {
 20941  0003' 0801'              	movf	_DimmerLights11,w
 20942  0004' 0086               	movwf	6
 20943  0005' 3001               	movlw	1	; select bank2/3
 20944  0006' 0087               	movwf	7
 20945  0007' 1801               	btfsc	1,0
 20946  0008' 0008               	return
 20947                           
 20948                           ;MCU_B1.c: 180: DimmerLights11->GO = 1;
 20949  0009' 0801'              	movf	_DimmerLights11,w
 20950  000A' 0086               	movwf	6
 20951  000B' 3001               	movlw	1	; select bank2/3
 20952  000C' 0087               	movwf	7
 20953  000D' 1401               	bsf	1,0
 20954  000E' 0008               	return
 20955  000F'                    __end_of_setDimmerReClock:	
 20956                           
 20957                           	psect	text144
 20958  0000'                    __ptext144:	
 20959 ;; *************** function _INT_ISR *****************
 20960 ;; Defined at:
 20961 ;;		line 289 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/MCU_B1.c"
 20962 ;; Parameters:    Size  Location     Type
 20963 ;;		None
 20964 ;; Auto vars:     Size  Location     Type
 20965 ;;		None
 20966 ;; Return value:  Size  Location     Type
 20967 ;;		None               void
 20968 ;; Registers used:
 20969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20970 ;; Tracked objects:
 20971 ;;		On entry : 0/0
 20972 ;;		On exit  : 0/0
 20973 ;;		Unchanged: 0/0
 20974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 20975 ;;      Params:         0       0       0       0       0       0       0       0
 20976 ;;      Locals:         0       0       0       0       0       0       0       0
 20977 ;;      Temps:          0       0       0       0       0       0       0       0
 20978 ;;      Totals:         0       0       0       0       0       0       0       0
 20979 ;;Total ram usage:        0 bytes
 20980 ;; Hardware stack levels used:    1
 20981 ;; Hardware stack levels required when called:    2
 20982 ;; This function calls:
 20983 ;;		_setRF_ReceiveGO
 20984 ;; This function is called by:
 20985 ;;		_ISR
 20986 ;; This function uses a non-reentrant model
 20987 ;;
 20988                           
 20989                           
 20990                           ;psect for function _INT_ISR
 20991  0000'                    _INT_ISR:	
 20992                           
 20993                           ;MCU_B1.c: 290: if (INTE && INTF) {
 20994                           
 20995                           ;incstack = 0
 20996                           ; Regs used in _INT_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20997  0000' 1E0B               	btfss	11,4	;volatile
 20998  0001' 0008               	return
 20999  0002' 1C8B               	btfss	11,1	;volatile
 21000  0003' 0008               	return
 21001                           
 21002                           ;MCU_B1.c: 291: INTF = 0;
 21003  0004' 108B               	bcf	11,1	;volatile
 21004                           
 21005                           ;MCU_B1.c: 292: INTE = 0;
 21006  0005' 120B               	bcf	11,4	;volatile
 21007                           
 21008                           ;MCU_B1.c: 293: setRF_ReceiveGO(1, 1);
 21009  0006' 0182'              	clrf	setRF_ReceiveGO@command
 21010  0007' 0A82'              	incf	setRF_ReceiveGO@command,f
 21011  0008' 3001               	movlw	1
 21012  0009' 3180' 2000'        	fcall	_setRF_ReceiveGO
 21013  000B' 0008               	return
 21014  000C'                    __end_of_INT_ISR:	
 21015                           
 21016                           	psect	text145
 21017  0000'                    __ptext145:	
 21018 ;; *************** function _setRF_ReceiveGO *****************
 21019 ;; Defined at:
 21020 ;;		line 36 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 21021 ;; Parameters:    Size  Location     Type
 21022 ;;  rf              1    wreg     unsigned char 
 21023 ;;  command         1    2[COMMON] unsigned char 
 21024 ;; Auto vars:     Size  Location     Type
 21025 ;;  rf              1    3[COMMON] unsigned char 
 21026 ;; Return value:  Size  Location     Type
 21027 ;;		None               void
 21028 ;; Registers used:
 21029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21030 ;; Tracked objects:
 21031 ;;		On entry : 0/0
 21032 ;;		On exit  : 0/0
 21033 ;;		Unchanged: 0/0
 21034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 21035 ;;      Params:         1       0       0       0       0       0       0       0
 21036 ;;      Locals:         1       0       0       0       0       0       0       0
 21037 ;;      Temps:          0       0       0       0       0       0       0       0
 21038 ;;      Totals:         2       0       0       0       0       0       0       0
 21039 ;;Total ram usage:        2 bytes
 21040 ;; Hardware stack levels used:    1
 21041 ;; Hardware stack levels required when called:    1
 21042 ;; This function calls:
 21043 ;;		i1_RfPointSelect
 21044 ;; This function is called by:
 21045 ;;		_INT_ISR
 21046 ;; This function uses a non-reentrant model
 21047 ;;
 21048                           
 21049                           
 21050                           ;psect for function _setRF_ReceiveGO
 21051  0000'                    _setRF_ReceiveGO:	
 21052                           
 21053                           ;incstack = 0
 21054                           ; Regs used in _setRF_ReceiveGO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21055                           ;setRF_ReceiveGO@rf stored from wreg
 21056  0000' 0083'              	movwf	setRF_ReceiveGO@rf
 21057                           
 21058                           ;RF_Control_B1.c: 37: RfPointSelect(rf);
 21059  0001' 0803'              	movf	setRF_ReceiveGO@rf,w
 21060  0002' 3180' 2000'        	fcall	i1_RfPointSelect
 21061                           
 21062                           ;RF_Control_B1.c: 38: RF->ReceiveGO = command;
 21063  0004' 0021               	movlb	1	; select bank1
 21064  0005' 0800'              	movf	_RF^(0+128),w
 21065  0006' 0086               	movwf	6
 21066  0007' 0187               	clrf	7
 21067  0008' 0802'              	movf	setRF_ReceiveGO@command,w
 21068  0009' 1081               	bcf	1,1
 21069  000A' 1D03               	skipz
 21070  000B' 1481               	bsf	1,1
 21071  000C' 0008               	return
 21072  000D'                    __end_of_setRF_ReceiveGO:	
 21073                           
 21074                           	psect	text146
 21075  0000'                    __ptext146:	
 21076 ;; *************** function i1_RfPointSelect *****************
 21077 ;; Defined at:
 21078 ;;		line 7 in file "C:/Users/taianluo/Documents/GitHub/myCcode/PIC/src/RF_Control_B1.c"
 21079 ;; Parameters:    Size  Location     Type
 21080 ;;  rf              1    wreg     unsigned char 
 21081 ;; Auto vars:     Size  Location     Type
 21082 ;;  rf              1    1[COMMON] unsigned char 
 21083 ;; Return value:  Size  Location     Type
 21084 ;;		None               void
 21085 ;; Registers used:
 21086 ;;		wreg
 21087 ;; Tracked objects:
 21088 ;;		On entry : 0/0
 21089 ;;		On exit  : 0/0
 21090 ;;		Unchanged: 0/0
 21091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 21092 ;;      Params:         0       0       0       0       0       0       0       0
 21093 ;;      Locals:         1       0       0       0       0       0       0       0
 21094 ;;      Temps:          1       0       0       0       0       0       0       0
 21095 ;;      Totals:         2       0       0       0       0       0       0       0
 21096 ;;Total ram usage:        2 bytes
 21097 ;; Hardware stack levels used:    1
 21098 ;; This function calls:
 21099 ;;		Nothing
 21100 ;; This function is called by:
 21101 ;;		_setRF_ReceiveGO
 21102 ;; This function uses a non-reentrant model
 21103 ;;
 21104                           
 21105                           
 21106                           ;psect for function i1_RfPointSelect
 21107  0000'                    i1_RfPointSelect:	
 21108                           
 21109                           ;incstack = 0
 21110                           ; Regs used in i1_RfPointSelect: [wreg]
 21111                           ;i1RfPointSelect@rf stored from wreg
 21112  0000' 0081'              	movwf	i1RfPointSelect@rf
 21113                           
 21114                           ;RF_Control_B1.c: 9: if (rf == 1) {
 21115  0001' 0801'              	movf	i1RfPointSelect@rf,w
 21116  0002' 3A01               	xorlw	1
 21117  0003' 1D03               	skipz
 21118  0004' 0008               	return
 21119                           
 21120                           ;RF_Control_B1.c: 10: RF = &RF1;
 21121  0005' 3000'              	movlw	_RF1& (0+255)
 21122  0006' 0080'              	movwf	??i1_RfPointSelect
 21123  0007' 0800'              	movf	??i1_RfPointSelect,w
 21124  0008' 0021               	movlb	1	; select bank1
 21125  0009' 0080'              	movwf	_RF^(0+128)
 21126  000A' 0008               	return
 21127  000B'                    __end_ofi1_RfPointSelect:	
 21128  007E                     btemp	set	126	;btemp
 21129  007E                     pic14e$flags	set	126
 21130  007E                     wtemp	set	126
 21131  007E                     wtemp0	set	126
 21132  0080                     wtemp1	set	128
 21133  0082                     wtemp2	set	130
 21134  0084                     wtemp3	set	132
 21135  0086                     wtemp4	set	134
 21136  0088                     wtemp5	set	136
 21137  007F                     wtemp6	set	127
 21138  007E                     ttemp	set	126
 21139  007E                     ttemp0	set	126
 21140  0081                     ttemp1	set	129
 21141  0084                     ttemp2	set	132
 21142  0087                     ttemp3	set	135
 21143  007F                     ttemp4	set	127
 21144  007E                     ltemp	set	126
 21145  007E                     ltemp0	set	126
 21146  0082                     ltemp1	set	130
 21147  0086                     ltemp2	set	134
 21148  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         261
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     80      80
    BANK1            80      0      78
    BANK2            80      0      74
    BANK3            80      0      69
    BANK4            80      0      71
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    RF	PTR struct RF size(1) Largest target is 3
		 -> NULL(NULL[0]), RF1(BANK1[3]), 

    PF	PTR struct PF size(1) Largest target is 8
		 -> NULL(NULL[0]), PF1(BANK2[8]), 

    Temp	PTR struct OverTemp size(1) Largest target is 14
		 -> NULL(NULL[0]), Temp1(BANK2[14]), 

    Load	PTR struct OverLoad size(1) Largest target is 71
		 -> NULL(NULL[0]), Load1(BANK4[71]), 

    WDT	PTR struct WDT size(1) Largest target is 2
		 -> NULL(NULL[0]), _WDT(BANK1[2]), 

    Timer0	PTR struct Timer0 size(1) Largest target is 9
		 -> NULL(NULL[0]), VarTimer0(BANK1[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 

    myMain	PTR struct myMain size(1) Largest target is 17
		 -> NULL(NULL[0]), _myMain(BANK2[17]), 

    Memory	PTR struct FlashMemory size(1) Largest target is 37
		 -> NULL(NULL[0]), VarMemory(BANK3[37]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 14
		 -> NULL(NULL[0]), DimmerLights1(BANK2[14]), 

    Product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), VarProduct(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK1[5]), 

    Buz	PTR struct Buzzer size(1) Largest target is 12
		 -> NULL(NULL[0]), Buz1(BANK2[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_TMR0_ISR
    _TMR0_ISR->i1_setLoad_StatusOff
    _INT_ISR->_setRF_ReceiveGO
    _setRF_ReceiveGO->i1_RfPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Temp_Initialization->_setTemp_Initialization
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _setRF_Learn->_RfPointSelect
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _getRxData->_setControl_Lights_Table
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_RxData->_setRF_RxStatus
    _setRF_RxStatus->_RfPointSelect
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _PowerFault_Initialization->_setPowerFault_Initialization
    _Mcu_Initialization->_TMR0_Set
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_setLoad_Exceptions
    _setLoad_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _setRF_Enable->_RfPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _setDimmerLights_Clear->_DimmerLightsPointSelect
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_getDimmerLights_StatusFlag
    _DimmerLights_Close->_setLoad_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setTxData->_RfPointSelect
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___wmul
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  109493
                                             76 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    2049
                             _setBuz
                     _setLoad_Enable
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLoad_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     5     5      0     324
                                              4 BANK0      5     5      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     624
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     293
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    8274
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    8274
                                             13 BANK0      3     3      0
                       _getLoad_Safe
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               2     2      0    8274
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   21707
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   21707
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     1      1     315
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9556
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8993
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1149
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1409
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1409
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29229
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           3     3      0   29229
                                             73 BANK0      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                      _RfPointSelect
                          _getRxData
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   28225
                                             72 BANK0      1     1      0
                      _RfPointSelect
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          2     2      0    1564
                                             10 BANK0      2     2      0
                      _RfPointSelect
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              1     1      0   26608
                                             71 BANK0      1     1      0
                      _RfPointSelect
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   10674
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     959
                                              3 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11311
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         1     1      0     152
                                              4 BANK0      1     1      0
                _CC2500_WriteCommand
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     503
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                     _setRF_RxStatus
 ---------------------------------------------------------------------------------
 (4) _setRF_RxStatus                                       2     1      1     161
                                              2 BANK0      2     1      1
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6763
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   2     2      0    6763
                                             13 BANK0      2     2      0
                       _getLoad_Safe
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             2     2      0    6763
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getLoad_Safe                                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   1     1      0       0
                                              1 BANK0      1     1      0
                            _ADC_Set
                           _Fosc_Set
                            _INT_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INT_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            5     5      0    8114
                                             13 BANK0      5     5      0
                            ___lwdiv
                             ___wmul
                         _getPF_Safe
                       _getTemp_Safe
              _setDimmerLights_Clear
              _setLoad_AH_AL_Restore
                 _setLoad_Exceptions
 ---------------------------------------------------------------------------------
 (2) _setLoad_Exceptions                                   2     2      0    6794
                                             11 BANK0      2     2      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      53
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         2     1      1     423
                                              2 BANK0      2     1      1
                      _RfPointSelect
                          _setINT_GO
 ---------------------------------------------------------------------------------
 (3) _setINT_GO                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4754
                                             10 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     254
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2859
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                  _setLoad_StatusOff
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Clear                                2     1      1     238
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  1     1      0      90
                                              2 BANK0      1     1      0
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1475
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1475
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     307
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  3     3      0     307
                                              4 BANK0      3     3      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5827
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     130
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      47
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10813
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10745
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6961
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                  _setLoad_StatusOff
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOff                                    2     1      1     320
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2000
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                      _setLoad_Count
                   _setLoad_StatusOn
 ---------------------------------------------------------------------------------
 (6) _setLoad_StatusOn                                     2     1      1     201
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (6) _setLoad_Count                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1347
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      68
         _getDimmerLights_StatusFlag
                         _setLoad_GO
 ---------------------------------------------------------------------------------
 (3) _setLoad_GO                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10044
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10044
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            3     3      0      44
                                              2 BANK0      2     2      0
                      _RfPointSelect
 ---------------------------------------------------------------------------------
 (3) _RfPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     469
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6328
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5458
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     546
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     469
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1511
                                              6 BANK0      4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     444
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      53
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      53
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1869
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     490
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     512
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          4     4      0       0
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     244
                                              6 COMMON     1     1      0
                            _INT_ISR
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            4     4      0     114
                                              2 COMMON     4     4      0
                i1_setLoad_StatusOff
 ---------------------------------------------------------------------------------
 (13) i1_setLoad_StatusOff                                 2     1      1     114
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             1     1      0       0
                                              0 COMMON     1     1      0
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _INT_ISR                                             0     0      0     130
                    _setRF_ReceiveGO
 ---------------------------------------------------------------------------------
 (13) _setRF_ReceiveGO                                     2     1      1     130
                                              2 COMMON     2     1      1
                    i1_RfPointSelect
 ---------------------------------------------------------------------------------
 (14) i1_RfPointSelect                                     2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___wmul
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
         _RfPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setLoad_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___wmul
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setLoad_Count
         _setLoad_StatusOn
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setLoad_StatusOff
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getPF_Safe
     _getTemp_Safe
     _setDimmerLights_Clear
       _DimmerLightsPointSelect
     _setLoad_AH_AL_Restore
     _setLoad_Exceptions
       _DimmerLights_Exceptions
         _getDimmerLights_StatusFlag
         _setBuz
           ___wmul
         _setDimmerLights_ERROR
           _DimmerLightsPointSelect
           _setLED
             _LedPointSelect
           _setLoad_StatusOff
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
         _setDimmerLights_TriggerERROR
           _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
       _setRF_Enable
         _RfPointSelect
         _setINT_GO
       _setSw_Enable
         _SwPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _INT_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getLoad_Safe
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _setRF_RxStatus
           _RfPointSelect
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
       _CC2500_WriteCommand
         _CC2500_WriteByte
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
         _RfPointSelect
         _setINT_GO
       _RfPointSelect
       _getRxData
         _RfPointSelect
         _setControl_Lights_Table
           _RfPointSelect
           _setBuz
             ___wmul
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_Count
             _setLoad_StatusOn
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
               _RfPointSelect
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___wmul
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
               _RfPointSelect
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
             _RfPointSelect
         _setLog_Code
           _RfPointSelect
           _setBuz
             ___wmul
       _setINT_GO
   _Switch_Initialization
     _TouchPower
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _Sw_DimmerOnFunc
         _setBuz
           ___wmul
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
           _RfPointSelect
       _setBuz
         ___wmul
       _setRF_Learn
         _RfPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getLoad_Safe
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___wmul
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setLoad_StatusOff
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___wmul
         _setLED
           _LedPointSelect
         _setRF_Enable
           _RfPointSelect
           _setINT_GO
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
   _getPowerFault_AD
     _getAD
   _getTemp_AD
     _getAD
   _myMain_Initialization
   _my_Main
     _setBuz
       ___wmul
     _setLoad_Enable
     _setRF_Enable
       _RfPointSelect
       _setINT_GO
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _INT_ISR
     _setRF_ReceiveGO
       i1_RfPointSelect
   _IOC_ISR
     _setDimmerReClock
   _TMR0_ISR
     i1_setLoad_StatusOff

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     182       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     50      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      4A      10       92.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      45      12       86.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      47      14       88.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     182      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Oct 04 10:45:32 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0000  
                           _WDT_Clearing 0000             ??_setDimmerLights_TriggerAdj 0003  
                                     _PF 001D                                       _RD 0CA8  
                                     _RF 001E                  __end_of_CC2500_WriteREG 0019  
                                     _WR 0CA9                                       _Sw 0002  
     __end_of_getDimmerLights_StatusFlag 000C               _getDimmerLights_StatusFlag 0000  
                    ___wmul@multiplicand 0002                   __end_of_setDelayOff_GO 005C  
                           ___ftadd@exp1 002A                             ___ftadd@exp2 0029  
              setDimmerLights_Adj@lights 0044                __end_of_setLoad_StatusOff 0031  
                   _setDimmerLights_Main 0000                             ___ftadd@sign 0028  
                                    l304 0024                                      l307 002A  
                                    l271 0007                                      l280 0039  
                                    l337 000C                                      l361 0008  
                                    l338 000E                                      l291 0013  
                                    l276 0031                                      l373 0005  
                                    l349 0008                                      l277 0036  
                                    l367 0009                                      l287 0002  
                                    l628 002C                                      l818 0032  
                                    _GIE 005F                                      _CRC 0018  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000C                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 0042  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 001C  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 0044                                      _ISR 0000  
                                    _WDT 0002          setPowerFault_Exceptions@command 000C  
                                    _Sw1 0039                                      _Buz 0017  
              setDimmerLights_Adj@status 0042                 __end_of_CC2500_WriteByte 0019  
         ??_setDimmerLights_TriggerERROR 0003                    _Buzzer_Initialization 0000  
                        __end_of_ADC_Set 0007                          ?_DelayTimejudge 0000  
                                    wreg 0009     setDimmerLights_Initialization@lights 0003  
                        _setDimmerLights 0000                    _setDimmerLights_ERROR 0000  
                  _setDimmerLights_AdjRF 0000                    _setDimmerLights_AdjGo 0000  
                __size_of_setTemp_Enable 000B                    _setDimmerLights_Clear 0000  
                                   ?_ISR 0000                          _PowerFault_Main 0000  
                           ___ftdiv@cntr 0018                          __end_of_IOC_ISR 0025  
                             Load_Main@i 0011                             ___ftdiv@sign 001D  
                                   l2031 002B                                     l2027 0114  
                                   l1354 000A                 ?_DimmerLightsPointSelect 0000  
                                   l1380 002A                                     l2253 0041  
                                   l2280 002A                                     l3161 004A  
                                   l3155 0033                          __end_of_IOC_Set 000D  
                                   l1566 0030                                     l2542 0000  
                                   l3184 009F                                     l6011 0018  
                                   l6003 000C                                     l6015 001E  
                                   l6007 0012                                     l1767 002F  
                                   l6019 0024                                     l6045 000C  
                                   l6049 0017                                     l7025 0032  
                                   l6161 0035                                     l6163 0042  
                                   l7029 0039                                     l6157 002F  
                                   l8111 0065                                     l6167 004E  
                                   l6257 000D                                     l6409 0018  
                                   l2994 0009                                     l8107 0041  
                                   l8203 0048                                     l8211 0054  
                                   l9003 0102                                     l5811 006B  
                                   l7501 006E                                     l5741 0010  
                                   l8221 001B                                     l9005 0108  
                                   l6293 0010                                     l5813 0075  
                                   l5805 0058                                     l5901 002D  
                                   l8301 001D                                     l5751 0038  
                                   l5743 001A                                     l8207 004E  
                                   l6295 0016                                     l5823 0091  
                                   l5815 007A                                     l8311 0041  
                                   l9023 0015                                     l7513 00A8  
                                   l5753 0040                                     l5745 001F  
                                   l5737 0009                                     l8225 0026  
                                   l8161 0026                                     l6553 0019  
                                   l5833 00C3                                     l5825 009B  
                                   l5817 007E                                     l5913 0068  
                                   l9105 004B                                     l7507 009A  
                                   l5771 000B                                     l8139 005B  
                                   l9211 0079                                     l7451 0009  
                                   l5843 00DE                                     l8315 0057  
                                   l9051 005E                                     l9027 001E  
                                   l9115 007D                                     l7509 00A0  
                                   l5853 0017                                     l8173 0010  
                                   l8181 001C                                     l8157 001C  
                                   l7453 0015                                     l8341 0016  
                                   l5829 00B1                                     l5925 0084  
                                   l5917 0070                                     l8421 0041  
                                   l9037 003E                                     l8087 0003  
                                   l8191 002C                                     l8263 006A  
                                   l7463 0030                                     l5783 0028  
                                   l8431 0065                                     l5881 0087  
                                   l5873 006E                                     l5945 0019  
                                   l8177 0016                                     l8521 000E  
                                   l8345 0029                                     l9401 0243  
                                   l9313 002D                                     l5793 003E  
                                   l5929 008C                                     l8601 002D  
                                   l9065 0089                                     l9049 005A  
                                   l9129 00C2                                     l5859 002D  
                                   l5971 0064                                     l5963 0049  
                                   l8187 0026                                     l8195 0032  
                                   l7459 0027                                     l8347 002E  
                                   l5787 002F                                     l8427 005C  
                                   l9139 00F5                                     l5973 006D  
                                   l5965 0057                                     l8461 003D  
                                   l5975 0070                                     l9255 003D  
                                   l9407 0255                                     l9335 00A8  
                                   l5895 0017                                     l9503 003D  
                                   l9329 007A                                     l8473 0056  
                                   l9089 0016                                     l5979 007E  
                                   l9355 0159                                     l8459 0025  
                                   l9283 0052                                     l8485 0016  
                                   l9373 01C1                                     l9349 013D  
                                   l9357 0171                                     l8565 0026  
                                   l9277 0021                                     l9437 0043  
                  _myMain_Initialization 0000                                     l8487 0021  
                                   l9367 01A8                                     l8655 0046  
                                   l9287 005A                                     l8497 0015  
                                   l9385 01F1                                     l9393 022A  
                                   l9395 022D                                     l8931 00B2  
                                   l8907 0043                                     l9299 0091  
                                   l9491 0077                                     l9483 004B  
                                   l8589 0017                                     l8941 00E0  
                                   l8909 004C                                     l8783 0040  
                                   l8943 00E6                                     l8785 0049  
                                   l8777 002D                                     l8865 001F  
                                   l8689 004C                                     _CFGS 0CAE  
                                   l8795 006F                                     l8859 0006  
                                   l8971 0053                                     l8947 00F1  
                                   l9499 0027                                     l8869 0066  
                                   l8991 00C2                                     l8969 0048  
                                   l8995 00E5                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                        __end_of_INT_ISR 000C                                     _LATC 010E  
                                   u4025 007F                                     u4125 003F  
                                   u4205 0039                                     u4135 004F  
                                   u4055 0092                                     u4215 0049  
                                   u4145 006F                                     u4155 007E  
                                   u4315 0020                                     u4235 0071  
                                   u4165 0088                                     u4245 0077  
                                   u4345 004A                                     u4275 008D  
                                   _PEIE 005E                                     u4285 0093  
                                   _INTE 005C                                     _INTF 0059  
                                   u3815 003B                                     u4375 0065  
                                   u3845 0051                                     u3775 0015  
                                   u6505 0020                                     u3795 002E  
                                   u6515 0028                                     u8045 000B  
                                   u3965 0059                                     u7505 000A  
                                   u7515 000F                                     u9115 0024  
                                   u6475 000C                                     u3995 006C  
                                   u9205 007D                                     u6495 0016  
                                   u6585 002A                                     u7570 000A  
                                   u7810 0007                                     u9165 003C  
                                   u7575 0008                                     u9335 0189  
                                   u9505 001A                                     u9515 0061  
                                   u9285 00F4                                     u9455 0032  
                                   u9465 005B                                     u9485 0039  
                                   _LWLO 0CAD                                     _RFSW 001F  
                                   _TMR0 0015                          __end_of_INT_Set 0006  
                                   _RSSI 0020                                     _WREN 0CAA  
                                   _Buz1 002D                                     __WDT 0047  
                                   _Load 0004                                     _Temp 0003  
                                   _main 0000                             ___ftpack@arg 0000  
      __end_of_PowerFault_Initialization 0003                      __end_of_DlyOff_Main 0079  
                        __end_of_RF_Main 0004                             ___ftpack@exp 0003  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                        __end_of_WDT_Set 0018                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 0000  
                                   start 0000*                                    ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 0000  
                    DelayTimejudge@value 0002                            _RfPointSelect 0000  
             __end_of_setRFSW_AdjControl 0040                             ___ftmul@cntr 001C  
                           ___ftmul@sign 001D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 011D                                    ??_ISR 0006  
                           ___fttol@exp1 0038                             ___fttol@lval 0034  
                       __end_of_LED_Main 000C                    ?_setDimmerLights_Main 0000  
                        ?_setDelayOff_GO 0003                    __end_of_setLoad_Count 0015  
                                  ?_main 004C                setControl_Lights_Table@rf 0047  
                        __end_of___ftadd 00F6                          __end_of___ftdiv 00A9  
                        __end_of___ftmul 00B4                          __end_of___fttol 0087  
           setDimmerLights_AdjGo@command 0002                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 0037                   _setDimmerLights_Switch 0000  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 0049  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0000  
                     setRF_Learn@command 0002                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
           __size_ofi1_setLoad_StatusOff 0030                                    _WPUB0 1068  
                                  _WPUB1 1069                                    _WPUB2 106A  
                          setRF_Learn@rf 0003                                    _Load1 0000  
                          __CFG_WRT$BOOT 0000                                    _Temp1 001F  
                       __end_of_TMR0_ISR 01C4             __size_of_CC2500_WriteCommand 0010  
                       __end_of_TMR0_Set 000D                                    _getAD 0000  
                          ___awtoft@sign 000D          __end_of_DimmerLights_Exceptions 005B  
          DimmerLights_Exceptions@status 000A                            ___ftpack@sign 0004  
                        __end_of_my_Main 007D                           _setLoad_Enable 0000  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0000  
                       __end_of_WDT_Main 001C              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0005                           __pbitbssCOMMON 0000  
                     Flash_Memory_Read@i 0001                         ?_CC2500_ReadByte 0000  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 0011  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0002  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0000              __size_of_Flash_Memory_Write 0031  
                      ?_CC2500_SIDLEMode 0000               __size_of_RF_Initialization 0004  
                         ?_RfPointSelect 0000                           setSw_Status@sw 0003  
               setLoad_StatusOff@command 0000         __size_of_DelayOff_Initialization 0004  
                 ?_setLoad_AH_AL_Restore 0000                setDimmerLights_Main@clear 0045  
                  setLoad_Enable@command 0000                   ??_Flash_Memory_Erasing 0000  
                        _getPercentValue 0000                       ??_CC2500_SIDLEMode 0004  
                        __initialization 0000                         ?_CC2500_PowerRST 0000  
                      ??_Sw_DimmerOnFunc 0042                     __end_of_getLoad_Safe 000B  
                      ??_setPercentValue 0039                             __end_of_main 0072  
                    ?_setRF_DimmerLights 003D                         __end_of_Fosc_Set 0004  
                       ?_CC2500_WriteREG 0002                                ??_ADC_Set 0000  
                __end_of_setDimmerLights 0096                     _setSw_Initialization 0000  
             __size_of_setLoad_StatusOff 0031                                   ??_main 0050  
                          ___fttol@sign1 0033                             ?_setLog_Code 0000  
                _setControl_Lights_Table 0000                   ?_Buzzer_Initialization 0000  
                ??_DlyOff_Initialization 0002                  __end_of_PowerFault_Main 0003  
                             _Receive_OK 0000                                ??_IOC_ISR 0000  
                 ?_setDimmerLights_ERROR 0000                                ??_IOC_Set 0000  
        __end_of_DimmerLightsPointSelect 000B                   ?_setDimmerLights_AdjRF 0000  
                              ??_INT_ISR 0004                   ?_setDimmerLights_AdjGo 0002  
               __size_of_setRFSW_Control 0090                         ??_setRFSW_Status 0003  
                              ??_INT_Set 0000                   ?_setDimmerLights_Clear 0002  
                ??_Switch_Initialization 0005                   __end_of_setLoad_Enable 0010  
                   __end_of_getTemp_Safe 0007                        i1RfPointSelect@rf 0001  
                   ??_setRF_DimmerLights 003E                                   ?_getAD 0000  
                            _DlyOff_Main 0000                   ?_myMain_Initialization 0000  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 004C                                   _ADRESH 009C  
                                 _ADRESL 009B               i1setLoad_StatusOff@command 0000  
                      ?_getPowerFault_AD 0000                                ??_WDT_Set 0000  
                         setRF_Enable@rf 0003                         __end_of___awtoft 0022  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0061  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 0000  
                                 i1l1322 01B4                                   i1l7621 00DE  
                                 i1l7613 00BC                                   i1l7607 00A3  
                                 i1l7615 00C2                                   i1l7625 00F5  
                                 i1l7609 00A9                                   i1l7475 001B  
                                 i1l7635 0124                                   i1l7565 001B  
                                 i1l7637 012A                                   i1l7629 0109  
                                 i1l7479 0025                                   i1l7649 015F  
                                 i1l7659 0195                                   i1l7589 0059  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0004                                   _OSCCON 0099  
                     __size_of_Load_Main 029D                                   u670_25 003C  
                                 _TMR0IE 005D                                   _TMR0IF 005A  
                                 u687_25 018A                                   _IO_Set 0000  
                                 u688_25 01A7                                   _WDTCON 0097  
                     DelayTime_1us@count 0000                               _VarProduct 0000  
                  _Dimmer_Initialization 0000           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 0015                                   _Dimmer 001A  
                                 _DlySw1 0030              __size_of_setLoad_Exceptions 004A  
             __end_of_Mcu_Initialization 001B                      __end_of_Buzzer_Main 00B9  
                                 _Memory 0000                                   _Timer0 0001  
     __end_of_setDimmerLights_TriggerAdj 0010               _setDimmerLights_TriggerAdj 0000  
          setDimmerLights_Switch@command 0002                                   ___wmul 0000  
                              ??___ftadd 0024             __size_of_DelayOffPointSelect 000C  
                              ??___ftdiv 0014                    setDimmerLights@lights 0006  
                              ??___ftmul 0014                                ??___fttol 002F  
           ?_Flash_Memory_Initialization 0000                                ??___lwdiv 0004  
                        i1_RfPointSelect 0000              setDimmerLights_AdjRF@lights 0040  
                 ??_setDimmerLights_Main 0045                                   _r_data 0025  
                                 _s_data 0026                                   _setLED 0000  
                                 _myMain 0003                         _DimmerLightsIntr 001B  
                  ?_setSw_Initialization 0000                    setDimmerLights@status 0004  
                                 _setBuz 0000                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 000D         ??_setDimmerLights_Initialization 0002  
        ?_setDimmerLights_Initialization 0000                    ___ftmul@f3_as_product 0019  
           ??_getDimmerLights_StatusFlag 0000                                ??_my_Main 000A  
               Flash_Memory_Read@address 0002                        RfSWPointSelect@sw 0001  
                       ??_setRF_RxStatus 0003                    __end_of_SwPointSelect 000B  
                        ?_setLoad_Enable 0000                  getPowerFault_AD@channel 0008  
                          ?_setRF_Enable 0002                           _setTemp_Enable 0000  
                        _RfSWPointSelect 0000             __size_of_Flash_Memory_Modify 006E  
            __size_of_DimmerLights_Close 001B                  __size_of_LedPointSelect 0022  
                    Flash_Memory_Write@i 0001             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 0000                        ?_Sw_DimmerAdjFunc 0000  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0005  
                __end_of_getPercentValue 005B         __end_of_CC2500_registers_address 002F  
   __end_of_setPowerFault_Initialization 0011    __size_of_setPowerFault_Initialization 0011  
           _setPowerFault_Initialization 0000                  __end_of__initialization 0031  
            ??_PowerFault_Initialization 0001                          ??_RfPointSelect 0000  
            setDimmerLights_AdjGo@lights 0003                                ?_LED_Main 0000  
                             ___ftadd@f1 001E                               ___ftadd@f2 0021  
                     ??_Sw_DimmerAdjFunc 0004                      setSw_Enable@command 0002  
                             ___ftdiv@f1 0011                               ___ftdiv@f2 000E  
                             ___ftdiv@f3 0019                        ?_Sw_DimmerOffFunc 0000  
                             ___awtoft@c 0008             ?_DimmerLights_Initialization 0000  
                             ___ftmul@f1 000E                               ___ftmul@f2 0011  
                             ___fttol@f1 002B                           __pcstackCOMMON 0000  
                     ??_Sw_DimmerOffFunc 0042                             __pidataBANK3 0000  
                          __end_of_getAD 0016                                ?_TMR0_ISR 0000  
                              ?_TMR0_Set 0000                   setLoad_AH_AL_Restore@i 0001  
           __size_of_setDimmerLights_Adj 0044                       _LED_Initialization 0000  
              ??_setControl_Lights_Table 0047         __size_of_DimmerLights_Exceptions 005B  
                       ??_DelayTimejudge 0000              ?_getDimmerLights_StatusFlag 0000  
              __size_of_setLoad_StatusOn 0032            ??_Flash_Memory_Initialization 003D  
               __size_of_setRF_ReceiveGO 000D                         ?_setDimmerLights 0004  
                              ?_WDT_Main 0000                        __end_of_Load_Main 029D  
                       ?_PowerFault_Main 0000                 __end_of_setDimmerReClock 000F  
                     __size_of_getRxData 004D                      ?_LED_Initialization 0000  
                 __end_of_setTemp_Enable 000B                        ?_CC2500_WriteByte 0000  
                         ??_setRF_Enable 0003                           _DimmerLights11 0001  
                   __size_of_setLED_Main 0040                ??_setDimmerLights_Trigger 0003  
                                ??_getAD 0003                      _Temp_Initialization 0000  
                     ??_CC2500_WriteByte 0000               ??_setPowerFault_Exceptions 000B  
           setDimmerLights_Switch@lights 0003                               __pbssBANK1 0000  
                             __pbssBANK2 0000                               __pbssBANK3 0000  
                             __pbssBANK4 0000                                ?_Fosc_Set 0000  
                            _Buzzer_Main 0000                        ??_setRFSW_Control 0042  
                      __end_of_Temp_Main 0003                   ?_Dimmer_Initialization 0000  
                                ?_IO_Set 0000                               ??_LED_Main 0005  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 0000  
                             __pnvCOMMON 0000                    __size_of_getLoad_Safe 000B  
          ?_setPowerFault_Initialization 0000                               _getPF_Safe 0000  
                          ??_Switch_Main 0049                           DelayTime_1us@i 0002  
                         DelayTime_1us@j 0004                     ??_LED_Initialization 0005  
                           _DimmerLights 0000                        LedPointSelect@led 0001  
                __end_ofi1_RfPointSelect 000B                      i1_setLoad_StatusOff 0000  
                     __size_of_setINT_GO 0009                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 000F                              setBuz@count 0009  
                             __pmaintext 0000                      _CC2500_WriteCommand 0000  
                   ?_Temp_Initialization 0000         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 0005            ??_DimmerLights_Initialization 0004  
                                ?___wmul 0000                               ??_TMR0_ISR 0002  
                          ?_setTemp_Main 0000                               ??_TMR0_Set 0000  
                             _getLoad_AD 0000                               __pintentry 0000  
                 ??_setSw_Initialization 0004                            ?_setSw_Enable 0000  
                     __size_of_setTxData 00A6                  ?_setDimmerLights_Switch 0002  
                   Sw_DimmerAdjFunc@Idle 0004                                  ?_setLED 0002  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 0000  
              _PowerFault_Initialization 0000                                  ?_setBuz 0006  
                              ?___awtoft 0008                                ?___ftpack 0000  
                             _getTemp_AD 0000                               ??_WDT_Main 0000  
           __end_of_setRF_Initialization 0007                    __size_of_getTemp_Safe 0007  
                          ?_setSw_Status 0002                       _setRFSW_AdjControl 0000  
                __end_of_RfSWPointSelect 000C                        Sw_DimmerOnFunc@sw 0043  
                   ?i1_setLoad_StatusOff 0000                                  _IOC_ISR 0000  
                        ?_setTemp_Enable 0000                                  _IOC_Set 0000  
                   __size_of_setLog_Code 0048                                  _INT_ISR 0000  
                                _INT_Set 0000                     ?_CC2500_WriteCommand 0000  
                      _Flash_Memory_Main 0000                        _Flash_Memory_Read 0000  
                 __size_of_CC2500_RxData 0064                   __size_of_CC2500_TxData 0044  
                    ?_setRFSW_AdjControl 0000      setDimmerLights_TriggerERROR@command 0002  
                           _getLoad_Safe 0000                              setTxData@rf 0003  
                                _RF_Data 0000                                  _RF_Main 0000  
                     ?_Flash_Memory_Main 0000                       ?_Flash_Memory_Read 0000  
                                _WDT_Set 0000          __end_of_setControl_Lights_Table 006E  
                             ??_Fosc_Set 0000                              ?_TouchPower 0000  
                        _Sw_DimmerOnFunc 0000                          _setPercentValue 0000  
                ??_setLoad_AH_AL_Restore 0000                            setLog_Code@rf 000B  
                       ?_getPercentValue 0000                                  _Dimmer1 0041  
           __end_of_CC2500_FrequencyCabr 000C                          __size_of_IO_Set 0019  
                    ??_Flash_Memory_Main 0007                      ??_Flash_Memory_Read 0000  
                                _VarLED1 0039                                  _VarLED2 003D  
                      __end_of_getRxData 004D               __end_of_setPowerFault_Main 011D  
               _CC2500_registers_address 0000                           RF_RxDisable@rf 0004  
                  ??_Temp_Initialization 0001          __end_of_setDimmerLights_Trigger 0010  
                                _Product 0000                     ??_setRFSW_AdjControl 0044  
                           _getTemp_Safe 0000                           ??_setTemp_Main 000D  
         __end_of_setDimmerLights_Switch 0010                                  ___ftadd 0000  
                         ??_setSw_Enable 0002                                  ___ftdiv 0000  
                        __size_of___wmul 001E                                  ___ftmul 0000  
                                ___fttol 0000                      __end_of_Switch_Main 0004  
                                ___lwdiv 0000                  ??_Buzzer_Initialization 0000  
               ??_setOverTemp_Exceptions 000B                                  __myMain 0000  
                             ??___awtoft 000B                               ??___ftpack 0005  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0046  
                ??_setDimmerLights_ERROR 0004                          __size_of_setBuz 0089  
                         ??_setSw_Status 0003                                  __ptext1 0000  
                                __ptext2 0000                                  __ptext3 0000  
                                __ptext4 0000                                  __ptext5 0000  
                                __ptext6 0000                                  __ptext7 0000  
                                __ptext8 0000                                  __ptext9 0000  
                ??_setDimmerLights_AdjRF 003F                  ??_setDimmerLights_AdjGo 0003  
              __size_of_CC2500_SIDLEMode 0004                  ??_setDimmerLights_Clear 0003  
                    Sw_DimmerOnFunc@Idle 0042                    ??i1_setLoad_StatusOff 0001  
                           __size_of_ISR 0012                __end_of_Flash_Memory_Main 0045  
              __end_of_Flash_Memory_Read 0019                               _setRF_Main 0000  
                ??_myMain_Initialization 0000                            _DelayOff_Main 0000  
                      _DimmerLights_Main 0000                                  _my_Main 0000  
                      __end_of_setINT_GO 0009           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0002            __end_of_DlyOff_Initialization 000B  
                      ??_setRF_ReceiveGO 0003               __end_of_CC2500_ClearRXFIFO 0004  
               ??_setTemp_Initialization 0000               __end_of_CC2500_ClearTXFIFO 0004  
          DimmerLightsPointSelect@lights 0001                             ?_DlyOff_Main 0000  
                     ?_DimmerLights_Main 0000                           _LedPointSelect 0000  
                    _DelayOffPointSelect 0000                                  clrloop0 0001  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 0009  
                   end_of_initialization 0031                ??_DelayOff_Initialization 0003  
                             _setLoad_GO 0000                        _CC2500_InitSetREG 0000  
                          _DelayTime_1us 0000                        __end_of_setTxData 00A6  
             __end_of_Flash_Memory_Write 0031                                  init_ram 0000  
                     ?_CC2500_InitSetREG 0000                      ??_DimmerLights_Main 0047  
                   Flash_Memory_Read@ret 0003                                  initloop 0001  
                             _setSw_Main 0000                    CC2500_ReadByte@loop_b 0001  
                      _CC2500_ReadStatus 0000                              ?_getPF_Safe 0000  
                 __size_of_setLoad_Count 0015                     Flash_Memory_Modify@i 0006  
                  _setLED_Initialization 0000                         ?i1_RfPointSelect 0000  
                     ?_CC2500_ReadStatus 0000                         setRFSW_Status@sw 0003  
               __size_of_CC2500_ReadByte 001D                            _CC2500_RxData 0000  
                          _CC2500_TxData 0000                      ??_CC2500_InitSetREG 0005  
                   __end_of_setRF_Enable 002C           ??_setPowerFault_Initialization 0000  
            ?_setDimmerLights_TriggerAdj 0002                __size_of_getPowerFault_AD 004B  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0000  
                    _Flash_Memory_Modify 0000                  _DimmerLights_Exceptions 0000  
                            ?_getLoad_AD 0000                             __pstringtext 0000  
                    _Flash_Memory_Unlock 0000                      ??_CC2500_ReadStatus 0002  
                 setRF_Initialization@rf 0000                         _setLoad_StatusOn 0000  
       getDimmerLights_StatusFlag@Status 0000                  CC2500_InitSetREG@loop_c 0008  
                            ?_getTemp_AD 0000                setLoad_Exceptions@command 000C  
                    __size_of_TouchPower 0005                 setLED_Initialization@led 0004  
                 setSw_Initialization@sw 0004                __end_of_DimmerLights_Main 0007  
                     _Mcu_Initialization 0000                         ??_setLoad_Enable 0000  
               __size_of_CC2500_PowerRST 0030                           ?_DelayOff_Main 0000  
                       ?_RfSWPointSelect 0000                          _setSw_Main$4544 0047  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 0022  
                __end_of_Sw_DimmerOnFunc 0059                  __end_of_setPercentValue 0046  
               __size_of_CC2500_WriteREG 0019                __end_of_CC2500_InitSetREG 002A  
                    ?_Mcu_Initialization 0000         __end_of_setPowerFault_Exceptions 0045  
                   ?_Flash_Memory_Modify 0000              __size_of_setRF_DimmerLights 006B  
                         ?_DelayTime_1us 0000                      _setDimmerLights_Adj 0000  
                   ?_Flash_Memory_Unlock 0000                __end_of_CC2500_ReadStatus 001B  
                          ?_RF_RxDisable 0000               __end_of_setLoad_Exceptions 004A  
                            ___ftdiv@exp 001C                           __end_of_IO_Set 0019  
                   _setRF_Initialization 0000                              _Switch_Main 0000  
            setDimmerLights_Clear@lights 0003                        __size_of_LED_Main 000C  
                         ?_CC2500_RxData 0000                           ?_CC2500_TxData 0000  
                _DimmerLightsPointSelect 0000                              ___ftmul@exp 0018  
                  _CC2500_PowerOnInitial 0000                     ??_Mcu_Initialization 0001  
                  ??_DelayOffPointSelect 0000                            ?_WDT_Clearing 0000  
                   ?_setDimmerLights_Adj 0042                __size_of_Sw_DimmerAdjFunc 002C  
                   setRF_DimmerLights@on 003D                           __end_of___wmul 001E  
                           setRF_Main@rf 004A                        __size_of_TMR0_ISR 01C4  
        __size_of_setOverTemp_Exceptions 0049                        __size_of_TMR0_Set 000D  
          __size_of_setDimmerLights_Main 0076                           __end_of_setLED 005E  
                         __end_of_setBuz 0089                            _setLoad_Count 0000  
                   _CC2500_FrequencyCabr 0000                  setLoad_StatusOn@command 0000  
              __size_of_Sw_DimmerOffFunc 0071               __size_of_Flash_Memory_Main 0045  
             __size_of_Flash_Memory_Read 0019                              ?_setRF_Main 0000  
                        _setRFSW_Control 0000                        __size_of_WDT_Main 001C  
                    __size_of_getPF_Safe 0009                        ?_setDimmerReClock 0000  
                    start_initialization 0000                        _setRF_DimmerValue 0000  
                        ?_LedPointSelect 0000               __end_of_DimmerLights_Close 001B  
                              _Load_Main 0000                  setLoad_StatusOff@lights 0001  
                            __end_of_ISR 0012                    ??_Flash_Memory_Modify 0004  
           __size_of_Load_Initialization 000D       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0000                       ?_setRF_DimmerValue 0000  
             __end_of_CC2500_InitPATable 001F          __size_of_setTemp_Initialization 000B  
                  ??_Flash_Memory_Unlock 0000                  ??_Dimmer_Initialization 0000  
                   __end_of_setTemp_Main 0123                              ?_setLoad_GO 0000  
                         ??_RF_RxDisable 0004                     __end_of_setSw_Enable 000F  
                        RfPointSelect@rf 0001                      __size_of_getLoad_AD 0096  
                           ?_Buzzer_Main 0000                                 ??_IO_Set 0000  
                              _VarErrLED 0035                              ?_setSw_Main 0000  
                    ??_setRF_DimmerValue 0041                      __size_of_getTemp_AD 006C  
                 ?_setLED_Initialization 0000                     __end_of_setSw_Status 000F  
                     Sw_DimmerAdjFunc@sw 0005                    ?_setRF_Initialization 0000  
                      __size_of_Fosc_Set 0004                i1setLoad_StatusOff@lights 0001  
                              _VarMemory 0000                  __size_of_setRFSW_Status 000F  
                  __end_of_RfPointSelect 000C                __size_of_CC2500_WriteByte 0019  
                              _VarTimer0 0027                                _Temp_Main 0000  
              ??_DimmerLights_Exceptions 000A            setOverTemp_Exceptions@command 000C  
                         ??_WDT_Clearing 0000                                _Rx_Length 0021  
                setRF_DimmerValue@lights 0043                    ??_setDimmerLights_Adj 0043  
                               ??___wmul 0004                   __size_of_SwPointSelect 000B  
                              _Tx_Length 0023                              __pdataBANK3 0000  
                               ??_setLED 0003                         ??_setTemp_Enable 0000  
                               ?_ADC_Set 0000                                 ??_setBuz 0008  
                        ??_DelayOff_Main 0045                        ??_CC2500_ReadByte 0000  
                         ?_setLoad_Count 0000                         _CC2500_SIDLEMode 0000  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 0035  
                  ?_CC2500_FrequencyCabr 0000                         setINT_GO@command 0000  
                          ??_setLED_Main 0002                        __size_of___awtoft 0022  
                      __size_of___ftpack 0061                                 ?_IOC_ISR 0000  
                        _setRF_Main$3956 004B                              __pbssCOMMON 0000  
                               ?_IOC_Set 0000                                ___latbits 0002  
                             ?_Load_Main 0000                    setTemp_Enable@command 0000  
                               ?_INT_ISR 0000                      setRF_Enable@command 0002  
                       ?_Sw_DimmerOnFunc 0000                            __pcstackBANK0 0000  
                               ?_INT_Set 0000                         ?_setPercentValue 0000  
                        ??_DelayTime_1us 0002               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0096                            DlyOff_Main@sw 0044  
                      ??_CC2500_PowerRST 0006                                 ?_RF_Main 0000  
                               ?_WDT_Set 0000             setDimmerLights_Clear@command 0002  
                           ??_TouchPower 0000                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 0079               __size_of_CC2500_ReadStatus 001B  
                 _setOverTemp_Exceptions 0000                            ??_setRF_Learn 0003  
                      ??_CC2500_WriteREG 0003                            _DimmerLights1 0011  
                  CC2500_WriteREG@w_addr 0004                    setDelayOff_GO@command 0003  
              ??_DimmerLightsPointSelect 0000           __size_of_setLoad_AH_AL_Restore 0022  
                  __size_of_setRF_Enable 002C                          ??_CC2500_RxData 0004  
          __end_of_setLoad_AH_AL_Restore 0022                  __size_of_setRF_RxStatus 000F  
                        ??_CC2500_TxData 0004                                __pnvBANK1 0000  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0000  
                             ?_Temp_Main 0000                      __size_of_setRF_Main 0094  
                       ___lwdiv@dividend 0002                    DelayOffPointSelect@sw 0001  
                             setBuz@time 0006                      setDelayOff_GO@value 0004  
               ?_setControl_Lights_Table 0000                   _setTemp_Initialization 0000  
                       _getPowerFault_AD 0000        __size_of_setPowerFault_Exceptions 0045  
    __end_of_Flash_Memory_Initialization 00F8              _Flash_Memory_Initialization 0000  
              ?_setPowerFault_Exceptions 0000                                __ptext100 0000  
                              __ptext101 0000                                __ptext110 0000  
                              __ptext102 0000                                __ptext111 0000  
                              __ptext103 0000                                __ptext120 0000  
                              __ptext112 0000                                __ptext104 0000  
                              __ptext121 0000                                __ptext113 0000  
                              __ptext105 0000                                __ptext130 0000  
                              __ptext122 0000                                __ptext114 0000  
                              __ptext106 0000                                __ptext131 0000  
                              __ptext123 0000                                __ptext115 0000  
                              __ptext107 0000                                __ptext140 0000  
                              __ptext132 0000                                __ptext124 0000  
                              __ptext116 0000                                __ptext108 0000  
                              __ptext141 0000                                __ptext133 0000  
                              __ptext125 0000                                __ptext117 0000  
                              __ptext109 0000                                 ?___ftadd 001E  
                              __ptext142 0000                                __ptext134 0000  
                              __ptext126 0000                                __ptext118 0000  
                              __ptext143 0000                                __ptext135 0000  
                              __ptext127 0000                                __ptext119 0000  
                              __ptext144 0000                                __ptext136 0000  
                              __ptext128 0000                                __ptext145 0000  
                              __ptext137 0000                                __ptext129 0000  
                              __ptext146 0000                                __ptext138 0000  
                              _getRxData 0000                                 ?___ftdiv 000E  
                               ?___ftmul 000E                                 ?___fttol 002B  
                               ?___lwdiv 0000                  __end_of_setRFSW_Control 0090  
                        _setRF_ReceiveGO 0000                      __size_of_setLoad_GO 000B  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 000C  
          __end_of_Buzzer_Initialization 000C                         getPercentValue@i 003C  
                       setPercentValue@i 003A                            ??_setLog_Code 000A  
                     __end_of_TouchPower 0005                       _setPowerFault_Main 0000  
     setDimmerLights_TriggerERROR@lights 0003           __size_of_setDimmerLights_ERROR 0057  
               ?_setDimmerLights_Trigger 0002                          DelayTimejudge@i 0001  
                    __size_of_setSw_Main 014A            __end_of_setDimmerLights_ERROR 0057  
           CC2500_ReadStatus@status_addr 0003           __size_of_setDimmerLights_AdjRF 0022  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 0022  
          __end_of_setDimmerLights_AdjGo 0010                   CC2500_WriteByte@loop_a 0001  
         __size_of_setDimmerLights_Clear 0010                                 ?_my_Main 0000  
          __end_of_setDimmerLights_Clear 0010                                _r_address 0024  
         __size_of_myMain_Initialization 0014             __end_of_CC2500_patable_vaule 0066  
          __end_of_myMain_Initialization 0014                      ?_setPowerFault_Main 0000  
                         __size_of_getAD 0016                             _setRF_Enable 0000  
                       ___lwdiv@quotient 0005                  __size_of_DelayTimejudge 002E  
                          _SwPointSelect 0000                       Sw_DimmerOffFunc@sw 0044  
                              _setINT_GO 0000                      __end_of_setLED_Main 0040  
               __end_of_setLoad_StatusOn 0032                   ??_setRF_Initialization 0000  
            __end_of_Temp_Initialization 0003                        _CC2500_rfSettings 002F  
                         ___wmul@product 0004                                 _LED_Main 0000  
                           ??_getPF_Safe 0000                          SwPointSelect@sw 0001  
                              clear_ram0 0000                 CC2500_InitPATable@loop_d 0007  
                              _setTxData 0000      __end_of_DimmerLights_Initialization 000C  
            _DimmerLights_Initialization 0000                       _CC2500_ClearRXFIFO 0000  
                     _CC2500_ClearTXFIFO 0000           setDimmerLights_Trigger@command 0002  
               setRF_DimmerLights@lights 0041                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 000F                     ??_setPowerFault_Main 000D  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0040  
                 setRF_ReceiveGO@command 0002              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 0000                               ?_getRxData 0000  
                               _TMR0_ISR 0000                             ??_getLoad_AD 0004  
                 CC2500_InitSetREG@temp1 0006                   CC2500_InitSetREG@temp2 0007  
            __end_ofi1_setLoad_StatusOff 0030                        setRF_ReceiveGO@rf 0003  
                               _TMR0_Set 0000                         _Sw_DimmerAdjFunc 0000  
                    ?_CC2500_ClearRXFIFO 0000                      ?_CC2500_ClearTXFIFO 0000  
                        ??_setLoad_Count 0000        setDimmerLights_TriggerAdj@command 0002  
                               _RF_Count 0015                     __end_of_RF_RxDisable 0028  
                           ??_getTemp_AD 0004              __end_of_CC2500_WriteCommand 0010  
                 ??_CC2500_FrequencyCabr 0006                                 _WDT_Main 0000  
                DlyOff_Initialization@sw 0002                         __size_of_ADC_Set 0007  
                      ___wmul@multiplier 0000               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0000                         _Sw_DimmerOffFunc 0000  
                  __size_of_setTemp_Main 0123                  __size_of_setDelayOff_GO 005C  
                  __size_of_setSw_Enable 000F                                 _DelayOff 0019  
                           setSw_Main@sw 0048                              ??_Load_Main 000D  
                     __end_of_getPF_Safe 0009                         __size_of_IOC_ISR 0025  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 000C  
                         ?_SwPointSelect 0000                              getAD@adcon0 0003  
                            getAD@adcon1 0000                         __size_of_INT_ISR 000C  
                         setLED_Main@led 0004                     __end_of_WDT_Clearing 0002  
                       __size_of_INT_Set 0006                      __end_of_setLog_Code 0048  
                  _DlyOff_Initialization 0000                    __size_of_setSw_Status 000F  
                             ?_setINT_GO 0000                     ??_CC2500_ClearRXFIFO 0004  
                   ??_CC2500_ClearTXFIFO 0004                __end_of_CC2500_rfSettings 005E  
                       __size_of_RF_Main 0004                                 _Fosc_Set 0000  
                       __size_of_WDT_Set 0018                   setLoad_StatusOn@lights 0001  
                     __end_of_getLoad_AD 0096                    _Switch_Initialization 0000  
                   ??_Flash_Memory_Write 0000                        ??_setDimmerLights 0005  
                         _setRFSW_Status 0000                     __size_of_Buzzer_Main 00B9  
                     __end_of_getTemp_AD 006C                               ?_setTxData 0000  
                           ?_Switch_Main 0000                         _CC2500_WriteByte 0000  
                      getLoad_AD@channel 0009             Flash_Memory_Initialization@i 003E  
                __end_of_setRF_ReceiveGO 000D                              ??_Temp_Main 0010  
                      ??_PowerFault_Main 000F                        setRFSW_Control@sw 0043  
                    _Load_Initialization 0000                                setLED@led 0003  
   __end_of_setDimmerLights_TriggerERROR 002B    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 0000                             _setTemp_Main 0000  
                     _setLoad_Exceptions 0000                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0000                         __size_of___ftdiv 00A9  
                           _setSw_Enable 0000                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               __size_ofi1_RfPointSelect 000B                                 ___awtoft 0000  
                       ??_LedPointSelect 0000                                 ___ftpack 0000  
                           _setSw_Status 0000                        getTemp_AD@channel 0008  
                           ??_setRF_Main 0049                     CC2500_WriteREG@value 0002  
                            _setLED_Main 0000                      ?_setLoad_Exceptions 0000  
                  setRFSW_Status@command 0002               __end_of_setRF_DimmerLights 006B  
               ?_DelayOff_Initialization 0000                         setDelayOff_GO@sw 0007  
                        ___lwdiv@divisor 0000                         __size_of_my_Main 007D  
                   ?_Load_Initialization 0000                          ___lwdiv@counter 0007  
                               __ptext10 0000                                 __ptext11 0000  
                               __ptext20 0000                                 __ptext12 0000  
                               __ptext21 0000                                 __ptext13 0000  
                               __ptext30 0000                                 __ptext22 0000  
                               __ptext14 0000                                 __ptext31 0000  
                               __ptext23 0000                                 __ptext15 0000  
                               __ptext40 0000                                 __ptext32 0000  
                               __ptext24 0000                                 __ptext16 0000  
                               __ptext41 0000                                 __ptext33 0000  
                               __ptext25 0000                                 __ptext17 0000  
                               __ptext50 0000                                 __ptext42 0000  
                               __ptext34 0000                                 __ptext26 0000  
                               __ptext18 0000                                 __ptext51 0000  
                               __ptext43 0000                                 __ptext35 0000  
                               __ptext27 0000                                 __ptext19 0000  
                               __ptext60 0000                                 __ptext52 0000  
                               __ptext44 0000                                 __ptext36 0000  
                               __ptext28 0000                                 __ptext61 0000  
                               __ptext53 0000                                 __ptext45 0000  
                               __ptext37 0000                                 __ptext29 0000  
                               __ptext70 0000                                 __ptext62 0000  
                               __ptext54 0000                                 __ptext46 0000  
                               __ptext38 0000                                 __ptext71 0000  
                               __ptext63 0000                                 __ptext55 0000  
                               __ptext47 0000                                 __ptext39 0000  
                               __ptext80 0000                                 __ptext72 0000  
                               __ptext64 0000                                 __ptext56 0000  
                               __ptext48 0000                                 __ptext81 0000  
                               __ptext73 0000                                 __ptext65 0000  
                               __ptext57 0000                                 __ptext49 0000  
                               __ptext90 0000                                 __ptext82 0000  
                               __ptext74 0000                                 __ptext66 0000  
                               __ptext58 0000                                 __ptext91 0000  
                               __ptext83 0000                                 __ptext75 0000  
                               __ptext67 0000                                 __ptext59 0000  
                               __ptext92 0000                                 __ptext84 0000  
                               __ptext76 0000                                 __ptext68 0000  
                               __ptext93 0000                                 __ptext85 0000  
                               __ptext77 0000                                 __ptext69 0000  
                               __ptext94 0000                                 __ptext86 0000  
                               __ptext78 0000                                 __ptext95 0000  
                               __ptext87 0000                                 __ptext79 0000  
                               __ptext96 0000                                 __ptext88 0000  
                               __ptext97 0000                                 __ptext89 0000  
                               __ptext98 0000                                 __ptext99 0000  
                           ??_setLoad_GO 0000                  ??_setLED_Initialization 0004  
               __size_of_RfSWPointSelect 000C           __size_of_Dimmer_Initialization 0007  
                 __end_of_setRFSW_Status 000F            __end_of_Dimmer_Initialization 0007  
           __end_of_setDimmerLights_Main 0076              setDimmerLights_ERROR@lights 0005  
                           ??_setSw_Main 0045                            setLED@command 0002  
                          __size_of_main 0072                              _setRF_Learn 0000  
               __end_of_CC2500_SIDLEMode 0004                           _setRF_RxStatus 0000  
             setDimmerLights_Main@lights 0046              __end_of_DelayOffPointSelect 000C  
             CC2500_WriteCommand@command 0003                       _DimmerLights_Close 0000  
               ??_setDimmerLights_Switch 0003                __size_of_setDimmerReClock 000F  
                   ??_setLoad_Exceptions 000B                          _CC2500_ReadByte 0000  
                     _CC2500_InitPATable 0000      __size_of_getDimmerLights_StatusFlag 000C  
          setDimmerLights_Trigger@lights 0003                       __end_of_setRF_Main 0094  
            __size_of_Mcu_Initialization 001B                     _CC2500_patable_vaule 005E  
                            ??_getRxData 0048                      ?_DimmerLights_Close 0000  
       setDimmerLights_TriggerAdj@lights 0003                                 main@argc 004C  
          ?_setDimmerLights_TriggerERROR 0002                                 main@argv 004E  
                    ?_CC2500_InitPATable 0000                          _CC2500_PowerRST 0000  
                     __end_of_setLoad_GO 000B              __end_of_Flash_Memory_Modify 006E  
                      ??_getPercentValue 0039                              _setLog_Code 0000  
                  setRF_RxStatus@command 0002              __end_of_Flash_Memory_Unlock 0009  
                        ??_SwPointSelect 0000                          _CC2500_WriteREG 0000  
                     __end_of_setSw_Main 014A                        setLoad_GO@command 0000  
                  ??_Load_Initialization 0002                            _Transceive_OK 0001  
                   setLoad_Count@command 0001                   ?_DlyOff_Initialization 0000  
                ?_setOverTemp_Exceptions 0000                           _DelayTimejudge 0000  
                          ?_getLoad_Safe 0000                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 004B                     ??_DimmerLights_Close 0001  
                            ??_setINT_GO 0000                                 intlevel1 0000* 
                   ??_CC2500_InitPATable 0005                  __size_of_setLoad_Enable 0010  
                 ?_Switch_Initialization 0000                   __end_of_setRF_RxStatus 000F  
                        ?_setRFSW_Status 0002                  ??_CC2500_PowerOnInitial 0009  
 __end_of_setDimmerLights_Initialization 002D  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 0000              __end_of_setDimmerLights_Adj 0044  
                ?_setTemp_Initialization 0000                              ??_setTxData 0002  
                       ?_setRF_ReceiveGO 0002                   CC2500_InitPATable@temp 0006  
                  __size_of_RF_RxDisable 0028                        _RF_Initialization 0000  
                            getLoad_AD@i 000B                              getLoad_AD@j 000A  
                          ?_getTemp_Safe 0000                     _Flash_Memory_Erasing 0000  
                     ?_RF_Initialization 0000                               _SPI0Buffer 0022  
        __end_of_DelayOff_Initialization 0004                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 0004  
                    ??_RF_Initialization 0001                              getRxData@rf 0048  
                         _setDelayOff_GO 0000         __size_of_setControl_Lights_Table 006E  
                      _setLoad_StatusOff 0000                   __end_of_DelayTimejudge 002E  
         __end_of_setOverTemp_Exceptions 0049                   __size_of_RfPointSelect 000C  
                      ??i1_RfPointSelect 0000                           ??_getLoad_Safe 0000  
   __size_of_Flash_Memory_Initialization 00F8                            ??_DlyOff_Main 0042  
                     ?_setLoad_StatusOff 0000                    __end_of_DelayTime_1us 0026  
               __end_of_Sw_DimmerAdjFunc 002C                  __end_of_CC2500_ReadByte 001D  
           __end_of_setSw_Initialization 0010                          ?_setRF_RxStatus 0002  
                   getPercentValue@value 003B                             _RF_RxDisable 0000  
             ?_PowerFault_Initialization 0000               __end_of_LED_Initialization 000C  
       __size_of_setDimmerLights_Trigger 0010                        ?_setLoad_StatusOn 0000  
         __end_of_setTemp_Initialization 000B                 __size_of_Sw_DimmerOnFunc 0059  
                    ??_setLoad_StatusOff 0001                 ?_DimmerLights_Exceptions 0000  
               __size_of_setPercentValue 0046                     setPercentValue@value 0039  
              __end_of_RF_Initialization 0004                 __end_of_Sw_DimmerOffFunc 0071  
                     ??_setLoad_StatusOn 0001          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0000                         setRF_RxStatus@rf 0003  
                  __end_of_CC2500_RxData 0064                    __end_of_CC2500_TxData 0044  
                         ??_getTemp_Safe 0000                    _setLoad_AH_AL_Restore 0000  
                    setSw_Status@command 0002                  __end_of_CC2500_PowerRST 0030  
