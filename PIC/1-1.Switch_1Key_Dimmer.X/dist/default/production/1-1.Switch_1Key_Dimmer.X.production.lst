

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Oct 18 16:08:47 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	intentry,global,class=CODE,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	dabs	1,0x7E,2
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  0116                     	;# 
   199  0117                     	;# 
   200  011D                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  018E                     	;# 
   204  0191                     	;# 
   205  0191                     	;# 
   206  0192                     	;# 
   207  0193                     	;# 
   208  0193                     	;# 
   209  0194                     	;# 
   210  0195                     	;# 
   211  0196                     	;# 
   212  0197                     	;# 
   213  0199                     	;# 
   214  019A                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  020D                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  008C                     	;# 
   291  008D                     	;# 
   292  008E                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0097                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  011D                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0197                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020D                     	;# 
   336  0210                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0291                     	;# 
   353  0291                     	;# 
   354  0292                     	;# 
   355  0293                     	;# 
   356  0298                     	;# 
   357  0298                     	;# 
   358  0299                     	;# 
   359  029A                     	;# 
   360  0394                     	;# 
   361  0395                     	;# 
   362  0396                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  0010                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0090                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0099                     	;# 
   411  009A                     	;# 
   412  009B                     	;# 
   413  009B                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009E                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019C                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020D                     	;# 
   447  0210                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  0FE4                     	;# 
   475  0FE5                     	;# 
   476  0FE6                     	;# 
   477  0FE7                     	;# 
   478  0FE8                     	;# 
   479  0FE9                     	;# 
   480  0FEA                     	;# 
   481  0FEB                     	;# 
   482  0FED                     	;# 
   483  0FEE                     	;# 
   484  0FEF                     	;# 
   485  0000                     	;# 
   486  0001                     	;# 
   487  0002                     	;# 
   488  0003                     	;# 
   489  0004                     	;# 
   490  0005                     	;# 
   491  0006                     	;# 
   492  0007                     	;# 
   493  0008                     	;# 
   494  0009                     	;# 
   495  000A                     	;# 
   496  000B                     	;# 
   497  000C                     	;# 
   498  000D                     	;# 
   499  000E                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0099                     	;# 
   522  009A                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  0116                     	;# 
   532  0117                     	;# 
   533  011D                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  018E                     	;# 
   537  0191                     	;# 
   538  0191                     	;# 
   539  0192                     	;# 
   540  0193                     	;# 
   541  0193                     	;# 
   542  0194                     	;# 
   543  0195                     	;# 
   544  0196                     	;# 
   545  0197                     	;# 
   546  0199                     	;# 
   547  019A                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019C                     	;# 
   553  019C                     	;# 
   554  019D                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  020D                     	;# 
   558  0210                     	;# 
   559  0211                     	;# 
   560  0211                     	;# 
   561  0212                     	;# 
   562  0212                     	;# 
   563  0213                     	;# 
   564  0213                     	;# 
   565  0214                     	;# 
   566  0214                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0216                     	;# 
   571  0216                     	;# 
   572  0217                     	;# 
   573  0217                     	;# 
   574  0291                     	;# 
   575  0291                     	;# 
   576  0292                     	;# 
   577  0293                     	;# 
   578  0298                     	;# 
   579  0298                     	;# 
   580  0299                     	;# 
   581  029A                     	;# 
   582  0394                     	;# 
   583  0395                     	;# 
   584  0396                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0010                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0015                     	;# 
   615  0016                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0095                     	;# 
   630  0096                     	;# 
   631  0097                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010D                     	;# 
   641  010E                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  011D                     	;# 
   645  018C                     	;# 
   646  018D                     	;# 
   647  018E                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0194                     	;# 
   654  0195                     	;# 
   655  0196                     	;# 
   656  0197                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020D                     	;# 
   669  0210                     	;# 
   670  0211                     	;# 
   671  0211                     	;# 
   672  0212                     	;# 
   673  0212                     	;# 
   674  0213                     	;# 
   675  0213                     	;# 
   676  0214                     	;# 
   677  0214                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0216                     	;# 
   682  0216                     	;# 
   683  0217                     	;# 
   684  0217                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  0394                     	;# 
   694  0395                     	;# 
   695  0396                     	;# 
   696  0FE4                     	;# 
   697  0FE5                     	;# 
   698  0FE6                     	;# 
   699  0FE7                     	;# 
   700  0FE8                     	;# 
   701  0FE9                     	;# 
   702  0FEA                     	;# 
   703  0FEB                     	;# 
   704  0FED                     	;# 
   705  0FEE                     	;# 
   706  0FEF                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0008                     	;# 
   716  0009                     	;# 
   717  000A                     	;# 
   718  000B                     	;# 
   719  000C                     	;# 
   720  000D                     	;# 
   721  000E                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0015                     	;# 
   726  0016                     	;# 
   727  0016                     	;# 
   728  0017                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  001B                     	;# 
   733  001C                     	;# 
   734  008C                     	;# 
   735  008D                     	;# 
   736  008E                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0092                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0099                     	;# 
   744  009A                     	;# 
   745  009B                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  010C                     	;# 
   751  010D                     	;# 
   752  010E                     	;# 
   753  0116                     	;# 
   754  0117                     	;# 
   755  011D                     	;# 
   756  018C                     	;# 
   757  018D                     	;# 
   758  018E                     	;# 
   759  0191                     	;# 
   760  0191                     	;# 
   761  0192                     	;# 
   762  0193                     	;# 
   763  0193                     	;# 
   764  0194                     	;# 
   765  0195                     	;# 
   766  0196                     	;# 
   767  0197                     	;# 
   768  0199                     	;# 
   769  019A                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019E                     	;# 
   778  019F                     	;# 
   779  020D                     	;# 
   780  0210                     	;# 
   781  0211                     	;# 
   782  0211                     	;# 
   783  0212                     	;# 
   784  0212                     	;# 
   785  0213                     	;# 
   786  0213                     	;# 
   787  0214                     	;# 
   788  0214                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0216                     	;# 
   794  0217                     	;# 
   795  0217                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0298                     	;# 
   801  0298                     	;# 
   802  0299                     	;# 
   803  029A                     	;# 
   804  0394                     	;# 
   805  0395                     	;# 
   806  0396                     	;# 
   807  0FE4                     	;# 
   808  0FE5                     	;# 
   809  0FE6                     	;# 
   810  0FE7                     	;# 
   811  0FE8                     	;# 
   812  0FE9                     	;# 
   813  0FEA                     	;# 
   814  0FEB                     	;# 
   815  0FED                     	;# 
   816  0FEE                     	;# 
   817  0FEF                     	;# 
   818  0000                     	;# 
   819  0001                     	;# 
   820  0002                     	;# 
   821  0003                     	;# 
   822  0004                     	;# 
   823  0005                     	;# 
   824  0006                     	;# 
   825  0007                     	;# 
   826  0008                     	;# 
   827  0009                     	;# 
   828  000A                     	;# 
   829  000B                     	;# 
   830  000C                     	;# 
   831  000D                     	;# 
   832  000E                     	;# 
   833  0010                     	;# 
   834  0011                     	;# 
   835  0012                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  008C                     	;# 
   846  008D                     	;# 
   847  008E                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0095                     	;# 
   852  0096                     	;# 
   853  0097                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0116                     	;# 
   865  0117                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0197                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020D                     	;# 
   891  0210                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0298                     	;# 
   912  0298                     	;# 
   913  0299                     	;# 
   914  029A                     	;# 
   915  0394                     	;# 
   916  0395                     	;# 
   917  0396                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000D                     	;# 
   943  000E                     	;# 
   944  0010                     	;# 
   945  0011                     	;# 
   946  0012                     	;# 
   947  0015                     	;# 
   948  0016                     	;# 
   949  0016                     	;# 
   950  0017                     	;# 
   951  0018                     	;# 
   952  0019                     	;# 
   953  001A                     	;# 
   954  001B                     	;# 
   955  001C                     	;# 
   956  008C                     	;# 
   957  008D                     	;# 
   958  008E                     	;# 
   959  0090                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  0116                     	;# 
   976  0117                     	;# 
   977  011D                     	;# 
   978  018C                     	;# 
   979  018D                     	;# 
   980  018E                     	;# 
   981  0191                     	;# 
   982  0191                     	;# 
   983  0192                     	;# 
   984  0193                     	;# 
   985  0193                     	;# 
   986  0194                     	;# 
   987  0195                     	;# 
   988  0196                     	;# 
   989  0197                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019C                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020D                     	;# 
  1002  0210                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0291                     	;# 
  1019  0291                     	;# 
  1020  0292                     	;# 
  1021  0293                     	;# 
  1022  0298                     	;# 
  1023  0298                     	;# 
  1024  0299                     	;# 
  1025  029A                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  0FE4                     	;# 
  1030  0FE5                     	;# 
  1031  0FE6                     	;# 
  1032  0FE7                     	;# 
  1033  0FE8                     	;# 
  1034  0FE9                     	;# 
  1035  0FEA                     	;# 
  1036  0FEB                     	;# 
  1037  0FED                     	;# 
  1038  0FEE                     	;# 
  1039  0FEF                     	;# 
  1040  0000                     	;# 
  1041  0001                     	;# 
  1042  0002                     	;# 
  1043  0003                     	;# 
  1044  0004                     	;# 
  1045  0005                     	;# 
  1046  0006                     	;# 
  1047  0007                     	;# 
  1048  0008                     	;# 
  1049  0009                     	;# 
  1050  000A                     	;# 
  1051  000B                     	;# 
  1052  000C                     	;# 
  1053  000D                     	;# 
  1054  000E                     	;# 
  1055  0010                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0016                     	;# 
  1061  0017                     	;# 
  1062  0018                     	;# 
  1063  0019                     	;# 
  1064  001A                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  008C                     	;# 
  1068  008D                     	;# 
  1069  008E                     	;# 
  1070  0090                     	;# 
  1071  0091                     	;# 
  1072  0092                     	;# 
  1073  0095                     	;# 
  1074  0096                     	;# 
  1075  0097                     	;# 
  1076  0099                     	;# 
  1077  009A                     	;# 
  1078  009B                     	;# 
  1079  009B                     	;# 
  1080  009C                     	;# 
  1081  009D                     	;# 
  1082  009E                     	;# 
  1083  010C                     	;# 
  1084  010D                     	;# 
  1085  010E                     	;# 
  1086  0116                     	;# 
  1087  0117                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018D                     	;# 
  1091  018E                     	;# 
  1092  0191                     	;# 
  1093  0191                     	;# 
  1094  0192                     	;# 
  1095  0193                     	;# 
  1096  0193                     	;# 
  1097  0194                     	;# 
  1098  0195                     	;# 
  1099  0196                     	;# 
  1100  0197                     	;# 
  1101  0199                     	;# 
  1102  019A                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019C                     	;# 
  1108  019C                     	;# 
  1109  019D                     	;# 
  1110  019E                     	;# 
  1111  019F                     	;# 
  1112  020D                     	;# 
  1113  0210                     	;# 
  1114  0211                     	;# 
  1115  0211                     	;# 
  1116  0212                     	;# 
  1117  0212                     	;# 
  1118  0213                     	;# 
  1119  0213                     	;# 
  1120  0214                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0216                     	;# 
  1126  0216                     	;# 
  1127  0217                     	;# 
  1128  0217                     	;# 
  1129  0291                     	;# 
  1130  0291                     	;# 
  1131  0292                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  0FE4                     	;# 
  1141  0FE5                     	;# 
  1142  0FE6                     	;# 
  1143  0FE7                     	;# 
  1144  0FE8                     	;# 
  1145  0FE9                     	;# 
  1146  0FEA                     	;# 
  1147  0FEB                     	;# 
  1148  0FED                     	;# 
  1149  0FEE                     	;# 
  1150  0FEF                     	;# 
  1151  0000                     	;# 
  1152  0001                     	;# 
  1153  0002                     	;# 
  1154  0003                     	;# 
  1155  0004                     	;# 
  1156  0005                     	;# 
  1157  0006                     	;# 
  1158  0007                     	;# 
  1159  0008                     	;# 
  1160  0009                     	;# 
  1161  000A                     	;# 
  1162  000B                     	;# 
  1163  000C                     	;# 
  1164  000D                     	;# 
  1165  000E                     	;# 
  1166  0010                     	;# 
  1167  0011                     	;# 
  1168  0012                     	;# 
  1169  0015                     	;# 
  1170  0016                     	;# 
  1171  0016                     	;# 
  1172  0017                     	;# 
  1173  0018                     	;# 
  1174  0019                     	;# 
  1175  001A                     	;# 
  1176  001B                     	;# 
  1177  001C                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  008E                     	;# 
  1181  0090                     	;# 
  1182  0091                     	;# 
  1183  0092                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010D                     	;# 
  1196  010E                     	;# 
  1197  0116                     	;# 
  1198  0117                     	;# 
  1199  011D                     	;# 
  1200  018C                     	;# 
  1201  018D                     	;# 
  1202  018E                     	;# 
  1203  0191                     	;# 
  1204  0191                     	;# 
  1205  0192                     	;# 
  1206  0193                     	;# 
  1207  0193                     	;# 
  1208  0194                     	;# 
  1209  0195                     	;# 
  1210  0196                     	;# 
  1211  0197                     	;# 
  1212  0199                     	;# 
  1213  019A                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019C                     	;# 
  1219  019C                     	;# 
  1220  019D                     	;# 
  1221  019E                     	;# 
  1222  019F                     	;# 
  1223  020D                     	;# 
  1224  0210                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0216                     	;# 
  1237  0216                     	;# 
  1238  0217                     	;# 
  1239  0217                     	;# 
  1240  0291                     	;# 
  1241  0291                     	;# 
  1242  0292                     	;# 
  1243  0293                     	;# 
  1244  0298                     	;# 
  1245  0298                     	;# 
  1246  0299                     	;# 
  1247  029A                     	;# 
  1248  0394                     	;# 
  1249  0395                     	;# 
  1250  0396                     	;# 
  1251  0FE4                     	;# 
  1252  0FE5                     	;# 
  1253  0FE6                     	;# 
  1254  0FE7                     	;# 
  1255  0FE8                     	;# 
  1256  0FE9                     	;# 
  1257  0FEA                     	;# 
  1258  0FEB                     	;# 
  1259  0FED                     	;# 
  1260  0FEE                     	;# 
  1261  0FEF                     	;# 
  1262  0000                     	;# 
  1263  0001                     	;# 
  1264  0002                     	;# 
  1265  0003                     	;# 
  1266  0004                     	;# 
  1267  0005                     	;# 
  1268  0006                     	;# 
  1269  0007                     	;# 
  1270  0008                     	;# 
  1271  0009                     	;# 
  1272  000A                     	;# 
  1273  000B                     	;# 
  1274  000C                     	;# 
  1275  000D                     	;# 
  1276  000E                     	;# 
  1277  0010                     	;# 
  1278  0011                     	;# 
  1279  0012                     	;# 
  1280  0015                     	;# 
  1281  0016                     	;# 
  1282  0016                     	;# 
  1283  0017                     	;# 
  1284  0018                     	;# 
  1285  0019                     	;# 
  1286  001A                     	;# 
  1287  001B                     	;# 
  1288  001C                     	;# 
  1289  008C                     	;# 
  1290  008D                     	;# 
  1291  008E                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0095                     	;# 
  1296  0096                     	;# 
  1297  0097                     	;# 
  1298  0099                     	;# 
  1299  009A                     	;# 
  1300  009B                     	;# 
  1301  009B                     	;# 
  1302  009C                     	;# 
  1303  009D                     	;# 
  1304  009E                     	;# 
  1305  010C                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  011D                     	;# 
  1311  018C                     	;# 
  1312  018D                     	;# 
  1313  018E                     	;# 
  1314  0191                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0193                     	;# 
  1318  0193                     	;# 
  1319  0194                     	;# 
  1320  0195                     	;# 
  1321  0196                     	;# 
  1322  0197                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  020D                     	;# 
  1335  0210                     	;# 
  1336  0211                     	;# 
  1337  0211                     	;# 
  1338  0212                     	;# 
  1339  0212                     	;# 
  1340  0213                     	;# 
  1341  0213                     	;# 
  1342  0214                     	;# 
  1343  0214                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0291                     	;# 
  1352  0291                     	;# 
  1353  0292                     	;# 
  1354  0293                     	;# 
  1355  0298                     	;# 
  1356  0298                     	;# 
  1357  0299                     	;# 
  1358  029A                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0FE4                     	;# 
  1363  0FE5                     	;# 
  1364  0FE6                     	;# 
  1365  0FE7                     	;# 
  1366  0FE8                     	;# 
  1367  0FE9                     	;# 
  1368  0FEA                     	;# 
  1369  0FEB                     	;# 
  1370  0FED                     	;# 
  1371  0FEE                     	;# 
  1372  0FEF                     	;# 
  1373  0000                     	;# 
  1374  0001                     	;# 
  1375  0002                     	;# 
  1376  0003                     	;# 
  1377  0004                     	;# 
  1378  0005                     	;# 
  1379  0006                     	;# 
  1380  0007                     	;# 
  1381  0008                     	;# 
  1382  0009                     	;# 
  1383  000A                     	;# 
  1384  000B                     	;# 
  1385  000C                     	;# 
  1386  000D                     	;# 
  1387  000E                     	;# 
  1388  0010                     	;# 
  1389  0011                     	;# 
  1390  0012                     	;# 
  1391  0015                     	;# 
  1392  0016                     	;# 
  1393  0016                     	;# 
  1394  0017                     	;# 
  1395  0018                     	;# 
  1396  0019                     	;# 
  1397  001A                     	;# 
  1398  001B                     	;# 
  1399  001C                     	;# 
  1400  008C                     	;# 
  1401  008D                     	;# 
  1402  008E                     	;# 
  1403  0090                     	;# 
  1404  0091                     	;# 
  1405  0092                     	;# 
  1406  0095                     	;# 
  1407  0096                     	;# 
  1408  0097                     	;# 
  1409  0099                     	;# 
  1410  009A                     	;# 
  1411  009B                     	;# 
  1412  009B                     	;# 
  1413  009C                     	;# 
  1414  009D                     	;# 
  1415  009E                     	;# 
  1416  010C                     	;# 
  1417  010D                     	;# 
  1418  010E                     	;# 
  1419  0116                     	;# 
  1420  0117                     	;# 
  1421  011D                     	;# 
  1422  018C                     	;# 
  1423  018D                     	;# 
  1424  018E                     	;# 
  1425  0191                     	;# 
  1426  0191                     	;# 
  1427  0192                     	;# 
  1428  0193                     	;# 
  1429  0193                     	;# 
  1430  0194                     	;# 
  1431  0195                     	;# 
  1432  0196                     	;# 
  1433  0197                     	;# 
  1434  0199                     	;# 
  1435  019A                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019C                     	;# 
  1441  019C                     	;# 
  1442  019D                     	;# 
  1443  019E                     	;# 
  1444  019F                     	;# 
  1445  020D                     	;# 
  1446  0210                     	;# 
  1447  0211                     	;# 
  1448  0211                     	;# 
  1449  0212                     	;# 
  1450  0212                     	;# 
  1451  0213                     	;# 
  1452  0213                     	;# 
  1453  0214                     	;# 
  1454  0214                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0216                     	;# 
  1459  0216                     	;# 
  1460  0217                     	;# 
  1461  0217                     	;# 
  1462  0291                     	;# 
  1463  0291                     	;# 
  1464  0292                     	;# 
  1465  0293                     	;# 
  1466  0298                     	;# 
  1467  0298                     	;# 
  1468  0299                     	;# 
  1469  029A                     	;# 
  1470  0394                     	;# 
  1471  0395                     	;# 
  1472  0396                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0010                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0090                     	;# 
  1515  0091                     	;# 
  1516  0092                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  011D                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0191                     	;# 
  1537  0191                     	;# 
  1538  0192                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0197                     	;# 
  1545  0199                     	;# 
  1546  019A                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019C                     	;# 
  1552  019C                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019F                     	;# 
  1556  020D                     	;# 
  1557  0210                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0216                     	;# 
  1570  0216                     	;# 
  1571  0217                     	;# 
  1572  0217                     	;# 
  1573  0291                     	;# 
  1574  0291                     	;# 
  1575  0292                     	;# 
  1576  0293                     	;# 
  1577  0298                     	;# 
  1578  0298                     	;# 
  1579  0299                     	;# 
  1580  029A                     	;# 
  1581  0394                     	;# 
  1582  0395                     	;# 
  1583  0396                     	;# 
  1584  0FE4                     	;# 
  1585  0FE5                     	;# 
  1586  0FE6                     	;# 
  1587  0FE7                     	;# 
  1588  0FE8                     	;# 
  1589  0FE9                     	;# 
  1590  0FEA                     	;# 
  1591  0FEB                     	;# 
  1592  0FED                     	;# 
  1593  0FEE                     	;# 
  1594  0FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0015                     	;# 
  1614  0016                     	;# 
  1615  0016                     	;# 
  1616  0017                     	;# 
  1617  0018                     	;# 
  1618  0019                     	;# 
  1619  001A                     	;# 
  1620  001B                     	;# 
  1621  001C                     	;# 
  1622  008C                     	;# 
  1623  008D                     	;# 
  1624  008E                     	;# 
  1625  0090                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0095                     	;# 
  1629  0096                     	;# 
  1630  0097                     	;# 
  1631  0099                     	;# 
  1632  009A                     	;# 
  1633  009B                     	;# 
  1634  009B                     	;# 
  1635  009C                     	;# 
  1636  009D                     	;# 
  1637  009E                     	;# 
  1638  010C                     	;# 
  1639  010D                     	;# 
  1640  010E                     	;# 
  1641  0116                     	;# 
  1642  0117                     	;# 
  1643  011D                     	;# 
  1644  018C                     	;# 
  1645  018D                     	;# 
  1646  018E                     	;# 
  1647  0191                     	;# 
  1648  0191                     	;# 
  1649  0192                     	;# 
  1650  0193                     	;# 
  1651  0193                     	;# 
  1652  0194                     	;# 
  1653  0195                     	;# 
  1654  0196                     	;# 
  1655  0197                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019C                     	;# 
  1663  019C                     	;# 
  1664  019D                     	;# 
  1665  019E                     	;# 
  1666  019F                     	;# 
  1667  020D                     	;# 
  1668  0210                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0216                     	;# 
  1681  0216                     	;# 
  1682  0217                     	;# 
  1683  0217                     	;# 
  1684  0291                     	;# 
  1685  0291                     	;# 
  1686  0292                     	;# 
  1687  0293                     	;# 
  1688  0298                     	;# 
  1689  0298                     	;# 
  1690  0299                     	;# 
  1691  029A                     	;# 
  1692  0394                     	;# 
  1693  0395                     	;# 
  1694  0396                     	;# 
  1695  0FE4                     	;# 
  1696  0FE5                     	;# 
  1697  0FE6                     	;# 
  1698  0FE7                     	;# 
  1699  0FE8                     	;# 
  1700  0FE9                     	;# 
  1701  0FEA                     	;# 
  1702  0FEB                     	;# 
  1703  0FED                     	;# 
  1704  0FEE                     	;# 
  1705  0FEF                     	;# 
  1706  0000                     	;# 
  1707  0001                     	;# 
  1708  0002                     	;# 
  1709  0003                     	;# 
  1710  0004                     	;# 
  1711  0005                     	;# 
  1712  0006                     	;# 
  1713  0007                     	;# 
  1714  0008                     	;# 
  1715  0009                     	;# 
  1716  000A                     	;# 
  1717  000B                     	;# 
  1718  000C                     	;# 
  1719  000D                     	;# 
  1720  000E                     	;# 
  1721  0010                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  0090                     	;# 
  1737  0091                     	;# 
  1738  0092                     	;# 
  1739  0095                     	;# 
  1740  0096                     	;# 
  1741  0097                     	;# 
  1742  0099                     	;# 
  1743  009A                     	;# 
  1744  009B                     	;# 
  1745  009B                     	;# 
  1746  009C                     	;# 
  1747  009D                     	;# 
  1748  009E                     	;# 
  1749  010C                     	;# 
  1750  010D                     	;# 
  1751  010E                     	;# 
  1752  0116                     	;# 
  1753  0117                     	;# 
  1754  011D                     	;# 
  1755  018C                     	;# 
  1756  018D                     	;# 
  1757  018E                     	;# 
  1758  0191                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0193                     	;# 
  1762  0193                     	;# 
  1763  0194                     	;# 
  1764  0195                     	;# 
  1765  0196                     	;# 
  1766  0197                     	;# 
  1767  0199                     	;# 
  1768  019A                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019C                     	;# 
  1774  019C                     	;# 
  1775  019D                     	;# 
  1776  019E                     	;# 
  1777  019F                     	;# 
  1778  020D                     	;# 
  1779  0210                     	;# 
  1780  0211                     	;# 
  1781  0211                     	;# 
  1782  0212                     	;# 
  1783  0212                     	;# 
  1784  0213                     	;# 
  1785  0213                     	;# 
  1786  0214                     	;# 
  1787  0214                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  0291                     	;# 
  1796  0291                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0298                     	;# 
  1800  0298                     	;# 
  1801  0299                     	;# 
  1802  029A                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  0FE4                     	;# 
  1807  0FE5                     	;# 
  1808  0FE6                     	;# 
  1809  0FE7                     	;# 
  1810  0FE8                     	;# 
  1811  0FE9                     	;# 
  1812  0FEA                     	;# 
  1813  0FEB                     	;# 
  1814  0FED                     	;# 
  1815  0FEE                     	;# 
  1816  0FEF                     	;# 
  1817  0000                     	;# 
  1818  0001                     	;# 
  1819  0002                     	;# 
  1820  0003                     	;# 
  1821  0004                     	;# 
  1822  0005                     	;# 
  1823  0006                     	;# 
  1824  0007                     	;# 
  1825  0008                     	;# 
  1826  0009                     	;# 
  1827  000A                     	;# 
  1828  000B                     	;# 
  1829  000C                     	;# 
  1830  000D                     	;# 
  1831  000E                     	;# 
  1832  0010                     	;# 
  1833  0011                     	;# 
  1834  0012                     	;# 
  1835  0015                     	;# 
  1836  0016                     	;# 
  1837  0016                     	;# 
  1838  0017                     	;# 
  1839  0018                     	;# 
  1840  0019                     	;# 
  1841  001A                     	;# 
  1842  001B                     	;# 
  1843  001C                     	;# 
  1844  008C                     	;# 
  1845  008D                     	;# 
  1846  008E                     	;# 
  1847  0090                     	;# 
  1848  0091                     	;# 
  1849  0092                     	;# 
  1850  0095                     	;# 
  1851  0096                     	;# 
  1852  0097                     	;# 
  1853  0099                     	;# 
  1854  009A                     	;# 
  1855  009B                     	;# 
  1856  009B                     	;# 
  1857  009C                     	;# 
  1858  009D                     	;# 
  1859  009E                     	;# 
  1860  010C                     	;# 
  1861  010D                     	;# 
  1862  010E                     	;# 
  1863  0116                     	;# 
  1864  0117                     	;# 
  1865  011D                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  018E                     	;# 
  1869  0191                     	;# 
  1870  0191                     	;# 
  1871  0192                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  019A                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019C                     	;# 
  1885  019C                     	;# 
  1886  019D                     	;# 
  1887  019E                     	;# 
  1888  019F                     	;# 
  1889  020D                     	;# 
  1890  0210                     	;# 
  1891  0211                     	;# 
  1892  0211                     	;# 
  1893  0212                     	;# 
  1894  0212                     	;# 
  1895  0213                     	;# 
  1896  0213                     	;# 
  1897  0214                     	;# 
  1898  0214                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0216                     	;# 
  1903  0216                     	;# 
  1904  0217                     	;# 
  1905  0217                     	;# 
  1906  0291                     	;# 
  1907  0291                     	;# 
  1908  0292                     	;# 
  1909  0293                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  0394                     	;# 
  1915  0395                     	;# 
  1916  0396                     	;# 
  1917  0FE4                     	;# 
  1918  0FE5                     	;# 
  1919  0FE6                     	;# 
  1920  0FE7                     	;# 
  1921  0FE8                     	;# 
  1922  0FE9                     	;# 
  1923  0FEA                     	;# 
  1924  0FEB                     	;# 
  1925  0FED                     	;# 
  1926  0FEE                     	;# 
  1927  0FEF                     	;# 
  1928  0000                     	;# 
  1929  0001                     	;# 
  1930  0002                     	;# 
  1931  0003                     	;# 
  1932  0004                     	;# 
  1933  0005                     	;# 
  1934  0006                     	;# 
  1935  0007                     	;# 
  1936  0008                     	;# 
  1937  0009                     	;# 
  1938  000A                     	;# 
  1939  000B                     	;# 
  1940  000C                     	;# 
  1941  000D                     	;# 
  1942  000E                     	;# 
  1943  0010                     	;# 
  1944  0011                     	;# 
  1945  0012                     	;# 
  1946  0015                     	;# 
  1947  0016                     	;# 
  1948  0016                     	;# 
  1949  0017                     	;# 
  1950  0018                     	;# 
  1951  0019                     	;# 
  1952  001A                     	;# 
  1953  001B                     	;# 
  1954  001C                     	;# 
  1955  008C                     	;# 
  1956  008D                     	;# 
  1957  008E                     	;# 
  1958  0090                     	;# 
  1959  0091                     	;# 
  1960  0092                     	;# 
  1961  0095                     	;# 
  1962  0096                     	;# 
  1963  0097                     	;# 
  1964  0099                     	;# 
  1965  009A                     	;# 
  1966  009B                     	;# 
  1967  009B                     	;# 
  1968  009C                     	;# 
  1969  009D                     	;# 
  1970  009E                     	;# 
  1971  010C                     	;# 
  1972  010D                     	;# 
  1973  010E                     	;# 
  1974  0116                     	;# 
  1975  0117                     	;# 
  1976  011D                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  0191                     	;# 
  1981  0191                     	;# 
  1982  0192                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0197                     	;# 
  1989  0199                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019C                     	;# 
  1996  019C                     	;# 
  1997  019D                     	;# 
  1998  019E                     	;# 
  1999  019F                     	;# 
  2000  020D                     	;# 
  2001  0210                     	;# 
  2002  0211                     	;# 
  2003  0211                     	;# 
  2004  0212                     	;# 
  2005  0212                     	;# 
  2006  0213                     	;# 
  2007  0213                     	;# 
  2008  0214                     	;# 
  2009  0214                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  0291                     	;# 
  2018  0291                     	;# 
  2019  0292                     	;# 
  2020  0293                     	;# 
  2021  0298                     	;# 
  2022  0298                     	;# 
  2023  0299                     	;# 
  2024  029A                     	;# 
  2025  0394                     	;# 
  2026  0395                     	;# 
  2027  0396                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039                           
  2040                           	psect	idataBANK3
  2041  11D9                     __pidataBANK3:	
  2042                           
  2043                           ;initializer for __product
  2044  11D9  3463               	retlw	99
  2045  11DA  3402               	retlw	2
  2046  11DB  3400               	retlw	0
  2047  11DC  3400               	retlw	0
  2048  11DD  3400               	retlw	0
  2049  11DE  3400               	retlw	0
  2050  11DF  3400               	retlw	0
  2051  11E0  3400               	retlw	0
  2052  11E1  3400               	retlw	0
  2053  11E2  3400               	retlw	0
  2054  11E3  3400               	retlw	0
  2055  11E4  3400               	retlw	0
  2056  11E5  34FF               	retlw	255
  2057  11E6  34FF               	retlw	255
  2058  11E7  34FF               	retlw	255
  2059  11E8  3400               	retlw	0
  2060  11E9  3400               	retlw	0
  2061  11EA  3400               	retlw	0
  2062  11EB  3400               	retlw	0
  2063  11EC  3400               	retlw	0
  2064  11ED  3400               	retlw	0
  2065  11EE  3400               	retlw	0
  2066  11EF  3400               	retlw	0
  2067  11F0  3400               	retlw	0
  2068  11F1  3400               	retlw	0
  2069  11F2  3400               	retlw	0
  2070  11F3  3400               	retlw	0
  2071  11F4  3400               	retlw	0
  2072  11F5  3400               	retlw	0
  2073  11F6  3400               	retlw	0
  2074  11F7  3400               	retlw	0
  2075  11F8  3400               	retlw	0
  2076                           
  2077                           	psect	stringtext
  2078  1000                     __pstringtext:	
  2079  1000                     _CC2500_registers_address:	
  2080  1000  3403               	retlw	3
  2081  1001  3416               	retlw	22
  2082  1002  3417               	retlw	23
  2083  1003  341E               	retlw	30
  2084  1004  341F               	retlw	31
  2085  1005  3420               	retlw	32
  2086  1006  342A               	retlw	42
  2087  1007  342B               	retlw	43
  2088  1008  340B               	retlw	11
  2089  1009  340C               	retlw	12
  2090  100A  340D               	retlw	13
  2091  100B  340E               	retlw	14
  2092  100C  340F               	retlw	15
  2093  100D  3410               	retlw	16
  2094  100E  3411               	retlw	17
  2095  100F  3412               	retlw	18
  2096  1010  3413               	retlw	19
  2097  1011  3414               	retlw	20
  2098  1012  340A               	retlw	10
  2099  1013  3415               	retlw	21
  2100  1014  3421               	retlw	33
  2101  1015  3422               	retlw	34
  2102  1016  3418               	retlw	24
  2103  1017  3419               	retlw	25
  2104  1018  341A               	retlw	26
  2105  1019  341B               	retlw	27
  2106  101A  341C               	retlw	28
  2107  101B  341D               	retlw	29
  2108  101C  3423               	retlw	35
  2109  101D  3424               	retlw	36
  2110  101E  3425               	retlw	37
  2111  101F  3426               	retlw	38
  2112  1020  3429               	retlw	41
  2113  1021  342C               	retlw	44
  2114  1022  342D               	retlw	45
  2115  1023  342E               	retlw	46
  2116  1024  3400               	retlw	0
  2117  1025  3401               	retlw	1
  2118  1026  3402               	retlw	2
  2119  1027  3407               	retlw	7
  2120  1028  3408               	retlw	8
  2121  1029  3409               	retlw	9
  2122  102A  3406               	retlw	6
  2123  102B  3404               	retlw	4
  2124  102C  3405               	retlw	5
  2125  102D  3427               	retlw	39
  2126  102E  3428               	retlw	40
  2127  102F                     __end_of_CC2500_registers_address:	
  2128  102F                     _CC2500_rfSettings:	
  2129  102F  3407               	retlw	7
  2130  1030  3407               	retlw	7
  2131  1031  3430               	retlw	48
  2132  1032  3487               	retlw	135
  2133  1033  346B               	retlw	107
  2134  1034  34F8               	retlw	248
  2135  1035  347F               	retlw	127
  2136  1036  343F               	retlw	63
  2137  1037  3409               	retlw	9
  2138  1038  3400               	retlw	0
  2139  1039  345C               	retlw	92
  2140  103A  34A7               	retlw	167
  2141  103B  3462               	retlw	98
  2142  103C  3486               	retlw	134
  2143  103D  3483               	retlw	131
  2144  103E  3403               	retlw	3
  2145  103F  3422               	retlw	34
  2146  1040  34F8               	retlw	248
  2147  1041  3400               	retlw	0
  2148  1042  3444               	retlw	68
  2149  1043  34B6               	retlw	182
  2150  1044  3410               	retlw	16
  2151  1045  3418               	retlw	24
  2152  1046  341D               	retlw	29
  2153  1047  341C               	retlw	28
  2154  1048  34C7               	retlw	199
  2155  1049  3400               	retlw	0
  2156  104A  34B2               	retlw	178
  2157  104B  34EA               	retlw	234
  2158  104C  340A               	retlw	10
  2159  104D  3400               	retlw	0
  2160  104E  3411               	retlw	17
  2161  104F  3459               	retlw	89
  2162  1050  3488               	retlw	136
  2163  1051  3431               	retlw	49
  2164  1052  340B               	retlw	11
  2165  1053  342F               	retlw	47
  2166  1054  342E               	retlw	46
  2167  1055  3406               	retlw	6
  2168  1056  3404               	retlw	4
  2169  1057  3405               	retlw	5
  2170  1058  3400               	retlw	0
  2171  1059  3430               	retlw	48
  2172  105A  34D3               	retlw	211
  2173  105B  3491               	retlw	145
  2174  105C  3441               	retlw	65
  2175  105D  3400               	retlw	0
  2176  105E                     __end_of_CC2500_rfSettings:	
  2177  105E                     _CC2500_patable_vaule:	
  2178  105E  34FE               	retlw	254
  2179  105F  34FE               	retlw	254
  2180  1060  34FE               	retlw	254
  2181  1061  34FE               	retlw	254
  2182  1062  34FE               	retlw	254
  2183  1063  34FE               	retlw	254
  2184  1064  34FE               	retlw	254
  2185  1065  34FE               	retlw	254
  2186  1066                     __end_of_CC2500_patable_vaule:	
  2187                           
  2188                           	psect	nvBANK0
  2189  006F                     __pnvBANK0:	
  2190  006F                     _product:	
  2191  006F                     	ds	1
  2192  000C                     _PORTA	set	12
  2193  000D                     _PORTB	set	13
  2194  000E                     _PORTC	set	14
  2195  0015                     _TMR0	set	21
  2196  005F                     _GIE	set	95
  2197  005B                     _IOCIE	set	91
  2198  0058                     _IOCIF	set	88
  2199  005E                     _PEIE	set	94
  2200  0060                     _RA0	set	96
  2201  0063                     _RA3	set	99
  2202  0064                     _RA4	set	100
  2203  0066                     _RA6	set	102
  2204  0067                     _RA7	set	103
  2205  0068                     _RB0	set	104
  2206  0069                     _RB1	set	105
  2207  006B                     _RB3	set	107
  2208  006C                     _RB4	set	108
  2209  006D                     _RB5	set	109
  2210  0070                     _RC0	set	112
  2211  0071                     _RC1	set	113
  2212  0072                     _RC2	set	114
  2213  0074                     _RC4	set	116
  2214  0075                     _RC5	set	117
  2215  0077                     _RC7	set	119
  2216  005D                     _TMR0IE	set	93
  2217  005A                     _TMR0IF	set	90
  2218  009D                     _ADCON0	set	157
  2219  009E                     _ADCON1	set	158
  2220  009C                     _ADRESH	set	156
  2221  009B                     _ADRESL	set	155
  2222  0095                     _OPTION_REG	set	149
  2223  0099                     _OSCCON	set	153
  2224  008C                     _TRISA	set	140
  2225  008D                     _TRISB	set	141
  2226  008E                     _TRISC	set	142
  2227  04E9                     _GO_nDONE	set	1257
  2228  0117                     _FVRCON	set	279
  2229  010C                     _LATA	set	268
  2230  010D                     _LATB	set	269
  2231  010E                     _LATC	set	270
  2232  018C                     _ANSELA	set	396
  2233  018D                     _ANSELB	set	397
  2234  018E                     _ANSELC	set	398
  2235  0192                     _PMADRH	set	402
  2236  0191                     _PMADRL	set	401
  2237  0196                     _PMCON2	set	406
  2238  0194                     _PMDATH	set	404
  2239  0193                     _PMDATL	set	403
  2240  0CAE                     _CFGS	set	3246
  2241  0CAC                     _FREE	set	3244
  2242  0CAD                     _LWLO	set	3245
  2243  0CA8                     _RD	set	3240
  2244  0CA9                     _WR	set	3241
  2245  0CAA                     _WREN	set	3242
  2246  1069                     _WPUB1	set	4201
  2247  106A                     _WPUB2	set	4202
  2248  0396                     _IOCBF	set	918
  2249  0395                     _IOCBN	set	917
  2250  0394                     _IOCBP	set	916
  2251  1CB2                     _IOCBF2	set	7346
  2252                           
  2253                           ; #config settings
  2254  0000                     
  2255                           	psect	cinit
  2256  0015                     start_initialization:	
  2257  0015                     __initialization:	
  2258                           
  2259                           ; Clear objects allocated to BITCOMMON
  2260  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2261                           
  2262                           ; Clear objects allocated to COMMON
  2263  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2264  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2265  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2266  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to BANK0
  2269  001A  01ED               	clrf	__pbssBANK0& (0+127)
  2270  001B  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001C  30A0               	movlw	low __pbssBANK1
  2274  001D  0084               	movwf	4
  2275  001E  3000               	movlw	high __pbssBANK1
  2276  001F  0085               	movwf	5
  2277  0020  304F               	movlw	79
  2278  0021  319E  2621  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0024  3020               	movlw	low __pbssBANK2
  2282  0025  0084               	movwf	4
  2283  0026  3001               	movlw	high __pbssBANK2
  2284  0027  0085               	movwf	5
  2285  0028  304F               	movlw	79
  2286  0029  319E  2621  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002C  30C0               	movlw	low __pbssBANK3
  2290  002D  0084               	movwf	4
  2291  002E  3001               	movlw	high __pbssBANK3
  2292  002F  0085               	movwf	5
  2293  0030  3018               	movlw	24
  2294  0031  319E  2621  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Initialize objects allocated to BANK3
  2297  0034  30D9               	movlw	low __pidataBANK3
  2298  0035  0084               	movwf	4
  2299  0036  3091               	movlw	(high __pidataBANK3)| (0+128)
  2300  0037  0085               	movwf	5
  2301  0038  30A0               	movlw	low __pdataBANK3
  2302  0039  0086               	movwf	6
  2303  003A  3001               	movlw	high __pdataBANK3
  2304  003B  0087               	movwf	7
  2305  003C  3020               	movlw	32
  2306  003D  319E  261B         	fcall	init_ram
  2307  003F                     end_of_initialization:	
  2308                           ;End of C runtime variable initialization code
  2309                           
  2310  003F                     __end_of__initialization:	
  2311  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2312  0040  0020               	movlb	0
  2313  0041  3188  2884         	ljmp	_main	;jump to C main() function
  2314                           
  2315                           	psect	bitbssCOMMON
  2316  03E0                     __pbitbssCOMMON:	
  2317  03E0                     _Receive_OK:	
  2318  03E0                     	ds	1
  2319  03E1                     _Transceive_OK:	
  2320  03E1                     	ds	1
  2321                           
  2322                           	psect	bssCOMMON
  2323  0078                     __pbssCOMMON:	
  2324  0078                     _DelayOff:	
  2325  0078                     	ds	1
  2326  0079                     _DimmerLightsIntr:	
  2327  0079                     	ds	1
  2328  007A                     _RFSW:	
  2329  007A                     	ds	1
  2330  007B                     _SPI0Buffer:	
  2331  007B                     	ds	1
  2332                           
  2333                           	psect	bssBANK0
  2334  006D                     __pbssBANK0:	
  2335  006D                     _DimmerLights:	
  2336  006D                     	ds	1
  2337  006E                     _Sw:	
  2338  006E                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _myMain:	
  2343  00A0                     	ds	18
  2344  00B2                     _Buz1:	
  2345  00B2                     	ds	12
  2346  00BE                     _PF1:	
  2347  00BE                     	ds	8
  2348  00C6                     _RF1:	
  2349  00C6                     	ds	5
  2350  00CB                     _LED:	
  2351  00CB                     	ds	2
  2352  00CD                     _RF_Count:	
  2353  00CD                     	ds	2
  2354  00CF                     _CRC:	
  2355  00CF                     	ds	1
  2356  00D0                     _Dimmer:	
  2357  00D0                     	ds	1
  2358  00D1                     _DimmerLights11:	
  2359  00D1                     	ds	1
  2360  00D2                     _DimmerLightsIntrIOC:	
  2361  00D2                     	ds	1
  2362  00D3                     _RSSI:	
  2363  00D3                     	ds	1
  2364  00D4                     _Rx_Length:	
  2365  00D4                     	ds	1
  2366  00D5                     _Tx_Length:	
  2367  00D5                     	ds	1
  2368  00D6                     _r_address:	
  2369  00D6                     	ds	1
  2370  00D7                     _r_data:	
  2371  00D7                     	ds	1
  2372  00D8                     _s_data:	
  2373  00D8                     	ds	1
  2374  00D9                     _Temp1:	
  2375  00D9                     	ds	14
  2376  00E7                     _VarErrLED:	
  2377  00E7                     	ds	4
  2378  00EB                     _Dimmer1:	
  2379  00EB                     	ds	3
  2380  00EE                     _RFSW1:	
  2381  00EE                     	ds	1
  2382                           
  2383                           	psect	bssBANK2
  2384  0120                     __pbssBANK2:	
  2385  0120                     _RF_Data:	
  2386  0120                     	ds	21
  2387  0135                     _Timer0:	
  2388  0135                     	ds	8
  2389  013D                     _Memory:	
  2390  013D                     	ds	37
  2391  0162                     _DlySw1:	
  2392  0162                     	ds	5
  2393  0167                     _VarLED1:	
  2394  0167                     	ds	4
  2395  016B                     _VarLED2:	
  2396  016B                     	ds	4
  2397                           
  2398                           	psect	bssBANK3
  2399  01C0                     __pbssBANK3:	
  2400  01C0                     _DimmerLights1:	
  2401  01C0                     	ds	15
  2402  01CF                     _Sw1:	
  2403  01CF                     	ds	9
  2404                           
  2405                           	psect	dataBANK3
  2406  01A0                     __pdataBANK3:	
  2407  01A0                     __product:	
  2408  01A0                     	ds	32
  2409                           
  2410                           	psect	clrtext
  2411  1E21                     clear_ram0:	
  2412                           ;	Called with FSR0 containing the base address, and
  2413                           ;	WREG with the size to clear
  2414                           
  2415  1E21  0064               	clrwdt	;clear the watchdog before getting into this loop
  2416  1E22                     clrloop0:	
  2417  1E22  0180               	clrf	0	;clear RAM location pointed to by FSR
  2418  1E23  3101               	addfsr 0,1
  2419  1E24  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2420  1E25  2E22               	goto	clrloop0	;have we reached the end yet?
  2421  1E26  3400               	retlw	0	;all done for this memory range, return
  2422                           
  2423                           	psect	inittext
  2424  1E1B                     init_ram:	
  2425  1E1B  00FE               	movwf	126
  2426  1E1C                     initloop:	
  2427  1E1C  0012               	moviw fsr0++
  2428  1E1D  001E               	movwi fsr1++
  2429  1E1E  0BFE               	decfsz	126,f
  2430  1E1F  2E1C               	goto	initloop
  2431  1E20  3400               	retlw	0
  2432                           
  2433                           	psect	cstackCOMMON
  2434  0070                     __pcstackCOMMON:	
  2435  0070                     ?_Timeout_Counter:	
  2436  0070                     ?_set_TimeoutCleared:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ?_CC2500_WriteByte:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_CC2500_WriteCommand:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ?_CC2500_ReadStatus:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_CC2500_ReadByte:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_CC2500_PowerRST:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_CC2500_InitSetREG:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_CC2500_InitPATable:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_CC2500_ClearTXFIFO:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_ClearRXFIFO:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_FrequencyCabr:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_SIDLEMode:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_DlyOff_Initialization:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_DlyOff_Main:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_setTxData:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_setDimmerLights_Initialization:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_Dimmer_Initialization:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_setMemory_GO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setDimmerLights_Main:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_setDimmerLights_ERROR:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setLED_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setLED_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_Fosc_Set:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_IO_Set:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_TMR0_Set:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_ADC_Set:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_IOC_Set:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_IOC_ISR:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_TMR0_ISR:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_Flash_Memory_Write:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_Flash_Memory_Modify:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setTemp_Initialization:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setTemp_Main:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setOverTemp_Exceptions:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setSw_Enable:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setRF_Enable:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setPowerFault_Initialization:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setPowerFault_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setPowerFault_Exceptions:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setRF_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setRF_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_RF_RxDisable:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_getRxData:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setLog_Code:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setControl_Lights_Table:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_setRFSW_Control:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setRFSW_AdjControl:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_setRF_DimmerValue:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_setSw_Initialization:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setSw_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Sw_DimmerOnFunc:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Sw_DimmerAdjFunc:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Sw_DimmerOffFunc:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_my_Main:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Buzzer_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Buzzer_Main:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_TxData:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_RxData:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_PowerOnInitial:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DelayOffPointSelect:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_DelayOff_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_DelayOff_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_DimmerIntrIOCPointSelect:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ??_DimmerIntrIOCPointSelect:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DimmerIntrPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ??_DimmerIntrPointSelect:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_IntrControl:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_DimmerLightsPointSelect:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_DimmerLights_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DimmerLights_Close:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_DimmerLights_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_DimmerLights_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_AdjRF:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_LedPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_LED_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_LED_Main:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Mcu_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_ISR:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setDimmerReClock:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Flash_Memory_Unlock:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Flash_Memory_Erasing:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Temp_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setTemp_Enable:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_getTemp_AD:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Temp_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_PowerFault_Initialization:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_PowerFault_Main:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_getPowerFault_AD:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_RF_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_RF_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setRF_Learn:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RfSWPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_TouchPower:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_SwPointSelect:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Switch_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Switch_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_DelayTimejudge:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getDimmerLights_StatusFlag:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_getPercentValue:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Read:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_getPF_Safe:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_setPercentValue:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_getTemp_Safe:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757                           
  2758                           ; 1 bytes @ 0x0
  2759  0070                     	ds	1
  2760  0071                     DimmerIntrIOCPointSelect@lights:	
  2761  0071                     DimmerIntrPointSelect@lights:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764                           
  2765                           ; 1 bytes @ 0x1
  2766  0071                     	ds	1
  2767  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2768  0072                     ??_setDimmerLights_IntrControl:	
  2769                           ; 0 bytes @ 0x2
  2770                           
  2771  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2772                           ; 0 bytes @ 0x2
  2773                           
  2774                           
  2775                           ; 1 bytes @ 0x2
  2776  0072                     	ds	1
  2777  0073                     ??_IOC_ISR:	
  2778  0073                     ??_setDimmerReClock:	
  2779                           ; 0 bytes @ 0x3
  2780                           
  2781                           
  2782                           ; 0 bytes @ 0x3
  2783  0073                     	ds	3
  2784  0076                     setDimmerLights_IntrControl@lights:	
  2785                           
  2786                           ; 1 bytes @ 0x6
  2787  0076                     	ds	1
  2788  0077                     ??_TMR0_ISR:	
  2789  0077                     ??_ISR:	
  2790                           ; 0 bytes @ 0x7
  2791                           
  2792                           
  2793                           ; 0 bytes @ 0x7
  2794  0077                     	ds	1
  2795                           
  2796                           	psect	cstackBANK0
  2797  0020                     __pcstackBANK0:	
  2798  0020                     ??_Timeout_Counter:	
  2799  0020                     ??_set_TimeoutCleared:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_CC2500_WriteByte:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_CC2500_ReadByte:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ?_DelayTime_1us:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setTxData:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_Dimmer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_getDimmerLights_StatusFlag:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_setMemory_GO:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_Fosc_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_IO_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_TMR0_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_ADC_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_IOC_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Read:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Flash_Memory_Write:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setTemp_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_getPF_Safe:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setRF_Enable:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_setPowerFault_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_setRF_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_myMain_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Buzzer_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Buzzer_Main:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_DelayOffPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_DimmerLightsPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_LedPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_Mcu_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_Flash_Memory_Unlock:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Flash_Memory_Erasing:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Temp_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTemp_Enable:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_getTemp_Safe:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_PowerFault_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_setRF_Learn:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_RfSWPointSelect:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_TouchPower:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_SwPointSelect:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?___bmul:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ?_getBuz_GO:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ?_getAD:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ?___awdiv:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     ?___ftpack:	
  2923                           ; 2 bytes @ 0x0
  2924                           
  2925  0020                     getDimmerLights_StatusFlag@Status:	
  2926                           ; 3 bytes @ 0x0
  2927                           
  2928  0020                     LedPointSelect@led:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     getAD@adcon1:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     setTemp_Enable@command:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     getPF_Safe@i:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     setRF_Learn@command:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     setRF_Enable@command:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     ___bmul@multiplicand:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     DelayTime_1us@count:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ___awdiv@divisor:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ___ftpack@arg:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 3 bytes @ 0x0
  2960  0020                     	ds	1
  2961  0021                     ?_setLED:	
  2962  0021                     ??_setLED_Main:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     ??_RF_Initialization:	
  2966                           ; 0 bytes @ 0x1
  2967                           
  2968  0021                     ??___bmul:	
  2969                           ; 0 bytes @ 0x1
  2970                           
  2971  0021                     CC2500_WriteByte@loop_a:	
  2972                           ; 0 bytes @ 0x1
  2973                           
  2974  0021                     CC2500_ReadByte@loop_b:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     DelayOffPointSelect@sw:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     DimmerLightsPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     setLED@command:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     Flash_Memory_Read@i:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     Flash_Memory_Write@i:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     RfSWPointSelect@sw:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     SwPointSelect@sw:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998                           
  2999                           ; 1 bytes @ 0x1
  3000  0021                     	ds	1
  3001  0022                     ??_CC2500_WriteCommand:	
  3002  0022                     ??_CC2500_ReadStatus:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_DelayTime_1us:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_CC2500_WriteREG:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ??_DlyOff_Initialization:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setSw_Status:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ?_setRFSW_Status:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_setDimmerLights_Trigger:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ?_setDimmerLights_Switch:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ??_setDimmerLights_Initialization:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setDimmerLights_TriggerERROR:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ??_setLED:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ??_setSw_Enable:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_getBuz_GO:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_setDimmerLights_AdjGo:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_TriggerAdj:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     CC2500_WriteREG@value:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     DlyOff_Initialization@sw:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setDimmerLights_TriggerERROR@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setDimmerLights_Switch@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setDimmerLights_AdjGo@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setDimmerLights_Trigger@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setDimmerLights_TriggerAdj@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setLED@led:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     Flash_Memory_Read@address:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setMemory_GO@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setRFSW_Status@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     setSw_Enable@command:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setSw_Status@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     ___bmul@product:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     DelayTime_1us@i:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     ___awdiv@dividend:	
  3093                           ; 2 bytes @ 0x2
  3094                           
  3095                           
  3096                           ; 2 bytes @ 0x2
  3097  0022                     	ds	1
  3098  0023                     ??_CC2500_WriteREG:	
  3099  0023                     ??_setSw_Status:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setRFSW_Status:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_Trigger:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_setDimmerLights_Switch:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ?_setDimmerLights:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_setDimmerLights_TriggerERROR:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_setLED_Initialization:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_setSw_Initialization:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     ??_DelayOff_Initialization:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     ??_DimmerLights_Close:	
  3127                           ; 0 bytes @ 0x3
  3128                           
  3129  0023                     ??_setDimmerLights_AdjGo:	
  3130                           ; 0 bytes @ 0x3
  3131                           
  3132  0023                     ??_setDimmerLights_TriggerAdj:	
  3133                           ; 0 bytes @ 0x3
  3134                           
  3135  0023                     ??_getAD:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     CC2500_WriteCommand@command:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     CC2500_ReadStatus@status_addr:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setDimmerLights_Initialization@lights:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setDimmerLights_TriggerERROR@lights:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setDimmerLights@status:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setDimmerLights_Switch@lights:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setDimmerLights_AdjGo@lights:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setDimmerLights_Trigger@lights:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setDimmerLights_TriggerAdj@lights:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setLED_Initialization@led:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     setLED_Main@led:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     getAD@adcon0:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     Flash_Memory_Read@ret:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setRFSW_Status@sw:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setSw_Initialization@sw:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setSw_Status@sw:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     ___bmul@multiplier:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     ___ftpack@exp:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192                           
  3193                           ; 1 bytes @ 0x3
  3194  0023                     	ds	1
  3195  0024                     ??_CC2500_ClearTXFIFO:	
  3196  0024                     ??_CC2500_ClearRXFIFO:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_CC2500_SIDLEMode:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_DelayTimejudge:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_setDimmerLights:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??_setDimmerLights_ERROR:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     ??_Flash_Memory_Modify:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     ??_RF_RxDisable:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ??_Sw_DimmerAdjFunc:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_CC2500_TxData:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_CC2500_RxData:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ??_DimmerLights_Initialization:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_LED_Initialization:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_LED_Main:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_getTemp_AD:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_getPowerFault_AD:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_Switch_Initialization:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??___awdiv:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     CC2500_WriteREG@w_addr:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     Sw_DimmerAdjFunc@Idle:	
  3251                           ; 1 bytes @ 0x4
  3252                           
  3253  0024                     ___ftpack@sign:	
  3254                           ; 1 bytes @ 0x4
  3255                           
  3256  0024                     getBuz_GO@i:	
  3257                           ; 1 bytes @ 0x4
  3258                           
  3259  0024                     DelayTime_1us@j:	
  3260                           ; 2 bytes @ 0x4
  3261                           
  3262                           
  3263                           ; 2 bytes @ 0x4
  3264  0024                     	ds	1
  3265  0025                     ??_CC2500_InitSetREG:	
  3266  0025                     ??_CC2500_InitPATable:	
  3267                           ; 0 bytes @ 0x5
  3268                           
  3269  0025                     ??___ftpack:	
  3270                           ; 0 bytes @ 0x5
  3271                           
  3272  0025                     CC2500_TxData@loop_e:	
  3273                           ; 0 bytes @ 0x5
  3274                           
  3275  0025                     CC2500_RxData@loop_f:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278  0025                     setDimmerLights_ERROR@lights:	
  3279                           ; 1 bytes @ 0x5
  3280                           
  3281  0025                     setDimmerLights@lights:	
  3282                           ; 1 bytes @ 0x5
  3283                           
  3284  0025                     Flash_Memory_Modify@i:	
  3285                           ; 1 bytes @ 0x5
  3286                           
  3287  0025                     getTemp_AD@channel:	
  3288                           ; 1 bytes @ 0x5
  3289                           
  3290  0025                     getPowerFault_AD@channel:	
  3291                           ; 1 bytes @ 0x5
  3292                           
  3293  0025                     Sw_DimmerAdjFunc@sw:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296  0025                     ___awdiv@counter:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299                           
  3300                           ; 1 bytes @ 0x5
  3301  0025                     	ds	1
  3302  0026                     ??_CC2500_PowerRST:	
  3303  0026                     ??_CC2500_FrequencyCabr:	
  3304                           ; 0 bytes @ 0x6
  3305                           
  3306  0026                     ??_Flash_Memory_Main:	
  3307                           ; 0 bytes @ 0x6
  3308                           
  3309  0026                     CC2500_InitSetREG@temp1:	
  3310                           ; 0 bytes @ 0x6
  3311                           
  3312  0026                     CC2500_InitPATable@temp:	
  3313                           ; 1 bytes @ 0x6
  3314                           
  3315  0026                     DelayTimejudge@i:	
  3316                           ; 1 bytes @ 0x6
  3317                           
  3318  0026                     ___awdiv@sign:	
  3319                           ; 1 bytes @ 0x6
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0x6
  3323  0026                     	ds	1
  3324  0027                     CC2500_InitSetREG@temp2:	
  3325  0027                     CC2500_InitPATable@loop_d:	
  3326                           ; 1 bytes @ 0x7
  3327                           
  3328  0027                     DelayTimejudge@j:	
  3329                           ; 1 bytes @ 0x7
  3330                           
  3331  0027                     ___awdiv@quotient:	
  3332                           ; 1 bytes @ 0x7
  3333                           
  3334                           
  3335                           ; 2 bytes @ 0x7
  3336  0027                     	ds	1
  3337  0028                     ?___awtoft:	
  3338  0028                     CC2500_InitSetREG@loop_c:	
  3339                           ; 3 bytes @ 0x8
  3340                           
  3341  0028                     DelayTimejudge@k:	
  3342                           ; 1 bytes @ 0x8
  3343                           
  3344  0028                     ___awtoft@c:	
  3345                           ; 1 bytes @ 0x8
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x8
  3349  0028                     	ds	1
  3350  0029                     ?_setBuz:	
  3351  0029                     ??_CC2500_PowerOnInitial:	
  3352                           ; 0 bytes @ 0x9
  3353                           
  3354  0029                     DelayTimejudge@value:	
  3355                           ; 0 bytes @ 0x9
  3356                           
  3357  0029                     setBuz@time:	
  3358                           ; 1 bytes @ 0x9
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0x9
  3362  0029                     	ds	1
  3363  002A                     ?_setDelayOff_GO:	
  3364  002A                     setDelayOff_GO@command:	
  3365                           ; 0 bytes @ 0xA
  3366                           
  3367                           
  3368                           ; 1 bytes @ 0xA
  3369  002A                     	ds	1
  3370  002B                     ??_setBuz:	
  3371  002B                     ??___awtoft:	
  3372                           ; 0 bytes @ 0xB
  3373                           
  3374  002B                     setDelayOff_GO@value:	
  3375                           ; 0 bytes @ 0xB
  3376                           
  3377                           
  3378                           ; 1 bytes @ 0xB
  3379  002B                     	ds	1
  3380  002C                     ??_setDelayOff_GO:	
  3381  002C                     setBuz@count:	
  3382                           ; 0 bytes @ 0xC
  3383                           
  3384                           
  3385                           ; 1 bytes @ 0xC
  3386  002C                     	ds	1
  3387  002D                     ??_setLog_Code:	
  3388  002D                     ??_my_Main:	
  3389                           ; 0 bytes @ 0xD
  3390                           
  3391  002D                     ??_DimmerLights_Exceptions:	
  3392                           ; 0 bytes @ 0xD
  3393                           
  3394  002D                     DimmerLights_Exceptions@status:	
  3395                           ; 0 bytes @ 0xD
  3396                           
  3397  002D                     ___awtoft@sign:	
  3398                           ; 1 bytes @ 0xD
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0xD
  3402  002D                     	ds	1
  3403  002E                     ??_setOverTemp_Exceptions:	
  3404  002E                     ??_setPowerFault_Exceptions:	
  3405                           ; 0 bytes @ 0xE
  3406                           
  3407  002E                     ?___ftdiv:	
  3408                           ; 0 bytes @ 0xE
  3409                           
  3410  002E                     ?___ftmul:	
  3411                           ; 3 bytes @ 0xE
  3412                           
  3413  002E                     setDelayOff_GO@sw:	
  3414                           ; 3 bytes @ 0xE
  3415                           
  3416  002E                     ___ftdiv@f2:	
  3417                           ; 1 bytes @ 0xE
  3418                           
  3419  002E                     ___ftmul@f1:	
  3420                           ; 3 bytes @ 0xE
  3421                           
  3422                           
  3423                           ; 3 bytes @ 0xE
  3424  002E                     	ds	1
  3425  002F                     setOverTemp_Exceptions@i:	
  3426  002F                     setPowerFault_Exceptions@i:	
  3427                           ; 1 bytes @ 0xF
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0xF
  3431  002F                     	ds	1
  3432  0030                     setOverTemp_Exceptions@command:	
  3433  0030                     setPowerFault_Exceptions@command:	
  3434                           ; 1 bytes @ 0x10
  3435                           
  3436                           
  3437                           ; 1 bytes @ 0x10
  3438  0030                     	ds	1
  3439  0031                     ??_setTemp_Main:	
  3440  0031                     ??_setPowerFault_Main:	
  3441                           ; 0 bytes @ 0x11
  3442                           
  3443  0031                     ___ftdiv@f1:	
  3444                           ; 0 bytes @ 0x11
  3445                           
  3446  0031                     ___ftmul@f2:	
  3447                           ; 3 bytes @ 0x11
  3448                           
  3449                           
  3450                           ; 3 bytes @ 0x11
  3451  0031                     	ds	1
  3452  0032                     ??_Temp_Main:	
  3453  0032                     ??_PowerFault_Main:	
  3454                           ; 0 bytes @ 0x12
  3455                           
  3456                           
  3457                           ; 0 bytes @ 0x12
  3458  0032                     	ds	2
  3459  0034                     ??___ftdiv:	
  3460  0034                     ??___ftmul:	
  3461                           ; 0 bytes @ 0x14
  3462                           
  3463                           
  3464                           ; 0 bytes @ 0x14
  3465  0034                     	ds	4
  3466  0038                     ___ftdiv@cntr:	
  3467  0038                     ___ftmul@exp:	
  3468                           ; 1 bytes @ 0x18
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x18
  3472  0038                     	ds	1
  3473  0039                     ___ftdiv@f3:	
  3474  0039                     ___ftmul@f3_as_product:	
  3475                           ; 3 bytes @ 0x19
  3476                           
  3477                           
  3478                           ; 3 bytes @ 0x19
  3479  0039                     	ds	3
  3480  003C                     ___ftdiv@exp:	
  3481  003C                     ___ftmul@cntr:	
  3482                           ; 1 bytes @ 0x1C
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x1C
  3486  003C                     	ds	1
  3487  003D                     ___ftdiv@sign:	
  3488  003D                     ___ftmul@sign:	
  3489                           ; 1 bytes @ 0x1D
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x1D
  3493  003D                     	ds	1
  3494  003E                     ?___ftadd:	
  3495  003E                     ___ftadd@f1:	
  3496                           ; 3 bytes @ 0x1E
  3497                           
  3498                           
  3499                           ; 3 bytes @ 0x1E
  3500  003E                     	ds	3
  3501  0041                     ___ftadd@f2:	
  3502                           
  3503                           ; 3 bytes @ 0x21
  3504  0041                     	ds	3
  3505  0044                     ??___ftadd:	
  3506                           
  3507                           ; 0 bytes @ 0x24
  3508  0044                     	ds	4
  3509  0048                     ___ftadd@sign:	
  3510                           
  3511                           ; 1 bytes @ 0x28
  3512  0048                     	ds	1
  3513  0049                     ___ftadd@exp2:	
  3514                           
  3515                           ; 1 bytes @ 0x29
  3516  0049                     	ds	1
  3517  004A                     ___ftadd@exp1:	
  3518                           
  3519                           ; 1 bytes @ 0x2A
  3520  004A                     	ds	1
  3521  004B                     ?___fttol:	
  3522  004B                     ___fttol@f1:	
  3523                           ; 4 bytes @ 0x2B
  3524                           
  3525                           
  3526                           ; 3 bytes @ 0x2B
  3527  004B                     	ds	4
  3528  004F                     ??___fttol:	
  3529                           
  3530                           ; 0 bytes @ 0x2F
  3531  004F                     	ds	4
  3532  0053                     ___fttol@sign1:	
  3533                           
  3534                           ; 1 bytes @ 0x33
  3535  0053                     	ds	1
  3536  0054                     ___fttol@lval:	
  3537                           
  3538                           ; 4 bytes @ 0x34
  3539  0054                     	ds	4
  3540  0058                     ___fttol@exp1:	
  3541                           
  3542                           ; 1 bytes @ 0x38
  3543  0058                     	ds	1
  3544  0059                     ??_getPercentValue:	
  3545  0059                     ??_setPercentValue:	
  3546                           ; 0 bytes @ 0x39
  3547                           
  3548  0059                     setPercentValue@value:	
  3549                           ; 0 bytes @ 0x39
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x39
  3553  0059                     	ds	1
  3554  005A                     setPercentValue@i:	
  3555                           
  3556                           ; 3 bytes @ 0x3A
  3557  005A                     	ds	1
  3558  005B                     getPercentValue@value:	
  3559                           
  3560                           ; 1 bytes @ 0x3B
  3561  005B                     	ds	1
  3562  005C                     getPercentValue@i:	
  3563                           
  3564                           ; 3 bytes @ 0x3C
  3565  005C                     	ds	1
  3566  005D                     ?_setRF_DimmerLights:	
  3567  005D                     ??_Flash_Memory_Initialization:	
  3568                           ; 0 bytes @ 0x3D
  3569                           
  3570  005D                     setRF_DimmerLights@on:	
  3571                           ; 0 bytes @ 0x3D
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575  005D                     	ds	1
  3576  005E                     ??_setRF_DimmerLights:	
  3577  005E                     Flash_Memory_Initialization@i:	
  3578                           ; 0 bytes @ 0x3E
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x3E
  3582  005E                     	ds	1
  3583  005F                     ??_setDimmerLights_AdjRF:	
  3584                           
  3585                           ; 0 bytes @ 0x3F
  3586  005F                     	ds	1
  3587  0060                     setDimmerLights_AdjRF@lights:	
  3588  0060                     setRF_DimmerLights@status:	
  3589                           ; 1 bytes @ 0x40
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x40
  3593  0060                     	ds	1
  3594  0061                     ??_setRF_DimmerValue:	
  3595  0061                     setRF_DimmerLights@lights:	
  3596                           ; 0 bytes @ 0x41
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x41
  3600  0061                     	ds	1
  3601  0062                     ??_DlyOff_Main:	
  3602  0062                     ?_setDimmerLights_Adj:	
  3603                           ; 0 bytes @ 0x42
  3604                           
  3605  0062                     ??_setRFSW_Control:	
  3606                           ; 0 bytes @ 0x42
  3607                           
  3608  0062                     ??_Sw_DimmerOnFunc:	
  3609                           ; 0 bytes @ 0x42
  3610                           
  3611  0062                     ??_Sw_DimmerOffFunc:	
  3612                           ; 0 bytes @ 0x42
  3613                           
  3614  0062                     setDimmerLights_Adj@status:	
  3615                           ; 0 bytes @ 0x42
  3616                           
  3617  0062                     Sw_DimmerOnFunc@Idle:	
  3618                           ; 1 bytes @ 0x42
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x42
  3622  0062                     	ds	1
  3623  0063                     ??_setDimmerLights_Adj:	
  3624  0063                     setRFSW_Control@sw:	
  3625                           ; 0 bytes @ 0x43
  3626                           
  3627  0063                     setRF_DimmerValue@lights:	
  3628                           ; 1 bytes @ 0x43
  3629                           
  3630  0063                     Sw_DimmerOnFunc@sw:	
  3631                           ; 1 bytes @ 0x43
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0x43
  3635  0063                     	ds	1
  3636  0064                     ??_setRFSW_AdjControl:	
  3637  0064                     DlyOff_Main@sw:	
  3638                           ; 0 bytes @ 0x44
  3639                           
  3640  0064                     setDimmerLights_Adj@lights:	
  3641                           ; 1 bytes @ 0x44
  3642                           
  3643  0064                     Sw_DimmerOffFunc@sw:	
  3644                           ; 1 bytes @ 0x44
  3645                           
  3646                           
  3647                           ; 1 bytes @ 0x44
  3648  0064                     	ds	1
  3649  0065                     ??_setDimmerLights_Main:	
  3650  0065                     ??_setSw_Main:	
  3651                           ; 0 bytes @ 0x45
  3652                           
  3653  0065                     ??_DelayOff_Main:	
  3654                           ; 0 bytes @ 0x45
  3655                           
  3656  0065                     setDimmerLights_Main@clear:	
  3657                           ; 0 bytes @ 0x45
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x45
  3661  0065                     	ds	1
  3662  0066                     setDimmerLights_Main@lights:	
  3663  0066                     setRFSW_AdjControl@sw:	
  3664                           ; 1 bytes @ 0x46
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x46
  3668  0066                     	ds	1
  3669  0067                     ??_setRF_Main:	
  3670  0067                     ??_getRxData:	
  3671                           ; 0 bytes @ 0x47
  3672                           
  3673  0067                     ??_setControl_Lights_Table:	
  3674                           ; 0 bytes @ 0x47
  3675                           
  3676  0067                     ??_DimmerLights_Main:	
  3677                           ; 0 bytes @ 0x47
  3678                           
  3679  0067                     _setSw_Main$4927:	
  3680                           ; 0 bytes @ 0x47
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x47
  3684  0067                     	ds	1
  3685  0068                     _setRF_Main$4057:	
  3686  0068                     setSw_Main@sw:	
  3687                           ; 1 bytes @ 0x48
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x48
  3691  0068                     	ds	1
  3692  0069                     ??_RF_Main:	
  3693  0069                     ??_Switch_Main:	
  3694                           ; 0 bytes @ 0x49
  3695                           
  3696  0069                     ?_main:	
  3697                           ; 0 bytes @ 0x49
  3698                           
  3699  0069                     main@argc:	
  3700                           ; 2 bytes @ 0x49
  3701                           
  3702                           
  3703                           ; 2 bytes @ 0x49
  3704  0069                     	ds	2
  3705  006B                     main@argv:	
  3706                           
  3707                           ; 2 bytes @ 0x4B
  3708  006B                     	ds	2
  3709  006D                     ??_main:	
  3710                           
  3711                           	psect	maintext
  3712  0884                     __pmaintext:	
  3713                           ; 0 bytes @ 0x4D
  3714 ;;
  3715 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3716 ;;
  3717 ;; *************** function _main *****************
  3718 ;; Defined at:
  3719 ;;		line 7 in file "../src/main_B1.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  argc            2   73[BANK0 ] int 
  3722 ;;  argv            2   75[BANK0 ] PTR PTR unsigned char 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   73[BANK0 ] int 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 17F/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        4 bytes
  3739 ;; Hardware stack levels required when called:   15
  3740 ;; This function calls:
  3741 ;;		_Buzzer_Initialization
  3742 ;;		_Buzzer_Main
  3743 ;;		_CC2500_PowerOnInitial
  3744 ;;		_DelayOff_Initialization
  3745 ;;		_DelayOff_Main
  3746 ;;		_DimmerLights_Initialization
  3747 ;;		_DimmerLights_Main
  3748 ;;		_Flash_Memory_Initialization
  3749 ;;		_Flash_Memory_Main
  3750 ;;		_LED_Initialization
  3751 ;;		_LED_Main
  3752 ;;		_Mcu_Initialization
  3753 ;;		_PowerFault_Initialization
  3754 ;;		_PowerFault_Main
  3755 ;;		_RF_Initialization
  3756 ;;		_RF_Main
  3757 ;;		_Switch_Initialization
  3758 ;;		_Switch_Main
  3759 ;;		_Temp_Initialization
  3760 ;;		_Temp_Main
  3761 ;;		_getPowerFault_AD
  3762 ;;		_getTemp_AD
  3763 ;;		_myMain_Initialization
  3764 ;;		_my_Main
  3765 ;; This function is called by:
  3766 ;;		Startup code after reset
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _main
  3772  0884                     _main:	
  3773                           
  3774                           ;main_B1.c: 9: myMain_Initialization();
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3778  0884  319F  2790  3188   	fcall	_myMain_Initialization
  3779                           
  3780                           ;main_B1.c: 10: Mcu_Initialization();
  3781  0887  319F  2754  3188   	fcall	_Mcu_Initialization
  3782                           
  3783                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3784  088A  3184  242A  3188   	fcall	_Flash_Memory_Initialization
  3785                           
  3786                           ;main_B1.c: 12: LED_Initialization();
  3787  088D  319E  26EA  3188   	fcall	_LED_Initialization
  3788                           
  3789                           ;main_B1.c: 13: Buzzer_Initialization();
  3790  0890  319D  25DE  3188   	fcall	_Buzzer_Initialization
  3791                           
  3792                           ;main_B1.c: 15: ;;
  3793                           ;main_B1.c: 16: Temp_Initialization();
  3794  0893  319D  25F0  3188   	fcall	_Temp_Initialization
  3795                           
  3796                           ;main_B1.c: 17: ;;
  3797                           ;main_B1.c: 18: PowerFault_Initialization();
  3798  0896  319D  25E1  3188   	fcall	_PowerFault_Initialization
  3799                           
  3800                           ;main_B1.c: 19: DelayOff_Initialization();
  3801  0899  319E  2602  3188   	fcall	_DelayOff_Initialization
  3802                           
  3803                           ;main_B1.c: 21: DimmerLights_Initialization();
  3804  089C  319F  270F  3188   	fcall	_DimmerLights_Initialization
  3805                           
  3806                           ;main_B1.c: 22: ;;
  3807                           ;main_B1.c: 23: ;;
  3808                           ;main_B1.c: 24: ;;
  3809                           ;main_B1.c: 25: Switch_Initialization();
  3810  089F  319E  2673  3188   	fcall	_Switch_Initialization
  3811                           
  3812                           ;main_B1.c: 26: RF_Initialization();
  3813  08A2  319D  25E7  3188   	fcall	_RF_Initialization
  3814                           
  3815                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3816  08A5  3190  20B6  3188   	fcall	_CC2500_PowerOnInitial
  3817  08A8                     l7913:	
  3818                           ;main_B1.c: 28: ;;
  3819                           ;main_B1.c: 31: while (1) {
  3820                           
  3821                           
  3822                           ;main_B1.c: 33: if (myMain.PowerON) {
  3823  08A8  0021               	movlb	1	; select bank1
  3824  08A9  1C20               	btfss	_myMain^(0+128),0
  3825  08AA  28B3               	goto	l7917
  3826                           
  3827                           ;main_B1.c: 35: ;;
  3828                           ;main_B1.c: 39: ;;
  3829                           ;main_B1.c: 43: getTemp_AD(0x09);
  3830  08AB  3009               	movlw	9
  3831  08AC  3194  2457  3188   	fcall	_getTemp_AD
  3832                           
  3833                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  3834  08AF  3011               	movlw	17
  3835  08B0  3192  22EC  3188   	fcall	_getPowerFault_AD
  3836  08B3                     l7917:	
  3837                           
  3838                           ;main_B1.c: 62: }
  3839                           ;main_B1.c: 65: if (myMain.T0_Timerout) {
  3840  08B3  0021               	movlb	1	; select bank1
  3841  08B4  1CA0               	btfss	_myMain^(0+128),1
  3842  08B5  28A8               	goto	l7913
  3843                           
  3844                           ;main_B1.c: 66: myMain.T0_Timerout = 0;
  3845  08B6  10A0               	bcf	_myMain^(0+128),1
  3846                           
  3847                           ;main_B1.c: 67: my_Main();
  3848  08B7  3196  2691  3188   	fcall	_my_Main
  3849                           
  3850                           ;main_B1.c: 68: ;;
  3851                           ;main_B1.c: 69: ;;
  3852                           ;main_B1.c: 70: ;;
  3853                           ;main_B1.c: 71: if (myMain.PowerON) {
  3854  08BA  0021               	movlb	1	; select bank1
  3855  08BB  1C20               	btfss	_myMain^(0+128),0
  3856  08BC  28A8               	goto	l7913
  3857                           
  3858                           ;main_B1.c: 72: Flash_Memory_Main();
  3859  08BD  3191  219A  3188   	fcall	_Flash_Memory_Main
  3860                           
  3861                           ;main_B1.c: 74: LED_Main();
  3862  08C0  319E  26F6  3188   	fcall	_LED_Main
  3863                           
  3864                           ;main_B1.c: 75: Buzzer_Main();
  3865  08C3  3197  2766  3188   	fcall	_Buzzer_Main
  3866                           
  3867                           ;main_B1.c: 77: ;;
  3868                           ;main_B1.c: 78: Temp_Main();
  3869  08C6  319D  25F3  3188   	fcall	_Temp_Main
  3870                           
  3871                           ;main_B1.c: 79: ;;
  3872                           ;main_B1.c: 80: PowerFault_Main();
  3873  08C9  319D  25E4  3188   	fcall	_PowerFault_Main
  3874                           
  3875                           ;main_B1.c: 82: ;;
  3876                           ;main_B1.c: 83: DimmerLights_Main();
  3877  08CC  319E  2635  3188   	fcall	_DimmerLights_Main
  3878                           
  3879                           ;main_B1.c: 84: Switch_Main();
  3880  08CF  3190  2066  3188   	fcall	_Switch_Main
  3881                           
  3882                           ;main_B1.c: 85: ;;
  3883                           ;main_B1.c: 86: ;;
  3884                           ;main_B1.c: 88: RF_Main();
  3885  08D2  319D  25EA  3188   	fcall	_RF_Main
  3886                           
  3887                           ;main_B1.c: 89: DelayOff_Main();
  3888  08D5  319E  2606  3188   	fcall	_DelayOff_Main
  3889                           
  3890                           ;main_B1.c: 90: ;;
  3891  08D8  28A8               	goto	l7913
  3892  08D9                     __end_of_main:	
  3893                           ;main_B1.c: 91: }
  3894                           ;main_B1.c: 92: }
  3895                           ;main_B1.c: 110: }
  3896                           ;main_B1.c: 111: return (0);
  3897                           ;	Return value of _main is never used
  3898                           
  3899                           
  3900                           	psect	text1
  3901  1691                     __ptext1:	
  3902 ;; *************** function _my_Main *****************
  3903 ;; Defined at:
  3904 ;;		line 128 in file "../src/main_B1.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;		None               void
  3911 ;; Registers used:
  3912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    7
  3925 ;; This function calls:
  3926 ;;		_setBuz
  3927 ;;		_setRF_Enable
  3928 ;;		_setSw_Enable
  3929 ;;		_setTemp_Enable
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _my_Main
  3937  1691                     _my_Main:	
  3938                           
  3939                           ;main_B1.c: 130: if (myMain.PowerON == 0) {
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3943  1691  0021               	movlb	1	; select bank1
  3944  1692  1820               	btfsc	_myMain^(0+128),0
  3945  1693  2EBE               	goto	l7295
  3946                           
  3947                           ;main_B1.c: 131: myMain.PowerCount++;
  3948  1694  3001               	movlw	1
  3949  1695  07A1               	addwf	(_myMain^(0+128)+1),f
  3950  1696  3000               	movlw	0
  3951  1697  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3952                           
  3953                           ;main_B1.c: 132: if (myMain.PowerCount == 150)
  3954  1698  3001               	movlw	1
  3955  1699  3EA0               	addlw	_myMain& (0+255)
  3956  169A  0086               	movwf	6
  3957  169B  0187               	clrf	7
  3958  169C  3F40               	moviw [0]fsr1
  3959  169D  3A96               	xorlw	150
  3960  169E  1D03               	skipz
  3961  169F  2EA2               	goto	u6805
  3962  16A0  3F41               	moviw [1]fsr1
  3963  16A1  3A00               	xorlw	0
  3964  16A2                     u6805:	
  3965  16A2  1D03               	skipz
  3966  16A3  0008               	return
  3967                           
  3968                           ;main_B1.c: 133: {
  3969                           ;main_B1.c: 134: myMain.PowerCount = 0;
  3970  16A4  01A1               	clrf	(_myMain^(0+128)+1)
  3971  16A5  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3972                           
  3973                           ;main_B1.c: 135: myMain.PowerON = 1;
  3974  16A6  1420               	bsf	_myMain^(0+128),0
  3975                           
  3976                           ;main_B1.c: 138: setTemp_Enable(1);
  3977  16A7  3001               	movlw	1
  3978  16A8  319E  2662  3196   	fcall	_setTemp_Enable
  3979                           
  3980                           ;main_B1.c: 142: ;;
  3981                           ;main_B1.c: 148: setBuz(3, 50);
  3982  16AB  3032               	movlw	50
  3983  16AC  0020               	movlb	0	; select bank0
  3984  16AD  00A9               	movwf	setBuz@time
  3985  16AE  3000               	movlw	0
  3986  16AF  00AA               	movwf	setBuz@time+1
  3987  16B0  3003               	movlw	3
  3988  16B1  3189  2130  3196   	fcall	_setBuz
  3989                           
  3990                           ;main_B1.c: 149: myMain.SelfTest = 1;
  3991  16B4  0021               	movlb	1	; select bank1
  3992  16B5  1720               	bsf	_myMain^(0+128),6
  3993                           
  3994                           ;main_B1.c: 151: setSw_Enable(1);
  3995  16B6  3001               	movlw	1
  3996  16B7  319F  2763  3196   	fcall	_setSw_Enable
  3997                           
  3998                           ;main_B1.c: 154: setRF_Enable(1);
  3999  16BA  3001               	movlw	1
  4000  16BB  319F  2737         	fcall	_setRF_Enable
  4001                           
  4002                           ;main_B1.c: 158: }
  4003                           ;main_B1.c: 159: } else {
  4004  16BD  0008               	return
  4005  16BE                     l7295:	
  4006                           
  4007                           ;main_B1.c: 167: myMain.Count1++;
  4008  16BE  3001               	movlw	1
  4009  16BF  0021               	movlb	1	; select bank1
  4010  16C0  07A5               	addwf	(_myMain^(0+128)+5),f
  4011  16C1  3000               	movlw	0
  4012  16C2  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4013                           
  4014                           ;main_B1.c: 168: if (myMain.Count1 == 100)
  4015  16C3  3005               	movlw	5
  4016  16C4  3EA0               	addlw	_myMain& (0+255)
  4017  16C5  0086               	movwf	6
  4018  16C6  0187               	clrf	7
  4019  16C7  3F40               	moviw [0]fsr1
  4020  16C8  3A64               	xorlw	100
  4021  16C9  1D03               	skipz
  4022  16CA  2ECD               	goto	u6815
  4023  16CB  3F41               	moviw [1]fsr1
  4024  16CC  3A00               	xorlw	0
  4025  16CD                     u6815:	
  4026  16CD  1D03               	skipz
  4027  16CE  0008               	return
  4028                           
  4029                           ;main_B1.c: 169: {
  4030                           ;main_B1.c: 170: myMain.Count1 = 0;
  4031  16CF  01A5               	clrf	(_myMain^(0+128)+5)
  4032  16D0  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4033                           
  4034                           ;main_B1.c: 183: if (myMain.Flag) {
  4035  16D1  1DA0               	btfss	_myMain^(0+128),3
  4036  16D2  2ED5               	goto	l2537
  4037                           
  4038                           ;main_B1.c: 184: myMain.Flag = 0;
  4039  16D3  11A0               	bcf	_myMain^(0+128),3
  4040                           
  4041                           ;main_B1.c: 193: } else {
  4042  16D4  0008               	return
  4043  16D5                     l2537:	
  4044                           
  4045                           ;main_B1.c: 194: myMain.Flag = 1;
  4046  16D5  15A0               	bsf	_myMain^(0+128),3
  4047  16D6  0008               	return
  4048  16D7                     __end_of_my_Main:	
  4049                           
  4050                           	psect	text2
  4051  1E62                     __ptext2:	
  4052 ;; *************** function _setTemp_Enable *****************
  4053 ;; Defined at:
  4054 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  command         1    wreg     unsigned char 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  command         1    0[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_my_Main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           
  4083                           ;psect for function _setTemp_Enable
  4084  1E62                     _setTemp_Enable:	
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _setTemp_Enable: [wreg]
  4088                           ;setTemp_Enable@command stored from wreg
  4089  1E62  0020               	movlb	0	; select bank0
  4090  1E63  00A0               	movwf	setTemp_Enable@command
  4091                           
  4092                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4093  1E64  0820               	movf	setTemp_Enable@command,w
  4094  1E65  0021               	movlb	1	; select bank1
  4095  1E66  1059               	bcf	_Temp1^(0+128),0
  4096  1E67  1D03               	skipz
  4097  1E68  1459               	bsf	_Temp1^(0+128),0
  4098  1E69  0008               	return
  4099  1E6A                     __end_of_setTemp_Enable:	
  4100                           
  4101                           	psect	text3
  4102  1F90                     __ptext3:	
  4103 ;; *************** function _myMain_Initialization *****************
  4104 ;; Defined at:
  4105 ;;		line 116 in file "../src/main_B1.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr1l, fsr1h
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;Total ram usage:        1 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    5
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _myMain_Initialization
  4135  1F90                     _myMain_Initialization:	
  4136                           
  4137                           ;main_B1.c: 118: product = &_product;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4141  1F90  30A0               	movlw	__product& (0+255)
  4142  1F91  0020               	movlb	0	; select bank0
  4143  1F92  00A0               	movwf	??_myMain_Initialization
  4144  1F93  0820               	movf	??_myMain_Initialization,w
  4145  1F94  00EF               	movwf	_product
  4146                           
  4147                           ;main_B1.c: 119: product->Data[20] = 209;
  4148  1F95  30D1               	movlw	209
  4149  1F96  00A0               	movwf	??_myMain_Initialization
  4150  1F97  086F               	movf	_product,w
  4151  1F98  3E14               	addlw	20
  4152  1F99  0086               	movwf	6
  4153  1F9A  3001               	movlw	1	; select bank2/3
  4154  1F9B  0087               	movwf	7
  4155  1F9C  0820               	movf	??_myMain_Initialization,w
  4156  1F9D  0081               	movwf	1
  4157  1F9E  0008               	return
  4158  1F9F                     __end_of_myMain_Initialization:	
  4159                           
  4160                           	psect	text4
  4161  1457                     __ptext4:	
  4162 ;; *************** function _getTemp_AD *****************
  4163 ;; Defined at:
  4164 ;;		line 31 in file "../src/OverTemperature_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  channel         1    wreg     unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  channel         1    5[BANK0 ] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;Total ram usage:        2 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    7
  4185 ;; This function calls:
  4186 ;;		_getAD
  4187 ;; This function is called by:
  4188 ;;		_main
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _getTemp_AD
  4194  1457                     _getTemp_AD:	
  4195                           
  4196                           ;incstack = 0
  4197                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4198                           ;getTemp_AD@channel stored from wreg
  4199  1457  0020               	movlb	0	; select bank0
  4200  1458  00A5               	movwf	getTemp_AD@channel
  4201                           
  4202                           ;OverTemperature_B1.c: 32: if (Temp1.ADtoGO == 1) {
  4203  1459  0021               	movlb	1	; select bank1
  4204  145A  1D59               	btfss	_Temp1^(0+128),2
  4205  145B  0008               	return
  4206                           
  4207                           ;OverTemperature_B1.c: 33: Temp1.ADRES = getAD(channel, 0xf0);
  4208  145C  30F0               	movlw	240
  4209  145D  0020               	movlb	0	; select bank0
  4210  145E  00A4               	movwf	??_getTemp_AD
  4211  145F  0824               	movf	??_getTemp_AD,w
  4212  1460  00A0               	movwf	getAD@adcon1
  4213  1461  0825               	movf	getTemp_AD@channel,w
  4214  1462  3191  21B9  3194   	fcall	_getAD
  4215  1465  0020               	movlb	0	; select bank0
  4216  1466  0821               	movf	?_getAD+1,w
  4217  1467  0021               	movlb	1	; select bank1
  4218  1468  01E6               	clrf	((_Temp1+1)^(0+128)+12)
  4219  1469  07E6               	addwf	((_Temp1+1)^(0+128)+12),f
  4220  146A  0020               	movlb	0	; select bank0
  4221  146B  0820               	movf	?_getAD,w
  4222  146C  0021               	movlb	1	; select bank1
  4223  146D  01E5               	clrf	(_Temp1^(0+128)+12)
  4224  146E  07E5               	addwf	(_Temp1^(0+128)+12),f
  4225                           
  4226                           ;OverTemperature_B1.c: 34: if (Temp1.ADH[0] < Temp1.ADRES) {
  4227  146F  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4228  1470  0262               	subwf	((_Temp1+1)^(0+128)+8),w
  4229  1471  1D03               	skipz
  4230  1472  2C75               	goto	u6755
  4231  1473  0865               	movf	(_Temp1^(0+128)+12),w
  4232  1474  0261               	subwf	(_Temp1^(0+128)+8),w
  4233  1475                     u6755:	
  4234  1475  1803               	skipnc
  4235  1476  2C7E               	goto	l7237
  4236                           
  4237                           ;OverTemperature_B1.c: 35: Temp1.ADH[0] = Temp1.ADRES;
  4238  1477  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4239  1478  01E2               	clrf	((_Temp1+1)^(0+128)+8)
  4240  1479  07E2               	addwf	((_Temp1+1)^(0+128)+8),f
  4241  147A  0865               	movf	(_Temp1^(0+128)+12),w
  4242  147B  01E1               	clrf	(_Temp1^(0+128)+8)
  4243  147C  07E1               	addwf	(_Temp1^(0+128)+8),f
  4244                           
  4245                           ;OverTemperature_B1.c: 36: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4246  147D  0008               	return
  4247  147E                     l7237:	
  4248  147E  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4249  147F  0264               	subwf	((_Temp1+1)^(0+128)+10),w
  4250  1480  1D03               	skipz
  4251  1481  2C84               	goto	u6765
  4252  1482  0865               	movf	(_Temp1^(0+128)+12),w
  4253  1483  0263               	subwf	(_Temp1^(0+128)+10),w
  4254  1484                     u6765:	
  4255  1484  1803               	skipnc
  4256  1485  0008               	return
  4257                           
  4258                           ;OverTemperature_B1.c: 37: Temp1.ADH[1] = Temp1.ADRES;
  4259  1486  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4260  1487  01E4               	clrf	((_Temp1+1)^(0+128)+10)
  4261  1488  07E4               	addwf	((_Temp1+1)^(0+128)+10),f
  4262  1489  0865               	movf	(_Temp1^(0+128)+12),w
  4263  148A  01E3               	clrf	(_Temp1^(0+128)+10)
  4264  148B  07E3               	addwf	(_Temp1^(0+128)+10),f
  4265  148C  0008               	return
  4266  148D                     __end_of_getTemp_AD:	
  4267                           
  4268                           	psect	text5
  4269  12EC                     __ptext5:	
  4270 ;; *************** function _getPowerFault_AD *****************
  4271 ;; Defined at:
  4272 ;;		line 45 in file "../src/PowerFault_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  channel         1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  channel         1    5[BANK0 ] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    7
  4293 ;; This function calls:
  4294 ;;		_getAD
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _getPowerFault_AD
  4302  12EC                     _getPowerFault_AD:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4306                           ;getPowerFault_AD@channel stored from wreg
  4307  12EC  0020               	movlb	0	; select bank0
  4308  12ED  00A5               	movwf	getPowerFault_AD@channel
  4309                           
  4310                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4311  12EE  0021               	movlb	1	; select bank1
  4312  12EF  1DBE               	btfss	_PF1^(0+128),3
  4313  12F0  0008               	return
  4314                           
  4315                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4316  12F1  30F0               	movlw	240
  4317  12F2  0020               	movlb	0	; select bank0
  4318  12F3  00A4               	movwf	??_getPowerFault_AD
  4319  12F4  0824               	movf	??_getPowerFault_AD,w
  4320  12F5  00A0               	movwf	getAD@adcon1
  4321  12F6  0825               	movf	getPowerFault_AD@channel,w
  4322  12F7  3191  21B9  3192   	fcall	_getAD
  4323  12FA  0020               	movlb	0	; select bank0
  4324  12FB  0821               	movf	?_getAD+1,w
  4325  12FC  0021               	movlb	1	; select bank1
  4326  12FD  01C5               	clrf	((_PF1+1)^(0+128)+6)
  4327  12FE  07C5               	addwf	((_PF1+1)^(0+128)+6),f
  4328  12FF  0020               	movlb	0	; select bank0
  4329  1300  0820               	movf	?_getAD,w
  4330  1301  0021               	movlb	1	; select bank1
  4331  1302  01C4               	clrf	(_PF1^(0+128)+6)
  4332  1303  07C4               	addwf	(_PF1^(0+128)+6),f
  4333                           
  4334                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4335  1304  0845               	movf	((_PF1+1)^(0+128)+6),w
  4336  1305  0243               	subwf	((_PF1+1)^(0+128)+4),w
  4337  1306  1D03               	skipz
  4338  1307  2B0A               	goto	u6785
  4339  1308  0844               	movf	(_PF1^(0+128)+6),w
  4340  1309  0242               	subwf	(_PF1^(0+128)+4),w
  4341  130A                     u6785:	
  4342  130A  1803               	skipnc
  4343  130B  0008               	return
  4344                           
  4345                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4346  130C  0845               	movf	((_PF1+1)^(0+128)+6),w
  4347  130D  01C3               	clrf	((_PF1+1)^(0+128)+4)
  4348  130E  07C3               	addwf	((_PF1+1)^(0+128)+4),f
  4349  130F  0844               	movf	(_PF1^(0+128)+6),w
  4350  1310  01C2               	clrf	(_PF1^(0+128)+4)
  4351  1311  07C2               	addwf	(_PF1^(0+128)+4),f
  4352  1312  0008               	return
  4353  1313                     __end_of_getPowerFault_AD:	
  4354                           
  4355                           	psect	text6
  4356  11B9                     __ptext6:	
  4357 ;; *************** function _getAD *****************
  4358 ;; Defined at:
  4359 ;;		line 346 in file "../src/MCU_B1.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  adcon0          1    wreg     unsigned char 
  4362 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  2    0[BANK0 ] int 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4374 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;Total ram usage:        4 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    6
  4381 ;; This function calls:
  4382 ;;		_Timeout_Counter
  4383 ;;		_set_TimeoutCleared
  4384 ;; This function is called by:
  4385 ;;		_getTemp_AD
  4386 ;;		_getPowerFault_AD
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _getAD
  4392  11B9                     _getAD:	
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4396                           ;getAD@adcon0 stored from wreg
  4397  11B9  0020               	movlb	0	; select bank0
  4398  11BA  00A3               	movwf	getAD@adcon0
  4399                           
  4400                           ;MCU_B1.c: 347: ADCON0 = adcon0;
  4401  11BB  0823               	movf	getAD@adcon0,w
  4402  11BC  0021               	movlb	1	; select bank1
  4403  11BD  009D               	movwf	29	;volatile
  4404                           
  4405                           ;MCU_B1.c: 348: ADCON1 = adcon1;
  4406  11BE  0020               	movlb	0	; select bank0
  4407  11BF  0820               	movf	getAD@adcon1,w
  4408  11C0  0021               	movlb	1	; select bank1
  4409  11C1  009E               	movwf	30	;volatile
  4410                           
  4411                           ;MCU_B1.c: 349: GO_nDONE = 1;
  4412  11C2  149D               	bsf	29,1	;volatile
  4413                           
  4414                           ;MCU_B1.c: 350: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4415  11C3  29C7               	goto	l6749
  4416  11C4                     l6747:	
  4417                           
  4418                           ;MCU_B1.c: 351: Timeout_Counter();
  4419  11C4  3190  20F8  3191   	fcall	_Timeout_Counter
  4420  11C7                     l6749:	
  4421  11C7  0021               	movlb	1	; select bank1
  4422  11C8  1C9D               	btfss	29,1	;volatile
  4423  11C9  29CC               	goto	l6753
  4424  11CA  1D2F               	btfss	(_myMain^(0+128)+15),2
  4425  11CB  29C4               	goto	l6747
  4426  11CC                     l6753:	
  4427                           
  4428                           ;MCU_B1.c: 352: };
  4429                           ;MCU_B1.c: 353: set_TimeoutCleared();
  4430  11CC  319E  2616         	fcall	_set_TimeoutCleared
  4431                           
  4432                           ;MCU_B1.c: 354: return ((ADRESH*256)+ADRESL);
  4433  11CE  0021               	movlb	1	; select bank1
  4434  11CF  081C               	movf	28,w	;volatile
  4435  11D0  0020               	movlb	0	; select bank0
  4436  11D1  01A1               	clrf	?_getAD+1
  4437  11D2  07A1               	addwf	?_getAD+1,f
  4438  11D3  0021               	movlb	1	; select bank1
  4439  11D4  081B               	movf	27,w	;volatile
  4440  11D5  0020               	movlb	0	; select bank0
  4441  11D6  01A0               	clrf	?_getAD
  4442  11D7  07A0               	addwf	?_getAD,f
  4443  11D8  0008               	return
  4444  11D9                     __end_of_getAD:	
  4445                           
  4446                           	psect	text7
  4447  1DF3                     __ptext7:	
  4448 ;; *************** function _Temp_Main *****************
  4449 ;; Defined at:
  4450 ;;		line 48 in file "../src/OverTemperature_B1.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:   11
  4471 ;; This function calls:
  4472 ;;		_setTemp_Main
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _Temp_Main
  4480  1DF3                     _Temp_Main:	
  4481                           
  4482                           ;OverTemperature_B1.c: 50: setTemp_Main();
  4483                           
  4484                           ;incstack = 0
  4485                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4486  1DF3  318E  26F3         	fcall	_setTemp_Main
  4487  1DF5  0008               	return
  4488  1DF6                     __end_of_Temp_Main:	
  4489                           
  4490                           	psect	text8
  4491  0EF3                     __ptext8:	
  4492 ;; *************** function _setTemp_Main *****************
  4493 ;; Defined at:
  4494 ;;		line 55 in file "../src/OverTemperature_B1.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;		None               void
  4501 ;; Registers used:
  4502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:   10
  4515 ;; This function calls:
  4516 ;;		_getPF_Safe
  4517 ;;		_setOverTemp_Exceptions
  4518 ;; This function is called by:
  4519 ;;		_Temp_Main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _setTemp_Main
  4525  0EF3                     _setTemp_Main:	
  4526                           
  4527                           ;OverTemperature_B1.c: 56: if (Temp1.Enable == 1) {
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4531  0EF3  0021               	movlb	1	; select bank1
  4532  0EF4  1C59               	btfss	_Temp1^(0+128),0
  4533  0EF5  0008               	return
  4534                           
  4535                           ;OverTemperature_B1.c: 57: if (Temp1.ADtoGO == 0) {
  4536  0EF6  1959               	btfsc	_Temp1^(0+128),2
  4537  0EF7  2F15               	goto	l7705
  4538                           
  4539                           ;OverTemperature_B1.c: 58: Temp1.Time++;
  4540  0EF8  3001               	movlw	1
  4541  0EF9  07DA               	addwf	(_Temp1^(0+128)+1),f
  4542  0EFA  3000               	movlw	0
  4543  0EFB  3DDB               	addwfc	((_Temp1+1)^(0+128)+1),f
  4544                           
  4545                           ;OverTemperature_B1.c: 60: {
  4546                           ;OverTemperature_B1.c: 61: if (1 == 1 && getPF_Safe() == 1) {
  4547  0EFC  3001               	movlw	1
  4548  0EFD  025B               	subwf	((_Temp1+1)^(0+128)+1),w
  4549  0EFE  30F4               	movlw	244
  4550  0EFF  1903               	skipnz
  4551  0F00  025A               	subwf	(_Temp1^(0+128)+1),w
  4552  0F01  1C03               	skipc
  4553  0F02  0008               	return
  4554  0F03  319E  265A  318E   	fcall	_getPF_Safe
  4555  0F06  3A01               	xorlw	1
  4556  0F07  1D03               	skipz
  4557  0F08  2F0F               	goto	l7703
  4558                           
  4559                           ;OverTemperature_B1.c: 62: Temp1.Time = 0;
  4560  0F09  0021               	movlb	1	; select bank1
  4561  0F0A  01DA               	clrf	(_Temp1^(0+128)+1)
  4562  0F0B  01DB               	clrf	((_Temp1+1)^(0+128)+1)
  4563                           
  4564                           ;OverTemperature_B1.c: 63: Temp1.ADtoGO = 0;
  4565  0F0C  1159               	bcf	_Temp1^(0+128),2
  4566                           
  4567                           ;OverTemperature_B1.c: 64: Temp1.Safe = 0;
  4568  0F0D  1259               	bcf	_Temp1^(0+128),4
  4569                           
  4570                           ;OverTemperature_B1.c: 65: } else {
  4571  0F0E  0008               	return
  4572  0F0F                     l7703:	
  4573                           
  4574                           ;OverTemperature_B1.c: 66: Temp1.Time = 1000;
  4575  0F0F  30E8               	movlw	232
  4576  0F10  0021               	movlb	1	; select bank1
  4577  0F11  00DA               	movwf	(_Temp1^(0+128)+1)
  4578  0F12  3003               	movlw	3
  4579  0F13  00DB               	movwf	(_Temp1^(0+128)+2)
  4580                           
  4581                           ;OverTemperature_B1.c: 67: }
  4582                           ;OverTemperature_B1.c: 68: }
  4583                           ;OverTemperature_B1.c: 69: } else {
  4584  0F14  0008               	return
  4585  0F15                     l7705:	
  4586                           
  4587                           ;OverTemperature_B1.c: 70: Temp1.Time++;
  4588  0F15  3001               	movlw	1
  4589  0F16  07DA               	addwf	(_Temp1^(0+128)+1),f
  4590  0F17  3000               	movlw	0
  4591  0F18  3DDB               	addwfc	((_Temp1+1)^(0+128)+1),f
  4592                           
  4593                           ;OverTemperature_B1.c: 71: if (Temp1.Time >= 4)
  4594  0F19  3000               	movlw	0
  4595  0F1A  025B               	subwf	((_Temp1+1)^(0+128)+1),w
  4596  0F1B  3004               	movlw	4
  4597  0F1C  1903               	skipnz
  4598  0F1D  025A               	subwf	(_Temp1^(0+128)+1),w
  4599  0F1E  1C03               	skipc
  4600  0F1F  0008               	return
  4601                           
  4602                           ;OverTemperature_B1.c: 72: {
  4603                           ;OverTemperature_B1.c: 73: Temp1.Time = 0;
  4604  0F20  01DA               	clrf	(_Temp1^(0+128)+1)
  4605  0F21  01DB               	clrf	((_Temp1+1)^(0+128)+1)
  4606                           
  4607                           ;OverTemperature_B1.c: 74: Temp1.ADtoGO = 0;
  4608  0F22  1159               	bcf	_Temp1^(0+128),2
  4609                           
  4610                           ;OverTemperature_B1.c: 75: Temp1.AD = Temp1.ADH[1];
  4611  0F23  0864               	movf	((_Temp1+1)^(0+128)+10),w
  4612  0F24  01E0               	clrf	((_Temp1+1)^(0+128)+6)
  4613  0F25  07E0               	addwf	((_Temp1+1)^(0+128)+6),f
  4614  0F26  0863               	movf	(_Temp1^(0+128)+10),w
  4615  0F27  01DF               	clrf	(_Temp1^(0+128)+6)
  4616  0F28  07DF               	addwf	(_Temp1^(0+128)+6),f
  4617                           
  4618                           ;OverTemperature_B1.c: 76: if (Temp1.ERROR == 1) {
  4619  0F29  1CD9               	btfss	_Temp1^(0+128),1
  4620  0F2A  2F42               	goto	l7727
  4621                           
  4622                           ;OverTemperature_B1.c: 77: if (Temp1.AD >= 600) {
  4623  0F2B  3002               	movlw	2
  4624  0F2C  0260               	subwf	((_Temp1+1)^(0+128)+6),w
  4625  0F2D  3058               	movlw	88
  4626  0F2E  1903               	skipnz
  4627  0F2F  025F               	subwf	(_Temp1^(0+128)+6),w
  4628  0F30  1C03               	skipc
  4629  0F31  2F59               	goto	l7737
  4630                           
  4631                           ;OverTemperature_B1.c: 78: Temp1.Count++;
  4632  0F32  3001               	movlw	1
  4633  0F33  0020               	movlb	0	; select bank0
  4634  0F34  00B1               	movwf	??_setTemp_Main
  4635  0F35  0831               	movf	??_setTemp_Main,w
  4636  0F36  0021               	movlb	1	; select bank1
  4637  0F37  07DC               	addwf	(_Temp1^(0+128)+3),f
  4638                           
  4639                           ;OverTemperature_B1.c: 79: if (Temp1.Count >= 3) {
  4640  0F38  3003               	movlw	3
  4641  0F39  025C               	subwf	(_Temp1^(0+128)+3),w
  4642  0F3A  1C03               	skipc
  4643  0F3B  2F5B               	goto	l7739
  4644                           
  4645                           ;OverTemperature_B1.c: 80: Temp1.Count = 0;
  4646  0F3C  01DC               	clrf	(_Temp1^(0+128)+3)
  4647                           
  4648                           ;OverTemperature_B1.c: 81: setOverTemp_Exceptions(0);
  4649  0F3D  3000               	movlw	0
  4650  0F3E  3196  264B  318E   	fcall	_setOverTemp_Exceptions
  4651                           
  4652                           ;OverTemperature_B1.c: 82: }
  4653                           ;OverTemperature_B1.c: 83: } else {
  4654  0F41  2F5B               	goto	l7739
  4655  0F42                     l7727:	
  4656                           ;OverTemperature_B1.c: 85: }
  4657                           ;OverTemperature_B1.c: 86: } else {
  4658                           
  4659                           ;OverTemperature_B1.c: 84: Temp1.Count = 0;
  4660                           
  4661                           
  4662                           ;OverTemperature_B1.c: 87: if (Temp1.AD <= 550) {
  4663  0F42  3002               	movlw	2
  4664  0F43  0260               	subwf	((_Temp1+1)^(0+128)+6),w
  4665  0F44  3027               	movlw	39
  4666  0F45  1903               	skipnz
  4667  0F46  025F               	subwf	(_Temp1^(0+128)+6),w
  4668  0F47  1803               	skipnc
  4669  0F48  2F59               	goto	l7737
  4670                           
  4671                           ;OverTemperature_B1.c: 88: Temp1.Count++;
  4672  0F49  3001               	movlw	1
  4673  0F4A  0020               	movlb	0	; select bank0
  4674  0F4B  00B1               	movwf	??_setTemp_Main
  4675  0F4C  0831               	movf	??_setTemp_Main,w
  4676  0F4D  0021               	movlb	1	; select bank1
  4677  0F4E  07DC               	addwf	(_Temp1^(0+128)+3),f
  4678                           
  4679                           ;OverTemperature_B1.c: 89: if (Temp1.Count >= 3) {
  4680  0F4F  3003               	movlw	3
  4681  0F50  025C               	subwf	(_Temp1^(0+128)+3),w
  4682  0F51  1C03               	skipc
  4683  0F52  2F5B               	goto	l7739
  4684                           
  4685                           ;OverTemperature_B1.c: 90: Temp1.Count = 0;
  4686  0F53  01DC               	clrf	(_Temp1^(0+128)+3)
  4687                           
  4688                           ;OverTemperature_B1.c: 91: setOverTemp_Exceptions(1);
  4689  0F54  3001               	movlw	1
  4690  0F55  3196  264B  318E   	fcall	_setOverTemp_Exceptions
  4691                           
  4692                           ;OverTemperature_B1.c: 92: }
  4693                           ;OverTemperature_B1.c: 93: } else {
  4694  0F58  2F5B               	goto	l7739
  4695  0F59                     l7737:	
  4696                           
  4697                           ;OverTemperature_B1.c: 94: Temp1.Count = 0;
  4698  0F59  0021               	movlb	1	; select bank1
  4699  0F5A  01DC               	clrf	(_Temp1^(0+128)+3)
  4700  0F5B                     l7739:	
  4701                           
  4702                           ;OverTemperature_B1.c: 95: }
  4703                           ;OverTemperature_B1.c: 96: }
  4704                           ;OverTemperature_B1.c: 97: if (Temp1.ERROR == 0) {
  4705  0F5B  0021               	movlb	1	; select bank1
  4706  0F5C  1CD9               	btfss	_Temp1^(0+128),1
  4707                           
  4708                           ;OverTemperature_B1.c: 98: Temp1.Safe = 1;
  4709  0F5D  1659               	bsf	_Temp1^(0+128),4
  4710                           
  4711                           ;OverTemperature_B1.c: 99: }
  4712                           ;OverTemperature_B1.c: 100: product->Data[24]=Temp1.AD >> 8;
  4713  0F5E  0860               	movf	((_Temp1+1)^(0+128)+6),w
  4714  0F5F  0020               	movlb	0	; select bank0
  4715  0F60  00B1               	movwf	??_setTemp_Main
  4716  0F61  086F               	movf	_product,w
  4717  0F62  3E18               	addlw	24
  4718  0F63  0086               	movwf	6
  4719  0F64  3001               	movlw	1	; select bank2/3
  4720  0F65  0087               	movwf	7
  4721  0F66  0831               	movf	??_setTemp_Main,w
  4722  0F67  0081               	movwf	1
  4723                           
  4724                           ;OverTemperature_B1.c: 101: product->Data[25]=Temp1.AD;
  4725  0F68  0021               	movlb	1	; select bank1
  4726  0F69  085F               	movf	(_Temp1^(0+128)+6),w
  4727  0F6A  0020               	movlb	0	; select bank0
  4728  0F6B  00B1               	movwf	??_setTemp_Main
  4729  0F6C  086F               	movf	_product,w
  4730  0F6D  3E19               	addlw	25
  4731  0F6E  0086               	movwf	6
  4732  0F6F  3001               	movlw	1	; select bank2/3
  4733  0F70  0087               	movwf	7
  4734  0F71  0831               	movf	??_setTemp_Main,w
  4735  0F72  0081               	movwf	1
  4736                           
  4737                           ;OverTemperature_B1.c: 102: Temp1.ADH[0] = 0;
  4738  0F73  0021               	movlb	1	; select bank1
  4739  0F74  01E1               	clrf	(_Temp1^(0+128)+8)
  4740  0F75  01E2               	clrf	((_Temp1+1)^(0+128)+8)
  4741                           
  4742                           ;OverTemperature_B1.c: 103: Temp1.ADH[1] = 0;
  4743  0F76  01E3               	clrf	(_Temp1^(0+128)+10)
  4744  0F77  01E4               	clrf	((_Temp1+1)^(0+128)+10)
  4745  0F78  0008               	return
  4746  0F79                     __end_of_setTemp_Main:	
  4747                           
  4748                           	psect	text9
  4749  164B                     __ptext9:	
  4750 ;; *************** function _setOverTemp_Exceptions *****************
  4751 ;; Defined at:
  4752 ;;		line 110 in file "../src/OverTemperature_B1.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  command         1    wreg     unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  command         1   16[BANK0 ] unsigned char 
  4757 ;;  i               1   15[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;		None               void
  4760 ;; Registers used:
  4761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;Total ram usage:        3 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    9
  4774 ;; This function calls:
  4775 ;;		_DimmerLights_Exceptions
  4776 ;;		_setBuz
  4777 ;;		_setLED
  4778 ;;		_setRF_Enable
  4779 ;;		_setSw_Enable
  4780 ;; This function is called by:
  4781 ;;		_setTemp_Main
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           
  4786                           ;psect for function _setOverTemp_Exceptions
  4787  164B                     _setOverTemp_Exceptions:	
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4791                           ;setOverTemp_Exceptions@command stored from wreg
  4792  164B  0020               	movlb	0	; select bank0
  4793  164C  00B0               	movwf	setOverTemp_Exceptions@command
  4794                           
  4795                           ;OverTemperature_B1.c: 111: char i = command == 1 ? 0 : 1;
  4796  164D  0830               	movf	setOverTemp_Exceptions@command,w
  4797  164E  3A01               	xorlw	1
  4798  164F  3000               	movlw	0
  4799  1650  1D03               	skipz
  4800  1651  3001               	movlw	1
  4801  1652  00AE               	movwf	??_setOverTemp_Exceptions
  4802  1653  082E               	movf	??_setOverTemp_Exceptions,w
  4803  1654  00AF               	movwf	setOverTemp_Exceptions@i
  4804                           
  4805                           ;OverTemperature_B1.c: 112: Temp1.ERROR = command;
  4806  1655  0830               	movf	setOverTemp_Exceptions@command,w
  4807  1656  0021               	movlb	1	; select bank1
  4808  1657  10D9               	bcf	_Temp1^(0+128),1
  4809  1658  1D03               	skipz
  4810  1659  14D9               	bsf	_Temp1^(0+128),1
  4811                           
  4812                           ;OverTemperature_B1.c: 113: Temp1.Safe = i;
  4813  165A  0020               	movlb	0	; select bank0
  4814  165B  082F               	movf	setOverTemp_Exceptions@i,w
  4815  165C  0021               	movlb	1	; select bank1
  4816  165D  1259               	bcf	_Temp1^(0+128),4
  4817  165E  1D03               	skipz
  4818  165F  1659               	bsf	_Temp1^(0+128),4
  4819                           
  4820                           ;OverTemperature_B1.c: 114: if (command == 1) {
  4821  1660  0020               	movlb	0	; select bank0
  4822  1661  0830               	movf	setOverTemp_Exceptions@command,w
  4823  1662  3A01               	xorlw	1
  4824  1663  1D03               	skipz
  4825  1664  2E71               	goto	l7583
  4826                           
  4827                           ;OverTemperature_B1.c: 115: DimmerLights_Exceptions(1);
  4828  1665  3001               	movlw	1
  4829  1666  3195  253D  3196   	fcall	_DimmerLights_Exceptions
  4830                           
  4831                           ;OverTemperature_B1.c: 117: setLED(2, 1);
  4832  1669  0020               	movlb	0	; select bank0
  4833  166A  01A1               	clrf	setLED@command
  4834  166B  0AA1               	incf	setLED@command,f
  4835  166C  3002               	movlw	2
  4836  166D  318B  2301  3196   	fcall	_setLED
  4837                           
  4838                           ;OverTemperature_B1.c: 119: } else if (command == 0) {
  4839  1670  2E7D               	goto	l7587
  4840  1671                     l7583:	
  4841  1671  0020               	movlb	0	; select bank0
  4842  1672  08B0               	movf	setOverTemp_Exceptions@command,f
  4843  1673  1D03               	skipz
  4844  1674  2E7D               	goto	l7587
  4845                           
  4846                           ;OverTemperature_B1.c: 120: setBuz(2, 100);
  4847  1675  3064               	movlw	100
  4848  1676  00A9               	movwf	setBuz@time
  4849  1677  3000               	movlw	0
  4850  1678  00AA               	movwf	setBuz@time+1
  4851  1679  3002               	movlw	2
  4852  167A  3189  2130  3196   	fcall	_setBuz
  4853  167D                     l7587:	
  4854                           
  4855                           ;OverTemperature_B1.c: 121: }
  4856                           ;OverTemperature_B1.c: 124: setLED(99, command + 10);
  4857  167D  0020               	movlb	0	; select bank0
  4858  167E  0830               	movf	setOverTemp_Exceptions@command,w
  4859  167F  3E0A               	addlw	10
  4860  1680  00AE               	movwf	??_setOverTemp_Exceptions
  4861  1681  082E               	movf	??_setOverTemp_Exceptions,w
  4862  1682  00A1               	movwf	setLED@command
  4863  1683  3063               	movlw	99
  4864  1684  318B  2301  3196   	fcall	_setLED
  4865                           
  4866                           ;OverTemperature_B1.c: 126: setSw_Enable(i);
  4867  1687  0020               	movlb	0	; select bank0
  4868  1688  082F               	movf	setOverTemp_Exceptions@i,w
  4869  1689  319F  2763  3196   	fcall	_setSw_Enable
  4870                           
  4871                           ;OverTemperature_B1.c: 128: setRF_Enable(i);
  4872  168C  0020               	movlb	0	; select bank0
  4873  168D  082F               	movf	setOverTemp_Exceptions@i,w
  4874  168E  319F  2737         	fcall	_setRF_Enable
  4875  1690  0008               	return
  4876  1691                     __end_of_setOverTemp_Exceptions:	
  4877                           
  4878                           	psect	text10
  4879  1E5A                     __ptext10:	
  4880 ;; *************** function _getPF_Safe *****************
  4881 ;; Defined at:
  4882 ;;		line 34 in file "../src/PowerFault_B1.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;		None
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  i               1    0[BANK0 ] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      unsigned char 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;Total ram usage:        1 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    5
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_setTemp_Main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _getPF_Safe
  4912  1E5A                     _getPF_Safe:	
  4913                           
  4914                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _getPF_Safe: [wreg+status,2]
  4918  1E5A  3000               	movlw	0
  4919  1E5B  0021               	movlb	1	; select bank1
  4920  1E5C  193E               	btfsc	_PF1^(0+128),2
  4921  1E5D  3001               	movlw	1
  4922  1E5E  0020               	movlb	0	; select bank0
  4923  1E5F  00A0               	movwf	getPF_Safe@i
  4924                           
  4925                           ;PowerFault_B1.c: 36: return i;
  4926  1E60  0820               	movf	getPF_Safe@i,w
  4927  1E61  0008               	return
  4928  1E62                     __end_of_getPF_Safe:	
  4929                           
  4930                           	psect	text11
  4931  1DF0                     __ptext11:	
  4932 ;; *************** function _Temp_Initialization *****************
  4933 ;; Defined at:
  4934 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_setTemp_Initialization
  4957 ;; This function is called by:
  4958 ;;		_main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _Temp_Initialization
  4964  1DF0                     _Temp_Initialization:	
  4965                           
  4966                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4967                           
  4968                           ;incstack = 0
  4969                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4970  1DF0  319D  25ED         	fcall	_setTemp_Initialization
  4971  1DF2  0008               	return
  4972  1DF3                     __end_of_Temp_Initialization:	
  4973                           
  4974                           	psect	text12
  4975  1DED                     __ptext12:	
  4976 ;; *************** function _setTemp_Initialization *****************
  4977 ;; Defined at:
  4978 ;;		line 43 in file "../src/OverTemperature_B1.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		None
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    5
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_Temp_Initialization
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _setTemp_Initialization
  5008  1DED                     _setTemp_Initialization:	
  5009                           
  5010                           ;OverTemperature_B1.c: 44: Temp1.Safe = 1;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _setTemp_Initialization: []
  5014  1DED  0021               	movlb	1	; select bank1
  5015  1DEE  1659               	bsf	_Temp1^(0+128),4
  5016  1DEF  0008               	return
  5017  1DF0                     __end_of_setTemp_Initialization:	
  5018                           
  5019                           	psect	text13
  5020  1066                     __ptext13:	
  5021 ;; *************** function _Switch_Main *****************
  5022 ;; Defined at:
  5023 ;;		line 65 in file "../src/Switch_B1.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:   11
  5044 ;; This function calls:
  5045 ;;		_setSw_Main
  5046 ;; This function is called by:
  5047 ;;		_main
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function _Switch_Main
  5053  1066                     _Switch_Main:	
  5054                           
  5055                           ;Switch_B1.c: 67: setSw_Main(1);
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5059  1066  3001               	movlw	1
  5060  1067  3181  21F9         	fcall	_setSw_Main
  5061  1069  0008               	return
  5062  106A                     __end_of_Switch_Main:	
  5063                           
  5064                           	psect	text14
  5065  01F9                     __ptext14:	
  5066 ;; *************** function _setSw_Main *****************
  5067 ;; Defined at:
  5068 ;;		line 115 in file "../src/Switch_B1.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  sw              1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  sw              1   72[BANK0 ] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;		None               void
  5075 ;; Registers used:
  5076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;Total ram usage:        4 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:   10
  5089 ;; This function calls:
  5090 ;;		_SwPointSelect
  5091 ;;		_Sw_DimmerAdjFunc
  5092 ;;		_Sw_DimmerOffFunc
  5093 ;;		_Sw_DimmerOnFunc
  5094 ;;		_setBuz
  5095 ;;		_setRF_Learn
  5096 ;; This function is called by:
  5097 ;;		_Switch_Main
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _setSw_Main
  5103  01F9                     _setSw_Main:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5107                           ;setSw_Main@sw stored from wreg
  5108  01F9  0020               	movlb	0	; select bank0
  5109  01FA  00E8               	movwf	setSw_Main@sw
  5110                           
  5111                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5112  01FB  0868               	movf	setSw_Main@sw,w
  5113  01FC  319E  26C7  3181   	fcall	_SwPointSelect
  5114                           
  5115                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  5116  01FF  0020               	movlb	0	; select bank0
  5117  0200  086E               	movf	_Sw,w
  5118  0201  0086               	movwf	6
  5119  0202  3001               	movlw	1	; select bank2/3
  5120  0203  0087               	movwf	7
  5121  0204  1C01               	btfss	1,0
  5122  0205  0008               	return
  5123                           
  5124                           ;Switch_B1.c: 137: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5125  0206  01E7               	clrf	_setSw_Main$4927
  5126  0207  0AE7               	incf	_setSw_Main$4927,f
  5127  0208  1F0C               	btfss	12,6	;volatile
  5128  0209  1A0C               	btfsc	12,4	;volatile
  5129  020A  2A0F               	goto	l6999
  5130  020B  1C0C               	btfss	12,0	;volatile
  5131  020C  188D               	btfsc	13,1	;volatile
  5132  020D  2A0F               	goto	l6999
  5133  020E  01E7               	clrf	_setSw_Main$4927
  5134  020F                     l6999:	
  5135  020F  086E               	movf	_Sw,w
  5136  0210  0086               	movwf	6
  5137  0211  3001               	movlw	1	; select bank2/3
  5138  0212  0087               	movwf	7
  5139  0213  0867               	movf	_setSw_Main$4927,w
  5140  0214  1081               	bcf	1,1
  5141  0215  1D03               	skipz
  5142  0216  1481               	bsf	1,1
  5143                           
  5144                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  5145  0217  086E               	movf	_Sw,w
  5146  0218  0086               	movwf	6
  5147  0219  3001               	movlw	1	; select bank2/3
  5148  021A  0087               	movwf	7
  5149  021B  1C81               	btfss	1,1
  5150  021C  2AE1               	goto	l7049
  5151                           
  5152                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  5153  021D  086E               	movf	_Sw,w
  5154  021E  0086               	movwf	6
  5155  021F  3001               	movlw	1	; select bank2/3
  5156  0220  0087               	movwf	7
  5157  0221  1901               	btfsc	1,2
  5158  0222  2A44               	goto	l7015
  5159                           
  5160                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  5161  0223  3001               	movlw	1
  5162  0224  00E5               	movwf	??_setSw_Main
  5163  0225  086E               	movf	_Sw,w
  5164  0226  3E02               	addlw	2
  5165  0227  0086               	movwf	6
  5166  0228  3001               	movlw	1	; select bank2/3
  5167  0229  0087               	movwf	7
  5168  022A  0865               	movf	??_setSw_Main,w
  5169  022B  0781               	addwf	1,f
  5170                           
  5171                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  5172  022C  086E               	movf	_Sw,w
  5173  022D  3E02               	addlw	2
  5174  022E  0086               	movwf	6
  5175  022F  3001               	movlw	1	; select bank2/3
  5176  0230  0087               	movwf	7
  5177  0231  3005               	movlw	5
  5178  0232  0201               	subwf	1,w
  5179  0233  1C03               	skipc
  5180  0234  0008               	return
  5181                           
  5182                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  5183  0235  086E               	movf	_Sw,w
  5184  0236  3E02               	addlw	2
  5185  0237  0086               	movwf	6
  5186  0238  3001               	movlw	1	; select bank2/3
  5187  0239  0087               	movwf	7
  5188  023A  0181               	clrf	1
  5189                           
  5190                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  5191  023B  086E               	movf	_Sw,w
  5192  023C  0086               	movwf	6
  5193  023D  3001               	movlw	1	; select bank2/3
  5194  023E  0087               	movwf	7
  5195  023F  1501               	bsf	1,2
  5196                           
  5197                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  5198  0240  0868               	movf	setSw_Main@sw,w
  5199  0241  3188  20D9         	fcall	_Sw_DimmerOnFunc
  5200                           
  5201                           ;Switch_B1.c: 149: }
  5202                           ;Switch_B1.c: 150: } else {
  5203  0243  0008               	return
  5204  0244                     l7015:	
  5205                           
  5206                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  5207  0244  0020               	movlb	0	; select bank0
  5208  0245  086E               	movf	_Sw,w
  5209  0246  0086               	movwf	6
  5210  0247  3001               	movlw	1	; select bank2/3
  5211  0248  0087               	movwf	7
  5212  0249  1981               	btfsc	1,3
  5213  024A  2A71               	goto	l7025
  5214                           
  5215                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  5216  024B  086E               	movf	_Sw,w
  5217  024C  3E03               	addlw	3
  5218  024D  0086               	movwf	6
  5219  024E  3001               	movlw	1	; select bank2/3
  5220  024F  0087               	movwf	7
  5221  0250  3001               	movlw	1
  5222  0251  0781               	addwf	1,f
  5223  0252  3141               	addfsr 1,1
  5224  0253  1803               	skipnc
  5225  0254  0A81               	incf	1,f
  5226                           
  5227                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  5228  0255  086E               	movf	_Sw,w
  5229  0256  3E03               	addlw	3
  5230  0257  0086               	movwf	6
  5231  0258  3001               	movlw	1	; select bank2/3
  5232  0259  0087               	movwf	7
  5233  025A  3F40               	moviw [0]fsr1
  5234  025B  00E5               	movwf	??_setSw_Main
  5235  025C  3F41               	moviw [1]fsr1
  5236  025D  00E6               	movwf	??_setSw_Main+1
  5237  025E  3000               	movlw	0
  5238  025F  0266               	subwf	??_setSw_Main+1,w
  5239  0260  3096               	movlw	150
  5240  0261  1903               	skipnz
  5241  0262  0265               	subwf	??_setSw_Main,w
  5242  0263  1C03               	skipc
  5243  0264  0008               	return
  5244                           
  5245                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  5246  0265  086E               	movf	_Sw,w
  5247  0266  3E03               	addlw	3
  5248  0267  0086               	movwf	6
  5249  0268  3001               	movlw	1	; select bank2/3
  5250  0269  0087               	movwf	7
  5251  026A  3000               	movlw	0
  5252  026B  3FC0               	movwi [0]fsr1
  5253  026C  3FC1               	movwi [1]fsr1
  5254                           
  5255                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5256  026D  0868               	movf	setSw_Main@sw,w
  5257  026E  3193  23BF         	fcall	_Sw_DimmerAdjFunc
  5258                           
  5259                           ;Switch_B1.c: 160: }
  5260                           ;Switch_B1.c: 161: } else {
  5261  0270  0008               	return
  5262  0271                     l7025:	
  5263                           
  5264                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5265  0271  0020               	movlb	0	; select bank0
  5266  0272  086E               	movf	_Sw,w
  5267  0273  0086               	movwf	6
  5268  0274  3001               	movlw	1	; select bank2/3
  5269  0275  0087               	movwf	7
  5270  0276  1A01               	btfsc	1,4
  5271  0277  2AAF               	goto	l7039
  5272                           
  5273                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5274  0278  086E               	movf	_Sw,w
  5275  0279  3E05               	addlw	5
  5276  027A  0086               	movwf	6
  5277  027B  3001               	movlw	1	; select bank2/3
  5278  027C  0087               	movwf	7
  5279  027D  3001               	movlw	1
  5280  027E  0781               	addwf	1,f
  5281  027F  3141               	addfsr 1,1
  5282  0280  1803               	skipnc
  5283  0281  0A81               	incf	1,f
  5284                           
  5285                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5286  0282  086E               	movf	_Sw,w
  5287  0283  3E05               	addlw	5
  5288  0284  0086               	movwf	6
  5289  0285  3001               	movlw	1	; select bank2/3
  5290  0286  0087               	movwf	7
  5291  0287  3F40               	moviw [0]fsr1
  5292  0288  00E5               	movwf	??_setSw_Main
  5293  0289  3F41               	moviw [1]fsr1
  5294  028A  00E6               	movwf	??_setSw_Main+1
  5295  028B  3000               	movlw	0
  5296  028C  0266               	subwf	??_setSw_Main+1,w
  5297  028D  3096               	movlw	150
  5298  028E  1903               	skipnz
  5299  028F  0265               	subwf	??_setSw_Main,w
  5300  0290  1C03               	skipc
  5301  0291  0008               	return
  5302                           
  5303                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5304  0292  086E               	movf	_Sw,w
  5305  0293  3E05               	addlw	5
  5306  0294  0086               	movwf	6
  5307  0295  3001               	movlw	1	; select bank2/3
  5308  0296  0087               	movwf	7
  5309  0297  3000               	movlw	0
  5310  0298  3FC0               	movwi [0]fsr1
  5311  0299  3FC1               	movwi [1]fsr1
  5312                           
  5313                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5314  029A  086E               	movf	_Sw,w
  5315  029B  0086               	movwf	6
  5316  029C  3001               	movlw	1	; select bank2/3
  5317  029D  0087               	movwf	7
  5318  029E  1601               	bsf	1,4
  5319                           
  5320                           ;Switch_B1.c: 169: setRF_Learn(1);
  5321  029F  3001               	movlw	1
  5322  02A0  319E  2652  3181   	fcall	_setRF_Learn
  5323                           
  5324                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5325  02A3  0021               	movlb	1	; select bank1
  5326  02A4  1FA0               	btfss	_myMain^(0+128),7
  5327  02A5  0008               	return
  5328                           
  5329                           ;Switch_B1.c: 172: setBuz(2, 100);
  5330  02A6  3064               	movlw	100
  5331  02A7  0020               	movlb	0	; select bank0
  5332  02A8  00A9               	movwf	setBuz@time
  5333  02A9  3000               	movlw	0
  5334  02AA  00AA               	movwf	setBuz@time+1
  5335  02AB  3002               	movlw	2
  5336  02AC  3189  2130         	fcall	_setBuz
  5337                           
  5338                           ;Switch_B1.c: 173: }
  5339                           ;Switch_B1.c: 175: }
  5340                           ;Switch_B1.c: 176: } else {
  5341  02AE  0008               	return
  5342  02AF                     l7039:	
  5343                           
  5344                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5345  02AF  0020               	movlb	0	; select bank0
  5346  02B0  086E               	movf	_Sw,w
  5347  02B1  0086               	movwf	6
  5348  02B2  3001               	movlw	1	; select bank2/3
  5349  02B3  0087               	movwf	7
  5350  02B4  1A81               	btfsc	1,5
  5351  02B5  0008               	return
  5352                           
  5353                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5354  02B6  086E               	movf	_Sw,w
  5355  02B7  3E07               	addlw	7
  5356  02B8  0086               	movwf	6
  5357  02B9  3001               	movlw	1	; select bank2/3
  5358  02BA  0087               	movwf	7
  5359  02BB  3001               	movlw	1
  5360  02BC  0781               	addwf	1,f
  5361  02BD  3141               	addfsr 1,1
  5362  02BE  1803               	skipnc
  5363  02BF  0A81               	incf	1,f
  5364                           
  5365                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5366  02C0  086E               	movf	_Sw,w
  5367  02C1  3E07               	addlw	7
  5368  02C2  0086               	movwf	6
  5369  02C3  3001               	movlw	1	; select bank2/3
  5370  02C4  0087               	movwf	7
  5371  02C5  3F40               	moviw [0]fsr1
  5372  02C6  00E5               	movwf	??_setSw_Main
  5373  02C7  3F41               	moviw [1]fsr1
  5374  02C8  00E6               	movwf	??_setSw_Main+1
  5375  02C9  3001               	movlw	1
  5376  02CA  0266               	subwf	??_setSw_Main+1,w
  5377  02CB  302C               	movlw	44
  5378  02CC  1903               	skipnz
  5379  02CD  0265               	subwf	??_setSw_Main,w
  5380  02CE  1C03               	skipc
  5381  02CF  0008               	return
  5382                           
  5383                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5384  02D0  086E               	movf	_Sw,w
  5385  02D1  3E07               	addlw	7
  5386  02D2  0086               	movwf	6
  5387  02D3  3001               	movlw	1	; select bank2/3
  5388  02D4  0087               	movwf	7
  5389  02D5  3000               	movlw	0
  5390  02D6  3FC0               	movwi [0]fsr1
  5391  02D7  3FC1               	movwi [1]fsr1
  5392                           
  5393                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5394  02D8  086E               	movf	_Sw,w
  5395  02D9  0086               	movwf	6
  5396  02DA  3001               	movlw	1	; select bank2/3
  5397  02DB  0087               	movwf	7
  5398  02DC  1681               	bsf	1,5
  5399                           
  5400                           ;Switch_B1.c: 184: setRF_Learn(0);
  5401  02DD  3000               	movlw	0
  5402  02DE  319E  2652         	fcall	_setRF_Learn
  5403                           
  5404                           ;Switch_B1.c: 187: }
  5405                           ;Switch_B1.c: 188: }
  5406                           ;Switch_B1.c: 189: }
  5407                           ;Switch_B1.c: 190: }
  5408                           ;Switch_B1.c: 191: }
  5409                           ;Switch_B1.c: 192: } else {
  5410  02E0  0008               	return
  5411  02E1                     l7049:	
  5412                           
  5413                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5414  02E1  0020               	movlb	0	; select bank0
  5415  02E2  086E               	movf	_Sw,w
  5416  02E3  0086               	movwf	6
  5417  02E4  3001               	movlw	1	; select bank2/3
  5418  02E5  0087               	movwf	7
  5419  02E6  1D01               	btfss	1,2
  5420  02E7  0008               	return
  5421                           
  5422                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5423  02E8  3001               	movlw	1
  5424  02E9  00E5               	movwf	??_setSw_Main
  5425  02EA  086E               	movf	_Sw,w
  5426  02EB  3E02               	addlw	2
  5427  02EC  0086               	movwf	6
  5428  02ED  3001               	movlw	1	; select bank2/3
  5429  02EE  0087               	movwf	7
  5430  02EF  0865               	movf	??_setSw_Main,w
  5431  02F0  0781               	addwf	1,f
  5432                           
  5433                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5434  02F1  086E               	movf	_Sw,w
  5435  02F2  3E02               	addlw	2
  5436  02F3  0086               	movwf	6
  5437  02F4  3001               	movlw	1	; select bank2/3
  5438  02F5  0087               	movwf	7
  5439  02F6  3005               	movlw	5
  5440  02F7  0201               	subwf	1,w
  5441  02F8  1C03               	skipc
  5442  02F9  0008               	return
  5443                           
  5444                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5445  02FA  086E               	movf	_Sw,w
  5446  02FB  3E02               	addlw	2
  5447  02FC  0086               	movwf	6
  5448  02FD  3001               	movlw	1	; select bank2/3
  5449  02FE  0087               	movwf	7
  5450  02FF  0181               	clrf	1
  5451                           
  5452                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5453  0300  086E               	movf	_Sw,w
  5454  0301  0086               	movwf	6
  5455  0302  3001               	movlw	1	; select bank2/3
  5456  0303  0087               	movwf	7
  5457  0304  1101               	bcf	1,2
  5458                           
  5459                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5460  0305  086E               	movf	_Sw,w
  5461  0306  3E03               	addlw	3
  5462  0307  0086               	movwf	6
  5463  0308  3001               	movlw	1	; select bank2/3
  5464  0309  0087               	movwf	7
  5465  030A  3000               	movlw	0
  5466  030B  3FC0               	movwi [0]fsr1
  5467  030C  3FC1               	movwi [1]fsr1
  5468                           
  5469                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5470  030D  086E               	movf	_Sw,w
  5471  030E  0086               	movwf	6
  5472  030F  3001               	movlw	1	; select bank2/3
  5473  0310  0087               	movwf	7
  5474  0311  1181               	bcf	1,3
  5475                           
  5476                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5477  0312  086E               	movf	_Sw,w
  5478  0313  3E05               	addlw	5
  5479  0314  0086               	movwf	6
  5480  0315  3001               	movlw	1	; select bank2/3
  5481  0316  0087               	movwf	7
  5482  0317  3000               	movlw	0
  5483  0318  3FC0               	movwi [0]fsr1
  5484  0319  3FC1               	movwi [1]fsr1
  5485                           
  5486                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5487  031A  086E               	movf	_Sw,w
  5488  031B  0086               	movwf	6
  5489  031C  3001               	movlw	1	; select bank2/3
  5490  031D  0087               	movwf	7
  5491  031E  1201               	bcf	1,4
  5492                           
  5493                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5494  031F  086E               	movf	_Sw,w
  5495  0320  3E07               	addlw	7
  5496  0321  0086               	movwf	6
  5497  0322  3001               	movlw	1	; select bank2/3
  5498  0323  0087               	movwf	7
  5499  0324  3000               	movlw	0
  5500  0325  3FC0               	movwi [0]fsr1
  5501  0326  3FC1               	movwi [1]fsr1
  5502                           
  5503                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5504  0327  086E               	movf	_Sw,w
  5505  0328  0086               	movwf	6
  5506  0329  3001               	movlw	1	; select bank2/3
  5507  032A  0087               	movwf	7
  5508  032B  1281               	bcf	1,5
  5509                           
  5510                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  5511  032C  0868               	movf	setSw_Main@sw,w
  5512  032D  318C  2430  3181   	fcall	_Sw_DimmerOffFunc
  5513                           
  5514                           ;Switch_B1.c: 208: setRF_Learn(0);
  5515  0330  3000               	movlw	0
  5516  0331  319E  2652         	fcall	_setRF_Learn
  5517  0333  0008               	return
  5518  0334                     __end_of_setSw_Main:	
  5519                           
  5520                           	psect	text15
  5521  1E52                     __ptext15:	
  5522 ;; *************** function _setRF_Learn *****************
  5523 ;; Defined at:
  5524 ;;		line 23 in file "../src/RF_Control_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  command         1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  command         1    0[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        1 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    5
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_setSw_Main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           
  5553                           ;psect for function _setRF_Learn
  5554  1E52                     _setRF_Learn:	
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in _setRF_Learn: [wreg]
  5558                           ;setRF_Learn@command stored from wreg
  5559  1E52  0020               	movlb	0	; select bank0
  5560  1E53  00A0               	movwf	setRF_Learn@command
  5561                           
  5562                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5563  1E54  0820               	movf	setRF_Learn@command,w
  5564  1E55  0021               	movlb	1	; select bank1
  5565  1E56  1346               	bcf	_RF1^(0+128),6
  5566  1E57  1D03               	skipz
  5567  1E58  1746               	bsf	_RF1^(0+128),6
  5568  1E59  0008               	return
  5569  1E5A                     __end_of_setRF_Learn:	
  5570                           
  5571                           	psect	text16
  5572  08D9                     __ptext16:	
  5573 ;; *************** function _Sw_DimmerOnFunc *****************
  5574 ;; Defined at:
  5575 ;;		line 217 in file "../src/Switch_B1.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  sw              1    wreg     unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  sw              1   67[BANK0 ] unsigned char 
  5580 ;;  Idle            1   66[BANK0 ] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;		None               void
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    9
  5597 ;; This function calls:
  5598 ;;		_setBuz
  5599 ;;		_setDimmerLights_Switch
  5600 ;;		_setDimmerLights_Trigger
  5601 ;;		_setRFSW_Status
  5602 ;;		_setRF_DimmerLights
  5603 ;;		_setTxData
  5604 ;; This function is called by:
  5605 ;;		_setSw_Main
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _Sw_DimmerOnFunc
  5611  08D9                     _Sw_DimmerOnFunc:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5615                           ;Sw_DimmerOnFunc@sw stored from wreg
  5616  08D9  0020               	movlb	0	; select bank0
  5617  08DA  00E3               	movwf	Sw_DimmerOnFunc@sw
  5618                           
  5619                           ;Switch_B1.c: 218: char Idle = 1;
  5620  08DB  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5621  08DC  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5622                           
  5623                           ;Switch_B1.c: 239: if (Idle == 1) {
  5624  08DD  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5625  08DE  3A01               	xorlw	1
  5626  08DF  1D03               	skipz
  5627  08E0  0008               	return
  5628                           
  5629                           ;Switch_B1.c: 240: Sw->Flag = 1;
  5630  08E1  086E               	movf	_Sw,w
  5631  08E2  0086               	movwf	6
  5632  08E3  3001               	movlw	1	; select bank2/3
  5633  08E4  0087               	movwf	7
  5634  08E5  1781               	bsf	1,7
  5635                           
  5636                           ;Switch_B1.c: 241: setBuz(1, 100);
  5637  08E6  3064               	movlw	100
  5638  08E7  00A9               	movwf	setBuz@time
  5639  08E8  3000               	movlw	0
  5640  08E9  00AA               	movwf	setBuz@time+1
  5641  08EA  3001               	movlw	1
  5642  08EB  3189  2130  3188   	fcall	_setBuz
  5643                           
  5644                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  5645  08EE  0020               	movlb	0	; select bank0
  5646  08EF  086E               	movf	_Sw,w
  5647  08F0  0086               	movwf	6
  5648  08F1  3001               	movlw	1	; select bank2/3
  5649  08F2  0087               	movwf	7
  5650  08F3  1B01               	btfsc	1,6
  5651  08F4  291E               	goto	l6375
  5652                           
  5653                           ;Switch_B1.c: 243: Sw->Status = 1;
  5654  08F5  086E               	movf	_Sw,w
  5655  08F6  0086               	movwf	6
  5656  08F7  3001               	movlw	1	; select bank2/3
  5657  08F8  0087               	movwf	7
  5658  08F9  1701               	bsf	1,6
  5659                           
  5660                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  5661  08FA  01A2               	clrf	setRFSW_Status@command
  5662  08FB  0AA2               	incf	setRFSW_Status@command,f
  5663  08FC  0863               	movf	Sw_DimmerOnFunc@sw,w
  5664  08FD  319F  2729  3188   	fcall	_setRFSW_Status
  5665                           
  5666                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  5667  0900  0020               	movlb	0	; select bank0
  5668  0901  01A2               	clrf	setDimmerLights_Trigger@command
  5669  0902  0AA2               	incf	setDimmerLights_Trigger@command,f
  5670  0903  0863               	movf	Sw_DimmerOnFunc@sw,w
  5671  0904  319F  27AF  3188   	fcall	_setDimmerLights_Trigger
  5672                           
  5673                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  5674  0907  0020               	movlb	0	; select bank0
  5675  0908  01A2               	clrf	setDimmerLights_Switch@command
  5676  0909  0AA2               	incf	setDimmerLights_Switch@command,f
  5677  090A  0863               	movf	Sw_DimmerOnFunc@sw,w
  5678  090B  319F  279F  3188   	fcall	_setDimmerLights_Switch
  5679                           
  5680                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  5681  090E  0020               	movlb	0	; select bank0
  5682  090F  086E               	movf	_Sw,w
  5683  0910  0086               	movwf	6
  5684  0911  3001               	movlw	1	; select bank2/3
  5685  0912  0087               	movwf	7
  5686  0913  3000               	movlw	0
  5687  0914  1B01               	btfsc	1,6
  5688  0915  3001               	movlw	1
  5689  0916  00DD               	movwf	setRF_DimmerLights@on
  5690  0917  0863               	movf	Sw_DimmerOnFunc@sw,w
  5691  0918  3187  2792  3188   	fcall	_setRF_DimmerLights
  5692                           
  5693                           ;Switch_B1.c: 250: setTxData();
  5694  091B  3184  24F1         	fcall	_setTxData
  5695                           
  5696                           ;Switch_B1.c: 252: } else {
  5697  091D  0008               	return
  5698  091E                     l6375:	
  5699                           
  5700                           ;Switch_B1.c: 253: Sw->Status = 0;
  5701  091E  0020               	movlb	0	; select bank0
  5702  091F  086E               	movf	_Sw,w
  5703  0920  0086               	movwf	6
  5704  0921  3001               	movlw	1	; select bank2/3
  5705  0922  0087               	movwf	7
  5706  0923  1301               	bcf	1,6
  5707                           
  5708                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  5709  0924  086E               	movf	_Sw,w
  5710  0925  0086               	movwf	6
  5711  0926  3001               	movlw	1	; select bank2/3
  5712  0927  0087               	movwf	7
  5713  0928  3000               	movlw	0
  5714  0929  1B01               	btfsc	1,6
  5715  092A  3001               	movlw	1
  5716  092B  00A2               	movwf	setRFSW_Status@command
  5717  092C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5718  092D  319F  2729         	fcall	_setRFSW_Status
  5719  092F  0008               	return
  5720  0930                     __end_of_Sw_DimmerOnFunc:	
  5721                           
  5722                           	psect	text17
  5723  0C30                     __ptext17:	
  5724 ;; *************** function _Sw_DimmerOffFunc *****************
  5725 ;; Defined at:
  5726 ;;		line 260 in file "../src/Switch_B1.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  sw              1    wreg     unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  sw              1   68[BANK0 ] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;		None               void
  5733 ;; Registers used:
  5734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;Total ram usage:        3 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    9
  5747 ;; This function calls:
  5748 ;;		_setDelayOff_GO
  5749 ;;		_setDimmerLights_AdjGo
  5750 ;;		_setDimmerLights_Switch
  5751 ;;		_setDimmerLights_Trigger
  5752 ;;		_setDimmerLights_TriggerAdj
  5753 ;;		_setRF_DimmerLights
  5754 ;;		_setTxData
  5755 ;; This function is called by:
  5756 ;;		_setSw_Main
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _Sw_DimmerOffFunc
  5762  0C30                     _Sw_DimmerOffFunc:	
  5763                           
  5764                           ;incstack = 0
  5765                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5766                           ;Sw_DimmerOffFunc@sw stored from wreg
  5767  0C30  0020               	movlb	0	; select bank0
  5768  0C31  00E4               	movwf	Sw_DimmerOffFunc@sw
  5769                           
  5770                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  5771  0C32  086E               	movf	_Sw,w
  5772  0C33  0086               	movwf	6
  5773  0C34  3001               	movlw	1	; select bank2/3
  5774  0C35  0087               	movwf	7
  5775  0C36  1F81               	btfss	1,7
  5776  0C37  0008               	return
  5777                           
  5778                           ;Switch_B1.c: 262: Sw->Flag = 0;
  5779  0C38  086E               	movf	_Sw,w
  5780  0C39  0086               	movwf	6
  5781  0C3A  3001               	movlw	1	; select bank2/3
  5782  0C3B  0087               	movwf	7
  5783  0C3C  1381               	bcf	1,7
  5784                           
  5785                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  5786  0C3D  086E               	movf	_Sw,w
  5787  0C3E  0086               	movwf	6
  5788  0C3F  3001               	movlw	1	; select bank2/3
  5789  0C40  0087               	movwf	7
  5790  0C41  1F01               	btfss	1,6
  5791  0C42  2C7B               	goto	l6411
  5792                           
  5793                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  5794  0C43  0A6E               	incf	_Sw,w
  5795  0C44  0086               	movwf	6
  5796  0C45  3001               	movlw	1	; select bank2/3
  5797  0C46  0087               	movwf	7
  5798  0C47  1C01               	btfss	1,0
  5799  0C48  0008               	return
  5800                           
  5801                           ;Switch_B1.c: 265: Sw->Adj = 0;
  5802  0C49  0A6E               	incf	_Sw,w
  5803  0C4A  0086               	movwf	6
  5804  0C4B  3001               	movlw	1	; select bank2/3
  5805  0C4C  0087               	movwf	7
  5806  0C4D  1001               	bcf	1,0
  5807                           
  5808                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  5809  0C4E  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5810  0C4F  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5811  0C50  0864               	movf	Sw_DimmerOffFunc@sw,w
  5812  0C51  319F  27DF  318C   	fcall	_setDimmerLights_TriggerAdj
  5813                           
  5814                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  5815  0C54  0020               	movlb	0	; select bank0
  5816  0C55  01A2               	clrf	setDimmerLights_AdjGo@command
  5817  0C56  0864               	movf	Sw_DimmerOffFunc@sw,w
  5818  0C57  319F  27CF  318C   	fcall	_setDimmerLights_AdjGo
  5819                           
  5820                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  5821  0C5A  0020               	movlb	0	; select bank0
  5822  0C5B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5823  0C5C  3E1A               	addlw	26
  5824  0C5D  076F               	addwf	_product,w
  5825  0C5E  00E2               	movwf	??_Sw_DimmerOffFunc
  5826  0C5F  0862               	movf	??_Sw_DimmerOffFunc,w
  5827  0C60  0086               	movwf	6
  5828  0C61  3001               	movlw	1	; select bank2/3
  5829  0C62  0087               	movwf	7
  5830  0C63  0801               	movf	1,w
  5831  0C64  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5832  0C65  086F               	movf	_product,w
  5833  0C66  3E11               	addlw	17
  5834  0C67  0086               	movwf	6
  5835  0C68  3001               	movlw	1	; select bank2/3
  5836  0C69  0087               	movwf	7
  5837  0C6A  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5838  0C6B  0081               	movwf	1
  5839                           
  5840                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  5841  0C6C  086E               	movf	_Sw,w
  5842  0C6D  0086               	movwf	6
  5843  0C6E  3001               	movlw	1	; select bank2/3
  5844  0C6F  0087               	movwf	7
  5845  0C70  3000               	movlw	0
  5846  0C71  1B01               	btfsc	1,6
  5847  0C72  3001               	movlw	1
  5848  0C73  00DD               	movwf	setRF_DimmerLights@on
  5849  0C74  0864               	movf	Sw_DimmerOffFunc@sw,w
  5850  0C75  3187  2792  318C   	fcall	_setRF_DimmerLights
  5851                           
  5852                           ;Switch_B1.c: 271: setTxData();
  5853  0C78  3184  24F1         	fcall	_setTxData
  5854                           
  5855                           ;Switch_B1.c: 273: }
  5856                           ;Switch_B1.c: 274: } else {
  5857  0C7A  0008               	return
  5858  0C7B                     l6411:	
  5859                           
  5860                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  5861  0C7B  0020               	movlb	0	; select bank0
  5862  0C7C  01A2               	clrf	setDimmerLights_Trigger@command
  5863  0C7D  0AA2               	incf	setDimmerLights_Trigger@command,f
  5864  0C7E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5865  0C7F  319F  27AF  318C   	fcall	_setDimmerLights_Trigger
  5866                           
  5867                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  5868  0C82  0020               	movlb	0	; select bank0
  5869  0C83  01A2               	clrf	setDimmerLights_Switch@command
  5870  0C84  0864               	movf	Sw_DimmerOffFunc@sw,w
  5871  0C85  319F  279F  318C   	fcall	_setDimmerLights_Switch
  5872                           
  5873                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  5874  0C88  0020               	movlb	0	; select bank0
  5875  0C89  01AA               	clrf	setDelayOff_GO@command
  5876  0C8A  01AB               	clrf	setDelayOff_GO@value
  5877  0C8B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5878  0C8C  318B  2363  318C   	fcall	_setDelayOff_GO
  5879                           
  5880                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  5881  0C8F  0020               	movlb	0	; select bank0
  5882  0C90  086E               	movf	_Sw,w
  5883  0C91  0086               	movwf	6
  5884  0C92  3001               	movlw	1	; select bank2/3
  5885  0C93  0087               	movwf	7
  5886  0C94  3000               	movlw	0
  5887  0C95  1B01               	btfsc	1,6
  5888  0C96  3001               	movlw	1
  5889  0C97  00DD               	movwf	setRF_DimmerLights@on
  5890  0C98  0864               	movf	Sw_DimmerOffFunc@sw,w
  5891  0C99  3187  2792  318C   	fcall	_setRF_DimmerLights
  5892                           
  5893                           ;Switch_B1.c: 280: setTxData();
  5894  0C9C  3184  24F1         	fcall	_setTxData
  5895  0C9E  0008               	return
  5896  0C9F                     __end_of_Sw_DimmerOffFunc:	
  5897                           
  5898                           	psect	text18
  5899  13BF                     __ptext18:	
  5900 ;; *************** function _Sw_DimmerAdjFunc *****************
  5901 ;; Defined at:
  5902 ;;		line 287 in file "../src/Switch_B1.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  sw              1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  sw              1    5[BANK0 ] unsigned char 
  5907 ;;  Idle            1    4[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;Total ram usage:        2 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    7
  5924 ;; This function calls:
  5925 ;;		_setDimmerLights_AdjGo
  5926 ;;		_setDimmerLights_TriggerAdj
  5927 ;;		_setRFSW_Status
  5928 ;; This function is called by:
  5929 ;;		_setSw_Main
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _Sw_DimmerAdjFunc
  5935  13BF                     _Sw_DimmerAdjFunc:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5939                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5940  13BF  0020               	movlb	0	; select bank0
  5941  13C0  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5942                           
  5943                           ;Switch_B1.c: 288: char Idle = 1;
  5944  13C1  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5945  13C2  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5946                           
  5947                           ;Switch_B1.c: 308: if (Idle == 1) {
  5948  13C3  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5949  13C4  3A01               	xorlw	1
  5950  13C5  1D03               	skipz
  5951  13C6  0008               	return
  5952                           
  5953                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  5954  13C7  086E               	movf	_Sw,w
  5955  13C8  0086               	movwf	6
  5956  13C9  3001               	movlw	1	; select bank2/3
  5957  13CA  0087               	movwf	7
  5958  13CB  1F81               	btfss	1,7
  5959  13CC  0008               	return
  5960                           
  5961                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  5962  13CD  086E               	movf	_Sw,w
  5963  13CE  0086               	movwf	6
  5964  13CF  3001               	movlw	1	; select bank2/3
  5965  13D0  0087               	movwf	7
  5966  13D1  1581               	bsf	1,3
  5967                           
  5968                           ;Switch_B1.c: 311: Sw->Adj = 1;
  5969  13D2  0A6E               	incf	_Sw,w
  5970  13D3  0086               	movwf	6
  5971  13D4  3001               	movlw	1	; select bank2/3
  5972  13D5  0087               	movwf	7
  5973  13D6  1401               	bsf	1,0
  5974                           
  5975                           ;Switch_B1.c: 312: Sw->Status = 1;
  5976  13D7  086E               	movf	_Sw,w
  5977  13D8  0086               	movwf	6
  5978  13D9  3001               	movlw	1	; select bank2/3
  5979  13DA  0087               	movwf	7
  5980  13DB  1701               	bsf	1,6
  5981                           
  5982                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  5983  13DC  01A2               	clrf	setRFSW_Status@command
  5984  13DD  0AA2               	incf	setRFSW_Status@command,f
  5985  13DE  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5986  13DF  319F  2729  3193   	fcall	_setRFSW_Status
  5987                           
  5988                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  5989  13E2  0020               	movlb	0	; select bank0
  5990  13E3  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5991  13E4  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5992  13E5  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5993  13E6  319F  27DF  3193   	fcall	_setDimmerLights_TriggerAdj
  5994                           
  5995                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  5996  13E9  0020               	movlb	0	; select bank0
  5997  13EA  01A2               	clrf	setDimmerLights_AdjGo@command
  5998  13EB  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5999  13EC  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6000  13ED  319F  27CF         	fcall	_setDimmerLights_AdjGo
  6001  13EF  0008               	return
  6002  13F0                     __end_of_Sw_DimmerAdjFunc:	
  6003                           
  6004                           	psect	text19
  6005  1FDF                     __ptext19:	
  6006 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6007 ;; Defined at:
  6008 ;;		line 711 in file "../src/Dimmer_B1.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  lights          1    wreg     unsigned char 
  6011 ;;  command         1    2[BANK0 ] unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  lights          1    3[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		_DimmerLightsPointSelect
  6032 ;; This function is called by:
  6033 ;;		_Sw_DimmerOffFunc
  6034 ;;		_Sw_DimmerAdjFunc
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           
  6039                           ;psect for function _setDimmerLights_TriggerAdj
  6040  1FDF                     _setDimmerLights_TriggerAdj:	
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6044                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6045  1FDF  0020               	movlb	0	; select bank0
  6046  1FE0  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6047                           
  6048                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6049  1FE1  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6050  1FE2  319E  26B1         	fcall	_DimmerLightsPointSelect
  6051                           
  6052                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6053  1FE4  0020               	movlb	0	; select bank0
  6054  1FE5  086D               	movf	_DimmerLights,w
  6055  1FE6  3E08               	addlw	8
  6056  1FE7  0086               	movwf	6
  6057  1FE8  3001               	movlw	1	; select bank2/3
  6058  1FE9  0087               	movwf	7
  6059  1FEA  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6060  1FEB  1201               	bcf	1,4
  6061  1FEC  1D03               	skipz
  6062  1FED  1601               	bsf	1,4
  6063  1FEE  0008               	return
  6064  1FEF                     __end_of_setDimmerLights_TriggerAdj:	
  6065                           
  6066                           	psect	text20
  6067  1FCF                     __ptext20:	
  6068 ;; *************** function _setDimmerLights_AdjGo *****************
  6069 ;; Defined at:
  6070 ;;		line 699 in file "../src/Dimmer_B1.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  lights          1    wreg     unsigned char 
  6073 ;;  command         1    2[BANK0 ] unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  lights          1    3[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;		None               void
  6078 ;; Registers used:
  6079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6085 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;Total ram usage:        2 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    6
  6092 ;; This function calls:
  6093 ;;		_DimmerLightsPointSelect
  6094 ;; This function is called by:
  6095 ;;		_Sw_DimmerOffFunc
  6096 ;;		_Sw_DimmerAdjFunc
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _setDimmerLights_AdjGo
  6102  1FCF                     _setDimmerLights_AdjGo:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6106                           ;setDimmerLights_AdjGo@lights stored from wreg
  6107  1FCF  0020               	movlb	0	; select bank0
  6108  1FD0  00A3               	movwf	setDimmerLights_AdjGo@lights
  6109                           
  6110                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6111  1FD1  0823               	movf	setDimmerLights_AdjGo@lights,w
  6112  1FD2  319E  26B1         	fcall	_DimmerLightsPointSelect
  6113                           
  6114                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6115  1FD4  0020               	movlb	0	; select bank0
  6116  1FD5  086D               	movf	_DimmerLights,w
  6117  1FD6  3E08               	addlw	8
  6118  1FD7  0086               	movwf	6
  6119  1FD8  3001               	movlw	1	; select bank2/3
  6120  1FD9  0087               	movwf	7
  6121  1FDA  0822               	movf	setDimmerLights_AdjGo@command,w
  6122  1FDB  1181               	bcf	1,3
  6123  1FDC  1D03               	skipz
  6124  1FDD  1581               	bsf	1,3
  6125  1FDE  0008               	return
  6126  1FDF                     __end_of_setDimmerLights_AdjGo:	
  6127                           
  6128                           	psect	text21
  6129  1E73                     __ptext21:	
  6130 ;; *************** function _Switch_Initialization *****************
  6131 ;; Defined at:
  6132 ;;		line 41 in file "../src/Switch_B1.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;		None               void
  6139 ;; Registers used:
  6140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;Total ram usage:        0 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    8
  6153 ;; This function calls:
  6154 ;;		_TouchPower
  6155 ;;		_setSw_Initialization
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _Switch_Initialization
  6163  1E73                     _Switch_Initialization:	
  6164                           
  6165                           ;Switch_B1.c: 42: TouchPower();
  6166                           
  6167                           ;incstack = 0
  6168                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6169  1E73  319F  2781  319E   	fcall	_TouchPower
  6170                           
  6171                           ;Switch_B1.c: 44: WPUB1 = 0;
  6172  1E76  0024               	movlb	4	; select bank4
  6173  1E77  108D               	bcf	13,1	;volatile
  6174                           
  6175                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6176  1E78  3001               	movlw	1
  6177  1E79  319F  27BF         	fcall	_setSw_Initialization
  6178  1E7B  0008               	return
  6179  1E7C                     __end_of_Switch_Initialization:	
  6180                           
  6181                           	psect	text22
  6182  1FBF                     __ptext22:	
  6183 ;; *************** function _setSw_Initialization *****************
  6184 ;; Defined at:
  6185 ;;		line 81 in file "../src/Switch_B1.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  sw              1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  sw              1    3[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;		None               void
  6192 ;; Registers used:
  6193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;Total ram usage:        1 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    7
  6206 ;; This function calls:
  6207 ;;		_setLED
  6208 ;; This function is called by:
  6209 ;;		_Switch_Initialization
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function _setSw_Initialization
  6215  1FBF                     _setSw_Initialization:	
  6216                           
  6217                           ;incstack = 0
  6218                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6219                           ;setSw_Initialization@sw stored from wreg
  6220  1FBF  0020               	movlb	0	; select bank0
  6221  1FC0  00A3               	movwf	setSw_Initialization@sw
  6222                           
  6223                           ;Switch_B1.c: 82: setLED(sw, 1);
  6224  1FC1  01A1               	clrf	setLED@command
  6225  1FC2  0AA1               	incf	setLED@command,f
  6226  1FC3  0823               	movf	setSw_Initialization@sw,w
  6227  1FC4  318B  2301  319F   	fcall	_setLED
  6228                           
  6229                           ;Switch_B1.c: 84: setLED(sw + 1, 1);
  6230  1FC7  0020               	movlb	0	; select bank0
  6231  1FC8  01A1               	clrf	setLED@command
  6232  1FC9  0AA1               	incf	setLED@command,f
  6233  1FCA  0823               	movf	setSw_Initialization@sw,w
  6234  1FCB  3E01               	addlw	1
  6235  1FCC  318B  2301         	fcall	_setLED
  6236  1FCE  0008               	return
  6237  1FCF                     __end_of_setSw_Initialization:	
  6238                           
  6239                           	psect	text23
  6240  1F81                     __ptext23:	
  6241 ;; *************** function _TouchPower *****************
  6242 ;; Defined at:
  6243 ;;		line 10 in file "../src/Switch_B1.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;		None               void
  6250 ;; Registers used:
  6251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    6
  6264 ;; This function calls:
  6265 ;;		_Timeout_Counter
  6266 ;;		_set_TimeoutCleared
  6267 ;; This function is called by:
  6268 ;;		_Switch_Initialization
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _TouchPower
  6274  1F81                     _TouchPower:	
  6275                           
  6276                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6280  1F81  2F87               	goto	l6977
  6281  1F82                     l2236:	
  6282                           
  6283                           ;Switch_B1.c: 12: RC5 = 1;
  6284  1F82  0020               	movlb	0	; select bank0
  6285  1F83  168E               	bsf	14,5	;volatile
  6286                           
  6287                           ;Switch_B1.c: 13: Timeout_Counter();
  6288  1F84  3190  20F8  319F   	fcall	_Timeout_Counter
  6289  1F87                     l6977:	
  6290  1F87  0020               	movlb	0	; select bank0
  6291  1F88  1A8E               	btfsc	14,5	;volatile
  6292  1F89  2F8D               	goto	l6981
  6293  1F8A  0021               	movlb	1	; select bank1
  6294  1F8B  1D2F               	btfss	(_myMain^(0+128)+15),2
  6295  1F8C  2F82               	goto	l2236
  6296  1F8D                     l6981:	
  6297                           
  6298                           ;Switch_B1.c: 14: }
  6299                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6300  1F8D  319E  2616         	fcall	_set_TimeoutCleared
  6301  1F8F  0008               	return
  6302  1F90                     __end_of_TouchPower:	
  6303                           
  6304                           	psect	text24
  6305  1DEA                     __ptext24:	
  6306 ;; *************** function _RF_Main *****************
  6307 ;; Defined at:
  6308 ;;		line 16 in file "../src/RF_Control_B1.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:   14
  6329 ;; This function calls:
  6330 ;;		_setRF_Main
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function _RF_Main
  6338  1DEA                     _RF_Main:	
  6339                           
  6340                           ;RF_Control_B1.c: 18: setRF_Main();
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6344  1DEA  318D  250F         	fcall	_setRF_Main
  6345  1DEC  0008               	return
  6346  1DED                     __end_of_RF_Main:	
  6347                           
  6348                           	psect	text25
  6349  0D0F                     __ptext25:	
  6350 ;; *************** function _setRF_Main *****************
  6351 ;; Defined at:
  6352 ;;		line 51 in file "../src/RF_Control_B1.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;		None               void
  6359 ;; Registers used:
  6360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;Total ram usage:        2 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:   13
  6373 ;; This function calls:
  6374 ;;		_CC2500_RxData
  6375 ;;		_CC2500_TxData
  6376 ;;		_CC2500_WriteCommand
  6377 ;;		_RF_RxDisable
  6378 ;;		_getBuz_GO
  6379 ;;		_getRxData
  6380 ;; This function is called by:
  6381 ;;		_RF_Main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           
  6386                           ;psect for function _setRF_Main
  6387  0D0F                     _setRF_Main:	
  6388                           
  6389                           ;RF_Control_B1.c: 52: if (RF1.Enable == 1) {
  6390                           
  6391                           ;incstack = 0
  6392                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6393  0D0F  0021               	movlb	1	; select bank1
  6394  0D10  1C46               	btfss	_RF1^(0+128),0
  6395  0D11  0008               	return
  6396                           
  6397                           ;RF_Control_B1.c: 55: if (getBuz_GO() == 0) {
  6398  0D12  319F  27EF  318D   	fcall	_getBuz_GO
  6399  0D15  0020               	movlb	0	; select bank0
  6400  0D16  0821               	movf	?_getBuz_GO+1,w
  6401  0D17  0420               	iorwf	?_getBuz_GO,w
  6402  0D18  1D03               	skipz
  6403  0D19  0008               	return
  6404                           
  6405                           ;RF_Control_B1.c: 65: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6406  0D1A  01E8               	clrf	_setRF_Main$4057
  6407  0D1B  0AE8               	incf	_setRF_Main$4057,f
  6408  0D1C  1F0C               	btfss	12,6	;volatile
  6409  0D1D  1A0C               	btfsc	12,4	;volatile
  6410  0D1E  2D23               	goto	l7819
  6411  0D1F  1C0C               	btfss	12,0	;volatile
  6412  0D20  188D               	btfsc	13,1	;volatile
  6413  0D21  2D23               	goto	l7819
  6414  0D22  01E8               	clrf	_setRF_Main$4057
  6415  0D23                     l7819:	
  6416  0D23  0868               	movf	_setRF_Main$4057,w
  6417  0D24  0021               	movlb	1	; select bank1
  6418  0D25  13C6               	bcf	_RF1^(0+128),7
  6419  0D26  1D03               	skipz
  6420  0D27  17C6               	bsf	_RF1^(0+128),7
  6421                           
  6422                           ;RF_Control_B1.c: 67: if (RF1.Key == 1 && RF1.Learn == 0) {
  6423  0D28  1BC6               	btfsc	_RF1^(0+128),7
  6424  0D29  1B46               	btfsc	_RF1^(0+128),6
  6425  0D2A  2D2F               	goto	l1863
  6426                           
  6427                           ;RF_Control_B1.c: 68: RF1.Run = 1;
  6428  0D2B  14C7               	bsf	(_RF1^(0+128)+1),1
  6429                           
  6430                           ;RF_Control_B1.c: 69: RF_RxDisable();
  6431  0D2C  319F  2772         	fcall	_RF_RxDisable
  6432                           
  6433                           ;RF_Control_B1.c: 70: } else {
  6434  0D2E  0008               	return
  6435  0D2F                     l1863:	
  6436                           
  6437                           ;RF_Control_B1.c: 71: if (RF1.Run == 1 && RF1.Learn == 0) {
  6438  0D2F  18C7               	btfsc	(_RF1^(0+128)+1),1
  6439  0D30  1B46               	btfsc	_RF1^(0+128),6
  6440  0D31  2D3F               	goto	l7839
  6441                           
  6442                           ;RF_Control_B1.c: 72: RF1.Count++;
  6443  0D32  3001               	movlw	1
  6444  0D33  0020               	movlb	0	; select bank0
  6445  0D34  00E7               	movwf	??_setRF_Main
  6446  0D35  0867               	movf	??_setRF_Main,w
  6447  0D36  0021               	movlb	1	; select bank1
  6448  0D37  07C9               	addwf	(_RF1^(0+128)+3),f
  6449                           
  6450                           ;RF_Control_B1.c: 73: if (RF1.Count == 5) {
  6451  0D38  0849               	movf	(_RF1^(0+128)+3),w
  6452  0D39  3A05               	xorlw	5
  6453  0D3A  1D03               	skipz
  6454  0D3B  0008               	return
  6455                           
  6456                           ;RF_Control_B1.c: 74: RF1.Count = 0;
  6457  0D3C  01C9               	clrf	(_RF1^(0+128)+3)
  6458                           
  6459                           ;RF_Control_B1.c: 75: RF1.Run = 0;
  6460  0D3D  10C7               	bcf	(_RF1^(0+128)+1),1
  6461                           
  6462                           ;RF_Control_B1.c: 76: }
  6463                           ;RF_Control_B1.c: 77: } else {
  6464  0D3E  0008               	return
  6465  0D3F                     l7839:	
  6466                           
  6467                           ;RF_Control_B1.c: 78: RF1.Count = 0;
  6468  0D3F  01C9               	clrf	(_RF1^(0+128)+3)
  6469                           
  6470                           ;RF_Control_B1.c: 79: RF1.Run = 0;
  6471  0D40  10C7               	bcf	(_RF1^(0+128)+1),1
  6472                           
  6473                           ;RF_Control_B1.c: 89: if (RF1.ReceiveGO == 1) {
  6474  0D41  1CC6               	btfss	_RF1^(0+128),1
  6475  0D42  2D4C               	goto	l1868
  6476                           
  6477                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6478  0D43  10C6               	bcf	_RF1^(0+128),1
  6479                           
  6480                           ;RF_Control_B1.c: 91: CC2500_RxData();
  6481  0D44  318C  249F  318D   	fcall	_CC2500_RxData
  6482                           
  6483                           ;RF_Control_B1.c: 98: getRxData();
  6484  0D47  3197  271E         	fcall	_getRxData
  6485                           
  6486                           ;RF_Control_B1.c: 100: RF1.Run = 1;
  6487  0D49  0021               	movlb	1	; select bank1
  6488  0D4A  14C7               	bsf	(_RF1^(0+128)+1),1
  6489                           
  6490                           ;RF_Control_B1.c: 102: } else {
  6491  0D4B  0008               	return
  6492  0D4C                     l1868:	
  6493                           
  6494                           ;RF_Control_B1.c: 103: if (RF1.Learn == 0) {
  6495  0D4C  1B46               	btfsc	_RF1^(0+128),6
  6496  0D4D  2D71               	goto	l1870
  6497                           
  6498                           ;RF_Control_B1.c: 104: if (RF1.TransceiveGO == 1) {
  6499  0D4E  1D46               	btfss	_RF1^(0+128),2
  6500  0D4F  2D60               	goto	l1871
  6501                           
  6502                           ;RF_Control_B1.c: 105: RF1.TransceiveGO = 0;
  6503  0D50  1146               	bcf	_RF1^(0+128),2
  6504                           
  6505                           ;RF_Control_B1.c: 106: RF1.RxStatus = 0;
  6506  0D51  11C6               	bcf	_RF1^(0+128),3
  6507                           
  6508                           ;RF_Control_B1.c: 107: RF1.ReceiveGO = 0;
  6509  0D52  10C6               	bcf	_RF1^(0+128),1
  6510                           
  6511                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x36);
  6512  0D53  3036               	movlw	54
  6513  0D54  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6514                           
  6515                           ;RF_Control_B1.c: 110: CC2500_WriteCommand(0x3B);
  6516  0D57  303B               	movlw	59
  6517  0D58  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6518                           
  6519                           ;RF_Control_B1.c: 111: CC2500_TxData();
  6520  0D5B  318A  22A0         	fcall	_CC2500_TxData
  6521                           
  6522                           ;RF_Control_B1.c: 112: RF1.Run = 1;
  6523  0D5D  0021               	movlb	1	; select bank1
  6524  0D5E  14C7               	bsf	(_RF1^(0+128)+1),1
  6525                           
  6526                           ;RF_Control_B1.c: 113: } else {
  6527  0D5F  0008               	return
  6528  0D60                     l1871:	
  6529                           
  6530                           ;RF_Control_B1.c: 115: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6531  0D60  19C6               	btfsc	_RF1^(0+128),3
  6532  0D61  0008               	return
  6533  0D62  18C6               	btfsc	_RF1^(0+128),1
  6534  0D63  0008               	return
  6535                           
  6536                           ;RF_Control_B1.c: 116: RF1.RxStatus = 1;
  6537  0D64  15C6               	bsf	_RF1^(0+128),3
  6538                           
  6539                           ;RF_Control_B1.c: 117: CC2500_WriteCommand(0x36);
  6540  0D65  3036               	movlw	54
  6541  0D66  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6542                           
  6543                           ;RF_Control_B1.c: 118: CC2500_WriteCommand(0x3A);
  6544  0D69  303A               	movlw	58
  6545  0D6A  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6546                           
  6547                           ;RF_Control_B1.c: 119: CC2500_WriteCommand(0x34);
  6548  0D6D  3034               	movlw	52
  6549  0D6E  3191  2110         	fcall	_CC2500_WriteCommand
  6550                           
  6551                           ;RF_Control_B1.c: 121: }
  6552                           ;RF_Control_B1.c: 124: }
  6553                           ;RF_Control_B1.c: 125: } else {
  6554  0D70  0008               	return
  6555  0D71                     l1870:	
  6556                           
  6557                           ;RF_Control_B1.c: 127: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6558  0D71  19C6               	btfsc	_RF1^(0+128),3
  6559  0D72  0008               	return
  6560  0D73  18C6               	btfsc	_RF1^(0+128),1
  6561  0D74  0008               	return
  6562                           
  6563                           ;RF_Control_B1.c: 128: RF1.RxStatus = 1;
  6564  0D75  15C6               	bsf	_RF1^(0+128),3
  6565                           
  6566                           ;RF_Control_B1.c: 129: CC2500_WriteCommand(0x36);
  6567  0D76  3036               	movlw	54
  6568  0D77  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6569                           
  6570                           ;RF_Control_B1.c: 130: CC2500_WriteCommand(0x3A);
  6571  0D7A  303A               	movlw	58
  6572  0D7B  3191  2110  318D   	fcall	_CC2500_WriteCommand
  6573                           
  6574                           ;RF_Control_B1.c: 131: CC2500_WriteCommand(0x34);
  6575  0D7E  3034               	movlw	52
  6576  0D7F  3191  2110         	fcall	_CC2500_WriteCommand
  6577  0D81  0008               	return
  6578  0D82                     __end_of_setRF_Main:	
  6579                           
  6580                           	psect	text26
  6581  171E                     __ptext26:	
  6582 ;; *************** function _getRxData *****************
  6583 ;; Defined at:
  6584 ;;		line 216 in file "../src/RF_Control_B1.c"
  6585 ;; Parameters:    Size  Location     Type
  6586 ;;		None
  6587 ;; Auto vars:     Size  Location     Type
  6588 ;;		None
  6589 ;; Return value:  Size  Location     Type
  6590 ;;		None               void
  6591 ;; Registers used:
  6592 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6593 ;; Tracked objects:
  6594 ;;		On entry : 0/0
  6595 ;;		On exit  : 0/0
  6596 ;;		Unchanged: 0/0
  6597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6602 ;;Total ram usage:        0 bytes
  6603 ;; Hardware stack levels used:    1
  6604 ;; Hardware stack levels required when called:   12
  6605 ;; This function calls:
  6606 ;;		_setControl_Lights_Table
  6607 ;;		_setLog_Code
  6608 ;; This function is called by:
  6609 ;;		_setRF_Main
  6610 ;; This function uses a non-reentrant model
  6611 ;;
  6612                           
  6613                           
  6614                           ;psect for function _getRxData
  6615  171E                     _getRxData:	
  6616                           
  6617                           ;RF_Control_B1.c: 217: if (RF1.Learn == 1) {
  6618                           
  6619                           ;incstack = 0
  6620                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6621  171E  0021               	movlb	1	; select bank1
  6622  171F  1F46               	btfss	_RF1^(0+128),6
  6623  1720  2F2C               	goto	l7605
  6624                           
  6625                           ;RF_Control_B1.c: 218: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6626  1721  0022               	movlb	2	; select bank2
  6627  1722  08A0               	movf	_RF_Data^(0+256),f
  6628  1723  1D03               	skipz
  6629  1724  0008               	return
  6630  1725  0821               	movf	(_RF_Data^(0+256)+1),w
  6631  1726  3A64               	xorlw	100
  6632  1727  1D03               	skipz
  6633  1728  0008               	return
  6634                           
  6635                           ;RF_Control_B1.c: 219: {
  6636                           ;RF_Control_B1.c: 220: setLog_Code();
  6637  1729  3193  23F0         	fcall	_setLog_Code
  6638                           
  6639                           ;RF_Control_B1.c: 221: }
  6640                           ;RF_Control_B1.c: 222: } else {
  6641  172B  0008               	return
  6642  172C                     l7605:	
  6643                           
  6644                           ;RF_Control_B1.c: 223: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6645  172C  0022               	movlb	2	; select bank2
  6646  172D  08A0               	movf	_RF_Data^(0+256),f
  6647  172E  1D03               	skipz
  6648  172F  0008               	return
  6649  1730  0821               	movf	(_RF_Data^(0+256)+1),w
  6650  1731  3A02               	xorlw	2
  6651  1732  1D03               	skipz
  6652  1733  0008               	return
  6653                           
  6654                           ;RF_Control_B1.c: 224: {
  6655                           ;RF_Control_B1.c: 225: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6656  1734  082C               	movf	(_RF_Data^(0+256)+12),w
  6657  1735  3AFF               	xorlw	255
  6658  1736  1D03               	skipz
  6659  1737  2F42               	goto	l7617
  6660  1738  082D               	movf	(_RF_Data^(0+256)+13),w
  6661  1739  3AFF               	xorlw	255
  6662  173A  1D03               	skipz
  6663  173B  2F42               	goto	l7617
  6664  173C  082E               	movf	(_RF_Data^(0+256)+14),w
  6665  173D  3AFF               	xorlw	255
  6666  173E  1D03               	skipz
  6667  173F  2F42               	goto	l7617
  6668                           
  6669                           ;RF_Control_B1.c: 226: __nop();
  6670  1740  0000               	nop
  6671                           
  6672                           ;RF_Control_B1.c: 227: } else {
  6673  1741  0008               	return
  6674  1742                     l7617:	
  6675                           
  6676                           ;RF_Control_B1.c: 228: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6677  1742  0020               	movlb	0	; select bank0
  6678  1743  086F               	movf	_product,w
  6679  1744  3E0C               	addlw	12
  6680  1745  0086               	movwf	6
  6681  1746  3001               	movlw	1	; select bank2/3
  6682  1747  0087               	movwf	7
  6683  1748  0022               	movlb	2	; select bank2
  6684  1749  082C               	movf	(_RF_Data^(0+256)+12),w
  6685  174A  0601               	xorwf	1,w
  6686  174B  1D03               	skipz
  6687  174C  0008               	return
  6688  174D  0020               	movlb	0	; select bank0
  6689  174E  086F               	movf	_product,w
  6690  174F  3E0D               	addlw	13
  6691  1750  0086               	movwf	6
  6692  1751  3001               	movlw	1	; select bank2/3
  6693  1752  0087               	movwf	7
  6694  1753  0022               	movlb	2	; select bank2
  6695  1754  082D               	movf	(_RF_Data^(0+256)+13),w
  6696  1755  0601               	xorwf	1,w
  6697  1756  1D03               	skipz
  6698  1757  0008               	return
  6699  1758  0020               	movlb	0	; select bank0
  6700  1759  086F               	movf	_product,w
  6701  175A  3E0E               	addlw	14
  6702  175B  0086               	movwf	6
  6703  175C  3001               	movlw	1	; select bank2/3
  6704  175D  0087               	movwf	7
  6705  175E  0022               	movlb	2	; select bank2
  6706  175F  082E               	movf	(_RF_Data^(0+256)+14),w
  6707  1760  0601               	xorwf	1,w
  6708  1761  1D03               	skipz
  6709  1762  0008               	return
  6710                           
  6711                           ;RF_Control_B1.c: 229: setControl_Lights_Table();
  6712  1763  318B  23C9         	fcall	_setControl_Lights_Table
  6713                           
  6714                           ;RF_Control_B1.c: 236: {
  6715                           ;RF_Control_B1.c: 237: ;
  6716                           
  6717                           ;RF_Control_B1.c: 233: {
  6718                           ;RF_Control_B1.c: 234: ;
  6719                           ;RF_Control_B1.c: 235: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6720                           
  6721                           ;RF_Control_B1.c: 230: }
  6722                           ;RF_Control_B1.c: 231: }
  6723                           ;RF_Control_B1.c: 232: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6724  1765  0008               	return
  6725  1766                     __end_of_getRxData:	
  6726                           
  6727                           	psect	text27
  6728  13F0                     __ptext27:	
  6729 ;; *************** function _setLog_Code *****************
  6730 ;; Defined at:
  6731 ;;		line 247 in file "../src/RF_Control_B1.c"
  6732 ;; Parameters:    Size  Location     Type
  6733 ;;		None
  6734 ;; Auto vars:     Size  Location     Type
  6735 ;;		None
  6736 ;; Return value:  Size  Location     Type
  6737 ;;		None               void
  6738 ;; Registers used:
  6739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6740 ;; Tracked objects:
  6741 ;;		On entry : 0/0
  6742 ;;		On exit  : 0/0
  6743 ;;		Unchanged: 0/0
  6744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;Total ram usage:        1 bytes
  6750 ;; Hardware stack levels used:    1
  6751 ;; Hardware stack levels required when called:    7
  6752 ;; This function calls:
  6753 ;;		_setBuz
  6754 ;; This function is called by:
  6755 ;;		_getRxData
  6756 ;; This function uses a non-reentrant model
  6757 ;;
  6758                           
  6759                           
  6760                           ;psect for function _setLog_Code
  6761  13F0                     _setLog_Code:	
  6762                           
  6763                           ;RF_Control_B1.c: 248: product->Data[12]=RF_Data[12];
  6764                           
  6765                           ;incstack = 0
  6766                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6767  13F0  0022               	movlb	2	; select bank2
  6768  13F1  082C               	movf	(_RF_Data^(0+256)+12),w
  6769  13F2  0020               	movlb	0	; select bank0
  6770  13F3  00AD               	movwf	??_setLog_Code
  6771  13F4  086F               	movf	_product,w
  6772  13F5  3E0C               	addlw	12
  6773  13F6  0086               	movwf	6
  6774  13F7  3001               	movlw	1	; select bank2/3
  6775  13F8  0087               	movwf	7
  6776  13F9  082D               	movf	??_setLog_Code,w
  6777  13FA  0081               	movwf	1
  6778                           
  6779                           ;RF_Control_B1.c: 249: product->Data[13]=RF_Data[13];
  6780  13FB  0022               	movlb	2	; select bank2
  6781  13FC  082D               	movf	(_RF_Data^(0+256)+13),w
  6782  13FD  0020               	movlb	0	; select bank0
  6783  13FE  00AD               	movwf	??_setLog_Code
  6784  13FF  086F               	movf	_product,w
  6785  1400  3E0D               	addlw	13
  6786  1401  0086               	movwf	6
  6787  1402  3001               	movlw	1	; select bank2/3
  6788  1403  0087               	movwf	7
  6789  1404  082D               	movf	??_setLog_Code,w
  6790  1405  0081               	movwf	1
  6791                           
  6792                           ;RF_Control_B1.c: 250: product->Data[14]=RF_Data[14];
  6793  1406  0022               	movlb	2	; select bank2
  6794  1407  082E               	movf	(_RF_Data^(0+256)+14),w
  6795  1408  0020               	movlb	0	; select bank0
  6796  1409  00AD               	movwf	??_setLog_Code
  6797  140A  086F               	movf	_product,w
  6798  140B  3E0E               	addlw	14
  6799  140C  0086               	movwf	6
  6800  140D  3001               	movlw	1	; select bank2/3
  6801  140E  0087               	movwf	7
  6802  140F  082D               	movf	??_setLog_Code,w
  6803  1410  0081               	movwf	1
  6804                           
  6805                           ;RF_Control_B1.c: 251: setBuz(1, 100);
  6806  1411  3064               	movlw	100
  6807  1412  00A9               	movwf	setBuz@time
  6808  1413  3000               	movlw	0
  6809  1414  00AA               	movwf	setBuz@time+1
  6810  1415  3001               	movlw	1
  6811  1416  3189  2130  3193   	fcall	_setBuz
  6812                           
  6813                           ;RF_Control_B1.c: 252: RF1.Learn = 0;
  6814  1419  0021               	movlb	1	; select bank1
  6815  141A  1346               	bcf	_RF1^(0+128),6
  6816                           
  6817                           ;RF_Control_B1.c: 253: if (myMain.First) {
  6818  141B  1FA0               	btfss	_myMain^(0+128),7
  6819  141C  2C1F               	goto	l1906
  6820                           
  6821                           ;RF_Control_B1.c: 254: Memory.LoopSave=1;
  6822  141D  0022               	movlb	2	; select bank2
  6823  141E  1561               	bsf	(_Memory^(0+256)+36),2
  6824  141F                     l1906:	
  6825                           
  6826                           ;RF_Control_B1.c: 255: }
  6827                           ;RF_Control_B1.c: 256: Memory.Modify=1;
  6828  141F  0022               	movlb	2	; select bank2
  6829  1420  1461               	bsf	(_Memory^(0+256)+36),0
  6830  1421  0008               	return
  6831  1422                     __end_of_setLog_Code:	
  6832                           
  6833                           	psect	text28
  6834  0BC9                     __ptext28:	
  6835 ;; *************** function _setControl_Lights_Table *****************
  6836 ;; Defined at:
  6837 ;;		line 260 in file "../src/RF_Control_B1.c"
  6838 ;; Parameters:    Size  Location     Type
  6839 ;;		None
  6840 ;; Auto vars:     Size  Location     Type
  6841 ;;		None
  6842 ;; Return value:  Size  Location     Type
  6843 ;;		None               void
  6844 ;; Registers used:
  6845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6846 ;; Tracked objects:
  6847 ;;		On entry : 0/0
  6848 ;;		On exit  : 0/0
  6849 ;;		Unchanged: 0/0
  6850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;Total ram usage:        0 bytes
  6856 ;; Hardware stack levels used:    1
  6857 ;; Hardware stack levels required when called:   11
  6858 ;; This function calls:
  6859 ;;		_setBuz
  6860 ;;		_setDimmerLights
  6861 ;;		_setRFSW_AdjControl
  6862 ;;		_setRFSW_Control
  6863 ;;		_setRFSW_Status
  6864 ;;		_setSw_Status
  6865 ;;		_setTxData
  6866 ;; This function is called by:
  6867 ;;		_getRxData
  6868 ;; This function uses a non-reentrant model
  6869 ;;
  6870                           
  6871                           
  6872                           ;psect for function _setControl_Lights_Table
  6873  0BC9                     _setControl_Lights_Table:	
  6874                           
  6875                           ;RF_Control_B1.c: 261: if (RF_Data[15] == 0x00) {
  6876                           
  6877                           ;incstack = 0
  6878                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6879  0BC9  0022               	movlb	2	; select bank2
  6880  0BCA  08AF               	movf	(_RF_Data^(0+256)+15),f
  6881  0BCB  1D03               	skipz
  6882  0BCC  2C03               	goto	l7565
  6883                           
  6884                           ;RF_Control_B1.c: 263: setDimmerLights(1, 0);
  6885  0BCD  0020               	movlb	0	; select bank0
  6886  0BCE  01A3               	clrf	setDimmerLights@status
  6887  0BCF  3001               	movlw	1
  6888  0BD0  318E  2672  318B   	fcall	_setDimmerLights
  6889                           
  6890                           ;RF_Control_B1.c: 264: setRFSW_Status(1, 0);
  6891  0BD3  0020               	movlb	0	; select bank0
  6892  0BD4  01A2               	clrf	setRFSW_Status@command
  6893  0BD5  3001               	movlw	1
  6894  0BD6  319F  2729  318B   	fcall	_setRFSW_Status
  6895                           
  6896                           ;RF_Control_B1.c: 265: setSw_Status(1, 0);
  6897  0BD9  0020               	movlb	0	; select bank0
  6898  0BDA  01A2               	clrf	setSw_Status@command
  6899  0BDB  3001               	movlw	1
  6900  0BDC  319F  2745  318B   	fcall	_setSw_Status
  6901                           
  6902                           ;RF_Control_B1.c: 278: product->Data[9]=0;
  6903  0BDF  0020               	movlb	0	; select bank0
  6904  0BE0  086F               	movf	_product,w
  6905  0BE1  3E09               	addlw	9
  6906  0BE2  0086               	movwf	6
  6907  0BE3  3001               	movlw	1	; select bank2/3
  6908  0BE4  0087               	movwf	7
  6909  0BE5  0181               	clrf	1
  6910                           
  6911                           ;RF_Control_B1.c: 279: product->Data[11]=0;
  6912  0BE6  086F               	movf	_product,w
  6913  0BE7  3E0B               	addlw	11
  6914  0BE8  0086               	movwf	6
  6915  0BE9  3001               	movlw	1	; select bank2/3
  6916  0BEA  0087               	movwf	7
  6917  0BEB  0181               	clrf	1
  6918                           
  6919                           ;RF_Control_B1.c: 280: product->Data[15]=0;
  6920  0BEC  086F               	movf	_product,w
  6921  0BED  3E0F               	addlw	15
  6922  0BEE  0086               	movwf	6
  6923  0BEF  3001               	movlw	1	; select bank2/3
  6924  0BF0  0087               	movwf	7
  6925  0BF1  0181               	clrf	1
  6926                           
  6927                           ;RF_Control_B1.c: 281: product->Data[17]=0;
  6928  0BF2  086F               	movf	_product,w
  6929  0BF3  3E11               	addlw	17
  6930  0BF4  0086               	movwf	6
  6931  0BF5  3001               	movlw	1	; select bank2/3
  6932  0BF6  0087               	movwf	7
  6933  0BF7  0181               	clrf	1
  6934                           
  6935                           ;RF_Control_B1.c: 282: setBuz(1, 100);
  6936  0BF8  3064               	movlw	100
  6937  0BF9  00A9               	movwf	setBuz@time
  6938  0BFA  3000               	movlw	0
  6939  0BFB  00AA               	movwf	setBuz@time+1
  6940  0BFC  3001               	movlw	1
  6941  0BFD  3189  2130  318B   	fcall	_setBuz
  6942                           
  6943                           ;RF_Control_B1.c: 283: setTxData();
  6944  0C00  3184  24F1         	fcall	_setTxData
  6945                           
  6946                           ;RF_Control_B1.c: 284: } else if (RF_Data[15] == 0x20) {
  6947  0C02  0008               	return
  6948  0C03                     l7565:	
  6949  0C03  0022               	movlb	2	; select bank2
  6950  0C04  082F               	movf	(_RF_Data^(0+256)+15),w
  6951  0C05  3A20               	xorlw	32
  6952  0C06  1D03               	skipz
  6953  0C07  2C1E               	goto	l7571
  6954                           
  6955                           ;RF_Control_B1.c: 285: product->Data[9]=0;
  6956  0C08  0020               	movlb	0	; select bank0
  6957  0C09  086F               	movf	_product,w
  6958  0C0A  3E09               	addlw	9
  6959  0C0B  0086               	movwf	6
  6960  0C0C  3001               	movlw	1	; select bank2/3
  6961  0C0D  0087               	movwf	7
  6962  0C0E  0181               	clrf	1
  6963                           
  6964                           ;RF_Control_B1.c: 286: product->Data[11]=0;
  6965  0C0F  086F               	movf	_product,w
  6966  0C10  3E0B               	addlw	11
  6967  0C11  0086               	movwf	6
  6968  0C12  3001               	movlw	1	; select bank2/3
  6969  0C13  0087               	movwf	7
  6970  0C14  0181               	clrf	1
  6971                           
  6972                           ;RF_Control_B1.c: 287: product->Data[17]=0;
  6973  0C15  086F               	movf	_product,w
  6974  0C16  3E11               	addlw	17
  6975  0C17  0086               	movwf	6
  6976  0C18  3001               	movlw	1	; select bank2/3
  6977  0C19  0087               	movwf	7
  6978  0C1A  0181               	clrf	1
  6979                           
  6980                           ;RF_Control_B1.c: 288: setTxData();
  6981  0C1B  3184  24F1         	fcall	_setTxData
  6982                           
  6983                           ;RF_Control_B1.c: 289: }
  6984  0C1D  0008               	return
  6985  0C1E                     l7571:	
  6986                           
  6987                           ;RF_Control_B1.c: 291: else if (RF_Data[15] == 0x01) {
  6988  0C1E  0022               	movlb	2	; select bank2
  6989  0C1F  082F               	movf	(_RF_Data^(0+256)+15),w
  6990  0C20  3A01               	xorlw	1
  6991  0C21  1D03               	skipz
  6992  0C22  2C27               	goto	l7575
  6993                           
  6994                           ;RF_Control_B1.c: 292: setRFSW_Control(1);
  6995  0C23  3001               	movlw	1
  6996  0C24  3187  2707         	fcall	_setRFSW_Control
  6997                           
  6998                           ;RF_Control_B1.c: 293: }
  6999  0C26  0008               	return
  7000  0C27                     l7575:	
  7001                           
  7002                           ;RF_Control_B1.c: 295: else if (RF_Data[15] == 0x11) {
  7003  0C27  0022               	movlb	2	; select bank2
  7004  0C28  082F               	movf	(_RF_Data^(0+256)+15),w
  7005  0C29  3A11               	xorlw	17
  7006  0C2A  1D03               	skipz
  7007  0C2B  0008               	return
  7008                           
  7009                           ;RF_Control_B1.c: 296: setRFSW_AdjControl(1);
  7010  0C2C  3001               	movlw	1
  7011  0C2D  3194  24C6         	fcall	_setRFSW_AdjControl
  7012  0C2F  0008               	return
  7013  0C30                     __end_of_setControl_Lights_Table:	
  7014                           
  7015                           	psect	text29
  7016  0707                     __ptext29:	
  7017 ;; *************** function _setRFSW_Control *****************
  7018 ;; Defined at:
  7019 ;;		line 348 in file "../src/RF_Control_B1.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  sw              1    wreg     unsigned char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  sw              1   67[BANK0 ] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;		None               void
  7026 ;; Registers used:
  7027 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7036 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7037 ;;Total ram usage:        2 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    9
  7040 ;; This function calls:
  7041 ;;		_RfSWPointSelect
  7042 ;;		_setBuz
  7043 ;;		_setDelayOff_GO
  7044 ;;		_setDimmerLights_Switch
  7045 ;;		_setDimmerLights_Trigger
  7046 ;;		_setRF_DimmerLights
  7047 ;;		_setSw_Status
  7048 ;;		_setTxData
  7049 ;; This function is called by:
  7050 ;;		_setControl_Lights_Table
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054                           
  7055                           ;psect for function _setRFSW_Control
  7056  0707                     _setRFSW_Control:	
  7057                           
  7058                           ;incstack = 0
  7059                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7060                           ;setRFSW_Control@sw stored from wreg
  7061  0707  0020               	movlb	0	; select bank0
  7062  0708  00E3               	movwf	setRFSW_Control@sw
  7063                           
  7064                           ;RF_Control_B1.c: 349: RfSWPointSelect(sw);
  7065  0709  0863               	movf	setRFSW_Control@sw,w
  7066  070A  319E  26BC  3187   	fcall	_RfSWPointSelect
  7067                           
  7068                           ;RF_Control_B1.c: 350: if (RFSW->Status == 0) {
  7069  070D  087A               	movf	_RFSW,w
  7070  070E  0086               	movwf	6
  7071  070F  0187               	clrf	7
  7072  0710  1801               	btfsc	1,0
  7073  0711  2F46               	goto	l5875
  7074                           
  7075                           ;RF_Control_B1.c: 351: if (RF_Data[16] == 0x80) {
  7076  0712  0022               	movlb	2	; select bank2
  7077  0713  0830               	movf	(_RF_Data^(0+256)+16),w
  7078  0714  3A80               	xorlw	128
  7079  0715  1D03               	skipz
  7080  0716  2F24               	goto	l5865
  7081                           
  7082                           ;RF_Control_B1.c: 352: setDelayOff_GO(sw, 1, RF_Data[17]);
  7083  0717  0020               	movlb	0	; select bank0
  7084  0718  01AA               	clrf	setDelayOff_GO@command
  7085  0719  0AAA               	incf	setDelayOff_GO@command,f
  7086  071A  0022               	movlb	2	; select bank2
  7087  071B  0831               	movf	(_RF_Data^(0+256)+17),w
  7088  071C  0020               	movlb	0	; select bank0
  7089  071D  00E2               	movwf	??_setRFSW_Control
  7090  071E  0862               	movf	??_setRFSW_Control,w
  7091  071F  00AB               	movwf	setDelayOff_GO@value
  7092  0720  0863               	movf	setRFSW_Control@sw,w
  7093  0721  318B  2363  3187   	fcall	_setDelayOff_GO
  7094  0724                     l5865:	
  7095                           
  7096                           ;RF_Control_B1.c: 353: }
  7097                           ;RF_Control_B1.c: 354: RFSW->Status = 1;
  7098  0724  087A               	movf	_RFSW,w
  7099  0725  0086               	movwf	6
  7100  0726  0187               	clrf	7
  7101  0727  1401               	bsf	1,0
  7102                           
  7103                           ;RF_Control_B1.c: 355: setSw_Status(sw, 1);
  7104  0728  0020               	movlb	0	; select bank0
  7105  0729  01A2               	clrf	setSw_Status@command
  7106  072A  0AA2               	incf	setSw_Status@command,f
  7107  072B  0863               	movf	setRFSW_Control@sw,w
  7108  072C  319F  2745  3187   	fcall	_setSw_Status
  7109                           
  7110                           ;RF_Control_B1.c: 357: setDimmerLights_Trigger(sw, 1);
  7111  072F  0020               	movlb	0	; select bank0
  7112  0730  01A2               	clrf	setDimmerLights_Trigger@command
  7113  0731  0AA2               	incf	setDimmerLights_Trigger@command,f
  7114  0732  0863               	movf	setRFSW_Control@sw,w
  7115  0733  319F  27AF  3187   	fcall	_setDimmerLights_Trigger
  7116                           
  7117                           ;RF_Control_B1.c: 358: setDimmerLights_Switch(sw, 1);
  7118  0736  0020               	movlb	0	; select bank0
  7119  0737  01A2               	clrf	setDimmerLights_Switch@command
  7120  0738  0AA2               	incf	setDimmerLights_Switch@command,f
  7121  0739  0863               	movf	setRFSW_Control@sw,w
  7122  073A  319F  279F  3187   	fcall	_setDimmerLights_Switch
  7123                           
  7124                           ;RF_Control_B1.c: 360: setRF_DimmerLights(sw, RFSW->Status);
  7125  073D  087A               	movf	_RFSW,w
  7126  073E  0086               	movwf	6
  7127  073F  0187               	clrf	7
  7128  0740  3000               	movlw	0
  7129  0741  1801               	btfsc	1,0
  7130  0742  3001               	movlw	1
  7131  0743  0020               	movlb	0	; select bank0
  7132  0744  00DD               	movwf	setRF_DimmerLights@on
  7133  0745  2F82               	goto	L1
  7134  0746                     l5875:	
  7135                           ;RF_Control_B1.c: 361: } else {
  7136                           
  7137                           
  7138                           ;RF_Control_B1.c: 362: if (RF_Data[16] == 0x80) {
  7139  0746  0022               	movlb	2	; select bank2
  7140  0747  0830               	movf	(_RF_Data^(0+256)+16),w
  7141  0748  3A80               	xorlw	128
  7142  0749  1D03               	skipz
  7143  074A  2F5C               	goto	l5879
  7144                           
  7145                           ;RF_Control_B1.c: 363: setDelayOff_GO(sw, 1, RF_Data[17]);
  7146  074B  0020               	movlb	0	; select bank0
  7147  074C  01AA               	clrf	setDelayOff_GO@command
  7148  074D  0AAA               	incf	setDelayOff_GO@command,f
  7149  074E  0022               	movlb	2	; select bank2
  7150  074F  0831               	movf	(_RF_Data^(0+256)+17),w
  7151  0750  0020               	movlb	0	; select bank0
  7152  0751  00E2               	movwf	??_setRFSW_Control
  7153  0752  0862               	movf	??_setRFSW_Control,w
  7154  0753  00AB               	movwf	setDelayOff_GO@value
  7155  0754  0863               	movf	setRFSW_Control@sw,w
  7156  0755  318B  2363  3187   	fcall	_setDelayOff_GO
  7157                           
  7158                           ;RF_Control_B1.c: 364: setRF_DimmerLights(sw, 1);
  7159  0758  0020               	movlb	0	; select bank0
  7160  0759  01DD               	clrf	setRF_DimmerLights@on
  7161  075A  0ADD               	incf	setRF_DimmerLights@on,f
  7162  075B  2F82               	goto	L1
  7163  075C                     l5879:	
  7164                           ;RF_Control_B1.c: 365: } else {
  7165                           
  7166                           
  7167                           ;RF_Control_B1.c: 366: RFSW->Status = 0;
  7168  075C  087A               	movf	_RFSW,w
  7169  075D  0086               	movwf	6
  7170  075E  0187               	clrf	7
  7171  075F  1001               	bcf	1,0
  7172                           
  7173                           ;RF_Control_B1.c: 367: setSw_Status(sw, 0);
  7174  0760  0020               	movlb	0	; select bank0
  7175  0761  01A2               	clrf	setSw_Status@command
  7176  0762  0863               	movf	setRFSW_Control@sw,w
  7177  0763  319F  2745  3187   	fcall	_setSw_Status
  7178                           
  7179                           ;RF_Control_B1.c: 369: setDimmerLights_Trigger(sw, 1);
  7180  0766  0020               	movlb	0	; select bank0
  7181  0767  01A2               	clrf	setDimmerLights_Trigger@command
  7182  0768  0AA2               	incf	setDimmerLights_Trigger@command,f
  7183  0769  0863               	movf	setRFSW_Control@sw,w
  7184  076A  319F  27AF  3187   	fcall	_setDimmerLights_Trigger
  7185                           
  7186                           ;RF_Control_B1.c: 370: setDimmerLights_Switch(sw, RFSW->Status);
  7187  076D  087A               	movf	_RFSW,w
  7188  076E  0086               	movwf	6
  7189  076F  0187               	clrf	7
  7190  0770  3000               	movlw	0
  7191  0771  1801               	btfsc	1,0
  7192  0772  3001               	movlw	1
  7193  0773  0020               	movlb	0	; select bank0
  7194  0774  00A2               	movwf	setDimmerLights_Switch@command
  7195  0775  0863               	movf	setRFSW_Control@sw,w
  7196  0776  319F  279F  3187   	fcall	_setDimmerLights_Switch
  7197                           
  7198                           ;RF_Control_B1.c: 372: setDelayOff_GO(sw, 0, 0);
  7199  0779  0020               	movlb	0	; select bank0
  7200  077A  01AA               	clrf	setDelayOff_GO@command
  7201  077B  01AB               	clrf	setDelayOff_GO@value
  7202  077C  0863               	movf	setRFSW_Control@sw,w
  7203  077D  318B  2363  3187   	fcall	_setDelayOff_GO
  7204                           
  7205                           ;RF_Control_B1.c: 373: setRF_DimmerLights(sw, 0);
  7206  0780  0020               	movlb	0	; select bank0
  7207  0781  01DD               	clrf	setRF_DimmerLights@on
  7208  0782                     L1:	
  7209  0782  0863               	movf	setRFSW_Control@sw,w
  7210  0783  3187  2792  3187   	fcall	_setRF_DimmerLights
  7211                           
  7212                           ;RF_Control_B1.c: 374: }
  7213                           ;RF_Control_B1.c: 375: }
  7214                           ;RF_Control_B1.c: 376: setBuz(1, 100);
  7215  0786  3064               	movlw	100
  7216  0787  0020               	movlb	0	; select bank0
  7217  0788  00A9               	movwf	setBuz@time
  7218  0789  3000               	movlw	0
  7219  078A  00AA               	movwf	setBuz@time+1
  7220  078B  3001               	movlw	1
  7221  078C  3189  2130  3187   	fcall	_setBuz
  7222                           
  7223                           ;RF_Control_B1.c: 377: setTxData();
  7224  078F  3184  24F1         	fcall	_setTxData
  7225  0791  0008               	return
  7226  0792                     __end_of_setRFSW_Control:	
  7227                           
  7228                           	psect	text30
  7229  0B63                     __ptext30:	
  7230 ;; *************** function _setDelayOff_GO *****************
  7231 ;; Defined at:
  7232 ;;		line 86 in file "../src/DelayOff_B1.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;  sw              1    wreg     unsigned char 
  7235 ;;  command         1   10[BANK0 ] unsigned char 
  7236 ;;  value           1   11[BANK0 ] unsigned char 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  sw              1   14[BANK0 ] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;		None               void
  7241 ;; Registers used:
  7242 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7248 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7250 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7251 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7252 ;;Total ram usage:        5 bytes
  7253 ;; Hardware stack levels used:    1
  7254 ;; Hardware stack levels required when called:    7
  7255 ;; This function calls:
  7256 ;;		_DelayOffPointSelect
  7257 ;;		_DelayTimejudge
  7258 ;; This function is called by:
  7259 ;;		_setRFSW_Control
  7260 ;;		_Sw_DimmerOffFunc
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _setDelayOff_GO
  7266  0B63                     _setDelayOff_GO:	
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7270                           ;setDelayOff_GO@sw stored from wreg
  7271  0B63  0020               	movlb	0	; select bank0
  7272  0B64  00AE               	movwf	setDelayOff_GO@sw
  7273                           
  7274                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7275  0B65  082E               	movf	setDelayOff_GO@sw,w
  7276  0B66  319E  269B  318B   	fcall	_DelayOffPointSelect
  7277                           
  7278                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7279  0B69  0878               	movf	_DelayOff,w
  7280  0B6A  0086               	movwf	6
  7281  0B6B  3001               	movlw	1	; select bank2/3
  7282  0B6C  0087               	movwf	7
  7283  0B6D  1C01               	btfss	1,0
  7284  0B6E  0008               	return
  7285                           
  7286                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7287  0B6F  0020               	movlb	0	; select bank0
  7288  0B70  082A               	movf	setDelayOff_GO@command,w
  7289  0B71  3A01               	xorlw	1
  7290  0B72  3000               	movlw	0
  7291  0B73  1903               	skipnz
  7292  0B74  3001               	movlw	1
  7293  0B75  00AC               	movwf	??_setDelayOff_GO
  7294  0B76  0878               	movf	_DelayOff,w
  7295  0B77  0086               	movwf	6
  7296  0B78  3001               	movlw	1	; select bank2/3
  7297  0B79  0087               	movwf	7
  7298  0B7A  0DAC               	rlf	??_setDelayOff_GO,f
  7299  0B7B  0801               	movf	1,w
  7300  0B7C  062C               	xorwf	??_setDelayOff_GO,w
  7301  0B7D  39FD               	andlw	-3
  7302  0B7E  062C               	xorwf	??_setDelayOff_GO,w
  7303  0B7F  0081               	movwf	1
  7304                           
  7305                           ;DelayOff_B1.c: 90: if (command == 1) {
  7306  0B80  082A               	movf	setDelayOff_GO@command,w
  7307  0B81  3A01               	xorlw	1
  7308  0B82  1D03               	skipz
  7309  0B83  2BAE               	goto	l5677
  7310                           
  7311                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7312  0B84  082B               	movf	setDelayOff_GO@value,w
  7313  0B85  3193  233D  318B   	fcall	_DelayTimejudge
  7314  0B88  0020               	movlb	0	; select bank0
  7315  0B89  00AC               	movwf	??_setDelayOff_GO
  7316  0B8A  0A78               	incf	_DelayOff,w
  7317  0B8B  0086               	movwf	6
  7318  0B8C  3001               	movlw	1	; select bank2/3
  7319  0B8D  0087               	movwf	7
  7320  0B8E  082C               	movf	??_setDelayOff_GO,w
  7321  0B8F  0081               	movwf	1
  7322                           
  7323                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7324  0B90  300F               	movlw	15
  7325  0B91  052B               	andwf	setDelayOff_GO@value,w
  7326  0B92  00AC               	movwf	??_setDelayOff_GO
  7327  0B93  082C               	movf	??_setDelayOff_GO,w
  7328  0B94  3A05               	xorlw	5
  7329  0B95  1903               	skipnz
  7330  0B96  2B9B               	goto	l5671
  7331  0B97  082B               	movf	setDelayOff_GO@value,w
  7332  0B98  390F               	andlw	15
  7333  0B99  1D03               	btfss	3,2
  7334  0B9A  2BA1               	goto	l5675
  7335  0B9B                     l5671:	
  7336  0B9B  3026               	movlw	38
  7337  0B9C  022B               	subwf	setDelayOff_GO@value,w
  7338  0B9D  1803               	skipnc
  7339  0B9E  2BA1               	goto	l5675
  7340                           
  7341                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7342  0B9F  082B               	movf	setDelayOff_GO@value,w
  7343  0BA0  2BA2               	goto	L2
  7344  0BA1                     l5675:	
  7345                           ;DelayOff_B1.c: 94: } else {
  7346                           
  7347                           
  7348                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7349  0BA1  3005               	movlw	5
  7350  0BA2                     L2:	
  7351  0BA2  00AC               	movwf	??_setDelayOff_GO
  7352  0BA3  082E               	movf	setDelayOff_GO@sw,w
  7353  0BA4  3E1A               	addlw	26
  7354  0BA5  076F               	addwf	_product,w
  7355  0BA6  00AD               	movwf	??_setDelayOff_GO+1
  7356  0BA7  082D               	movf	??_setDelayOff_GO+1,w
  7357  0BA8  0086               	movwf	6
  7358  0BA9  3001               	movlw	1	; select bank2/3
  7359  0BAA  0087               	movwf	7
  7360  0BAB  082C               	movf	??_setDelayOff_GO,w
  7361  0BAC  0081               	movwf	1
  7362                           
  7363                           ;DelayOff_B1.c: 96: }
  7364                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7365  0BAD  2BBA               	goto	l5681
  7366  0BAE                     l5677:	
  7367  0BAE  08AA               	movf	setDelayOff_GO@command,f
  7368  0BAF  1D03               	skipz
  7369  0BB0  2BBA               	goto	l5681
  7370                           
  7371                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7372  0BB1  082E               	movf	setDelayOff_GO@sw,w
  7373  0BB2  3E1A               	addlw	26
  7374  0BB3  076F               	addwf	_product,w
  7375  0BB4  00AC               	movwf	??_setDelayOff_GO
  7376  0BB5  082C               	movf	??_setDelayOff_GO,w
  7377  0BB6  0086               	movwf	6
  7378  0BB7  3001               	movlw	1	; select bank2/3
  7379  0BB8  0087               	movwf	7
  7380  0BB9  0181               	clrf	1
  7381  0BBA                     l5681:	
  7382                           
  7383                           ;DelayOff_B1.c: 99: }
  7384                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7385  0BBA  0878               	movf	_DelayOff,w
  7386  0BBB  3E02               	addlw	2
  7387  0BBC  0086               	movwf	6
  7388  0BBD  3001               	movlw	1	; select bank2/3
  7389  0BBE  0087               	movwf	7
  7390  0BBF  3000               	movlw	0
  7391  0BC0  3FC0               	movwi [0]fsr1
  7392  0BC1  3FC1               	movwi [1]fsr1
  7393                           
  7394                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7395  0BC2  0878               	movf	_DelayOff,w
  7396  0BC3  3E04               	addlw	4
  7397  0BC4  0086               	movwf	6
  7398  0BC5  3001               	movlw	1	; select bank2/3
  7399  0BC6  0087               	movwf	7
  7400  0BC7  0181               	clrf	1
  7401  0BC8  0008               	return
  7402  0BC9                     __end_of_setDelayOff_GO:	
  7403                           
  7404                           	psect	text31
  7405  133D                     __ptext31:	
  7406 ;; *************** function _DelayTimejudge *****************
  7407 ;; Defined at:
  7408 ;;		line 106 in file "../src/DelayOff_B1.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  value           1    wreg     unsigned char 
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;  value           1    9[BANK0 ] unsigned char 
  7413 ;;  k               1    8[BANK0 ] unsigned char 
  7414 ;;  j               1    7[BANK0 ] unsigned char 
  7415 ;;  i               1    6[BANK0 ] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      unsigned char 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, status,0, pclath, cstack
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7429 ;;Total ram usage:        6 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    6
  7432 ;; This function calls:
  7433 ;;		___bmul
  7434 ;; This function is called by:
  7435 ;;		_setDelayOff_GO
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function _DelayTimejudge
  7441  133D                     _DelayTimejudge:	
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7445                           ;DelayTimejudge@value stored from wreg
  7446  133D  0020               	movlb	0	; select bank0
  7447  133E  00A9               	movwf	DelayTimejudge@value
  7448                           
  7449                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7450  133F  3005               	movlw	5
  7451  1340  00A4               	movwf	??_DelayTimejudge
  7452  1341  0824               	movf	??_DelayTimejudge,w
  7453  1342  00A6               	movwf	DelayTimejudge@i
  7454  1343  01A7               	clrf	DelayTimejudge@j
  7455  1344  01A8               	clrf	DelayTimejudge@k
  7456                           
  7457                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7458  1345  3031               	movlw	49
  7459  1346  0229               	subwf	DelayTimejudge@value,w
  7460  1347  1803               	skipnc
  7461  1348  2B65               	goto	l5469
  7462                           
  7463                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7464  1349  0829               	movf	DelayTimejudge@value,w
  7465  134A  390F               	andlw	15
  7466  134B  00A4               	movwf	??_DelayTimejudge
  7467  134C  0824               	movf	??_DelayTimejudge,w
  7468  134D  00A7               	movwf	DelayTimejudge@j
  7469                           
  7470                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7471  134E  0829               	movf	DelayTimejudge@value,w
  7472  134F  00A4               	movwf	??_DelayTimejudge
  7473  1350  3004               	movlw	4
  7474  1351                     u4175:	
  7475  1351  36A4               	lsrf	??_DelayTimejudge,f
  7476  1352  0B89               	decfsz	9,f
  7477  1353  2B51               	goto	u4175
  7478  1354  0824               	movf	??_DelayTimejudge,w
  7479  1355  390F               	andlw	15
  7480  1356  00A5               	movwf	??_DelayTimejudge+1
  7481  1357  0825               	movf	??_DelayTimejudge+1,w
  7482  1358  00A8               	movwf	DelayTimejudge@k
  7483                           
  7484                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7485  1359  300A               	movlw	10
  7486  135A  00A4               	movwf	??_DelayTimejudge
  7487  135B  0824               	movf	??_DelayTimejudge,w
  7488  135C  00A0               	movwf	___bmul@multiplicand
  7489  135D  0828               	movf	DelayTimejudge@k,w
  7490  135E  3190  207C         	fcall	___bmul
  7491  1360  0020               	movlb	0	; select bank0
  7492  1361  0727               	addwf	DelayTimejudge@j,w
  7493  1362  00A5               	movwf	??_DelayTimejudge+1
  7494  1363  0825               	movf	??_DelayTimejudge+1,w
  7495  1364  00A6               	movwf	DelayTimejudge@i
  7496  1365                     l5469:	
  7497                           
  7498                           ;DelayOff_B1.c: 112: }
  7499                           ;DelayOff_B1.c: 133: return i;
  7500  1365  0826               	movf	DelayTimejudge@i,w
  7501  1366  0008               	return
  7502  1367                     __end_of_DelayTimejudge:	
  7503                           
  7504                           	psect	text32
  7505  107C                     __ptext32:	
  7506 ;; *************** function ___bmul *****************
  7507 ;; Defined at:
  7508 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  multiplier      1    wreg     unsigned char 
  7511 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7514 ;;  product         1    2[BANK0 ] unsigned char 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      unsigned char 
  7517 ;; Registers used:
  7518 ;;		wreg, status,2, status,0
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7527 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7528 ;;Total ram usage:        4 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    5
  7531 ;; This function calls:
  7532 ;;		Nothing
  7533 ;; This function is called by:
  7534 ;;		_DelayTimejudge
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           
  7539                           ;psect for function ___bmul
  7540  107C                     ___bmul:	
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7544                           ;___bmul@multiplier stored from wreg
  7545  107C  0020               	movlb	0	; select bank0
  7546  107D  00A3               	movwf	___bmul@multiplier
  7547  107E  01A2               	clrf	___bmul@product
  7548  107F                     l5439:	
  7549  107F  1C23               	btfss	___bmul@multiplier,0
  7550  1080  2885               	goto	l5443
  7551  1081  0820               	movf	___bmul@multiplicand,w
  7552  1082  00A1               	movwf	??___bmul
  7553  1083  0821               	movf	??___bmul,w
  7554  1084  07A2               	addwf	___bmul@product,f
  7555  1085                     l5443:	
  7556  1085  1003               	clrc
  7557  1086  0DA0               	rlf	___bmul@multiplicand,f
  7558  1087  1003               	clrc
  7559  1088  0CA3               	rrf	___bmul@multiplier,f
  7560  1089  08A3               	movf	___bmul@multiplier,f
  7561  108A  1D03               	skipz
  7562  108B  287F               	goto	l5439
  7563  108C  0822               	movf	___bmul@product,w
  7564  108D  0008               	return
  7565  108E                     __end_of___bmul:	
  7566                           
  7567                           	psect	text33
  7568  14C6                     __ptext33:	
  7569 ;; *************** function _setRFSW_AdjControl *****************
  7570 ;; Defined at:
  7571 ;;		line 381 in file "../src/RF_Control_B1.c"
  7572 ;; Parameters:    Size  Location     Type
  7573 ;;  sw              1    wreg     unsigned char 
  7574 ;; Auto vars:     Size  Location     Type
  7575 ;;  sw              1   70[BANK0 ] unsigned char 
  7576 ;; Return value:  Size  Location     Type
  7577 ;;		None               void
  7578 ;; Registers used:
  7579 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7580 ;; Tracked objects:
  7581 ;;		On entry : 0/0
  7582 ;;		On exit  : 0/0
  7583 ;;		Unchanged: 0/0
  7584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7587 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7588 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;Total ram usage:        3 bytes
  7590 ;; Hardware stack levels used:    1
  7591 ;; Hardware stack levels required when called:   10
  7592 ;; This function calls:
  7593 ;;		_RfSWPointSelect
  7594 ;;		_setRF_DimmerValue
  7595 ;;		_setTxData
  7596 ;; This function is called by:
  7597 ;;		_setControl_Lights_Table
  7598 ;; This function uses a non-reentrant model
  7599 ;;
  7600                           
  7601                           
  7602                           ;psect for function _setRFSW_AdjControl
  7603  14C6                     _setRFSW_AdjControl:	
  7604                           
  7605                           ;incstack = 0
  7606                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7607                           ;setRFSW_AdjControl@sw stored from wreg
  7608  14C6  0020               	movlb	0	; select bank0
  7609  14C7  00E6               	movwf	setRFSW_AdjControl@sw
  7610                           
  7611                           ;RF_Control_B1.c: 382: RfSWPointSelect(sw);
  7612  14C8  0866               	movf	setRFSW_AdjControl@sw,w
  7613  14C9  319E  26BC  3194   	fcall	_RfSWPointSelect
  7614                           
  7615                           ;RF_Control_B1.c: 383: if (RFSW->Status == 1) {
  7616  14CC  087A               	movf	_RFSW,w
  7617  14CD  0086               	movwf	6
  7618  14CE  0187               	clrf	7
  7619  14CF  1C01               	btfss	1,0
  7620  14D0  2CD9               	goto	l5903
  7621                           
  7622                           ;RF_Control_B1.c: 384: Memory.Modify=1;
  7623  14D1  0022               	movlb	2	; select bank2
  7624  14D2  1461               	bsf	(_Memory^(0+256)+36),0
  7625                           
  7626                           ;RF_Control_B1.c: 385: setRF_DimmerValue(sw);
  7627  14D3  0020               	movlb	0	; select bank0
  7628  14D4  0866               	movf	setRFSW_AdjControl@sw,w
  7629  14D5  3194  2422  3194   	fcall	_setRF_DimmerValue
  7630                           
  7631                           ;RF_Control_B1.c: 386: } else {
  7632  14D8  2CEB               	goto	l1933
  7633  14D9                     l5903:	
  7634                           
  7635                           ;RF_Control_B1.c: 387: product->Data[9]=product->Data[20 + sw];
  7636  14D9  0020               	movlb	0	; select bank0
  7637  14DA  0866               	movf	setRFSW_AdjControl@sw,w
  7638  14DB  3E14               	addlw	20
  7639  14DC  076F               	addwf	_product,w
  7640  14DD  00E4               	movwf	??_setRFSW_AdjControl
  7641  14DE  0864               	movf	??_setRFSW_AdjControl,w
  7642  14DF  0086               	movwf	6
  7643  14E0  3001               	movlw	1	; select bank2/3
  7644  14E1  0087               	movwf	7
  7645  14E2  0801               	movf	1,w
  7646  14E3  00E5               	movwf	??_setRFSW_AdjControl+1
  7647  14E4  086F               	movf	_product,w
  7648  14E5  3E09               	addlw	9
  7649  14E6  0086               	movwf	6
  7650  14E7  3001               	movlw	1	; select bank2/3
  7651  14E8  0087               	movwf	7
  7652  14E9  0865               	movf	??_setRFSW_AdjControl+1,w
  7653  14EA  0081               	movwf	1
  7654  14EB                     l1933:	
  7655                           
  7656                           ;RF_Control_B1.c: 388: }
  7657                           ;RF_Control_B1.c: 389: product->Data[17]=product->Data[26 + sw];
  7658  14EB  0020               	movlb	0	; select bank0
  7659  14EC  0866               	movf	setRFSW_AdjControl@sw,w
  7660  14ED  3E1A               	addlw	26
  7661  14EE  076F               	addwf	_product,w
  7662  14EF  00E4               	movwf	??_setRFSW_AdjControl
  7663  14F0  0864               	movf	??_setRFSW_AdjControl,w
  7664  14F1  0086               	movwf	6
  7665  14F2  3001               	movlw	1	; select bank2/3
  7666  14F3  0087               	movwf	7
  7667  14F4  0801               	movf	1,w
  7668  14F5  00E5               	movwf	??_setRFSW_AdjControl+1
  7669  14F6  086F               	movf	_product,w
  7670  14F7  3E11               	addlw	17
  7671  14F8  0086               	movwf	6
  7672  14F9  3001               	movlw	1	; select bank2/3
  7673  14FA  0087               	movwf	7
  7674  14FB  0865               	movf	??_setRFSW_AdjControl+1,w
  7675  14FC  0081               	movwf	1
  7676                           
  7677                           ;RF_Control_B1.c: 390: setTxData();
  7678  14FD  3184  24F1         	fcall	_setTxData
  7679  14FF  0008               	return
  7680  1500                     __end_of_setRFSW_AdjControl:	
  7681                           
  7682                           	psect	text34
  7683  1422                     __ptext34:	
  7684 ;; *************** function _setRF_DimmerValue *****************
  7685 ;; Defined at:
  7686 ;;		line 401 in file "../src/RF_Control_B1.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  lights          1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  lights          1   67[BANK0 ] unsigned char 
  7691 ;; Return value:  Size  Location     Type
  7692 ;;		None               void
  7693 ;; Registers used:
  7694 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7695 ;; Tracked objects:
  7696 ;;		On entry : 0/0
  7697 ;;		On exit  : 0/0
  7698 ;;		Unchanged: 0/0
  7699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;Total ram usage:        3 bytes
  7705 ;; Hardware stack levels used:    1
  7706 ;; Hardware stack levels required when called:    9
  7707 ;; This function calls:
  7708 ;;		_setDimmerLights_AdjRF
  7709 ;; This function is called by:
  7710 ;;		_setRFSW_AdjControl
  7711 ;; This function uses a non-reentrant model
  7712 ;;
  7713                           
  7714                           
  7715                           ;psect for function _setRF_DimmerValue
  7716  1422                     _setRF_DimmerValue:	
  7717                           
  7718                           ;incstack = 0
  7719                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7720                           ;setRF_DimmerValue@lights stored from wreg
  7721  1422  0020               	movlb	0	; select bank0
  7722  1423  00E3               	movwf	setRF_DimmerValue@lights
  7723                           
  7724                           ;RF_Control_B1.c: 402: if (RF_Data[9] > 0x64) {
  7725  1424  3065               	movlw	101
  7726  1425  0022               	movlb	2	; select bank2
  7727  1426  0229               	subwf	(_RF_Data^(0+256)+9),w
  7728  1427  1C03               	skipc
  7729  1428  2C2F               	goto	l5745
  7730                           
  7731                           ;RF_Control_B1.c: 403: RF_Data[9] = 0x64;
  7732  1429  3064               	movlw	100
  7733  142A  0020               	movlb	0	; select bank0
  7734  142B  00E1               	movwf	??_setRF_DimmerValue
  7735  142C  0861               	movf	??_setRF_DimmerValue,w
  7736  142D  0022               	movlb	2	; select bank2
  7737  142E  00A9               	movwf	(_RF_Data^(0+256)+9)
  7738  142F                     l5745:	
  7739                           
  7740                           ;RF_Control_B1.c: 404: }
  7741                           ;RF_Control_B1.c: 405: product->Data[9]=RF_Data[9];
  7742  142F  0829               	movf	(_RF_Data^(0+256)+9),w
  7743  1430  0020               	movlb	0	; select bank0
  7744  1431  00E1               	movwf	??_setRF_DimmerValue
  7745  1432  086F               	movf	_product,w
  7746  1433  3E09               	addlw	9
  7747  1434  0086               	movwf	6
  7748  1435  3001               	movlw	1	; select bank2/3
  7749  1436  0087               	movwf	7
  7750  1437  0861               	movf	??_setRF_DimmerValue,w
  7751  1438  0081               	movwf	1
  7752                           
  7753                           ;RF_Control_B1.c: 406: product->Data[11]=lights;
  7754  1439  0863               	movf	setRF_DimmerValue@lights,w
  7755  143A  00E1               	movwf	??_setRF_DimmerValue
  7756  143B  086F               	movf	_product,w
  7757  143C  3E0B               	addlw	11
  7758  143D  0086               	movwf	6
  7759  143E  3001               	movlw	1	; select bank2/3
  7760  143F  0087               	movwf	7
  7761  1440  0861               	movf	??_setRF_DimmerValue,w
  7762  1441  0081               	movwf	1
  7763                           
  7764                           ;RF_Control_B1.c: 407: product->Data[(20 + lights)]=product->Data[9];
  7765  1442  086F               	movf	_product,w
  7766  1443  3E09               	addlw	9
  7767  1444  0086               	movwf	6
  7768  1445  3001               	movlw	1	; select bank2/3
  7769  1446  0087               	movwf	7
  7770  1447  0801               	movf	1,w
  7771  1448  00E1               	movwf	??_setRF_DimmerValue
  7772  1449  0863               	movf	setRF_DimmerValue@lights,w
  7773  144A  3E14               	addlw	20
  7774  144B  076F               	addwf	_product,w
  7775  144C  00E2               	movwf	??_setRF_DimmerValue+1
  7776  144D  0862               	movf	??_setRF_DimmerValue+1,w
  7777  144E  0086               	movwf	6
  7778  144F  3001               	movlw	1	; select bank2/3
  7779  1450  0087               	movwf	7
  7780  1451  0861               	movf	??_setRF_DimmerValue,w
  7781  1452  0081               	movwf	1
  7782                           
  7783                           ;RF_Control_B1.c: 408: setDimmerLights_AdjRF(lights);
  7784  1453  0863               	movf	setRF_DimmerValue@lights,w
  7785  1454  3192  22A3         	fcall	_setDimmerLights_AdjRF
  7786  1456  0008               	return
  7787  1457                     __end_of_setRF_DimmerValue:	
  7788                           
  7789                           	psect	text35
  7790  12A3                     __ptext35:	
  7791 ;; *************** function _setDimmerLights_AdjRF *****************
  7792 ;; Defined at:
  7793 ;;		line 679 in file "../src/Dimmer_B1.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  lights          1    wreg     unsigned char 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  lights          1   64[BANK0 ] unsigned char 
  7798 ;; Return value:  Size  Location     Type
  7799 ;;		None               void
  7800 ;; Registers used:
  7801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7802 ;; Tracked objects:
  7803 ;;		On entry : 0/0
  7804 ;;		On exit  : 0/0
  7805 ;;		Unchanged: 0/0
  7806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;Total ram usage:        2 bytes
  7812 ;; Hardware stack levels used:    1
  7813 ;; Hardware stack levels required when called:    8
  7814 ;; This function calls:
  7815 ;;		_DimmerLightsPointSelect
  7816 ;;		_getPercentValue
  7817 ;; This function is called by:
  7818 ;;		_setRF_DimmerValue
  7819 ;; This function uses a non-reentrant model
  7820 ;;
  7821                           
  7822                           
  7823                           ;psect for function _setDimmerLights_AdjRF
  7824  12A3                     _setDimmerLights_AdjRF:	
  7825                           
  7826                           ;incstack = 0
  7827                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7828                           ;setDimmerLights_AdjRF@lights stored from wreg
  7829  12A3  0020               	movlb	0	; select bank0
  7830  12A4  00E0               	movwf	setDimmerLights_AdjRF@lights
  7831                           
  7832                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7833  12A5  0860               	movf	setDimmerLights_AdjRF@lights,w
  7834  12A6  319E  26B1  3192   	fcall	_DimmerLightsPointSelect
  7835                           
  7836                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7837  12A9  0020               	movlb	0	; select bank0
  7838  12AA  086D               	movf	_DimmerLights,w
  7839  12AB  0086               	movwf	6
  7840  12AC  3001               	movlw	1	; select bank2/3
  7841  12AD  0087               	movwf	7
  7842  12AE  1501               	bsf	1,2
  7843                           
  7844                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7845  12AF  086D               	movf	_DimmerLights,w
  7846  12B0  0086               	movwf	6
  7847  12B1  3001               	movlw	1	; select bank2/3
  7848  12B2  0087               	movwf	7
  7849  12B3  1481               	bsf	1,1
  7850                           
  7851                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7852  12B4  086F               	movf	_product,w
  7853  12B5  3E09               	addlw	9
  7854  12B6  0086               	movwf	6
  7855  12B7  3001               	movlw	1	; select bank2/3
  7856  12B8  0087               	movwf	7
  7857  12B9  0801               	movf	1,w
  7858  12BA  3189  21E4         	fcall	_getPercentValue
  7859  12BC  0020               	movlb	0	; select bank0
  7860  12BD  00DF               	movwf	??_setDimmerLights_AdjRF
  7861  12BE  086D               	movf	_DimmerLights,w
  7862  12BF  3E05               	addlw	5
  7863  12C0  0086               	movwf	6
  7864  12C1  3001               	movlw	1	; select bank2/3
  7865  12C2  0087               	movwf	7
  7866  12C3  085F               	movf	??_setDimmerLights_AdjRF,w
  7867  12C4  0081               	movwf	1
  7868  12C5  0008               	return
  7869  12C6                     __end_of_setDimmerLights_AdjRF:	
  7870                           
  7871                           	psect	text36
  7872  09E4                     __ptext36:	
  7873 ;; *************** function _getPercentValue *****************
  7874 ;; Defined at:
  7875 ;;		line 752 in file "../src/Dimmer_B1.c"
  7876 ;; Parameters:    Size  Location     Type
  7877 ;;  value           1    wreg     unsigned char 
  7878 ;; Auto vars:     Size  Location     Type
  7879 ;;  value           1   59[BANK0 ] unsigned char 
  7880 ;;  i               3   60[BANK0 ] float 
  7881 ;; Return value:  Size  Location     Type
  7882 ;;                  1    wreg      unsigned char 
  7883 ;; Registers used:
  7884 ;;		wreg, status,2, status,0, pclath, cstack
  7885 ;; Tracked objects:
  7886 ;;		On entry : 0/0
  7887 ;;		On exit  : 0/0
  7888 ;;		Unchanged: 0/0
  7889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;Total ram usage:        6 bytes
  7895 ;; Hardware stack levels used:    1
  7896 ;; Hardware stack levels required when called:    7
  7897 ;; This function calls:
  7898 ;;		___awtoft
  7899 ;;		___ftadd
  7900 ;;		___ftdiv
  7901 ;;		___ftmul
  7902 ;;		___fttol
  7903 ;; This function is called by:
  7904 ;;		_setDimmerLights_AdjRF
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _getPercentValue
  7910  09E4                     _getPercentValue:	
  7911                           
  7912                           ;incstack = 0
  7913                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7914                           ;getPercentValue@value stored from wreg
  7915  09E4  0020               	movlb	0	; select bank0
  7916  09E5  00DB               	movwf	getPercentValue@value
  7917                           
  7918                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7919  09E6  3000               	movlw	0
  7920  09E7  00DC               	movwf	getPercentValue@i
  7921  09E8  30E0               	movlw	224
  7922  09E9  00DD               	movwf	getPercentValue@i+1
  7923  09EA  3041               	movlw	65
  7924  09EB  00DE               	movwf	getPercentValue@i+2
  7925                           
  7926                           ;Dimmer_B1.c: 755: i /= 100;
  7927  09EC  3000               	movlw	0
  7928  09ED  00AE               	movwf	___ftdiv@f2
  7929  09EE  30C8               	movlw	200
  7930  09EF  00AF               	movwf	___ftdiv@f2+1
  7931  09F0  3042               	movlw	66
  7932  09F1  00B0               	movwf	___ftdiv@f2+2
  7933  09F2  085C               	movf	getPercentValue@i,w
  7934  09F3  00B1               	movwf	___ftdiv@f1
  7935  09F4  085D               	movf	getPercentValue@i+1,w
  7936  09F5  00B2               	movwf	___ftdiv@f1+1
  7937  09F6  085E               	movf	getPercentValue@i+2,w
  7938  09F7  00B3               	movwf	___ftdiv@f1+2
  7939  09F8  3186  265E  3189   	fcall	___ftdiv
  7940  09FB  0020               	movlb	0	; select bank0
  7941  09FC  082E               	movf	?___ftdiv,w
  7942  09FD  00DC               	movwf	getPercentValue@i
  7943  09FE  082F               	movf	?___ftdiv+1,w
  7944  09FF  00DD               	movwf	getPercentValue@i+1
  7945  0A00  0830               	movf	?___ftdiv+2,w
  7946  0A01  00DE               	movwf	getPercentValue@i+2
  7947                           
  7948                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7949  0A02  085B               	movf	getPercentValue@value,w
  7950  0A03  00D9               	movwf	??_getPercentValue
  7951  0A04  01DA               	clrf	??_getPercentValue+1
  7952  0A05  09D9               	comf	??_getPercentValue,f
  7953  0A06  09DA               	comf	??_getPercentValue+1,f
  7954  0A07  0AD9               	incf	??_getPercentValue,f
  7955  0A08  1903               	skipnz
  7956  0A09  0ADA               	incf	??_getPercentValue+1,f
  7957  0A0A  0859               	movf	??_getPercentValue,w
  7958  0A0B  3E64               	addlw	100
  7959  0A0C  00A8               	movwf	___awtoft@c
  7960  0A0D  3000               	movlw	0
  7961  0A0E  3D5A               	addwfc	??_getPercentValue+1,w
  7962  0A0F  00A9               	movwf	___awtoft@c+1
  7963  0A10  3192  221A  3189   	fcall	___awtoft
  7964  0A13  0020               	movlb	0	; select bank0
  7965  0A14  0828               	movf	?___awtoft,w
  7966  0A15  00B1               	movwf	___ftmul@f2
  7967  0A16  0829               	movf	?___awtoft+1,w
  7968  0A17  00B2               	movwf	___ftmul@f2+1
  7969  0A18  082A               	movf	?___awtoft+2,w
  7970  0A19  00B3               	movwf	___ftmul@f2+2
  7971  0A1A  085C               	movf	getPercentValue@i,w
  7972  0A1B  00AE               	movwf	___ftmul@f1
  7973  0A1C  085D               	movf	getPercentValue@i+1,w
  7974  0A1D  00AF               	movwf	___ftmul@f1+1
  7975  0A1E  085E               	movf	getPercentValue@i+2,w
  7976  0A1F  00B0               	movwf	___ftmul@f1+2
  7977  0A20  3185  25AA  3189   	fcall	___ftmul
  7978  0A23  0020               	movlb	0	; select bank0
  7979  0A24  082E               	movf	?___ftmul,w
  7980  0A25  00C1               	movwf	___ftadd@f2
  7981  0A26  082F               	movf	?___ftmul+1,w
  7982  0A27  00C2               	movwf	___ftadd@f2+1
  7983  0A28  0830               	movf	?___ftmul+2,w
  7984  0A29  00C3               	movwf	___ftadd@f2+2
  7985  0A2A  3000               	movlw	0
  7986  0A2B  00BE               	movwf	___ftadd@f1
  7987  0A2C  3000               	movlw	0
  7988  0A2D  00BF               	movwf	___ftadd@f1+1
  7989  0A2E  3042               	movlw	66
  7990  0A2F  00C0               	movwf	___ftadd@f1+2
  7991  0A30  3183  2334  3189   	fcall	___ftadd
  7992  0A33  0020               	movlb	0	; select bank0
  7993  0A34  083E               	movf	?___ftadd,w
  7994  0A35  00CB               	movwf	___fttol@f1
  7995  0A36  083F               	movf	?___ftadd+1,w
  7996  0A37  00CC               	movwf	___fttol@f1+1
  7997  0A38  0840               	movf	?___ftadd+2,w
  7998  0A39  00CD               	movwf	___fttol@f1+2
  7999  0A3A  318F  2779         	fcall	___fttol
  8000  0A3C  0020               	movlb	0	; select bank0
  8001  0A3D  084B               	movf	?___fttol,w
  8002  0A3E  0008               	return
  8003  0A3F                     __end_of_getPercentValue:	
  8004                           
  8005                           	psect	text37
  8006  05AA                     __ptext37:	
  8007 ;; *************** function ___ftmul *****************
  8008 ;; Defined at:
  8009 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  f1              3   14[BANK0 ] float 
  8012 ;;  f2              3   17[BANK0 ] float 
  8013 ;; Auto vars:     Size  Location     Type
  8014 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8015 ;;  sign            1   29[BANK0 ] unsigned char 
  8016 ;;  cntr            1   28[BANK0 ] unsigned char 
  8017 ;;  exp             1   24[BANK0 ] unsigned char 
  8018 ;; Return value:  Size  Location     Type
  8019 ;;                  3   14[BANK0 ] float 
  8020 ;; Registers used:
  8021 ;;		wreg, status,2, status,0, pclath, cstack
  8022 ;; Tracked objects:
  8023 ;;		On entry : 0/0
  8024 ;;		On exit  : 0/0
  8025 ;;		Unchanged: 0/0
  8026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8027 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8028 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8029 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8030 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;Total ram usage:       16 bytes
  8032 ;; Hardware stack levels used:    1
  8033 ;; Hardware stack levels required when called:    6
  8034 ;; This function calls:
  8035 ;;		___ftpack
  8036 ;; This function is called by:
  8037 ;;		_getPercentValue
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function ___ftmul
  8043  05AA                     ___ftmul:	
  8044                           
  8045                           ;incstack = 0
  8046                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8047  05AA  0020               	movlb	0	; select bank0
  8048  05AB  082E               	movf	___ftmul@f1,w
  8049  05AC  00B4               	movwf	??___ftmul
  8050  05AD  082F               	movf	___ftmul@f1+1,w
  8051  05AE  00B5               	movwf	??___ftmul+1
  8052  05AF  0830               	movf	___ftmul@f1+2,w
  8053  05B0  00B6               	movwf	??___ftmul+2
  8054  05B1  1003               	clrc
  8055  05B2  0D35               	rlf	??___ftmul+1,w
  8056  05B3  0D36               	rlf	??___ftmul+2,w
  8057  05B4  00B7               	movwf	??___ftmul+3
  8058  05B5  0837               	movf	??___ftmul+3,w
  8059  05B6  00B8               	movwf	___ftmul@exp
  8060  05B7  08B8               	movf	___ftmul@exp,f
  8061  05B8  1D03               	skipz
  8062  05B9  2DC1               	goto	l5337
  8063  05BA  3000               	movlw	0
  8064  05BB  00AE               	movwf	?___ftmul
  8065  05BC  3000               	movlw	0
  8066  05BD  00AF               	movwf	?___ftmul+1
  8067  05BE  3000               	movlw	0
  8068  05BF  00B0               	movwf	?___ftmul+2
  8069  05C0  0008               	return
  8070  05C1                     l5337:	
  8071  05C1  0831               	movf	___ftmul@f2,w
  8072  05C2  00B4               	movwf	??___ftmul
  8073  05C3  0832               	movf	___ftmul@f2+1,w
  8074  05C4  00B5               	movwf	??___ftmul+1
  8075  05C5  0833               	movf	___ftmul@f2+2,w
  8076  05C6  00B6               	movwf	??___ftmul+2
  8077  05C7  1003               	clrc
  8078  05C8  0D35               	rlf	??___ftmul+1,w
  8079  05C9  0D36               	rlf	??___ftmul+2,w
  8080  05CA  00B7               	movwf	??___ftmul+3
  8081  05CB  0837               	movf	??___ftmul+3,w
  8082  05CC  00BD               	movwf	___ftmul@sign
  8083  05CD  08BD               	movf	___ftmul@sign,f
  8084  05CE  1D03               	skipz
  8085  05CF  2DD7               	goto	l5343
  8086  05D0  3000               	movlw	0
  8087  05D1  00AE               	movwf	?___ftmul
  8088  05D2  3000               	movlw	0
  8089  05D3  00AF               	movwf	?___ftmul+1
  8090  05D4  3000               	movlw	0
  8091  05D5  00B0               	movwf	?___ftmul+2
  8092  05D6  0008               	return
  8093  05D7                     l5343:	
  8094  05D7  083D               	movf	___ftmul@sign,w
  8095  05D8  3E7B               	addlw	123
  8096  05D9  00B4               	movwf	??___ftmul
  8097  05DA  0834               	movf	??___ftmul,w
  8098  05DB  07B8               	addwf	___ftmul@exp,f
  8099  05DC  082E               	movf	___ftmul@f1,w
  8100  05DD  00B4               	movwf	??___ftmul
  8101  05DE  082F               	movf	___ftmul@f1+1,w
  8102  05DF  00B5               	movwf	??___ftmul+1
  8103  05E0  0830               	movf	___ftmul@f1+2,w
  8104  05E1  00B6               	movwf	??___ftmul+2
  8105  05E2  3010               	movlw	16
  8106  05E3                     u3925:	
  8107  05E3  36B6               	lsrf	??___ftmul+2,f
  8108  05E4  0CB5               	rrf	??___ftmul+1,f
  8109  05E5  0CB4               	rrf	??___ftmul,f
  8110  05E6  0B89               	decfsz	9,f
  8111  05E7  2DE3               	goto	u3925
  8112  05E8  0834               	movf	??___ftmul,w
  8113  05E9  00B7               	movwf	??___ftmul+3
  8114  05EA  0837               	movf	??___ftmul+3,w
  8115  05EB  00BD               	movwf	___ftmul@sign
  8116  05EC  0831               	movf	___ftmul@f2,w
  8117  05ED  00B4               	movwf	??___ftmul
  8118  05EE  0832               	movf	___ftmul@f2+1,w
  8119  05EF  00B5               	movwf	??___ftmul+1
  8120  05F0  0833               	movf	___ftmul@f2+2,w
  8121  05F1  00B6               	movwf	??___ftmul+2
  8122  05F2  3010               	movlw	16
  8123  05F3                     u3935:	
  8124  05F3  36B6               	lsrf	??___ftmul+2,f
  8125  05F4  0CB5               	rrf	??___ftmul+1,f
  8126  05F5  0CB4               	rrf	??___ftmul,f
  8127  05F6  0B89               	decfsz	9,f
  8128  05F7  2DF3               	goto	u3935
  8129  05F8  0834               	movf	??___ftmul,w
  8130  05F9  00B7               	movwf	??___ftmul+3
  8131  05FA  0837               	movf	??___ftmul+3,w
  8132  05FB  06BD               	xorwf	___ftmul@sign,f
  8133  05FC  3080               	movlw	128
  8134  05FD  00B4               	movwf	??___ftmul
  8135  05FE  0834               	movf	??___ftmul,w
  8136  05FF  05BD               	andwf	___ftmul@sign,f
  8137  0600  17AF               	bsf	___ftmul@f1+1,7
  8138  0601  17B2               	bsf	___ftmul@f2+1,7
  8139  0602  30FF               	movlw	255
  8140  0603  05B1               	andwf	___ftmul@f2,f
  8141  0604  30FF               	movlw	255
  8142  0605  05B2               	andwf	___ftmul@f2+1,f
  8143  0606  3000               	movlw	0
  8144  0607  05B3               	andwf	___ftmul@f2+2,f
  8145  0608  3000               	movlw	0
  8146  0609  00B9               	movwf	___ftmul@f3_as_product
  8147  060A  3000               	movlw	0
  8148  060B  00BA               	movwf	___ftmul@f3_as_product+1
  8149  060C  3000               	movlw	0
  8150  060D  00BB               	movwf	___ftmul@f3_as_product+2
  8151  060E  3007               	movlw	7
  8152  060F  00B4               	movwf	??___ftmul
  8153  0610  0834               	movf	??___ftmul,w
  8154  0611  00BC               	movwf	___ftmul@cntr
  8155  0612                     l5355:	
  8156  0612  1C2E               	btfss	___ftmul@f1,0
  8157  0613  2E1A               	goto	l5359
  8158  0614  0831               	movf	___ftmul@f2,w
  8159  0615  07B9               	addwf	___ftmul@f3_as_product,f
  8160  0616  0832               	movf	___ftmul@f2+1,w
  8161  0617  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8162  0618  0833               	movf	___ftmul@f2+2,w
  8163  0619  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8164  061A                     l5359:	
  8165  061A  3001               	movlw	1
  8166  061B                     u3955:	
  8167  061B  36B0               	lsrf	___ftmul@f1+2,f
  8168  061C  0CAF               	rrf	___ftmul@f1+1,f
  8169  061D  0CAE               	rrf	___ftmul@f1,f
  8170  061E  0B89               	decfsz	9,f
  8171  061F  2E1B               	goto	u3955
  8172  0620  3001               	movlw	1
  8173  0621                     u3965:	
  8174  0621  35B1               	lslf	___ftmul@f2,f
  8175  0622  0DB2               	rlf	___ftmul@f2+1,f
  8176  0623  0DB3               	rlf	___ftmul@f2+2,f
  8177  0624  0B89               	decfsz	9,f
  8178  0625  2E21               	goto	u3965
  8179  0626  3001               	movlw	1
  8180  0627  02BC               	subwf	___ftmul@cntr,f
  8181  0628  1D03               	btfss	3,2
  8182  0629  2E12               	goto	l5355
  8183  062A  3009               	movlw	9
  8184  062B  00B4               	movwf	??___ftmul
  8185  062C  0834               	movf	??___ftmul,w
  8186  062D  00BC               	movwf	___ftmul@cntr
  8187  062E                     l5367:	
  8188  062E  1C2E               	btfss	___ftmul@f1,0
  8189  062F  2E36               	goto	l5371
  8190  0630  0831               	movf	___ftmul@f2,w
  8191  0631  07B9               	addwf	___ftmul@f3_as_product,f
  8192  0632  0832               	movf	___ftmul@f2+1,w
  8193  0633  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8194  0634  0833               	movf	___ftmul@f2+2,w
  8195  0635  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8196  0636                     l5371:	
  8197  0636  3001               	movlw	1
  8198  0637                     u3995:	
  8199  0637  36B0               	lsrf	___ftmul@f1+2,f
  8200  0638  0CAF               	rrf	___ftmul@f1+1,f
  8201  0639  0CAE               	rrf	___ftmul@f1,f
  8202  063A  0B89               	decfsz	9,f
  8203  063B  2E37               	goto	u3995
  8204  063C  3001               	movlw	1
  8205  063D                     u4005:	
  8206  063D  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8207  063E  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8208  063F  0CB9               	rrf	___ftmul@f3_as_product,f
  8209  0640  0B89               	decfsz	9,f
  8210  0641  2E3D               	goto	u4005
  8211  0642  3001               	movlw	1
  8212  0643  02BC               	subwf	___ftmul@cntr,f
  8213  0644  1D03               	btfss	3,2
  8214  0645  2E2E               	goto	l5367
  8215  0646  0839               	movf	___ftmul@f3_as_product,w
  8216  0647  00A0               	movwf	___ftpack@arg
  8217  0648  083A               	movf	___ftmul@f3_as_product+1,w
  8218  0649  00A1               	movwf	___ftpack@arg+1
  8219  064A  083B               	movf	___ftmul@f3_as_product+2,w
  8220  064B  00A2               	movwf	___ftpack@arg+2
  8221  064C  0838               	movf	___ftmul@exp,w
  8222  064D  00B4               	movwf	??___ftmul
  8223  064E  0834               	movf	??___ftmul,w
  8224  064F  00A3               	movwf	___ftpack@exp
  8225  0650  083D               	movf	___ftmul@sign,w
  8226  0651  00B5               	movwf	??___ftmul+1
  8227  0652  0835               	movf	??___ftmul+1,w
  8228  0653  00A4               	movwf	___ftpack@sign
  8229  0654  318A  223F         	fcall	___ftpack
  8230  0656  0020               	movlb	0	; select bank0
  8231  0657  0820               	movf	?___ftpack,w
  8232  0658  00AE               	movwf	?___ftmul
  8233  0659  0821               	movf	?___ftpack+1,w
  8234  065A  00AF               	movwf	?___ftmul+1
  8235  065B  0822               	movf	?___ftpack+2,w
  8236  065C  00B0               	movwf	?___ftmul+2
  8237  065D  0008               	return
  8238  065E                     __end_of___ftmul:	
  8239                           
  8240                           	psect	text38
  8241  0334                     __ptext38:	
  8242 ;; *************** function ___ftadd *****************
  8243 ;; Defined at:
  8244 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8245 ;; Parameters:    Size  Location     Type
  8246 ;;  f1              3   30[BANK0 ] float 
  8247 ;;  f2              3   33[BANK0 ] float 
  8248 ;; Auto vars:     Size  Location     Type
  8249 ;;  exp1            1   42[BANK0 ] unsigned char 
  8250 ;;  exp2            1   41[BANK0 ] unsigned char 
  8251 ;;  sign            1   40[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  3   30[BANK0 ] float 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0, pclath, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8261 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8262 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;Total ram usage:       13 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    6
  8268 ;; This function calls:
  8269 ;;		___ftpack
  8270 ;; This function is called by:
  8271 ;;		_getPercentValue
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           
  8276                           ;psect for function ___ftadd
  8277  0334                     ___ftadd:	
  8278                           
  8279                           ;incstack = 0
  8280                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8281  0334  0020               	movlb	0	; select bank0
  8282  0335  083E               	movf	___ftadd@f1,w
  8283  0336  00C4               	movwf	??___ftadd
  8284  0337  083F               	movf	___ftadd@f1+1,w
  8285  0338  00C5               	movwf	??___ftadd+1
  8286  0339  0840               	movf	___ftadd@f1+2,w
  8287  033A  00C6               	movwf	??___ftadd+2
  8288  033B  1003               	clrc
  8289  033C  0D45               	rlf	??___ftadd+1,w
  8290  033D  0D46               	rlf	??___ftadd+2,w
  8291  033E  00C7               	movwf	??___ftadd+3
  8292  033F  0847               	movf	??___ftadd+3,w
  8293  0340  00CA               	movwf	___ftadd@exp1
  8294  0341  0841               	movf	___ftadd@f2,w
  8295  0342  00C4               	movwf	??___ftadd
  8296  0343  0842               	movf	___ftadd@f2+1,w
  8297  0344  00C5               	movwf	??___ftadd+1
  8298  0345  0843               	movf	___ftadd@f2+2,w
  8299  0346  00C6               	movwf	??___ftadd+2
  8300  0347  1003               	clrc
  8301  0348  0D45               	rlf	??___ftadd+1,w
  8302  0349  0D46               	rlf	??___ftadd+2,w
  8303  034A  00C7               	movwf	??___ftadd+3
  8304  034B  0847               	movf	??___ftadd+3,w
  8305  034C  00C9               	movwf	___ftadd@exp2
  8306  034D  084A               	movf	___ftadd@exp1,w
  8307  034E  1903               	btfsc	3,2
  8308  034F  2B5C               	goto	l5225
  8309  0350  0849               	movf	___ftadd@exp2,w
  8310  0351  024A               	subwf	___ftadd@exp1,w
  8311  0352  1803               	skipnc
  8312  0353  2B63               	goto	l5229
  8313  0354  034A               	decf	___ftadd@exp1,w
  8314  0355  3AFF               	xorlw	255
  8315  0356  0749               	addwf	___ftadd@exp2,w
  8316  0357  00C4               	movwf	??___ftadd
  8317  0358  3019               	movlw	25
  8318  0359  0244               	subwf	??___ftadd,w
  8319  035A  1C03               	skipc
  8320  035B  2B63               	goto	l5229
  8321  035C                     l5225:	
  8322  035C  0841               	movf	___ftadd@f2,w
  8323  035D  00BE               	movwf	?___ftadd
  8324  035E  0842               	movf	___ftadd@f2+1,w
  8325  035F  00BF               	movwf	?___ftadd+1
  8326  0360  0843               	movf	___ftadd@f2+2,w
  8327  0361  00C0               	movwf	?___ftadd+2
  8328  0362  0008               	return
  8329  0363                     l5229:	
  8330  0363  0849               	movf	___ftadd@exp2,w
  8331  0364  1903               	btfsc	3,2
  8332  0365  0008               	return
  8333  0366  084A               	movf	___ftadd@exp1,w
  8334  0367  0249               	subwf	___ftadd@exp2,w
  8335  0368  1803               	skipnc
  8336  0369  2B72               	goto	l5235
  8337  036A  0349               	decf	___ftadd@exp2,w
  8338  036B  3AFF               	xorlw	255
  8339  036C  074A               	addwf	___ftadd@exp1,w
  8340  036D  00C4               	movwf	??___ftadd
  8341  036E  3019               	movlw	25
  8342  036F  0244               	subwf	??___ftadd,w
  8343  0370  1803               	btfsc	3,0
  8344  0371  0008               	return
  8345  0372                     l5235:	
  8346  0372  3006               	movlw	6
  8347  0373  00C4               	movwf	??___ftadd
  8348  0374  0844               	movf	??___ftadd,w
  8349  0375  00C8               	movwf	___ftadd@sign
  8350  0376  1BC0               	btfsc	___ftadd@f1+2,7
  8351  0377  17C8               	bsf	___ftadd@sign,7
  8352  0378  1BC3               	btfsc	___ftadd@f2+2,7
  8353  0379  1748               	bsf	___ftadd@sign,6
  8354  037A  17BF               	bsf	___ftadd@f1+1,7
  8355  037B  30FF               	movlw	255
  8356  037C  05BE               	andwf	___ftadd@f1,f
  8357  037D  30FF               	movlw	255
  8358  037E  05BF               	andwf	___ftadd@f1+1,f
  8359  037F  3000               	movlw	0
  8360  0380  05C0               	andwf	___ftadd@f1+2,f
  8361  0381  17C2               	bsf	___ftadd@f2+1,7
  8362  0382  30FF               	movlw	255
  8363  0383  05C1               	andwf	___ftadd@f2,f
  8364  0384  30FF               	movlw	255
  8365  0385  05C2               	andwf	___ftadd@f2+1,f
  8366  0386  3000               	movlw	0
  8367  0387  05C3               	andwf	___ftadd@f2+2,f
  8368  0388  0849               	movf	___ftadd@exp2,w
  8369  0389  024A               	subwf	___ftadd@exp1,w
  8370  038A  1803               	skipnc
  8371  038B  2BAE               	goto	l5257
  8372  038C                     l5247:	
  8373  038C  3001               	movlw	1
  8374  038D                     u3685:	
  8375  038D  35C1               	lslf	___ftadd@f2,f
  8376  038E  0DC2               	rlf	___ftadd@f2+1,f
  8377  038F  0DC3               	rlf	___ftadd@f2+2,f
  8378  0390  0B89               	decfsz	9,f
  8379  0391  2B8D               	goto	u3685
  8380  0392  3001               	movlw	1
  8381  0393  02C9               	subwf	___ftadd@exp2,f
  8382  0394  0849               	movf	___ftadd@exp2,w
  8383  0395  064A               	xorwf	___ftadd@exp1,w
  8384  0396  1903               	skipnz
  8385  0397  2BA9               	goto	l5255
  8386  0398  3001               	movlw	1
  8387  0399  02C8               	subwf	___ftadd@sign,f
  8388  039A  0848               	movf	___ftadd@sign,w
  8389  039B  3907               	andlw	7
  8390  039C  1903               	btfsc	3,2
  8391  039D  2BA9               	goto	l5255
  8392  039E  2B8C               	goto	l5247
  8393  039F                     l5253:	
  8394  039F  3001               	movlw	1
  8395  03A0                     u3715:	
  8396  03A0  36C0               	lsrf	___ftadd@f1+2,f
  8397  03A1  0CBF               	rrf	___ftadd@f1+1,f
  8398  03A2  0CBE               	rrf	___ftadd@f1,f
  8399  03A3  0B89               	decfsz	9,f
  8400  03A4  2BA0               	goto	u3715
  8401  03A5  3001               	movlw	1
  8402  03A6  00C4               	movwf	??___ftadd
  8403  03A7  0844               	movf	??___ftadd,w
  8404  03A8  07CA               	addwf	___ftadd@exp1,f
  8405  03A9                     l5255:	
  8406  03A9  084A               	movf	___ftadd@exp1,w
  8407  03AA  0649               	xorwf	___ftadd@exp2,w
  8408  03AB  1903               	btfsc	3,2
  8409  03AC  2BD3               	goto	l2740
  8410  03AD  2B9F               	goto	l5253
  8411  03AE                     l5257:	
  8412  03AE  084A               	movf	___ftadd@exp1,w
  8413  03AF  0249               	subwf	___ftadd@exp2,w
  8414  03B0  1803               	skipnc
  8415  03B1  2BD3               	goto	l2740
  8416  03B2                     l5259:	
  8417  03B2  3001               	movlw	1
  8418  03B3                     u3745:	
  8419  03B3  35BE               	lslf	___ftadd@f1,f
  8420  03B4  0DBF               	rlf	___ftadd@f1+1,f
  8421  03B5  0DC0               	rlf	___ftadd@f1+2,f
  8422  03B6  0B89               	decfsz	9,f
  8423  03B7  2BB3               	goto	u3745
  8424  03B8  3001               	movlw	1
  8425  03B9  02CA               	subwf	___ftadd@exp1,f
  8426  03BA  0849               	movf	___ftadd@exp2,w
  8427  03BB  064A               	xorwf	___ftadd@exp1,w
  8428  03BC  1903               	skipnz
  8429  03BD  2BCF               	goto	l5267
  8430  03BE  3001               	movlw	1
  8431  03BF  02C8               	subwf	___ftadd@sign,f
  8432  03C0  0848               	movf	___ftadd@sign,w
  8433  03C1  3907               	andlw	7
  8434  03C2  1903               	btfsc	3,2
  8435  03C3  2BCF               	goto	l5267
  8436  03C4  2BB2               	goto	l5259
  8437  03C5                     l5265:	
  8438  03C5  3001               	movlw	1
  8439  03C6                     u3775:	
  8440  03C6  36C3               	lsrf	___ftadd@f2+2,f
  8441  03C7  0CC2               	rrf	___ftadd@f2+1,f
  8442  03C8  0CC1               	rrf	___ftadd@f2,f
  8443  03C9  0B89               	decfsz	9,f
  8444  03CA  2BC6               	goto	u3775
  8445  03CB  3001               	movlw	1
  8446  03CC  00C4               	movwf	??___ftadd
  8447  03CD  0844               	movf	??___ftadd,w
  8448  03CE  07C9               	addwf	___ftadd@exp2,f
  8449  03CF                     l5267:	
  8450  03CF  084A               	movf	___ftadd@exp1,w
  8451  03D0  0649               	xorwf	___ftadd@exp2,w
  8452  03D1  1D03               	skipz
  8453  03D2  2BC5               	goto	l5265
  8454  03D3                     l2740:	
  8455  03D3  1FC8               	btfss	___ftadd@sign,7
  8456  03D4  2BE5               	goto	l5271
  8457  03D5  30FF               	movlw	255
  8458  03D6  06BE               	xorwf	___ftadd@f1,f
  8459  03D7  30FF               	movlw	255
  8460  03D8  06BF               	xorwf	___ftadd@f1+1,f
  8461  03D9  30FF               	movlw	255
  8462  03DA  06C0               	xorwf	___ftadd@f1+2,f
  8463  03DB  3001               	movlw	1
  8464  03DC  07BE               	addwf	___ftadd@f1,f
  8465  03DD  3000               	movlw	0
  8466  03DE  1803               	skipnc
  8467  03DF  3001               	movlw	1
  8468  03E0  07BF               	addwf	___ftadd@f1+1,f
  8469  03E1  3000               	movlw	0
  8470  03E2  1803               	skipnc
  8471  03E3  3001               	movlw	1
  8472  03E4  07C0               	addwf	___ftadd@f1+2,f
  8473  03E5                     l5271:	
  8474  03E5  1F48               	btfss	___ftadd@sign,6
  8475  03E6  2BF7               	goto	l5275
  8476  03E7  30FF               	movlw	255
  8477  03E8  06C1               	xorwf	___ftadd@f2,f
  8478  03E9  30FF               	movlw	255
  8479  03EA  06C2               	xorwf	___ftadd@f2+1,f
  8480  03EB  30FF               	movlw	255
  8481  03EC  06C3               	xorwf	___ftadd@f2+2,f
  8482  03ED  3001               	movlw	1
  8483  03EE  07C1               	addwf	___ftadd@f2,f
  8484  03EF  3000               	movlw	0
  8485  03F0  1803               	skipnc
  8486  03F1  3001               	movlw	1
  8487  03F2  07C2               	addwf	___ftadd@f2+1,f
  8488  03F3  3000               	movlw	0
  8489  03F4  1803               	skipnc
  8490  03F5  3001               	movlw	1
  8491  03F6  07C3               	addwf	___ftadd@f2+2,f
  8492  03F7                     l5275:	
  8493  03F7  01C8               	clrf	___ftadd@sign
  8494  03F8  083E               	movf	___ftadd@f1,w
  8495  03F9  07C1               	addwf	___ftadd@f2,f
  8496  03FA  083F               	movf	___ftadd@f1+1,w
  8497  03FB  3DC2               	addwfc	___ftadd@f2+1,f
  8498  03FC  0840               	movf	___ftadd@f1+2,w
  8499  03FD  3DC3               	addwfc	___ftadd@f2+2,f
  8500  03FE  1FC3               	btfss	___ftadd@f2+2,7
  8501  03FF  2C12               	goto	l5285
  8502  0400  30FF               	movlw	255
  8503  0401  06C1               	xorwf	___ftadd@f2,f
  8504  0402  30FF               	movlw	255
  8505  0403  06C2               	xorwf	___ftadd@f2+1,f
  8506  0404  30FF               	movlw	255
  8507  0405  06C3               	xorwf	___ftadd@f2+2,f
  8508  0406  3001               	movlw	1
  8509  0407  07C1               	addwf	___ftadd@f2,f
  8510  0408  3000               	movlw	0
  8511  0409  1803               	skipnc
  8512  040A  3001               	movlw	1
  8513  040B  07C2               	addwf	___ftadd@f2+1,f
  8514  040C  3000               	movlw	0
  8515  040D  1803               	skipnc
  8516  040E  3001               	movlw	1
  8517  040F  07C3               	addwf	___ftadd@f2+2,f
  8518  0410  01C8               	clrf	___ftadd@sign
  8519  0411  0AC8               	incf	___ftadd@sign,f
  8520  0412                     l5285:	
  8521  0412  0841               	movf	___ftadd@f2,w
  8522  0413  00A0               	movwf	___ftpack@arg
  8523  0414  0842               	movf	___ftadd@f2+1,w
  8524  0415  00A1               	movwf	___ftpack@arg+1
  8525  0416  0843               	movf	___ftadd@f2+2,w
  8526  0417  00A2               	movwf	___ftpack@arg+2
  8527  0418  084A               	movf	___ftadd@exp1,w
  8528  0419  00C4               	movwf	??___ftadd
  8529  041A  0844               	movf	??___ftadd,w
  8530  041B  00A3               	movwf	___ftpack@exp
  8531  041C  0848               	movf	___ftadd@sign,w
  8532  041D  00C5               	movwf	??___ftadd+1
  8533  041E  0845               	movf	??___ftadd+1,w
  8534  041F  00A4               	movwf	___ftpack@sign
  8535  0420  318A  223F         	fcall	___ftpack
  8536  0422  0020               	movlb	0	; select bank0
  8537  0423  0820               	movf	?___ftpack,w
  8538  0424  00BE               	movwf	?___ftadd
  8539  0425  0821               	movf	?___ftpack+1,w
  8540  0426  00BF               	movwf	?___ftadd+1
  8541  0427  0822               	movf	?___ftpack+2,w
  8542  0428  00C0               	movwf	?___ftadd+2
  8543  0429  0008               	return
  8544  042A                     __end_of___ftadd:	
  8545                           
  8546                           	psect	text39
  8547  1FEF                     __ptext39:	
  8548 ;; *************** function _getBuz_GO *****************
  8549 ;; Defined at:
  8550 ;;		line 82 in file "../src/Buzzer_B1.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  i               2    4[BANK0 ] int 
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  2    0[BANK0 ] int 
  8557 ;; Registers used:
  8558 ;;		wreg, status,2, status,0
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;Total ram usage:        6 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    5
  8571 ;; This function calls:
  8572 ;;		Nothing
  8573 ;; This function is called by:
  8574 ;;		_setRF_Main
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           
  8579                           ;psect for function _getBuz_GO
  8580  1FEF                     _getBuz_GO:	
  8581                           
  8582                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8583                           
  8584                           ;incstack = 0
  8585                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8586  1FEF  0021               	movlb	1	; select bank1
  8587  1FF0  0C32               	rrf	_Buz1^(0+128),w
  8588  1FF1  3901               	andlw	1
  8589  1FF2  0020               	movlb	0	; select bank0
  8590  1FF3  00A2               	movwf	??_getBuz_GO
  8591  1FF4  01A3               	clrf	??_getBuz_GO+1
  8592  1FF5  0822               	movf	??_getBuz_GO,w
  8593  1FF6  00A4               	movwf	getBuz_GO@i
  8594  1FF7  0823               	movf	??_getBuz_GO+1,w
  8595  1FF8  00A5               	movwf	getBuz_GO@i+1
  8596                           
  8597                           ;Buzzer_B1.c: 84: return i;
  8598  1FF9  0825               	movf	getBuz_GO@i+1,w
  8599  1FFA  01A1               	clrf	?_getBuz_GO+1
  8600  1FFB  07A1               	addwf	?_getBuz_GO+1,f
  8601  1FFC  0824               	movf	getBuz_GO@i,w
  8602  1FFD  01A0               	clrf	?_getBuz_GO
  8603  1FFE  07A0               	addwf	?_getBuz_GO,f
  8604  1FFF  0008               	return
  8605  2000                     __end_of_getBuz_GO:	
  8606                           
  8607                           	psect	text40
  8608  1F72                     __ptext40:	
  8609 ;; *************** function _RF_RxDisable *****************
  8610 ;; Defined at:
  8611 ;;		line 205 in file "../src/RF_Control_B1.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;		None               void
  8618 ;; Registers used:
  8619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    7
  8632 ;; This function calls:
  8633 ;;		_CC2500_WriteCommand
  8634 ;; This function is called by:
  8635 ;;		_setRF_Main
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           
  8640                           ;psect for function _RF_RxDisable
  8641  1F72                     _RF_RxDisable:	
  8642                           
  8643                           ;RF_Control_B1.c: 206: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8644                           
  8645                           ;incstack = 0
  8646                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8647  1F72  0021               	movlb	1	; select bank1
  8648  1F73  18C6               	btfsc	_RF1^(0+128),1
  8649  1F74  2F77               	goto	l1888
  8650  1F75  1DC6               	btfss	_RF1^(0+128),3
  8651  1F76  0008               	return
  8652  1F77                     l1888:	
  8653                           
  8654                           ;RF_Control_B1.c: 207: RF1.RxStatus = 0;
  8655  1F77  11C6               	bcf	_RF1^(0+128),3
  8656                           
  8657                           ;RF_Control_B1.c: 208: RF1.ReceiveGO = 0;
  8658  1F78  10C6               	bcf	_RF1^(0+128),1
  8659                           
  8660                           ;RF_Control_B1.c: 209: CC2500_WriteCommand(0x36);
  8661  1F79  3036               	movlw	54
  8662  1F7A  3191  2110  319F   	fcall	_CC2500_WriteCommand
  8663                           
  8664                           ;RF_Control_B1.c: 210: CC2500_WriteCommand(0x3A);
  8665  1F7D  303A               	movlw	58
  8666  1F7E  3191  2110         	fcall	_CC2500_WriteCommand
  8667  1F80  0008               	return
  8668  1F81                     __end_of_RF_RxDisable:	
  8669                           
  8670                           	psect	text41
  8671  0AA0                     __ptext41:	
  8672 ;; *************** function _CC2500_TxData *****************
  8673 ;; Defined at:
  8674 ;;		line 32 in file "../src/CC2500_B1.c"
  8675 ;; Parameters:    Size  Location     Type
  8676 ;;		None
  8677 ;; Auto vars:     Size  Location     Type
  8678 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8679 ;; Return value:  Size  Location     Type
  8680 ;;		None               void
  8681 ;; Registers used:
  8682 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8683 ;; Tracked objects:
  8684 ;;		On entry : 0/0
  8685 ;;		On exit  : 0/0
  8686 ;;		Unchanged: 0/0
  8687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8689 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8690 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8691 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;Total ram usage:        2 bytes
  8693 ;; Hardware stack levels used:    1
  8694 ;; Hardware stack levels required when called:    7
  8695 ;; This function calls:
  8696 ;;		_CC2500_WriteByte
  8697 ;;		_CC2500_WriteCommand
  8698 ;;		_Timeout_Counter
  8699 ;;		_set_TimeoutCleared
  8700 ;; This function is called by:
  8701 ;;		_setRF_Main
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           
  8706                           ;psect for function _CC2500_TxData
  8707  0AA0                     _CC2500_TxData:	
  8708                           
  8709                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8710                           ;CC2500_B1.c: 35: RC4 = 0;
  8711                           
  8712                           ;incstack = 0
  8713                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8714  0AA0  0020               	movlb	0	; select bank0
  8715  0AA1  120E               	bcf	14,4	;volatile
  8716                           
  8717                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8718  0AA2  307F               	movlw	127
  8719  0AA3  00A4               	movwf	??_CC2500_TxData
  8720  0AA4  0824               	movf	??_CC2500_TxData,w
  8721  0AA5  00FB               	movwf	_SPI0Buffer
  8722                           
  8723                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8724  0AA6  2AAA               	goto	l6055
  8725  0AA7                     l6053:	
  8726                           
  8727                           ;CC2500_B1.c: 38: Timeout_Counter();
  8728  0AA7  3190  20F8  318A   	fcall	_Timeout_Counter
  8729  0AAA                     l6055:	
  8730  0AAA  0020               	movlb	0	; select bank0
  8731  0AAB  1D0E               	btfss	14,2	;volatile
  8732  0AAC  2AB0               	goto	l6059
  8733  0AAD  0021               	movlb	1	; select bank1
  8734  0AAE  1D2F               	btfss	(_myMain^(0+128)+15),2
  8735  0AAF  2AA7               	goto	l6053
  8736  0AB0                     l6059:	
  8737                           
  8738                           ;CC2500_B1.c: 39: };
  8739                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8740  0AB0  319E  2616  318A   	fcall	_set_TimeoutCleared
  8741                           
  8742                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  8743  0AB3  3190  208E  318A   	fcall	_CC2500_WriteByte
  8744                           
  8745                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  8746  0AB6  0021               	movlb	1	; select bank1
  8747  0AB7  0855               	movf	_Tx_Length^(0+128),w
  8748  0AB8  0020               	movlb	0	; select bank0
  8749  0AB9  00A4               	movwf	??_CC2500_TxData
  8750  0ABA  0824               	movf	??_CC2500_TxData,w
  8751  0ABB  00FB               	movwf	_SPI0Buffer
  8752                           
  8753                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8754  0ABC  3190  208E  318A   	fcall	_CC2500_WriteByte
  8755                           
  8756                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8757  0ABF  0020               	movlb	0	; select bank0
  8758  0AC0  01A5               	clrf	CC2500_TxData@loop_e
  8759  0AC1                     l6073:	
  8760  0AC1  0021               	movlb	1	; select bank1
  8761  0AC2  0855               	movf	_Tx_Length^(0+128),w
  8762  0AC3  0020               	movlb	0	; select bank0
  8763  0AC4  0225               	subwf	CC2500_TxData@loop_e,w
  8764  0AC5  1803               	btfsc	3,0
  8765  0AC6  2AD9               	goto	l243
  8766                           
  8767                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  8768  0AC7  0825               	movf	CC2500_TxData@loop_e,w
  8769  0AC8  3E20               	addlw	_RF_Data& (0+255)
  8770  0AC9  0086               	movwf	6
  8771  0ACA  3001               	movlw	1	; select bank2/3
  8772  0ACB  0087               	movwf	7
  8773  0ACC  0801               	movf	1,w
  8774  0ACD  00A4               	movwf	??_CC2500_TxData
  8775  0ACE  0824               	movf	??_CC2500_TxData,w
  8776  0ACF  00FB               	movwf	_SPI0Buffer
  8777                           
  8778                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  8779  0AD0  3190  208E  318A   	fcall	_CC2500_WriteByte
  8780  0AD3  3001               	movlw	1
  8781  0AD4  0020               	movlb	0	; select bank0
  8782  0AD5  00A4               	movwf	??_CC2500_TxData
  8783  0AD6  0824               	movf	??_CC2500_TxData,w
  8784  0AD7  07A5               	addwf	CC2500_TxData@loop_e,f
  8785  0AD8  2AC1               	goto	l6073
  8786  0AD9                     l243:	
  8787                           
  8788                           ;CC2500_B1.c: 47: }
  8789                           ;CC2500_B1.c: 48: RC4 = 1;
  8790  0AD9  160E               	bsf	14,4	;volatile
  8791                           
  8792                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  8793  0ADA  3035               	movlw	53
  8794  0ADB  3191  2110  318A   	fcall	_CC2500_WriteCommand
  8795                           
  8796                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  8797  0ADE  2AE2               	goto	l6079
  8798  0ADF                     l6077:	
  8799                           
  8800                           ;CC2500_B1.c: 51: Timeout_Counter();
  8801  0ADF  3190  20F8  318A   	fcall	_Timeout_Counter
  8802  0AE2                     l6079:	
  8803  0AE2  0020               	movlb	0	; select bank0
  8804  0AE3  180D               	btfsc	13,0	;volatile
  8805  0AE4  2AE8               	goto	l6083
  8806  0AE5  0021               	movlb	1	; select bank1
  8807  0AE6  1D2F               	btfss	(_myMain^(0+128)+15),2
  8808  0AE7  2ADF               	goto	l6077
  8809  0AE8                     l6083:	
  8810                           
  8811                           ;CC2500_B1.c: 52: };
  8812                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  8813  0AE8  319E  2616  318A   	fcall	_set_TimeoutCleared
  8814                           
  8815                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  8816  0AEB  2AEF               	goto	l6087
  8817  0AEC                     l6085:	
  8818                           
  8819                           ;CC2500_B1.c: 55: Timeout_Counter();
  8820  0AEC  3190  20F8  318A   	fcall	_Timeout_Counter
  8821  0AEF                     l6087:	
  8822  0AEF  0020               	movlb	0	; select bank0
  8823  0AF0  1C0D               	btfss	13,0	;volatile
  8824  0AF1  2AF5               	goto	l6091
  8825  0AF2  0021               	movlb	1	; select bank1
  8826  0AF3  1D2F               	btfss	(_myMain^(0+128)+15),2
  8827  0AF4  2AEC               	goto	l6085
  8828  0AF5                     l6091:	
  8829                           
  8830                           ;CC2500_B1.c: 56: };
  8831                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  8832  0AF5  319E  2616  318A   	fcall	_set_TimeoutCleared
  8833                           
  8834                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  8835  0AF8  3036               	movlw	54
  8836  0AF9  3191  2110  318A   	fcall	_CC2500_WriteCommand
  8837                           
  8838                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  8839  0AFC  303B               	movlw	59
  8840  0AFD  3191  2110         	fcall	_CC2500_WriteCommand
  8841                           
  8842                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  8843  0AFF  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8844  0B00  0008               	return
  8845  0B01                     __end_of_CC2500_TxData:	
  8846                           
  8847                           	psect	text42
  8848  0C9F                     __ptext42:	
  8849 ;; *************** function _CC2500_RxData *****************
  8850 ;; Defined at:
  8851 ;;		line 66 in file "../src/CC2500_B1.c"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;		None
  8854 ;; Auto vars:     Size  Location     Type
  8855 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;		None               void
  8858 ;; Registers used:
  8859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8869 ;;Total ram usage:        2 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    7
  8872 ;; This function calls:
  8873 ;;		_CC2500_ReadByte
  8874 ;;		_CC2500_ReadStatus
  8875 ;;		_CC2500_WriteByte
  8876 ;;		_CC2500_WriteCommand
  8877 ;;		_Timeout_Counter
  8878 ;;		_set_TimeoutCleared
  8879 ;; This function is called by:
  8880 ;;		_setRF_Main
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           
  8885                           ;psect for function _CC2500_RxData
  8886  0C9F                     _CC2500_RxData:	
  8887                           
  8888                           ;CC2500_B1.c: 67: unsigned char loop_f;
  8889                           ;CC2500_B1.c: 71: if (RB0 == 1)
  8890                           
  8891                           ;incstack = 0
  8892                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8893  0C9F  0020               	movlb	0	; select bank0
  8894  0CA0  180D               	btfsc	13,0	;volatile
  8895  0CA1  2CA6               	goto	l6105
  8896  0CA2  2CAF               	goto	l6111
  8897  0CA3                     l6103:	
  8898                           ;CC2500_B1.c: 72: {
  8899                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  8900                           
  8901                           
  8902                           ;CC2500_B1.c: 74: Timeout_Counter();
  8903  0CA3  3190  20F8  318C   	fcall	_Timeout_Counter
  8904  0CA6                     l6105:	
  8905  0CA6  0020               	movlb	0	; select bank0
  8906  0CA7  1C0D               	btfss	13,0	;volatile
  8907  0CA8  2CAC               	goto	l6109
  8908  0CA9  0021               	movlb	1	; select bank1
  8909  0CAA  1D2F               	btfss	(_myMain^(0+128)+15),2
  8910  0CAB  2CA3               	goto	l6103
  8911  0CAC                     l6109:	
  8912                           
  8913                           ;CC2500_B1.c: 75: };
  8914                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  8915  0CAC  319E  2616  318C   	fcall	_set_TimeoutCleared
  8916  0CAF                     l6111:	
  8917                           
  8918                           ;CC2500_B1.c: 77: }
  8919                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  8920  0CAF  303B               	movlw	59
  8921  0CB0  3192  225E  318C   	fcall	_CC2500_ReadStatus
  8922                           
  8923                           ;CC2500_B1.c: 80: if (s_data != 0) {
  8924  0CB3  0021               	movlb	1	; select bank1
  8925  0CB4  0858               	movf	_s_data^(0+128),w
  8926  0CB5  1903               	btfsc	3,2
  8927  0CB6  2D07               	goto	l6155
  8928                           
  8929                           ;CC2500_B1.c: 81: RC4 = 0;
  8930  0CB7  0020               	movlb	0	; select bank0
  8931  0CB8  120E               	bcf	14,4	;volatile
  8932                           
  8933                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  8934  0CB9  30FF               	movlw	255
  8935  0CBA  00A4               	movwf	??_CC2500_RxData
  8936  0CBB  0824               	movf	??_CC2500_RxData,w
  8937  0CBC  00FB               	movwf	_SPI0Buffer
  8938                           
  8939                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  8940  0CBD  2CC1               	goto	l6121
  8941  0CBE                     l6119:	
  8942                           
  8943                           ;CC2500_B1.c: 84: Timeout_Counter();
  8944  0CBE  3190  20F8  318C   	fcall	_Timeout_Counter
  8945  0CC1                     l6121:	
  8946  0CC1  0020               	movlb	0	; select bank0
  8947  0CC2  1D0E               	btfss	14,2	;volatile
  8948  0CC3  2CC7               	goto	l6125
  8949  0CC4  0021               	movlb	1	; select bank1
  8950  0CC5  1D2F               	btfss	(_myMain^(0+128)+15),2
  8951  0CC6  2CBE               	goto	l6119
  8952  0CC7                     l6125:	
  8953                           
  8954                           ;CC2500_B1.c: 85: };
  8955                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  8956  0CC7  319E  2616  318C   	fcall	_set_TimeoutCleared
  8957                           
  8958                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8959  0CCA  3190  208E  318C   	fcall	_CC2500_WriteByte
  8960                           
  8961                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8962  0CCD  3190  20E1  318C   	fcall	_CC2500_ReadByte
  8963                           
  8964                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8965  0CD0  087B               	movf	_SPI0Buffer,w
  8966  0CD1  0020               	movlb	0	; select bank0
  8967  0CD2  00A4               	movwf	??_CC2500_RxData
  8968  0CD3  0824               	movf	??_CC2500_RxData,w
  8969  0CD4  0021               	movlb	1	; select bank1
  8970  0CD5  00D4               	movwf	_Rx_Length^(0+128)
  8971                           
  8972                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8973  0CD6  0020               	movlb	0	; select bank0
  8974  0CD7  01A5               	clrf	CC2500_RxData@loop_f
  8975  0CD8                     l6141:	
  8976  0CD8  0021               	movlb	1	; select bank1
  8977  0CD9  0854               	movf	_Rx_Length^(0+128),w
  8978  0CDA  0020               	movlb	0	; select bank0
  8979  0CDB  0225               	subwf	CC2500_RxData@loop_f,w
  8980  0CDC  1803               	btfsc	3,0
  8981  0CDD  2CF0               	goto	l6143
  8982                           
  8983                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8984  0CDE  3190  20E1  318C   	fcall	_CC2500_ReadByte
  8985                           
  8986                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8987  0CE1  087B               	movf	_SPI0Buffer,w
  8988  0CE2  0020               	movlb	0	; select bank0
  8989  0CE3  00A4               	movwf	??_CC2500_RxData
  8990  0CE4  0825               	movf	CC2500_RxData@loop_f,w
  8991  0CE5  3E20               	addlw	_RF_Data& (0+255)
  8992  0CE6  0086               	movwf	6
  8993  0CE7  3001               	movlw	1	; select bank2/3
  8994  0CE8  0087               	movwf	7
  8995  0CE9  0824               	movf	??_CC2500_RxData,w
  8996  0CEA  0081               	movwf	1
  8997  0CEB  3001               	movlw	1
  8998  0CEC  00A4               	movwf	??_CC2500_RxData
  8999  0CED  0824               	movf	??_CC2500_RxData,w
  9000  0CEE  07A5               	addwf	CC2500_RxData@loop_f,f
  9001  0CEF  2CD8               	goto	l6141
  9002  0CF0                     l6143:	
  9003                           
  9004                           ;CC2500_B1.c: 94: }
  9005                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9006  0CF0  3190  20E1  318C   	fcall	_CC2500_ReadByte
  9007                           
  9008                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  9009  0CF3  087B               	movf	_SPI0Buffer,w
  9010  0CF4  0020               	movlb	0	; select bank0
  9011  0CF5  00A4               	movwf	??_CC2500_RxData
  9012  0CF6  0824               	movf	??_CC2500_RxData,w
  9013  0CF7  0021               	movlb	1	; select bank1
  9014  0CF8  00D3               	movwf	_RSSI^(0+128)
  9015                           
  9016                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9017  0CF9  3190  20E1  318C   	fcall	_CC2500_ReadByte
  9018                           
  9019                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  9020  0CFC  087B               	movf	_SPI0Buffer,w
  9021  0CFD  0020               	movlb	0	; select bank0
  9022  0CFE  00A4               	movwf	??_CC2500_RxData
  9023  0CFF  0824               	movf	??_CC2500_RxData,w
  9024  0D00  0021               	movlb	1	; select bank1
  9025  0D01  00CF               	movwf	_CRC^(0+128)
  9026                           
  9027                           ;CC2500_B1.c: 99: RC4 = 1;
  9028  0D02  0020               	movlb	0	; select bank0
  9029  0D03  160E               	bsf	14,4	;volatile
  9030                           
  9031                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  9032  0D04  0021               	movlb	1	; select bank1
  9033  0D05  1BCF               	btfsc	_CRC^(0+128),7
  9034                           
  9035                           ;CC2500_B1.c: 101: Receive_OK = 1;
  9036  0D06  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9037  0D07                     l6155:	
  9038                           
  9039                           ;CC2500_B1.c: 102: }
  9040                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x36);
  9041  0D07  3036               	movlw	54
  9042  0D08  3191  2110  318C   	fcall	_CC2500_WriteCommand
  9043                           
  9044                           ;CC2500_B1.c: 105: CC2500_WriteCommand(0x3A);
  9045  0D0B  303A               	movlw	58
  9046  0D0C  3191  2110         	fcall	_CC2500_WriteCommand
  9047  0D0E  0008               	return
  9048  0D0F                     __end_of_CC2500_RxData:	
  9049                           
  9050                           	psect	text43
  9051  125E                     __ptext43:	
  9052 ;; *************** function _CC2500_ReadStatus *****************
  9053 ;; Defined at:
  9054 ;;		line 290 in file "../src/CC2500_B1.c"
  9055 ;; Parameters:    Size  Location     Type
  9056 ;;  status_addr     1    wreg     unsigned char 
  9057 ;; Auto vars:     Size  Location     Type
  9058 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9059 ;; Return value:  Size  Location     Type
  9060 ;;		None               void
  9061 ;; Registers used:
  9062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9063 ;; Tracked objects:
  9064 ;;		On entry : 0/0
  9065 ;;		On exit  : 0/0
  9066 ;;		Unchanged: 0/0
  9067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;Total ram usage:        2 bytes
  9073 ;; Hardware stack levels used:    1
  9074 ;; Hardware stack levels required when called:    6
  9075 ;; This function calls:
  9076 ;;		_CC2500_ReadByte
  9077 ;;		_CC2500_WriteByte
  9078 ;;		_Timeout_Counter
  9079 ;;		_set_TimeoutCleared
  9080 ;; This function is called by:
  9081 ;;		_CC2500_RxData
  9082 ;; This function uses a non-reentrant model
  9083 ;;
  9084                           
  9085                           
  9086                           ;psect for function _CC2500_ReadStatus
  9087  125E                     _CC2500_ReadStatus:	
  9088                           
  9089                           ;incstack = 0
  9090                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9091                           ;CC2500_ReadStatus@status_addr stored from wreg
  9092  125E  0020               	movlb	0	; select bank0
  9093  125F  00A3               	movwf	CC2500_ReadStatus@status_addr
  9094                           
  9095                           ;CC2500_B1.c: 291: RC4 = 0;
  9096  1260  120E               	bcf	14,4	;volatile
  9097                           
  9098                           ;CC2500_B1.c: 292: SPI0Buffer = status_addr + 0xC0;
  9099  1261  0823               	movf	CC2500_ReadStatus@status_addr,w
  9100  1262  3EC0               	addlw	192
  9101  1263  00A2               	movwf	??_CC2500_ReadStatus
  9102  1264  0822               	movf	??_CC2500_ReadStatus,w
  9103  1265  00FB               	movwf	_SPI0Buffer
  9104                           
  9105                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
  9106  1266  2A6A               	goto	l5929
  9107  1267                     l5927:	
  9108                           
  9109                           ;CC2500_B1.c: 295: Timeout_Counter();
  9110  1267  3190  20F8  3192   	fcall	_Timeout_Counter
  9111  126A                     l5929:	
  9112  126A  0020               	movlb	0	; select bank0
  9113  126B  1D0E               	btfss	14,2	;volatile
  9114  126C  2A70               	goto	l5933
  9115  126D  0021               	movlb	1	; select bank1
  9116  126E  1D2F               	btfss	(_myMain^(0+128)+15),2
  9117  126F  2A67               	goto	l5927
  9118  1270                     l5933:	
  9119                           
  9120                           ;CC2500_B1.c: 296: };
  9121                           ;CC2500_B1.c: 297: set_TimeoutCleared();
  9122  1270  319E  2616  3192   	fcall	_set_TimeoutCleared
  9123                           
  9124                           ;CC2500_B1.c: 298: CC2500_WriteByte();
  9125  1273  3190  208E  3192   	fcall	_CC2500_WriteByte
  9126                           
  9127                           ;CC2500_B1.c: 299: CC2500_ReadByte();
  9128  1276  3190  20E1         	fcall	_CC2500_ReadByte
  9129                           
  9130                           ;CC2500_B1.c: 300: RC4 = 1;
  9131  1278  0020               	movlb	0	; select bank0
  9132  1279  160E               	bsf	14,4	;volatile
  9133                           
  9134                           ;CC2500_B1.c: 302: s_data = SPI0Buffer;
  9135  127A  087B               	movf	_SPI0Buffer,w
  9136  127B  00A2               	movwf	??_CC2500_ReadStatus
  9137  127C  0822               	movf	??_CC2500_ReadStatus,w
  9138  127D  0021               	movlb	1	; select bank1
  9139  127E  00D8               	movwf	_s_data^(0+128)
  9140  127F  0008               	return
  9141  1280                     __end_of_CC2500_ReadStatus:	
  9142                           
  9143                           	psect	text44
  9144  10E1                     __ptext44:	
  9145 ;; *************** function _CC2500_ReadByte *****************
  9146 ;; Defined at:
  9147 ;;		line 227 in file "../src/CC2500_B1.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;		None
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9152 ;; Return value:  Size  Location     Type
  9153 ;;		None               void
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9165 ;;Total ram usage:        2 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    5
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		_CC2500_RxData
  9172 ;;		_CC2500_ReadStatus
  9173 ;;		_CC2500_ReadREG
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           
  9178                           ;psect for function _CC2500_ReadByte
  9179  10E1                     _CC2500_ReadByte:	
  9180                           
  9181                           ;CC2500_B1.c: 228: unsigned char loop_b;
  9182                           ;CC2500_B1.c: 229: for (loop_b = 0; loop_b < 8; loop_b++) {
  9183                           
  9184                           ;incstack = 0
  9185                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9186  10E1  0020               	movlb	0	; select bank0
  9187  10E2  01A1               	clrf	CC2500_ReadByte@loop_b
  9188  10E3                     L3:	
  9189  10E3  3008               	movlw	8
  9190  10E4  0221               	subwf	CC2500_ReadByte@loop_b,w
  9191  10E5  1803               	btfsc	3,0
  9192  10E6  0008               	return
  9193                           
  9194                           ;CC2500_B1.c: 230: RC1 = 1;
  9195  10E7  148E               	bsf	14,1	;volatile
  9196                           
  9197                           ;CC2500_B1.c: 231: SPI0Buffer <<= 1;
  9198  10E8  1003               	clrc
  9199  10E9  0DFB               	rlf	_SPI0Buffer,f
  9200                           
  9201                           ;CC2500_B1.c: 232: if (RC2 == 1)
  9202  10EA  1D0E               	btfss	14,2	;volatile
  9203  10EB  28EE               	goto	l5795
  9204                           
  9205                           ;CC2500_B1.c: 233: SPI0Buffer |= 0x01;
  9206  10EC  147B               	bsf	_SPI0Buffer,0
  9207  10ED  28F2               	goto	l5797
  9208  10EE                     l5795:	
  9209                           
  9210                           ;CC2500_B1.c: 234: else
  9211                           ;CC2500_B1.c: 235: SPI0Buffer &= 0xFE;
  9212  10EE  30FE               	movlw	254
  9213  10EF  00A0               	movwf	??_CC2500_ReadByte
  9214  10F0  0820               	movf	??_CC2500_ReadByte,w
  9215  10F1  05FB               	andwf	_SPI0Buffer,f
  9216  10F2                     l5797:	
  9217                           
  9218                           ;CC2500_B1.c: 236: RC1 = 0;
  9219  10F2  108E               	bcf	14,1	;volatile
  9220  10F3  3001               	movlw	1
  9221  10F4  00A0               	movwf	??_CC2500_ReadByte
  9222  10F5  0820               	movf	??_CC2500_ReadByte,w
  9223  10F6  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9224  10F7  28E3               	goto	L3
  9225  10F8                     __end_of_CC2500_ReadByte:	
  9226                           
  9227                           	psect	text45
  9228  1DE7                     __ptext45:	
  9229 ;; *************** function _RF_Initialization *****************
  9230 ;; Defined at:
  9231 ;;		line 9 in file "../src/RF_Control_B1.c"
  9232 ;; Parameters:    Size  Location     Type
  9233 ;;		None
  9234 ;; Auto vars:     Size  Location     Type
  9235 ;;		None
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0, pclath, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        0 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    6
  9252 ;; This function calls:
  9253 ;;		_setRF_Initialization
  9254 ;; This function is called by:
  9255 ;;		_main
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function _RF_Initialization
  9261  1DE7                     _RF_Initialization:	
  9262                           
  9263                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9267  1DE7  319E  2643         	fcall	_setRF_Initialization
  9268  1DE9  0008               	return
  9269  1DEA                     __end_of_RF_Initialization:	
  9270                           
  9271                           	psect	text46
  9272  1E43                     __ptext46:	
  9273 ;; *************** function _setRF_Initialization *****************
  9274 ;; Defined at:
  9275 ;;		line 43 in file "../src/RF_Control_B1.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;		None
  9278 ;; Auto vars:     Size  Location     Type
  9279 ;;		None
  9280 ;; Return value:  Size  Location     Type
  9281 ;;		None               void
  9282 ;; Registers used:
  9283 ;;		wreg
  9284 ;; Tracked objects:
  9285 ;;		On entry : 0/0
  9286 ;;		On exit  : 0/0
  9287 ;;		Unchanged: 0/0
  9288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9293 ;;Total ram usage:        1 bytes
  9294 ;; Hardware stack levels used:    1
  9295 ;; Hardware stack levels required when called:    5
  9296 ;; This function calls:
  9297 ;;		Nothing
  9298 ;; This function is called by:
  9299 ;;		_RF_Initialization
  9300 ;; This function uses a non-reentrant model
  9301 ;;
  9302                           
  9303                           
  9304                           ;psect for function _setRF_Initialization
  9305  1E43                     _setRF_Initialization:	
  9306                           
  9307                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9308                           
  9309                           ;incstack = 0
  9310                           ; Regs used in _setRF_Initialization: [wreg]
  9311  1E43  3015               	movlw	21
  9312  1E44  0020               	movlb	0	; select bank0
  9313  1E45  00A0               	movwf	??_setRF_Initialization
  9314  1E46  0820               	movf	??_setRF_Initialization,w
  9315  1E47  0021               	movlb	1	; select bank1
  9316  1E48  00D5               	movwf	_Tx_Length^(0+128)
  9317  1E49  0008               	return
  9318  1E4A                     __end_of_setRF_Initialization:	
  9319                           
  9320                           	psect	text47
  9321  1DE4                     __ptext47:	
  9322 ;; *************** function _PowerFault_Main *****************
  9323 ;; Defined at:
  9324 ;;		line 17 in file "../src/PowerFault_B1.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;		None
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;		None
  9329 ;; Return value:  Size  Location     Type
  9330 ;;		None               void
  9331 ;; Registers used:
  9332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        0 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:   11
  9345 ;; This function calls:
  9346 ;;		_setPowerFault_Main
  9347 ;; This function is called by:
  9348 ;;		_main
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function _PowerFault_Main
  9354  1DE4                     _PowerFault_Main:	
  9355                           
  9356                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9360  1DE4  318D  2582         	fcall	_setPowerFault_Main
  9361  1DE6  0008               	return
  9362  1DE7                     __end_of_PowerFault_Main:	
  9363                           
  9364                           	psect	text48
  9365  0D82                     __ptext48:	
  9366 ;; *************** function _setPowerFault_Main *****************
  9367 ;; Defined at:
  9368 ;;		line 55 in file "../src/PowerFault_B1.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;		None
  9371 ;; Auto vars:     Size  Location     Type
  9372 ;;		None
  9373 ;; Return value:  Size  Location     Type
  9374 ;;		None               void
  9375 ;; Registers used:
  9376 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9377 ;; Tracked objects:
  9378 ;;		On entry : 0/0
  9379 ;;		On exit  : 0/0
  9380 ;;		Unchanged: 0/0
  9381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;Total ram usage:        1 bytes
  9387 ;; Hardware stack levels used:    1
  9388 ;; Hardware stack levels required when called:   10
  9389 ;; This function calls:
  9390 ;;		_getTemp_Safe
  9391 ;;		_setPowerFault_Exceptions
  9392 ;; This function is called by:
  9393 ;;		_PowerFault_Main
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           
  9398                           ;psect for function _setPowerFault_Main
  9399  0D82                     _setPowerFault_Main:	
  9400                           
  9401                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9402                           
  9403                           ;incstack = 0
  9404                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9405  0D82  0021               	movlb	1	; select bank1
  9406  0D83  1C3E               	btfss	_PF1^(0+128),0
  9407  0D84  0008               	return
  9408                           
  9409                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9410  0D85  19BE               	btfsc	_PF1^(0+128),3
  9411  0D86  2DA4               	goto	l7763
  9412                           
  9413                           ;PowerFault_B1.c: 58: PF1.Time++;
  9414  0D87  3001               	movlw	1
  9415  0D88  07C0               	addwf	(_PF1^(0+128)+2),f
  9416  0D89  3000               	movlw	0
  9417  0D8A  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9418                           
  9419                           ;PowerFault_B1.c: 60: {
  9420                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9421  0D8B  3002               	movlw	2
  9422  0D8C  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9423  0D8D  30BC               	movlw	188
  9424  0D8E  1903               	skipnz
  9425  0D8F  0240               	subwf	(_PF1^(0+128)+2),w
  9426  0D90  1C03               	skipc
  9427  0D91  0008               	return
  9428  0D92  319E  2612  318D   	fcall	_getTemp_Safe
  9429  0D95  3A01               	xorlw	1
  9430  0D96  1D03               	skipz
  9431  0D97  2D9E               	goto	l7761
  9432                           
  9433                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9434  0D98  0021               	movlb	1	; select bank1
  9435  0D99  01C0               	clrf	(_PF1^(0+128)+2)
  9436  0D9A  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9437                           
  9438                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9439  0D9B  15BE               	bsf	_PF1^(0+128),3
  9440                           
  9441                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9442  0D9C  113E               	bcf	_PF1^(0+128),2
  9443                           
  9444                           ;PowerFault_B1.c: 65: } else {
  9445  0D9D  0008               	return
  9446  0D9E                     l7761:	
  9447                           
  9448                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9449  0D9E  30BC               	movlw	188
  9450  0D9F  0021               	movlb	1	; select bank1
  9451  0DA0  00C0               	movwf	(_PF1^(0+128)+2)
  9452  0DA1  3002               	movlw	2
  9453  0DA2  00C1               	movwf	(_PF1^(0+128)+3)
  9454                           
  9455                           ;PowerFault_B1.c: 67: }
  9456                           ;PowerFault_B1.c: 68: }
  9457                           ;PowerFault_B1.c: 69: } else {
  9458  0DA3  0008               	return
  9459  0DA4                     l7763:	
  9460                           
  9461                           ;PowerFault_B1.c: 70: PF1.Time++;
  9462  0DA4  3001               	movlw	1
  9463  0DA5  07C0               	addwf	(_PF1^(0+128)+2),f
  9464  0DA6  3000               	movlw	0
  9465  0DA7  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9466                           
  9467                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9468  0DA8  3000               	movlw	0
  9469  0DA9  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9470  0DAA  3002               	movlw	2
  9471  0DAB  1903               	skipnz
  9472  0DAC  0240               	subwf	(_PF1^(0+128)+2),w
  9473  0DAD  1C03               	skipc
  9474  0DAE  0008               	return
  9475                           
  9476                           ;PowerFault_B1.c: 72: {
  9477                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9478  0DAF  01C0               	clrf	(_PF1^(0+128)+2)
  9479  0DB0  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9480                           
  9481                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9482  0DB1  11BE               	bcf	_PF1^(0+128),3
  9483                           
  9484                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9485  0DB2  1CBE               	btfss	_PF1^(0+128),1
  9486  0DB3  2DD2               	goto	l7785
  9487                           
  9488                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9489  0DB4  3001               	movlw	1
  9490  0DB5  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9491  0DB6  3091               	movlw	145
  9492  0DB7  1903               	skipnz
  9493  0DB8  0242               	subwf	(_PF1^(0+128)+4),w
  9494  0DB9  1803               	skipnc
  9495  0DBA  2DF0               	goto	l7797
  9496  0DBB  3000               	movlw	0
  9497  0DBC  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9498  0DBD  30C8               	movlw	200
  9499  0DBE  1903               	skipnz
  9500  0DBF  0242               	subwf	(_PF1^(0+128)+4),w
  9501  0DC0  1C03               	skipc
  9502  0DC1  2DF0               	goto	l7797
  9503                           
  9504                           ;PowerFault_B1.c: 78: PF1.Count++;
  9505  0DC2  3001               	movlw	1
  9506  0DC3  0020               	movlb	0	; select bank0
  9507  0DC4  00B1               	movwf	??_setPowerFault_Main
  9508  0DC5  0831               	movf	??_setPowerFault_Main,w
  9509  0DC6  0021               	movlb	1	; select bank1
  9510  0DC7  07BF               	addwf	(_PF1^(0+128)+1),f
  9511                           
  9512                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9513  0DC8  3002               	movlw	2
  9514  0DC9  023F               	subwf	(_PF1^(0+128)+1),w
  9515  0DCA  1C03               	skipc
  9516  0DCB  2DF2               	goto	l7799
  9517                           
  9518                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9519  0DCC  01BF               	clrf	(_PF1^(0+128)+1)
  9520                           
  9521                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9522  0DCD  3000               	movlw	0
  9523  0DCE  3194  248D  318D   	fcall	_setPowerFault_Exceptions
  9524                           
  9525                           ;PowerFault_B1.c: 82: }
  9526                           ;PowerFault_B1.c: 83: } else {
  9527  0DD1  2DF2               	goto	l7799
  9528  0DD2                     l7785:	
  9529                           ;PowerFault_B1.c: 85: }
  9530                           ;PowerFault_B1.c: 86: } else {
  9531                           
  9532                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9533                           
  9534                           
  9535                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9536  0DD2  3001               	movlw	1
  9537  0DD3  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9538  0DD4  3090               	movlw	144
  9539  0DD5  1903               	skipnz
  9540  0DD6  0242               	subwf	(_PF1^(0+128)+4),w
  9541  0DD7  1803               	skipnc
  9542  0DD8  2DE0               	goto	l7789
  9543  0DD9  3000               	movlw	0
  9544  0DDA  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9545  0DDB  30D3               	movlw	211
  9546  0DDC  1903               	skipnz
  9547  0DDD  0242               	subwf	(_PF1^(0+128)+4),w
  9548  0DDE  1803               	skipnc
  9549  0DDF  2DF0               	goto	l7797
  9550  0DE0                     l7789:	
  9551                           
  9552                           ;PowerFault_B1.c: 88: PF1.Count++;
  9553  0DE0  3001               	movlw	1
  9554  0DE1  0020               	movlb	0	; select bank0
  9555  0DE2  00B1               	movwf	??_setPowerFault_Main
  9556  0DE3  0831               	movf	??_setPowerFault_Main,w
  9557  0DE4  0021               	movlb	1	; select bank1
  9558  0DE5  07BF               	addwf	(_PF1^(0+128)+1),f
  9559                           
  9560                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9561  0DE6  3002               	movlw	2
  9562  0DE7  023F               	subwf	(_PF1^(0+128)+1),w
  9563  0DE8  1C03               	skipc
  9564  0DE9  2DF2               	goto	l7799
  9565                           
  9566                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9567  0DEA  01BF               	clrf	(_PF1^(0+128)+1)
  9568                           
  9569                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9570  0DEB  3001               	movlw	1
  9571  0DEC  3194  248D  318D   	fcall	_setPowerFault_Exceptions
  9572                           
  9573                           ;PowerFault_B1.c: 92: }
  9574                           ;PowerFault_B1.c: 93: } else {
  9575  0DEF  2DF2               	goto	l7799
  9576  0DF0                     l7797:	
  9577                           
  9578                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9579  0DF0  0021               	movlb	1	; select bank1
  9580  0DF1  01BF               	clrf	(_PF1^(0+128)+1)
  9581  0DF2                     l7799:	
  9582                           
  9583                           ;PowerFault_B1.c: 95: }
  9584                           ;PowerFault_B1.c: 97: }
  9585                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9586  0DF2  0021               	movlb	1	; select bank1
  9587  0DF3  1CBE               	btfss	_PF1^(0+128),1
  9588                           
  9589                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9590  0DF4  153E               	bsf	_PF1^(0+128),2
  9591                           
  9592                           ;PowerFault_B1.c: 100: }
  9593                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9594  0DF5  01C2               	clrf	(_PF1^(0+128)+4)
  9595  0DF6  01C3               	clrf	((_PF1+1)^(0+128)+4)
  9596  0DF7  0008               	return
  9597  0DF8                     __end_of_setPowerFault_Main:	
  9598                           
  9599                           	psect	text49
  9600  148D                     __ptext49:	
  9601 ;; *************** function _setPowerFault_Exceptions *****************
  9602 ;; Defined at:
  9603 ;;		line 107 in file "../src/PowerFault_B1.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;  command         1    wreg     unsigned char 
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;  command         1   16[BANK0 ] unsigned char 
  9608 ;;  i               1   15[BANK0 ] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;		None               void
  9611 ;; Registers used:
  9612 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:        3 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    9
  9625 ;; This function calls:
  9626 ;;		_DimmerLights_Exceptions
  9627 ;;		_setLED
  9628 ;;		_setRF_Enable
  9629 ;;		_setSw_Enable
  9630 ;; This function is called by:
  9631 ;;		_setPowerFault_Main
  9632 ;; This function uses a non-reentrant model
  9633 ;;
  9634                           
  9635                           
  9636                           ;psect for function _setPowerFault_Exceptions
  9637  148D                     _setPowerFault_Exceptions:	
  9638                           
  9639                           ;incstack = 0
  9640                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9641                           ;setPowerFault_Exceptions@command stored from wreg
  9642  148D  0020               	movlb	0	; select bank0
  9643  148E  00B0               	movwf	setPowerFault_Exceptions@command
  9644                           
  9645                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9646  148F  0830               	movf	setPowerFault_Exceptions@command,w
  9647  1490  3A01               	xorlw	1
  9648  1491  3000               	movlw	0
  9649  1492  1D03               	skipz
  9650  1493  3001               	movlw	1
  9651  1494  00AE               	movwf	??_setPowerFault_Exceptions
  9652  1495  082E               	movf	??_setPowerFault_Exceptions,w
  9653  1496  00AF               	movwf	setPowerFault_Exceptions@i
  9654                           
  9655                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
  9656  1497  0830               	movf	setPowerFault_Exceptions@command,w
  9657  1498  0021               	movlb	1	; select bank1
  9658  1499  10BE               	bcf	_PF1^(0+128),1
  9659  149A  1D03               	skipz
  9660  149B  14BE               	bsf	_PF1^(0+128),1
  9661                           
  9662                           ;PowerFault_B1.c: 110: PF1.Safe = i;
  9663  149C  0020               	movlb	0	; select bank0
  9664  149D  082F               	movf	setPowerFault_Exceptions@i,w
  9665  149E  0021               	movlb	1	; select bank1
  9666  149F  113E               	bcf	_PF1^(0+128),2
  9667  14A0  1D03               	skipz
  9668  14A1  153E               	bsf	_PF1^(0+128),2
  9669                           
  9670                           ;PowerFault_B1.c: 111: if (command == 1) {
  9671  14A2  0020               	movlb	0	; select bank0
  9672  14A3  0830               	movf	setPowerFault_Exceptions@command,w
  9673  14A4  3A01               	xorlw	1
  9674  14A5  1D03               	skipz
  9675  14A6  2CB2               	goto	l1702
  9676                           
  9677                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
  9678  14A7  3003               	movlw	3
  9679  14A8  3195  253D  3194   	fcall	_DimmerLights_Exceptions
  9680                           
  9681                           ;PowerFault_B1.c: 114: setLED(2, 1);
  9682  14AB  0020               	movlb	0	; select bank0
  9683  14AC  01A1               	clrf	setLED@command
  9684  14AD  0AA1               	incf	setLED@command,f
  9685  14AE  3002               	movlw	2
  9686  14AF  318B  2301  3194   	fcall	_setLED
  9687  14B2                     l1702:	
  9688                           
  9689                           ;PowerFault_B1.c: 116: }
  9690                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
  9691  14B2  0020               	movlb	0	; select bank0
  9692  14B3  0830               	movf	setPowerFault_Exceptions@command,w
  9693  14B4  3E0A               	addlw	10
  9694  14B5  00AE               	movwf	??_setPowerFault_Exceptions
  9695  14B6  082E               	movf	??_setPowerFault_Exceptions,w
  9696  14B7  00A1               	movwf	setLED@command
  9697  14B8  3063               	movlw	99
  9698  14B9  318B  2301  3194   	fcall	_setLED
  9699                           
  9700                           ;PowerFault_B1.c: 119: setSw_Enable(i);
  9701  14BC  0020               	movlb	0	; select bank0
  9702  14BD  082F               	movf	setPowerFault_Exceptions@i,w
  9703  14BE  319F  2763  3194   	fcall	_setSw_Enable
  9704                           
  9705                           ;PowerFault_B1.c: 121: setRF_Enable(i);
  9706  14C1  0020               	movlb	0	; select bank0
  9707  14C2  082F               	movf	setPowerFault_Exceptions@i,w
  9708  14C3  319F  2737         	fcall	_setRF_Enable
  9709  14C5  0008               	return
  9710  14C6                     __end_of_setPowerFault_Exceptions:	
  9711                           
  9712                           	psect	text50
  9713  1F63                     __ptext50:	
  9714 ;; *************** function _setSw_Enable *****************
  9715 ;; Defined at:
  9716 ;;		line 89 in file "../src/Switch_B1.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;  command         1    wreg     unsigned char 
  9719 ;; Auto vars:     Size  Location     Type
  9720 ;;  command         1    2[BANK0 ] unsigned char 
  9721 ;; Return value:  Size  Location     Type
  9722 ;;		None               void
  9723 ;; Registers used:
  9724 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9725 ;; Tracked objects:
  9726 ;;		On entry : 0/0
  9727 ;;		On exit  : 0/0
  9728 ;;		Unchanged: 0/0
  9729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;Total ram usage:        1 bytes
  9735 ;; Hardware stack levels used:    1
  9736 ;; Hardware stack levels required when called:    6
  9737 ;; This function calls:
  9738 ;;		_SwPointSelect
  9739 ;; This function is called by:
  9740 ;;		_setOverTemp_Exceptions
  9741 ;;		_setPowerFault_Exceptions
  9742 ;;		_my_Main
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           
  9747                           ;psect for function _setSw_Enable
  9748  1F63                     _setSw_Enable:	
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9752                           ;setSw_Enable@command stored from wreg
  9753  1F63  0020               	movlb	0	; select bank0
  9754  1F64  00A2               	movwf	setSw_Enable@command
  9755                           
  9756                           ;Switch_B1.c: 92: SwPointSelect(1);
  9757  1F65  3001               	movlw	1
  9758  1F66  319E  26C7         	fcall	_SwPointSelect
  9759                           
  9760                           ;Switch_B1.c: 93: Sw->Enable = command;
  9761  1F68  0020               	movlb	0	; select bank0
  9762  1F69  086E               	movf	_Sw,w
  9763  1F6A  0086               	movwf	6
  9764  1F6B  3001               	movlw	1	; select bank2/3
  9765  1F6C  0087               	movwf	7
  9766  1F6D  0822               	movf	setSw_Enable@command,w
  9767  1F6E  1001               	bcf	1,0
  9768  1F6F  1D03               	skipz
  9769  1F70  1401               	bsf	1,0
  9770  1F71  0008               	return
  9771  1F72                     __end_of_setSw_Enable:	
  9772                           
  9773                           	psect	text51
  9774  1F37                     __ptext51:	
  9775 ;; *************** function _setRF_Enable *****************
  9776 ;; Defined at:
  9777 ;;		line 193 in file "../src/RF_Control_B1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;  command         1    wreg     unsigned char 
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  command         1    0[BANK0 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, status,2
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        1 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    5
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_setOverTemp_Exceptions
  9802 ;;		_setPowerFault_Exceptions
  9803 ;;		_my_Main
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function _setRF_Enable
  9809  1F37                     _setRF_Enable:	
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in _setRF_Enable: [wreg+status,2]
  9813                           ;setRF_Enable@command stored from wreg
  9814  1F37  0020               	movlb	0	; select bank0
  9815  1F38  00A0               	movwf	setRF_Enable@command
  9816                           
  9817                           ;RF_Control_B1.c: 194: RF1.Enable = command;
  9818  1F39  0820               	movf	setRF_Enable@command,w
  9819  1F3A  0021               	movlb	1	; select bank1
  9820  1F3B  1046               	bcf	_RF1^(0+128),0
  9821  1F3C  1D03               	skipz
  9822  1F3D  1446               	bsf	_RF1^(0+128),0
  9823                           
  9824                           ;RF_Control_B1.c: 195: RF1.Learn = 0;
  9825  1F3E  1346               	bcf	_RF1^(0+128),6
  9826                           
  9827                           ;RF_Control_B1.c: 196: RF1.TransceiveGO = 0;
  9828  1F3F  1146               	bcf	_RF1^(0+128),2
  9829                           
  9830                           ;RF_Control_B1.c: 197: RF1.RxStatus = 0;
  9831  1F40  11C6               	bcf	_RF1^(0+128),3
  9832                           
  9833                           ;RF_Control_B1.c: 198: RF1.ReceiveGO = 0;
  9834  1F41  10C6               	bcf	_RF1^(0+128),1
  9835                           
  9836                           ;RF_Control_B1.c: 199: RF1.DebounceTime = 0;
  9837  1F42  01CA               	clrf	(_RF1^(0+128)+4)
  9838                           
  9839                           ;RF_Control_B1.c: 200: RF1.Debounce = 0;
  9840  1F43  12C6               	bcf	_RF1^(0+128),5
  9841  1F44  0008               	return
  9842  1F45                     __end_of_setRF_Enable:	
  9843                           
  9844                           	psect	text52
  9845  153D                     __ptext52:	
  9846 ;; *************** function _DimmerLights_Exceptions *****************
  9847 ;; Defined at:
  9848 ;;		line 513 in file "../src/Dimmer_B1.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  status          1    wreg     unsigned char 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  status          1   13[BANK0 ] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;		None               void
  9855 ;; Registers used:
  9856 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9865 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9866 ;;Total ram usage:        1 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    8
  9869 ;; This function calls:
  9870 ;;		_getDimmerLights_StatusFlag
  9871 ;;		_setBuz
  9872 ;;		_setDimmerLights_ERROR
  9873 ;;		_setDimmerLights_TriggerERROR
  9874 ;; This function is called by:
  9875 ;;		_setOverTemp_Exceptions
  9876 ;;		_setPowerFault_Exceptions
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function _DimmerLights_Exceptions
  9882  153D                     _DimmerLights_Exceptions:	
  9883                           
  9884                           ;incstack = 0
  9885                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9886                           ;DimmerLights_Exceptions@status stored from wreg
  9887  153D  0020               	movlb	0	; select bank0
  9888  153E  00AD               	movwf	DimmerLights_Exceptions@status
  9889                           
  9890                           ;Dimmer_B1.c: 514: if (status == 1) {
  9891  153F  082D               	movf	DimmerLights_Exceptions@status,w
  9892  1540  3A01               	xorlw	1
  9893  1541  1D03               	skipz
  9894  1542  2D53               	goto	l7533
  9895                           
  9896                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  9897  1543  319E  2686  3195   	fcall	_getDimmerLights_StatusFlag
  9898  1546  3A01               	xorlw	1
  9899  1547  1D03               	skipz
  9900  1548  2D6B               	goto	l7541
  9901                           
  9902                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  9903  1549  302C               	movlw	44
  9904  154A  0020               	movlb	0	; select bank0
  9905  154B  00A9               	movwf	setBuz@time
  9906  154C  3001               	movlw	1
  9907  154D  00AA               	movwf	setBuz@time+1
  9908  154E  300A               	movlw	10
  9909  154F  3189  2130  3195   	fcall	_setBuz
  9910  1552  2D6B               	goto	l7541
  9911  1553                     l7533:	
  9912                           ;Dimmer_B1.c: 528: } else if (status == 2)
  9913                           
  9914                           ;Dimmer_B1.c: 517: }
  9915                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  9916                           
  9917  1553  0020               	movlb	0	; select bank0
  9918  1554  082D               	movf	DimmerLights_Exceptions@status,w
  9919  1555  3A02               	xorlw	2
  9920  1556  1D03               	skipz
  9921  1557  2D66               	goto	l7539
  9922                           
  9923                           ;Dimmer_B1.c: 529: {
  9924                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  9925  1558  302C               	movlw	44
  9926  1559  00A9               	movwf	setBuz@time
  9927  155A  3001               	movlw	1
  9928  155B  00AA               	movwf	setBuz@time+1
  9929  155C  3005               	movlw	5
  9930  155D  3189  2130  3195   	fcall	_setBuz
  9931                           
  9932                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  9933  1560  0021               	movlb	1	; select bank1
  9934  1561  0A50               	incf	_Dimmer^(0+128),w
  9935  1562  0086               	movwf	6
  9936  1563  0187               	clrf	7
  9937  1564  0801               	movf	1,w
  9938  1565  2D6C               	goto	L4
  9939  1566                     l7539:	
  9940                           ;Dimmer_B1.c: 532: } else if (status == 3)
  9941                           
  9942  1566  0020               	movlb	0	; select bank0
  9943  1567  082D               	movf	DimmerLights_Exceptions@status,w
  9944  1568  3A03               	xorlw	3
  9945  1569  1D03               	skipz
  9946  156A  2D6F               	goto	l781
  9947  156B                     l7541:	
  9948                           
  9949                           ;Dimmer_B1.c: 533: {
  9950                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  9951  156B  3001               	movlw	1
  9952  156C                     L4:	
  9953  156C  3197  27B0  3195   	fcall	_setDimmerLights_ERROR
  9954  156F                     l781:	
  9955                           
  9956                           ;Dimmer_B1.c: 543: }
  9957                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  9958  156F  0020               	movlb	0	; select bank0
  9959  1570  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9960  1571  3001               	movlw	1
  9961  1572  3193  2367  3195   	fcall	_setDimmerLights_TriggerERROR
  9962                           
  9963                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
  9964  1575  0021               	movlb	1	; select bank1
  9965  1576  1B20               	btfsc	_myMain^(0+128),6
  9966  1577  0008               	return
  9967                           
  9968                           ;Dimmer_B1.c: 556: myMain.i = 0;
  9969  1578  102E               	bcf	(_myMain^(0+128)+14),0
  9970                           
  9971                           ;Dimmer_B1.c: 557: myMain.j = 0;
  9972  1579  10AE               	bcf	(_myMain^(0+128)+14),1
  9973                           
  9974                           ;Dimmer_B1.c: 558: myMain.k = 1;
  9975  157A  152E               	bsf	(_myMain^(0+128)+14),2
  9976                           
  9977                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
  9978  157B  01A7               	clrf	(_myMain^(0+128)+7)
  9979  157C  01A8               	clrf	((_myMain+1)^(0+128)+7)
  9980  157D  0008               	return
  9981  157E                     __end_of_DimmerLights_Exceptions:	
  9982                           
  9983                           	psect	text53
  9984  1367                     __ptext53:	
  9985 ;; *************** function _setDimmerLights_TriggerERROR *****************
  9986 ;; Defined at:
  9987 ;;		line 582 in file "../src/Dimmer_B1.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;  lights          1    wreg     unsigned char 
  9990 ;;  command         1    2[BANK0 ] unsigned char 
  9991 ;; Auto vars:     Size  Location     Type
  9992 ;;  lights          1    3[BANK0 ] unsigned char 
  9993 ;; Return value:  Size  Location     Type
  9994 ;;		None               void
  9995 ;; Registers used:
  9996 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9997 ;; Tracked objects:
  9998 ;;		On entry : 0/0
  9999 ;;		On exit  : 0/0
 10000 ;;		Unchanged: 0/0
 10001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10002 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;Total ram usage:        2 bytes
 10007 ;; Hardware stack levels used:    1
 10008 ;; Hardware stack levels required when called:    6
 10009 ;; This function calls:
 10010 ;;		_DimmerLightsPointSelect
 10011 ;; This function is called by:
 10012 ;;		_DimmerLights_Exceptions
 10013 ;; This function uses a non-reentrant model
 10014 ;;
 10015                           
 10016                           
 10017                           ;psect for function _setDimmerLights_TriggerERROR
 10018  1367                     _setDimmerLights_TriggerERROR:	
 10019                           
 10020                           ;incstack = 0
 10021                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10022                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10023  1367  0020               	movlb	0	; select bank0
 10024  1368  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10025                           
 10026                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 10027  1369  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10028  136A  319E  26B1         	fcall	_DimmerLightsPointSelect
 10029                           
 10030                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 10031  136C  0020               	movlb	0	; select bank0
 10032  136D  086D               	movf	_DimmerLights,w
 10033  136E  3E08               	addlw	8
 10034  136F  0086               	movwf	6
 10035  1370  3001               	movlw	1	; select bank2/3
 10036  1371  0087               	movwf	7
 10037  1372  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10038  1373  1101               	bcf	1,2
 10039  1374  1D03               	skipz
 10040  1375  1501               	bsf	1,2
 10041                           
 10042                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 10043  1376  086D               	movf	_DimmerLights,w
 10044  1377  3E08               	addlw	8
 10045  1378  0086               	movwf	6
 10046  1379  3001               	movlw	1	; select bank2/3
 10047  137A  0087               	movwf	7
 10048  137B  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10049  137C  1081               	bcf	1,1
 10050  137D  1D03               	skipz
 10051  137E  1481               	bsf	1,1
 10052                           
 10053                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 10054  137F  086D               	movf	_DimmerLights,w
 10055  1380  3E08               	addlw	8
 10056  1381  0086               	movwf	6
 10057  1382  3001               	movlw	1	; select bank2/3
 10058  1383  0087               	movwf	7
 10059  1384  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10060  1385  1201               	bcf	1,4
 10061  1386  1D03               	skipz
 10062  1387  1601               	bsf	1,4
 10063                           
 10064                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 10065  1388  086D               	movf	_DimmerLights,w
 10066  1389  3E08               	addlw	8
 10067  138A  0086               	movwf	6
 10068  138B  3001               	movlw	1	; select bank2/3
 10069  138C  0087               	movwf	7
 10070  138D  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10071  138E  1181               	bcf	1,3
 10072  138F  1D03               	skipz
 10073  1390  1581               	bsf	1,3
 10074  1391  0008               	return
 10075  1392                     __end_of_setDimmerLights_TriggerERROR:	
 10076                           
 10077                           	psect	text54
 10078  17B0                     __ptext54:	
 10079 ;; *************** function _setDimmerLights_ERROR *****************
 10080 ;; Defined at:
 10081 ;;		line 564 in file "../src/Dimmer_B1.c"
 10082 ;; Parameters:    Size  Location     Type
 10083 ;;  lights          1    wreg     unsigned char 
 10084 ;; Auto vars:     Size  Location     Type
 10085 ;;  lights          1    5[BANK0 ] unsigned char 
 10086 ;; Return value:  Size  Location     Type
 10087 ;;		None               void
 10088 ;; Registers used:
 10089 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10090 ;; Tracked objects:
 10091 ;;		On entry : 0/0
 10092 ;;		On exit  : 0/0
 10093 ;;		Unchanged: 0/0
 10094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;Total ram usage:        2 bytes
 10100 ;; Hardware stack levels used:    1
 10101 ;; Hardware stack levels required when called:    7
 10102 ;; This function calls:
 10103 ;;		_DimmerLightsPointSelect
 10104 ;;		_setLED
 10105 ;;		_setRFSW_Status
 10106 ;;		_setSw_Status
 10107 ;; This function is called by:
 10108 ;;		_DimmerLights_Exceptions
 10109 ;; This function uses a non-reentrant model
 10110 ;;
 10111                           
 10112                           
 10113                           ;psect for function _setDimmerLights_ERROR
 10114  17B0                     _setDimmerLights_ERROR:	
 10115                           
 10116                           ;incstack = 0
 10117                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10118                           ;setDimmerLights_ERROR@lights stored from wreg
 10119  17B0  0020               	movlb	0	; select bank0
 10120  17B1  00A5               	movwf	setDimmerLights_ERROR@lights
 10121                           
 10122                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 10123  17B2  0825               	movf	setDimmerLights_ERROR@lights,w
 10124  17B3  319E  26B1  3197   	fcall	_DimmerLightsPointSelect
 10125                           
 10126                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 10127  17B6  0020               	movlb	0	; select bank0
 10128  17B7  086D               	movf	_DimmerLights,w
 10129  17B8  0086               	movwf	6
 10130  17B9  3001               	movlw	1	; select bank2/3
 10131  17BA  0087               	movwf	7
 10132  17BB  1E81               	btfss	1,5
 10133  17BC  0008               	return
 10134                           
 10135                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 10136  17BD  086D               	movf	_DimmerLights,w
 10137  17BE  0086               	movwf	6
 10138  17BF  3001               	movlw	1	; select bank2/3
 10139  17C0  0087               	movwf	7
 10140  17C1  1081               	bcf	1,1
 10141                           
 10142                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 10143  17C2  086D               	movf	_DimmerLights,w
 10144  17C3  0086               	movwf	6
 10145  17C4  3001               	movlw	1	; select bank2/3
 10146  17C5  0087               	movwf	7
 10147  17C6  1181               	bcf	1,3
 10148                           
 10149                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 10150  17C7  086D               	movf	_DimmerLights,w
 10151  17C8  0086               	movwf	6
 10152  17C9  3001               	movlw	1	; select bank2/3
 10153  17CA  0087               	movwf	7
 10154  17CB  1201               	bcf	1,4
 10155                           
 10156                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 10157  17CC  086D               	movf	_DimmerLights,w
 10158  17CD  0086               	movwf	6
 10159  17CE  3001               	movlw	1	; select bank2/3
 10160  17CF  0087               	movwf	7
 10161  17D0  1301               	bcf	1,6
 10162                           
 10163                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 10164  17D1  3007               	movlw	7
 10165  17D2  00A4               	movwf	??_setDimmerLights_ERROR
 10166  17D3  086D               	movf	_DimmerLights,w
 10167  17D4  3E02               	addlw	2
 10168  17D5  0086               	movwf	6
 10169  17D6  3001               	movlw	1	; select bank2/3
 10170  17D7  0087               	movwf	7
 10171  17D8  0824               	movf	??_setDimmerLights_ERROR,w
 10172  17D9  0081               	movwf	1
 10173                           
 10174                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10175  17DA  086D               	movf	_DimmerLights,w
 10176  17DB  3E06               	addlw	6
 10177  17DC  0086               	movwf	6
 10178  17DD  3001               	movlw	1	; select bank2/3
 10179  17DE  0087               	movwf	7
 10180  17DF  0801               	movf	1,w
 10181  17E0  00A4               	movwf	??_setDimmerLights_ERROR
 10182  17E1  086D               	movf	_DimmerLights,w
 10183  17E2  3E04               	addlw	4
 10184  17E3  0086               	movwf	6
 10185  17E4  3001               	movlw	1	; select bank2/3
 10186  17E5  0087               	movwf	7
 10187  17E6  0824               	movf	??_setDimmerLights_ERROR,w
 10188  17E7  0081               	movwf	1
 10189                           
 10190                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 10191  17E8  0021               	movlb	1	; select bank1
 10192  17E9  0850               	movf	_Dimmer^(0+128),w
 10193  17EA  0086               	movwf	6
 10194  17EB  0187               	clrf	7
 10195  17EC  1401               	bsf	1,0
 10196                           
 10197                           ;Dimmer_B1.c: 575: ;;
 10198                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 10199  17ED  0020               	movlb	0	; select bank0
 10200  17EE  01A1               	clrf	setLED@command
 10201  17EF  0AA1               	incf	setLED@command,f
 10202  17F0  0825               	movf	setDimmerLights_ERROR@lights,w
 10203  17F1  318B  2301  3197   	fcall	_setLED
 10204                           
 10205                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 10206  17F4  0020               	movlb	0	; select bank0
 10207  17F5  01A2               	clrf	setSw_Status@command
 10208  17F6  0825               	movf	setDimmerLights_ERROR@lights,w
 10209  17F7  319F  2745  3197   	fcall	_setSw_Status
 10210                           
 10211                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 10212  17FA  0020               	movlb	0	; select bank0
 10213  17FB  01A2               	clrf	setRFSW_Status@command
 10214  17FC  0825               	movf	setDimmerLights_ERROR@lights,w
 10215  17FD  319F  2729         	fcall	_setRFSW_Status
 10216  17FF  0008               	return
 10217  1800                     __end_of_setDimmerLights_ERROR:	
 10218                           
 10219                           	psect	text55
 10220  1E12                     __ptext55:	
 10221 ;; *************** function _getTemp_Safe *****************
 10222 ;; Defined at:
 10223 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10224 ;; Parameters:    Size  Location     Type
 10225 ;;		None
 10226 ;; Auto vars:     Size  Location     Type
 10227 ;;		None
 10228 ;; Return value:  Size  Location     Type
 10229 ;;                  1    wreg      unsigned char 
 10230 ;; Registers used:
 10231 ;;		wreg, status,2, status,0
 10232 ;; Tracked objects:
 10233 ;;		On entry : 0/0
 10234 ;;		On exit  : 0/0
 10235 ;;		Unchanged: 0/0
 10236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10241 ;;Total ram usage:        0 bytes
 10242 ;; Hardware stack levels used:    1
 10243 ;; Hardware stack levels required when called:    5
 10244 ;; This function calls:
 10245 ;;		Nothing
 10246 ;; This function is called by:
 10247 ;;		_setPowerFault_Main
 10248 ;; This function uses a non-reentrant model
 10249 ;;
 10250                           
 10251                           
 10252                           ;psect for function _getTemp_Safe
 10253  1E12                     _getTemp_Safe:	
 10254                           
 10255                           ;OverTemperature_B1.c: 22: return Temp1.Safe;
 10256                           
 10257                           ;incstack = 0
 10258                           ; Regs used in _getTemp_Safe: [wreg+status,2+status,0]
 10259  1E12  0021               	movlb	1	; select bank1
 10260  1E13  0E59               	swapf	_Temp1^(0+128),w
 10261  1E14  3901               	andlw	1
 10262  1E15  0008               	return
 10263  1E16                     __end_of_getTemp_Safe:	
 10264                           
 10265                           	psect	text56
 10266  1DE1                     __ptext56:	
 10267 ;; *************** function _PowerFault_Initialization *****************
 10268 ;; Defined at:
 10269 ;;		line 10 in file "../src/PowerFault_B1.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;		None
 10274 ;; Return value:  Size  Location     Type
 10275 ;;		None               void
 10276 ;; Registers used:
 10277 ;;		status,2, status,0, pclath, cstack
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10287 ;;Total ram usage:        0 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    6
 10290 ;; This function calls:
 10291 ;;		_setPowerFault_Initialization
 10292 ;; This function is called by:
 10293 ;;		_main
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _PowerFault_Initialization
 10299  1DE1                     _PowerFault_Initialization:	
 10300                           
 10301                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10302                           
 10303                           ;incstack = 0
 10304                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10305  1DE1  319E  260E         	fcall	_setPowerFault_Initialization
 10306  1DE3  0008               	return
 10307  1DE4                     __end_of_PowerFault_Initialization:	
 10308                           
 10309                           	psect	text57
 10310  1E0E                     __ptext57:	
 10311 ;; *************** function _setPowerFault_Initialization *****************
 10312 ;; Defined at:
 10313 ;;		line 24 in file "../src/PowerFault_B1.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;		None
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;		None
 10318 ;; Return value:  Size  Location     Type
 10319 ;;		None               void
 10320 ;; Registers used:
 10321 ;;		None
 10322 ;; Tracked objects:
 10323 ;;		On entry : 0/0
 10324 ;;		On exit  : 0/0
 10325 ;;		Unchanged: 0/0
 10326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;Total ram usage:        0 bytes
 10332 ;; Hardware stack levels used:    1
 10333 ;; Hardware stack levels required when called:    5
 10334 ;; This function calls:
 10335 ;;		Nothing
 10336 ;; This function is called by:
 10337 ;;		_PowerFault_Initialization
 10338 ;; This function uses a non-reentrant model
 10339 ;;
 10340                           
 10341                           
 10342                           ;psect for function _setPowerFault_Initialization
 10343  1E0E                     _setPowerFault_Initialization:	
 10344                           
 10345                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in _setPowerFault_Initialization: []
 10349  1E0E  0021               	movlb	1	; select bank1
 10350  1E0F  143E               	bsf	_PF1^(0+128),0
 10351                           
 10352                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10353  1E10  153E               	bsf	_PF1^(0+128),2
 10354  1E11  0008               	return
 10355  1E12                     __end_of_setPowerFault_Initialization:	
 10356                           
 10357                           	psect	text58
 10358  1F54                     __ptext58:	
 10359 ;; *************** function _Mcu_Initialization *****************
 10360 ;; Defined at:
 10361 ;;		line 30 in file "../src/MCU_B1.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;		None
 10366 ;; Return value:  Size  Location     Type
 10367 ;;		None               void
 10368 ;; Registers used:
 10369 ;;		wreg, status,2, status,0, pclath, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;Total ram usage:        0 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    6
 10382 ;; This function calls:
 10383 ;;		_ADC_Set
 10384 ;;		_Fosc_Set
 10385 ;;		_IOC_Set
 10386 ;;		_IO_Set
 10387 ;;		_TMR0_Set
 10388 ;; This function is called by:
 10389 ;;		_main
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _Mcu_Initialization
 10395  1F54                     _Mcu_Initialization:	
 10396                           
 10397                           ;MCU_B1.c: 32: Fosc_Set();
 10398                           
 10399                           ;incstack = 0
 10400                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10401  1F54  319E  260A  319F   	fcall	_Fosc_Set
 10402                           
 10403                           ;MCU_B1.c: 34: IO_Set();
 10404  1F57  3191  2129  319F   	fcall	_IO_Set
 10405                           
 10406                           ;MCU_B1.c: 36: TMR0_Set();
 10407  1F5A  319E  264A  319F   	fcall	_TMR0_Set
 10408                           
 10409                           ;MCU_B1.c: 38: ;;
 10410                           ;MCU_B1.c: 40: ADC_Set();
 10411  1F5D  319E  263C  319F   	fcall	_ADC_Set
 10412                           
 10413                           ;MCU_B1.c: 44: ;;
 10414                           ;MCU_B1.c: 46: IOC_Set();
 10415  1F60  319F  271C         	fcall	_IOC_Set
 10416  1F62  0008               	return
 10417  1F63                     __end_of_Mcu_Initialization:	
 10418                           
 10419                           	psect	text59
 10420  1E4A                     __ptext59:	
 10421 ;; *************** function _TMR0_Set *****************
 10422 ;; Defined at:
 10423 ;;		line 126 in file "../src/MCU_B1.c"
 10424 ;; Parameters:    Size  Location     Type
 10425 ;;		None
 10426 ;; Auto vars:     Size  Location     Type
 10427 ;;		None
 10428 ;; Return value:  Size  Location     Type
 10429 ;;		None               void
 10430 ;; Registers used:
 10431 ;;		wreg, status,2
 10432 ;; Tracked objects:
 10433 ;;		On entry : 0/0
 10434 ;;		On exit  : 0/0
 10435 ;;		Unchanged: 0/0
 10436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10441 ;;Total ram usage:        0 bytes
 10442 ;; Hardware stack levels used:    1
 10443 ;; Hardware stack levels required when called:    5
 10444 ;; This function calls:
 10445 ;;		Nothing
 10446 ;; This function is called by:
 10447 ;;		_Mcu_Initialization
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _TMR0_Set
 10453  1E4A                     _TMR0_Set:	
 10454                           
 10455                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10459  1E4A  0021               	movlb	1	; select bank1
 10460  1E4B  0195               	clrf	21	;volatile
 10461                           
 10462                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10463  1E4C  3042               	movlw	66
 10464  1E4D  0020               	movlb	0	; select bank0
 10465  1E4E  0095               	movwf	21	;volatile
 10466                           
 10467                           ;MCU_B1.c: 130: TMR0IE = 1;
 10468  1E4F  168B               	bsf	11,5	;volatile
 10469                           
 10470                           ;MCU_B1.c: 131: GIE = 1;
 10471  1E50  178B               	bsf	11,7	;volatile
 10472  1E51  0008               	return
 10473  1E52                     __end_of_TMR0_Set:	
 10474                           
 10475                           	psect	text60
 10476  1129                     __ptext60:	
 10477 ;; *************** function _IO_Set *****************
 10478 ;; Defined at:
 10479 ;;		line 60 in file "../src/MCU_B1.c"
 10480 ;; Parameters:    Size  Location     Type
 10481 ;;		None
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;		None
 10484 ;; Return value:  Size  Location     Type
 10485 ;;		None               void
 10486 ;; Registers used:
 10487 ;;		wreg, status,2
 10488 ;; Tracked objects:
 10489 ;;		On entry : 0/0
 10490 ;;		On exit  : 0/0
 10491 ;;		Unchanged: 0/0
 10492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;Total ram usage:        0 bytes
 10498 ;; Hardware stack levels used:    1
 10499 ;; Hardware stack levels required when called:    5
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		_Mcu_Initialization
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           
 10508                           ;psect for function _IO_Set
 10509  1129                     _IO_Set:	
 10510                           
 10511                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10512                           
 10513                           ;incstack = 0
 10514                           ; Regs used in _IO_Set: [wreg+status,2]
 10515  1129  3077               	movlw	119
 10516  112A  0021               	movlb	1	; select bank1
 10517  112B  008C               	movwf	12	;volatile
 10518                           
 10519                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10520  112C  3007               	movlw	7
 10521  112D  008D               	movwf	13	;volatile
 10522                           
 10523                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10524  112E  300C               	movlw	12
 10525  112F  008E               	movwf	14	;volatile
 10526                           
 10527                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10528  1130  0022               	movlb	2	; select bank2
 10529  1131  018C               	clrf	12	;volatile
 10530                           
 10531                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10532  1132  3002               	movlw	2
 10533  1133  008D               	movwf	13	;volatile
 10534                           
 10535                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10536  1134  018E               	clrf	14	;volatile
 10537                           
 10538                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10539  1135  3022               	movlw	34
 10540  1136  0023               	movlb	3	; select bank3
 10541  1137  008C               	movwf	12	;volatile
 10542                           
 10543                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10544  1138  018D               	clrf	13	;volatile
 10545                           
 10546                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10547  1139  018E               	clrf	14	;volatile
 10548                           
 10549                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10550  113A  3077               	movlw	119
 10551  113B  0020               	movlb	0	; select bank0
 10552  113C  008C               	movwf	12	;volatile
 10553                           
 10554                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10555  113D  3007               	movlw	7
 10556  113E  008D               	movwf	13	;volatile
 10557                           
 10558                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10559  113F  300C               	movlw	12
 10560  1140  008E               	movwf	14	;volatile
 10561  1141  0008               	return
 10562  1142                     __end_of_IO_Set:	
 10563                           
 10564                           	psect	text61
 10565  1F1C                     __ptext61:	
 10566 ;; *************** function _IOC_Set *****************
 10567 ;; Defined at:
 10568 ;;		line 267 in file "../src/MCU_B1.c"
 10569 ;; Parameters:    Size  Location     Type
 10570 ;;		None
 10571 ;; Auto vars:     Size  Location     Type
 10572 ;;		None
 10573 ;; Return value:  Size  Location     Type
 10574 ;;		None               void
 10575 ;; Registers used:
 10576 ;;		wreg, status,2
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        0 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    5
 10589 ;; This function calls:
 10590 ;;		Nothing
 10591 ;; This function is called by:
 10592 ;;		_Mcu_Initialization
 10593 ;; This function uses a non-reentrant model
 10594 ;;
 10595                           
 10596                           
 10597                           ;psect for function _IOC_Set
 10598  1F1C                     _IOC_Set:	
 10599                           
 10600                           ;MCU_B1.c: 268: WPUB2 = 0;
 10601                           
 10602                           ;incstack = 0
 10603                           ; Regs used in _IOC_Set: [wreg+status,2]
 10604  1F1C  0024               	movlb	4	; select bank4
 10605  1F1D  110D               	bcf	13,2	;volatile
 10606                           
 10607                           ;MCU_B1.c: 270: IOCBP = 0b00000100;
 10608  1F1E  3004               	movlw	4
 10609  1F1F  0027               	movlb	7	; select bank7
 10610  1F20  0094               	movwf	20	;volatile
 10611                           
 10612                           ;MCU_B1.c: 271: IOCBN = 0b00000100;
 10613  1F21  3004               	movlw	4
 10614  1F22  0095               	movwf	21	;volatile
 10615                           
 10616                           ;MCU_B1.c: 286: IOCBF = 0b00000000;
 10617  1F23  0196               	clrf	22	;volatile
 10618                           
 10619                           ;MCU_B1.c: 288: IOCIE = 1;
 10620  1F24  158B               	bsf	11,3	;volatile
 10621                           
 10622                           ;MCU_B1.c: 289: IOCIF = 0;
 10623  1F25  100B               	bcf	11,0	;volatile
 10624                           
 10625                           ;MCU_B1.c: 290: PEIE = 1;
 10626  1F26  170B               	bsf	11,6	;volatile
 10627                           
 10628                           ;MCU_B1.c: 291: GIE = 1;
 10629  1F27  178B               	bsf	11,7	;volatile
 10630  1F28  0008               	return
 10631  1F29                     __end_of_IOC_Set:	
 10632                           
 10633                           	psect	text62
 10634  1E0A                     __ptext62:	
 10635 ;; *************** function _Fosc_Set *****************
 10636 ;; Defined at:
 10637 ;;		line 56 in file "../src/MCU_B1.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;		None
 10640 ;; Auto vars:     Size  Location     Type
 10641 ;;		None
 10642 ;; Return value:  Size  Location     Type
 10643 ;;		None               void
 10644 ;; Registers used:
 10645 ;;		wreg
 10646 ;; Tracked objects:
 10647 ;;		On entry : 0/0
 10648 ;;		On exit  : 0/0
 10649 ;;		Unchanged: 0/0
 10650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10655 ;;Total ram usage:        0 bytes
 10656 ;; Hardware stack levels used:    1
 10657 ;; Hardware stack levels required when called:    5
 10658 ;; This function calls:
 10659 ;;		Nothing
 10660 ;; This function is called by:
 10661 ;;		_Mcu_Initialization
 10662 ;; This function uses a non-reentrant model
 10663 ;;
 10664                           
 10665                           
 10666                           ;psect for function _Fosc_Set
 10667  1E0A                     _Fosc_Set:	
 10668                           
 10669                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10670                           
 10671                           ;incstack = 0
 10672                           ; Regs used in _Fosc_Set: [wreg]
 10673  1E0A  3078               	movlw	120
 10674  1E0B  0021               	movlb	1	; select bank1
 10675  1E0C  0099               	movwf	25	;volatile
 10676  1E0D  0008               	return
 10677  1E0E                     __end_of_Fosc_Set:	
 10678                           
 10679                           	psect	text63
 10680  1E3C                     __ptext63:	
 10681 ;; *************** function _ADC_Set *****************
 10682 ;; Defined at:
 10683 ;;		line 313 in file "../src/MCU_B1.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;		None               void
 10690 ;; Registers used:
 10691 ;;		wreg
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    5
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_Mcu_Initialization
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           
 10712                           ;psect for function _ADC_Set
 10713  1E3C                     _ADC_Set:	
 10714                           
 10715                           ;MCU_B1.c: 314: ADCON1 = 0xf2;
 10716                           
 10717                           ;incstack = 0
 10718                           ; Regs used in _ADC_Set: [wreg]
 10719  1E3C  30F2               	movlw	242
 10720  1E3D  0021               	movlb	1	; select bank1
 10721  1E3E  009E               	movwf	30	;volatile
 10722                           
 10723                           ;MCU_B1.c: 315: FVRCON = 0xc0;
 10724  1E3F  30C0               	movlw	192
 10725  1E40  0022               	movlb	2	; select bank2
 10726  1E41  0097               	movwf	23	;volatile
 10727  1E42  0008               	return
 10728  1E43                     __end_of_ADC_Set:	
 10729                           
 10730                           	psect	text64
 10731  1EF6                     __ptext64:	
 10732 ;; *************** function _LED_Main *****************
 10733 ;; Defined at:
 10734 ;;		line 47 in file "../src/LED_B1.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;		None               void
 10741 ;; Registers used:
 10742 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;Total ram usage:        0 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    7
 10755 ;; This function calls:
 10756 ;;		_setLED_Main
 10757 ;; This function is called by:
 10758 ;;		_main
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function _LED_Main
 10764  1EF6                     _LED_Main:	
 10765                           
 10766                           ;LED_B1.c: 49: setLED_Main(1);
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10770  1EF6  3001               	movlw	1
 10771  1EF7  3196  26D7  319E   	fcall	_setLED_Main
 10772                           
 10773                           ;LED_B1.c: 52: setLED_Main(2);
 10774  1EFA  3002               	movlw	2
 10775  1EFB  3196  26D7  319E   	fcall	_setLED_Main
 10776                           
 10777                           ;LED_B1.c: 58: setLED_Main(99);
 10778  1EFE  3063               	movlw	99
 10779  1EFF  3196  26D7         	fcall	_setLED_Main
 10780  1F01  0008               	return
 10781  1F02                     __end_of_LED_Main:	
 10782                           
 10783                           	psect	text65
 10784  16D7                     __ptext65:	
 10785 ;; *************** function _setLED_Main *****************
 10786 ;; Defined at:
 10787 ;;		line 192 in file "../src/LED_B1.c"
 10788 ;; Parameters:    Size  Location     Type
 10789 ;;  led             1    wreg     unsigned char 
 10790 ;; Auto vars:     Size  Location     Type
 10791 ;;  led             1    3[BANK0 ] unsigned char 
 10792 ;; Return value:  Size  Location     Type
 10793 ;;		None               void
 10794 ;; Registers used:
 10795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10796 ;; Tracked objects:
 10797 ;;		On entry : 0/0
 10798 ;;		On exit  : 0/0
 10799 ;;		Unchanged: 0/0
 10800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10803 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10804 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10805 ;;Total ram usage:        3 bytes
 10806 ;; Hardware stack levels used:    1
 10807 ;; Hardware stack levels required when called:    6
 10808 ;; This function calls:
 10809 ;;		_LedPointSelect
 10810 ;; This function is called by:
 10811 ;;		_LED_Main
 10812 ;; This function uses a non-reentrant model
 10813 ;;
 10814                           
 10815                           
 10816                           ;psect for function _setLED_Main
 10817  16D7                     _setLED_Main:	
 10818                           
 10819                           ;incstack = 0
 10820                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10821                           ;setLED_Main@led stored from wreg
 10822  16D7  0020               	movlb	0	; select bank0
 10823  16D8  00A3               	movwf	setLED_Main@led
 10824                           
 10825                           ;LED_B1.c: 193: LedPointSelect(led);
 10826  16D9  0823               	movf	setLED_Main@led,w
 10827  16DA  3192  223C  3196   	fcall	_LedPointSelect
 10828                           
 10829                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10830  16DD  0021               	movlb	1	; select bank1
 10831  16DE  084B               	movf	_LED^(0+128),w
 10832  16DF  0086               	movwf	6
 10833  16E0  084C               	movf	(_LED+1)^(0+128),w
 10834  16E1  0087               	movwf	7
 10835  16E2  1C81               	btfss	1,1
 10836  16E3  0008               	return
 10837                           
 10838                           ;LED_B1.c: 195: LED->Time++;
 10839  16E4  084B               	movf	_LED^(0+128),w
 10840  16E5  0086               	movwf	6
 10841  16E6  084C               	movf	(_LED+1)^(0+128),w
 10842  16E7  0087               	movwf	7
 10843  16E8  3141               	addfsr 1,1
 10844  16E9  3001               	movlw	1
 10845  16EA  0781               	addwf	1,f
 10846  16EB  3141               	addfsr 1,1
 10847  16EC  1803               	skipnc
 10848  16ED  0A81               	incf	1,f
 10849                           
 10850                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10851  16EE  084B               	movf	_LED^(0+128),w
 10852  16EF  0086               	movwf	6
 10853  16F0  084C               	movf	(_LED+1)^(0+128),w
 10854  16F1  0087               	movwf	7
 10855  16F2  3141               	addfsr 1,1
 10856  16F3  3F40               	moviw [0]fsr1
 10857  16F4  0020               	movlb	0	; select bank0
 10858  16F5  00A1               	movwf	??_setLED_Main
 10859  16F6  3F41               	moviw [1]fsr1
 10860  16F7  00A2               	movwf	??_setLED_Main+1
 10861  16F8  3000               	movlw	0
 10862  16F9  0222               	subwf	??_setLED_Main+1,w
 10863  16FA  3032               	movlw	50
 10864  16FB  1903               	skipnz
 10865  16FC  0221               	subwf	??_setLED_Main,w
 10866  16FD  1C03               	skipc
 10867  16FE  0008               	return
 10868                           
 10869                           ;LED_B1.c: 197: LED->Time = 0;
 10870  16FF  0021               	movlb	1	; select bank1
 10871  1700  084B               	movf	_LED^(0+128),w
 10872  1701  0086               	movwf	6
 10873  1702  084C               	movf	(_LED+1)^(0+128),w
 10874  1703  0087               	movwf	7
 10875  1704  3141               	addfsr 1,1
 10876  1705  3000               	movlw	0
 10877  1706  3FC0               	movwi [0]fsr1
 10878  1707  3FC1               	movwi [1]fsr1
 10879                           
 10880                           ;LED_B1.c: 199: if (led == 1) {
 10881  1708  0020               	movlb	0	; select bank0
 10882  1709  0823               	movf	setLED_Main@led,w
 10883  170A  3A01               	xorlw	1
 10884  170B  1D03               	skipz
 10885  170C  2F10               	goto	l7681
 10886                           
 10887                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 10888  170D  3008               	movlw	8
 10889  170E  068C               	xorwf	12,f
 10890                           
 10891                           ;LED_B1.c: 201: }
 10892  170F  0008               	return
 10893  1710                     l7681:	
 10894                           
 10895                           ;LED_B1.c: 204: else if (led == 2) {
 10896  1710  0823               	movf	setLED_Main@led,w
 10897  1711  3A02               	xorlw	2
 10898  1712  1D03               	skipz
 10899  1713  2F17               	goto	l7685
 10900                           
 10901                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 10902  1714  3080               	movlw	128
 10903  1715  068E               	xorwf	14,f
 10904                           
 10905                           ;LED_B1.c: 206: }
 10906  1716  0008               	return
 10907  1717                     l7685:	
 10908                           
 10909                           ;LED_B1.c: 214: else if (led == 99) {
 10910  1717  0823               	movf	setLED_Main@led,w
 10911  1718  3A63               	xorlw	99
 10912  1719  1D03               	skipz
 10913  171A  0008               	return
 10914                           
 10915                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10916  171B  3020               	movlw	32
 10917  171C  068D               	xorwf	13,f
 10918  171D  0008               	return
 10919  171E                     __end_of_setLED_Main:	
 10920                           
 10921                           	psect	text66
 10922  1EEA                     __ptext66:	
 10923 ;; *************** function _LED_Initialization *****************
 10924 ;; Defined at:
 10925 ;;		line 31 in file "../src/LED_B1.c"
 10926 ;; Parameters:    Size  Location     Type
 10927 ;;		None
 10928 ;; Auto vars:     Size  Location     Type
 10929 ;;		None
 10930 ;; Return value:  Size  Location     Type
 10931 ;;		None               void
 10932 ;; Registers used:
 10933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;Total ram usage:        0 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    8
 10946 ;; This function calls:
 10947 ;;		_setLED_Initialization
 10948 ;; This function is called by:
 10949 ;;		_main
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           
 10954                           ;psect for function _LED_Initialization
 10955  1EEA                     _LED_Initialization:	
 10956                           
 10957                           ;LED_B1.c: 33: setLED_Initialization(1);
 10958                           
 10959                           ;incstack = 0
 10960                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10961  1EEA  3001               	movlw	1
 10962  1EEB  3190  206A  319E   	fcall	_setLED_Initialization
 10963                           
 10964                           ;LED_B1.c: 36: setLED_Initialization(2);
 10965  1EEE  3002               	movlw	2
 10966  1EEF  3190  206A  319E   	fcall	_setLED_Initialization
 10967                           
 10968                           ;LED_B1.c: 42: setLED_Initialization(99);
 10969  1EF2  3063               	movlw	99
 10970  1EF3  3190  206A         	fcall	_setLED_Initialization
 10971  1EF5  0008               	return
 10972  1EF6                     __end_of_LED_Initialization:	
 10973                           
 10974                           	psect	text67
 10975  106A                     __ptext67:	
 10976 ;; *************** function _setLED_Initialization *****************
 10977 ;; Defined at:
 10978 ;;		line 63 in file "../src/LED_B1.c"
 10979 ;; Parameters:    Size  Location     Type
 10980 ;;  led             1    wreg     unsigned char 
 10981 ;; Auto vars:     Size  Location     Type
 10982 ;;  led             1    3[BANK0 ] unsigned char 
 10983 ;; Return value:  Size  Location     Type
 10984 ;;		None               void
 10985 ;; Registers used:
 10986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10993 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10995 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10996 ;;Total ram usage:        1 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    7
 10999 ;; This function calls:
 11000 ;;		_LedPointSelect
 11001 ;;		_setLED
 11002 ;; This function is called by:
 11003 ;;		_LED_Initialization
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           
 11008                           ;psect for function _setLED_Initialization
 11009  106A                     _setLED_Initialization:	
 11010                           
 11011                           ;incstack = 0
 11012                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11013                           ;setLED_Initialization@led stored from wreg
 11014  106A  0020               	movlb	0	; select bank0
 11015  106B  00A3               	movwf	setLED_Initialization@led
 11016                           
 11017                           ;LED_B1.c: 64: LedPointSelect(led);
 11018  106C  0823               	movf	setLED_Initialization@led,w
 11019  106D  3192  223C  3190   	fcall	_LedPointSelect
 11020                           
 11021                           ;LED_B1.c: 65: LED->Enable = 1;
 11022  1070  0021               	movlb	1	; select bank1
 11023  1071  084B               	movf	_LED^(0+128),w
 11024  1072  0086               	movwf	6
 11025  1073  084C               	movf	(_LED+1)^(0+128),w
 11026  1074  0087               	movwf	7
 11027  1075  1401               	bsf	1,0
 11028                           
 11029                           ;LED_B1.c: 66: setLED(led, 0);
 11030  1076  0020               	movlb	0	; select bank0
 11031  1077  01A1               	clrf	setLED@command
 11032  1078  0823               	movf	setLED_Initialization@led,w
 11033  1079  318B  2301         	fcall	_setLED
 11034  107B  0008               	return
 11035  107C                     __end_of_setLED_Initialization:	
 11036                           
 11037                           	psect	text68
 11038  119A                     __ptext68:	
 11039 ;; *************** function _Flash_Memory_Main *****************
 11040 ;; Defined at:
 11041 ;;		line 793 in file "../src/MCU_B1.c"
 11042 ;; Parameters:    Size  Location     Type
 11043 ;;		None
 11044 ;; Auto vars:     Size  Location     Type
 11045 ;;		None
 11046 ;; Return value:  Size  Location     Type
 11047 ;;		None               void
 11048 ;; Registers used:
 11049 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11050 ;; Tracked objects:
 11051 ;;		On entry : 0/0
 11052 ;;		On exit  : 0/0
 11053 ;;		Unchanged: 0/0
 11054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;Total ram usage:        0 bytes
 11060 ;; Hardware stack levels used:    1
 11061 ;; Hardware stack levels required when called:    8
 11062 ;; This function calls:
 11063 ;;		_Flash_Memory_Modify
 11064 ;; This function is called by:
 11065 ;;		_main
 11066 ;; This function uses a non-reentrant model
 11067 ;;
 11068                           
 11069                           
 11070                           ;psect for function _Flash_Memory_Main
 11071  119A                     _Flash_Memory_Main:	
 11072                           
 11073                           ;MCU_B1.c: 794: if (Memory.GO == 1) {
 11074                           
 11075                           ;incstack = 0
 11076                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11077  119A  0022               	movlb	2	; select bank2
 11078  119B  1CE1               	btfss	(_Memory^(0+256)+36),1
 11079  119C  0008               	return
 11080                           
 11081                           ;MCU_B1.c: 795: if (Memory.Modify == 1) {
 11082  119D  1C61               	btfss	(_Memory^(0+256)+36),0
 11083  119E  29B7               	goto	l1228
 11084                           
 11085                           ;MCU_B1.c: 796: Memory.Time++;
 11086  119F  3001               	movlw	1
 11087  11A0  07DF               	addwf	(_Memory^(0+256)+34),f
 11088  11A1  3000               	movlw	0
 11089  11A2  3DE0               	addwfc	((_Memory+1)^(0+256)+34),f
 11090                           
 11091                           ;MCU_B1.c: 797: if (Memory.Time == 25)
 11092  11A3  3022               	movlw	34
 11093  11A4  3E3D               	addlw	_Memory& (0+255)
 11094  11A5  0086               	movwf	6
 11095  11A6  3001               	movlw	1	; select bank2/3
 11096  11A7  0087               	movwf	7
 11097  11A8  3F40               	moviw [0]fsr1
 11098  11A9  3A19               	xorlw	25
 11099  11AA  1D03               	skipz
 11100  11AB  29AE               	goto	u6735
 11101  11AC  3F41               	moviw [1]fsr1
 11102  11AD  3A00               	xorlw	0
 11103  11AE                     u6735:	
 11104  11AE  1D03               	skipz
 11105  11AF  0008               	return
 11106                           
 11107                           ;MCU_B1.c: 798: {
 11108                           ;MCU_B1.c: 799: Memory.Time = 0;
 11109  11B0  01DF               	clrf	(_Memory^(0+256)+34)
 11110  11B1  01E0               	clrf	((_Memory+1)^(0+256)+34)
 11111                           
 11112                           ;MCU_B1.c: 800: Memory.Modify = 0;
 11113  11B2  1061               	bcf	(_Memory^(0+256)+36),0
 11114                           
 11115                           ;MCU_B1.c: 801: Memory.GO = 0;
 11116  11B3  10E1               	bcf	(_Memory^(0+256)+36),1
 11117                           
 11118                           ;MCU_B1.c: 802: Flash_Memory_Modify();
 11119  11B4  3195  25C1         	fcall	_Flash_Memory_Modify
 11120                           
 11121                           ;MCU_B1.c: 803: }
 11122                           ;MCU_B1.c: 804: } else {
 11123  11B6  0008               	return
 11124  11B7                     l1228:	
 11125                           
 11126                           ;MCU_B1.c: 805: Memory.GO = 0;
 11127  11B7  10E1               	bcf	(_Memory^(0+256)+36),1
 11128  11B8  0008               	return
 11129  11B9                     __end_of_Flash_Memory_Main:	
 11130                           
 11131                           	psect	text69
 11132  15C1                     __ptext69:	
 11133 ;; *************** function _Flash_Memory_Modify *****************
 11134 ;; Defined at:
 11135 ;;		line 862 in file "../src/MCU_B1.c"
 11136 ;; Parameters:    Size  Location     Type
 11137 ;;		None
 11138 ;; Auto vars:     Size  Location     Type
 11139 ;;  i               1    5[BANK0 ] unsigned char 
 11140 ;; Return value:  Size  Location     Type
 11141 ;;		None               void
 11142 ;; Registers used:
 11143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11144 ;; Tracked objects:
 11145 ;;		On entry : 0/0
 11146 ;;		On exit  : 0/0
 11147 ;;		Unchanged: 0/0
 11148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;Total ram usage:        2 bytes
 11154 ;; Hardware stack levels used:    1
 11155 ;; Hardware stack levels required when called:    7
 11156 ;; This function calls:
 11157 ;;		_Flash_Memory_Erasing
 11158 ;;		_Flash_Memory_Read
 11159 ;;		_Flash_Memory_Write
 11160 ;; This function is called by:
 11161 ;;		_Flash_Memory_Main
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           
 11166                           ;psect for function _Flash_Memory_Modify
 11167  15C1                     _Flash_Memory_Modify:	
 11168                           
 11169                           ;MCU_B1.c: 863: char i = 0;
 11170                           
 11171                           ;incstack = 0
 11172                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11173  15C1  0020               	movlb	0	; select bank0
 11174  15C2  01A5               	clrf	Flash_Memory_Modify@i
 11175                           
 11176                           ;MCU_B1.c: 864: for (i = 0; i < 32; i++) {
 11177  15C3  01A5               	clrf	Flash_Memory_Modify@i
 11178  15C4  3020               	movlw	32
 11179  15C5  0225               	subwf	Flash_Memory_Modify@i,w
 11180  15C6  1803               	btfsc	3,0
 11181  15C7  2DDD               	goto	l6771
 11182  15C8                     l6765:	
 11183                           
 11184                           ;MCU_B1.c: 865: Memory.Data[i] = Flash_Memory_Read(i);
 11185  15C8  0825               	movf	Flash_Memory_Modify@i,w
 11186  15C9  3191  2142  3195   	fcall	_Flash_Memory_Read
 11187  15CC  0020               	movlb	0	; select bank0
 11188  15CD  00A4               	movwf	??_Flash_Memory_Modify
 11189  15CE  0825               	movf	Flash_Memory_Modify@i,w
 11190  15CF  3E3D               	addlw	_Memory& (0+255)
 11191  15D0  0086               	movwf	6
 11192  15D1  3001               	movlw	1	; select bank2/3
 11193  15D2  0087               	movwf	7
 11194  15D3  0824               	movf	??_Flash_Memory_Modify,w
 11195  15D4  0081               	movwf	1
 11196  15D5  3001               	movlw	1
 11197  15D6  00A4               	movwf	??_Flash_Memory_Modify
 11198  15D7  0824               	movf	??_Flash_Memory_Modify,w
 11199  15D8  07A5               	addwf	Flash_Memory_Modify@i,f
 11200  15D9  3020               	movlw	32
 11201  15DA  0225               	subwf	Flash_Memory_Modify@i,w
 11202  15DB  1C03               	skipc
 11203  15DC  2DC8               	goto	l6765
 11204  15DD                     l6771:	
 11205                           
 11206                           ;MCU_B1.c: 866: }
 11207                           ;MCU_B1.c: 867: Memory.Data[0]=product->Data[12];
 11208  15DD  086F               	movf	_product,w
 11209  15DE  0086               	movwf	6
 11210  15DF  3001               	movlw	1	; select bank2/3
 11211  15E0  0087               	movwf	7
 11212  15E1  3001               	movlw	1	; select bank2/3
 11213  15E2  3F4C               	moviw [12]fsr1
 11214  15E3  0022               	movlb	2	; select bank2
 11215  15E4  00BD               	movwf	_Memory^(0+256)
 11216                           
 11217                           ;MCU_B1.c: 868: Memory.Data[1]=product->Data[13];
 11218  15E5  0020               	movlb	0	; select bank0
 11219  15E6  086F               	movf	_product,w
 11220  15E7  0086               	movwf	6
 11221  15E8  3001               	movlw	1	; select bank2/3
 11222  15E9  0087               	movwf	7
 11223  15EA  3001               	movlw	1	; select bank2/3
 11224  15EB  3F4D               	moviw [13]fsr1
 11225  15EC  0022               	movlb	2	; select bank2
 11226  15ED  00BE               	movwf	(_Memory^(0+256)+1)
 11227                           
 11228                           ;MCU_B1.c: 869: Memory.Data[2]=product->Data[14];
 11229  15EE  0020               	movlb	0	; select bank0
 11230  15EF  086F               	movf	_product,w
 11231  15F0  0086               	movwf	6
 11232  15F1  3001               	movlw	1	; select bank2/3
 11233  15F2  0087               	movwf	7
 11234  15F3  3001               	movlw	1	; select bank2/3
 11235  15F4  3F4E               	moviw [14]fsr1
 11236  15F5  0022               	movlb	2	; select bank2
 11237  15F6  00BF               	movwf	(_Memory^(0+256)+2)
 11238                           
 11239                           ;MCU_B1.c: 875: if (Memory.LoopSave == 1) {
 11240  15F7  1D61               	btfss	(_Memory^(0+256)+36),2
 11241  15F8  2DFD               	goto	l1250
 11242                           
 11243                           ;MCU_B1.c: 876: Memory.LoopSave = 0;
 11244  15F9  1161               	bcf	(_Memory^(0+256)+36),2
 11245                           
 11246                           ;MCU_B1.c: 877: myMain.FirstOpen = 0;
 11247  15FA  0021               	movlb	1	; select bank1
 11248  15FB  12A0               	bcf	_myMain^(0+128),5
 11249                           
 11250                           ;MCU_B1.c: 878: myMain.First = 0;
 11251  15FC  13A0               	bcf	_myMain^(0+128),7
 11252  15FD                     l1250:	
 11253                           
 11254                           ;MCU_B1.c: 880: }
 11255                           ;MCU_B1.c: 881: GIE = 0;
 11256  15FD  138B               	bcf	11,7	;volatile
 11257                           
 11258                           ;MCU_B1.c: 882: Flash_Memory_Erasing();
 11259  15FE  319E  26DE  3195   	fcall	_Flash_Memory_Erasing
 11260                           
 11261                           ;MCU_B1.c: 883: Flash_Memory_Write();
 11262  1601  3188  2001         	fcall	_Flash_Memory_Write
 11263                           
 11264                           ;MCU_B1.c: 884: GIE = 1;
 11265  1603  178B               	bsf	11,7	;volatile
 11266  1604  0008               	return
 11267  1605                     __end_of_Flash_Memory_Modify:	
 11268                           
 11269                           	psect	text70
 11270  1EDE                     __ptext70:	
 11271 ;; *************** function _Flash_Memory_Erasing *****************
 11272 ;; Defined at:
 11273 ;;		line 851 in file "../src/MCU_B1.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;		None
 11276 ;; Auto vars:     Size  Location     Type
 11277 ;;		None
 11278 ;; Return value:  Size  Location     Type
 11279 ;;		None               void
 11280 ;; Registers used:
 11281 ;;		wreg, status,2, status,0, pclath, cstack
 11282 ;; Tracked objects:
 11283 ;;		On entry : 0/0
 11284 ;;		On exit  : 0/0
 11285 ;;		Unchanged: 0/0
 11286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11291 ;;Total ram usage:        0 bytes
 11292 ;; Hardware stack levels used:    1
 11293 ;; Hardware stack levels required when called:    6
 11294 ;; This function calls:
 11295 ;;		_Flash_Memory_Unlock
 11296 ;; This function is called by:
 11297 ;;		_Flash_Memory_Modify
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _Flash_Memory_Erasing
 11303  1EDE                     _Flash_Memory_Erasing:	
 11304                           
 11305                           ;MCU_B1.c: 852: CFGS = 0;
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11309  1EDE  0023               	movlb	3	; select bank3
 11310  1EDF  1315               	bcf	21,6	;volatile
 11311                           
 11312                           ;MCU_B1.c: 853: PMADRH = 0x30;
 11313  1EE0  3030               	movlw	48
 11314  1EE1  0092               	movwf	18	;volatile
 11315                           
 11316                           ;MCU_B1.c: 854: PMADRL = 0x00;
 11317  1EE2  0191               	clrf	17	;volatile
 11318                           
 11319                           ;MCU_B1.c: 855: FREE = 1;
 11320  1EE3  1615               	bsf	21,4	;volatile
 11321                           
 11322                           ;MCU_B1.c: 856: WREN = 1;
 11323  1EE4  1515               	bsf	21,2	;volatile
 11324                           
 11325                           ;MCU_B1.c: 857: Flash_Memory_Unlock();
 11326  1EE5  319E  266A         	fcall	_Flash_Memory_Unlock
 11327                           
 11328                           ;MCU_B1.c: 858: WREN = 0;
 11329  1EE7  0023               	movlb	3	; select bank3
 11330  1EE8  1115               	bcf	21,2	;volatile
 11331  1EE9  0008               	return
 11332  1EEA                     __end_of_Flash_Memory_Erasing:	
 11333                           
 11334                           	psect	text71
 11335  042A                     __ptext71:	
 11336 ;; *************** function _Flash_Memory_Initialization *****************
 11337 ;; Defined at:
 11338 ;;		line 752 in file "../src/MCU_B1.c"
 11339 ;; Parameters:    Size  Location     Type
 11340 ;;		None
 11341 ;; Auto vars:     Size  Location     Type
 11342 ;;  i               1   62[BANK0 ] unsigned char 
 11343 ;; Return value:  Size  Location     Type
 11344 ;;		None               void
 11345 ;; Registers used:
 11346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11347 ;; Tracked objects:
 11348 ;;		On entry : 0/0
 11349 ;;		On exit  : 0/0
 11350 ;;		Unchanged: 0/0
 11351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11356 ;;Total ram usage:        2 bytes
 11357 ;; Hardware stack levels used:    1
 11358 ;; Hardware stack levels required when called:    8
 11359 ;; This function calls:
 11360 ;;		_Flash_Memory_Read
 11361 ;;		_Flash_Memory_Write
 11362 ;;		_setPercentValue
 11363 ;; This function is called by:
 11364 ;;		_main
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _Flash_Memory_Initialization
 11370  042A                     _Flash_Memory_Initialization:	
 11371                           
 11372                           ;MCU_B1.c: 753: char i = 0;
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11376  042A  0020               	movlb	0	; select bank0
 11377  042B  01DE               	clrf	Flash_Memory_Initialization@i
 11378                           
 11379                           ;MCU_B1.c: 754: if (Flash_Memory_Read(31) == 0xaa) {
 11380  042C  301F               	movlw	31
 11381  042D  3191  2142  3184   	fcall	_Flash_Memory_Read
 11382  0430  3AAA               	xorlw	170
 11383  0431  1D03               	skipz
 11384  0432  2C9C               	goto	l7177
 11385                           
 11386                           ;MCU_B1.c: 755: product->Data[12] = Flash_Memory_Read(0);
 11387  0433  3000               	movlw	0
 11388  0434  3191  2142  3184   	fcall	_Flash_Memory_Read
 11389  0437  0020               	movlb	0	; select bank0
 11390  0438  00DD               	movwf	??_Flash_Memory_Initialization
 11391  0439  086F               	movf	_product,w
 11392  043A  3E0C               	addlw	12
 11393  043B  0086               	movwf	6
 11394  043C  3001               	movlw	1	; select bank2/3
 11395  043D  0087               	movwf	7
 11396  043E  085D               	movf	??_Flash_Memory_Initialization,w
 11397  043F  0081               	movwf	1
 11398                           
 11399                           ;MCU_B1.c: 756: product->Data[13] = Flash_Memory_Read(1);
 11400  0440  3001               	movlw	1
 11401  0441  3191  2142  3184   	fcall	_Flash_Memory_Read
 11402  0444  0020               	movlb	0	; select bank0
 11403  0445  00DD               	movwf	??_Flash_Memory_Initialization
 11404  0446  086F               	movf	_product,w
 11405  0447  3E0D               	addlw	13
 11406  0448  0086               	movwf	6
 11407  0449  3001               	movlw	1	; select bank2/3
 11408  044A  0087               	movwf	7
 11409  044B  085D               	movf	??_Flash_Memory_Initialization,w
 11410  044C  0081               	movwf	1
 11411                           
 11412                           ;MCU_B1.c: 757: product->Data[14] = Flash_Memory_Read(2);
 11413  044D  3002               	movlw	2
 11414  044E  3191  2142  3184   	fcall	_Flash_Memory_Read
 11415  0451  0020               	movlb	0	; select bank0
 11416  0452  00DD               	movwf	??_Flash_Memory_Initialization
 11417  0453  086F               	movf	_product,w
 11418  0454  3E0E               	addlw	14
 11419  0455  0086               	movwf	6
 11420  0456  3001               	movlw	1	; select bank2/3
 11421  0457  0087               	movwf	7
 11422  0458  085D               	movf	??_Flash_Memory_Initialization,w
 11423  0459  0081               	movwf	1
 11424                           
 11425                           ;MCU_B1.c: 763: i = setPercentValue(((char)((100-60)*0.8)));
 11426  045A  3020               	movlw	32
 11427  045B  3196  2605  3184   	fcall	_setPercentValue
 11428  045E  0020               	movlb	0	; select bank0
 11429  045F  00DD               	movwf	??_Flash_Memory_Initialization
 11430  0460  085D               	movf	??_Flash_Memory_Initialization,w
 11431  0461  00DE               	movwf	Flash_Memory_Initialization@i
 11432                           
 11433                           ;MCU_B1.c: 764: product->Data[21] = i;
 11434  0462  085E               	movf	Flash_Memory_Initialization@i,w
 11435  0463  00DD               	movwf	??_Flash_Memory_Initialization
 11436  0464  086F               	movf	_product,w
 11437  0465  3E15               	addlw	21
 11438  0466  0086               	movwf	6
 11439  0467  3001               	movlw	1	; select bank2/3
 11440  0468  0087               	movwf	7
 11441  0469  085D               	movf	??_Flash_Memory_Initialization,w
 11442  046A  0081               	movwf	1
 11443                           
 11444                           ;MCU_B1.c: 765: product->Data[22] = i;
 11445  046B  085E               	movf	Flash_Memory_Initialization@i,w
 11446  046C  00DD               	movwf	??_Flash_Memory_Initialization
 11447  046D  086F               	movf	_product,w
 11448  046E  3E16               	addlw	22
 11449  046F  0086               	movwf	6
 11450  0470  3001               	movlw	1	; select bank2/3
 11451  0471  0087               	movwf	7
 11452  0472  085D               	movf	??_Flash_Memory_Initialization,w
 11453  0473  0081               	movwf	1
 11454                           
 11455                           ;MCU_B1.c: 766: product->Data[23] = i;
 11456  0474  085E               	movf	Flash_Memory_Initialization@i,w
 11457  0475  00DD               	movwf	??_Flash_Memory_Initialization
 11458  0476  086F               	movf	_product,w
 11459  0477  3E17               	addlw	23
 11460  0478  0086               	movwf	6
 11461  0479  3001               	movlw	1	; select bank2/3
 11462  047A  0087               	movwf	7
 11463  047B  085D               	movf	??_Flash_Memory_Initialization,w
 11464  047C  0081               	movwf	1
 11465                           
 11466                           ;MCU_B1.c: 768: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11467  047D  086F               	movf	_product,w
 11468  047E  3E0C               	addlw	12
 11469  047F  0086               	movwf	6
 11470  0480  3001               	movlw	1	; select bank2/3
 11471  0481  0087               	movwf	7
 11472  0482  0801               	movf	1,w
 11473  0483  3AFF               	xorlw	255
 11474  0484  1D03               	skipz
 11475  0485  0008               	return
 11476  0486  086F               	movf	_product,w
 11477  0487  3E0D               	addlw	13
 11478  0488  0086               	movwf	6
 11479  0489  3001               	movlw	1	; select bank2/3
 11480  048A  0087               	movwf	7
 11481  048B  0801               	movf	1,w
 11482  048C  3AFF               	xorlw	255
 11483  048D  1D03               	skipz
 11484  048E  0008               	return
 11485  048F  086F               	movf	_product,w
 11486  0490  3E0E               	addlw	14
 11487  0491  0086               	movwf	6
 11488  0492  3001               	movlw	1	; select bank2/3
 11489  0493  0087               	movwf	7
 11490  0494  0801               	movf	1,w
 11491  0495  3AFF               	xorlw	255
 11492  0496  1D03               	skipz
 11493  0497  0008               	return
 11494                           
 11495                           ;MCU_B1.c: 769: myMain.FirstOpen = 1;
 11496  0498  0021               	movlb	1	; select bank1
 11497  0499  16A0               	bsf	_myMain^(0+128),5
 11498                           
 11499                           ;MCU_B1.c: 770: myMain.First = 1;
 11500  049A  17A0               	bsf	_myMain^(0+128),7
 11501                           
 11502                           ;MCU_B1.c: 771: }
 11503                           ;MCU_B1.c: 772: } else {
 11504  049B  0008               	return
 11505  049C                     l7177:	
 11506                           
 11507                           ;MCU_B1.c: 773: i = setPercentValue(((char)((100-60)*0.8)));
 11508  049C  3020               	movlw	32
 11509  049D  3196  2605  3184   	fcall	_setPercentValue
 11510  04A0  0020               	movlb	0	; select bank0
 11511  04A1  00DD               	movwf	??_Flash_Memory_Initialization
 11512  04A2  085D               	movf	??_Flash_Memory_Initialization,w
 11513  04A3  00DE               	movwf	Flash_Memory_Initialization@i
 11514                           
 11515                           ;MCU_B1.c: 774: Memory.Data[0]=0xff;
 11516  04A4  30FF               	movlw	255
 11517  04A5  00DD               	movwf	??_Flash_Memory_Initialization
 11518  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 11519  04A7  0022               	movlb	2	; select bank2
 11520  04A8  00BD               	movwf	_Memory^(0+256)
 11521                           
 11522                           ;MCU_B1.c: 775: Memory.Data[1]=0xff;
 11523  04A9  30FF               	movlw	255
 11524  04AA  0020               	movlb	0	; select bank0
 11525  04AB  00DD               	movwf	??_Flash_Memory_Initialization
 11526  04AC  085D               	movf	??_Flash_Memory_Initialization,w
 11527  04AD  0022               	movlb	2	; select bank2
 11528  04AE  00BE               	movwf	(_Memory^(0+256)+1)
 11529                           
 11530                           ;MCU_B1.c: 776: Memory.Data[2]=0xff;
 11531  04AF  30FF               	movlw	255
 11532  04B0  0020               	movlb	0	; select bank0
 11533  04B1  00DD               	movwf	??_Flash_Memory_Initialization
 11534  04B2  085D               	movf	??_Flash_Memory_Initialization,w
 11535  04B3  0022               	movlb	2	; select bank2
 11536  04B4  00BF               	movwf	(_Memory^(0+256)+2)
 11537                           
 11538                           ;MCU_B1.c: 777: Memory.Data[3]=0xff;
 11539  04B5  30FF               	movlw	255
 11540  04B6  0020               	movlb	0	; select bank0
 11541  04B7  00DD               	movwf	??_Flash_Memory_Initialization
 11542  04B8  085D               	movf	??_Flash_Memory_Initialization,w
 11543  04B9  0022               	movlb	2	; select bank2
 11544  04BA  00C0               	movwf	(_Memory^(0+256)+3)
 11545                           
 11546                           ;MCU_B1.c: 778: Memory.Data[4]=0xff;
 11547  04BB  30FF               	movlw	255
 11548  04BC  0020               	movlb	0	; select bank0
 11549  04BD  00DD               	movwf	??_Flash_Memory_Initialization
 11550  04BE  085D               	movf	??_Flash_Memory_Initialization,w
 11551  04BF  0022               	movlb	2	; select bank2
 11552  04C0  00C1               	movwf	(_Memory^(0+256)+4)
 11553                           
 11554                           ;MCU_B1.c: 779: Memory.Data[5]=0xff;
 11555  04C1  30FF               	movlw	255
 11556  04C2  0020               	movlb	0	; select bank0
 11557  04C3  00DD               	movwf	??_Flash_Memory_Initialization
 11558  04C4  085D               	movf	??_Flash_Memory_Initialization,w
 11559  04C5  0022               	movlb	2	; select bank2
 11560  04C6  00C2               	movwf	(_Memory^(0+256)+5)
 11561                           
 11562                           ;MCU_B1.c: 780: Memory.Data[31]=0xaa;
 11563  04C7  30AA               	movlw	170
 11564  04C8  0020               	movlb	0	; select bank0
 11565  04C9  00DD               	movwf	??_Flash_Memory_Initialization
 11566  04CA  085D               	movf	??_Flash_Memory_Initialization,w
 11567  04CB  0022               	movlb	2	; select bank2
 11568  04CC  00DC               	movwf	(_Memory^(0+256)+31)
 11569                           
 11570                           ;MCU_B1.c: 781: product->Data[21] = i;
 11571  04CD  0020               	movlb	0	; select bank0
 11572  04CE  085E               	movf	Flash_Memory_Initialization@i,w
 11573  04CF  00DD               	movwf	??_Flash_Memory_Initialization
 11574  04D0  086F               	movf	_product,w
 11575  04D1  3E15               	addlw	21
 11576  04D2  0086               	movwf	6
 11577  04D3  3001               	movlw	1	; select bank2/3
 11578  04D4  0087               	movwf	7
 11579  04D5  085D               	movf	??_Flash_Memory_Initialization,w
 11580  04D6  0081               	movwf	1
 11581                           
 11582                           ;MCU_B1.c: 782: product->Data[22] = i;
 11583  04D7  085E               	movf	Flash_Memory_Initialization@i,w
 11584  04D8  00DD               	movwf	??_Flash_Memory_Initialization
 11585  04D9  086F               	movf	_product,w
 11586  04DA  3E16               	addlw	22
 11587  04DB  0086               	movwf	6
 11588  04DC  3001               	movlw	1	; select bank2/3
 11589  04DD  0087               	movwf	7
 11590  04DE  085D               	movf	??_Flash_Memory_Initialization,w
 11591  04DF  0081               	movwf	1
 11592                           
 11593                           ;MCU_B1.c: 783: product->Data[23] = i;
 11594  04E0  085E               	movf	Flash_Memory_Initialization@i,w
 11595  04E1  00DD               	movwf	??_Flash_Memory_Initialization
 11596  04E2  086F               	movf	_product,w
 11597  04E3  3E17               	addlw	23
 11598  04E4  0086               	movwf	6
 11599  04E5  3001               	movlw	1	; select bank2/3
 11600  04E6  0087               	movwf	7
 11601  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 11602  04E8  0081               	movwf	1
 11603                           
 11604                           ;MCU_B1.c: 784: GIE = 0;
 11605  04E9  138B               	bcf	11,7	;volatile
 11606                           
 11607                           ;MCU_B1.c: 785: Flash_Memory_Write();
 11608  04EA  3188  2001         	fcall	_Flash_Memory_Write
 11609                           
 11610                           ;MCU_B1.c: 786: GIE = 1;
 11611  04EC  178B               	bsf	11,7	;volatile
 11612                           
 11613                           ;MCU_B1.c: 787: myMain.FirstOpen = 1;
 11614  04ED  0021               	movlb	1	; select bank1
 11615  04EE  16A0               	bsf	_myMain^(0+128),5
 11616                           
 11617                           ;MCU_B1.c: 788: myMain.First = 1;
 11618  04EF  17A0               	bsf	_myMain^(0+128),7
 11619  04F0  0008               	return
 11620  04F1                     __end_of_Flash_Memory_Initialization:	
 11621                           
 11622                           	psect	text72
 11623  0801                     __ptext72:	
 11624 ;; *************** function _Flash_Memory_Write *****************
 11625 ;; Defined at:
 11626 ;;		line 832 in file "../src/MCU_B1.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;  i               1    1[BANK0 ] unsigned char 
 11631 ;; Return value:  Size  Location     Type
 11632 ;;		None               void
 11633 ;; Registers used:
 11634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;Total ram usage:        2 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    6
 11647 ;; This function calls:
 11648 ;;		_Flash_Memory_Unlock
 11649 ;; This function is called by:
 11650 ;;		_Flash_Memory_Initialization
 11651 ;;		_Flash_Memory_Modify
 11652 ;; This function uses a non-reentrant model
 11653 ;;
 11654                           
 11655                           
 11656                           ;psect for function _Flash_Memory_Write
 11657  0801                     _Flash_Memory_Write:	
 11658                           
 11659                           ;MCU_B1.c: 833: char i = 0;
 11660                           
 11661                           ;incstack = 0
 11662                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11663  0801  0020               	movlb	0	; select bank0
 11664  0802  01A1               	clrf	Flash_Memory_Write@i
 11665                           
 11666                           ;MCU_B1.c: 834: CFGS = 0;
 11667  0803  0023               	movlb	3	; select bank3
 11668  0804  1315               	bcf	21,6	;volatile
 11669                           
 11670                           ;MCU_B1.c: 835: PMADRH = 0x30;
 11671  0805  3030               	movlw	48
 11672  0806  0092               	movwf	18	;volatile
 11673                           
 11674                           ;MCU_B1.c: 836: PMDATH = 0;
 11675  0807  0194               	clrf	20	;volatile
 11676                           
 11677                           ;MCU_B1.c: 837: FREE = 0;
 11678  0808  1215               	bcf	21,4	;volatile
 11679                           
 11680                           ;MCU_B1.c: 838: LWLO = 1;
 11681  0809  1695               	bsf	21,5	;volatile
 11682                           
 11683                           ;MCU_B1.c: 839: WREN = 1;
 11684  080A  1515               	bsf	21,2	;volatile
 11685                           
 11686                           ;MCU_B1.c: 840: for (i = 0; i < 32; i++) {
 11687  080B  0020               	movlb	0	; select bank0
 11688  080C  01A1               	clrf	Flash_Memory_Write@i
 11689  080D  3020               	movlw	32
 11690  080E  0221               	subwf	Flash_Memory_Write@i,w
 11691  080F  1803               	btfsc	3,0
 11692  0810  2829               	goto	l1241
 11693  0811                     l6251:	
 11694                           
 11695                           ;MCU_B1.c: 841: PMADRL = i;
 11696  0811  0821               	movf	Flash_Memory_Write@i,w
 11697  0812  0023               	movlb	3	; select bank3
 11698  0813  0091               	movwf	17	;volatile
 11699                           
 11700                           ;MCU_B1.c: 842: PMDATL = Memory.Data[i];
 11701  0814  0020               	movlb	0	; select bank0
 11702  0815  0821               	movf	Flash_Memory_Write@i,w
 11703  0816  3E3D               	addlw	_Memory& (0+255)
 11704  0817  0086               	movwf	6
 11705  0818  3001               	movlw	1	; select bank2/3
 11706  0819  0087               	movwf	7
 11707  081A  0801               	movf	1,w
 11708  081B  0023               	movlb	3	; select bank3
 11709  081C  0093               	movwf	19	;volatile
 11710                           
 11711                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11712  081D  319E  266A  3188   	fcall	_Flash_Memory_Unlock
 11713  0820  3001               	movlw	1
 11714  0821  0020               	movlb	0	; select bank0
 11715  0822  00A0               	movwf	??_Flash_Memory_Write
 11716  0823  0820               	movf	??_Flash_Memory_Write,w
 11717  0824  07A1               	addwf	Flash_Memory_Write@i,f
 11718  0825  3020               	movlw	32
 11719  0826  0221               	subwf	Flash_Memory_Write@i,w
 11720  0827  1C03               	skipc
 11721  0828  2811               	goto	l6251
 11722  0829                     l1241:	
 11723                           
 11724                           ;MCU_B1.c: 844: }
 11725                           ;MCU_B1.c: 845: LWLO = 0;
 11726  0829  0023               	movlb	3	; select bank3
 11727  082A  1295               	bcf	21,5	;volatile
 11728                           
 11729                           ;MCU_B1.c: 846: Flash_Memory_Unlock();
 11730  082B  319E  266A         	fcall	_Flash_Memory_Unlock
 11731                           
 11732                           ;MCU_B1.c: 847: WREN = 0;
 11733  082D  0023               	movlb	3	; select bank3
 11734  082E  1115               	bcf	21,2	;volatile
 11735  082F  0008               	return
 11736  0830                     __end_of_Flash_Memory_Write:	
 11737                           
 11738                           	psect	text73
 11739  1E6A                     __ptext73:	
 11740 ;; *************** function _Flash_Memory_Unlock *****************
 11741 ;; Defined at:
 11742 ;;		line 811 in file "../src/MCU_B1.c"
 11743 ;; Parameters:    Size  Location     Type
 11744 ;;		None
 11745 ;; Auto vars:     Size  Location     Type
 11746 ;;		None
 11747 ;; Return value:  Size  Location     Type
 11748 ;;		None               void
 11749 ;; Registers used:
 11750 ;;		wreg
 11751 ;; Tracked objects:
 11752 ;;		On entry : 0/0
 11753 ;;		On exit  : 0/0
 11754 ;;		Unchanged: 0/0
 11755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;Total ram usage:        0 bytes
 11761 ;; Hardware stack levels used:    1
 11762 ;; Hardware stack levels required when called:    5
 11763 ;; This function calls:
 11764 ;;		Nothing
 11765 ;; This function is called by:
 11766 ;;		_Flash_Memory_Write
 11767 ;;		_Flash_Memory_Erasing
 11768 ;; This function uses a non-reentrant model
 11769 ;;
 11770                           
 11771                           
 11772                           ;psect for function _Flash_Memory_Unlock
 11773  1E6A                     _Flash_Memory_Unlock:	
 11774                           
 11775                           ;MCU_B1.c: 812: PMCON2 = 0x55;
 11776                           
 11777                           ;incstack = 0
 11778                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11779  1E6A  3055               	movlw	85
 11780  1E6B  0023               	movlb	3	; select bank3
 11781  1E6C  0096               	movwf	22	;volatile
 11782                           
 11783                           ;MCU_B1.c: 813: PMCON2 = 0xaa;
 11784  1E6D  30AA               	movlw	170
 11785  1E6E  0096               	movwf	22	;volatile
 11786                           
 11787                           ;MCU_B1.c: 814: WR = 1;
 11788  1E6F  1495               	bsf	21,1	;volatile
 11789                           
 11790                           ;MCU_B1.c: 815: __nop();
 11791  1E70  0000               	nop
 11792                           
 11793                           ;MCU_B1.c: 816: __nop();
 11794  1E71  0000               	nop
 11795  1E72  0008               	return
 11796  1E73                     __end_of_Flash_Memory_Unlock:	
 11797                           
 11798                           	psect	text74
 11799  1142                     __ptext74:	
 11800 ;; *************** function _Flash_Memory_Read *****************
 11801 ;; Defined at:
 11802 ;;		line 820 in file "../src/MCU_B1.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  address         1    wreg     unsigned char 
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;  address         1    2[BANK0 ] unsigned char 
 11807 ;;  ret             1    3[BANK0 ] unsigned char 
 11808 ;;  i               1    1[BANK0 ] unsigned char 
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      unsigned char 
 11811 ;; Registers used:
 11812 ;;		wreg, status,2
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        4 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    5
 11825 ;; This function calls:
 11826 ;;		Nothing
 11827 ;; This function is called by:
 11828 ;;		_Flash_Memory_Initialization
 11829 ;;		_Flash_Memory_Modify
 11830 ;; This function uses a non-reentrant model
 11831 ;;
 11832                           
 11833                           
 11834                           ;psect for function _Flash_Memory_Read
 11835  1142                     _Flash_Memory_Read:	
 11836                           
 11837                           ;incstack = 0
 11838                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11839                           ;Flash_Memory_Read@address stored from wreg
 11840  1142  0020               	movlb	0	; select bank0
 11841  1143  00A2               	movwf	Flash_Memory_Read@address
 11842                           
 11843                           ;MCU_B1.c: 821: char i = 0, ret = 0;
 11844  1144  01A1               	clrf	Flash_Memory_Read@i
 11845  1145  01A3               	clrf	Flash_Memory_Read@ret
 11846                           
 11847                           ;MCU_B1.c: 822: PMADRH = 0x30;
 11848  1146  3030               	movlw	48
 11849  1147  0023               	movlb	3	; select bank3
 11850  1148  0092               	movwf	18	;volatile
 11851                           
 11852                           ;MCU_B1.c: 823: PMADRL = address;
 11853  1149  0020               	movlb	0	; select bank0
 11854  114A  0822               	movf	Flash_Memory_Read@address,w
 11855  114B  0023               	movlb	3	; select bank3
 11856  114C  0091               	movwf	17	;volatile
 11857                           
 11858                           ;MCU_B1.c: 824: CFGS = 0;
 11859  114D  1315               	bcf	21,6	;volatile
 11860                           
 11861                           ;MCU_B1.c: 825: RD = 1;
 11862  114E  1415               	bsf	21,0	;volatile
 11863                           
 11864                           ;MCU_B1.c: 826: i = PMDATH;
 11865  114F  0814               	movf	20,w	;volatile
 11866  1150  0020               	movlb	0	; select bank0
 11867  1151  00A0               	movwf	??_Flash_Memory_Read
 11868  1152  0820               	movf	??_Flash_Memory_Read,w
 11869  1153  00A1               	movwf	Flash_Memory_Read@i
 11870                           
 11871                           ;MCU_B1.c: 827: ret = PMDATL;
 11872  1154  0023               	movlb	3	; select bank3
 11873  1155  0813               	movf	19,w	;volatile
 11874  1156  0020               	movlb	0	; select bank0
 11875  1157  00A0               	movwf	??_Flash_Memory_Read
 11876  1158  0820               	movf	??_Flash_Memory_Read,w
 11877  1159  00A3               	movwf	Flash_Memory_Read@ret
 11878                           
 11879                           ;MCU_B1.c: 828: return ret;
 11880  115A  0823               	movf	Flash_Memory_Read@ret,w
 11881  115B  0008               	return
 11882  115C                     __end_of_Flash_Memory_Read:	
 11883                           
 11884                           	psect	text75
 11885  1E35                     __ptext75:	
 11886 ;; *************** function _DimmerLights_Main *****************
 11887 ;; Defined at:
 11888 ;;		line 407 in file "../src/Dimmer_B1.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;		None
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;		None
 11893 ;; Return value:  Size  Location     Type
 11894 ;;		None               void
 11895 ;; Registers used:
 11896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11906 ;;Total ram usage:        0 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:   11
 11909 ;; This function calls:
 11910 ;;		_DimmerLights_Close
 11911 ;;		_setDimmerLights_Main
 11912 ;; This function is called by:
 11913 ;;		_main
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           
 11918                           ;psect for function _DimmerLights_Main
 11919  1E35                     _DimmerLights_Main:	
 11920                           
 11921                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11922                           
 11923                           ;incstack = 0
 11924                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11925  1E35  3001               	movlw	1
 11926  1E36  3189  2189  319E   	fcall	_setDimmerLights_Main
 11927                           
 11928                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11929  1E39  3190  20A2         	fcall	_DimmerLights_Close
 11930  1E3B  0008               	return
 11931  1E3C                     __end_of_DimmerLights_Main:	
 11932                           
 11933                           	psect	text76
 11934  0989                     __ptext76:	
 11935 ;; *************** function _setDimmerLights_Main *****************
 11936 ;; Defined at:
 11937 ;;		line 425 in file "../src/Dimmer_B1.c"
 11938 ;; Parameters:    Size  Location     Type
 11939 ;;  lights          1    wreg     unsigned char 
 11940 ;; Auto vars:     Size  Location     Type
 11941 ;;  lights          1   70[BANK0 ] unsigned char 
 11942 ;;  clear           1   69[BANK0 ] unsigned char 
 11943 ;; Return value:  Size  Location     Type
 11944 ;;		None               void
 11945 ;; Registers used:
 11946 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11947 ;; Tracked objects:
 11948 ;;		On entry : 0/0
 11949 ;;		On exit  : 0/0
 11950 ;;		Unchanged: 0/0
 11951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;Total ram usage:        2 bytes
 11957 ;; Hardware stack levels used:    1
 11958 ;; Hardware stack levels required when called:   10
 11959 ;; This function calls:
 11960 ;;		_DimmerLightsPointSelect
 11961 ;;		_setBuz
 11962 ;;		_setDimmerLights
 11963 ;;		_setDimmerLights_Adj
 11964 ;; This function is called by:
 11965 ;;		_DimmerLights_Main
 11966 ;; This function uses a non-reentrant model
 11967 ;;
 11968                           
 11969                           
 11970                           ;psect for function _setDimmerLights_Main
 11971  0989                     _setDimmerLights_Main:	
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11975                           ;setDimmerLights_Main@lights stored from wreg
 11976  0989  0020               	movlb	0	; select bank0
 11977  098A  00E6               	movwf	setDimmerLights_Main@lights
 11978                           
 11979                           ;Dimmer_B1.c: 426: char clear = 1;
 11980  098B  01E5               	clrf	setDimmerLights_Main@clear
 11981  098C  0AE5               	incf	setDimmerLights_Main@clear,f
 11982                           
 11983                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11984  098D  0866               	movf	setDimmerLights_Main@lights,w
 11985  098E  319E  26B1  3189   	fcall	_DimmerLightsPointSelect
 11986                           
 11987                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11988  0991  0020               	movlb	0	; select bank0
 11989  0992  086D               	movf	_DimmerLights,w
 11990  0993  3E08               	addlw	8
 11991  0994  0086               	movwf	6
 11992  0995  3001               	movlw	1	; select bank2/3
 11993  0996  0087               	movwf	7
 11994  0997  1D01               	btfss	1,2
 11995  0998  29B6               	goto	l7649
 11996                           
 11997                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11998  0999  0865               	movf	setDimmerLights_Main@clear,w
 11999  099A  3A01               	xorlw	1
 12000  099B  1D03               	skipz
 12001  099C  0008               	return
 12002                           
 12003                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 12004  099D  086D               	movf	_DimmerLights,w
 12005  099E  3E08               	addlw	8
 12006  099F  0086               	movwf	6
 12007  09A0  3001               	movlw	1	; select bank2/3
 12008  09A1  0087               	movwf	7
 12009  09A2  1101               	bcf	1,2
 12010                           
 12011                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 12012  09A3  086D               	movf	_DimmerLights,w
 12013  09A4  3E08               	addlw	8
 12014  09A5  0086               	movwf	6
 12015  09A6  3001               	movlw	1	; select bank2/3
 12016  09A7  0087               	movwf	7
 12017  09A8  1C81               	btfss	1,1
 12018  09A9  29B0               	goto	l7647
 12019                           
 12020                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 12021  09AA  01A3               	clrf	setDimmerLights@status
 12022  09AB  0AA3               	incf	setDimmerLights@status,f
 12023  09AC  0866               	movf	setDimmerLights_Main@lights,w
 12024  09AD  318E  2672         	fcall	_setDimmerLights
 12025                           
 12026                           ;Dimmer_B1.c: 452: } else {
 12027  09AF  0008               	return
 12028  09B0                     l7647:	
 12029                           
 12030                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 12031  09B0  0020               	movlb	0	; select bank0
 12032  09B1  01A3               	clrf	setDimmerLights@status
 12033  09B2  0866               	movf	setDimmerLights_Main@lights,w
 12034  09B3  318E  2672         	fcall	_setDimmerLights
 12035                           
 12036                           ;Dimmer_B1.c: 454: }
 12037                           ;Dimmer_B1.c: 458: }
 12038                           ;Dimmer_B1.c: 459: } else {
 12039  09B5  0008               	return
 12040  09B6                     l7649:	
 12041                           
 12042                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12043  09B6  0020               	movlb	0	; select bank0
 12044  09B7  086D               	movf	_DimmerLights,w
 12045  09B8  3E08               	addlw	8
 12046  09B9  0086               	movwf	6
 12047  09BA  3001               	movlw	1	; select bank2/3
 12048  09BB  0087               	movwf	7
 12049  09BC  1E01               	btfss	1,4
 12050  09BD  0008               	return
 12051                           
 12052                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12053  09BE  0865               	movf	setDimmerLights_Main@clear,w
 12054  09BF  3A01               	xorlw	1
 12055  09C0  1D03               	skipz
 12056  09C1  0008               	return
 12057                           
 12058                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12059  09C2  086D               	movf	_DimmerLights,w
 12060  09C3  3E08               	addlw	8
 12061  09C4  0086               	movwf	6
 12062  09C5  3001               	movlw	1	; select bank2/3
 12063  09C6  0087               	movwf	7
 12064  09C7  1201               	bcf	1,4
 12065                           
 12066                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12067  09C8  086D               	movf	_DimmerLights,w
 12068  09C9  3E08               	addlw	8
 12069  09CA  0086               	movwf	6
 12070  09CB  3001               	movlw	1	; select bank2/3
 12071  09CC  0087               	movwf	7
 12072  09CD  1D81               	btfss	1,3
 12073  09CE  29DE               	goto	l7659
 12074                           
 12075                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12076  09CF  01E2               	clrf	setDimmerLights_Adj@status
 12077  09D0  0AE2               	incf	setDimmerLights_Adj@status,f
 12078  09D1  0866               	movf	setDimmerLights_Main@lights,w
 12079  09D2  3195  2500  3189   	fcall	_setDimmerLights_Adj
 12080                           
 12081                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12082  09D5  3064               	movlw	100
 12083  09D6  0020               	movlb	0	; select bank0
 12084  09D7  00A9               	movwf	setBuz@time
 12085  09D8  3000               	movlw	0
 12086  09D9  00AA               	movwf	setBuz@time+1
 12087  09DA  3001               	movlw	1
 12088  09DB  3189  2130         	fcall	_setBuz
 12089                           
 12090                           ;Dimmer_B1.c: 466: } else {
 12091  09DD  0008               	return
 12092  09DE                     l7659:	
 12093                           
 12094                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12095  09DE  0020               	movlb	0	; select bank0
 12096  09DF  01E2               	clrf	setDimmerLights_Adj@status
 12097  09E0  0866               	movf	setDimmerLights_Main@lights,w
 12098  09E1  3195  2500         	fcall	_setDimmerLights_Adj
 12099  09E3  0008               	return
 12100  09E4                     __end_of_setDimmerLights_Main:	
 12101                           
 12102                           	psect	text77
 12103  1500                     __ptext77:	
 12104 ;; *************** function _setDimmerLights_Adj *****************
 12105 ;; Defined at:
 12106 ;;		line 646 in file "../src/Dimmer_B1.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  lights          1    wreg     unsigned char 
 12109 ;;  status          1   66[BANK0 ] unsigned char 
 12110 ;; Auto vars:     Size  Location     Type
 12111 ;;  lights          1   68[BANK0 ] unsigned char 
 12112 ;; Return value:  Size  Location     Type
 12113 ;;		None               void
 12114 ;; Registers used:
 12115 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12116 ;; Tracked objects:
 12117 ;;		On entry : 0/0
 12118 ;;		On exit  : 0/0
 12119 ;;		Unchanged: 0/0
 12120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12121 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12125 ;;Total ram usage:        3 bytes
 12126 ;; Hardware stack levels used:    1
 12127 ;; Hardware stack levels required when called:    9
 12128 ;; This function calls:
 12129 ;;		_DimmerLightsPointSelect
 12130 ;;		_setRF_DimmerLights
 12131 ;;		_setTxData
 12132 ;; This function is called by:
 12133 ;;		_setDimmerLights_Main
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           
 12138                           ;psect for function _setDimmerLights_Adj
 12139  1500                     _setDimmerLights_Adj:	
 12140                           
 12141                           ;incstack = 0
 12142                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12143                           ;setDimmerLights_Adj@lights stored from wreg
 12144  1500  0020               	movlb	0	; select bank0
 12145  1501  00E4               	movwf	setDimmerLights_Adj@lights
 12146                           
 12147                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12148  1502  0864               	movf	setDimmerLights_Adj@lights,w
 12149  1503  319E  26B1  3195   	fcall	_DimmerLightsPointSelect
 12150                           
 12151                           ;Dimmer_B1.c: 648: if (status == 1) {
 12152  1506  0020               	movlb	0	; select bank0
 12153  1507  0862               	movf	setDimmerLights_Adj@status,w
 12154  1508  3A01               	xorlw	1
 12155  1509  1D03               	skipz
 12156  150A  2D16               	goto	l6205
 12157                           
 12158                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12159  150B  086D               	movf	_DimmerLights,w
 12160  150C  0086               	movwf	6
 12161  150D  3001               	movlw	1	; select bank2/3
 12162  150E  0087               	movwf	7
 12163  150F  1581               	bsf	1,3
 12164                           
 12165                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12166  1510  086D               	movf	_DimmerLights,w
 12167  1511  0086               	movwf	6
 12168  1512  3001               	movlw	1	; select bank2/3
 12169  1513  0087               	movwf	7
 12170  1514  1481               	bsf	1,1
 12171                           
 12172                           ;Dimmer_B1.c: 651: } else {
 12173  1515  0008               	return
 12174  1516                     l6205:	
 12175                           
 12176                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12177  1516  086D               	movf	_DimmerLights,w
 12178  1517  0086               	movwf	6
 12179  1518  3001               	movlw	1	; select bank2/3
 12180  1519  0087               	movwf	7
 12181  151A  1D81               	btfss	1,3
 12182  151B  0008               	return
 12183                           
 12184                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12185  151C  086D               	movf	_DimmerLights,w
 12186  151D  0086               	movwf	6
 12187  151E  3001               	movlw	1	; select bank2/3
 12188  151F  0087               	movwf	7
 12189  1520  1081               	bcf	1,1
 12190                           
 12191                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12192  1521  086D               	movf	_DimmerLights,w
 12193  1522  0086               	movwf	6
 12194  1523  3001               	movlw	1	; select bank2/3
 12195  1524  0087               	movwf	7
 12196  1525  1181               	bcf	1,3
 12197                           
 12198                           ;Dimmer_B1.c: 656: ;;
 12199                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12200  1526  086D               	movf	_DimmerLights,w
 12201  1527  3E04               	addlw	4
 12202  1528  0086               	movwf	6
 12203  1529  3001               	movlw	1	; select bank2/3
 12204  152A  0087               	movwf	7
 12205  152B  0801               	movf	1,w
 12206  152C  00E3               	movwf	??_setDimmerLights_Adj
 12207  152D  086D               	movf	_DimmerLights,w
 12208  152E  3E05               	addlw	5
 12209  152F  0086               	movwf	6
 12210  1530  3001               	movlw	1	; select bank2/3
 12211  1531  0087               	movwf	7
 12212  1532  0863               	movf	??_setDimmerLights_Adj,w
 12213  1533  0081               	movwf	1
 12214                           
 12215                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12216  1534  01DD               	clrf	setRF_DimmerLights@on
 12217  1535  0ADD               	incf	setRF_DimmerLights@on,f
 12218  1536  0864               	movf	setDimmerLights_Adj@lights,w
 12219  1537  3187  2792  3195   	fcall	_setRF_DimmerLights
 12220                           
 12221                           ;Dimmer_B1.c: 666: setTxData();
 12222  153A  3184  24F1         	fcall	_setTxData
 12223  153C  0008               	return
 12224  153D                     __end_of_setDimmerLights_Adj:	
 12225                           
 12226                           	psect	text78
 12227  0E72                     __ptext78:	
 12228 ;; *************** function _setDimmerLights *****************
 12229 ;; Defined at:
 12230 ;;		line 593 in file "../src/Dimmer_B1.c"
 12231 ;; Parameters:    Size  Location     Type
 12232 ;;  lights          1    wreg     unsigned char 
 12233 ;;  status          1    3[BANK0 ] unsigned char 
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;  lights          1    5[BANK0 ] unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;		None               void
 12238 ;; Registers used:
 12239 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12245 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12248 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12249 ;;Total ram usage:        3 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    7
 12252 ;; This function calls:
 12253 ;;		_DimmerLightsPointSelect
 12254 ;;		_setLED
 12255 ;;		_setMemory_GO
 12256 ;; This function is called by:
 12257 ;;		_setDimmerLights_Main
 12258 ;;		_setControl_Lights_Table
 12259 ;; This function uses a non-reentrant model
 12260 ;;
 12261                           
 12262                           
 12263                           ;psect for function _setDimmerLights
 12264  0E72                     _setDimmerLights:	
 12265                           
 12266                           ;incstack = 0
 12267                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12268                           ;setDimmerLights@lights stored from wreg
 12269  0E72  0020               	movlb	0	; select bank0
 12270  0E73  00A5               	movwf	setDimmerLights@lights
 12271                           
 12272                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12273  0E74  0825               	movf	setDimmerLights@lights,w
 12274  0E75  319E  26B1  318E   	fcall	_DimmerLightsPointSelect
 12275                           
 12276                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12277  0E78  0020               	movlb	0	; select bank0
 12278  0E79  0825               	movf	setDimmerLights@lights,w
 12279  0E7A  00A4               	movwf	??_setDimmerLights
 12280  0E7B  0021               	movlb	1	; select bank1
 12281  0E7C  0A50               	incf	_Dimmer^(0+128),w
 12282  0E7D  0086               	movwf	6
 12283  0E7E  0187               	clrf	7
 12284  0E7F  0020               	movlb	0	; select bank0
 12285  0E80  0824               	movf	??_setDimmerLights,w
 12286  0E81  0081               	movwf	1
 12287                           
 12288                           ;Dimmer_B1.c: 596: if (status == 1) {
 12289  0E82  0823               	movf	setDimmerLights@status,w
 12290  0E83  3A01               	xorlw	1
 12291  0E84  1D03               	skipz
 12292  0E85  2EC7               	goto	l7511
 12293                           
 12294                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12295  0E86  086D               	movf	_DimmerLights,w
 12296  0E87  0086               	movwf	6
 12297  0E88  3001               	movlw	1	; select bank2/3
 12298  0E89  0087               	movwf	7
 12299  0E8A  1681               	bsf	1,5
 12300                           
 12301                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12302  0E8B  01A1               	clrf	setLED@command
 12303  0E8C  0825               	movf	setDimmerLights@lights,w
 12304  0E8D  318B  2301  318E   	fcall	_setLED
 12305                           
 12306                           ;Dimmer_B1.c: 599: RC7=!0;
 12307  0E90  0020               	movlb	0	; select bank0
 12308  0E91  178E               	bsf	14,7	;volatile
 12309                           
 12310                           ;Dimmer_B1.c: 600: ;;
 12311                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12312  0E92  086D               	movf	_DimmerLights,w
 12313  0E93  0086               	movwf	6
 12314  0E94  3001               	movlw	1	; select bank2/3
 12315  0E95  0087               	movwf	7
 12316  0E96  1481               	bsf	1,1
 12317                           
 12318                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12319  0E97  3007               	movlw	7
 12320  0E98  00A4               	movwf	??_setDimmerLights
 12321  0E99  086D               	movf	_DimmerLights,w
 12322  0E9A  3E02               	addlw	2
 12323  0E9B  0086               	movwf	6
 12324  0E9C  3001               	movlw	1	; select bank2/3
 12325  0E9D  0087               	movwf	7
 12326  0E9E  0824               	movf	??_setDimmerLights,w
 12327  0E9F  0081               	movwf	1
 12328                           
 12329                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12330  0EA0  086D               	movf	_DimmerLights,w
 12331  0EA1  0086               	movwf	6
 12332  0EA2  3001               	movlw	1	; select bank2/3
 12333  0EA3  0087               	movwf	7
 12334  0EA4  1B01               	btfsc	1,6
 12335  0EA5  0008               	return
 12336                           
 12337                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12338  0EA6  086D               	movf	_DimmerLights,w
 12339  0EA7  0086               	movwf	6
 12340  0EA8  3001               	movlw	1	; select bank2/3
 12341  0EA9  0087               	movwf	7
 12342  0EAA  1701               	bsf	1,6
 12343                           
 12344                           ;Dimmer_B1.c: 607: ;;
 12345                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12346  0EAB  3000               	movlw	0
 12347  0EAC  3190  20CB         	fcall	_setMemory_GO
 12348                           
 12349                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12350  0EAE  0020               	movlb	0	; select bank0
 12351  0EAF  086D               	movf	_DimmerLights,w
 12352  0EB0  3E05               	addlw	5
 12353  0EB1  0086               	movwf	6
 12354  0EB2  3001               	movlw	1	; select bank2/3
 12355  0EB3  0087               	movwf	7
 12356  0EB4  0801               	movf	1,w
 12357  0EB5  00A4               	movwf	??_setDimmerLights
 12358  0EB6  086D               	movf	_DimmerLights,w
 12359  0EB7  3E04               	addlw	4
 12360  0EB8  0086               	movwf	6
 12361  0EB9  3001               	movlw	1	; select bank2/3
 12362  0EBA  0087               	movwf	7
 12363  0EBB  0824               	movf	??_setDimmerLights,w
 12364  0EBC  0081               	movwf	1
 12365                           
 12366                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12367  0EBD  3020               	movlw	32
 12368  0EBE  00A4               	movwf	??_setDimmerLights
 12369  0EBF  086D               	movf	_DimmerLights,w
 12370  0EC0  3E04               	addlw	4
 12371  0EC1  0086               	movwf	6
 12372  0EC2  3001               	movlw	1	; select bank2/3
 12373  0EC3  0087               	movwf	7
 12374  0EC4  0824               	movf	??_setDimmerLights,w
 12375  0EC5  0081               	movwf	1
 12376                           
 12377                           ;Dimmer_B1.c: 617: }
 12378                           ;Dimmer_B1.c: 618: } else {
 12379  0EC6  0008               	return
 12380  0EC7                     l7511:	
 12381                           
 12382                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12383  0EC7  086D               	movf	_DimmerLights,w
 12384  0EC8  0086               	movwf	6
 12385  0EC9  3001               	movlw	1	; select bank2/3
 12386  0ECA  0087               	movwf	7
 12387  0ECB  1281               	bcf	1,5
 12388                           
 12389                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12390  0ECC  086D               	movf	_DimmerLights,w
 12391  0ECD  3E06               	addlw	6
 12392  0ECE  0086               	movwf	6
 12393  0ECF  3001               	movlw	1	; select bank2/3
 12394  0ED0  0087               	movwf	7
 12395  0ED1  0801               	movf	1,w
 12396  0ED2  00A4               	movwf	??_setDimmerLights
 12397  0ED3  086D               	movf	_DimmerLights,w
 12398  0ED4  3E04               	addlw	4
 12399  0ED5  0086               	movwf	6
 12400  0ED6  3001               	movlw	1	; select bank2/3
 12401  0ED7  0087               	movwf	7
 12402  0ED8  0824               	movf	??_setDimmerLights,w
 12403  0ED9  0081               	movwf	1
 12404                           
 12405                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12406  0EDA  086D               	movf	_DimmerLights,w
 12407  0EDB  0086               	movwf	6
 12408  0EDC  3001               	movlw	1	; select bank2/3
 12409  0EDD  0087               	movwf	7
 12410  0EDE  1481               	bsf	1,1
 12411                           
 12412                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12413  0EDF  086D               	movf	_DimmerLights,w
 12414  0EE0  0086               	movwf	6
 12415  0EE1  3001               	movlw	1	; select bank2/3
 12416  0EE2  0087               	movwf	7
 12417  0EE3  1181               	bcf	1,3
 12418                           
 12419                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12420  0EE4  086D               	movf	_DimmerLights,w
 12421  0EE5  0086               	movwf	6
 12422  0EE6  3001               	movlw	1	; select bank2/3
 12423  0EE7  0087               	movwf	7
 12424  0EE8  1201               	bcf	1,4
 12425                           
 12426                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12427  0EE9  3007               	movlw	7
 12428  0EEA  00A4               	movwf	??_setDimmerLights
 12429  0EEB  086D               	movf	_DimmerLights,w
 12430  0EEC  3E02               	addlw	2
 12431  0EED  0086               	movwf	6
 12432  0EEE  3001               	movlw	1	; select bank2/3
 12433  0EEF  0087               	movwf	7
 12434  0EF0  0824               	movf	??_setDimmerLights,w
 12435  0EF1  0081               	movwf	1
 12436  0EF2  0008               	return
 12437  0EF3                     __end_of_setDimmerLights:	
 12438                           
 12439                           	psect	text79
 12440  0B01                     __ptext79:	
 12441 ;; *************** function _setLED *****************
 12442 ;; Defined at:
 12443 ;;		line 70 in file "../src/LED_B1.c"
 12444 ;; Parameters:    Size  Location     Type
 12445 ;;  led             1    wreg     unsigned char 
 12446 ;;  command         1    1[BANK0 ] unsigned char 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  led             1    2[BANK0 ] unsigned char 
 12449 ;; Return value:  Size  Location     Type
 12450 ;;		None               void
 12451 ;; Registers used:
 12452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12453 ;; Tracked objects:
 12454 ;;		On entry : 0/0
 12455 ;;		On exit  : 0/0
 12456 ;;		Unchanged: 0/0
 12457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12458 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;Total ram usage:        2 bytes
 12463 ;; Hardware stack levels used:    1
 12464 ;; Hardware stack levels required when called:    6
 12465 ;; This function calls:
 12466 ;;		_LedPointSelect
 12467 ;; This function is called by:
 12468 ;;		_setDimmerLights_ERROR
 12469 ;;		_setDimmerLights
 12470 ;;		_setLED_Initialization
 12471 ;;		_setOverTemp_Exceptions
 12472 ;;		_setPowerFault_Exceptions
 12473 ;;		_setSw_Initialization
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           
 12478                           ;psect for function _setLED
 12479  0B01                     _setLED:	
 12480                           
 12481                           ;incstack = 0
 12482                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12483                           ;setLED@led stored from wreg
 12484  0B01  0020               	movlb	0	; select bank0
 12485  0B02  00A2               	movwf	setLED@led
 12486                           
 12487                           ;LED_B1.c: 71: LedPointSelect(led);
 12488  0B03  0822               	movf	setLED@led,w
 12489  0B04  3192  223C  318B   	fcall	_LedPointSelect
 12490                           
 12491                           ;LED_B1.c: 72: if (command == 0) {
 12492  0B07  0020               	movlb	0	; select bank0
 12493  0B08  08A1               	movf	setLED@command,f
 12494  0B09  1D03               	skipz
 12495  0B0A  2B1D               	goto	l7451
 12496                           
 12497                           ;LED_B1.c: 74: if (led == 1) {
 12498  0B0B  0822               	movf	setLED@led,w
 12499  0B0C  3A01               	xorlw	1
 12500  0B0D  1D03               	skipz
 12501  0B0E  2B11               	goto	l7443
 12502                           
 12503                           ;LED_B1.c: 78: RA3 = 1;
 12504  0B0F  158C               	bsf	12,3	;volatile
 12505                           
 12506                           ;LED_B1.c: 80: }
 12507  0B10  0008               	return
 12508  0B11                     l7443:	
 12509                           
 12510                           ;LED_B1.c: 83: else if (led == 2) {
 12511  0B11  0822               	movf	setLED@led,w
 12512  0B12  3A02               	xorlw	2
 12513  0B13  1D03               	skipz
 12514  0B14  2B17               	goto	l7447
 12515                           
 12516                           ;LED_B1.c: 87: RC7 = 1;
 12517  0B15  178E               	bsf	14,7	;volatile
 12518                           
 12519                           ;LED_B1.c: 89: }
 12520  0B16  0008               	return
 12521  0B17                     l7447:	
 12522                           
 12523                           ;LED_B1.c: 101: else if (led == 99) {
 12524  0B17  0822               	movf	setLED@led,w
 12525  0B18  3A63               	xorlw	99
 12526  0B19  1D03               	skipz
 12527  0B1A  0008               	return
 12528                           
 12529                           ;LED_B1.c: 105: RB5 = 1;
 12530  0B1B  168D               	bsf	13,5	;volatile
 12531                           
 12532                           ;LED_B1.c: 107: }
 12533                           ;LED_B1.c: 109: } else if (command == 1) {
 12534  0B1C  0008               	return
 12535  0B1D                     l7451:	
 12536  0B1D  0821               	movf	setLED@command,w
 12537  0B1E  3A01               	xorlw	1
 12538  0B1F  1D03               	skipz
 12539  0B20  2B33               	goto	l7465
 12540                           
 12541                           ;LED_B1.c: 111: if (led == 1) {
 12542  0B21  0822               	movf	setLED@led,w
 12543  0B22  3A01               	xorlw	1
 12544  0B23  1D03               	skipz
 12545  0B24  2B27               	goto	l7457
 12546                           
 12547                           ;LED_B1.c: 115: RA3 = 0;
 12548  0B25  118C               	bcf	12,3	;volatile
 12549                           
 12550                           ;LED_B1.c: 117: }
 12551  0B26  0008               	return
 12552  0B27                     l7457:	
 12553                           
 12554                           ;LED_B1.c: 120: else if (led == 2) {
 12555  0B27  0822               	movf	setLED@led,w
 12556  0B28  3A02               	xorlw	2
 12557  0B29  1D03               	skipz
 12558  0B2A  2B2D               	goto	l7461
 12559                           
 12560                           ;LED_B1.c: 124: RC7 = 0;
 12561  0B2B  138E               	bcf	14,7	;volatile
 12562                           
 12563                           ;LED_B1.c: 126: }
 12564  0B2C  0008               	return
 12565  0B2D                     l7461:	
 12566                           
 12567                           ;LED_B1.c: 138: else if (led == 99) {
 12568  0B2D  0822               	movf	setLED@led,w
 12569  0B2E  3A63               	xorlw	99
 12570  0B2F  1D03               	skipz
 12571  0B30  0008               	return
 12572                           
 12573                           ;LED_B1.c: 142: RB5 = 0;
 12574  0B31  128D               	bcf	13,5	;volatile
 12575                           
 12576                           ;LED_B1.c: 144: }
 12577                           ;LED_B1.c: 146: } else if (command == 10) {
 12578  0B32  0008               	return
 12579  0B33                     l7465:	
 12580  0B33  0821               	movf	setLED@command,w
 12581  0B34  3A0A               	xorlw	10
 12582  0B35  1D03               	skipz
 12583  0B36  2B58               	goto	l7481
 12584                           
 12585                           ;LED_B1.c: 147: LED->GO = 0;
 12586  0B37  0021               	movlb	1	; select bank1
 12587  0B38  084B               	movf	_LED^(0+128),w
 12588  0B39  0086               	movwf	6
 12589  0B3A  084C               	movf	(_LED+1)^(0+128),w
 12590  0B3B  0087               	movwf	7
 12591  0B3C  1081               	bcf	1,1
 12592                           
 12593                           ;LED_B1.c: 148: LED->Time = 0;
 12594  0B3D  084B               	movf	_LED^(0+128),w
 12595  0B3E  0086               	movwf	6
 12596  0B3F  084C               	movf	(_LED+1)^(0+128),w
 12597  0B40  0087               	movwf	7
 12598  0B41  3141               	addfsr 1,1
 12599  0B42  3000               	movlw	0
 12600  0B43  3FC0               	movwi [0]fsr1
 12601  0B44  3FC1               	movwi [1]fsr1
 12602                           
 12603                           ;LED_B1.c: 150: if (led == 1) {
 12604  0B45  0020               	movlb	0	; select bank0
 12605  0B46  0822               	movf	setLED@led,w
 12606  0B47  3A01               	xorlw	1
 12607  0B48  1D03               	skipz
 12608  0B49  2B4C               	goto	l7473
 12609                           
 12610                           ;LED_B1.c: 154: RA3 = 1;
 12611  0B4A  158C               	bsf	12,3	;volatile
 12612                           
 12613                           ;LED_B1.c: 156: }
 12614  0B4B  0008               	return
 12615  0B4C                     l7473:	
 12616                           
 12617                           ;LED_B1.c: 159: else if (led == 2) {
 12618  0B4C  0822               	movf	setLED@led,w
 12619  0B4D  3A02               	xorlw	2
 12620  0B4E  1D03               	skipz
 12621  0B4F  2B52               	goto	l7477
 12622                           
 12623                           ;LED_B1.c: 163: RC7 = 1;
 12624  0B50  178E               	bsf	14,7	;volatile
 12625                           
 12626                           ;LED_B1.c: 165: }
 12627  0B51  0008               	return
 12628  0B52                     l7477:	
 12629                           
 12630                           ;LED_B1.c: 177: else if (led == 99) {
 12631  0B52  0822               	movf	setLED@led,w
 12632  0B53  3A63               	xorlw	99
 12633  0B54  1D03               	skipz
 12634  0B55  0008               	return
 12635                           
 12636                           ;LED_B1.c: 181: RB5 = 1;
 12637  0B56  168D               	bsf	13,5	;volatile
 12638                           
 12639                           ;LED_B1.c: 183: }
 12640                           ;LED_B1.c: 185: } else if (command == 11) {
 12641  0B57  0008               	return
 12642  0B58                     l7481:	
 12643  0B58  0821               	movf	setLED@command,w
 12644  0B59  3A0B               	xorlw	11
 12645  0B5A  1D03               	skipz
 12646  0B5B  0008               	return
 12647                           
 12648                           ;LED_B1.c: 186: LED->GO = 1;
 12649  0B5C  0021               	movlb	1	; select bank1
 12650  0B5D  084B               	movf	_LED^(0+128),w
 12651  0B5E  0086               	movwf	6
 12652  0B5F  084C               	movf	(_LED+1)^(0+128),w
 12653  0B60  0087               	movwf	7
 12654  0B61  1481               	bsf	1,1
 12655  0B62  0008               	return
 12656  0B63                     __end_of_setLED:	
 12657                           
 12658                           	psect	text80
 12659  123C                     __ptext80:	
 12660 ;; *************** function _LedPointSelect *****************
 12661 ;; Defined at:
 12662 ;;		line 7 in file "../src/LED_B1.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;  led             1    wreg     unsigned char 
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;  led             1    0[BANK0 ] unsigned char 
 12667 ;; Return value:  Size  Location     Type
 12668 ;;		None               void
 12669 ;; Registers used:
 12670 ;;		wreg, status,2, status,0
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        1 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    5
 12683 ;; This function calls:
 12684 ;;		Nothing
 12685 ;; This function is called by:
 12686 ;;		_setLED_Initialization
 12687 ;;		_setLED
 12688 ;;		_setLED_Main
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692                           
 12693                           ;psect for function _LedPointSelect
 12694  123C                     _LedPointSelect:	
 12695                           
 12696                           ;incstack = 0
 12697                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12698                           ;LedPointSelect@led stored from wreg
 12699  123C  0020               	movlb	0	; select bank0
 12700  123D  00A0               	movwf	LedPointSelect@led
 12701                           
 12702                           ;LED_B1.c: 9: if (led == 1) {
 12703  123E  0820               	movf	LedPointSelect@led,w
 12704  123F  3A01               	xorlw	1
 12705  1240  1D03               	skipz
 12706  1241  2A48               	goto	l7427
 12707                           
 12708                           ;LED_B1.c: 10: LED = &VarLED1;
 12709  1242  3067               	movlw	low _VarLED1
 12710  1243  0021               	movlb	1	; select bank1
 12711  1244  00CB               	movwf	_LED^(0+128)
 12712  1245  3001               	movlw	high _VarLED1
 12713  1246  00CC               	movwf	(_LED+1)^(0+128)
 12714                           
 12715                           ;LED_B1.c: 11: }
 12716  1247  0008               	return
 12717  1248                     l7427:	
 12718                           
 12719                           ;LED_B1.c: 14: else if (led == 2) {
 12720  1248  0020               	movlb	0	; select bank0
 12721  1249  0820               	movf	LedPointSelect@led,w
 12722  124A  3A02               	xorlw	2
 12723  124B  1D03               	skipz
 12724  124C  2A53               	goto	l7431
 12725                           
 12726                           ;LED_B1.c: 15: LED = &VarLED2;
 12727  124D  306B               	movlw	low _VarLED2
 12728  124E  0021               	movlb	1	; select bank1
 12729  124F  00CB               	movwf	_LED^(0+128)
 12730  1250  3001               	movlw	high _VarLED2
 12731  1251  00CC               	movwf	(_LED+1)^(0+128)
 12732                           
 12733                           ;LED_B1.c: 16: }
 12734  1252  0008               	return
 12735  1253                     l7431:	
 12736                           
 12737                           ;LED_B1.c: 24: else if (led == 99) {
 12738  1253  0020               	movlb	0	; select bank0
 12739  1254  0820               	movf	LedPointSelect@led,w
 12740  1255  3A63               	xorlw	99
 12741  1256  1D03               	skipz
 12742  1257  0008               	return
 12743                           
 12744                           ;LED_B1.c: 25: LED = &VarErrLED;
 12745  1258  30E7               	movlw	low _VarErrLED
 12746  1259  0021               	movlb	1	; select bank1
 12747  125A  00CB               	movwf	_LED^(0+128)
 12748  125B  3000               	movlw	high _VarErrLED
 12749  125C  00CC               	movwf	(_LED+1)^(0+128)
 12750  125D  0008               	return
 12751  125E                     __end_of_LedPointSelect:	
 12752                           
 12753                           	psect	text81
 12754  10A2                     __ptext81:	
 12755 ;; *************** function _DimmerLights_Close *****************
 12756 ;; Defined at:
 12757 ;;		line 396 in file "../src/Dimmer_B1.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;		None
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;		None
 12762 ;; Return value:  Size  Location     Type
 12763 ;;		None               void
 12764 ;; Registers used:
 12765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12775 ;;Total ram usage:        0 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:    6
 12778 ;; This function calls:
 12779 ;;		_getDimmerLights_StatusFlag
 12780 ;;		_setMemory_GO
 12781 ;; This function is called by:
 12782 ;;		_DimmerLights_Main
 12783 ;; This function uses a non-reentrant model
 12784 ;;
 12785                           
 12786                           
 12787                           ;psect for function _DimmerLights_Close
 12788  10A2                     _DimmerLights_Close:	
 12789                           
 12790                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12791                           
 12792                           ;incstack = 0
 12793                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12794  10A2  0021               	movlb	1	; select bank1
 12795  10A3  0850               	movf	_Dimmer^(0+128),w
 12796  10A4  0086               	movwf	6
 12797  10A5  0187               	clrf	7
 12798  10A6  1C01               	btfss	1,0
 12799  10A7  0008               	return
 12800                           
 12801                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12802  10A8  0850               	movf	_Dimmer^(0+128),w
 12803  10A9  0086               	movwf	6
 12804  10AA  0187               	clrf	7
 12805  10AB  1001               	bcf	1,0
 12806                           
 12807                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12808  10AC  319E  2686  3190   	fcall	_getDimmerLights_StatusFlag
 12809  10AF  3800               	iorlw	0
 12810  10B0  1D03               	skipz
 12811  10B1  0008               	return
 12812                           
 12813                           ;Dimmer_B1.c: 400: ;;
 12814                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12815  10B2  3001               	movlw	1
 12816  10B3  3190  20CB         	fcall	_setMemory_GO
 12817  10B5  0008               	return
 12818  10B6                     __end_of_DimmerLights_Close:	
 12819                           
 12820                           	psect	text82
 12821  10CB                     __ptext82:	
 12822 ;; *************** function _setMemory_GO *****************
 12823 ;; Defined at:
 12824 ;;		line 889 in file "../src/MCU_B1.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;  command         1    wreg     unsigned char 
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;  command         1    2[BANK0 ] unsigned char 
 12829 ;; Return value:  Size  Location     Type
 12830 ;;		None               void
 12831 ;; Registers used:
 12832 ;;		wreg, status,2, status,0
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        3 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:    5
 12845 ;; This function calls:
 12846 ;;		Nothing
 12847 ;; This function is called by:
 12848 ;;		_DimmerLights_Close
 12849 ;;		_setDimmerLights
 12850 ;; This function uses a non-reentrant model
 12851 ;;
 12852                           
 12853                           
 12854                           ;psect for function _setMemory_GO
 12855  10CB                     _setMemory_GO:	
 12856                           
 12857                           ;incstack = 0
 12858                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12859                           ;setMemory_GO@command stored from wreg
 12860  10CB  0020               	movlb	0	; select bank0
 12861  10CC  00A2               	movwf	setMemory_GO@command
 12862                           
 12863                           ;MCU_B1.c: 890: Memory.GO = command;
 12864  10CD  0822               	movf	setMemory_GO@command,w
 12865  10CE  0022               	movlb	2	; select bank2
 12866  10CF  10E1               	bcf	(_Memory^(0+256)+36),1
 12867  10D0  1D03               	skipz
 12868  10D1  14E1               	bsf	(_Memory^(0+256)+36),1
 12869                           
 12870                           ;MCU_B1.c: 891: if (command == 0) {
 12871  10D2  0020               	movlb	0	; select bank0
 12872  10D3  08A2               	movf	setMemory_GO@command,f
 12873  10D4  1D03               	skipz
 12874  10D5  0008               	return
 12875                           
 12876                           ;MCU_B1.c: 892: Memory.Time = command;
 12877  10D6  0822               	movf	setMemory_GO@command,w
 12878  10D7  00A0               	movwf	??_setMemory_GO
 12879  10D8  01A1               	clrf	??_setMemory_GO+1
 12880  10D9  0820               	movf	??_setMemory_GO,w
 12881  10DA  0022               	movlb	2	; select bank2
 12882  10DB  00DF               	movwf	(_Memory^(0+256)+34)
 12883  10DC  0020               	movlb	0	; select bank0
 12884  10DD  0821               	movf	??_setMemory_GO+1,w
 12885  10DE  0022               	movlb	2	; select bank2
 12886  10DF  00E0               	movwf	((_Memory+1)^(0+256)+34)
 12887  10E0  0008               	return
 12888  10E1                     __end_of_setMemory_GO:	
 12889                           
 12890                           	psect	text83
 12891  1E86                     __ptext83:	
 12892 ;; *************** function _getDimmerLights_StatusFlag *****************
 12893 ;; Defined at:
 12894 ;;		line 475 in file "../src/Dimmer_B1.c"
 12895 ;; Parameters:    Size  Location     Type
 12896 ;;		None
 12897 ;; Auto vars:     Size  Location     Type
 12898 ;;  Status          1    0[BANK0 ] unsigned char 
 12899 ;; Return value:  Size  Location     Type
 12900 ;;                  1    wreg      unsigned char 
 12901 ;; Registers used:
 12902 ;;		wreg, status,2
 12903 ;; Tracked objects:
 12904 ;;		On entry : 0/0
 12905 ;;		On exit  : 0/0
 12906 ;;		Unchanged: 0/0
 12907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;Total ram usage:        1 bytes
 12913 ;; Hardware stack levels used:    1
 12914 ;; Hardware stack levels required when called:    5
 12915 ;; This function calls:
 12916 ;;		Nothing
 12917 ;; This function is called by:
 12918 ;;		_DimmerLights_Close
 12919 ;;		_DimmerLights_Exceptions
 12920 ;; This function uses a non-reentrant model
 12921 ;;
 12922                           
 12923                           
 12924                           ;psect for function _getDimmerLights_StatusFlag
 12925  1E86                     _getDimmerLights_StatusFlag:	
 12926                           
 12927                           ;Dimmer_B1.c: 476: char Status = 0;
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12931  1E86  0020               	movlb	0	; select bank0
 12932  1E87  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12933                           
 12934                           ;Dimmer_B1.c: 487: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12935  1E88  3000               	movlw	0
 12936  1E89  0023               	movlb	3	; select bank3
 12937  1E8A  1B40               	btfsc	_DimmerLights1^(0+384),6
 12938  1E8B  3001               	movlw	1
 12939  1E8C  0020               	movlb	0	; select bank0
 12940  1E8D  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12941                           
 12942                           ;Dimmer_B1.c: 490: return Status;
 12943  1E8E  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12944  1E8F  0008               	return
 12945  1E90                     __end_of_getDimmerLights_StatusFlag:	
 12946                           
 12947                           	psect	text84
 12948  1F0F                     __ptext84:	
 12949 ;; *************** function _DimmerLights_Initialization *****************
 12950 ;; Defined at:
 12951 ;;		line 334 in file "../src/Dimmer_B1.c"
 12952 ;; Parameters:    Size  Location     Type
 12953 ;;		None
 12954 ;; Auto vars:     Size  Location     Type
 12955 ;;		None
 12956 ;; Return value:  Size  Location     Type
 12957 ;;		None               void
 12958 ;; Registers used:
 12959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12960 ;; Tracked objects:
 12961 ;;		On entry : 0/0
 12962 ;;		On exit  : 0/0
 12963 ;;		Unchanged: 0/0
 12964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12968 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;Total ram usage:        1 bytes
 12970 ;; Hardware stack levels used:    1
 12971 ;; Hardware stack levels required when called:    7
 12972 ;; This function calls:
 12973 ;;		_Dimmer_Initialization
 12974 ;;		_setDimmerLights_Initialization
 12975 ;; This function is called by:
 12976 ;;		_main
 12977 ;; This function uses a non-reentrant model
 12978 ;;
 12979                           
 12980                           
 12981                           ;psect for function _DimmerLights_Initialization
 12982  1F0F                     _DimmerLights_Initialization:	
 12983                           
 12984                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 12985                           
 12986                           ;incstack = 0
 12987                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12988  1F0F  30C0               	movlw	_DimmerLights1& (0+255)
 12989  1F10  0020               	movlb	0	; select bank0
 12990  1F11  00A4               	movwf	??_DimmerLights_Initialization
 12991  1F12  0824               	movf	??_DimmerLights_Initialization,w
 12992  1F13  0021               	movlb	1	; select bank1
 12993  1F14  00D1               	movwf	_DimmerLights11^(0+128)
 12994                           
 12995                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 12996  1F15  3001               	movlw	1
 12997  1F16  3193  2392  319F   	fcall	_setDimmerLights_Initialization
 12998                           
 12999                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 13000  1F19  319E  262E         	fcall	_Dimmer_Initialization
 13001  1F1B  0008               	return
 13002  1F1C                     __end_of_DimmerLights_Initialization:	
 13003                           
 13004                           	psect	text85
 13005  1392                     __ptext85:	
 13006 ;; *************** function _setDimmerLights_Initialization *****************
 13007 ;; Defined at:
 13008 ;;		line 357 in file "../src/Dimmer_B1.c"
 13009 ;; Parameters:    Size  Location     Type
 13010 ;;  lights          1    wreg     unsigned char 
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  lights          1    3[BANK0 ] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;		None               void
 13015 ;; Registers used:
 13016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;Total ram usage:        2 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    6
 13029 ;; This function calls:
 13030 ;;		_DimmerLightsPointSelect
 13031 ;; This function is called by:
 13032 ;;		_DimmerLights_Initialization
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           
 13037                           ;psect for function _setDimmerLights_Initialization
 13038  1392                     _setDimmerLights_Initialization:	
 13039                           
 13040                           ;incstack = 0
 13041                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13042                           ;setDimmerLights_Initialization@lights stored from wreg
 13043  1392  0020               	movlb	0	; select bank0
 13044  1393  00A3               	movwf	setDimmerLights_Initialization@lights
 13045                           
 13046                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13047  1394  0823               	movf	setDimmerLights_Initialization@lights,w
 13048  1395  319E  26B1         	fcall	_DimmerLightsPointSelect
 13049                           
 13050                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13051  1397  0020               	movlb	0	; select bank0
 13052  1398  086D               	movf	_DimmerLights,w
 13053  1399  3E09               	addlw	9
 13054  139A  0086               	movwf	6
 13055  139B  3001               	movlw	1	; select bank2/3
 13056  139C  0087               	movwf	7
 13057  139D  1501               	bsf	1,2
 13058                           
 13059                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13060  139E  3020               	movlw	32
 13061  139F  00A2               	movwf	??_setDimmerLights_Initialization
 13062  13A0  086D               	movf	_DimmerLights,w
 13063  13A1  3E05               	addlw	5
 13064  13A2  0086               	movwf	6
 13065  13A3  3001               	movlw	1	; select bank2/3
 13066  13A4  0087               	movwf	7
 13067  13A5  0822               	movf	??_setDimmerLights_Initialization,w
 13068  13A6  0081               	movwf	1
 13069                           
 13070                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13071  13A7  303C               	movlw	60
 13072  13A8  00A2               	movwf	??_setDimmerLights_Initialization
 13073  13A9  086D               	movf	_DimmerLights,w
 13074  13AA  3E06               	addlw	6
 13075  13AB  0086               	movwf	6
 13076  13AC  3001               	movlw	1	; select bank2/3
 13077  13AD  0087               	movwf	7
 13078  13AE  0822               	movf	??_setDimmerLights_Initialization,w
 13079  13AF  0081               	movwf	1
 13080                           
 13081                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13082  13B0  086D               	movf	_DimmerLights,w
 13083  13B1  3E06               	addlw	6
 13084  13B2  0086               	movwf	6
 13085  13B3  3001               	movlw	1	; select bank2/3
 13086  13B4  0087               	movwf	7
 13087  13B5  0801               	movf	1,w
 13088  13B6  00A2               	movwf	??_setDimmerLights_Initialization
 13089  13B7  086D               	movf	_DimmerLights,w
 13090  13B8  3E04               	addlw	4
 13091  13B9  0086               	movwf	6
 13092  13BA  3001               	movlw	1	; select bank2/3
 13093  13BB  0087               	movwf	7
 13094  13BC  0822               	movf	??_setDimmerLights_Initialization,w
 13095  13BD  0081               	movwf	1
 13096  13BE  0008               	return
 13097  13BF                     __end_of_setDimmerLights_Initialization:	
 13098                           
 13099                           	psect	text86
 13100  1E2E                     __ptext86:	
 13101 ;; *************** function _Dimmer_Initialization *****************
 13102 ;; Defined at:
 13103 ;;		line 786 in file "../src/Dimmer_B1.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;		None
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;		None
 13108 ;; Return value:  Size  Location     Type
 13109 ;;		None               void
 13110 ;; Registers used:
 13111 ;;		wreg
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;Total ram usage:        1 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; Hardware stack levels required when called:    5
 13124 ;; This function calls:
 13125 ;;		Nothing
 13126 ;; This function is called by:
 13127 ;;		_DimmerLights_Initialization
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function _Dimmer_Initialization
 13133  1E2E                     _Dimmer_Initialization:	
 13134                           
 13135                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in _Dimmer_Initialization: [wreg]
 13139  1E2E  30EB               	movlw	_Dimmer1& (0+255)
 13140  1E2F  0020               	movlb	0	; select bank0
 13141  1E30  00A0               	movwf	??_Dimmer_Initialization
 13142  1E31  0820               	movf	??_Dimmer_Initialization,w
 13143  1E32  0021               	movlb	1	; select bank1
 13144  1E33  00D0               	movwf	_Dimmer^(0+128)
 13145  1E34  0008               	return
 13146  1E35                     __end_of_Dimmer_Initialization:	
 13147                           
 13148                           	psect	text87
 13149  1E06                     __ptext87:	
 13150 ;; *************** function _DelayOff_Main *****************
 13151 ;; Defined at:
 13152 ;;		line 41 in file "../src/DelayOff_B1.c"
 13153 ;; Parameters:    Size  Location     Type
 13154 ;;		None
 13155 ;; Auto vars:     Size  Location     Type
 13156 ;;		None
 13157 ;; Return value:  Size  Location     Type
 13158 ;;		None               void
 13159 ;; Registers used:
 13160 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13161 ;; Tracked objects:
 13162 ;;		On entry : 0/0
 13163 ;;		On exit  : 0/0
 13164 ;;		Unchanged: 0/0
 13165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;Total ram usage:        0 bytes
 13171 ;; Hardware stack levels used:    1
 13172 ;; Hardware stack levels required when called:   10
 13173 ;; This function calls:
 13174 ;;		_DlyOff_Main
 13175 ;; This function is called by:
 13176 ;;		_main
 13177 ;; This function uses a non-reentrant model
 13178 ;;
 13179                           
 13180                           
 13181                           ;psect for function _DelayOff_Main
 13182  1E06                     _DelayOff_Main:	
 13183                           
 13184                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13185                           
 13186                           ;incstack = 0
 13187                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13188  1E06  3001               	movlw	1
 13189  1E07  318D  25F8         	fcall	_DlyOff_Main
 13190  1E09  0008               	return
 13191  1E0A                     __end_of_DelayOff_Main:	
 13192                           
 13193                           	psect	text88
 13194  0DF8                     __ptext88:	
 13195 ;; *************** function _DlyOff_Main *****************
 13196 ;; Defined at:
 13197 ;;		line 62 in file "../src/DelayOff_B1.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  sw              1    wreg     unsigned char 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  sw              1   68[BANK0 ] unsigned char 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;		None               void
 13204 ;; Registers used:
 13205 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;Total ram usage:        3 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    9
 13218 ;; This function calls:
 13219 ;;		_DelayOffPointSelect
 13220 ;;		_setBuz
 13221 ;;		_setDimmerLights_Switch
 13222 ;;		_setDimmerLights_Trigger
 13223 ;;		_setRFSW_Status
 13224 ;;		_setRF_DimmerLights
 13225 ;;		_setSw_Status
 13226 ;;		_setTxData
 13227 ;; This function is called by:
 13228 ;;		_DelayOff_Main
 13229 ;; This function uses a non-reentrant model
 13230 ;;
 13231                           
 13232                           
 13233                           ;psect for function _DlyOff_Main
 13234  0DF8                     _DlyOff_Main:	
 13235                           
 13236                           ;incstack = 0
 13237                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13238                           ;DlyOff_Main@sw stored from wreg
 13239  0DF8  0020               	movlb	0	; select bank0
 13240  0DF9  00E4               	movwf	DlyOff_Main@sw
 13241                           
 13242                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13243  0DFA  0864               	movf	DlyOff_Main@sw,w
 13244  0DFB  319E  269B  318D   	fcall	_DelayOffPointSelect
 13245                           
 13246                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13247  0DFE  0878               	movf	_DelayOff,w
 13248  0DFF  0086               	movwf	6
 13249  0E00  3001               	movlw	1	; select bank2/3
 13250  0E01  0087               	movwf	7
 13251  0E02  1C81               	btfss	1,1
 13252  0E03  0008               	return
 13253                           
 13254                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13255  0E04  0878               	movf	_DelayOff,w
 13256  0E05  3E02               	addlw	2
 13257  0E06  0086               	movwf	6
 13258  0E07  3001               	movlw	1	; select bank2/3
 13259  0E08  0087               	movwf	7
 13260  0E09  3001               	movlw	1
 13261  0E0A  0781               	addwf	1,f
 13262  0E0B  3141               	addfsr 1,1
 13263  0E0C  1803               	skipnc
 13264  0E0D  0A81               	incf	1,f
 13265                           
 13266                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13267  0E0E  0878               	movf	_DelayOff,w
 13268  0E0F  3E02               	addlw	2
 13269  0E10  0086               	movwf	6
 13270  0E11  3001               	movlw	1	; select bank2/3
 13271  0E12  0087               	movwf	7
 13272  0E13  3F40               	moviw [0]fsr1
 13273  0E14  0020               	movlb	0	; select bank0
 13274  0E15  00E2               	movwf	??_DlyOff_Main
 13275  0E16  3F41               	moviw [1]fsr1
 13276  0E17  00E3               	movwf	??_DlyOff_Main+1
 13277  0E18  3015               	movlw	21
 13278  0E19  0263               	subwf	??_DlyOff_Main+1,w
 13279  0E1A  30E0               	movlw	224
 13280  0E1B  1903               	skipnz
 13281  0E1C  0262               	subwf	??_DlyOff_Main,w
 13282  0E1D  1C03               	skipc
 13283  0E1E  0008               	return
 13284                           
 13285                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13286  0E1F  0878               	movf	_DelayOff,w
 13287  0E20  3E02               	addlw	2
 13288  0E21  0086               	movwf	6
 13289  0E22  3001               	movlw	1	; select bank2/3
 13290  0E23  0087               	movwf	7
 13291  0E24  3000               	movlw	0
 13292  0E25  3FC0               	movwi [0]fsr1
 13293  0E26  3FC1               	movwi [1]fsr1
 13294                           
 13295                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13296  0E27  3001               	movlw	1
 13297  0E28  00E2               	movwf	??_DlyOff_Main
 13298  0E29  0878               	movf	_DelayOff,w
 13299  0E2A  3E04               	addlw	4
 13300  0E2B  0086               	movwf	6
 13301  0E2C  3001               	movlw	1	; select bank2/3
 13302  0E2D  0087               	movwf	7
 13303  0E2E  0862               	movf	??_DlyOff_Main,w
 13304  0E2F  0781               	addwf	1,f
 13305                           
 13306                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13307  0E30  0878               	movf	_DelayOff,w
 13308  0E31  3E04               	addlw	4
 13309  0E32  0086               	movwf	6
 13310  0E33  3001               	movlw	1	; select bank2/3
 13311  0E34  0087               	movwf	7
 13312  0E35  0A78               	incf	_DelayOff,w
 13313  0E36  0084               	movwf	4
 13314  0E37  3001               	movlw	1	; select bank2/3
 13315  0E38  0085               	movwf	5
 13316  0E39  0800               	movf	0,w
 13317  0E3A  0201               	subwf	1,w
 13318  0E3B  1C03               	skipc
 13319  0E3C  0008               	return
 13320                           
 13321                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13322  0E3D  0878               	movf	_DelayOff,w
 13323  0E3E  3E04               	addlw	4
 13324  0E3F  0086               	movwf	6
 13325  0E40  3001               	movlw	1	; select bank2/3
 13326  0E41  0087               	movwf	7
 13327  0E42  0181               	clrf	1
 13328                           
 13329                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13330  0E43  0878               	movf	_DelayOff,w
 13331  0E44  0086               	movwf	6
 13332  0E45  3001               	movlw	1	; select bank2/3
 13333  0E46  0087               	movwf	7
 13334  0E47  1081               	bcf	1,1
 13335                           
 13336                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13337  0E48  01A2               	clrf	setSw_Status@command
 13338  0E49  0864               	movf	DlyOff_Main@sw,w
 13339  0E4A  319F  2745  318D   	fcall	_setSw_Status
 13340                           
 13341                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13342  0E4D  0020               	movlb	0	; select bank0
 13343  0E4E  01A2               	clrf	setRFSW_Status@command
 13344  0E4F  0864               	movf	DlyOff_Main@sw,w
 13345  0E50  319F  2729  318D   	fcall	_setRFSW_Status
 13346                           
 13347                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13348  0E53  0020               	movlb	0	; select bank0
 13349  0E54  01DD               	clrf	setRF_DimmerLights@on
 13350  0E55  0864               	movf	DlyOff_Main@sw,w
 13351  0E56  3187  2792  318D   	fcall	_setRF_DimmerLights
 13352                           
 13353                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13354  0E59  0020               	movlb	0	; select bank0
 13355  0E5A  01A2               	clrf	setDimmerLights_Trigger@command
 13356  0E5B  0AA2               	incf	setDimmerLights_Trigger@command,f
 13357  0E5C  0864               	movf	DlyOff_Main@sw,w
 13358  0E5D  319F  27AF  318D   	fcall	_setDimmerLights_Trigger
 13359                           
 13360                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13361  0E60  0020               	movlb	0	; select bank0
 13362  0E61  01A2               	clrf	setDimmerLights_Switch@command
 13363  0E62  0864               	movf	DlyOff_Main@sw,w
 13364  0E63  319F  279F  318D   	fcall	_setDimmerLights_Switch
 13365                           
 13366                           ;DelayOff_B1.c: 78: setTxData();
 13367  0E66  3184  24F1  318D   	fcall	_setTxData
 13368                           
 13369                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13370  0E69  3064               	movlw	100
 13371  0E6A  0020               	movlb	0	; select bank0
 13372  0E6B  00A9               	movwf	setBuz@time
 13373  0E6C  3000               	movlw	0
 13374  0E6D  00AA               	movwf	setBuz@time+1
 13375  0E6E  3001               	movlw	1
 13376  0E6F  3189  2130         	fcall	_setBuz
 13377  0E71  0008               	return
 13378  0E72                     __end_of_DlyOff_Main:	
 13379                           
 13380                           	psect	text89
 13381  04F1                     __ptext89:	
 13382 ;; *************** function _setTxData *****************
 13383 ;; Defined at:
 13384 ;;		line 153 in file "../src/RF_Control_B1.c"
 13385 ;; Parameters:    Size  Location     Type
 13386 ;;		None
 13387 ;; Auto vars:     Size  Location     Type
 13388 ;;  i               1    0        unsigned char 
 13389 ;; Return value:  Size  Location     Type
 13390 ;;		None               void
 13391 ;; Registers used:
 13392 ;;		wreg, fsr1l, fsr1h
 13393 ;; Tracked objects:
 13394 ;;		On entry : 0/0
 13395 ;;		On exit  : 0/0
 13396 ;;		Unchanged: 0/0
 13397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;Total ram usage:        1 bytes
 13403 ;; Hardware stack levels used:    1
 13404 ;; Hardware stack levels required when called:    5
 13405 ;; This function calls:
 13406 ;;		Nothing
 13407 ;; This function is called by:
 13408 ;;		_DlyOff_Main
 13409 ;;		_setDimmerLights_Adj
 13410 ;;		_setControl_Lights_Table
 13411 ;;		_setRFSW_Control
 13412 ;;		_setRFSW_AdjControl
 13413 ;;		_Sw_DimmerOnFunc
 13414 ;;		_Sw_DimmerOffFunc
 13415 ;; This function uses a non-reentrant model
 13416 ;;
 13417                           
 13418                           
 13419                           ;psect for function _setTxData
 13420  04F1                     _setTxData:	
 13421                           
 13422                           ;RF_Control_B1.c: 154: char i;
 13423                           ;RF_Control_B1.c: 155: if (RF1.Enable == 1) {
 13424                           
 13425                           ;incstack = 0
 13426                           ; Regs used in _setTxData: [wregfsr1]
 13427  04F1  0021               	movlb	1	; select bank1
 13428  04F2  1C46               	btfss	_RF1^(0+128),0
 13429  04F3  0008               	return
 13430                           
 13431                           ;RF_Control_B1.c: 157: RF1.TransceiveGO = 1;
 13432  04F4  1546               	bsf	_RF1^(0+128),2
 13433                           
 13434                           ;RF_Control_B1.c: 167: RF_Data[0] = 0x63;
 13435  04F5  3063               	movlw	99
 13436  04F6  0020               	movlb	0	; select bank0
 13437  04F7  00A0               	movwf	??_setTxData
 13438  04F8  0820               	movf	??_setTxData,w
 13439  04F9  0022               	movlb	2	; select bank2
 13440  04FA  00A0               	movwf	_RF_Data^(0+256)
 13441                           
 13442                           ;RF_Control_B1.c: 168: RF_Data[1] = 0x02;
 13443  04FB  3002               	movlw	2
 13444  04FC  0020               	movlb	0	; select bank0
 13445  04FD  00A0               	movwf	??_setTxData
 13446  04FE  0820               	movf	??_setTxData,w
 13447  04FF  0022               	movlb	2	; select bank2
 13448  0500  00A1               	movwf	(_RF_Data^(0+256)+1)
 13449                           
 13450                           ;RF_Control_B1.c: 169: RF_Data[2] = product->Data[2];
 13451  0501  0020               	movlb	0	; select bank0
 13452  0502  086F               	movf	_product,w
 13453  0503  0086               	movwf	6
 13454  0504  3001               	movlw	1	; select bank2/3
 13455  0505  0087               	movwf	7
 13456  0506  3001               	movlw	1	; select bank2/3
 13457  0507  3F42               	moviw [2]fsr1
 13458  0508  0022               	movlb	2	; select bank2
 13459  0509  00A2               	movwf	(_RF_Data^(0+256)+2)
 13460                           
 13461                           ;RF_Control_B1.c: 170: RF_Data[3] = product->Data[3];
 13462  050A  0020               	movlb	0	; select bank0
 13463  050B  086F               	movf	_product,w
 13464  050C  0086               	movwf	6
 13465  050D  3001               	movlw	1	; select bank2/3
 13466  050E  0087               	movwf	7
 13467  050F  3001               	movlw	1	; select bank2/3
 13468  0510  3F43               	moviw [3]fsr1
 13469  0511  0022               	movlb	2	; select bank2
 13470  0512  00A3               	movwf	(_RF_Data^(0+256)+3)
 13471                           
 13472                           ;RF_Control_B1.c: 171: RF_Data[4] = product->Data[4];
 13473  0513  0020               	movlb	0	; select bank0
 13474  0514  086F               	movf	_product,w
 13475  0515  0086               	movwf	6
 13476  0516  3001               	movlw	1	; select bank2/3
 13477  0517  0087               	movwf	7
 13478  0518  3001               	movlw	1	; select bank2/3
 13479  0519  3F44               	moviw [4]fsr1
 13480  051A  0022               	movlb	2	; select bank2
 13481  051B  00A4               	movwf	(_RF_Data^(0+256)+4)
 13482                           
 13483                           ;RF_Control_B1.c: 172: RF_Data[5] = product->Data[5];
 13484  051C  0020               	movlb	0	; select bank0
 13485  051D  086F               	movf	_product,w
 13486  051E  0086               	movwf	6
 13487  051F  3001               	movlw	1	; select bank2/3
 13488  0520  0087               	movwf	7
 13489  0521  3001               	movlw	1	; select bank2/3
 13490  0522  3F45               	moviw [5]fsr1
 13491  0523  0022               	movlb	2	; select bank2
 13492  0524  00A5               	movwf	(_RF_Data^(0+256)+5)
 13493                           
 13494                           ;RF_Control_B1.c: 173: RF_Data[6] = product->Data[6];
 13495  0525  0020               	movlb	0	; select bank0
 13496  0526  086F               	movf	_product,w
 13497  0527  0086               	movwf	6
 13498  0528  3001               	movlw	1	; select bank2/3
 13499  0529  0087               	movwf	7
 13500  052A  3001               	movlw	1	; select bank2/3
 13501  052B  3F46               	moviw [6]fsr1
 13502  052C  0022               	movlb	2	; select bank2
 13503  052D  00A6               	movwf	(_RF_Data^(0+256)+6)
 13504                           
 13505                           ;RF_Control_B1.c: 174: RF_Data[7] = product->Data[7];
 13506  052E  0020               	movlb	0	; select bank0
 13507  052F  086F               	movf	_product,w
 13508  0530  0086               	movwf	6
 13509  0531  3001               	movlw	1	; select bank2/3
 13510  0532  0087               	movwf	7
 13511  0533  3001               	movlw	1	; select bank2/3
 13512  0534  3F47               	moviw [7]fsr1
 13513  0535  0022               	movlb	2	; select bank2
 13514  0536  00A7               	movwf	(_RF_Data^(0+256)+7)
 13515                           
 13516                           ;RF_Control_B1.c: 175: RF_Data[8] = product->Data[8];
 13517  0537  0020               	movlb	0	; select bank0
 13518  0538  086F               	movf	_product,w
 13519  0539  0086               	movwf	6
 13520  053A  3001               	movlw	1	; select bank2/3
 13521  053B  0087               	movwf	7
 13522  053C  3001               	movlw	1	; select bank2/3
 13523  053D  3F48               	moviw [8]fsr1
 13524  053E  0022               	movlb	2	; select bank2
 13525  053F  00A8               	movwf	(_RF_Data^(0+256)+8)
 13526                           
 13527                           ;RF_Control_B1.c: 176: RF_Data[9] = product->Data[9];
 13528  0540  0020               	movlb	0	; select bank0
 13529  0541  086F               	movf	_product,w
 13530  0542  0086               	movwf	6
 13531  0543  3001               	movlw	1	; select bank2/3
 13532  0544  0087               	movwf	7
 13533  0545  3001               	movlw	1	; select bank2/3
 13534  0546  3F49               	moviw [9]fsr1
 13535  0547  0022               	movlb	2	; select bank2
 13536  0548  00A9               	movwf	(_RF_Data^(0+256)+9)
 13537                           
 13538                           ;RF_Control_B1.c: 177: RF_Data[10] = product->Data[10];
 13539  0549  0020               	movlb	0	; select bank0
 13540  054A  086F               	movf	_product,w
 13541  054B  0086               	movwf	6
 13542  054C  3001               	movlw	1	; select bank2/3
 13543  054D  0087               	movwf	7
 13544  054E  3001               	movlw	1	; select bank2/3
 13545  054F  3F4A               	moviw [10]fsr1
 13546  0550  0022               	movlb	2	; select bank2
 13547  0551  00AA               	movwf	(_RF_Data^(0+256)+10)
 13548                           
 13549                           ;RF_Control_B1.c: 178: RF_Data[11] = product->Data[11];
 13550  0552  0020               	movlb	0	; select bank0
 13551  0553  086F               	movf	_product,w
 13552  0554  0086               	movwf	6
 13553  0555  3001               	movlw	1	; select bank2/3
 13554  0556  0087               	movwf	7
 13555  0557  3001               	movlw	1	; select bank2/3
 13556  0558  3F4B               	moviw [11]fsr1
 13557  0559  0022               	movlb	2	; select bank2
 13558  055A  00AB               	movwf	(_RF_Data^(0+256)+11)
 13559                           
 13560                           ;RF_Control_B1.c: 179: RF_Data[12] = product->Data[12];
 13561  055B  0020               	movlb	0	; select bank0
 13562  055C  086F               	movf	_product,w
 13563  055D  0086               	movwf	6
 13564  055E  3001               	movlw	1	; select bank2/3
 13565  055F  0087               	movwf	7
 13566  0560  3001               	movlw	1	; select bank2/3
 13567  0561  3F4C               	moviw [12]fsr1
 13568  0562  0022               	movlb	2	; select bank2
 13569  0563  00AC               	movwf	(_RF_Data^(0+256)+12)
 13570                           
 13571                           ;RF_Control_B1.c: 180: RF_Data[13] = product->Data[13];
 13572  0564  0020               	movlb	0	; select bank0
 13573  0565  086F               	movf	_product,w
 13574  0566  0086               	movwf	6
 13575  0567  3001               	movlw	1	; select bank2/3
 13576  0568  0087               	movwf	7
 13577  0569  3001               	movlw	1	; select bank2/3
 13578  056A  3F4D               	moviw [13]fsr1
 13579  056B  0022               	movlb	2	; select bank2
 13580  056C  00AD               	movwf	(_RF_Data^(0+256)+13)
 13581                           
 13582                           ;RF_Control_B1.c: 181: RF_Data[14] = product->Data[14];
 13583  056D  0020               	movlb	0	; select bank0
 13584  056E  086F               	movf	_product,w
 13585  056F  0086               	movwf	6
 13586  0570  3001               	movlw	1	; select bank2/3
 13587  0571  0087               	movwf	7
 13588  0572  3001               	movlw	1	; select bank2/3
 13589  0573  3F4E               	moviw [14]fsr1
 13590  0574  0022               	movlb	2	; select bank2
 13591  0575  00AE               	movwf	(_RF_Data^(0+256)+14)
 13592                           
 13593                           ;RF_Control_B1.c: 182: RF_Data[15] = product->Data[15];
 13594  0576  0020               	movlb	0	; select bank0
 13595  0577  086F               	movf	_product,w
 13596  0578  0086               	movwf	6
 13597  0579  3001               	movlw	1	; select bank2/3
 13598  057A  0087               	movwf	7
 13599  057B  3001               	movlw	1	; select bank2/3
 13600  057C  3F4F               	moviw [15]fsr1
 13601  057D  0022               	movlb	2	; select bank2
 13602  057E  00AF               	movwf	(_RF_Data^(0+256)+15)
 13603                           
 13604                           ;RF_Control_B1.c: 183: RF_Data[16] = product->Data[16];
 13605  057F  0020               	movlb	0	; select bank0
 13606  0580  086F               	movf	_product,w
 13607  0581  0086               	movwf	6
 13608  0582  3001               	movlw	1	; select bank2/3
 13609  0583  0087               	movwf	7
 13610  0584  3001               	movlw	1	; select bank2/3
 13611  0585  3F50               	moviw [16]fsr1
 13612  0586  0022               	movlb	2	; select bank2
 13613  0587  00B0               	movwf	(_RF_Data^(0+256)+16)
 13614                           
 13615                           ;RF_Control_B1.c: 184: RF_Data[17] = product->Data[17];
 13616  0588  0020               	movlb	0	; select bank0
 13617  0589  086F               	movf	_product,w
 13618  058A  0086               	movwf	6
 13619  058B  3001               	movlw	1	; select bank2/3
 13620  058C  0087               	movwf	7
 13621  058D  3001               	movlw	1	; select bank2/3
 13622  058E  3F51               	moviw [17]fsr1
 13623  058F  0022               	movlb	2	; select bank2
 13624  0590  00B1               	movwf	(_RF_Data^(0+256)+17)
 13625                           
 13626                           ;RF_Control_B1.c: 185: RF_Data[18] = product->Data[18];
 13627  0591  0020               	movlb	0	; select bank0
 13628  0592  086F               	movf	_product,w
 13629  0593  0086               	movwf	6
 13630  0594  3001               	movlw	1	; select bank2/3
 13631  0595  0087               	movwf	7
 13632  0596  3001               	movlw	1	; select bank2/3
 13633  0597  3F52               	moviw [18]fsr1
 13634  0598  0022               	movlb	2	; select bank2
 13635  0599  00B2               	movwf	(_RF_Data^(0+256)+18)
 13636                           
 13637                           ;RF_Control_B1.c: 186: RF_Data[19] = product->Data[19];
 13638  059A  0020               	movlb	0	; select bank0
 13639  059B  086F               	movf	_product,w
 13640  059C  0086               	movwf	6
 13641  059D  3001               	movlw	1	; select bank2/3
 13642  059E  0087               	movwf	7
 13643  059F  3001               	movlw	1	; select bank2/3
 13644  05A0  3F53               	moviw [19]fsr1
 13645  05A1  0022               	movlb	2	; select bank2
 13646  05A2  00B3               	movwf	(_RF_Data^(0+256)+19)
 13647                           
 13648                           ;RF_Control_B1.c: 187: RF_Data[20] = 209;
 13649  05A3  30D1               	movlw	209
 13650  05A4  0020               	movlb	0	; select bank0
 13651  05A5  00A0               	movwf	??_setTxData
 13652  05A6  0820               	movf	??_setTxData,w
 13653  05A7  0022               	movlb	2	; select bank2
 13654  05A8  00B4               	movwf	(_RF_Data^(0+256)+20)
 13655  05A9  0008               	return
 13656  05AA                     __end_of_setTxData:	
 13657                           
 13658                           	psect	text90
 13659  1F45                     __ptext90:	
 13660 ;; *************** function _setSw_Status *****************
 13661 ;; Defined at:
 13662 ;;		line 109 in file "../src/Switch_B1.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  sw              1    wreg     unsigned char 
 13665 ;;  command         1    2[BANK0 ] unsigned char 
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;  sw              1    3[BANK0 ] unsigned char 
 13668 ;; Return value:  Size  Location     Type
 13669 ;;		None               void
 13670 ;; Registers used:
 13671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13677 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;Total ram usage:        2 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; Hardware stack levels required when called:    6
 13684 ;; This function calls:
 13685 ;;		_SwPointSelect
 13686 ;; This function is called by:
 13687 ;;		_DlyOff_Main
 13688 ;;		_setDimmerLights_ERROR
 13689 ;;		_setControl_Lights_Table
 13690 ;;		_setRFSW_Control
 13691 ;; This function uses a non-reentrant model
 13692 ;;
 13693                           
 13694                           
 13695                           ;psect for function _setSw_Status
 13696  1F45                     _setSw_Status:	
 13697                           
 13698                           ;incstack = 0
 13699                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13700                           ;setSw_Status@sw stored from wreg
 13701  1F45  0020               	movlb	0	; select bank0
 13702  1F46  00A3               	movwf	setSw_Status@sw
 13703                           
 13704                           ;Switch_B1.c: 110: SwPointSelect(sw);
 13705  1F47  0823               	movf	setSw_Status@sw,w
 13706  1F48  319E  26C7         	fcall	_SwPointSelect
 13707                           
 13708                           ;Switch_B1.c: 111: Sw->Status = command;
 13709  1F4A  0020               	movlb	0	; select bank0
 13710  1F4B  086E               	movf	_Sw,w
 13711  1F4C  0086               	movwf	6
 13712  1F4D  3001               	movlw	1	; select bank2/3
 13713  1F4E  0087               	movwf	7
 13714  1F4F  0822               	movf	setSw_Status@command,w
 13715  1F50  1301               	bcf	1,6
 13716  1F51  1D03               	skipz
 13717  1F52  1701               	bsf	1,6
 13718  1F53  0008               	return
 13719  1F54                     __end_of_setSw_Status:	
 13720                           
 13721                           	psect	text91
 13722  1EC7                     __ptext91:	
 13723 ;; *************** function _SwPointSelect *****************
 13724 ;; Defined at:
 13725 ;;		line 21 in file "../src/Switch_B1.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  sw              1    wreg     unsigned char 
 13728 ;; Auto vars:     Size  Location     Type
 13729 ;;  sw              1    1[BANK0 ] unsigned char 
 13730 ;; Return value:  Size  Location     Type
 13731 ;;		None               void
 13732 ;; Registers used:
 13733 ;;		wreg
 13734 ;; Tracked objects:
 13735 ;;		On entry : 0/0
 13736 ;;		On exit  : 0/0
 13737 ;;		Unchanged: 0/0
 13738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13741 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13743 ;;Total ram usage:        2 bytes
 13744 ;; Hardware stack levels used:    1
 13745 ;; Hardware stack levels required when called:    5
 13746 ;; This function calls:
 13747 ;;		Nothing
 13748 ;; This function is called by:
 13749 ;;		_setSw_Enable
 13750 ;;		_setSw_Status
 13751 ;;		_setSw_Main
 13752 ;;		_Sw_Detect
 13753 ;; This function uses a non-reentrant model
 13754 ;;
 13755                           
 13756                           
 13757                           ;psect for function _SwPointSelect
 13758  1EC7                     _SwPointSelect:	
 13759                           
 13760                           ;incstack = 0
 13761                           ; Regs used in _SwPointSelect: [wreg]
 13762                           ;SwPointSelect@sw stored from wreg
 13763  1EC7  0020               	movlb	0	; select bank0
 13764  1EC8  00A1               	movwf	SwPointSelect@sw
 13765                           
 13766                           ;Switch_B1.c: 24: if (sw == 1) {
 13767  1EC9  0821               	movf	SwPointSelect@sw,w
 13768  1ECA  3A01               	xorlw	1
 13769  1ECB  1D03               	skipz
 13770  1ECC  0008               	return
 13771                           
 13772                           ;Switch_B1.c: 25: Sw = &Sw1;
 13773  1ECD  30CF               	movlw	_Sw1& (0+255)
 13774  1ECE  00A0               	movwf	??_SwPointSelect
 13775  1ECF  0820               	movf	??_SwPointSelect,w
 13776  1ED0  00EE               	movwf	_Sw
 13777  1ED1  0008               	return
 13778  1ED2                     __end_of_SwPointSelect:	
 13779                           
 13780                           	psect	text92
 13781  0792                     __ptext92:	
 13782 ;; *************** function _setRF_DimmerLights *****************
 13783 ;; Defined at:
 13784 ;;		line 412 in file "../src/RF_Control_B1.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  lights          1    wreg     unsigned char 
 13787 ;;  on              1   61[BANK0 ] unsigned char 
 13788 ;; Auto vars:     Size  Location     Type
 13789 ;;  lights          1   65[BANK0 ] unsigned char 
 13790 ;;  status          1   64[BANK0 ] unsigned char 
 13791 ;; Return value:  Size  Location     Type
 13792 ;;		None               void
 13793 ;; Registers used:
 13794 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13795 ;; Tracked objects:
 13796 ;;		On entry : 0/0
 13797 ;;		On exit  : 0/0
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13800 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;Total ram usage:        5 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    8
 13807 ;; This function calls:
 13808 ;;		_setPercentValue
 13809 ;; This function is called by:
 13810 ;;		_DlyOff_Main
 13811 ;;		_setDimmerLights_Adj
 13812 ;;		_setRFSW_Control
 13813 ;;		_Sw_DimmerOnFunc
 13814 ;;		_Sw_DimmerOffFunc
 13815 ;; This function uses a non-reentrant model
 13816 ;;
 13817                           
 13818                           
 13819                           ;psect for function _setRF_DimmerLights
 13820  0792                     _setRF_DimmerLights:	
 13821                           
 13822                           ;incstack = 0
 13823                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13824                           ;setRF_DimmerLights@lights stored from wreg
 13825  0792  0020               	movlb	0	; select bank0
 13826  0793  00E1               	movwf	setRF_DimmerLights@lights
 13827                           
 13828                           ;RF_Control_B1.c: 413: char status;
 13829                           ;RF_Control_B1.c: 414: status = 1;
 13830  0794  01E0               	clrf	setRF_DimmerLights@status
 13831  0795  0AE0               	incf	setRF_DimmerLights@status,f
 13832                           
 13833                           ;RF_Control_B1.c: 415: status <<= (lights - 1);
 13834  0796  0861               	movf	setRF_DimmerLights@lights,w
 13835  0797  3EFF               	addlw	-1
 13836  0798  0A89               	incf	9,f
 13837  0799  2F9C               	goto	u4370
 13838  079A                     u4375:	
 13839  079A  1003               	clrc
 13840  079B  0DE0               	rlf	setRF_DimmerLights@status,f
 13841  079C                     u4370:	
 13842  079C  3EFF               	addlw	-1
 13843  079D  1D03               	skipz
 13844  079E  2F9A               	goto	u4375
 13845                           
 13846                           ;RF_Control_B1.c: 416: product->Data[11]=lights;
 13847  079F  0861               	movf	setRF_DimmerLights@lights,w
 13848  07A0  00DE               	movwf	??_setRF_DimmerLights
 13849  07A1  086F               	movf	_product,w
 13850  07A2  3E0B               	addlw	11
 13851  07A3  0086               	movwf	6
 13852  07A4  3001               	movlw	1	; select bank2/3
 13853  07A5  0087               	movwf	7
 13854  07A6  085E               	movf	??_setRF_DimmerLights,w
 13855  07A7  0081               	movwf	1
 13856                           
 13857                           ;RF_Control_B1.c: 419: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13858  07A8  3020               	movlw	32
 13859  07A9  3196  2605  3187   	fcall	_setPercentValue
 13860  07AC  0020               	movlb	0	; select bank0
 13861  07AD  00DE               	movwf	??_setRF_DimmerLights
 13862  07AE  0861               	movf	setRF_DimmerLights@lights,w
 13863  07AF  3E14               	addlw	20
 13864  07B0  076F               	addwf	_product,w
 13865  07B1  00DF               	movwf	??_setRF_DimmerLights+1
 13866  07B2  085F               	movf	??_setRF_DimmerLights+1,w
 13867  07B3  0086               	movwf	6
 13868  07B4  3001               	movlw	1	; select bank2/3
 13869  07B5  0087               	movwf	7
 13870  07B6  085E               	movf	??_setRF_DimmerLights,w
 13871  07B7  0081               	movwf	1
 13872                           
 13873                           ;RF_Control_B1.c: 422: product->Data[9]=product->Data[20 + lights];
 13874  07B8  0861               	movf	setRF_DimmerLights@lights,w
 13875  07B9  3E14               	addlw	20
 13876  07BA  076F               	addwf	_product,w
 13877  07BB  00DE               	movwf	??_setRF_DimmerLights
 13878  07BC  085E               	movf	??_setRF_DimmerLights,w
 13879  07BD  0086               	movwf	6
 13880  07BE  3001               	movlw	1	; select bank2/3
 13881  07BF  0087               	movwf	7
 13882  07C0  0801               	movf	1,w
 13883  07C1  00DF               	movwf	??_setRF_DimmerLights+1
 13884  07C2  086F               	movf	_product,w
 13885  07C3  3E09               	addlw	9
 13886  07C4  0086               	movwf	6
 13887  07C5  3001               	movlw	1	; select bank2/3
 13888  07C6  0087               	movwf	7
 13889  07C7  085F               	movf	??_setRF_DimmerLights+1,w
 13890  07C8  0081               	movwf	1
 13891                           
 13892                           ;RF_Control_B1.c: 423: product->Data[17]=product->Data[26 + lights];
 13893  07C9  0861               	movf	setRF_DimmerLights@lights,w
 13894  07CA  3E1A               	addlw	26
 13895  07CB  076F               	addwf	_product,w
 13896  07CC  00DE               	movwf	??_setRF_DimmerLights
 13897  07CD  085E               	movf	??_setRF_DimmerLights,w
 13898  07CE  0086               	movwf	6
 13899  07CF  3001               	movlw	1	; select bank2/3
 13900  07D0  0087               	movwf	7
 13901  07D1  0801               	movf	1,w
 13902  07D2  00DF               	movwf	??_setRF_DimmerLights+1
 13903  07D3  086F               	movf	_product,w
 13904  07D4  3E11               	addlw	17
 13905  07D5  0086               	movwf	6
 13906  07D6  3001               	movlw	1	; select bank2/3
 13907  07D7  0087               	movwf	7
 13908  07D8  085F               	movf	??_setRF_DimmerLights+1,w
 13909  07D9  0081               	movwf	1
 13910                           
 13911                           ;RF_Control_B1.c: 424: if (on == 1) {
 13912  07DA  085D               	movf	setRF_DimmerLights@on,w
 13913  07DB  3A01               	xorlw	1
 13914  07DC  1D03               	skipz
 13915  07DD  2FEE               	goto	l5605
 13916                           
 13917                           ;RF_Control_B1.c: 425: product->Data[15]=(product->Data[15] | status);
 13918  07DE  086F               	movf	_product,w
 13919  07DF  3E0F               	addlw	15
 13920  07E0  0086               	movwf	6
 13921  07E1  3001               	movlw	1	; select bank2/3
 13922  07E2  0087               	movwf	7
 13923  07E3  0801               	movf	1,w
 13924  07E4  0460               	iorwf	setRF_DimmerLights@status,w
 13925  07E5  00DE               	movwf	??_setRF_DimmerLights
 13926  07E6  086F               	movf	_product,w
 13927  07E7  3E0F               	addlw	15
 13928  07E8  0086               	movwf	6
 13929  07E9  3001               	movlw	1	; select bank2/3
 13930  07EA  0087               	movwf	7
 13931  07EB  085E               	movf	??_setRF_DimmerLights,w
 13932  07EC  0081               	movwf	1
 13933                           
 13934                           ;RF_Control_B1.c: 426: } else {
 13935  07ED  0008               	return
 13936  07EE                     l5605:	
 13937                           
 13938                           ;RF_Control_B1.c: 427: product->Data[15]=(product->Data[15]&(~status));
 13939  07EE  086F               	movf	_product,w
 13940  07EF  3E0F               	addlw	15
 13941  07F0  0086               	movwf	6
 13942  07F1  3001               	movlw	1	; select bank2/3
 13943  07F2  0087               	movwf	7
 13944  07F3  0960               	comf	setRF_DimmerLights@status,w
 13945  07F4  0501               	andwf	1,w
 13946  07F5  00DE               	movwf	??_setRF_DimmerLights
 13947  07F6  086F               	movf	_product,w
 13948  07F7  3E0F               	addlw	15
 13949  07F8  0086               	movwf	6
 13950  07F9  3001               	movlw	1	; select bank2/3
 13951  07FA  0087               	movwf	7
 13952  07FB  085E               	movf	??_setRF_DimmerLights,w
 13953  07FC  0081               	movwf	1
 13954  07FD  0008               	return
 13955  07FE                     __end_of_setRF_DimmerLights:	
 13956                           
 13957                           	psect	text93
 13958  1605                     __ptext93:	
 13959 ;; *************** function _setPercentValue *****************
 13960 ;; Defined at:
 13961 ;;		line 768 in file "../src/Dimmer_B1.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  value           1    wreg     unsigned char 
 13964 ;; Auto vars:     Size  Location     Type
 13965 ;;  value           1   57[BANK0 ] unsigned char 
 13966 ;;  i               3   58[BANK0 ] float 
 13967 ;; Return value:  Size  Location     Type
 13968 ;;                  1    wreg      unsigned char 
 13969 ;; Registers used:
 13970 ;;		wreg, status,2, status,0, pclath, cstack
 13971 ;; Tracked objects:
 13972 ;;		On entry : 0/0
 13973 ;;		On exit  : 0/0
 13974 ;;		Unchanged: 0/0
 13975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13976 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13977 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;Total ram usage:        4 bytes
 13981 ;; Hardware stack levels used:    1
 13982 ;; Hardware stack levels required when called:    7
 13983 ;; This function calls:
 13984 ;;		___awtoft
 13985 ;;		___ftdiv
 13986 ;;		___fttol
 13987 ;; This function is called by:
 13988 ;;		_Flash_Memory_Initialization
 13989 ;;		_setRF_DimmerLights
 13990 ;; This function uses a non-reentrant model
 13991 ;;
 13992                           
 13993                           
 13994                           ;psect for function _setPercentValue
 13995  1605                     _setPercentValue:	
 13996                           
 13997                           ;incstack = 0
 13998                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13999                           ;setPercentValue@value stored from wreg
 14000  1605  0020               	movlb	0	; select bank0
 14001  1606  00D9               	movwf	setPercentValue@value
 14002                           
 14003                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14004  1607  3000               	movlw	0
 14005  1608  00DA               	movwf	setPercentValue@i
 14006  1609  30E0               	movlw	224
 14007  160A  00DB               	movwf	setPercentValue@i+1
 14008  160B  3041               	movlw	65
 14009  160C  00DC               	movwf	setPercentValue@i+2
 14010                           
 14011                           ;Dimmer_B1.c: 771: i /= 100;
 14012  160D  3000               	movlw	0
 14013  160E  00AE               	movwf	___ftdiv@f2
 14014  160F  30C8               	movlw	200
 14015  1610  00AF               	movwf	___ftdiv@f2+1
 14016  1611  3042               	movlw	66
 14017  1612  00B0               	movwf	___ftdiv@f2+2
 14018  1613  085A               	movf	setPercentValue@i,w
 14019  1614  00B1               	movwf	___ftdiv@f1
 14020  1615  085B               	movf	setPercentValue@i+1,w
 14021  1616  00B2               	movwf	___ftdiv@f1+1
 14022  1617  085C               	movf	setPercentValue@i+2,w
 14023  1618  00B3               	movwf	___ftdiv@f1+2
 14024  1619  3186  265E  3196   	fcall	___ftdiv
 14025  161C  0020               	movlb	0	; select bank0
 14026  161D  082E               	movf	?___ftdiv,w
 14027  161E  00DA               	movwf	setPercentValue@i
 14028  161F  082F               	movf	?___ftdiv+1,w
 14029  1620  00DB               	movwf	setPercentValue@i+1
 14030  1621  0830               	movf	?___ftdiv+2,w
 14031  1622  00DC               	movwf	setPercentValue@i+2
 14032                           
 14033                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14034  1623  0859               	movf	setPercentValue@value,w
 14035  1624  3EE0               	addlw	224
 14036  1625  00A8               	movwf	___awtoft@c
 14037  1626  30FF               	movlw	255
 14038  1627  1803               	skipnc
 14039  1628  3000               	movlw	0
 14040  1629  00A9               	movwf	___awtoft@c+1
 14041  162A  3192  221A  3196   	fcall	___awtoft
 14042  162D  0020               	movlb	0	; select bank0
 14043  162E  0828               	movf	?___awtoft,w
 14044  162F  00B1               	movwf	___ftdiv@f1
 14045  1630  0829               	movf	?___awtoft+1,w
 14046  1631  00B2               	movwf	___ftdiv@f1+1
 14047  1632  082A               	movf	?___awtoft+2,w
 14048  1633  00B3               	movwf	___ftdiv@f1+2
 14049  1634  085A               	movf	setPercentValue@i,w
 14050  1635  00AE               	movwf	___ftdiv@f2
 14051  1636  085B               	movf	setPercentValue@i+1,w
 14052  1637  00AF               	movwf	___ftdiv@f2+1
 14053  1638  085C               	movf	setPercentValue@i+2,w
 14054  1639  00B0               	movwf	___ftdiv@f2+2
 14055  163A  3186  265E  3196   	fcall	___ftdiv
 14056  163D  0020               	movlb	0	; select bank0
 14057  163E  082E               	movf	?___ftdiv,w
 14058  163F  00CB               	movwf	___fttol@f1
 14059  1640  082F               	movf	?___ftdiv+1,w
 14060  1641  00CC               	movwf	___fttol@f1+1
 14061  1642  0830               	movf	?___ftdiv+2,w
 14062  1643  00CD               	movwf	___fttol@f1+2
 14063  1644  318F  2779         	fcall	___fttol
 14064  1646  0020               	movlb	0	; select bank0
 14065  1647  034B               	decf	?___fttol,w
 14066  1648  3AFF               	xorlw	255
 14067  1649  3E64               	addlw	100
 14068  164A  0008               	return
 14069  164B                     __end_of_setPercentValue:	
 14070                           
 14071                           	psect	text94
 14072  0F79                     __ptext94:	
 14073 ;; *************** function ___fttol *****************
 14074 ;; Defined at:
 14075 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;  f1              3   43[BANK0 ] float 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  lval            4   52[BANK0 ] unsigned long 
 14080 ;;  exp1            1   56[BANK0 ] unsigned char 
 14081 ;;  sign1           1   51[BANK0 ] unsigned char 
 14082 ;; Return value:  Size  Location     Type
 14083 ;;                  4   43[BANK0 ] long 
 14084 ;; Registers used:
 14085 ;;		wreg, status,2, status,0
 14086 ;; Tracked objects:
 14087 ;;		On entry : 0/0
 14088 ;;		On exit  : 0/0
 14089 ;;		Unchanged: 0/0
 14090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14091 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;Total ram usage:       14 bytes
 14096 ;; Hardware stack levels used:    1
 14097 ;; Hardware stack levels required when called:    5
 14098 ;; This function calls:
 14099 ;;		Nothing
 14100 ;; This function is called by:
 14101 ;;		_getPercentValue
 14102 ;;		_setPercentValue
 14103 ;; This function uses a non-reentrant model
 14104 ;;
 14105                           
 14106                           
 14107                           ;psect for function ___fttol
 14108  0F79                     ___fttol:	
 14109                           
 14110                           ;incstack = 0
 14111                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14112  0F79  0020               	movlb	0	; select bank0
 14113  0F7A  084B               	movf	___fttol@f1,w
 14114  0F7B  00CF               	movwf	??___fttol
 14115  0F7C  084C               	movf	___fttol@f1+1,w
 14116  0F7D  00D0               	movwf	??___fttol+1
 14117  0F7E  084D               	movf	___fttol@f1+2,w
 14118  0F7F  00D1               	movwf	??___fttol+2
 14119  0F80  1003               	clrc
 14120  0F81  0D50               	rlf	??___fttol+1,w
 14121  0F82  0D51               	rlf	??___fttol+2,w
 14122  0F83  00D2               	movwf	??___fttol+3
 14123  0F84  0852               	movf	??___fttol+3,w
 14124  0F85  00D8               	movwf	___fttol@exp1
 14125  0F86  08D8               	movf	___fttol@exp1,f
 14126  0F87  1D03               	skipz
 14127  0F88  2F92               	goto	l5387
 14128  0F89  3000               	movlw	0
 14129  0F8A  00CE               	movwf	?___fttol+3
 14130  0F8B  3000               	movlw	0
 14131  0F8C  00CD               	movwf	?___fttol+2
 14132  0F8D  3000               	movlw	0
 14133  0F8E  00CC               	movwf	?___fttol+1
 14134  0F8F  3000               	movlw	0
 14135  0F90  00CB               	movwf	?___fttol
 14136  0F91  0008               	return
 14137  0F92                     l5387:	
 14138  0F92  084B               	movf	___fttol@f1,w
 14139  0F93  00CF               	movwf	??___fttol
 14140  0F94  084C               	movf	___fttol@f1+1,w
 14141  0F95  00D0               	movwf	??___fttol+1
 14142  0F96  084D               	movf	___fttol@f1+2,w
 14143  0F97  00D1               	movwf	??___fttol+2
 14144  0F98  3017               	movlw	23
 14145  0F99                     u4035:	
 14146  0F99  36D1               	lsrf	??___fttol+2,f
 14147  0F9A  0CD0               	rrf	??___fttol+1,f
 14148  0F9B  0CCF               	rrf	??___fttol,f
 14149  0F9C  0B89               	decfsz	9,f
 14150  0F9D  2F99               	goto	u4035
 14151  0F9E  084F               	movf	??___fttol,w
 14152  0F9F  00D2               	movwf	??___fttol+3
 14153  0FA0  0852               	movf	??___fttol+3,w
 14154  0FA1  00D3               	movwf	___fttol@sign1
 14155  0FA2  17CC               	bsf	___fttol@f1+1,7
 14156  0FA3  30FF               	movlw	255
 14157  0FA4  05CB               	andwf	___fttol@f1,f
 14158  0FA5  30FF               	movlw	255
 14159  0FA6  05CC               	andwf	___fttol@f1+1,f
 14160  0FA7  3000               	movlw	0
 14161  0FA8  05CD               	andwf	___fttol@f1+2,f
 14162  0FA9  084B               	movf	___fttol@f1,w
 14163  0FAA  00D4               	movwf	___fttol@lval
 14164  0FAB  084C               	movf	___fttol@f1+1,w
 14165  0FAC  00D5               	movwf	___fttol@lval+1
 14166  0FAD  084D               	movf	___fttol@f1+2,w
 14167  0FAE  00D6               	movwf	___fttol@lval+2
 14168  0FAF  01D7               	clrf	___fttol@lval+3
 14169  0FB0  308E               	movlw	142
 14170  0FB1  02D8               	subwf	___fttol@exp1,f
 14171  0FB2  1FD8               	btfss	___fttol@exp1,7
 14172  0FB3  2FD0               	goto	l5407
 14173  0FB4  0858               	movf	___fttol@exp1,w
 14174  0FB5  3A80               	xorlw	128
 14175  0FB6  3E8F               	addlw	143
 14176  0FB7  1803               	skipnc
 14177  0FB8  2FC2               	goto	l5405
 14178  0FB9  3000               	movlw	0
 14179  0FBA  00CE               	movwf	?___fttol+3
 14180  0FBB  3000               	movlw	0
 14181  0FBC  00CD               	movwf	?___fttol+2
 14182  0FBD  3000               	movlw	0
 14183  0FBE  00CC               	movwf	?___fttol+1
 14184  0FBF  3000               	movlw	0
 14185  0FC0  00CB               	movwf	?___fttol
 14186  0FC1  0008               	return
 14187  0FC2                     l5405:	
 14188  0FC2  3001               	movlw	1
 14189  0FC3                     u4065:	
 14190  0FC3  36D7               	lsrf	___fttol@lval+3,f
 14191  0FC4  0CD6               	rrf	___fttol@lval+2,f
 14192  0FC5  0CD5               	rrf	___fttol@lval+1,f
 14193  0FC6  0CD4               	rrf	___fttol@lval,f
 14194  0FC7  0B89               	decfsz	9,f
 14195  0FC8  2FC3               	goto	u4065
 14196  0FC9  3001               	movlw	1
 14197  0FCA  00CF               	movwf	??___fttol
 14198  0FCB  084F               	movf	??___fttol,w
 14199  0FCC  07D8               	addwf	___fttol@exp1,f
 14200  0FCD  1903               	btfsc	3,2
 14201  0FCE  2FE9               	goto	l5417
 14202  0FCF  2FC2               	goto	l5405
 14203  0FD0                     l5407:	
 14204  0FD0  3018               	movlw	24
 14205  0FD1  0258               	subwf	___fttol@exp1,w
 14206  0FD2  1C03               	skipc
 14207  0FD3  2FE6               	goto	l5415
 14208  0FD4  3000               	movlw	0
 14209  0FD5  00CE               	movwf	?___fttol+3
 14210  0FD6  3000               	movlw	0
 14211  0FD7  00CD               	movwf	?___fttol+2
 14212  0FD8  3000               	movlw	0
 14213  0FD9  00CC               	movwf	?___fttol+1
 14214  0FDA  3000               	movlw	0
 14215  0FDB  00CB               	movwf	?___fttol
 14216  0FDC  0008               	return
 14217  0FDD                     l5413:	
 14218  0FDD  3001               	movlw	1
 14219  0FDE                     u4095:	
 14220  0FDE  35D4               	lslf	___fttol@lval,f
 14221  0FDF  0DD5               	rlf	___fttol@lval+1,f
 14222  0FE0  0DD6               	rlf	___fttol@lval+2,f
 14223  0FE1  0DD7               	rlf	___fttol@lval+3,f
 14224  0FE2  0B89               	decfsz	9,f
 14225  0FE3  2FDE               	goto	u4095
 14226  0FE4  3001               	movlw	1
 14227  0FE5  02D8               	subwf	___fttol@exp1,f
 14228  0FE6                     l5415:	
 14229  0FE6  08D8               	movf	___fttol@exp1,f
 14230  0FE7  1D03               	skipz
 14231  0FE8  2FDD               	goto	l5413
 14232  0FE9                     l5417:	
 14233  0FE9  0853               	movf	___fttol@sign1,w
 14234  0FEA  1903               	btfsc	3,2
 14235  0FEB  2FF7               	goto	l5421
 14236  0FEC  09D4               	comf	___fttol@lval,f
 14237  0FED  09D5               	comf	___fttol@lval+1,f
 14238  0FEE  09D6               	comf	___fttol@lval+2,f
 14239  0FEF  09D7               	comf	___fttol@lval+3,f
 14240  0FF0  0AD4               	incf	___fttol@lval,f
 14241  0FF1  1903               	skipnz
 14242  0FF2  0AD5               	incf	___fttol@lval+1,f
 14243  0FF3  1903               	skipnz
 14244  0FF4  0AD6               	incf	___fttol@lval+2,f
 14245  0FF5  1903               	skipnz
 14246  0FF6  0AD7               	incf	___fttol@lval+3,f
 14247  0FF7                     l5421:	
 14248  0FF7  0857               	movf	___fttol@lval+3,w
 14249  0FF8  00CE               	movwf	?___fttol+3
 14250  0FF9  0856               	movf	___fttol@lval+2,w
 14251  0FFA  00CD               	movwf	?___fttol+2
 14252  0FFB  0855               	movf	___fttol@lval+1,w
 14253  0FFC  00CC               	movwf	?___fttol+1
 14254  0FFD  0854               	movf	___fttol@lval,w
 14255  0FFE  00CB               	movwf	?___fttol
 14256  0FFF  0008               	return
 14257  1000                     __end_of___fttol:	
 14258                           
 14259                           	psect	text95
 14260  065E                     __ptext95:	
 14261 ;; *************** function ___ftdiv *****************
 14262 ;; Defined at:
 14263 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14264 ;; Parameters:    Size  Location     Type
 14265 ;;  f2              3   14[BANK0 ] float 
 14266 ;;  f1              3   17[BANK0 ] float 
 14267 ;; Auto vars:     Size  Location     Type
 14268 ;;  f3              3   25[BANK0 ] float 
 14269 ;;  sign            1   29[BANK0 ] unsigned char 
 14270 ;;  exp             1   28[BANK0 ] unsigned char 
 14271 ;;  cntr            1   24[BANK0 ] unsigned char 
 14272 ;; Return value:  Size  Location     Type
 14273 ;;                  3   14[BANK0 ] float 
 14274 ;; Registers used:
 14275 ;;		wreg, status,2, status,0, pclath, cstack
 14276 ;; Tracked objects:
 14277 ;;		On entry : 0/0
 14278 ;;		On exit  : 0/0
 14279 ;;		Unchanged: 0/0
 14280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14282 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14283 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;Total ram usage:       16 bytes
 14286 ;; Hardware stack levels used:    1
 14287 ;; Hardware stack levels required when called:    6
 14288 ;; This function calls:
 14289 ;;		___ftpack
 14290 ;; This function is called by:
 14291 ;;		_getPercentValue
 14292 ;;		_setPercentValue
 14293 ;; This function uses a non-reentrant model
 14294 ;;
 14295                           
 14296                           
 14297                           ;psect for function ___ftdiv
 14298  065E                     ___ftdiv:	
 14299                           
 14300                           ;incstack = 0
 14301                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14302  065E  0020               	movlb	0	; select bank0
 14303  065F  0831               	movf	___ftdiv@f1,w
 14304  0660  00B4               	movwf	??___ftdiv
 14305  0661  0832               	movf	___ftdiv@f1+1,w
 14306  0662  00B5               	movwf	??___ftdiv+1
 14307  0663  0833               	movf	___ftdiv@f1+2,w
 14308  0664  00B6               	movwf	??___ftdiv+2
 14309  0665  1003               	clrc
 14310  0666  0D35               	rlf	??___ftdiv+1,w
 14311  0667  0D36               	rlf	??___ftdiv+2,w
 14312  0668  00B7               	movwf	??___ftdiv+3
 14313  0669  0837               	movf	??___ftdiv+3,w
 14314  066A  00BC               	movwf	___ftdiv@exp
 14315  066B  08BC               	movf	___ftdiv@exp,f
 14316  066C  1D03               	skipz
 14317  066D  2E75               	goto	l5295
 14318  066E  3000               	movlw	0
 14319  066F  00AE               	movwf	?___ftdiv
 14320  0670  3000               	movlw	0
 14321  0671  00AF               	movwf	?___ftdiv+1
 14322  0672  3000               	movlw	0
 14323  0673  00B0               	movwf	?___ftdiv+2
 14324  0674  0008               	return
 14325  0675                     l5295:	
 14326  0675  082E               	movf	___ftdiv@f2,w
 14327  0676  00B4               	movwf	??___ftdiv
 14328  0677  082F               	movf	___ftdiv@f2+1,w
 14329  0678  00B5               	movwf	??___ftdiv+1
 14330  0679  0830               	movf	___ftdiv@f2+2,w
 14331  067A  00B6               	movwf	??___ftdiv+2
 14332  067B  1003               	clrc
 14333  067C  0D35               	rlf	??___ftdiv+1,w
 14334  067D  0D36               	rlf	??___ftdiv+2,w
 14335  067E  00B7               	movwf	??___ftdiv+3
 14336  067F  0837               	movf	??___ftdiv+3,w
 14337  0680  00BD               	movwf	___ftdiv@sign
 14338  0681  08BD               	movf	___ftdiv@sign,f
 14339  0682  1D03               	skipz
 14340  0683  2E8B               	goto	l5301
 14341  0684  3000               	movlw	0
 14342  0685  00AE               	movwf	?___ftdiv
 14343  0686  3000               	movlw	0
 14344  0687  00AF               	movwf	?___ftdiv+1
 14345  0688  3000               	movlw	0
 14346  0689  00B0               	movwf	?___ftdiv+2
 14347  068A  0008               	return
 14348  068B                     l5301:	
 14349  068B  3000               	movlw	0
 14350  068C  00B9               	movwf	___ftdiv@f3
 14351  068D  3000               	movlw	0
 14352  068E  00BA               	movwf	___ftdiv@f3+1
 14353  068F  3000               	movlw	0
 14354  0690  00BB               	movwf	___ftdiv@f3+2
 14355  0691  3089               	movlw	137
 14356  0692  073D               	addwf	___ftdiv@sign,w
 14357  0693  00B4               	movwf	??___ftdiv
 14358  0694  0834               	movf	??___ftdiv,w
 14359  0695  02BC               	subwf	___ftdiv@exp,f
 14360  0696  0831               	movf	___ftdiv@f1,w
 14361  0697  00B4               	movwf	??___ftdiv
 14362  0698  0832               	movf	___ftdiv@f1+1,w
 14363  0699  00B5               	movwf	??___ftdiv+1
 14364  069A  0833               	movf	___ftdiv@f1+2,w
 14365  069B  00B6               	movwf	??___ftdiv+2
 14366  069C  3010               	movlw	16
 14367  069D                     u3845:	
 14368  069D  36B6               	lsrf	??___ftdiv+2,f
 14369  069E  0CB5               	rrf	??___ftdiv+1,f
 14370  069F  0CB4               	rrf	??___ftdiv,f
 14371  06A0  0B89               	decfsz	9,f
 14372  06A1  2E9D               	goto	u3845
 14373  06A2  0834               	movf	??___ftdiv,w
 14374  06A3  00B7               	movwf	??___ftdiv+3
 14375  06A4  0837               	movf	??___ftdiv+3,w
 14376  06A5  00BD               	movwf	___ftdiv@sign
 14377  06A6  082E               	movf	___ftdiv@f2,w
 14378  06A7  00B4               	movwf	??___ftdiv
 14379  06A8  082F               	movf	___ftdiv@f2+1,w
 14380  06A9  00B5               	movwf	??___ftdiv+1
 14381  06AA  0830               	movf	___ftdiv@f2+2,w
 14382  06AB  00B6               	movwf	??___ftdiv+2
 14383  06AC  3010               	movlw	16
 14384  06AD                     u3855:	
 14385  06AD  36B6               	lsrf	??___ftdiv+2,f
 14386  06AE  0CB5               	rrf	??___ftdiv+1,f
 14387  06AF  0CB4               	rrf	??___ftdiv,f
 14388  06B0  0B89               	decfsz	9,f
 14389  06B1  2EAD               	goto	u3855
 14390  06B2  0834               	movf	??___ftdiv,w
 14391  06B3  00B7               	movwf	??___ftdiv+3
 14392  06B4  0837               	movf	??___ftdiv+3,w
 14393  06B5  06BD               	xorwf	___ftdiv@sign,f
 14394  06B6  3080               	movlw	128
 14395  06B7  00B4               	movwf	??___ftdiv
 14396  06B8  0834               	movf	??___ftdiv,w
 14397  06B9  05BD               	andwf	___ftdiv@sign,f
 14398  06BA  17B2               	bsf	___ftdiv@f1+1,7
 14399  06BB  30FF               	movlw	255
 14400  06BC  05B1               	andwf	___ftdiv@f1,f
 14401  06BD  30FF               	movlw	255
 14402  06BE  05B2               	andwf	___ftdiv@f1+1,f
 14403  06BF  3000               	movlw	0
 14404  06C0  05B3               	andwf	___ftdiv@f1+2,f
 14405  06C1  17AF               	bsf	___ftdiv@f2+1,7
 14406  06C2  30FF               	movlw	255
 14407  06C3  05AE               	andwf	___ftdiv@f2,f
 14408  06C4  30FF               	movlw	255
 14409  06C5  05AF               	andwf	___ftdiv@f2+1,f
 14410  06C6  3000               	movlw	0
 14411  06C7  05B0               	andwf	___ftdiv@f2+2,f
 14412  06C8  3018               	movlw	24
 14413  06C9  00B4               	movwf	??___ftdiv
 14414  06CA  0834               	movf	??___ftdiv,w
 14415  06CB  00B8               	movwf	___ftdiv@cntr
 14416  06CC                     l5315:	
 14417  06CC  3001               	movlw	1
 14418  06CD                     u3865:	
 14419  06CD  35B9               	lslf	___ftdiv@f3,f
 14420  06CE  0DBA               	rlf	___ftdiv@f3+1,f
 14421  06CF  0DBB               	rlf	___ftdiv@f3+2,f
 14422  06D0  0B89               	decfsz	9,f
 14423  06D1  2ECD               	goto	u3865
 14424  06D2  0830               	movf	___ftdiv@f2+2,w
 14425  06D3  0233               	subwf	___ftdiv@f1+2,w
 14426  06D4  1D03               	skipz
 14427  06D5  2EDC               	goto	u3875
 14428  06D6  082F               	movf	___ftdiv@f2+1,w
 14429  06D7  0232               	subwf	___ftdiv@f1+1,w
 14430  06D8  1D03               	skipz
 14431  06D9  2EDC               	goto	u3875
 14432  06DA  082E               	movf	___ftdiv@f2,w
 14433  06DB  0231               	subwf	___ftdiv@f1,w
 14434  06DC                     u3875:	
 14435  06DC  1C03               	skipc
 14436  06DD  2EE5               	goto	l5323
 14437  06DE  082E               	movf	___ftdiv@f2,w
 14438  06DF  02B1               	subwf	___ftdiv@f1,f
 14439  06E0  082F               	movf	___ftdiv@f2+1,w
 14440  06E1  3BB2               	subwfb	___ftdiv@f1+1,f
 14441  06E2  0830               	movf	___ftdiv@f2+2,w
 14442  06E3  3BB3               	subwfb	___ftdiv@f1+2,f
 14443  06E4  1439               	bsf	___ftdiv@f3,0
 14444  06E5                     l5323:	
 14445  06E5  3001               	movlw	1
 14446  06E6                     u3885:	
 14447  06E6  35B1               	lslf	___ftdiv@f1,f
 14448  06E7  0DB2               	rlf	___ftdiv@f1+1,f
 14449  06E8  0DB3               	rlf	___ftdiv@f1+2,f
 14450  06E9  0B89               	decfsz	9,f
 14451  06EA  2EE6               	goto	u3885
 14452  06EB  3001               	movlw	1
 14453  06EC  02B8               	subwf	___ftdiv@cntr,f
 14454  06ED  1D03               	btfss	3,2
 14455  06EE  2ECC               	goto	l5315
 14456  06EF  0839               	movf	___ftdiv@f3,w
 14457  06F0  00A0               	movwf	___ftpack@arg
 14458  06F1  083A               	movf	___ftdiv@f3+1,w
 14459  06F2  00A1               	movwf	___ftpack@arg+1
 14460  06F3  083B               	movf	___ftdiv@f3+2,w
 14461  06F4  00A2               	movwf	___ftpack@arg+2
 14462  06F5  083C               	movf	___ftdiv@exp,w
 14463  06F6  00B4               	movwf	??___ftdiv
 14464  06F7  0834               	movf	??___ftdiv,w
 14465  06F8  00A3               	movwf	___ftpack@exp
 14466  06F9  083D               	movf	___ftdiv@sign,w
 14467  06FA  00B5               	movwf	??___ftdiv+1
 14468  06FB  0835               	movf	??___ftdiv+1,w
 14469  06FC  00A4               	movwf	___ftpack@sign
 14470  06FD  318A  223F         	fcall	___ftpack
 14471  06FF  0020               	movlb	0	; select bank0
 14472  0700  0820               	movf	?___ftpack,w
 14473  0701  00AE               	movwf	?___ftdiv
 14474  0702  0821               	movf	?___ftpack+1,w
 14475  0703  00AF               	movwf	?___ftdiv+1
 14476  0704  0822               	movf	?___ftpack+2,w
 14477  0705  00B0               	movwf	?___ftdiv+2
 14478  0706  0008               	return
 14479  0707                     __end_of___ftdiv:	
 14480                           
 14481                           	psect	text96
 14482  121A                     __ptext96:	
 14483 ;; *************** function ___awtoft *****************
 14484 ;; Defined at:
 14485 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14486 ;; Parameters:    Size  Location     Type
 14487 ;;  c               2    8[BANK0 ] int 
 14488 ;; Auto vars:     Size  Location     Type
 14489 ;;  sign            1   13[BANK0 ] unsigned char 
 14490 ;; Return value:  Size  Location     Type
 14491 ;;                  3    8[BANK0 ] float 
 14492 ;; Registers used:
 14493 ;;		wreg, status,2, status,0, pclath, cstack
 14494 ;; Tracked objects:
 14495 ;;		On entry : 0/0
 14496 ;;		On exit  : 0/0
 14497 ;;		Unchanged: 0/0
 14498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14499 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;Total ram usage:        6 bytes
 14504 ;; Hardware stack levels used:    1
 14505 ;; Hardware stack levels required when called:    6
 14506 ;; This function calls:
 14507 ;;		___ftpack
 14508 ;; This function is called by:
 14509 ;;		_getPercentValue
 14510 ;;		_setPercentValue
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           
 14515                           ;psect for function ___awtoft
 14516  121A                     ___awtoft:	
 14517                           
 14518                           ;incstack = 0
 14519                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14520  121A  0020               	movlb	0	; select bank0
 14521  121B  01AD               	clrf	___awtoft@sign
 14522  121C  1FA9               	btfss	___awtoft@c+1,7
 14523  121D  2A25               	goto	l5213
 14524  121E  09A8               	comf	___awtoft@c,f
 14525  121F  09A9               	comf	___awtoft@c+1,f
 14526  1220  0AA8               	incf	___awtoft@c,f
 14527  1221  1903               	skipnz
 14528  1222  0AA9               	incf	___awtoft@c+1,f
 14529  1223  01AD               	clrf	___awtoft@sign
 14530  1224  0AAD               	incf	___awtoft@sign,f
 14531  1225                     l5213:	
 14532  1225  0828               	movf	___awtoft@c,w
 14533  1226  00A0               	movwf	___ftpack@arg
 14534  1227  0829               	movf	___awtoft@c+1,w
 14535  1228  00A1               	movwf	___ftpack@arg+1
 14536  1229  01A2               	clrf	___ftpack@arg+2
 14537  122A  308E               	movlw	142
 14538  122B  00AB               	movwf	??___awtoft
 14539  122C  082B               	movf	??___awtoft,w
 14540  122D  00A3               	movwf	___ftpack@exp
 14541  122E  082D               	movf	___awtoft@sign,w
 14542  122F  00AC               	movwf	??___awtoft+1
 14543  1230  082C               	movf	??___awtoft+1,w
 14544  1231  00A4               	movwf	___ftpack@sign
 14545  1232  318A  223F         	fcall	___ftpack
 14546  1234  0020               	movlb	0	; select bank0
 14547  1235  0820               	movf	?___ftpack,w
 14548  1236  00A8               	movwf	?___awtoft
 14549  1237  0821               	movf	?___ftpack+1,w
 14550  1238  00A9               	movwf	?___awtoft+1
 14551  1239  0822               	movf	?___ftpack+2,w
 14552  123A  00AA               	movwf	?___awtoft+2
 14553  123B  0008               	return
 14554  123C                     __end_of___awtoft:	
 14555                           
 14556                           	psect	text97
 14557  0A3F                     __ptext97:	
 14558 ;; *************** function ___ftpack *****************
 14559 ;; Defined at:
 14560 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14561 ;; Parameters:    Size  Location     Type
 14562 ;;  arg             3    0[BANK0 ] unsigned um
 14563 ;;  exp             1    3[BANK0 ] unsigned char 
 14564 ;;  sign            1    4[BANK0 ] unsigned char 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;		None
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  3    0[BANK0 ] float 
 14569 ;; Registers used:
 14570 ;;		wreg, status,2, status,0
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14576 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14578 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;Total ram usage:        8 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:    5
 14583 ;; This function calls:
 14584 ;;		Nothing
 14585 ;; This function is called by:
 14586 ;;		___awtoft
 14587 ;;		___ftadd
 14588 ;;		___ftdiv
 14589 ;;		___ftmul
 14590 ;; This function uses a non-reentrant model
 14591 ;;
 14592                           
 14593                           
 14594                           ;psect for function ___ftpack
 14595  0A3F                     ___ftpack:	
 14596                           
 14597                           ;incstack = 0
 14598                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14599  0A3F  0020               	movlb	0	; select bank0
 14600  0A40  0823               	movf	___ftpack@exp,w
 14601  0A41  1903               	btfsc	3,2
 14602  0A42  2A48               	goto	l5179
 14603  0A43  0822               	movf	___ftpack@arg+2,w
 14604  0A44  0421               	iorwf	___ftpack@arg+1,w
 14605  0A45  0420               	iorwf	___ftpack@arg,w
 14606  0A46  1D03               	skipz
 14607  0A47  2A59               	goto	l5185
 14608  0A48                     l5179:	
 14609  0A48  3000               	movlw	0
 14610  0A49  00A0               	movwf	?___ftpack
 14611  0A4A  3000               	movlw	0
 14612  0A4B  00A1               	movwf	?___ftpack+1
 14613  0A4C  3000               	movlw	0
 14614  0A4D  00A2               	movwf	?___ftpack+2
 14615  0A4E  0008               	return
 14616  0A4F                     l5183:	
 14617  0A4F  3001               	movlw	1
 14618  0A50  00A5               	movwf	??___ftpack
 14619  0A51  0825               	movf	??___ftpack,w
 14620  0A52  07A3               	addwf	___ftpack@exp,f
 14621  0A53  3001               	movlw	1
 14622  0A54                     u3495:	
 14623  0A54  36A2               	lsrf	___ftpack@arg+2,f
 14624  0A55  0CA1               	rrf	___ftpack@arg+1,f
 14625  0A56  0CA0               	rrf	___ftpack@arg,f
 14626  0A57  0B89               	decfsz	9,f
 14627  0A58  2A54               	goto	u3495
 14628  0A59                     l5185:	
 14629  0A59  30FE               	movlw	254
 14630  0A5A  0522               	andwf	___ftpack@arg+2,w
 14631  0A5B  1903               	btfsc	3,2
 14632  0A5C  2A72               	goto	l2711
 14633  0A5D  2A4F               	goto	l5183
 14634  0A5E                     l5187:	
 14635  0A5E  3001               	movlw	1
 14636  0A5F  00A5               	movwf	??___ftpack
 14637  0A60  0825               	movf	??___ftpack,w
 14638  0A61  07A3               	addwf	___ftpack@exp,f
 14639  0A62  3001               	movlw	1
 14640  0A63  07A0               	addwf	___ftpack@arg,f
 14641  0A64  3000               	movlw	0
 14642  0A65  1803               	skipnc
 14643  0A66  3001               	movlw	1
 14644  0A67  07A1               	addwf	___ftpack@arg+1,f
 14645  0A68  3000               	movlw	0
 14646  0A69  1803               	skipnc
 14647  0A6A  3001               	movlw	1
 14648  0A6B  07A2               	addwf	___ftpack@arg+2,f
 14649  0A6C  3001               	movlw	1
 14650  0A6D                     u3515:	
 14651  0A6D  36A2               	lsrf	___ftpack@arg+2,f
 14652  0A6E  0CA1               	rrf	___ftpack@arg+1,f
 14653  0A6F  0CA0               	rrf	___ftpack@arg,f
 14654  0A70  0B89               	decfsz	9,f
 14655  0A71  2A6D               	goto	u3515
 14656  0A72                     l2711:	
 14657  0A72  30FF               	movlw	255
 14658  0A73  0522               	andwf	___ftpack@arg+2,w
 14659  0A74  1903               	btfsc	3,2
 14660  0A75  2A7F               	goto	l5195
 14661  0A76  2A5E               	goto	l5187
 14662  0A77                     l5193:	
 14663  0A77  3001               	movlw	1
 14664  0A78  02A3               	subwf	___ftpack@exp,f
 14665  0A79  3001               	movlw	1
 14666  0A7A                     u3535:	
 14667  0A7A  35A0               	lslf	___ftpack@arg,f
 14668  0A7B  0DA1               	rlf	___ftpack@arg+1,f
 14669  0A7C  0DA2               	rlf	___ftpack@arg+2,f
 14670  0A7D  0B89               	decfsz	9,f
 14671  0A7E  2A7A               	goto	u3535
 14672  0A7F                     l5195:	
 14673  0A7F  1FA1               	btfss	___ftpack@arg+1,7
 14674  0A80  2A77               	goto	l5193
 14675  0A81  1823               	btfsc	___ftpack@exp,0
 14676  0A82  2A89               	goto	l2717
 14677  0A83  30FF               	movlw	255
 14678  0A84  05A0               	andwf	___ftpack@arg,f
 14679  0A85  307F               	movlw	127
 14680  0A86  05A1               	andwf	___ftpack@arg+1,f
 14681  0A87  30FF               	movlw	255
 14682  0A88  05A2               	andwf	___ftpack@arg+2,f
 14683  0A89                     l2717:	
 14684  0A89  1003               	clrc
 14685  0A8A  0CA3               	rrf	___ftpack@exp,f
 14686  0A8B  0823               	movf	___ftpack@exp,w
 14687  0A8C  00A5               	movwf	??___ftpack
 14688  0A8D  01A6               	clrf	??___ftpack+1
 14689  0A8E  01A7               	clrf	??___ftpack+2
 14690  0A8F  3010               	movlw	16
 14691  0A90                     u3565:	
 14692  0A90  35A5               	lslf	??___ftpack,f
 14693  0A91  0DA6               	rlf	??___ftpack+1,f
 14694  0A92  0DA7               	rlf	??___ftpack+2,f
 14695  0A93  0B89               	decfsz	9,f
 14696  0A94  2A90               	goto	u3565
 14697  0A95  0825               	movf	??___ftpack,w
 14698  0A96  04A0               	iorwf	___ftpack@arg,f
 14699  0A97  0826               	movf	??___ftpack+1,w
 14700  0A98  04A1               	iorwf	___ftpack@arg+1,f
 14701  0A99  0827               	movf	??___ftpack+2,w
 14702  0A9A  04A2               	iorwf	___ftpack@arg+2,f
 14703  0A9B  0824               	movf	___ftpack@sign,w
 14704  0A9C  1903               	btfsc	3,2
 14705  0A9D  0008               	return
 14706  0A9E  17A2               	bsf	___ftpack@arg+2,7
 14707  0A9F  0008               	return
 14708  0AA0                     __end_of___ftpack:	
 14709                           
 14710                           	psect	text98
 14711  1F29                     __ptext98:	
 14712 ;; *************** function _setRFSW_Status *****************
 14713 ;; Defined at:
 14714 ;;		line 394 in file "../src/RF_Control_B1.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;  sw              1    wreg     unsigned char 
 14717 ;;  command         1    2[BANK0 ] unsigned char 
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;  sw              1    3[BANK0 ] unsigned char 
 14720 ;; Return value:  Size  Location     Type
 14721 ;;		None               void
 14722 ;; Registers used:
 14723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14729 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;Total ram usage:        2 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; Hardware stack levels required when called:    6
 14736 ;; This function calls:
 14737 ;;		_RfSWPointSelect
 14738 ;; This function is called by:
 14739 ;;		_DlyOff_Main
 14740 ;;		_setDimmerLights_ERROR
 14741 ;;		_setControl_Lights_Table
 14742 ;;		_Sw_DimmerOnFunc
 14743 ;;		_Sw_DimmerAdjFunc
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           
 14748                           ;psect for function _setRFSW_Status
 14749  1F29                     _setRFSW_Status:	
 14750                           
 14751                           ;incstack = 0
 14752                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14753                           ;setRFSW_Status@sw stored from wreg
 14754  1F29  0020               	movlb	0	; select bank0
 14755  1F2A  00A3               	movwf	setRFSW_Status@sw
 14756                           
 14757                           ;RF_Control_B1.c: 395: RfSWPointSelect(sw);
 14758  1F2B  0823               	movf	setRFSW_Status@sw,w
 14759  1F2C  319E  26BC         	fcall	_RfSWPointSelect
 14760                           
 14761                           ;RF_Control_B1.c: 396: RFSW->Status = command;
 14762  1F2E  087A               	movf	_RFSW,w
 14763  1F2F  0086               	movwf	6
 14764  1F30  0187               	clrf	7
 14765  1F31  0020               	movlb	0	; select bank0
 14766  1F32  0822               	movf	setRFSW_Status@command,w
 14767  1F33  1001               	bcf	1,0
 14768  1F34  1D03               	skipz
 14769  1F35  1401               	bsf	1,0
 14770  1F36  0008               	return
 14771  1F37                     __end_of_setRFSW_Status:	
 14772                           
 14773                           	psect	text99
 14774  1EBC                     __ptext99:	
 14775 ;; *************** function _RfSWPointSelect *****************
 14776 ;; Defined at:
 14777 ;;		line 329 in file "../src/RF_Control_B1.c"
 14778 ;; Parameters:    Size  Location     Type
 14779 ;;  sw              1    wreg     unsigned char 
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  sw              1    1[BANK0 ] unsigned char 
 14782 ;; Return value:  Size  Location     Type
 14783 ;;		None               void
 14784 ;; Registers used:
 14785 ;;		wreg
 14786 ;; Tracked objects:
 14787 ;;		On entry : 0/0
 14788 ;;		On exit  : 0/0
 14789 ;;		Unchanged: 0/0
 14790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14792 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;Total ram usage:        2 bytes
 14796 ;; Hardware stack levels used:    1
 14797 ;; Hardware stack levels required when called:    5
 14798 ;; This function calls:
 14799 ;;		Nothing
 14800 ;; This function is called by:
 14801 ;;		_setRFSW_Control
 14802 ;;		_setRFSW_AdjControl
 14803 ;;		_setRFSW_Status
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           
 14808                           ;psect for function _RfSWPointSelect
 14809  1EBC                     _RfSWPointSelect:	
 14810                           
 14811                           ;incstack = 0
 14812                           ; Regs used in _RfSWPointSelect: [wreg]
 14813                           ;RfSWPointSelect@sw stored from wreg
 14814  1EBC  0020               	movlb	0	; select bank0
 14815  1EBD  00A1               	movwf	RfSWPointSelect@sw
 14816                           
 14817                           ;RF_Control_B1.c: 331: if (sw == 1) {
 14818  1EBE  0821               	movf	RfSWPointSelect@sw,w
 14819  1EBF  3A01               	xorlw	1
 14820  1EC0  1D03               	skipz
 14821  1EC1  0008               	return
 14822                           
 14823                           ;RF_Control_B1.c: 332: RFSW = &RFSW1;
 14824  1EC2  30EE               	movlw	_RFSW1& (0+255)
 14825  1EC3  00A0               	movwf	??_RfSWPointSelect
 14826  1EC4  0820               	movf	??_RfSWPointSelect,w
 14827  1EC5  00FA               	movwf	_RFSW
 14828  1EC6  0008               	return
 14829  1EC7                     __end_of_RfSWPointSelect:	
 14830                           
 14831                           	psect	text100
 14832  1FAF                     __ptext100:	
 14833 ;; *************** function _setDimmerLights_Trigger *****************
 14834 ;; Defined at:
 14835 ;;		line 705 in file "../src/Dimmer_B1.c"
 14836 ;; Parameters:    Size  Location     Type
 14837 ;;  lights          1    wreg     unsigned char 
 14838 ;;  command         1    2[BANK0 ] unsigned char 
 14839 ;; Auto vars:     Size  Location     Type
 14840 ;;  lights          1    3[BANK0 ] unsigned char 
 14841 ;; Return value:  Size  Location     Type
 14842 ;;		None               void
 14843 ;; Registers used:
 14844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14845 ;; Tracked objects:
 14846 ;;		On entry : 0/0
 14847 ;;		On exit  : 0/0
 14848 ;;		Unchanged: 0/0
 14849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14850 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;Total ram usage:        2 bytes
 14855 ;; Hardware stack levels used:    1
 14856 ;; Hardware stack levels required when called:    6
 14857 ;; This function calls:
 14858 ;;		_DimmerLightsPointSelect
 14859 ;; This function is called by:
 14860 ;;		_DlyOff_Main
 14861 ;;		_setRFSW_Control
 14862 ;;		_Sw_DimmerOnFunc
 14863 ;;		_Sw_DimmerOffFunc
 14864 ;; This function uses a non-reentrant model
 14865 ;;
 14866                           
 14867                           
 14868                           ;psect for function _setDimmerLights_Trigger
 14869  1FAF                     _setDimmerLights_Trigger:	
 14870                           
 14871                           ;incstack = 0
 14872                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14873                           ;setDimmerLights_Trigger@lights stored from wreg
 14874  1FAF  0020               	movlb	0	; select bank0
 14875  1FB0  00A3               	movwf	setDimmerLights_Trigger@lights
 14876                           
 14877                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14878  1FB1  0823               	movf	setDimmerLights_Trigger@lights,w
 14879  1FB2  319E  26B1         	fcall	_DimmerLightsPointSelect
 14880                           
 14881                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 14882  1FB4  0020               	movlb	0	; select bank0
 14883  1FB5  086D               	movf	_DimmerLights,w
 14884  1FB6  3E08               	addlw	8
 14885  1FB7  0086               	movwf	6
 14886  1FB8  3001               	movlw	1	; select bank2/3
 14887  1FB9  0087               	movwf	7
 14888  1FBA  0822               	movf	setDimmerLights_Trigger@command,w
 14889  1FBB  1101               	bcf	1,2
 14890  1FBC  1D03               	skipz
 14891  1FBD  1501               	bsf	1,2
 14892  1FBE  0008               	return
 14893  1FBF                     __end_of_setDimmerLights_Trigger:	
 14894                           
 14895                           	psect	text101
 14896  1F9F                     __ptext101:	
 14897 ;; *************** function _setDimmerLights_Switch *****************
 14898 ;; Defined at:
 14899 ;;		line 693 in file "../src/Dimmer_B1.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  lights          1    wreg     unsigned char 
 14902 ;;  command         1    2[BANK0 ] unsigned char 
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  lights          1    3[BANK0 ] unsigned char 
 14905 ;; Return value:  Size  Location     Type
 14906 ;;		None               void
 14907 ;; Registers used:
 14908 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14909 ;; Tracked objects:
 14910 ;;		On entry : 0/0
 14911 ;;		On exit  : 0/0
 14912 ;;		Unchanged: 0/0
 14913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14914 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;Total ram usage:        2 bytes
 14919 ;; Hardware stack levels used:    1
 14920 ;; Hardware stack levels required when called:    6
 14921 ;; This function calls:
 14922 ;;		_DimmerLightsPointSelect
 14923 ;; This function is called by:
 14924 ;;		_DlyOff_Main
 14925 ;;		_setRFSW_Control
 14926 ;;		_Sw_DimmerOnFunc
 14927 ;;		_Sw_DimmerOffFunc
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _setDimmerLights_Switch
 14933  1F9F                     _setDimmerLights_Switch:	
 14934                           
 14935                           ;incstack = 0
 14936                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14937                           ;setDimmerLights_Switch@lights stored from wreg
 14938  1F9F  0020               	movlb	0	; select bank0
 14939  1FA0  00A3               	movwf	setDimmerLights_Switch@lights
 14940                           
 14941                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 14942  1FA1  0823               	movf	setDimmerLights_Switch@lights,w
 14943  1FA2  319E  26B1         	fcall	_DimmerLightsPointSelect
 14944                           
 14945                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 14946  1FA4  0020               	movlb	0	; select bank0
 14947  1FA5  086D               	movf	_DimmerLights,w
 14948  1FA6  3E08               	addlw	8
 14949  1FA7  0086               	movwf	6
 14950  1FA8  3001               	movlw	1	; select bank2/3
 14951  1FA9  0087               	movwf	7
 14952  1FAA  0822               	movf	setDimmerLights_Switch@command,w
 14953  1FAB  1081               	bcf	1,1
 14954  1FAC  1D03               	skipz
 14955  1FAD  1481               	bsf	1,1
 14956  1FAE  0008               	return
 14957  1FAF                     __end_of_setDimmerLights_Switch:	
 14958                           
 14959                           	psect	text102
 14960  1EB1                     __ptext102:	
 14961 ;; *************** function _DimmerLightsPointSelect *****************
 14962 ;; Defined at:
 14963 ;;		line 315 in file "../src/Dimmer_B1.c"
 14964 ;; Parameters:    Size  Location     Type
 14965 ;;  lights          1    wreg     unsigned char 
 14966 ;; Auto vars:     Size  Location     Type
 14967 ;;  lights          1    1[BANK0 ] unsigned char 
 14968 ;; Return value:  Size  Location     Type
 14969 ;;		None               void
 14970 ;; Registers used:
 14971 ;;		wreg
 14972 ;; Tracked objects:
 14973 ;;		On entry : 0/0
 14974 ;;		On exit  : 0/0
 14975 ;;		Unchanged: 0/0
 14976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;Total ram usage:        2 bytes
 14982 ;; Hardware stack levels used:    1
 14983 ;; Hardware stack levels required when called:    5
 14984 ;; This function calls:
 14985 ;;		Nothing
 14986 ;; This function is called by:
 14987 ;;		_setDimmerLights_Initialization
 14988 ;;		_setDimmerLights_Main
 14989 ;;		_setDimmerLights_ERROR
 14990 ;;		_setDimmerLights_TriggerERROR
 14991 ;;		_setDimmerLights
 14992 ;;		_setDimmerLights_Adj
 14993 ;;		_setDimmerLights_AdjRF
 14994 ;;		_setDimmerLights_Switch
 14995 ;;		_setDimmerLights_AdjGo
 14996 ;;		_setDimmerLights_Trigger
 14997 ;;		_setDimmerLights_TriggerAdj
 14998 ;;		_setDimmerLights_GO
 14999 ;;		_setDimmerLights_MaxmumValue
 15000 ;;		_setDimmerLights_Clear
 15001 ;; This function uses a non-reentrant model
 15002 ;;
 15003                           
 15004                           
 15005                           ;psect for function _DimmerLightsPointSelect
 15006  1EB1                     _DimmerLightsPointSelect:	
 15007                           
 15008                           ;incstack = 0
 15009                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15010                           ;DimmerLightsPointSelect@lights stored from wreg
 15011  1EB1  0020               	movlb	0	; select bank0
 15012  1EB2  00A1               	movwf	DimmerLightsPointSelect@lights
 15013                           
 15014                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15015  1EB3  0821               	movf	DimmerLightsPointSelect@lights,w
 15016  1EB4  3A01               	xorlw	1
 15017  1EB5  1D03               	skipz
 15018  1EB6  0008               	return
 15019                           
 15020                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15021  1EB7  30C0               	movlw	_DimmerLights1& (0+255)
 15022  1EB8  00A0               	movwf	??_DimmerLightsPointSelect
 15023  1EB9  0820               	movf	??_DimmerLightsPointSelect,w
 15024  1EBA  00ED               	movwf	_DimmerLights
 15025  1EBB  0008               	return
 15026  1EBC                     __end_of_DimmerLightsPointSelect:	
 15027                           
 15028                           	psect	text103
 15029  0930                     __ptext103:	
 15030 ;; *************** function _setBuz *****************
 15031 ;; Defined at:
 15032 ;;		line 22 in file "../src/Buzzer_B1.c"
 15033 ;; Parameters:    Size  Location     Type
 15034 ;;  count           1    wreg     unsigned char 
 15035 ;;  time            2    9[BANK0 ] int 
 15036 ;; Auto vars:     Size  Location     Type
 15037 ;;  count           1   12[BANK0 ] unsigned char 
 15038 ;; Return value:  Size  Location     Type
 15039 ;;		None               void
 15040 ;; Registers used:
 15041 ;;		wreg, status,2, status,0, pclath, cstack
 15042 ;; Tracked objects:
 15043 ;;		On entry : 0/0
 15044 ;;		On exit  : 0/0
 15045 ;;		Unchanged: 0/0
 15046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15048 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;Total ram usage:        4 bytes
 15052 ;; Hardware stack levels used:    1
 15053 ;; Hardware stack levels required when called:    6
 15054 ;; This function calls:
 15055 ;;		___awdiv
 15056 ;; This function is called by:
 15057 ;;		_DlyOff_Main
 15058 ;;		_setDimmerLights_Main
 15059 ;;		_DimmerLights_Exceptions
 15060 ;;		_setOverTemp_Exceptions
 15061 ;;		_setLog_Code
 15062 ;;		_setControl_Lights_Table
 15063 ;;		_setRFSW_Control
 15064 ;;		_setSw_Main
 15065 ;;		_Sw_DimmerOnFunc
 15066 ;;		_my_Main
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           
 15071                           ;psect for function _setBuz
 15072  0930                     _setBuz:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15076                           ;setBuz@count stored from wreg
 15077  0930  0020               	movlb	0	; select bank0
 15078  0931  00AC               	movwf	setBuz@count
 15079                           
 15080                           ;Buzzer_B1.c: 23: time /= 10;
 15081  0932  300A               	movlw	10
 15082  0933  00A0               	movwf	___awdiv@divisor
 15083  0934  3000               	movlw	0
 15084  0935  00A1               	movwf	___awdiv@divisor+1
 15085  0936  082A               	movf	setBuz@time+1,w
 15086  0937  01A3               	clrf	___awdiv@dividend+1
 15087  0938  07A3               	addwf	___awdiv@dividend+1,f
 15088  0939  0829               	movf	setBuz@time,w
 15089  093A  01A2               	clrf	___awdiv@dividend
 15090  093B  07A2               	addwf	___awdiv@dividend,f
 15091  093C  3188  2030  3189   	fcall	___awdiv
 15092  093F  0020               	movlb	0	; select bank0
 15093  0940  0821               	movf	?___awdiv+1,w
 15094  0941  01AA               	clrf	setBuz@time+1
 15095  0942  07AA               	addwf	setBuz@time+1,f
 15096  0943  0820               	movf	?___awdiv,w
 15097  0944  01A9               	clrf	setBuz@time
 15098  0945  07A9               	addwf	setBuz@time,f
 15099                           
 15100                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15101  0946  0021               	movlb	1	; select bank1
 15102  0947  1C32               	btfss	_Buz1^(0+128),0
 15103  0948  0008               	return
 15104                           
 15105                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15106  0949  18B2               	btfsc	_Buz1^(0+128),1
 15107  094A  2961               	goto	l90
 15108                           
 15109                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15110  094B  14B2               	bsf	_Buz1^(0+128),1
 15111                           
 15112                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15113  094C  01B3               	clrf	(_Buz1^(0+128)+1)
 15114  094D  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15115                           
 15116                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15117  094E  0020               	movlb	0	; select bank0
 15118  094F  082C               	movf	setBuz@count,w
 15119  0950  00AB               	movwf	??_setBuz
 15120  0951  082B               	movf	??_setBuz,w
 15121  0952  0021               	movlb	1	; select bank1
 15122  0953  00B5               	movwf	(_Buz1^(0+128)+3)
 15123                           
 15124                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15125  0954  0020               	movlb	0	; select bank0
 15126  0955  082A               	movf	setBuz@time+1,w
 15127  0956  0021               	movlb	1	; select bank1
 15128  0957  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15129  0958  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15130  0959  0020               	movlb	0	; select bank0
 15131  095A  0829               	movf	setBuz@time,w
 15132  095B  0021               	movlb	1	; select bank1
 15133  095C  01B8               	clrf	(_Buz1^(0+128)+6)
 15134  095D  07B8               	addwf	(_Buz1^(0+128)+6),f
 15135                           
 15136                           ;Buzzer_B1.c: 30: RB3 = 1;
 15137  095E  0020               	movlb	0	; select bank0
 15138  095F  158D               	bsf	13,3	;volatile
 15139                           
 15140                           ;Buzzer_B1.c: 31: } else {
 15141  0960  0008               	return
 15142  0961                     l90:	
 15143                           
 15144                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15145  0961  19B2               	btfsc	_Buz1^(0+128),3
 15146  0962  2975               	goto	l92
 15147                           
 15148                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15149  0963  15B2               	bsf	_Buz1^(0+128),3
 15150                           
 15151                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15152  0964  0020               	movlb	0	; select bank0
 15153  0965  082C               	movf	setBuz@count,w
 15154  0966  00AB               	movwf	??_setBuz
 15155  0967  082B               	movf	??_setBuz,w
 15156  0968  0021               	movlb	1	; select bank1
 15157  0969  00B6               	movwf	(_Buz1^(0+128)+4)
 15158                           
 15159                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15160  096A  0020               	movlb	0	; select bank0
 15161  096B  082A               	movf	setBuz@time+1,w
 15162  096C  0021               	movlb	1	; select bank1
 15163  096D  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15164  096E  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15165  096F  0020               	movlb	0	; select bank0
 15166  0970  0829               	movf	setBuz@time,w
 15167  0971  0021               	movlb	1	; select bank1
 15168  0972  01BA               	clrf	(_Buz1^(0+128)+8)
 15169  0973  07BA               	addwf	(_Buz1^(0+128)+8),f
 15170                           
 15171                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15172  0974  0008               	return
 15173  0975                     l92:	
 15174  0975  1A32               	btfsc	_Buz1^(0+128),4
 15175  0976  0008               	return
 15176                           
 15177                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15178  0977  1632               	bsf	_Buz1^(0+128),4
 15179                           
 15180                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15181  0978  0020               	movlb	0	; select bank0
 15182  0979  082C               	movf	setBuz@count,w
 15183  097A  00AB               	movwf	??_setBuz
 15184  097B  082B               	movf	??_setBuz,w
 15185  097C  0021               	movlb	1	; select bank1
 15186  097D  00B7               	movwf	(_Buz1^(0+128)+5)
 15187                           
 15188                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15189  097E  0020               	movlb	0	; select bank0
 15190  097F  082A               	movf	setBuz@time+1,w
 15191  0980  0021               	movlb	1	; select bank1
 15192  0981  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15193  0982  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15194  0983  0020               	movlb	0	; select bank0
 15195  0984  0829               	movf	setBuz@time,w
 15196  0985  0021               	movlb	1	; select bank1
 15197  0986  01BC               	clrf	(_Buz1^(0+128)+10)
 15198  0987  07BC               	addwf	(_Buz1^(0+128)+10),f
 15199  0988  0008               	return
 15200  0989                     __end_of_setBuz:	
 15201                           
 15202                           	psect	text104
 15203  0830                     __ptext104:	
 15204 ;; *************** function ___awdiv *****************
 15205 ;; Defined at:
 15206 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15207 ;; Parameters:    Size  Location     Type
 15208 ;;  divisor         2    0[BANK0 ] int 
 15209 ;;  dividend        2    2[BANK0 ] int 
 15210 ;; Auto vars:     Size  Location     Type
 15211 ;;  quotient        2    7[BANK0 ] int 
 15212 ;;  sign            1    6[BANK0 ] unsigned char 
 15213 ;;  counter         1    5[BANK0 ] unsigned char 
 15214 ;; Return value:  Size  Location     Type
 15215 ;;                  2    0[BANK0 ] int 
 15216 ;; Registers used:
 15217 ;;		wreg, status,2, status,0
 15218 ;; Tracked objects:
 15219 ;;		On entry : 0/0
 15220 ;;		On exit  : 0/0
 15221 ;;		Unchanged: 0/0
 15222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15223 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;Total ram usage:        9 bytes
 15228 ;; Hardware stack levels used:    1
 15229 ;; Hardware stack levels required when called:    5
 15230 ;; This function calls:
 15231 ;;		Nothing
 15232 ;; This function is called by:
 15233 ;;		_setBuz
 15234 ;; This function uses a non-reentrant model
 15235 ;;
 15236                           
 15237                           
 15238                           ;psect for function ___awdiv
 15239  0830                     ___awdiv:	
 15240                           
 15241                           ;incstack = 0
 15242                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15243  0830  0020               	movlb	0	; select bank0
 15244  0831  01A6               	clrf	___awdiv@sign
 15245  0832  1FA1               	btfss	___awdiv@divisor+1,7
 15246  0833  283B               	goto	l5517
 15247  0834  09A0               	comf	___awdiv@divisor,f
 15248  0835  09A1               	comf	___awdiv@divisor+1,f
 15249  0836  0AA0               	incf	___awdiv@divisor,f
 15250  0837  1903               	skipnz
 15251  0838  0AA1               	incf	___awdiv@divisor+1,f
 15252  0839  01A6               	clrf	___awdiv@sign
 15253  083A  0AA6               	incf	___awdiv@sign,f
 15254  083B                     l5517:	
 15255  083B  1FA3               	btfss	___awdiv@dividend+1,7
 15256  083C  2846               	goto	l5523
 15257  083D  09A2               	comf	___awdiv@dividend,f
 15258  083E  09A3               	comf	___awdiv@dividend+1,f
 15259  083F  0AA2               	incf	___awdiv@dividend,f
 15260  0840  1903               	skipnz
 15261  0841  0AA3               	incf	___awdiv@dividend+1,f
 15262  0842  3001               	movlw	1
 15263  0843  00A4               	movwf	??___awdiv
 15264  0844  0824               	movf	??___awdiv,w
 15265  0845  06A6               	xorwf	___awdiv@sign,f
 15266  0846                     l5523:	
 15267  0846  01A7               	clrf	___awdiv@quotient
 15268  0847  01A8               	clrf	___awdiv@quotient+1
 15269  0848  0821               	movf	___awdiv@divisor+1,w
 15270  0849  0420               	iorwf	___awdiv@divisor,w
 15271  084A  1903               	skipnz
 15272  084B  2875               	goto	l5545
 15273  084C  01A5               	clrf	___awdiv@counter
 15274  084D  0AA5               	incf	___awdiv@counter,f
 15275  084E                     l5533:	
 15276  084E  1BA1               	btfsc	___awdiv@divisor+1,7
 15277  084F  285A               	goto	l5535
 15278  0850  3001               	movlw	1
 15279  0851                     u4265:	
 15280  0851  35A0               	lslf	___awdiv@divisor,f
 15281  0852  0DA1               	rlf	___awdiv@divisor+1,f
 15282  0853  0B89               	decfsz	9,f
 15283  0854  2851               	goto	u4265
 15284  0855  3001               	movlw	1
 15285  0856  00A4               	movwf	??___awdiv
 15286  0857  0824               	movf	??___awdiv,w
 15287  0858  07A5               	addwf	___awdiv@counter,f
 15288  0859  284E               	goto	l5533
 15289  085A                     l5535:	
 15290  085A  3001               	movlw	1
 15291  085B                     u4285:	
 15292  085B  35A7               	lslf	___awdiv@quotient,f
 15293  085C  0DA8               	rlf	___awdiv@quotient+1,f
 15294  085D  0B89               	decfsz	9,f
 15295  085E  285B               	goto	u4285
 15296  085F  0821               	movf	___awdiv@divisor+1,w
 15297  0860  0223               	subwf	___awdiv@dividend+1,w
 15298  0861  1D03               	skipz
 15299  0862  2865               	goto	u4295
 15300  0863  0820               	movf	___awdiv@divisor,w
 15301  0864  0222               	subwf	___awdiv@dividend,w
 15302  0865                     u4295:	
 15303  0865  1C03               	skipc
 15304  0866  286C               	goto	l5541
 15305  0867  0820               	movf	___awdiv@divisor,w
 15306  0868  02A2               	subwf	___awdiv@dividend,f
 15307  0869  0821               	movf	___awdiv@divisor+1,w
 15308  086A  3BA3               	subwfb	___awdiv@dividend+1,f
 15309  086B  1427               	bsf	___awdiv@quotient,0
 15310  086C                     l5541:	
 15311  086C  3001               	movlw	1
 15312  086D                     u4305:	
 15313  086D  36A1               	lsrf	___awdiv@divisor+1,f
 15314  086E  0CA0               	rrf	___awdiv@divisor,f
 15315  086F  0B89               	decfsz	9,f
 15316  0870  286D               	goto	u4305
 15317  0871  3001               	movlw	1
 15318  0872  02A5               	subwf	___awdiv@counter,f
 15319  0873  1D03               	btfss	3,2
 15320  0874  285A               	goto	l5535
 15321  0875                     l5545:	
 15322  0875  0826               	movf	___awdiv@sign,w
 15323  0876  1903               	btfsc	3,2
 15324  0877  287D               	goto	l5549
 15325  0878  09A7               	comf	___awdiv@quotient,f
 15326  0879  09A8               	comf	___awdiv@quotient+1,f
 15327  087A  0AA7               	incf	___awdiv@quotient,f
 15328  087B  1903               	skipnz
 15329  087C  0AA8               	incf	___awdiv@quotient+1,f
 15330  087D                     l5549:	
 15331  087D  0828               	movf	___awdiv@quotient+1,w
 15332  087E  01A1               	clrf	?___awdiv+1
 15333  087F  07A1               	addwf	?___awdiv+1,f
 15334  0880  0827               	movf	___awdiv@quotient,w
 15335  0881  01A0               	clrf	?___awdiv
 15336  0882  07A0               	addwf	?___awdiv,f
 15337  0883  0008               	return
 15338  0884                     __end_of___awdiv:	
 15339                           
 15340                           	psect	text105
 15341  1E02                     __ptext105:	
 15342 ;; *************** function _DelayOff_Initialization *****************
 15343 ;; Defined at:
 15344 ;;		line 26 in file "../src/DelayOff_B1.c"
 15345 ;; Parameters:    Size  Location     Type
 15346 ;;		None
 15347 ;; Auto vars:     Size  Location     Type
 15348 ;;		None
 15349 ;; Return value:  Size  Location     Type
 15350 ;;		None               void
 15351 ;; Registers used:
 15352 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15353 ;; Tracked objects:
 15354 ;;		On entry : 0/0
 15355 ;;		On exit  : 0/0
 15356 ;;		Unchanged: 0/0
 15357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;Total ram usage:        0 bytes
 15363 ;; Hardware stack levels used:    1
 15364 ;; Hardware stack levels required when called:    7
 15365 ;; This function calls:
 15366 ;;		_DlyOff_Initialization
 15367 ;; This function is called by:
 15368 ;;		_main
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           
 15373                           ;psect for function _DelayOff_Initialization
 15374  1E02                     _DelayOff_Initialization:	
 15375                           
 15376                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15377                           
 15378                           ;incstack = 0
 15379                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15380  1E02  3001               	movlw	1
 15381  1E03  319E  26A6         	fcall	_DlyOff_Initialization
 15382  1E05  0008               	return
 15383  1E06                     __end_of_DelayOff_Initialization:	
 15384                           
 15385                           	psect	text106
 15386  1EA6                     __ptext106:	
 15387 ;; *************** function _DlyOff_Initialization *****************
 15388 ;; Defined at:
 15389 ;;		line 56 in file "../src/DelayOff_B1.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;  sw              1    wreg     unsigned char 
 15392 ;; Auto vars:     Size  Location     Type
 15393 ;;  sw              1    2[BANK0 ] unsigned char 
 15394 ;; Return value:  Size  Location     Type
 15395 ;;		None               void
 15396 ;; Registers used:
 15397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15398 ;; Tracked objects:
 15399 ;;		On entry : 0/0
 15400 ;;		On exit  : 0/0
 15401 ;;		Unchanged: 0/0
 15402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;Total ram usage:        1 bytes
 15408 ;; Hardware stack levels used:    1
 15409 ;; Hardware stack levels required when called:    6
 15410 ;; This function calls:
 15411 ;;		_DelayOffPointSelect
 15412 ;; This function is called by:
 15413 ;;		_DelayOff_Initialization
 15414 ;; This function uses a non-reentrant model
 15415 ;;
 15416                           
 15417                           
 15418                           ;psect for function _DlyOff_Initialization
 15419  1EA6                     _DlyOff_Initialization:	
 15420                           
 15421                           ;incstack = 0
 15422                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15423                           ;DlyOff_Initialization@sw stored from wreg
 15424  1EA6  0020               	movlb	0	; select bank0
 15425  1EA7  00A2               	movwf	DlyOff_Initialization@sw
 15426                           
 15427                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15428  1EA8  0822               	movf	DlyOff_Initialization@sw,w
 15429  1EA9  319E  269B         	fcall	_DelayOffPointSelect
 15430                           
 15431                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15432  1EAB  0878               	movf	_DelayOff,w
 15433  1EAC  0086               	movwf	6
 15434  1EAD  3001               	movlw	1	; select bank2/3
 15435  1EAE  0087               	movwf	7
 15436  1EAF  1401               	bsf	1,0
 15437  1EB0  0008               	return
 15438  1EB1                     __end_of_DlyOff_Initialization:	
 15439                           
 15440                           	psect	text107
 15441  1E9B                     __ptext107:	
 15442 ;; *************** function _DelayOffPointSelect *****************
 15443 ;; Defined at:
 15444 ;;		line 7 in file "../src/DelayOff_B1.c"
 15445 ;; Parameters:    Size  Location     Type
 15446 ;;  sw              1    wreg     unsigned char 
 15447 ;; Auto vars:     Size  Location     Type
 15448 ;;  sw              1    1[BANK0 ] unsigned char 
 15449 ;; Return value:  Size  Location     Type
 15450 ;;		None               void
 15451 ;; Registers used:
 15452 ;;		wreg
 15453 ;; Tracked objects:
 15454 ;;		On entry : 0/0
 15455 ;;		On exit  : 0/0
 15456 ;;		Unchanged: 0/0
 15457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15460 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15461 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;Total ram usage:        2 bytes
 15463 ;; Hardware stack levels used:    1
 15464 ;; Hardware stack levels required when called:    5
 15465 ;; This function calls:
 15466 ;;		Nothing
 15467 ;; This function is called by:
 15468 ;;		_DlyOff_Initialization
 15469 ;;		_DlyOff_Main
 15470 ;;		_setDelayOff_GO
 15471 ;; This function uses a non-reentrant model
 15472 ;;
 15473                           
 15474                           
 15475                           ;psect for function _DelayOffPointSelect
 15476  1E9B                     _DelayOffPointSelect:	
 15477                           
 15478                           ;incstack = 0
 15479                           ; Regs used in _DelayOffPointSelect: [wreg]
 15480                           ;DelayOffPointSelect@sw stored from wreg
 15481  1E9B  0020               	movlb	0	; select bank0
 15482  1E9C  00A1               	movwf	DelayOffPointSelect@sw
 15483                           
 15484                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15485  1E9D  0821               	movf	DelayOffPointSelect@sw,w
 15486  1E9E  3A01               	xorlw	1
 15487  1E9F  1D03               	skipz
 15488  1EA0  0008               	return
 15489                           
 15490                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15491  1EA1  3062               	movlw	_DlySw1& (0+255)
 15492  1EA2  00A0               	movwf	??_DelayOffPointSelect
 15493  1EA3  0820               	movf	??_DelayOffPointSelect,w
 15494  1EA4  00F8               	movwf	_DelayOff
 15495  1EA5  0008               	return
 15496  1EA6                     __end_of_DelayOffPointSelect:	
 15497                           
 15498                           	psect	text108
 15499  10B6                     __ptext108:	
 15500 ;; *************** function _CC2500_PowerOnInitial *****************
 15501 ;; Defined at:
 15502 ;;		line 111 in file "../src/CC2500_B1.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;		None
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;		None
 15507 ;; Return value:  Size  Location     Type
 15508 ;;		None               void
 15509 ;; Registers used:
 15510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;Total ram usage:        0 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    8
 15523 ;; This function calls:
 15524 ;;		_CC2500_ClearRXFIFO
 15525 ;;		_CC2500_ClearTXFIFO
 15526 ;;		_CC2500_FrequencyCabr
 15527 ;;		_CC2500_InitPATable
 15528 ;;		_CC2500_InitSetREG
 15529 ;;		_CC2500_PowerRST
 15530 ;;		_CC2500_SIDLEMode
 15531 ;; This function is called by:
 15532 ;;		_main
 15533 ;; This function uses a non-reentrant model
 15534 ;;
 15535                           
 15536                           
 15537                           ;psect for function _CC2500_PowerOnInitial
 15538  10B6                     _CC2500_PowerOnInitial:	
 15539                           
 15540                           ;CC2500_B1.c: 112: CC2500_PowerRST();
 15541                           
 15542                           ;incstack = 0
 15543                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15544  10B6  3195  257E  3190   	fcall	_CC2500_PowerRST
 15545                           
 15546                           ;CC2500_B1.c: 113: CC2500_InitSetREG();
 15547  10B9  3193  2313  3190   	fcall	_CC2500_InitSetREG
 15548                           
 15549                           ;CC2500_B1.c: 114: CC2500_InitPATable();
 15550  10BC  3191  217B  3190   	fcall	_CC2500_InitPATable
 15551                           
 15552                           ;CC2500_B1.c: 115: CC2500_ClearTXFIFO();
 15553  10BF  319D  25FA  3190   	fcall	_CC2500_ClearTXFIFO
 15554                           
 15555                           ;CC2500_B1.c: 116: CC2500_ClearRXFIFO();
 15556  10C2  319D  25F6  3190   	fcall	_CC2500_ClearRXFIFO
 15557                           
 15558                           ;CC2500_B1.c: 117: CC2500_FrequencyCabr();
 15559  10C5  319E  26D2  3190   	fcall	_CC2500_FrequencyCabr
 15560                           
 15561                           ;CC2500_B1.c: 118: CC2500_SIDLEMode();
 15562  10C8  319D  25FE         	fcall	_CC2500_SIDLEMode
 15563  10CA  0008               	return
 15564  10CB                     __end_of_CC2500_PowerOnInitial:	
 15565                           
 15566                           	psect	text109
 15567  1DFE                     __ptext109:	
 15568 ;; *************** function _CC2500_SIDLEMode *****************
 15569 ;; Defined at:
 15570 ;;		line 201 in file "../src/CC2500_B1.c"
 15571 ;; Parameters:    Size  Location     Type
 15572 ;;		None
 15573 ;; Auto vars:     Size  Location     Type
 15574 ;;		None
 15575 ;; Return value:  Size  Location     Type
 15576 ;;		None               void
 15577 ;; Registers used:
 15578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15579 ;; Tracked objects:
 15580 ;;		On entry : 0/0
 15581 ;;		On exit  : 0/0
 15582 ;;		Unchanged: 0/0
 15583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;Total ram usage:        0 bytes
 15589 ;; Hardware stack levels used:    1
 15590 ;; Hardware stack levels required when called:    7
 15591 ;; This function calls:
 15592 ;;		_CC2500_WriteCommand
 15593 ;; This function is called by:
 15594 ;;		_CC2500_PowerOnInitial
 15595 ;; This function uses a non-reentrant model
 15596 ;;
 15597                           
 15598                           
 15599                           ;psect for function _CC2500_SIDLEMode
 15600  1DFE                     _CC2500_SIDLEMode:	
 15601                           
 15602                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x36);
 15603                           
 15604                           ;incstack = 0
 15605                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15606  1DFE  3036               	movlw	54
 15607  1DFF  3191  2110         	fcall	_CC2500_WriteCommand
 15608  1E01  0008               	return
 15609  1E02                     __end_of_CC2500_SIDLEMode:	
 15610                           
 15611                           	psect	text110
 15612  157E                     __ptext110:	
 15613 ;; *************** function _CC2500_PowerRST *****************
 15614 ;; Defined at:
 15615 ;;		line 124 in file "../src/CC2500_B1.c"
 15616 ;; Parameters:    Size  Location     Type
 15617 ;;		None
 15618 ;; Auto vars:     Size  Location     Type
 15619 ;;		None
 15620 ;; Return value:  Size  Location     Type
 15621 ;;		None               void
 15622 ;; Registers used:
 15623 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15624 ;; Tracked objects:
 15625 ;;		On entry : 0/0
 15626 ;;		On exit  : 0/0
 15627 ;;		Unchanged: 0/0
 15628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;Total ram usage:        1 bytes
 15634 ;; Hardware stack levels used:    1
 15635 ;; Hardware stack levels required when called:    6
 15636 ;; This function calls:
 15637 ;;		_CC2500_WriteByte
 15638 ;;		_DelayTime_1us
 15639 ;;		_Timeout_Counter
 15640 ;;		_set_TimeoutCleared
 15641 ;; This function is called by:
 15642 ;;		_CC2500_PowerOnInitial
 15643 ;; This function uses a non-reentrant model
 15644 ;;
 15645                           
 15646                           
 15647                           ;psect for function _CC2500_PowerRST
 15648  157E                     _CC2500_PowerRST:	
 15649                           
 15650                           ;CC2500_B1.c: 125: RC1 = 0;
 15651                           
 15652                           ;incstack = 0
 15653                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15654  157E  0020               	movlb	0	; select bank0
 15655  157F  108E               	bcf	14,1	;volatile
 15656                           
 15657                           ;CC2500_B1.c: 126: RC0 = 0;
 15658  1580  100E               	bcf	14,0	;volatile
 15659                           
 15660                           ;CC2500_B1.c: 127: RC4 = 1;
 15661  1581  160E               	bsf	14,4	;volatile
 15662                           
 15663                           ;CC2500_B1.c: 128: DelayTime_1us(10);
 15664  1582  300A               	movlw	10
 15665  1583  00A0               	movwf	DelayTime_1us@count
 15666  1584  3000               	movlw	0
 15667  1585  00A1               	movwf	DelayTime_1us@count+1
 15668  1586  3192  22C6  3195   	fcall	_DelayTime_1us
 15669                           
 15670                           ;CC2500_B1.c: 129: RC4 = 0;
 15671  1589  0020               	movlb	0	; select bank0
 15672  158A  120E               	bcf	14,4	;volatile
 15673                           
 15674                           ;CC2500_B1.c: 130: DelayTime_1us(10);
 15675  158B  300A               	movlw	10
 15676  158C  00A0               	movwf	DelayTime_1us@count
 15677  158D  3000               	movlw	0
 15678  158E  00A1               	movwf	DelayTime_1us@count+1
 15679  158F  3192  22C6  3195   	fcall	_DelayTime_1us
 15680                           
 15681                           ;CC2500_B1.c: 131: RC4 = 1;
 15682  1592  0020               	movlb	0	; select bank0
 15683  1593  160E               	bsf	14,4	;volatile
 15684                           
 15685                           ;CC2500_B1.c: 132: DelayTime_1us(40);
 15686  1594  3028               	movlw	40
 15687  1595  00A0               	movwf	DelayTime_1us@count
 15688  1596  3000               	movlw	0
 15689  1597  00A1               	movwf	DelayTime_1us@count+1
 15690  1598  3192  22C6  3195   	fcall	_DelayTime_1us
 15691                           
 15692                           ;CC2500_B1.c: 133: RC4 = 0;
 15693  159B  0020               	movlb	0	; select bank0
 15694  159C  120E               	bcf	14,4	;volatile
 15695                           
 15696                           ;CC2500_B1.c: 134: SPI0Buffer = 0x30;
 15697  159D  3030               	movlw	48
 15698  159E  00A6               	movwf	??_CC2500_PowerRST
 15699  159F  0826               	movf	??_CC2500_PowerRST,w
 15700  15A0  00FB               	movwf	_SPI0Buffer
 15701                           
 15702                           ;CC2500_B1.c: 135: while (RC2 == 1 && myMain.Timeout == 0) {
 15703  15A1  2DA5               	goto	l6427
 15704  15A2                     l6425:	
 15705                           
 15706                           ;CC2500_B1.c: 136: Timeout_Counter();
 15707  15A2  3190  20F8  3195   	fcall	_Timeout_Counter
 15708  15A5                     l6427:	
 15709  15A5  0020               	movlb	0	; select bank0
 15710  15A6  1D0E               	btfss	14,2	;volatile
 15711  15A7  2DAB               	goto	l6431
 15712  15A8  0021               	movlb	1	; select bank1
 15713  15A9  1D2F               	btfss	(_myMain^(0+128)+15),2
 15714  15AA  2DA2               	goto	l6425
 15715  15AB                     l6431:	
 15716                           
 15717                           ;CC2500_B1.c: 137: };
 15718                           ;CC2500_B1.c: 138: set_TimeoutCleared();
 15719  15AB  319E  2616  3195   	fcall	_set_TimeoutCleared
 15720                           
 15721                           ;CC2500_B1.c: 139: CC2500_WriteByte();
 15722  15AE  3190  208E  3195   	fcall	_CC2500_WriteByte
 15723                           
 15724                           ;CC2500_B1.c: 140: while (RC2 == 1 && myMain.Timeout == 0) {
 15725  15B1  2DB5               	goto	l6437
 15726  15B2                     l6435:	
 15727                           
 15728                           ;CC2500_B1.c: 141: Timeout_Counter();
 15729  15B2  3190  20F8  3195   	fcall	_Timeout_Counter
 15730  15B5                     l6437:	
 15731  15B5  0020               	movlb	0	; select bank0
 15732  15B6  1D0E               	btfss	14,2	;volatile
 15733  15B7  2DBB               	goto	l6441
 15734  15B8  0021               	movlb	1	; select bank1
 15735  15B9  1D2F               	btfss	(_myMain^(0+128)+15),2
 15736  15BA  2DB2               	goto	l6435
 15737  15BB                     l6441:	
 15738                           
 15739                           ;CC2500_B1.c: 142: };
 15740                           ;CC2500_B1.c: 143: set_TimeoutCleared();
 15741  15BB  319E  2616         	fcall	_set_TimeoutCleared
 15742                           
 15743                           ;CC2500_B1.c: 144: RC0 = 0;
 15744  15BD  0020               	movlb	0	; select bank0
 15745  15BE  100E               	bcf	14,0	;volatile
 15746                           
 15747                           ;CC2500_B1.c: 145: RC4 = 1;
 15748  15BF  160E               	bsf	14,4	;volatile
 15749  15C0  0008               	return
 15750  15C1                     __end_of_CC2500_PowerRST:	
 15751                           
 15752                           	psect	text111
 15753  1313                     __ptext111:	
 15754 ;; *************** function _CC2500_InitSetREG *****************
 15755 ;; Defined at:
 15756 ;;		line 151 in file "../src/CC2500_B1.c"
 15757 ;; Parameters:    Size  Location     Type
 15758 ;;		None
 15759 ;; Auto vars:     Size  Location     Type
 15760 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15761 ;;  temp2           1    7[BANK0 ] unsigned char 
 15762 ;;  temp1           1    6[BANK0 ] unsigned char 
 15763 ;; Return value:  Size  Location     Type
 15764 ;;		None               void
 15765 ;; Registers used:
 15766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15767 ;; Tracked objects:
 15768 ;;		On entry : 0/0
 15769 ;;		On exit  : 0/0
 15770 ;;		Unchanged: 0/0
 15771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15774 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;Total ram usage:        4 bytes
 15777 ;; Hardware stack levels used:    1
 15778 ;; Hardware stack levels required when called:    7
 15779 ;; This function calls:
 15780 ;;		_CC2500_WriteREG
 15781 ;; This function is called by:
 15782 ;;		_CC2500_PowerOnInitial
 15783 ;; This function uses a non-reentrant model
 15784 ;;
 15785                           
 15786                           
 15787                           ;psect for function _CC2500_InitSetREG
 15788  1313                     _CC2500_InitSetREG:	
 15789                           
 15790                           ;CC2500_B1.c: 152: unsigned char loop_c;
 15791                           ;CC2500_B1.c: 153: unsigned char temp1, temp2;
 15792                           ;CC2500_B1.c: 155: for (loop_c = 0; loop_c < 47; loop_c++) {
 15793                           
 15794                           ;incstack = 0
 15795                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15796  1313  0020               	movlb	0	; select bank0
 15797  1314  01A8               	clrf	CC2500_InitSetREG@loop_c
 15798  1315                     L5:	
 15799  1315  302F               	movlw	47
 15800  1316  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15801  1317  1803               	btfsc	3,0
 15802  1318  0008               	return
 15803                           
 15804                           ;CC2500_B1.c: 156: temp1 = CC2500_registers_address[loop_c];
 15805  1319  0828               	movf	CC2500_InitSetREG@loop_c,w
 15806  131A  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15807  131B  0084               	movwf	4
 15808  131C  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15809  131D  1803               	skipnc
 15810  131E  3E01               	addlw	1
 15811  131F  0085               	movwf	5
 15812  1320  0800               	movf	0,w	;code access
 15813  1321  00A5               	movwf	??_CC2500_InitSetREG
 15814  1322  0825               	movf	??_CC2500_InitSetREG,w
 15815  1323  00A6               	movwf	CC2500_InitSetREG@temp1
 15816                           
 15817                           ;CC2500_B1.c: 157: temp2 = CC2500_rfSettings[loop_c];
 15818  1324  0828               	movf	CC2500_InitSetREG@loop_c,w
 15819  1325  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15820  1326  0084               	movwf	4
 15821  1327  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15822  1328  1803               	skipnc
 15823  1329  3E01               	addlw	1
 15824  132A  0085               	movwf	5
 15825  132B  0800               	movf	0,w	;code access
 15826  132C  00A5               	movwf	??_CC2500_InitSetREG
 15827  132D  0825               	movf	??_CC2500_InitSetREG,w
 15828  132E  00A7               	movwf	CC2500_InitSetREG@temp2
 15829                           
 15830                           ;CC2500_B1.c: 159: CC2500_WriteREG(temp1, temp2);
 15831  132F  0827               	movf	CC2500_InitSetREG@temp2,w
 15832  1330  00A5               	movwf	??_CC2500_InitSetREG
 15833  1331  0825               	movf	??_CC2500_InitSetREG,w
 15834  1332  00A2               	movwf	CC2500_WriteREG@value
 15835  1333  0826               	movf	CC2500_InitSetREG@temp1,w
 15836  1334  3191  21F9  3193   	fcall	_CC2500_WriteREG
 15837  1337  3001               	movlw	1
 15838  1338  0020               	movlb	0	; select bank0
 15839  1339  00A5               	movwf	??_CC2500_InitSetREG
 15840  133A  0825               	movf	??_CC2500_InitSetREG,w
 15841  133B  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15842  133C  2B15               	goto	L5
 15843  133D                     __end_of_CC2500_InitSetREG:	
 15844                           
 15845                           	psect	text112
 15846  117B                     __ptext112:	
 15847 ;; *************** function _CC2500_InitPATable *****************
 15848 ;; Defined at:
 15849 ;;		line 166 in file "../src/CC2500_B1.c"
 15850 ;; Parameters:    Size  Location     Type
 15851 ;;		None
 15852 ;; Auto vars:     Size  Location     Type
 15853 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15854 ;;  temp            1    6[BANK0 ] unsigned char 
 15855 ;; Return value:  Size  Location     Type
 15856 ;;		None               void
 15857 ;; Registers used:
 15858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15859 ;; Tracked objects:
 15860 ;;		On entry : 0/0
 15861 ;;		On exit  : 0/0
 15862 ;;		Unchanged: 0/0
 15863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;Total ram usage:        3 bytes
 15869 ;; Hardware stack levels used:    1
 15870 ;; Hardware stack levels required when called:    7
 15871 ;; This function calls:
 15872 ;;		_CC2500_WriteREG
 15873 ;; This function is called by:
 15874 ;;		_CC2500_PowerOnInitial
 15875 ;; This function uses a non-reentrant model
 15876 ;;
 15877                           
 15878                           
 15879                           ;psect for function _CC2500_InitPATable
 15880  117B                     _CC2500_InitPATable:	
 15881                           
 15882                           ;CC2500_B1.c: 167: unsigned char loop_d;
 15883                           ;CC2500_B1.c: 168: unsigned char temp;
 15884                           ;CC2500_B1.c: 170: for (loop_d = 0; loop_d < 8; loop_d++) {
 15885                           
 15886                           ;incstack = 0
 15887                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15888  117B  0020               	movlb	0	; select bank0
 15889  117C  01A7               	clrf	CC2500_InitPATable@loop_d
 15890  117D                     L6:	
 15891  117D  3008               	movlw	8
 15892  117E  0227               	subwf	CC2500_InitPATable@loop_d,w
 15893  117F  1803               	btfsc	3,0
 15894  1180  0008               	return
 15895                           
 15896                           ;CC2500_B1.c: 171: temp = CC2500_patable_vaule[loop_d];
 15897  1181  0827               	movf	CC2500_InitPATable@loop_d,w
 15898  1182  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15899  1183  0084               	movwf	4
 15900  1184  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15901  1185  1803               	skipnc
 15902  1186  3E01               	addlw	1
 15903  1187  0085               	movwf	5
 15904  1188  0800               	movf	0,w	;code access
 15905  1189  00A5               	movwf	??_CC2500_InitPATable
 15906  118A  0825               	movf	??_CC2500_InitPATable,w
 15907  118B  00A6               	movwf	CC2500_InitPATable@temp
 15908                           
 15909                           ;CC2500_B1.c: 172: CC2500_WriteREG(0x3E, temp);
 15910  118C  0826               	movf	CC2500_InitPATable@temp,w
 15911  118D  00A5               	movwf	??_CC2500_InitPATable
 15912  118E  0825               	movf	??_CC2500_InitPATable,w
 15913  118F  00A2               	movwf	CC2500_WriteREG@value
 15914  1190  303E               	movlw	62
 15915  1191  3191  21F9  3191   	fcall	_CC2500_WriteREG
 15916  1194  3001               	movlw	1
 15917  1195  0020               	movlb	0	; select bank0
 15918  1196  00A5               	movwf	??_CC2500_InitPATable
 15919  1197  0825               	movf	??_CC2500_InitPATable,w
 15920  1198  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15921  1199  297D               	goto	L6
 15922  119A                     __end_of_CC2500_InitPATable:	
 15923                           
 15924                           	psect	text113
 15925  11F9                     __ptext113:	
 15926 ;; *************** function _CC2500_WriteREG *****************
 15927 ;; Defined at:
 15928 ;;		line 243 in file "../src/CC2500_B1.c"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;  w_addr          1    wreg     unsigned char 
 15931 ;;  value           1    2[BANK0 ] unsigned char 
 15932 ;; Auto vars:     Size  Location     Type
 15933 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15934 ;; Return value:  Size  Location     Type
 15935 ;;		None               void
 15936 ;; Registers used:
 15937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15938 ;; Tracked objects:
 15939 ;;		On entry : 0/0
 15940 ;;		On exit  : 0/0
 15941 ;;		Unchanged: 0/0
 15942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15943 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;Total ram usage:        3 bytes
 15948 ;; Hardware stack levels used:    1
 15949 ;; Hardware stack levels required when called:    6
 15950 ;; This function calls:
 15951 ;;		_CC2500_WriteByte
 15952 ;;		_Timeout_Counter
 15953 ;;		_set_TimeoutCleared
 15954 ;; This function is called by:
 15955 ;;		_CC2500_InitSetREG
 15956 ;;		_CC2500_InitPATable
 15957 ;; This function uses a non-reentrant model
 15958 ;;
 15959                           
 15960                           
 15961                           ;psect for function _CC2500_WriteREG
 15962  11F9                     _CC2500_WriteREG:	
 15963                           
 15964                           ;incstack = 0
 15965                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15966                           ;CC2500_WriteREG@w_addr stored from wreg
 15967  11F9  0020               	movlb	0	; select bank0
 15968  11FA  00A4               	movwf	CC2500_WriteREG@w_addr
 15969                           
 15970                           ;CC2500_B1.c: 244: RC4 = 0;
 15971  11FB  120E               	bcf	14,4	;volatile
 15972                           
 15973                           ;CC2500_B1.c: 245: SPI0Buffer = w_addr;
 15974  11FC  0824               	movf	CC2500_WriteREG@w_addr,w
 15975  11FD  00A3               	movwf	??_CC2500_WriteREG
 15976  11FE  0823               	movf	??_CC2500_WriteREG,w
 15977  11FF  00FB               	movwf	_SPI0Buffer
 15978                           
 15979                           ;CC2500_B1.c: 246: while (RC2 == 1 && myMain.Timeout == 0) {
 15980  1200  2A04               	goto	l6175
 15981  1201                     l6173:	
 15982                           
 15983                           ;CC2500_B1.c: 247: Timeout_Counter();
 15984  1201  3190  20F8  3191   	fcall	_Timeout_Counter
 15985  1204                     l6175:	
 15986  1204  0020               	movlb	0	; select bank0
 15987  1205  1D0E               	btfss	14,2	;volatile
 15988  1206  2A0A               	goto	l6179
 15989  1207  0021               	movlb	1	; select bank1
 15990  1208  1D2F               	btfss	(_myMain^(0+128)+15),2
 15991  1209  2A01               	goto	l6173
 15992  120A                     l6179:	
 15993                           
 15994                           ;CC2500_B1.c: 248: };
 15995                           ;CC2500_B1.c: 249: set_TimeoutCleared();
 15996  120A  319E  2616  3191   	fcall	_set_TimeoutCleared
 15997                           
 15998                           ;CC2500_B1.c: 250: CC2500_WriteByte();
 15999  120D  3190  208E  3191   	fcall	_CC2500_WriteByte
 16000                           
 16001                           ;CC2500_B1.c: 251: SPI0Buffer = value;
 16002  1210  0020               	movlb	0	; select bank0
 16003  1211  0822               	movf	CC2500_WriteREG@value,w
 16004  1212  00A3               	movwf	??_CC2500_WriteREG
 16005  1213  0823               	movf	??_CC2500_WriteREG,w
 16006  1214  00FB               	movwf	_SPI0Buffer
 16007                           
 16008                           ;CC2500_B1.c: 252: CC2500_WriteByte();
 16009  1215  3190  208E         	fcall	_CC2500_WriteByte
 16010                           
 16011                           ;CC2500_B1.c: 253: RC4 = 1;
 16012  1217  0020               	movlb	0	; select bank0
 16013  1218  160E               	bsf	14,4	;volatile
 16014  1219  0008               	return
 16015  121A                     __end_of_CC2500_WriteREG:	
 16016                           
 16017                           	psect	text114
 16018  1ED2                     __ptext114:	
 16019 ;; *************** function _CC2500_FrequencyCabr *****************
 16020 ;; Defined at:
 16021 ;;		line 193 in file "../src/CC2500_B1.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;		None
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;		None
 16026 ;; Return value:  Size  Location     Type
 16027 ;;		None               void
 16028 ;; Registers used:
 16029 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;Total ram usage:        0 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:    7
 16042 ;; This function calls:
 16043 ;;		_CC2500_WriteCommand
 16044 ;;		_DelayTime_1us
 16045 ;; This function is called by:
 16046 ;;		_CC2500_PowerOnInitial
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           
 16051                           ;psect for function _CC2500_FrequencyCabr
 16052  1ED2                     _CC2500_FrequencyCabr:	
 16053                           
 16054                           ;CC2500_B1.c: 194: CC2500_WriteCommand(0x33);
 16055                           
 16056                           ;incstack = 0
 16057                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16058  1ED2  3033               	movlw	51
 16059  1ED3  3191  2110  319E   	fcall	_CC2500_WriteCommand
 16060                           
 16061                           ;CC2500_B1.c: 195: DelayTime_1us(1000);
 16062  1ED6  30E8               	movlw	232
 16063  1ED7  0020               	movlb	0	; select bank0
 16064  1ED8  00A0               	movwf	DelayTime_1us@count
 16065  1ED9  3003               	movlw	3
 16066  1EDA  00A1               	movwf	DelayTime_1us@count+1
 16067  1EDB  3192  22C6         	fcall	_DelayTime_1us
 16068  1EDD  0008               	return
 16069  1EDE                     __end_of_CC2500_FrequencyCabr:	
 16070                           
 16071                           	psect	text115
 16072  12C6                     __ptext115:	
 16073 ;; *************** function _DelayTime_1us *****************
 16074 ;; Defined at:
 16075 ;;		line 308 in file "../src/CC2500_B1.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  count           2    0[BANK0 ] int 
 16078 ;; Auto vars:     Size  Location     Type
 16079 ;;  j               2    4[BANK0 ] unsigned int 
 16080 ;;  i               2    2[BANK0 ] unsigned int 
 16081 ;; Return value:  Size  Location     Type
 16082 ;;		None               void
 16083 ;; Registers used:
 16084 ;;		wreg, status,2
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        6 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:    5
 16097 ;; This function calls:
 16098 ;;		Nothing
 16099 ;; This function is called by:
 16100 ;;		_CC2500_PowerRST
 16101 ;;		_CC2500_FrequencyCabr
 16102 ;; This function uses a non-reentrant model
 16103 ;;
 16104                           
 16105                           
 16106                           ;psect for function _DelayTime_1us
 16107  12C6                     _DelayTime_1us:	
 16108                           
 16109                           ;CC2500_B1.c: 309: unsigned int i, j;
 16110                           ;CC2500_B1.c: 310: for (i = 1; i < count; i++)
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16114  12C6  3001               	movlw	1
 16115  12C7  0020               	movlb	0	; select bank0
 16116  12C8  00A2               	movwf	DelayTime_1us@i
 16117  12C9  3000               	movlw	0
 16118  12CA  00A3               	movwf	DelayTime_1us@i+1
 16119  12CB                     l360:	
 16120  12CB  0821               	movf	DelayTime_1us@count+1,w
 16121  12CC  0223               	subwf	DelayTime_1us@i+1,w
 16122  12CD  1D03               	skipz
 16123  12CE  2AD1               	goto	u5075
 16124  12CF  0820               	movf	DelayTime_1us@count,w
 16125  12D0  0222               	subwf	DelayTime_1us@i,w
 16126  12D1                     u5075:	
 16127  12D1  1803               	btfsc	3,0
 16128  12D2  0008               	return
 16129                           
 16130                           ;CC2500_B1.c: 311: for (j = 0; j <= 1; j++);
 16131  12D3  01A4               	clrf	DelayTime_1us@j
 16132  12D4  01A5               	clrf	DelayTime_1us@j+1
 16133  12D5  3000               	movlw	0
 16134  12D6  0225               	subwf	DelayTime_1us@j+1,w
 16135  12D7  3002               	movlw	2
 16136  12D8  1903               	skipnz
 16137  12D9  0224               	subwf	DelayTime_1us@j,w
 16138  12DA  1803               	btfsc	3,0
 16139  12DB  2AE7               	goto	l6167
 16140  12DC                     l6165:	
 16141  12DC  3001               	movlw	1
 16142  12DD  07A4               	addwf	DelayTime_1us@j,f
 16143  12DE  3000               	movlw	0
 16144  12DF  3DA5               	addwfc	DelayTime_1us@j+1,f
 16145  12E0  3000               	movlw	0
 16146  12E1  0225               	subwf	DelayTime_1us@j+1,w
 16147  12E2  3002               	movlw	2
 16148  12E3  1903               	skipnz
 16149  12E4  0224               	subwf	DelayTime_1us@j,w
 16150  12E5  1C03               	skipc
 16151  12E6  2ADC               	goto	l6165
 16152  12E7                     l6167:	
 16153  12E7  3001               	movlw	1
 16154  12E8  07A2               	addwf	DelayTime_1us@i,f
 16155  12E9  3000               	movlw	0
 16156  12EA  3DA3               	addwfc	DelayTime_1us@i+1,f
 16157  12EB  2ACB               	goto	l360
 16158  12EC                     __end_of_DelayTime_1us:	
 16159                           
 16160                           	psect	text116
 16161  1DFA                     __ptext116:	
 16162 ;; *************** function _CC2500_ClearTXFIFO *****************
 16163 ;; Defined at:
 16164 ;;		line 179 in file "../src/CC2500_B1.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;		None
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;		None
 16169 ;; Return value:  Size  Location     Type
 16170 ;;		None               void
 16171 ;; Registers used:
 16172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16173 ;; Tracked objects:
 16174 ;;		On entry : 0/0
 16175 ;;		On exit  : 0/0
 16176 ;;		Unchanged: 0/0
 16177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;Total ram usage:        0 bytes
 16183 ;; Hardware stack levels used:    1
 16184 ;; Hardware stack levels required when called:    7
 16185 ;; This function calls:
 16186 ;;		_CC2500_WriteCommand
 16187 ;; This function is called by:
 16188 ;;		_CC2500_PowerOnInitial
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           
 16193                           ;psect for function _CC2500_ClearTXFIFO
 16194  1DFA                     _CC2500_ClearTXFIFO:	
 16195                           
 16196                           ;CC2500_B1.c: 180: CC2500_WriteCommand(0x3B);
 16197                           
 16198                           ;incstack = 0
 16199                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16200  1DFA  303B               	movlw	59
 16201  1DFB  3191  2110         	fcall	_CC2500_WriteCommand
 16202  1DFD  0008               	return
 16203  1DFE                     __end_of_CC2500_ClearTXFIFO:	
 16204                           
 16205                           	psect	text117
 16206  1DF6                     __ptext117:	
 16207 ;; *************** function _CC2500_ClearRXFIFO *****************
 16208 ;; Defined at:
 16209 ;;		line 186 in file "../src/CC2500_B1.c"
 16210 ;; Parameters:    Size  Location     Type
 16211 ;;		None
 16212 ;; Auto vars:     Size  Location     Type
 16213 ;;		None
 16214 ;; Return value:  Size  Location     Type
 16215 ;;		None               void
 16216 ;; Registers used:
 16217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16218 ;; Tracked objects:
 16219 ;;		On entry : 0/0
 16220 ;;		On exit  : 0/0
 16221 ;;		Unchanged: 0/0
 16222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;Total ram usage:        0 bytes
 16228 ;; Hardware stack levels used:    1
 16229 ;; Hardware stack levels required when called:    7
 16230 ;; This function calls:
 16231 ;;		_CC2500_WriteCommand
 16232 ;; This function is called by:
 16233 ;;		_CC2500_PowerOnInitial
 16234 ;; This function uses a non-reentrant model
 16235 ;;
 16236                           
 16237                           
 16238                           ;psect for function _CC2500_ClearRXFIFO
 16239  1DF6                     _CC2500_ClearRXFIFO:	
 16240                           
 16241                           ;CC2500_B1.c: 187: CC2500_WriteCommand(0x3A);
 16242                           
 16243                           ;incstack = 0
 16244                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16245  1DF6  303A               	movlw	58
 16246  1DF7  3191  2110         	fcall	_CC2500_WriteCommand
 16247  1DF9  0008               	return
 16248  1DFA                     __end_of_CC2500_ClearRXFIFO:	
 16249                           
 16250                           	psect	text118
 16251  1110                     __ptext118:	
 16252 ;; *************** function _CC2500_WriteCommand *****************
 16253 ;; Defined at:
 16254 ;;		line 275 in file "../src/CC2500_B1.c"
 16255 ;; Parameters:    Size  Location     Type
 16256 ;;  command         1    wreg     unsigned char 
 16257 ;; Auto vars:     Size  Location     Type
 16258 ;;  command         1    3[BANK0 ] unsigned char 
 16259 ;; Return value:  Size  Location     Type
 16260 ;;		None               void
 16261 ;; Registers used:
 16262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16263 ;; Tracked objects:
 16264 ;;		On entry : 0/0
 16265 ;;		On exit  : 0/0
 16266 ;;		Unchanged: 0/0
 16267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;Total ram usage:        2 bytes
 16273 ;; Hardware stack levels used:    1
 16274 ;; Hardware stack levels required when called:    6
 16275 ;; This function calls:
 16276 ;;		_CC2500_WriteByte
 16277 ;;		_Timeout_Counter
 16278 ;;		_set_TimeoutCleared
 16279 ;; This function is called by:
 16280 ;;		_CC2500_TxData
 16281 ;;		_CC2500_RxData
 16282 ;;		_CC2500_ClearTXFIFO
 16283 ;;		_CC2500_ClearRXFIFO
 16284 ;;		_CC2500_FrequencyCabr
 16285 ;;		_CC2500_SIDLEMode
 16286 ;;		_setRF_Main
 16287 ;;		_RF_RxDisable
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           
 16292                           ;psect for function _CC2500_WriteCommand
 16293  1110                     _CC2500_WriteCommand:	
 16294                           
 16295                           ;incstack = 0
 16296                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16297                           ;CC2500_WriteCommand@command stored from wreg
 16298  1110  0020               	movlb	0	; select bank0
 16299  1111  00A3               	movwf	CC2500_WriteCommand@command
 16300                           
 16301                           ;CC2500_B1.c: 276: RC4 = 0;
 16302  1112  120E               	bcf	14,4	;volatile
 16303                           
 16304                           ;CC2500_B1.c: 277: SPI0Buffer = command;
 16305  1113  0823               	movf	CC2500_WriteCommand@command,w
 16306  1114  00A2               	movwf	??_CC2500_WriteCommand
 16307  1115  0822               	movf	??_CC2500_WriteCommand,w
 16308  1116  00FB               	movwf	_SPI0Buffer
 16309                           
 16310                           ;CC2500_B1.c: 279: while (RC2 == 1 && myMain.Timeout == 0) {
 16311  1117  291B               	goto	l5913
 16312  1118                     l5911:	
 16313                           
 16314                           ;CC2500_B1.c: 280: Timeout_Counter();
 16315  1118  3190  20F8  3191   	fcall	_Timeout_Counter
 16316  111B                     l5913:	
 16317  111B  0020               	movlb	0	; select bank0
 16318  111C  1D0E               	btfss	14,2	;volatile
 16319  111D  2921               	goto	l5917
 16320  111E  0021               	movlb	1	; select bank1
 16321  111F  1D2F               	btfss	(_myMain^(0+128)+15),2
 16322  1120  2918               	goto	l5911
 16323  1121                     l5917:	
 16324                           
 16325                           ;CC2500_B1.c: 281: };
 16326                           ;CC2500_B1.c: 282: set_TimeoutCleared();
 16327  1121  319E  2616  3191   	fcall	_set_TimeoutCleared
 16328                           
 16329                           ;CC2500_B1.c: 283: CC2500_WriteByte();
 16330  1124  3190  208E         	fcall	_CC2500_WriteByte
 16331                           
 16332                           ;CC2500_B1.c: 284: RC4 = 1;
 16333  1126  0020               	movlb	0	; select bank0
 16334  1127  160E               	bsf	14,4	;volatile
 16335  1128  0008               	return
 16336  1129                     __end_of_CC2500_WriteCommand:	
 16337                           
 16338                           	psect	text119
 16339  1E16                     __ptext119:	
 16340 ;; *************** function _set_TimeoutCleared *****************
 16341 ;; Defined at:
 16342 ;;		line 218 in file "../src/main_B1.c"
 16343 ;; Parameters:    Size  Location     Type
 16344 ;;		None
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;		None
 16347 ;; Return value:  Size  Location     Type
 16348 ;;		None               void
 16349 ;; Registers used:
 16350 ;;		status,2
 16351 ;; Tracked objects:
 16352 ;;		On entry : 0/0
 16353 ;;		On exit  : 0/0
 16354 ;;		Unchanged: 0/0
 16355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;Total ram usage:        0 bytes
 16361 ;; Hardware stack levels used:    1
 16362 ;; Hardware stack levels required when called:    5
 16363 ;; This function calls:
 16364 ;;		Nothing
 16365 ;; This function is called by:
 16366 ;;		_CC2500_TxData
 16367 ;;		_CC2500_RxData
 16368 ;;		_CC2500_PowerRST
 16369 ;;		_CC2500_WriteREG
 16370 ;;		_CC2500_WriteCommand
 16371 ;;		_CC2500_ReadStatus
 16372 ;;		_getAD
 16373 ;;		_TouchPower
 16374 ;;		_CC2500_ReadREG
 16375 ;; This function uses a non-reentrant model
 16376 ;;
 16377                           
 16378                           
 16379                           ;psect for function _set_TimeoutCleared
 16380  1E16                     _set_TimeoutCleared:	
 16381                           
 16382                           ;main_B1.c: 219: myMain.Timeout = 0;
 16383                           
 16384                           ;incstack = 0
 16385                           ; Regs used in _set_TimeoutCleared: [status,2]
 16386  1E16  0021               	movlb	1	; select bank1
 16387  1E17  112F               	bcf	(_myMain^(0+128)+15),2
 16388                           
 16389                           ;main_B1.c: 220: myMain.Timeout_Counter = 0;
 16390  1E18  01B0               	clrf	(_myMain^(0+128)+16)
 16391  1E19  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16392  1E1A  0008               	return
 16393  1E1B                     __end_of_set_TimeoutCleared:	
 16394                           
 16395                           	psect	text120
 16396  10F8                     __ptext120:	
 16397 ;; *************** function _Timeout_Counter *****************
 16398 ;; Defined at:
 16399 ;;		line 209 in file "../src/main_B1.c"
 16400 ;; Parameters:    Size  Location     Type
 16401 ;;		None
 16402 ;; Auto vars:     Size  Location     Type
 16403 ;;		None
 16404 ;; Return value:  Size  Location     Type
 16405 ;;		None               void
 16406 ;; Registers used:
 16407 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16408 ;; Tracked objects:
 16409 ;;		On entry : 0/0
 16410 ;;		On exit  : 0/0
 16411 ;;		Unchanged: 0/0
 16412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;Total ram usage:        0 bytes
 16418 ;; Hardware stack levels used:    1
 16419 ;; Hardware stack levels required when called:    5
 16420 ;; This function calls:
 16421 ;;		Nothing
 16422 ;; This function is called by:
 16423 ;;		_CC2500_TxData
 16424 ;;		_CC2500_RxData
 16425 ;;		_CC2500_PowerRST
 16426 ;;		_CC2500_WriteREG
 16427 ;;		_CC2500_WriteCommand
 16428 ;;		_CC2500_ReadStatus
 16429 ;;		_getAD
 16430 ;;		_TouchPower
 16431 ;;		_CC2500_ReadREG
 16432 ;; This function uses a non-reentrant model
 16433 ;;
 16434                           
 16435                           
 16436                           ;psect for function _Timeout_Counter
 16437  10F8                     _Timeout_Counter:	
 16438                           
 16439                           ;main_B1.c: 210: myMain.Timeout_Counter++;
 16440                           
 16441                           ;incstack = 0
 16442                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16443  10F8  3001               	movlw	1
 16444  10F9  0021               	movlb	1	; select bank1
 16445  10FA  07B0               	addwf	(_myMain^(0+128)+16),f
 16446  10FB  3000               	movlw	0
 16447  10FC  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16448                           
 16449                           ;main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 16450  10FD  3010               	movlw	16
 16451  10FE  3EA0               	addlw	_myMain& (0+255)
 16452  10FF  0086               	movwf	6
 16453  1100  0187               	clrf	7
 16454  1101  3F40               	moviw [0]fsr1
 16455  1102  3A10               	xorlw	16
 16456  1103  1D03               	skipz
 16457  1104  2907               	goto	u4615
 16458  1105  3F41               	moviw [1]fsr1
 16459  1106  3A27               	xorlw	39
 16460  1107                     u4615:	
 16461  1107  1D03               	skipz
 16462  1108  0008               	return
 16463                           
 16464                           ;main_B1.c: 212: myMain.Timeout_Counter = 0;
 16465  1109  01B0               	clrf	(_myMain^(0+128)+16)
 16466  110A  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16467                           
 16468                           ;main_B1.c: 213: myMain.Timeout = 1;
 16469  110B  152F               	bsf	(_myMain^(0+128)+15),2
 16470                           
 16471                           ;main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 16472  110C  3020               	movlw	32
 16473  110D  0020               	movlb	0	; select bank0
 16474  110E  068D               	xorwf	13,f
 16475  110F  0008               	return
 16476  1110                     __end_of_Timeout_Counter:	
 16477                           
 16478                           	psect	text121
 16479  108E                     __ptext121:	
 16480 ;; *************** function _CC2500_WriteByte *****************
 16481 ;; Defined at:
 16482 ;;		line 211 in file "../src/CC2500_B1.c"
 16483 ;; Parameters:    Size  Location     Type
 16484 ;;		None
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16487 ;; Return value:  Size  Location     Type
 16488 ;;		None               void
 16489 ;; Registers used:
 16490 ;;		wreg, status,2, status,0
 16491 ;; Tracked objects:
 16492 ;;		On entry : 0/0
 16493 ;;		On exit  : 0/0
 16494 ;;		Unchanged: 0/0
 16495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;Total ram usage:        2 bytes
 16501 ;; Hardware stack levels used:    1
 16502 ;; Hardware stack levels required when called:    5
 16503 ;; This function calls:
 16504 ;;		Nothing
 16505 ;; This function is called by:
 16506 ;;		_CC2500_TxData
 16507 ;;		_CC2500_RxData
 16508 ;;		_CC2500_PowerRST
 16509 ;;		_CC2500_WriteREG
 16510 ;;		_CC2500_WriteCommand
 16511 ;;		_CC2500_ReadStatus
 16512 ;;		_CC2500_ReadREG
 16513 ;; This function uses a non-reentrant model
 16514 ;;
 16515                           
 16516                           
 16517                           ;psect for function _CC2500_WriteByte
 16518  108E                     _CC2500_WriteByte:	
 16519                           
 16520                           ;CC2500_B1.c: 212: unsigned char loop_a;
 16521                           ;CC2500_B1.c: 213: for (loop_a = 0; loop_a < 8; loop_a++) {
 16522                           
 16523                           ;incstack = 0
 16524                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16525  108E  0020               	movlb	0	; select bank0
 16526  108F  01A1               	clrf	CC2500_WriteByte@loop_a
 16527  1090                     L7:	
 16528  1090  3008               	movlw	8
 16529  1091  0221               	subwf	CC2500_WriteByte@loop_a,w
 16530  1092  1803               	btfsc	3,0
 16531  1093  0008               	return
 16532                           
 16533                           ;CC2500_B1.c: 214: if (SPI0Buffer & 0x80)
 16534  1094  1FFB               	btfss	_SPI0Buffer,7
 16535  1095  2898               	goto	l316
 16536                           
 16537                           ;CC2500_B1.c: 215: RC0 = 1;
 16538  1096  140E               	bsf	14,0	;volatile
 16539  1097  2899               	goto	l317
 16540  1098                     l316:	
 16541                           
 16542                           ;CC2500_B1.c: 216: else
 16543                           ;CC2500_B1.c: 217: RC0 = 0;
 16544  1098  100E               	bcf	14,0	;volatile
 16545  1099                     l317:	
 16546                           
 16547                           ;CC2500_B1.c: 218: RC1 = 1;
 16548  1099  148E               	bsf	14,1	;volatile
 16549                           
 16550                           ;CC2500_B1.c: 219: SPI0Buffer <<= 1;
 16551  109A  1003               	clrc
 16552  109B  0DFB               	rlf	_SPI0Buffer,f
 16553                           
 16554                           ;CC2500_B1.c: 220: RC1 = 0;
 16555  109C  108E               	bcf	14,1	;volatile
 16556  109D  3001               	movlw	1
 16557  109E  00A0               	movwf	??_CC2500_WriteByte
 16558  109F  0820               	movf	??_CC2500_WriteByte,w
 16559  10A0  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16560  10A1  2890               	goto	L7
 16561  10A2                     __end_of_CC2500_WriteByte:	
 16562                           
 16563                           	psect	text122
 16564  1766                     __ptext122:	
 16565 ;; *************** function _Buzzer_Main *****************
 16566 ;; Defined at:
 16567 ;;		line 46 in file "../src/Buzzer_B1.c"
 16568 ;; Parameters:    Size  Location     Type
 16569 ;;		None
 16570 ;; Auto vars:     Size  Location     Type
 16571 ;;		None
 16572 ;; Return value:  Size  Location     Type
 16573 ;;		None               void
 16574 ;; Registers used:
 16575 ;;		wreg, status,2, status,0
 16576 ;; Tracked objects:
 16577 ;;		On entry : 0/0
 16578 ;;		On exit  : 0/0
 16579 ;;		Unchanged: 0/0
 16580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16584 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16585 ;;Total ram usage:        1 bytes
 16586 ;; Hardware stack levels used:    1
 16587 ;; Hardware stack levels required when called:    5
 16588 ;; This function calls:
 16589 ;;		Nothing
 16590 ;; This function is called by:
 16591 ;;		_main
 16592 ;; This function uses a non-reentrant model
 16593 ;;
 16594                           
 16595                           
 16596                           ;psect for function _Buzzer_Main
 16597  1766                     _Buzzer_Main:	
 16598                           
 16599                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16600                           
 16601                           ;incstack = 0
 16602                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16603  1766  0021               	movlb	1	; select bank1
 16604  1767  1CB2               	btfss	_Buz1^(0+128),1
 16605  1768  0008               	return
 16606                           
 16607                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16608  1769  3001               	movlw	1
 16609  176A  07B3               	addwf	(_Buz1^(0+128)+1),f
 16610  176B  3000               	movlw	0
 16611  176C  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16612                           
 16613                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16614  176D  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16615  176E  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16616  176F  1D03               	skipz
 16617  1770  2F73               	goto	u6555
 16618  1771  0838               	movf	(_Buz1^(0+128)+6),w
 16619  1772  0233               	subwf	(_Buz1^(0+128)+1),w
 16620  1773                     u6555:	
 16621  1773  1C03               	skipc
 16622  1774  0008               	return
 16623                           
 16624                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16625  1775  01B3               	clrf	(_Buz1^(0+128)+1)
 16626  1776  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16627                           
 16628                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16629  1777  12B2               	bcf	_Buz1^(0+128),5
 16630  1778  0020               	movlb	0	; select bank0
 16631  1779  1D8D               	btfss	13,3	;volatile
 16632  177A  2F7D               	goto	l7085
 16633  177B  0021               	movlb	1	; select bank1
 16634  177C  16B2               	bsf	_Buz1^(0+128),5
 16635  177D                     l7085:	
 16636                           
 16637                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16638  177D  0021               	movlb	1	; select bank1
 16639  177E  1AB2               	btfsc	_Buz1^(0+128),5
 16640  177F  2FA9               	goto	l100
 16641                           
 16642                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16643  1780  08B5               	movf	(_Buz1^(0+128)+3),f
 16644  1781  1D03               	skipz
 16645  1782  2FA5               	goto	l101
 16646                           
 16647                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16648  1783  1DB2               	btfss	_Buz1^(0+128),3
 16649  1784  2F93               	goto	l102
 16650                           
 16651                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16652  1785  11B2               	bcf	_Buz1^(0+128),3
 16653                           
 16654                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16655  1786  0836               	movf	(_Buz1^(0+128)+4),w
 16656  1787  0020               	movlb	0	; select bank0
 16657  1788  00A0               	movwf	??_Buzzer_Main
 16658  1789  0820               	movf	??_Buzzer_Main,w
 16659  178A  0021               	movlb	1	; select bank1
 16660  178B  00B5               	movwf	(_Buz1^(0+128)+3)
 16661                           
 16662                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16663  178C  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16664  178D  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16665  178E  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16666  178F  083A               	movf	(_Buz1^(0+128)+8),w
 16667  1790  01B8               	clrf	(_Buz1^(0+128)+6)
 16668  1791  07B8               	addwf	(_Buz1^(0+128)+6),f
 16669                           
 16670                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16671  1792  0008               	return
 16672  1793                     l102:	
 16673  1793  1E32               	btfss	_Buz1^(0+128),4
 16674  1794  2FA3               	goto	l104
 16675                           
 16676                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16677  1795  1232               	bcf	_Buz1^(0+128),4
 16678                           
 16679                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16680  1796  0837               	movf	(_Buz1^(0+128)+5),w
 16681  1797  0020               	movlb	0	; select bank0
 16682  1798  00A0               	movwf	??_Buzzer_Main
 16683  1799  0820               	movf	??_Buzzer_Main,w
 16684  179A  0021               	movlb	1	; select bank1
 16685  179B  00B5               	movwf	(_Buz1^(0+128)+3)
 16686                           
 16687                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16688  179C  083D               	movf	((_Buz1+1)^(0+128)+10),w
 16689  179D  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16690  179E  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16691  179F  083C               	movf	(_Buz1^(0+128)+10),w
 16692  17A0  01B8               	clrf	(_Buz1^(0+128)+6)
 16693  17A1  07B8               	addwf	(_Buz1^(0+128)+6),f
 16694                           
 16695                           ;Buzzer_B1.c: 62: } else {
 16696  17A2  0008               	return
 16697  17A3                     l104:	
 16698                           
 16699                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16700  17A3  10B2               	bcf	_Buz1^(0+128),1
 16701                           
 16702                           ;Buzzer_B1.c: 64: }
 16703                           ;Buzzer_B1.c: 65: } else {
 16704  17A4  0008               	return
 16705  17A5                     l101:	
 16706                           
 16707                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16708  17A5  16B2               	bsf	_Buz1^(0+128),5
 16709                           
 16710                           ;Buzzer_B1.c: 68: RB3 = 1;
 16711  17A6  0020               	movlb	0	; select bank0
 16712  17A7  158D               	bsf	13,3	;volatile
 16713                           
 16714                           ;Buzzer_B1.c: 69: }
 16715                           ;Buzzer_B1.c: 70: } else {
 16716  17A8  0008               	return
 16717  17A9                     l100:	
 16718                           
 16719                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16720  17A9  12B2               	bcf	_Buz1^(0+128),5
 16721                           
 16722                           ;Buzzer_B1.c: 73: RB3 = 0;
 16723  17AA  0020               	movlb	0	; select bank0
 16724  17AB  118D               	bcf	13,3	;volatile
 16725                           
 16726                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16727  17AC  3001               	movlw	1
 16728  17AD  0021               	movlb	1	; select bank1
 16729  17AE  02B5               	subwf	(_Buz1^(0+128)+3),f
 16730  17AF  0008               	return
 16731  17B0                     __end_of_Buzzer_Main:	
 16732                           
 16733                           	psect	text123
 16734  1DDE                     __ptext123:	
 16735 ;; *************** function _Buzzer_Initialization *****************
 16736 ;; Defined at:
 16737 ;;		line 11 in file "../src/Buzzer_B1.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;		None
 16740 ;; Auto vars:     Size  Location     Type
 16741 ;;		None
 16742 ;; Return value:  Size  Location     Type
 16743 ;;		None               void
 16744 ;; Registers used:
 16745 ;;		None
 16746 ;; Tracked objects:
 16747 ;;		On entry : 0/0
 16748 ;;		On exit  : 0/0
 16749 ;;		Unchanged: 0/0
 16750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16755 ;;Total ram usage:        0 bytes
 16756 ;; Hardware stack levels used:    1
 16757 ;; Hardware stack levels required when called:    5
 16758 ;; This function calls:
 16759 ;;		Nothing
 16760 ;; This function is called by:
 16761 ;;		_main
 16762 ;; This function uses a non-reentrant model
 16763 ;;
 16764                           
 16765                           
 16766                           ;psect for function _Buzzer_Initialization
 16767  1DDE                     _Buzzer_Initialization:	
 16768                           
 16769                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16770                           
 16771                           ;incstack = 0
 16772                           ; Regs used in _Buzzer_Initialization: []
 16773  1DDE  0021               	movlb	1	; select bank1
 16774  1DDF  1432               	bsf	_Buz1^(0+128),0
 16775  1DE0  0008               	return
 16776  1DE1                     __end_of_Buzzer_Initialization:	
 16777                           
 16778                           	psect	intentry
 16779  0004                     __pintentry:	
 16780 ;; *************** function _ISR *****************
 16781 ;; Defined at:
 16782 ;;		line 107 in file "../src/MCU_B1.c"
 16783 ;; Parameters:    Size  Location     Type
 16784 ;;		None
 16785 ;; Auto vars:     Size  Location     Type
 16786 ;;		None
 16787 ;; Return value:  Size  Location     Type
 16788 ;;		None               void
 16789 ;; Registers used:
 16790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16791 ;; Tracked objects:
 16792 ;;		On entry : 0/0
 16793 ;;		On exit  : 0/0
 16794 ;;		Unchanged: 0/0
 16795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;Total ram usage:        1 bytes
 16801 ;; Hardware stack levels used:    1
 16802 ;; Hardware stack levels required when called:    4
 16803 ;; This function calls:
 16804 ;;		_IOC_ISR
 16805 ;;		_TMR0_ISR
 16806 ;; This function is called by:
 16807 ;;		Interrupt level 1
 16808 ;; This function uses a non-reentrant model
 16809 ;;
 16810                           
 16811  0004                     _ISR:	
 16812                           
 16813                           ;incstack = 0
 16814                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16815  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16816  0005  3180               	pagesel	$
 16817  0006  0020               	movlb	0	; select bank0
 16818  0007  087F               	movf	127,w
 16819  0008  00F7               	movwf	??_ISR
 16820                           
 16821                           ;MCU_B1.c: 109: IOC_ISR();
 16822  0009  319F  2702  3180   	fcall	_IOC_ISR
 16823                           
 16824                           ;MCU_B1.c: 111: TMR0_ISR();
 16825  000C  3192  2280         	fcall	_TMR0_ISR
 16826  000E  0877               	movf	??_ISR,w
 16827  000F  0020               	movlb	0	; select bank0
 16828  0010  00FF               	movwf	127
 16829  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16830  0012  0009               	retfie
 16831  0013                     __end_of_ISR:	
 16832                           
 16833                           	psect	text125
 16834  1280                     __ptext125:	
 16835 ;; *************** function _TMR0_ISR *****************
 16836 ;; Defined at:
 16837 ;;		line 135 in file "../src/MCU_B1.c"
 16838 ;; Parameters:    Size  Location     Type
 16839 ;;		None
 16840 ;; Auto vars:     Size  Location     Type
 16841 ;;		None
 16842 ;; Return value:  Size  Location     Type
 16843 ;;		None               void
 16844 ;; Registers used:
 16845 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16846 ;; Tracked objects:
 16847 ;;		On entry : 0/0
 16848 ;;		On exit  : 0/0
 16849 ;;		Unchanged: 0/0
 16850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16855 ;;Total ram usage:        0 bytes
 16856 ;; Hardware stack levels used:    1
 16857 ;; Hardware stack levels required when called:    2
 16858 ;; This function calls:
 16859 ;;		_setDimmerLights_IntrControl
 16860 ;; This function is called by:
 16861 ;;		_ISR
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           
 16866                           ;psect for function _TMR0_ISR
 16867  1280                     _TMR0_ISR:	
 16868                           
 16869                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 16870                           
 16871                           ;incstack = 0
 16872                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16873  1280  1E8B               	btfss	11,5	;volatile
 16874  1281  0008               	return
 16875  1282  1D0B               	btfss	11,2	;volatile
 16876  1283  0008               	return
 16877                           
 16878                           ;MCU_B1.c: 137: TMR0 = (256-190);
 16879  1284  3042               	movlw	66
 16880  1285  0020               	movlb	0	; select bank0
 16881  1286  0095               	movwf	21	;volatile
 16882                           
 16883                           ;MCU_B1.c: 138: TMR0IF = 0;
 16884  1287  110B               	bcf	11,2	;volatile
 16885                           
 16886                           ;MCU_B1.c: 143: setDimmerLights_IntrControl(1);
 16887  1288  3001               	movlw	1
 16888  1289  3180  2043  3192   	fcall	_setDimmerLights_IntrControl
 16889                           
 16890                           ;MCU_B1.c: 159: Timer0.Count++;
 16891  128C  3001               	movlw	1
 16892  128D  0022               	movlb	2	; select bank2
 16893  128E  07B6               	addwf	(_Timer0^(0+256)+1),f
 16894  128F  3000               	movlw	0
 16895  1290  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 16896                           
 16897                           ;MCU_B1.c: 160: if (Timer0.Count == 100) {
 16898  1291  3001               	movlw	1
 16899  1292  3E35               	addlw	_Timer0& (0+255)
 16900  1293  0086               	movwf	6
 16901  1294  3001               	movlw	1	; select bank2/3
 16902  1295  0087               	movwf	7
 16903  1296  3F40               	moviw [0]fsr1
 16904  1297  3A64               	xorlw	100
 16905  1298  1D03               	skipz
 16906  1299  2A9C               	goto	u666_25
 16907  129A  3F41               	moviw [1]fsr1
 16908  129B  3A00               	xorlw	0
 16909  129C                     u666_25:	
 16910  129C  1D03               	skipz
 16911  129D  0008               	return
 16912                           
 16913                           ;MCU_B1.c: 161: Timer0.Count = 0;
 16914  129E  01B6               	clrf	(_Timer0^(0+256)+1)
 16915  129F  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 16916                           
 16917                           ;MCU_B1.c: 162: myMain.T0_Timerout = 1;
 16918  12A0  0021               	movlb	1	; select bank1
 16919  12A1  14A0               	bsf	_myMain^(0+128),1
 16920  12A2  0008               	return
 16921  12A3                     __end_of_TMR0_ISR:	
 16922                           
 16923                           	psect	text126
 16924  0043                     __ptext126:	
 16925 ;; *************** function _setDimmerLights_IntrControl *****************
 16926 ;; Defined at:
 16927 ;;		line 87 in file "../src/Dimmer_B1.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;  lights          1    wreg     unsigned char 
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  lights          1    6[COMMON] unsigned char 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;		None               void
 16934 ;; Registers used:
 16935 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16944 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16945 ;;Total ram usage:        5 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:    1
 16948 ;; This function calls:
 16949 ;;		_DimmerIntrPointSelect
 16950 ;; This function is called by:
 16951 ;;		_TMR0_ISR
 16952 ;; This function uses a non-reentrant model
 16953 ;;
 16954                           
 16955                           
 16956                           ;psect for function _setDimmerLights_IntrControl
 16957  0043                     _setDimmerLights_IntrControl:	
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16961                           ;setDimmerLights_IntrControl@lights stored from wreg
 16962  0043  00F6               	movwf	setDimmerLights_IntrControl@lights
 16963                           
 16964                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16965  0044  0876               	movf	setDimmerLights_IntrControl@lights,w
 16966  0045  319E  267C  3180   	fcall	_DimmerIntrPointSelect
 16967                           
 16968                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16969  0048  0879               	movf	_DimmerLightsIntr,w
 16970  0049  0086               	movwf	6
 16971  004A  3001               	movlw	1	; select bank2/3
 16972  004B  0087               	movwf	7
 16973  004C  1C01               	btfss	1,0
 16974  004D  28A3               	goto	i1l6539
 16975                           
 16976                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16977  004E  3001               	movlw	1
 16978  004F  00F2               	movwf	??_setDimmerLights_IntrControl
 16979  0050  0879               	movf	_DimmerLightsIntr,w
 16980  0051  3E03               	addlw	3
 16981  0052  0086               	movwf	6
 16982  0053  3001               	movlw	1	; select bank2/3
 16983  0054  0087               	movwf	7
 16984  0055  0872               	movf	??_setDimmerLights_IntrControl,w
 16985  0056  0781               	addwf	1,f
 16986                           
 16987                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16988  0057  0021               	movlb	1	; select bank1
 16989  0058  0850               	movf	_Dimmer^(0+128),w
 16990  0059  3E02               	addlw	2
 16991  005A  0086               	movwf	6
 16992  005B  0187               	clrf	7
 16993  005C  0801               	movf	1,w
 16994  005D  00F2               	movwf	??_setDimmerLights_IntrControl
 16995  005E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16996  005F  09F2               	comf	??_setDimmerLights_IntrControl,f
 16997  0060  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16998  0061  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16999  0062  1903               	skipnz
 17000  0063  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 17001  0064  0879               	movf	_DimmerLightsIntr,w
 17002  0065  3E04               	addlw	4
 17003  0066  0086               	movwf	6
 17004  0067  3001               	movlw	1	; select bank2/3
 17005  0068  0087               	movwf	7
 17006  0069  0801               	movf	1,w
 17007  006A  0772               	addwf	??_setDimmerLights_IntrControl,w
 17008  006B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 17009  006C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17010  006D  1803               	skipnc
 17011  006E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17012  006F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17013  0070  0879               	movf	_DimmerLightsIntr,w
 17014  0071  3E03               	addlw	3
 17015  0072  0086               	movwf	6
 17016  0073  3001               	movlw	1	; select bank2/3
 17017  0074  0087               	movwf	7
 17018  0075  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17019  0076  3A80               	xorlw	128
 17020  0077  3C80               	sublw	128
 17021  0078  1D03               	skipz
 17022  0079  287C               	goto	u552_25
 17023  007A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17024  007B  0201               	subwf	1,w
 17025  007C                     u552_25:	
 17026  007C  1C03               	skipc
 17027  007D  29A7               	goto	i1l6597
 17028                           
 17029                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17030  007E  0879               	movf	_DimmerLightsIntr,w
 17031  007F  3E03               	addlw	3
 17032  0080  0086               	movwf	6
 17033  0081  3001               	movlw	1	; select bank2/3
 17034  0082  0087               	movwf	7
 17035  0083  0181               	clrf	1
 17036                           
 17037                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17038  0084  0879               	movf	_DimmerLightsIntr,w
 17039  0085  0086               	movwf	6
 17040  0086  3001               	movlw	1	; select bank2/3
 17041  0087  0087               	movwf	7
 17042  0088  1001               	bcf	1,0
 17043                           
 17044                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17045  0089  0879               	movf	_DimmerLightsIntr,w
 17046  008A  0086               	movwf	6
 17047  008B  3001               	movlw	1	; select bank2/3
 17048  008C  0087               	movwf	7
 17049  008D  1F01               	btfss	1,6
 17050  008E  29A7               	goto	i1l6597
 17051                           
 17052                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17053  008F  0879               	movf	_DimmerLightsIntr,w
 17054  0090  3E08               	addlw	8
 17055  0091  0086               	movwf	6
 17056  0092  3001               	movlw	1	; select bank2/3
 17057  0093  0087               	movwf	7
 17058  0094  1401               	bsf	1,0
 17059                           
 17060                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17061  0095  0879               	movf	_DimmerLightsIntr,w
 17062  0096  3E08               	addlw	8
 17063  0097  0086               	movwf	6
 17064  0098  3001               	movlw	1	; select bank2/3
 17065  0099  0087               	movwf	7
 17066  009A  1681               	bsf	1,5
 17067                           
 17068                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17069  009B  0876               	movf	setDimmerLights_IntrControl@lights,w
 17070  009C  3A01               	xorlw	1
 17071  009D  1D03               	skipz
 17072  009E  29A7               	goto	i1l6597
 17073                           
 17074                           ;Dimmer_B1.c: 101: RA7 = 1;
 17075  009F  0020               	movlb	0	; select bank0
 17076  00A0  178C               	bsf	12,7	;volatile
 17077                           
 17078                           ;Dimmer_B1.c: 102: RB4=1;
 17079  00A1  160D               	bsf	13,4	;volatile
 17080                           
 17081                           ;Dimmer_B1.c: 103: }
 17082                           ;Dimmer_B1.c: 115: }
 17083                           ;Dimmer_B1.c: 116: }
 17084                           ;Dimmer_B1.c: 117: } else {
 17085  00A2  29A7               	goto	i1l6597
 17086  00A3                     i1l6539:	
 17087                           
 17088                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17089  00A3  0879               	movf	_DimmerLightsIntr,w
 17090  00A4  3E08               	addlw	8
 17091  00A5  0086               	movwf	6
 17092  00A6  3001               	movlw	1	; select bank2/3
 17093  00A7  0087               	movwf	7
 17094  00A8  1C01               	btfss	1,0
 17095  00A9  29A7               	goto	i1l6597
 17096                           
 17097                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17098  00AA  0879               	movf	_DimmerLightsIntr,w
 17099  00AB  3E08               	addlw	8
 17100  00AC  0086               	movwf	6
 17101  00AD  3001               	movlw	1	; select bank2/3
 17102  00AE  0087               	movwf	7
 17103  00AF  1001               	bcf	1,0
 17104                           
 17105                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17106  00B0  0879               	movf	_DimmerLightsIntr,w
 17107  00B1  0086               	movwf	6
 17108  00B2  3001               	movlw	1	; select bank2/3
 17109  00B3  0087               	movwf	7
 17110  00B4  1C81               	btfss	1,1
 17111  00B5  29A7               	goto	i1l6597
 17112                           
 17113                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17114  00B6  3001               	movlw	1
 17115  00B7  00F2               	movwf	??_setDimmerLights_IntrControl
 17116  00B8  0A79               	incf	_DimmerLightsIntr,w
 17117  00B9  0086               	movwf	6
 17118  00BA  3001               	movlw	1	; select bank2/3
 17119  00BB  0087               	movwf	7
 17120  00BC  0872               	movf	??_setDimmerLights_IntrControl,w
 17121  00BD  0781               	addwf	1,f
 17122                           
 17123                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17124  00BE  0A79               	incf	_DimmerLightsIntr,w
 17125  00BF  0086               	movwf	6
 17126  00C0  3001               	movlw	1	; select bank2/3
 17127  00C1  0087               	movwf	7
 17128  00C2  0879               	movf	_DimmerLightsIntr,w
 17129  00C3  3E02               	addlw	2
 17130  00C4  0084               	movwf	4
 17131  00C5  3001               	movlw	1	; select bank2/3
 17132  00C6  0085               	movwf	5
 17133  00C7  0800               	movf	0,w
 17134  00C8  0201               	subwf	1,w
 17135  00C9  1C03               	skipc
 17136  00CA  29A7               	goto	i1l6597
 17137                           
 17138                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17139  00CB  0A79               	incf	_DimmerLightsIntr,w
 17140  00CC  0086               	movwf	6
 17141  00CD  3001               	movlw	1	; select bank2/3
 17142  00CE  0087               	movwf	7
 17143  00CF  0181               	clrf	1
 17144                           
 17145                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17146  00D0  0879               	movf	_DimmerLightsIntr,w
 17147  00D1  0086               	movwf	6
 17148  00D2  3001               	movlw	1	; select bank2/3
 17149  00D3  0087               	movwf	7
 17150  00D4  1D81               	btfss	1,3
 17151  00D5  290C               	goto	i1l6565
 17152                           
 17153                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17154  00D6  0879               	movf	_DimmerLightsIntr,w
 17155  00D7  0086               	movwf	6
 17156  00D8  3001               	movlw	1	; select bank2/3
 17157  00D9  0087               	movwf	7
 17158  00DA  1A01               	btfsc	1,4
 17159  00DB  28F3               	goto	i1l6559
 17160                           
 17161                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17162  00DC  0879               	movf	_DimmerLightsIntr,w
 17163  00DD  3E04               	addlw	4
 17164  00DE  0086               	movwf	6
 17165  00DF  3001               	movlw	1	; select bank2/3
 17166  00E0  0087               	movwf	7
 17167  00E1  3021               	movlw	33
 17168  00E2  0201               	subwf	1,w
 17169  00E3  1C03               	skipc
 17170  00E4  28ED               	goto	i1l6557
 17171                           
 17172                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17173  00E5  0879               	movf	_DimmerLightsIntr,w
 17174  00E6  3E04               	addlw	4
 17175  00E7  0086               	movwf	6
 17176  00E8  3001               	movlw	1	; select bank2/3
 17177  00E9  0087               	movwf	7
 17178  00EA  3001               	movlw	1
 17179  00EB  0281               	subwf	1,f
 17180                           
 17181                           ;Dimmer_B1.c: 128: } else {
 17182  00EC  29A7               	goto	i1l6597
 17183  00ED                     i1l6557:	
 17184                           
 17185                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17186  00ED  0879               	movf	_DimmerLightsIntr,w
 17187  00EE  0086               	movwf	6
 17188  00EF  3001               	movlw	1	; select bank2/3
 17189  00F0  0087               	movwf	7
 17190  00F1  1601               	bsf	1,4
 17191                           
 17192                           ;Dimmer_B1.c: 130: }
 17193                           ;Dimmer_B1.c: 131: } else {
 17194  00F2  29A7               	goto	i1l6597
 17195  00F3                     i1l6559:	
 17196                           
 17197                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17198  00F3  0879               	movf	_DimmerLightsIntr,w
 17199  00F4  3E04               	addlw	4
 17200  00F5  0086               	movwf	6
 17201  00F6  3001               	movlw	1	; select bank2/3
 17202  00F7  0087               	movwf	7
 17203  00F8  303C               	movlw	60
 17204  00F9  0201               	subwf	1,w
 17205  00FA  1803               	skipnc
 17206  00FB  2906               	goto	i1l6563
 17207                           
 17208                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17209  00FC  3001               	movlw	1
 17210  00FD  00F2               	movwf	??_setDimmerLights_IntrControl
 17211  00FE  0879               	movf	_DimmerLightsIntr,w
 17212  00FF  3E04               	addlw	4
 17213  0100  0086               	movwf	6
 17214  0101  3001               	movlw	1	; select bank2/3
 17215  0102  0087               	movwf	7
 17216  0103  0872               	movf	??_setDimmerLights_IntrControl,w
 17217  0104  0781               	addwf	1,f
 17218                           
 17219                           ;Dimmer_B1.c: 134: } else {
 17220  0105  29A7               	goto	i1l6597
 17221  0106                     i1l6563:	
 17222                           
 17223                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17224  0106  0879               	movf	_DimmerLightsIntr,w
 17225  0107  0086               	movwf	6
 17226  0108  3001               	movlw	1	; select bank2/3
 17227  0109  0087               	movwf	7
 17228  010A  1201               	bcf	1,4
 17229                           
 17230                           ;Dimmer_B1.c: 136: }
 17231                           ;Dimmer_B1.c: 137: }
 17232                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17233  010B  29A7               	goto	i1l6597
 17234  010C                     i1l6565:	
 17235  010C  0879               	movf	_DimmerLightsIntr,w
 17236  010D  0086               	movwf	6
 17237  010E  3001               	movlw	1	; select bank2/3
 17238  010F  0087               	movwf	7
 17239  0110  1D01               	btfss	1,2
 17240  0111  2953               	goto	i1l6579
 17241                           
 17242                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17243  0112  0879               	movf	_DimmerLightsIntr,w
 17244  0113  3E05               	addlw	5
 17245  0114  0086               	movwf	6
 17246  0115  3001               	movlw	1	; select bank2/3
 17247  0116  0087               	movwf	7
 17248  0117  0879               	movf	_DimmerLightsIntr,w
 17249  0118  3E04               	addlw	4
 17250  0119  0084               	movwf	4
 17251  011A  3001               	movlw	1	; select bank2/3
 17252  011B  0085               	movwf	5
 17253  011C  0800               	movf	0,w
 17254  011D  0201               	subwf	1,w
 17255  011E  1803               	skipnc
 17256  011F  2928               	goto	i1l6571
 17257                           
 17258                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17259  0120  0879               	movf	_DimmerLightsIntr,w
 17260  0121  3E04               	addlw	4
 17261  0122  0086               	movwf	6
 17262  0123  3001               	movlw	1	; select bank2/3
 17263  0124  0087               	movwf	7
 17264  0125  3001               	movlw	1
 17265  0126  0281               	subwf	1,f
 17266                           
 17267                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17268  0127  293F               	goto	i1l6575
 17269  0128                     i1l6571:	
 17270  0128  0879               	movf	_DimmerLightsIntr,w
 17271  0129  3E04               	addlw	4
 17272  012A  0086               	movwf	6
 17273  012B  3001               	movlw	1	; select bank2/3
 17274  012C  0087               	movwf	7
 17275  012D  0879               	movf	_DimmerLightsIntr,w
 17276  012E  3E05               	addlw	5
 17277  012F  0084               	movwf	4
 17278  0130  3001               	movlw	1	; select bank2/3
 17279  0131  0085               	movwf	5
 17280  0132  0800               	movf	0,w
 17281  0133  0201               	subwf	1,w
 17282  0134  1803               	skipnc
 17283  0135  293F               	goto	i1l6575
 17284                           
 17285                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17286  0136  3001               	movlw	1
 17287  0137  00F2               	movwf	??_setDimmerLights_IntrControl
 17288  0138  0879               	movf	_DimmerLightsIntr,w
 17289  0139  3E04               	addlw	4
 17290  013A  0086               	movwf	6
 17291  013B  3001               	movlw	1	; select bank2/3
 17292  013C  0087               	movwf	7
 17293  013D  0872               	movf	??_setDimmerLights_IntrControl,w
 17294  013E  0781               	addwf	1,f
 17295  013F                     i1l6575:	
 17296                           
 17297                           ;Dimmer_B1.c: 143: }
 17298                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17299  013F  0879               	movf	_DimmerLightsIntr,w
 17300  0140  3E05               	addlw	5
 17301  0141  0086               	movwf	6
 17302  0142  3001               	movlw	1	; select bank2/3
 17303  0143  0087               	movwf	7
 17304  0144  0879               	movf	_DimmerLightsIntr,w
 17305  0145  3E04               	addlw	4
 17306  0146  0084               	movwf	4
 17307  0147  3001               	movlw	1	; select bank2/3
 17308  0148  0085               	movwf	5
 17309  0149  0800               	movf	0,w
 17310  014A  0601               	xorwf	1,w
 17311  014B  1D03               	skipz
 17312  014C  29A7               	goto	i1l6597
 17313                           
 17314                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17315  014D  0879               	movf	_DimmerLightsIntr,w
 17316  014E  0086               	movwf	6
 17317  014F  3001               	movlw	1	; select bank2/3
 17318  0150  0087               	movwf	7
 17319  0151  1101               	bcf	1,2
 17320  0152  296E               	goto	i1l6585
 17321  0153                     i1l6579:	
 17322                           ;Dimmer_B1.c: 147: }
 17323                           ;Dimmer_B1.c: 148: } else {
 17324                           
 17325                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17326                           
 17327                           
 17328                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17329  0153  0879               	movf	_DimmerLightsIntr,w
 17330  0154  0086               	movwf	6
 17331  0155  3001               	movlw	1	; select bank2/3
 17332  0156  0087               	movwf	7
 17333  0157  1E81               	btfss	1,5
 17334  0158  2974               	goto	i1l6587
 17335                           
 17336                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17337  0159  0879               	movf	_DimmerLightsIntr,w
 17338  015A  3E04               	addlw	4
 17339  015B  0086               	movwf	6
 17340  015C  3001               	movlw	1	; select bank2/3
 17341  015D  0087               	movwf	7
 17342  015E  3001               	movlw	1
 17343  015F  0281               	subwf	1,f
 17344                           
 17345                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17346  0160  0879               	movf	_DimmerLightsIntr,w
 17347  0161  3E05               	addlw	5
 17348  0162  0086               	movwf	6
 17349  0163  3001               	movlw	1	; select bank2/3
 17350  0164  0087               	movwf	7
 17351  0165  0879               	movf	_DimmerLightsIntr,w
 17352  0166  3E04               	addlw	4
 17353  0167  0084               	movwf	4
 17354  0168  3001               	movlw	1	; select bank2/3
 17355  0169  0085               	movwf	5
 17356  016A  0800               	movf	0,w
 17357  016B  0201               	subwf	1,w
 17358  016C  1C03               	skipc
 17359  016D  29A7               	goto	i1l6597
 17360  016E                     i1l6585:	
 17361                           
 17362                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17363  016E  0879               	movf	_DimmerLightsIntr,w
 17364  016F  0086               	movwf	6
 17365  0170  3001               	movlw	1	; select bank2/3
 17366  0171  0087               	movwf	7
 17367  0172  1081               	bcf	1,1
 17368                           
 17369                           ;Dimmer_B1.c: 153: }
 17370                           ;Dimmer_B1.c: 154: } else {
 17371  0173  29A7               	goto	i1l6597
 17372  0174                     i1l6587:	
 17373                           
 17374                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17375  0174  3001               	movlw	1
 17376  0175  00F2               	movwf	??_setDimmerLights_IntrControl
 17377  0176  0879               	movf	_DimmerLightsIntr,w
 17378  0177  3E04               	addlw	4
 17379  0178  0086               	movwf	6
 17380  0179  3001               	movlw	1	; select bank2/3
 17381  017A  0087               	movwf	7
 17382  017B  0872               	movf	??_setDimmerLights_IntrControl,w
 17383  017C  0781               	addwf	1,f
 17384                           
 17385                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17386  017D  0879               	movf	_DimmerLightsIntr,w
 17387  017E  3E04               	addlw	4
 17388  017F  0086               	movwf	6
 17389  0180  3001               	movlw	1	; select bank2/3
 17390  0181  0087               	movwf	7
 17391  0182  0879               	movf	_DimmerLightsIntr,w
 17392  0183  3E06               	addlw	6
 17393  0184  0084               	movwf	4
 17394  0185  3001               	movlw	1	; select bank2/3
 17395  0186  0085               	movwf	5
 17396  0187  0800               	movf	0,w
 17397  0188  0201               	subwf	1,w
 17398  0189  1C03               	skipc
 17399  018A  29A7               	goto	i1l6597
 17400                           
 17401                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17402  018B  0879               	movf	_DimmerLightsIntr,w
 17403  018C  0086               	movwf	6
 17404  018D  3001               	movlw	1	; select bank2/3
 17405  018E  0087               	movwf	7
 17406  018F  1081               	bcf	1,1
 17407                           
 17408                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17409  0190  0879               	movf	_DimmerLightsIntr,w
 17410  0191  0086               	movwf	6
 17411  0192  3001               	movlw	1	; select bank2/3
 17412  0193  0087               	movwf	7
 17413  0194  1301               	bcf	1,6
 17414                           
 17415                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17416  0195  0879               	movf	_DimmerLightsIntr,w
 17417  0196  3E09               	addlw	9
 17418  0197  0086               	movwf	6
 17419  0198  3001               	movlw	1	; select bank2/3
 17420  0199  0087               	movwf	7
 17421  019A  1501               	bsf	1,2
 17422                           
 17423                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17424  019B  0021               	movlb	1	; select bank1
 17425  019C  0850               	movf	_Dimmer^(0+128),w
 17426  019D  0086               	movwf	6
 17427  019E  0187               	clrf	7
 17428  019F  1401               	bsf	1,0
 17429                           
 17430                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17431  01A0  0876               	movf	setDimmerLights_IntrControl@lights,w
 17432  01A1  3A01               	xorlw	1
 17433  01A2  1D03               	skipz
 17434  01A3  29A7               	goto	i1l6597
 17435                           
 17436                           ;Dimmer_B1.c: 163: RA3 = 0;
 17437  01A4  0020               	movlb	0	; select bank0
 17438  01A5  118C               	bcf	12,3	;volatile
 17439                           
 17440                           ;Dimmer_B1.c: 164: RC7=!1;
 17441  01A6  138E               	bcf	14,7	;volatile
 17442  01A7                     i1l6597:	
 17443                           ;Dimmer_B1.c: 165: }
 17444                           ;Dimmer_B1.c: 177: ;;
 17445                           
 17446                           
 17447                           ;Dimmer_B1.c: 178: }
 17448                           ;Dimmer_B1.c: 179: }
 17449                           ;Dimmer_B1.c: 180: }
 17450                           ;Dimmer_B1.c: 181: }
 17451                           ;Dimmer_B1.c: 182: }
 17452                           ;Dimmer_B1.c: 183: }
 17453                           ;Dimmer_B1.c: 184: }
 17454                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17455  01A7  0879               	movf	_DimmerLightsIntr,w
 17456  01A8  3E08               	addlw	8
 17457  01A9  0086               	movwf	6
 17458  01AA  3001               	movlw	1	; select bank2/3
 17459  01AB  0087               	movwf	7
 17460  01AC  1E81               	btfss	1,5
 17461  01AD  29D3               	goto	i1l6611
 17462                           
 17463                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17464  01AE  3001               	movlw	1
 17465  01AF  00F2               	movwf	??_setDimmerLights_IntrControl
 17466  01B0  0879               	movf	_DimmerLightsIntr,w
 17467  01B1  3E07               	addlw	7
 17468  01B2  0086               	movwf	6
 17469  01B3  3001               	movlw	1	; select bank2/3
 17470  01B4  0087               	movwf	7
 17471  01B5  0872               	movf	??_setDimmerLights_IntrControl,w
 17472  01B6  0781               	addwf	1,f
 17473                           
 17474                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17475  01B7  0879               	movf	_DimmerLightsIntr,w
 17476  01B8  3E07               	addlw	7
 17477  01B9  0086               	movwf	6
 17478  01BA  3001               	movlw	1	; select bank2/3
 17479  01BB  0087               	movwf	7
 17480  01BC  3005               	movlw	5
 17481  01BD  0201               	subwf	1,w
 17482  01BE  1C03               	skipc
 17483  01BF  29D3               	goto	i1l6611
 17484                           
 17485                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17486  01C0  0879               	movf	_DimmerLightsIntr,w
 17487  01C1  3E07               	addlw	7
 17488  01C2  0086               	movwf	6
 17489  01C3  3001               	movlw	1	; select bank2/3
 17490  01C4  0087               	movwf	7
 17491  01C5  0181               	clrf	1
 17492                           
 17493                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17494  01C6  0879               	movf	_DimmerLightsIntr,w
 17495  01C7  3E08               	addlw	8
 17496  01C8  0086               	movwf	6
 17497  01C9  3001               	movlw	1	; select bank2/3
 17498  01CA  0087               	movwf	7
 17499  01CB  1281               	bcf	1,5
 17500                           
 17501                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17502  01CC  0876               	movf	setDimmerLights_IntrControl@lights,w
 17503  01CD  3A01               	xorlw	1
 17504  01CE  1D03               	skipz
 17505  01CF  29D3               	goto	i1l6611
 17506                           
 17507                           ;Dimmer_B1.c: 193: RA7 = 0;
 17508  01D0  0020               	movlb	0	; select bank0
 17509  01D1  138C               	bcf	12,7	;volatile
 17510                           
 17511                           ;Dimmer_B1.c: 194: RB4=0;
 17512  01D2  120D               	bcf	13,4	;volatile
 17513  01D3                     i1l6611:	
 17514                           
 17515                           ;Dimmer_B1.c: 195: }
 17516                           ;Dimmer_B1.c: 207: }
 17517                           ;Dimmer_B1.c: 208: }
 17518                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17519  01D3  0879               	movf	_DimmerLightsIntr,w
 17520  01D4  3E09               	addlw	9
 17521  01D5  0086               	movwf	6
 17522  01D6  3001               	movlw	1	; select bank2/3
 17523  01D7  0087               	movwf	7
 17524  01D8  1E81               	btfss	1,5
 17525  01D9  0008               	return
 17526                           
 17527                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17528  01DA  3001               	movlw	1
 17529  01DB  00F2               	movwf	??_setDimmerLights_IntrControl
 17530  01DC  0879               	movf	_DimmerLightsIntr,w
 17531  01DD  3E0A               	addlw	10
 17532  01DE  0086               	movwf	6
 17533  01DF  3001               	movlw	1	; select bank2/3
 17534  01E0  0087               	movwf	7
 17535  01E1  0872               	movf	??_setDimmerLights_IntrControl,w
 17536  01E2  0781               	addwf	1,f
 17537                           
 17538                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17539  01E3  0879               	movf	_DimmerLightsIntr,w
 17540  01E4  3E0A               	addlw	10
 17541  01E5  0086               	movwf	6
 17542  01E6  3001               	movlw	1	; select bank2/3
 17543  01E7  0087               	movwf	7
 17544  01E8  0801               	movf	1,w
 17545  01E9  3A46               	xorlw	70
 17546  01EA  1D03               	skipz
 17547  01EB  0008               	return
 17548                           
 17549                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17550  01EC  0879               	movf	_DimmerLightsIntr,w
 17551  01ED  3E0A               	addlw	10
 17552  01EE  0086               	movwf	6
 17553  01EF  3001               	movlw	1	; select bank2/3
 17554  01F0  0087               	movwf	7
 17555  01F1  0181               	clrf	1
 17556                           
 17557                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17558  01F2  0879               	movf	_DimmerLightsIntr,w
 17559  01F3  3E09               	addlw	9
 17560  01F4  0086               	movwf	6
 17561  01F5  3001               	movlw	1	; select bank2/3
 17562  01F6  0087               	movwf	7
 17563  01F7  1281               	bcf	1,5
 17564  01F8  0008               	return
 17565  01F9                     __end_of_setDimmerLights_IntrControl:	
 17566                           
 17567                           	psect	text127
 17568  1E7C                     __ptext127:	
 17569 ;; *************** function _DimmerIntrPointSelect *****************
 17570 ;; Defined at:
 17571 ;;		line 65 in file "../src/Dimmer_B1.c"
 17572 ;; Parameters:    Size  Location     Type
 17573 ;;  lights          1    wreg     unsigned char 
 17574 ;; Auto vars:     Size  Location     Type
 17575 ;;  lights          1    1[COMMON] unsigned char 
 17576 ;; Return value:  Size  Location     Type
 17577 ;;		None               void
 17578 ;; Registers used:
 17579 ;;		wreg
 17580 ;; Tracked objects:
 17581 ;;		On entry : 0/0
 17582 ;;		On exit  : 0/0
 17583 ;;		Unchanged: 0/0
 17584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17587 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17588 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17589 ;;Total ram usage:        2 bytes
 17590 ;; Hardware stack levels used:    1
 17591 ;; This function calls:
 17592 ;;		Nothing
 17593 ;; This function is called by:
 17594 ;;		_setDimmerLights_IntrControl
 17595 ;; This function uses a non-reentrant model
 17596 ;;
 17597                           
 17598                           
 17599                           ;psect for function _DimmerIntrPointSelect
 17600  1E7C                     _DimmerIntrPointSelect:	
 17601                           
 17602                           ;incstack = 0
 17603                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17604                           ;DimmerIntrPointSelect@lights stored from wreg
 17605  1E7C  00F1               	movwf	DimmerIntrPointSelect@lights
 17606                           
 17607                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17608  1E7D  0871               	movf	DimmerIntrPointSelect@lights,w
 17609  1E7E  3A01               	xorlw	1
 17610  1E7F  1D03               	skipz
 17611  1E80  0008               	return
 17612                           
 17613                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17614  1E81  30C0               	movlw	_DimmerLights1& (0+255)
 17615  1E82  00F0               	movwf	??_DimmerIntrPointSelect
 17616  1E83  0870               	movf	??_DimmerIntrPointSelect,w
 17617  1E84  00F9               	movwf	_DimmerLightsIntr
 17618  1E85  0008               	return
 17619  1E86                     __end_of_DimmerIntrPointSelect:	
 17620                           
 17621                           	psect	text128
 17622  1F02                     __ptext128:	
 17623 ;; *************** function _IOC_ISR *****************
 17624 ;; Defined at:
 17625 ;;		line 295 in file "../src/MCU_B1.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;		None
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;		None
 17630 ;; Return value:  Size  Location     Type
 17631 ;;		None               void
 17632 ;; Registers used:
 17633 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17634 ;; Tracked objects:
 17635 ;;		On entry : 0/0
 17636 ;;		On exit  : 0/0
 17637 ;;		Unchanged: 0/0
 17638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17643 ;;Total ram usage:        0 bytes
 17644 ;; Hardware stack levels used:    1
 17645 ;; Hardware stack levels required when called:    3
 17646 ;; This function calls:
 17647 ;;		_setDimmerReClock
 17648 ;; This function is called by:
 17649 ;;		_ISR
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           
 17654                           ;psect for function _IOC_ISR
 17655  1F02                     _IOC_ISR:	
 17656                           
 17657                           ;MCU_B1.c: 296: if (IOCIE == 1 && IOCBF2 == 1) {
 17658                           
 17659                           ;incstack = 0
 17660                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17661  1F02  1D8B               	btfss	11,3	;volatile
 17662  1F03  0008               	return
 17663  1F04  0027               	movlb	7	; select bank7
 17664  1F05  1D16               	btfss	22,2	;volatile
 17665  1F06  0008               	return
 17666                           
 17667                           ;MCU_B1.c: 297: IOCBF2 = 0;
 17668  1F07  1116               	bcf	22,2	;volatile
 17669                           
 17670                           ;MCU_B1.c: 298: IOCIF = 0;
 17671  1F08  100B               	bcf	11,0	;volatile
 17672                           
 17673                           ;MCU_B1.c: 299: if (myMain.PowerON == 1) {
 17674  1F09  0021               	movlb	1	; select bank1
 17675  1F0A  1C20               	btfss	_myMain^(0+128),0
 17676  1F0B  0008               	return
 17677                           
 17678                           ;MCU_B1.c: 301: setDimmerReClock();
 17679  1F0C  319E  2627         	fcall	_setDimmerReClock
 17680  1F0E  0008               	return
 17681  1F0F                     __end_of_IOC_ISR:	
 17682                           
 17683                           	psect	text129
 17684  1E27                     __ptext129:	
 17685 ;; *************** function _setDimmerReClock *****************
 17686 ;; Defined at:
 17687 ;;		line 173 in file "../src/MCU_B1.c"
 17688 ;; Parameters:    Size  Location     Type
 17689 ;;		None
 17690 ;; Auto vars:     Size  Location     Type
 17691 ;;		None
 17692 ;; Return value:  Size  Location     Type
 17693 ;;		None               void
 17694 ;; Registers used:
 17695 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17696 ;; Tracked objects:
 17697 ;;		On entry : 0/0
 17698 ;;		On exit  : 0/0
 17699 ;;		Unchanged: 0/0
 17700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;Total ram usage:        0 bytes
 17706 ;; Hardware stack levels used:    1
 17707 ;; Hardware stack levels required when called:    2
 17708 ;; This function calls:
 17709 ;;		_setDimmerLights_IntrIOC_GO
 17710 ;; This function is called by:
 17711 ;;		_IOC_ISR
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           
 17716                           ;psect for function _setDimmerReClock
 17717  1E27                     _setDimmerReClock:	
 17718                           
 17719                           ;MCU_B1.c: 178: setDimmerLights_IntrIOC_GO(1);
 17720                           
 17721                           ;incstack = 0
 17722                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17723  1E27  3001               	movlw	1
 17724  1E28  3191  215C         	fcall	_setDimmerLights_IntrIOC_GO
 17725                           
 17726                           ;MCU_B1.c: 189: TMR0 = 255;
 17727  1E2A  30FF               	movlw	255
 17728  1E2B  0020               	movlb	0	; select bank0
 17729  1E2C  0095               	movwf	21	;volatile
 17730  1E2D  0008               	return
 17731  1E2E                     __end_of_setDimmerReClock:	
 17732                           
 17733                           	psect	text130
 17734  115C                     __ptext130:	
 17735 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17736 ;; Defined at:
 17737 ;;		line 28 in file "../src/Dimmer_B1.c"
 17738 ;; Parameters:    Size  Location     Type
 17739 ;;  lights          1    wreg     unsigned char 
 17740 ;; Auto vars:     Size  Location     Type
 17741 ;;  lights          1    2[COMMON] unsigned char 
 17742 ;; Return value:  Size  Location     Type
 17743 ;;		None               void
 17744 ;; Registers used:
 17745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17746 ;; Tracked objects:
 17747 ;;		On entry : 0/0
 17748 ;;		On exit  : 0/0
 17749 ;;		Unchanged: 0/0
 17750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17754 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17755 ;;Total ram usage:        1 bytes
 17756 ;; Hardware stack levels used:    1
 17757 ;; Hardware stack levels required when called:    1
 17758 ;; This function calls:
 17759 ;;		_DimmerIntrIOCPointSelect
 17760 ;; This function is called by:
 17761 ;;		_setDimmerReClock
 17762 ;; This function uses a non-reentrant model
 17763 ;;
 17764                           
 17765                           
 17766                           ;psect for function _setDimmerLights_IntrIOC_GO
 17767  115C                     _setDimmerLights_IntrIOC_GO:	
 17768                           
 17769                           ;incstack = 0
 17770                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17771                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17772  115C  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17773                           
 17774                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17775  115D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17776  115E  319E  2690  3191   	fcall	_DimmerIntrIOCPointSelect
 17777                           
 17778                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17779  1161  0021               	movlb	1	; select bank1
 17780  1162  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17781  1163  0086               	movwf	6
 17782  1164  3001               	movlw	1	; select bank2/3
 17783  1165  0087               	movwf	7
 17784  1166  1801               	btfsc	1,0
 17785  1167  0008               	return
 17786  1168  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17787  1169  3E09               	addlw	9
 17788  116A  0086               	movwf	6
 17789  116B  3001               	movlw	1	; select bank2/3
 17790  116C  0087               	movwf	7
 17791  116D  1A81               	btfsc	1,5
 17792  116E  0008               	return
 17793                           
 17794                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17795  116F  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17796  1170  0086               	movwf	6
 17797  1171  3001               	movlw	1	; select bank2/3
 17798  1172  0087               	movwf	7
 17799  1173  1401               	bsf	1,0
 17800                           
 17801                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17802  1174  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17803  1175  3E09               	addlw	9
 17804  1176  0086               	movwf	6
 17805  1177  3001               	movlw	1	; select bank2/3
 17806  1178  0087               	movwf	7
 17807  1179  1681               	bsf	1,5
 17808  117A  0008               	return
 17809  117B                     __end_of_setDimmerLights_IntrIOC_GO:	
 17810                           
 17811                           	psect	text131
 17812  1E90                     __ptext131:	
 17813 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17814 ;; Defined at:
 17815 ;;		line 8 in file "../src/Dimmer_B1.c"
 17816 ;; Parameters:    Size  Location     Type
 17817 ;;  lights          1    wreg     unsigned char 
 17818 ;; Auto vars:     Size  Location     Type
 17819 ;;  lights          1    1[COMMON] unsigned char 
 17820 ;; Return value:  Size  Location     Type
 17821 ;;		None               void
 17822 ;; Registers used:
 17823 ;;		wreg
 17824 ;; Tracked objects:
 17825 ;;		On entry : 0/0
 17826 ;;		On exit  : 0/0
 17827 ;;		Unchanged: 0/0
 17828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17830 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17831 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17832 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17833 ;;Total ram usage:        2 bytes
 17834 ;; Hardware stack levels used:    1
 17835 ;; This function calls:
 17836 ;;		Nothing
 17837 ;; This function is called by:
 17838 ;;		_setDimmerLights_IntrIOC_GO
 17839 ;; This function uses a non-reentrant model
 17840 ;;
 17841                           
 17842                           
 17843                           ;psect for function _DimmerIntrIOCPointSelect
 17844  1E90                     _DimmerIntrIOCPointSelect:	
 17845                           
 17846                           ;incstack = 0
 17847                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17848                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17849  1E90  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17850                           
 17851                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17852  1E91  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17853  1E92  3A01               	xorlw	1
 17854  1E93  1D03               	skipz
 17855  1E94  0008               	return
 17856                           
 17857                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17858  1E95  30C0               	movlw	_DimmerLights1& (0+255)
 17859  1E96  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17860  1E97  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17861  1E98  0021               	movlb	1	; select bank1
 17862  1E99  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 17863  1E9A  0008               	return
 17864  1E9B                     __end_of_DimmerIntrIOCPointSelect:	
 17865  007E                     btemp	set	126	;btemp
 17866  007E                     pic14e$flags	set	126
 17867  007E                     wtemp	set	126
 17868  007E                     wtemp0	set	126
 17869  0080                     wtemp1	set	128
 17870  0082                     wtemp2	set	130
 17871  0084                     wtemp3	set	132
 17872  0086                     wtemp4	set	134
 17873  0088                     wtemp5	set	136
 17874  007F                     wtemp6	set	127
 17875  007E                     ttemp	set	126
 17876  007E                     ttemp0	set	126
 17877  0081                     ttemp1	set	129
 17878  0084                     ttemp2	set	132
 17879  0087                     ttemp3	set	135
 17880  007F                     ttemp4	set	127
 17881  007E                     ltemp	set	126
 17882  007E                     ltemp0	set	126
 17883  0082                     ltemp1	set	130
 17884  0086                     ltemp2	set	134
 17885  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         188
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     77      80
    BANK1            80      0      79
    BANK2            80      0      79
    BANK3            80      0      56
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   89723
                                             73 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1375
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6649
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6649
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6626
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19674
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   19674
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8759
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8545
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0     927
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1282
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1282
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26978
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   26978
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   26302
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9962
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1092
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11267
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    5308
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    5308
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    5308
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      44
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3802
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     196
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2202
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1375
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1375
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9615
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9525
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6333
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1663
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1220
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      90
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9166
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9166
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     386
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     450
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      38      11       70.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     133      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     133      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Oct 18 16:08:47 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     l90 0961                                       l92 0975  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 121A  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006E       __end_of_getDimmerLights_StatusFlag 1E90  
             _getDimmerLights_StatusFlag 1E86                   __end_of_setDelayOff_GO 0BC9  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0989  
                           ___ftadd@sign 0048                                      l100 17A9  
                                    l101 17A5                                      l102 1793  
                                    l104 17A3                                      l243 0AD9  
                                    l316 1098                                      l317 1099  
                                    l360 12CB                                      l781 156F  
                                    _GIE 005F                                      _CRC 00CF  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 00BE  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00CB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00C6  
                                    _ISR 0004          setPowerFault_Exceptions@command 0030  
                                    _Sw1 01CF                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 10A2           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1DDE                          __end_of_ADC_Set 1E43  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0E72  
                  _setDimmerLights_ERROR 17B0                    _setDimmerLights_AdjRF 12A3  
                  _setDimmerLights_AdjGo 1FCF                  __size_of_setTemp_Enable 0008  
                                   ?_ISR 0070                          _PowerFault_Main 1DE4  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1F0F  
                           ___ftdiv@sign 003D                                     l1241 0829  
                                   l1250 15FD                                     l1228 11B7  
               ?_DimmerLightsPointSelect 0070                                     l2236 1F82  
                                   l1702 14B2                          __end_of_IOC_Set 1F29  
                                   l2711 0A72                                     l2537 16D5  
                                   l1906 141F                                     l2740 03D3  
                                   l2717 0A89                                     l5213 1225  
                                   l5301 068B                                     l1933 14EB  
                                   l1870 0D71                                     l6103 0CA3  
                                   l6111 0CAF                                     l1871 0D60  
                                   l1863 0D2F                                     l6121 0CC1  
                                   l6105 0CA6                                     l5225 035C  
                                   l5323 06E5                                     l5315 06CC  
                                   l5235 0372                                     l1868 0D4C  
                                   l5421 0FF7                                     l5413 0FDD  
                                   l5405 0FC2                                     l6205 1516  
                                   l6141 0CD8                                     l6125 0CC7  
                                   l6109 0CAC                                     l6053 0AA7  
                                   l5253 039F                                     l5229 0363  
                                   l5183 0A4F                                     l5415 0FE6  
                                   l5407 0FD0                                     l6143 0CF0  
                                   l6119 0CBE                                     l6055 0AAA  
                                   l5271 03E5                                     l5255 03A9  
                                   l5247 038C                                     l5343 05D7  
                                   l7015 0244                                     l1888 1F77  
                                   l5193 0A77                                     l5185 0A59  
                                   l5417 0FE9                                     l6073 0AC1  
                                   l5265 03C5                                     l5257 03AE  
                                   l5337 05C1                                     l7025 0271  
                                   l5523 0846                                     l5195 0A7F  
                                   l5187 0A5E                                     l5179 0A48  
                                   l6251 0811                                     l6155 0D07  
                                   l6091 0AF5                                     l6083 0AE8  
                                   l6059 0AB0                                     l5275 03F7  
                                   l5267 03CF                                     l5259 03B2  
                                   l5371 0636                                     l5355 0612  
                                   l5443 1085                                     l6411 0C7B  
                                   l6165 12DC                                     l6173 1201  
                                   l5541 086C                                     l5533 084E  
                                   l5517 083B                                     l5605 07EE  
                                   l6085 0AEC                                     l6077 0ADF  
                                   l5285 0412                                     l6167 12E7  
                                   l6175 1204                                     l6431 15AB  
                                   l5535 085A                                     l5295 0675  
                                   l6087 0AEF                                     l6079 0AE2  
                                   l5367 062E                                     l5359 061A  
                                   l5439 107F                                     l7039 02AF  
                                   l6441 15BB                                     l6425 15A2  
                                   l5545 0875                                     l7049 02E1  
                                   l6179 120A                                     l6435 15B2  
                                   l6427 15A5                                     l5387 0F92  
                                   l7085 177D                                     l6437 15B5  
                                   l5549 087D                                     l5469 1365  
                                   l7237 147E                                     l5911 1118  
                                   l7431 1253                                     l7511 0EC7  
                                   l5903 14D9                                     l5671 0B9B  
                                   l6375 091E                                     l5913 111B  
                                   l7177 049C                                     l5745 142F  
                                   l5681 0BBA                                     l7427 1248  
                                   l7443 0B11                                     l7451 0B1D  
                                   l5675 0BA1                                     l5917 1121  
                                   l7461 0B2D                                     l7541 156B  
                                   l7533 1553                                     l5933 1270  
                                   l5677 0BAE                                     l7605 172C  
                                   l7447 0B17                                     l5927 1267  
                                   l7703 0F0F                                     l7295 16BE  
                                   l7473 0B4C                                     l7481 0B58  
                                   l7457 0B27                                     l7465 0B33  
                                   l5929 126A                                     l5865 0724  
                                   l7617 1742                                     l7705 0F15  
                                   l6753 11CC                                     l6771 15DD  
                                   l7539 1566                                     l5795 10EE  
                                   l5875 0746                                     l7571 0C1E  
                                   l6747 11C4                                     l7477 0B52  
                                   l6765 15C8                                     l5797 10F2  
                                   l7565 0C03                                     l6749 11C7  
                                   l7647 09B0                                     l5879 075C  
                                   l7575 0C27                                     l7583 1671  
                                   l7727 0F42                                     l7649 09B6  
                                   l7681 1710                                     l7761 0D9E  
                                   l7737 0F59                                     l7913 08A8  
                                   l7659 09DE                                     l7763 0DA4  
                                   l7819 0D23                                     l7587 167D  
                                   l7739 0F5B                                     l7685 1717  
                                   l6981 1F8D                                     l7917 08B3  
                  _myMain_Initialization 1F90                                     l7839 0D3F  
                                   l7785 0DD2                                     l6977 1F87  
                                   l7797 0DF0                                     l7789 0DE0  
                                   l7799 0DF2                                     l6999 020F  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4005 063D  
                                   u4035 0F99                                     u4305 086D  
                                   u4065 0FC3                                     u3515 0A6D  
                                   u3535 0A7A                                     u4095 0FDE  
                                   u4175 1351                                     u4265 0851  
                                   u4370 079C                                     u5075 12D1  
                                   u3715 03A0                                     _PEIE 005E  
                                   u4285 085B                                     u3565 0A90  
                                   u4615 1107                                     u4295 0865  
                                   u3495 0A54                                     u4375 079A  
                                   u3745 03B3                                     u3845 069D  
                                   u3685 038D                                     u3925 05E3  
                                   u3855 06AD                                     u3775 03C6  
                                   u3935 05F3                                     u3865 06CD  
                                   u3875 06DC                                     u3955 061B  
                                   u3885 06E6                                     u3965 0621  
                                   u6555 1773                                     u3995 0637  
                                   u6805 16A2                                     u6735 11AE  
                                   u6815 16CD                                     u6755 1475  
                                   u6765 1484                                     u6785 130A  
                                   _LWLO 0CAD                                     _RFSW 007A  
                                   _TMR0 0015                                     _RSSI 00D3  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 0884                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 1DE4                      __end_of_DlyOff_Main 0E72  
                        __end_of_RF_Main 1DED                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1E27                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 148D                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1500                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 0076  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1F02            __end_of_DimmerIntrPointSelect 1E86  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
              setPowerFault_Exceptions@i 002F                                    ?_main 0069  
                        __end_of___awdiv 0884                          __end_of___ftadd 042A  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0707  
                        __end_of___ftmul 065E                          ___awdiv@divisor 0020  
                        __end_of___fttol 1000             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                   _setDimmerLights_Switch 1F9F  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1110  
                          __CFG_WRT$HALF 0000                                    _Temp1 00D9  
     __end_of_setDimmerLights_IntrIOC_GO 117B               _setDimmerLights_IntrIOC_GO 115C  
                       __end_of_TMR0_ISR 12A3             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1E52                                    _getAD 11B9  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 157E  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 16D7  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0012  
          __end_of_setLED_Initialization 107C                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0792  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 09E4  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 08D9  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E0E  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0EF3                     _setSw_Initialization 1FBF  
                setOverTemp_Exceptions@i 002F                                   ??_main 006D  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0BC9                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 1DE7                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1EBC                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008B  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0024  
                   __end_of_getTemp_Safe 1E16                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0DF8  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                      ?_getPowerFault_AD 0070                         ___awdiv@dividend 0022  
                       __end_of___awtoft 123C                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0AA0                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1FAF                                   i1l6611 01D3  
                                 i1l6571 0128                                   i1l6563 0106  
                                 i1l6539 00A3                                   i1l6557 00ED  
                                 i1l6565 010C                                   i1l6575 013F  
                                 i1l6559 00F3                                   i1l6585 016E  
                                 i1l6587 0174                                   i1l6579 0153  
                                 i1l6597 01A7                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 u552_25 007C                                   _OSCCON 0099  
                                 u666_25 129C                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1129  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E2E  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 10CB  
                                 _Dimmer 00D0                                   _DlySw1 0162  
             __end_of_Mcu_Initialization 1F63                      __end_of_Buzzer_Main 17B0  
                                 _Memory 013D                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1FEF               _setDimmerLights_TriggerAdj 1FDF  
                                 ___bmul 107C            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D7                                   _s_data 00D8  
                                 _setLED 0B01                                   _myMain 00A0  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 0930                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 01F9  
            _setDimmerLights_IntrControl 0043                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1ED2                  getPowerFault_AD@channel 0025  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1E62  
                        _RfSWPointSelect 1EBC             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1F81  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0A3F  
       __end_of_CC2500_registers_address 102F     __end_of_setPowerFault_Initialization 1E12  
  __size_of_setPowerFault_Initialization 0004             _setPowerFault_Initialization 1E0E  
                __end_of__initialization 003F              ??_PowerFault_Initialization 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 11D9  
                          __end_of_getAD 11D9                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1EEA                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0041                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1E1B                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1E2E                       __size_of_getRxData 0048  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1E6A  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D1                     __size_of_setLED_Main 0047  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1DF0                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006D                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1766  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1DF6  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0024                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E02  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 1E5A  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 006D                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 0884  
                    _CC2500_WriteCommand 1110                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00B9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0021  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E3C  
              _PowerFault_Initialization 1DE1                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1457             __end_of_setRF_Initialization 1E4A  
                  __size_of_getTemp_Safe 0004                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 14C6                  __end_of_RfSWPointSelect 1EC7  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1F02  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1F1C  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 119A                        _Flash_Memory_Read 1142  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0070  
                 __size_of_CC2500_TxData 0061                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1DEA                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 0C30  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 08D9                          _setPercentValue 1605  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00EB             __end_of_CC2500_FrequencyCabr 1EDE  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 2000  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0167                                  _VarLED2 016B  
                      __end_of_getRxData 1766               __end_of_setPowerFault_Main 0DF8  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1E9B  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1FBF  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1E12  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1FAF                                  ___awdiv 0830  
                                ___ftadd 0334                           ??_setSw_Enable 0022  
                                ___ftdiv 065E                                  ___ftmul 05AA  
                                ___fttol 0F79                      __end_of_Switch_Main 106A  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0062                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 1691  
                                __ptext2 1E62                                  __ptext3 1F90  
                                __ptext4 1457                                  __ptext5 12EC  
                                __ptext6 11B9                                  __ptext7 1DF3  
                                __ptext8 0EF3                                  __ptext9 164B  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1E7C                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 11B9                __end_of_Flash_Memory_Read 115C  
                             _setRF_Main 0D0F                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E06                        _DimmerLights_Main 1E35  
                                _my_Main 1691           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1EB1  
             __end_of_CC2500_ClearRXFIFO 1DFA                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1DFE            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006F                           _LedPointSelect 123C  
                    _DelayOffPointSelect 1E9B                                  clrloop0 1E22  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1E7C  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 1313                            _DelayTime_1us 12C6  
                      __end_of_setTxData 05AA               __end_of_Flash_Memory_Write 0830  
                                init_ram 1E1B                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1E1C                               _setSw_Main 01F9  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 125E  
                            ?_getPF_Safe 0070                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 106A                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0C9F  
                          _CC2500_TxData 0AA0                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1F45           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0027  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 15C1                  _DimmerLights_Exceptions 153D  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E6A  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1E3C  
                     _Mcu_Initialization 1F54                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4927 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 125E                  __end_of_Sw_DimmerOnFunc 0930  
                __end_of_setPercentValue 164B                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 133D                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 14C6                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1500                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1280                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1142  
                   _setRF_Initialization 1E43                              _Switch_Main 1066  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1EB1  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 10B6  
                   ??_Mcu_Initialization 0020                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 108E  
              __size_of_Sw_DimmerAdjFunc 0031                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1E90                        __size_of_TMR0_ISR 0023  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 10E1  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 0B63  
                         __end_of_setBuz 0989                     _CC2500_FrequencyCabr 1ED2  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0707                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1422                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10B6                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 119A          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F79                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1F72                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1E16                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0018                                _VarErrLED 00E7  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1F54                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000E                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1DF3                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                              _Rx_Length 00D4                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D5  
                            __pdataBANK3 01A0                                 ??_setLED 0022  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1DFE  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 1457  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4057 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0081  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0022                   _setOverTemp_Exceptions 164B  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C0                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0073  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1DED                                _getBuz_GO 1FEF  
                       _getPowerFault_AD 12EC        __size_of_setPowerFault_Exceptions 0039  
    __end_of_Flash_Memory_Initialization 04F1              _Flash_Memory_Initialization 042A  
                               ?___awdiv 0020                ?_setPowerFault_Exceptions 0070  
                              __ptext100 1FAF                                __ptext101 1F9F  
                              __ptext110 157E                                __ptext102 1EB1  
                              __ptext111 1313                                __ptext103 0930  
                              __ptext120 10F8                                __ptext112 117B  
                              __ptext104 0830                                __ptext121 108E  
                              __ptext113 11F9                                __ptext105 1E02  
                              __ptext130 115C                                __ptext122 1766  
                              __ptext114 1ED2                                __ptext106 1EA6  
                              __ptext131 1E90                                __ptext123 1DDE  
                              __ptext115 12C6                                __ptext107 1E9B  
                              __ptext116 1DFA                                __ptext108 10B6  
                              __ptext125 1280                                __ptext117 1DF6  
                              __ptext109 1DFE                                 ?___ftadd 003E  
                              __ptext126 0043                                __ptext118 1110  
                              __ptext127 1E7C                                __ptext119 1E16  
                              __ptext128 1F02                                __ptext129 1E27  
                              _getRxData 171E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0792            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1DE1  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F90  
                     _setPowerFault_Main 0D82       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0050                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 013B  
          __end_of_setDimmerLights_ERROR 1800             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12C6            __end_of_setDimmerLights_AdjGo 1FDF  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00D6           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F9F  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0020  
                           _setRF_Enable 1F37                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1EC7                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 171E                      _DimmerLightsIntrIOC 00D2  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1DF3  
                      _CC2500_rfSettings 102F                                 _LED_Main 1EF6  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 1E21                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 04F1      __end_of_DimmerLights_Initialization 1F1C  
            _DimmerLights_Initialization 1F0F                       _CC2500_ClearRXFIFO 1DF6  
                     _CC2500_ClearTXFIFO 1DFA           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E5A                     ??_setPowerFault_Main 0031  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003A                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 0801                               ?_getRxData 0070  
                               _TMR0_ISR 1280                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR0_Set 1E4A  
                       _Sw_DimmerAdjFunc 13BF                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00CD                     __end_of_RF_RxDisable 1F81  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1129  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0C30  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 000F                                 _DelayOff 0078  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                     __end_of_getPF_Safe 1E62                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EEA                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0023                      __end_of_setLog_Code 1422  
                  _DlyOff_Initialization 1EA6                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E0A                    _Switch_Initialization 1E73  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1F29                             _setMemory_GO 10CB  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 148D  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 108E  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      ??_PowerFault_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 1392  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1367  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0EF3  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1F63                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 121A  
                       ??_LedPointSelect 0020                                 ___ftpack 0A3F  
                           _setSw_Status 1F45                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 16D7                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 07FE                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                         __size_of_my_Main 0046  
                               __ptext10 1E5A                                 __ptext11 1DF0  
                               __ptext20 1FCF                                 __ptext12 1DED  
                               __ptext21 1E73                                 __ptext13 1066  
                               __ptext30 0B63                                 __ptext22 1FBF  
                               __ptext14 01F9                                 __ptext31 133D  
                               __ptext23 1F81                                 __ptext15 1E52  
                               __ptext40 1F72                                 __ptext32 107C  
                               __ptext24 1DEA                                 __ptext16 08D9  
                               __ptext41 0AA0                                 __ptext33 14C6  
                               __ptext25 0D0F                                 __ptext17 0C30  
                               __ptext50 1F63                                 __ptext42 0C9F  
                               __ptext34 1422                                 __ptext26 171E  
                               __ptext18 13BF                                 __ptext51 1F37  
                               __ptext43 125E                                 __ptext35 12A3  
                               __ptext27 13F0                                 __ptext19 1FDF  
                               __ptext60 1129                                 __ptext52 153D  
                               __ptext44 10E1                                 __ptext36 09E4  
                               __ptext28 0BC9                                 __ptext61 1F1C  
                               __ptext53 1367                                 __ptext45 1DE7  
                               __ptext37 05AA                                 __ptext29 0707  
                               __ptext70 1EDE                                 __ptext62 1E0A  
                               __ptext54 17B0                                 __ptext46 1E43  
                               __ptext38 0334                                 __ptext71 042A  
                               __ptext63 1E3C                                 __ptext55 1E12  
                               __ptext47 1DE4                                 __ptext39 1FEF  
                               __ptext80 123C                                 __ptext72 0801  
                               __ptext64 1EF6                                 __ptext56 1DE1  
                               __ptext48 0D82                                 __ptext81 10A2  
                               __ptext73 1E6A                                 __ptext65 16D7  
                               __ptext57 1E0E                                 __ptext49 148D  
                               __ptext90 1F45                                 __ptext82 10CB  
                               __ptext74 1142                                 __ptext66 1EEA  
                               __ptext58 1F54                                 __ptext91 1EC7  
                               __ptext83 1E86                                 __ptext75 1E35  
                               __ptext67 106A                                 __ptext59 1E4A  
                               __ptext92 0792                                 __ptext84 1F0F  
                               __ptext76 0989                                 __ptext68 119A  
                               __ptext93 1605                                 __ptext85 1392  
                               __ptext77 1500                                 __ptext69 15C1  
                               __ptext94 0F79                                 __ptext86 1E2E  
                               __ptext78 0E72                                 __ptext95 065E  
                               __ptext87 1E06                                 __ptext79 0B01  
                               __ptext96 121A                                 __ptext88 0DF8  
                               __ptext97 0A3F                                 __ptext89 04F1  
                               __ptext98 1F29                                 __ptext99 1EBC  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 000B  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1F37  
          __end_of_Dimmer_Initialization 1E35             __end_of_setDimmerLights_Main 09E4  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0021                            __size_of_main 0055  
                            _setRF_Learn 1E52                 __end_of_CC2500_SIDLEMode 1E02  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1EA6  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 10A2  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0007  
                            getPF_Safe@i 0020                          _CC2500_ReadByte 10E1  
                     _CC2500_InitPATable 117B      __size_of_getDimmerLights_StatusFlag 000A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0D82  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 000F  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 0069            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006B                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 157E              __end_of_Flash_Memory_Modify 1605  
                      ??_getPercentValue 0059                              _setLog_Code 13F0  
            __end_of_Flash_Memory_Unlock 1E73                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 11F9                       __end_of_setSw_Main 0334  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 133D  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 1313  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13BF  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 1392  
            __end_of_setDimmerLights_Adj 153D                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1DE7  
   __size_of_setDimmerLights_IntrControl 01B6                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1EDE                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1E06  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 1E0A                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0B63         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 1367           __end_of_setOverTemp_Exceptions 1691  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 12EC  
               __end_of_Sw_DimmerAdjFunc 13F0                  __end_of_CC2500_ReadByte 10F8  
           __end_of_setSw_Initialization 1FCF                          _Timeout_Counter 10F8  
                   getPercentValue@value 005B                             _RF_RxDisable 1F72  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 1EF6  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1DF0  
               __size_of_Sw_DimmerOnFunc 0057                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DEA                 __end_of_Sw_DimmerOffFunc 0C9F  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0D0F                    __end_of_CC2500_TxData 0B01  
                         ??_getTemp_Safe 0020                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 15C1  
