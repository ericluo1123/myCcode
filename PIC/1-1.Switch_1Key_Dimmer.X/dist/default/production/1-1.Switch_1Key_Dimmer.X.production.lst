

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Oct 20 15:25:54 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	intentry,global,class=CODE,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   151                           	dabs	1,0x7E,2
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0015                     	;# 
   171  0016                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001C                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  0090                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0099                     	;# 
   189  009A                     	;# 
   190  009B                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  010C                     	;# 
   196  010D                     	;# 
   197  010E                     	;# 
   198  0116                     	;# 
   199  0117                     	;# 
   200  011D                     	;# 
   201  018C                     	;# 
   202  018D                     	;# 
   203  018E                     	;# 
   204  0191                     	;# 
   205  0191                     	;# 
   206  0192                     	;# 
   207  0193                     	;# 
   208  0193                     	;# 
   209  0194                     	;# 
   210  0195                     	;# 
   211  0196                     	;# 
   212  0197                     	;# 
   213  0199                     	;# 
   214  019A                     	;# 
   215  019B                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019C                     	;# 
   220  019C                     	;# 
   221  019D                     	;# 
   222  019E                     	;# 
   223  019F                     	;# 
   224  020D                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0213                     	;# 
   232  0214                     	;# 
   233  0214                     	;# 
   234  0215                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0216                     	;# 
   238  0216                     	;# 
   239  0217                     	;# 
   240  0217                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0298                     	;# 
   246  0298                     	;# 
   247  0299                     	;# 
   248  029A                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0FE4                     	;# 
   253  0FE5                     	;# 
   254  0FE6                     	;# 
   255  0FE7                     	;# 
   256  0FE8                     	;# 
   257  0FE9                     	;# 
   258  0FEA                     	;# 
   259  0FEB                     	;# 
   260  0FED                     	;# 
   261  0FEE                     	;# 
   262  0FEF                     	;# 
   263  0000                     	;# 
   264  0001                     	;# 
   265  0002                     	;# 
   266  0003                     	;# 
   267  0004                     	;# 
   268  0005                     	;# 
   269  0006                     	;# 
   270  0007                     	;# 
   271  0008                     	;# 
   272  0009                     	;# 
   273  000A                     	;# 
   274  000B                     	;# 
   275  000C                     	;# 
   276  000D                     	;# 
   277  000E                     	;# 
   278  0010                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0015                     	;# 
   282  0016                     	;# 
   283  0016                     	;# 
   284  0017                     	;# 
   285  0018                     	;# 
   286  0019                     	;# 
   287  001A                     	;# 
   288  001B                     	;# 
   289  001C                     	;# 
   290  008C                     	;# 
   291  008D                     	;# 
   292  008E                     	;# 
   293  0090                     	;# 
   294  0091                     	;# 
   295  0092                     	;# 
   296  0095                     	;# 
   297  0096                     	;# 
   298  0097                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010D                     	;# 
   308  010E                     	;# 
   309  0116                     	;# 
   310  0117                     	;# 
   311  011D                     	;# 
   312  018C                     	;# 
   313  018D                     	;# 
   314  018E                     	;# 
   315  0191                     	;# 
   316  0191                     	;# 
   317  0192                     	;# 
   318  0193                     	;# 
   319  0193                     	;# 
   320  0194                     	;# 
   321  0195                     	;# 
   322  0196                     	;# 
   323  0197                     	;# 
   324  0199                     	;# 
   325  019A                     	;# 
   326  019B                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019C                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020D                     	;# 
   336  0210                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0291                     	;# 
   353  0291                     	;# 
   354  0292                     	;# 
   355  0293                     	;# 
   356  0298                     	;# 
   357  0298                     	;# 
   358  0299                     	;# 
   359  029A                     	;# 
   360  0394                     	;# 
   361  0395                     	;# 
   362  0396                     	;# 
   363  0FE4                     	;# 
   364  0FE5                     	;# 
   365  0FE6                     	;# 
   366  0FE7                     	;# 
   367  0FE8                     	;# 
   368  0FE9                     	;# 
   369  0FEA                     	;# 
   370  0FEB                     	;# 
   371  0FED                     	;# 
   372  0FEE                     	;# 
   373  0FEF                     	;# 
   374  0000                     	;# 
   375  0001                     	;# 
   376  0002                     	;# 
   377  0003                     	;# 
   378  0004                     	;# 
   379  0005                     	;# 
   380  0006                     	;# 
   381  0007                     	;# 
   382  0008                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  0010                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0015                     	;# 
   393  0016                     	;# 
   394  0016                     	;# 
   395  0017                     	;# 
   396  0018                     	;# 
   397  0019                     	;# 
   398  001A                     	;# 
   399  001B                     	;# 
   400  001C                     	;# 
   401  008C                     	;# 
   402  008D                     	;# 
   403  008E                     	;# 
   404  0090                     	;# 
   405  0091                     	;# 
   406  0092                     	;# 
   407  0095                     	;# 
   408  0096                     	;# 
   409  0097                     	;# 
   410  0099                     	;# 
   411  009A                     	;# 
   412  009B                     	;# 
   413  009B                     	;# 
   414  009C                     	;# 
   415  009D                     	;# 
   416  009E                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  0116                     	;# 
   421  0117                     	;# 
   422  011D                     	;# 
   423  018C                     	;# 
   424  018D                     	;# 
   425  018E                     	;# 
   426  0191                     	;# 
   427  0191                     	;# 
   428  0192                     	;# 
   429  0193                     	;# 
   430  0193                     	;# 
   431  0194                     	;# 
   432  0195                     	;# 
   433  0196                     	;# 
   434  0197                     	;# 
   435  0199                     	;# 
   436  019A                     	;# 
   437  019B                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019C                     	;# 
   442  019C                     	;# 
   443  019D                     	;# 
   444  019E                     	;# 
   445  019F                     	;# 
   446  020D                     	;# 
   447  0210                     	;# 
   448  0211                     	;# 
   449  0211                     	;# 
   450  0212                     	;# 
   451  0212                     	;# 
   452  0213                     	;# 
   453  0213                     	;# 
   454  0214                     	;# 
   455  0214                     	;# 
   456  0215                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0216                     	;# 
   460  0216                     	;# 
   461  0217                     	;# 
   462  0217                     	;# 
   463  0291                     	;# 
   464  0291                     	;# 
   465  0292                     	;# 
   466  0293                     	;# 
   467  0298                     	;# 
   468  0298                     	;# 
   469  0299                     	;# 
   470  029A                     	;# 
   471  0394                     	;# 
   472  0395                     	;# 
   473  0396                     	;# 
   474  0FE4                     	;# 
   475  0FE5                     	;# 
   476  0FE6                     	;# 
   477  0FE7                     	;# 
   478  0FE8                     	;# 
   479  0FE9                     	;# 
   480  0FEA                     	;# 
   481  0FEB                     	;# 
   482  0FED                     	;# 
   483  0FEE                     	;# 
   484  0FEF                     	;# 
   485  0000                     	;# 
   486  0001                     	;# 
   487  0002                     	;# 
   488  0003                     	;# 
   489  0004                     	;# 
   490  0005                     	;# 
   491  0006                     	;# 
   492  0007                     	;# 
   493  0008                     	;# 
   494  0009                     	;# 
   495  000A                     	;# 
   496  000B                     	;# 
   497  000C                     	;# 
   498  000D                     	;# 
   499  000E                     	;# 
   500  0010                     	;# 
   501  0011                     	;# 
   502  0012                     	;# 
   503  0015                     	;# 
   504  0016                     	;# 
   505  0016                     	;# 
   506  0017                     	;# 
   507  0018                     	;# 
   508  0019                     	;# 
   509  001A                     	;# 
   510  001B                     	;# 
   511  001C                     	;# 
   512  008C                     	;# 
   513  008D                     	;# 
   514  008E                     	;# 
   515  0090                     	;# 
   516  0091                     	;# 
   517  0092                     	;# 
   518  0095                     	;# 
   519  0096                     	;# 
   520  0097                     	;# 
   521  0099                     	;# 
   522  009A                     	;# 
   523  009B                     	;# 
   524  009B                     	;# 
   525  009C                     	;# 
   526  009D                     	;# 
   527  009E                     	;# 
   528  010C                     	;# 
   529  010D                     	;# 
   530  010E                     	;# 
   531  0116                     	;# 
   532  0117                     	;# 
   533  011D                     	;# 
   534  018C                     	;# 
   535  018D                     	;# 
   536  018E                     	;# 
   537  0191                     	;# 
   538  0191                     	;# 
   539  0192                     	;# 
   540  0193                     	;# 
   541  0193                     	;# 
   542  0194                     	;# 
   543  0195                     	;# 
   544  0196                     	;# 
   545  0197                     	;# 
   546  0199                     	;# 
   547  019A                     	;# 
   548  019B                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019C                     	;# 
   553  019C                     	;# 
   554  019D                     	;# 
   555  019E                     	;# 
   556  019F                     	;# 
   557  020D                     	;# 
   558  0210                     	;# 
   559  0211                     	;# 
   560  0211                     	;# 
   561  0212                     	;# 
   562  0212                     	;# 
   563  0213                     	;# 
   564  0213                     	;# 
   565  0214                     	;# 
   566  0214                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0216                     	;# 
   571  0216                     	;# 
   572  0217                     	;# 
   573  0217                     	;# 
   574  0291                     	;# 
   575  0291                     	;# 
   576  0292                     	;# 
   577  0293                     	;# 
   578  0298                     	;# 
   579  0298                     	;# 
   580  0299                     	;# 
   581  029A                     	;# 
   582  0394                     	;# 
   583  0395                     	;# 
   584  0396                     	;# 
   585  0FE4                     	;# 
   586  0FE5                     	;# 
   587  0FE6                     	;# 
   588  0FE7                     	;# 
   589  0FE8                     	;# 
   590  0FE9                     	;# 
   591  0FEA                     	;# 
   592  0FEB                     	;# 
   593  0FED                     	;# 
   594  0FEE                     	;# 
   595  0FEF                     	;# 
   596  0000                     	;# 
   597  0001                     	;# 
   598  0002                     	;# 
   599  0003                     	;# 
   600  0004                     	;# 
   601  0005                     	;# 
   602  0006                     	;# 
   603  0007                     	;# 
   604  0008                     	;# 
   605  0009                     	;# 
   606  000A                     	;# 
   607  000B                     	;# 
   608  000C                     	;# 
   609  000D                     	;# 
   610  000E                     	;# 
   611  0010                     	;# 
   612  0011                     	;# 
   613  0012                     	;# 
   614  0015                     	;# 
   615  0016                     	;# 
   616  0016                     	;# 
   617  0017                     	;# 
   618  0018                     	;# 
   619  0019                     	;# 
   620  001A                     	;# 
   621  001B                     	;# 
   622  001C                     	;# 
   623  008C                     	;# 
   624  008D                     	;# 
   625  008E                     	;# 
   626  0090                     	;# 
   627  0091                     	;# 
   628  0092                     	;# 
   629  0095                     	;# 
   630  0096                     	;# 
   631  0097                     	;# 
   632  0099                     	;# 
   633  009A                     	;# 
   634  009B                     	;# 
   635  009B                     	;# 
   636  009C                     	;# 
   637  009D                     	;# 
   638  009E                     	;# 
   639  010C                     	;# 
   640  010D                     	;# 
   641  010E                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  011D                     	;# 
   645  018C                     	;# 
   646  018D                     	;# 
   647  018E                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0194                     	;# 
   654  0195                     	;# 
   655  0196                     	;# 
   656  0197                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020D                     	;# 
   669  0210                     	;# 
   670  0211                     	;# 
   671  0211                     	;# 
   672  0212                     	;# 
   673  0212                     	;# 
   674  0213                     	;# 
   675  0213                     	;# 
   676  0214                     	;# 
   677  0214                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0216                     	;# 
   682  0216                     	;# 
   683  0217                     	;# 
   684  0217                     	;# 
   685  0291                     	;# 
   686  0291                     	;# 
   687  0292                     	;# 
   688  0293                     	;# 
   689  0298                     	;# 
   690  0298                     	;# 
   691  0299                     	;# 
   692  029A                     	;# 
   693  0394                     	;# 
   694  0395                     	;# 
   695  0396                     	;# 
   696  0FE4                     	;# 
   697  0FE5                     	;# 
   698  0FE6                     	;# 
   699  0FE7                     	;# 
   700  0FE8                     	;# 
   701  0FE9                     	;# 
   702  0FEA                     	;# 
   703  0FEB                     	;# 
   704  0FED                     	;# 
   705  0FEE                     	;# 
   706  0FEF                     	;# 
   707  0000                     	;# 
   708  0001                     	;# 
   709  0002                     	;# 
   710  0003                     	;# 
   711  0004                     	;# 
   712  0005                     	;# 
   713  0006                     	;# 
   714  0007                     	;# 
   715  0008                     	;# 
   716  0009                     	;# 
   717  000A                     	;# 
   718  000B                     	;# 
   719  000C                     	;# 
   720  000D                     	;# 
   721  000E                     	;# 
   722  0010                     	;# 
   723  0011                     	;# 
   724  0012                     	;# 
   725  0015                     	;# 
   726  0016                     	;# 
   727  0016                     	;# 
   728  0017                     	;# 
   729  0018                     	;# 
   730  0019                     	;# 
   731  001A                     	;# 
   732  001B                     	;# 
   733  001C                     	;# 
   734  008C                     	;# 
   735  008D                     	;# 
   736  008E                     	;# 
   737  0090                     	;# 
   738  0091                     	;# 
   739  0092                     	;# 
   740  0095                     	;# 
   741  0096                     	;# 
   742  0097                     	;# 
   743  0099                     	;# 
   744  009A                     	;# 
   745  009B                     	;# 
   746  009B                     	;# 
   747  009C                     	;# 
   748  009D                     	;# 
   749  009E                     	;# 
   750  010C                     	;# 
   751  010D                     	;# 
   752  010E                     	;# 
   753  0116                     	;# 
   754  0117                     	;# 
   755  011D                     	;# 
   756  018C                     	;# 
   757  018D                     	;# 
   758  018E                     	;# 
   759  0191                     	;# 
   760  0191                     	;# 
   761  0192                     	;# 
   762  0193                     	;# 
   763  0193                     	;# 
   764  0194                     	;# 
   765  0195                     	;# 
   766  0196                     	;# 
   767  0197                     	;# 
   768  0199                     	;# 
   769  019A                     	;# 
   770  019B                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019C                     	;# 
   776  019D                     	;# 
   777  019E                     	;# 
   778  019F                     	;# 
   779  020D                     	;# 
   780  0210                     	;# 
   781  0211                     	;# 
   782  0211                     	;# 
   783  0212                     	;# 
   784  0212                     	;# 
   785  0213                     	;# 
   786  0213                     	;# 
   787  0214                     	;# 
   788  0214                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0216                     	;# 
   793  0216                     	;# 
   794  0217                     	;# 
   795  0217                     	;# 
   796  0291                     	;# 
   797  0291                     	;# 
   798  0292                     	;# 
   799  0293                     	;# 
   800  0298                     	;# 
   801  0298                     	;# 
   802  0299                     	;# 
   803  029A                     	;# 
   804  0394                     	;# 
   805  0395                     	;# 
   806  0396                     	;# 
   807  0FE4                     	;# 
   808  0FE5                     	;# 
   809  0FE6                     	;# 
   810  0FE7                     	;# 
   811  0FE8                     	;# 
   812  0FE9                     	;# 
   813  0FEA                     	;# 
   814  0FEB                     	;# 
   815  0FED                     	;# 
   816  0FEE                     	;# 
   817  0FEF                     	;# 
   818  0000                     	;# 
   819  0001                     	;# 
   820  0002                     	;# 
   821  0003                     	;# 
   822  0004                     	;# 
   823  0005                     	;# 
   824  0006                     	;# 
   825  0007                     	;# 
   826  0008                     	;# 
   827  0009                     	;# 
   828  000A                     	;# 
   829  000B                     	;# 
   830  000C                     	;# 
   831  000D                     	;# 
   832  000E                     	;# 
   833  0010                     	;# 
   834  0011                     	;# 
   835  0012                     	;# 
   836  0015                     	;# 
   837  0016                     	;# 
   838  0016                     	;# 
   839  0017                     	;# 
   840  0018                     	;# 
   841  0019                     	;# 
   842  001A                     	;# 
   843  001B                     	;# 
   844  001C                     	;# 
   845  008C                     	;# 
   846  008D                     	;# 
   847  008E                     	;# 
   848  0090                     	;# 
   849  0091                     	;# 
   850  0092                     	;# 
   851  0095                     	;# 
   852  0096                     	;# 
   853  0097                     	;# 
   854  0099                     	;# 
   855  009A                     	;# 
   856  009B                     	;# 
   857  009B                     	;# 
   858  009C                     	;# 
   859  009D                     	;# 
   860  009E                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0116                     	;# 
   865  0117                     	;# 
   866  011D                     	;# 
   867  018C                     	;# 
   868  018D                     	;# 
   869  018E                     	;# 
   870  0191                     	;# 
   871  0191                     	;# 
   872  0192                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0197                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019B                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019C                     	;# 
   886  019C                     	;# 
   887  019D                     	;# 
   888  019E                     	;# 
   889  019F                     	;# 
   890  020D                     	;# 
   891  0210                     	;# 
   892  0211                     	;# 
   893  0211                     	;# 
   894  0212                     	;# 
   895  0212                     	;# 
   896  0213                     	;# 
   897  0213                     	;# 
   898  0214                     	;# 
   899  0214                     	;# 
   900  0215                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0216                     	;# 
   904  0216                     	;# 
   905  0217                     	;# 
   906  0217                     	;# 
   907  0291                     	;# 
   908  0291                     	;# 
   909  0292                     	;# 
   910  0293                     	;# 
   911  0298                     	;# 
   912  0298                     	;# 
   913  0299                     	;# 
   914  029A                     	;# 
   915  0394                     	;# 
   916  0395                     	;# 
   917  0396                     	;# 
   918  0FE4                     	;# 
   919  0FE5                     	;# 
   920  0FE6                     	;# 
   921  0FE7                     	;# 
   922  0FE8                     	;# 
   923  0FE9                     	;# 
   924  0FEA                     	;# 
   925  0FEB                     	;# 
   926  0FED                     	;# 
   927  0FEE                     	;# 
   928  0FEF                     	;# 
   929  0000                     	;# 
   930  0001                     	;# 
   931  0002                     	;# 
   932  0003                     	;# 
   933  0004                     	;# 
   934  0005                     	;# 
   935  0006                     	;# 
   936  0007                     	;# 
   937  0008                     	;# 
   938  0009                     	;# 
   939  000A                     	;# 
   940  000B                     	;# 
   941  000C                     	;# 
   942  000D                     	;# 
   943  000E                     	;# 
   944  0010                     	;# 
   945  0011                     	;# 
   946  0012                     	;# 
   947  0015                     	;# 
   948  0016                     	;# 
   949  0016                     	;# 
   950  0017                     	;# 
   951  0018                     	;# 
   952  0019                     	;# 
   953  001A                     	;# 
   954  001B                     	;# 
   955  001C                     	;# 
   956  008C                     	;# 
   957  008D                     	;# 
   958  008E                     	;# 
   959  0090                     	;# 
   960  0091                     	;# 
   961  0092                     	;# 
   962  0095                     	;# 
   963  0096                     	;# 
   964  0097                     	;# 
   965  0099                     	;# 
   966  009A                     	;# 
   967  009B                     	;# 
   968  009B                     	;# 
   969  009C                     	;# 
   970  009D                     	;# 
   971  009E                     	;# 
   972  010C                     	;# 
   973  010D                     	;# 
   974  010E                     	;# 
   975  0116                     	;# 
   976  0117                     	;# 
   977  011D                     	;# 
   978  018C                     	;# 
   979  018D                     	;# 
   980  018E                     	;# 
   981  0191                     	;# 
   982  0191                     	;# 
   983  0192                     	;# 
   984  0193                     	;# 
   985  0193                     	;# 
   986  0194                     	;# 
   987  0195                     	;# 
   988  0196                     	;# 
   989  0197                     	;# 
   990  0199                     	;# 
   991  019A                     	;# 
   992  019B                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019C                     	;# 
   997  019C                     	;# 
   998  019D                     	;# 
   999  019E                     	;# 
  1000  019F                     	;# 
  1001  020D                     	;# 
  1002  0210                     	;# 
  1003  0211                     	;# 
  1004  0211                     	;# 
  1005  0212                     	;# 
  1006  0212                     	;# 
  1007  0213                     	;# 
  1008  0213                     	;# 
  1009  0214                     	;# 
  1010  0214                     	;# 
  1011  0215                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0216                     	;# 
  1015  0216                     	;# 
  1016  0217                     	;# 
  1017  0217                     	;# 
  1018  0291                     	;# 
  1019  0291                     	;# 
  1020  0292                     	;# 
  1021  0293                     	;# 
  1022  0298                     	;# 
  1023  0298                     	;# 
  1024  0299                     	;# 
  1025  029A                     	;# 
  1026  0394                     	;# 
  1027  0395                     	;# 
  1028  0396                     	;# 
  1029  0FE4                     	;# 
  1030  0FE5                     	;# 
  1031  0FE6                     	;# 
  1032  0FE7                     	;# 
  1033  0FE8                     	;# 
  1034  0FE9                     	;# 
  1035  0FEA                     	;# 
  1036  0FEB                     	;# 
  1037  0FED                     	;# 
  1038  0FEE                     	;# 
  1039  0FEF                     	;# 
  1040  0000                     	;# 
  1041  0001                     	;# 
  1042  0002                     	;# 
  1043  0003                     	;# 
  1044  0004                     	;# 
  1045  0005                     	;# 
  1046  0006                     	;# 
  1047  0007                     	;# 
  1048  0008                     	;# 
  1049  0009                     	;# 
  1050  000A                     	;# 
  1051  000B                     	;# 
  1052  000C                     	;# 
  1053  000D                     	;# 
  1054  000E                     	;# 
  1055  0010                     	;# 
  1056  0011                     	;# 
  1057  0012                     	;# 
  1058  0015                     	;# 
  1059  0016                     	;# 
  1060  0016                     	;# 
  1061  0017                     	;# 
  1062  0018                     	;# 
  1063  0019                     	;# 
  1064  001A                     	;# 
  1065  001B                     	;# 
  1066  001C                     	;# 
  1067  008C                     	;# 
  1068  008D                     	;# 
  1069  008E                     	;# 
  1070  0090                     	;# 
  1071  0091                     	;# 
  1072  0092                     	;# 
  1073  0095                     	;# 
  1074  0096                     	;# 
  1075  0097                     	;# 
  1076  0099                     	;# 
  1077  009A                     	;# 
  1078  009B                     	;# 
  1079  009B                     	;# 
  1080  009C                     	;# 
  1081  009D                     	;# 
  1082  009E                     	;# 
  1083  010C                     	;# 
  1084  010D                     	;# 
  1085  010E                     	;# 
  1086  0116                     	;# 
  1087  0117                     	;# 
  1088  011D                     	;# 
  1089  018C                     	;# 
  1090  018D                     	;# 
  1091  018E                     	;# 
  1092  0191                     	;# 
  1093  0191                     	;# 
  1094  0192                     	;# 
  1095  0193                     	;# 
  1096  0193                     	;# 
  1097  0194                     	;# 
  1098  0195                     	;# 
  1099  0196                     	;# 
  1100  0197                     	;# 
  1101  0199                     	;# 
  1102  019A                     	;# 
  1103  019B                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019C                     	;# 
  1108  019C                     	;# 
  1109  019D                     	;# 
  1110  019E                     	;# 
  1111  019F                     	;# 
  1112  020D                     	;# 
  1113  0210                     	;# 
  1114  0211                     	;# 
  1115  0211                     	;# 
  1116  0212                     	;# 
  1117  0212                     	;# 
  1118  0213                     	;# 
  1119  0213                     	;# 
  1120  0214                     	;# 
  1121  0214                     	;# 
  1122  0215                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0216                     	;# 
  1126  0216                     	;# 
  1127  0217                     	;# 
  1128  0217                     	;# 
  1129  0291                     	;# 
  1130  0291                     	;# 
  1131  0292                     	;# 
  1132  0293                     	;# 
  1133  0298                     	;# 
  1134  0298                     	;# 
  1135  0299                     	;# 
  1136  029A                     	;# 
  1137  0394                     	;# 
  1138  0395                     	;# 
  1139  0396                     	;# 
  1140  0FE4                     	;# 
  1141  0FE5                     	;# 
  1142  0FE6                     	;# 
  1143  0FE7                     	;# 
  1144  0FE8                     	;# 
  1145  0FE9                     	;# 
  1146  0FEA                     	;# 
  1147  0FEB                     	;# 
  1148  0FED                     	;# 
  1149  0FEE                     	;# 
  1150  0FEF                     	;# 
  1151  0000                     	;# 
  1152  0001                     	;# 
  1153  0002                     	;# 
  1154  0003                     	;# 
  1155  0004                     	;# 
  1156  0005                     	;# 
  1157  0006                     	;# 
  1158  0007                     	;# 
  1159  0008                     	;# 
  1160  0009                     	;# 
  1161  000A                     	;# 
  1162  000B                     	;# 
  1163  000C                     	;# 
  1164  000D                     	;# 
  1165  000E                     	;# 
  1166  0010                     	;# 
  1167  0011                     	;# 
  1168  0012                     	;# 
  1169  0015                     	;# 
  1170  0016                     	;# 
  1171  0016                     	;# 
  1172  0017                     	;# 
  1173  0018                     	;# 
  1174  0019                     	;# 
  1175  001A                     	;# 
  1176  001B                     	;# 
  1177  001C                     	;# 
  1178  008C                     	;# 
  1179  008D                     	;# 
  1180  008E                     	;# 
  1181  0090                     	;# 
  1182  0091                     	;# 
  1183  0092                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0099                     	;# 
  1188  009A                     	;# 
  1189  009B                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010D                     	;# 
  1196  010E                     	;# 
  1197  0116                     	;# 
  1198  0117                     	;# 
  1199  011D                     	;# 
  1200  018C                     	;# 
  1201  018D                     	;# 
  1202  018E                     	;# 
  1203  0191                     	;# 
  1204  0191                     	;# 
  1205  0192                     	;# 
  1206  0193                     	;# 
  1207  0193                     	;# 
  1208  0194                     	;# 
  1209  0195                     	;# 
  1210  0196                     	;# 
  1211  0197                     	;# 
  1212  0199                     	;# 
  1213  019A                     	;# 
  1214  019B                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019C                     	;# 
  1219  019C                     	;# 
  1220  019D                     	;# 
  1221  019E                     	;# 
  1222  019F                     	;# 
  1223  020D                     	;# 
  1224  0210                     	;# 
  1225  0211                     	;# 
  1226  0211                     	;# 
  1227  0212                     	;# 
  1228  0212                     	;# 
  1229  0213                     	;# 
  1230  0213                     	;# 
  1231  0214                     	;# 
  1232  0214                     	;# 
  1233  0215                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0216                     	;# 
  1237  0216                     	;# 
  1238  0217                     	;# 
  1239  0217                     	;# 
  1240  0291                     	;# 
  1241  0291                     	;# 
  1242  0292                     	;# 
  1243  0293                     	;# 
  1244  0298                     	;# 
  1245  0298                     	;# 
  1246  0299                     	;# 
  1247  029A                     	;# 
  1248  0394                     	;# 
  1249  0395                     	;# 
  1250  0396                     	;# 
  1251  0FE4                     	;# 
  1252  0FE5                     	;# 
  1253  0FE6                     	;# 
  1254  0FE7                     	;# 
  1255  0FE8                     	;# 
  1256  0FE9                     	;# 
  1257  0FEA                     	;# 
  1258  0FEB                     	;# 
  1259  0FED                     	;# 
  1260  0FEE                     	;# 
  1261  0FEF                     	;# 
  1262  0000                     	;# 
  1263  0001                     	;# 
  1264  0002                     	;# 
  1265  0003                     	;# 
  1266  0004                     	;# 
  1267  0005                     	;# 
  1268  0006                     	;# 
  1269  0007                     	;# 
  1270  0008                     	;# 
  1271  0009                     	;# 
  1272  000A                     	;# 
  1273  000B                     	;# 
  1274  000C                     	;# 
  1275  000D                     	;# 
  1276  000E                     	;# 
  1277  0010                     	;# 
  1278  0011                     	;# 
  1279  0012                     	;# 
  1280  0015                     	;# 
  1281  0016                     	;# 
  1282  0016                     	;# 
  1283  0017                     	;# 
  1284  0018                     	;# 
  1285  0019                     	;# 
  1286  001A                     	;# 
  1287  001B                     	;# 
  1288  001C                     	;# 
  1289  008C                     	;# 
  1290  008D                     	;# 
  1291  008E                     	;# 
  1292  0090                     	;# 
  1293  0091                     	;# 
  1294  0092                     	;# 
  1295  0095                     	;# 
  1296  0096                     	;# 
  1297  0097                     	;# 
  1298  0099                     	;# 
  1299  009A                     	;# 
  1300  009B                     	;# 
  1301  009B                     	;# 
  1302  009C                     	;# 
  1303  009D                     	;# 
  1304  009E                     	;# 
  1305  010C                     	;# 
  1306  010D                     	;# 
  1307  010E                     	;# 
  1308  0116                     	;# 
  1309  0117                     	;# 
  1310  011D                     	;# 
  1311  018C                     	;# 
  1312  018D                     	;# 
  1313  018E                     	;# 
  1314  0191                     	;# 
  1315  0191                     	;# 
  1316  0192                     	;# 
  1317  0193                     	;# 
  1318  0193                     	;# 
  1319  0194                     	;# 
  1320  0195                     	;# 
  1321  0196                     	;# 
  1322  0197                     	;# 
  1323  0199                     	;# 
  1324  019A                     	;# 
  1325  019B                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019C                     	;# 
  1330  019C                     	;# 
  1331  019D                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  020D                     	;# 
  1335  0210                     	;# 
  1336  0211                     	;# 
  1337  0211                     	;# 
  1338  0212                     	;# 
  1339  0212                     	;# 
  1340  0213                     	;# 
  1341  0213                     	;# 
  1342  0214                     	;# 
  1343  0214                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0291                     	;# 
  1352  0291                     	;# 
  1353  0292                     	;# 
  1354  0293                     	;# 
  1355  0298                     	;# 
  1356  0298                     	;# 
  1357  0299                     	;# 
  1358  029A                     	;# 
  1359  0394                     	;# 
  1360  0395                     	;# 
  1361  0396                     	;# 
  1362  0FE4                     	;# 
  1363  0FE5                     	;# 
  1364  0FE6                     	;# 
  1365  0FE7                     	;# 
  1366  0FE8                     	;# 
  1367  0FE9                     	;# 
  1368  0FEA                     	;# 
  1369  0FEB                     	;# 
  1370  0FED                     	;# 
  1371  0FEE                     	;# 
  1372  0FEF                     	;# 
  1373  0000                     	;# 
  1374  0001                     	;# 
  1375  0002                     	;# 
  1376  0003                     	;# 
  1377  0004                     	;# 
  1378  0005                     	;# 
  1379  0006                     	;# 
  1380  0007                     	;# 
  1381  0008                     	;# 
  1382  0009                     	;# 
  1383  000A                     	;# 
  1384  000B                     	;# 
  1385  000C                     	;# 
  1386  000D                     	;# 
  1387  000E                     	;# 
  1388  0010                     	;# 
  1389  0011                     	;# 
  1390  0012                     	;# 
  1391  0015                     	;# 
  1392  0016                     	;# 
  1393  0016                     	;# 
  1394  0017                     	;# 
  1395  0018                     	;# 
  1396  0019                     	;# 
  1397  001A                     	;# 
  1398  001B                     	;# 
  1399  001C                     	;# 
  1400  008C                     	;# 
  1401  008D                     	;# 
  1402  008E                     	;# 
  1403  0090                     	;# 
  1404  0091                     	;# 
  1405  0092                     	;# 
  1406  0095                     	;# 
  1407  0096                     	;# 
  1408  0097                     	;# 
  1409  0099                     	;# 
  1410  009A                     	;# 
  1411  009B                     	;# 
  1412  009B                     	;# 
  1413  009C                     	;# 
  1414  009D                     	;# 
  1415  009E                     	;# 
  1416  010C                     	;# 
  1417  010D                     	;# 
  1418  010E                     	;# 
  1419  0116                     	;# 
  1420  0117                     	;# 
  1421  011D                     	;# 
  1422  018C                     	;# 
  1423  018D                     	;# 
  1424  018E                     	;# 
  1425  0191                     	;# 
  1426  0191                     	;# 
  1427  0192                     	;# 
  1428  0193                     	;# 
  1429  0193                     	;# 
  1430  0194                     	;# 
  1431  0195                     	;# 
  1432  0196                     	;# 
  1433  0197                     	;# 
  1434  0199                     	;# 
  1435  019A                     	;# 
  1436  019B                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019C                     	;# 
  1441  019C                     	;# 
  1442  019D                     	;# 
  1443  019E                     	;# 
  1444  019F                     	;# 
  1445  020D                     	;# 
  1446  0210                     	;# 
  1447  0211                     	;# 
  1448  0211                     	;# 
  1449  0212                     	;# 
  1450  0212                     	;# 
  1451  0213                     	;# 
  1452  0213                     	;# 
  1453  0214                     	;# 
  1454  0214                     	;# 
  1455  0215                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0216                     	;# 
  1459  0216                     	;# 
  1460  0217                     	;# 
  1461  0217                     	;# 
  1462  0291                     	;# 
  1463  0291                     	;# 
  1464  0292                     	;# 
  1465  0293                     	;# 
  1466  0298                     	;# 
  1467  0298                     	;# 
  1468  0299                     	;# 
  1469  029A                     	;# 
  1470  0394                     	;# 
  1471  0395                     	;# 
  1472  0396                     	;# 
  1473  0FE4                     	;# 
  1474  0FE5                     	;# 
  1475  0FE6                     	;# 
  1476  0FE7                     	;# 
  1477  0FE8                     	;# 
  1478  0FE9                     	;# 
  1479  0FEA                     	;# 
  1480  0FEB                     	;# 
  1481  0FED                     	;# 
  1482  0FEE                     	;# 
  1483  0FEF                     	;# 
  1484  0000                     	;# 
  1485  0001                     	;# 
  1486  0002                     	;# 
  1487  0003                     	;# 
  1488  0004                     	;# 
  1489  0005                     	;# 
  1490  0006                     	;# 
  1491  0007                     	;# 
  1492  0008                     	;# 
  1493  0009                     	;# 
  1494  000A                     	;# 
  1495  000B                     	;# 
  1496  000C                     	;# 
  1497  000D                     	;# 
  1498  000E                     	;# 
  1499  0010                     	;# 
  1500  0011                     	;# 
  1501  0012                     	;# 
  1502  0015                     	;# 
  1503  0016                     	;# 
  1504  0016                     	;# 
  1505  0017                     	;# 
  1506  0018                     	;# 
  1507  0019                     	;# 
  1508  001A                     	;# 
  1509  001B                     	;# 
  1510  001C                     	;# 
  1511  008C                     	;# 
  1512  008D                     	;# 
  1513  008E                     	;# 
  1514  0090                     	;# 
  1515  0091                     	;# 
  1516  0092                     	;# 
  1517  0095                     	;# 
  1518  0096                     	;# 
  1519  0097                     	;# 
  1520  0099                     	;# 
  1521  009A                     	;# 
  1522  009B                     	;# 
  1523  009B                     	;# 
  1524  009C                     	;# 
  1525  009D                     	;# 
  1526  009E                     	;# 
  1527  010C                     	;# 
  1528  010D                     	;# 
  1529  010E                     	;# 
  1530  0116                     	;# 
  1531  0117                     	;# 
  1532  011D                     	;# 
  1533  018C                     	;# 
  1534  018D                     	;# 
  1535  018E                     	;# 
  1536  0191                     	;# 
  1537  0191                     	;# 
  1538  0192                     	;# 
  1539  0193                     	;# 
  1540  0193                     	;# 
  1541  0194                     	;# 
  1542  0195                     	;# 
  1543  0196                     	;# 
  1544  0197                     	;# 
  1545  0199                     	;# 
  1546  019A                     	;# 
  1547  019B                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019C                     	;# 
  1552  019C                     	;# 
  1553  019D                     	;# 
  1554  019E                     	;# 
  1555  019F                     	;# 
  1556  020D                     	;# 
  1557  0210                     	;# 
  1558  0211                     	;# 
  1559  0211                     	;# 
  1560  0212                     	;# 
  1561  0212                     	;# 
  1562  0213                     	;# 
  1563  0213                     	;# 
  1564  0214                     	;# 
  1565  0214                     	;# 
  1566  0215                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0216                     	;# 
  1570  0216                     	;# 
  1571  0217                     	;# 
  1572  0217                     	;# 
  1573  0291                     	;# 
  1574  0291                     	;# 
  1575  0292                     	;# 
  1576  0293                     	;# 
  1577  0298                     	;# 
  1578  0298                     	;# 
  1579  0299                     	;# 
  1580  029A                     	;# 
  1581  0394                     	;# 
  1582  0395                     	;# 
  1583  0396                     	;# 
  1584  0FE4                     	;# 
  1585  0FE5                     	;# 
  1586  0FE6                     	;# 
  1587  0FE7                     	;# 
  1588  0FE8                     	;# 
  1589  0FE9                     	;# 
  1590  0FEA                     	;# 
  1591  0FEB                     	;# 
  1592  0FED                     	;# 
  1593  0FEE                     	;# 
  1594  0FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0015                     	;# 
  1614  0016                     	;# 
  1615  0016                     	;# 
  1616  0017                     	;# 
  1617  0018                     	;# 
  1618  0019                     	;# 
  1619  001A                     	;# 
  1620  001B                     	;# 
  1621  001C                     	;# 
  1622  008C                     	;# 
  1623  008D                     	;# 
  1624  008E                     	;# 
  1625  0090                     	;# 
  1626  0091                     	;# 
  1627  0092                     	;# 
  1628  0095                     	;# 
  1629  0096                     	;# 
  1630  0097                     	;# 
  1631  0099                     	;# 
  1632  009A                     	;# 
  1633  009B                     	;# 
  1634  009B                     	;# 
  1635  009C                     	;# 
  1636  009D                     	;# 
  1637  009E                     	;# 
  1638  010C                     	;# 
  1639  010D                     	;# 
  1640  010E                     	;# 
  1641  0116                     	;# 
  1642  0117                     	;# 
  1643  011D                     	;# 
  1644  018C                     	;# 
  1645  018D                     	;# 
  1646  018E                     	;# 
  1647  0191                     	;# 
  1648  0191                     	;# 
  1649  0192                     	;# 
  1650  0193                     	;# 
  1651  0193                     	;# 
  1652  0194                     	;# 
  1653  0195                     	;# 
  1654  0196                     	;# 
  1655  0197                     	;# 
  1656  0199                     	;# 
  1657  019A                     	;# 
  1658  019B                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019C                     	;# 
  1663  019C                     	;# 
  1664  019D                     	;# 
  1665  019E                     	;# 
  1666  019F                     	;# 
  1667  020D                     	;# 
  1668  0210                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0216                     	;# 
  1681  0216                     	;# 
  1682  0217                     	;# 
  1683  0217                     	;# 
  1684  0291                     	;# 
  1685  0291                     	;# 
  1686  0292                     	;# 
  1687  0293                     	;# 
  1688  0298                     	;# 
  1689  0298                     	;# 
  1690  0299                     	;# 
  1691  029A                     	;# 
  1692  0394                     	;# 
  1693  0395                     	;# 
  1694  0396                     	;# 
  1695  0FE4                     	;# 
  1696  0FE5                     	;# 
  1697  0FE6                     	;# 
  1698  0FE7                     	;# 
  1699  0FE8                     	;# 
  1700  0FE9                     	;# 
  1701  0FEA                     	;# 
  1702  0FEB                     	;# 
  1703  0FED                     	;# 
  1704  0FEE                     	;# 
  1705  0FEF                     	;# 
  1706  0000                     	;# 
  1707  0001                     	;# 
  1708  0002                     	;# 
  1709  0003                     	;# 
  1710  0004                     	;# 
  1711  0005                     	;# 
  1712  0006                     	;# 
  1713  0007                     	;# 
  1714  0008                     	;# 
  1715  0009                     	;# 
  1716  000A                     	;# 
  1717  000B                     	;# 
  1718  000C                     	;# 
  1719  000D                     	;# 
  1720  000E                     	;# 
  1721  0010                     	;# 
  1722  0011                     	;# 
  1723  0012                     	;# 
  1724  0015                     	;# 
  1725  0016                     	;# 
  1726  0016                     	;# 
  1727  0017                     	;# 
  1728  0018                     	;# 
  1729  0019                     	;# 
  1730  001A                     	;# 
  1731  001B                     	;# 
  1732  001C                     	;# 
  1733  008C                     	;# 
  1734  008D                     	;# 
  1735  008E                     	;# 
  1736  0090                     	;# 
  1737  0091                     	;# 
  1738  0092                     	;# 
  1739  0095                     	;# 
  1740  0096                     	;# 
  1741  0097                     	;# 
  1742  0099                     	;# 
  1743  009A                     	;# 
  1744  009B                     	;# 
  1745  009B                     	;# 
  1746  009C                     	;# 
  1747  009D                     	;# 
  1748  009E                     	;# 
  1749  010C                     	;# 
  1750  010D                     	;# 
  1751  010E                     	;# 
  1752  0116                     	;# 
  1753  0117                     	;# 
  1754  011D                     	;# 
  1755  018C                     	;# 
  1756  018D                     	;# 
  1757  018E                     	;# 
  1758  0191                     	;# 
  1759  0191                     	;# 
  1760  0192                     	;# 
  1761  0193                     	;# 
  1762  0193                     	;# 
  1763  0194                     	;# 
  1764  0195                     	;# 
  1765  0196                     	;# 
  1766  0197                     	;# 
  1767  0199                     	;# 
  1768  019A                     	;# 
  1769  019B                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019C                     	;# 
  1774  019C                     	;# 
  1775  019D                     	;# 
  1776  019E                     	;# 
  1777  019F                     	;# 
  1778  020D                     	;# 
  1779  0210                     	;# 
  1780  0211                     	;# 
  1781  0211                     	;# 
  1782  0212                     	;# 
  1783  0212                     	;# 
  1784  0213                     	;# 
  1785  0213                     	;# 
  1786  0214                     	;# 
  1787  0214                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  0291                     	;# 
  1796  0291                     	;# 
  1797  0292                     	;# 
  1798  0293                     	;# 
  1799  0298                     	;# 
  1800  0298                     	;# 
  1801  0299                     	;# 
  1802  029A                     	;# 
  1803  0394                     	;# 
  1804  0395                     	;# 
  1805  0396                     	;# 
  1806  0FE4                     	;# 
  1807  0FE5                     	;# 
  1808  0FE6                     	;# 
  1809  0FE7                     	;# 
  1810  0FE8                     	;# 
  1811  0FE9                     	;# 
  1812  0FEA                     	;# 
  1813  0FEB                     	;# 
  1814  0FED                     	;# 
  1815  0FEE                     	;# 
  1816  0FEF                     	;# 
  1817  0000                     	;# 
  1818  0001                     	;# 
  1819  0002                     	;# 
  1820  0003                     	;# 
  1821  0004                     	;# 
  1822  0005                     	;# 
  1823  0006                     	;# 
  1824  0007                     	;# 
  1825  0008                     	;# 
  1826  0009                     	;# 
  1827  000A                     	;# 
  1828  000B                     	;# 
  1829  000C                     	;# 
  1830  000D                     	;# 
  1831  000E                     	;# 
  1832  0010                     	;# 
  1833  0011                     	;# 
  1834  0012                     	;# 
  1835  0015                     	;# 
  1836  0016                     	;# 
  1837  0016                     	;# 
  1838  0017                     	;# 
  1839  0018                     	;# 
  1840  0019                     	;# 
  1841  001A                     	;# 
  1842  001B                     	;# 
  1843  001C                     	;# 
  1844  008C                     	;# 
  1845  008D                     	;# 
  1846  008E                     	;# 
  1847  0090                     	;# 
  1848  0091                     	;# 
  1849  0092                     	;# 
  1850  0095                     	;# 
  1851  0096                     	;# 
  1852  0097                     	;# 
  1853  0099                     	;# 
  1854  009A                     	;# 
  1855  009B                     	;# 
  1856  009B                     	;# 
  1857  009C                     	;# 
  1858  009D                     	;# 
  1859  009E                     	;# 
  1860  010C                     	;# 
  1861  010D                     	;# 
  1862  010E                     	;# 
  1863  0116                     	;# 
  1864  0117                     	;# 
  1865  011D                     	;# 
  1866  018C                     	;# 
  1867  018D                     	;# 
  1868  018E                     	;# 
  1869  0191                     	;# 
  1870  0191                     	;# 
  1871  0192                     	;# 
  1872  0193                     	;# 
  1873  0193                     	;# 
  1874  0194                     	;# 
  1875  0195                     	;# 
  1876  0196                     	;# 
  1877  0197                     	;# 
  1878  0199                     	;# 
  1879  019A                     	;# 
  1880  019B                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019C                     	;# 
  1885  019C                     	;# 
  1886  019D                     	;# 
  1887  019E                     	;# 
  1888  019F                     	;# 
  1889  020D                     	;# 
  1890  0210                     	;# 
  1891  0211                     	;# 
  1892  0211                     	;# 
  1893  0212                     	;# 
  1894  0212                     	;# 
  1895  0213                     	;# 
  1896  0213                     	;# 
  1897  0214                     	;# 
  1898  0214                     	;# 
  1899  0215                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0216                     	;# 
  1903  0216                     	;# 
  1904  0217                     	;# 
  1905  0217                     	;# 
  1906  0291                     	;# 
  1907  0291                     	;# 
  1908  0292                     	;# 
  1909  0293                     	;# 
  1910  0298                     	;# 
  1911  0298                     	;# 
  1912  0299                     	;# 
  1913  029A                     	;# 
  1914  0394                     	;# 
  1915  0395                     	;# 
  1916  0396                     	;# 
  1917  0FE4                     	;# 
  1918  0FE5                     	;# 
  1919  0FE6                     	;# 
  1920  0FE7                     	;# 
  1921  0FE8                     	;# 
  1922  0FE9                     	;# 
  1923  0FEA                     	;# 
  1924  0FEB                     	;# 
  1925  0FED                     	;# 
  1926  0FEE                     	;# 
  1927  0FEF                     	;# 
  1928  0000                     	;# 
  1929  0001                     	;# 
  1930  0002                     	;# 
  1931  0003                     	;# 
  1932  0004                     	;# 
  1933  0005                     	;# 
  1934  0006                     	;# 
  1935  0007                     	;# 
  1936  0008                     	;# 
  1937  0009                     	;# 
  1938  000A                     	;# 
  1939  000B                     	;# 
  1940  000C                     	;# 
  1941  000D                     	;# 
  1942  000E                     	;# 
  1943  0010                     	;# 
  1944  0011                     	;# 
  1945  0012                     	;# 
  1946  0015                     	;# 
  1947  0016                     	;# 
  1948  0016                     	;# 
  1949  0017                     	;# 
  1950  0018                     	;# 
  1951  0019                     	;# 
  1952  001A                     	;# 
  1953  001B                     	;# 
  1954  001C                     	;# 
  1955  008C                     	;# 
  1956  008D                     	;# 
  1957  008E                     	;# 
  1958  0090                     	;# 
  1959  0091                     	;# 
  1960  0092                     	;# 
  1961  0095                     	;# 
  1962  0096                     	;# 
  1963  0097                     	;# 
  1964  0099                     	;# 
  1965  009A                     	;# 
  1966  009B                     	;# 
  1967  009B                     	;# 
  1968  009C                     	;# 
  1969  009D                     	;# 
  1970  009E                     	;# 
  1971  010C                     	;# 
  1972  010D                     	;# 
  1973  010E                     	;# 
  1974  0116                     	;# 
  1975  0117                     	;# 
  1976  011D                     	;# 
  1977  018C                     	;# 
  1978  018D                     	;# 
  1979  018E                     	;# 
  1980  0191                     	;# 
  1981  0191                     	;# 
  1982  0192                     	;# 
  1983  0193                     	;# 
  1984  0193                     	;# 
  1985  0194                     	;# 
  1986  0195                     	;# 
  1987  0196                     	;# 
  1988  0197                     	;# 
  1989  0199                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019C                     	;# 
  1996  019C                     	;# 
  1997  019D                     	;# 
  1998  019E                     	;# 
  1999  019F                     	;# 
  2000  020D                     	;# 
  2001  0210                     	;# 
  2002  0211                     	;# 
  2003  0211                     	;# 
  2004  0212                     	;# 
  2005  0212                     	;# 
  2006  0213                     	;# 
  2007  0213                     	;# 
  2008  0214                     	;# 
  2009  0214                     	;# 
  2010  0215                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0216                     	;# 
  2014  0216                     	;# 
  2015  0217                     	;# 
  2016  0217                     	;# 
  2017  0291                     	;# 
  2018  0291                     	;# 
  2019  0292                     	;# 
  2020  0293                     	;# 
  2021  0298                     	;# 
  2022  0298                     	;# 
  2023  0299                     	;# 
  2024  029A                     	;# 
  2025  0394                     	;# 
  2026  0395                     	;# 
  2027  0396                     	;# 
  2028  0FE4                     	;# 
  2029  0FE5                     	;# 
  2030  0FE6                     	;# 
  2031  0FE7                     	;# 
  2032  0FE8                     	;# 
  2033  0FE9                     	;# 
  2034  0FEA                     	;# 
  2035  0FEB                     	;# 
  2036  0FED                     	;# 
  2037  0FEE                     	;# 
  2038  0FEF                     	;# 
  2039                           
  2040                           	psect	idataBANK3
  2041  11E3                     __pidataBANK3:	
  2042                           
  2043                           ;initializer for __product
  2044  11E3  3463               	retlw	99
  2045  11E4  3402               	retlw	2
  2046  11E5  3400               	retlw	0
  2047  11E6  3400               	retlw	0
  2048  11E7  3400               	retlw	0
  2049  11E8  3400               	retlw	0
  2050  11E9  3400               	retlw	0
  2051  11EA  3400               	retlw	0
  2052  11EB  3400               	retlw	0
  2053  11EC  3400               	retlw	0
  2054  11ED  3400               	retlw	0
  2055  11EE  3400               	retlw	0
  2056  11EF  34FF               	retlw	255
  2057  11F0  34FF               	retlw	255
  2058  11F1  34FF               	retlw	255
  2059  11F2  3400               	retlw	0
  2060  11F3  3400               	retlw	0
  2061  11F4  3400               	retlw	0
  2062  11F5  3400               	retlw	0
  2063  11F6  3400               	retlw	0
  2064  11F7  3400               	retlw	0
  2065  11F8  3400               	retlw	0
  2066  11F9  3400               	retlw	0
  2067  11FA  3400               	retlw	0
  2068  11FB  3400               	retlw	0
  2069  11FC  3400               	retlw	0
  2070  11FD  3400               	retlw	0
  2071  11FE  3400               	retlw	0
  2072  11FF  3400               	retlw	0
  2073  1200  3400               	retlw	0
  2074  1201  3400               	retlw	0
  2075  1202  3400               	retlw	0
  2076                           
  2077                           	psect	stringtext
  2078  1000                     __pstringtext:	
  2079  1000                     _CC2500_registers_address:	
  2080  1000  3403               	retlw	3
  2081  1001  3416               	retlw	22
  2082  1002  3417               	retlw	23
  2083  1003  341E               	retlw	30
  2084  1004  341F               	retlw	31
  2085  1005  3420               	retlw	32
  2086  1006  342A               	retlw	42
  2087  1007  342B               	retlw	43
  2088  1008  340B               	retlw	11
  2089  1009  340C               	retlw	12
  2090  100A  340D               	retlw	13
  2091  100B  340E               	retlw	14
  2092  100C  340F               	retlw	15
  2093  100D  3410               	retlw	16
  2094  100E  3411               	retlw	17
  2095  100F  3412               	retlw	18
  2096  1010  3413               	retlw	19
  2097  1011  3414               	retlw	20
  2098  1012  340A               	retlw	10
  2099  1013  3415               	retlw	21
  2100  1014  3421               	retlw	33
  2101  1015  3422               	retlw	34
  2102  1016  3418               	retlw	24
  2103  1017  3419               	retlw	25
  2104  1018  341A               	retlw	26
  2105  1019  341B               	retlw	27
  2106  101A  341C               	retlw	28
  2107  101B  341D               	retlw	29
  2108  101C  3423               	retlw	35
  2109  101D  3424               	retlw	36
  2110  101E  3425               	retlw	37
  2111  101F  3426               	retlw	38
  2112  1020  3429               	retlw	41
  2113  1021  342C               	retlw	44
  2114  1022  342D               	retlw	45
  2115  1023  342E               	retlw	46
  2116  1024  3400               	retlw	0
  2117  1025  3401               	retlw	1
  2118  1026  3402               	retlw	2
  2119  1027  3407               	retlw	7
  2120  1028  3408               	retlw	8
  2121  1029  3409               	retlw	9
  2122  102A  3406               	retlw	6
  2123  102B  3404               	retlw	4
  2124  102C  3405               	retlw	5
  2125  102D  3427               	retlw	39
  2126  102E  3428               	retlw	40
  2127  102F                     __end_of_CC2500_registers_address:	
  2128  102F                     _CC2500_rfSettings:	
  2129  102F  3407               	retlw	7
  2130  1030  3407               	retlw	7
  2131  1031  3430               	retlw	48
  2132  1032  3487               	retlw	135
  2133  1033  346B               	retlw	107
  2134  1034  34F8               	retlw	248
  2135  1035  347F               	retlw	127
  2136  1036  343F               	retlw	63
  2137  1037  3409               	retlw	9
  2138  1038  3400               	retlw	0
  2139  1039  345C               	retlw	92
  2140  103A  34A7               	retlw	167
  2141  103B  3462               	retlw	98
  2142  103C  3486               	retlw	134
  2143  103D  3483               	retlw	131
  2144  103E  3403               	retlw	3
  2145  103F  3422               	retlw	34
  2146  1040  34F8               	retlw	248
  2147  1041  3400               	retlw	0
  2148  1042  3444               	retlw	68
  2149  1043  34B6               	retlw	182
  2150  1044  3410               	retlw	16
  2151  1045  3418               	retlw	24
  2152  1046  341D               	retlw	29
  2153  1047  341C               	retlw	28
  2154  1048  34C7               	retlw	199
  2155  1049  3400               	retlw	0
  2156  104A  34B2               	retlw	178
  2157  104B  34EA               	retlw	234
  2158  104C  340A               	retlw	10
  2159  104D  3400               	retlw	0
  2160  104E  3411               	retlw	17
  2161  104F  3459               	retlw	89
  2162  1050  3488               	retlw	136
  2163  1051  3431               	retlw	49
  2164  1052  340B               	retlw	11
  2165  1053  342F               	retlw	47
  2166  1054  342E               	retlw	46
  2167  1055  3406               	retlw	6
  2168  1056  3404               	retlw	4
  2169  1057  3405               	retlw	5
  2170  1058  3400               	retlw	0
  2171  1059  3430               	retlw	48
  2172  105A  34D3               	retlw	211
  2173  105B  3491               	retlw	145
  2174  105C  3441               	retlw	65
  2175  105D  3400               	retlw	0
  2176  105E                     __end_of_CC2500_rfSettings:	
  2177  105E                     _CC2500_patable_vaule:	
  2178  105E  34FE               	retlw	254
  2179  105F  34FE               	retlw	254
  2180  1060  34FE               	retlw	254
  2181  1061  34FE               	retlw	254
  2182  1062  34FE               	retlw	254
  2183  1063  34FE               	retlw	254
  2184  1064  34FE               	retlw	254
  2185  1065  34FE               	retlw	254
  2186  1066                     __end_of_CC2500_patable_vaule:	
  2187                           
  2188                           	psect	nvBANK0
  2189  006F                     __pnvBANK0:	
  2190  006F                     _product:	
  2191  006F                     	ds	1
  2192  000C                     _PORTA	set	12
  2193  000D                     _PORTB	set	13
  2194  000E                     _PORTC	set	14
  2195  0015                     _TMR0	set	21
  2196  005F                     _GIE	set	95
  2197  005B                     _IOCIE	set	91
  2198  0058                     _IOCIF	set	88
  2199  005E                     _PEIE	set	94
  2200  0060                     _RA0	set	96
  2201  0063                     _RA3	set	99
  2202  0064                     _RA4	set	100
  2203  0066                     _RA6	set	102
  2204  0067                     _RA7	set	103
  2205  0068                     _RB0	set	104
  2206  0069                     _RB1	set	105
  2207  006B                     _RB3	set	107
  2208  006C                     _RB4	set	108
  2209  006D                     _RB5	set	109
  2210  0070                     _RC0	set	112
  2211  0071                     _RC1	set	113
  2212  0072                     _RC2	set	114
  2213  0074                     _RC4	set	116
  2214  0075                     _RC5	set	117
  2215  0077                     _RC7	set	119
  2216  005D                     _TMR0IE	set	93
  2217  005A                     _TMR0IF	set	90
  2218  009D                     _ADCON0	set	157
  2219  009E                     _ADCON1	set	158
  2220  009C                     _ADRESH	set	156
  2221  009B                     _ADRESL	set	155
  2222  0095                     _OPTION_REG	set	149
  2223  0099                     _OSCCON	set	153
  2224  008C                     _TRISA	set	140
  2225  008D                     _TRISB	set	141
  2226  008E                     _TRISC	set	142
  2227  04E9                     _GO_nDONE	set	1257
  2228  0117                     _FVRCON	set	279
  2229  010C                     _LATA	set	268
  2230  010D                     _LATB	set	269
  2231  010E                     _LATC	set	270
  2232  018C                     _ANSELA	set	396
  2233  018D                     _ANSELB	set	397
  2234  018E                     _ANSELC	set	398
  2235  0192                     _PMADRH	set	402
  2236  0191                     _PMADRL	set	401
  2237  0196                     _PMCON2	set	406
  2238  0194                     _PMDATH	set	404
  2239  0193                     _PMDATL	set	403
  2240  0CAE                     _CFGS	set	3246
  2241  0CAC                     _FREE	set	3244
  2242  0CAD                     _LWLO	set	3245
  2243  0CA8                     _RD	set	3240
  2244  0CA9                     _WR	set	3241
  2245  0CAA                     _WREN	set	3242
  2246  1069                     _WPUB1	set	4201
  2247  106A                     _WPUB2	set	4202
  2248  0396                     _IOCBF	set	918
  2249  0395                     _IOCBN	set	917
  2250  0394                     _IOCBP	set	916
  2251  1CB2                     _IOCBF2	set	7346
  2252                           
  2253                           ; #config settings
  2254  0000                     
  2255                           	psect	cinit
  2256  0015                     start_initialization:	
  2257  0015                     __initialization:	
  2258                           
  2259                           ; Clear objects allocated to BITCOMMON
  2260  0015  01FC               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2261                           
  2262                           ; Clear objects allocated to COMMON
  2263  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2264  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2265  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2266  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to BANK0
  2269  001A  01ED               	clrf	__pbssBANK0& (0+127)
  2270  001B  01EE               	clrf	(__pbssBANK0+1)& (0+127)
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  001C  30A0               	movlw	low __pbssBANK1
  2274  001D  0084               	movwf	4
  2275  001E  3000               	movlw	high __pbssBANK1
  2276  001F  0085               	movwf	5
  2277  0020  304F               	movlw	79
  2278  0021  319E  2636  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  0024  3020               	movlw	low __pbssBANK2
  2282  0025  0084               	movwf	4
  2283  0026  3001               	movlw	high __pbssBANK2
  2284  0027  0085               	movwf	5
  2285  0028  304F               	movlw	79
  2286  0029  319E  2636  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  002C  30C0               	movlw	low __pbssBANK3
  2290  002D  0084               	movwf	4
  2291  002E  3001               	movlw	high __pbssBANK3
  2292  002F  0085               	movwf	5
  2293  0030  3018               	movlw	24
  2294  0031  319E  2636  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Initialize objects allocated to BANK3
  2297  0034  30E3               	movlw	low __pidataBANK3
  2298  0035  0084               	movwf	4
  2299  0036  3091               	movlw	(high __pidataBANK3)| (0+128)
  2300  0037  0085               	movwf	5
  2301  0038  30A0               	movlw	low __pdataBANK3
  2302  0039  0086               	movwf	6
  2303  003A  3001               	movlw	high __pdataBANK3
  2304  003B  0087               	movwf	7
  2305  003C  3020               	movlw	32
  2306  003D  319E  2630         	fcall	init_ram
  2307  003F                     end_of_initialization:	
  2308                           ;End of C runtime variable initialization code
  2309                           
  2310  003F                     __end_of__initialization:	
  2311  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2312  0040  0020               	movlb	0
  2313  0041  3188  288D         	ljmp	_main	;jump to C main() function
  2314                           
  2315                           	psect	bitbssCOMMON
  2316  03E0                     __pbitbssCOMMON:	
  2317  03E0                     _Receive_OK:	
  2318  03E0                     	ds	1
  2319  03E1                     _Transceive_OK:	
  2320  03E1                     	ds	1
  2321                           
  2322                           	psect	bssCOMMON
  2323  0078                     __pbssCOMMON:	
  2324  0078                     _DelayOff:	
  2325  0078                     	ds	1
  2326  0079                     _DimmerLightsIntr:	
  2327  0079                     	ds	1
  2328  007A                     _RFSW:	
  2329  007A                     	ds	1
  2330  007B                     _SPI0Buffer:	
  2331  007B                     	ds	1
  2332                           
  2333                           	psect	bssBANK0
  2334  006D                     __pbssBANK0:	
  2335  006D                     _DimmerLights:	
  2336  006D                     	ds	1
  2337  006E                     _Sw:	
  2338  006E                     	ds	1
  2339                           
  2340                           	psect	bssBANK1
  2341  00A0                     __pbssBANK1:	
  2342  00A0                     _myMain:	
  2343  00A0                     	ds	18
  2344  00B2                     _Buz1:	
  2345  00B2                     	ds	12
  2346  00BE                     _PF1:	
  2347  00BE                     	ds	8
  2348  00C6                     _RF1:	
  2349  00C6                     	ds	5
  2350  00CB                     _LED:	
  2351  00CB                     	ds	2
  2352  00CD                     _RF_Count:	
  2353  00CD                     	ds	2
  2354  00CF                     _CRC:	
  2355  00CF                     	ds	1
  2356  00D0                     _Dimmer:	
  2357  00D0                     	ds	1
  2358  00D1                     _DimmerLights11:	
  2359  00D1                     	ds	1
  2360  00D2                     _DimmerLightsIntrIOC:	
  2361  00D2                     	ds	1
  2362  00D3                     _RSSI:	
  2363  00D3                     	ds	1
  2364  00D4                     _Rx_Length:	
  2365  00D4                     	ds	1
  2366  00D5                     _Tx_Length:	
  2367  00D5                     	ds	1
  2368  00D6                     _r_address:	
  2369  00D6                     	ds	1
  2370  00D7                     _r_data:	
  2371  00D7                     	ds	1
  2372  00D8                     _s_data:	
  2373  00D8                     	ds	1
  2374  00D9                     _Temp1:	
  2375  00D9                     	ds	14
  2376  00E7                     _VarErrLED:	
  2377  00E7                     	ds	4
  2378  00EB                     _Dimmer1:	
  2379  00EB                     	ds	3
  2380  00EE                     _RFSW1:	
  2381  00EE                     	ds	1
  2382                           
  2383                           	psect	bssBANK2
  2384  0120                     __pbssBANK2:	
  2385  0120                     _RF_Data:	
  2386  0120                     	ds	21
  2387  0135                     _Timer0:	
  2388  0135                     	ds	8
  2389  013D                     _Memory:	
  2390  013D                     	ds	37
  2391  0162                     _DlySw1:	
  2392  0162                     	ds	5
  2393  0167                     _VarLED1:	
  2394  0167                     	ds	4
  2395  016B                     _VarLED2:	
  2396  016B                     	ds	4
  2397                           
  2398                           	psect	bssBANK3
  2399  01C0                     __pbssBANK3:	
  2400  01C0                     _DimmerLights1:	
  2401  01C0                     	ds	15
  2402  01CF                     _Sw1:	
  2403  01CF                     	ds	9
  2404                           
  2405                           	psect	dataBANK3
  2406  01A0                     __pdataBANK3:	
  2407  01A0                     __product:	
  2408  01A0                     	ds	32
  2409                           
  2410                           	psect	clrtext
  2411  1E36                     clear_ram0:	
  2412                           ;	Called with FSR0 containing the base address, and
  2413                           ;	WREG with the size to clear
  2414                           
  2415  1E36  0064               	clrwdt	;clear the watchdog before getting into this loop
  2416  1E37                     clrloop0:	
  2417  1E37  0180               	clrf	0	;clear RAM location pointed to by FSR
  2418  1E38  3101               	addfsr 0,1
  2419  1E39  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2420  1E3A  2E37               	goto	clrloop0	;have we reached the end yet?
  2421  1E3B  3400               	retlw	0	;all done for this memory range, return
  2422                           
  2423                           	psect	inittext
  2424  1E30                     init_ram:	
  2425  1E30  00FE               	movwf	126
  2426  1E31                     initloop:	
  2427  1E31  0012               	moviw fsr0++
  2428  1E32  001E               	movwi fsr1++
  2429  1E33  0BFE               	decfsz	126,f
  2430  1E34  2E31               	goto	initloop
  2431  1E35  3400               	retlw	0
  2432                           
  2433                           	psect	cstackCOMMON
  2434  0070                     __pcstackCOMMON:	
  2435  0070                     ?_Timeout_Counter:	
  2436  0070                     ?_set_TimeoutCleared:	
  2437                           ; 0 bytes @ 0x0
  2438                           
  2439  0070                     ?_CC2500_WriteByte:	
  2440                           ; 0 bytes @ 0x0
  2441                           
  2442  0070                     ?_CC2500_WriteCommand:	
  2443                           ; 0 bytes @ 0x0
  2444                           
  2445  0070                     ?_CC2500_ReadStatus:	
  2446                           ; 0 bytes @ 0x0
  2447                           
  2448  0070                     ?_CC2500_ReadByte:	
  2449                           ; 0 bytes @ 0x0
  2450                           
  2451  0070                     ?_CC2500_PowerRST:	
  2452                           ; 0 bytes @ 0x0
  2453                           
  2454  0070                     ?_CC2500_InitSetREG:	
  2455                           ; 0 bytes @ 0x0
  2456                           
  2457  0070                     ?_CC2500_InitPATable:	
  2458                           ; 0 bytes @ 0x0
  2459                           
  2460  0070                     ?_CC2500_ClearTXFIFO:	
  2461                           ; 0 bytes @ 0x0
  2462                           
  2463  0070                     ?_CC2500_ClearRXFIFO:	
  2464                           ; 0 bytes @ 0x0
  2465                           
  2466  0070                     ?_CC2500_FrequencyCabr:	
  2467                           ; 0 bytes @ 0x0
  2468                           
  2469  0070                     ?_CC2500_SIDLEMode:	
  2470                           ; 0 bytes @ 0x0
  2471                           
  2472  0070                     ?_DlyOff_Initialization:	
  2473                           ; 0 bytes @ 0x0
  2474                           
  2475  0070                     ?_DlyOff_Main:	
  2476                           ; 0 bytes @ 0x0
  2477                           
  2478  0070                     ?_setTxData:	
  2479                           ; 0 bytes @ 0x0
  2480                           
  2481  0070                     ?_setDimmerLights_Initialization:	
  2482                           ; 0 bytes @ 0x0
  2483                           
  2484  0070                     ?_Dimmer_Initialization:	
  2485                           ; 0 bytes @ 0x0
  2486                           
  2487  0070                     ?_setMemory_GO:	
  2488                           ; 0 bytes @ 0x0
  2489                           
  2490  0070                     ?_setDimmerLights_Main:	
  2491                           ; 0 bytes @ 0x0
  2492                           
  2493  0070                     ?_setDimmerLights_ERROR:	
  2494                           ; 0 bytes @ 0x0
  2495                           
  2496  0070                     ?_setLED_Initialization:	
  2497                           ; 0 bytes @ 0x0
  2498                           
  2499  0070                     ?_setLED_Main:	
  2500                           ; 0 bytes @ 0x0
  2501                           
  2502  0070                     ?_Fosc_Set:	
  2503                           ; 0 bytes @ 0x0
  2504                           
  2505  0070                     ?_IO_Set:	
  2506                           ; 0 bytes @ 0x0
  2507                           
  2508  0070                     ?_TMR0_Set:	
  2509                           ; 0 bytes @ 0x0
  2510                           
  2511  0070                     ?_ADC_Set:	
  2512                           ; 0 bytes @ 0x0
  2513                           
  2514  0070                     ?_IOC_Set:	
  2515                           ; 0 bytes @ 0x0
  2516                           
  2517  0070                     ?_IOC_ISR:	
  2518                           ; 0 bytes @ 0x0
  2519                           
  2520  0070                     ?_TMR0_ISR:	
  2521                           ; 0 bytes @ 0x0
  2522                           
  2523  0070                     ?_Flash_Memory_Write:	
  2524                           ; 0 bytes @ 0x0
  2525                           
  2526  0070                     ?_Flash_Memory_Modify:	
  2527                           ; 0 bytes @ 0x0
  2528                           
  2529  0070                     ?_setTemp_Initialization:	
  2530                           ; 0 bytes @ 0x0
  2531                           
  2532  0070                     ?_setTemp_Main:	
  2533                           ; 0 bytes @ 0x0
  2534                           
  2535  0070                     ?_setOverTemp_Exceptions:	
  2536                           ; 0 bytes @ 0x0
  2537                           
  2538  0070                     ?_setSw_Enable:	
  2539                           ; 0 bytes @ 0x0
  2540                           
  2541  0070                     ?_setRF_Enable:	
  2542                           ; 0 bytes @ 0x0
  2543                           
  2544  0070                     ?_setPowerFault_Initialization:	
  2545                           ; 0 bytes @ 0x0
  2546                           
  2547  0070                     ?_setPowerFault_Main:	
  2548                           ; 0 bytes @ 0x0
  2549                           
  2550  0070                     ?_setPowerFault_Exceptions:	
  2551                           ; 0 bytes @ 0x0
  2552                           
  2553  0070                     ?_setRF_Initialization:	
  2554                           ; 0 bytes @ 0x0
  2555                           
  2556  0070                     ?_setRF_Main:	
  2557                           ; 0 bytes @ 0x0
  2558                           
  2559  0070                     ?_RF_RxDisable:	
  2560                           ; 0 bytes @ 0x0
  2561                           
  2562  0070                     ?_getRxData:	
  2563                           ; 0 bytes @ 0x0
  2564                           
  2565  0070                     ?_setLog_Code:	
  2566                           ; 0 bytes @ 0x0
  2567                           
  2568  0070                     ?_setControl_Lights_Table:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571  0070                     ?_setRFSW_Control:	
  2572                           ; 0 bytes @ 0x0
  2573                           
  2574  0070                     ?_setRFSW_AdjControl:	
  2575                           ; 0 bytes @ 0x0
  2576                           
  2577  0070                     ?_setRF_DimmerValue:	
  2578                           ; 0 bytes @ 0x0
  2579                           
  2580  0070                     ?_setSw_Initialization:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  0070                     ?_setSw_Main:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  0070                     ?_Sw_DimmerOnFunc:	
  2587                           ; 0 bytes @ 0x0
  2588                           
  2589  0070                     ?_Sw_DimmerAdjFunc:	
  2590                           ; 0 bytes @ 0x0
  2591                           
  2592  0070                     ?_Sw_DimmerOffFunc:	
  2593                           ; 0 bytes @ 0x0
  2594                           
  2595  0070                     ?_myMain_Initialization:	
  2596                           ; 0 bytes @ 0x0
  2597                           
  2598  0070                     ?_my_Main:	
  2599                           ; 0 bytes @ 0x0
  2600                           
  2601  0070                     ?_Buzzer_Initialization:	
  2602                           ; 0 bytes @ 0x0
  2603                           
  2604  0070                     ?_Buzzer_Main:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_CC2500_TxData:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_RxData:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_PowerOnInitial:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_DelayOffPointSelect:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_DelayOff_Initialization:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_DelayOff_Main:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_DimmerIntrIOCPointSelect:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ??_DimmerIntrIOCPointSelect:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_DimmerIntrPointSelect:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ??_DimmerIntrPointSelect:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_setDimmerLights_IntrControl:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_DimmerLightsPointSelect:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_DimmerLights_Initialization:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_DimmerLights_Close:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_DimmerLights_Main:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_DimmerLights_Exceptions:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_AdjRF:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_LedPointSelect:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_LED_Initialization:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_LED_Main:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_Mcu_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_ISR:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setDimmerReClock:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_Flash_Memory_Initialization:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_Flash_Memory_Main:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_Flash_Memory_Unlock:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_Flash_Memory_Erasing:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_Temp_Initialization:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setTemp_Enable:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_getTemp_AD:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Temp_Main:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_PowerFault_Initialization:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_PowerFault_Main:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_getPowerFault_AD:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_RF_Initialization:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_RF_Main:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setRF_Learn:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_RfSWPointSelect:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_TouchPower:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_SwPointSelect:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Switch_Initialization:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Switch_Main:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_DelayTimejudge:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_getDimmerLights_StatusFlag:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_getPercentValue:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_Flash_Memory_Read:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_getPF_Safe:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_setPercentValue:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_getTemp_Safe:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757                           
  2758                           ; 1 bytes @ 0x0
  2759  0070                     	ds	1
  2760  0071                     DimmerIntrIOCPointSelect@lights:	
  2761  0071                     DimmerIntrPointSelect@lights:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764                           
  2765                           ; 1 bytes @ 0x1
  2766  0071                     	ds	1
  2767  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2768  0072                     ??_setDimmerLights_IntrControl:	
  2769                           ; 0 bytes @ 0x2
  2770                           
  2771  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2772                           ; 0 bytes @ 0x2
  2773                           
  2774                           
  2775                           ; 1 bytes @ 0x2
  2776  0072                     	ds	1
  2777  0073                     ??_IOC_ISR:	
  2778  0073                     ??_setDimmerReClock:	
  2779                           ; 0 bytes @ 0x3
  2780                           
  2781                           
  2782                           ; 0 bytes @ 0x3
  2783  0073                     	ds	3
  2784  0076                     setDimmerLights_IntrControl@lights:	
  2785                           
  2786                           ; 1 bytes @ 0x6
  2787  0076                     	ds	1
  2788  0077                     ??_TMR0_ISR:	
  2789  0077                     ??_ISR:	
  2790                           ; 0 bytes @ 0x7
  2791                           
  2792                           
  2793                           ; 0 bytes @ 0x7
  2794  0077                     	ds	1
  2795                           
  2796                           	psect	cstackBANK0
  2797  0020                     __pcstackBANK0:	
  2798  0020                     ??_Timeout_Counter:	
  2799  0020                     ??_set_TimeoutCleared:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0020                     ??_CC2500_WriteByte:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0020                     ??_CC2500_ReadByte:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0020                     ?_DelayTime_1us:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0020                     ??_setTxData:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0020                     ??_Dimmer_Initialization:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0020                     ??_getDimmerLights_StatusFlag:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0020                     ??_setMemory_GO:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0020                     ??_Fosc_Set:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0020                     ??_IO_Set:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0020                     ??_TMR0_Set:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0020                     ??_ADC_Set:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0020                     ??_IOC_Set:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0020                     ??_Flash_Memory_Read:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0020                     ??_Flash_Memory_Write:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0020                     ??_setTemp_Initialization:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0020                     ??_getPF_Safe:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0020                     ??_setRF_Enable:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0020                     ??_setPowerFault_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0020                     ??_setRF_Initialization:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0020                     ??_myMain_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0020                     ??_Buzzer_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0020                     ??_Buzzer_Main:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0020                     ??_DelayOffPointSelect:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0020                     ??_DimmerLightsPointSelect:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0020                     ??_LedPointSelect:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0020                     ??_Mcu_Initialization:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0020                     ??_Flash_Memory_Unlock:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0020                     ??_Flash_Memory_Erasing:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0020                     ??_Temp_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0020                     ??_setTemp_Enable:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0020                     ??_getTemp_Safe:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0020                     ??_PowerFault_Initialization:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0020                     ??_setRF_Learn:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0020                     ??_RfSWPointSelect:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0020                     ??_TouchPower:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0020                     ??_SwPointSelect:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0020                     ?___bmul:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0020                     ?_getBuz_GO:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     ?_getAD:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     ?___awdiv:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     ?___ftpack:	
  2923                           ; 2 bytes @ 0x0
  2924                           
  2925  0020                     getDimmerLights_StatusFlag@Status:	
  2926                           ; 3 bytes @ 0x0
  2927                           
  2928  0020                     LedPointSelect@led:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     getAD@adcon1:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     setTemp_Enable@command:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     getPF_Safe@i:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0020                     setRF_Learn@command:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0020                     setRF_Enable@command:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0020                     ___bmul@multiplicand:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0020                     DelayTime_1us@count:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0020                     ___awdiv@divisor:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     ___ftpack@arg:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 3 bytes @ 0x0
  2960  0020                     	ds	1
  2961  0021                     ?_setLED:	
  2962  0021                     ??_setLED_Main:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965  0021                     ??_RF_Initialization:	
  2966                           ; 0 bytes @ 0x1
  2967                           
  2968  0021                     ??___bmul:	
  2969                           ; 0 bytes @ 0x1
  2970                           
  2971  0021                     CC2500_WriteByte@loop_a:	
  2972                           ; 0 bytes @ 0x1
  2973                           
  2974  0021                     CC2500_ReadByte@loop_b:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     DelayOffPointSelect@sw:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     DimmerLightsPointSelect@lights:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     setLED@command:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     Flash_Memory_Read@i:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     Flash_Memory_Write@i:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992  0021                     RfSWPointSelect@sw:	
  2993                           ; 1 bytes @ 0x1
  2994                           
  2995  0021                     SwPointSelect@sw:	
  2996                           ; 1 bytes @ 0x1
  2997                           
  2998                           
  2999                           ; 1 bytes @ 0x1
  3000  0021                     	ds	1
  3001  0022                     ??_CC2500_WriteCommand:	
  3002  0022                     ??_CC2500_ReadStatus:	
  3003                           ; 0 bytes @ 0x2
  3004                           
  3005  0022                     ??_DelayTime_1us:	
  3006                           ; 0 bytes @ 0x2
  3007                           
  3008  0022                     ?_CC2500_WriteREG:	
  3009                           ; 0 bytes @ 0x2
  3010                           
  3011  0022                     ??_DlyOff_Initialization:	
  3012                           ; 0 bytes @ 0x2
  3013                           
  3014  0022                     ?_setSw_Status:	
  3015                           ; 0 bytes @ 0x2
  3016                           
  3017  0022                     ?_setRFSW_Status:	
  3018                           ; 0 bytes @ 0x2
  3019                           
  3020  0022                     ?_setDimmerLights_Trigger:	
  3021                           ; 0 bytes @ 0x2
  3022                           
  3023  0022                     ?_setDimmerLights_Switch:	
  3024                           ; 0 bytes @ 0x2
  3025                           
  3026  0022                     ??_setDimmerLights_Initialization:	
  3027                           ; 0 bytes @ 0x2
  3028                           
  3029  0022                     ?_setDimmerLights_TriggerERROR:	
  3030                           ; 0 bytes @ 0x2
  3031                           
  3032  0022                     ??_setLED:	
  3033                           ; 0 bytes @ 0x2
  3034                           
  3035  0022                     ??_setSw_Enable:	
  3036                           ; 0 bytes @ 0x2
  3037                           
  3038  0022                     ??_getBuz_GO:	
  3039                           ; 0 bytes @ 0x2
  3040                           
  3041  0022                     ?_setDimmerLights_AdjGo:	
  3042                           ; 0 bytes @ 0x2
  3043                           
  3044  0022                     ?_setDimmerLights_TriggerAdj:	
  3045                           ; 0 bytes @ 0x2
  3046                           
  3047  0022                     CC2500_WriteREG@value:	
  3048                           ; 0 bytes @ 0x2
  3049                           
  3050  0022                     DlyOff_Initialization@sw:	
  3051                           ; 1 bytes @ 0x2
  3052                           
  3053  0022                     setDimmerLights_TriggerERROR@command:	
  3054                           ; 1 bytes @ 0x2
  3055                           
  3056  0022                     setDimmerLights_Switch@command:	
  3057                           ; 1 bytes @ 0x2
  3058                           
  3059  0022                     setDimmerLights_AdjGo@command:	
  3060                           ; 1 bytes @ 0x2
  3061                           
  3062  0022                     setDimmerLights_Trigger@command:	
  3063                           ; 1 bytes @ 0x2
  3064                           
  3065  0022                     setDimmerLights_TriggerAdj@command:	
  3066                           ; 1 bytes @ 0x2
  3067                           
  3068  0022                     setLED@led:	
  3069                           ; 1 bytes @ 0x2
  3070                           
  3071  0022                     Flash_Memory_Read@address:	
  3072                           ; 1 bytes @ 0x2
  3073                           
  3074  0022                     setMemory_GO@command:	
  3075                           ; 1 bytes @ 0x2
  3076                           
  3077  0022                     setRFSW_Status@command:	
  3078                           ; 1 bytes @ 0x2
  3079                           
  3080  0022                     setSw_Enable@command:	
  3081                           ; 1 bytes @ 0x2
  3082                           
  3083  0022                     setSw_Status@command:	
  3084                           ; 1 bytes @ 0x2
  3085                           
  3086  0022                     ___bmul@product:	
  3087                           ; 1 bytes @ 0x2
  3088                           
  3089  0022                     DelayTime_1us@i:	
  3090                           ; 1 bytes @ 0x2
  3091                           
  3092  0022                     ___awdiv@dividend:	
  3093                           ; 2 bytes @ 0x2
  3094                           
  3095                           
  3096                           ; 2 bytes @ 0x2
  3097  0022                     	ds	1
  3098  0023                     ??_CC2500_WriteREG:	
  3099  0023                     ??_setSw_Status:	
  3100                           ; 0 bytes @ 0x3
  3101                           
  3102  0023                     ??_setRFSW_Status:	
  3103                           ; 0 bytes @ 0x3
  3104                           
  3105  0023                     ??_setDimmerLights_Trigger:	
  3106                           ; 0 bytes @ 0x3
  3107                           
  3108  0023                     ??_setDimmerLights_Switch:	
  3109                           ; 0 bytes @ 0x3
  3110                           
  3111  0023                     ?_setDimmerLights:	
  3112                           ; 0 bytes @ 0x3
  3113                           
  3114  0023                     ??_setDimmerLights_TriggerERROR:	
  3115                           ; 0 bytes @ 0x3
  3116                           
  3117  0023                     ??_setLED_Initialization:	
  3118                           ; 0 bytes @ 0x3
  3119                           
  3120  0023                     ??_setSw_Initialization:	
  3121                           ; 0 bytes @ 0x3
  3122                           
  3123  0023                     ??_DelayOff_Initialization:	
  3124                           ; 0 bytes @ 0x3
  3125                           
  3126  0023                     ??_DimmerLights_Close:	
  3127                           ; 0 bytes @ 0x3
  3128                           
  3129  0023                     ??_setDimmerLights_AdjGo:	
  3130                           ; 0 bytes @ 0x3
  3131                           
  3132  0023                     ??_setDimmerLights_TriggerAdj:	
  3133                           ; 0 bytes @ 0x3
  3134                           
  3135  0023                     ??_getAD:	
  3136                           ; 0 bytes @ 0x3
  3137                           
  3138  0023                     CC2500_WriteCommand@command:	
  3139                           ; 0 bytes @ 0x3
  3140                           
  3141  0023                     CC2500_ReadStatus@status_addr:	
  3142                           ; 1 bytes @ 0x3
  3143                           
  3144  0023                     setDimmerLights_Initialization@lights:	
  3145                           ; 1 bytes @ 0x3
  3146                           
  3147  0023                     setDimmerLights_TriggerERROR@lights:	
  3148                           ; 1 bytes @ 0x3
  3149                           
  3150  0023                     setDimmerLights@status:	
  3151                           ; 1 bytes @ 0x3
  3152                           
  3153  0023                     setDimmerLights_Switch@lights:	
  3154                           ; 1 bytes @ 0x3
  3155                           
  3156  0023                     setDimmerLights_AdjGo@lights:	
  3157                           ; 1 bytes @ 0x3
  3158                           
  3159  0023                     setDimmerLights_Trigger@lights:	
  3160                           ; 1 bytes @ 0x3
  3161                           
  3162  0023                     setDimmerLights_TriggerAdj@lights:	
  3163                           ; 1 bytes @ 0x3
  3164                           
  3165  0023                     setLED_Initialization@led:	
  3166                           ; 1 bytes @ 0x3
  3167                           
  3168  0023                     setLED_Main@led:	
  3169                           ; 1 bytes @ 0x3
  3170                           
  3171  0023                     getAD@adcon0:	
  3172                           ; 1 bytes @ 0x3
  3173                           
  3174  0023                     Flash_Memory_Read@ret:	
  3175                           ; 1 bytes @ 0x3
  3176                           
  3177  0023                     setRFSW_Status@sw:	
  3178                           ; 1 bytes @ 0x3
  3179                           
  3180  0023                     setSw_Initialization@sw:	
  3181                           ; 1 bytes @ 0x3
  3182                           
  3183  0023                     setSw_Status@sw:	
  3184                           ; 1 bytes @ 0x3
  3185                           
  3186  0023                     ___bmul@multiplier:	
  3187                           ; 1 bytes @ 0x3
  3188                           
  3189  0023                     ___ftpack@exp:	
  3190                           ; 1 bytes @ 0x3
  3191                           
  3192                           
  3193                           ; 1 bytes @ 0x3
  3194  0023                     	ds	1
  3195  0024                     ??_CC2500_ClearTXFIFO:	
  3196  0024                     ??_CC2500_ClearRXFIFO:	
  3197                           ; 0 bytes @ 0x4
  3198                           
  3199  0024                     ??_CC2500_SIDLEMode:	
  3200                           ; 0 bytes @ 0x4
  3201                           
  3202  0024                     ??_DelayTimejudge:	
  3203                           ; 0 bytes @ 0x4
  3204                           
  3205  0024                     ??_setDimmerLights:	
  3206                           ; 0 bytes @ 0x4
  3207                           
  3208  0024                     ??_setDimmerLights_ERROR:	
  3209                           ; 0 bytes @ 0x4
  3210                           
  3211  0024                     ??_Flash_Memory_Modify:	
  3212                           ; 0 bytes @ 0x4
  3213                           
  3214  0024                     ??_RF_RxDisable:	
  3215                           ; 0 bytes @ 0x4
  3216                           
  3217  0024                     ??_Sw_DimmerAdjFunc:	
  3218                           ; 0 bytes @ 0x4
  3219                           
  3220  0024                     ??_CC2500_TxData:	
  3221                           ; 0 bytes @ 0x4
  3222                           
  3223  0024                     ??_CC2500_RxData:	
  3224                           ; 0 bytes @ 0x4
  3225                           
  3226  0024                     ??_DimmerLights_Initialization:	
  3227                           ; 0 bytes @ 0x4
  3228                           
  3229  0024                     ??_LED_Initialization:	
  3230                           ; 0 bytes @ 0x4
  3231                           
  3232  0024                     ??_LED_Main:	
  3233                           ; 0 bytes @ 0x4
  3234                           
  3235  0024                     ??_getTemp_AD:	
  3236                           ; 0 bytes @ 0x4
  3237                           
  3238  0024                     ??_getPowerFault_AD:	
  3239                           ; 0 bytes @ 0x4
  3240                           
  3241  0024                     ??_Switch_Initialization:	
  3242                           ; 0 bytes @ 0x4
  3243                           
  3244  0024                     ??___awdiv:	
  3245                           ; 0 bytes @ 0x4
  3246                           
  3247  0024                     CC2500_WriteREG@w_addr:	
  3248                           ; 0 bytes @ 0x4
  3249                           
  3250  0024                     Sw_DimmerAdjFunc@Idle:	
  3251                           ; 1 bytes @ 0x4
  3252                           
  3253  0024                     ___ftpack@sign:	
  3254                           ; 1 bytes @ 0x4
  3255                           
  3256  0024                     getBuz_GO@i:	
  3257                           ; 1 bytes @ 0x4
  3258                           
  3259  0024                     DelayTime_1us@j:	
  3260                           ; 2 bytes @ 0x4
  3261                           
  3262                           
  3263                           ; 2 bytes @ 0x4
  3264  0024                     	ds	1
  3265  0025                     ??_CC2500_InitSetREG:	
  3266  0025                     ??_CC2500_InitPATable:	
  3267                           ; 0 bytes @ 0x5
  3268                           
  3269  0025                     ??___ftpack:	
  3270                           ; 0 bytes @ 0x5
  3271                           
  3272  0025                     CC2500_TxData@loop_e:	
  3273                           ; 0 bytes @ 0x5
  3274                           
  3275  0025                     CC2500_RxData@loop_f:	
  3276                           ; 1 bytes @ 0x5
  3277                           
  3278  0025                     setDimmerLights_ERROR@lights:	
  3279                           ; 1 bytes @ 0x5
  3280                           
  3281  0025                     setDimmerLights@lights:	
  3282                           ; 1 bytes @ 0x5
  3283                           
  3284  0025                     Flash_Memory_Modify@i:	
  3285                           ; 1 bytes @ 0x5
  3286                           
  3287  0025                     getTemp_AD@channel:	
  3288                           ; 1 bytes @ 0x5
  3289                           
  3290  0025                     getPowerFault_AD@channel:	
  3291                           ; 1 bytes @ 0x5
  3292                           
  3293  0025                     Sw_DimmerAdjFunc@sw:	
  3294                           ; 1 bytes @ 0x5
  3295                           
  3296  0025                     ___awdiv@counter:	
  3297                           ; 1 bytes @ 0x5
  3298                           
  3299                           
  3300                           ; 1 bytes @ 0x5
  3301  0025                     	ds	1
  3302  0026                     ??_CC2500_PowerRST:	
  3303  0026                     ??_CC2500_FrequencyCabr:	
  3304                           ; 0 bytes @ 0x6
  3305                           
  3306  0026                     ??_Flash_Memory_Main:	
  3307                           ; 0 bytes @ 0x6
  3308                           
  3309  0026                     CC2500_InitSetREG@temp1:	
  3310                           ; 0 bytes @ 0x6
  3311                           
  3312  0026                     CC2500_InitPATable@temp:	
  3313                           ; 1 bytes @ 0x6
  3314                           
  3315  0026                     DelayTimejudge@i:	
  3316                           ; 1 bytes @ 0x6
  3317                           
  3318  0026                     ___awdiv@sign:	
  3319                           ; 1 bytes @ 0x6
  3320                           
  3321                           
  3322                           ; 1 bytes @ 0x6
  3323  0026                     	ds	1
  3324  0027                     CC2500_InitSetREG@temp2:	
  3325  0027                     CC2500_InitPATable@loop_d:	
  3326                           ; 1 bytes @ 0x7
  3327                           
  3328  0027                     DelayTimejudge@j:	
  3329                           ; 1 bytes @ 0x7
  3330                           
  3331  0027                     ___awdiv@quotient:	
  3332                           ; 1 bytes @ 0x7
  3333                           
  3334                           
  3335                           ; 2 bytes @ 0x7
  3336  0027                     	ds	1
  3337  0028                     ?___awtoft:	
  3338  0028                     CC2500_InitSetREG@loop_c:	
  3339                           ; 3 bytes @ 0x8
  3340                           
  3341  0028                     DelayTimejudge@k:	
  3342                           ; 1 bytes @ 0x8
  3343                           
  3344  0028                     ___awtoft@c:	
  3345                           ; 1 bytes @ 0x8
  3346                           
  3347                           
  3348                           ; 2 bytes @ 0x8
  3349  0028                     	ds	1
  3350  0029                     ?_setBuz:	
  3351  0029                     ??_CC2500_PowerOnInitial:	
  3352                           ; 0 bytes @ 0x9
  3353                           
  3354  0029                     DelayTimejudge@value:	
  3355                           ; 0 bytes @ 0x9
  3356                           
  3357  0029                     setBuz@time:	
  3358                           ; 1 bytes @ 0x9
  3359                           
  3360                           
  3361                           ; 2 bytes @ 0x9
  3362  0029                     	ds	1
  3363  002A                     ?_setDelayOff_GO:	
  3364  002A                     setDelayOff_GO@command:	
  3365                           ; 0 bytes @ 0xA
  3366                           
  3367                           
  3368                           ; 1 bytes @ 0xA
  3369  002A                     	ds	1
  3370  002B                     ??_setBuz:	
  3371  002B                     ??___awtoft:	
  3372                           ; 0 bytes @ 0xB
  3373                           
  3374  002B                     setDelayOff_GO@value:	
  3375                           ; 0 bytes @ 0xB
  3376                           
  3377                           
  3378                           ; 1 bytes @ 0xB
  3379  002B                     	ds	1
  3380  002C                     ??_setDelayOff_GO:	
  3381  002C                     setBuz@count:	
  3382                           ; 0 bytes @ 0xC
  3383                           
  3384                           
  3385                           ; 1 bytes @ 0xC
  3386  002C                     	ds	1
  3387  002D                     ??_setLog_Code:	
  3388  002D                     ??_my_Main:	
  3389                           ; 0 bytes @ 0xD
  3390                           
  3391  002D                     ??_DimmerLights_Exceptions:	
  3392                           ; 0 bytes @ 0xD
  3393                           
  3394  002D                     DimmerLights_Exceptions@status:	
  3395                           ; 0 bytes @ 0xD
  3396                           
  3397  002D                     ___awtoft@sign:	
  3398                           ; 1 bytes @ 0xD
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0xD
  3402  002D                     	ds	1
  3403  002E                     ??_setOverTemp_Exceptions:	
  3404  002E                     ??_setPowerFault_Exceptions:	
  3405                           ; 0 bytes @ 0xE
  3406                           
  3407  002E                     ?___ftdiv:	
  3408                           ; 0 bytes @ 0xE
  3409                           
  3410  002E                     ?___ftmul:	
  3411                           ; 3 bytes @ 0xE
  3412                           
  3413  002E                     setDelayOff_GO@sw:	
  3414                           ; 3 bytes @ 0xE
  3415                           
  3416  002E                     ___ftdiv@f2:	
  3417                           ; 1 bytes @ 0xE
  3418                           
  3419  002E                     ___ftmul@f1:	
  3420                           ; 3 bytes @ 0xE
  3421                           
  3422                           
  3423                           ; 3 bytes @ 0xE
  3424  002E                     	ds	1
  3425  002F                     setOverTemp_Exceptions@i:	
  3426  002F                     setPowerFault_Exceptions@i:	
  3427                           ; 1 bytes @ 0xF
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0xF
  3431  002F                     	ds	1
  3432  0030                     setOverTemp_Exceptions@command:	
  3433  0030                     setPowerFault_Exceptions@command:	
  3434                           ; 1 bytes @ 0x10
  3435                           
  3436                           
  3437                           ; 1 bytes @ 0x10
  3438  0030                     	ds	1
  3439  0031                     ??_setTemp_Main:	
  3440  0031                     ??_setPowerFault_Main:	
  3441                           ; 0 bytes @ 0x11
  3442                           
  3443  0031                     ___ftdiv@f1:	
  3444                           ; 0 bytes @ 0x11
  3445                           
  3446  0031                     ___ftmul@f2:	
  3447                           ; 3 bytes @ 0x11
  3448                           
  3449                           
  3450                           ; 3 bytes @ 0x11
  3451  0031                     	ds	1
  3452  0032                     ??_Temp_Main:	
  3453  0032                     ??_PowerFault_Main:	
  3454                           ; 0 bytes @ 0x12
  3455                           
  3456                           
  3457                           ; 0 bytes @ 0x12
  3458  0032                     	ds	2
  3459  0034                     ??___ftdiv:	
  3460  0034                     ??___ftmul:	
  3461                           ; 0 bytes @ 0x14
  3462                           
  3463                           
  3464                           ; 0 bytes @ 0x14
  3465  0034                     	ds	4
  3466  0038                     ___ftdiv@cntr:	
  3467  0038                     ___ftmul@exp:	
  3468                           ; 1 bytes @ 0x18
  3469                           
  3470                           
  3471                           ; 1 bytes @ 0x18
  3472  0038                     	ds	1
  3473  0039                     ___ftdiv@f3:	
  3474  0039                     ___ftmul@f3_as_product:	
  3475                           ; 3 bytes @ 0x19
  3476                           
  3477                           
  3478                           ; 3 bytes @ 0x19
  3479  0039                     	ds	3
  3480  003C                     ___ftdiv@exp:	
  3481  003C                     ___ftmul@cntr:	
  3482                           ; 1 bytes @ 0x1C
  3483                           
  3484                           
  3485                           ; 1 bytes @ 0x1C
  3486  003C                     	ds	1
  3487  003D                     ___ftdiv@sign:	
  3488  003D                     ___ftmul@sign:	
  3489                           ; 1 bytes @ 0x1D
  3490                           
  3491                           
  3492                           ; 1 bytes @ 0x1D
  3493  003D                     	ds	1
  3494  003E                     ?___ftadd:	
  3495  003E                     ___ftadd@f1:	
  3496                           ; 3 bytes @ 0x1E
  3497                           
  3498                           
  3499                           ; 3 bytes @ 0x1E
  3500  003E                     	ds	3
  3501  0041                     ___ftadd@f2:	
  3502                           
  3503                           ; 3 bytes @ 0x21
  3504  0041                     	ds	3
  3505  0044                     ??___ftadd:	
  3506                           
  3507                           ; 0 bytes @ 0x24
  3508  0044                     	ds	4
  3509  0048                     ___ftadd@sign:	
  3510                           
  3511                           ; 1 bytes @ 0x28
  3512  0048                     	ds	1
  3513  0049                     ___ftadd@exp2:	
  3514                           
  3515                           ; 1 bytes @ 0x29
  3516  0049                     	ds	1
  3517  004A                     ___ftadd@exp1:	
  3518                           
  3519                           ; 1 bytes @ 0x2A
  3520  004A                     	ds	1
  3521  004B                     ?___fttol:	
  3522  004B                     ___fttol@f1:	
  3523                           ; 4 bytes @ 0x2B
  3524                           
  3525                           
  3526                           ; 3 bytes @ 0x2B
  3527  004B                     	ds	4
  3528  004F                     ??___fttol:	
  3529                           
  3530                           ; 0 bytes @ 0x2F
  3531  004F                     	ds	4
  3532  0053                     ___fttol@sign1:	
  3533                           
  3534                           ; 1 bytes @ 0x33
  3535  0053                     	ds	1
  3536  0054                     ___fttol@lval:	
  3537                           
  3538                           ; 4 bytes @ 0x34
  3539  0054                     	ds	4
  3540  0058                     ___fttol@exp1:	
  3541                           
  3542                           ; 1 bytes @ 0x38
  3543  0058                     	ds	1
  3544  0059                     ??_getPercentValue:	
  3545  0059                     ??_setPercentValue:	
  3546                           ; 0 bytes @ 0x39
  3547                           
  3548  0059                     setPercentValue@value:	
  3549                           ; 0 bytes @ 0x39
  3550                           
  3551                           
  3552                           ; 1 bytes @ 0x39
  3553  0059                     	ds	1
  3554  005A                     setPercentValue@i:	
  3555                           
  3556                           ; 3 bytes @ 0x3A
  3557  005A                     	ds	1
  3558  005B                     getPercentValue@value:	
  3559                           
  3560                           ; 1 bytes @ 0x3B
  3561  005B                     	ds	1
  3562  005C                     getPercentValue@i:	
  3563                           
  3564                           ; 3 bytes @ 0x3C
  3565  005C                     	ds	1
  3566  005D                     ?_setRF_DimmerLights:	
  3567  005D                     ??_Flash_Memory_Initialization:	
  3568                           ; 0 bytes @ 0x3D
  3569                           
  3570  005D                     setRF_DimmerLights@on:	
  3571                           ; 0 bytes @ 0x3D
  3572                           
  3573                           
  3574                           ; 1 bytes @ 0x3D
  3575  005D                     	ds	1
  3576  005E                     ??_setRF_DimmerLights:	
  3577  005E                     Flash_Memory_Initialization@i:	
  3578                           ; 0 bytes @ 0x3E
  3579                           
  3580                           
  3581                           ; 1 bytes @ 0x3E
  3582  005E                     	ds	1
  3583  005F                     ??_setDimmerLights_AdjRF:	
  3584                           
  3585                           ; 0 bytes @ 0x3F
  3586  005F                     	ds	1
  3587  0060                     setDimmerLights_AdjRF@lights:	
  3588  0060                     setRF_DimmerLights@status:	
  3589                           ; 1 bytes @ 0x40
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x40
  3593  0060                     	ds	1
  3594  0061                     ??_setRF_DimmerValue:	
  3595  0061                     setRF_DimmerLights@lights:	
  3596                           ; 0 bytes @ 0x41
  3597                           
  3598                           
  3599                           ; 1 bytes @ 0x41
  3600  0061                     	ds	1
  3601  0062                     ??_DlyOff_Main:	
  3602  0062                     ?_setDimmerLights_Adj:	
  3603                           ; 0 bytes @ 0x42
  3604                           
  3605  0062                     ??_setRFSW_Control:	
  3606                           ; 0 bytes @ 0x42
  3607                           
  3608  0062                     ??_Sw_DimmerOnFunc:	
  3609                           ; 0 bytes @ 0x42
  3610                           
  3611  0062                     ??_Sw_DimmerOffFunc:	
  3612                           ; 0 bytes @ 0x42
  3613                           
  3614  0062                     setDimmerLights_Adj@status:	
  3615                           ; 0 bytes @ 0x42
  3616                           
  3617  0062                     Sw_DimmerOnFunc@Idle:	
  3618                           ; 1 bytes @ 0x42
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x42
  3622  0062                     	ds	1
  3623  0063                     ??_setDimmerLights_Adj:	
  3624  0063                     setRFSW_Control@sw:	
  3625                           ; 0 bytes @ 0x43
  3626                           
  3627  0063                     setRF_DimmerValue@lights:	
  3628                           ; 1 bytes @ 0x43
  3629                           
  3630  0063                     Sw_DimmerOnFunc@sw:	
  3631                           ; 1 bytes @ 0x43
  3632                           
  3633                           
  3634                           ; 1 bytes @ 0x43
  3635  0063                     	ds	1
  3636  0064                     ??_setRFSW_AdjControl:	
  3637  0064                     DlyOff_Main@sw:	
  3638                           ; 0 bytes @ 0x44
  3639                           
  3640  0064                     setDimmerLights_Adj@lights:	
  3641                           ; 1 bytes @ 0x44
  3642                           
  3643  0064                     Sw_DimmerOffFunc@sw:	
  3644                           ; 1 bytes @ 0x44
  3645                           
  3646                           
  3647                           ; 1 bytes @ 0x44
  3648  0064                     	ds	1
  3649  0065                     ??_setDimmerLights_Main:	
  3650  0065                     ??_setSw_Main:	
  3651                           ; 0 bytes @ 0x45
  3652                           
  3653  0065                     ??_DelayOff_Main:	
  3654                           ; 0 bytes @ 0x45
  3655                           
  3656  0065                     setDimmerLights_Main@clear:	
  3657                           ; 0 bytes @ 0x45
  3658                           
  3659                           
  3660                           ; 1 bytes @ 0x45
  3661  0065                     	ds	1
  3662  0066                     setDimmerLights_Main@lights:	
  3663  0066                     setRFSW_AdjControl@sw:	
  3664                           ; 1 bytes @ 0x46
  3665                           
  3666                           
  3667                           ; 1 bytes @ 0x46
  3668  0066                     	ds	1
  3669  0067                     ??_setRF_Main:	
  3670  0067                     ??_getRxData:	
  3671                           ; 0 bytes @ 0x47
  3672                           
  3673  0067                     ??_setControl_Lights_Table:	
  3674                           ; 0 bytes @ 0x47
  3675                           
  3676  0067                     ??_DimmerLights_Main:	
  3677                           ; 0 bytes @ 0x47
  3678                           
  3679  0067                     _setSw_Main$4944:	
  3680                           ; 0 bytes @ 0x47
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x47
  3684  0067                     	ds	1
  3685  0068                     _setRF_Main$4074:	
  3686  0068                     setSw_Main@sw:	
  3687                           ; 1 bytes @ 0x48
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x48
  3691  0068                     	ds	1
  3692  0069                     ??_RF_Main:	
  3693  0069                     ??_Switch_Main:	
  3694                           ; 0 bytes @ 0x49
  3695                           
  3696  0069                     ?_main:	
  3697                           ; 0 bytes @ 0x49
  3698                           
  3699  0069                     main@argc:	
  3700                           ; 2 bytes @ 0x49
  3701                           
  3702                           
  3703                           ; 2 bytes @ 0x49
  3704  0069                     	ds	2
  3705  006B                     main@argv:	
  3706                           
  3707                           ; 2 bytes @ 0x4B
  3708  006B                     	ds	2
  3709  006D                     ??_main:	
  3710                           
  3711                           	psect	maintext
  3712  088D                     __pmaintext:	
  3713                           ; 0 bytes @ 0x4D
  3714 ;;
  3715 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3716 ;;
  3717 ;; *************** function _main *****************
  3718 ;; Defined at:
  3719 ;;		line 7 in file "../src/main_B1.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  argc            2   73[BANK0 ] int 
  3722 ;;  argv            2   75[BANK0 ] PTR PTR unsigned char 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  2   73[BANK0 ] int 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3729 ;; Tracked objects:
  3730 ;;		On entry : 17F/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        4 bytes
  3739 ;; Hardware stack levels required when called:   15
  3740 ;; This function calls:
  3741 ;;		_Buzzer_Initialization
  3742 ;;		_Buzzer_Main
  3743 ;;		_CC2500_PowerOnInitial
  3744 ;;		_DelayOff_Initialization
  3745 ;;		_DelayOff_Main
  3746 ;;		_DimmerLights_Initialization
  3747 ;;		_DimmerLights_Main
  3748 ;;		_Flash_Memory_Initialization
  3749 ;;		_Flash_Memory_Main
  3750 ;;		_LED_Initialization
  3751 ;;		_LED_Main
  3752 ;;		_Mcu_Initialization
  3753 ;;		_PowerFault_Initialization
  3754 ;;		_PowerFault_Main
  3755 ;;		_RF_Initialization
  3756 ;;		_RF_Main
  3757 ;;		_Switch_Initialization
  3758 ;;		_Switch_Main
  3759 ;;		_Temp_Initialization
  3760 ;;		_Temp_Main
  3761 ;;		_getPowerFault_AD
  3762 ;;		_getTemp_AD
  3763 ;;		_myMain_Initialization
  3764 ;;		_my_Main
  3765 ;; This function is called by:
  3766 ;;		Startup code after reset
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _main
  3772  088D                     _main:	
  3773                           
  3774                           ;main_B1.c: 9: myMain_Initialization();
  3775                           
  3776                           ;incstack = 0
  3777                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3778  088D  319F  2790  3188   	fcall	_myMain_Initialization
  3779                           
  3780                           ;main_B1.c: 10: Mcu_Initialization();
  3781  0890  319F  2754  3188   	fcall	_Mcu_Initialization
  3782                           
  3783                           ;main_B1.c: 11: Flash_Memory_Initialization();
  3784  0893  3184  242A  3188   	fcall	_Flash_Memory_Initialization
  3785                           
  3786                           ;main_B1.c: 12: LED_Initialization();
  3787  0896  319E  26F8  3188   	fcall	_LED_Initialization
  3788                           
  3789                           ;main_B1.c: 13: Buzzer_Initialization();
  3790  0899  319D  25EB  3188   	fcall	_Buzzer_Initialization
  3791                           
  3792                           ;main_B1.c: 15: ;;
  3793                           ;main_B1.c: 16: Temp_Initialization();
  3794  089C  319D  25FD  3188   	fcall	_Temp_Initialization
  3795                           
  3796                           ;main_B1.c: 17: ;;
  3797                           ;main_B1.c: 18: PowerFault_Initialization();
  3798  089F  319D  25EE  3188   	fcall	_PowerFault_Initialization
  3799                           
  3800                           ;main_B1.c: 19: DelayOff_Initialization();
  3801  08A2  319E  2613  3188   	fcall	_DelayOff_Initialization
  3802                           
  3803                           ;main_B1.c: 21: DimmerLights_Initialization();
  3804  08A5  319F  271D  3188   	fcall	_DimmerLights_Initialization
  3805                           
  3806                           ;main_B1.c: 22: ;;
  3807                           ;main_B1.c: 23: ;;
  3808                           ;main_B1.c: 24: ;;
  3809                           ;main_B1.c: 25: Switch_Initialization();
  3810  08A8  319E  2681  3188   	fcall	_Switch_Initialization
  3811                           
  3812                           ;main_B1.c: 26: RF_Initialization();
  3813  08AB  319D  25F4  3188   	fcall	_RF_Initialization
  3814                           
  3815                           ;main_B1.c: 27: CC2500_PowerOnInitial();
  3816  08AE  3190  20C0  3188   	fcall	_CC2500_PowerOnInitial
  3817  08B1                     l7917:	
  3818                           ;main_B1.c: 28: ;;
  3819                           ;main_B1.c: 31: while (1) {
  3820                           
  3821                           
  3822                           ;main_B1.c: 33: if (myMain.PowerON) {
  3823  08B1  0021               	movlb	1	; select bank1
  3824  08B2  1C20               	btfss	_myMain^(0+128),0
  3825  08B3  28BC               	goto	l7921
  3826                           
  3827                           ;main_B1.c: 35: ;;
  3828                           ;main_B1.c: 39: ;;
  3829                           ;main_B1.c: 43: getTemp_AD(0x09);
  3830  08B4  3009               	movlw	9
  3831  08B5  3194  2490  3188   	fcall	_getTemp_AD
  3832                           
  3833                           ;main_B1.c: 47: getPowerFault_AD(0x11);
  3834  08B8  3011               	movlw	17
  3835  08B9  3192  22F6  3188   	fcall	_getPowerFault_AD
  3836  08BC                     l7921:	
  3837                           
  3838                           ;main_B1.c: 62: }
  3839                           ;main_B1.c: 65: if (myMain.T0_Timerout) {
  3840  08BC  0021               	movlb	1	; select bank1
  3841  08BD  1CA0               	btfss	_myMain^(0+128),1
  3842  08BE  28B1               	goto	l7917
  3843                           
  3844                           ;main_B1.c: 66: myMain.T0_Timerout = 0;
  3845  08BF  10A0               	bcf	_myMain^(0+128),1
  3846                           
  3847                           ;main_B1.c: 67: my_Main();
  3848  08C0  3196  2691  3188   	fcall	_my_Main
  3849                           
  3850                           ;main_B1.c: 68: ;;
  3851                           ;main_B1.c: 69: ;;
  3852                           ;main_B1.c: 70: ;;
  3853                           ;main_B1.c: 71: if (myMain.PowerON) {
  3854  08C3  0021               	movlb	1	; select bank1
  3855  08C4  1C20               	btfss	_myMain^(0+128),0
  3856  08C5  28B1               	goto	l7917
  3857                           
  3858                           ;main_B1.c: 72: Flash_Memory_Main();
  3859  08C6  3191  21A4  3188   	fcall	_Flash_Memory_Main
  3860                           
  3861                           ;main_B1.c: 74: LED_Main();
  3862  08C9  319F  2704  3188   	fcall	_LED_Main
  3863                           
  3864                           ;main_B1.c: 75: Buzzer_Main();
  3865  08CC  3197  2766  3188   	fcall	_Buzzer_Main
  3866                           
  3867                           ;main_B1.c: 77: ;;
  3868                           ;main_B1.c: 78: Temp_Main();
  3869  08CF  319E  2600  3188   	fcall	_Temp_Main
  3870                           
  3871                           ;main_B1.c: 79: ;;
  3872                           ;main_B1.c: 80: PowerFault_Main();
  3873  08D2  319D  25F1  3188   	fcall	_PowerFault_Main
  3874                           
  3875                           ;main_B1.c: 82: ;;
  3876                           ;main_B1.c: 83: DimmerLights_Main();
  3877  08D5  319E  2643  3188   	fcall	_DimmerLights_Main
  3878                           
  3879                           ;main_B1.c: 84: Switch_Main();
  3880  08D8  319E  2627  3188   	fcall	_Switch_Main
  3881                           
  3882                           ;main_B1.c: 85: ;;
  3883                           ;main_B1.c: 86: ;;
  3884                           ;main_B1.c: 88: RF_Main();
  3885  08DB  319D  25F7  3188   	fcall	_RF_Main
  3886                           
  3887                           ;main_B1.c: 89: DelayOff_Main();
  3888  08DE  319E  2617  3188   	fcall	_DelayOff_Main
  3889                           
  3890                           ;main_B1.c: 90: ;;
  3891  08E1  28B1               	goto	l7917
  3892  08E2                     __end_of_main:	
  3893                           ;main_B1.c: 91: }
  3894                           ;main_B1.c: 92: }
  3895                           ;main_B1.c: 110: }
  3896                           ;main_B1.c: 111: return (0);
  3897                           ;	Return value of _main is never used
  3898                           
  3899                           
  3900                           	psect	text1
  3901  1691                     __ptext1:	
  3902 ;; *************** function _my_Main *****************
  3903 ;; Defined at:
  3904 ;;		line 128 in file "../src/main_B1.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;		None
  3909 ;; Return value:  Size  Location     Type
  3910 ;;		None               void
  3911 ;; Registers used:
  3912 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3922 ;;Total ram usage:        0 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    7
  3925 ;; This function calls:
  3926 ;;		_setBuz
  3927 ;;		_setRF_Enable
  3928 ;;		_setSw_Enable
  3929 ;;		_setTemp_Enable
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           
  3936                           ;psect for function _my_Main
  3937  1691                     _my_Main:	
  3938                           
  3939                           ;main_B1.c: 130: if (myMain.PowerON == 0) {
  3940                           
  3941                           ;incstack = 0
  3942                           ; Regs used in _my_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3943  1691  0021               	movlb	1	; select bank1
  3944  1692  1820               	btfsc	_myMain^(0+128),0
  3945  1693  2EBE               	goto	l7299
  3946                           
  3947                           ;main_B1.c: 131: myMain.PowerCount++;
  3948  1694  3001               	movlw	1
  3949  1695  07A1               	addwf	(_myMain^(0+128)+1),f
  3950  1696  3000               	movlw	0
  3951  1697  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3952                           
  3953                           ;main_B1.c: 132: if (myMain.PowerCount == 150)
  3954  1698  3001               	movlw	1
  3955  1699  3EA0               	addlw	_myMain& (0+255)
  3956  169A  0086               	movwf	6
  3957  169B  0187               	clrf	7
  3958  169C  3F40               	moviw [0]fsr1
  3959  169D  3A96               	xorlw	150
  3960  169E  1D03               	skipz
  3961  169F  2EA2               	goto	u6785
  3962  16A0  3F41               	moviw [1]fsr1
  3963  16A1  3A00               	xorlw	0
  3964  16A2                     u6785:	
  3965  16A2  1D03               	skipz
  3966  16A3  0008               	return
  3967                           
  3968                           ;main_B1.c: 133: {
  3969                           ;main_B1.c: 134: myMain.PowerCount = 0;
  3970  16A4  01A1               	clrf	(_myMain^(0+128)+1)
  3971  16A5  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3972                           
  3973                           ;main_B1.c: 135: myMain.PowerON = 1;
  3974  16A6  1420               	bsf	_myMain^(0+128),0
  3975                           
  3976                           ;main_B1.c: 138: setTemp_Enable(1);
  3977  16A7  3001               	movlw	1
  3978  16A8  319E  2670  3196   	fcall	_setTemp_Enable
  3979                           
  3980                           ;main_B1.c: 142: ;;
  3981                           ;main_B1.c: 148: setBuz(3, 50);
  3982  16AB  3032               	movlw	50
  3983  16AC  0020               	movlb	0	; select bank0
  3984  16AD  00A9               	movwf	setBuz@time
  3985  16AE  3000               	movlw	0
  3986  16AF  00AA               	movwf	setBuz@time+1
  3987  16B0  3003               	movlw	3
  3988  16B1  3189  2139  3196   	fcall	_setBuz
  3989                           
  3990                           ;main_B1.c: 149: myMain.SelfTest = 1;
  3991  16B4  0021               	movlb	1	; select bank1
  3992  16B5  1720               	bsf	_myMain^(0+128),6
  3993                           
  3994                           ;main_B1.c: 151: setSw_Enable(1);
  3995  16B6  3001               	movlw	1
  3996  16B7  319F  2763  3196   	fcall	_setSw_Enable
  3997                           
  3998                           ;main_B1.c: 154: setRF_Enable(1);
  3999  16BA  3001               	movlw	1
  4000  16BB  3190  2066         	fcall	_setRF_Enable
  4001                           
  4002                           ;main_B1.c: 158: }
  4003                           ;main_B1.c: 159: } else {
  4004  16BD  0008               	return
  4005  16BE                     l7299:	
  4006                           
  4007                           ;main_B1.c: 167: myMain.Count1++;
  4008  16BE  3001               	movlw	1
  4009  16BF  0021               	movlb	1	; select bank1
  4010  16C0  07A5               	addwf	(_myMain^(0+128)+5),f
  4011  16C1  3000               	movlw	0
  4012  16C2  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4013                           
  4014                           ;main_B1.c: 168: if (myMain.Count1 == 100)
  4015  16C3  3005               	movlw	5
  4016  16C4  3EA0               	addlw	_myMain& (0+255)
  4017  16C5  0086               	movwf	6
  4018  16C6  0187               	clrf	7
  4019  16C7  3F40               	moviw [0]fsr1
  4020  16C8  3A64               	xorlw	100
  4021  16C9  1D03               	skipz
  4022  16CA  2ECD               	goto	u6795
  4023  16CB  3F41               	moviw [1]fsr1
  4024  16CC  3A00               	xorlw	0
  4025  16CD                     u6795:	
  4026  16CD  1D03               	skipz
  4027  16CE  0008               	return
  4028                           
  4029                           ;main_B1.c: 169: {
  4030                           ;main_B1.c: 170: myMain.Count1 = 0;
  4031  16CF  01A5               	clrf	(_myMain^(0+128)+5)
  4032  16D0  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4033                           
  4034                           ;main_B1.c: 183: if (myMain.Flag) {
  4035  16D1  1DA0               	btfss	_myMain^(0+128),3
  4036  16D2  2ED5               	goto	l2537
  4037                           
  4038                           ;main_B1.c: 184: myMain.Flag = 0;
  4039  16D3  11A0               	bcf	_myMain^(0+128),3
  4040                           
  4041                           ;main_B1.c: 193: } else {
  4042  16D4  0008               	return
  4043  16D5                     l2537:	
  4044                           
  4045                           ;main_B1.c: 194: myMain.Flag = 1;
  4046  16D5  15A0               	bsf	_myMain^(0+128),3
  4047  16D6  0008               	return
  4048  16D7                     __end_of_my_Main:	
  4049                           
  4050                           	psect	text2
  4051  1E70                     __ptext2:	
  4052 ;; *************** function _setTemp_Enable *****************
  4053 ;; Defined at:
  4054 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  command         1    wreg     unsigned char 
  4057 ;; Auto vars:     Size  Location     Type
  4058 ;;  command         1    0[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;		None               void
  4061 ;; Registers used:
  4062 ;;		wreg
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;Total ram usage:        1 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		Nothing
  4077 ;; This function is called by:
  4078 ;;		_my_Main
  4079 ;; This function uses a non-reentrant model
  4080 ;;
  4081                           
  4082                           
  4083                           ;psect for function _setTemp_Enable
  4084  1E70                     _setTemp_Enable:	
  4085                           
  4086                           ;incstack = 0
  4087                           ; Regs used in _setTemp_Enable: [wreg]
  4088                           ;setTemp_Enable@command stored from wreg
  4089  1E70  0020               	movlb	0	; select bank0
  4090  1E71  00A0               	movwf	setTemp_Enable@command
  4091                           
  4092                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4093  1E72  0820               	movf	setTemp_Enable@command,w
  4094  1E73  0021               	movlb	1	; select bank1
  4095  1E74  1059               	bcf	_Temp1^(0+128),0
  4096  1E75  1D03               	skipz
  4097  1E76  1459               	bsf	_Temp1^(0+128),0
  4098  1E77  0008               	return
  4099  1E78                     __end_of_setTemp_Enable:	
  4100                           
  4101                           	psect	text3
  4102  1F90                     __ptext3:	
  4103 ;; *************** function _myMain_Initialization *****************
  4104 ;; Defined at:
  4105 ;;		line 116 in file "../src/main_B1.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;		None
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;		None               void
  4112 ;; Registers used:
  4113 ;;		wreg, fsr1l, fsr1h
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4123 ;;Total ram usage:        1 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    5
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_main
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           
  4134                           ;psect for function _myMain_Initialization
  4135  1F90                     _myMain_Initialization:	
  4136                           
  4137                           ;main_B1.c: 118: product = &_product;
  4138                           
  4139                           ;incstack = 0
  4140                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4141  1F90  30A0               	movlw	__product& (0+255)
  4142  1F91  0020               	movlb	0	; select bank0
  4143  1F92  00A0               	movwf	??_myMain_Initialization
  4144  1F93  0820               	movf	??_myMain_Initialization,w
  4145  1F94  00EF               	movwf	_product
  4146                           
  4147                           ;main_B1.c: 119: product->Data[20] = 209;
  4148  1F95  30D1               	movlw	209
  4149  1F96  00A0               	movwf	??_myMain_Initialization
  4150  1F97  086F               	movf	_product,w
  4151  1F98  3E14               	addlw	20
  4152  1F99  0086               	movwf	6
  4153  1F9A  3001               	movlw	1	; select bank2/3
  4154  1F9B  0087               	movwf	7
  4155  1F9C  0820               	movf	??_myMain_Initialization,w
  4156  1F9D  0081               	movwf	1
  4157  1F9E  0008               	return
  4158  1F9F                     __end_of_myMain_Initialization:	
  4159                           
  4160                           	psect	text4
  4161  1490                     __ptext4:	
  4162 ;; *************** function _getTemp_AD *****************
  4163 ;; Defined at:
  4164 ;;		line 31 in file "../src/OverTemperature_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  channel         1    wreg     unsigned char 
  4167 ;; Auto vars:     Size  Location     Type
  4168 ;;  channel         1    5[BANK0 ] unsigned char 
  4169 ;; Return value:  Size  Location     Type
  4170 ;;		None               void
  4171 ;; Registers used:
  4172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4173 ;; Tracked objects:
  4174 ;;		On entry : 0/0
  4175 ;;		On exit  : 0/0
  4176 ;;		Unchanged: 0/0
  4177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;Total ram usage:        2 bytes
  4183 ;; Hardware stack levels used:    1
  4184 ;; Hardware stack levels required when called:    7
  4185 ;; This function calls:
  4186 ;;		_getAD
  4187 ;; This function is called by:
  4188 ;;		_main
  4189 ;; This function uses a non-reentrant model
  4190 ;;
  4191                           
  4192                           
  4193                           ;psect for function _getTemp_AD
  4194  1490                     _getTemp_AD:	
  4195                           
  4196                           ;incstack = 0
  4197                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4198                           ;getTemp_AD@channel stored from wreg
  4199  1490  0020               	movlb	0	; select bank0
  4200  1491  00A5               	movwf	getTemp_AD@channel
  4201                           
  4202                           ;OverTemperature_B1.c: 32: if (Temp1.ADtoGO == 1) {
  4203  1492  0021               	movlb	1	; select bank1
  4204  1493  1D59               	btfss	_Temp1^(0+128),2
  4205  1494  0008               	return
  4206                           
  4207                           ;OverTemperature_B1.c: 33: Temp1.ADRES = getAD(channel, 0xf0);
  4208  1495  30F0               	movlw	240
  4209  1496  0020               	movlb	0	; select bank0
  4210  1497  00A4               	movwf	??_getTemp_AD
  4211  1498  0824               	movf	??_getTemp_AD,w
  4212  1499  00A0               	movwf	getAD@adcon1
  4213  149A  0825               	movf	getTemp_AD@channel,w
  4214  149B  3191  21C3  3194   	fcall	_getAD
  4215  149E  0020               	movlb	0	; select bank0
  4216  149F  0821               	movf	?_getAD+1,w
  4217  14A0  0021               	movlb	1	; select bank1
  4218  14A1  01E6               	clrf	((_Temp1+1)^(0+128)+12)
  4219  14A2  07E6               	addwf	((_Temp1+1)^(0+128)+12),f
  4220  14A3  0020               	movlb	0	; select bank0
  4221  14A4  0820               	movf	?_getAD,w
  4222  14A5  0021               	movlb	1	; select bank1
  4223  14A6  01E5               	clrf	(_Temp1^(0+128)+12)
  4224  14A7  07E5               	addwf	(_Temp1^(0+128)+12),f
  4225                           
  4226                           ;OverTemperature_B1.c: 34: if (Temp1.ADH[0] < Temp1.ADRES) {
  4227  14A8  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4228  14A9  0262               	subwf	((_Temp1+1)^(0+128)+8),w
  4229  14AA  1D03               	skipz
  4230  14AB  2CAE               	goto	u6735
  4231  14AC  0865               	movf	(_Temp1^(0+128)+12),w
  4232  14AD  0261               	subwf	(_Temp1^(0+128)+8),w
  4233  14AE                     u6735:	
  4234  14AE  1803               	skipnc
  4235  14AF  2CB7               	goto	l7241
  4236                           
  4237                           ;OverTemperature_B1.c: 35: Temp1.ADH[0] = Temp1.ADRES;
  4238  14B0  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4239  14B1  01E2               	clrf	((_Temp1+1)^(0+128)+8)
  4240  14B2  07E2               	addwf	((_Temp1+1)^(0+128)+8),f
  4241  14B3  0865               	movf	(_Temp1^(0+128)+12),w
  4242  14B4  01E1               	clrf	(_Temp1^(0+128)+8)
  4243  14B5  07E1               	addwf	(_Temp1^(0+128)+8),f
  4244                           
  4245                           ;OverTemperature_B1.c: 36: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4246  14B6  0008               	return
  4247  14B7                     l7241:	
  4248  14B7  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4249  14B8  0264               	subwf	((_Temp1+1)^(0+128)+10),w
  4250  14B9  1D03               	skipz
  4251  14BA  2CBD               	goto	u6745
  4252  14BB  0865               	movf	(_Temp1^(0+128)+12),w
  4253  14BC  0263               	subwf	(_Temp1^(0+128)+10),w
  4254  14BD                     u6745:	
  4255  14BD  1803               	skipnc
  4256  14BE  0008               	return
  4257                           
  4258                           ;OverTemperature_B1.c: 37: Temp1.ADH[1] = Temp1.ADRES;
  4259  14BF  0866               	movf	((_Temp1+1)^(0+128)+12),w
  4260  14C0  01E4               	clrf	((_Temp1+1)^(0+128)+10)
  4261  14C1  07E4               	addwf	((_Temp1+1)^(0+128)+10),f
  4262  14C2  0865               	movf	(_Temp1^(0+128)+12),w
  4263  14C3  01E3               	clrf	(_Temp1^(0+128)+10)
  4264  14C4  07E3               	addwf	(_Temp1^(0+128)+10),f
  4265  14C5  0008               	return
  4266  14C6                     __end_of_getTemp_AD:	
  4267                           
  4268                           	psect	text5
  4269  12F6                     __ptext5:	
  4270 ;; *************** function _getPowerFault_AD *****************
  4271 ;; Defined at:
  4272 ;;		line 45 in file "../src/PowerFault_B1.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  channel         1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  channel         1    5[BANK0 ] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;		None               void
  4279 ;; Registers used:
  4280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;Total ram usage:        2 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    7
  4293 ;; This function calls:
  4294 ;;		_getAD
  4295 ;; This function is called by:
  4296 ;;		_main
  4297 ;; This function uses a non-reentrant model
  4298 ;;
  4299                           
  4300                           
  4301                           ;psect for function _getPowerFault_AD
  4302  12F6                     _getPowerFault_AD:	
  4303                           
  4304                           ;incstack = 0
  4305                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4306                           ;getPowerFault_AD@channel stored from wreg
  4307  12F6  0020               	movlb	0	; select bank0
  4308  12F7  00A5               	movwf	getPowerFault_AD@channel
  4309                           
  4310                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4311  12F8  0021               	movlb	1	; select bank1
  4312  12F9  1DBE               	btfss	_PF1^(0+128),3
  4313  12FA  0008               	return
  4314                           
  4315                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4316  12FB  30F0               	movlw	240
  4317  12FC  0020               	movlb	0	; select bank0
  4318  12FD  00A4               	movwf	??_getPowerFault_AD
  4319  12FE  0824               	movf	??_getPowerFault_AD,w
  4320  12FF  00A0               	movwf	getAD@adcon1
  4321  1300  0825               	movf	getPowerFault_AD@channel,w
  4322  1301  3191  21C3  3192   	fcall	_getAD
  4323  1304  0020               	movlb	0	; select bank0
  4324  1305  0821               	movf	?_getAD+1,w
  4325  1306  0021               	movlb	1	; select bank1
  4326  1307  01C5               	clrf	((_PF1+1)^(0+128)+6)
  4327  1308  07C5               	addwf	((_PF1+1)^(0+128)+6),f
  4328  1309  0020               	movlb	0	; select bank0
  4329  130A  0820               	movf	?_getAD,w
  4330  130B  0021               	movlb	1	; select bank1
  4331  130C  01C4               	clrf	(_PF1^(0+128)+6)
  4332  130D  07C4               	addwf	(_PF1^(0+128)+6),f
  4333                           
  4334                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4335  130E  0845               	movf	((_PF1+1)^(0+128)+6),w
  4336  130F  0243               	subwf	((_PF1+1)^(0+128)+4),w
  4337  1310  1D03               	skipz
  4338  1311  2B14               	goto	u6765
  4339  1312  0844               	movf	(_PF1^(0+128)+6),w
  4340  1313  0242               	subwf	(_PF1^(0+128)+4),w
  4341  1314                     u6765:	
  4342  1314  1803               	skipnc
  4343  1315  0008               	return
  4344                           
  4345                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4346  1316  0845               	movf	((_PF1+1)^(0+128)+6),w
  4347  1317  01C3               	clrf	((_PF1+1)^(0+128)+4)
  4348  1318  07C3               	addwf	((_PF1+1)^(0+128)+4),f
  4349  1319  0844               	movf	(_PF1^(0+128)+6),w
  4350  131A  01C2               	clrf	(_PF1^(0+128)+4)
  4351  131B  07C2               	addwf	(_PF1^(0+128)+4),f
  4352  131C  0008               	return
  4353  131D                     __end_of_getPowerFault_AD:	
  4354                           
  4355                           	psect	text6
  4356  11C3                     __ptext6:	
  4357 ;; *************** function _getAD *****************
  4358 ;; Defined at:
  4359 ;;		line 343 in file "../src/MCU_B1.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  adcon0          1    wreg     unsigned char 
  4362 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4365 ;; Return value:  Size  Location     Type
  4366 ;;                  2    0[BANK0 ] int 
  4367 ;; Registers used:
  4368 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4369 ;; Tracked objects:
  4370 ;;		On entry : 0/0
  4371 ;;		On exit  : 0/0
  4372 ;;		Unchanged: 0/0
  4373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4374 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4378 ;;Total ram usage:        4 bytes
  4379 ;; Hardware stack levels used:    1
  4380 ;; Hardware stack levels required when called:    6
  4381 ;; This function calls:
  4382 ;;		_Timeout_Counter
  4383 ;;		_set_TimeoutCleared
  4384 ;; This function is called by:
  4385 ;;		_getTemp_AD
  4386 ;;		_getPowerFault_AD
  4387 ;; This function uses a non-reentrant model
  4388 ;;
  4389                           
  4390                           
  4391                           ;psect for function _getAD
  4392  11C3                     _getAD:	
  4393                           
  4394                           ;incstack = 0
  4395                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4396                           ;getAD@adcon0 stored from wreg
  4397  11C3  0020               	movlb	0	; select bank0
  4398  11C4  00A3               	movwf	getAD@adcon0
  4399                           
  4400                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4401  11C5  0823               	movf	getAD@adcon0,w
  4402  11C6  0021               	movlb	1	; select bank1
  4403  11C7  009D               	movwf	29	;volatile
  4404                           
  4405                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4406  11C8  0020               	movlb	0	; select bank0
  4407  11C9  0820               	movf	getAD@adcon1,w
  4408  11CA  0021               	movlb	1	; select bank1
  4409  11CB  009E               	movwf	30	;volatile
  4410                           
  4411                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4412  11CC  149D               	bsf	29,1	;volatile
  4413                           
  4414                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4415  11CD  29D1               	goto	l6753
  4416  11CE                     l6751:	
  4417                           
  4418                           ;MCU_B1.c: 348: Timeout_Counter();
  4419  11CE  3191  2102  3191   	fcall	_Timeout_Counter
  4420  11D1                     l6753:	
  4421  11D1  0021               	movlb	1	; select bank1
  4422  11D2  1C9D               	btfss	29,1	;volatile
  4423  11D3  29D6               	goto	l6757
  4424  11D4  1D2F               	btfss	(_myMain^(0+128)+15),2
  4425  11D5  29CE               	goto	l6751
  4426  11D6                     l6757:	
  4427                           
  4428                           ;MCU_B1.c: 349: };
  4429                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4430  11D6  319E  262B         	fcall	_set_TimeoutCleared
  4431                           
  4432                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4433  11D8  0021               	movlb	1	; select bank1
  4434  11D9  081C               	movf	28,w	;volatile
  4435  11DA  0020               	movlb	0	; select bank0
  4436  11DB  01A1               	clrf	?_getAD+1
  4437  11DC  07A1               	addwf	?_getAD+1,f
  4438  11DD  0021               	movlb	1	; select bank1
  4439  11DE  081B               	movf	27,w	;volatile
  4440  11DF  0020               	movlb	0	; select bank0
  4441  11E0  01A0               	clrf	?_getAD
  4442  11E1  07A0               	addwf	?_getAD,f
  4443  11E2  0008               	return
  4444  11E3                     __end_of_getAD:	
  4445                           
  4446                           	psect	text7
  4447  1E00                     __ptext7:	
  4448 ;; *************** function _Temp_Main *****************
  4449 ;; Defined at:
  4450 ;;		line 48 in file "../src/OverTemperature_B1.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;		None
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4468 ;;Total ram usage:        0 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:   11
  4471 ;; This function calls:
  4472 ;;		_setTemp_Main
  4473 ;; This function is called by:
  4474 ;;		_main
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           
  4479                           ;psect for function _Temp_Main
  4480  1E00                     _Temp_Main:	
  4481                           
  4482                           ;OverTemperature_B1.c: 50: setTemp_Main();
  4483                           
  4484                           ;incstack = 0
  4485                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4486  1E00  318E  26F3         	fcall	_setTemp_Main
  4487  1E02  0008               	return
  4488  1E03                     __end_of_Temp_Main:	
  4489                           
  4490                           	psect	text8
  4491  0EF3                     __ptext8:	
  4492 ;; *************** function _setTemp_Main *****************
  4493 ;; Defined at:
  4494 ;;		line 55 in file "../src/OverTemperature_B1.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;		None
  4497 ;; Auto vars:     Size  Location     Type
  4498 ;;		None
  4499 ;; Return value:  Size  Location     Type
  4500 ;;		None               void
  4501 ;; Registers used:
  4502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4503 ;; Tracked objects:
  4504 ;;		On entry : 0/0
  4505 ;;		On exit  : 0/0
  4506 ;;		Unchanged: 0/0
  4507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;Total ram usage:        1 bytes
  4513 ;; Hardware stack levels used:    1
  4514 ;; Hardware stack levels required when called:   10
  4515 ;; This function calls:
  4516 ;;		_getPF_Safe
  4517 ;;		_setOverTemp_Exceptions
  4518 ;; This function is called by:
  4519 ;;		_Temp_Main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _setTemp_Main
  4525  0EF3                     _setTemp_Main:	
  4526                           
  4527                           ;OverTemperature_B1.c: 56: if (Temp1.Enable == 1) {
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4531  0EF3  0021               	movlb	1	; select bank1
  4532  0EF4  1C59               	btfss	_Temp1^(0+128),0
  4533  0EF5  0008               	return
  4534                           
  4535                           ;OverTemperature_B1.c: 57: if (Temp1.ADtoGO == 0) {
  4536  0EF6  1959               	btfsc	_Temp1^(0+128),2
  4537  0EF7  2F15               	goto	l7709
  4538                           
  4539                           ;OverTemperature_B1.c: 58: Temp1.Time++;
  4540  0EF8  3001               	movlw	1
  4541  0EF9  07DA               	addwf	(_Temp1^(0+128)+1),f
  4542  0EFA  3000               	movlw	0
  4543  0EFB  3DDB               	addwfc	((_Temp1+1)^(0+128)+1),f
  4544                           
  4545                           ;OverTemperature_B1.c: 60: {
  4546                           ;OverTemperature_B1.c: 61: if (1 == 1 && getPF_Safe() == 1) {
  4547  0EFC  3001               	movlw	1
  4548  0EFD  025B               	subwf	((_Temp1+1)^(0+128)+1),w
  4549  0EFE  30F4               	movlw	244
  4550  0EFF  1903               	skipnz
  4551  0F00  025A               	subwf	(_Temp1^(0+128)+1),w
  4552  0F01  1C03               	skipc
  4553  0F02  0008               	return
  4554  0F03  319E  2668  318E   	fcall	_getPF_Safe
  4555  0F06  3A01               	xorlw	1
  4556  0F07  1D03               	skipz
  4557  0F08  2F0F               	goto	l7707
  4558                           
  4559                           ;OverTemperature_B1.c: 62: Temp1.Time = 0;
  4560  0F09  0021               	movlb	1	; select bank1
  4561  0F0A  01DA               	clrf	(_Temp1^(0+128)+1)
  4562  0F0B  01DB               	clrf	((_Temp1+1)^(0+128)+1)
  4563                           
  4564                           ;OverTemperature_B1.c: 63: Temp1.ADtoGO = 0;
  4565  0F0C  1159               	bcf	_Temp1^(0+128),2
  4566                           
  4567                           ;OverTemperature_B1.c: 64: Temp1.Safe = 0;
  4568  0F0D  1259               	bcf	_Temp1^(0+128),4
  4569                           
  4570                           ;OverTemperature_B1.c: 65: } else {
  4571  0F0E  0008               	return
  4572  0F0F                     l7707:	
  4573                           
  4574                           ;OverTemperature_B1.c: 66: Temp1.Time = 1000;
  4575  0F0F  30E8               	movlw	232
  4576  0F10  0021               	movlb	1	; select bank1
  4577  0F11  00DA               	movwf	(_Temp1^(0+128)+1)
  4578  0F12  3003               	movlw	3
  4579  0F13  00DB               	movwf	(_Temp1^(0+128)+2)
  4580                           
  4581                           ;OverTemperature_B1.c: 67: }
  4582                           ;OverTemperature_B1.c: 68: }
  4583                           ;OverTemperature_B1.c: 69: } else {
  4584  0F14  0008               	return
  4585  0F15                     l7709:	
  4586                           
  4587                           ;OverTemperature_B1.c: 70: Temp1.Time++;
  4588  0F15  3001               	movlw	1
  4589  0F16  07DA               	addwf	(_Temp1^(0+128)+1),f
  4590  0F17  3000               	movlw	0
  4591  0F18  3DDB               	addwfc	((_Temp1+1)^(0+128)+1),f
  4592                           
  4593                           ;OverTemperature_B1.c: 71: if (Temp1.Time >= 4)
  4594  0F19  3000               	movlw	0
  4595  0F1A  025B               	subwf	((_Temp1+1)^(0+128)+1),w
  4596  0F1B  3004               	movlw	4
  4597  0F1C  1903               	skipnz
  4598  0F1D  025A               	subwf	(_Temp1^(0+128)+1),w
  4599  0F1E  1C03               	skipc
  4600  0F1F  0008               	return
  4601                           
  4602                           ;OverTemperature_B1.c: 72: {
  4603                           ;OverTemperature_B1.c: 73: Temp1.Time = 0;
  4604  0F20  01DA               	clrf	(_Temp1^(0+128)+1)
  4605  0F21  01DB               	clrf	((_Temp1+1)^(0+128)+1)
  4606                           
  4607                           ;OverTemperature_B1.c: 74: Temp1.ADtoGO = 0;
  4608  0F22  1159               	bcf	_Temp1^(0+128),2
  4609                           
  4610                           ;OverTemperature_B1.c: 75: Temp1.AD = Temp1.ADH[1];
  4611  0F23  0864               	movf	((_Temp1+1)^(0+128)+10),w
  4612  0F24  01E0               	clrf	((_Temp1+1)^(0+128)+6)
  4613  0F25  07E0               	addwf	((_Temp1+1)^(0+128)+6),f
  4614  0F26  0863               	movf	(_Temp1^(0+128)+10),w
  4615  0F27  01DF               	clrf	(_Temp1^(0+128)+6)
  4616  0F28  07DF               	addwf	(_Temp1^(0+128)+6),f
  4617                           
  4618                           ;OverTemperature_B1.c: 76: if (Temp1.ERROR == 1) {
  4619  0F29  1CD9               	btfss	_Temp1^(0+128),1
  4620  0F2A  2F42               	goto	l7731
  4621                           
  4622                           ;OverTemperature_B1.c: 77: if (Temp1.AD >= 600) {
  4623  0F2B  3002               	movlw	2
  4624  0F2C  0260               	subwf	((_Temp1+1)^(0+128)+6),w
  4625  0F2D  3058               	movlw	88
  4626  0F2E  1903               	skipnz
  4627  0F2F  025F               	subwf	(_Temp1^(0+128)+6),w
  4628  0F30  1C03               	skipc
  4629  0F31  2F59               	goto	l7741
  4630                           
  4631                           ;OverTemperature_B1.c: 78: Temp1.Count++;
  4632  0F32  3001               	movlw	1
  4633  0F33  0020               	movlb	0	; select bank0
  4634  0F34  00B1               	movwf	??_setTemp_Main
  4635  0F35  0831               	movf	??_setTemp_Main,w
  4636  0F36  0021               	movlb	1	; select bank1
  4637  0F37  07DC               	addwf	(_Temp1^(0+128)+3),f
  4638                           
  4639                           ;OverTemperature_B1.c: 79: if (Temp1.Count >= 3) {
  4640  0F38  3003               	movlw	3
  4641  0F39  025C               	subwf	(_Temp1^(0+128)+3),w
  4642  0F3A  1C03               	skipc
  4643  0F3B  2F5B               	goto	l7743
  4644                           
  4645                           ;OverTemperature_B1.c: 80: Temp1.Count = 0;
  4646  0F3C  01DC               	clrf	(_Temp1^(0+128)+3)
  4647                           
  4648                           ;OverTemperature_B1.c: 81: setOverTemp_Exceptions(0);
  4649  0F3D  3000               	movlw	0
  4650  0F3E  3196  264B  318E   	fcall	_setOverTemp_Exceptions
  4651                           
  4652                           ;OverTemperature_B1.c: 82: }
  4653                           ;OverTemperature_B1.c: 83: } else {
  4654  0F41  2F5B               	goto	l7743
  4655  0F42                     l7731:	
  4656                           ;OverTemperature_B1.c: 85: }
  4657                           ;OverTemperature_B1.c: 86: } else {
  4658                           
  4659                           ;OverTemperature_B1.c: 84: Temp1.Count = 0;
  4660                           
  4661                           
  4662                           ;OverTemperature_B1.c: 87: if (Temp1.AD <= 550) {
  4663  0F42  3002               	movlw	2
  4664  0F43  0260               	subwf	((_Temp1+1)^(0+128)+6),w
  4665  0F44  3027               	movlw	39
  4666  0F45  1903               	skipnz
  4667  0F46  025F               	subwf	(_Temp1^(0+128)+6),w
  4668  0F47  1803               	skipnc
  4669  0F48  2F59               	goto	l7741
  4670                           
  4671                           ;OverTemperature_B1.c: 88: Temp1.Count++;
  4672  0F49  3001               	movlw	1
  4673  0F4A  0020               	movlb	0	; select bank0
  4674  0F4B  00B1               	movwf	??_setTemp_Main
  4675  0F4C  0831               	movf	??_setTemp_Main,w
  4676  0F4D  0021               	movlb	1	; select bank1
  4677  0F4E  07DC               	addwf	(_Temp1^(0+128)+3),f
  4678                           
  4679                           ;OverTemperature_B1.c: 89: if (Temp1.Count >= 3) {
  4680  0F4F  3003               	movlw	3
  4681  0F50  025C               	subwf	(_Temp1^(0+128)+3),w
  4682  0F51  1C03               	skipc
  4683  0F52  2F5B               	goto	l7743
  4684                           
  4685                           ;OverTemperature_B1.c: 90: Temp1.Count = 0;
  4686  0F53  01DC               	clrf	(_Temp1^(0+128)+3)
  4687                           
  4688                           ;OverTemperature_B1.c: 91: setOverTemp_Exceptions(1);
  4689  0F54  3001               	movlw	1
  4690  0F55  3196  264B  318E   	fcall	_setOverTemp_Exceptions
  4691                           
  4692                           ;OverTemperature_B1.c: 92: }
  4693                           ;OverTemperature_B1.c: 93: } else {
  4694  0F58  2F5B               	goto	l7743
  4695  0F59                     l7741:	
  4696                           
  4697                           ;OverTemperature_B1.c: 94: Temp1.Count = 0;
  4698  0F59  0021               	movlb	1	; select bank1
  4699  0F5A  01DC               	clrf	(_Temp1^(0+128)+3)
  4700  0F5B                     l7743:	
  4701                           
  4702                           ;OverTemperature_B1.c: 95: }
  4703                           ;OverTemperature_B1.c: 96: }
  4704                           ;OverTemperature_B1.c: 97: if (Temp1.ERROR == 0) {
  4705  0F5B  0021               	movlb	1	; select bank1
  4706  0F5C  1CD9               	btfss	_Temp1^(0+128),1
  4707                           
  4708                           ;OverTemperature_B1.c: 98: Temp1.Safe = 1;
  4709  0F5D  1659               	bsf	_Temp1^(0+128),4
  4710                           
  4711                           ;OverTemperature_B1.c: 99: }
  4712                           ;OverTemperature_B1.c: 100: product->Data[24]=Temp1.AD >> 8;
  4713  0F5E  0860               	movf	((_Temp1+1)^(0+128)+6),w
  4714  0F5F  0020               	movlb	0	; select bank0
  4715  0F60  00B1               	movwf	??_setTemp_Main
  4716  0F61  086F               	movf	_product,w
  4717  0F62  3E18               	addlw	24
  4718  0F63  0086               	movwf	6
  4719  0F64  3001               	movlw	1	; select bank2/3
  4720  0F65  0087               	movwf	7
  4721  0F66  0831               	movf	??_setTemp_Main,w
  4722  0F67  0081               	movwf	1
  4723                           
  4724                           ;OverTemperature_B1.c: 101: product->Data[25]=Temp1.AD;
  4725  0F68  0021               	movlb	1	; select bank1
  4726  0F69  085F               	movf	(_Temp1^(0+128)+6),w
  4727  0F6A  0020               	movlb	0	; select bank0
  4728  0F6B  00B1               	movwf	??_setTemp_Main
  4729  0F6C  086F               	movf	_product,w
  4730  0F6D  3E19               	addlw	25
  4731  0F6E  0086               	movwf	6
  4732  0F6F  3001               	movlw	1	; select bank2/3
  4733  0F70  0087               	movwf	7
  4734  0F71  0831               	movf	??_setTemp_Main,w
  4735  0F72  0081               	movwf	1
  4736                           
  4737                           ;OverTemperature_B1.c: 102: Temp1.ADH[0] = 0;
  4738  0F73  0021               	movlb	1	; select bank1
  4739  0F74  01E1               	clrf	(_Temp1^(0+128)+8)
  4740  0F75  01E2               	clrf	((_Temp1+1)^(0+128)+8)
  4741                           
  4742                           ;OverTemperature_B1.c: 103: Temp1.ADH[1] = 0;
  4743  0F76  01E3               	clrf	(_Temp1^(0+128)+10)
  4744  0F77  01E4               	clrf	((_Temp1+1)^(0+128)+10)
  4745  0F78  0008               	return
  4746  0F79                     __end_of_setTemp_Main:	
  4747                           
  4748                           	psect	text9
  4749  164B                     __ptext9:	
  4750 ;; *************** function _setOverTemp_Exceptions *****************
  4751 ;; Defined at:
  4752 ;;		line 110 in file "../src/OverTemperature_B1.c"
  4753 ;; Parameters:    Size  Location     Type
  4754 ;;  command         1    wreg     unsigned char 
  4755 ;; Auto vars:     Size  Location     Type
  4756 ;;  command         1   16[BANK0 ] unsigned char 
  4757 ;;  i               1   15[BANK0 ] unsigned char 
  4758 ;; Return value:  Size  Location     Type
  4759 ;;		None               void
  4760 ;; Registers used:
  4761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4762 ;; Tracked objects:
  4763 ;;		On entry : 0/0
  4764 ;;		On exit  : 0/0
  4765 ;;		Unchanged: 0/0
  4766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4771 ;;Total ram usage:        3 bytes
  4772 ;; Hardware stack levels used:    1
  4773 ;; Hardware stack levels required when called:    9
  4774 ;; This function calls:
  4775 ;;		_DimmerLights_Exceptions
  4776 ;;		_setBuz
  4777 ;;		_setLED
  4778 ;;		_setRF_Enable
  4779 ;;		_setSw_Enable
  4780 ;; This function is called by:
  4781 ;;		_setTemp_Main
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           
  4786                           ;psect for function _setOverTemp_Exceptions
  4787  164B                     _setOverTemp_Exceptions:	
  4788                           
  4789                           ;incstack = 0
  4790                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4791                           ;setOverTemp_Exceptions@command stored from wreg
  4792  164B  0020               	movlb	0	; select bank0
  4793  164C  00B0               	movwf	setOverTemp_Exceptions@command
  4794                           
  4795                           ;OverTemperature_B1.c: 111: char i = command == 1 ? 0 : 1;
  4796  164D  0830               	movf	setOverTemp_Exceptions@command,w
  4797  164E  3A01               	xorlw	1
  4798  164F  3000               	movlw	0
  4799  1650  1D03               	skipz
  4800  1651  3001               	movlw	1
  4801  1652  00AE               	movwf	??_setOverTemp_Exceptions
  4802  1653  082E               	movf	??_setOverTemp_Exceptions,w
  4803  1654  00AF               	movwf	setOverTemp_Exceptions@i
  4804                           
  4805                           ;OverTemperature_B1.c: 112: Temp1.ERROR = command;
  4806  1655  0830               	movf	setOverTemp_Exceptions@command,w
  4807  1656  0021               	movlb	1	; select bank1
  4808  1657  10D9               	bcf	_Temp1^(0+128),1
  4809  1658  1D03               	skipz
  4810  1659  14D9               	bsf	_Temp1^(0+128),1
  4811                           
  4812                           ;OverTemperature_B1.c: 113: Temp1.Safe = i;
  4813  165A  0020               	movlb	0	; select bank0
  4814  165B  082F               	movf	setOverTemp_Exceptions@i,w
  4815  165C  0021               	movlb	1	; select bank1
  4816  165D  1259               	bcf	_Temp1^(0+128),4
  4817  165E  1D03               	skipz
  4818  165F  1659               	bsf	_Temp1^(0+128),4
  4819                           
  4820                           ;OverTemperature_B1.c: 114: if (command == 1) {
  4821  1660  0020               	movlb	0	; select bank0
  4822  1661  0830               	movf	setOverTemp_Exceptions@command,w
  4823  1662  3A01               	xorlw	1
  4824  1663  1D03               	skipz
  4825  1664  2E71               	goto	l7587
  4826                           
  4827                           ;OverTemperature_B1.c: 115: DimmerLights_Exceptions(1);
  4828  1665  3001               	movlw	1
  4829  1666  3195  253D  3196   	fcall	_DimmerLights_Exceptions
  4830                           
  4831                           ;OverTemperature_B1.c: 117: setLED(2, 1);
  4832  1669  0020               	movlb	0	; select bank0
  4833  166A  01A1               	clrf	setLED@command
  4834  166B  0AA1               	incf	setLED@command,f
  4835  166C  3002               	movlw	2
  4836  166D  318B  230A  3196   	fcall	_setLED
  4837                           
  4838                           ;OverTemperature_B1.c: 119: } else if (command == 0) {
  4839  1670  2E7D               	goto	l7591
  4840  1671                     l7587:	
  4841  1671  0020               	movlb	0	; select bank0
  4842  1672  08B0               	movf	setOverTemp_Exceptions@command,f
  4843  1673  1D03               	skipz
  4844  1674  2E7D               	goto	l7591
  4845                           
  4846                           ;OverTemperature_B1.c: 120: setBuz(2, 100);
  4847  1675  3064               	movlw	100
  4848  1676  00A9               	movwf	setBuz@time
  4849  1677  3000               	movlw	0
  4850  1678  00AA               	movwf	setBuz@time+1
  4851  1679  3002               	movlw	2
  4852  167A  3189  2139  3196   	fcall	_setBuz
  4853  167D                     l7591:	
  4854                           
  4855                           ;OverTemperature_B1.c: 121: }
  4856                           ;OverTemperature_B1.c: 124: setLED(99, command + 10);
  4857  167D  0020               	movlb	0	; select bank0
  4858  167E  0830               	movf	setOverTemp_Exceptions@command,w
  4859  167F  3E0A               	addlw	10
  4860  1680  00AE               	movwf	??_setOverTemp_Exceptions
  4861  1681  082E               	movf	??_setOverTemp_Exceptions,w
  4862  1682  00A1               	movwf	setLED@command
  4863  1683  3063               	movlw	99
  4864  1684  318B  230A  3196   	fcall	_setLED
  4865                           
  4866                           ;OverTemperature_B1.c: 126: setSw_Enable(i);
  4867  1687  0020               	movlb	0	; select bank0
  4868  1688  082F               	movf	setOverTemp_Exceptions@i,w
  4869  1689  319F  2763  3196   	fcall	_setSw_Enable
  4870                           
  4871                           ;OverTemperature_B1.c: 128: setRF_Enable(i);
  4872  168C  0020               	movlb	0	; select bank0
  4873  168D  082F               	movf	setOverTemp_Exceptions@i,w
  4874  168E  3190  2066         	fcall	_setRF_Enable
  4875  1690  0008               	return
  4876  1691                     __end_of_setOverTemp_Exceptions:	
  4877                           
  4878                           	psect	text10
  4879  1E68                     __ptext10:	
  4880 ;; *************** function _getPF_Safe *****************
  4881 ;; Defined at:
  4882 ;;		line 34 in file "../src/PowerFault_B1.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;		None
  4885 ;; Auto vars:     Size  Location     Type
  4886 ;;  i               1    0[BANK0 ] unsigned char 
  4887 ;; Return value:  Size  Location     Type
  4888 ;;                  1    wreg      unsigned char 
  4889 ;; Registers used:
  4890 ;;		wreg, status,2
  4891 ;; Tracked objects:
  4892 ;;		On entry : 0/0
  4893 ;;		On exit  : 0/0
  4894 ;;		Unchanged: 0/0
  4895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4900 ;;Total ram usage:        1 bytes
  4901 ;; Hardware stack levels used:    1
  4902 ;; Hardware stack levels required when called:    5
  4903 ;; This function calls:
  4904 ;;		Nothing
  4905 ;; This function is called by:
  4906 ;;		_setTemp_Main
  4907 ;; This function uses a non-reentrant model
  4908 ;;
  4909                           
  4910                           
  4911                           ;psect for function _getPF_Safe
  4912  1E68                     _getPF_Safe:	
  4913                           
  4914                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  4915                           
  4916                           ;incstack = 0
  4917                           ; Regs used in _getPF_Safe: [wreg+status,2]
  4918  1E68  3000               	movlw	0
  4919  1E69  0021               	movlb	1	; select bank1
  4920  1E6A  193E               	btfsc	_PF1^(0+128),2
  4921  1E6B  3001               	movlw	1
  4922  1E6C  0020               	movlb	0	; select bank0
  4923  1E6D  00A0               	movwf	getPF_Safe@i
  4924                           
  4925                           ;PowerFault_B1.c: 36: return i;
  4926  1E6E  0820               	movf	getPF_Safe@i,w
  4927  1E6F  0008               	return
  4928  1E70                     __end_of_getPF_Safe:	
  4929                           
  4930                           	psect	text11
  4931  1DFD                     __ptext11:	
  4932 ;; *************** function _Temp_Initialization *****************
  4933 ;; Defined at:
  4934 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;		None               void
  4941 ;; Registers used:
  4942 ;;		status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        0 bytes
  4953 ;; Hardware stack levels used:    1
  4954 ;; Hardware stack levels required when called:    6
  4955 ;; This function calls:
  4956 ;;		_setTemp_Initialization
  4957 ;; This function is called by:
  4958 ;;		_main
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           
  4963                           ;psect for function _Temp_Initialization
  4964  1DFD                     _Temp_Initialization:	
  4965                           
  4966                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4967                           
  4968                           ;incstack = 0
  4969                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4970  1DFD  319D  25FA         	fcall	_setTemp_Initialization
  4971  1DFF  0008               	return
  4972  1E00                     __end_of_Temp_Initialization:	
  4973                           
  4974                           	psect	text12
  4975  1DFA                     __ptext12:	
  4976 ;; *************** function _setTemp_Initialization *****************
  4977 ;; Defined at:
  4978 ;;		line 43 in file "../src/OverTemperature_B1.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;		None
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;		None
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		None
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4996 ;;Total ram usage:        0 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:    5
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_Temp_Initialization
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           
  5007                           ;psect for function _setTemp_Initialization
  5008  1DFA                     _setTemp_Initialization:	
  5009                           
  5010                           ;OverTemperature_B1.c: 44: Temp1.Safe = 1;
  5011                           
  5012                           ;incstack = 0
  5013                           ; Regs used in _setTemp_Initialization: []
  5014  1DFA  0021               	movlb	1	; select bank1
  5015  1DFB  1659               	bsf	_Temp1^(0+128),4
  5016  1DFC  0008               	return
  5017  1DFD                     __end_of_setTemp_Initialization:	
  5018                           
  5019                           	psect	text13
  5020  1E27                     __ptext13:	
  5021 ;; *************** function _Switch_Main *****************
  5022 ;; Defined at:
  5023 ;;		line 65 in file "../src/Switch_B1.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:   11
  5044 ;; This function calls:
  5045 ;;		_setSw_Main
  5046 ;; This function is called by:
  5047 ;;		_main
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function _Switch_Main
  5053  1E27                     _Switch_Main:	
  5054                           
  5055                           ;Switch_B1.c: 67: setSw_Main(1);
  5056                           
  5057                           ;incstack = 0
  5058                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5059  1E27  3001               	movlw	1
  5060  1E28  3181  21F9         	fcall	_setSw_Main
  5061  1E2A  0008               	return
  5062  1E2B                     __end_of_Switch_Main:	
  5063                           
  5064                           	psect	text14
  5065  01F9                     __ptext14:	
  5066 ;; *************** function _setSw_Main *****************
  5067 ;; Defined at:
  5068 ;;		line 115 in file "../src/Switch_B1.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  sw              1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  sw              1   72[BANK0 ] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;		None               void
  5075 ;; Registers used:
  5076 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;Total ram usage:        4 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:   10
  5089 ;; This function calls:
  5090 ;;		_SwPointSelect
  5091 ;;		_Sw_DimmerAdjFunc
  5092 ;;		_Sw_DimmerOffFunc
  5093 ;;		_Sw_DimmerOnFunc
  5094 ;;		_setBuz
  5095 ;;		_setRF_Learn
  5096 ;; This function is called by:
  5097 ;;		_Switch_Main
  5098 ;; This function uses a non-reentrant model
  5099 ;;
  5100                           
  5101                           
  5102                           ;psect for function _setSw_Main
  5103  01F9                     _setSw_Main:	
  5104                           
  5105                           ;incstack = 0
  5106                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5107                           ;setSw_Main@sw stored from wreg
  5108  01F9  0020               	movlb	0	; select bank0
  5109  01FA  00E8               	movwf	setSw_Main@sw
  5110                           
  5111                           ;Switch_B1.c: 116: SwPointSelect(sw);
  5112  01FB  0868               	movf	setSw_Main@sw,w
  5113  01FC  319E  26D5  3181   	fcall	_SwPointSelect
  5114                           
  5115                           ;Switch_B1.c: 117: if (Sw->Enable == 1) {
  5116  01FF  0020               	movlb	0	; select bank0
  5117  0200  086E               	movf	_Sw,w
  5118  0201  0086               	movwf	6
  5119  0202  3001               	movlw	1	; select bank2/3
  5120  0203  0087               	movwf	7
  5121  0204  1C01               	btfss	1,0
  5122  0205  0008               	return
  5123                           
  5124                           ;Switch_B1.c: 137: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5125  0206  01E7               	clrf	_setSw_Main$4944
  5126  0207  0AE7               	incf	_setSw_Main$4944,f
  5127  0208  1F0C               	btfss	12,6	;volatile
  5128  0209  1A0C               	btfsc	12,4	;volatile
  5129  020A  2A0F               	goto	l7003
  5130  020B  1C0C               	btfss	12,0	;volatile
  5131  020C  188D               	btfsc	13,1	;volatile
  5132  020D  2A0F               	goto	l7003
  5133  020E  01E7               	clrf	_setSw_Main$4944
  5134  020F                     l7003:	
  5135  020F  086E               	movf	_Sw,w
  5136  0210  0086               	movwf	6
  5137  0211  3001               	movlw	1	; select bank2/3
  5138  0212  0087               	movwf	7
  5139  0213  0867               	movf	_setSw_Main$4944,w
  5140  0214  1081               	bcf	1,1
  5141  0215  1D03               	skipz
  5142  0216  1481               	bsf	1,1
  5143                           
  5144                           ;Switch_B1.c: 139: if (Sw->Touch == 1) {
  5145  0217  086E               	movf	_Sw,w
  5146  0218  0086               	movwf	6
  5147  0219  3001               	movlw	1	; select bank2/3
  5148  021A  0087               	movwf	7
  5149  021B  1C81               	btfss	1,1
  5150  021C  2AE1               	goto	l7053
  5151                           
  5152                           ;Switch_B1.c: 140: if (Sw->Debounce == 0) {
  5153  021D  086E               	movf	_Sw,w
  5154  021E  0086               	movwf	6
  5155  021F  3001               	movlw	1	; select bank2/3
  5156  0220  0087               	movwf	7
  5157  0221  1901               	btfsc	1,2
  5158  0222  2A44               	goto	l7019
  5159                           
  5160                           ;Switch_B1.c: 141: Sw->DebounceTime++;
  5161  0223  3001               	movlw	1
  5162  0224  00E5               	movwf	??_setSw_Main
  5163  0225  086E               	movf	_Sw,w
  5164  0226  3E02               	addlw	2
  5165  0227  0086               	movwf	6
  5166  0228  3001               	movlw	1	; select bank2/3
  5167  0229  0087               	movwf	7
  5168  022A  0865               	movf	??_setSw_Main,w
  5169  022B  0781               	addwf	1,f
  5170                           
  5171                           ;Switch_B1.c: 142: if (Sw->DebounceTime >= 5) {
  5172  022C  086E               	movf	_Sw,w
  5173  022D  3E02               	addlw	2
  5174  022E  0086               	movwf	6
  5175  022F  3001               	movlw	1	; select bank2/3
  5176  0230  0087               	movwf	7
  5177  0231  3005               	movlw	5
  5178  0232  0201               	subwf	1,w
  5179  0233  1C03               	skipc
  5180  0234  0008               	return
  5181                           
  5182                           ;Switch_B1.c: 143: Sw->DebounceTime = 0;
  5183  0235  086E               	movf	_Sw,w
  5184  0236  3E02               	addlw	2
  5185  0237  0086               	movwf	6
  5186  0238  3001               	movlw	1	; select bank2/3
  5187  0239  0087               	movwf	7
  5188  023A  0181               	clrf	1
  5189                           
  5190                           ;Switch_B1.c: 144: Sw->Debounce = 1;
  5191  023B  086E               	movf	_Sw,w
  5192  023C  0086               	movwf	6
  5193  023D  3001               	movlw	1	; select bank2/3
  5194  023E  0087               	movwf	7
  5195  023F  1501               	bsf	1,2
  5196                           
  5197                           ;Switch_B1.c: 147: Sw_DimmerOnFunc(sw);
  5198  0240  0868               	movf	setSw_Main@sw,w
  5199  0241  3188  20E2         	fcall	_Sw_DimmerOnFunc
  5200                           
  5201                           ;Switch_B1.c: 149: }
  5202                           ;Switch_B1.c: 150: } else {
  5203  0243  0008               	return
  5204  0244                     l7019:	
  5205                           
  5206                           ;Switch_B1.c: 151: if (Sw->Hold1 == 0) {
  5207  0244  0020               	movlb	0	; select bank0
  5208  0245  086E               	movf	_Sw,w
  5209  0246  0086               	movwf	6
  5210  0247  3001               	movlw	1	; select bank2/3
  5211  0248  0087               	movwf	7
  5212  0249  1981               	btfsc	1,3
  5213  024A  2A71               	goto	l7029
  5214                           
  5215                           ;Switch_B1.c: 152: Sw->Hold1Time++;
  5216  024B  086E               	movf	_Sw,w
  5217  024C  3E03               	addlw	3
  5218  024D  0086               	movwf	6
  5219  024E  3001               	movlw	1	; select bank2/3
  5220  024F  0087               	movwf	7
  5221  0250  3001               	movlw	1
  5222  0251  0781               	addwf	1,f
  5223  0252  3141               	addfsr 1,1
  5224  0253  1803               	skipnc
  5225  0254  0A81               	incf	1,f
  5226                           
  5227                           ;Switch_B1.c: 153: if (Sw->Hold1Time >= 150) {
  5228  0255  086E               	movf	_Sw,w
  5229  0256  3E03               	addlw	3
  5230  0257  0086               	movwf	6
  5231  0258  3001               	movlw	1	; select bank2/3
  5232  0259  0087               	movwf	7
  5233  025A  3F40               	moviw [0]fsr1
  5234  025B  00E5               	movwf	??_setSw_Main
  5235  025C  3F41               	moviw [1]fsr1
  5236  025D  00E6               	movwf	??_setSw_Main+1
  5237  025E  3000               	movlw	0
  5238  025F  0266               	subwf	??_setSw_Main+1,w
  5239  0260  3096               	movlw	150
  5240  0261  1903               	skipnz
  5241  0262  0265               	subwf	??_setSw_Main,w
  5242  0263  1C03               	skipc
  5243  0264  0008               	return
  5244                           
  5245                           ;Switch_B1.c: 154: Sw->Hold1Time = 0;
  5246  0265  086E               	movf	_Sw,w
  5247  0266  3E03               	addlw	3
  5248  0267  0086               	movwf	6
  5249  0268  3001               	movlw	1	; select bank2/3
  5250  0269  0087               	movwf	7
  5251  026A  3000               	movlw	0
  5252  026B  3FC0               	movwi [0]fsr1
  5253  026C  3FC1               	movwi [1]fsr1
  5254                           
  5255                           ;Switch_B1.c: 157: Sw_DimmerAdjFunc(sw);
  5256  026D  0868               	movf	setSw_Main@sw,w
  5257  026E  3193  23F8         	fcall	_Sw_DimmerAdjFunc
  5258                           
  5259                           ;Switch_B1.c: 160: }
  5260                           ;Switch_B1.c: 161: } else {
  5261  0270  0008               	return
  5262  0271                     l7029:	
  5263                           
  5264                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5265  0271  0020               	movlb	0	; select bank0
  5266  0272  086E               	movf	_Sw,w
  5267  0273  0086               	movwf	6
  5268  0274  3001               	movlw	1	; select bank2/3
  5269  0275  0087               	movwf	7
  5270  0276  1A01               	btfsc	1,4
  5271  0277  2AAF               	goto	l7043
  5272                           
  5273                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5274  0278  086E               	movf	_Sw,w
  5275  0279  3E05               	addlw	5
  5276  027A  0086               	movwf	6
  5277  027B  3001               	movlw	1	; select bank2/3
  5278  027C  0087               	movwf	7
  5279  027D  3001               	movlw	1
  5280  027E  0781               	addwf	1,f
  5281  027F  3141               	addfsr 1,1
  5282  0280  1803               	skipnc
  5283  0281  0A81               	incf	1,f
  5284                           
  5285                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= 150) {
  5286  0282  086E               	movf	_Sw,w
  5287  0283  3E05               	addlw	5
  5288  0284  0086               	movwf	6
  5289  0285  3001               	movlw	1	; select bank2/3
  5290  0286  0087               	movwf	7
  5291  0287  3F40               	moviw [0]fsr1
  5292  0288  00E5               	movwf	??_setSw_Main
  5293  0289  3F41               	moviw [1]fsr1
  5294  028A  00E6               	movwf	??_setSw_Main+1
  5295  028B  3000               	movlw	0
  5296  028C  0266               	subwf	??_setSw_Main+1,w
  5297  028D  3096               	movlw	150
  5298  028E  1903               	skipnz
  5299  028F  0265               	subwf	??_setSw_Main,w
  5300  0290  1C03               	skipc
  5301  0291  0008               	return
  5302                           
  5303                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5304  0292  086E               	movf	_Sw,w
  5305  0293  3E05               	addlw	5
  5306  0294  0086               	movwf	6
  5307  0295  3001               	movlw	1	; select bank2/3
  5308  0296  0087               	movwf	7
  5309  0297  3000               	movlw	0
  5310  0298  3FC0               	movwi [0]fsr1
  5311  0299  3FC1               	movwi [1]fsr1
  5312                           
  5313                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5314  029A  086E               	movf	_Sw,w
  5315  029B  0086               	movwf	6
  5316  029C  3001               	movlw	1	; select bank2/3
  5317  029D  0087               	movwf	7
  5318  029E  1601               	bsf	1,4
  5319                           
  5320                           ;Switch_B1.c: 169: setRF_Learn(1);
  5321  029F  3001               	movlw	1
  5322  02A0  319E  2660  3181   	fcall	_setRF_Learn
  5323                           
  5324                           ;Switch_B1.c: 171: if (myMain.First == 1) {
  5325  02A3  0021               	movlb	1	; select bank1
  5326  02A4  1FA0               	btfss	_myMain^(0+128),7
  5327  02A5  0008               	return
  5328                           
  5329                           ;Switch_B1.c: 172: setBuz(2, 100);
  5330  02A6  3064               	movlw	100
  5331  02A7  0020               	movlb	0	; select bank0
  5332  02A8  00A9               	movwf	setBuz@time
  5333  02A9  3000               	movlw	0
  5334  02AA  00AA               	movwf	setBuz@time+1
  5335  02AB  3002               	movlw	2
  5336  02AC  3189  2139         	fcall	_setBuz
  5337                           
  5338                           ;Switch_B1.c: 173: }
  5339                           ;Switch_B1.c: 175: }
  5340                           ;Switch_B1.c: 176: } else {
  5341  02AE  0008               	return
  5342  02AF                     l7043:	
  5343                           
  5344                           ;Switch_B1.c: 177: if (Sw->Hold3 == 0) {
  5345  02AF  0020               	movlb	0	; select bank0
  5346  02B0  086E               	movf	_Sw,w
  5347  02B1  0086               	movwf	6
  5348  02B2  3001               	movlw	1	; select bank2/3
  5349  02B3  0087               	movwf	7
  5350  02B4  1A81               	btfsc	1,5
  5351  02B5  0008               	return
  5352                           
  5353                           ;Switch_B1.c: 178: Sw->Hold3Time++;
  5354  02B6  086E               	movf	_Sw,w
  5355  02B7  3E07               	addlw	7
  5356  02B8  0086               	movwf	6
  5357  02B9  3001               	movlw	1	; select bank2/3
  5358  02BA  0087               	movwf	7
  5359  02BB  3001               	movlw	1
  5360  02BC  0781               	addwf	1,f
  5361  02BD  3141               	addfsr 1,1
  5362  02BE  1803               	skipnc
  5363  02BF  0A81               	incf	1,f
  5364                           
  5365                           ;Switch_B1.c: 179: if (Sw->Hold3Time >= 300) {
  5366  02C0  086E               	movf	_Sw,w
  5367  02C1  3E07               	addlw	7
  5368  02C2  0086               	movwf	6
  5369  02C3  3001               	movlw	1	; select bank2/3
  5370  02C4  0087               	movwf	7
  5371  02C5  3F40               	moviw [0]fsr1
  5372  02C6  00E5               	movwf	??_setSw_Main
  5373  02C7  3F41               	moviw [1]fsr1
  5374  02C8  00E6               	movwf	??_setSw_Main+1
  5375  02C9  3001               	movlw	1
  5376  02CA  0266               	subwf	??_setSw_Main+1,w
  5377  02CB  302C               	movlw	44
  5378  02CC  1903               	skipnz
  5379  02CD  0265               	subwf	??_setSw_Main,w
  5380  02CE  1C03               	skipc
  5381  02CF  0008               	return
  5382                           
  5383                           ;Switch_B1.c: 180: Sw->Hold3Time = 0;
  5384  02D0  086E               	movf	_Sw,w
  5385  02D1  3E07               	addlw	7
  5386  02D2  0086               	movwf	6
  5387  02D3  3001               	movlw	1	; select bank2/3
  5388  02D4  0087               	movwf	7
  5389  02D5  3000               	movlw	0
  5390  02D6  3FC0               	movwi [0]fsr1
  5391  02D7  3FC1               	movwi [1]fsr1
  5392                           
  5393                           ;Switch_B1.c: 181: Sw->Hold3 = 1;
  5394  02D8  086E               	movf	_Sw,w
  5395  02D9  0086               	movwf	6
  5396  02DA  3001               	movlw	1	; select bank2/3
  5397  02DB  0087               	movwf	7
  5398  02DC  1681               	bsf	1,5
  5399                           
  5400                           ;Switch_B1.c: 184: setRF_Learn(0);
  5401  02DD  3000               	movlw	0
  5402  02DE  319E  2660         	fcall	_setRF_Learn
  5403                           
  5404                           ;Switch_B1.c: 187: }
  5405                           ;Switch_B1.c: 188: }
  5406                           ;Switch_B1.c: 189: }
  5407                           ;Switch_B1.c: 190: }
  5408                           ;Switch_B1.c: 191: }
  5409                           ;Switch_B1.c: 192: } else {
  5410  02E0  0008               	return
  5411  02E1                     l7053:	
  5412                           
  5413                           ;Switch_B1.c: 193: if (Sw->Debounce == 1) {
  5414  02E1  0020               	movlb	0	; select bank0
  5415  02E2  086E               	movf	_Sw,w
  5416  02E3  0086               	movwf	6
  5417  02E4  3001               	movlw	1	; select bank2/3
  5418  02E5  0087               	movwf	7
  5419  02E6  1D01               	btfss	1,2
  5420  02E7  0008               	return
  5421                           
  5422                           ;Switch_B1.c: 194: Sw->DebounceTime++;
  5423  02E8  3001               	movlw	1
  5424  02E9  00E5               	movwf	??_setSw_Main
  5425  02EA  086E               	movf	_Sw,w
  5426  02EB  3E02               	addlw	2
  5427  02EC  0086               	movwf	6
  5428  02ED  3001               	movlw	1	; select bank2/3
  5429  02EE  0087               	movwf	7
  5430  02EF  0865               	movf	??_setSw_Main,w
  5431  02F0  0781               	addwf	1,f
  5432                           
  5433                           ;Switch_B1.c: 195: if (Sw->DebounceTime >= 5) {
  5434  02F1  086E               	movf	_Sw,w
  5435  02F2  3E02               	addlw	2
  5436  02F3  0086               	movwf	6
  5437  02F4  3001               	movlw	1	; select bank2/3
  5438  02F5  0087               	movwf	7
  5439  02F6  3005               	movlw	5
  5440  02F7  0201               	subwf	1,w
  5441  02F8  1C03               	skipc
  5442  02F9  0008               	return
  5443                           
  5444                           ;Switch_B1.c: 196: Sw->DebounceTime = 0;
  5445  02FA  086E               	movf	_Sw,w
  5446  02FB  3E02               	addlw	2
  5447  02FC  0086               	movwf	6
  5448  02FD  3001               	movlw	1	; select bank2/3
  5449  02FE  0087               	movwf	7
  5450  02FF  0181               	clrf	1
  5451                           
  5452                           ;Switch_B1.c: 197: Sw->Debounce = 0;
  5453  0300  086E               	movf	_Sw,w
  5454  0301  0086               	movwf	6
  5455  0302  3001               	movlw	1	; select bank2/3
  5456  0303  0087               	movwf	7
  5457  0304  1101               	bcf	1,2
  5458                           
  5459                           ;Switch_B1.c: 198: Sw->Hold1Time = 0;
  5460  0305  086E               	movf	_Sw,w
  5461  0306  3E03               	addlw	3
  5462  0307  0086               	movwf	6
  5463  0308  3001               	movlw	1	; select bank2/3
  5464  0309  0087               	movwf	7
  5465  030A  3000               	movlw	0
  5466  030B  3FC0               	movwi [0]fsr1
  5467  030C  3FC1               	movwi [1]fsr1
  5468                           
  5469                           ;Switch_B1.c: 199: Sw->Hold1 = 0;
  5470  030D  086E               	movf	_Sw,w
  5471  030E  0086               	movwf	6
  5472  030F  3001               	movlw	1	; select bank2/3
  5473  0310  0087               	movwf	7
  5474  0311  1181               	bcf	1,3
  5475                           
  5476                           ;Switch_B1.c: 200: Sw->Hold2Time = 0;
  5477  0312  086E               	movf	_Sw,w
  5478  0313  3E05               	addlw	5
  5479  0314  0086               	movwf	6
  5480  0315  3001               	movlw	1	; select bank2/3
  5481  0316  0087               	movwf	7
  5482  0317  3000               	movlw	0
  5483  0318  3FC0               	movwi [0]fsr1
  5484  0319  3FC1               	movwi [1]fsr1
  5485                           
  5486                           ;Switch_B1.c: 201: Sw->Hold2 = 0;
  5487  031A  086E               	movf	_Sw,w
  5488  031B  0086               	movwf	6
  5489  031C  3001               	movlw	1	; select bank2/3
  5490  031D  0087               	movwf	7
  5491  031E  1201               	bcf	1,4
  5492                           
  5493                           ;Switch_B1.c: 202: Sw->Hold3Time = 0;
  5494  031F  086E               	movf	_Sw,w
  5495  0320  3E07               	addlw	7
  5496  0321  0086               	movwf	6
  5497  0322  3001               	movlw	1	; select bank2/3
  5498  0323  0087               	movwf	7
  5499  0324  3000               	movlw	0
  5500  0325  3FC0               	movwi [0]fsr1
  5501  0326  3FC1               	movwi [1]fsr1
  5502                           
  5503                           ;Switch_B1.c: 203: Sw->Hold3 = 0;
  5504  0327  086E               	movf	_Sw,w
  5505  0328  0086               	movwf	6
  5506  0329  3001               	movlw	1	; select bank2/3
  5507  032A  0087               	movwf	7
  5508  032B  1281               	bcf	1,5
  5509                           
  5510                           ;Switch_B1.c: 205: Sw_DimmerOffFunc(sw);
  5511  032C  0868               	movf	setSw_Main@sw,w
  5512  032D  318C  24A0  3181   	fcall	_Sw_DimmerOffFunc
  5513                           
  5514                           ;Switch_B1.c: 208: setRF_Learn(0);
  5515  0330  3000               	movlw	0
  5516  0331  319E  2660         	fcall	_setRF_Learn
  5517  0333  0008               	return
  5518  0334                     __end_of_setSw_Main:	
  5519                           
  5520                           	psect	text15
  5521  1E60                     __ptext15:	
  5522 ;; *************** function _setRF_Learn *****************
  5523 ;; Defined at:
  5524 ;;		line 23 in file "../src/RF_Control_B1.c"
  5525 ;; Parameters:    Size  Location     Type
  5526 ;;  command         1    wreg     unsigned char 
  5527 ;; Auto vars:     Size  Location     Type
  5528 ;;  command         1    0[BANK0 ] unsigned char 
  5529 ;; Return value:  Size  Location     Type
  5530 ;;		None               void
  5531 ;; Registers used:
  5532 ;;		wreg
  5533 ;; Tracked objects:
  5534 ;;		On entry : 0/0
  5535 ;;		On exit  : 0/0
  5536 ;;		Unchanged: 0/0
  5537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5541 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;Total ram usage:        1 bytes
  5543 ;; Hardware stack levels used:    1
  5544 ;; Hardware stack levels required when called:    5
  5545 ;; This function calls:
  5546 ;;		Nothing
  5547 ;; This function is called by:
  5548 ;;		_setSw_Main
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           
  5553                           ;psect for function _setRF_Learn
  5554  1E60                     _setRF_Learn:	
  5555                           
  5556                           ;incstack = 0
  5557                           ; Regs used in _setRF_Learn: [wreg]
  5558                           ;setRF_Learn@command stored from wreg
  5559  1E60  0020               	movlb	0	; select bank0
  5560  1E61  00A0               	movwf	setRF_Learn@command
  5561                           
  5562                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5563  1E62  0820               	movf	setRF_Learn@command,w
  5564  1E63  0021               	movlb	1	; select bank1
  5565  1E64  1346               	bcf	_RF1^(0+128),6
  5566  1E65  1D03               	skipz
  5567  1E66  1746               	bsf	_RF1^(0+128),6
  5568  1E67  0008               	return
  5569  1E68                     __end_of_setRF_Learn:	
  5570                           
  5571                           	psect	text16
  5572  08E2                     __ptext16:	
  5573 ;; *************** function _Sw_DimmerOnFunc *****************
  5574 ;; Defined at:
  5575 ;;		line 217 in file "../src/Switch_B1.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  sw              1    wreg     unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  sw              1   67[BANK0 ] unsigned char 
  5580 ;;  Idle            1   66[BANK0 ] unsigned char 
  5581 ;; Return value:  Size  Location     Type
  5582 ;;		None               void
  5583 ;; Registers used:
  5584 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5585 ;; Tracked objects:
  5586 ;;		On entry : 0/0
  5587 ;;		On exit  : 0/0
  5588 ;;		Unchanged: 0/0
  5589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5594 ;;Total ram usage:        2 bytes
  5595 ;; Hardware stack levels used:    1
  5596 ;; Hardware stack levels required when called:    9
  5597 ;; This function calls:
  5598 ;;		_setBuz
  5599 ;;		_setDimmerLights_Switch
  5600 ;;		_setDimmerLights_Trigger
  5601 ;;		_setRFSW_Status
  5602 ;;		_setRF_DimmerLights
  5603 ;;		_setTxData
  5604 ;; This function is called by:
  5605 ;;		_setSw_Main
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           
  5610                           ;psect for function _Sw_DimmerOnFunc
  5611  08E2                     _Sw_DimmerOnFunc:	
  5612                           
  5613                           ;incstack = 0
  5614                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5615                           ;Sw_DimmerOnFunc@sw stored from wreg
  5616  08E2  0020               	movlb	0	; select bank0
  5617  08E3  00E3               	movwf	Sw_DimmerOnFunc@sw
  5618                           
  5619                           ;Switch_B1.c: 218: char Idle = 1;
  5620  08E4  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5621  08E5  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5622                           
  5623                           ;Switch_B1.c: 239: if (Idle == 1) {
  5624  08E6  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5625  08E7  3A01               	xorlw	1
  5626  08E8  1D03               	skipz
  5627  08E9  0008               	return
  5628                           
  5629                           ;Switch_B1.c: 240: Sw->Flag = 1;
  5630  08EA  086E               	movf	_Sw,w
  5631  08EB  0086               	movwf	6
  5632  08EC  3001               	movlw	1	; select bank2/3
  5633  08ED  0087               	movwf	7
  5634  08EE  1781               	bsf	1,7
  5635                           
  5636                           ;Switch_B1.c: 241: setBuz(1, 100);
  5637  08EF  3064               	movlw	100
  5638  08F0  00A9               	movwf	setBuz@time
  5639  08F1  3000               	movlw	0
  5640  08F2  00AA               	movwf	setBuz@time+1
  5641  08F3  3001               	movlw	1
  5642  08F4  3189  2139  3188   	fcall	_setBuz
  5643                           
  5644                           ;Switch_B1.c: 242: if (Sw->Status == 0) {
  5645  08F7  0020               	movlb	0	; select bank0
  5646  08F8  086E               	movf	_Sw,w
  5647  08F9  0086               	movwf	6
  5648  08FA  3001               	movlw	1	; select bank2/3
  5649  08FB  0087               	movwf	7
  5650  08FC  1B01               	btfsc	1,6
  5651  08FD  2927               	goto	l6381
  5652                           
  5653                           ;Switch_B1.c: 243: Sw->Status = 1;
  5654  08FE  086E               	movf	_Sw,w
  5655  08FF  0086               	movwf	6
  5656  0900  3001               	movlw	1	; select bank2/3
  5657  0901  0087               	movwf	7
  5658  0902  1701               	bsf	1,6
  5659                           
  5660                           ;Switch_B1.c: 244: setRFSW_Status(sw, 1);
  5661  0903  01A2               	clrf	setRFSW_Status@command
  5662  0904  0AA2               	incf	setRFSW_Status@command,f
  5663  0905  0863               	movf	Sw_DimmerOnFunc@sw,w
  5664  0906  319F  2737  3188   	fcall	_setRFSW_Status
  5665                           
  5666                           ;Switch_B1.c: 246: setDimmerLights_Trigger(sw, 1);
  5667  0909  0020               	movlb	0	; select bank0
  5668  090A  01A2               	clrf	setDimmerLights_Trigger@command
  5669  090B  0AA2               	incf	setDimmerLights_Trigger@command,f
  5670  090C  0863               	movf	Sw_DimmerOnFunc@sw,w
  5671  090D  319F  27AF  3188   	fcall	_setDimmerLights_Trigger
  5672                           
  5673                           ;Switch_B1.c: 247: setDimmerLights_Switch(sw, 1);
  5674  0910  0020               	movlb	0	; select bank0
  5675  0911  01A2               	clrf	setDimmerLights_Switch@command
  5676  0912  0AA2               	incf	setDimmerLights_Switch@command,f
  5677  0913  0863               	movf	Sw_DimmerOnFunc@sw,w
  5678  0914  319F  279F  3188   	fcall	_setDimmerLights_Switch
  5679                           
  5680                           ;Switch_B1.c: 249: setRF_DimmerLights(sw, Sw->Status);
  5681  0917  0020               	movlb	0	; select bank0
  5682  0918  086E               	movf	_Sw,w
  5683  0919  0086               	movwf	6
  5684  091A  3001               	movlw	1	; select bank2/3
  5685  091B  0087               	movwf	7
  5686  091C  3000               	movlw	0
  5687  091D  1B01               	btfsc	1,6
  5688  091E  3001               	movlw	1
  5689  091F  00DD               	movwf	setRF_DimmerLights@on
  5690  0920  0863               	movf	Sw_DimmerOnFunc@sw,w
  5691  0921  3187  2792  3188   	fcall	_setRF_DimmerLights
  5692                           
  5693                           ;Switch_B1.c: 250: setTxData();
  5694  0924  3184  24F1         	fcall	_setTxData
  5695                           
  5696                           ;Switch_B1.c: 252: } else {
  5697  0926  0008               	return
  5698  0927                     l6381:	
  5699                           
  5700                           ;Switch_B1.c: 253: Sw->Status = 0;
  5701  0927  0020               	movlb	0	; select bank0
  5702  0928  086E               	movf	_Sw,w
  5703  0929  0086               	movwf	6
  5704  092A  3001               	movlw	1	; select bank2/3
  5705  092B  0087               	movwf	7
  5706  092C  1301               	bcf	1,6
  5707                           
  5708                           ;Switch_B1.c: 254: setRFSW_Status(sw, Sw->Status);
  5709  092D  086E               	movf	_Sw,w
  5710  092E  0086               	movwf	6
  5711  092F  3001               	movlw	1	; select bank2/3
  5712  0930  0087               	movwf	7
  5713  0931  3000               	movlw	0
  5714  0932  1B01               	btfsc	1,6
  5715  0933  3001               	movlw	1
  5716  0934  00A2               	movwf	setRFSW_Status@command
  5717  0935  0863               	movf	Sw_DimmerOnFunc@sw,w
  5718  0936  319F  2737         	fcall	_setRFSW_Status
  5719  0938  0008               	return
  5720  0939                     __end_of_Sw_DimmerOnFunc:	
  5721                           
  5722                           	psect	text17
  5723  0CA0                     __ptext17:	
  5724 ;; *************** function _Sw_DimmerOffFunc *****************
  5725 ;; Defined at:
  5726 ;;		line 260 in file "../src/Switch_B1.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  sw              1    wreg     unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  sw              1   68[BANK0 ] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;		None               void
  5733 ;; Registers used:
  5734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;Total ram usage:        3 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    9
  5747 ;; This function calls:
  5748 ;;		_setDelayOff_GO
  5749 ;;		_setDimmerLights_AdjGo
  5750 ;;		_setDimmerLights_Switch
  5751 ;;		_setDimmerLights_Trigger
  5752 ;;		_setDimmerLights_TriggerAdj
  5753 ;;		_setRF_DimmerLights
  5754 ;;		_setTxData
  5755 ;; This function is called by:
  5756 ;;		_setSw_Main
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           
  5761                           ;psect for function _Sw_DimmerOffFunc
  5762  0CA0                     _Sw_DimmerOffFunc:	
  5763                           
  5764                           ;incstack = 0
  5765                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5766                           ;Sw_DimmerOffFunc@sw stored from wreg
  5767  0CA0  0020               	movlb	0	; select bank0
  5768  0CA1  00E4               	movwf	Sw_DimmerOffFunc@sw
  5769                           
  5770                           ;Switch_B1.c: 261: if (Sw->Flag == 1) {
  5771  0CA2  086E               	movf	_Sw,w
  5772  0CA3  0086               	movwf	6
  5773  0CA4  3001               	movlw	1	; select bank2/3
  5774  0CA5  0087               	movwf	7
  5775  0CA6  1F81               	btfss	1,7
  5776  0CA7  0008               	return
  5777                           
  5778                           ;Switch_B1.c: 262: Sw->Flag = 0;
  5779  0CA8  086E               	movf	_Sw,w
  5780  0CA9  0086               	movwf	6
  5781  0CAA  3001               	movlw	1	; select bank2/3
  5782  0CAB  0087               	movwf	7
  5783  0CAC  1381               	bcf	1,7
  5784                           
  5785                           ;Switch_B1.c: 263: if (Sw->Status == 1) {
  5786  0CAD  086E               	movf	_Sw,w
  5787  0CAE  0086               	movwf	6
  5788  0CAF  3001               	movlw	1	; select bank2/3
  5789  0CB0  0087               	movwf	7
  5790  0CB1  1F01               	btfss	1,6
  5791  0CB2  2CEB               	goto	l6417
  5792                           
  5793                           ;Switch_B1.c: 264: if (Sw->Adj == 1) {
  5794  0CB3  0A6E               	incf	_Sw,w
  5795  0CB4  0086               	movwf	6
  5796  0CB5  3001               	movlw	1	; select bank2/3
  5797  0CB6  0087               	movwf	7
  5798  0CB7  1C01               	btfss	1,0
  5799  0CB8  0008               	return
  5800                           
  5801                           ;Switch_B1.c: 265: Sw->Adj = 0;
  5802  0CB9  0A6E               	incf	_Sw,w
  5803  0CBA  0086               	movwf	6
  5804  0CBB  3001               	movlw	1	; select bank2/3
  5805  0CBC  0087               	movwf	7
  5806  0CBD  1001               	bcf	1,0
  5807                           
  5808                           ;Switch_B1.c: 266: setDimmerLights_TriggerAdj(sw, 1);
  5809  0CBE  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5810  0CBF  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5811  0CC0  0864               	movf	Sw_DimmerOffFunc@sw,w
  5812  0CC1  319F  27DF  318C   	fcall	_setDimmerLights_TriggerAdj
  5813                           
  5814                           ;Switch_B1.c: 267: setDimmerLights_AdjGo(sw, 0);
  5815  0CC4  0020               	movlb	0	; select bank0
  5816  0CC5  01A2               	clrf	setDimmerLights_AdjGo@command
  5817  0CC6  0864               	movf	Sw_DimmerOffFunc@sw,w
  5818  0CC7  319F  27CF  318C   	fcall	_setDimmerLights_AdjGo
  5819                           
  5820                           ;Switch_B1.c: 269: product->Data[17]=product->Data[26 + sw];
  5821  0CCA  0020               	movlb	0	; select bank0
  5822  0CCB  0864               	movf	Sw_DimmerOffFunc@sw,w
  5823  0CCC  3E1A               	addlw	26
  5824  0CCD  076F               	addwf	_product,w
  5825  0CCE  00E2               	movwf	??_Sw_DimmerOffFunc
  5826  0CCF  0862               	movf	??_Sw_DimmerOffFunc,w
  5827  0CD0  0086               	movwf	6
  5828  0CD1  3001               	movlw	1	; select bank2/3
  5829  0CD2  0087               	movwf	7
  5830  0CD3  0801               	movf	1,w
  5831  0CD4  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5832  0CD5  086F               	movf	_product,w
  5833  0CD6  3E11               	addlw	17
  5834  0CD7  0086               	movwf	6
  5835  0CD8  3001               	movlw	1	; select bank2/3
  5836  0CD9  0087               	movwf	7
  5837  0CDA  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5838  0CDB  0081               	movwf	1
  5839                           
  5840                           ;Switch_B1.c: 270: setRF_DimmerLights(sw, Sw->Status);
  5841  0CDC  086E               	movf	_Sw,w
  5842  0CDD  0086               	movwf	6
  5843  0CDE  3001               	movlw	1	; select bank2/3
  5844  0CDF  0087               	movwf	7
  5845  0CE0  3000               	movlw	0
  5846  0CE1  1B01               	btfsc	1,6
  5847  0CE2  3001               	movlw	1
  5848  0CE3  00DD               	movwf	setRF_DimmerLights@on
  5849  0CE4  0864               	movf	Sw_DimmerOffFunc@sw,w
  5850  0CE5  3187  2792  318C   	fcall	_setRF_DimmerLights
  5851                           
  5852                           ;Switch_B1.c: 271: setTxData();
  5853  0CE8  3184  24F1         	fcall	_setTxData
  5854                           
  5855                           ;Switch_B1.c: 273: }
  5856                           ;Switch_B1.c: 274: } else {
  5857  0CEA  0008               	return
  5858  0CEB                     l6417:	
  5859                           
  5860                           ;Switch_B1.c: 275: setDimmerLights_Trigger(sw, 1);
  5861  0CEB  0020               	movlb	0	; select bank0
  5862  0CEC  01A2               	clrf	setDimmerLights_Trigger@command
  5863  0CED  0AA2               	incf	setDimmerLights_Trigger@command,f
  5864  0CEE  0864               	movf	Sw_DimmerOffFunc@sw,w
  5865  0CEF  319F  27AF  318C   	fcall	_setDimmerLights_Trigger
  5866                           
  5867                           ;Switch_B1.c: 276: setDimmerLights_Switch(sw, 0);
  5868  0CF2  0020               	movlb	0	; select bank0
  5869  0CF3  01A2               	clrf	setDimmerLights_Switch@command
  5870  0CF4  0864               	movf	Sw_DimmerOffFunc@sw,w
  5871  0CF5  319F  279F  318C   	fcall	_setDimmerLights_Switch
  5872                           
  5873                           ;Switch_B1.c: 278: setDelayOff_GO(sw, 0, 0);
  5874  0CF8  0020               	movlb	0	; select bank0
  5875  0CF9  01AA               	clrf	setDelayOff_GO@command
  5876  0CFA  01AB               	clrf	setDelayOff_GO@value
  5877  0CFB  0864               	movf	Sw_DimmerOffFunc@sw,w
  5878  0CFC  318B  236C  318C   	fcall	_setDelayOff_GO
  5879                           
  5880                           ;Switch_B1.c: 279: setRF_DimmerLights(sw, Sw->Status);
  5881  0CFF  0020               	movlb	0	; select bank0
  5882  0D00  086E               	movf	_Sw,w
  5883  0D01  0086               	movwf	6
  5884  0D02  3001               	movlw	1	; select bank2/3
  5885  0D03  0087               	movwf	7
  5886  0D04  3000               	movlw	0
  5887  0D05  1B01               	btfsc	1,6
  5888  0D06  3001               	movlw	1
  5889  0D07  00DD               	movwf	setRF_DimmerLights@on
  5890  0D08  0864               	movf	Sw_DimmerOffFunc@sw,w
  5891  0D09  3187  2792  318C   	fcall	_setRF_DimmerLights
  5892                           
  5893                           ;Switch_B1.c: 280: setTxData();
  5894  0D0C  3184  24F1         	fcall	_setTxData
  5895  0D0E  0008               	return
  5896  0D0F                     __end_of_Sw_DimmerOffFunc:	
  5897                           
  5898                           	psect	text18
  5899  13F8                     __ptext18:	
  5900 ;; *************** function _Sw_DimmerAdjFunc *****************
  5901 ;; Defined at:
  5902 ;;		line 287 in file "../src/Switch_B1.c"
  5903 ;; Parameters:    Size  Location     Type
  5904 ;;  sw              1    wreg     unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  sw              1    5[BANK0 ] unsigned char 
  5907 ;;  Idle            1    4[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;		None               void
  5910 ;; Registers used:
  5911 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5920 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5921 ;;Total ram usage:        2 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    7
  5924 ;; This function calls:
  5925 ;;		_setDimmerLights_AdjGo
  5926 ;;		_setDimmerLights_TriggerAdj
  5927 ;;		_setRFSW_Status
  5928 ;; This function is called by:
  5929 ;;		_setSw_Main
  5930 ;; This function uses a non-reentrant model
  5931 ;;
  5932                           
  5933                           
  5934                           ;psect for function _Sw_DimmerAdjFunc
  5935  13F8                     _Sw_DimmerAdjFunc:	
  5936                           
  5937                           ;incstack = 0
  5938                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5939                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5940  13F8  0020               	movlb	0	; select bank0
  5941  13F9  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5942                           
  5943                           ;Switch_B1.c: 288: char Idle = 1;
  5944  13FA  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5945  13FB  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5946                           
  5947                           ;Switch_B1.c: 308: if (Idle == 1) {
  5948  13FC  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5949  13FD  3A01               	xorlw	1
  5950  13FE  1D03               	skipz
  5951  13FF  0008               	return
  5952                           
  5953                           ;Switch_B1.c: 309: if (Sw->Flag == 1) {
  5954  1400  086E               	movf	_Sw,w
  5955  1401  0086               	movwf	6
  5956  1402  3001               	movlw	1	; select bank2/3
  5957  1403  0087               	movwf	7
  5958  1404  1F81               	btfss	1,7
  5959  1405  0008               	return
  5960                           
  5961                           ;Switch_B1.c: 310: Sw->Hold1 = 1;
  5962  1406  086E               	movf	_Sw,w
  5963  1407  0086               	movwf	6
  5964  1408  3001               	movlw	1	; select bank2/3
  5965  1409  0087               	movwf	7
  5966  140A  1581               	bsf	1,3
  5967                           
  5968                           ;Switch_B1.c: 311: Sw->Adj = 1;
  5969  140B  0A6E               	incf	_Sw,w
  5970  140C  0086               	movwf	6
  5971  140D  3001               	movlw	1	; select bank2/3
  5972  140E  0087               	movwf	7
  5973  140F  1401               	bsf	1,0
  5974                           
  5975                           ;Switch_B1.c: 312: Sw->Status = 1;
  5976  1410  086E               	movf	_Sw,w
  5977  1411  0086               	movwf	6
  5978  1412  3001               	movlw	1	; select bank2/3
  5979  1413  0087               	movwf	7
  5980  1414  1701               	bsf	1,6
  5981                           
  5982                           ;Switch_B1.c: 313: setRFSW_Status(sw, 1);
  5983  1415  01A2               	clrf	setRFSW_Status@command
  5984  1416  0AA2               	incf	setRFSW_Status@command,f
  5985  1417  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5986  1418  319F  2737  3193   	fcall	_setRFSW_Status
  5987                           
  5988                           ;Switch_B1.c: 315: setDimmerLights_TriggerAdj(sw, 1);
  5989  141B  0020               	movlb	0	; select bank0
  5990  141C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5991  141D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5992  141E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5993  141F  319F  27DF  3193   	fcall	_setDimmerLights_TriggerAdj
  5994                           
  5995                           ;Switch_B1.c: 316: setDimmerLights_AdjGo(sw, 1);
  5996  1422  0020               	movlb	0	; select bank0
  5997  1423  01A2               	clrf	setDimmerLights_AdjGo@command
  5998  1424  0AA2               	incf	setDimmerLights_AdjGo@command,f
  5999  1425  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6000  1426  319F  27CF         	fcall	_setDimmerLights_AdjGo
  6001  1428  0008               	return
  6002  1429                     __end_of_Sw_DimmerAdjFunc:	
  6003                           
  6004                           	psect	text19
  6005  1FDF                     __ptext19:	
  6006 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6007 ;; Defined at:
  6008 ;;		line 711 in file "../src/Dimmer_B1.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  lights          1    wreg     unsigned char 
  6011 ;;  command         1    2[BANK0 ] unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  lights          1    3[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;		None               void
  6016 ;; Registers used:
  6017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		_DimmerLightsPointSelect
  6032 ;; This function is called by:
  6033 ;;		_Sw_DimmerOffFunc
  6034 ;;		_Sw_DimmerAdjFunc
  6035 ;; This function uses a non-reentrant model
  6036 ;;
  6037                           
  6038                           
  6039                           ;psect for function _setDimmerLights_TriggerAdj
  6040  1FDF                     _setDimmerLights_TriggerAdj:	
  6041                           
  6042                           ;incstack = 0
  6043                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6044                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6045  1FDF  0020               	movlb	0	; select bank0
  6046  1FE0  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6047                           
  6048                           ;Dimmer_B1.c: 713: DimmerLightsPointSelect(lights);
  6049  1FE1  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6050  1FE2  319E  26BF         	fcall	_DimmerLightsPointSelect
  6051                           
  6052                           ;Dimmer_B1.c: 714: DimmerLights->TriggerAdj = command;
  6053  1FE4  0020               	movlb	0	; select bank0
  6054  1FE5  086D               	movf	_DimmerLights,w
  6055  1FE6  3E08               	addlw	8
  6056  1FE7  0086               	movwf	6
  6057  1FE8  3001               	movlw	1	; select bank2/3
  6058  1FE9  0087               	movwf	7
  6059  1FEA  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6060  1FEB  1201               	bcf	1,4
  6061  1FEC  1D03               	skipz
  6062  1FED  1601               	bsf	1,4
  6063  1FEE  0008               	return
  6064  1FEF                     __end_of_setDimmerLights_TriggerAdj:	
  6065                           
  6066                           	psect	text20
  6067  1FCF                     __ptext20:	
  6068 ;; *************** function _setDimmerLights_AdjGo *****************
  6069 ;; Defined at:
  6070 ;;		line 699 in file "../src/Dimmer_B1.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  lights          1    wreg     unsigned char 
  6073 ;;  command         1    2[BANK0 ] unsigned char 
  6074 ;; Auto vars:     Size  Location     Type
  6075 ;;  lights          1    3[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;		None               void
  6078 ;; Registers used:
  6079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6085 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;Total ram usage:        2 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    6
  6092 ;; This function calls:
  6093 ;;		_DimmerLightsPointSelect
  6094 ;; This function is called by:
  6095 ;;		_Sw_DimmerOffFunc
  6096 ;;		_Sw_DimmerAdjFunc
  6097 ;; This function uses a non-reentrant model
  6098 ;;
  6099                           
  6100                           
  6101                           ;psect for function _setDimmerLights_AdjGo
  6102  1FCF                     _setDimmerLights_AdjGo:	
  6103                           
  6104                           ;incstack = 0
  6105                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6106                           ;setDimmerLights_AdjGo@lights stored from wreg
  6107  1FCF  0020               	movlb	0	; select bank0
  6108  1FD0  00A3               	movwf	setDimmerLights_AdjGo@lights
  6109                           
  6110                           ;Dimmer_B1.c: 701: DimmerLightsPointSelect(lights);
  6111  1FD1  0823               	movf	setDimmerLights_AdjGo@lights,w
  6112  1FD2  319E  26BF         	fcall	_DimmerLightsPointSelect
  6113                           
  6114                           ;Dimmer_B1.c: 702: DimmerLights->AdjGo = command;
  6115  1FD4  0020               	movlb	0	; select bank0
  6116  1FD5  086D               	movf	_DimmerLights,w
  6117  1FD6  3E08               	addlw	8
  6118  1FD7  0086               	movwf	6
  6119  1FD8  3001               	movlw	1	; select bank2/3
  6120  1FD9  0087               	movwf	7
  6121  1FDA  0822               	movf	setDimmerLights_AdjGo@command,w
  6122  1FDB  1181               	bcf	1,3
  6123  1FDC  1D03               	skipz
  6124  1FDD  1581               	bsf	1,3
  6125  1FDE  0008               	return
  6126  1FDF                     __end_of_setDimmerLights_AdjGo:	
  6127                           
  6128                           	psect	text21
  6129  1E81                     __ptext21:	
  6130 ;; *************** function _Switch_Initialization *****************
  6131 ;; Defined at:
  6132 ;;		line 41 in file "../src/Switch_B1.c"
  6133 ;; Parameters:    Size  Location     Type
  6134 ;;		None
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;		None
  6137 ;; Return value:  Size  Location     Type
  6138 ;;		None               void
  6139 ;; Registers used:
  6140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6141 ;; Tracked objects:
  6142 ;;		On entry : 0/0
  6143 ;;		On exit  : 0/0
  6144 ;;		Unchanged: 0/0
  6145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;Total ram usage:        0 bytes
  6151 ;; Hardware stack levels used:    1
  6152 ;; Hardware stack levels required when called:    8
  6153 ;; This function calls:
  6154 ;;		_TouchPower
  6155 ;;		_setSw_Initialization
  6156 ;; This function is called by:
  6157 ;;		_main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _Switch_Initialization
  6163  1E81                     _Switch_Initialization:	
  6164                           
  6165                           ;Switch_B1.c: 42: TouchPower();
  6166                           
  6167                           ;incstack = 0
  6168                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6169  1E81  319F  2781  319E   	fcall	_TouchPower
  6170                           
  6171                           ;Switch_B1.c: 44: WPUB1 = 0;
  6172  1E84  0024               	movlb	4	; select bank4
  6173  1E85  108D               	bcf	13,1	;volatile
  6174                           
  6175                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6176  1E86  3001               	movlw	1
  6177  1E87  319F  27BF         	fcall	_setSw_Initialization
  6178  1E89  0008               	return
  6179  1E8A                     __end_of_Switch_Initialization:	
  6180                           
  6181                           	psect	text22
  6182  1FBF                     __ptext22:	
  6183 ;; *************** function _setSw_Initialization *****************
  6184 ;; Defined at:
  6185 ;;		line 81 in file "../src/Switch_B1.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  sw              1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  sw              1    3[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;		None               void
  6192 ;; Registers used:
  6193 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6203 ;;Total ram usage:        1 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    7
  6206 ;; This function calls:
  6207 ;;		_setLED
  6208 ;; This function is called by:
  6209 ;;		_Switch_Initialization
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           
  6214                           ;psect for function _setSw_Initialization
  6215  1FBF                     _setSw_Initialization:	
  6216                           
  6217                           ;incstack = 0
  6218                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6219                           ;setSw_Initialization@sw stored from wreg
  6220  1FBF  0020               	movlb	0	; select bank0
  6221  1FC0  00A3               	movwf	setSw_Initialization@sw
  6222                           
  6223                           ;Switch_B1.c: 82: setLED(sw, 1);
  6224  1FC1  01A1               	clrf	setLED@command
  6225  1FC2  0AA1               	incf	setLED@command,f
  6226  1FC3  0823               	movf	setSw_Initialization@sw,w
  6227  1FC4  318B  230A  319F   	fcall	_setLED
  6228                           
  6229                           ;Switch_B1.c: 84: setLED(sw + 1, 1);
  6230  1FC7  0020               	movlb	0	; select bank0
  6231  1FC8  01A1               	clrf	setLED@command
  6232  1FC9  0AA1               	incf	setLED@command,f
  6233  1FCA  0823               	movf	setSw_Initialization@sw,w
  6234  1FCB  3E01               	addlw	1
  6235  1FCC  318B  230A         	fcall	_setLED
  6236  1FCE  0008               	return
  6237  1FCF                     __end_of_setSw_Initialization:	
  6238                           
  6239                           	psect	text23
  6240  1F81                     __ptext23:	
  6241 ;; *************** function _TouchPower *****************
  6242 ;; Defined at:
  6243 ;;		line 10 in file "../src/Switch_B1.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;		None
  6248 ;; Return value:  Size  Location     Type
  6249 ;;		None               void
  6250 ;; Registers used:
  6251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6261 ;;Total ram usage:        0 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    6
  6264 ;; This function calls:
  6265 ;;		_Timeout_Counter
  6266 ;;		_set_TimeoutCleared
  6267 ;; This function is called by:
  6268 ;;		_Switch_Initialization
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           
  6273                           ;psect for function _TouchPower
  6274  1F81                     _TouchPower:	
  6275                           
  6276                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6280  1F81  2F87               	goto	l6981
  6281  1F82                     l2236:	
  6282                           
  6283                           ;Switch_B1.c: 12: RC5 = 1;
  6284  1F82  0020               	movlb	0	; select bank0
  6285  1F83  168E               	bsf	14,5	;volatile
  6286                           
  6287                           ;Switch_B1.c: 13: Timeout_Counter();
  6288  1F84  3191  2102  319F   	fcall	_Timeout_Counter
  6289  1F87                     l6981:	
  6290  1F87  0020               	movlb	0	; select bank0
  6291  1F88  1A8E               	btfsc	14,5	;volatile
  6292  1F89  2F8D               	goto	l6985
  6293  1F8A  0021               	movlb	1	; select bank1
  6294  1F8B  1D2F               	btfss	(_myMain^(0+128)+15),2
  6295  1F8C  2F82               	goto	l2236
  6296  1F8D                     l6985:	
  6297                           
  6298                           ;Switch_B1.c: 14: }
  6299                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6300  1F8D  319E  262B         	fcall	_set_TimeoutCleared
  6301  1F8F  0008               	return
  6302  1F90                     __end_of_TouchPower:	
  6303                           
  6304                           	psect	text24
  6305  1DF7                     __ptext24:	
  6306 ;; *************** function _RF_Main *****************
  6307 ;; Defined at:
  6308 ;;		line 16 in file "../src/RF_Control_B1.c"
  6309 ;; Parameters:    Size  Location     Type
  6310 ;;		None
  6311 ;; Auto vars:     Size  Location     Type
  6312 ;;		None
  6313 ;; Return value:  Size  Location     Type
  6314 ;;		None               void
  6315 ;; Registers used:
  6316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6317 ;; Tracked objects:
  6318 ;;		On entry : 0/0
  6319 ;;		On exit  : 0/0
  6320 ;;		Unchanged: 0/0
  6321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6326 ;;Total ram usage:        0 bytes
  6327 ;; Hardware stack levels used:    1
  6328 ;; Hardware stack levels required when called:   14
  6329 ;; This function calls:
  6330 ;;		_setRF_Main
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function _RF_Main
  6338  1DF7                     _RF_Main:	
  6339                           
  6340                           ;RF_Control_B1.c: 18: setRF_Main();
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6344  1DF7  318C  2439         	fcall	_setRF_Main
  6345  1DF9  0008               	return
  6346  1DFA                     __end_of_RF_Main:	
  6347                           
  6348                           	psect	text25
  6349  0C39                     __ptext25:	
  6350 ;; *************** function _setRF_Main *****************
  6351 ;; Defined at:
  6352 ;;		line 51 in file "../src/RF_Control_B1.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;  Receive_OK      1    0        unsigned char 
  6357 ;;  loop_f          1    0        unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;		None               void
  6360 ;; Registers used:
  6361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        2 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:   13
  6374 ;; This function calls:
  6375 ;;		_CC2500_RxData
  6376 ;;		_CC2500_TxData
  6377 ;;		_CC2500_WriteCommand
  6378 ;;		_RF_RxDisable
  6379 ;;		_getBuz_GO
  6380 ;;		_getRxData
  6381 ;; This function is called by:
  6382 ;;		_RF_Main
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _setRF_Main
  6388  0C39                     _setRF_Main:	
  6389                           
  6390                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  6391                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  6392                           
  6393                           ;incstack = 0
  6394                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6395  0C39  0021               	movlb	1	; select bank1
  6396  0C3A  1C46               	btfss	_RF1^(0+128),0
  6397  0C3B  0008               	return
  6398                           
  6399                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6400  0C3C  319F  27EF  318C   	fcall	_getBuz_GO
  6401  0C3F  0020               	movlb	0	; select bank0
  6402  0C40  0821               	movf	?_getBuz_GO+1,w
  6403  0C41  0420               	iorwf	?_getBuz_GO,w
  6404  0C42  1D03               	skipz
  6405  0C43  0008               	return
  6406                           
  6407                           ;RF_Control_B1.c: 66: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6408  0C44  01E8               	clrf	_setRF_Main$4074
  6409  0C45  0AE8               	incf	_setRF_Main$4074,f
  6410  0C46  1F0C               	btfss	12,6	;volatile
  6411  0C47  1A0C               	btfsc	12,4	;volatile
  6412  0C48  2C4D               	goto	l7823
  6413  0C49  1C0C               	btfss	12,0	;volatile
  6414  0C4A  188D               	btfsc	13,1	;volatile
  6415  0C4B  2C4D               	goto	l7823
  6416  0C4C  01E8               	clrf	_setRF_Main$4074
  6417  0C4D                     l7823:	
  6418  0C4D  0868               	movf	_setRF_Main$4074,w
  6419  0C4E  0021               	movlb	1	; select bank1
  6420  0C4F  13C6               	bcf	_RF1^(0+128),7
  6421  0C50  1D03               	skipz
  6422  0C51  17C6               	bsf	_RF1^(0+128),7
  6423                           
  6424                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  6425  0C52  1BC6               	btfsc	_RF1^(0+128),7
  6426  0C53  1B46               	btfsc	_RF1^(0+128),6
  6427  0C54  2C59               	goto	l1865
  6428                           
  6429                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  6430  0C55  14C7               	bsf	(_RF1^(0+128)+1),1
  6431                           
  6432                           ;RF_Control_B1.c: 70: RF_RxDisable();
  6433  0C56  319F  2772         	fcall	_RF_RxDisable
  6434                           
  6435                           ;RF_Control_B1.c: 71: } else {
  6436  0C58  0008               	return
  6437  0C59                     l1865:	
  6438                           
  6439                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  6440  0C59  18C7               	btfsc	(_RF1^(0+128)+1),1
  6441  0C5A  1B46               	btfsc	_RF1^(0+128),6
  6442  0C5B  2C69               	goto	l7843
  6443                           
  6444                           ;RF_Control_B1.c: 73: RF1.Count++;
  6445  0C5C  3001               	movlw	1
  6446  0C5D  0020               	movlb	0	; select bank0
  6447  0C5E  00E7               	movwf	??_setRF_Main
  6448  0C5F  0867               	movf	??_setRF_Main,w
  6449  0C60  0021               	movlb	1	; select bank1
  6450  0C61  07C9               	addwf	(_RF1^(0+128)+3),f
  6451                           
  6452                           ;RF_Control_B1.c: 74: if (RF1.Count == 10) {
  6453  0C62  0849               	movf	(_RF1^(0+128)+3),w
  6454  0C63  3A0A               	xorlw	10
  6455  0C64  1D03               	skipz
  6456  0C65  0008               	return
  6457                           
  6458                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  6459  0C66  01C9               	clrf	(_RF1^(0+128)+3)
  6460                           
  6461                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  6462  0C67  10C7               	bcf	(_RF1^(0+128)+1),1
  6463                           
  6464                           ;RF_Control_B1.c: 77: }
  6465                           ;RF_Control_B1.c: 78: } else {
  6466  0C68  0008               	return
  6467  0C69                     l7843:	
  6468                           
  6469                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6470  0C69  01C9               	clrf	(_RF1^(0+128)+3)
  6471                           
  6472                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  6473  0C6A  10C7               	bcf	(_RF1^(0+128)+1),1
  6474                           
  6475                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6476  0C6B  1946               	btfsc	_RF1^(0+128),2
  6477  0C6C  1B46               	btfsc	_RF1^(0+128),6
  6478  0C6D  2C7E               	goto	l1870
  6479                           
  6480                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  6481  0C6E  1146               	bcf	_RF1^(0+128),2
  6482                           
  6483                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  6484  0C6F  11C6               	bcf	_RF1^(0+128),3
  6485                           
  6486                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  6487  0C70  10C6               	bcf	_RF1^(0+128),1
  6488                           
  6489                           ;RF_Control_B1.c: 87: CC2500_WriteCommand(0x36);
  6490  0C71  3036               	movlw	54
  6491  0C72  3191  211A  318C   	fcall	_CC2500_WriteCommand
  6492                           
  6493                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  6494  0C75  303B               	movlw	59
  6495  0C76  3191  211A  318C   	fcall	_CC2500_WriteCommand
  6496                           
  6497                           ;RF_Control_B1.c: 89: CC2500_TxData();
  6498  0C79  318A  22A9         	fcall	_CC2500_TxData
  6499                           
  6500                           ;RF_Control_B1.c: 90: RF1.Run = 1;
  6501  0C7B  0021               	movlb	1	; select bank1
  6502  0C7C  14C7               	bsf	(_RF1^(0+128)+1),1
  6503                           
  6504                           ;RF_Control_B1.c: 91: } else {
  6505  0C7D  0008               	return
  6506  0C7E                     l1870:	
  6507                           
  6508                           ;RF_Control_B1.c: 93: if (RF1.RxStatus == 1) {
  6509  0C7E  1DC6               	btfss	_RF1^(0+128),3
  6510  0C7F  2C8F               	goto	l1872
  6511                           
  6512                           ;RF_Control_B1.c: 94: CC2500_RxData();
  6513  0C80  318D  250F  318C   	fcall	_CC2500_RxData
  6514                           
  6515                           ;RF_Control_B1.c: 95: if (RF1.ReceiveGO == 1) {
  6516  0C83  0021               	movlb	1	; select bank1
  6517  0C84  1CC6               	btfss	_RF1^(0+128),1
  6518  0C85  0008               	return
  6519                           
  6520                           ;RF_Control_B1.c: 96: RF1.ReceiveGO = 0;
  6521  0C86  10C6               	bcf	_RF1^(0+128),1
  6522                           
  6523                           ;RF_Control_B1.c: 103: getRxData();
  6524  0C87  3197  271E         	fcall	_getRxData
  6525                           
  6526                           ;RF_Control_B1.c: 105: RF1.Run = 1;
  6527  0C89  0021               	movlb	1	; select bank1
  6528  0C8A  14C7               	bsf	(_RF1^(0+128)+1),1
  6529                           
  6530                           ;RF_Control_B1.c: 106: RB5 = RB5 == 1 ? 0 : 1;
  6531  0C8B  3020               	movlw	32
  6532  0C8C  0020               	movlb	0	; select bank0
  6533  0C8D  068D               	xorwf	13,f
  6534                           
  6535                           ;RF_Control_B1.c: 107: }
  6536                           ;RF_Control_B1.c: 108: } else {
  6537  0C8E  0008               	return
  6538  0C8F                     l1872:	
  6539                           
  6540                           ;RF_Control_B1.c: 110: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6541  0C8F  19C6               	btfsc	_RF1^(0+128),3
  6542  0C90  0008               	return
  6543  0C91  18C6               	btfsc	_RF1^(0+128),1
  6544  0C92  0008               	return
  6545                           
  6546                           ;RF_Control_B1.c: 111: RF1.RxStatus = 1;
  6547  0C93  15C6               	bsf	_RF1^(0+128),3
  6548                           
  6549                           ;RF_Control_B1.c: 112: CC2500_WriteCommand(0x36);
  6550  0C94  3036               	movlw	54
  6551  0C95  3191  211A  318C   	fcall	_CC2500_WriteCommand
  6552                           
  6553                           ;RF_Control_B1.c: 113: CC2500_WriteCommand(0x3A);
  6554  0C98  303A               	movlw	58
  6555  0C99  3191  211A  318C   	fcall	_CC2500_WriteCommand
  6556                           
  6557                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x34);
  6558  0C9C  3034               	movlw	52
  6559  0C9D  3191  211A         	fcall	_CC2500_WriteCommand
  6560  0C9F  0008               	return
  6561  0CA0                     __end_of_setRF_Main:	
  6562                           
  6563                           	psect	text26
  6564  171E                     __ptext26:	
  6565 ;; *************** function _getRxData *****************
  6566 ;; Defined at:
  6567 ;;		line 199 in file "../src/RF_Control_B1.c"
  6568 ;; Parameters:    Size  Location     Type
  6569 ;;		None
  6570 ;; Auto vars:     Size  Location     Type
  6571 ;;		None
  6572 ;; Return value:  Size  Location     Type
  6573 ;;		None               void
  6574 ;; Registers used:
  6575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;Total ram usage:        0 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:   12
  6588 ;; This function calls:
  6589 ;;		_setControl_Lights_Table
  6590 ;;		_setLog_Code
  6591 ;; This function is called by:
  6592 ;;		_setRF_Main
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           
  6597                           ;psect for function _getRxData
  6598  171E                     _getRxData:	
  6599                           
  6600                           ;RF_Control_B1.c: 200: if (RF1.Learn == 1) {
  6601                           
  6602                           ;incstack = 0
  6603                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6604  171E  0021               	movlb	1	; select bank1
  6605  171F  1F46               	btfss	_RF1^(0+128),6
  6606  1720  2F2C               	goto	l7609
  6607                           
  6608                           ;RF_Control_B1.c: 201: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64)
  6609  1721  0022               	movlb	2	; select bank2
  6610  1722  08A0               	movf	_RF_Data^(0+256),f
  6611  1723  1D03               	skipz
  6612  1724  0008               	return
  6613  1725  0821               	movf	(_RF_Data^(0+256)+1),w
  6614  1726  3A64               	xorlw	100
  6615  1727  1D03               	skipz
  6616  1728  0008               	return
  6617                           
  6618                           ;RF_Control_B1.c: 202: {
  6619                           ;RF_Control_B1.c: 203: setLog_Code();
  6620  1729  3194  2429         	fcall	_setLog_Code
  6621                           
  6622                           ;RF_Control_B1.c: 204: }
  6623                           ;RF_Control_B1.c: 205: } else {
  6624  172B  0008               	return
  6625  172C                     l7609:	
  6626                           
  6627                           ;RF_Control_B1.c: 206: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02)
  6628  172C  0022               	movlb	2	; select bank2
  6629  172D  08A0               	movf	_RF_Data^(0+256),f
  6630  172E  1D03               	skipz
  6631  172F  0008               	return
  6632  1730  0821               	movf	(_RF_Data^(0+256)+1),w
  6633  1731  3A02               	xorlw	2
  6634  1732  1D03               	skipz
  6635  1733  0008               	return
  6636                           
  6637                           ;RF_Control_B1.c: 207: {
  6638                           ;RF_Control_B1.c: 208: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6639  1734  082C               	movf	(_RF_Data^(0+256)+12),w
  6640  1735  3AFF               	xorlw	255
  6641  1736  1D03               	skipz
  6642  1737  2F42               	goto	l7621
  6643  1738  082D               	movf	(_RF_Data^(0+256)+13),w
  6644  1739  3AFF               	xorlw	255
  6645  173A  1D03               	skipz
  6646  173B  2F42               	goto	l7621
  6647  173C  082E               	movf	(_RF_Data^(0+256)+14),w
  6648  173D  3AFF               	xorlw	255
  6649  173E  1D03               	skipz
  6650  173F  2F42               	goto	l7621
  6651                           
  6652                           ;RF_Control_B1.c: 209: __nop();
  6653  1740  0000               	nop
  6654                           
  6655                           ;RF_Control_B1.c: 210: } else {
  6656  1741  0008               	return
  6657  1742                     l7621:	
  6658                           
  6659                           ;RF_Control_B1.c: 211: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6660  1742  0020               	movlb	0	; select bank0
  6661  1743  086F               	movf	_product,w
  6662  1744  3E0C               	addlw	12
  6663  1745  0086               	movwf	6
  6664  1746  3001               	movlw	1	; select bank2/3
  6665  1747  0087               	movwf	7
  6666  1748  0022               	movlb	2	; select bank2
  6667  1749  082C               	movf	(_RF_Data^(0+256)+12),w
  6668  174A  0601               	xorwf	1,w
  6669  174B  1D03               	skipz
  6670  174C  0008               	return
  6671  174D  0020               	movlb	0	; select bank0
  6672  174E  086F               	movf	_product,w
  6673  174F  3E0D               	addlw	13
  6674  1750  0086               	movwf	6
  6675  1751  3001               	movlw	1	; select bank2/3
  6676  1752  0087               	movwf	7
  6677  1753  0022               	movlb	2	; select bank2
  6678  1754  082D               	movf	(_RF_Data^(0+256)+13),w
  6679  1755  0601               	xorwf	1,w
  6680  1756  1D03               	skipz
  6681  1757  0008               	return
  6682  1758  0020               	movlb	0	; select bank0
  6683  1759  086F               	movf	_product,w
  6684  175A  3E0E               	addlw	14
  6685  175B  0086               	movwf	6
  6686  175C  3001               	movlw	1	; select bank2/3
  6687  175D  0087               	movwf	7
  6688  175E  0022               	movlb	2	; select bank2
  6689  175F  082E               	movf	(_RF_Data^(0+256)+14),w
  6690  1760  0601               	xorwf	1,w
  6691  1761  1D03               	skipz
  6692  1762  0008               	return
  6693                           
  6694                           ;RF_Control_B1.c: 212: setControl_Lights_Table();
  6695  1763  318B  23D2         	fcall	_setControl_Lights_Table
  6696                           
  6697                           ;RF_Control_B1.c: 219: {
  6698                           ;RF_Control_B1.c: 220: ;
  6699                           
  6700                           ;RF_Control_B1.c: 216: {
  6701                           ;RF_Control_B1.c: 217: ;
  6702                           ;RF_Control_B1.c: 218: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65)
  6703                           
  6704                           ;RF_Control_B1.c: 213: }
  6705                           ;RF_Control_B1.c: 214: }
  6706                           ;RF_Control_B1.c: 215: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02)
  6707  1765  0008               	return
  6708  1766                     __end_of_getRxData:	
  6709                           
  6710                           	psect	text27
  6711  1429                     __ptext27:	
  6712 ;; *************** function _setLog_Code *****************
  6713 ;; Defined at:
  6714 ;;		line 230 in file "../src/RF_Control_B1.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;		None
  6717 ;; Auto vars:     Size  Location     Type
  6718 ;;		None
  6719 ;; Return value:  Size  Location     Type
  6720 ;;		None               void
  6721 ;; Registers used:
  6722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;Total ram usage:        1 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    7
  6735 ;; This function calls:
  6736 ;;		_setBuz
  6737 ;; This function is called by:
  6738 ;;		_getRxData
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function _setLog_Code
  6744  1429                     _setLog_Code:	
  6745                           
  6746                           ;RF_Control_B1.c: 231: product->Data[12]=RF_Data[12];
  6747                           
  6748                           ;incstack = 0
  6749                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6750  1429  0022               	movlb	2	; select bank2
  6751  142A  082C               	movf	(_RF_Data^(0+256)+12),w
  6752  142B  0020               	movlb	0	; select bank0
  6753  142C  00AD               	movwf	??_setLog_Code
  6754  142D  086F               	movf	_product,w
  6755  142E  3E0C               	addlw	12
  6756  142F  0086               	movwf	6
  6757  1430  3001               	movlw	1	; select bank2/3
  6758  1431  0087               	movwf	7
  6759  1432  082D               	movf	??_setLog_Code,w
  6760  1433  0081               	movwf	1
  6761                           
  6762                           ;RF_Control_B1.c: 232: product->Data[13]=RF_Data[13];
  6763  1434  0022               	movlb	2	; select bank2
  6764  1435  082D               	movf	(_RF_Data^(0+256)+13),w
  6765  1436  0020               	movlb	0	; select bank0
  6766  1437  00AD               	movwf	??_setLog_Code
  6767  1438  086F               	movf	_product,w
  6768  1439  3E0D               	addlw	13
  6769  143A  0086               	movwf	6
  6770  143B  3001               	movlw	1	; select bank2/3
  6771  143C  0087               	movwf	7
  6772  143D  082D               	movf	??_setLog_Code,w
  6773  143E  0081               	movwf	1
  6774                           
  6775                           ;RF_Control_B1.c: 233: product->Data[14]=RF_Data[14];
  6776  143F  0022               	movlb	2	; select bank2
  6777  1440  082E               	movf	(_RF_Data^(0+256)+14),w
  6778  1441  0020               	movlb	0	; select bank0
  6779  1442  00AD               	movwf	??_setLog_Code
  6780  1443  086F               	movf	_product,w
  6781  1444  3E0E               	addlw	14
  6782  1445  0086               	movwf	6
  6783  1446  3001               	movlw	1	; select bank2/3
  6784  1447  0087               	movwf	7
  6785  1448  082D               	movf	??_setLog_Code,w
  6786  1449  0081               	movwf	1
  6787                           
  6788                           ;RF_Control_B1.c: 234: setBuz(1, 100);
  6789  144A  3064               	movlw	100
  6790  144B  00A9               	movwf	setBuz@time
  6791  144C  3000               	movlw	0
  6792  144D  00AA               	movwf	setBuz@time+1
  6793  144E  3001               	movlw	1
  6794  144F  3189  2139  3194   	fcall	_setBuz
  6795                           
  6796                           ;RF_Control_B1.c: 235: RF1.Learn = 0;
  6797  1452  0021               	movlb	1	; select bank1
  6798  1453  1346               	bcf	_RF1^(0+128),6
  6799                           
  6800                           ;RF_Control_B1.c: 236: if (myMain.First) {
  6801  1454  1FA0               	btfss	_myMain^(0+128),7
  6802  1455  2C58               	goto	l1906
  6803                           
  6804                           ;RF_Control_B1.c: 237: Memory.LoopSave=1;
  6805  1456  0022               	movlb	2	; select bank2
  6806  1457  1561               	bsf	(_Memory^(0+256)+36),2
  6807  1458                     l1906:	
  6808                           
  6809                           ;RF_Control_B1.c: 238: }
  6810                           ;RF_Control_B1.c: 239: Memory.Modify=1;
  6811  1458  0022               	movlb	2	; select bank2
  6812  1459  1461               	bsf	(_Memory^(0+256)+36),0
  6813  145A  0008               	return
  6814  145B                     __end_of_setLog_Code:	
  6815                           
  6816                           	psect	text28
  6817  0BD2                     __ptext28:	
  6818 ;; *************** function _setControl_Lights_Table *****************
  6819 ;; Defined at:
  6820 ;;		line 243 in file "../src/RF_Control_B1.c"
  6821 ;; Parameters:    Size  Location     Type
  6822 ;;		None
  6823 ;; Auto vars:     Size  Location     Type
  6824 ;;		None
  6825 ;; Return value:  Size  Location     Type
  6826 ;;		None               void
  6827 ;; Registers used:
  6828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6829 ;; Tracked objects:
  6830 ;;		On entry : 0/0
  6831 ;;		On exit  : 0/0
  6832 ;;		Unchanged: 0/0
  6833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;Total ram usage:        0 bytes
  6839 ;; Hardware stack levels used:    1
  6840 ;; Hardware stack levels required when called:   11
  6841 ;; This function calls:
  6842 ;;		_setBuz
  6843 ;;		_setDimmerLights
  6844 ;;		_setRFSW_AdjControl
  6845 ;;		_setRFSW_Control
  6846 ;;		_setRFSW_Status
  6847 ;;		_setSw_Status
  6848 ;;		_setTxData
  6849 ;; This function is called by:
  6850 ;;		_getRxData
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _setControl_Lights_Table
  6856  0BD2                     _setControl_Lights_Table:	
  6857                           
  6858                           ;RF_Control_B1.c: 244: if (RF_Data[15] == 0x00) {
  6859                           
  6860                           ;incstack = 0
  6861                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6862  0BD2  0022               	movlb	2	; select bank2
  6863  0BD3  08AF               	movf	(_RF_Data^(0+256)+15),f
  6864  0BD4  1D03               	skipz
  6865  0BD5  2C0C               	goto	l7569
  6866                           
  6867                           ;RF_Control_B1.c: 246: setDimmerLights(1, 0);
  6868  0BD6  0020               	movlb	0	; select bank0
  6869  0BD7  01A3               	clrf	setDimmerLights@status
  6870  0BD8  3001               	movlw	1
  6871  0BD9  318E  2672  318B   	fcall	_setDimmerLights
  6872                           
  6873                           ;RF_Control_B1.c: 247: setRFSW_Status(1, 0);
  6874  0BDC  0020               	movlb	0	; select bank0
  6875  0BDD  01A2               	clrf	setRFSW_Status@command
  6876  0BDE  3001               	movlw	1
  6877  0BDF  319F  2737  318B   	fcall	_setRFSW_Status
  6878                           
  6879                           ;RF_Control_B1.c: 248: setSw_Status(1, 0);
  6880  0BE2  0020               	movlb	0	; select bank0
  6881  0BE3  01A2               	clrf	setSw_Status@command
  6882  0BE4  3001               	movlw	1
  6883  0BE5  319F  2745  318B   	fcall	_setSw_Status
  6884                           
  6885                           ;RF_Control_B1.c: 261: product->Data[9]=0;
  6886  0BE8  0020               	movlb	0	; select bank0
  6887  0BE9  086F               	movf	_product,w
  6888  0BEA  3E09               	addlw	9
  6889  0BEB  0086               	movwf	6
  6890  0BEC  3001               	movlw	1	; select bank2/3
  6891  0BED  0087               	movwf	7
  6892  0BEE  0181               	clrf	1
  6893                           
  6894                           ;RF_Control_B1.c: 262: product->Data[11]=0;
  6895  0BEF  086F               	movf	_product,w
  6896  0BF0  3E0B               	addlw	11
  6897  0BF1  0086               	movwf	6
  6898  0BF2  3001               	movlw	1	; select bank2/3
  6899  0BF3  0087               	movwf	7
  6900  0BF4  0181               	clrf	1
  6901                           
  6902                           ;RF_Control_B1.c: 263: product->Data[15]=0;
  6903  0BF5  086F               	movf	_product,w
  6904  0BF6  3E0F               	addlw	15
  6905  0BF7  0086               	movwf	6
  6906  0BF8  3001               	movlw	1	; select bank2/3
  6907  0BF9  0087               	movwf	7
  6908  0BFA  0181               	clrf	1
  6909                           
  6910                           ;RF_Control_B1.c: 264: product->Data[17]=0;
  6911  0BFB  086F               	movf	_product,w
  6912  0BFC  3E11               	addlw	17
  6913  0BFD  0086               	movwf	6
  6914  0BFE  3001               	movlw	1	; select bank2/3
  6915  0BFF  0087               	movwf	7
  6916  0C00  0181               	clrf	1
  6917                           
  6918                           ;RF_Control_B1.c: 265: setBuz(1, 100);
  6919  0C01  3064               	movlw	100
  6920  0C02  00A9               	movwf	setBuz@time
  6921  0C03  3000               	movlw	0
  6922  0C04  00AA               	movwf	setBuz@time+1
  6923  0C05  3001               	movlw	1
  6924  0C06  3189  2139  318B   	fcall	_setBuz
  6925                           
  6926                           ;RF_Control_B1.c: 266: setTxData();
  6927  0C09  3184  24F1         	fcall	_setTxData
  6928                           
  6929                           ;RF_Control_B1.c: 267: } else if (RF_Data[15] == 0x20) {
  6930  0C0B  0008               	return
  6931  0C0C                     l7569:	
  6932  0C0C  0022               	movlb	2	; select bank2
  6933  0C0D  082F               	movf	(_RF_Data^(0+256)+15),w
  6934  0C0E  3A20               	xorlw	32
  6935  0C0F  1D03               	skipz
  6936  0C10  2C27               	goto	l7575
  6937                           
  6938                           ;RF_Control_B1.c: 268: product->Data[9]=0;
  6939  0C11  0020               	movlb	0	; select bank0
  6940  0C12  086F               	movf	_product,w
  6941  0C13  3E09               	addlw	9
  6942  0C14  0086               	movwf	6
  6943  0C15  3001               	movlw	1	; select bank2/3
  6944  0C16  0087               	movwf	7
  6945  0C17  0181               	clrf	1
  6946                           
  6947                           ;RF_Control_B1.c: 269: product->Data[11]=0;
  6948  0C18  086F               	movf	_product,w
  6949  0C19  3E0B               	addlw	11
  6950  0C1A  0086               	movwf	6
  6951  0C1B  3001               	movlw	1	; select bank2/3
  6952  0C1C  0087               	movwf	7
  6953  0C1D  0181               	clrf	1
  6954                           
  6955                           ;RF_Control_B1.c: 270: product->Data[17]=0;
  6956  0C1E  086F               	movf	_product,w
  6957  0C1F  3E11               	addlw	17
  6958  0C20  0086               	movwf	6
  6959  0C21  3001               	movlw	1	; select bank2/3
  6960  0C22  0087               	movwf	7
  6961  0C23  0181               	clrf	1
  6962                           
  6963                           ;RF_Control_B1.c: 271: setTxData();
  6964  0C24  3184  24F1         	fcall	_setTxData
  6965                           
  6966                           ;RF_Control_B1.c: 272: }
  6967  0C26  0008               	return
  6968  0C27                     l7575:	
  6969                           
  6970                           ;RF_Control_B1.c: 274: else if (RF_Data[15] == 0x01) {
  6971  0C27  0022               	movlb	2	; select bank2
  6972  0C28  082F               	movf	(_RF_Data^(0+256)+15),w
  6973  0C29  3A01               	xorlw	1
  6974  0C2A  1D03               	skipz
  6975  0C2B  2C30               	goto	l7579
  6976                           
  6977                           ;RF_Control_B1.c: 275: setRFSW_Control(1);
  6978  0C2C  3001               	movlw	1
  6979  0C2D  3187  2707         	fcall	_setRFSW_Control
  6980                           
  6981                           ;RF_Control_B1.c: 276: }
  6982  0C2F  0008               	return
  6983  0C30                     l7579:	
  6984                           
  6985                           ;RF_Control_B1.c: 278: else if (RF_Data[15] == 0x11) {
  6986  0C30  0022               	movlb	2	; select bank2
  6987  0C31  082F               	movf	(_RF_Data^(0+256)+15),w
  6988  0C32  3A11               	xorlw	17
  6989  0C33  1D03               	skipz
  6990  0C34  0008               	return
  6991                           
  6992                           ;RF_Control_B1.c: 279: setRFSW_AdjControl(1);
  6993  0C35  3001               	movlw	1
  6994  0C36  3194  24C6         	fcall	_setRFSW_AdjControl
  6995  0C38  0008               	return
  6996  0C39                     __end_of_setControl_Lights_Table:	
  6997                           
  6998                           	psect	text29
  6999  0707                     __ptext29:	
  7000 ;; *************** function _setRFSW_Control *****************
  7001 ;; Defined at:
  7002 ;;		line 331 in file "../src/RF_Control_B1.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  sw              1    wreg     unsigned char 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;  sw              1   67[BANK0 ] unsigned char 
  7007 ;; Return value:  Size  Location     Type
  7008 ;;		None               void
  7009 ;; Registers used:
  7010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;Total ram usage:        2 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    9
  7023 ;; This function calls:
  7024 ;;		_RfSWPointSelect
  7025 ;;		_setBuz
  7026 ;;		_setDelayOff_GO
  7027 ;;		_setDimmerLights_Switch
  7028 ;;		_setDimmerLights_Trigger
  7029 ;;		_setRF_DimmerLights
  7030 ;;		_setSw_Status
  7031 ;;		_setTxData
  7032 ;; This function is called by:
  7033 ;;		_setControl_Lights_Table
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           
  7038                           ;psect for function _setRFSW_Control
  7039  0707                     _setRFSW_Control:	
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7043                           ;setRFSW_Control@sw stored from wreg
  7044  0707  0020               	movlb	0	; select bank0
  7045  0708  00E3               	movwf	setRFSW_Control@sw
  7046                           
  7047                           ;RF_Control_B1.c: 332: RfSWPointSelect(sw);
  7048  0709  0863               	movf	setRFSW_Control@sw,w
  7049  070A  319E  26CA  3187   	fcall	_RfSWPointSelect
  7050                           
  7051                           ;RF_Control_B1.c: 333: if (RFSW->Status == 0) {
  7052  070D  087A               	movf	_RFSW,w
  7053  070E  0086               	movwf	6
  7054  070F  0187               	clrf	7
  7055  0710  1801               	btfsc	1,0
  7056  0711  2F46               	goto	l5877
  7057                           
  7058                           ;RF_Control_B1.c: 334: if (RF_Data[16] == 0x80) {
  7059  0712  0022               	movlb	2	; select bank2
  7060  0713  0830               	movf	(_RF_Data^(0+256)+16),w
  7061  0714  3A80               	xorlw	128
  7062  0715  1D03               	skipz
  7063  0716  2F24               	goto	l5867
  7064                           
  7065                           ;RF_Control_B1.c: 335: setDelayOff_GO(sw, 1, RF_Data[17]);
  7066  0717  0020               	movlb	0	; select bank0
  7067  0718  01AA               	clrf	setDelayOff_GO@command
  7068  0719  0AAA               	incf	setDelayOff_GO@command,f
  7069  071A  0022               	movlb	2	; select bank2
  7070  071B  0831               	movf	(_RF_Data^(0+256)+17),w
  7071  071C  0020               	movlb	0	; select bank0
  7072  071D  00E2               	movwf	??_setRFSW_Control
  7073  071E  0862               	movf	??_setRFSW_Control,w
  7074  071F  00AB               	movwf	setDelayOff_GO@value
  7075  0720  0863               	movf	setRFSW_Control@sw,w
  7076  0721  318B  236C  3187   	fcall	_setDelayOff_GO
  7077  0724                     l5867:	
  7078                           
  7079                           ;RF_Control_B1.c: 336: }
  7080                           ;RF_Control_B1.c: 337: RFSW->Status = 1;
  7081  0724  087A               	movf	_RFSW,w
  7082  0725  0086               	movwf	6
  7083  0726  0187               	clrf	7
  7084  0727  1401               	bsf	1,0
  7085                           
  7086                           ;RF_Control_B1.c: 338: setSw_Status(sw, 1);
  7087  0728  0020               	movlb	0	; select bank0
  7088  0729  01A2               	clrf	setSw_Status@command
  7089  072A  0AA2               	incf	setSw_Status@command,f
  7090  072B  0863               	movf	setRFSW_Control@sw,w
  7091  072C  319F  2745  3187   	fcall	_setSw_Status
  7092                           
  7093                           ;RF_Control_B1.c: 340: setDimmerLights_Trigger(sw, 1);
  7094  072F  0020               	movlb	0	; select bank0
  7095  0730  01A2               	clrf	setDimmerLights_Trigger@command
  7096  0731  0AA2               	incf	setDimmerLights_Trigger@command,f
  7097  0732  0863               	movf	setRFSW_Control@sw,w
  7098  0733  319F  27AF  3187   	fcall	_setDimmerLights_Trigger
  7099                           
  7100                           ;RF_Control_B1.c: 341: setDimmerLights_Switch(sw, 1);
  7101  0736  0020               	movlb	0	; select bank0
  7102  0737  01A2               	clrf	setDimmerLights_Switch@command
  7103  0738  0AA2               	incf	setDimmerLights_Switch@command,f
  7104  0739  0863               	movf	setRFSW_Control@sw,w
  7105  073A  319F  279F  3187   	fcall	_setDimmerLights_Switch
  7106                           
  7107                           ;RF_Control_B1.c: 343: setRF_DimmerLights(sw, RFSW->Status);
  7108  073D  087A               	movf	_RFSW,w
  7109  073E  0086               	movwf	6
  7110  073F  0187               	clrf	7
  7111  0740  3000               	movlw	0
  7112  0741  1801               	btfsc	1,0
  7113  0742  3001               	movlw	1
  7114  0743  0020               	movlb	0	; select bank0
  7115  0744  00DD               	movwf	setRF_DimmerLights@on
  7116  0745  2F82               	goto	L1
  7117  0746                     l5877:	
  7118                           ;RF_Control_B1.c: 344: } else {
  7119                           
  7120                           
  7121                           ;RF_Control_B1.c: 345: if (RF_Data[16] == 0x80) {
  7122  0746  0022               	movlb	2	; select bank2
  7123  0747  0830               	movf	(_RF_Data^(0+256)+16),w
  7124  0748  3A80               	xorlw	128
  7125  0749  1D03               	skipz
  7126  074A  2F5C               	goto	l5881
  7127                           
  7128                           ;RF_Control_B1.c: 346: setDelayOff_GO(sw, 1, RF_Data[17]);
  7129  074B  0020               	movlb	0	; select bank0
  7130  074C  01AA               	clrf	setDelayOff_GO@command
  7131  074D  0AAA               	incf	setDelayOff_GO@command,f
  7132  074E  0022               	movlb	2	; select bank2
  7133  074F  0831               	movf	(_RF_Data^(0+256)+17),w
  7134  0750  0020               	movlb	0	; select bank0
  7135  0751  00E2               	movwf	??_setRFSW_Control
  7136  0752  0862               	movf	??_setRFSW_Control,w
  7137  0753  00AB               	movwf	setDelayOff_GO@value
  7138  0754  0863               	movf	setRFSW_Control@sw,w
  7139  0755  318B  236C  3187   	fcall	_setDelayOff_GO
  7140                           
  7141                           ;RF_Control_B1.c: 347: setRF_DimmerLights(sw, 1);
  7142  0758  0020               	movlb	0	; select bank0
  7143  0759  01DD               	clrf	setRF_DimmerLights@on
  7144  075A  0ADD               	incf	setRF_DimmerLights@on,f
  7145  075B  2F82               	goto	L1
  7146  075C                     l5881:	
  7147                           ;RF_Control_B1.c: 348: } else {
  7148                           
  7149                           
  7150                           ;RF_Control_B1.c: 349: RFSW->Status = 0;
  7151  075C  087A               	movf	_RFSW,w
  7152  075D  0086               	movwf	6
  7153  075E  0187               	clrf	7
  7154  075F  1001               	bcf	1,0
  7155                           
  7156                           ;RF_Control_B1.c: 350: setSw_Status(sw, 0);
  7157  0760  0020               	movlb	0	; select bank0
  7158  0761  01A2               	clrf	setSw_Status@command
  7159  0762  0863               	movf	setRFSW_Control@sw,w
  7160  0763  319F  2745  3187   	fcall	_setSw_Status
  7161                           
  7162                           ;RF_Control_B1.c: 352: setDimmerLights_Trigger(sw, 1);
  7163  0766  0020               	movlb	0	; select bank0
  7164  0767  01A2               	clrf	setDimmerLights_Trigger@command
  7165  0768  0AA2               	incf	setDimmerLights_Trigger@command,f
  7166  0769  0863               	movf	setRFSW_Control@sw,w
  7167  076A  319F  27AF  3187   	fcall	_setDimmerLights_Trigger
  7168                           
  7169                           ;RF_Control_B1.c: 353: setDimmerLights_Switch(sw, RFSW->Status);
  7170  076D  087A               	movf	_RFSW,w
  7171  076E  0086               	movwf	6
  7172  076F  0187               	clrf	7
  7173  0770  3000               	movlw	0
  7174  0771  1801               	btfsc	1,0
  7175  0772  3001               	movlw	1
  7176  0773  0020               	movlb	0	; select bank0
  7177  0774  00A2               	movwf	setDimmerLights_Switch@command
  7178  0775  0863               	movf	setRFSW_Control@sw,w
  7179  0776  319F  279F  3187   	fcall	_setDimmerLights_Switch
  7180                           
  7181                           ;RF_Control_B1.c: 355: setDelayOff_GO(sw, 0, 0);
  7182  0779  0020               	movlb	0	; select bank0
  7183  077A  01AA               	clrf	setDelayOff_GO@command
  7184  077B  01AB               	clrf	setDelayOff_GO@value
  7185  077C  0863               	movf	setRFSW_Control@sw,w
  7186  077D  318B  236C  3187   	fcall	_setDelayOff_GO
  7187                           
  7188                           ;RF_Control_B1.c: 356: setRF_DimmerLights(sw, 0);
  7189  0780  0020               	movlb	0	; select bank0
  7190  0781  01DD               	clrf	setRF_DimmerLights@on
  7191  0782                     L1:	
  7192  0782  0863               	movf	setRFSW_Control@sw,w
  7193  0783  3187  2792  3187   	fcall	_setRF_DimmerLights
  7194                           
  7195                           ;RF_Control_B1.c: 357: }
  7196                           ;RF_Control_B1.c: 358: }
  7197                           ;RF_Control_B1.c: 359: setBuz(1, 100);
  7198  0786  3064               	movlw	100
  7199  0787  0020               	movlb	0	; select bank0
  7200  0788  00A9               	movwf	setBuz@time
  7201  0789  3000               	movlw	0
  7202  078A  00AA               	movwf	setBuz@time+1
  7203  078B  3001               	movlw	1
  7204  078C  3189  2139  3187   	fcall	_setBuz
  7205                           
  7206                           ;RF_Control_B1.c: 360: setTxData();
  7207  078F  3184  24F1         	fcall	_setTxData
  7208  0791  0008               	return
  7209  0792                     __end_of_setRFSW_Control:	
  7210                           
  7211                           	psect	text30
  7212  0B6C                     __ptext30:	
  7213 ;; *************** function _setDelayOff_GO *****************
  7214 ;; Defined at:
  7215 ;;		line 86 in file "../src/DelayOff_B1.c"
  7216 ;; Parameters:    Size  Location     Type
  7217 ;;  sw              1    wreg     unsigned char 
  7218 ;;  command         1   10[BANK0 ] unsigned char 
  7219 ;;  value           1   11[BANK0 ] unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  sw              1   14[BANK0 ] unsigned char 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;		None               void
  7224 ;; Registers used:
  7225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7231 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;Total ram usage:        5 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    7
  7238 ;; This function calls:
  7239 ;;		_DelayOffPointSelect
  7240 ;;		_DelayTimejudge
  7241 ;; This function is called by:
  7242 ;;		_setRFSW_Control
  7243 ;;		_Sw_DimmerOffFunc
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setDelayOff_GO
  7249  0B6C                     _setDelayOff_GO:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7253                           ;setDelayOff_GO@sw stored from wreg
  7254  0B6C  0020               	movlb	0	; select bank0
  7255  0B6D  00AE               	movwf	setDelayOff_GO@sw
  7256                           
  7257                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7258  0B6E  082E               	movf	setDelayOff_GO@sw,w
  7259  0B6F  319E  26A9  318B   	fcall	_DelayOffPointSelect
  7260                           
  7261                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7262  0B72  0878               	movf	_DelayOff,w
  7263  0B73  0086               	movwf	6
  7264  0B74  3001               	movlw	1	; select bank2/3
  7265  0B75  0087               	movwf	7
  7266  0B76  1C01               	btfss	1,0
  7267  0B77  0008               	return
  7268                           
  7269                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7270  0B78  0020               	movlb	0	; select bank0
  7271  0B79  082A               	movf	setDelayOff_GO@command,w
  7272  0B7A  3A01               	xorlw	1
  7273  0B7B  3000               	movlw	0
  7274  0B7C  1903               	skipnz
  7275  0B7D  3001               	movlw	1
  7276  0B7E  00AC               	movwf	??_setDelayOff_GO
  7277  0B7F  0878               	movf	_DelayOff,w
  7278  0B80  0086               	movwf	6
  7279  0B81  3001               	movlw	1	; select bank2/3
  7280  0B82  0087               	movwf	7
  7281  0B83  0DAC               	rlf	??_setDelayOff_GO,f
  7282  0B84  0801               	movf	1,w
  7283  0B85  062C               	xorwf	??_setDelayOff_GO,w
  7284  0B86  39FD               	andlw	-3
  7285  0B87  062C               	xorwf	??_setDelayOff_GO,w
  7286  0B88  0081               	movwf	1
  7287                           
  7288                           ;DelayOff_B1.c: 90: if (command == 1) {
  7289  0B89  082A               	movf	setDelayOff_GO@command,w
  7290  0B8A  3A01               	xorlw	1
  7291  0B8B  1D03               	skipz
  7292  0B8C  2BB7               	goto	l5679
  7293                           
  7294                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7295  0B8D  082B               	movf	setDelayOff_GO@value,w
  7296  0B8E  3193  2347  318B   	fcall	_DelayTimejudge
  7297  0B91  0020               	movlb	0	; select bank0
  7298  0B92  00AC               	movwf	??_setDelayOff_GO
  7299  0B93  0A78               	incf	_DelayOff,w
  7300  0B94  0086               	movwf	6
  7301  0B95  3001               	movlw	1	; select bank2/3
  7302  0B96  0087               	movwf	7
  7303  0B97  082C               	movf	??_setDelayOff_GO,w
  7304  0B98  0081               	movwf	1
  7305                           
  7306                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7307  0B99  300F               	movlw	15
  7308  0B9A  052B               	andwf	setDelayOff_GO@value,w
  7309  0B9B  00AC               	movwf	??_setDelayOff_GO
  7310  0B9C  082C               	movf	??_setDelayOff_GO,w
  7311  0B9D  3A05               	xorlw	5
  7312  0B9E  1903               	skipnz
  7313  0B9F  2BA4               	goto	l5673
  7314  0BA0  082B               	movf	setDelayOff_GO@value,w
  7315  0BA1  390F               	andlw	15
  7316  0BA2  1D03               	btfss	3,2
  7317  0BA3  2BAA               	goto	l5677
  7318  0BA4                     l5673:	
  7319  0BA4  3026               	movlw	38
  7320  0BA5  022B               	subwf	setDelayOff_GO@value,w
  7321  0BA6  1803               	skipnc
  7322  0BA7  2BAA               	goto	l5677
  7323                           
  7324                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7325  0BA8  082B               	movf	setDelayOff_GO@value,w
  7326  0BA9  2BAB               	goto	L2
  7327  0BAA                     l5677:	
  7328                           ;DelayOff_B1.c: 94: } else {
  7329                           
  7330                           
  7331                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7332  0BAA  3005               	movlw	5
  7333  0BAB                     L2:	
  7334  0BAB  00AC               	movwf	??_setDelayOff_GO
  7335  0BAC  082E               	movf	setDelayOff_GO@sw,w
  7336  0BAD  3E1A               	addlw	26
  7337  0BAE  076F               	addwf	_product,w
  7338  0BAF  00AD               	movwf	??_setDelayOff_GO+1
  7339  0BB0  082D               	movf	??_setDelayOff_GO+1,w
  7340  0BB1  0086               	movwf	6
  7341  0BB2  3001               	movlw	1	; select bank2/3
  7342  0BB3  0087               	movwf	7
  7343  0BB4  082C               	movf	??_setDelayOff_GO,w
  7344  0BB5  0081               	movwf	1
  7345                           
  7346                           ;DelayOff_B1.c: 96: }
  7347                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7348  0BB6  2BC3               	goto	l5683
  7349  0BB7                     l5679:	
  7350  0BB7  08AA               	movf	setDelayOff_GO@command,f
  7351  0BB8  1D03               	skipz
  7352  0BB9  2BC3               	goto	l5683
  7353                           
  7354                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7355  0BBA  082E               	movf	setDelayOff_GO@sw,w
  7356  0BBB  3E1A               	addlw	26
  7357  0BBC  076F               	addwf	_product,w
  7358  0BBD  00AC               	movwf	??_setDelayOff_GO
  7359  0BBE  082C               	movf	??_setDelayOff_GO,w
  7360  0BBF  0086               	movwf	6
  7361  0BC0  3001               	movlw	1	; select bank2/3
  7362  0BC1  0087               	movwf	7
  7363  0BC2  0181               	clrf	1
  7364  0BC3                     l5683:	
  7365                           
  7366                           ;DelayOff_B1.c: 99: }
  7367                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7368  0BC3  0878               	movf	_DelayOff,w
  7369  0BC4  3E02               	addlw	2
  7370  0BC5  0086               	movwf	6
  7371  0BC6  3001               	movlw	1	; select bank2/3
  7372  0BC7  0087               	movwf	7
  7373  0BC8  3000               	movlw	0
  7374  0BC9  3FC0               	movwi [0]fsr1
  7375  0BCA  3FC1               	movwi [1]fsr1
  7376                           
  7377                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7378  0BCB  0878               	movf	_DelayOff,w
  7379  0BCC  3E04               	addlw	4
  7380  0BCD  0086               	movwf	6
  7381  0BCE  3001               	movlw	1	; select bank2/3
  7382  0BCF  0087               	movwf	7
  7383  0BD0  0181               	clrf	1
  7384  0BD1  0008               	return
  7385  0BD2                     __end_of_setDelayOff_GO:	
  7386                           
  7387                           	psect	text31
  7388  1347                     __ptext31:	
  7389 ;; *************** function _DelayTimejudge *****************
  7390 ;; Defined at:
  7391 ;;		line 106 in file "../src/DelayOff_B1.c"
  7392 ;; Parameters:    Size  Location     Type
  7393 ;;  value           1    wreg     unsigned char 
  7394 ;; Auto vars:     Size  Location     Type
  7395 ;;  value           1    9[BANK0 ] unsigned char 
  7396 ;;  k               1    8[BANK0 ] unsigned char 
  7397 ;;  j               1    7[BANK0 ] unsigned char 
  7398 ;;  i               1    6[BANK0 ] unsigned char 
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      unsigned char 
  7401 ;; Registers used:
  7402 ;;		wreg, status,2, status,0, pclath, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7409 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7410 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7411 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;Total ram usage:        6 bytes
  7413 ;; Hardware stack levels used:    1
  7414 ;; Hardware stack levels required when called:    6
  7415 ;; This function calls:
  7416 ;;		___bmul
  7417 ;; This function is called by:
  7418 ;;		_setDelayOff_GO
  7419 ;; This function uses a non-reentrant model
  7420 ;;
  7421                           
  7422                           
  7423                           ;psect for function _DelayTimejudge
  7424  1347                     _DelayTimejudge:	
  7425                           
  7426                           ;incstack = 0
  7427                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7428                           ;DelayTimejudge@value stored from wreg
  7429  1347  0020               	movlb	0	; select bank0
  7430  1348  00A9               	movwf	DelayTimejudge@value
  7431                           
  7432                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7433  1349  3005               	movlw	5
  7434  134A  00A4               	movwf	??_DelayTimejudge
  7435  134B  0824               	movf	??_DelayTimejudge,w
  7436  134C  00A6               	movwf	DelayTimejudge@i
  7437  134D  01A7               	clrf	DelayTimejudge@j
  7438  134E  01A8               	clrf	DelayTimejudge@k
  7439                           
  7440                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7441  134F  3031               	movlw	49
  7442  1350  0229               	subwf	DelayTimejudge@value,w
  7443  1351  1803               	skipnc
  7444  1352  2B6F               	goto	l5471
  7445                           
  7446                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7447  1353  0829               	movf	DelayTimejudge@value,w
  7448  1354  390F               	andlw	15
  7449  1355  00A4               	movwf	??_DelayTimejudge
  7450  1356  0824               	movf	??_DelayTimejudge,w
  7451  1357  00A7               	movwf	DelayTimejudge@j
  7452                           
  7453                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7454  1358  0829               	movf	DelayTimejudge@value,w
  7455  1359  00A4               	movwf	??_DelayTimejudge
  7456  135A  3004               	movlw	4
  7457  135B                     u4165:	
  7458  135B  36A4               	lsrf	??_DelayTimejudge,f
  7459  135C  0B89               	decfsz	9,f
  7460  135D  2B5B               	goto	u4165
  7461  135E  0824               	movf	??_DelayTimejudge,w
  7462  135F  390F               	andlw	15
  7463  1360  00A5               	movwf	??_DelayTimejudge+1
  7464  1361  0825               	movf	??_DelayTimejudge+1,w
  7465  1362  00A8               	movwf	DelayTimejudge@k
  7466                           
  7467                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7468  1363  300A               	movlw	10
  7469  1364  00A4               	movwf	??_DelayTimejudge
  7470  1365  0824               	movf	??_DelayTimejudge,w
  7471  1366  00A0               	movwf	___bmul@multiplicand
  7472  1367  0828               	movf	DelayTimejudge@k,w
  7473  1368  3190  2086         	fcall	___bmul
  7474  136A  0020               	movlb	0	; select bank0
  7475  136B  0727               	addwf	DelayTimejudge@j,w
  7476  136C  00A5               	movwf	??_DelayTimejudge+1
  7477  136D  0825               	movf	??_DelayTimejudge+1,w
  7478  136E  00A6               	movwf	DelayTimejudge@i
  7479  136F                     l5471:	
  7480                           
  7481                           ;DelayOff_B1.c: 112: }
  7482                           ;DelayOff_B1.c: 133: return i;
  7483  136F  0826               	movf	DelayTimejudge@i,w
  7484  1370  0008               	return
  7485  1371                     __end_of_DelayTimejudge:	
  7486                           
  7487                           	psect	text32
  7488  1086                     __ptext32:	
  7489 ;; *************** function ___bmul *****************
  7490 ;; Defined at:
  7491 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;  multiplier      1    wreg     unsigned char 
  7494 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7495 ;; Auto vars:     Size  Location     Type
  7496 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7497 ;;  product         1    2[BANK0 ] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      unsigned char 
  7500 ;; Registers used:
  7501 ;;		wreg, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7507 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7510 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;Total ram usage:        4 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    5
  7514 ;; This function calls:
  7515 ;;		Nothing
  7516 ;; This function is called by:
  7517 ;;		_DelayTimejudge
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function ___bmul
  7523  1086                     ___bmul:	
  7524                           
  7525                           ;incstack = 0
  7526                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7527                           ;___bmul@multiplier stored from wreg
  7528  1086  0020               	movlb	0	; select bank0
  7529  1087  00A3               	movwf	___bmul@multiplier
  7530  1088  01A2               	clrf	___bmul@product
  7531  1089                     l5441:	
  7532  1089  1C23               	btfss	___bmul@multiplier,0
  7533  108A  288F               	goto	l5445
  7534  108B  0820               	movf	___bmul@multiplicand,w
  7535  108C  00A1               	movwf	??___bmul
  7536  108D  0821               	movf	??___bmul,w
  7537  108E  07A2               	addwf	___bmul@product,f
  7538  108F                     l5445:	
  7539  108F  1003               	clrc
  7540  1090  0DA0               	rlf	___bmul@multiplicand,f
  7541  1091  1003               	clrc
  7542  1092  0CA3               	rrf	___bmul@multiplier,f
  7543  1093  08A3               	movf	___bmul@multiplier,f
  7544  1094  1D03               	skipz
  7545  1095  2889               	goto	l5441
  7546  1096  0822               	movf	___bmul@product,w
  7547  1097  0008               	return
  7548  1098                     __end_of___bmul:	
  7549                           
  7550                           	psect	text33
  7551  14C6                     __ptext33:	
  7552 ;; *************** function _setRFSW_AdjControl *****************
  7553 ;; Defined at:
  7554 ;;		line 364 in file "../src/RF_Control_B1.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  sw              1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  sw              1   70[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;		None               void
  7561 ;; Registers used:
  7562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;Total ram usage:        3 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:   10
  7575 ;; This function calls:
  7576 ;;		_RfSWPointSelect
  7577 ;;		_setRF_DimmerValue
  7578 ;;		_setTxData
  7579 ;; This function is called by:
  7580 ;;		_setControl_Lights_Table
  7581 ;; This function uses a non-reentrant model
  7582 ;;
  7583                           
  7584                           
  7585                           ;psect for function _setRFSW_AdjControl
  7586  14C6                     _setRFSW_AdjControl:	
  7587                           
  7588                           ;incstack = 0
  7589                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7590                           ;setRFSW_AdjControl@sw stored from wreg
  7591  14C6  0020               	movlb	0	; select bank0
  7592  14C7  00E6               	movwf	setRFSW_AdjControl@sw
  7593                           
  7594                           ;RF_Control_B1.c: 365: RfSWPointSelect(sw);
  7595  14C8  0866               	movf	setRFSW_AdjControl@sw,w
  7596  14C9  319E  26CA  3194   	fcall	_RfSWPointSelect
  7597                           
  7598                           ;RF_Control_B1.c: 366: if (RFSW->Status == 1) {
  7599  14CC  087A               	movf	_RFSW,w
  7600  14CD  0086               	movwf	6
  7601  14CE  0187               	clrf	7
  7602  14CF  1C01               	btfss	1,0
  7603  14D0  2CD9               	goto	l5905
  7604                           
  7605                           ;RF_Control_B1.c: 367: Memory.Modify=1;
  7606  14D1  0022               	movlb	2	; select bank2
  7607  14D2  1461               	bsf	(_Memory^(0+256)+36),0
  7608                           
  7609                           ;RF_Control_B1.c: 368: setRF_DimmerValue(sw);
  7610  14D3  0020               	movlb	0	; select bank0
  7611  14D4  0866               	movf	setRFSW_AdjControl@sw,w
  7612  14D5  3194  245B  3194   	fcall	_setRF_DimmerValue
  7613                           
  7614                           ;RF_Control_B1.c: 369: } else {
  7615  14D8  2CEB               	goto	l1933
  7616  14D9                     l5905:	
  7617                           
  7618                           ;RF_Control_B1.c: 370: product->Data[9]=product->Data[20 + sw];
  7619  14D9  0020               	movlb	0	; select bank0
  7620  14DA  0866               	movf	setRFSW_AdjControl@sw,w
  7621  14DB  3E14               	addlw	20
  7622  14DC  076F               	addwf	_product,w
  7623  14DD  00E4               	movwf	??_setRFSW_AdjControl
  7624  14DE  0864               	movf	??_setRFSW_AdjControl,w
  7625  14DF  0086               	movwf	6
  7626  14E0  3001               	movlw	1	; select bank2/3
  7627  14E1  0087               	movwf	7
  7628  14E2  0801               	movf	1,w
  7629  14E3  00E5               	movwf	??_setRFSW_AdjControl+1
  7630  14E4  086F               	movf	_product,w
  7631  14E5  3E09               	addlw	9
  7632  14E6  0086               	movwf	6
  7633  14E7  3001               	movlw	1	; select bank2/3
  7634  14E8  0087               	movwf	7
  7635  14E9  0865               	movf	??_setRFSW_AdjControl+1,w
  7636  14EA  0081               	movwf	1
  7637  14EB                     l1933:	
  7638                           
  7639                           ;RF_Control_B1.c: 371: }
  7640                           ;RF_Control_B1.c: 372: product->Data[17]=product->Data[26 + sw];
  7641  14EB  0020               	movlb	0	; select bank0
  7642  14EC  0866               	movf	setRFSW_AdjControl@sw,w
  7643  14ED  3E1A               	addlw	26
  7644  14EE  076F               	addwf	_product,w
  7645  14EF  00E4               	movwf	??_setRFSW_AdjControl
  7646  14F0  0864               	movf	??_setRFSW_AdjControl,w
  7647  14F1  0086               	movwf	6
  7648  14F2  3001               	movlw	1	; select bank2/3
  7649  14F3  0087               	movwf	7
  7650  14F4  0801               	movf	1,w
  7651  14F5  00E5               	movwf	??_setRFSW_AdjControl+1
  7652  14F6  086F               	movf	_product,w
  7653  14F7  3E11               	addlw	17
  7654  14F8  0086               	movwf	6
  7655  14F9  3001               	movlw	1	; select bank2/3
  7656  14FA  0087               	movwf	7
  7657  14FB  0865               	movf	??_setRFSW_AdjControl+1,w
  7658  14FC  0081               	movwf	1
  7659                           
  7660                           ;RF_Control_B1.c: 373: setTxData();
  7661  14FD  3184  24F1         	fcall	_setTxData
  7662  14FF  0008               	return
  7663  1500                     __end_of_setRFSW_AdjControl:	
  7664                           
  7665                           	psect	text34
  7666  145B                     __ptext34:	
  7667 ;; *************** function _setRF_DimmerValue *****************
  7668 ;; Defined at:
  7669 ;;		line 384 in file "../src/RF_Control_B1.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  lights          1    wreg     unsigned char 
  7672 ;; Auto vars:     Size  Location     Type
  7673 ;;  lights          1   67[BANK0 ] unsigned char 
  7674 ;; Return value:  Size  Location     Type
  7675 ;;		None               void
  7676 ;; Registers used:
  7677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7678 ;; Tracked objects:
  7679 ;;		On entry : 0/0
  7680 ;;		On exit  : 0/0
  7681 ;;		Unchanged: 0/0
  7682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7685 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7686 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;Total ram usage:        3 bytes
  7688 ;; Hardware stack levels used:    1
  7689 ;; Hardware stack levels required when called:    9
  7690 ;; This function calls:
  7691 ;;		_setDimmerLights_AdjRF
  7692 ;; This function is called by:
  7693 ;;		_setRFSW_AdjControl
  7694 ;; This function uses a non-reentrant model
  7695 ;;
  7696                           
  7697                           
  7698                           ;psect for function _setRF_DimmerValue
  7699  145B                     _setRF_DimmerValue:	
  7700                           
  7701                           ;incstack = 0
  7702                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7703                           ;setRF_DimmerValue@lights stored from wreg
  7704  145B  0020               	movlb	0	; select bank0
  7705  145C  00E3               	movwf	setRF_DimmerValue@lights
  7706                           
  7707                           ;RF_Control_B1.c: 385: if (RF_Data[9] > 0x64) {
  7708  145D  3065               	movlw	101
  7709  145E  0022               	movlb	2	; select bank2
  7710  145F  0229               	subwf	(_RF_Data^(0+256)+9),w
  7711  1460  1C03               	skipc
  7712  1461  2C68               	goto	l5747
  7713                           
  7714                           ;RF_Control_B1.c: 386: RF_Data[9] = 0x64;
  7715  1462  3064               	movlw	100
  7716  1463  0020               	movlb	0	; select bank0
  7717  1464  00E1               	movwf	??_setRF_DimmerValue
  7718  1465  0861               	movf	??_setRF_DimmerValue,w
  7719  1466  0022               	movlb	2	; select bank2
  7720  1467  00A9               	movwf	(_RF_Data^(0+256)+9)
  7721  1468                     l5747:	
  7722                           
  7723                           ;RF_Control_B1.c: 387: }
  7724                           ;RF_Control_B1.c: 388: product->Data[9]=RF_Data[9];
  7725  1468  0829               	movf	(_RF_Data^(0+256)+9),w
  7726  1469  0020               	movlb	0	; select bank0
  7727  146A  00E1               	movwf	??_setRF_DimmerValue
  7728  146B  086F               	movf	_product,w
  7729  146C  3E09               	addlw	9
  7730  146D  0086               	movwf	6
  7731  146E  3001               	movlw	1	; select bank2/3
  7732  146F  0087               	movwf	7
  7733  1470  0861               	movf	??_setRF_DimmerValue,w
  7734  1471  0081               	movwf	1
  7735                           
  7736                           ;RF_Control_B1.c: 389: product->Data[11]=lights;
  7737  1472  0863               	movf	setRF_DimmerValue@lights,w
  7738  1473  00E1               	movwf	??_setRF_DimmerValue
  7739  1474  086F               	movf	_product,w
  7740  1475  3E0B               	addlw	11
  7741  1476  0086               	movwf	6
  7742  1477  3001               	movlw	1	; select bank2/3
  7743  1478  0087               	movwf	7
  7744  1479  0861               	movf	??_setRF_DimmerValue,w
  7745  147A  0081               	movwf	1
  7746                           
  7747                           ;RF_Control_B1.c: 390: product->Data[(20 + lights)]=product->Data[9];
  7748  147B  086F               	movf	_product,w
  7749  147C  3E09               	addlw	9
  7750  147D  0086               	movwf	6
  7751  147E  3001               	movlw	1	; select bank2/3
  7752  147F  0087               	movwf	7
  7753  1480  0801               	movf	1,w
  7754  1481  00E1               	movwf	??_setRF_DimmerValue
  7755  1482  0863               	movf	setRF_DimmerValue@lights,w
  7756  1483  3E14               	addlw	20
  7757  1484  076F               	addwf	_product,w
  7758  1485  00E2               	movwf	??_setRF_DimmerValue+1
  7759  1486  0862               	movf	??_setRF_DimmerValue+1,w
  7760  1487  0086               	movwf	6
  7761  1488  3001               	movlw	1	; select bank2/3
  7762  1489  0087               	movwf	7
  7763  148A  0861               	movf	??_setRF_DimmerValue,w
  7764  148B  0081               	movwf	1
  7765                           
  7766                           ;RF_Control_B1.c: 391: setDimmerLights_AdjRF(lights);
  7767  148C  0863               	movf	setRF_DimmerValue@lights,w
  7768  148D  3192  22AD         	fcall	_setDimmerLights_AdjRF
  7769  148F  0008               	return
  7770  1490                     __end_of_setRF_DimmerValue:	
  7771                           
  7772                           	psect	text35
  7773  12AD                     __ptext35:	
  7774 ;; *************** function _setDimmerLights_AdjRF *****************
  7775 ;; Defined at:
  7776 ;;		line 679 in file "../src/Dimmer_B1.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  lights          1    wreg     unsigned char 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  lights          1   64[BANK0 ] unsigned char 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;		None               void
  7783 ;; Registers used:
  7784 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        2 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    8
  7797 ;; This function calls:
  7798 ;;		_DimmerLightsPointSelect
  7799 ;;		_getPercentValue
  7800 ;; This function is called by:
  7801 ;;		_setRF_DimmerValue
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           
  7806                           ;psect for function _setDimmerLights_AdjRF
  7807  12AD                     _setDimmerLights_AdjRF:	
  7808                           
  7809                           ;incstack = 0
  7810                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7811                           ;setDimmerLights_AdjRF@lights stored from wreg
  7812  12AD  0020               	movlb	0	; select bank0
  7813  12AE  00E0               	movwf	setDimmerLights_AdjRF@lights
  7814                           
  7815                           ;Dimmer_B1.c: 681: DimmerLightsPointSelect(lights);
  7816  12AF  0860               	movf	setDimmerLights_AdjRF@lights,w
  7817  12B0  319E  26BF  3192   	fcall	_DimmerLightsPointSelect
  7818                           
  7819                           ;Dimmer_B1.c: 682: DimmerLights->AdjRF = 1;
  7820  12B3  0020               	movlb	0	; select bank0
  7821  12B4  086D               	movf	_DimmerLights,w
  7822  12B5  0086               	movwf	6
  7823  12B6  3001               	movlw	1	; select bank2/3
  7824  12B7  0087               	movwf	7
  7825  12B8  1501               	bsf	1,2
  7826                           
  7827                           ;Dimmer_B1.c: 683: DimmerLights->Signal = 1;
  7828  12B9  086D               	movf	_DimmerLights,w
  7829  12BA  0086               	movwf	6
  7830  12BB  3001               	movlw	1	; select bank2/3
  7831  12BC  0087               	movwf	7
  7832  12BD  1481               	bsf	1,1
  7833                           
  7834                           ;Dimmer_B1.c: 684: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7835  12BE  086F               	movf	_product,w
  7836  12BF  3E09               	addlw	9
  7837  12C0  0086               	movwf	6
  7838  12C1  3001               	movlw	1	; select bank2/3
  7839  12C2  0087               	movwf	7
  7840  12C3  0801               	movf	1,w
  7841  12C4  3189  21ED         	fcall	_getPercentValue
  7842  12C6  0020               	movlb	0	; select bank0
  7843  12C7  00DF               	movwf	??_setDimmerLights_AdjRF
  7844  12C8  086D               	movf	_DimmerLights,w
  7845  12C9  3E05               	addlw	5
  7846  12CA  0086               	movwf	6
  7847  12CB  3001               	movlw	1	; select bank2/3
  7848  12CC  0087               	movwf	7
  7849  12CD  085F               	movf	??_setDimmerLights_AdjRF,w
  7850  12CE  0081               	movwf	1
  7851  12CF  0008               	return
  7852  12D0                     __end_of_setDimmerLights_AdjRF:	
  7853                           
  7854                           	psect	text36
  7855  09ED                     __ptext36:	
  7856 ;; *************** function _getPercentValue *****************
  7857 ;; Defined at:
  7858 ;;		line 752 in file "../src/Dimmer_B1.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  value           1    wreg     unsigned char 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  value           1   59[BANK0 ] unsigned char 
  7863 ;;  i               3   60[BANK0 ] float 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  1    wreg      unsigned char 
  7866 ;; Registers used:
  7867 ;;		wreg, status,2, status,0, pclath, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;Total ram usage:        6 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    7
  7880 ;; This function calls:
  7881 ;;		___awtoft
  7882 ;;		___ftadd
  7883 ;;		___ftdiv
  7884 ;;		___ftmul
  7885 ;;		___fttol
  7886 ;; This function is called by:
  7887 ;;		_setDimmerLights_AdjRF
  7888 ;; This function uses a non-reentrant model
  7889 ;;
  7890                           
  7891                           
  7892                           ;psect for function _getPercentValue
  7893  09ED                     _getPercentValue:	
  7894                           
  7895                           ;incstack = 0
  7896                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7897                           ;getPercentValue@value stored from wreg
  7898  09ED  0020               	movlb	0	; select bank0
  7899  09EE  00DB               	movwf	getPercentValue@value
  7900                           
  7901                           ;Dimmer_B1.c: 754: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7902  09EF  3000               	movlw	0
  7903  09F0  00DC               	movwf	getPercentValue@i
  7904  09F1  30E0               	movlw	224
  7905  09F2  00DD               	movwf	getPercentValue@i+1
  7906  09F3  3041               	movlw	65
  7907  09F4  00DE               	movwf	getPercentValue@i+2
  7908                           
  7909                           ;Dimmer_B1.c: 755: i /= 100;
  7910  09F5  3000               	movlw	0
  7911  09F6  00AE               	movwf	___ftdiv@f2
  7912  09F7  30C8               	movlw	200
  7913  09F8  00AF               	movwf	___ftdiv@f2+1
  7914  09F9  3042               	movlw	66
  7915  09FA  00B0               	movwf	___ftdiv@f2+2
  7916  09FB  085C               	movf	getPercentValue@i,w
  7917  09FC  00B1               	movwf	___ftdiv@f1
  7918  09FD  085D               	movf	getPercentValue@i+1,w
  7919  09FE  00B2               	movwf	___ftdiv@f1+1
  7920  09FF  085E               	movf	getPercentValue@i+2,w
  7921  0A00  00B3               	movwf	___ftdiv@f1+2
  7922  0A01  3186  265E  3189   	fcall	___ftdiv
  7923  0A04  0020               	movlb	0	; select bank0
  7924  0A05  082E               	movf	?___ftdiv,w
  7925  0A06  00DC               	movwf	getPercentValue@i
  7926  0A07  082F               	movf	?___ftdiv+1,w
  7927  0A08  00DD               	movwf	getPercentValue@i+1
  7928  0A09  0830               	movf	?___ftdiv+2,w
  7929  0A0A  00DE               	movwf	getPercentValue@i+2
  7930                           
  7931                           ;Dimmer_B1.c: 756: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7932  0A0B  085B               	movf	getPercentValue@value,w
  7933  0A0C  00D9               	movwf	??_getPercentValue
  7934  0A0D  01DA               	clrf	??_getPercentValue+1
  7935  0A0E  09D9               	comf	??_getPercentValue,f
  7936  0A0F  09DA               	comf	??_getPercentValue+1,f
  7937  0A10  0AD9               	incf	??_getPercentValue,f
  7938  0A11  1903               	skipnz
  7939  0A12  0ADA               	incf	??_getPercentValue+1,f
  7940  0A13  0859               	movf	??_getPercentValue,w
  7941  0A14  3E64               	addlw	100
  7942  0A15  00A8               	movwf	___awtoft@c
  7943  0A16  3000               	movlw	0
  7944  0A17  3D5A               	addwfc	??_getPercentValue+1,w
  7945  0A18  00A9               	movwf	___awtoft@c+1
  7946  0A19  3192  2224  3189   	fcall	___awtoft
  7947  0A1C  0020               	movlb	0	; select bank0
  7948  0A1D  0828               	movf	?___awtoft,w
  7949  0A1E  00B1               	movwf	___ftmul@f2
  7950  0A1F  0829               	movf	?___awtoft+1,w
  7951  0A20  00B2               	movwf	___ftmul@f2+1
  7952  0A21  082A               	movf	?___awtoft+2,w
  7953  0A22  00B3               	movwf	___ftmul@f2+2
  7954  0A23  085C               	movf	getPercentValue@i,w
  7955  0A24  00AE               	movwf	___ftmul@f1
  7956  0A25  085D               	movf	getPercentValue@i+1,w
  7957  0A26  00AF               	movwf	___ftmul@f1+1
  7958  0A27  085E               	movf	getPercentValue@i+2,w
  7959  0A28  00B0               	movwf	___ftmul@f1+2
  7960  0A29  3185  25AA  3189   	fcall	___ftmul
  7961  0A2C  0020               	movlb	0	; select bank0
  7962  0A2D  082E               	movf	?___ftmul,w
  7963  0A2E  00C1               	movwf	___ftadd@f2
  7964  0A2F  082F               	movf	?___ftmul+1,w
  7965  0A30  00C2               	movwf	___ftadd@f2+1
  7966  0A31  0830               	movf	?___ftmul+2,w
  7967  0A32  00C3               	movwf	___ftadd@f2+2
  7968  0A33  3000               	movlw	0
  7969  0A34  00BE               	movwf	___ftadd@f1
  7970  0A35  3000               	movlw	0
  7971  0A36  00BF               	movwf	___ftadd@f1+1
  7972  0A37  3042               	movlw	66
  7973  0A38  00C0               	movwf	___ftadd@f1+2
  7974  0A39  3183  2334  3189   	fcall	___ftadd
  7975  0A3C  0020               	movlb	0	; select bank0
  7976  0A3D  083E               	movf	?___ftadd,w
  7977  0A3E  00CB               	movwf	___fttol@f1
  7978  0A3F  083F               	movf	?___ftadd+1,w
  7979  0A40  00CC               	movwf	___fttol@f1+1
  7980  0A41  0840               	movf	?___ftadd+2,w
  7981  0A42  00CD               	movwf	___fttol@f1+2
  7982  0A43  318F  2779         	fcall	___fttol
  7983  0A45  0020               	movlb	0	; select bank0
  7984  0A46  084B               	movf	?___fttol,w
  7985  0A47  0008               	return
  7986  0A48                     __end_of_getPercentValue:	
  7987                           
  7988                           	psect	text37
  7989  05AA                     __ptext37:	
  7990 ;; *************** function ___ftmul *****************
  7991 ;; Defined at:
  7992 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  f1              3   14[BANK0 ] float 
  7995 ;;  f2              3   17[BANK0 ] float 
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  7998 ;;  sign            1   29[BANK0 ] unsigned char 
  7999 ;;  cntr            1   28[BANK0 ] unsigned char 
  8000 ;;  exp             1   24[BANK0 ] unsigned char 
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  3   14[BANK0 ] float 
  8003 ;; Registers used:
  8004 ;;		wreg, status,2, status,0, pclath, cstack
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8010 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;Total ram usage:       16 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; Hardware stack levels required when called:    6
  8017 ;; This function calls:
  8018 ;;		___ftpack
  8019 ;; This function is called by:
  8020 ;;		_getPercentValue
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function ___ftmul
  8026  05AA                     ___ftmul:	
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8030  05AA  0020               	movlb	0	; select bank0
  8031  05AB  082E               	movf	___ftmul@f1,w
  8032  05AC  00B4               	movwf	??___ftmul
  8033  05AD  082F               	movf	___ftmul@f1+1,w
  8034  05AE  00B5               	movwf	??___ftmul+1
  8035  05AF  0830               	movf	___ftmul@f1+2,w
  8036  05B0  00B6               	movwf	??___ftmul+2
  8037  05B1  1003               	clrc
  8038  05B2  0D35               	rlf	??___ftmul+1,w
  8039  05B3  0D36               	rlf	??___ftmul+2,w
  8040  05B4  00B7               	movwf	??___ftmul+3
  8041  05B5  0837               	movf	??___ftmul+3,w
  8042  05B6  00B8               	movwf	___ftmul@exp
  8043  05B7  08B8               	movf	___ftmul@exp,f
  8044  05B8  1D03               	skipz
  8045  05B9  2DC1               	goto	l5339
  8046  05BA  3000               	movlw	0
  8047  05BB  00AE               	movwf	?___ftmul
  8048  05BC  3000               	movlw	0
  8049  05BD  00AF               	movwf	?___ftmul+1
  8050  05BE  3000               	movlw	0
  8051  05BF  00B0               	movwf	?___ftmul+2
  8052  05C0  0008               	return
  8053  05C1                     l5339:	
  8054  05C1  0831               	movf	___ftmul@f2,w
  8055  05C2  00B4               	movwf	??___ftmul
  8056  05C3  0832               	movf	___ftmul@f2+1,w
  8057  05C4  00B5               	movwf	??___ftmul+1
  8058  05C5  0833               	movf	___ftmul@f2+2,w
  8059  05C6  00B6               	movwf	??___ftmul+2
  8060  05C7  1003               	clrc
  8061  05C8  0D35               	rlf	??___ftmul+1,w
  8062  05C9  0D36               	rlf	??___ftmul+2,w
  8063  05CA  00B7               	movwf	??___ftmul+3
  8064  05CB  0837               	movf	??___ftmul+3,w
  8065  05CC  00BD               	movwf	___ftmul@sign
  8066  05CD  08BD               	movf	___ftmul@sign,f
  8067  05CE  1D03               	skipz
  8068  05CF  2DD7               	goto	l5345
  8069  05D0  3000               	movlw	0
  8070  05D1  00AE               	movwf	?___ftmul
  8071  05D2  3000               	movlw	0
  8072  05D3  00AF               	movwf	?___ftmul+1
  8073  05D4  3000               	movlw	0
  8074  05D5  00B0               	movwf	?___ftmul+2
  8075  05D6  0008               	return
  8076  05D7                     l5345:	
  8077  05D7  083D               	movf	___ftmul@sign,w
  8078  05D8  3E7B               	addlw	123
  8079  05D9  00B4               	movwf	??___ftmul
  8080  05DA  0834               	movf	??___ftmul,w
  8081  05DB  07B8               	addwf	___ftmul@exp,f
  8082  05DC  082E               	movf	___ftmul@f1,w
  8083  05DD  00B4               	movwf	??___ftmul
  8084  05DE  082F               	movf	___ftmul@f1+1,w
  8085  05DF  00B5               	movwf	??___ftmul+1
  8086  05E0  0830               	movf	___ftmul@f1+2,w
  8087  05E1  00B6               	movwf	??___ftmul+2
  8088  05E2  3010               	movlw	16
  8089  05E3                     u3915:	
  8090  05E3  36B6               	lsrf	??___ftmul+2,f
  8091  05E4  0CB5               	rrf	??___ftmul+1,f
  8092  05E5  0CB4               	rrf	??___ftmul,f
  8093  05E6  0B89               	decfsz	9,f
  8094  05E7  2DE3               	goto	u3915
  8095  05E8  0834               	movf	??___ftmul,w
  8096  05E9  00B7               	movwf	??___ftmul+3
  8097  05EA  0837               	movf	??___ftmul+3,w
  8098  05EB  00BD               	movwf	___ftmul@sign
  8099  05EC  0831               	movf	___ftmul@f2,w
  8100  05ED  00B4               	movwf	??___ftmul
  8101  05EE  0832               	movf	___ftmul@f2+1,w
  8102  05EF  00B5               	movwf	??___ftmul+1
  8103  05F0  0833               	movf	___ftmul@f2+2,w
  8104  05F1  00B6               	movwf	??___ftmul+2
  8105  05F2  3010               	movlw	16
  8106  05F3                     u3925:	
  8107  05F3  36B6               	lsrf	??___ftmul+2,f
  8108  05F4  0CB5               	rrf	??___ftmul+1,f
  8109  05F5  0CB4               	rrf	??___ftmul,f
  8110  05F6  0B89               	decfsz	9,f
  8111  05F7  2DF3               	goto	u3925
  8112  05F8  0834               	movf	??___ftmul,w
  8113  05F9  00B7               	movwf	??___ftmul+3
  8114  05FA  0837               	movf	??___ftmul+3,w
  8115  05FB  06BD               	xorwf	___ftmul@sign,f
  8116  05FC  3080               	movlw	128
  8117  05FD  00B4               	movwf	??___ftmul
  8118  05FE  0834               	movf	??___ftmul,w
  8119  05FF  05BD               	andwf	___ftmul@sign,f
  8120  0600  17AF               	bsf	___ftmul@f1+1,7
  8121  0601  17B2               	bsf	___ftmul@f2+1,7
  8122  0602  30FF               	movlw	255
  8123  0603  05B1               	andwf	___ftmul@f2,f
  8124  0604  30FF               	movlw	255
  8125  0605  05B2               	andwf	___ftmul@f2+1,f
  8126  0606  3000               	movlw	0
  8127  0607  05B3               	andwf	___ftmul@f2+2,f
  8128  0608  3000               	movlw	0
  8129  0609  00B9               	movwf	___ftmul@f3_as_product
  8130  060A  3000               	movlw	0
  8131  060B  00BA               	movwf	___ftmul@f3_as_product+1
  8132  060C  3000               	movlw	0
  8133  060D  00BB               	movwf	___ftmul@f3_as_product+2
  8134  060E  3007               	movlw	7
  8135  060F  00B4               	movwf	??___ftmul
  8136  0610  0834               	movf	??___ftmul,w
  8137  0611  00BC               	movwf	___ftmul@cntr
  8138  0612                     l5357:	
  8139  0612  1C2E               	btfss	___ftmul@f1,0
  8140  0613  2E1A               	goto	l5361
  8141  0614  0831               	movf	___ftmul@f2,w
  8142  0615  07B9               	addwf	___ftmul@f3_as_product,f
  8143  0616  0832               	movf	___ftmul@f2+1,w
  8144  0617  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8145  0618  0833               	movf	___ftmul@f2+2,w
  8146  0619  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8147  061A                     l5361:	
  8148  061A  3001               	movlw	1
  8149  061B                     u3945:	
  8150  061B  36B0               	lsrf	___ftmul@f1+2,f
  8151  061C  0CAF               	rrf	___ftmul@f1+1,f
  8152  061D  0CAE               	rrf	___ftmul@f1,f
  8153  061E  0B89               	decfsz	9,f
  8154  061F  2E1B               	goto	u3945
  8155  0620  3001               	movlw	1
  8156  0621                     u3955:	
  8157  0621  35B1               	lslf	___ftmul@f2,f
  8158  0622  0DB2               	rlf	___ftmul@f2+1,f
  8159  0623  0DB3               	rlf	___ftmul@f2+2,f
  8160  0624  0B89               	decfsz	9,f
  8161  0625  2E21               	goto	u3955
  8162  0626  3001               	movlw	1
  8163  0627  02BC               	subwf	___ftmul@cntr,f
  8164  0628  1D03               	btfss	3,2
  8165  0629  2E12               	goto	l5357
  8166  062A  3009               	movlw	9
  8167  062B  00B4               	movwf	??___ftmul
  8168  062C  0834               	movf	??___ftmul,w
  8169  062D  00BC               	movwf	___ftmul@cntr
  8170  062E                     l5369:	
  8171  062E  1C2E               	btfss	___ftmul@f1,0
  8172  062F  2E36               	goto	l5373
  8173  0630  0831               	movf	___ftmul@f2,w
  8174  0631  07B9               	addwf	___ftmul@f3_as_product,f
  8175  0632  0832               	movf	___ftmul@f2+1,w
  8176  0633  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8177  0634  0833               	movf	___ftmul@f2+2,w
  8178  0635  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8179  0636                     l5373:	
  8180  0636  3001               	movlw	1
  8181  0637                     u3985:	
  8182  0637  36B0               	lsrf	___ftmul@f1+2,f
  8183  0638  0CAF               	rrf	___ftmul@f1+1,f
  8184  0639  0CAE               	rrf	___ftmul@f1,f
  8185  063A  0B89               	decfsz	9,f
  8186  063B  2E37               	goto	u3985
  8187  063C  3001               	movlw	1
  8188  063D                     u3995:	
  8189  063D  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8190  063E  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8191  063F  0CB9               	rrf	___ftmul@f3_as_product,f
  8192  0640  0B89               	decfsz	9,f
  8193  0641  2E3D               	goto	u3995
  8194  0642  3001               	movlw	1
  8195  0643  02BC               	subwf	___ftmul@cntr,f
  8196  0644  1D03               	btfss	3,2
  8197  0645  2E2E               	goto	l5369
  8198  0646  0839               	movf	___ftmul@f3_as_product,w
  8199  0647  00A0               	movwf	___ftpack@arg
  8200  0648  083A               	movf	___ftmul@f3_as_product+1,w
  8201  0649  00A1               	movwf	___ftpack@arg+1
  8202  064A  083B               	movf	___ftmul@f3_as_product+2,w
  8203  064B  00A2               	movwf	___ftpack@arg+2
  8204  064C  0838               	movf	___ftmul@exp,w
  8205  064D  00B4               	movwf	??___ftmul
  8206  064E  0834               	movf	??___ftmul,w
  8207  064F  00A3               	movwf	___ftpack@exp
  8208  0650  083D               	movf	___ftmul@sign,w
  8209  0651  00B5               	movwf	??___ftmul+1
  8210  0652  0835               	movf	??___ftmul+1,w
  8211  0653  00A4               	movwf	___ftpack@sign
  8212  0654  318A  2248         	fcall	___ftpack
  8213  0656  0020               	movlb	0	; select bank0
  8214  0657  0820               	movf	?___ftpack,w
  8215  0658  00AE               	movwf	?___ftmul
  8216  0659  0821               	movf	?___ftpack+1,w
  8217  065A  00AF               	movwf	?___ftmul+1
  8218  065B  0822               	movf	?___ftpack+2,w
  8219  065C  00B0               	movwf	?___ftmul+2
  8220  065D  0008               	return
  8221  065E                     __end_of___ftmul:	
  8222                           
  8223                           	psect	text38
  8224  0334                     __ptext38:	
  8225 ;; *************** function ___ftadd *****************
  8226 ;; Defined at:
  8227 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;  f1              3   30[BANK0 ] float 
  8230 ;;  f2              3   33[BANK0 ] float 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  exp1            1   42[BANK0 ] unsigned char 
  8233 ;;  exp2            1   41[BANK0 ] unsigned char 
  8234 ;;  sign            1   40[BANK0 ] unsigned char 
  8235 ;; Return value:  Size  Location     Type
  8236 ;;                  3   30[BANK0 ] float 
  8237 ;; Registers used:
  8238 ;;		wreg, status,2, status,0, pclath, cstack
  8239 ;; Tracked objects:
  8240 ;;		On entry : 0/0
  8241 ;;		On exit  : 0/0
  8242 ;;		Unchanged: 0/0
  8243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8244 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;Total ram usage:       13 bytes
  8249 ;; Hardware stack levels used:    1
  8250 ;; Hardware stack levels required when called:    6
  8251 ;; This function calls:
  8252 ;;		___ftpack
  8253 ;; This function is called by:
  8254 ;;		_getPercentValue
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function ___ftadd
  8260  0334                     ___ftadd:	
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8264  0334  0020               	movlb	0	; select bank0
  8265  0335  083E               	movf	___ftadd@f1,w
  8266  0336  00C4               	movwf	??___ftadd
  8267  0337  083F               	movf	___ftadd@f1+1,w
  8268  0338  00C5               	movwf	??___ftadd+1
  8269  0339  0840               	movf	___ftadd@f1+2,w
  8270  033A  00C6               	movwf	??___ftadd+2
  8271  033B  1003               	clrc
  8272  033C  0D45               	rlf	??___ftadd+1,w
  8273  033D  0D46               	rlf	??___ftadd+2,w
  8274  033E  00C7               	movwf	??___ftadd+3
  8275  033F  0847               	movf	??___ftadd+3,w
  8276  0340  00CA               	movwf	___ftadd@exp1
  8277  0341  0841               	movf	___ftadd@f2,w
  8278  0342  00C4               	movwf	??___ftadd
  8279  0343  0842               	movf	___ftadd@f2+1,w
  8280  0344  00C5               	movwf	??___ftadd+1
  8281  0345  0843               	movf	___ftadd@f2+2,w
  8282  0346  00C6               	movwf	??___ftadd+2
  8283  0347  1003               	clrc
  8284  0348  0D45               	rlf	??___ftadd+1,w
  8285  0349  0D46               	rlf	??___ftadd+2,w
  8286  034A  00C7               	movwf	??___ftadd+3
  8287  034B  0847               	movf	??___ftadd+3,w
  8288  034C  00C9               	movwf	___ftadd@exp2
  8289  034D  084A               	movf	___ftadd@exp1,w
  8290  034E  1903               	btfsc	3,2
  8291  034F  2B5C               	goto	l5227
  8292  0350  0849               	movf	___ftadd@exp2,w
  8293  0351  024A               	subwf	___ftadd@exp1,w
  8294  0352  1803               	skipnc
  8295  0353  2B63               	goto	l5231
  8296  0354  034A               	decf	___ftadd@exp1,w
  8297  0355  3AFF               	xorlw	255
  8298  0356  0749               	addwf	___ftadd@exp2,w
  8299  0357  00C4               	movwf	??___ftadd
  8300  0358  3019               	movlw	25
  8301  0359  0244               	subwf	??___ftadd,w
  8302  035A  1C03               	skipc
  8303  035B  2B63               	goto	l5231
  8304  035C                     l5227:	
  8305  035C  0841               	movf	___ftadd@f2,w
  8306  035D  00BE               	movwf	?___ftadd
  8307  035E  0842               	movf	___ftadd@f2+1,w
  8308  035F  00BF               	movwf	?___ftadd+1
  8309  0360  0843               	movf	___ftadd@f2+2,w
  8310  0361  00C0               	movwf	?___ftadd+2
  8311  0362  0008               	return
  8312  0363                     l5231:	
  8313  0363  0849               	movf	___ftadd@exp2,w
  8314  0364  1903               	btfsc	3,2
  8315  0365  0008               	return
  8316  0366  084A               	movf	___ftadd@exp1,w
  8317  0367  0249               	subwf	___ftadd@exp2,w
  8318  0368  1803               	skipnc
  8319  0369  2B72               	goto	l5237
  8320  036A  0349               	decf	___ftadd@exp2,w
  8321  036B  3AFF               	xorlw	255
  8322  036C  074A               	addwf	___ftadd@exp1,w
  8323  036D  00C4               	movwf	??___ftadd
  8324  036E  3019               	movlw	25
  8325  036F  0244               	subwf	??___ftadd,w
  8326  0370  1803               	btfsc	3,0
  8327  0371  0008               	return
  8328  0372                     l5237:	
  8329  0372  3006               	movlw	6
  8330  0373  00C4               	movwf	??___ftadd
  8331  0374  0844               	movf	??___ftadd,w
  8332  0375  00C8               	movwf	___ftadd@sign
  8333  0376  1BC0               	btfsc	___ftadd@f1+2,7
  8334  0377  17C8               	bsf	___ftadd@sign,7
  8335  0378  1BC3               	btfsc	___ftadd@f2+2,7
  8336  0379  1748               	bsf	___ftadd@sign,6
  8337  037A  17BF               	bsf	___ftadd@f1+1,7
  8338  037B  30FF               	movlw	255
  8339  037C  05BE               	andwf	___ftadd@f1,f
  8340  037D  30FF               	movlw	255
  8341  037E  05BF               	andwf	___ftadd@f1+1,f
  8342  037F  3000               	movlw	0
  8343  0380  05C0               	andwf	___ftadd@f1+2,f
  8344  0381  17C2               	bsf	___ftadd@f2+1,7
  8345  0382  30FF               	movlw	255
  8346  0383  05C1               	andwf	___ftadd@f2,f
  8347  0384  30FF               	movlw	255
  8348  0385  05C2               	andwf	___ftadd@f2+1,f
  8349  0386  3000               	movlw	0
  8350  0387  05C3               	andwf	___ftadd@f2+2,f
  8351  0388  0849               	movf	___ftadd@exp2,w
  8352  0389  024A               	subwf	___ftadd@exp1,w
  8353  038A  1803               	skipnc
  8354  038B  2BAE               	goto	l5259
  8355  038C                     l5249:	
  8356  038C  3001               	movlw	1
  8357  038D                     u3675:	
  8358  038D  35C1               	lslf	___ftadd@f2,f
  8359  038E  0DC2               	rlf	___ftadd@f2+1,f
  8360  038F  0DC3               	rlf	___ftadd@f2+2,f
  8361  0390  0B89               	decfsz	9,f
  8362  0391  2B8D               	goto	u3675
  8363  0392  3001               	movlw	1
  8364  0393  02C9               	subwf	___ftadd@exp2,f
  8365  0394  0849               	movf	___ftadd@exp2,w
  8366  0395  064A               	xorwf	___ftadd@exp1,w
  8367  0396  1903               	skipnz
  8368  0397  2BA9               	goto	l5257
  8369  0398  3001               	movlw	1
  8370  0399  02C8               	subwf	___ftadd@sign,f
  8371  039A  0848               	movf	___ftadd@sign,w
  8372  039B  3907               	andlw	7
  8373  039C  1903               	btfsc	3,2
  8374  039D  2BA9               	goto	l5257
  8375  039E  2B8C               	goto	l5249
  8376  039F                     l5255:	
  8377  039F  3001               	movlw	1
  8378  03A0                     u3705:	
  8379  03A0  36C0               	lsrf	___ftadd@f1+2,f
  8380  03A1  0CBF               	rrf	___ftadd@f1+1,f
  8381  03A2  0CBE               	rrf	___ftadd@f1,f
  8382  03A3  0B89               	decfsz	9,f
  8383  03A4  2BA0               	goto	u3705
  8384  03A5  3001               	movlw	1
  8385  03A6  00C4               	movwf	??___ftadd
  8386  03A7  0844               	movf	??___ftadd,w
  8387  03A8  07CA               	addwf	___ftadd@exp1,f
  8388  03A9                     l5257:	
  8389  03A9  084A               	movf	___ftadd@exp1,w
  8390  03AA  0649               	xorwf	___ftadd@exp2,w
  8391  03AB  1903               	btfsc	3,2
  8392  03AC  2BD3               	goto	l2740
  8393  03AD  2B9F               	goto	l5255
  8394  03AE                     l5259:	
  8395  03AE  084A               	movf	___ftadd@exp1,w
  8396  03AF  0249               	subwf	___ftadd@exp2,w
  8397  03B0  1803               	skipnc
  8398  03B1  2BD3               	goto	l2740
  8399  03B2                     l5261:	
  8400  03B2  3001               	movlw	1
  8401  03B3                     u3735:	
  8402  03B3  35BE               	lslf	___ftadd@f1,f
  8403  03B4  0DBF               	rlf	___ftadd@f1+1,f
  8404  03B5  0DC0               	rlf	___ftadd@f1+2,f
  8405  03B6  0B89               	decfsz	9,f
  8406  03B7  2BB3               	goto	u3735
  8407  03B8  3001               	movlw	1
  8408  03B9  02CA               	subwf	___ftadd@exp1,f
  8409  03BA  0849               	movf	___ftadd@exp2,w
  8410  03BB  064A               	xorwf	___ftadd@exp1,w
  8411  03BC  1903               	skipnz
  8412  03BD  2BCF               	goto	l5269
  8413  03BE  3001               	movlw	1
  8414  03BF  02C8               	subwf	___ftadd@sign,f
  8415  03C0  0848               	movf	___ftadd@sign,w
  8416  03C1  3907               	andlw	7
  8417  03C2  1903               	btfsc	3,2
  8418  03C3  2BCF               	goto	l5269
  8419  03C4  2BB2               	goto	l5261
  8420  03C5                     l5267:	
  8421  03C5  3001               	movlw	1
  8422  03C6                     u3765:	
  8423  03C6  36C3               	lsrf	___ftadd@f2+2,f
  8424  03C7  0CC2               	rrf	___ftadd@f2+1,f
  8425  03C8  0CC1               	rrf	___ftadd@f2,f
  8426  03C9  0B89               	decfsz	9,f
  8427  03CA  2BC6               	goto	u3765
  8428  03CB  3001               	movlw	1
  8429  03CC  00C4               	movwf	??___ftadd
  8430  03CD  0844               	movf	??___ftadd,w
  8431  03CE  07C9               	addwf	___ftadd@exp2,f
  8432  03CF                     l5269:	
  8433  03CF  084A               	movf	___ftadd@exp1,w
  8434  03D0  0649               	xorwf	___ftadd@exp2,w
  8435  03D1  1D03               	skipz
  8436  03D2  2BC5               	goto	l5267
  8437  03D3                     l2740:	
  8438  03D3  1FC8               	btfss	___ftadd@sign,7
  8439  03D4  2BE5               	goto	l5273
  8440  03D5  30FF               	movlw	255
  8441  03D6  06BE               	xorwf	___ftadd@f1,f
  8442  03D7  30FF               	movlw	255
  8443  03D8  06BF               	xorwf	___ftadd@f1+1,f
  8444  03D9  30FF               	movlw	255
  8445  03DA  06C0               	xorwf	___ftadd@f1+2,f
  8446  03DB  3001               	movlw	1
  8447  03DC  07BE               	addwf	___ftadd@f1,f
  8448  03DD  3000               	movlw	0
  8449  03DE  1803               	skipnc
  8450  03DF  3001               	movlw	1
  8451  03E0  07BF               	addwf	___ftadd@f1+1,f
  8452  03E1  3000               	movlw	0
  8453  03E2  1803               	skipnc
  8454  03E3  3001               	movlw	1
  8455  03E4  07C0               	addwf	___ftadd@f1+2,f
  8456  03E5                     l5273:	
  8457  03E5  1F48               	btfss	___ftadd@sign,6
  8458  03E6  2BF7               	goto	l5277
  8459  03E7  30FF               	movlw	255
  8460  03E8  06C1               	xorwf	___ftadd@f2,f
  8461  03E9  30FF               	movlw	255
  8462  03EA  06C2               	xorwf	___ftadd@f2+1,f
  8463  03EB  30FF               	movlw	255
  8464  03EC  06C3               	xorwf	___ftadd@f2+2,f
  8465  03ED  3001               	movlw	1
  8466  03EE  07C1               	addwf	___ftadd@f2,f
  8467  03EF  3000               	movlw	0
  8468  03F0  1803               	skipnc
  8469  03F1  3001               	movlw	1
  8470  03F2  07C2               	addwf	___ftadd@f2+1,f
  8471  03F3  3000               	movlw	0
  8472  03F4  1803               	skipnc
  8473  03F5  3001               	movlw	1
  8474  03F6  07C3               	addwf	___ftadd@f2+2,f
  8475  03F7                     l5277:	
  8476  03F7  01C8               	clrf	___ftadd@sign
  8477  03F8  083E               	movf	___ftadd@f1,w
  8478  03F9  07C1               	addwf	___ftadd@f2,f
  8479  03FA  083F               	movf	___ftadd@f1+1,w
  8480  03FB  3DC2               	addwfc	___ftadd@f2+1,f
  8481  03FC  0840               	movf	___ftadd@f1+2,w
  8482  03FD  3DC3               	addwfc	___ftadd@f2+2,f
  8483  03FE  1FC3               	btfss	___ftadd@f2+2,7
  8484  03FF  2C12               	goto	l5287
  8485  0400  30FF               	movlw	255
  8486  0401  06C1               	xorwf	___ftadd@f2,f
  8487  0402  30FF               	movlw	255
  8488  0403  06C2               	xorwf	___ftadd@f2+1,f
  8489  0404  30FF               	movlw	255
  8490  0405  06C3               	xorwf	___ftadd@f2+2,f
  8491  0406  3001               	movlw	1
  8492  0407  07C1               	addwf	___ftadd@f2,f
  8493  0408  3000               	movlw	0
  8494  0409  1803               	skipnc
  8495  040A  3001               	movlw	1
  8496  040B  07C2               	addwf	___ftadd@f2+1,f
  8497  040C  3000               	movlw	0
  8498  040D  1803               	skipnc
  8499  040E  3001               	movlw	1
  8500  040F  07C3               	addwf	___ftadd@f2+2,f
  8501  0410  01C8               	clrf	___ftadd@sign
  8502  0411  0AC8               	incf	___ftadd@sign,f
  8503  0412                     l5287:	
  8504  0412  0841               	movf	___ftadd@f2,w
  8505  0413  00A0               	movwf	___ftpack@arg
  8506  0414  0842               	movf	___ftadd@f2+1,w
  8507  0415  00A1               	movwf	___ftpack@arg+1
  8508  0416  0843               	movf	___ftadd@f2+2,w
  8509  0417  00A2               	movwf	___ftpack@arg+2
  8510  0418  084A               	movf	___ftadd@exp1,w
  8511  0419  00C4               	movwf	??___ftadd
  8512  041A  0844               	movf	??___ftadd,w
  8513  041B  00A3               	movwf	___ftpack@exp
  8514  041C  0848               	movf	___ftadd@sign,w
  8515  041D  00C5               	movwf	??___ftadd+1
  8516  041E  0845               	movf	??___ftadd+1,w
  8517  041F  00A4               	movwf	___ftpack@sign
  8518  0420  318A  2248         	fcall	___ftpack
  8519  0422  0020               	movlb	0	; select bank0
  8520  0423  0820               	movf	?___ftpack,w
  8521  0424  00BE               	movwf	?___ftadd
  8522  0425  0821               	movf	?___ftpack+1,w
  8523  0426  00BF               	movwf	?___ftadd+1
  8524  0427  0822               	movf	?___ftpack+2,w
  8525  0428  00C0               	movwf	?___ftadd+2
  8526  0429  0008               	return
  8527  042A                     __end_of___ftadd:	
  8528                           
  8529                           	psect	text39
  8530  1FEF                     __ptext39:	
  8531 ;; *************** function _getBuz_GO *****************
  8532 ;; Defined at:
  8533 ;;		line 82 in file "../src/Buzzer_B1.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  i               2    4[BANK0 ] int 
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  2    0[BANK0 ] int 
  8540 ;; Registers used:
  8541 ;;		wreg, status,2, status,0
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;Total ram usage:        6 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    5
  8554 ;; This function calls:
  8555 ;;		Nothing
  8556 ;; This function is called by:
  8557 ;;		_setRF_Main
  8558 ;; This function uses a non-reentrant model
  8559 ;;
  8560                           
  8561                           
  8562                           ;psect for function _getBuz_GO
  8563  1FEF                     _getBuz_GO:	
  8564                           
  8565                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8566                           
  8567                           ;incstack = 0
  8568                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8569  1FEF  0021               	movlb	1	; select bank1
  8570  1FF0  0C32               	rrf	_Buz1^(0+128),w
  8571  1FF1  3901               	andlw	1
  8572  1FF2  0020               	movlb	0	; select bank0
  8573  1FF3  00A2               	movwf	??_getBuz_GO
  8574  1FF4  01A3               	clrf	??_getBuz_GO+1
  8575  1FF5  0822               	movf	??_getBuz_GO,w
  8576  1FF6  00A4               	movwf	getBuz_GO@i
  8577  1FF7  0823               	movf	??_getBuz_GO+1,w
  8578  1FF8  00A5               	movwf	getBuz_GO@i+1
  8579                           
  8580                           ;Buzzer_B1.c: 84: return i;
  8581  1FF9  0825               	movf	getBuz_GO@i+1,w
  8582  1FFA  01A1               	clrf	?_getBuz_GO+1
  8583  1FFB  07A1               	addwf	?_getBuz_GO+1,f
  8584  1FFC  0824               	movf	getBuz_GO@i,w
  8585  1FFD  01A0               	clrf	?_getBuz_GO
  8586  1FFE  07A0               	addwf	?_getBuz_GO,f
  8587  1FFF  0008               	return
  8588  2000                     __end_of_getBuz_GO:	
  8589                           
  8590                           	psect	text40
  8591  1F72                     __ptext40:	
  8592 ;; *************** function _RF_RxDisable *****************
  8593 ;; Defined at:
  8594 ;;		line 188 in file "../src/RF_Control_B1.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;		None
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;		None
  8599 ;; Return value:  Size  Location     Type
  8600 ;;		None               void
  8601 ;; Registers used:
  8602 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 0/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;Total ram usage:        0 bytes
  8613 ;; Hardware stack levels used:    1
  8614 ;; Hardware stack levels required when called:    7
  8615 ;; This function calls:
  8616 ;;		_CC2500_WriteCommand
  8617 ;; This function is called by:
  8618 ;;		_setRF_Main
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           
  8623                           ;psect for function _RF_RxDisable
  8624  1F72                     _RF_RxDisable:	
  8625                           
  8626                           ;RF_Control_B1.c: 189: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8627                           
  8628                           ;incstack = 0
  8629                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8630  1F72  0021               	movlb	1	; select bank1
  8631  1F73  18C6               	btfsc	_RF1^(0+128),1
  8632  1F74  2F77               	goto	l1888
  8633  1F75  1DC6               	btfss	_RF1^(0+128),3
  8634  1F76  0008               	return
  8635  1F77                     l1888:	
  8636                           
  8637                           ;RF_Control_B1.c: 190: RF1.RxStatus = 0;
  8638  1F77  11C6               	bcf	_RF1^(0+128),3
  8639                           
  8640                           ;RF_Control_B1.c: 191: RF1.ReceiveGO = 0;
  8641  1F78  10C6               	bcf	_RF1^(0+128),1
  8642                           
  8643                           ;RF_Control_B1.c: 192: CC2500_WriteCommand(0x36);
  8644  1F79  3036               	movlw	54
  8645  1F7A  3191  211A  319F   	fcall	_CC2500_WriteCommand
  8646                           
  8647                           ;RF_Control_B1.c: 193: CC2500_WriteCommand(0x3A);
  8648  1F7D  303A               	movlw	58
  8649  1F7E  3191  211A         	fcall	_CC2500_WriteCommand
  8650  1F80  0008               	return
  8651  1F81                     __end_of_RF_RxDisable:	
  8652                           
  8653                           	psect	text41
  8654  0AA9                     __ptext41:	
  8655 ;; *************** function _CC2500_TxData *****************
  8656 ;; Defined at:
  8657 ;;		line 32 in file "../src/CC2500_B1.c"
  8658 ;; Parameters:    Size  Location     Type
  8659 ;;		None
  8660 ;; Auto vars:     Size  Location     Type
  8661 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8662 ;; Return value:  Size  Location     Type
  8663 ;;		None               void
  8664 ;; Registers used:
  8665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8666 ;; Tracked objects:
  8667 ;;		On entry : 0/0
  8668 ;;		On exit  : 0/0
  8669 ;;		Unchanged: 0/0
  8670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;Total ram usage:        2 bytes
  8676 ;; Hardware stack levels used:    1
  8677 ;; Hardware stack levels required when called:    7
  8678 ;; This function calls:
  8679 ;;		_CC2500_WriteByte
  8680 ;;		_CC2500_WriteCommand
  8681 ;;		_Timeout_Counter
  8682 ;;		_set_TimeoutCleared
  8683 ;; This function is called by:
  8684 ;;		_setRF_Main
  8685 ;; This function uses a non-reentrant model
  8686 ;;
  8687                           
  8688                           
  8689                           ;psect for function _CC2500_TxData
  8690  0AA9                     _CC2500_TxData:	
  8691                           
  8692                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8693                           ;CC2500_B1.c: 35: RC4 = 0;
  8694                           
  8695                           ;incstack = 0
  8696                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8697  0AA9  0020               	movlb	0	; select bank0
  8698  0AAA  120E               	bcf	14,4	;volatile
  8699                           
  8700                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8701  0AAB  307F               	movlw	127
  8702  0AAC  00A4               	movwf	??_CC2500_TxData
  8703  0AAD  0824               	movf	??_CC2500_TxData,w
  8704  0AAE  00FB               	movwf	_SPI0Buffer
  8705                           
  8706                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8707  0AAF  2AB3               	goto	l6057
  8708  0AB0                     l6055:	
  8709                           
  8710                           ;CC2500_B1.c: 38: Timeout_Counter();
  8711  0AB0  3191  2102  318A   	fcall	_Timeout_Counter
  8712  0AB3                     l6057:	
  8713  0AB3  0020               	movlb	0	; select bank0
  8714  0AB4  1D0E               	btfss	14,2	;volatile
  8715  0AB5  2AB9               	goto	l6061
  8716  0AB6  0021               	movlb	1	; select bank1
  8717  0AB7  1D2F               	btfss	(_myMain^(0+128)+15),2
  8718  0AB8  2AB0               	goto	l6055
  8719  0AB9                     l6061:	
  8720                           
  8721                           ;CC2500_B1.c: 39: };
  8722                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8723  0AB9  319E  262B  318A   	fcall	_set_TimeoutCleared
  8724                           
  8725                           ;CC2500_B1.c: 41: CC2500_WriteByte();
  8726  0ABC  3190  2098  318A   	fcall	_CC2500_WriteByte
  8727                           
  8728                           ;CC2500_B1.c: 42: SPI0Buffer = Tx_Length;
  8729  0ABF  0021               	movlb	1	; select bank1
  8730  0AC0  0855               	movf	_Tx_Length^(0+128),w
  8731  0AC1  0020               	movlb	0	; select bank0
  8732  0AC2  00A4               	movwf	??_CC2500_TxData
  8733  0AC3  0824               	movf	??_CC2500_TxData,w
  8734  0AC4  00FB               	movwf	_SPI0Buffer
  8735                           
  8736                           ;CC2500_B1.c: 43: CC2500_WriteByte();
  8737  0AC5  3190  2098  318A   	fcall	_CC2500_WriteByte
  8738                           
  8739                           ;CC2500_B1.c: 44: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8740  0AC8  0020               	movlb	0	; select bank0
  8741  0AC9  01A5               	clrf	CC2500_TxData@loop_e
  8742  0ACA                     l6075:	
  8743  0ACA  0021               	movlb	1	; select bank1
  8744  0ACB  0855               	movf	_Tx_Length^(0+128),w
  8745  0ACC  0020               	movlb	0	; select bank0
  8746  0ACD  0225               	subwf	CC2500_TxData@loop_e,w
  8747  0ACE  1803               	btfsc	3,0
  8748  0ACF  2AE2               	goto	l243
  8749                           
  8750                           ;CC2500_B1.c: 45: SPI0Buffer = RF_Data[loop_e];
  8751  0AD0  0825               	movf	CC2500_TxData@loop_e,w
  8752  0AD1  3E20               	addlw	_RF_Data& (0+255)
  8753  0AD2  0086               	movwf	6
  8754  0AD3  3001               	movlw	1	; select bank2/3
  8755  0AD4  0087               	movwf	7
  8756  0AD5  0801               	movf	1,w
  8757  0AD6  00A4               	movwf	??_CC2500_TxData
  8758  0AD7  0824               	movf	??_CC2500_TxData,w
  8759  0AD8  00FB               	movwf	_SPI0Buffer
  8760                           
  8761                           ;CC2500_B1.c: 46: CC2500_WriteByte();
  8762  0AD9  3190  2098  318A   	fcall	_CC2500_WriteByte
  8763  0ADC  3001               	movlw	1
  8764  0ADD  0020               	movlb	0	; select bank0
  8765  0ADE  00A4               	movwf	??_CC2500_TxData
  8766  0ADF  0824               	movf	??_CC2500_TxData,w
  8767  0AE0  07A5               	addwf	CC2500_TxData@loop_e,f
  8768  0AE1  2ACA               	goto	l6075
  8769  0AE2                     l243:	
  8770                           
  8771                           ;CC2500_B1.c: 47: }
  8772                           ;CC2500_B1.c: 48: RC4 = 1;
  8773  0AE2  160E               	bsf	14,4	;volatile
  8774                           
  8775                           ;CC2500_B1.c: 49: CC2500_WriteCommand(0x35);
  8776  0AE3  3035               	movlw	53
  8777  0AE4  3191  211A  318A   	fcall	_CC2500_WriteCommand
  8778                           
  8779                           ;CC2500_B1.c: 50: while (RB0 == 0 && myMain.Timeout == 0) {
  8780  0AE7  2AEB               	goto	l6081
  8781  0AE8                     l6079:	
  8782                           
  8783                           ;CC2500_B1.c: 51: Timeout_Counter();
  8784  0AE8  3191  2102  318A   	fcall	_Timeout_Counter
  8785  0AEB                     l6081:	
  8786  0AEB  0020               	movlb	0	; select bank0
  8787  0AEC  180D               	btfsc	13,0	;volatile
  8788  0AED  2AF1               	goto	l6085
  8789  0AEE  0021               	movlb	1	; select bank1
  8790  0AEF  1D2F               	btfss	(_myMain^(0+128)+15),2
  8791  0AF0  2AE8               	goto	l6079
  8792  0AF1                     l6085:	
  8793                           
  8794                           ;CC2500_B1.c: 52: };
  8795                           ;CC2500_B1.c: 53: set_TimeoutCleared();
  8796  0AF1  319E  262B  318A   	fcall	_set_TimeoutCleared
  8797                           
  8798                           ;CC2500_B1.c: 54: while (RB0 == 1 && myMain.Timeout == 0) {
  8799  0AF4  2AF8               	goto	l6089
  8800  0AF5                     l6087:	
  8801                           
  8802                           ;CC2500_B1.c: 55: Timeout_Counter();
  8803  0AF5  3191  2102  318A   	fcall	_Timeout_Counter
  8804  0AF8                     l6089:	
  8805  0AF8  0020               	movlb	0	; select bank0
  8806  0AF9  1C0D               	btfss	13,0	;volatile
  8807  0AFA  2AFE               	goto	l6093
  8808  0AFB  0021               	movlb	1	; select bank1
  8809  0AFC  1D2F               	btfss	(_myMain^(0+128)+15),2
  8810  0AFD  2AF5               	goto	l6087
  8811  0AFE                     l6093:	
  8812                           
  8813                           ;CC2500_B1.c: 56: };
  8814                           ;CC2500_B1.c: 57: set_TimeoutCleared();
  8815  0AFE  319E  262B  318A   	fcall	_set_TimeoutCleared
  8816                           
  8817                           ;CC2500_B1.c: 58: CC2500_WriteCommand(0x36);
  8818  0B01  3036               	movlw	54
  8819  0B02  3191  211A  318A   	fcall	_CC2500_WriteCommand
  8820                           
  8821                           ;CC2500_B1.c: 59: CC2500_WriteCommand(0x3B);
  8822  0B05  303B               	movlw	59
  8823  0B06  3191  211A         	fcall	_CC2500_WriteCommand
  8824                           
  8825                           ;CC2500_B1.c: 60: Transceive_OK = 1;
  8826  0B08  14FC               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8827  0B09  0008               	return
  8828  0B0A                     __end_of_CC2500_TxData:	
  8829                           
  8830                           	psect	text42
  8831  0D0F                     __ptext42:	
  8832 ;; *************** function _CC2500_RxData *****************
  8833 ;; Defined at:
  8834 ;;		line 66 in file "../src/CC2500_B1.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;		None
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;		None               void
  8841 ;; Registers used:
  8842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;Total ram usage:        2 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    7
  8855 ;; This function calls:
  8856 ;;		_CC2500_ReadByte
  8857 ;;		_CC2500_ReadStatus
  8858 ;;		_CC2500_WriteByte
  8859 ;;		_CC2500_WriteCommand
  8860 ;;		_Timeout_Counter
  8861 ;;		_set_TimeoutCleared
  8862 ;; This function is called by:
  8863 ;;		_setRF_Main
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           
  8868                           ;psect for function _CC2500_RxData
  8869  0D0F                     _CC2500_RxData:	
  8870                           
  8871                           ;CC2500_B1.c: 67: unsigned char loop_f;
  8872                           ;CC2500_B1.c: 71: if (RB0 == 1)
  8873                           
  8874                           ;incstack = 0
  8875                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8876  0D0F  0020               	movlb	0	; select bank0
  8877  0D10  180D               	btfsc	13,0	;volatile
  8878  0D11  2D16               	goto	l6107
  8879  0D12  2D1F               	goto	l6113
  8880  0D13                     l6105:	
  8881                           ;CC2500_B1.c: 72: {
  8882                           ;CC2500_B1.c: 73: while (RB0 == 1 && myMain.Timeout == 0) {
  8883                           
  8884                           
  8885                           ;CC2500_B1.c: 74: Timeout_Counter();
  8886  0D13  3191  2102  318D   	fcall	_Timeout_Counter
  8887  0D16                     l6107:	
  8888  0D16  0020               	movlb	0	; select bank0
  8889  0D17  1C0D               	btfss	13,0	;volatile
  8890  0D18  2D1C               	goto	l6111
  8891  0D19  0021               	movlb	1	; select bank1
  8892  0D1A  1D2F               	btfss	(_myMain^(0+128)+15),2
  8893  0D1B  2D13               	goto	l6105
  8894  0D1C                     l6111:	
  8895                           
  8896                           ;CC2500_B1.c: 75: };
  8897                           ;CC2500_B1.c: 76: set_TimeoutCleared();
  8898  0D1C  319E  262B  318D   	fcall	_set_TimeoutCleared
  8899  0D1F                     l6113:	
  8900                           
  8901                           ;CC2500_B1.c: 77: }
  8902                           ;CC2500_B1.c: 79: CC2500_ReadStatus(0x3B);
  8903  0D1F  303B               	movlw	59
  8904  0D20  3192  2268  318D   	fcall	_CC2500_ReadStatus
  8905                           
  8906                           ;CC2500_B1.c: 80: if (s_data != 0) {
  8907  0D23  0021               	movlb	1	; select bank1
  8908  0D24  0858               	movf	_s_data^(0+128),w
  8909  0D25  1903               	btfsc	3,2
  8910  0D26  0008               	return
  8911                           
  8912                           ;CC2500_B1.c: 81: RC4 = 0;
  8913  0D27  0020               	movlb	0	; select bank0
  8914  0D28  120E               	bcf	14,4	;volatile
  8915                           
  8916                           ;CC2500_B1.c: 82: SPI0Buffer = 0x3F + 0xC0;
  8917  0D29  30FF               	movlw	255
  8918  0D2A  00A4               	movwf	??_CC2500_RxData
  8919  0D2B  0824               	movf	??_CC2500_RxData,w
  8920  0D2C  00FB               	movwf	_SPI0Buffer
  8921                           
  8922                           ;CC2500_B1.c: 83: while (RC2 == 1 && myMain.Timeout == 0) {
  8923  0D2D  2D31               	goto	l6123
  8924  0D2E                     l6121:	
  8925                           
  8926                           ;CC2500_B1.c: 84: Timeout_Counter();
  8927  0D2E  3191  2102  318D   	fcall	_Timeout_Counter
  8928  0D31                     l6123:	
  8929  0D31  0020               	movlb	0	; select bank0
  8930  0D32  1D0E               	btfss	14,2	;volatile
  8931  0D33  2D37               	goto	l6127
  8932  0D34  0021               	movlb	1	; select bank1
  8933  0D35  1D2F               	btfss	(_myMain^(0+128)+15),2
  8934  0D36  2D2E               	goto	l6121
  8935  0D37                     l6127:	
  8936                           
  8937                           ;CC2500_B1.c: 85: };
  8938                           ;CC2500_B1.c: 86: set_TimeoutCleared();
  8939  0D37  319E  262B  318D   	fcall	_set_TimeoutCleared
  8940                           
  8941                           ;CC2500_B1.c: 87: CC2500_WriteByte();
  8942  0D3A  3190  2098  318D   	fcall	_CC2500_WriteByte
  8943                           
  8944                           ;CC2500_B1.c: 89: CC2500_ReadByte();
  8945  0D3D  3190  20EB  318D   	fcall	_CC2500_ReadByte
  8946                           
  8947                           ;CC2500_B1.c: 90: Rx_Length = SPI0Buffer;
  8948  0D40  087B               	movf	_SPI0Buffer,w
  8949  0D41  0020               	movlb	0	; select bank0
  8950  0D42  00A4               	movwf	??_CC2500_RxData
  8951  0D43  0824               	movf	??_CC2500_RxData,w
  8952  0D44  0021               	movlb	1	; select bank1
  8953  0D45  00D4               	movwf	_Rx_Length^(0+128)
  8954                           
  8955                           ;CC2500_B1.c: 91: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8956  0D46  0020               	movlb	0	; select bank0
  8957  0D47  01A5               	clrf	CC2500_RxData@loop_f
  8958  0D48                     l6143:	
  8959  0D48  0021               	movlb	1	; select bank1
  8960  0D49  0854               	movf	_Rx_Length^(0+128),w
  8961  0D4A  0020               	movlb	0	; select bank0
  8962  0D4B  0225               	subwf	CC2500_RxData@loop_f,w
  8963  0D4C  1803               	btfsc	3,0
  8964  0D4D  2D60               	goto	l6145
  8965                           
  8966                           ;CC2500_B1.c: 92: CC2500_ReadByte();
  8967  0D4E  3190  20EB  318D   	fcall	_CC2500_ReadByte
  8968                           
  8969                           ;CC2500_B1.c: 93: RF_Data[loop_f] = SPI0Buffer;
  8970  0D51  087B               	movf	_SPI0Buffer,w
  8971  0D52  0020               	movlb	0	; select bank0
  8972  0D53  00A4               	movwf	??_CC2500_RxData
  8973  0D54  0825               	movf	CC2500_RxData@loop_f,w
  8974  0D55  3E20               	addlw	_RF_Data& (0+255)
  8975  0D56  0086               	movwf	6
  8976  0D57  3001               	movlw	1	; select bank2/3
  8977  0D58  0087               	movwf	7
  8978  0D59  0824               	movf	??_CC2500_RxData,w
  8979  0D5A  0081               	movwf	1
  8980  0D5B  3001               	movlw	1
  8981  0D5C  00A4               	movwf	??_CC2500_RxData
  8982  0D5D  0824               	movf	??_CC2500_RxData,w
  8983  0D5E  07A5               	addwf	CC2500_RxData@loop_f,f
  8984  0D5F  2D48               	goto	l6143
  8985  0D60                     l6145:	
  8986                           
  8987                           ;CC2500_B1.c: 94: }
  8988                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  8989  0D60  3190  20EB  318D   	fcall	_CC2500_ReadByte
  8990                           
  8991                           ;CC2500_B1.c: 96: RSSI = SPI0Buffer;
  8992  0D63  087B               	movf	_SPI0Buffer,w
  8993  0D64  0020               	movlb	0	; select bank0
  8994  0D65  00A4               	movwf	??_CC2500_RxData
  8995  0D66  0824               	movf	??_CC2500_RxData,w
  8996  0D67  0021               	movlb	1	; select bank1
  8997  0D68  00D3               	movwf	_RSSI^(0+128)
  8998                           
  8999                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9000  0D69  3190  20EB  318D   	fcall	_CC2500_ReadByte
  9001                           
  9002                           ;CC2500_B1.c: 98: CRC = SPI0Buffer;
  9003  0D6C  087B               	movf	_SPI0Buffer,w
  9004  0D6D  0020               	movlb	0	; select bank0
  9005  0D6E  00A4               	movwf	??_CC2500_RxData
  9006  0D6F  0824               	movf	??_CC2500_RxData,w
  9007  0D70  0021               	movlb	1	; select bank1
  9008  0D71  00CF               	movwf	_CRC^(0+128)
  9009                           
  9010                           ;CC2500_B1.c: 99: RC4 = 1;
  9011  0D72  0020               	movlb	0	; select bank0
  9012  0D73  160E               	bsf	14,4	;volatile
  9013                           
  9014                           ;CC2500_B1.c: 100: if (CRC & 0x80)
  9015  0D74  0021               	movlb	1	; select bank1
  9016  0D75  1BCF               	btfsc	_CRC^(0+128),7
  9017                           
  9018                           ;CC2500_B1.c: 101: Receive_OK = 1;
  9019  0D76  147C               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9020                           
  9021                           ;CC2500_B1.c: 103: CC2500_WriteCommand(0x36);
  9022  0D77  3036               	movlw	54
  9023  0D78  3191  211A  318D   	fcall	_CC2500_WriteCommand
  9024                           
  9025                           ;CC2500_B1.c: 104: CC2500_WriteCommand(0x3A);
  9026  0D7B  303A               	movlw	58
  9027  0D7C  3191  211A         	fcall	_CC2500_WriteCommand
  9028                           
  9029                           ;CC2500_B1.c: 105: RF1.RxStatus = 0;
  9030  0D7E  0021               	movlb	1	; select bank1
  9031  0D7F  11C6               	bcf	_RF1^(0+128),3
  9032                           
  9033                           ;CC2500_B1.c: 106: RF1.ReceiveGO = 1;
  9034  0D80  14C6               	bsf	_RF1^(0+128),1
  9035  0D81  0008               	return
  9036  0D82                     __end_of_CC2500_RxData:	
  9037                           
  9038                           	psect	text43
  9039  1268                     __ptext43:	
  9040 ;; *************** function _CC2500_ReadStatus *****************
  9041 ;; Defined at:
  9042 ;;		line 294 in file "../src/CC2500_B1.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;  status_addr     1    wreg     unsigned char 
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        2 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    6
  9063 ;; This function calls:
  9064 ;;		_CC2500_ReadByte
  9065 ;;		_CC2500_WriteByte
  9066 ;;		_Timeout_Counter
  9067 ;;		_set_TimeoutCleared
  9068 ;; This function is called by:
  9069 ;;		_CC2500_RxData
  9070 ;; This function uses a non-reentrant model
  9071 ;;
  9072                           
  9073                           
  9074                           ;psect for function _CC2500_ReadStatus
  9075  1268                     _CC2500_ReadStatus:	
  9076                           
  9077                           ;incstack = 0
  9078                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9079                           ;CC2500_ReadStatus@status_addr stored from wreg
  9080  1268  0020               	movlb	0	; select bank0
  9081  1269  00A3               	movwf	CC2500_ReadStatus@status_addr
  9082                           
  9083                           ;CC2500_B1.c: 295: RC4 = 0;
  9084  126A  120E               	bcf	14,4	;volatile
  9085                           
  9086                           ;CC2500_B1.c: 296: SPI0Buffer = status_addr + 0xC0;
  9087  126B  0823               	movf	CC2500_ReadStatus@status_addr,w
  9088  126C  3EC0               	addlw	192
  9089  126D  00A2               	movwf	??_CC2500_ReadStatus
  9090  126E  0822               	movf	??_CC2500_ReadStatus,w
  9091  126F  00FB               	movwf	_SPI0Buffer
  9092                           
  9093                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
  9094  1270  2A74               	goto	l5931
  9095  1271                     l5929:	
  9096                           
  9097                           ;CC2500_B1.c: 299: Timeout_Counter();
  9098  1271  3191  2102  3192   	fcall	_Timeout_Counter
  9099  1274                     l5931:	
  9100  1274  0020               	movlb	0	; select bank0
  9101  1275  1D0E               	btfss	14,2	;volatile
  9102  1276  2A7A               	goto	l5935
  9103  1277  0021               	movlb	1	; select bank1
  9104  1278  1D2F               	btfss	(_myMain^(0+128)+15),2
  9105  1279  2A71               	goto	l5929
  9106  127A                     l5935:	
  9107                           
  9108                           ;CC2500_B1.c: 300: };
  9109                           ;CC2500_B1.c: 301: set_TimeoutCleared();
  9110  127A  319E  262B  3192   	fcall	_set_TimeoutCleared
  9111                           
  9112                           ;CC2500_B1.c: 302: CC2500_WriteByte();
  9113  127D  3190  2098  3192   	fcall	_CC2500_WriteByte
  9114                           
  9115                           ;CC2500_B1.c: 303: CC2500_ReadByte();
  9116  1280  3190  20EB         	fcall	_CC2500_ReadByte
  9117                           
  9118                           ;CC2500_B1.c: 304: RC4 = 1;
  9119  1282  0020               	movlb	0	; select bank0
  9120  1283  160E               	bsf	14,4	;volatile
  9121                           
  9122                           ;CC2500_B1.c: 306: s_data = SPI0Buffer;
  9123  1284  087B               	movf	_SPI0Buffer,w
  9124  1285  00A2               	movwf	??_CC2500_ReadStatus
  9125  1286  0822               	movf	??_CC2500_ReadStatus,w
  9126  1287  0021               	movlb	1	; select bank1
  9127  1288  00D8               	movwf	_s_data^(0+128)
  9128  1289  0008               	return
  9129  128A                     __end_of_CC2500_ReadStatus:	
  9130                           
  9131                           	psect	text44
  9132  10EB                     __ptext44:	
  9133 ;; *************** function _CC2500_ReadByte *****************
  9134 ;; Defined at:
  9135 ;;		line 231 in file "../src/CC2500_B1.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9140 ;; Return value:  Size  Location     Type
  9141 ;;		None               void
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9150 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;Total ram usage:        2 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    5
  9156 ;; This function calls:
  9157 ;;		Nothing
  9158 ;; This function is called by:
  9159 ;;		_CC2500_RxData
  9160 ;;		_CC2500_ReadStatus
  9161 ;;		_CC2500_ReadREG
  9162 ;; This function uses a non-reentrant model
  9163 ;;
  9164                           
  9165                           
  9166                           ;psect for function _CC2500_ReadByte
  9167  10EB                     _CC2500_ReadByte:	
  9168                           
  9169                           ;CC2500_B1.c: 232: unsigned char loop_b;
  9170                           ;CC2500_B1.c: 233: for (loop_b = 0; loop_b < 8; loop_b++) {
  9171                           
  9172                           ;incstack = 0
  9173                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9174  10EB  0020               	movlb	0	; select bank0
  9175  10EC  01A1               	clrf	CC2500_ReadByte@loop_b
  9176  10ED                     L3:	
  9177  10ED  3008               	movlw	8
  9178  10EE  0221               	subwf	CC2500_ReadByte@loop_b,w
  9179  10EF  1803               	btfsc	3,0
  9180  10F0  0008               	return
  9181                           
  9182                           ;CC2500_B1.c: 234: RC1 = 1;
  9183  10F1  148E               	bsf	14,1	;volatile
  9184                           
  9185                           ;CC2500_B1.c: 235: SPI0Buffer <<= 1;
  9186  10F2  1003               	clrc
  9187  10F3  0DFB               	rlf	_SPI0Buffer,f
  9188                           
  9189                           ;CC2500_B1.c: 236: if (RC2 == 1)
  9190  10F4  1D0E               	btfss	14,2	;volatile
  9191  10F5  28F8               	goto	l5797
  9192                           
  9193                           ;CC2500_B1.c: 237: SPI0Buffer |= 0x01;
  9194  10F6  147B               	bsf	_SPI0Buffer,0
  9195  10F7  28FC               	goto	l5799
  9196  10F8                     l5797:	
  9197                           
  9198                           ;CC2500_B1.c: 238: else
  9199                           ;CC2500_B1.c: 239: SPI0Buffer &= 0xFE;
  9200  10F8  30FE               	movlw	254
  9201  10F9  00A0               	movwf	??_CC2500_ReadByte
  9202  10FA  0820               	movf	??_CC2500_ReadByte,w
  9203  10FB  05FB               	andwf	_SPI0Buffer,f
  9204  10FC                     l5799:	
  9205                           
  9206                           ;CC2500_B1.c: 240: RC1 = 0;
  9207  10FC  108E               	bcf	14,1	;volatile
  9208  10FD  3001               	movlw	1
  9209  10FE  00A0               	movwf	??_CC2500_ReadByte
  9210  10FF  0820               	movf	??_CC2500_ReadByte,w
  9211  1100  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9212  1101  28ED               	goto	L3
  9213  1102                     __end_of_CC2500_ReadByte:	
  9214                           
  9215                           	psect	text45
  9216  1DF4                     __ptext45:	
  9217 ;; *************** function _RF_Initialization *****************
  9218 ;; Defined at:
  9219 ;;		line 9 in file "../src/RF_Control_B1.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;		None
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;		None
  9224 ;; Return value:  Size  Location     Type
  9225 ;;		None               void
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, pclath, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;Total ram usage:        0 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    6
  9240 ;; This function calls:
  9241 ;;		_setRF_Initialization
  9242 ;; This function is called by:
  9243 ;;		_main
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           
  9248                           ;psect for function _RF_Initialization
  9249  1DF4                     _RF_Initialization:	
  9250                           
  9251                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9252                           
  9253                           ;incstack = 0
  9254                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9255  1DF4  319E  2651         	fcall	_setRF_Initialization
  9256  1DF6  0008               	return
  9257  1DF7                     __end_of_RF_Initialization:	
  9258                           
  9259                           	psect	text46
  9260  1E51                     __ptext46:	
  9261 ;; *************** function _setRF_Initialization *****************
  9262 ;; Defined at:
  9263 ;;		line 43 in file "../src/RF_Control_B1.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;		None
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;		None
  9268 ;; Return value:  Size  Location     Type
  9269 ;;		None               void
  9270 ;; Registers used:
  9271 ;;		wreg
  9272 ;; Tracked objects:
  9273 ;;		On entry : 0/0
  9274 ;;		On exit  : 0/0
  9275 ;;		Unchanged: 0/0
  9276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9281 ;;Total ram usage:        1 bytes
  9282 ;; Hardware stack levels used:    1
  9283 ;; Hardware stack levels required when called:    5
  9284 ;; This function calls:
  9285 ;;		Nothing
  9286 ;; This function is called by:
  9287 ;;		_RF_Initialization
  9288 ;; This function uses a non-reentrant model
  9289 ;;
  9290                           
  9291                           
  9292                           ;psect for function _setRF_Initialization
  9293  1E51                     _setRF_Initialization:	
  9294                           
  9295                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9296                           
  9297                           ;incstack = 0
  9298                           ; Regs used in _setRF_Initialization: [wreg]
  9299  1E51  3015               	movlw	21
  9300  1E52  0020               	movlb	0	; select bank0
  9301  1E53  00A0               	movwf	??_setRF_Initialization
  9302  1E54  0820               	movf	??_setRF_Initialization,w
  9303  1E55  0021               	movlb	1	; select bank1
  9304  1E56  00D5               	movwf	_Tx_Length^(0+128)
  9305  1E57  0008               	return
  9306  1E58                     __end_of_setRF_Initialization:	
  9307                           
  9308                           	psect	text47
  9309  1DF1                     __ptext47:	
  9310 ;; *************** function _PowerFault_Main *****************
  9311 ;; Defined at:
  9312 ;;		line 17 in file "../src/PowerFault_B1.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;		None
  9315 ;; Auto vars:     Size  Location     Type
  9316 ;;		None
  9317 ;; Return value:  Size  Location     Type
  9318 ;;		None               void
  9319 ;; Registers used:
  9320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9321 ;; Tracked objects:
  9322 ;;		On entry : 0/0
  9323 ;;		On exit  : 0/0
  9324 ;;		Unchanged: 0/0
  9325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9330 ;;Total ram usage:        0 bytes
  9331 ;; Hardware stack levels used:    1
  9332 ;; Hardware stack levels required when called:   11
  9333 ;; This function calls:
  9334 ;;		_setPowerFault_Main
  9335 ;; This function is called by:
  9336 ;;		_main
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           
  9341                           ;psect for function _PowerFault_Main
  9342  1DF1                     _PowerFault_Main:	
  9343                           
  9344                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9345                           
  9346                           ;incstack = 0
  9347                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9348  1DF1  318D  2582         	fcall	_setPowerFault_Main
  9349  1DF3  0008               	return
  9350  1DF4                     __end_of_PowerFault_Main:	
  9351                           
  9352                           	psect	text48
  9353  0D82                     __ptext48:	
  9354 ;; *************** function _setPowerFault_Main *****************
  9355 ;; Defined at:
  9356 ;;		line 55 in file "../src/PowerFault_B1.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;		None
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;		None
  9361 ;; Return value:  Size  Location     Type
  9362 ;;		None               void
  9363 ;; Registers used:
  9364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;Total ram usage:        1 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:   10
  9377 ;; This function calls:
  9378 ;;		_getTemp_Safe
  9379 ;;		_setPowerFault_Exceptions
  9380 ;; This function is called by:
  9381 ;;		_PowerFault_Main
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function _setPowerFault_Main
  9387  0D82                     _setPowerFault_Main:	
  9388                           
  9389                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9390                           
  9391                           ;incstack = 0
  9392                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9393  0D82  0021               	movlb	1	; select bank1
  9394  0D83  1C3E               	btfss	_PF1^(0+128),0
  9395  0D84  0008               	return
  9396                           
  9397                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9398  0D85  19BE               	btfsc	_PF1^(0+128),3
  9399  0D86  2DA4               	goto	l7767
  9400                           
  9401                           ;PowerFault_B1.c: 58: PF1.Time++;
  9402  0D87  3001               	movlw	1
  9403  0D88  07C0               	addwf	(_PF1^(0+128)+2),f
  9404  0D89  3000               	movlw	0
  9405  0D8A  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9406                           
  9407                           ;PowerFault_B1.c: 60: {
  9408                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9409  0D8B  3002               	movlw	2
  9410  0D8C  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9411  0D8D  30BC               	movlw	188
  9412  0D8E  1903               	skipnz
  9413  0D8F  0240               	subwf	(_PF1^(0+128)+2),w
  9414  0D90  1C03               	skipc
  9415  0D91  0008               	return
  9416  0D92  319E  2623  318D   	fcall	_getTemp_Safe
  9417  0D95  3A01               	xorlw	1
  9418  0D96  1D03               	skipz
  9419  0D97  2D9E               	goto	l7765
  9420                           
  9421                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9422  0D98  0021               	movlb	1	; select bank1
  9423  0D99  01C0               	clrf	(_PF1^(0+128)+2)
  9424  0D9A  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9425                           
  9426                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9427  0D9B  15BE               	bsf	_PF1^(0+128),3
  9428                           
  9429                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9430  0D9C  113E               	bcf	_PF1^(0+128),2
  9431                           
  9432                           ;PowerFault_B1.c: 65: } else {
  9433  0D9D  0008               	return
  9434  0D9E                     l7765:	
  9435                           
  9436                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9437  0D9E  30BC               	movlw	188
  9438  0D9F  0021               	movlb	1	; select bank1
  9439  0DA0  00C0               	movwf	(_PF1^(0+128)+2)
  9440  0DA1  3002               	movlw	2
  9441  0DA2  00C1               	movwf	(_PF1^(0+128)+3)
  9442                           
  9443                           ;PowerFault_B1.c: 67: }
  9444                           ;PowerFault_B1.c: 68: }
  9445                           ;PowerFault_B1.c: 69: } else {
  9446  0DA3  0008               	return
  9447  0DA4                     l7767:	
  9448                           
  9449                           ;PowerFault_B1.c: 70: PF1.Time++;
  9450  0DA4  3001               	movlw	1
  9451  0DA5  07C0               	addwf	(_PF1^(0+128)+2),f
  9452  0DA6  3000               	movlw	0
  9453  0DA7  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9454                           
  9455                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9456  0DA8  3000               	movlw	0
  9457  0DA9  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9458  0DAA  3002               	movlw	2
  9459  0DAB  1903               	skipnz
  9460  0DAC  0240               	subwf	(_PF1^(0+128)+2),w
  9461  0DAD  1C03               	skipc
  9462  0DAE  0008               	return
  9463                           
  9464                           ;PowerFault_B1.c: 72: {
  9465                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9466  0DAF  01C0               	clrf	(_PF1^(0+128)+2)
  9467  0DB0  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9468                           
  9469                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9470  0DB1  11BE               	bcf	_PF1^(0+128),3
  9471                           
  9472                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9473  0DB2  1CBE               	btfss	_PF1^(0+128),1
  9474  0DB3  2DD2               	goto	l7789
  9475                           
  9476                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9477  0DB4  3001               	movlw	1
  9478  0DB5  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9479  0DB6  3091               	movlw	145
  9480  0DB7  1903               	skipnz
  9481  0DB8  0242               	subwf	(_PF1^(0+128)+4),w
  9482  0DB9  1803               	skipnc
  9483  0DBA  2DF0               	goto	l7801
  9484  0DBB  3000               	movlw	0
  9485  0DBC  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9486  0DBD  30C8               	movlw	200
  9487  0DBE  1903               	skipnz
  9488  0DBF  0242               	subwf	(_PF1^(0+128)+4),w
  9489  0DC0  1C03               	skipc
  9490  0DC1  2DF0               	goto	l7801
  9491                           
  9492                           ;PowerFault_B1.c: 78: PF1.Count++;
  9493  0DC2  3001               	movlw	1
  9494  0DC3  0020               	movlb	0	; select bank0
  9495  0DC4  00B1               	movwf	??_setPowerFault_Main
  9496  0DC5  0831               	movf	??_setPowerFault_Main,w
  9497  0DC6  0021               	movlb	1	; select bank1
  9498  0DC7  07BF               	addwf	(_PF1^(0+128)+1),f
  9499                           
  9500                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9501  0DC8  3002               	movlw	2
  9502  0DC9  023F               	subwf	(_PF1^(0+128)+1),w
  9503  0DCA  1C03               	skipc
  9504  0DCB  2DF2               	goto	l7803
  9505                           
  9506                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9507  0DCC  01BF               	clrf	(_PF1^(0+128)+1)
  9508                           
  9509                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9510  0DCD  3000               	movlw	0
  9511  0DCE  3188  2000  318D   	fcall	_setPowerFault_Exceptions
  9512                           
  9513                           ;PowerFault_B1.c: 82: }
  9514                           ;PowerFault_B1.c: 83: } else {
  9515  0DD1  2DF2               	goto	l7803
  9516  0DD2                     l7789:	
  9517                           ;PowerFault_B1.c: 85: }
  9518                           ;PowerFault_B1.c: 86: } else {
  9519                           
  9520                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9521                           
  9522                           
  9523                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9524  0DD2  3001               	movlw	1
  9525  0DD3  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9526  0DD4  3090               	movlw	144
  9527  0DD5  1903               	skipnz
  9528  0DD6  0242               	subwf	(_PF1^(0+128)+4),w
  9529  0DD7  1803               	skipnc
  9530  0DD8  2DE0               	goto	l7793
  9531  0DD9  3000               	movlw	0
  9532  0DDA  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9533  0DDB  30D3               	movlw	211
  9534  0DDC  1903               	skipnz
  9535  0DDD  0242               	subwf	(_PF1^(0+128)+4),w
  9536  0DDE  1803               	skipnc
  9537  0DDF  2DF0               	goto	l7801
  9538  0DE0                     l7793:	
  9539                           
  9540                           ;PowerFault_B1.c: 88: PF1.Count++;
  9541  0DE0  3001               	movlw	1
  9542  0DE1  0020               	movlb	0	; select bank0
  9543  0DE2  00B1               	movwf	??_setPowerFault_Main
  9544  0DE3  0831               	movf	??_setPowerFault_Main,w
  9545  0DE4  0021               	movlb	1	; select bank1
  9546  0DE5  07BF               	addwf	(_PF1^(0+128)+1),f
  9547                           
  9548                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9549  0DE6  3002               	movlw	2
  9550  0DE7  023F               	subwf	(_PF1^(0+128)+1),w
  9551  0DE8  1C03               	skipc
  9552  0DE9  2DF2               	goto	l7803
  9553                           
  9554                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9555  0DEA  01BF               	clrf	(_PF1^(0+128)+1)
  9556                           
  9557                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9558  0DEB  3001               	movlw	1
  9559  0DEC  3188  2000  318D   	fcall	_setPowerFault_Exceptions
  9560                           
  9561                           ;PowerFault_B1.c: 92: }
  9562                           ;PowerFault_B1.c: 93: } else {
  9563  0DEF  2DF2               	goto	l7803
  9564  0DF0                     l7801:	
  9565                           
  9566                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9567  0DF0  0021               	movlb	1	; select bank1
  9568  0DF1  01BF               	clrf	(_PF1^(0+128)+1)
  9569  0DF2                     l7803:	
  9570                           
  9571                           ;PowerFault_B1.c: 95: }
  9572                           ;PowerFault_B1.c: 97: }
  9573                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9574  0DF2  0021               	movlb	1	; select bank1
  9575  0DF3  1CBE               	btfss	_PF1^(0+128),1
  9576                           
  9577                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9578  0DF4  153E               	bsf	_PF1^(0+128),2
  9579                           
  9580                           ;PowerFault_B1.c: 100: }
  9581                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9582  0DF5  01C2               	clrf	(_PF1^(0+128)+4)
  9583  0DF6  01C3               	clrf	((_PF1+1)^(0+128)+4)
  9584  0DF7  0008               	return
  9585  0DF8                     __end_of_setPowerFault_Main:	
  9586                           
  9587                           	psect	text49
  9588  0800                     __ptext49:	
  9589 ;; *************** function _setPowerFault_Exceptions *****************
  9590 ;; Defined at:
  9591 ;;		line 107 in file "../src/PowerFault_B1.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;  command         1    wreg     unsigned char 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  command         1   16[BANK0 ] unsigned char 
  9596 ;;  i               1   15[BANK0 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;		None               void
  9599 ;; Registers used:
  9600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9610 ;;Total ram usage:        3 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:    9
  9613 ;; This function calls:
  9614 ;;		_DimmerLights_Exceptions
  9615 ;;		_setLED
  9616 ;;		_setRF_Enable
  9617 ;;		_setSw_Enable
  9618 ;; This function is called by:
  9619 ;;		_setPowerFault_Main
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           
  9624                           ;psect for function _setPowerFault_Exceptions
  9625  0800                     _setPowerFault_Exceptions:	
  9626                           
  9627                           ;incstack = 0
  9628                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9629                           ;setPowerFault_Exceptions@command stored from wreg
  9630  0800  0020               	movlb	0	; select bank0
  9631  0801  00B0               	movwf	setPowerFault_Exceptions@command
  9632                           
  9633                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9634  0802  0830               	movf	setPowerFault_Exceptions@command,w
  9635  0803  3A01               	xorlw	1
  9636  0804  3000               	movlw	0
  9637  0805  1D03               	skipz
  9638  0806  3001               	movlw	1
  9639  0807  00AE               	movwf	??_setPowerFault_Exceptions
  9640  0808  082E               	movf	??_setPowerFault_Exceptions,w
  9641  0809  00AF               	movwf	setPowerFault_Exceptions@i
  9642                           
  9643                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
  9644  080A  0830               	movf	setPowerFault_Exceptions@command,w
  9645  080B  0021               	movlb	1	; select bank1
  9646  080C  10BE               	bcf	_PF1^(0+128),1
  9647  080D  1D03               	skipz
  9648  080E  14BE               	bsf	_PF1^(0+128),1
  9649                           
  9650                           ;PowerFault_B1.c: 110: PF1.Safe = i;
  9651  080F  0020               	movlb	0	; select bank0
  9652  0810  082F               	movf	setPowerFault_Exceptions@i,w
  9653  0811  0021               	movlb	1	; select bank1
  9654  0812  113E               	bcf	_PF1^(0+128),2
  9655  0813  1D03               	skipz
  9656  0814  153E               	bsf	_PF1^(0+128),2
  9657                           
  9658                           ;PowerFault_B1.c: 111: if (command == 1) {
  9659  0815  0020               	movlb	0	; select bank0
  9660  0816  0830               	movf	setPowerFault_Exceptions@command,w
  9661  0817  3A01               	xorlw	1
  9662  0818  1D03               	skipz
  9663  0819  2825               	goto	l1702
  9664                           
  9665                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
  9666  081A  3003               	movlw	3
  9667  081B  3195  253D  3188   	fcall	_DimmerLights_Exceptions
  9668                           
  9669                           ;PowerFault_B1.c: 114: setLED(2, 1);
  9670  081E  0020               	movlb	0	; select bank0
  9671  081F  01A1               	clrf	setLED@command
  9672  0820  0AA1               	incf	setLED@command,f
  9673  0821  3002               	movlw	2
  9674  0822  318B  230A  3188   	fcall	_setLED
  9675  0825                     l1702:	
  9676                           
  9677                           ;PowerFault_B1.c: 116: }
  9678                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
  9679  0825  0020               	movlb	0	; select bank0
  9680  0826  0830               	movf	setPowerFault_Exceptions@command,w
  9681  0827  3E0A               	addlw	10
  9682  0828  00AE               	movwf	??_setPowerFault_Exceptions
  9683  0829  082E               	movf	??_setPowerFault_Exceptions,w
  9684  082A  00A1               	movwf	setLED@command
  9685  082B  3063               	movlw	99
  9686  082C  318B  230A  3188   	fcall	_setLED
  9687                           
  9688                           ;PowerFault_B1.c: 119: setSw_Enable(i);
  9689  082F  0020               	movlb	0	; select bank0
  9690  0830  082F               	movf	setPowerFault_Exceptions@i,w
  9691  0831  319F  2763  3188   	fcall	_setSw_Enable
  9692                           
  9693                           ;PowerFault_B1.c: 121: setRF_Enable(i);
  9694  0834  0020               	movlb	0	; select bank0
  9695  0835  082F               	movf	setPowerFault_Exceptions@i,w
  9696  0836  3190  2066         	fcall	_setRF_Enable
  9697  0838  0008               	return
  9698  0839                     __end_of_setPowerFault_Exceptions:	
  9699                           
  9700                           	psect	text50
  9701  1F63                     __ptext50:	
  9702 ;; *************** function _setSw_Enable *****************
  9703 ;; Defined at:
  9704 ;;		line 89 in file "../src/Switch_B1.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  command         1    wreg     unsigned char 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  command         1    2[BANK0 ] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    6
  9725 ;; This function calls:
  9726 ;;		_SwPointSelect
  9727 ;; This function is called by:
  9728 ;;		_setOverTemp_Exceptions
  9729 ;;		_setPowerFault_Exceptions
  9730 ;;		_my_Main
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function _setSw_Enable
  9736  1F63                     _setSw_Enable:	
  9737                           
  9738                           ;incstack = 0
  9739                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9740                           ;setSw_Enable@command stored from wreg
  9741  1F63  0020               	movlb	0	; select bank0
  9742  1F64  00A2               	movwf	setSw_Enable@command
  9743                           
  9744                           ;Switch_B1.c: 92: SwPointSelect(1);
  9745  1F65  3001               	movlw	1
  9746  1F66  319E  26D5         	fcall	_SwPointSelect
  9747                           
  9748                           ;Switch_B1.c: 93: Sw->Enable = command;
  9749  1F68  0020               	movlb	0	; select bank0
  9750  1F69  086E               	movf	_Sw,w
  9751  1F6A  0086               	movwf	6
  9752  1F6B  3001               	movlw	1	; select bank2/3
  9753  1F6C  0087               	movwf	7
  9754  1F6D  0822               	movf	setSw_Enable@command,w
  9755  1F6E  1001               	bcf	1,0
  9756  1F6F  1D03               	skipz
  9757  1F70  1401               	bsf	1,0
  9758  1F71  0008               	return
  9759  1F72                     __end_of_setSw_Enable:	
  9760                           
  9761                           	psect	text51
  9762  1066                     __ptext51:	
  9763 ;; *************** function _setRF_Enable *****************
  9764 ;; Defined at:
  9765 ;;		line 176 in file "../src/RF_Control_B1.c"
  9766 ;; Parameters:    Size  Location     Type
  9767 ;;  command         1    wreg     unsigned char 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  command         1    0[BANK0 ] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;		None               void
  9772 ;; Registers used:
  9773 ;;		wreg, status,2
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9783 ;;Total ram usage:        1 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    5
  9786 ;; This function calls:
  9787 ;;		Nothing
  9788 ;; This function is called by:
  9789 ;;		_setOverTemp_Exceptions
  9790 ;;		_setPowerFault_Exceptions
  9791 ;;		_my_Main
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _setRF_Enable
  9797  1066                     _setRF_Enable:	
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _setRF_Enable: [wreg+status,2]
  9801                           ;setRF_Enable@command stored from wreg
  9802  1066  0020               	movlb	0	; select bank0
  9803  1067  00A0               	movwf	setRF_Enable@command
  9804                           
  9805                           ;RF_Control_B1.c: 177: RF1.Enable = command;
  9806  1068  0820               	movf	setRF_Enable@command,w
  9807  1069  0021               	movlb	1	; select bank1
  9808  106A  1046               	bcf	_RF1^(0+128),0
  9809  106B  1D03               	skipz
  9810  106C  1446               	bsf	_RF1^(0+128),0
  9811                           
  9812                           ;RF_Control_B1.c: 178: RF1.Learn = 0;
  9813  106D  1346               	bcf	_RF1^(0+128),6
  9814                           
  9815                           ;RF_Control_B1.c: 179: RF1.TransceiveGO = 0;
  9816  106E  1146               	bcf	_RF1^(0+128),2
  9817                           
  9818                           ;RF_Control_B1.c: 180: RF1.RxStatus = 0;
  9819  106F  11C6               	bcf	_RF1^(0+128),3
  9820                           
  9821                           ;RF_Control_B1.c: 181: RF1.ReceiveGO = 0;
  9822  1070  10C6               	bcf	_RF1^(0+128),1
  9823                           
  9824                           ;RF_Control_B1.c: 182: RF1.DebounceTime = 0;
  9825  1071  01CA               	clrf	(_RF1^(0+128)+4)
  9826                           
  9827                           ;RF_Control_B1.c: 183: RF1.Debounce = 0;
  9828  1072  12C6               	bcf	_RF1^(0+128),5
  9829  1073  0008               	return
  9830  1074                     __end_of_setRF_Enable:	
  9831                           
  9832                           	psect	text52
  9833  153D                     __ptext52:	
  9834 ;; *************** function _DimmerLights_Exceptions *****************
  9835 ;; Defined at:
  9836 ;;		line 513 in file "../src/Dimmer_B1.c"
  9837 ;; Parameters:    Size  Location     Type
  9838 ;;  status          1    wreg     unsigned char 
  9839 ;; Auto vars:     Size  Location     Type
  9840 ;;  status          1   13[BANK0 ] unsigned char 
  9841 ;; Return value:  Size  Location     Type
  9842 ;;		None               void
  9843 ;; Registers used:
  9844 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9845 ;; Tracked objects:
  9846 ;;		On entry : 0/0
  9847 ;;		On exit  : 0/0
  9848 ;;		Unchanged: 0/0
  9849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9854 ;;Total ram usage:        1 bytes
  9855 ;; Hardware stack levels used:    1
  9856 ;; Hardware stack levels required when called:    8
  9857 ;; This function calls:
  9858 ;;		_getDimmerLights_StatusFlag
  9859 ;;		_setBuz
  9860 ;;		_setDimmerLights_ERROR
  9861 ;;		_setDimmerLights_TriggerERROR
  9862 ;; This function is called by:
  9863 ;;		_setOverTemp_Exceptions
  9864 ;;		_setPowerFault_Exceptions
  9865 ;; This function uses a non-reentrant model
  9866 ;;
  9867                           
  9868                           
  9869                           ;psect for function _DimmerLights_Exceptions
  9870  153D                     _DimmerLights_Exceptions:	
  9871                           
  9872                           ;incstack = 0
  9873                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9874                           ;DimmerLights_Exceptions@status stored from wreg
  9875  153D  0020               	movlb	0	; select bank0
  9876  153E  00AD               	movwf	DimmerLights_Exceptions@status
  9877                           
  9878                           ;Dimmer_B1.c: 514: if (status == 1) {
  9879  153F  082D               	movf	DimmerLights_Exceptions@status,w
  9880  1540  3A01               	xorlw	1
  9881  1541  1D03               	skipz
  9882  1542  2D53               	goto	l7537
  9883                           
  9884                           ;Dimmer_B1.c: 515: if (getDimmerLights_StatusFlag() == 1) {
  9885  1543  319E  2694  3195   	fcall	_getDimmerLights_StatusFlag
  9886  1546  3A01               	xorlw	1
  9887  1547  1D03               	skipz
  9888  1548  2D6B               	goto	l7545
  9889                           
  9890                           ;Dimmer_B1.c: 516: setBuz(10, 300);
  9891  1549  302C               	movlw	44
  9892  154A  0020               	movlb	0	; select bank0
  9893  154B  00A9               	movwf	setBuz@time
  9894  154C  3001               	movlw	1
  9895  154D  00AA               	movwf	setBuz@time+1
  9896  154E  300A               	movlw	10
  9897  154F  3189  2139  3195   	fcall	_setBuz
  9898  1552  2D6B               	goto	l7545
  9899  1553                     l7537:	
  9900                           ;Dimmer_B1.c: 528: } else if (status == 2)
  9901                           
  9902                           ;Dimmer_B1.c: 517: }
  9903                           ;Dimmer_B1.c: 520: setDimmerLights_ERROR(1);
  9904                           
  9905  1553  0020               	movlb	0	; select bank0
  9906  1554  082D               	movf	DimmerLights_Exceptions@status,w
  9907  1555  3A02               	xorlw	2
  9908  1556  1D03               	skipz
  9909  1557  2D66               	goto	l7543
  9910                           
  9911                           ;Dimmer_B1.c: 529: {
  9912                           ;Dimmer_B1.c: 530: setBuz(5, 300);
  9913  1558  302C               	movlw	44
  9914  1559  00A9               	movwf	setBuz@time
  9915  155A  3001               	movlw	1
  9916  155B  00AA               	movwf	setBuz@time+1
  9917  155C  3005               	movlw	5
  9918  155D  3189  2139  3195   	fcall	_setBuz
  9919                           
  9920                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(Dimmer->Load);
  9921  1560  0021               	movlb	1	; select bank1
  9922  1561  0A50               	incf	_Dimmer^(0+128),w
  9923  1562  0086               	movwf	6
  9924  1563  0187               	clrf	7
  9925  1564  0801               	movf	1,w
  9926  1565  2D6C               	goto	L4
  9927  1566                     l7543:	
  9928                           ;Dimmer_B1.c: 532: } else if (status == 3)
  9929                           
  9930  1566  0020               	movlb	0	; select bank0
  9931  1567  082D               	movf	DimmerLights_Exceptions@status,w
  9932  1568  3A03               	xorlw	3
  9933  1569  1D03               	skipz
  9934  156A  2D6F               	goto	l781
  9935  156B                     l7545:	
  9936                           
  9937                           ;Dimmer_B1.c: 533: {
  9938                           ;Dimmer_B1.c: 535: setDimmerLights_ERROR(1);
  9939  156B  3001               	movlw	1
  9940  156C                     L4:	
  9941  156C  3197  27B0  3195   	fcall	_setDimmerLights_ERROR
  9942  156F                     l781:	
  9943                           
  9944                           ;Dimmer_B1.c: 543: }
  9945                           ;Dimmer_B1.c: 546: setDimmerLights_TriggerERROR(1, 0);
  9946  156F  0020               	movlb	0	; select bank0
  9947  1570  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9948  1571  3001               	movlw	1
  9949  1572  3193  2371  3195   	fcall	_setDimmerLights_TriggerERROR
  9950                           
  9951                           ;Dimmer_B1.c: 555: if (myMain.SelfTest == 0) {
  9952  1575  0021               	movlb	1	; select bank1
  9953  1576  1B20               	btfsc	_myMain^(0+128),6
  9954  1577  0008               	return
  9955                           
  9956                           ;Dimmer_B1.c: 556: myMain.i = 0;
  9957  1578  102E               	bcf	(_myMain^(0+128)+14),0
  9958                           
  9959                           ;Dimmer_B1.c: 557: myMain.j = 0;
  9960  1579  10AE               	bcf	(_myMain^(0+128)+14),1
  9961                           
  9962                           ;Dimmer_B1.c: 558: myMain.k = 1;
  9963  157A  152E               	bsf	(_myMain^(0+128)+14),2
  9964                           
  9965                           ;Dimmer_B1.c: 559: myMain.Count2 = 0;
  9966  157B  01A7               	clrf	(_myMain^(0+128)+7)
  9967  157C  01A8               	clrf	((_myMain+1)^(0+128)+7)
  9968  157D  0008               	return
  9969  157E                     __end_of_DimmerLights_Exceptions:	
  9970                           
  9971                           	psect	text53
  9972  1371                     __ptext53:	
  9973 ;; *************** function _setDimmerLights_TriggerERROR *****************
  9974 ;; Defined at:
  9975 ;;		line 582 in file "../src/Dimmer_B1.c"
  9976 ;; Parameters:    Size  Location     Type
  9977 ;;  lights          1    wreg     unsigned char 
  9978 ;;  command         1    2[BANK0 ] unsigned char 
  9979 ;; Auto vars:     Size  Location     Type
  9980 ;;  lights          1    3[BANK0 ] unsigned char 
  9981 ;; Return value:  Size  Location     Type
  9982 ;;		None               void
  9983 ;; Registers used:
  9984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9985 ;; Tracked objects:
  9986 ;;		On entry : 0/0
  9987 ;;		On exit  : 0/0
  9988 ;;		Unchanged: 0/0
  9989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9990 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9994 ;;Total ram usage:        2 bytes
  9995 ;; Hardware stack levels used:    1
  9996 ;; Hardware stack levels required when called:    6
  9997 ;; This function calls:
  9998 ;;		_DimmerLightsPointSelect
  9999 ;; This function is called by:
 10000 ;;		_DimmerLights_Exceptions
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           
 10005                           ;psect for function _setDimmerLights_TriggerERROR
 10006  1371                     _setDimmerLights_TriggerERROR:	
 10007                           
 10008                           ;incstack = 0
 10009                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10010                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10011  1371  0020               	movlb	0	; select bank0
 10012  1372  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10013                           
 10014                           ;Dimmer_B1.c: 584: DimmerLightsPointSelect(lights);
 10015  1373  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10016  1374  319E  26BF         	fcall	_DimmerLightsPointSelect
 10017                           
 10018                           ;Dimmer_B1.c: 585: DimmerLights->Trigger = command;
 10019  1376  0020               	movlb	0	; select bank0
 10020  1377  086D               	movf	_DimmerLights,w
 10021  1378  3E08               	addlw	8
 10022  1379  0086               	movwf	6
 10023  137A  3001               	movlw	1	; select bank2/3
 10024  137B  0087               	movwf	7
 10025  137C  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10026  137D  1101               	bcf	1,2
 10027  137E  1D03               	skipz
 10028  137F  1501               	bsf	1,2
 10029                           
 10030                           ;Dimmer_B1.c: 586: DimmerLights->Switch = command;
 10031  1380  086D               	movf	_DimmerLights,w
 10032  1381  3E08               	addlw	8
 10033  1382  0086               	movwf	6
 10034  1383  3001               	movlw	1	; select bank2/3
 10035  1384  0087               	movwf	7
 10036  1385  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10037  1386  1081               	bcf	1,1
 10038  1387  1D03               	skipz
 10039  1388  1481               	bsf	1,1
 10040                           
 10041                           ;Dimmer_B1.c: 587: DimmerLights->TriggerAdj = command;
 10042  1389  086D               	movf	_DimmerLights,w
 10043  138A  3E08               	addlw	8
 10044  138B  0086               	movwf	6
 10045  138C  3001               	movlw	1	; select bank2/3
 10046  138D  0087               	movwf	7
 10047  138E  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10048  138F  1201               	bcf	1,4
 10049  1390  1D03               	skipz
 10050  1391  1601               	bsf	1,4
 10051                           
 10052                           ;Dimmer_B1.c: 588: DimmerLights->AdjGo = command;
 10053  1392  086D               	movf	_DimmerLights,w
 10054  1393  3E08               	addlw	8
 10055  1394  0086               	movwf	6
 10056  1395  3001               	movlw	1	; select bank2/3
 10057  1396  0087               	movwf	7
 10058  1397  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10059  1398  1181               	bcf	1,3
 10060  1399  1D03               	skipz
 10061  139A  1581               	bsf	1,3
 10062  139B  0008               	return
 10063  139C                     __end_of_setDimmerLights_TriggerERROR:	
 10064                           
 10065                           	psect	text54
 10066  17B0                     __ptext54:	
 10067 ;; *************** function _setDimmerLights_ERROR *****************
 10068 ;; Defined at:
 10069 ;;		line 564 in file "../src/Dimmer_B1.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  lights          1    wreg     unsigned char 
 10072 ;; Auto vars:     Size  Location     Type
 10073 ;;  lights          1    5[BANK0 ] unsigned char 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;		None               void
 10076 ;; Registers used:
 10077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10087 ;;Total ram usage:        2 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    7
 10090 ;; This function calls:
 10091 ;;		_DimmerLightsPointSelect
 10092 ;;		_setLED
 10093 ;;		_setRFSW_Status
 10094 ;;		_setSw_Status
 10095 ;; This function is called by:
 10096 ;;		_DimmerLights_Exceptions
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           
 10101                           ;psect for function _setDimmerLights_ERROR
 10102  17B0                     _setDimmerLights_ERROR:	
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10106                           ;setDimmerLights_ERROR@lights stored from wreg
 10107  17B0  0020               	movlb	0	; select bank0
 10108  17B1  00A5               	movwf	setDimmerLights_ERROR@lights
 10109                           
 10110                           ;Dimmer_B1.c: 565: DimmerLightsPointSelect(lights);
 10111  17B2  0825               	movf	setDimmerLights_ERROR@lights,w
 10112  17B3  319E  26BF  3197   	fcall	_DimmerLightsPointSelect
 10113                           
 10114                           ;Dimmer_B1.c: 566: if (DimmerLights->Status == 1) {
 10115  17B6  0020               	movlb	0	; select bank0
 10116  17B7  086D               	movf	_DimmerLights,w
 10117  17B8  0086               	movwf	6
 10118  17B9  3001               	movlw	1	; select bank2/3
 10119  17BA  0087               	movwf	7
 10120  17BB  1E81               	btfss	1,5
 10121  17BC  0008               	return
 10122                           
 10123                           ;Dimmer_B1.c: 568: DimmerLights->Signal = 0;
 10124  17BD  086D               	movf	_DimmerLights,w
 10125  17BE  0086               	movwf	6
 10126  17BF  3001               	movlw	1	; select bank2/3
 10127  17C0  0087               	movwf	7
 10128  17C1  1081               	bcf	1,1
 10129                           
 10130                           ;Dimmer_B1.c: 569: DimmerLights->AdjFlag = 0;
 10131  17C2  086D               	movf	_DimmerLights,w
 10132  17C3  0086               	movwf	6
 10133  17C4  3001               	movlw	1	; select bank2/3
 10134  17C5  0087               	movwf	7
 10135  17C6  1181               	bcf	1,3
 10136                           
 10137                           ;Dimmer_B1.c: 570: DimmerLights->AdjStatus = 0;
 10138  17C7  086D               	movf	_DimmerLights,w
 10139  17C8  0086               	movwf	6
 10140  17C9  3001               	movlw	1	; select bank2/3
 10141  17CA  0087               	movwf	7
 10142  17CB  1201               	bcf	1,4
 10143                           
 10144                           ;Dimmer_B1.c: 571: DimmerLights->StatusFlag = 0;
 10145  17CC  086D               	movf	_DimmerLights,w
 10146  17CD  0086               	movwf	6
 10147  17CE  3001               	movlw	1	; select bank2/3
 10148  17CF  0087               	movwf	7
 10149  17D0  1301               	bcf	1,6
 10150                           
 10151                           ;Dimmer_B1.c: 572: DimmerLights->DimmingTimeValue = 7;
 10152  17D1  3007               	movlw	7
 10153  17D2  00A4               	movwf	??_setDimmerLights_ERROR
 10154  17D3  086D               	movf	_DimmerLights,w
 10155  17D4  3E02               	addlw	2
 10156  17D5  0086               	movwf	6
 10157  17D6  3001               	movlw	1	; select bank2/3
 10158  17D7  0087               	movwf	7
 10159  17D8  0824               	movf	??_setDimmerLights_ERROR,w
 10160  17D9  0081               	movwf	1
 10161                           
 10162                           ;Dimmer_B1.c: 573: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10163  17DA  086D               	movf	_DimmerLights,w
 10164  17DB  3E06               	addlw	6
 10165  17DC  0086               	movwf	6
 10166  17DD  3001               	movlw	1	; select bank2/3
 10167  17DE  0087               	movwf	7
 10168  17DF  0801               	movf	1,w
 10169  17E0  00A4               	movwf	??_setDimmerLights_ERROR
 10170  17E1  086D               	movf	_DimmerLights,w
 10171  17E2  3E04               	addlw	4
 10172  17E3  0086               	movwf	6
 10173  17E4  3001               	movlw	1	; select bank2/3
 10174  17E5  0087               	movwf	7
 10175  17E6  0824               	movf	??_setDimmerLights_ERROR,w
 10176  17E7  0081               	movwf	1
 10177                           
 10178                           ;Dimmer_B1.c: 574: Dimmer->Detect = 1;
 10179  17E8  0021               	movlb	1	; select bank1
 10180  17E9  0850               	movf	_Dimmer^(0+128),w
 10181  17EA  0086               	movwf	6
 10182  17EB  0187               	clrf	7
 10183  17EC  1401               	bsf	1,0
 10184                           
 10185                           ;Dimmer_B1.c: 575: ;;
 10186                           ;Dimmer_B1.c: 576: setLED(lights, 1);
 10187  17ED  0020               	movlb	0	; select bank0
 10188  17EE  01A1               	clrf	setLED@command
 10189  17EF  0AA1               	incf	setLED@command,f
 10190  17F0  0825               	movf	setDimmerLights_ERROR@lights,w
 10191  17F1  318B  230A  3197   	fcall	_setLED
 10192                           
 10193                           ;Dimmer_B1.c: 577: setSw_Status(lights, 0);
 10194  17F4  0020               	movlb	0	; select bank0
 10195  17F5  01A2               	clrf	setSw_Status@command
 10196  17F6  0825               	movf	setDimmerLights_ERROR@lights,w
 10197  17F7  319F  2745  3197   	fcall	_setSw_Status
 10198                           
 10199                           ;Dimmer_B1.c: 578: setRFSW_Status(lights, 0);
 10200  17FA  0020               	movlb	0	; select bank0
 10201  17FB  01A2               	clrf	setRFSW_Status@command
 10202  17FC  0825               	movf	setDimmerLights_ERROR@lights,w
 10203  17FD  319F  2737         	fcall	_setRFSW_Status
 10204  17FF  0008               	return
 10205  1800                     __end_of_setDimmerLights_ERROR:	
 10206                           
 10207                           	psect	text55
 10208  1E23                     __ptext55:	
 10209 ;; *************** function _getTemp_Safe *****************
 10210 ;; Defined at:
 10211 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10212 ;; Parameters:    Size  Location     Type
 10213 ;;		None
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;		None
 10216 ;; Return value:  Size  Location     Type
 10217 ;;                  1    wreg      unsigned char 
 10218 ;; Registers used:
 10219 ;;		wreg, status,2, status,0
 10220 ;; Tracked objects:
 10221 ;;		On entry : 0/0
 10222 ;;		On exit  : 0/0
 10223 ;;		Unchanged: 0/0
 10224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10228 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10229 ;;Total ram usage:        0 bytes
 10230 ;; Hardware stack levels used:    1
 10231 ;; Hardware stack levels required when called:    5
 10232 ;; This function calls:
 10233 ;;		Nothing
 10234 ;; This function is called by:
 10235 ;;		_setPowerFault_Main
 10236 ;; This function uses a non-reentrant model
 10237 ;;
 10238                           
 10239                           
 10240                           ;psect for function _getTemp_Safe
 10241  1E23                     _getTemp_Safe:	
 10242                           
 10243                           ;OverTemperature_B1.c: 22: return Temp1.Safe;
 10244                           
 10245                           ;incstack = 0
 10246                           ; Regs used in _getTemp_Safe: [wreg+status,2+status,0]
 10247  1E23  0021               	movlb	1	; select bank1
 10248  1E24  0E59               	swapf	_Temp1^(0+128),w
 10249  1E25  3901               	andlw	1
 10250  1E26  0008               	return
 10251  1E27                     __end_of_getTemp_Safe:	
 10252                           
 10253                           	psect	text56
 10254  1DEE                     __ptext56:	
 10255 ;; *************** function _PowerFault_Initialization *****************
 10256 ;; Defined at:
 10257 ;;		line 10 in file "../src/PowerFault_B1.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;		None               void
 10264 ;; Registers used:
 10265 ;;		status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        0 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    6
 10278 ;; This function calls:
 10279 ;;		_setPowerFault_Initialization
 10280 ;; This function is called by:
 10281 ;;		_main
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           
 10286                           ;psect for function _PowerFault_Initialization
 10287  1DEE                     _PowerFault_Initialization:	
 10288                           
 10289                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10293  1DEE  319E  261F         	fcall	_setPowerFault_Initialization
 10294  1DF0  0008               	return
 10295  1DF1                     __end_of_PowerFault_Initialization:	
 10296                           
 10297                           	psect	text57
 10298  1E1F                     __ptext57:	
 10299 ;; *************** function _setPowerFault_Initialization *****************
 10300 ;; Defined at:
 10301 ;;		line 24 in file "../src/PowerFault_B1.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;		None
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;		None
 10306 ;; Return value:  Size  Location     Type
 10307 ;;		None               void
 10308 ;; Registers used:
 10309 ;;		None
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:        0 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:    5
 10322 ;; This function calls:
 10323 ;;		Nothing
 10324 ;; This function is called by:
 10325 ;;		_PowerFault_Initialization
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           
 10330                           ;psect for function _setPowerFault_Initialization
 10331  1E1F                     _setPowerFault_Initialization:	
 10332                           
 10333                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10334                           
 10335                           ;incstack = 0
 10336                           ; Regs used in _setPowerFault_Initialization: []
 10337  1E1F  0021               	movlb	1	; select bank1
 10338  1E20  143E               	bsf	_PF1^(0+128),0
 10339                           
 10340                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10341  1E21  153E               	bsf	_PF1^(0+128),2
 10342  1E22  0008               	return
 10343  1E23                     __end_of_setPowerFault_Initialization:	
 10344                           
 10345                           	psect	text58
 10346  1F54                     __ptext58:	
 10347 ;; *************** function _Mcu_Initialization *****************
 10348 ;; Defined at:
 10349 ;;		line 30 in file "../src/MCU_B1.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;		None
 10354 ;; Return value:  Size  Location     Type
 10355 ;;		None               void
 10356 ;; Registers used:
 10357 ;;		wreg, status,2, status,0, pclath, cstack
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10367 ;;Total ram usage:        0 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; Hardware stack levels required when called:    6
 10370 ;; This function calls:
 10371 ;;		_ADC_Set
 10372 ;;		_Fosc_Set
 10373 ;;		_IOC_Set
 10374 ;;		_IO_Set
 10375 ;;		_TMR0_Set
 10376 ;; This function is called by:
 10377 ;;		_main
 10378 ;; This function uses a non-reentrant model
 10379 ;;
 10380                           
 10381                           
 10382                           ;psect for function _Mcu_Initialization
 10383  1F54                     _Mcu_Initialization:	
 10384                           
 10385                           ;MCU_B1.c: 32: Fosc_Set();
 10386                           
 10387                           ;incstack = 0
 10388                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10389  1F54  319E  261B  319F   	fcall	_Fosc_Set
 10390                           
 10391                           ;MCU_B1.c: 34: IO_Set();
 10392  1F57  3191  2133  319F   	fcall	_IO_Set
 10393                           
 10394                           ;MCU_B1.c: 36: TMR0_Set();
 10395  1F5A  319E  2658  319F   	fcall	_TMR0_Set
 10396                           
 10397                           ;MCU_B1.c: 38: ;;
 10398                           ;MCU_B1.c: 40: ADC_Set();
 10399  1F5D  319E  264A  319F   	fcall	_ADC_Set
 10400                           
 10401                           ;MCU_B1.c: 44: ;;
 10402                           ;MCU_B1.c: 46: IOC_Set();
 10403  1F60  319F  272A         	fcall	_IOC_Set
 10404  1F62  0008               	return
 10405  1F63                     __end_of_Mcu_Initialization:	
 10406                           
 10407                           	psect	text59
 10408  1E58                     __ptext59:	
 10409 ;; *************** function _TMR0_Set *****************
 10410 ;; Defined at:
 10411 ;;		line 126 in file "../src/MCU_B1.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;		None               void
 10418 ;; Registers used:
 10419 ;;		wreg, status,2
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;Total ram usage:        0 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    5
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		_Mcu_Initialization
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _TMR0_Set
 10441  1E58                     _TMR0_Set:	
 10442                           
 10443                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10447  1E58  0021               	movlb	1	; select bank1
 10448  1E59  0195               	clrf	21	;volatile
 10449                           
 10450                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10451  1E5A  3042               	movlw	66
 10452  1E5B  0020               	movlb	0	; select bank0
 10453  1E5C  0095               	movwf	21	;volatile
 10454                           
 10455                           ;MCU_B1.c: 130: TMR0IE = 1;
 10456  1E5D  168B               	bsf	11,5	;volatile
 10457                           
 10458                           ;MCU_B1.c: 131: GIE = 1;
 10459  1E5E  178B               	bsf	11,7	;volatile
 10460  1E5F  0008               	return
 10461  1E60                     __end_of_TMR0_Set:	
 10462                           
 10463                           	psect	text60
 10464  1133                     __ptext60:	
 10465 ;; *************** function _IO_Set *****************
 10466 ;; Defined at:
 10467 ;;		line 60 in file "../src/MCU_B1.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;		None               void
 10474 ;; Registers used:
 10475 ;;		wreg, status,2
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_Mcu_Initialization
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _IO_Set
 10497  1133                     _IO_Set:	
 10498                           
 10499                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _IO_Set: [wreg+status,2]
 10503  1133  3077               	movlw	119
 10504  1134  0021               	movlb	1	; select bank1
 10505  1135  008C               	movwf	12	;volatile
 10506                           
 10507                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10508  1136  3007               	movlw	7
 10509  1137  008D               	movwf	13	;volatile
 10510                           
 10511                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10512  1138  300C               	movlw	12
 10513  1139  008E               	movwf	14	;volatile
 10514                           
 10515                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10516  113A  0022               	movlb	2	; select bank2
 10517  113B  018C               	clrf	12	;volatile
 10518                           
 10519                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10520  113C  3002               	movlw	2
 10521  113D  008D               	movwf	13	;volatile
 10522                           
 10523                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10524  113E  018E               	clrf	14	;volatile
 10525                           
 10526                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10527  113F  3022               	movlw	34
 10528  1140  0023               	movlb	3	; select bank3
 10529  1141  008C               	movwf	12	;volatile
 10530                           
 10531                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10532  1142  018D               	clrf	13	;volatile
 10533                           
 10534                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10535  1143  018E               	clrf	14	;volatile
 10536                           
 10537                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10538  1144  3077               	movlw	119
 10539  1145  0020               	movlb	0	; select bank0
 10540  1146  008C               	movwf	12	;volatile
 10541                           
 10542                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10543  1147  3007               	movlw	7
 10544  1148  008D               	movwf	13	;volatile
 10545                           
 10546                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10547  1149  300C               	movlw	12
 10548  114A  008E               	movwf	14	;volatile
 10549  114B  0008               	return
 10550  114C                     __end_of_IO_Set:	
 10551                           
 10552                           	psect	text61
 10553  1F2A                     __ptext61:	
 10554 ;; *************** function _IOC_Set *****************
 10555 ;; Defined at:
 10556 ;;		line 263 in file "../src/MCU_B1.c"
 10557 ;; Parameters:    Size  Location     Type
 10558 ;;		None
 10559 ;; Auto vars:     Size  Location     Type
 10560 ;;		None
 10561 ;; Return value:  Size  Location     Type
 10562 ;;		None               void
 10563 ;; Registers used:
 10564 ;;		wreg, status,2
 10565 ;; Tracked objects:
 10566 ;;		On entry : 0/0
 10567 ;;		On exit  : 0/0
 10568 ;;		Unchanged: 0/0
 10569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;Total ram usage:        0 bytes
 10575 ;; Hardware stack levels used:    1
 10576 ;; Hardware stack levels required when called:    5
 10577 ;; This function calls:
 10578 ;;		Nothing
 10579 ;; This function is called by:
 10580 ;;		_Mcu_Initialization
 10581 ;; This function uses a non-reentrant model
 10582 ;;
 10583                           
 10584                           
 10585                           ;psect for function _IOC_Set
 10586  1F2A                     _IOC_Set:	
 10587                           
 10588                           ;MCU_B1.c: 264: WPUB2 = 0;
 10589                           
 10590                           ;incstack = 0
 10591                           ; Regs used in _IOC_Set: [wreg+status,2]
 10592  1F2A  0024               	movlb	4	; select bank4
 10593  1F2B  110D               	bcf	13,2	;volatile
 10594                           
 10595                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10596  1F2C  3004               	movlw	4
 10597  1F2D  0027               	movlb	7	; select bank7
 10598  1F2E  0094               	movwf	20	;volatile
 10599                           
 10600                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10601  1F2F  3004               	movlw	4
 10602  1F30  0095               	movwf	21	;volatile
 10603                           
 10604                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10605  1F31  0196               	clrf	22	;volatile
 10606                           
 10607                           ;MCU_B1.c: 284: IOCIE = 1;
 10608  1F32  158B               	bsf	11,3	;volatile
 10609                           
 10610                           ;MCU_B1.c: 285: IOCIF = 0;
 10611  1F33  100B               	bcf	11,0	;volatile
 10612                           
 10613                           ;MCU_B1.c: 286: PEIE = 1;
 10614  1F34  170B               	bsf	11,6	;volatile
 10615                           
 10616                           ;MCU_B1.c: 287: GIE = 1;
 10617  1F35  178B               	bsf	11,7	;volatile
 10618  1F36  0008               	return
 10619  1F37                     __end_of_IOC_Set:	
 10620                           
 10621                           	psect	text62
 10622  1E1B                     __ptext62:	
 10623 ;; *************** function _Fosc_Set *****************
 10624 ;; Defined at:
 10625 ;;		line 56 in file "../src/MCU_B1.c"
 10626 ;; Parameters:    Size  Location     Type
 10627 ;;		None
 10628 ;; Auto vars:     Size  Location     Type
 10629 ;;		None
 10630 ;; Return value:  Size  Location     Type
 10631 ;;		None               void
 10632 ;; Registers used:
 10633 ;;		wreg
 10634 ;; Tracked objects:
 10635 ;;		On entry : 0/0
 10636 ;;		On exit  : 0/0
 10637 ;;		Unchanged: 0/0
 10638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10643 ;;Total ram usage:        0 bytes
 10644 ;; Hardware stack levels used:    1
 10645 ;; Hardware stack levels required when called:    5
 10646 ;; This function calls:
 10647 ;;		Nothing
 10648 ;; This function is called by:
 10649 ;;		_Mcu_Initialization
 10650 ;; This function uses a non-reentrant model
 10651 ;;
 10652                           
 10653                           
 10654                           ;psect for function _Fosc_Set
 10655  1E1B                     _Fosc_Set:	
 10656                           
 10657                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10658                           
 10659                           ;incstack = 0
 10660                           ; Regs used in _Fosc_Set: [wreg]
 10661  1E1B  3078               	movlw	120
 10662  1E1C  0021               	movlb	1	; select bank1
 10663  1E1D  0099               	movwf	25	;volatile
 10664  1E1E  0008               	return
 10665  1E1F                     __end_of_Fosc_Set:	
 10666                           
 10667                           	psect	text63
 10668  1E4A                     __ptext63:	
 10669 ;; *************** function _ADC_Set *****************
 10670 ;; Defined at:
 10671 ;;		line 309 in file "../src/MCU_B1.c"
 10672 ;; Parameters:    Size  Location     Type
 10673 ;;		None
 10674 ;; Auto vars:     Size  Location     Type
 10675 ;;		None
 10676 ;; Return value:  Size  Location     Type
 10677 ;;		None               void
 10678 ;; Registers used:
 10679 ;;		wreg
 10680 ;; Tracked objects:
 10681 ;;		On entry : 0/0
 10682 ;;		On exit  : 0/0
 10683 ;;		Unchanged: 0/0
 10684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;Total ram usage:        0 bytes
 10690 ;; Hardware stack levels used:    1
 10691 ;; Hardware stack levels required when called:    5
 10692 ;; This function calls:
 10693 ;;		Nothing
 10694 ;; This function is called by:
 10695 ;;		_Mcu_Initialization
 10696 ;; This function uses a non-reentrant model
 10697 ;;
 10698                           
 10699                           
 10700                           ;psect for function _ADC_Set
 10701  1E4A                     _ADC_Set:	
 10702                           
 10703                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10704                           
 10705                           ;incstack = 0
 10706                           ; Regs used in _ADC_Set: [wreg]
 10707  1E4A  30F2               	movlw	242
 10708  1E4B  0021               	movlb	1	; select bank1
 10709  1E4C  009E               	movwf	30	;volatile
 10710                           
 10711                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10712  1E4D  30C0               	movlw	192
 10713  1E4E  0022               	movlb	2	; select bank2
 10714  1E4F  0097               	movwf	23	;volatile
 10715  1E50  0008               	return
 10716  1E51                     __end_of_ADC_Set:	
 10717                           
 10718                           	psect	text64
 10719  1F04                     __ptext64:	
 10720 ;; *************** function _LED_Main *****************
 10721 ;; Defined at:
 10722 ;;		line 47 in file "../src/LED_B1.c"
 10723 ;; Parameters:    Size  Location     Type
 10724 ;;		None
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;		None
 10727 ;; Return value:  Size  Location     Type
 10728 ;;		None               void
 10729 ;; Registers used:
 10730 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;Total ram usage:        0 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    7
 10743 ;; This function calls:
 10744 ;;		_setLED_Main
 10745 ;; This function is called by:
 10746 ;;		_main
 10747 ;; This function uses a non-reentrant model
 10748 ;;
 10749                           
 10750                           
 10751                           ;psect for function _LED_Main
 10752  1F04                     _LED_Main:	
 10753                           
 10754                           ;LED_B1.c: 49: setLED_Main(1);
 10755                           
 10756                           ;incstack = 0
 10757                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10758  1F04  3001               	movlw	1
 10759  1F05  3196  26D7  319F   	fcall	_setLED_Main
 10760                           
 10761                           ;LED_B1.c: 52: setLED_Main(2);
 10762  1F08  3002               	movlw	2
 10763  1F09  3196  26D7  319F   	fcall	_setLED_Main
 10764                           
 10765                           ;LED_B1.c: 58: setLED_Main(99);
 10766  1F0C  3063               	movlw	99
 10767  1F0D  3196  26D7         	fcall	_setLED_Main
 10768  1F0F  0008               	return
 10769  1F10                     __end_of_LED_Main:	
 10770                           
 10771                           	psect	text65
 10772  16D7                     __ptext65:	
 10773 ;; *************** function _setLED_Main *****************
 10774 ;; Defined at:
 10775 ;;		line 192 in file "../src/LED_B1.c"
 10776 ;; Parameters:    Size  Location     Type
 10777 ;;  led             1    wreg     unsigned char 
 10778 ;; Auto vars:     Size  Location     Type
 10779 ;;  led             1    3[BANK0 ] unsigned char 
 10780 ;; Return value:  Size  Location     Type
 10781 ;;		None               void
 10782 ;; Registers used:
 10783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10784 ;; Tracked objects:
 10785 ;;		On entry : 0/0
 10786 ;;		On exit  : 0/0
 10787 ;;		Unchanged: 0/0
 10788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10791 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10793 ;;Total ram usage:        3 bytes
 10794 ;; Hardware stack levels used:    1
 10795 ;; Hardware stack levels required when called:    6
 10796 ;; This function calls:
 10797 ;;		_LedPointSelect
 10798 ;; This function is called by:
 10799 ;;		_LED_Main
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           
 10804                           ;psect for function _setLED_Main
 10805  16D7                     _setLED_Main:	
 10806                           
 10807                           ;incstack = 0
 10808                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10809                           ;setLED_Main@led stored from wreg
 10810  16D7  0020               	movlb	0	; select bank0
 10811  16D8  00A3               	movwf	setLED_Main@led
 10812                           
 10813                           ;LED_B1.c: 193: LedPointSelect(led);
 10814  16D9  0823               	movf	setLED_Main@led,w
 10815  16DA  3192  2246  3196   	fcall	_LedPointSelect
 10816                           
 10817                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10818  16DD  0021               	movlb	1	; select bank1
 10819  16DE  084B               	movf	_LED^(0+128),w
 10820  16DF  0086               	movwf	6
 10821  16E0  084C               	movf	(_LED+1)^(0+128),w
 10822  16E1  0087               	movwf	7
 10823  16E2  1C81               	btfss	1,1
 10824  16E3  0008               	return
 10825                           
 10826                           ;LED_B1.c: 195: LED->Time++;
 10827  16E4  084B               	movf	_LED^(0+128),w
 10828  16E5  0086               	movwf	6
 10829  16E6  084C               	movf	(_LED+1)^(0+128),w
 10830  16E7  0087               	movwf	7
 10831  16E8  3141               	addfsr 1,1
 10832  16E9  3001               	movlw	1
 10833  16EA  0781               	addwf	1,f
 10834  16EB  3141               	addfsr 1,1
 10835  16EC  1803               	skipnc
 10836  16ED  0A81               	incf	1,f
 10837                           
 10838                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10839  16EE  084B               	movf	_LED^(0+128),w
 10840  16EF  0086               	movwf	6
 10841  16F0  084C               	movf	(_LED+1)^(0+128),w
 10842  16F1  0087               	movwf	7
 10843  16F2  3141               	addfsr 1,1
 10844  16F3  3F40               	moviw [0]fsr1
 10845  16F4  0020               	movlb	0	; select bank0
 10846  16F5  00A1               	movwf	??_setLED_Main
 10847  16F6  3F41               	moviw [1]fsr1
 10848  16F7  00A2               	movwf	??_setLED_Main+1
 10849  16F8  3000               	movlw	0
 10850  16F9  0222               	subwf	??_setLED_Main+1,w
 10851  16FA  3032               	movlw	50
 10852  16FB  1903               	skipnz
 10853  16FC  0221               	subwf	??_setLED_Main,w
 10854  16FD  1C03               	skipc
 10855  16FE  0008               	return
 10856                           
 10857                           ;LED_B1.c: 197: LED->Time = 0;
 10858  16FF  0021               	movlb	1	; select bank1
 10859  1700  084B               	movf	_LED^(0+128),w
 10860  1701  0086               	movwf	6
 10861  1702  084C               	movf	(_LED+1)^(0+128),w
 10862  1703  0087               	movwf	7
 10863  1704  3141               	addfsr 1,1
 10864  1705  3000               	movlw	0
 10865  1706  3FC0               	movwi [0]fsr1
 10866  1707  3FC1               	movwi [1]fsr1
 10867                           
 10868                           ;LED_B1.c: 199: if (led == 1) {
 10869  1708  0020               	movlb	0	; select bank0
 10870  1709  0823               	movf	setLED_Main@led,w
 10871  170A  3A01               	xorlw	1
 10872  170B  1D03               	skipz
 10873  170C  2F10               	goto	l7685
 10874                           
 10875                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 10876  170D  3008               	movlw	8
 10877  170E  068C               	xorwf	12,f
 10878                           
 10879                           ;LED_B1.c: 201: }
 10880  170F  0008               	return
 10881  1710                     l7685:	
 10882                           
 10883                           ;LED_B1.c: 204: else if (led == 2) {
 10884  1710  0823               	movf	setLED_Main@led,w
 10885  1711  3A02               	xorlw	2
 10886  1712  1D03               	skipz
 10887  1713  2F17               	goto	l7689
 10888                           
 10889                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 10890  1714  3080               	movlw	128
 10891  1715  068E               	xorwf	14,f
 10892                           
 10893                           ;LED_B1.c: 206: }
 10894  1716  0008               	return
 10895  1717                     l7689:	
 10896                           
 10897                           ;LED_B1.c: 214: else if (led == 99) {
 10898  1717  0823               	movf	setLED_Main@led,w
 10899  1718  3A63               	xorlw	99
 10900  1719  1D03               	skipz
 10901  171A  0008               	return
 10902                           
 10903                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10904  171B  3020               	movlw	32
 10905  171C  068D               	xorwf	13,f
 10906  171D  0008               	return
 10907  171E                     __end_of_setLED_Main:	
 10908                           
 10909                           	psect	text66
 10910  1EF8                     __ptext66:	
 10911 ;; *************** function _LED_Initialization *****************
 10912 ;; Defined at:
 10913 ;;		line 31 in file "../src/LED_B1.c"
 10914 ;; Parameters:    Size  Location     Type
 10915 ;;		None
 10916 ;; Auto vars:     Size  Location     Type
 10917 ;;		None
 10918 ;; Return value:  Size  Location     Type
 10919 ;;		None               void
 10920 ;; Registers used:
 10921 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10922 ;; Tracked objects:
 10923 ;;		On entry : 0/0
 10924 ;;		On exit  : 0/0
 10925 ;;		Unchanged: 0/0
 10926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10931 ;;Total ram usage:        0 bytes
 10932 ;; Hardware stack levels used:    1
 10933 ;; Hardware stack levels required when called:    8
 10934 ;; This function calls:
 10935 ;;		_setLED_Initialization
 10936 ;; This function is called by:
 10937 ;;		_main
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           
 10942                           ;psect for function _LED_Initialization
 10943  1EF8                     _LED_Initialization:	
 10944                           
 10945                           ;LED_B1.c: 33: setLED_Initialization(1);
 10946                           
 10947                           ;incstack = 0
 10948                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10949  1EF8  3001               	movlw	1
 10950  1EF9  3190  2074  319E   	fcall	_setLED_Initialization
 10951                           
 10952                           ;LED_B1.c: 36: setLED_Initialization(2);
 10953  1EFC  3002               	movlw	2
 10954  1EFD  3190  2074  319E   	fcall	_setLED_Initialization
 10955                           
 10956                           ;LED_B1.c: 42: setLED_Initialization(99);
 10957  1F00  3063               	movlw	99
 10958  1F01  3190  2074         	fcall	_setLED_Initialization
 10959  1F03  0008               	return
 10960  1F04                     __end_of_LED_Initialization:	
 10961                           
 10962                           	psect	text67
 10963  1074                     __ptext67:	
 10964 ;; *************** function _setLED_Initialization *****************
 10965 ;; Defined at:
 10966 ;;		line 63 in file "../src/LED_B1.c"
 10967 ;; Parameters:    Size  Location     Type
 10968 ;;  led             1    wreg     unsigned char 
 10969 ;; Auto vars:     Size  Location     Type
 10970 ;;  led             1    3[BANK0 ] unsigned char 
 10971 ;; Return value:  Size  Location     Type
 10972 ;;		None               void
 10973 ;; Registers used:
 10974 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10975 ;; Tracked objects:
 10976 ;;		On entry : 0/0
 10977 ;;		On exit  : 0/0
 10978 ;;		Unchanged: 0/0
 10979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;Total ram usage:        1 bytes
 10985 ;; Hardware stack levels used:    1
 10986 ;; Hardware stack levels required when called:    7
 10987 ;; This function calls:
 10988 ;;		_LedPointSelect
 10989 ;;		_setLED
 10990 ;; This function is called by:
 10991 ;;		_LED_Initialization
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           
 10996                           ;psect for function _setLED_Initialization
 10997  1074                     _setLED_Initialization:	
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11001                           ;setLED_Initialization@led stored from wreg
 11002  1074  0020               	movlb	0	; select bank0
 11003  1075  00A3               	movwf	setLED_Initialization@led
 11004                           
 11005                           ;LED_B1.c: 64: LedPointSelect(led);
 11006  1076  0823               	movf	setLED_Initialization@led,w
 11007  1077  3192  2246  3190   	fcall	_LedPointSelect
 11008                           
 11009                           ;LED_B1.c: 65: LED->Enable = 1;
 11010  107A  0021               	movlb	1	; select bank1
 11011  107B  084B               	movf	_LED^(0+128),w
 11012  107C  0086               	movwf	6
 11013  107D  084C               	movf	(_LED+1)^(0+128),w
 11014  107E  0087               	movwf	7
 11015  107F  1401               	bsf	1,0
 11016                           
 11017                           ;LED_B1.c: 66: setLED(led, 0);
 11018  1080  0020               	movlb	0	; select bank0
 11019  1081  01A1               	clrf	setLED@command
 11020  1082  0823               	movf	setLED_Initialization@led,w
 11021  1083  318B  230A         	fcall	_setLED
 11022  1085  0008               	return
 11023  1086                     __end_of_setLED_Initialization:	
 11024                           
 11025                           	psect	text68
 11026  11A4                     __ptext68:	
 11027 ;; *************** function _Flash_Memory_Main *****************
 11028 ;; Defined at:
 11029 ;;		line 790 in file "../src/MCU_B1.c"
 11030 ;; Parameters:    Size  Location     Type
 11031 ;;		None
 11032 ;; Auto vars:     Size  Location     Type
 11033 ;;		None
 11034 ;; Return value:  Size  Location     Type
 11035 ;;		None               void
 11036 ;; Registers used:
 11037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;Total ram usage:        0 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    8
 11050 ;; This function calls:
 11051 ;;		_Flash_Memory_Modify
 11052 ;; This function is called by:
 11053 ;;		_main
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function _Flash_Memory_Main
 11059  11A4                     _Flash_Memory_Main:	
 11060                           
 11061                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 11062                           
 11063                           ;incstack = 0
 11064                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11065  11A4  0022               	movlb	2	; select bank2
 11066  11A5  1CE1               	btfss	(_Memory^(0+256)+36),1
 11067  11A6  0008               	return
 11068                           
 11069                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 11070  11A7  1C61               	btfss	(_Memory^(0+256)+36),0
 11071  11A8  29C1               	goto	l1228
 11072                           
 11073                           ;MCU_B1.c: 793: Memory.Time++;
 11074  11A9  3001               	movlw	1
 11075  11AA  07DF               	addwf	(_Memory^(0+256)+34),f
 11076  11AB  3000               	movlw	0
 11077  11AC  3DE0               	addwfc	((_Memory+1)^(0+256)+34),f
 11078                           
 11079                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 11080  11AD  3022               	movlw	34
 11081  11AE  3E3D               	addlw	_Memory& (0+255)
 11082  11AF  0086               	movwf	6
 11083  11B0  3001               	movlw	1	; select bank2/3
 11084  11B1  0087               	movwf	7
 11085  11B2  3F40               	moviw [0]fsr1
 11086  11B3  3A19               	xorlw	25
 11087  11B4  1D03               	skipz
 11088  11B5  29B8               	goto	u6715
 11089  11B6  3F41               	moviw [1]fsr1
 11090  11B7  3A00               	xorlw	0
 11091  11B8                     u6715:	
 11092  11B8  1D03               	skipz
 11093  11B9  0008               	return
 11094                           
 11095                           ;MCU_B1.c: 795: {
 11096                           ;MCU_B1.c: 796: Memory.Time = 0;
 11097  11BA  01DF               	clrf	(_Memory^(0+256)+34)
 11098  11BB  01E0               	clrf	((_Memory+1)^(0+256)+34)
 11099                           
 11100                           ;MCU_B1.c: 797: Memory.Modify = 0;
 11101  11BC  1061               	bcf	(_Memory^(0+256)+36),0
 11102                           
 11103                           ;MCU_B1.c: 798: Memory.GO = 0;
 11104  11BD  10E1               	bcf	(_Memory^(0+256)+36),1
 11105                           
 11106                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 11107  11BE  3195  25C1         	fcall	_Flash_Memory_Modify
 11108                           
 11109                           ;MCU_B1.c: 800: }
 11110                           ;MCU_B1.c: 801: } else {
 11111  11C0  0008               	return
 11112  11C1                     l1228:	
 11113                           
 11114                           ;MCU_B1.c: 802: Memory.GO = 0;
 11115  11C1  10E1               	bcf	(_Memory^(0+256)+36),1
 11116  11C2  0008               	return
 11117  11C3                     __end_of_Flash_Memory_Main:	
 11118                           
 11119                           	psect	text69
 11120  15C1                     __ptext69:	
 11121 ;; *************** function _Flash_Memory_Modify *****************
 11122 ;; Defined at:
 11123 ;;		line 859 in file "../src/MCU_B1.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  i               1    5[BANK0 ] unsigned char 
 11128 ;; Return value:  Size  Location     Type
 11129 ;;		None               void
 11130 ;; Registers used:
 11131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;Total ram usage:        2 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    7
 11144 ;; This function calls:
 11145 ;;		_Flash_Memory_Erasing
 11146 ;;		_Flash_Memory_Read
 11147 ;;		_Flash_Memory_Write
 11148 ;; This function is called by:
 11149 ;;		_Flash_Memory_Main
 11150 ;; This function uses a non-reentrant model
 11151 ;;
 11152                           
 11153                           
 11154                           ;psect for function _Flash_Memory_Modify
 11155  15C1                     _Flash_Memory_Modify:	
 11156                           
 11157                           ;MCU_B1.c: 860: char i = 0;
 11158                           
 11159                           ;incstack = 0
 11160                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11161  15C1  0020               	movlb	0	; select bank0
 11162  15C2  01A5               	clrf	Flash_Memory_Modify@i
 11163                           
 11164                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 11165  15C3  01A5               	clrf	Flash_Memory_Modify@i
 11166  15C4  3020               	movlw	32
 11167  15C5  0225               	subwf	Flash_Memory_Modify@i,w
 11168  15C6  1803               	btfsc	3,0
 11169  15C7  2DDD               	goto	l6775
 11170  15C8                     l6769:	
 11171                           
 11172                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 11173  15C8  0825               	movf	Flash_Memory_Modify@i,w
 11174  15C9  3191  214C  3195   	fcall	_Flash_Memory_Read
 11175  15CC  0020               	movlb	0	; select bank0
 11176  15CD  00A4               	movwf	??_Flash_Memory_Modify
 11177  15CE  0825               	movf	Flash_Memory_Modify@i,w
 11178  15CF  3E3D               	addlw	_Memory& (0+255)
 11179  15D0  0086               	movwf	6
 11180  15D1  3001               	movlw	1	; select bank2/3
 11181  15D2  0087               	movwf	7
 11182  15D3  0824               	movf	??_Flash_Memory_Modify,w
 11183  15D4  0081               	movwf	1
 11184  15D5  3001               	movlw	1
 11185  15D6  00A4               	movwf	??_Flash_Memory_Modify
 11186  15D7  0824               	movf	??_Flash_Memory_Modify,w
 11187  15D8  07A5               	addwf	Flash_Memory_Modify@i,f
 11188  15D9  3020               	movlw	32
 11189  15DA  0225               	subwf	Flash_Memory_Modify@i,w
 11190  15DB  1C03               	skipc
 11191  15DC  2DC8               	goto	l6769
 11192  15DD                     l6775:	
 11193                           
 11194                           ;MCU_B1.c: 863: }
 11195                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 11196  15DD  086F               	movf	_product,w
 11197  15DE  0086               	movwf	6
 11198  15DF  3001               	movlw	1	; select bank2/3
 11199  15E0  0087               	movwf	7
 11200  15E1  3001               	movlw	1	; select bank2/3
 11201  15E2  3F4C               	moviw [12]fsr1
 11202  15E3  0022               	movlb	2	; select bank2
 11203  15E4  00BD               	movwf	_Memory^(0+256)
 11204                           
 11205                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 11206  15E5  0020               	movlb	0	; select bank0
 11207  15E6  086F               	movf	_product,w
 11208  15E7  0086               	movwf	6
 11209  15E8  3001               	movlw	1	; select bank2/3
 11210  15E9  0087               	movwf	7
 11211  15EA  3001               	movlw	1	; select bank2/3
 11212  15EB  3F4D               	moviw [13]fsr1
 11213  15EC  0022               	movlb	2	; select bank2
 11214  15ED  00BE               	movwf	(_Memory^(0+256)+1)
 11215                           
 11216                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 11217  15EE  0020               	movlb	0	; select bank0
 11218  15EF  086F               	movf	_product,w
 11219  15F0  0086               	movwf	6
 11220  15F1  3001               	movlw	1	; select bank2/3
 11221  15F2  0087               	movwf	7
 11222  15F3  3001               	movlw	1	; select bank2/3
 11223  15F4  3F4E               	moviw [14]fsr1
 11224  15F5  0022               	movlb	2	; select bank2
 11225  15F6  00BF               	movwf	(_Memory^(0+256)+2)
 11226                           
 11227                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 11228  15F7  1D61               	btfss	(_Memory^(0+256)+36),2
 11229  15F8  2DFD               	goto	l1250
 11230                           
 11231                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 11232  15F9  1161               	bcf	(_Memory^(0+256)+36),2
 11233                           
 11234                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 11235  15FA  0021               	movlb	1	; select bank1
 11236  15FB  12A0               	bcf	_myMain^(0+128),5
 11237                           
 11238                           ;MCU_B1.c: 875: myMain.First = 0;
 11239  15FC  13A0               	bcf	_myMain^(0+128),7
 11240  15FD                     l1250:	
 11241                           
 11242                           ;MCU_B1.c: 877: }
 11243                           ;MCU_B1.c: 878: GIE = 0;
 11244  15FD  138B               	bcf	11,7	;volatile
 11245                           
 11246                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 11247  15FE  319E  26EC  3195   	fcall	_Flash_Memory_Erasing
 11248                           
 11249                           ;MCU_B1.c: 880: Flash_Memory_Write();
 11250  1601  3193  23C9         	fcall	_Flash_Memory_Write
 11251                           
 11252                           ;MCU_B1.c: 881: GIE = 1;
 11253  1603  178B               	bsf	11,7	;volatile
 11254  1604  0008               	return
 11255  1605                     __end_of_Flash_Memory_Modify:	
 11256                           
 11257                           	psect	text70
 11258  1EEC                     __ptext70:	
 11259 ;; *************** function _Flash_Memory_Erasing *****************
 11260 ;; Defined at:
 11261 ;;		line 848 in file "../src/MCU_B1.c"
 11262 ;; Parameters:    Size  Location     Type
 11263 ;;		None
 11264 ;; Auto vars:     Size  Location     Type
 11265 ;;		None
 11266 ;; Return value:  Size  Location     Type
 11267 ;;		None               void
 11268 ;; Registers used:
 11269 ;;		wreg, status,2, status,0, pclath, cstack
 11270 ;; Tracked objects:
 11271 ;;		On entry : 0/0
 11272 ;;		On exit  : 0/0
 11273 ;;		Unchanged: 0/0
 11274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;Total ram usage:        0 bytes
 11280 ;; Hardware stack levels used:    1
 11281 ;; Hardware stack levels required when called:    6
 11282 ;; This function calls:
 11283 ;;		_Flash_Memory_Unlock
 11284 ;; This function is called by:
 11285 ;;		_Flash_Memory_Modify
 11286 ;; This function uses a non-reentrant model
 11287 ;;
 11288                           
 11289                           
 11290                           ;psect for function _Flash_Memory_Erasing
 11291  1EEC                     _Flash_Memory_Erasing:	
 11292                           
 11293                           ;MCU_B1.c: 849: CFGS = 0;
 11294                           
 11295                           ;incstack = 0
 11296                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11297  1EEC  0023               	movlb	3	; select bank3
 11298  1EED  1315               	bcf	21,6	;volatile
 11299                           
 11300                           ;MCU_B1.c: 850: PMADRH = 0x30;
 11301  1EEE  3030               	movlw	48
 11302  1EEF  0092               	movwf	18	;volatile
 11303                           
 11304                           ;MCU_B1.c: 851: PMADRL = 0x00;
 11305  1EF0  0191               	clrf	17	;volatile
 11306                           
 11307                           ;MCU_B1.c: 852: FREE = 1;
 11308  1EF1  1615               	bsf	21,4	;volatile
 11309                           
 11310                           ;MCU_B1.c: 853: WREN = 1;
 11311  1EF2  1515               	bsf	21,2	;volatile
 11312                           
 11313                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 11314  1EF3  319E  2678         	fcall	_Flash_Memory_Unlock
 11315                           
 11316                           ;MCU_B1.c: 855: WREN = 0;
 11317  1EF5  0023               	movlb	3	; select bank3
 11318  1EF6  1115               	bcf	21,2	;volatile
 11319  1EF7  0008               	return
 11320  1EF8                     __end_of_Flash_Memory_Erasing:	
 11321                           
 11322                           	psect	text71
 11323  042A                     __ptext71:	
 11324 ;; *************** function _Flash_Memory_Initialization *****************
 11325 ;; Defined at:
 11326 ;;		line 749 in file "../src/MCU_B1.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;		None
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;  i               1   62[BANK0 ] unsigned char 
 11331 ;; Return value:  Size  Location     Type
 11332 ;;		None               void
 11333 ;; Registers used:
 11334 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11341 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11344 ;;Total ram usage:        2 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; Hardware stack levels required when called:    8
 11347 ;; This function calls:
 11348 ;;		_Flash_Memory_Read
 11349 ;;		_Flash_Memory_Write
 11350 ;;		_setPercentValue
 11351 ;; This function is called by:
 11352 ;;		_main
 11353 ;; This function uses a non-reentrant model
 11354 ;;
 11355                           
 11356                           
 11357                           ;psect for function _Flash_Memory_Initialization
 11358  042A                     _Flash_Memory_Initialization:	
 11359                           
 11360                           ;MCU_B1.c: 750: char i = 0;
 11361                           
 11362                           ;incstack = 0
 11363                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11364  042A  0020               	movlb	0	; select bank0
 11365  042B  01DE               	clrf	Flash_Memory_Initialization@i
 11366                           
 11367                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 11368  042C  301F               	movlw	31
 11369  042D  3191  214C  3184   	fcall	_Flash_Memory_Read
 11370  0430  3AAA               	xorlw	170
 11371  0431  1D03               	skipz
 11372  0432  2C9C               	goto	l7181
 11373                           
 11374                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 11375  0433  3000               	movlw	0
 11376  0434  3191  214C  3184   	fcall	_Flash_Memory_Read
 11377  0437  0020               	movlb	0	; select bank0
 11378  0438  00DD               	movwf	??_Flash_Memory_Initialization
 11379  0439  086F               	movf	_product,w
 11380  043A  3E0C               	addlw	12
 11381  043B  0086               	movwf	6
 11382  043C  3001               	movlw	1	; select bank2/3
 11383  043D  0087               	movwf	7
 11384  043E  085D               	movf	??_Flash_Memory_Initialization,w
 11385  043F  0081               	movwf	1
 11386                           
 11387                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 11388  0440  3001               	movlw	1
 11389  0441  3191  214C  3184   	fcall	_Flash_Memory_Read
 11390  0444  0020               	movlb	0	; select bank0
 11391  0445  00DD               	movwf	??_Flash_Memory_Initialization
 11392  0446  086F               	movf	_product,w
 11393  0447  3E0D               	addlw	13
 11394  0448  0086               	movwf	6
 11395  0449  3001               	movlw	1	; select bank2/3
 11396  044A  0087               	movwf	7
 11397  044B  085D               	movf	??_Flash_Memory_Initialization,w
 11398  044C  0081               	movwf	1
 11399                           
 11400                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 11401  044D  3002               	movlw	2
 11402  044E  3191  214C  3184   	fcall	_Flash_Memory_Read
 11403  0451  0020               	movlb	0	; select bank0
 11404  0452  00DD               	movwf	??_Flash_Memory_Initialization
 11405  0453  086F               	movf	_product,w
 11406  0454  3E0E               	addlw	14
 11407  0455  0086               	movwf	6
 11408  0456  3001               	movlw	1	; select bank2/3
 11409  0457  0087               	movwf	7
 11410  0458  085D               	movf	??_Flash_Memory_Initialization,w
 11411  0459  0081               	movwf	1
 11412                           
 11413                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
 11414  045A  3020               	movlw	32
 11415  045B  3196  2605  3184   	fcall	_setPercentValue
 11416  045E  0020               	movlb	0	; select bank0
 11417  045F  00DD               	movwf	??_Flash_Memory_Initialization
 11418  0460  085D               	movf	??_Flash_Memory_Initialization,w
 11419  0461  00DE               	movwf	Flash_Memory_Initialization@i
 11420                           
 11421                           ;MCU_B1.c: 761: product->Data[21] = i;
 11422  0462  085E               	movf	Flash_Memory_Initialization@i,w
 11423  0463  00DD               	movwf	??_Flash_Memory_Initialization
 11424  0464  086F               	movf	_product,w
 11425  0465  3E15               	addlw	21
 11426  0466  0086               	movwf	6
 11427  0467  3001               	movlw	1	; select bank2/3
 11428  0468  0087               	movwf	7
 11429  0469  085D               	movf	??_Flash_Memory_Initialization,w
 11430  046A  0081               	movwf	1
 11431                           
 11432                           ;MCU_B1.c: 762: product->Data[22] = i;
 11433  046B  085E               	movf	Flash_Memory_Initialization@i,w
 11434  046C  00DD               	movwf	??_Flash_Memory_Initialization
 11435  046D  086F               	movf	_product,w
 11436  046E  3E16               	addlw	22
 11437  046F  0086               	movwf	6
 11438  0470  3001               	movlw	1	; select bank2/3
 11439  0471  0087               	movwf	7
 11440  0472  085D               	movf	??_Flash_Memory_Initialization,w
 11441  0473  0081               	movwf	1
 11442                           
 11443                           ;MCU_B1.c: 763: product->Data[23] = i;
 11444  0474  085E               	movf	Flash_Memory_Initialization@i,w
 11445  0475  00DD               	movwf	??_Flash_Memory_Initialization
 11446  0476  086F               	movf	_product,w
 11447  0477  3E17               	addlw	23
 11448  0478  0086               	movwf	6
 11449  0479  3001               	movlw	1	; select bank2/3
 11450  047A  0087               	movwf	7
 11451  047B  085D               	movf	??_Flash_Memory_Initialization,w
 11452  047C  0081               	movwf	1
 11453                           
 11454                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11455  047D  086F               	movf	_product,w
 11456  047E  3E0C               	addlw	12
 11457  047F  0086               	movwf	6
 11458  0480  3001               	movlw	1	; select bank2/3
 11459  0481  0087               	movwf	7
 11460  0482  0801               	movf	1,w
 11461  0483  3AFF               	xorlw	255
 11462  0484  1D03               	skipz
 11463  0485  0008               	return
 11464  0486  086F               	movf	_product,w
 11465  0487  3E0D               	addlw	13
 11466  0488  0086               	movwf	6
 11467  0489  3001               	movlw	1	; select bank2/3
 11468  048A  0087               	movwf	7
 11469  048B  0801               	movf	1,w
 11470  048C  3AFF               	xorlw	255
 11471  048D  1D03               	skipz
 11472  048E  0008               	return
 11473  048F  086F               	movf	_product,w
 11474  0490  3E0E               	addlw	14
 11475  0491  0086               	movwf	6
 11476  0492  3001               	movlw	1	; select bank2/3
 11477  0493  0087               	movwf	7
 11478  0494  0801               	movf	1,w
 11479  0495  3AFF               	xorlw	255
 11480  0496  1D03               	skipz
 11481  0497  0008               	return
 11482                           
 11483                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 11484  0498  0021               	movlb	1	; select bank1
 11485  0499  16A0               	bsf	_myMain^(0+128),5
 11486                           
 11487                           ;MCU_B1.c: 767: myMain.First = 1;
 11488  049A  17A0               	bsf	_myMain^(0+128),7
 11489                           
 11490                           ;MCU_B1.c: 768: }
 11491                           ;MCU_B1.c: 769: } else {
 11492  049B  0008               	return
 11493  049C                     l7181:	
 11494                           
 11495                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
 11496  049C  3020               	movlw	32
 11497  049D  3196  2605  3184   	fcall	_setPercentValue
 11498  04A0  0020               	movlb	0	; select bank0
 11499  04A1  00DD               	movwf	??_Flash_Memory_Initialization
 11500  04A2  085D               	movf	??_Flash_Memory_Initialization,w
 11501  04A3  00DE               	movwf	Flash_Memory_Initialization@i
 11502                           
 11503                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 11504  04A4  30FF               	movlw	255
 11505  04A5  00DD               	movwf	??_Flash_Memory_Initialization
 11506  04A6  085D               	movf	??_Flash_Memory_Initialization,w
 11507  04A7  0022               	movlb	2	; select bank2
 11508  04A8  00BD               	movwf	_Memory^(0+256)
 11509                           
 11510                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 11511  04A9  30FF               	movlw	255
 11512  04AA  0020               	movlb	0	; select bank0
 11513  04AB  00DD               	movwf	??_Flash_Memory_Initialization
 11514  04AC  085D               	movf	??_Flash_Memory_Initialization,w
 11515  04AD  0022               	movlb	2	; select bank2
 11516  04AE  00BE               	movwf	(_Memory^(0+256)+1)
 11517                           
 11518                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 11519  04AF  30FF               	movlw	255
 11520  04B0  0020               	movlb	0	; select bank0
 11521  04B1  00DD               	movwf	??_Flash_Memory_Initialization
 11522  04B2  085D               	movf	??_Flash_Memory_Initialization,w
 11523  04B3  0022               	movlb	2	; select bank2
 11524  04B4  00BF               	movwf	(_Memory^(0+256)+2)
 11525                           
 11526                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 11527  04B5  30FF               	movlw	255
 11528  04B6  0020               	movlb	0	; select bank0
 11529  04B7  00DD               	movwf	??_Flash_Memory_Initialization
 11530  04B8  085D               	movf	??_Flash_Memory_Initialization,w
 11531  04B9  0022               	movlb	2	; select bank2
 11532  04BA  00C0               	movwf	(_Memory^(0+256)+3)
 11533                           
 11534                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 11535  04BB  30FF               	movlw	255
 11536  04BC  0020               	movlb	0	; select bank0
 11537  04BD  00DD               	movwf	??_Flash_Memory_Initialization
 11538  04BE  085D               	movf	??_Flash_Memory_Initialization,w
 11539  04BF  0022               	movlb	2	; select bank2
 11540  04C0  00C1               	movwf	(_Memory^(0+256)+4)
 11541                           
 11542                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 11543  04C1  30FF               	movlw	255
 11544  04C2  0020               	movlb	0	; select bank0
 11545  04C3  00DD               	movwf	??_Flash_Memory_Initialization
 11546  04C4  085D               	movf	??_Flash_Memory_Initialization,w
 11547  04C5  0022               	movlb	2	; select bank2
 11548  04C6  00C2               	movwf	(_Memory^(0+256)+5)
 11549                           
 11550                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 11551  04C7  30AA               	movlw	170
 11552  04C8  0020               	movlb	0	; select bank0
 11553  04C9  00DD               	movwf	??_Flash_Memory_Initialization
 11554  04CA  085D               	movf	??_Flash_Memory_Initialization,w
 11555  04CB  0022               	movlb	2	; select bank2
 11556  04CC  00DC               	movwf	(_Memory^(0+256)+31)
 11557                           
 11558                           ;MCU_B1.c: 778: product->Data[21] = i;
 11559  04CD  0020               	movlb	0	; select bank0
 11560  04CE  085E               	movf	Flash_Memory_Initialization@i,w
 11561  04CF  00DD               	movwf	??_Flash_Memory_Initialization
 11562  04D0  086F               	movf	_product,w
 11563  04D1  3E15               	addlw	21
 11564  04D2  0086               	movwf	6
 11565  04D3  3001               	movlw	1	; select bank2/3
 11566  04D4  0087               	movwf	7
 11567  04D5  085D               	movf	??_Flash_Memory_Initialization,w
 11568  04D6  0081               	movwf	1
 11569                           
 11570                           ;MCU_B1.c: 779: product->Data[22] = i;
 11571  04D7  085E               	movf	Flash_Memory_Initialization@i,w
 11572  04D8  00DD               	movwf	??_Flash_Memory_Initialization
 11573  04D9  086F               	movf	_product,w
 11574  04DA  3E16               	addlw	22
 11575  04DB  0086               	movwf	6
 11576  04DC  3001               	movlw	1	; select bank2/3
 11577  04DD  0087               	movwf	7
 11578  04DE  085D               	movf	??_Flash_Memory_Initialization,w
 11579  04DF  0081               	movwf	1
 11580                           
 11581                           ;MCU_B1.c: 780: product->Data[23] = i;
 11582  04E0  085E               	movf	Flash_Memory_Initialization@i,w
 11583  04E1  00DD               	movwf	??_Flash_Memory_Initialization
 11584  04E2  086F               	movf	_product,w
 11585  04E3  3E17               	addlw	23
 11586  04E4  0086               	movwf	6
 11587  04E5  3001               	movlw	1	; select bank2/3
 11588  04E6  0087               	movwf	7
 11589  04E7  085D               	movf	??_Flash_Memory_Initialization,w
 11590  04E8  0081               	movwf	1
 11591                           
 11592                           ;MCU_B1.c: 781: GIE = 0;
 11593  04E9  138B               	bcf	11,7	;volatile
 11594                           
 11595                           ;MCU_B1.c: 782: Flash_Memory_Write();
 11596  04EA  3193  23C9         	fcall	_Flash_Memory_Write
 11597                           
 11598                           ;MCU_B1.c: 783: GIE = 1;
 11599  04EC  178B               	bsf	11,7	;volatile
 11600                           
 11601                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 11602  04ED  0021               	movlb	1	; select bank1
 11603  04EE  16A0               	bsf	_myMain^(0+128),5
 11604                           
 11605                           ;MCU_B1.c: 785: myMain.First = 1;
 11606  04EF  17A0               	bsf	_myMain^(0+128),7
 11607  04F0  0008               	return
 11608  04F1                     __end_of_Flash_Memory_Initialization:	
 11609                           
 11610                           	psect	text72
 11611  13C9                     __ptext72:	
 11612 ;; *************** function _Flash_Memory_Write *****************
 11613 ;; Defined at:
 11614 ;;		line 829 in file "../src/MCU_B1.c"
 11615 ;; Parameters:    Size  Location     Type
 11616 ;;		None
 11617 ;; Auto vars:     Size  Location     Type
 11618 ;;  i               1    1[BANK0 ] unsigned char 
 11619 ;; Return value:  Size  Location     Type
 11620 ;;		None               void
 11621 ;; Registers used:
 11622 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11623 ;; Tracked objects:
 11624 ;;		On entry : 0/0
 11625 ;;		On exit  : 0/0
 11626 ;;		Unchanged: 0/0
 11627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;Total ram usage:        2 bytes
 11633 ;; Hardware stack levels used:    1
 11634 ;; Hardware stack levels required when called:    6
 11635 ;; This function calls:
 11636 ;;		_Flash_Memory_Unlock
 11637 ;; This function is called by:
 11638 ;;		_Flash_Memory_Initialization
 11639 ;;		_Flash_Memory_Modify
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           
 11644                           ;psect for function _Flash_Memory_Write
 11645  13C9                     _Flash_Memory_Write:	
 11646                           
 11647                           ;MCU_B1.c: 830: char i = 0;
 11648                           
 11649                           ;incstack = 0
 11650                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11651  13C9  0020               	movlb	0	; select bank0
 11652  13CA  01A1               	clrf	Flash_Memory_Write@i
 11653                           
 11654                           ;MCU_B1.c: 831: CFGS = 0;
 11655  13CB  0023               	movlb	3	; select bank3
 11656  13CC  1315               	bcf	21,6	;volatile
 11657                           
 11658                           ;MCU_B1.c: 832: PMADRH = 0x30;
 11659  13CD  3030               	movlw	48
 11660  13CE  0092               	movwf	18	;volatile
 11661                           
 11662                           ;MCU_B1.c: 833: PMDATH = 0;
 11663  13CF  0194               	clrf	20	;volatile
 11664                           
 11665                           ;MCU_B1.c: 834: FREE = 0;
 11666  13D0  1215               	bcf	21,4	;volatile
 11667                           
 11668                           ;MCU_B1.c: 835: LWLO = 1;
 11669  13D1  1695               	bsf	21,5	;volatile
 11670                           
 11671                           ;MCU_B1.c: 836: WREN = 1;
 11672  13D2  1515               	bsf	21,2	;volatile
 11673                           
 11674                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 11675  13D3  0020               	movlb	0	; select bank0
 11676  13D4  01A1               	clrf	Flash_Memory_Write@i
 11677  13D5  3020               	movlw	32
 11678  13D6  0221               	subwf	Flash_Memory_Write@i,w
 11679  13D7  1803               	btfsc	3,0
 11680  13D8  2BF1               	goto	l1241
 11681  13D9                     l6257:	
 11682                           
 11683                           ;MCU_B1.c: 838: PMADRL = i;
 11684  13D9  0821               	movf	Flash_Memory_Write@i,w
 11685  13DA  0023               	movlb	3	; select bank3
 11686  13DB  0091               	movwf	17	;volatile
 11687                           
 11688                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 11689  13DC  0020               	movlb	0	; select bank0
 11690  13DD  0821               	movf	Flash_Memory_Write@i,w
 11691  13DE  3E3D               	addlw	_Memory& (0+255)
 11692  13DF  0086               	movwf	6
 11693  13E0  3001               	movlw	1	; select bank2/3
 11694  13E1  0087               	movwf	7
 11695  13E2  0801               	movf	1,w
 11696  13E3  0023               	movlb	3	; select bank3
 11697  13E4  0093               	movwf	19	;volatile
 11698                           
 11699                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 11700  13E5  319E  2678  3193   	fcall	_Flash_Memory_Unlock
 11701  13E8  3001               	movlw	1
 11702  13E9  0020               	movlb	0	; select bank0
 11703  13EA  00A0               	movwf	??_Flash_Memory_Write
 11704  13EB  0820               	movf	??_Flash_Memory_Write,w
 11705  13EC  07A1               	addwf	Flash_Memory_Write@i,f
 11706  13ED  3020               	movlw	32
 11707  13EE  0221               	subwf	Flash_Memory_Write@i,w
 11708  13EF  1C03               	skipc
 11709  13F0  2BD9               	goto	l6257
 11710  13F1                     l1241:	
 11711                           
 11712                           ;MCU_B1.c: 841: }
 11713                           ;MCU_B1.c: 842: LWLO = 0;
 11714  13F1  0023               	movlb	3	; select bank3
 11715  13F2  1295               	bcf	21,5	;volatile
 11716                           
 11717                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11718  13F3  319E  2678         	fcall	_Flash_Memory_Unlock
 11719                           
 11720                           ;MCU_B1.c: 844: WREN = 0;
 11721  13F5  0023               	movlb	3	; select bank3
 11722  13F6  1115               	bcf	21,2	;volatile
 11723  13F7  0008               	return
 11724  13F8                     __end_of_Flash_Memory_Write:	
 11725                           
 11726                           	psect	text73
 11727  1E78                     __ptext73:	
 11728 ;; *************** function _Flash_Memory_Unlock *****************
 11729 ;; Defined at:
 11730 ;;		line 808 in file "../src/MCU_B1.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;		None
 11733 ;; Auto vars:     Size  Location     Type
 11734 ;;		None
 11735 ;; Return value:  Size  Location     Type
 11736 ;;		None               void
 11737 ;; Registers used:
 11738 ;;		wreg
 11739 ;; Tracked objects:
 11740 ;;		On entry : 0/0
 11741 ;;		On exit  : 0/0
 11742 ;;		Unchanged: 0/0
 11743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11747 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11748 ;;Total ram usage:        0 bytes
 11749 ;; Hardware stack levels used:    1
 11750 ;; Hardware stack levels required when called:    5
 11751 ;; This function calls:
 11752 ;;		Nothing
 11753 ;; This function is called by:
 11754 ;;		_Flash_Memory_Write
 11755 ;;		_Flash_Memory_Erasing
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           
 11760                           ;psect for function _Flash_Memory_Unlock
 11761  1E78                     _Flash_Memory_Unlock:	
 11762                           
 11763                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 11764                           
 11765                           ;incstack = 0
 11766                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11767  1E78  3055               	movlw	85
 11768  1E79  0023               	movlb	3	; select bank3
 11769  1E7A  0096               	movwf	22	;volatile
 11770                           
 11771                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 11772  1E7B  30AA               	movlw	170
 11773  1E7C  0096               	movwf	22	;volatile
 11774                           
 11775                           ;MCU_B1.c: 811: WR = 1;
 11776  1E7D  1495               	bsf	21,1	;volatile
 11777                           
 11778                           ;MCU_B1.c: 812: __nop();
 11779  1E7E  0000               	nop
 11780                           
 11781                           ;MCU_B1.c: 813: __nop();
 11782  1E7F  0000               	nop
 11783  1E80  0008               	return
 11784  1E81                     __end_of_Flash_Memory_Unlock:	
 11785                           
 11786                           	psect	text74
 11787  114C                     __ptext74:	
 11788 ;; *************** function _Flash_Memory_Read *****************
 11789 ;; Defined at:
 11790 ;;		line 817 in file "../src/MCU_B1.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;  address         1    wreg     unsigned char 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  address         1    2[BANK0 ] unsigned char 
 11795 ;;  ret             1    3[BANK0 ] unsigned char 
 11796 ;;  i               1    1[BANK0 ] unsigned char 
 11797 ;; Return value:  Size  Location     Type
 11798 ;;                  1    wreg      unsigned char 
 11799 ;; Registers used:
 11800 ;;		wreg, status,2
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;Total ram usage:        4 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    5
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		_Flash_Memory_Initialization
 11817 ;;		_Flash_Memory_Modify
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           
 11822                           ;psect for function _Flash_Memory_Read
 11823  114C                     _Flash_Memory_Read:	
 11824                           
 11825                           ;incstack = 0
 11826                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11827                           ;Flash_Memory_Read@address stored from wreg
 11828  114C  0020               	movlb	0	; select bank0
 11829  114D  00A2               	movwf	Flash_Memory_Read@address
 11830                           
 11831                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 11832  114E  01A1               	clrf	Flash_Memory_Read@i
 11833  114F  01A3               	clrf	Flash_Memory_Read@ret
 11834                           
 11835                           ;MCU_B1.c: 819: PMADRH = 0x30;
 11836  1150  3030               	movlw	48
 11837  1151  0023               	movlb	3	; select bank3
 11838  1152  0092               	movwf	18	;volatile
 11839                           
 11840                           ;MCU_B1.c: 820: PMADRL = address;
 11841  1153  0020               	movlb	0	; select bank0
 11842  1154  0822               	movf	Flash_Memory_Read@address,w
 11843  1155  0023               	movlb	3	; select bank3
 11844  1156  0091               	movwf	17	;volatile
 11845                           
 11846                           ;MCU_B1.c: 821: CFGS = 0;
 11847  1157  1315               	bcf	21,6	;volatile
 11848                           
 11849                           ;MCU_B1.c: 822: RD = 1;
 11850  1158  1415               	bsf	21,0	;volatile
 11851                           
 11852                           ;MCU_B1.c: 823: i = PMDATH;
 11853  1159  0814               	movf	20,w	;volatile
 11854  115A  0020               	movlb	0	; select bank0
 11855  115B  00A0               	movwf	??_Flash_Memory_Read
 11856  115C  0820               	movf	??_Flash_Memory_Read,w
 11857  115D  00A1               	movwf	Flash_Memory_Read@i
 11858                           
 11859                           ;MCU_B1.c: 824: ret = PMDATL;
 11860  115E  0023               	movlb	3	; select bank3
 11861  115F  0813               	movf	19,w	;volatile
 11862  1160  0020               	movlb	0	; select bank0
 11863  1161  00A0               	movwf	??_Flash_Memory_Read
 11864  1162  0820               	movf	??_Flash_Memory_Read,w
 11865  1163  00A3               	movwf	Flash_Memory_Read@ret
 11866                           
 11867                           ;MCU_B1.c: 825: return ret;
 11868  1164  0823               	movf	Flash_Memory_Read@ret,w
 11869  1165  0008               	return
 11870  1166                     __end_of_Flash_Memory_Read:	
 11871                           
 11872                           	psect	text75
 11873  1E43                     __ptext75:	
 11874 ;; *************** function _DimmerLights_Main *****************
 11875 ;; Defined at:
 11876 ;;		line 407 in file "../src/Dimmer_B1.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;		None
 11879 ;; Auto vars:     Size  Location     Type
 11880 ;;		None
 11881 ;; Return value:  Size  Location     Type
 11882 ;;		None               void
 11883 ;; Registers used:
 11884 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11885 ;; Tracked objects:
 11886 ;;		On entry : 0/0
 11887 ;;		On exit  : 0/0
 11888 ;;		Unchanged: 0/0
 11889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;Total ram usage:        0 bytes
 11895 ;; Hardware stack levels used:    1
 11896 ;; Hardware stack levels required when called:   11
 11897 ;; This function calls:
 11898 ;;		_DimmerLights_Close
 11899 ;;		_setDimmerLights_Main
 11900 ;; This function is called by:
 11901 ;;		_main
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           
 11906                           ;psect for function _DimmerLights_Main
 11907  1E43                     _DimmerLights_Main:	
 11908                           
 11909                           ;Dimmer_B1.c: 410: setDimmerLights_Main(1);
 11910                           
 11911                           ;incstack = 0
 11912                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11913  1E43  3001               	movlw	1
 11914  1E44  3189  2192  319E   	fcall	_setDimmerLights_Main
 11915                           
 11916                           ;Dimmer_B1.c: 421: DimmerLights_Close();
 11917  1E47  3190  20AC         	fcall	_DimmerLights_Close
 11918  1E49  0008               	return
 11919  1E4A                     __end_of_DimmerLights_Main:	
 11920                           
 11921                           	psect	text76
 11922  0992                     __ptext76:	
 11923 ;; *************** function _setDimmerLights_Main *****************
 11924 ;; Defined at:
 11925 ;;		line 425 in file "../src/Dimmer_B1.c"
 11926 ;; Parameters:    Size  Location     Type
 11927 ;;  lights          1    wreg     unsigned char 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  lights          1   70[BANK0 ] unsigned char 
 11930 ;;  clear           1   69[BANK0 ] unsigned char 
 11931 ;; Return value:  Size  Location     Type
 11932 ;;		None               void
 11933 ;; Registers used:
 11934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;Total ram usage:        2 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:   10
 11947 ;; This function calls:
 11948 ;;		_DimmerLightsPointSelect
 11949 ;;		_setBuz
 11950 ;;		_setDimmerLights
 11951 ;;		_setDimmerLights_Adj
 11952 ;; This function is called by:
 11953 ;;		_DimmerLights_Main
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           
 11958                           ;psect for function _setDimmerLights_Main
 11959  0992                     _setDimmerLights_Main:	
 11960                           
 11961                           ;incstack = 0
 11962                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11963                           ;setDimmerLights_Main@lights stored from wreg
 11964  0992  0020               	movlb	0	; select bank0
 11965  0993  00E6               	movwf	setDimmerLights_Main@lights
 11966                           
 11967                           ;Dimmer_B1.c: 426: char clear = 1;
 11968  0994  01E5               	clrf	setDimmerLights_Main@clear
 11969  0995  0AE5               	incf	setDimmerLights_Main@clear,f
 11970                           
 11971                           ;Dimmer_B1.c: 427: DimmerLightsPointSelect(lights);
 11972  0996  0866               	movf	setDimmerLights_Main@lights,w
 11973  0997  319E  26BF  3189   	fcall	_DimmerLightsPointSelect
 11974                           
 11975                           ;Dimmer_B1.c: 447: if (DimmerLights->Trigger == 1) {
 11976  099A  0020               	movlb	0	; select bank0
 11977  099B  086D               	movf	_DimmerLights,w
 11978  099C  3E08               	addlw	8
 11979  099D  0086               	movwf	6
 11980  099E  3001               	movlw	1	; select bank2/3
 11981  099F  0087               	movwf	7
 11982  09A0  1D01               	btfss	1,2
 11983  09A1  29BF               	goto	l7653
 11984                           
 11985                           ;Dimmer_B1.c: 448: if (clear == 1) {
 11986  09A2  0865               	movf	setDimmerLights_Main@clear,w
 11987  09A3  3A01               	xorlw	1
 11988  09A4  1D03               	skipz
 11989  09A5  0008               	return
 11990                           
 11991                           ;Dimmer_B1.c: 449: DimmerLights->Trigger = 0;
 11992  09A6  086D               	movf	_DimmerLights,w
 11993  09A7  3E08               	addlw	8
 11994  09A8  0086               	movwf	6
 11995  09A9  3001               	movlw	1	; select bank2/3
 11996  09AA  0087               	movwf	7
 11997  09AB  1101               	bcf	1,2
 11998                           
 11999                           ;Dimmer_B1.c: 450: if (DimmerLights->Switch == 1) {
 12000  09AC  086D               	movf	_DimmerLights,w
 12001  09AD  3E08               	addlw	8
 12002  09AE  0086               	movwf	6
 12003  09AF  3001               	movlw	1	; select bank2/3
 12004  09B0  0087               	movwf	7
 12005  09B1  1C81               	btfss	1,1
 12006  09B2  29B9               	goto	l7651
 12007                           
 12008                           ;Dimmer_B1.c: 451: setDimmerLights(lights, 1);
 12009  09B3  01A3               	clrf	setDimmerLights@status
 12010  09B4  0AA3               	incf	setDimmerLights@status,f
 12011  09B5  0866               	movf	setDimmerLights_Main@lights,w
 12012  09B6  318E  2672         	fcall	_setDimmerLights
 12013                           
 12014                           ;Dimmer_B1.c: 452: } else {
 12015  09B8  0008               	return
 12016  09B9                     l7651:	
 12017                           
 12018                           ;Dimmer_B1.c: 453: setDimmerLights(lights, 0);
 12019  09B9  0020               	movlb	0	; select bank0
 12020  09BA  01A3               	clrf	setDimmerLights@status
 12021  09BB  0866               	movf	setDimmerLights_Main@lights,w
 12022  09BC  318E  2672         	fcall	_setDimmerLights
 12023                           
 12024                           ;Dimmer_B1.c: 454: }
 12025                           ;Dimmer_B1.c: 458: }
 12026                           ;Dimmer_B1.c: 459: } else {
 12027  09BE  0008               	return
 12028  09BF                     l7653:	
 12029                           
 12030                           ;Dimmer_B1.c: 460: if (DimmerLights->TriggerAdj == 1) {
 12031  09BF  0020               	movlb	0	; select bank0
 12032  09C0  086D               	movf	_DimmerLights,w
 12033  09C1  3E08               	addlw	8
 12034  09C2  0086               	movwf	6
 12035  09C3  3001               	movlw	1	; select bank2/3
 12036  09C4  0087               	movwf	7
 12037  09C5  1E01               	btfss	1,4
 12038  09C6  0008               	return
 12039                           
 12040                           ;Dimmer_B1.c: 461: if (clear == 1) {
 12041  09C7  0865               	movf	setDimmerLights_Main@clear,w
 12042  09C8  3A01               	xorlw	1
 12043  09C9  1D03               	skipz
 12044  09CA  0008               	return
 12045                           
 12046                           ;Dimmer_B1.c: 462: DimmerLights->TriggerAdj = 0;
 12047  09CB  086D               	movf	_DimmerLights,w
 12048  09CC  3E08               	addlw	8
 12049  09CD  0086               	movwf	6
 12050  09CE  3001               	movlw	1	; select bank2/3
 12051  09CF  0087               	movwf	7
 12052  09D0  1201               	bcf	1,4
 12053                           
 12054                           ;Dimmer_B1.c: 463: if (DimmerLights->AdjGo == 1) {
 12055  09D1  086D               	movf	_DimmerLights,w
 12056  09D2  3E08               	addlw	8
 12057  09D3  0086               	movwf	6
 12058  09D4  3001               	movlw	1	; select bank2/3
 12059  09D5  0087               	movwf	7
 12060  09D6  1D81               	btfss	1,3
 12061  09D7  29E7               	goto	l7663
 12062                           
 12063                           ;Dimmer_B1.c: 464: setDimmerLights_Adj(lights, 1);
 12064  09D8  01E2               	clrf	setDimmerLights_Adj@status
 12065  09D9  0AE2               	incf	setDimmerLights_Adj@status,f
 12066  09DA  0866               	movf	setDimmerLights_Main@lights,w
 12067  09DB  3195  2500  3189   	fcall	_setDimmerLights_Adj
 12068                           
 12069                           ;Dimmer_B1.c: 465: setBuz(1, 100);
 12070  09DE  3064               	movlw	100
 12071  09DF  0020               	movlb	0	; select bank0
 12072  09E0  00A9               	movwf	setBuz@time
 12073  09E1  3000               	movlw	0
 12074  09E2  00AA               	movwf	setBuz@time+1
 12075  09E3  3001               	movlw	1
 12076  09E4  3189  2139         	fcall	_setBuz
 12077                           
 12078                           ;Dimmer_B1.c: 466: } else {
 12079  09E6  0008               	return
 12080  09E7                     l7663:	
 12081                           
 12082                           ;Dimmer_B1.c: 467: setDimmerLights_Adj(lights, 0);
 12083  09E7  0020               	movlb	0	; select bank0
 12084  09E8  01E2               	clrf	setDimmerLights_Adj@status
 12085  09E9  0866               	movf	setDimmerLights_Main@lights,w
 12086  09EA  3195  2500         	fcall	_setDimmerLights_Adj
 12087  09EC  0008               	return
 12088  09ED                     __end_of_setDimmerLights_Main:	
 12089                           
 12090                           	psect	text77
 12091  1500                     __ptext77:	
 12092 ;; *************** function _setDimmerLights_Adj *****************
 12093 ;; Defined at:
 12094 ;;		line 646 in file "../src/Dimmer_B1.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  lights          1    wreg     unsigned char 
 12097 ;;  status          1   66[BANK0 ] unsigned char 
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;  lights          1   68[BANK0 ] unsigned char 
 12100 ;; Return value:  Size  Location     Type
 12101 ;;		None               void
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12109 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12112 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;Total ram usage:        3 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    9
 12116 ;; This function calls:
 12117 ;;		_DimmerLightsPointSelect
 12118 ;;		_setRF_DimmerLights
 12119 ;;		_setTxData
 12120 ;; This function is called by:
 12121 ;;		_setDimmerLights_Main
 12122 ;; This function uses a non-reentrant model
 12123 ;;
 12124                           
 12125                           
 12126                           ;psect for function _setDimmerLights_Adj
 12127  1500                     _setDimmerLights_Adj:	
 12128                           
 12129                           ;incstack = 0
 12130                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12131                           ;setDimmerLights_Adj@lights stored from wreg
 12132  1500  0020               	movlb	0	; select bank0
 12133  1501  00E4               	movwf	setDimmerLights_Adj@lights
 12134                           
 12135                           ;Dimmer_B1.c: 647: DimmerLightsPointSelect(lights);
 12136  1502  0864               	movf	setDimmerLights_Adj@lights,w
 12137  1503  319E  26BF  3195   	fcall	_DimmerLightsPointSelect
 12138                           
 12139                           ;Dimmer_B1.c: 648: if (status == 1) {
 12140  1506  0020               	movlb	0	; select bank0
 12141  1507  0862               	movf	setDimmerLights_Adj@status,w
 12142  1508  3A01               	xorlw	1
 12143  1509  1D03               	skipz
 12144  150A  2D16               	goto	l6211
 12145                           
 12146                           ;Dimmer_B1.c: 649: DimmerLights->AdjFlag = 1;
 12147  150B  086D               	movf	_DimmerLights,w
 12148  150C  0086               	movwf	6
 12149  150D  3001               	movlw	1	; select bank2/3
 12150  150E  0087               	movwf	7
 12151  150F  1581               	bsf	1,3
 12152                           
 12153                           ;Dimmer_B1.c: 650: DimmerLights->Signal = 1;
 12154  1510  086D               	movf	_DimmerLights,w
 12155  1511  0086               	movwf	6
 12156  1512  3001               	movlw	1	; select bank2/3
 12157  1513  0087               	movwf	7
 12158  1514  1481               	bsf	1,1
 12159                           
 12160                           ;Dimmer_B1.c: 651: } else {
 12161  1515  0008               	return
 12162  1516                     l6211:	
 12163                           
 12164                           ;Dimmer_B1.c: 652: if (DimmerLights->AdjFlag == 1) {
 12165  1516  086D               	movf	_DimmerLights,w
 12166  1517  0086               	movwf	6
 12167  1518  3001               	movlw	1	; select bank2/3
 12168  1519  0087               	movwf	7
 12169  151A  1D81               	btfss	1,3
 12170  151B  0008               	return
 12171                           
 12172                           ;Dimmer_B1.c: 654: DimmerLights->Signal = 0;
 12173  151C  086D               	movf	_DimmerLights,w
 12174  151D  0086               	movwf	6
 12175  151E  3001               	movlw	1	; select bank2/3
 12176  151F  0087               	movwf	7
 12177  1520  1081               	bcf	1,1
 12178                           
 12179                           ;Dimmer_B1.c: 655: DimmerLights->AdjFlag = 0;
 12180  1521  086D               	movf	_DimmerLights,w
 12181  1522  0086               	movwf	6
 12182  1523  3001               	movlw	1	; select bank2/3
 12183  1524  0087               	movwf	7
 12184  1525  1181               	bcf	1,3
 12185                           
 12186                           ;Dimmer_B1.c: 656: ;;
 12187                           ;Dimmer_B1.c: 657: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12188  1526  086D               	movf	_DimmerLights,w
 12189  1527  3E04               	addlw	4
 12190  1528  0086               	movwf	6
 12191  1529  3001               	movlw	1	; select bank2/3
 12192  152A  0087               	movwf	7
 12193  152B  0801               	movf	1,w
 12194  152C  00E3               	movwf	??_setDimmerLights_Adj
 12195  152D  086D               	movf	_DimmerLights,w
 12196  152E  3E05               	addlw	5
 12197  152F  0086               	movwf	6
 12198  1530  3001               	movlw	1	; select bank2/3
 12199  1531  0087               	movwf	7
 12200  1532  0863               	movf	??_setDimmerLights_Adj,w
 12201  1533  0081               	movwf	1
 12202                           
 12203                           ;Dimmer_B1.c: 665: setRF_DimmerLights(lights, 1);
 12204  1534  01DD               	clrf	setRF_DimmerLights@on
 12205  1535  0ADD               	incf	setRF_DimmerLights@on,f
 12206  1536  0864               	movf	setDimmerLights_Adj@lights,w
 12207  1537  3187  2792  3195   	fcall	_setRF_DimmerLights
 12208                           
 12209                           ;Dimmer_B1.c: 666: setTxData();
 12210  153A  3184  24F1         	fcall	_setTxData
 12211  153C  0008               	return
 12212  153D                     __end_of_setDimmerLights_Adj:	
 12213                           
 12214                           	psect	text78
 12215  0E72                     __ptext78:	
 12216 ;; *************** function _setDimmerLights *****************
 12217 ;; Defined at:
 12218 ;;		line 593 in file "../src/Dimmer_B1.c"
 12219 ;; Parameters:    Size  Location     Type
 12220 ;;  lights          1    wreg     unsigned char 
 12221 ;;  status          1    3[BANK0 ] unsigned char 
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  lights          1    5[BANK0 ] unsigned char 
 12224 ;; Return value:  Size  Location     Type
 12225 ;;		None               void
 12226 ;; Registers used:
 12227 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12228 ;; Tracked objects:
 12229 ;;		On entry : 0/0
 12230 ;;		On exit  : 0/0
 12231 ;;		Unchanged: 0/0
 12232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12233 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;Total ram usage:        3 bytes
 12238 ;; Hardware stack levels used:    1
 12239 ;; Hardware stack levels required when called:    7
 12240 ;; This function calls:
 12241 ;;		_DimmerLightsPointSelect
 12242 ;;		_setLED
 12243 ;;		_setMemory_GO
 12244 ;; This function is called by:
 12245 ;;		_setDimmerLights_Main
 12246 ;;		_setControl_Lights_Table
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           
 12251                           ;psect for function _setDimmerLights
 12252  0E72                     _setDimmerLights:	
 12253                           
 12254                           ;incstack = 0
 12255                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12256                           ;setDimmerLights@lights stored from wreg
 12257  0E72  0020               	movlb	0	; select bank0
 12258  0E73  00A5               	movwf	setDimmerLights@lights
 12259                           
 12260                           ;Dimmer_B1.c: 594: DimmerLightsPointSelect(lights);
 12261  0E74  0825               	movf	setDimmerLights@lights,w
 12262  0E75  319E  26BF  318E   	fcall	_DimmerLightsPointSelect
 12263                           
 12264                           ;Dimmer_B1.c: 595: Dimmer->Load = lights;
 12265  0E78  0020               	movlb	0	; select bank0
 12266  0E79  0825               	movf	setDimmerLights@lights,w
 12267  0E7A  00A4               	movwf	??_setDimmerLights
 12268  0E7B  0021               	movlb	1	; select bank1
 12269  0E7C  0A50               	incf	_Dimmer^(0+128),w
 12270  0E7D  0086               	movwf	6
 12271  0E7E  0187               	clrf	7
 12272  0E7F  0020               	movlb	0	; select bank0
 12273  0E80  0824               	movf	??_setDimmerLights,w
 12274  0E81  0081               	movwf	1
 12275                           
 12276                           ;Dimmer_B1.c: 596: if (status == 1) {
 12277  0E82  0823               	movf	setDimmerLights@status,w
 12278  0E83  3A01               	xorlw	1
 12279  0E84  1D03               	skipz
 12280  0E85  2EC7               	goto	l7515
 12281                           
 12282                           ;Dimmer_B1.c: 597: DimmerLights->Status = 1;
 12283  0E86  086D               	movf	_DimmerLights,w
 12284  0E87  0086               	movwf	6
 12285  0E88  3001               	movlw	1	; select bank2/3
 12286  0E89  0087               	movwf	7
 12287  0E8A  1681               	bsf	1,5
 12288                           
 12289                           ;Dimmer_B1.c: 598: setLED(lights, 0);
 12290  0E8B  01A1               	clrf	setLED@command
 12291  0E8C  0825               	movf	setDimmerLights@lights,w
 12292  0E8D  318B  230A  318E   	fcall	_setLED
 12293                           
 12294                           ;Dimmer_B1.c: 599: RC7=!0;
 12295  0E90  0020               	movlb	0	; select bank0
 12296  0E91  178E               	bsf	14,7	;volatile
 12297                           
 12298                           ;Dimmer_B1.c: 600: ;;
 12299                           ;Dimmer_B1.c: 602: DimmerLights->Signal = 1;
 12300  0E92  086D               	movf	_DimmerLights,w
 12301  0E93  0086               	movwf	6
 12302  0E94  3001               	movlw	1	; select bank2/3
 12303  0E95  0087               	movwf	7
 12304  0E96  1481               	bsf	1,1
 12305                           
 12306                           ;Dimmer_B1.c: 603: DimmerLights->DimmingTimeValue = 7;
 12307  0E97  3007               	movlw	7
 12308  0E98  00A4               	movwf	??_setDimmerLights
 12309  0E99  086D               	movf	_DimmerLights,w
 12310  0E9A  3E02               	addlw	2
 12311  0E9B  0086               	movwf	6
 12312  0E9C  3001               	movlw	1	; select bank2/3
 12313  0E9D  0087               	movwf	7
 12314  0E9E  0824               	movf	??_setDimmerLights,w
 12315  0E9F  0081               	movwf	1
 12316                           
 12317                           ;Dimmer_B1.c: 605: if (DimmerLights->StatusFlag == 0) {
 12318  0EA0  086D               	movf	_DimmerLights,w
 12319  0EA1  0086               	movwf	6
 12320  0EA2  3001               	movlw	1	; select bank2/3
 12321  0EA3  0087               	movwf	7
 12322  0EA4  1B01               	btfsc	1,6
 12323  0EA5  0008               	return
 12324                           
 12325                           ;Dimmer_B1.c: 606: DimmerLights->StatusFlag = 1;
 12326  0EA6  086D               	movf	_DimmerLights,w
 12327  0EA7  0086               	movwf	6
 12328  0EA8  3001               	movlw	1	; select bank2/3
 12329  0EA9  0087               	movwf	7
 12330  0EAA  1701               	bsf	1,6
 12331                           
 12332                           ;Dimmer_B1.c: 607: ;;
 12333                           ;Dimmer_B1.c: 608: setMemory_GO(0);
 12334  0EAB  3000               	movlw	0
 12335  0EAC  3190  20D5         	fcall	_setMemory_GO
 12336                           
 12337                           ;Dimmer_B1.c: 611: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12338  0EAE  0020               	movlb	0	; select bank0
 12339  0EAF  086D               	movf	_DimmerLights,w
 12340  0EB0  3E05               	addlw	5
 12341  0EB1  0086               	movwf	6
 12342  0EB2  3001               	movlw	1	; select bank2/3
 12343  0EB3  0087               	movwf	7
 12344  0EB4  0801               	movf	1,w
 12345  0EB5  00A4               	movwf	??_setDimmerLights
 12346  0EB6  086D               	movf	_DimmerLights,w
 12347  0EB7  3E04               	addlw	4
 12348  0EB8  0086               	movwf	6
 12349  0EB9  3001               	movlw	1	; select bank2/3
 12350  0EBA  0087               	movwf	7
 12351  0EBB  0824               	movf	??_setDimmerLights,w
 12352  0EBC  0081               	movwf	1
 12353                           
 12354                           ;Dimmer_B1.c: 615: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12355  0EBD  3020               	movlw	32
 12356  0EBE  00A4               	movwf	??_setDimmerLights
 12357  0EBF  086D               	movf	_DimmerLights,w
 12358  0EC0  3E04               	addlw	4
 12359  0EC1  0086               	movwf	6
 12360  0EC2  3001               	movlw	1	; select bank2/3
 12361  0EC3  0087               	movwf	7
 12362  0EC4  0824               	movf	??_setDimmerLights,w
 12363  0EC5  0081               	movwf	1
 12364                           
 12365                           ;Dimmer_B1.c: 617: }
 12366                           ;Dimmer_B1.c: 618: } else {
 12367  0EC6  0008               	return
 12368  0EC7                     l7515:	
 12369                           
 12370                           ;Dimmer_B1.c: 619: DimmerLights->Status = 0;
 12371  0EC7  086D               	movf	_DimmerLights,w
 12372  0EC8  0086               	movwf	6
 12373  0EC9  3001               	movlw	1	; select bank2/3
 12374  0ECA  0087               	movwf	7
 12375  0ECB  1281               	bcf	1,5
 12376                           
 12377                           ;Dimmer_B1.c: 621: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12378  0ECC  086D               	movf	_DimmerLights,w
 12379  0ECD  3E06               	addlw	6
 12380  0ECE  0086               	movwf	6
 12381  0ECF  3001               	movlw	1	; select bank2/3
 12382  0ED0  0087               	movwf	7
 12383  0ED1  0801               	movf	1,w
 12384  0ED2  00A4               	movwf	??_setDimmerLights
 12385  0ED3  086D               	movf	_DimmerLights,w
 12386  0ED4  3E04               	addlw	4
 12387  0ED5  0086               	movwf	6
 12388  0ED6  3001               	movlw	1	; select bank2/3
 12389  0ED7  0087               	movwf	7
 12390  0ED8  0824               	movf	??_setDimmerLights,w
 12391  0ED9  0081               	movwf	1
 12392                           
 12393                           ;Dimmer_B1.c: 628: DimmerLights->Signal = 1;
 12394  0EDA  086D               	movf	_DimmerLights,w
 12395  0EDB  0086               	movwf	6
 12396  0EDC  3001               	movlw	1	; select bank2/3
 12397  0EDD  0087               	movwf	7
 12398  0EDE  1481               	bsf	1,1
 12399                           
 12400                           ;Dimmer_B1.c: 629: DimmerLights->AdjFlag = 0;
 12401  0EDF  086D               	movf	_DimmerLights,w
 12402  0EE0  0086               	movwf	6
 12403  0EE1  3001               	movlw	1	; select bank2/3
 12404  0EE2  0087               	movwf	7
 12405  0EE3  1181               	bcf	1,3
 12406                           
 12407                           ;Dimmer_B1.c: 630: DimmerLights->AdjStatus = 0;
 12408  0EE4  086D               	movf	_DimmerLights,w
 12409  0EE5  0086               	movwf	6
 12410  0EE6  3001               	movlw	1	; select bank2/3
 12411  0EE7  0087               	movwf	7
 12412  0EE8  1201               	bcf	1,4
 12413                           
 12414                           ;Dimmer_B1.c: 631: DimmerLights->DimmingTimeValue = 7;
 12415  0EE9  3007               	movlw	7
 12416  0EEA  00A4               	movwf	??_setDimmerLights
 12417  0EEB  086D               	movf	_DimmerLights,w
 12418  0EEC  3E02               	addlw	2
 12419  0EED  0086               	movwf	6
 12420  0EEE  3001               	movlw	1	; select bank2/3
 12421  0EEF  0087               	movwf	7
 12422  0EF0  0824               	movf	??_setDimmerLights,w
 12423  0EF1  0081               	movwf	1
 12424  0EF2  0008               	return
 12425  0EF3                     __end_of_setDimmerLights:	
 12426                           
 12427                           	psect	text79
 12428  0B0A                     __ptext79:	
 12429 ;; *************** function _setLED *****************
 12430 ;; Defined at:
 12431 ;;		line 70 in file "../src/LED_B1.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;  led             1    wreg     unsigned char 
 12434 ;;  command         1    1[BANK0 ] unsigned char 
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  led             1    2[BANK0 ] unsigned char 
 12437 ;; Return value:  Size  Location     Type
 12438 ;;		None               void
 12439 ;; Registers used:
 12440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12446 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;Total ram usage:        2 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    6
 12453 ;; This function calls:
 12454 ;;		_LedPointSelect
 12455 ;; This function is called by:
 12456 ;;		_setDimmerLights_ERROR
 12457 ;;		_setDimmerLights
 12458 ;;		_setLED_Initialization
 12459 ;;		_setOverTemp_Exceptions
 12460 ;;		_setPowerFault_Exceptions
 12461 ;;		_setSw_Initialization
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           
 12466                           ;psect for function _setLED
 12467  0B0A                     _setLED:	
 12468                           
 12469                           ;incstack = 0
 12470                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12471                           ;setLED@led stored from wreg
 12472  0B0A  0020               	movlb	0	; select bank0
 12473  0B0B  00A2               	movwf	setLED@led
 12474                           
 12475                           ;LED_B1.c: 71: LedPointSelect(led);
 12476  0B0C  0822               	movf	setLED@led,w
 12477  0B0D  3192  2246  318B   	fcall	_LedPointSelect
 12478                           
 12479                           ;LED_B1.c: 72: if (command == 0) {
 12480  0B10  0020               	movlb	0	; select bank0
 12481  0B11  08A1               	movf	setLED@command,f
 12482  0B12  1D03               	skipz
 12483  0B13  2B26               	goto	l7455
 12484                           
 12485                           ;LED_B1.c: 74: if (led == 1) {
 12486  0B14  0822               	movf	setLED@led,w
 12487  0B15  3A01               	xorlw	1
 12488  0B16  1D03               	skipz
 12489  0B17  2B1A               	goto	l7447
 12490                           
 12491                           ;LED_B1.c: 78: RA3 = 1;
 12492  0B18  158C               	bsf	12,3	;volatile
 12493                           
 12494                           ;LED_B1.c: 80: }
 12495  0B19  0008               	return
 12496  0B1A                     l7447:	
 12497                           
 12498                           ;LED_B1.c: 83: else if (led == 2) {
 12499  0B1A  0822               	movf	setLED@led,w
 12500  0B1B  3A02               	xorlw	2
 12501  0B1C  1D03               	skipz
 12502  0B1D  2B20               	goto	l7451
 12503                           
 12504                           ;LED_B1.c: 87: RC7 = 1;
 12505  0B1E  178E               	bsf	14,7	;volatile
 12506                           
 12507                           ;LED_B1.c: 89: }
 12508  0B1F  0008               	return
 12509  0B20                     l7451:	
 12510                           
 12511                           ;LED_B1.c: 101: else if (led == 99) {
 12512  0B20  0822               	movf	setLED@led,w
 12513  0B21  3A63               	xorlw	99
 12514  0B22  1D03               	skipz
 12515  0B23  0008               	return
 12516                           
 12517                           ;LED_B1.c: 105: RB5 = 1;
 12518  0B24  168D               	bsf	13,5	;volatile
 12519                           
 12520                           ;LED_B1.c: 107: }
 12521                           ;LED_B1.c: 109: } else if (command == 1) {
 12522  0B25  0008               	return
 12523  0B26                     l7455:	
 12524  0B26  0821               	movf	setLED@command,w
 12525  0B27  3A01               	xorlw	1
 12526  0B28  1D03               	skipz
 12527  0B29  2B3C               	goto	l7469
 12528                           
 12529                           ;LED_B1.c: 111: if (led == 1) {
 12530  0B2A  0822               	movf	setLED@led,w
 12531  0B2B  3A01               	xorlw	1
 12532  0B2C  1D03               	skipz
 12533  0B2D  2B30               	goto	l7461
 12534                           
 12535                           ;LED_B1.c: 115: RA3 = 0;
 12536  0B2E  118C               	bcf	12,3	;volatile
 12537                           
 12538                           ;LED_B1.c: 117: }
 12539  0B2F  0008               	return
 12540  0B30                     l7461:	
 12541                           
 12542                           ;LED_B1.c: 120: else if (led == 2) {
 12543  0B30  0822               	movf	setLED@led,w
 12544  0B31  3A02               	xorlw	2
 12545  0B32  1D03               	skipz
 12546  0B33  2B36               	goto	l7465
 12547                           
 12548                           ;LED_B1.c: 124: RC7 = 0;
 12549  0B34  138E               	bcf	14,7	;volatile
 12550                           
 12551                           ;LED_B1.c: 126: }
 12552  0B35  0008               	return
 12553  0B36                     l7465:	
 12554                           
 12555                           ;LED_B1.c: 138: else if (led == 99) {
 12556  0B36  0822               	movf	setLED@led,w
 12557  0B37  3A63               	xorlw	99
 12558  0B38  1D03               	skipz
 12559  0B39  0008               	return
 12560                           
 12561                           ;LED_B1.c: 142: RB5 = 0;
 12562  0B3A  128D               	bcf	13,5	;volatile
 12563                           
 12564                           ;LED_B1.c: 144: }
 12565                           ;LED_B1.c: 146: } else if (command == 10) {
 12566  0B3B  0008               	return
 12567  0B3C                     l7469:	
 12568  0B3C  0821               	movf	setLED@command,w
 12569  0B3D  3A0A               	xorlw	10
 12570  0B3E  1D03               	skipz
 12571  0B3F  2B61               	goto	l7485
 12572                           
 12573                           ;LED_B1.c: 147: LED->GO = 0;
 12574  0B40  0021               	movlb	1	; select bank1
 12575  0B41  084B               	movf	_LED^(0+128),w
 12576  0B42  0086               	movwf	6
 12577  0B43  084C               	movf	(_LED+1)^(0+128),w
 12578  0B44  0087               	movwf	7
 12579  0B45  1081               	bcf	1,1
 12580                           
 12581                           ;LED_B1.c: 148: LED->Time = 0;
 12582  0B46  084B               	movf	_LED^(0+128),w
 12583  0B47  0086               	movwf	6
 12584  0B48  084C               	movf	(_LED+1)^(0+128),w
 12585  0B49  0087               	movwf	7
 12586  0B4A  3141               	addfsr 1,1
 12587  0B4B  3000               	movlw	0
 12588  0B4C  3FC0               	movwi [0]fsr1
 12589  0B4D  3FC1               	movwi [1]fsr1
 12590                           
 12591                           ;LED_B1.c: 150: if (led == 1) {
 12592  0B4E  0020               	movlb	0	; select bank0
 12593  0B4F  0822               	movf	setLED@led,w
 12594  0B50  3A01               	xorlw	1
 12595  0B51  1D03               	skipz
 12596  0B52  2B55               	goto	l7477
 12597                           
 12598                           ;LED_B1.c: 154: RA3 = 1;
 12599  0B53  158C               	bsf	12,3	;volatile
 12600                           
 12601                           ;LED_B1.c: 156: }
 12602  0B54  0008               	return
 12603  0B55                     l7477:	
 12604                           
 12605                           ;LED_B1.c: 159: else if (led == 2) {
 12606  0B55  0822               	movf	setLED@led,w
 12607  0B56  3A02               	xorlw	2
 12608  0B57  1D03               	skipz
 12609  0B58  2B5B               	goto	l7481
 12610                           
 12611                           ;LED_B1.c: 163: RC7 = 1;
 12612  0B59  178E               	bsf	14,7	;volatile
 12613                           
 12614                           ;LED_B1.c: 165: }
 12615  0B5A  0008               	return
 12616  0B5B                     l7481:	
 12617                           
 12618                           ;LED_B1.c: 177: else if (led == 99) {
 12619  0B5B  0822               	movf	setLED@led,w
 12620  0B5C  3A63               	xorlw	99
 12621  0B5D  1D03               	skipz
 12622  0B5E  0008               	return
 12623                           
 12624                           ;LED_B1.c: 181: RB5 = 1;
 12625  0B5F  168D               	bsf	13,5	;volatile
 12626                           
 12627                           ;LED_B1.c: 183: }
 12628                           ;LED_B1.c: 185: } else if (command == 11) {
 12629  0B60  0008               	return
 12630  0B61                     l7485:	
 12631  0B61  0821               	movf	setLED@command,w
 12632  0B62  3A0B               	xorlw	11
 12633  0B63  1D03               	skipz
 12634  0B64  0008               	return
 12635                           
 12636                           ;LED_B1.c: 186: LED->GO = 1;
 12637  0B65  0021               	movlb	1	; select bank1
 12638  0B66  084B               	movf	_LED^(0+128),w
 12639  0B67  0086               	movwf	6
 12640  0B68  084C               	movf	(_LED+1)^(0+128),w
 12641  0B69  0087               	movwf	7
 12642  0B6A  1481               	bsf	1,1
 12643  0B6B  0008               	return
 12644  0B6C                     __end_of_setLED:	
 12645                           
 12646                           	psect	text80
 12647  1246                     __ptext80:	
 12648 ;; *************** function _LedPointSelect *****************
 12649 ;; Defined at:
 12650 ;;		line 7 in file "../src/LED_B1.c"
 12651 ;; Parameters:    Size  Location     Type
 12652 ;;  led             1    wreg     unsigned char 
 12653 ;; Auto vars:     Size  Location     Type
 12654 ;;  led             1    0[BANK0 ] unsigned char 
 12655 ;; Return value:  Size  Location     Type
 12656 ;;		None               void
 12657 ;; Registers used:
 12658 ;;		wreg, status,2, status,0
 12659 ;; Tracked objects:
 12660 ;;		On entry : 0/0
 12661 ;;		On exit  : 0/0
 12662 ;;		Unchanged: 0/0
 12663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12667 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12668 ;;Total ram usage:        1 bytes
 12669 ;; Hardware stack levels used:    1
 12670 ;; Hardware stack levels required when called:    5
 12671 ;; This function calls:
 12672 ;;		Nothing
 12673 ;; This function is called by:
 12674 ;;		_setLED_Initialization
 12675 ;;		_setLED
 12676 ;;		_setLED_Main
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _LedPointSelect
 12682  1246                     _LedPointSelect:	
 12683                           
 12684                           ;incstack = 0
 12685                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12686                           ;LedPointSelect@led stored from wreg
 12687  1246  0020               	movlb	0	; select bank0
 12688  1247  00A0               	movwf	LedPointSelect@led
 12689                           
 12690                           ;LED_B1.c: 9: if (led == 1) {
 12691  1248  0820               	movf	LedPointSelect@led,w
 12692  1249  3A01               	xorlw	1
 12693  124A  1D03               	skipz
 12694  124B  2A52               	goto	l7431
 12695                           
 12696                           ;LED_B1.c: 10: LED = &VarLED1;
 12697  124C  3067               	movlw	low _VarLED1
 12698  124D  0021               	movlb	1	; select bank1
 12699  124E  00CB               	movwf	_LED^(0+128)
 12700  124F  3001               	movlw	high _VarLED1
 12701  1250  00CC               	movwf	(_LED+1)^(0+128)
 12702                           
 12703                           ;LED_B1.c: 11: }
 12704  1251  0008               	return
 12705  1252                     l7431:	
 12706                           
 12707                           ;LED_B1.c: 14: else if (led == 2) {
 12708  1252  0020               	movlb	0	; select bank0
 12709  1253  0820               	movf	LedPointSelect@led,w
 12710  1254  3A02               	xorlw	2
 12711  1255  1D03               	skipz
 12712  1256  2A5D               	goto	l7435
 12713                           
 12714                           ;LED_B1.c: 15: LED = &VarLED2;
 12715  1257  306B               	movlw	low _VarLED2
 12716  1258  0021               	movlb	1	; select bank1
 12717  1259  00CB               	movwf	_LED^(0+128)
 12718  125A  3001               	movlw	high _VarLED2
 12719  125B  00CC               	movwf	(_LED+1)^(0+128)
 12720                           
 12721                           ;LED_B1.c: 16: }
 12722  125C  0008               	return
 12723  125D                     l7435:	
 12724                           
 12725                           ;LED_B1.c: 24: else if (led == 99) {
 12726  125D  0020               	movlb	0	; select bank0
 12727  125E  0820               	movf	LedPointSelect@led,w
 12728  125F  3A63               	xorlw	99
 12729  1260  1D03               	skipz
 12730  1261  0008               	return
 12731                           
 12732                           ;LED_B1.c: 25: LED = &VarErrLED;
 12733  1262  30E7               	movlw	low _VarErrLED
 12734  1263  0021               	movlb	1	; select bank1
 12735  1264  00CB               	movwf	_LED^(0+128)
 12736  1265  3000               	movlw	high _VarErrLED
 12737  1266  00CC               	movwf	(_LED+1)^(0+128)
 12738  1267  0008               	return
 12739  1268                     __end_of_LedPointSelect:	
 12740                           
 12741                           	psect	text81
 12742  10AC                     __ptext81:	
 12743 ;; *************** function _DimmerLights_Close *****************
 12744 ;; Defined at:
 12745 ;;		line 396 in file "../src/Dimmer_B1.c"
 12746 ;; Parameters:    Size  Location     Type
 12747 ;;		None
 12748 ;; Auto vars:     Size  Location     Type
 12749 ;;		None
 12750 ;; Return value:  Size  Location     Type
 12751 ;;		None               void
 12752 ;; Registers used:
 12753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12754 ;; Tracked objects:
 12755 ;;		On entry : 0/0
 12756 ;;		On exit  : 0/0
 12757 ;;		Unchanged: 0/0
 12758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12763 ;;Total ram usage:        0 bytes
 12764 ;; Hardware stack levels used:    1
 12765 ;; Hardware stack levels required when called:    6
 12766 ;; This function calls:
 12767 ;;		_getDimmerLights_StatusFlag
 12768 ;;		_setMemory_GO
 12769 ;; This function is called by:
 12770 ;;		_DimmerLights_Main
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           
 12775                           ;psect for function _DimmerLights_Close
 12776  10AC                     _DimmerLights_Close:	
 12777                           
 12778                           ;Dimmer_B1.c: 397: if (Dimmer->Detect == 1) {
 12779                           
 12780                           ;incstack = 0
 12781                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12782  10AC  0021               	movlb	1	; select bank1
 12783  10AD  0850               	movf	_Dimmer^(0+128),w
 12784  10AE  0086               	movwf	6
 12785  10AF  0187               	clrf	7
 12786  10B0  1C01               	btfss	1,0
 12787  10B1  0008               	return
 12788                           
 12789                           ;Dimmer_B1.c: 398: Dimmer->Detect = 0;
 12790  10B2  0850               	movf	_Dimmer^(0+128),w
 12791  10B3  0086               	movwf	6
 12792  10B4  0187               	clrf	7
 12793  10B5  1001               	bcf	1,0
 12794                           
 12795                           ;Dimmer_B1.c: 399: if (getDimmerLights_StatusFlag() == 0) {
 12796  10B6  319E  2694  3190   	fcall	_getDimmerLights_StatusFlag
 12797  10B9  3800               	iorlw	0
 12798  10BA  1D03               	skipz
 12799  10BB  0008               	return
 12800                           
 12801                           ;Dimmer_B1.c: 400: ;;
 12802                           ;Dimmer_B1.c: 401: setMemory_GO(1);
 12803  10BC  3001               	movlw	1
 12804  10BD  3190  20D5         	fcall	_setMemory_GO
 12805  10BF  0008               	return
 12806  10C0                     __end_of_DimmerLights_Close:	
 12807                           
 12808                           	psect	text82
 12809  10D5                     __ptext82:	
 12810 ;; *************** function _setMemory_GO *****************
 12811 ;; Defined at:
 12812 ;;		line 885 in file "../src/MCU_B1.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  command         1    wreg     unsigned char 
 12815 ;; Auto vars:     Size  Location     Type
 12816 ;;  command         1    2[BANK0 ] unsigned char 
 12817 ;; Return value:  Size  Location     Type
 12818 ;;		None               void
 12819 ;; Registers used:
 12820 ;;		wreg, status,2, status,0
 12821 ;; Tracked objects:
 12822 ;;		On entry : 0/0
 12823 ;;		On exit  : 0/0
 12824 ;;		Unchanged: 0/0
 12825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;Total ram usage:        3 bytes
 12831 ;; Hardware stack levels used:    1
 12832 ;; Hardware stack levels required when called:    5
 12833 ;; This function calls:
 12834 ;;		Nothing
 12835 ;; This function is called by:
 12836 ;;		_DimmerLights_Close
 12837 ;;		_setDimmerLights
 12838 ;; This function uses a non-reentrant model
 12839 ;;
 12840                           
 12841                           
 12842                           ;psect for function _setMemory_GO
 12843  10D5                     _setMemory_GO:	
 12844                           
 12845                           ;incstack = 0
 12846                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12847                           ;setMemory_GO@command stored from wreg
 12848  10D5  0020               	movlb	0	; select bank0
 12849  10D6  00A2               	movwf	setMemory_GO@command
 12850                           
 12851                           ;MCU_B1.c: 886: Memory.GO = command;
 12852  10D7  0822               	movf	setMemory_GO@command,w
 12853  10D8  0022               	movlb	2	; select bank2
 12854  10D9  10E1               	bcf	(_Memory^(0+256)+36),1
 12855  10DA  1D03               	skipz
 12856  10DB  14E1               	bsf	(_Memory^(0+256)+36),1
 12857                           
 12858                           ;MCU_B1.c: 887: if (command == 0) {
 12859  10DC  0020               	movlb	0	; select bank0
 12860  10DD  08A2               	movf	setMemory_GO@command,f
 12861  10DE  1D03               	skipz
 12862  10DF  0008               	return
 12863                           
 12864                           ;MCU_B1.c: 888: Memory.Time = command;
 12865  10E0  0822               	movf	setMemory_GO@command,w
 12866  10E1  00A0               	movwf	??_setMemory_GO
 12867  10E2  01A1               	clrf	??_setMemory_GO+1
 12868  10E3  0820               	movf	??_setMemory_GO,w
 12869  10E4  0022               	movlb	2	; select bank2
 12870  10E5  00DF               	movwf	(_Memory^(0+256)+34)
 12871  10E6  0020               	movlb	0	; select bank0
 12872  10E7  0821               	movf	??_setMemory_GO+1,w
 12873  10E8  0022               	movlb	2	; select bank2
 12874  10E9  00E0               	movwf	((_Memory+1)^(0+256)+34)
 12875  10EA  0008               	return
 12876  10EB                     __end_of_setMemory_GO:	
 12877                           
 12878                           	psect	text83
 12879  1E94                     __ptext83:	
 12880 ;; *************** function _getDimmerLights_StatusFlag *****************
 12881 ;; Defined at:
 12882 ;;		line 475 in file "../src/Dimmer_B1.c"
 12883 ;; Parameters:    Size  Location     Type
 12884 ;;		None
 12885 ;; Auto vars:     Size  Location     Type
 12886 ;;  Status          1    0[BANK0 ] unsigned char 
 12887 ;; Return value:  Size  Location     Type
 12888 ;;                  1    wreg      unsigned char 
 12889 ;; Registers used:
 12890 ;;		wreg, status,2
 12891 ;; Tracked objects:
 12892 ;;		On entry : 0/0
 12893 ;;		On exit  : 0/0
 12894 ;;		Unchanged: 0/0
 12895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12900 ;;Total ram usage:        1 bytes
 12901 ;; Hardware stack levels used:    1
 12902 ;; Hardware stack levels required when called:    5
 12903 ;; This function calls:
 12904 ;;		Nothing
 12905 ;; This function is called by:
 12906 ;;		_DimmerLights_Close
 12907 ;;		_DimmerLights_Exceptions
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           
 12912                           ;psect for function _getDimmerLights_StatusFlag
 12913  1E94                     _getDimmerLights_StatusFlag:	
 12914                           
 12915                           ;Dimmer_B1.c: 476: char Status = 0;
 12916                           
 12917                           ;incstack = 0
 12918                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12919  1E94  0020               	movlb	0	; select bank0
 12920  1E95  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12921                           
 12922                           ;Dimmer_B1.c: 487: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12923  1E96  3000               	movlw	0
 12924  1E97  0023               	movlb	3	; select bank3
 12925  1E98  1B40               	btfsc	_DimmerLights1^(0+384),6
 12926  1E99  3001               	movlw	1
 12927  1E9A  0020               	movlb	0	; select bank0
 12928  1E9B  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12929                           
 12930                           ;Dimmer_B1.c: 490: return Status;
 12931  1E9C  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12932  1E9D  0008               	return
 12933  1E9E                     __end_of_getDimmerLights_StatusFlag:	
 12934                           
 12935                           	psect	text84
 12936  1F1D                     __ptext84:	
 12937 ;; *************** function _DimmerLights_Initialization *****************
 12938 ;; Defined at:
 12939 ;;		line 334 in file "../src/Dimmer_B1.c"
 12940 ;; Parameters:    Size  Location     Type
 12941 ;;		None
 12942 ;; Auto vars:     Size  Location     Type
 12943 ;;		None
 12944 ;; Return value:  Size  Location     Type
 12945 ;;		None               void
 12946 ;; Registers used:
 12947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12948 ;; Tracked objects:
 12949 ;;		On entry : 0/0
 12950 ;;		On exit  : 0/0
 12951 ;;		Unchanged: 0/0
 12952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12956 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;Total ram usage:        1 bytes
 12958 ;; Hardware stack levels used:    1
 12959 ;; Hardware stack levels required when called:    7
 12960 ;; This function calls:
 12961 ;;		_Dimmer_Initialization
 12962 ;;		_setDimmerLights_Initialization
 12963 ;; This function is called by:
 12964 ;;		_main
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           
 12969                           ;psect for function _DimmerLights_Initialization
 12970  1F1D                     _DimmerLights_Initialization:	
 12971                           
 12972                           ;Dimmer_B1.c: 337: DimmerLights11 = &DimmerLights1;
 12973                           
 12974                           ;incstack = 0
 12975                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12976  1F1D  30C0               	movlw	_DimmerLights1& (0+255)
 12977  1F1E  0020               	movlb	0	; select bank0
 12978  1F1F  00A4               	movwf	??_DimmerLights_Initialization
 12979  1F20  0824               	movf	??_DimmerLights_Initialization,w
 12980  1F21  0021               	movlb	1	; select bank1
 12981  1F22  00D1               	movwf	_DimmerLights11^(0+128)
 12982                           
 12983                           ;Dimmer_B1.c: 338: setDimmerLights_Initialization(1);
 12984  1F23  3001               	movlw	1
 12985  1F24  3193  239C  319F   	fcall	_setDimmerLights_Initialization
 12986                           
 12987                           ;Dimmer_B1.c: 352: Dimmer_Initialization();
 12988  1F27  319E  263C         	fcall	_Dimmer_Initialization
 12989  1F29  0008               	return
 12990  1F2A                     __end_of_DimmerLights_Initialization:	
 12991                           
 12992                           	psect	text85
 12993  139C                     __ptext85:	
 12994 ;; *************** function _setDimmerLights_Initialization *****************
 12995 ;; Defined at:
 12996 ;;		line 357 in file "../src/Dimmer_B1.c"
 12997 ;; Parameters:    Size  Location     Type
 12998 ;;  lights          1    wreg     unsigned char 
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;  lights          1    3[BANK0 ] unsigned char 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;		None               void
 13003 ;; Registers used:
 13004 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13011 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;Total ram usage:        2 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    6
 13017 ;; This function calls:
 13018 ;;		_DimmerLightsPointSelect
 13019 ;; This function is called by:
 13020 ;;		_DimmerLights_Initialization
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           
 13025                           ;psect for function _setDimmerLights_Initialization
 13026  139C                     _setDimmerLights_Initialization:	
 13027                           
 13028                           ;incstack = 0
 13029                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13030                           ;setDimmerLights_Initialization@lights stored from wreg
 13031  139C  0020               	movlb	0	; select bank0
 13032  139D  00A3               	movwf	setDimmerLights_Initialization@lights
 13033                           
 13034                           ;Dimmer_B1.c: 359: DimmerLightsPointSelect(lights);
 13035  139E  0823               	movf	setDimmerLights_Initialization@lights,w
 13036  139F  319E  26BF         	fcall	_DimmerLightsPointSelect
 13037                           
 13038                           ;Dimmer_B1.c: 360: DimmerLights->Clear = 1;
 13039  13A1  0020               	movlb	0	; select bank0
 13040  13A2  086D               	movf	_DimmerLights,w
 13041  13A3  3E09               	addlw	9
 13042  13A4  0086               	movwf	6
 13043  13A5  3001               	movlw	1	; select bank2/3
 13044  13A6  0087               	movwf	7
 13045  13A7  1501               	bsf	1,2
 13046                           
 13047                           ;Dimmer_B1.c: 366: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13048  13A8  3020               	movlw	32
 13049  13A9  00A2               	movwf	??_setDimmerLights_Initialization
 13050  13AA  086D               	movf	_DimmerLights,w
 13051  13AB  3E05               	addlw	5
 13052  13AC  0086               	movwf	6
 13053  13AD  3001               	movlw	1	; select bank2/3
 13054  13AE  0087               	movwf	7
 13055  13AF  0822               	movf	??_setDimmerLights_Initialization,w
 13056  13B0  0081               	movwf	1
 13057                           
 13058                           ;Dimmer_B1.c: 367: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13059  13B1  303C               	movlw	60
 13060  13B2  00A2               	movwf	??_setDimmerLights_Initialization
 13061  13B3  086D               	movf	_DimmerLights,w
 13062  13B4  3E06               	addlw	6
 13063  13B5  0086               	movwf	6
 13064  13B6  3001               	movlw	1	; select bank2/3
 13065  13B7  0087               	movwf	7
 13066  13B8  0822               	movf	??_setDimmerLights_Initialization,w
 13067  13B9  0081               	movwf	1
 13068                           
 13069                           ;Dimmer_B1.c: 377: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13070  13BA  086D               	movf	_DimmerLights,w
 13071  13BB  3E06               	addlw	6
 13072  13BC  0086               	movwf	6
 13073  13BD  3001               	movlw	1	; select bank2/3
 13074  13BE  0087               	movwf	7
 13075  13BF  0801               	movf	1,w
 13076  13C0  00A2               	movwf	??_setDimmerLights_Initialization
 13077  13C1  086D               	movf	_DimmerLights,w
 13078  13C2  3E04               	addlw	4
 13079  13C3  0086               	movwf	6
 13080  13C4  3001               	movlw	1	; select bank2/3
 13081  13C5  0087               	movwf	7
 13082  13C6  0822               	movf	??_setDimmerLights_Initialization,w
 13083  13C7  0081               	movwf	1
 13084  13C8  0008               	return
 13085  13C9                     __end_of_setDimmerLights_Initialization:	
 13086                           
 13087                           	psect	text86
 13088  1E3C                     __ptext86:	
 13089 ;; *************** function _Dimmer_Initialization *****************
 13090 ;; Defined at:
 13091 ;;		line 786 in file "../src/Dimmer_B1.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;		None
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;		None               void
 13098 ;; Registers used:
 13099 ;;		wreg
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        1 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    5
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_DimmerLights_Initialization
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           
 13120                           ;psect for function _Dimmer_Initialization
 13121  1E3C                     _Dimmer_Initialization:	
 13122                           
 13123                           ;Dimmer_B1.c: 788: Dimmer = &Dimmer1;
 13124                           
 13125                           ;incstack = 0
 13126                           ; Regs used in _Dimmer_Initialization: [wreg]
 13127  1E3C  30EB               	movlw	_Dimmer1& (0+255)
 13128  1E3D  0020               	movlb	0	; select bank0
 13129  1E3E  00A0               	movwf	??_Dimmer_Initialization
 13130  1E3F  0820               	movf	??_Dimmer_Initialization,w
 13131  1E40  0021               	movlb	1	; select bank1
 13132  1E41  00D0               	movwf	_Dimmer^(0+128)
 13133  1E42  0008               	return
 13134  1E43                     __end_of_Dimmer_Initialization:	
 13135                           
 13136                           	psect	text87
 13137  1E17                     __ptext87:	
 13138 ;; *************** function _DelayOff_Main *****************
 13139 ;; Defined at:
 13140 ;;		line 41 in file "../src/DelayOff_B1.c"
 13141 ;; Parameters:    Size  Location     Type
 13142 ;;		None
 13143 ;; Auto vars:     Size  Location     Type
 13144 ;;		None
 13145 ;; Return value:  Size  Location     Type
 13146 ;;		None               void
 13147 ;; Registers used:
 13148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13149 ;; Tracked objects:
 13150 ;;		On entry : 0/0
 13151 ;;		On exit  : 0/0
 13152 ;;		Unchanged: 0/0
 13153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13158 ;;Total ram usage:        0 bytes
 13159 ;; Hardware stack levels used:    1
 13160 ;; Hardware stack levels required when called:   10
 13161 ;; This function calls:
 13162 ;;		_DlyOff_Main
 13163 ;; This function is called by:
 13164 ;;		_main
 13165 ;; This function uses a non-reentrant model
 13166 ;;
 13167                           
 13168                           
 13169                           ;psect for function _DelayOff_Main
 13170  1E17                     _DelayOff_Main:	
 13171                           
 13172                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13173                           
 13174                           ;incstack = 0
 13175                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13176  1E17  3001               	movlw	1
 13177  1E18  318D  25F8         	fcall	_DlyOff_Main
 13178  1E1A  0008               	return
 13179  1E1B                     __end_of_DelayOff_Main:	
 13180                           
 13181                           	psect	text88
 13182  0DF8                     __ptext88:	
 13183 ;; *************** function _DlyOff_Main *****************
 13184 ;; Defined at:
 13185 ;;		line 62 in file "../src/DelayOff_B1.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  sw              1    wreg     unsigned char 
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;  sw              1   68[BANK0 ] unsigned char 
 13190 ;; Return value:  Size  Location     Type
 13191 ;;		None               void
 13192 ;; Registers used:
 13193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13194 ;; Tracked objects:
 13195 ;;		On entry : 0/0
 13196 ;;		On exit  : 0/0
 13197 ;;		Unchanged: 0/0
 13198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;Total ram usage:        3 bytes
 13204 ;; Hardware stack levels used:    1
 13205 ;; Hardware stack levels required when called:    9
 13206 ;; This function calls:
 13207 ;;		_DelayOffPointSelect
 13208 ;;		_setBuz
 13209 ;;		_setDimmerLights_Switch
 13210 ;;		_setDimmerLights_Trigger
 13211 ;;		_setRFSW_Status
 13212 ;;		_setRF_DimmerLights
 13213 ;;		_setSw_Status
 13214 ;;		_setTxData
 13215 ;; This function is called by:
 13216 ;;		_DelayOff_Main
 13217 ;; This function uses a non-reentrant model
 13218 ;;
 13219                           
 13220                           
 13221                           ;psect for function _DlyOff_Main
 13222  0DF8                     _DlyOff_Main:	
 13223                           
 13224                           ;incstack = 0
 13225                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13226                           ;DlyOff_Main@sw stored from wreg
 13227  0DF8  0020               	movlb	0	; select bank0
 13228  0DF9  00E4               	movwf	DlyOff_Main@sw
 13229                           
 13230                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13231  0DFA  0864               	movf	DlyOff_Main@sw,w
 13232  0DFB  319E  26A9  318D   	fcall	_DelayOffPointSelect
 13233                           
 13234                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13235  0DFE  0878               	movf	_DelayOff,w
 13236  0DFF  0086               	movwf	6
 13237  0E00  3001               	movlw	1	; select bank2/3
 13238  0E01  0087               	movwf	7
 13239  0E02  1C81               	btfss	1,1
 13240  0E03  0008               	return
 13241                           
 13242                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13243  0E04  0878               	movf	_DelayOff,w
 13244  0E05  3E02               	addlw	2
 13245  0E06  0086               	movwf	6
 13246  0E07  3001               	movlw	1	; select bank2/3
 13247  0E08  0087               	movwf	7
 13248  0E09  3001               	movlw	1
 13249  0E0A  0781               	addwf	1,f
 13250  0E0B  3141               	addfsr 1,1
 13251  0E0C  1803               	skipnc
 13252  0E0D  0A81               	incf	1,f
 13253                           
 13254                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13255  0E0E  0878               	movf	_DelayOff,w
 13256  0E0F  3E02               	addlw	2
 13257  0E10  0086               	movwf	6
 13258  0E11  3001               	movlw	1	; select bank2/3
 13259  0E12  0087               	movwf	7
 13260  0E13  3F40               	moviw [0]fsr1
 13261  0E14  0020               	movlb	0	; select bank0
 13262  0E15  00E2               	movwf	??_DlyOff_Main
 13263  0E16  3F41               	moviw [1]fsr1
 13264  0E17  00E3               	movwf	??_DlyOff_Main+1
 13265  0E18  3015               	movlw	21
 13266  0E19  0263               	subwf	??_DlyOff_Main+1,w
 13267  0E1A  30E0               	movlw	224
 13268  0E1B  1903               	skipnz
 13269  0E1C  0262               	subwf	??_DlyOff_Main,w
 13270  0E1D  1C03               	skipc
 13271  0E1E  0008               	return
 13272                           
 13273                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13274  0E1F  0878               	movf	_DelayOff,w
 13275  0E20  3E02               	addlw	2
 13276  0E21  0086               	movwf	6
 13277  0E22  3001               	movlw	1	; select bank2/3
 13278  0E23  0087               	movwf	7
 13279  0E24  3000               	movlw	0
 13280  0E25  3FC0               	movwi [0]fsr1
 13281  0E26  3FC1               	movwi [1]fsr1
 13282                           
 13283                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13284  0E27  3001               	movlw	1
 13285  0E28  00E2               	movwf	??_DlyOff_Main
 13286  0E29  0878               	movf	_DelayOff,w
 13287  0E2A  3E04               	addlw	4
 13288  0E2B  0086               	movwf	6
 13289  0E2C  3001               	movlw	1	; select bank2/3
 13290  0E2D  0087               	movwf	7
 13291  0E2E  0862               	movf	??_DlyOff_Main,w
 13292  0E2F  0781               	addwf	1,f
 13293                           
 13294                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13295  0E30  0878               	movf	_DelayOff,w
 13296  0E31  3E04               	addlw	4
 13297  0E32  0086               	movwf	6
 13298  0E33  3001               	movlw	1	; select bank2/3
 13299  0E34  0087               	movwf	7
 13300  0E35  0A78               	incf	_DelayOff,w
 13301  0E36  0084               	movwf	4
 13302  0E37  3001               	movlw	1	; select bank2/3
 13303  0E38  0085               	movwf	5
 13304  0E39  0800               	movf	0,w
 13305  0E3A  0201               	subwf	1,w
 13306  0E3B  1C03               	skipc
 13307  0E3C  0008               	return
 13308                           
 13309                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13310  0E3D  0878               	movf	_DelayOff,w
 13311  0E3E  3E04               	addlw	4
 13312  0E3F  0086               	movwf	6
 13313  0E40  3001               	movlw	1	; select bank2/3
 13314  0E41  0087               	movwf	7
 13315  0E42  0181               	clrf	1
 13316                           
 13317                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13318  0E43  0878               	movf	_DelayOff,w
 13319  0E44  0086               	movwf	6
 13320  0E45  3001               	movlw	1	; select bank2/3
 13321  0E46  0087               	movwf	7
 13322  0E47  1081               	bcf	1,1
 13323                           
 13324                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13325  0E48  01A2               	clrf	setSw_Status@command
 13326  0E49  0864               	movf	DlyOff_Main@sw,w
 13327  0E4A  319F  2745  318D   	fcall	_setSw_Status
 13328                           
 13329                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13330  0E4D  0020               	movlb	0	; select bank0
 13331  0E4E  01A2               	clrf	setRFSW_Status@command
 13332  0E4F  0864               	movf	DlyOff_Main@sw,w
 13333  0E50  319F  2737  318D   	fcall	_setRFSW_Status
 13334                           
 13335                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13336  0E53  0020               	movlb	0	; select bank0
 13337  0E54  01DD               	clrf	setRF_DimmerLights@on
 13338  0E55  0864               	movf	DlyOff_Main@sw,w
 13339  0E56  3187  2792  318D   	fcall	_setRF_DimmerLights
 13340                           
 13341                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13342  0E59  0020               	movlb	0	; select bank0
 13343  0E5A  01A2               	clrf	setDimmerLights_Trigger@command
 13344  0E5B  0AA2               	incf	setDimmerLights_Trigger@command,f
 13345  0E5C  0864               	movf	DlyOff_Main@sw,w
 13346  0E5D  319F  27AF  318D   	fcall	_setDimmerLights_Trigger
 13347                           
 13348                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13349  0E60  0020               	movlb	0	; select bank0
 13350  0E61  01A2               	clrf	setDimmerLights_Switch@command
 13351  0E62  0864               	movf	DlyOff_Main@sw,w
 13352  0E63  319F  279F  318D   	fcall	_setDimmerLights_Switch
 13353                           
 13354                           ;DelayOff_B1.c: 78: setTxData();
 13355  0E66  3184  24F1  318D   	fcall	_setTxData
 13356                           
 13357                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13358  0E69  3064               	movlw	100
 13359  0E6A  0020               	movlb	0	; select bank0
 13360  0E6B  00A9               	movwf	setBuz@time
 13361  0E6C  3000               	movlw	0
 13362  0E6D  00AA               	movwf	setBuz@time+1
 13363  0E6E  3001               	movlw	1
 13364  0E6F  3189  2139         	fcall	_setBuz
 13365  0E71  0008               	return
 13366  0E72                     __end_of_DlyOff_Main:	
 13367                           
 13368                           	psect	text89
 13369  04F1                     __ptext89:	
 13370 ;; *************** function _setTxData *****************
 13371 ;; Defined at:
 13372 ;;		line 136 in file "../src/RF_Control_B1.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;  i               1    0        unsigned char 
 13377 ;; Return value:  Size  Location     Type
 13378 ;;		None               void
 13379 ;; Registers used:
 13380 ;;		wreg, fsr1l, fsr1h
 13381 ;; Tracked objects:
 13382 ;;		On entry : 0/0
 13383 ;;		On exit  : 0/0
 13384 ;;		Unchanged: 0/0
 13385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13388 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13390 ;;Total ram usage:        1 bytes
 13391 ;; Hardware stack levels used:    1
 13392 ;; Hardware stack levels required when called:    5
 13393 ;; This function calls:
 13394 ;;		Nothing
 13395 ;; This function is called by:
 13396 ;;		_DlyOff_Main
 13397 ;;		_setDimmerLights_Adj
 13398 ;;		_setControl_Lights_Table
 13399 ;;		_setRFSW_Control
 13400 ;;		_setRFSW_AdjControl
 13401 ;;		_Sw_DimmerOnFunc
 13402 ;;		_Sw_DimmerOffFunc
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           
 13407                           ;psect for function _setTxData
 13408  04F1                     _setTxData:	
 13409                           
 13410                           ;RF_Control_B1.c: 137: char i;
 13411                           ;RF_Control_B1.c: 138: if (RF1.Enable == 1) {
 13412                           
 13413                           ;incstack = 0
 13414                           ; Regs used in _setTxData: [wregfsr1]
 13415  04F1  0021               	movlb	1	; select bank1
 13416  04F2  1C46               	btfss	_RF1^(0+128),0
 13417  04F3  0008               	return
 13418                           
 13419                           ;RF_Control_B1.c: 140: RF1.TransceiveGO = 1;
 13420  04F4  1546               	bsf	_RF1^(0+128),2
 13421                           
 13422                           ;RF_Control_B1.c: 150: RF_Data[0] = 0x63;
 13423  04F5  3063               	movlw	99
 13424  04F6  0020               	movlb	0	; select bank0
 13425  04F7  00A0               	movwf	??_setTxData
 13426  04F8  0820               	movf	??_setTxData,w
 13427  04F9  0022               	movlb	2	; select bank2
 13428  04FA  00A0               	movwf	_RF_Data^(0+256)
 13429                           
 13430                           ;RF_Control_B1.c: 151: RF_Data[1] = 0x02;
 13431  04FB  3002               	movlw	2
 13432  04FC  0020               	movlb	0	; select bank0
 13433  04FD  00A0               	movwf	??_setTxData
 13434  04FE  0820               	movf	??_setTxData,w
 13435  04FF  0022               	movlb	2	; select bank2
 13436  0500  00A1               	movwf	(_RF_Data^(0+256)+1)
 13437                           
 13438                           ;RF_Control_B1.c: 152: RF_Data[2] = product->Data[2];
 13439  0501  0020               	movlb	0	; select bank0
 13440  0502  086F               	movf	_product,w
 13441  0503  0086               	movwf	6
 13442  0504  3001               	movlw	1	; select bank2/3
 13443  0505  0087               	movwf	7
 13444  0506  3001               	movlw	1	; select bank2/3
 13445  0507  3F42               	moviw [2]fsr1
 13446  0508  0022               	movlb	2	; select bank2
 13447  0509  00A2               	movwf	(_RF_Data^(0+256)+2)
 13448                           
 13449                           ;RF_Control_B1.c: 153: RF_Data[3] = product->Data[3];
 13450  050A  0020               	movlb	0	; select bank0
 13451  050B  086F               	movf	_product,w
 13452  050C  0086               	movwf	6
 13453  050D  3001               	movlw	1	; select bank2/3
 13454  050E  0087               	movwf	7
 13455  050F  3001               	movlw	1	; select bank2/3
 13456  0510  3F43               	moviw [3]fsr1
 13457  0511  0022               	movlb	2	; select bank2
 13458  0512  00A3               	movwf	(_RF_Data^(0+256)+3)
 13459                           
 13460                           ;RF_Control_B1.c: 154: RF_Data[4] = product->Data[4];
 13461  0513  0020               	movlb	0	; select bank0
 13462  0514  086F               	movf	_product,w
 13463  0515  0086               	movwf	6
 13464  0516  3001               	movlw	1	; select bank2/3
 13465  0517  0087               	movwf	7
 13466  0518  3001               	movlw	1	; select bank2/3
 13467  0519  3F44               	moviw [4]fsr1
 13468  051A  0022               	movlb	2	; select bank2
 13469  051B  00A4               	movwf	(_RF_Data^(0+256)+4)
 13470                           
 13471                           ;RF_Control_B1.c: 155: RF_Data[5] = product->Data[5];
 13472  051C  0020               	movlb	0	; select bank0
 13473  051D  086F               	movf	_product,w
 13474  051E  0086               	movwf	6
 13475  051F  3001               	movlw	1	; select bank2/3
 13476  0520  0087               	movwf	7
 13477  0521  3001               	movlw	1	; select bank2/3
 13478  0522  3F45               	moviw [5]fsr1
 13479  0523  0022               	movlb	2	; select bank2
 13480  0524  00A5               	movwf	(_RF_Data^(0+256)+5)
 13481                           
 13482                           ;RF_Control_B1.c: 156: RF_Data[6] = product->Data[6];
 13483  0525  0020               	movlb	0	; select bank0
 13484  0526  086F               	movf	_product,w
 13485  0527  0086               	movwf	6
 13486  0528  3001               	movlw	1	; select bank2/3
 13487  0529  0087               	movwf	7
 13488  052A  3001               	movlw	1	; select bank2/3
 13489  052B  3F46               	moviw [6]fsr1
 13490  052C  0022               	movlb	2	; select bank2
 13491  052D  00A6               	movwf	(_RF_Data^(0+256)+6)
 13492                           
 13493                           ;RF_Control_B1.c: 157: RF_Data[7] = product->Data[7];
 13494  052E  0020               	movlb	0	; select bank0
 13495  052F  086F               	movf	_product,w
 13496  0530  0086               	movwf	6
 13497  0531  3001               	movlw	1	; select bank2/3
 13498  0532  0087               	movwf	7
 13499  0533  3001               	movlw	1	; select bank2/3
 13500  0534  3F47               	moviw [7]fsr1
 13501  0535  0022               	movlb	2	; select bank2
 13502  0536  00A7               	movwf	(_RF_Data^(0+256)+7)
 13503                           
 13504                           ;RF_Control_B1.c: 158: RF_Data[8] = product->Data[8];
 13505  0537  0020               	movlb	0	; select bank0
 13506  0538  086F               	movf	_product,w
 13507  0539  0086               	movwf	6
 13508  053A  3001               	movlw	1	; select bank2/3
 13509  053B  0087               	movwf	7
 13510  053C  3001               	movlw	1	; select bank2/3
 13511  053D  3F48               	moviw [8]fsr1
 13512  053E  0022               	movlb	2	; select bank2
 13513  053F  00A8               	movwf	(_RF_Data^(0+256)+8)
 13514                           
 13515                           ;RF_Control_B1.c: 159: RF_Data[9] = product->Data[9];
 13516  0540  0020               	movlb	0	; select bank0
 13517  0541  086F               	movf	_product,w
 13518  0542  0086               	movwf	6
 13519  0543  3001               	movlw	1	; select bank2/3
 13520  0544  0087               	movwf	7
 13521  0545  3001               	movlw	1	; select bank2/3
 13522  0546  3F49               	moviw [9]fsr1
 13523  0547  0022               	movlb	2	; select bank2
 13524  0548  00A9               	movwf	(_RF_Data^(0+256)+9)
 13525                           
 13526                           ;RF_Control_B1.c: 160: RF_Data[10] = product->Data[10];
 13527  0549  0020               	movlb	0	; select bank0
 13528  054A  086F               	movf	_product,w
 13529  054B  0086               	movwf	6
 13530  054C  3001               	movlw	1	; select bank2/3
 13531  054D  0087               	movwf	7
 13532  054E  3001               	movlw	1	; select bank2/3
 13533  054F  3F4A               	moviw [10]fsr1
 13534  0550  0022               	movlb	2	; select bank2
 13535  0551  00AA               	movwf	(_RF_Data^(0+256)+10)
 13536                           
 13537                           ;RF_Control_B1.c: 161: RF_Data[11] = product->Data[11];
 13538  0552  0020               	movlb	0	; select bank0
 13539  0553  086F               	movf	_product,w
 13540  0554  0086               	movwf	6
 13541  0555  3001               	movlw	1	; select bank2/3
 13542  0556  0087               	movwf	7
 13543  0557  3001               	movlw	1	; select bank2/3
 13544  0558  3F4B               	moviw [11]fsr1
 13545  0559  0022               	movlb	2	; select bank2
 13546  055A  00AB               	movwf	(_RF_Data^(0+256)+11)
 13547                           
 13548                           ;RF_Control_B1.c: 162: RF_Data[12] = product->Data[12];
 13549  055B  0020               	movlb	0	; select bank0
 13550  055C  086F               	movf	_product,w
 13551  055D  0086               	movwf	6
 13552  055E  3001               	movlw	1	; select bank2/3
 13553  055F  0087               	movwf	7
 13554  0560  3001               	movlw	1	; select bank2/3
 13555  0561  3F4C               	moviw [12]fsr1
 13556  0562  0022               	movlb	2	; select bank2
 13557  0563  00AC               	movwf	(_RF_Data^(0+256)+12)
 13558                           
 13559                           ;RF_Control_B1.c: 163: RF_Data[13] = product->Data[13];
 13560  0564  0020               	movlb	0	; select bank0
 13561  0565  086F               	movf	_product,w
 13562  0566  0086               	movwf	6
 13563  0567  3001               	movlw	1	; select bank2/3
 13564  0568  0087               	movwf	7
 13565  0569  3001               	movlw	1	; select bank2/3
 13566  056A  3F4D               	moviw [13]fsr1
 13567  056B  0022               	movlb	2	; select bank2
 13568  056C  00AD               	movwf	(_RF_Data^(0+256)+13)
 13569                           
 13570                           ;RF_Control_B1.c: 164: RF_Data[14] = product->Data[14];
 13571  056D  0020               	movlb	0	; select bank0
 13572  056E  086F               	movf	_product,w
 13573  056F  0086               	movwf	6
 13574  0570  3001               	movlw	1	; select bank2/3
 13575  0571  0087               	movwf	7
 13576  0572  3001               	movlw	1	; select bank2/3
 13577  0573  3F4E               	moviw [14]fsr1
 13578  0574  0022               	movlb	2	; select bank2
 13579  0575  00AE               	movwf	(_RF_Data^(0+256)+14)
 13580                           
 13581                           ;RF_Control_B1.c: 165: RF_Data[15] = product->Data[15];
 13582  0576  0020               	movlb	0	; select bank0
 13583  0577  086F               	movf	_product,w
 13584  0578  0086               	movwf	6
 13585  0579  3001               	movlw	1	; select bank2/3
 13586  057A  0087               	movwf	7
 13587  057B  3001               	movlw	1	; select bank2/3
 13588  057C  3F4F               	moviw [15]fsr1
 13589  057D  0022               	movlb	2	; select bank2
 13590  057E  00AF               	movwf	(_RF_Data^(0+256)+15)
 13591                           
 13592                           ;RF_Control_B1.c: 166: RF_Data[16] = product->Data[16];
 13593  057F  0020               	movlb	0	; select bank0
 13594  0580  086F               	movf	_product,w
 13595  0581  0086               	movwf	6
 13596  0582  3001               	movlw	1	; select bank2/3
 13597  0583  0087               	movwf	7
 13598  0584  3001               	movlw	1	; select bank2/3
 13599  0585  3F50               	moviw [16]fsr1
 13600  0586  0022               	movlb	2	; select bank2
 13601  0587  00B0               	movwf	(_RF_Data^(0+256)+16)
 13602                           
 13603                           ;RF_Control_B1.c: 167: RF_Data[17] = product->Data[17];
 13604  0588  0020               	movlb	0	; select bank0
 13605  0589  086F               	movf	_product,w
 13606  058A  0086               	movwf	6
 13607  058B  3001               	movlw	1	; select bank2/3
 13608  058C  0087               	movwf	7
 13609  058D  3001               	movlw	1	; select bank2/3
 13610  058E  3F51               	moviw [17]fsr1
 13611  058F  0022               	movlb	2	; select bank2
 13612  0590  00B1               	movwf	(_RF_Data^(0+256)+17)
 13613                           
 13614                           ;RF_Control_B1.c: 168: RF_Data[18] = product->Data[18];
 13615  0591  0020               	movlb	0	; select bank0
 13616  0592  086F               	movf	_product,w
 13617  0593  0086               	movwf	6
 13618  0594  3001               	movlw	1	; select bank2/3
 13619  0595  0087               	movwf	7
 13620  0596  3001               	movlw	1	; select bank2/3
 13621  0597  3F52               	moviw [18]fsr1
 13622  0598  0022               	movlb	2	; select bank2
 13623  0599  00B2               	movwf	(_RF_Data^(0+256)+18)
 13624                           
 13625                           ;RF_Control_B1.c: 169: RF_Data[19] = product->Data[19];
 13626  059A  0020               	movlb	0	; select bank0
 13627  059B  086F               	movf	_product,w
 13628  059C  0086               	movwf	6
 13629  059D  3001               	movlw	1	; select bank2/3
 13630  059E  0087               	movwf	7
 13631  059F  3001               	movlw	1	; select bank2/3
 13632  05A0  3F53               	moviw [19]fsr1
 13633  05A1  0022               	movlb	2	; select bank2
 13634  05A2  00B3               	movwf	(_RF_Data^(0+256)+19)
 13635                           
 13636                           ;RF_Control_B1.c: 170: RF_Data[20] = 209;
 13637  05A3  30D1               	movlw	209
 13638  05A4  0020               	movlb	0	; select bank0
 13639  05A5  00A0               	movwf	??_setTxData
 13640  05A6  0820               	movf	??_setTxData,w
 13641  05A7  0022               	movlb	2	; select bank2
 13642  05A8  00B4               	movwf	(_RF_Data^(0+256)+20)
 13643  05A9  0008               	return
 13644  05AA                     __end_of_setTxData:	
 13645                           
 13646                           	psect	text90
 13647  1F45                     __ptext90:	
 13648 ;; *************** function _setSw_Status *****************
 13649 ;; Defined at:
 13650 ;;		line 109 in file "../src/Switch_B1.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;  sw              1    wreg     unsigned char 
 13653 ;;  command         1    2[BANK0 ] unsigned char 
 13654 ;; Auto vars:     Size  Location     Type
 13655 ;;  sw              1    3[BANK0 ] unsigned char 
 13656 ;; Return value:  Size  Location     Type
 13657 ;;		None               void
 13658 ;; Registers used:
 13659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13660 ;; Tracked objects:
 13661 ;;		On entry : 0/0
 13662 ;;		On exit  : 0/0
 13663 ;;		Unchanged: 0/0
 13664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13665 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;Total ram usage:        2 bytes
 13670 ;; Hardware stack levels used:    1
 13671 ;; Hardware stack levels required when called:    6
 13672 ;; This function calls:
 13673 ;;		_SwPointSelect
 13674 ;; This function is called by:
 13675 ;;		_DlyOff_Main
 13676 ;;		_setDimmerLights_ERROR
 13677 ;;		_setControl_Lights_Table
 13678 ;;		_setRFSW_Control
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           
 13683                           ;psect for function _setSw_Status
 13684  1F45                     _setSw_Status:	
 13685                           
 13686                           ;incstack = 0
 13687                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13688                           ;setSw_Status@sw stored from wreg
 13689  1F45  0020               	movlb	0	; select bank0
 13690  1F46  00A3               	movwf	setSw_Status@sw
 13691                           
 13692                           ;Switch_B1.c: 110: SwPointSelect(sw);
 13693  1F47  0823               	movf	setSw_Status@sw,w
 13694  1F48  319E  26D5         	fcall	_SwPointSelect
 13695                           
 13696                           ;Switch_B1.c: 111: Sw->Status = command;
 13697  1F4A  0020               	movlb	0	; select bank0
 13698  1F4B  086E               	movf	_Sw,w
 13699  1F4C  0086               	movwf	6
 13700  1F4D  3001               	movlw	1	; select bank2/3
 13701  1F4E  0087               	movwf	7
 13702  1F4F  0822               	movf	setSw_Status@command,w
 13703  1F50  1301               	bcf	1,6
 13704  1F51  1D03               	skipz
 13705  1F52  1701               	bsf	1,6
 13706  1F53  0008               	return
 13707  1F54                     __end_of_setSw_Status:	
 13708                           
 13709                           	psect	text91
 13710  1ED5                     __ptext91:	
 13711 ;; *************** function _SwPointSelect *****************
 13712 ;; Defined at:
 13713 ;;		line 21 in file "../src/Switch_B1.c"
 13714 ;; Parameters:    Size  Location     Type
 13715 ;;  sw              1    wreg     unsigned char 
 13716 ;; Auto vars:     Size  Location     Type
 13717 ;;  sw              1    1[BANK0 ] unsigned char 
 13718 ;; Return value:  Size  Location     Type
 13719 ;;		None               void
 13720 ;; Registers used:
 13721 ;;		wreg
 13722 ;; Tracked objects:
 13723 ;;		On entry : 0/0
 13724 ;;		On exit  : 0/0
 13725 ;;		Unchanged: 0/0
 13726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;Total ram usage:        2 bytes
 13732 ;; Hardware stack levels used:    1
 13733 ;; Hardware stack levels required when called:    5
 13734 ;; This function calls:
 13735 ;;		Nothing
 13736 ;; This function is called by:
 13737 ;;		_setSw_Enable
 13738 ;;		_setSw_Status
 13739 ;;		_setSw_Main
 13740 ;;		_Sw_Detect
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           
 13745                           ;psect for function _SwPointSelect
 13746  1ED5                     _SwPointSelect:	
 13747                           
 13748                           ;incstack = 0
 13749                           ; Regs used in _SwPointSelect: [wreg]
 13750                           ;SwPointSelect@sw stored from wreg
 13751  1ED5  0020               	movlb	0	; select bank0
 13752  1ED6  00A1               	movwf	SwPointSelect@sw
 13753                           
 13754                           ;Switch_B1.c: 24: if (sw == 1) {
 13755  1ED7  0821               	movf	SwPointSelect@sw,w
 13756  1ED8  3A01               	xorlw	1
 13757  1ED9  1D03               	skipz
 13758  1EDA  0008               	return
 13759                           
 13760                           ;Switch_B1.c: 25: Sw = &Sw1;
 13761  1EDB  30CF               	movlw	_Sw1& (0+255)
 13762  1EDC  00A0               	movwf	??_SwPointSelect
 13763  1EDD  0820               	movf	??_SwPointSelect,w
 13764  1EDE  00EE               	movwf	_Sw
 13765  1EDF  0008               	return
 13766  1EE0                     __end_of_SwPointSelect:	
 13767                           
 13768                           	psect	text92
 13769  0792                     __ptext92:	
 13770 ;; *************** function _setRF_DimmerLights *****************
 13771 ;; Defined at:
 13772 ;;		line 395 in file "../src/RF_Control_B1.c"
 13773 ;; Parameters:    Size  Location     Type
 13774 ;;  lights          1    wreg     unsigned char 
 13775 ;;  on              1   61[BANK0 ] unsigned char 
 13776 ;; Auto vars:     Size  Location     Type
 13777 ;;  lights          1   65[BANK0 ] unsigned char 
 13778 ;;  status          1   64[BANK0 ] unsigned char 
 13779 ;; Return value:  Size  Location     Type
 13780 ;;		None               void
 13781 ;; Registers used:
 13782 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13783 ;; Tracked objects:
 13784 ;;		On entry : 0/0
 13785 ;;		On exit  : 0/0
 13786 ;;		Unchanged: 0/0
 13787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13788 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13791 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;Total ram usage:        5 bytes
 13793 ;; Hardware stack levels used:    1
 13794 ;; Hardware stack levels required when called:    8
 13795 ;; This function calls:
 13796 ;;		_setPercentValue
 13797 ;; This function is called by:
 13798 ;;		_DlyOff_Main
 13799 ;;		_setDimmerLights_Adj
 13800 ;;		_setRFSW_Control
 13801 ;;		_Sw_DimmerOnFunc
 13802 ;;		_Sw_DimmerOffFunc
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806                           
 13807                           ;psect for function _setRF_DimmerLights
 13808  0792                     _setRF_DimmerLights:	
 13809                           
 13810                           ;incstack = 0
 13811                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13812                           ;setRF_DimmerLights@lights stored from wreg
 13813  0792  0020               	movlb	0	; select bank0
 13814  0793  00E1               	movwf	setRF_DimmerLights@lights
 13815                           
 13816                           ;RF_Control_B1.c: 396: char status;
 13817                           ;RF_Control_B1.c: 397: status = 1;
 13818  0794  01E0               	clrf	setRF_DimmerLights@status
 13819  0795  0AE0               	incf	setRF_DimmerLights@status,f
 13820                           
 13821                           ;RF_Control_B1.c: 398: status <<= (lights - 1);
 13822  0796  0861               	movf	setRF_DimmerLights@lights,w
 13823  0797  3EFF               	addlw	-1
 13824  0798  0A89               	incf	9,f
 13825  0799  2F9C               	goto	u4360
 13826  079A                     u4365:	
 13827  079A  1003               	clrc
 13828  079B  0DE0               	rlf	setRF_DimmerLights@status,f
 13829  079C                     u4360:	
 13830  079C  3EFF               	addlw	-1
 13831  079D  1D03               	skipz
 13832  079E  2F9A               	goto	u4365
 13833                           
 13834                           ;RF_Control_B1.c: 399: product->Data[11]=lights;
 13835  079F  0861               	movf	setRF_DimmerLights@lights,w
 13836  07A0  00DE               	movwf	??_setRF_DimmerLights
 13837  07A1  086F               	movf	_product,w
 13838  07A2  3E0B               	addlw	11
 13839  07A3  0086               	movwf	6
 13840  07A4  3001               	movlw	1	; select bank2/3
 13841  07A5  0087               	movwf	7
 13842  07A6  085E               	movf	??_setRF_DimmerLights,w
 13843  07A7  0081               	movwf	1
 13844                           
 13845                           ;RF_Control_B1.c: 402: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13846  07A8  3020               	movlw	32
 13847  07A9  3196  2605  3187   	fcall	_setPercentValue
 13848  07AC  0020               	movlb	0	; select bank0
 13849  07AD  00DE               	movwf	??_setRF_DimmerLights
 13850  07AE  0861               	movf	setRF_DimmerLights@lights,w
 13851  07AF  3E14               	addlw	20
 13852  07B0  076F               	addwf	_product,w
 13853  07B1  00DF               	movwf	??_setRF_DimmerLights+1
 13854  07B2  085F               	movf	??_setRF_DimmerLights+1,w
 13855  07B3  0086               	movwf	6
 13856  07B4  3001               	movlw	1	; select bank2/3
 13857  07B5  0087               	movwf	7
 13858  07B6  085E               	movf	??_setRF_DimmerLights,w
 13859  07B7  0081               	movwf	1
 13860                           
 13861                           ;RF_Control_B1.c: 405: product->Data[9]=product->Data[20 + lights];
 13862  07B8  0861               	movf	setRF_DimmerLights@lights,w
 13863  07B9  3E14               	addlw	20
 13864  07BA  076F               	addwf	_product,w
 13865  07BB  00DE               	movwf	??_setRF_DimmerLights
 13866  07BC  085E               	movf	??_setRF_DimmerLights,w
 13867  07BD  0086               	movwf	6
 13868  07BE  3001               	movlw	1	; select bank2/3
 13869  07BF  0087               	movwf	7
 13870  07C0  0801               	movf	1,w
 13871  07C1  00DF               	movwf	??_setRF_DimmerLights+1
 13872  07C2  086F               	movf	_product,w
 13873  07C3  3E09               	addlw	9
 13874  07C4  0086               	movwf	6
 13875  07C5  3001               	movlw	1	; select bank2/3
 13876  07C6  0087               	movwf	7
 13877  07C7  085F               	movf	??_setRF_DimmerLights+1,w
 13878  07C8  0081               	movwf	1
 13879                           
 13880                           ;RF_Control_B1.c: 406: product->Data[17]=product->Data[26 + lights];
 13881  07C9  0861               	movf	setRF_DimmerLights@lights,w
 13882  07CA  3E1A               	addlw	26
 13883  07CB  076F               	addwf	_product,w
 13884  07CC  00DE               	movwf	??_setRF_DimmerLights
 13885  07CD  085E               	movf	??_setRF_DimmerLights,w
 13886  07CE  0086               	movwf	6
 13887  07CF  3001               	movlw	1	; select bank2/3
 13888  07D0  0087               	movwf	7
 13889  07D1  0801               	movf	1,w
 13890  07D2  00DF               	movwf	??_setRF_DimmerLights+1
 13891  07D3  086F               	movf	_product,w
 13892  07D4  3E11               	addlw	17
 13893  07D5  0086               	movwf	6
 13894  07D6  3001               	movlw	1	; select bank2/3
 13895  07D7  0087               	movwf	7
 13896  07D8  085F               	movf	??_setRF_DimmerLights+1,w
 13897  07D9  0081               	movwf	1
 13898                           
 13899                           ;RF_Control_B1.c: 407: if (on == 1) {
 13900  07DA  085D               	movf	setRF_DimmerLights@on,w
 13901  07DB  3A01               	xorlw	1
 13902  07DC  1D03               	skipz
 13903  07DD  2FEE               	goto	l5607
 13904                           
 13905                           ;RF_Control_B1.c: 408: product->Data[15]=(product->Data[15] | status);
 13906  07DE  086F               	movf	_product,w
 13907  07DF  3E0F               	addlw	15
 13908  07E0  0086               	movwf	6
 13909  07E1  3001               	movlw	1	; select bank2/3
 13910  07E2  0087               	movwf	7
 13911  07E3  0801               	movf	1,w
 13912  07E4  0460               	iorwf	setRF_DimmerLights@status,w
 13913  07E5  00DE               	movwf	??_setRF_DimmerLights
 13914  07E6  086F               	movf	_product,w
 13915  07E7  3E0F               	addlw	15
 13916  07E8  0086               	movwf	6
 13917  07E9  3001               	movlw	1	; select bank2/3
 13918  07EA  0087               	movwf	7
 13919  07EB  085E               	movf	??_setRF_DimmerLights,w
 13920  07EC  0081               	movwf	1
 13921                           
 13922                           ;RF_Control_B1.c: 409: } else {
 13923  07ED  0008               	return
 13924  07EE                     l5607:	
 13925                           
 13926                           ;RF_Control_B1.c: 410: product->Data[15]=(product->Data[15]&(~status));
 13927  07EE  086F               	movf	_product,w
 13928  07EF  3E0F               	addlw	15
 13929  07F0  0086               	movwf	6
 13930  07F1  3001               	movlw	1	; select bank2/3
 13931  07F2  0087               	movwf	7
 13932  07F3  0960               	comf	setRF_DimmerLights@status,w
 13933  07F4  0501               	andwf	1,w
 13934  07F5  00DE               	movwf	??_setRF_DimmerLights
 13935  07F6  086F               	movf	_product,w
 13936  07F7  3E0F               	addlw	15
 13937  07F8  0086               	movwf	6
 13938  07F9  3001               	movlw	1	; select bank2/3
 13939  07FA  0087               	movwf	7
 13940  07FB  085E               	movf	??_setRF_DimmerLights,w
 13941  07FC  0081               	movwf	1
 13942  07FD  0008               	return
 13943  07FE                     __end_of_setRF_DimmerLights:	
 13944                           
 13945                           	psect	text93
 13946  1605                     __ptext93:	
 13947 ;; *************** function _setPercentValue *****************
 13948 ;; Defined at:
 13949 ;;		line 768 in file "../src/Dimmer_B1.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;  value           1    wreg     unsigned char 
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  value           1   57[BANK0 ] unsigned char 
 13954 ;;  i               3   58[BANK0 ] float 
 13955 ;; Return value:  Size  Location     Type
 13956 ;;                  1    wreg      unsigned char 
 13957 ;; Registers used:
 13958 ;;		wreg, status,2, status,0, pclath, cstack
 13959 ;; Tracked objects:
 13960 ;;		On entry : 0/0
 13961 ;;		On exit  : 0/0
 13962 ;;		Unchanged: 0/0
 13963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13968 ;;Total ram usage:        4 bytes
 13969 ;; Hardware stack levels used:    1
 13970 ;; Hardware stack levels required when called:    7
 13971 ;; This function calls:
 13972 ;;		___awtoft
 13973 ;;		___ftdiv
 13974 ;;		___fttol
 13975 ;; This function is called by:
 13976 ;;		_Flash_Memory_Initialization
 13977 ;;		_setRF_DimmerLights
 13978 ;; This function uses a non-reentrant model
 13979 ;;
 13980                           
 13981                           
 13982                           ;psect for function _setPercentValue
 13983  1605                     _setPercentValue:	
 13984                           
 13985                           ;incstack = 0
 13986                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13987                           ;setPercentValue@value stored from wreg
 13988  1605  0020               	movlb	0	; select bank0
 13989  1606  00D9               	movwf	setPercentValue@value
 13990                           
 13991                           ;Dimmer_B1.c: 770: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 13992  1607  3000               	movlw	0
 13993  1608  00DA               	movwf	setPercentValue@i
 13994  1609  30E0               	movlw	224
 13995  160A  00DB               	movwf	setPercentValue@i+1
 13996  160B  3041               	movlw	65
 13997  160C  00DC               	movwf	setPercentValue@i+2
 13998                           
 13999                           ;Dimmer_B1.c: 771: i /= 100;
 14000  160D  3000               	movlw	0
 14001  160E  00AE               	movwf	___ftdiv@f2
 14002  160F  30C8               	movlw	200
 14003  1610  00AF               	movwf	___ftdiv@f2+1
 14004  1611  3042               	movlw	66
 14005  1612  00B0               	movwf	___ftdiv@f2+2
 14006  1613  085A               	movf	setPercentValue@i,w
 14007  1614  00B1               	movwf	___ftdiv@f1
 14008  1615  085B               	movf	setPercentValue@i+1,w
 14009  1616  00B2               	movwf	___ftdiv@f1+1
 14010  1617  085C               	movf	setPercentValue@i+2,w
 14011  1618  00B3               	movwf	___ftdiv@f1+2
 14012  1619  3186  265E  3196   	fcall	___ftdiv
 14013  161C  0020               	movlb	0	; select bank0
 14014  161D  082E               	movf	?___ftdiv,w
 14015  161E  00DA               	movwf	setPercentValue@i
 14016  161F  082F               	movf	?___ftdiv+1,w
 14017  1620  00DB               	movwf	setPercentValue@i+1
 14018  1621  0830               	movf	?___ftdiv+2,w
 14019  1622  00DC               	movwf	setPercentValue@i+2
 14020                           
 14021                           ;Dimmer_B1.c: 772: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14022  1623  0859               	movf	setPercentValue@value,w
 14023  1624  3EE0               	addlw	224
 14024  1625  00A8               	movwf	___awtoft@c
 14025  1626  30FF               	movlw	255
 14026  1627  1803               	skipnc
 14027  1628  3000               	movlw	0
 14028  1629  00A9               	movwf	___awtoft@c+1
 14029  162A  3192  2224  3196   	fcall	___awtoft
 14030  162D  0020               	movlb	0	; select bank0
 14031  162E  0828               	movf	?___awtoft,w
 14032  162F  00B1               	movwf	___ftdiv@f1
 14033  1630  0829               	movf	?___awtoft+1,w
 14034  1631  00B2               	movwf	___ftdiv@f1+1
 14035  1632  082A               	movf	?___awtoft+2,w
 14036  1633  00B3               	movwf	___ftdiv@f1+2
 14037  1634  085A               	movf	setPercentValue@i,w
 14038  1635  00AE               	movwf	___ftdiv@f2
 14039  1636  085B               	movf	setPercentValue@i+1,w
 14040  1637  00AF               	movwf	___ftdiv@f2+1
 14041  1638  085C               	movf	setPercentValue@i+2,w
 14042  1639  00B0               	movwf	___ftdiv@f2+2
 14043  163A  3186  265E  3196   	fcall	___ftdiv
 14044  163D  0020               	movlb	0	; select bank0
 14045  163E  082E               	movf	?___ftdiv,w
 14046  163F  00CB               	movwf	___fttol@f1
 14047  1640  082F               	movf	?___ftdiv+1,w
 14048  1641  00CC               	movwf	___fttol@f1+1
 14049  1642  0830               	movf	?___ftdiv+2,w
 14050  1643  00CD               	movwf	___fttol@f1+2
 14051  1644  318F  2779         	fcall	___fttol
 14052  1646  0020               	movlb	0	; select bank0
 14053  1647  034B               	decf	?___fttol,w
 14054  1648  3AFF               	xorlw	255
 14055  1649  3E64               	addlw	100
 14056  164A  0008               	return
 14057  164B                     __end_of_setPercentValue:	
 14058                           
 14059                           	psect	text94
 14060  0F79                     __ptext94:	
 14061 ;; *************** function ___fttol *****************
 14062 ;; Defined at:
 14063 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14064 ;; Parameters:    Size  Location     Type
 14065 ;;  f1              3   43[BANK0 ] float 
 14066 ;; Auto vars:     Size  Location     Type
 14067 ;;  lval            4   52[BANK0 ] unsigned long 
 14068 ;;  exp1            1   56[BANK0 ] unsigned char 
 14069 ;;  sign1           1   51[BANK0 ] unsigned char 
 14070 ;; Return value:  Size  Location     Type
 14071 ;;                  4   43[BANK0 ] long 
 14072 ;; Registers used:
 14073 ;;		wreg, status,2, status,0
 14074 ;; Tracked objects:
 14075 ;;		On entry : 0/0
 14076 ;;		On exit  : 0/0
 14077 ;;		Unchanged: 0/0
 14078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14079 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14080 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14081 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14082 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14083 ;;Total ram usage:       14 bytes
 14084 ;; Hardware stack levels used:    1
 14085 ;; Hardware stack levels required when called:    5
 14086 ;; This function calls:
 14087 ;;		Nothing
 14088 ;; This function is called by:
 14089 ;;		_getPercentValue
 14090 ;;		_setPercentValue
 14091 ;; This function uses a non-reentrant model
 14092 ;;
 14093                           
 14094                           
 14095                           ;psect for function ___fttol
 14096  0F79                     ___fttol:	
 14097                           
 14098                           ;incstack = 0
 14099                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14100  0F79  0020               	movlb	0	; select bank0
 14101  0F7A  084B               	movf	___fttol@f1,w
 14102  0F7B  00CF               	movwf	??___fttol
 14103  0F7C  084C               	movf	___fttol@f1+1,w
 14104  0F7D  00D0               	movwf	??___fttol+1
 14105  0F7E  084D               	movf	___fttol@f1+2,w
 14106  0F7F  00D1               	movwf	??___fttol+2
 14107  0F80  1003               	clrc
 14108  0F81  0D50               	rlf	??___fttol+1,w
 14109  0F82  0D51               	rlf	??___fttol+2,w
 14110  0F83  00D2               	movwf	??___fttol+3
 14111  0F84  0852               	movf	??___fttol+3,w
 14112  0F85  00D8               	movwf	___fttol@exp1
 14113  0F86  08D8               	movf	___fttol@exp1,f
 14114  0F87  1D03               	skipz
 14115  0F88  2F92               	goto	l5389
 14116  0F89  3000               	movlw	0
 14117  0F8A  00CE               	movwf	?___fttol+3
 14118  0F8B  3000               	movlw	0
 14119  0F8C  00CD               	movwf	?___fttol+2
 14120  0F8D  3000               	movlw	0
 14121  0F8E  00CC               	movwf	?___fttol+1
 14122  0F8F  3000               	movlw	0
 14123  0F90  00CB               	movwf	?___fttol
 14124  0F91  0008               	return
 14125  0F92                     l5389:	
 14126  0F92  084B               	movf	___fttol@f1,w
 14127  0F93  00CF               	movwf	??___fttol
 14128  0F94  084C               	movf	___fttol@f1+1,w
 14129  0F95  00D0               	movwf	??___fttol+1
 14130  0F96  084D               	movf	___fttol@f1+2,w
 14131  0F97  00D1               	movwf	??___fttol+2
 14132  0F98  3017               	movlw	23
 14133  0F99                     u4025:	
 14134  0F99  36D1               	lsrf	??___fttol+2,f
 14135  0F9A  0CD0               	rrf	??___fttol+1,f
 14136  0F9B  0CCF               	rrf	??___fttol,f
 14137  0F9C  0B89               	decfsz	9,f
 14138  0F9D  2F99               	goto	u4025
 14139  0F9E  084F               	movf	??___fttol,w
 14140  0F9F  00D2               	movwf	??___fttol+3
 14141  0FA0  0852               	movf	??___fttol+3,w
 14142  0FA1  00D3               	movwf	___fttol@sign1
 14143  0FA2  17CC               	bsf	___fttol@f1+1,7
 14144  0FA3  30FF               	movlw	255
 14145  0FA4  05CB               	andwf	___fttol@f1,f
 14146  0FA5  30FF               	movlw	255
 14147  0FA6  05CC               	andwf	___fttol@f1+1,f
 14148  0FA7  3000               	movlw	0
 14149  0FA8  05CD               	andwf	___fttol@f1+2,f
 14150  0FA9  084B               	movf	___fttol@f1,w
 14151  0FAA  00D4               	movwf	___fttol@lval
 14152  0FAB  084C               	movf	___fttol@f1+1,w
 14153  0FAC  00D5               	movwf	___fttol@lval+1
 14154  0FAD  084D               	movf	___fttol@f1+2,w
 14155  0FAE  00D6               	movwf	___fttol@lval+2
 14156  0FAF  01D7               	clrf	___fttol@lval+3
 14157  0FB0  308E               	movlw	142
 14158  0FB1  02D8               	subwf	___fttol@exp1,f
 14159  0FB2  1FD8               	btfss	___fttol@exp1,7
 14160  0FB3  2FD0               	goto	l5409
 14161  0FB4  0858               	movf	___fttol@exp1,w
 14162  0FB5  3A80               	xorlw	128
 14163  0FB6  3E8F               	addlw	143
 14164  0FB7  1803               	skipnc
 14165  0FB8  2FC2               	goto	l5407
 14166  0FB9  3000               	movlw	0
 14167  0FBA  00CE               	movwf	?___fttol+3
 14168  0FBB  3000               	movlw	0
 14169  0FBC  00CD               	movwf	?___fttol+2
 14170  0FBD  3000               	movlw	0
 14171  0FBE  00CC               	movwf	?___fttol+1
 14172  0FBF  3000               	movlw	0
 14173  0FC0  00CB               	movwf	?___fttol
 14174  0FC1  0008               	return
 14175  0FC2                     l5407:	
 14176  0FC2  3001               	movlw	1
 14177  0FC3                     u4055:	
 14178  0FC3  36D7               	lsrf	___fttol@lval+3,f
 14179  0FC4  0CD6               	rrf	___fttol@lval+2,f
 14180  0FC5  0CD5               	rrf	___fttol@lval+1,f
 14181  0FC6  0CD4               	rrf	___fttol@lval,f
 14182  0FC7  0B89               	decfsz	9,f
 14183  0FC8  2FC3               	goto	u4055
 14184  0FC9  3001               	movlw	1
 14185  0FCA  00CF               	movwf	??___fttol
 14186  0FCB  084F               	movf	??___fttol,w
 14187  0FCC  07D8               	addwf	___fttol@exp1,f
 14188  0FCD  1903               	btfsc	3,2
 14189  0FCE  2FE9               	goto	l5419
 14190  0FCF  2FC2               	goto	l5407
 14191  0FD0                     l5409:	
 14192  0FD0  3018               	movlw	24
 14193  0FD1  0258               	subwf	___fttol@exp1,w
 14194  0FD2  1C03               	skipc
 14195  0FD3  2FE6               	goto	l5417
 14196  0FD4  3000               	movlw	0
 14197  0FD5  00CE               	movwf	?___fttol+3
 14198  0FD6  3000               	movlw	0
 14199  0FD7  00CD               	movwf	?___fttol+2
 14200  0FD8  3000               	movlw	0
 14201  0FD9  00CC               	movwf	?___fttol+1
 14202  0FDA  3000               	movlw	0
 14203  0FDB  00CB               	movwf	?___fttol
 14204  0FDC  0008               	return
 14205  0FDD                     l5415:	
 14206  0FDD  3001               	movlw	1
 14207  0FDE                     u4085:	
 14208  0FDE  35D4               	lslf	___fttol@lval,f
 14209  0FDF  0DD5               	rlf	___fttol@lval+1,f
 14210  0FE0  0DD6               	rlf	___fttol@lval+2,f
 14211  0FE1  0DD7               	rlf	___fttol@lval+3,f
 14212  0FE2  0B89               	decfsz	9,f
 14213  0FE3  2FDE               	goto	u4085
 14214  0FE4  3001               	movlw	1
 14215  0FE5  02D8               	subwf	___fttol@exp1,f
 14216  0FE6                     l5417:	
 14217  0FE6  08D8               	movf	___fttol@exp1,f
 14218  0FE7  1D03               	skipz
 14219  0FE8  2FDD               	goto	l5415
 14220  0FE9                     l5419:	
 14221  0FE9  0853               	movf	___fttol@sign1,w
 14222  0FEA  1903               	btfsc	3,2
 14223  0FEB  2FF7               	goto	l5423
 14224  0FEC  09D4               	comf	___fttol@lval,f
 14225  0FED  09D5               	comf	___fttol@lval+1,f
 14226  0FEE  09D6               	comf	___fttol@lval+2,f
 14227  0FEF  09D7               	comf	___fttol@lval+3,f
 14228  0FF0  0AD4               	incf	___fttol@lval,f
 14229  0FF1  1903               	skipnz
 14230  0FF2  0AD5               	incf	___fttol@lval+1,f
 14231  0FF3  1903               	skipnz
 14232  0FF4  0AD6               	incf	___fttol@lval+2,f
 14233  0FF5  1903               	skipnz
 14234  0FF6  0AD7               	incf	___fttol@lval+3,f
 14235  0FF7                     l5423:	
 14236  0FF7  0857               	movf	___fttol@lval+3,w
 14237  0FF8  00CE               	movwf	?___fttol+3
 14238  0FF9  0856               	movf	___fttol@lval+2,w
 14239  0FFA  00CD               	movwf	?___fttol+2
 14240  0FFB  0855               	movf	___fttol@lval+1,w
 14241  0FFC  00CC               	movwf	?___fttol+1
 14242  0FFD  0854               	movf	___fttol@lval,w
 14243  0FFE  00CB               	movwf	?___fttol
 14244  0FFF  0008               	return
 14245  1000                     __end_of___fttol:	
 14246                           
 14247                           	psect	text95
 14248  065E                     __ptext95:	
 14249 ;; *************** function ___ftdiv *****************
 14250 ;; Defined at:
 14251 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14252 ;; Parameters:    Size  Location     Type
 14253 ;;  f2              3   14[BANK0 ] float 
 14254 ;;  f1              3   17[BANK0 ] float 
 14255 ;; Auto vars:     Size  Location     Type
 14256 ;;  f3              3   25[BANK0 ] float 
 14257 ;;  sign            1   29[BANK0 ] unsigned char 
 14258 ;;  exp             1   28[BANK0 ] unsigned char 
 14259 ;;  cntr            1   24[BANK0 ] unsigned char 
 14260 ;; Return value:  Size  Location     Type
 14261 ;;                  3   14[BANK0 ] float 
 14262 ;; Registers used:
 14263 ;;		wreg, status,2, status,0, pclath, cstack
 14264 ;; Tracked objects:
 14265 ;;		On entry : 0/0
 14266 ;;		On exit  : 0/0
 14267 ;;		Unchanged: 0/0
 14268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14269 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14270 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14272 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14273 ;;Total ram usage:       16 bytes
 14274 ;; Hardware stack levels used:    1
 14275 ;; Hardware stack levels required when called:    6
 14276 ;; This function calls:
 14277 ;;		___ftpack
 14278 ;; This function is called by:
 14279 ;;		_getPercentValue
 14280 ;;		_setPercentValue
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           
 14285                           ;psect for function ___ftdiv
 14286  065E                     ___ftdiv:	
 14287                           
 14288                           ;incstack = 0
 14289                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14290  065E  0020               	movlb	0	; select bank0
 14291  065F  0831               	movf	___ftdiv@f1,w
 14292  0660  00B4               	movwf	??___ftdiv
 14293  0661  0832               	movf	___ftdiv@f1+1,w
 14294  0662  00B5               	movwf	??___ftdiv+1
 14295  0663  0833               	movf	___ftdiv@f1+2,w
 14296  0664  00B6               	movwf	??___ftdiv+2
 14297  0665  1003               	clrc
 14298  0666  0D35               	rlf	??___ftdiv+1,w
 14299  0667  0D36               	rlf	??___ftdiv+2,w
 14300  0668  00B7               	movwf	??___ftdiv+3
 14301  0669  0837               	movf	??___ftdiv+3,w
 14302  066A  00BC               	movwf	___ftdiv@exp
 14303  066B  08BC               	movf	___ftdiv@exp,f
 14304  066C  1D03               	skipz
 14305  066D  2E75               	goto	l5297
 14306  066E  3000               	movlw	0
 14307  066F  00AE               	movwf	?___ftdiv
 14308  0670  3000               	movlw	0
 14309  0671  00AF               	movwf	?___ftdiv+1
 14310  0672  3000               	movlw	0
 14311  0673  00B0               	movwf	?___ftdiv+2
 14312  0674  0008               	return
 14313  0675                     l5297:	
 14314  0675  082E               	movf	___ftdiv@f2,w
 14315  0676  00B4               	movwf	??___ftdiv
 14316  0677  082F               	movf	___ftdiv@f2+1,w
 14317  0678  00B5               	movwf	??___ftdiv+1
 14318  0679  0830               	movf	___ftdiv@f2+2,w
 14319  067A  00B6               	movwf	??___ftdiv+2
 14320  067B  1003               	clrc
 14321  067C  0D35               	rlf	??___ftdiv+1,w
 14322  067D  0D36               	rlf	??___ftdiv+2,w
 14323  067E  00B7               	movwf	??___ftdiv+3
 14324  067F  0837               	movf	??___ftdiv+3,w
 14325  0680  00BD               	movwf	___ftdiv@sign
 14326  0681  08BD               	movf	___ftdiv@sign,f
 14327  0682  1D03               	skipz
 14328  0683  2E8B               	goto	l5303
 14329  0684  3000               	movlw	0
 14330  0685  00AE               	movwf	?___ftdiv
 14331  0686  3000               	movlw	0
 14332  0687  00AF               	movwf	?___ftdiv+1
 14333  0688  3000               	movlw	0
 14334  0689  00B0               	movwf	?___ftdiv+2
 14335  068A  0008               	return
 14336  068B                     l5303:	
 14337  068B  3000               	movlw	0
 14338  068C  00B9               	movwf	___ftdiv@f3
 14339  068D  3000               	movlw	0
 14340  068E  00BA               	movwf	___ftdiv@f3+1
 14341  068F  3000               	movlw	0
 14342  0690  00BB               	movwf	___ftdiv@f3+2
 14343  0691  3089               	movlw	137
 14344  0692  073D               	addwf	___ftdiv@sign,w
 14345  0693  00B4               	movwf	??___ftdiv
 14346  0694  0834               	movf	??___ftdiv,w
 14347  0695  02BC               	subwf	___ftdiv@exp,f
 14348  0696  0831               	movf	___ftdiv@f1,w
 14349  0697  00B4               	movwf	??___ftdiv
 14350  0698  0832               	movf	___ftdiv@f1+1,w
 14351  0699  00B5               	movwf	??___ftdiv+1
 14352  069A  0833               	movf	___ftdiv@f1+2,w
 14353  069B  00B6               	movwf	??___ftdiv+2
 14354  069C  3010               	movlw	16
 14355  069D                     u3835:	
 14356  069D  36B6               	lsrf	??___ftdiv+2,f
 14357  069E  0CB5               	rrf	??___ftdiv+1,f
 14358  069F  0CB4               	rrf	??___ftdiv,f
 14359  06A0  0B89               	decfsz	9,f
 14360  06A1  2E9D               	goto	u3835
 14361  06A2  0834               	movf	??___ftdiv,w
 14362  06A3  00B7               	movwf	??___ftdiv+3
 14363  06A4  0837               	movf	??___ftdiv+3,w
 14364  06A5  00BD               	movwf	___ftdiv@sign
 14365  06A6  082E               	movf	___ftdiv@f2,w
 14366  06A7  00B4               	movwf	??___ftdiv
 14367  06A8  082F               	movf	___ftdiv@f2+1,w
 14368  06A9  00B5               	movwf	??___ftdiv+1
 14369  06AA  0830               	movf	___ftdiv@f2+2,w
 14370  06AB  00B6               	movwf	??___ftdiv+2
 14371  06AC  3010               	movlw	16
 14372  06AD                     u3845:	
 14373  06AD  36B6               	lsrf	??___ftdiv+2,f
 14374  06AE  0CB5               	rrf	??___ftdiv+1,f
 14375  06AF  0CB4               	rrf	??___ftdiv,f
 14376  06B0  0B89               	decfsz	9,f
 14377  06B1  2EAD               	goto	u3845
 14378  06B2  0834               	movf	??___ftdiv,w
 14379  06B3  00B7               	movwf	??___ftdiv+3
 14380  06B4  0837               	movf	??___ftdiv+3,w
 14381  06B5  06BD               	xorwf	___ftdiv@sign,f
 14382  06B6  3080               	movlw	128
 14383  06B7  00B4               	movwf	??___ftdiv
 14384  06B8  0834               	movf	??___ftdiv,w
 14385  06B9  05BD               	andwf	___ftdiv@sign,f
 14386  06BA  17B2               	bsf	___ftdiv@f1+1,7
 14387  06BB  30FF               	movlw	255
 14388  06BC  05B1               	andwf	___ftdiv@f1,f
 14389  06BD  30FF               	movlw	255
 14390  06BE  05B2               	andwf	___ftdiv@f1+1,f
 14391  06BF  3000               	movlw	0
 14392  06C0  05B3               	andwf	___ftdiv@f1+2,f
 14393  06C1  17AF               	bsf	___ftdiv@f2+1,7
 14394  06C2  30FF               	movlw	255
 14395  06C3  05AE               	andwf	___ftdiv@f2,f
 14396  06C4  30FF               	movlw	255
 14397  06C5  05AF               	andwf	___ftdiv@f2+1,f
 14398  06C6  3000               	movlw	0
 14399  06C7  05B0               	andwf	___ftdiv@f2+2,f
 14400  06C8  3018               	movlw	24
 14401  06C9  00B4               	movwf	??___ftdiv
 14402  06CA  0834               	movf	??___ftdiv,w
 14403  06CB  00B8               	movwf	___ftdiv@cntr
 14404  06CC                     l5317:	
 14405  06CC  3001               	movlw	1
 14406  06CD                     u3855:	
 14407  06CD  35B9               	lslf	___ftdiv@f3,f
 14408  06CE  0DBA               	rlf	___ftdiv@f3+1,f
 14409  06CF  0DBB               	rlf	___ftdiv@f3+2,f
 14410  06D0  0B89               	decfsz	9,f
 14411  06D1  2ECD               	goto	u3855
 14412  06D2  0830               	movf	___ftdiv@f2+2,w
 14413  06D3  0233               	subwf	___ftdiv@f1+2,w
 14414  06D4  1D03               	skipz
 14415  06D5  2EDC               	goto	u3865
 14416  06D6  082F               	movf	___ftdiv@f2+1,w
 14417  06D7  0232               	subwf	___ftdiv@f1+1,w
 14418  06D8  1D03               	skipz
 14419  06D9  2EDC               	goto	u3865
 14420  06DA  082E               	movf	___ftdiv@f2,w
 14421  06DB  0231               	subwf	___ftdiv@f1,w
 14422  06DC                     u3865:	
 14423  06DC  1C03               	skipc
 14424  06DD  2EE5               	goto	l5325
 14425  06DE  082E               	movf	___ftdiv@f2,w
 14426  06DF  02B1               	subwf	___ftdiv@f1,f
 14427  06E0  082F               	movf	___ftdiv@f2+1,w
 14428  06E1  3BB2               	subwfb	___ftdiv@f1+1,f
 14429  06E2  0830               	movf	___ftdiv@f2+2,w
 14430  06E3  3BB3               	subwfb	___ftdiv@f1+2,f
 14431  06E4  1439               	bsf	___ftdiv@f3,0
 14432  06E5                     l5325:	
 14433  06E5  3001               	movlw	1
 14434  06E6                     u3875:	
 14435  06E6  35B1               	lslf	___ftdiv@f1,f
 14436  06E7  0DB2               	rlf	___ftdiv@f1+1,f
 14437  06E8  0DB3               	rlf	___ftdiv@f1+2,f
 14438  06E9  0B89               	decfsz	9,f
 14439  06EA  2EE6               	goto	u3875
 14440  06EB  3001               	movlw	1
 14441  06EC  02B8               	subwf	___ftdiv@cntr,f
 14442  06ED  1D03               	btfss	3,2
 14443  06EE  2ECC               	goto	l5317
 14444  06EF  0839               	movf	___ftdiv@f3,w
 14445  06F0  00A0               	movwf	___ftpack@arg
 14446  06F1  083A               	movf	___ftdiv@f3+1,w
 14447  06F2  00A1               	movwf	___ftpack@arg+1
 14448  06F3  083B               	movf	___ftdiv@f3+2,w
 14449  06F4  00A2               	movwf	___ftpack@arg+2
 14450  06F5  083C               	movf	___ftdiv@exp,w
 14451  06F6  00B4               	movwf	??___ftdiv
 14452  06F7  0834               	movf	??___ftdiv,w
 14453  06F8  00A3               	movwf	___ftpack@exp
 14454  06F9  083D               	movf	___ftdiv@sign,w
 14455  06FA  00B5               	movwf	??___ftdiv+1
 14456  06FB  0835               	movf	??___ftdiv+1,w
 14457  06FC  00A4               	movwf	___ftpack@sign
 14458  06FD  318A  2248         	fcall	___ftpack
 14459  06FF  0020               	movlb	0	; select bank0
 14460  0700  0820               	movf	?___ftpack,w
 14461  0701  00AE               	movwf	?___ftdiv
 14462  0702  0821               	movf	?___ftpack+1,w
 14463  0703  00AF               	movwf	?___ftdiv+1
 14464  0704  0822               	movf	?___ftpack+2,w
 14465  0705  00B0               	movwf	?___ftdiv+2
 14466  0706  0008               	return
 14467  0707                     __end_of___ftdiv:	
 14468                           
 14469                           	psect	text96
 14470  1224                     __ptext96:	
 14471 ;; *************** function ___awtoft *****************
 14472 ;; Defined at:
 14473 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;  c               2    8[BANK0 ] int 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  sign            1   13[BANK0 ] unsigned char 
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  3    8[BANK0 ] float 
 14480 ;; Registers used:
 14481 ;;		wreg, status,2, status,0, pclath, cstack
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14487 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;Total ram usage:        6 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; Hardware stack levels required when called:    6
 14494 ;; This function calls:
 14495 ;;		___ftpack
 14496 ;; This function is called by:
 14497 ;;		_getPercentValue
 14498 ;;		_setPercentValue
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           
 14503                           ;psect for function ___awtoft
 14504  1224                     ___awtoft:	
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14508  1224  0020               	movlb	0	; select bank0
 14509  1225  01AD               	clrf	___awtoft@sign
 14510  1226  1FA9               	btfss	___awtoft@c+1,7
 14511  1227  2A2F               	goto	l5215
 14512  1228  09A8               	comf	___awtoft@c,f
 14513  1229  09A9               	comf	___awtoft@c+1,f
 14514  122A  0AA8               	incf	___awtoft@c,f
 14515  122B  1903               	skipnz
 14516  122C  0AA9               	incf	___awtoft@c+1,f
 14517  122D  01AD               	clrf	___awtoft@sign
 14518  122E  0AAD               	incf	___awtoft@sign,f
 14519  122F                     l5215:	
 14520  122F  0828               	movf	___awtoft@c,w
 14521  1230  00A0               	movwf	___ftpack@arg
 14522  1231  0829               	movf	___awtoft@c+1,w
 14523  1232  00A1               	movwf	___ftpack@arg+1
 14524  1233  01A2               	clrf	___ftpack@arg+2
 14525  1234  308E               	movlw	142
 14526  1235  00AB               	movwf	??___awtoft
 14527  1236  082B               	movf	??___awtoft,w
 14528  1237  00A3               	movwf	___ftpack@exp
 14529  1238  082D               	movf	___awtoft@sign,w
 14530  1239  00AC               	movwf	??___awtoft+1
 14531  123A  082C               	movf	??___awtoft+1,w
 14532  123B  00A4               	movwf	___ftpack@sign
 14533  123C  318A  2248         	fcall	___ftpack
 14534  123E  0020               	movlb	0	; select bank0
 14535  123F  0820               	movf	?___ftpack,w
 14536  1240  00A8               	movwf	?___awtoft
 14537  1241  0821               	movf	?___ftpack+1,w
 14538  1242  00A9               	movwf	?___awtoft+1
 14539  1243  0822               	movf	?___ftpack+2,w
 14540  1244  00AA               	movwf	?___awtoft+2
 14541  1245  0008               	return
 14542  1246                     __end_of___awtoft:	
 14543                           
 14544                           	psect	text97
 14545  0A48                     __ptext97:	
 14546 ;; *************** function ___ftpack *****************
 14547 ;; Defined at:
 14548 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14549 ;; Parameters:    Size  Location     Type
 14550 ;;  arg             3    0[BANK0 ] unsigned um
 14551 ;;  exp             1    3[BANK0 ] unsigned char 
 14552 ;;  sign            1    4[BANK0 ] unsigned char 
 14553 ;; Auto vars:     Size  Location     Type
 14554 ;;		None
 14555 ;; Return value:  Size  Location     Type
 14556 ;;                  3    0[BANK0 ] float 
 14557 ;; Registers used:
 14558 ;;		wreg, status,2, status,0
 14559 ;; Tracked objects:
 14560 ;;		On entry : 0/0
 14561 ;;		On exit  : 0/0
 14562 ;;		Unchanged: 0/0
 14563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14564 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14566 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;Total ram usage:        8 bytes
 14569 ;; Hardware stack levels used:    1
 14570 ;; Hardware stack levels required when called:    5
 14571 ;; This function calls:
 14572 ;;		Nothing
 14573 ;; This function is called by:
 14574 ;;		___awtoft
 14575 ;;		___ftadd
 14576 ;;		___ftdiv
 14577 ;;		___ftmul
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           
 14582                           ;psect for function ___ftpack
 14583  0A48                     ___ftpack:	
 14584                           
 14585                           ;incstack = 0
 14586                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14587  0A48  0020               	movlb	0	; select bank0
 14588  0A49  0823               	movf	___ftpack@exp,w
 14589  0A4A  1903               	btfsc	3,2
 14590  0A4B  2A51               	goto	l5181
 14591  0A4C  0822               	movf	___ftpack@arg+2,w
 14592  0A4D  0421               	iorwf	___ftpack@arg+1,w
 14593  0A4E  0420               	iorwf	___ftpack@arg,w
 14594  0A4F  1D03               	skipz
 14595  0A50  2A62               	goto	l5187
 14596  0A51                     l5181:	
 14597  0A51  3000               	movlw	0
 14598  0A52  00A0               	movwf	?___ftpack
 14599  0A53  3000               	movlw	0
 14600  0A54  00A1               	movwf	?___ftpack+1
 14601  0A55  3000               	movlw	0
 14602  0A56  00A2               	movwf	?___ftpack+2
 14603  0A57  0008               	return
 14604  0A58                     l5185:	
 14605  0A58  3001               	movlw	1
 14606  0A59  00A5               	movwf	??___ftpack
 14607  0A5A  0825               	movf	??___ftpack,w
 14608  0A5B  07A3               	addwf	___ftpack@exp,f
 14609  0A5C  3001               	movlw	1
 14610  0A5D                     u3485:	
 14611  0A5D  36A2               	lsrf	___ftpack@arg+2,f
 14612  0A5E  0CA1               	rrf	___ftpack@arg+1,f
 14613  0A5F  0CA0               	rrf	___ftpack@arg,f
 14614  0A60  0B89               	decfsz	9,f
 14615  0A61  2A5D               	goto	u3485
 14616  0A62                     l5187:	
 14617  0A62  30FE               	movlw	254
 14618  0A63  0522               	andwf	___ftpack@arg+2,w
 14619  0A64  1903               	btfsc	3,2
 14620  0A65  2A7B               	goto	l2711
 14621  0A66  2A58               	goto	l5185
 14622  0A67                     l5189:	
 14623  0A67  3001               	movlw	1
 14624  0A68  00A5               	movwf	??___ftpack
 14625  0A69  0825               	movf	??___ftpack,w
 14626  0A6A  07A3               	addwf	___ftpack@exp,f
 14627  0A6B  3001               	movlw	1
 14628  0A6C  07A0               	addwf	___ftpack@arg,f
 14629  0A6D  3000               	movlw	0
 14630  0A6E  1803               	skipnc
 14631  0A6F  3001               	movlw	1
 14632  0A70  07A1               	addwf	___ftpack@arg+1,f
 14633  0A71  3000               	movlw	0
 14634  0A72  1803               	skipnc
 14635  0A73  3001               	movlw	1
 14636  0A74  07A2               	addwf	___ftpack@arg+2,f
 14637  0A75  3001               	movlw	1
 14638  0A76                     u3505:	
 14639  0A76  36A2               	lsrf	___ftpack@arg+2,f
 14640  0A77  0CA1               	rrf	___ftpack@arg+1,f
 14641  0A78  0CA0               	rrf	___ftpack@arg,f
 14642  0A79  0B89               	decfsz	9,f
 14643  0A7A  2A76               	goto	u3505
 14644  0A7B                     l2711:	
 14645  0A7B  30FF               	movlw	255
 14646  0A7C  0522               	andwf	___ftpack@arg+2,w
 14647  0A7D  1903               	btfsc	3,2
 14648  0A7E  2A88               	goto	l5197
 14649  0A7F  2A67               	goto	l5189
 14650  0A80                     l5195:	
 14651  0A80  3001               	movlw	1
 14652  0A81  02A3               	subwf	___ftpack@exp,f
 14653  0A82  3001               	movlw	1
 14654  0A83                     u3525:	
 14655  0A83  35A0               	lslf	___ftpack@arg,f
 14656  0A84  0DA1               	rlf	___ftpack@arg+1,f
 14657  0A85  0DA2               	rlf	___ftpack@arg+2,f
 14658  0A86  0B89               	decfsz	9,f
 14659  0A87  2A83               	goto	u3525
 14660  0A88                     l5197:	
 14661  0A88  1FA1               	btfss	___ftpack@arg+1,7
 14662  0A89  2A80               	goto	l5195
 14663  0A8A  1823               	btfsc	___ftpack@exp,0
 14664  0A8B  2A92               	goto	l2717
 14665  0A8C  30FF               	movlw	255
 14666  0A8D  05A0               	andwf	___ftpack@arg,f
 14667  0A8E  307F               	movlw	127
 14668  0A8F  05A1               	andwf	___ftpack@arg+1,f
 14669  0A90  30FF               	movlw	255
 14670  0A91  05A2               	andwf	___ftpack@arg+2,f
 14671  0A92                     l2717:	
 14672  0A92  1003               	clrc
 14673  0A93  0CA3               	rrf	___ftpack@exp,f
 14674  0A94  0823               	movf	___ftpack@exp,w
 14675  0A95  00A5               	movwf	??___ftpack
 14676  0A96  01A6               	clrf	??___ftpack+1
 14677  0A97  01A7               	clrf	??___ftpack+2
 14678  0A98  3010               	movlw	16
 14679  0A99                     u3555:	
 14680  0A99  35A5               	lslf	??___ftpack,f
 14681  0A9A  0DA6               	rlf	??___ftpack+1,f
 14682  0A9B  0DA7               	rlf	??___ftpack+2,f
 14683  0A9C  0B89               	decfsz	9,f
 14684  0A9D  2A99               	goto	u3555
 14685  0A9E  0825               	movf	??___ftpack,w
 14686  0A9F  04A0               	iorwf	___ftpack@arg,f
 14687  0AA0  0826               	movf	??___ftpack+1,w
 14688  0AA1  04A1               	iorwf	___ftpack@arg+1,f
 14689  0AA2  0827               	movf	??___ftpack+2,w
 14690  0AA3  04A2               	iorwf	___ftpack@arg+2,f
 14691  0AA4  0824               	movf	___ftpack@sign,w
 14692  0AA5  1903               	btfsc	3,2
 14693  0AA6  0008               	return
 14694  0AA7  17A2               	bsf	___ftpack@arg+2,7
 14695  0AA8  0008               	return
 14696  0AA9                     __end_of___ftpack:	
 14697                           
 14698                           	psect	text98
 14699  1F37                     __ptext98:	
 14700 ;; *************** function _setRFSW_Status *****************
 14701 ;; Defined at:
 14702 ;;		line 377 in file "../src/RF_Control_B1.c"
 14703 ;; Parameters:    Size  Location     Type
 14704 ;;  sw              1    wreg     unsigned char 
 14705 ;;  command         1    2[BANK0 ] unsigned char 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  sw              1    3[BANK0 ] unsigned char 
 14708 ;; Return value:  Size  Location     Type
 14709 ;;		None               void
 14710 ;; Registers used:
 14711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14717 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;Total ram usage:        2 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; Hardware stack levels required when called:    6
 14724 ;; This function calls:
 14725 ;;		_RfSWPointSelect
 14726 ;; This function is called by:
 14727 ;;		_DlyOff_Main
 14728 ;;		_setDimmerLights_ERROR
 14729 ;;		_setControl_Lights_Table
 14730 ;;		_Sw_DimmerOnFunc
 14731 ;;		_Sw_DimmerAdjFunc
 14732 ;; This function uses a non-reentrant model
 14733 ;;
 14734                           
 14735                           
 14736                           ;psect for function _setRFSW_Status
 14737  1F37                     _setRFSW_Status:	
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14741                           ;setRFSW_Status@sw stored from wreg
 14742  1F37  0020               	movlb	0	; select bank0
 14743  1F38  00A3               	movwf	setRFSW_Status@sw
 14744                           
 14745                           ;RF_Control_B1.c: 378: RfSWPointSelect(sw);
 14746  1F39  0823               	movf	setRFSW_Status@sw,w
 14747  1F3A  319E  26CA         	fcall	_RfSWPointSelect
 14748                           
 14749                           ;RF_Control_B1.c: 379: RFSW->Status = command;
 14750  1F3C  087A               	movf	_RFSW,w
 14751  1F3D  0086               	movwf	6
 14752  1F3E  0187               	clrf	7
 14753  1F3F  0020               	movlb	0	; select bank0
 14754  1F40  0822               	movf	setRFSW_Status@command,w
 14755  1F41  1001               	bcf	1,0
 14756  1F42  1D03               	skipz
 14757  1F43  1401               	bsf	1,0
 14758  1F44  0008               	return
 14759  1F45                     __end_of_setRFSW_Status:	
 14760                           
 14761                           	psect	text99
 14762  1ECA                     __ptext99:	
 14763 ;; *************** function _RfSWPointSelect *****************
 14764 ;; Defined at:
 14765 ;;		line 312 in file "../src/RF_Control_B1.c"
 14766 ;; Parameters:    Size  Location     Type
 14767 ;;  sw              1    wreg     unsigned char 
 14768 ;; Auto vars:     Size  Location     Type
 14769 ;;  sw              1    1[BANK0 ] unsigned char 
 14770 ;; Return value:  Size  Location     Type
 14771 ;;		None               void
 14772 ;; Registers used:
 14773 ;;		wreg
 14774 ;; Tracked objects:
 14775 ;;		On entry : 0/0
 14776 ;;		On exit  : 0/0
 14777 ;;		Unchanged: 0/0
 14778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14783 ;;Total ram usage:        2 bytes
 14784 ;; Hardware stack levels used:    1
 14785 ;; Hardware stack levels required when called:    5
 14786 ;; This function calls:
 14787 ;;		Nothing
 14788 ;; This function is called by:
 14789 ;;		_setRFSW_Control
 14790 ;;		_setRFSW_AdjControl
 14791 ;;		_setRFSW_Status
 14792 ;; This function uses a non-reentrant model
 14793 ;;
 14794                           
 14795                           
 14796                           ;psect for function _RfSWPointSelect
 14797  1ECA                     _RfSWPointSelect:	
 14798                           
 14799                           ;incstack = 0
 14800                           ; Regs used in _RfSWPointSelect: [wreg]
 14801                           ;RfSWPointSelect@sw stored from wreg
 14802  1ECA  0020               	movlb	0	; select bank0
 14803  1ECB  00A1               	movwf	RfSWPointSelect@sw
 14804                           
 14805                           ;RF_Control_B1.c: 314: if (sw == 1) {
 14806  1ECC  0821               	movf	RfSWPointSelect@sw,w
 14807  1ECD  3A01               	xorlw	1
 14808  1ECE  1D03               	skipz
 14809  1ECF  0008               	return
 14810                           
 14811                           ;RF_Control_B1.c: 315: RFSW = &RFSW1;
 14812  1ED0  30EE               	movlw	_RFSW1& (0+255)
 14813  1ED1  00A0               	movwf	??_RfSWPointSelect
 14814  1ED2  0820               	movf	??_RfSWPointSelect,w
 14815  1ED3  00FA               	movwf	_RFSW
 14816  1ED4  0008               	return
 14817  1ED5                     __end_of_RfSWPointSelect:	
 14818                           
 14819                           	psect	text100
 14820  1FAF                     __ptext100:	
 14821 ;; *************** function _setDimmerLights_Trigger *****************
 14822 ;; Defined at:
 14823 ;;		line 705 in file "../src/Dimmer_B1.c"
 14824 ;; Parameters:    Size  Location     Type
 14825 ;;  lights          1    wreg     unsigned char 
 14826 ;;  command         1    2[BANK0 ] unsigned char 
 14827 ;; Auto vars:     Size  Location     Type
 14828 ;;  lights          1    3[BANK0 ] unsigned char 
 14829 ;; Return value:  Size  Location     Type
 14830 ;;		None               void
 14831 ;; Registers used:
 14832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14833 ;; Tracked objects:
 14834 ;;		On entry : 0/0
 14835 ;;		On exit  : 0/0
 14836 ;;		Unchanged: 0/0
 14837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14838 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14839 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14841 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14842 ;;Total ram usage:        2 bytes
 14843 ;; Hardware stack levels used:    1
 14844 ;; Hardware stack levels required when called:    6
 14845 ;; This function calls:
 14846 ;;		_DimmerLightsPointSelect
 14847 ;; This function is called by:
 14848 ;;		_DlyOff_Main
 14849 ;;		_setRFSW_Control
 14850 ;;		_Sw_DimmerOnFunc
 14851 ;;		_Sw_DimmerOffFunc
 14852 ;; This function uses a non-reentrant model
 14853 ;;
 14854                           
 14855                           
 14856                           ;psect for function _setDimmerLights_Trigger
 14857  1FAF                     _setDimmerLights_Trigger:	
 14858                           
 14859                           ;incstack = 0
 14860                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14861                           ;setDimmerLights_Trigger@lights stored from wreg
 14862  1FAF  0020               	movlb	0	; select bank0
 14863  1FB0  00A3               	movwf	setDimmerLights_Trigger@lights
 14864                           
 14865                           ;Dimmer_B1.c: 707: DimmerLightsPointSelect(lights);
 14866  1FB1  0823               	movf	setDimmerLights_Trigger@lights,w
 14867  1FB2  319E  26BF         	fcall	_DimmerLightsPointSelect
 14868                           
 14869                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = command;
 14870  1FB4  0020               	movlb	0	; select bank0
 14871  1FB5  086D               	movf	_DimmerLights,w
 14872  1FB6  3E08               	addlw	8
 14873  1FB7  0086               	movwf	6
 14874  1FB8  3001               	movlw	1	; select bank2/3
 14875  1FB9  0087               	movwf	7
 14876  1FBA  0822               	movf	setDimmerLights_Trigger@command,w
 14877  1FBB  1101               	bcf	1,2
 14878  1FBC  1D03               	skipz
 14879  1FBD  1501               	bsf	1,2
 14880  1FBE  0008               	return
 14881  1FBF                     __end_of_setDimmerLights_Trigger:	
 14882                           
 14883                           	psect	text101
 14884  1F9F                     __ptext101:	
 14885 ;; *************** function _setDimmerLights_Switch *****************
 14886 ;; Defined at:
 14887 ;;		line 693 in file "../src/Dimmer_B1.c"
 14888 ;; Parameters:    Size  Location     Type
 14889 ;;  lights          1    wreg     unsigned char 
 14890 ;;  command         1    2[BANK0 ] unsigned char 
 14891 ;; Auto vars:     Size  Location     Type
 14892 ;;  lights          1    3[BANK0 ] unsigned char 
 14893 ;; Return value:  Size  Location     Type
 14894 ;;		None               void
 14895 ;; Registers used:
 14896 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14897 ;; Tracked objects:
 14898 ;;		On entry : 0/0
 14899 ;;		On exit  : 0/0
 14900 ;;		Unchanged: 0/0
 14901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14902 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14905 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14906 ;;Total ram usage:        2 bytes
 14907 ;; Hardware stack levels used:    1
 14908 ;; Hardware stack levels required when called:    6
 14909 ;; This function calls:
 14910 ;;		_DimmerLightsPointSelect
 14911 ;; This function is called by:
 14912 ;;		_DlyOff_Main
 14913 ;;		_setRFSW_Control
 14914 ;;		_Sw_DimmerOnFunc
 14915 ;;		_Sw_DimmerOffFunc
 14916 ;; This function uses a non-reentrant model
 14917 ;;
 14918                           
 14919                           
 14920                           ;psect for function _setDimmerLights_Switch
 14921  1F9F                     _setDimmerLights_Switch:	
 14922                           
 14923                           ;incstack = 0
 14924                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14925                           ;setDimmerLights_Switch@lights stored from wreg
 14926  1F9F  0020               	movlb	0	; select bank0
 14927  1FA0  00A3               	movwf	setDimmerLights_Switch@lights
 14928                           
 14929                           ;Dimmer_B1.c: 695: DimmerLightsPointSelect(lights);
 14930  1FA1  0823               	movf	setDimmerLights_Switch@lights,w
 14931  1FA2  319E  26BF         	fcall	_DimmerLightsPointSelect
 14932                           
 14933                           ;Dimmer_B1.c: 696: DimmerLights->Switch = command;
 14934  1FA4  0020               	movlb	0	; select bank0
 14935  1FA5  086D               	movf	_DimmerLights,w
 14936  1FA6  3E08               	addlw	8
 14937  1FA7  0086               	movwf	6
 14938  1FA8  3001               	movlw	1	; select bank2/3
 14939  1FA9  0087               	movwf	7
 14940  1FAA  0822               	movf	setDimmerLights_Switch@command,w
 14941  1FAB  1081               	bcf	1,1
 14942  1FAC  1D03               	skipz
 14943  1FAD  1481               	bsf	1,1
 14944  1FAE  0008               	return
 14945  1FAF                     __end_of_setDimmerLights_Switch:	
 14946                           
 14947                           	psect	text102
 14948  1EBF                     __ptext102:	
 14949 ;; *************** function _DimmerLightsPointSelect *****************
 14950 ;; Defined at:
 14951 ;;		line 315 in file "../src/Dimmer_B1.c"
 14952 ;; Parameters:    Size  Location     Type
 14953 ;;  lights          1    wreg     unsigned char 
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;  lights          1    1[BANK0 ] unsigned char 
 14956 ;; Return value:  Size  Location     Type
 14957 ;;		None               void
 14958 ;; Registers used:
 14959 ;;		wreg
 14960 ;; Tracked objects:
 14961 ;;		On entry : 0/0
 14962 ;;		On exit  : 0/0
 14963 ;;		Unchanged: 0/0
 14964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14968 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14969 ;;Total ram usage:        2 bytes
 14970 ;; Hardware stack levels used:    1
 14971 ;; Hardware stack levels required when called:    5
 14972 ;; This function calls:
 14973 ;;		Nothing
 14974 ;; This function is called by:
 14975 ;;		_setDimmerLights_Initialization
 14976 ;;		_setDimmerLights_Main
 14977 ;;		_setDimmerLights_ERROR
 14978 ;;		_setDimmerLights_TriggerERROR
 14979 ;;		_setDimmerLights
 14980 ;;		_setDimmerLights_Adj
 14981 ;;		_setDimmerLights_AdjRF
 14982 ;;		_setDimmerLights_Switch
 14983 ;;		_setDimmerLights_AdjGo
 14984 ;;		_setDimmerLights_Trigger
 14985 ;;		_setDimmerLights_TriggerAdj
 14986 ;;		_setDimmerLights_GO
 14987 ;;		_setDimmerLights_MaxmumValue
 14988 ;;		_setDimmerLights_Clear
 14989 ;; This function uses a non-reentrant model
 14990 ;;
 14991                           
 14992                           
 14993                           ;psect for function _DimmerLightsPointSelect
 14994  1EBF                     _DimmerLightsPointSelect:	
 14995                           
 14996                           ;incstack = 0
 14997                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 14998                           ;DimmerLightsPointSelect@lights stored from wreg
 14999  1EBF  0020               	movlb	0	; select bank0
 15000  1EC0  00A1               	movwf	DimmerLightsPointSelect@lights
 15001                           
 15002                           ;Dimmer_B1.c: 317: if (lights == 1) {
 15003  1EC1  0821               	movf	DimmerLightsPointSelect@lights,w
 15004  1EC2  3A01               	xorlw	1
 15005  1EC3  1D03               	skipz
 15006  1EC4  0008               	return
 15007                           
 15008                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights1;
 15009  1EC5  30C0               	movlw	_DimmerLights1& (0+255)
 15010  1EC6  00A0               	movwf	??_DimmerLightsPointSelect
 15011  1EC7  0820               	movf	??_DimmerLightsPointSelect,w
 15012  1EC8  00ED               	movwf	_DimmerLights
 15013  1EC9  0008               	return
 15014  1ECA                     __end_of_DimmerLightsPointSelect:	
 15015                           
 15016                           	psect	text103
 15017  0939                     __ptext103:	
 15018 ;; *************** function _setBuz *****************
 15019 ;; Defined at:
 15020 ;;		line 22 in file "../src/Buzzer_B1.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;  count           1    wreg     unsigned char 
 15023 ;;  time            2    9[BANK0 ] int 
 15024 ;; Auto vars:     Size  Location     Type
 15025 ;;  count           1   12[BANK0 ] unsigned char 
 15026 ;; Return value:  Size  Location     Type
 15027 ;;		None               void
 15028 ;; Registers used:
 15029 ;;		wreg, status,2, status,0, pclath, cstack
 15030 ;; Tracked objects:
 15031 ;;		On entry : 0/0
 15032 ;;		On exit  : 0/0
 15033 ;;		Unchanged: 0/0
 15034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15035 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;Total ram usage:        4 bytes
 15040 ;; Hardware stack levels used:    1
 15041 ;; Hardware stack levels required when called:    6
 15042 ;; This function calls:
 15043 ;;		___awdiv
 15044 ;; This function is called by:
 15045 ;;		_DlyOff_Main
 15046 ;;		_setDimmerLights_Main
 15047 ;;		_DimmerLights_Exceptions
 15048 ;;		_setOverTemp_Exceptions
 15049 ;;		_setLog_Code
 15050 ;;		_setControl_Lights_Table
 15051 ;;		_setRFSW_Control
 15052 ;;		_setSw_Main
 15053 ;;		_Sw_DimmerOnFunc
 15054 ;;		_my_Main
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           
 15059                           ;psect for function _setBuz
 15060  0939                     _setBuz:	
 15061                           
 15062                           ;incstack = 0
 15063                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15064                           ;setBuz@count stored from wreg
 15065  0939  0020               	movlb	0	; select bank0
 15066  093A  00AC               	movwf	setBuz@count
 15067                           
 15068                           ;Buzzer_B1.c: 23: time /= 10;
 15069  093B  300A               	movlw	10
 15070  093C  00A0               	movwf	___awdiv@divisor
 15071  093D  3000               	movlw	0
 15072  093E  00A1               	movwf	___awdiv@divisor+1
 15073  093F  082A               	movf	setBuz@time+1,w
 15074  0940  01A3               	clrf	___awdiv@dividend+1
 15075  0941  07A3               	addwf	___awdiv@dividend+1,f
 15076  0942  0829               	movf	setBuz@time,w
 15077  0943  01A2               	clrf	___awdiv@dividend
 15078  0944  07A2               	addwf	___awdiv@dividend,f
 15079  0945  3188  2039  3189   	fcall	___awdiv
 15080  0948  0020               	movlb	0	; select bank0
 15081  0949  0821               	movf	?___awdiv+1,w
 15082  094A  01AA               	clrf	setBuz@time+1
 15083  094B  07AA               	addwf	setBuz@time+1,f
 15084  094C  0820               	movf	?___awdiv,w
 15085  094D  01A9               	clrf	setBuz@time
 15086  094E  07A9               	addwf	setBuz@time,f
 15087                           
 15088                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15089  094F  0021               	movlb	1	; select bank1
 15090  0950  1C32               	btfss	_Buz1^(0+128),0
 15091  0951  0008               	return
 15092                           
 15093                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15094  0952  18B2               	btfsc	_Buz1^(0+128),1
 15095  0953  296A               	goto	l90
 15096                           
 15097                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15098  0954  14B2               	bsf	_Buz1^(0+128),1
 15099                           
 15100                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15101  0955  01B3               	clrf	(_Buz1^(0+128)+1)
 15102  0956  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15103                           
 15104                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15105  0957  0020               	movlb	0	; select bank0
 15106  0958  082C               	movf	setBuz@count,w
 15107  0959  00AB               	movwf	??_setBuz
 15108  095A  082B               	movf	??_setBuz,w
 15109  095B  0021               	movlb	1	; select bank1
 15110  095C  00B5               	movwf	(_Buz1^(0+128)+3)
 15111                           
 15112                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15113  095D  0020               	movlb	0	; select bank0
 15114  095E  082A               	movf	setBuz@time+1,w
 15115  095F  0021               	movlb	1	; select bank1
 15116  0960  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15117  0961  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15118  0962  0020               	movlb	0	; select bank0
 15119  0963  0829               	movf	setBuz@time,w
 15120  0964  0021               	movlb	1	; select bank1
 15121  0965  01B8               	clrf	(_Buz1^(0+128)+6)
 15122  0966  07B8               	addwf	(_Buz1^(0+128)+6),f
 15123                           
 15124                           ;Buzzer_B1.c: 30: RB3 = 1;
 15125  0967  0020               	movlb	0	; select bank0
 15126  0968  158D               	bsf	13,3	;volatile
 15127                           
 15128                           ;Buzzer_B1.c: 31: } else {
 15129  0969  0008               	return
 15130  096A                     l90:	
 15131                           
 15132                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15133  096A  19B2               	btfsc	_Buz1^(0+128),3
 15134  096B  297E               	goto	l92
 15135                           
 15136                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15137  096C  15B2               	bsf	_Buz1^(0+128),3
 15138                           
 15139                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15140  096D  0020               	movlb	0	; select bank0
 15141  096E  082C               	movf	setBuz@count,w
 15142  096F  00AB               	movwf	??_setBuz
 15143  0970  082B               	movf	??_setBuz,w
 15144  0971  0021               	movlb	1	; select bank1
 15145  0972  00B6               	movwf	(_Buz1^(0+128)+4)
 15146                           
 15147                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15148  0973  0020               	movlb	0	; select bank0
 15149  0974  082A               	movf	setBuz@time+1,w
 15150  0975  0021               	movlb	1	; select bank1
 15151  0976  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15152  0977  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15153  0978  0020               	movlb	0	; select bank0
 15154  0979  0829               	movf	setBuz@time,w
 15155  097A  0021               	movlb	1	; select bank1
 15156  097B  01BA               	clrf	(_Buz1^(0+128)+8)
 15157  097C  07BA               	addwf	(_Buz1^(0+128)+8),f
 15158                           
 15159                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15160  097D  0008               	return
 15161  097E                     l92:	
 15162  097E  1A32               	btfsc	_Buz1^(0+128),4
 15163  097F  0008               	return
 15164                           
 15165                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15166  0980  1632               	bsf	_Buz1^(0+128),4
 15167                           
 15168                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15169  0981  0020               	movlb	0	; select bank0
 15170  0982  082C               	movf	setBuz@count,w
 15171  0983  00AB               	movwf	??_setBuz
 15172  0984  082B               	movf	??_setBuz,w
 15173  0985  0021               	movlb	1	; select bank1
 15174  0986  00B7               	movwf	(_Buz1^(0+128)+5)
 15175                           
 15176                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15177  0987  0020               	movlb	0	; select bank0
 15178  0988  082A               	movf	setBuz@time+1,w
 15179  0989  0021               	movlb	1	; select bank1
 15180  098A  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15181  098B  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15182  098C  0020               	movlb	0	; select bank0
 15183  098D  0829               	movf	setBuz@time,w
 15184  098E  0021               	movlb	1	; select bank1
 15185  098F  01BC               	clrf	(_Buz1^(0+128)+10)
 15186  0990  07BC               	addwf	(_Buz1^(0+128)+10),f
 15187  0991  0008               	return
 15188  0992                     __end_of_setBuz:	
 15189                           
 15190                           	psect	text104
 15191  0839                     __ptext104:	
 15192 ;; *************** function ___awdiv *****************
 15193 ;; Defined at:
 15194 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;  divisor         2    0[BANK0 ] int 
 15197 ;;  dividend        2    2[BANK0 ] int 
 15198 ;; Auto vars:     Size  Location     Type
 15199 ;;  quotient        2    7[BANK0 ] int 
 15200 ;;  sign            1    6[BANK0 ] unsigned char 
 15201 ;;  counter         1    5[BANK0 ] unsigned char 
 15202 ;; Return value:  Size  Location     Type
 15203 ;;                  2    0[BANK0 ] int 
 15204 ;; Registers used:
 15205 ;;		wreg, status,2, status,0
 15206 ;; Tracked objects:
 15207 ;;		On entry : 0/0
 15208 ;;		On exit  : 0/0
 15209 ;;		Unchanged: 0/0
 15210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15212 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15214 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15215 ;;Total ram usage:        9 bytes
 15216 ;; Hardware stack levels used:    1
 15217 ;; Hardware stack levels required when called:    5
 15218 ;; This function calls:
 15219 ;;		Nothing
 15220 ;; This function is called by:
 15221 ;;		_setBuz
 15222 ;; This function uses a non-reentrant model
 15223 ;;
 15224                           
 15225                           
 15226                           ;psect for function ___awdiv
 15227  0839                     ___awdiv:	
 15228                           
 15229                           ;incstack = 0
 15230                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15231  0839  0020               	movlb	0	; select bank0
 15232  083A  01A6               	clrf	___awdiv@sign
 15233  083B  1FA1               	btfss	___awdiv@divisor+1,7
 15234  083C  2844               	goto	l5519
 15235  083D  09A0               	comf	___awdiv@divisor,f
 15236  083E  09A1               	comf	___awdiv@divisor+1,f
 15237  083F  0AA0               	incf	___awdiv@divisor,f
 15238  0840  1903               	skipnz
 15239  0841  0AA1               	incf	___awdiv@divisor+1,f
 15240  0842  01A6               	clrf	___awdiv@sign
 15241  0843  0AA6               	incf	___awdiv@sign,f
 15242  0844                     l5519:	
 15243  0844  1FA3               	btfss	___awdiv@dividend+1,7
 15244  0845  284F               	goto	l5525
 15245  0846  09A2               	comf	___awdiv@dividend,f
 15246  0847  09A3               	comf	___awdiv@dividend+1,f
 15247  0848  0AA2               	incf	___awdiv@dividend,f
 15248  0849  1903               	skipnz
 15249  084A  0AA3               	incf	___awdiv@dividend+1,f
 15250  084B  3001               	movlw	1
 15251  084C  00A4               	movwf	??___awdiv
 15252  084D  0824               	movf	??___awdiv,w
 15253  084E  06A6               	xorwf	___awdiv@sign,f
 15254  084F                     l5525:	
 15255  084F  01A7               	clrf	___awdiv@quotient
 15256  0850  01A8               	clrf	___awdiv@quotient+1
 15257  0851  0821               	movf	___awdiv@divisor+1,w
 15258  0852  0420               	iorwf	___awdiv@divisor,w
 15259  0853  1903               	skipnz
 15260  0854  287E               	goto	l5547
 15261  0855  01A5               	clrf	___awdiv@counter
 15262  0856  0AA5               	incf	___awdiv@counter,f
 15263  0857                     l5535:	
 15264  0857  1BA1               	btfsc	___awdiv@divisor+1,7
 15265  0858  2863               	goto	l5537
 15266  0859  3001               	movlw	1
 15267  085A                     u4255:	
 15268  085A  35A0               	lslf	___awdiv@divisor,f
 15269  085B  0DA1               	rlf	___awdiv@divisor+1,f
 15270  085C  0B89               	decfsz	9,f
 15271  085D  285A               	goto	u4255
 15272  085E  3001               	movlw	1
 15273  085F  00A4               	movwf	??___awdiv
 15274  0860  0824               	movf	??___awdiv,w
 15275  0861  07A5               	addwf	___awdiv@counter,f
 15276  0862  2857               	goto	l5535
 15277  0863                     l5537:	
 15278  0863  3001               	movlw	1
 15279  0864                     u4275:	
 15280  0864  35A7               	lslf	___awdiv@quotient,f
 15281  0865  0DA8               	rlf	___awdiv@quotient+1,f
 15282  0866  0B89               	decfsz	9,f
 15283  0867  2864               	goto	u4275
 15284  0868  0821               	movf	___awdiv@divisor+1,w
 15285  0869  0223               	subwf	___awdiv@dividend+1,w
 15286  086A  1D03               	skipz
 15287  086B  286E               	goto	u4285
 15288  086C  0820               	movf	___awdiv@divisor,w
 15289  086D  0222               	subwf	___awdiv@dividend,w
 15290  086E                     u4285:	
 15291  086E  1C03               	skipc
 15292  086F  2875               	goto	l5543
 15293  0870  0820               	movf	___awdiv@divisor,w
 15294  0871  02A2               	subwf	___awdiv@dividend,f
 15295  0872  0821               	movf	___awdiv@divisor+1,w
 15296  0873  3BA3               	subwfb	___awdiv@dividend+1,f
 15297  0874  1427               	bsf	___awdiv@quotient,0
 15298  0875                     l5543:	
 15299  0875  3001               	movlw	1
 15300  0876                     u4295:	
 15301  0876  36A1               	lsrf	___awdiv@divisor+1,f
 15302  0877  0CA0               	rrf	___awdiv@divisor,f
 15303  0878  0B89               	decfsz	9,f
 15304  0879  2876               	goto	u4295
 15305  087A  3001               	movlw	1
 15306  087B  02A5               	subwf	___awdiv@counter,f
 15307  087C  1D03               	btfss	3,2
 15308  087D  2863               	goto	l5537
 15309  087E                     l5547:	
 15310  087E  0826               	movf	___awdiv@sign,w
 15311  087F  1903               	btfsc	3,2
 15312  0880  2886               	goto	l5551
 15313  0881  09A7               	comf	___awdiv@quotient,f
 15314  0882  09A8               	comf	___awdiv@quotient+1,f
 15315  0883  0AA7               	incf	___awdiv@quotient,f
 15316  0884  1903               	skipnz
 15317  0885  0AA8               	incf	___awdiv@quotient+1,f
 15318  0886                     l5551:	
 15319  0886  0828               	movf	___awdiv@quotient+1,w
 15320  0887  01A1               	clrf	?___awdiv+1
 15321  0888  07A1               	addwf	?___awdiv+1,f
 15322  0889  0827               	movf	___awdiv@quotient,w
 15323  088A  01A0               	clrf	?___awdiv
 15324  088B  07A0               	addwf	?___awdiv,f
 15325  088C  0008               	return
 15326  088D                     __end_of___awdiv:	
 15327                           
 15328                           	psect	text105
 15329  1E13                     __ptext105:	
 15330 ;; *************** function _DelayOff_Initialization *****************
 15331 ;; Defined at:
 15332 ;;		line 26 in file "../src/DelayOff_B1.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;		None
 15335 ;; Auto vars:     Size  Location     Type
 15336 ;;		None
 15337 ;; Return value:  Size  Location     Type
 15338 ;;		None               void
 15339 ;; Registers used:
 15340 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15341 ;; Tracked objects:
 15342 ;;		On entry : 0/0
 15343 ;;		On exit  : 0/0
 15344 ;;		Unchanged: 0/0
 15345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;Total ram usage:        0 bytes
 15351 ;; Hardware stack levels used:    1
 15352 ;; Hardware stack levels required when called:    7
 15353 ;; This function calls:
 15354 ;;		_DlyOff_Initialization
 15355 ;; This function is called by:
 15356 ;;		_main
 15357 ;; This function uses a non-reentrant model
 15358 ;;
 15359                           
 15360                           
 15361                           ;psect for function _DelayOff_Initialization
 15362  1E13                     _DelayOff_Initialization:	
 15363                           
 15364                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15365                           
 15366                           ;incstack = 0
 15367                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15368  1E13  3001               	movlw	1
 15369  1E14  319E  26B4         	fcall	_DlyOff_Initialization
 15370  1E16  0008               	return
 15371  1E17                     __end_of_DelayOff_Initialization:	
 15372                           
 15373                           	psect	text106
 15374  1EB4                     __ptext106:	
 15375 ;; *************** function _DlyOff_Initialization *****************
 15376 ;; Defined at:
 15377 ;;		line 56 in file "../src/DelayOff_B1.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  sw              1    wreg     unsigned char 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  sw              1    2[BANK0 ] unsigned char 
 15382 ;; Return value:  Size  Location     Type
 15383 ;;		None               void
 15384 ;; Registers used:
 15385 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15386 ;; Tracked objects:
 15387 ;;		On entry : 0/0
 15388 ;;		On exit  : 0/0
 15389 ;;		Unchanged: 0/0
 15390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;Total ram usage:        1 bytes
 15396 ;; Hardware stack levels used:    1
 15397 ;; Hardware stack levels required when called:    6
 15398 ;; This function calls:
 15399 ;;		_DelayOffPointSelect
 15400 ;; This function is called by:
 15401 ;;		_DelayOff_Initialization
 15402 ;; This function uses a non-reentrant model
 15403 ;;
 15404                           
 15405                           
 15406                           ;psect for function _DlyOff_Initialization
 15407  1EB4                     _DlyOff_Initialization:	
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15411                           ;DlyOff_Initialization@sw stored from wreg
 15412  1EB4  0020               	movlb	0	; select bank0
 15413  1EB5  00A2               	movwf	DlyOff_Initialization@sw
 15414                           
 15415                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15416  1EB6  0822               	movf	DlyOff_Initialization@sw,w
 15417  1EB7  319E  26A9         	fcall	_DelayOffPointSelect
 15418                           
 15419                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15420  1EB9  0878               	movf	_DelayOff,w
 15421  1EBA  0086               	movwf	6
 15422  1EBB  3001               	movlw	1	; select bank2/3
 15423  1EBC  0087               	movwf	7
 15424  1EBD  1401               	bsf	1,0
 15425  1EBE  0008               	return
 15426  1EBF                     __end_of_DlyOff_Initialization:	
 15427                           
 15428                           	psect	text107
 15429  1EA9                     __ptext107:	
 15430 ;; *************** function _DelayOffPointSelect *****************
 15431 ;; Defined at:
 15432 ;;		line 7 in file "../src/DelayOff_B1.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;  sw              1    wreg     unsigned char 
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  sw              1    1[BANK0 ] unsigned char 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;		None               void
 15439 ;; Registers used:
 15440 ;;		wreg
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        2 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    5
 15453 ;; This function calls:
 15454 ;;		Nothing
 15455 ;; This function is called by:
 15456 ;;		_DlyOff_Initialization
 15457 ;;		_DlyOff_Main
 15458 ;;		_setDelayOff_GO
 15459 ;; This function uses a non-reentrant model
 15460 ;;
 15461                           
 15462                           
 15463                           ;psect for function _DelayOffPointSelect
 15464  1EA9                     _DelayOffPointSelect:	
 15465                           
 15466                           ;incstack = 0
 15467                           ; Regs used in _DelayOffPointSelect: [wreg]
 15468                           ;DelayOffPointSelect@sw stored from wreg
 15469  1EA9  0020               	movlb	0	; select bank0
 15470  1EAA  00A1               	movwf	DelayOffPointSelect@sw
 15471                           
 15472                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15473  1EAB  0821               	movf	DelayOffPointSelect@sw,w
 15474  1EAC  3A01               	xorlw	1
 15475  1EAD  1D03               	skipz
 15476  1EAE  0008               	return
 15477                           
 15478                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15479  1EAF  3062               	movlw	_DlySw1& (0+255)
 15480  1EB0  00A0               	movwf	??_DelayOffPointSelect
 15481  1EB1  0820               	movf	??_DelayOffPointSelect,w
 15482  1EB2  00F8               	movwf	_DelayOff
 15483  1EB3  0008               	return
 15484  1EB4                     __end_of_DelayOffPointSelect:	
 15485                           
 15486                           	psect	text108
 15487  10C0                     __ptext108:	
 15488 ;; *************** function _CC2500_PowerOnInitial *****************
 15489 ;; Defined at:
 15490 ;;		line 115 in file "../src/CC2500_B1.c"
 15491 ;; Parameters:    Size  Location     Type
 15492 ;;		None
 15493 ;; Auto vars:     Size  Location     Type
 15494 ;;		None
 15495 ;; Return value:  Size  Location     Type
 15496 ;;		None               void
 15497 ;; Registers used:
 15498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15499 ;; Tracked objects:
 15500 ;;		On entry : 0/0
 15501 ;;		On exit  : 0/0
 15502 ;;		Unchanged: 0/0
 15503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15508 ;;Total ram usage:        0 bytes
 15509 ;; Hardware stack levels used:    1
 15510 ;; Hardware stack levels required when called:    8
 15511 ;; This function calls:
 15512 ;;		_CC2500_ClearRXFIFO
 15513 ;;		_CC2500_ClearTXFIFO
 15514 ;;		_CC2500_FrequencyCabr
 15515 ;;		_CC2500_InitPATable
 15516 ;;		_CC2500_InitSetREG
 15517 ;;		_CC2500_PowerRST
 15518 ;;		_CC2500_SIDLEMode
 15519 ;; This function is called by:
 15520 ;;		_main
 15521 ;; This function uses a non-reentrant model
 15522 ;;
 15523                           
 15524                           
 15525                           ;psect for function _CC2500_PowerOnInitial
 15526  10C0                     _CC2500_PowerOnInitial:	
 15527                           
 15528                           ;CC2500_B1.c: 116: CC2500_PowerRST();
 15529                           
 15530                           ;incstack = 0
 15531                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15532  10C0  3195  257E  3190   	fcall	_CC2500_PowerRST
 15533                           
 15534                           ;CC2500_B1.c: 117: CC2500_InitSetREG();
 15535  10C3  3193  231D  3190   	fcall	_CC2500_InitSetREG
 15536                           
 15537                           ;CC2500_B1.c: 118: CC2500_InitPATable();
 15538  10C6  3191  2185  3190   	fcall	_CC2500_InitPATable
 15539                           
 15540                           ;CC2500_B1.c: 119: CC2500_ClearTXFIFO();
 15541  10C9  319E  260B  3190   	fcall	_CC2500_ClearTXFIFO
 15542                           
 15543                           ;CC2500_B1.c: 120: CC2500_ClearRXFIFO();
 15544  10CC  319E  2607  3190   	fcall	_CC2500_ClearRXFIFO
 15545                           
 15546                           ;CC2500_B1.c: 121: CC2500_FrequencyCabr();
 15547  10CF  319E  26E0  3190   	fcall	_CC2500_FrequencyCabr
 15548                           
 15549                           ;CC2500_B1.c: 122: CC2500_SIDLEMode();
 15550  10D2  319E  260F         	fcall	_CC2500_SIDLEMode
 15551  10D4  0008               	return
 15552  10D5                     __end_of_CC2500_PowerOnInitial:	
 15553                           
 15554                           	psect	text109
 15555  1E0F                     __ptext109:	
 15556 ;; *************** function _CC2500_SIDLEMode *****************
 15557 ;; Defined at:
 15558 ;;		line 205 in file "../src/CC2500_B1.c"
 15559 ;; Parameters:    Size  Location     Type
 15560 ;;		None
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;		None
 15563 ;; Return value:  Size  Location     Type
 15564 ;;		None               void
 15565 ;; Registers used:
 15566 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;Total ram usage:        0 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:    7
 15579 ;; This function calls:
 15580 ;;		_CC2500_WriteCommand
 15581 ;; This function is called by:
 15582 ;;		_CC2500_PowerOnInitial
 15583 ;; This function uses a non-reentrant model
 15584 ;;
 15585                           
 15586                           
 15587                           ;psect for function _CC2500_SIDLEMode
 15588  1E0F                     _CC2500_SIDLEMode:	
 15589                           
 15590                           ;CC2500_B1.c: 206: CC2500_WriteCommand(0x36);
 15591                           
 15592                           ;incstack = 0
 15593                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15594  1E0F  3036               	movlw	54
 15595  1E10  3191  211A         	fcall	_CC2500_WriteCommand
 15596  1E12  0008               	return
 15597  1E13                     __end_of_CC2500_SIDLEMode:	
 15598                           
 15599                           	psect	text110
 15600  157E                     __ptext110:	
 15601 ;; *************** function _CC2500_PowerRST *****************
 15602 ;; Defined at:
 15603 ;;		line 128 in file "../src/CC2500_B1.c"
 15604 ;; Parameters:    Size  Location     Type
 15605 ;;		None
 15606 ;; Auto vars:     Size  Location     Type
 15607 ;;		None
 15608 ;; Return value:  Size  Location     Type
 15609 ;;		None               void
 15610 ;; Registers used:
 15611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15612 ;; Tracked objects:
 15613 ;;		On entry : 0/0
 15614 ;;		On exit  : 0/0
 15615 ;;		Unchanged: 0/0
 15616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15620 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15621 ;;Total ram usage:        1 bytes
 15622 ;; Hardware stack levels used:    1
 15623 ;; Hardware stack levels required when called:    6
 15624 ;; This function calls:
 15625 ;;		_CC2500_WriteByte
 15626 ;;		_DelayTime_1us
 15627 ;;		_Timeout_Counter
 15628 ;;		_set_TimeoutCleared
 15629 ;; This function is called by:
 15630 ;;		_CC2500_PowerOnInitial
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           
 15635                           ;psect for function _CC2500_PowerRST
 15636  157E                     _CC2500_PowerRST:	
 15637                           
 15638                           ;CC2500_B1.c: 129: RC1 = 0;
 15639                           
 15640                           ;incstack = 0
 15641                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15642  157E  0020               	movlb	0	; select bank0
 15643  157F  108E               	bcf	14,1	;volatile
 15644                           
 15645                           ;CC2500_B1.c: 130: RC0 = 0;
 15646  1580  100E               	bcf	14,0	;volatile
 15647                           
 15648                           ;CC2500_B1.c: 131: RC4 = 1;
 15649  1581  160E               	bsf	14,4	;volatile
 15650                           
 15651                           ;CC2500_B1.c: 132: DelayTime_1us(10);
 15652  1582  300A               	movlw	10
 15653  1583  00A0               	movwf	DelayTime_1us@count
 15654  1584  3000               	movlw	0
 15655  1585  00A1               	movwf	DelayTime_1us@count+1
 15656  1586  3192  22D0  3195   	fcall	_DelayTime_1us
 15657                           
 15658                           ;CC2500_B1.c: 133: RC4 = 0;
 15659  1589  0020               	movlb	0	; select bank0
 15660  158A  120E               	bcf	14,4	;volatile
 15661                           
 15662                           ;CC2500_B1.c: 134: DelayTime_1us(10);
 15663  158B  300A               	movlw	10
 15664  158C  00A0               	movwf	DelayTime_1us@count
 15665  158D  3000               	movlw	0
 15666  158E  00A1               	movwf	DelayTime_1us@count+1
 15667  158F  3192  22D0  3195   	fcall	_DelayTime_1us
 15668                           
 15669                           ;CC2500_B1.c: 135: RC4 = 1;
 15670  1592  0020               	movlb	0	; select bank0
 15671  1593  160E               	bsf	14,4	;volatile
 15672                           
 15673                           ;CC2500_B1.c: 136: DelayTime_1us(40);
 15674  1594  3028               	movlw	40
 15675  1595  00A0               	movwf	DelayTime_1us@count
 15676  1596  3000               	movlw	0
 15677  1597  00A1               	movwf	DelayTime_1us@count+1
 15678  1598  3192  22D0  3195   	fcall	_DelayTime_1us
 15679                           
 15680                           ;CC2500_B1.c: 137: RC4 = 0;
 15681  159B  0020               	movlb	0	; select bank0
 15682  159C  120E               	bcf	14,4	;volatile
 15683                           
 15684                           ;CC2500_B1.c: 138: SPI0Buffer = 0x30;
 15685  159D  3030               	movlw	48
 15686  159E  00A6               	movwf	??_CC2500_PowerRST
 15687  159F  0826               	movf	??_CC2500_PowerRST,w
 15688  15A0  00FB               	movwf	_SPI0Buffer
 15689                           
 15690                           ;CC2500_B1.c: 139: while (RC2 == 1 && myMain.Timeout == 0) {
 15691  15A1  2DA5               	goto	l6433
 15692  15A2                     l6431:	
 15693                           
 15694                           ;CC2500_B1.c: 140: Timeout_Counter();
 15695  15A2  3191  2102  3195   	fcall	_Timeout_Counter
 15696  15A5                     l6433:	
 15697  15A5  0020               	movlb	0	; select bank0
 15698  15A6  1D0E               	btfss	14,2	;volatile
 15699  15A7  2DAB               	goto	l6437
 15700  15A8  0021               	movlb	1	; select bank1
 15701  15A9  1D2F               	btfss	(_myMain^(0+128)+15),2
 15702  15AA  2DA2               	goto	l6431
 15703  15AB                     l6437:	
 15704                           
 15705                           ;CC2500_B1.c: 141: };
 15706                           ;CC2500_B1.c: 142: set_TimeoutCleared();
 15707  15AB  319E  262B  3195   	fcall	_set_TimeoutCleared
 15708                           
 15709                           ;CC2500_B1.c: 143: CC2500_WriteByte();
 15710  15AE  3190  2098  3195   	fcall	_CC2500_WriteByte
 15711                           
 15712                           ;CC2500_B1.c: 144: while (RC2 == 1 && myMain.Timeout == 0) {
 15713  15B1  2DB5               	goto	l6443
 15714  15B2                     l6441:	
 15715                           
 15716                           ;CC2500_B1.c: 145: Timeout_Counter();
 15717  15B2  3191  2102  3195   	fcall	_Timeout_Counter
 15718  15B5                     l6443:	
 15719  15B5  0020               	movlb	0	; select bank0
 15720  15B6  1D0E               	btfss	14,2	;volatile
 15721  15B7  2DBB               	goto	l6447
 15722  15B8  0021               	movlb	1	; select bank1
 15723  15B9  1D2F               	btfss	(_myMain^(0+128)+15),2
 15724  15BA  2DB2               	goto	l6441
 15725  15BB                     l6447:	
 15726                           
 15727                           ;CC2500_B1.c: 146: };
 15728                           ;CC2500_B1.c: 147: set_TimeoutCleared();
 15729  15BB  319E  262B         	fcall	_set_TimeoutCleared
 15730                           
 15731                           ;CC2500_B1.c: 148: RC0 = 0;
 15732  15BD  0020               	movlb	0	; select bank0
 15733  15BE  100E               	bcf	14,0	;volatile
 15734                           
 15735                           ;CC2500_B1.c: 149: RC4 = 1;
 15736  15BF  160E               	bsf	14,4	;volatile
 15737  15C0  0008               	return
 15738  15C1                     __end_of_CC2500_PowerRST:	
 15739                           
 15740                           	psect	text111
 15741  131D                     __ptext111:	
 15742 ;; *************** function _CC2500_InitSetREG *****************
 15743 ;; Defined at:
 15744 ;;		line 155 in file "../src/CC2500_B1.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;		None
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15749 ;;  temp2           1    7[BANK0 ] unsigned char 
 15750 ;;  temp1           1    6[BANK0 ] unsigned char 
 15751 ;; Return value:  Size  Location     Type
 15752 ;;		None               void
 15753 ;; Registers used:
 15754 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15755 ;; Tracked objects:
 15756 ;;		On entry : 0/0
 15757 ;;		On exit  : 0/0
 15758 ;;		Unchanged: 0/0
 15759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15763 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15764 ;;Total ram usage:        4 bytes
 15765 ;; Hardware stack levels used:    1
 15766 ;; Hardware stack levels required when called:    7
 15767 ;; This function calls:
 15768 ;;		_CC2500_WriteREG
 15769 ;; This function is called by:
 15770 ;;		_CC2500_PowerOnInitial
 15771 ;; This function uses a non-reentrant model
 15772 ;;
 15773                           
 15774                           
 15775                           ;psect for function _CC2500_InitSetREG
 15776  131D                     _CC2500_InitSetREG:	
 15777                           
 15778                           ;CC2500_B1.c: 156: unsigned char loop_c;
 15779                           ;CC2500_B1.c: 157: unsigned char temp1, temp2;
 15780                           ;CC2500_B1.c: 159: for (loop_c = 0; loop_c < 47; loop_c++) {
 15781                           
 15782                           ;incstack = 0
 15783                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15784  131D  0020               	movlb	0	; select bank0
 15785  131E  01A8               	clrf	CC2500_InitSetREG@loop_c
 15786  131F                     L5:	
 15787  131F  302F               	movlw	47
 15788  1320  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15789  1321  1803               	btfsc	3,0
 15790  1322  0008               	return
 15791                           
 15792                           ;CC2500_B1.c: 160: temp1 = CC2500_registers_address[loop_c];
 15793  1323  0828               	movf	CC2500_InitSetREG@loop_c,w
 15794  1324  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15795  1325  0084               	movwf	4
 15796  1326  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15797  1327  1803               	skipnc
 15798  1328  3E01               	addlw	1
 15799  1329  0085               	movwf	5
 15800  132A  0800               	movf	0,w	;code access
 15801  132B  00A5               	movwf	??_CC2500_InitSetREG
 15802  132C  0825               	movf	??_CC2500_InitSetREG,w
 15803  132D  00A6               	movwf	CC2500_InitSetREG@temp1
 15804                           
 15805                           ;CC2500_B1.c: 161: temp2 = CC2500_rfSettings[loop_c];
 15806  132E  0828               	movf	CC2500_InitSetREG@loop_c,w
 15807  132F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15808  1330  0084               	movwf	4
 15809  1331  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15810  1332  1803               	skipnc
 15811  1333  3E01               	addlw	1
 15812  1334  0085               	movwf	5
 15813  1335  0800               	movf	0,w	;code access
 15814  1336  00A5               	movwf	??_CC2500_InitSetREG
 15815  1337  0825               	movf	??_CC2500_InitSetREG,w
 15816  1338  00A7               	movwf	CC2500_InitSetREG@temp2
 15817                           
 15818                           ;CC2500_B1.c: 163: CC2500_WriteREG(temp1, temp2);
 15819  1339  0827               	movf	CC2500_InitSetREG@temp2,w
 15820  133A  00A5               	movwf	??_CC2500_InitSetREG
 15821  133B  0825               	movf	??_CC2500_InitSetREG,w
 15822  133C  00A2               	movwf	CC2500_WriteREG@value
 15823  133D  0826               	movf	CC2500_InitSetREG@temp1,w
 15824  133E  3192  2203  3193   	fcall	_CC2500_WriteREG
 15825  1341  3001               	movlw	1
 15826  1342  0020               	movlb	0	; select bank0
 15827  1343  00A5               	movwf	??_CC2500_InitSetREG
 15828  1344  0825               	movf	??_CC2500_InitSetREG,w
 15829  1345  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15830  1346  2B1F               	goto	L5
 15831  1347                     __end_of_CC2500_InitSetREG:	
 15832                           
 15833                           	psect	text112
 15834  1185                     __ptext112:	
 15835 ;; *************** function _CC2500_InitPATable *****************
 15836 ;; Defined at:
 15837 ;;		line 170 in file "../src/CC2500_B1.c"
 15838 ;; Parameters:    Size  Location     Type
 15839 ;;		None
 15840 ;; Auto vars:     Size  Location     Type
 15841 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15842 ;;  temp            1    6[BANK0 ] unsigned char 
 15843 ;; Return value:  Size  Location     Type
 15844 ;;		None               void
 15845 ;; Registers used:
 15846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15847 ;; Tracked objects:
 15848 ;;		On entry : 0/0
 15849 ;;		On exit  : 0/0
 15850 ;;		Unchanged: 0/0
 15851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15854 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;Total ram usage:        3 bytes
 15857 ;; Hardware stack levels used:    1
 15858 ;; Hardware stack levels required when called:    7
 15859 ;; This function calls:
 15860 ;;		_CC2500_WriteREG
 15861 ;; This function is called by:
 15862 ;;		_CC2500_PowerOnInitial
 15863 ;; This function uses a non-reentrant model
 15864 ;;
 15865                           
 15866                           
 15867                           ;psect for function _CC2500_InitPATable
 15868  1185                     _CC2500_InitPATable:	
 15869                           
 15870                           ;CC2500_B1.c: 171: unsigned char loop_d;
 15871                           ;CC2500_B1.c: 172: unsigned char temp;
 15872                           ;CC2500_B1.c: 174: for (loop_d = 0; loop_d < 8; loop_d++) {
 15873                           
 15874                           ;incstack = 0
 15875                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15876  1185  0020               	movlb	0	; select bank0
 15877  1186  01A7               	clrf	CC2500_InitPATable@loop_d
 15878  1187                     L6:	
 15879  1187  3008               	movlw	8
 15880  1188  0227               	subwf	CC2500_InitPATable@loop_d,w
 15881  1189  1803               	btfsc	3,0
 15882  118A  0008               	return
 15883                           
 15884                           ;CC2500_B1.c: 175: temp = CC2500_patable_vaule[loop_d];
 15885  118B  0827               	movf	CC2500_InitPATable@loop_d,w
 15886  118C  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15887  118D  0084               	movwf	4
 15888  118E  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15889  118F  1803               	skipnc
 15890  1190  3E01               	addlw	1
 15891  1191  0085               	movwf	5
 15892  1192  0800               	movf	0,w	;code access
 15893  1193  00A5               	movwf	??_CC2500_InitPATable
 15894  1194  0825               	movf	??_CC2500_InitPATable,w
 15895  1195  00A6               	movwf	CC2500_InitPATable@temp
 15896                           
 15897                           ;CC2500_B1.c: 176: CC2500_WriteREG(0x3E, temp);
 15898  1196  0826               	movf	CC2500_InitPATable@temp,w
 15899  1197  00A5               	movwf	??_CC2500_InitPATable
 15900  1198  0825               	movf	??_CC2500_InitPATable,w
 15901  1199  00A2               	movwf	CC2500_WriteREG@value
 15902  119A  303E               	movlw	62
 15903  119B  3192  2203  3191   	fcall	_CC2500_WriteREG
 15904  119E  3001               	movlw	1
 15905  119F  0020               	movlb	0	; select bank0
 15906  11A0  00A5               	movwf	??_CC2500_InitPATable
 15907  11A1  0825               	movf	??_CC2500_InitPATable,w
 15908  11A2  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15909  11A3  2987               	goto	L6
 15910  11A4                     __end_of_CC2500_InitPATable:	
 15911                           
 15912                           	psect	text113
 15913  1203                     __ptext113:	
 15914 ;; *************** function _CC2500_WriteREG *****************
 15915 ;; Defined at:
 15916 ;;		line 247 in file "../src/CC2500_B1.c"
 15917 ;; Parameters:    Size  Location     Type
 15918 ;;  w_addr          1    wreg     unsigned char 
 15919 ;;  value           1    2[BANK0 ] unsigned char 
 15920 ;; Auto vars:     Size  Location     Type
 15921 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15922 ;; Return value:  Size  Location     Type
 15923 ;;		None               void
 15924 ;; Registers used:
 15925 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15926 ;; Tracked objects:
 15927 ;;		On entry : 0/0
 15928 ;;		On exit  : 0/0
 15929 ;;		Unchanged: 0/0
 15930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15931 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15934 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;Total ram usage:        3 bytes
 15936 ;; Hardware stack levels used:    1
 15937 ;; Hardware stack levels required when called:    6
 15938 ;; This function calls:
 15939 ;;		_CC2500_WriteByte
 15940 ;;		_Timeout_Counter
 15941 ;;		_set_TimeoutCleared
 15942 ;; This function is called by:
 15943 ;;		_CC2500_InitSetREG
 15944 ;;		_CC2500_InitPATable
 15945 ;; This function uses a non-reentrant model
 15946 ;;
 15947                           
 15948                           
 15949                           ;psect for function _CC2500_WriteREG
 15950  1203                     _CC2500_WriteREG:	
 15951                           
 15952                           ;incstack = 0
 15953                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15954                           ;CC2500_WriteREG@w_addr stored from wreg
 15955  1203  0020               	movlb	0	; select bank0
 15956  1204  00A4               	movwf	CC2500_WriteREG@w_addr
 15957                           
 15958                           ;CC2500_B1.c: 248: RC4 = 0;
 15959  1205  120E               	bcf	14,4	;volatile
 15960                           
 15961                           ;CC2500_B1.c: 249: SPI0Buffer = w_addr;
 15962  1206  0824               	movf	CC2500_WriteREG@w_addr,w
 15963  1207  00A3               	movwf	??_CC2500_WriteREG
 15964  1208  0823               	movf	??_CC2500_WriteREG,w
 15965  1209  00FB               	movwf	_SPI0Buffer
 15966                           
 15967                           ;CC2500_B1.c: 250: while (RC2 == 1 && myMain.Timeout == 0) {
 15968  120A  2A0E               	goto	l6181
 15969  120B                     l6179:	
 15970                           
 15971                           ;CC2500_B1.c: 251: Timeout_Counter();
 15972  120B  3191  2102  3192   	fcall	_Timeout_Counter
 15973  120E                     l6181:	
 15974  120E  0020               	movlb	0	; select bank0
 15975  120F  1D0E               	btfss	14,2	;volatile
 15976  1210  2A14               	goto	l6185
 15977  1211  0021               	movlb	1	; select bank1
 15978  1212  1D2F               	btfss	(_myMain^(0+128)+15),2
 15979  1213  2A0B               	goto	l6179
 15980  1214                     l6185:	
 15981                           
 15982                           ;CC2500_B1.c: 252: };
 15983                           ;CC2500_B1.c: 253: set_TimeoutCleared();
 15984  1214  319E  262B  3192   	fcall	_set_TimeoutCleared
 15985                           
 15986                           ;CC2500_B1.c: 254: CC2500_WriteByte();
 15987  1217  3190  2098  3192   	fcall	_CC2500_WriteByte
 15988                           
 15989                           ;CC2500_B1.c: 255: SPI0Buffer = value;
 15990  121A  0020               	movlb	0	; select bank0
 15991  121B  0822               	movf	CC2500_WriteREG@value,w
 15992  121C  00A3               	movwf	??_CC2500_WriteREG
 15993  121D  0823               	movf	??_CC2500_WriteREG,w
 15994  121E  00FB               	movwf	_SPI0Buffer
 15995                           
 15996                           ;CC2500_B1.c: 256: CC2500_WriteByte();
 15997  121F  3190  2098         	fcall	_CC2500_WriteByte
 15998                           
 15999                           ;CC2500_B1.c: 257: RC4 = 1;
 16000  1221  0020               	movlb	0	; select bank0
 16001  1222  160E               	bsf	14,4	;volatile
 16002  1223  0008               	return
 16003  1224                     __end_of_CC2500_WriteREG:	
 16004                           
 16005                           	psect	text114
 16006  1EE0                     __ptext114:	
 16007 ;; *************** function _CC2500_FrequencyCabr *****************
 16008 ;; Defined at:
 16009 ;;		line 197 in file "../src/CC2500_B1.c"
 16010 ;; Parameters:    Size  Location     Type
 16011 ;;		None
 16012 ;; Auto vars:     Size  Location     Type
 16013 ;;		None
 16014 ;; Return value:  Size  Location     Type
 16015 ;;		None               void
 16016 ;; Registers used:
 16017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16018 ;; Tracked objects:
 16019 ;;		On entry : 0/0
 16020 ;;		On exit  : 0/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16027 ;;Total ram usage:        0 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    7
 16030 ;; This function calls:
 16031 ;;		_CC2500_WriteCommand
 16032 ;;		_DelayTime_1us
 16033 ;; This function is called by:
 16034 ;;		_CC2500_PowerOnInitial
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           
 16039                           ;psect for function _CC2500_FrequencyCabr
 16040  1EE0                     _CC2500_FrequencyCabr:	
 16041                           
 16042                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x33);
 16043                           
 16044                           ;incstack = 0
 16045                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16046  1EE0  3033               	movlw	51
 16047  1EE1  3191  211A  319E   	fcall	_CC2500_WriteCommand
 16048                           
 16049                           ;CC2500_B1.c: 199: DelayTime_1us(1000);
 16050  1EE4  30E8               	movlw	232
 16051  1EE5  0020               	movlb	0	; select bank0
 16052  1EE6  00A0               	movwf	DelayTime_1us@count
 16053  1EE7  3003               	movlw	3
 16054  1EE8  00A1               	movwf	DelayTime_1us@count+1
 16055  1EE9  3192  22D0         	fcall	_DelayTime_1us
 16056  1EEB  0008               	return
 16057  1EEC                     __end_of_CC2500_FrequencyCabr:	
 16058                           
 16059                           	psect	text115
 16060  12D0                     __ptext115:	
 16061 ;; *************** function _DelayTime_1us *****************
 16062 ;; Defined at:
 16063 ;;		line 312 in file "../src/CC2500_B1.c"
 16064 ;; Parameters:    Size  Location     Type
 16065 ;;  count           2    0[BANK0 ] int 
 16066 ;; Auto vars:     Size  Location     Type
 16067 ;;  j               2    4[BANK0 ] unsigned int 
 16068 ;;  i               2    2[BANK0 ] unsigned int 
 16069 ;; Return value:  Size  Location     Type
 16070 ;;		None               void
 16071 ;; Registers used:
 16072 ;;		wreg, status,2
 16073 ;; Tracked objects:
 16074 ;;		On entry : 0/0
 16075 ;;		On exit  : 0/0
 16076 ;;		Unchanged: 0/0
 16077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16078 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16079 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;Total ram usage:        6 bytes
 16083 ;; Hardware stack levels used:    1
 16084 ;; Hardware stack levels required when called:    5
 16085 ;; This function calls:
 16086 ;;		Nothing
 16087 ;; This function is called by:
 16088 ;;		_CC2500_PowerRST
 16089 ;;		_CC2500_FrequencyCabr
 16090 ;; This function uses a non-reentrant model
 16091 ;;
 16092                           
 16093                           
 16094                           ;psect for function _DelayTime_1us
 16095  12D0                     _DelayTime_1us:	
 16096                           
 16097                           ;CC2500_B1.c: 313: unsigned int i, j;
 16098                           ;CC2500_B1.c: 314: for (i = 1; i < count; i++)
 16099                           
 16100                           ;incstack = 0
 16101                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16102  12D0  3001               	movlw	1
 16103  12D1  0020               	movlb	0	; select bank0
 16104  12D2  00A2               	movwf	DelayTime_1us@i
 16105  12D3  3000               	movlw	0
 16106  12D4  00A3               	movwf	DelayTime_1us@i+1
 16107  12D5                     l360:	
 16108  12D5  0821               	movf	DelayTime_1us@count+1,w
 16109  12D6  0223               	subwf	DelayTime_1us@i+1,w
 16110  12D7  1D03               	skipz
 16111  12D8  2ADB               	goto	u5065
 16112  12D9  0820               	movf	DelayTime_1us@count,w
 16113  12DA  0222               	subwf	DelayTime_1us@i,w
 16114  12DB                     u5065:	
 16115  12DB  1803               	btfsc	3,0
 16116  12DC  0008               	return
 16117                           
 16118                           ;CC2500_B1.c: 315: for (j = 0; j <= 1; j++);
 16119  12DD  01A4               	clrf	DelayTime_1us@j
 16120  12DE  01A5               	clrf	DelayTime_1us@j+1
 16121  12DF  3000               	movlw	0
 16122  12E0  0225               	subwf	DelayTime_1us@j+1,w
 16123  12E1  3002               	movlw	2
 16124  12E2  1903               	skipnz
 16125  12E3  0224               	subwf	DelayTime_1us@j,w
 16126  12E4  1803               	btfsc	3,0
 16127  12E5  2AF1               	goto	l6173
 16128  12E6                     l6171:	
 16129  12E6  3001               	movlw	1
 16130  12E7  07A4               	addwf	DelayTime_1us@j,f
 16131  12E8  3000               	movlw	0
 16132  12E9  3DA5               	addwfc	DelayTime_1us@j+1,f
 16133  12EA  3000               	movlw	0
 16134  12EB  0225               	subwf	DelayTime_1us@j+1,w
 16135  12EC  3002               	movlw	2
 16136  12ED  1903               	skipnz
 16137  12EE  0224               	subwf	DelayTime_1us@j,w
 16138  12EF  1C03               	skipc
 16139  12F0  2AE6               	goto	l6171
 16140  12F1                     l6173:	
 16141  12F1  3001               	movlw	1
 16142  12F2  07A2               	addwf	DelayTime_1us@i,f
 16143  12F3  3000               	movlw	0
 16144  12F4  3DA3               	addwfc	DelayTime_1us@i+1,f
 16145  12F5  2AD5               	goto	l360
 16146  12F6                     __end_of_DelayTime_1us:	
 16147                           
 16148                           	psect	text116
 16149  1E0B                     __ptext116:	
 16150 ;; *************** function _CC2500_ClearTXFIFO *****************
 16151 ;; Defined at:
 16152 ;;		line 183 in file "../src/CC2500_B1.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;		None
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;		None
 16157 ;; Return value:  Size  Location     Type
 16158 ;;		None               void
 16159 ;; Registers used:
 16160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16161 ;; Tracked objects:
 16162 ;;		On entry : 0/0
 16163 ;;		On exit  : 0/0
 16164 ;;		Unchanged: 0/0
 16165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16170 ;;Total ram usage:        0 bytes
 16171 ;; Hardware stack levels used:    1
 16172 ;; Hardware stack levels required when called:    7
 16173 ;; This function calls:
 16174 ;;		_CC2500_WriteCommand
 16175 ;; This function is called by:
 16176 ;;		_CC2500_PowerOnInitial
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function _CC2500_ClearTXFIFO
 16182  1E0B                     _CC2500_ClearTXFIFO:	
 16183                           
 16184                           ;CC2500_B1.c: 184: CC2500_WriteCommand(0x3B);
 16185                           
 16186                           ;incstack = 0
 16187                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16188  1E0B  303B               	movlw	59
 16189  1E0C  3191  211A         	fcall	_CC2500_WriteCommand
 16190  1E0E  0008               	return
 16191  1E0F                     __end_of_CC2500_ClearTXFIFO:	
 16192                           
 16193                           	psect	text117
 16194  1E07                     __ptext117:	
 16195 ;; *************** function _CC2500_ClearRXFIFO *****************
 16196 ;; Defined at:
 16197 ;;		line 190 in file "../src/CC2500_B1.c"
 16198 ;; Parameters:    Size  Location     Type
 16199 ;;		None
 16200 ;; Auto vars:     Size  Location     Type
 16201 ;;		None
 16202 ;; Return value:  Size  Location     Type
 16203 ;;		None               void
 16204 ;; Registers used:
 16205 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;Total ram usage:        0 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    7
 16218 ;; This function calls:
 16219 ;;		_CC2500_WriteCommand
 16220 ;; This function is called by:
 16221 ;;		_CC2500_PowerOnInitial
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           
 16226                           ;psect for function _CC2500_ClearRXFIFO
 16227  1E07                     _CC2500_ClearRXFIFO:	
 16228                           
 16229                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3A);
 16230                           
 16231                           ;incstack = 0
 16232                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16233  1E07  303A               	movlw	58
 16234  1E08  3191  211A         	fcall	_CC2500_WriteCommand
 16235  1E0A  0008               	return
 16236  1E0B                     __end_of_CC2500_ClearRXFIFO:	
 16237                           
 16238                           	psect	text118
 16239  111A                     __ptext118:	
 16240 ;; *************** function _CC2500_WriteCommand *****************
 16241 ;; Defined at:
 16242 ;;		line 279 in file "../src/CC2500_B1.c"
 16243 ;; Parameters:    Size  Location     Type
 16244 ;;  command         1    wreg     unsigned char 
 16245 ;; Auto vars:     Size  Location     Type
 16246 ;;  command         1    3[BANK0 ] unsigned char 
 16247 ;; Return value:  Size  Location     Type
 16248 ;;		None               void
 16249 ;; Registers used:
 16250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16251 ;; Tracked objects:
 16252 ;;		On entry : 0/0
 16253 ;;		On exit  : 0/0
 16254 ;;		Unchanged: 0/0
 16255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16258 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16259 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16260 ;;Total ram usage:        2 bytes
 16261 ;; Hardware stack levels used:    1
 16262 ;; Hardware stack levels required when called:    6
 16263 ;; This function calls:
 16264 ;;		_CC2500_WriteByte
 16265 ;;		_Timeout_Counter
 16266 ;;		_set_TimeoutCleared
 16267 ;; This function is called by:
 16268 ;;		_CC2500_TxData
 16269 ;;		_CC2500_RxData
 16270 ;;		_CC2500_ClearTXFIFO
 16271 ;;		_CC2500_ClearRXFIFO
 16272 ;;		_CC2500_FrequencyCabr
 16273 ;;		_CC2500_SIDLEMode
 16274 ;;		_setRF_Main
 16275 ;;		_RF_RxDisable
 16276 ;; This function uses a non-reentrant model
 16277 ;;
 16278                           
 16279                           
 16280                           ;psect for function _CC2500_WriteCommand
 16281  111A                     _CC2500_WriteCommand:	
 16282                           
 16283                           ;incstack = 0
 16284                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16285                           ;CC2500_WriteCommand@command stored from wreg
 16286  111A  0020               	movlb	0	; select bank0
 16287  111B  00A3               	movwf	CC2500_WriteCommand@command
 16288                           
 16289                           ;CC2500_B1.c: 280: RC4 = 0;
 16290  111C  120E               	bcf	14,4	;volatile
 16291                           
 16292                           ;CC2500_B1.c: 281: SPI0Buffer = command;
 16293  111D  0823               	movf	CC2500_WriteCommand@command,w
 16294  111E  00A2               	movwf	??_CC2500_WriteCommand
 16295  111F  0822               	movf	??_CC2500_WriteCommand,w
 16296  1120  00FB               	movwf	_SPI0Buffer
 16297                           
 16298                           ;CC2500_B1.c: 283: while (RC2 == 1 && myMain.Timeout == 0) {
 16299  1121  2925               	goto	l5915
 16300  1122                     l5913:	
 16301                           
 16302                           ;CC2500_B1.c: 284: Timeout_Counter();
 16303  1122  3191  2102  3191   	fcall	_Timeout_Counter
 16304  1125                     l5915:	
 16305  1125  0020               	movlb	0	; select bank0
 16306  1126  1D0E               	btfss	14,2	;volatile
 16307  1127  292B               	goto	l5919
 16308  1128  0021               	movlb	1	; select bank1
 16309  1129  1D2F               	btfss	(_myMain^(0+128)+15),2
 16310  112A  2922               	goto	l5913
 16311  112B                     l5919:	
 16312                           
 16313                           ;CC2500_B1.c: 285: };
 16314                           ;CC2500_B1.c: 286: set_TimeoutCleared();
 16315  112B  319E  262B  3191   	fcall	_set_TimeoutCleared
 16316                           
 16317                           ;CC2500_B1.c: 287: CC2500_WriteByte();
 16318  112E  3190  2098         	fcall	_CC2500_WriteByte
 16319                           
 16320                           ;CC2500_B1.c: 288: RC4 = 1;
 16321  1130  0020               	movlb	0	; select bank0
 16322  1131  160E               	bsf	14,4	;volatile
 16323  1132  0008               	return
 16324  1133                     __end_of_CC2500_WriteCommand:	
 16325                           
 16326                           	psect	text119
 16327  1E2B                     __ptext119:	
 16328 ;; *************** function _set_TimeoutCleared *****************
 16329 ;; Defined at:
 16330 ;;		line 218 in file "../src/main_B1.c"
 16331 ;; Parameters:    Size  Location     Type
 16332 ;;		None
 16333 ;; Auto vars:     Size  Location     Type
 16334 ;;		None
 16335 ;; Return value:  Size  Location     Type
 16336 ;;		None               void
 16337 ;; Registers used:
 16338 ;;		status,2
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16348 ;;Total ram usage:        0 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    5
 16351 ;; This function calls:
 16352 ;;		Nothing
 16353 ;; This function is called by:
 16354 ;;		_CC2500_TxData
 16355 ;;		_CC2500_RxData
 16356 ;;		_CC2500_PowerRST
 16357 ;;		_CC2500_WriteREG
 16358 ;;		_CC2500_WriteCommand
 16359 ;;		_CC2500_ReadStatus
 16360 ;;		_getAD
 16361 ;;		_TouchPower
 16362 ;;		_CC2500_ReadREG
 16363 ;; This function uses a non-reentrant model
 16364 ;;
 16365                           
 16366                           
 16367                           ;psect for function _set_TimeoutCleared
 16368  1E2B                     _set_TimeoutCleared:	
 16369                           
 16370                           ;main_B1.c: 219: myMain.Timeout = 0;
 16371                           
 16372                           ;incstack = 0
 16373                           ; Regs used in _set_TimeoutCleared: [status,2]
 16374  1E2B  0021               	movlb	1	; select bank1
 16375  1E2C  112F               	bcf	(_myMain^(0+128)+15),2
 16376                           
 16377                           ;main_B1.c: 220: myMain.Timeout_Counter = 0;
 16378  1E2D  01B0               	clrf	(_myMain^(0+128)+16)
 16379  1E2E  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16380  1E2F  0008               	return
 16381  1E30                     __end_of_set_TimeoutCleared:	
 16382                           
 16383                           	psect	text120
 16384  1102                     __ptext120:	
 16385 ;; *************** function _Timeout_Counter *****************
 16386 ;; Defined at:
 16387 ;;		line 209 in file "../src/main_B1.c"
 16388 ;; Parameters:    Size  Location     Type
 16389 ;;		None
 16390 ;; Auto vars:     Size  Location     Type
 16391 ;;		None
 16392 ;; Return value:  Size  Location     Type
 16393 ;;		None               void
 16394 ;; Registers used:
 16395 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16396 ;; Tracked objects:
 16397 ;;		On entry : 0/0
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16405 ;;Total ram usage:        0 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; Hardware stack levels required when called:    5
 16408 ;; This function calls:
 16409 ;;		Nothing
 16410 ;; This function is called by:
 16411 ;;		_CC2500_TxData
 16412 ;;		_CC2500_RxData
 16413 ;;		_CC2500_PowerRST
 16414 ;;		_CC2500_WriteREG
 16415 ;;		_CC2500_WriteCommand
 16416 ;;		_CC2500_ReadStatus
 16417 ;;		_getAD
 16418 ;;		_TouchPower
 16419 ;;		_CC2500_ReadREG
 16420 ;; This function uses a non-reentrant model
 16421 ;;
 16422                           
 16423                           
 16424                           ;psect for function _Timeout_Counter
 16425  1102                     _Timeout_Counter:	
 16426                           
 16427                           ;main_B1.c: 210: myMain.Timeout_Counter++;
 16428                           
 16429                           ;incstack = 0
 16430                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16431  1102  3001               	movlw	1
 16432  1103  0021               	movlb	1	; select bank1
 16433  1104  07B0               	addwf	(_myMain^(0+128)+16),f
 16434  1105  3000               	movlw	0
 16435  1106  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16436                           
 16437                           ;main_B1.c: 211: if (myMain.Timeout_Counter == 10000) {
 16438  1107  3010               	movlw	16
 16439  1108  3EA0               	addlw	_myMain& (0+255)
 16440  1109  0086               	movwf	6
 16441  110A  0187               	clrf	7
 16442  110B  3F40               	moviw [0]fsr1
 16443  110C  3A10               	xorlw	16
 16444  110D  1D03               	skipz
 16445  110E  2911               	goto	u4605
 16446  110F  3F41               	moviw [1]fsr1
 16447  1110  3A27               	xorlw	39
 16448  1111                     u4605:	
 16449  1111  1D03               	skipz
 16450  1112  0008               	return
 16451                           
 16452                           ;main_B1.c: 212: myMain.Timeout_Counter = 0;
 16453  1113  01B0               	clrf	(_myMain^(0+128)+16)
 16454  1114  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16455                           
 16456                           ;main_B1.c: 213: myMain.Timeout = 1;
 16457  1115  152F               	bsf	(_myMain^(0+128)+15),2
 16458                           
 16459                           ;main_B1.c: 214: RB5 = RB5 == 1 ? 0 : 1;
 16460  1116  3020               	movlw	32
 16461  1117  0020               	movlb	0	; select bank0
 16462  1118  068D               	xorwf	13,f
 16463  1119  0008               	return
 16464  111A                     __end_of_Timeout_Counter:	
 16465                           
 16466                           	psect	text121
 16467  1098                     __ptext121:	
 16468 ;; *************** function _CC2500_WriteByte *****************
 16469 ;; Defined at:
 16470 ;;		line 215 in file "../src/CC2500_B1.c"
 16471 ;; Parameters:    Size  Location     Type
 16472 ;;		None
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16475 ;; Return value:  Size  Location     Type
 16476 ;;		None               void
 16477 ;; Registers used:
 16478 ;;		wreg, status,2, status,0
 16479 ;; Tracked objects:
 16480 ;;		On entry : 0/0
 16481 ;;		On exit  : 0/0
 16482 ;;		Unchanged: 0/0
 16483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16487 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16488 ;;Total ram usage:        2 bytes
 16489 ;; Hardware stack levels used:    1
 16490 ;; Hardware stack levels required when called:    5
 16491 ;; This function calls:
 16492 ;;		Nothing
 16493 ;; This function is called by:
 16494 ;;		_CC2500_TxData
 16495 ;;		_CC2500_RxData
 16496 ;;		_CC2500_PowerRST
 16497 ;;		_CC2500_WriteREG
 16498 ;;		_CC2500_WriteCommand
 16499 ;;		_CC2500_ReadStatus
 16500 ;;		_CC2500_ReadREG
 16501 ;; This function uses a non-reentrant model
 16502 ;;
 16503                           
 16504                           
 16505                           ;psect for function _CC2500_WriteByte
 16506  1098                     _CC2500_WriteByte:	
 16507                           
 16508                           ;CC2500_B1.c: 216: unsigned char loop_a;
 16509                           ;CC2500_B1.c: 217: for (loop_a = 0; loop_a < 8; loop_a++) {
 16510                           
 16511                           ;incstack = 0
 16512                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16513  1098  0020               	movlb	0	; select bank0
 16514  1099  01A1               	clrf	CC2500_WriteByte@loop_a
 16515  109A                     L7:	
 16516  109A  3008               	movlw	8
 16517  109B  0221               	subwf	CC2500_WriteByte@loop_a,w
 16518  109C  1803               	btfsc	3,0
 16519  109D  0008               	return
 16520                           
 16521                           ;CC2500_B1.c: 218: if (SPI0Buffer & 0x80)
 16522  109E  1FFB               	btfss	_SPI0Buffer,7
 16523  109F  28A2               	goto	l316
 16524                           
 16525                           ;CC2500_B1.c: 219: RC0 = 1;
 16526  10A0  140E               	bsf	14,0	;volatile
 16527  10A1  28A3               	goto	l317
 16528  10A2                     l316:	
 16529                           
 16530                           ;CC2500_B1.c: 220: else
 16531                           ;CC2500_B1.c: 221: RC0 = 0;
 16532  10A2  100E               	bcf	14,0	;volatile
 16533  10A3                     l317:	
 16534                           
 16535                           ;CC2500_B1.c: 222: RC1 = 1;
 16536  10A3  148E               	bsf	14,1	;volatile
 16537                           
 16538                           ;CC2500_B1.c: 223: SPI0Buffer <<= 1;
 16539  10A4  1003               	clrc
 16540  10A5  0DFB               	rlf	_SPI0Buffer,f
 16541                           
 16542                           ;CC2500_B1.c: 224: RC1 = 0;
 16543  10A6  108E               	bcf	14,1	;volatile
 16544  10A7  3001               	movlw	1
 16545  10A8  00A0               	movwf	??_CC2500_WriteByte
 16546  10A9  0820               	movf	??_CC2500_WriteByte,w
 16547  10AA  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16548  10AB  289A               	goto	L7
 16549  10AC                     __end_of_CC2500_WriteByte:	
 16550                           
 16551                           	psect	text122
 16552  1766                     __ptext122:	
 16553 ;; *************** function _Buzzer_Main *****************
 16554 ;; Defined at:
 16555 ;;		line 46 in file "../src/Buzzer_B1.c"
 16556 ;; Parameters:    Size  Location     Type
 16557 ;;		None
 16558 ;; Auto vars:     Size  Location     Type
 16559 ;;		None
 16560 ;; Return value:  Size  Location     Type
 16561 ;;		None               void
 16562 ;; Registers used:
 16563 ;;		wreg, status,2, status,0
 16564 ;; Tracked objects:
 16565 ;;		On entry : 0/0
 16566 ;;		On exit  : 0/0
 16567 ;;		Unchanged: 0/0
 16568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;Total ram usage:        1 bytes
 16574 ;; Hardware stack levels used:    1
 16575 ;; Hardware stack levels required when called:    5
 16576 ;; This function calls:
 16577 ;;		Nothing
 16578 ;; This function is called by:
 16579 ;;		_main
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           
 16584                           ;psect for function _Buzzer_Main
 16585  1766                     _Buzzer_Main:	
 16586                           
 16587                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16588                           
 16589                           ;incstack = 0
 16590                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16591  1766  0021               	movlb	1	; select bank1
 16592  1767  1CB2               	btfss	_Buz1^(0+128),1
 16593  1768  0008               	return
 16594                           
 16595                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16596  1769  3001               	movlw	1
 16597  176A  07B3               	addwf	(_Buz1^(0+128)+1),f
 16598  176B  3000               	movlw	0
 16599  176C  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16600                           
 16601                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16602  176D  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16603  176E  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16604  176F  1D03               	skipz
 16605  1770  2F73               	goto	u6535
 16606  1771  0838               	movf	(_Buz1^(0+128)+6),w
 16607  1772  0233               	subwf	(_Buz1^(0+128)+1),w
 16608  1773                     u6535:	
 16609  1773  1C03               	skipc
 16610  1774  0008               	return
 16611                           
 16612                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16613  1775  01B3               	clrf	(_Buz1^(0+128)+1)
 16614  1776  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16615                           
 16616                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16617  1777  12B2               	bcf	_Buz1^(0+128),5
 16618  1778  0020               	movlb	0	; select bank0
 16619  1779  1D8D               	btfss	13,3	;volatile
 16620  177A  2F7D               	goto	l7089
 16621  177B  0021               	movlb	1	; select bank1
 16622  177C  16B2               	bsf	_Buz1^(0+128),5
 16623  177D                     l7089:	
 16624                           
 16625                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16626  177D  0021               	movlb	1	; select bank1
 16627  177E  1AB2               	btfsc	_Buz1^(0+128),5
 16628  177F  2FA9               	goto	l100
 16629                           
 16630                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16631  1780  08B5               	movf	(_Buz1^(0+128)+3),f
 16632  1781  1D03               	skipz
 16633  1782  2FA5               	goto	l101
 16634                           
 16635                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16636  1783  1DB2               	btfss	_Buz1^(0+128),3
 16637  1784  2F93               	goto	l102
 16638                           
 16639                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16640  1785  11B2               	bcf	_Buz1^(0+128),3
 16641                           
 16642                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16643  1786  0836               	movf	(_Buz1^(0+128)+4),w
 16644  1787  0020               	movlb	0	; select bank0
 16645  1788  00A0               	movwf	??_Buzzer_Main
 16646  1789  0820               	movf	??_Buzzer_Main,w
 16647  178A  0021               	movlb	1	; select bank1
 16648  178B  00B5               	movwf	(_Buz1^(0+128)+3)
 16649                           
 16650                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16651  178C  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16652  178D  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16653  178E  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16654  178F  083A               	movf	(_Buz1^(0+128)+8),w
 16655  1790  01B8               	clrf	(_Buz1^(0+128)+6)
 16656  1791  07B8               	addwf	(_Buz1^(0+128)+6),f
 16657                           
 16658                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16659  1792  0008               	return
 16660  1793                     l102:	
 16661  1793  1E32               	btfss	_Buz1^(0+128),4
 16662  1794  2FA3               	goto	l104
 16663                           
 16664                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16665  1795  1232               	bcf	_Buz1^(0+128),4
 16666                           
 16667                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16668  1796  0837               	movf	(_Buz1^(0+128)+5),w
 16669  1797  0020               	movlb	0	; select bank0
 16670  1798  00A0               	movwf	??_Buzzer_Main
 16671  1799  0820               	movf	??_Buzzer_Main,w
 16672  179A  0021               	movlb	1	; select bank1
 16673  179B  00B5               	movwf	(_Buz1^(0+128)+3)
 16674                           
 16675                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16676  179C  083D               	movf	((_Buz1+1)^(0+128)+10),w
 16677  179D  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16678  179E  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16679  179F  083C               	movf	(_Buz1^(0+128)+10),w
 16680  17A0  01B8               	clrf	(_Buz1^(0+128)+6)
 16681  17A1  07B8               	addwf	(_Buz1^(0+128)+6),f
 16682                           
 16683                           ;Buzzer_B1.c: 62: } else {
 16684  17A2  0008               	return
 16685  17A3                     l104:	
 16686                           
 16687                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16688  17A3  10B2               	bcf	_Buz1^(0+128),1
 16689                           
 16690                           ;Buzzer_B1.c: 64: }
 16691                           ;Buzzer_B1.c: 65: } else {
 16692  17A4  0008               	return
 16693  17A5                     l101:	
 16694                           
 16695                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16696  17A5  16B2               	bsf	_Buz1^(0+128),5
 16697                           
 16698                           ;Buzzer_B1.c: 68: RB3 = 1;
 16699  17A6  0020               	movlb	0	; select bank0
 16700  17A7  158D               	bsf	13,3	;volatile
 16701                           
 16702                           ;Buzzer_B1.c: 69: }
 16703                           ;Buzzer_B1.c: 70: } else {
 16704  17A8  0008               	return
 16705  17A9                     l100:	
 16706                           
 16707                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16708  17A9  12B2               	bcf	_Buz1^(0+128),5
 16709                           
 16710                           ;Buzzer_B1.c: 73: RB3 = 0;
 16711  17AA  0020               	movlb	0	; select bank0
 16712  17AB  118D               	bcf	13,3	;volatile
 16713                           
 16714                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16715  17AC  3001               	movlw	1
 16716  17AD  0021               	movlb	1	; select bank1
 16717  17AE  02B5               	subwf	(_Buz1^(0+128)+3),f
 16718  17AF  0008               	return
 16719  17B0                     __end_of_Buzzer_Main:	
 16720                           
 16721                           	psect	text123
 16722  1DEB                     __ptext123:	
 16723 ;; *************** function _Buzzer_Initialization *****************
 16724 ;; Defined at:
 16725 ;;		line 11 in file "../src/Buzzer_B1.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;		None
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;		None
 16730 ;; Return value:  Size  Location     Type
 16731 ;;		None               void
 16732 ;; Registers used:
 16733 ;;		None
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        0 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; Hardware stack levels required when called:    5
 16746 ;; This function calls:
 16747 ;;		Nothing
 16748 ;; This function is called by:
 16749 ;;		_main
 16750 ;; This function uses a non-reentrant model
 16751 ;;
 16752                           
 16753                           
 16754                           ;psect for function _Buzzer_Initialization
 16755  1DEB                     _Buzzer_Initialization:	
 16756                           
 16757                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16758                           
 16759                           ;incstack = 0
 16760                           ; Regs used in _Buzzer_Initialization: []
 16761  1DEB  0021               	movlb	1	; select bank1
 16762  1DEC  1432               	bsf	_Buz1^(0+128),0
 16763  1DED  0008               	return
 16764  1DEE                     __end_of_Buzzer_Initialization:	
 16765                           
 16766                           	psect	intentry
 16767  0004                     __pintentry:	
 16768 ;; *************** function _ISR *****************
 16769 ;; Defined at:
 16770 ;;		line 107 in file "../src/MCU_B1.c"
 16771 ;; Parameters:    Size  Location     Type
 16772 ;;		None
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;		None
 16775 ;; Return value:  Size  Location     Type
 16776 ;;		None               void
 16777 ;; Registers used:
 16778 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16779 ;; Tracked objects:
 16780 ;;		On entry : 0/0
 16781 ;;		On exit  : 0/0
 16782 ;;		Unchanged: 0/0
 16783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16786 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;Total ram usage:        1 bytes
 16789 ;; Hardware stack levels used:    1
 16790 ;; Hardware stack levels required when called:    4
 16791 ;; This function calls:
 16792 ;;		_IOC_ISR
 16793 ;;		_TMR0_ISR
 16794 ;; This function is called by:
 16795 ;;		Interrupt level 1
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799  0004                     _ISR:	
 16800                           
 16801                           ;incstack = 0
 16802                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16803  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16804  0005  3180               	pagesel	$
 16805  0006  0020               	movlb	0	; select bank0
 16806  0007  087F               	movf	127,w
 16807  0008  00F7               	movwf	??_ISR
 16808                           
 16809                           ;MCU_B1.c: 109: IOC_ISR();
 16810  0009  319F  2710  3180   	fcall	_IOC_ISR
 16811                           
 16812                           ;MCU_B1.c: 111: TMR0_ISR();
 16813  000C  3192  228A         	fcall	_TMR0_ISR
 16814  000E  0877               	movf	??_ISR,w
 16815  000F  0020               	movlb	0	; select bank0
 16816  0010  00FF               	movwf	127
 16817  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16818  0012  0009               	retfie
 16819  0013                     __end_of_ISR:	
 16820                           
 16821                           	psect	text125
 16822  128A                     __ptext125:	
 16823 ;; *************** function _TMR0_ISR *****************
 16824 ;; Defined at:
 16825 ;;		line 135 in file "../src/MCU_B1.c"
 16826 ;; Parameters:    Size  Location     Type
 16827 ;;		None
 16828 ;; Auto vars:     Size  Location     Type
 16829 ;;		None
 16830 ;; Return value:  Size  Location     Type
 16831 ;;		None               void
 16832 ;; Registers used:
 16833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16834 ;; Tracked objects:
 16835 ;;		On entry : 0/0
 16836 ;;		On exit  : 0/0
 16837 ;;		Unchanged: 0/0
 16838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16842 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16843 ;;Total ram usage:        0 bytes
 16844 ;; Hardware stack levels used:    1
 16845 ;; Hardware stack levels required when called:    2
 16846 ;; This function calls:
 16847 ;;		_setDimmerLights_IntrControl
 16848 ;; This function is called by:
 16849 ;;		_ISR
 16850 ;; This function uses a non-reentrant model
 16851 ;;
 16852                           
 16853                           
 16854                           ;psect for function _TMR0_ISR
 16855  128A                     _TMR0_ISR:	
 16856                           
 16857                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 16858                           
 16859                           ;incstack = 0
 16860                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16861  128A  1E8B               	btfss	11,5	;volatile
 16862  128B  0008               	return
 16863  128C  1D0B               	btfss	11,2	;volatile
 16864  128D  0008               	return
 16865                           
 16866                           ;MCU_B1.c: 138: TMR0 = (256-190);
 16867  128E  3042               	movlw	66
 16868  128F  0020               	movlb	0	; select bank0
 16869  1290  0095               	movwf	21	;volatile
 16870                           
 16871                           ;MCU_B1.c: 139: TMR0IF = 0;
 16872  1291  110B               	bcf	11,2	;volatile
 16873                           
 16874                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 16875  1292  3001               	movlw	1
 16876  1293  3180  2043  3192   	fcall	_setDimmerLights_IntrControl
 16877                           
 16878                           ;MCU_B1.c: 160: Timer0.Count++;
 16879  1296  3001               	movlw	1
 16880  1297  0022               	movlb	2	; select bank2
 16881  1298  07B6               	addwf	(_Timer0^(0+256)+1),f
 16882  1299  3000               	movlw	0
 16883  129A  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 16884                           
 16885                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 16886  129B  3001               	movlw	1
 16887  129C  3E35               	addlw	_Timer0& (0+255)
 16888  129D  0086               	movwf	6
 16889  129E  3001               	movlw	1	; select bank2/3
 16890  129F  0087               	movwf	7
 16891  12A0  3F40               	moviw [0]fsr1
 16892  12A1  3A64               	xorlw	100
 16893  12A2  1D03               	skipz
 16894  12A3  2AA6               	goto	u664_25
 16895  12A4  3F41               	moviw [1]fsr1
 16896  12A5  3A00               	xorlw	0
 16897  12A6                     u664_25:	
 16898  12A6  1D03               	skipz
 16899  12A7  0008               	return
 16900                           
 16901                           ;MCU_B1.c: 162: Timer0.Count = 0;
 16902  12A8  01B6               	clrf	(_Timer0^(0+256)+1)
 16903  12A9  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 16904                           
 16905                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 16906  12AA  0021               	movlb	1	; select bank1
 16907  12AB  14A0               	bsf	_myMain^(0+128),1
 16908  12AC  0008               	return
 16909  12AD                     __end_of_TMR0_ISR:	
 16910                           
 16911                           	psect	text126
 16912  0043                     __ptext126:	
 16913 ;; *************** function _setDimmerLights_IntrControl *****************
 16914 ;; Defined at:
 16915 ;;		line 87 in file "../src/Dimmer_B1.c"
 16916 ;; Parameters:    Size  Location     Type
 16917 ;;  lights          1    wreg     unsigned char 
 16918 ;; Auto vars:     Size  Location     Type
 16919 ;;  lights          1    6[COMMON] unsigned char 
 16920 ;; Return value:  Size  Location     Type
 16921 ;;		None               void
 16922 ;; Registers used:
 16923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16924 ;; Tracked objects:
 16925 ;;		On entry : 0/0
 16926 ;;		On exit  : 0/0
 16927 ;;		Unchanged: 0/0
 16928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16930 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16931 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16932 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16933 ;;Total ram usage:        5 bytes
 16934 ;; Hardware stack levels used:    1
 16935 ;; Hardware stack levels required when called:    1
 16936 ;; This function calls:
 16937 ;;		_DimmerIntrPointSelect
 16938 ;; This function is called by:
 16939 ;;		_TMR0_ISR
 16940 ;; This function uses a non-reentrant model
 16941 ;;
 16942                           
 16943                           
 16944                           ;psect for function _setDimmerLights_IntrControl
 16945  0043                     _setDimmerLights_IntrControl:	
 16946                           
 16947                           ;incstack = 0
 16948                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16949                           ;setDimmerLights_IntrControl@lights stored from wreg
 16950  0043  00F6               	movwf	setDimmerLights_IntrControl@lights
 16951                           
 16952                           ;Dimmer_B1.c: 89: DimmerIntrPointSelect(lights);
 16953  0044  0876               	movf	setDimmerLights_IntrControl@lights,w
 16954  0045  319E  268A  3180   	fcall	_DimmerIntrPointSelect
 16955                           
 16956                           ;Dimmer_B1.c: 90: if (DimmerLightsIntr->GO == 1) {
 16957  0048  0879               	movf	_DimmerLightsIntr,w
 16958  0049  0086               	movwf	6
 16959  004A  3001               	movlw	1	; select bank2/3
 16960  004B  0087               	movwf	7
 16961  004C  1C01               	btfss	1,0
 16962  004D  28A3               	goto	i1l6545
 16963                           
 16964                           ;Dimmer_B1.c: 91: DimmerLightsIntr->Count++;
 16965  004E  3001               	movlw	1
 16966  004F  00F2               	movwf	??_setDimmerLights_IntrControl
 16967  0050  0879               	movf	_DimmerLightsIntr,w
 16968  0051  3E03               	addlw	3
 16969  0052  0086               	movwf	6
 16970  0053  3001               	movlw	1	; select bank2/3
 16971  0054  0087               	movwf	7
 16972  0055  0872               	movf	??_setDimmerLights_IntrControl,w
 16973  0056  0781               	addwf	1,f
 16974                           
 16975                           ;Dimmer_B1.c: 92: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue - Dimme
      +                          r->Correction)) {
 16976  0057  0021               	movlb	1	; select bank1
 16977  0058  0850               	movf	_Dimmer^(0+128),w
 16978  0059  3E02               	addlw	2
 16979  005A  0086               	movwf	6
 16980  005B  0187               	clrf	7
 16981  005C  0801               	movf	1,w
 16982  005D  00F2               	movwf	??_setDimmerLights_IntrControl
 16983  005E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16984  005F  09F2               	comf	??_setDimmerLights_IntrControl,f
 16985  0060  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 16986  0061  0AF2               	incf	??_setDimmerLights_IntrControl,f
 16987  0062  1903               	skipnz
 16988  0063  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 16989  0064  0879               	movf	_DimmerLightsIntr,w
 16990  0065  3E04               	addlw	4
 16991  0066  0086               	movwf	6
 16992  0067  3001               	movlw	1	; select bank2/3
 16993  0068  0087               	movwf	7
 16994  0069  0801               	movf	1,w
 16995  006A  0772               	addwf	??_setDimmerLights_IntrControl,w
 16996  006B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 16997  006C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 16998  006D  1803               	skipnc
 16999  006E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 17000  006F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 17001  0070  0879               	movf	_DimmerLightsIntr,w
 17002  0071  3E03               	addlw	3
 17003  0072  0086               	movwf	6
 17004  0073  3001               	movlw	1	; select bank2/3
 17005  0074  0087               	movwf	7
 17006  0075  0875               	movf	??_setDimmerLights_IntrControl+3,w
 17007  0076  3A80               	xorlw	128
 17008  0077  3C80               	sublw	128
 17009  0078  1D03               	skipz
 17010  0079  287C               	goto	u551_25
 17011  007A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 17012  007B  0201               	subwf	1,w
 17013  007C                     u551_25:	
 17014  007C  1C03               	skipc
 17015  007D  29A7               	goto	i1l6603
 17016                           
 17017                           ;Dimmer_B1.c: 93: DimmerLightsIntr->Count = 0;
 17018  007E  0879               	movf	_DimmerLightsIntr,w
 17019  007F  3E03               	addlw	3
 17020  0080  0086               	movwf	6
 17021  0081  3001               	movlw	1	; select bank2/3
 17022  0082  0087               	movwf	7
 17023  0083  0181               	clrf	1
 17024                           
 17025                           ;Dimmer_B1.c: 94: DimmerLightsIntr->GO = 0;
 17026  0084  0879               	movf	_DimmerLightsIntr,w
 17027  0085  0086               	movwf	6
 17028  0086  3001               	movlw	1	; select bank2/3
 17029  0087  0087               	movwf	7
 17030  0088  1001               	bcf	1,0
 17031                           
 17032                           ;Dimmer_B1.c: 96: if (DimmerLightsIntr->StatusFlag == 1) {
 17033  0089  0879               	movf	_DimmerLightsIntr,w
 17034  008A  0086               	movwf	6
 17035  008B  3001               	movlw	1	; select bank2/3
 17036  008C  0087               	movwf	7
 17037  008D  1F01               	btfss	1,6
 17038  008E  29A7               	goto	i1l6603
 17039                           
 17040                           ;Dimmer_B1.c: 97: DimmerLightsIntr->Flag = 1;
 17041  008F  0879               	movf	_DimmerLightsIntr,w
 17042  0090  3E08               	addlw	8
 17043  0091  0086               	movwf	6
 17044  0092  3001               	movlw	1	; select bank2/3
 17045  0093  0087               	movwf	7
 17046  0094  1401               	bsf	1,0
 17047                           
 17048                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Triac = 1;
 17049  0095  0879               	movf	_DimmerLightsIntr,w
 17050  0096  3E08               	addlw	8
 17051  0097  0086               	movwf	6
 17052  0098  3001               	movlw	1	; select bank2/3
 17053  0099  0087               	movwf	7
 17054  009A  1681               	bsf	1,5
 17055                           
 17056                           ;Dimmer_B1.c: 100: if (lights == 1) {
 17057  009B  0876               	movf	setDimmerLights_IntrControl@lights,w
 17058  009C  3A01               	xorlw	1
 17059  009D  1D03               	skipz
 17060  009E  29A7               	goto	i1l6603
 17061                           
 17062                           ;Dimmer_B1.c: 101: RA7 = 1;
 17063  009F  0020               	movlb	0	; select bank0
 17064  00A0  178C               	bsf	12,7	;volatile
 17065                           
 17066                           ;Dimmer_B1.c: 102: RB4=1;
 17067  00A1  160D               	bsf	13,4	;volatile
 17068                           
 17069                           ;Dimmer_B1.c: 103: }
 17070                           ;Dimmer_B1.c: 115: }
 17071                           ;Dimmer_B1.c: 116: }
 17072                           ;Dimmer_B1.c: 117: } else {
 17073  00A2  29A7               	goto	i1l6603
 17074  00A3                     i1l6545:	
 17075                           
 17076                           ;Dimmer_B1.c: 118: if (DimmerLightsIntr->Flag == 1) {
 17077  00A3  0879               	movf	_DimmerLightsIntr,w
 17078  00A4  3E08               	addlw	8
 17079  00A5  0086               	movwf	6
 17080  00A6  3001               	movlw	1	; select bank2/3
 17081  00A7  0087               	movwf	7
 17082  00A8  1C01               	btfss	1,0
 17083  00A9  29A7               	goto	i1l6603
 17084                           
 17085                           ;Dimmer_B1.c: 119: DimmerLightsIntr->Flag = 0;
 17086  00AA  0879               	movf	_DimmerLightsIntr,w
 17087  00AB  3E08               	addlw	8
 17088  00AC  0086               	movwf	6
 17089  00AD  3001               	movlw	1	; select bank2/3
 17090  00AE  0087               	movwf	7
 17091  00AF  1001               	bcf	1,0
 17092                           
 17093                           ;Dimmer_B1.c: 120: if (DimmerLightsIntr->Signal == 1) {
 17094  00B0  0879               	movf	_DimmerLightsIntr,w
 17095  00B1  0086               	movwf	6
 17096  00B2  3001               	movlw	1	; select bank2/3
 17097  00B3  0087               	movwf	7
 17098  00B4  1C81               	btfss	1,1
 17099  00B5  29A7               	goto	i1l6603
 17100                           
 17101                           ;Dimmer_B1.c: 121: DimmerLightsIntr->DimmingTime++;
 17102  00B6  3001               	movlw	1
 17103  00B7  00F2               	movwf	??_setDimmerLights_IntrControl
 17104  00B8  0A79               	incf	_DimmerLightsIntr,w
 17105  00B9  0086               	movwf	6
 17106  00BA  3001               	movlw	1	; select bank2/3
 17107  00BB  0087               	movwf	7
 17108  00BC  0872               	movf	??_setDimmerLights_IntrControl,w
 17109  00BD  0781               	addwf	1,f
 17110                           
 17111                           ;Dimmer_B1.c: 122: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17112  00BE  0A79               	incf	_DimmerLightsIntr,w
 17113  00BF  0086               	movwf	6
 17114  00C0  3001               	movlw	1	; select bank2/3
 17115  00C1  0087               	movwf	7
 17116  00C2  0879               	movf	_DimmerLightsIntr,w
 17117  00C3  3E02               	addlw	2
 17118  00C4  0084               	movwf	4
 17119  00C5  3001               	movlw	1	; select bank2/3
 17120  00C6  0085               	movwf	5
 17121  00C7  0800               	movf	0,w
 17122  00C8  0201               	subwf	1,w
 17123  00C9  1C03               	skipc
 17124  00CA  29A7               	goto	i1l6603
 17125                           
 17126                           ;Dimmer_B1.c: 123: DimmerLightsIntr->DimmingTime = 0;
 17127  00CB  0A79               	incf	_DimmerLightsIntr,w
 17128  00CC  0086               	movwf	6
 17129  00CD  3001               	movlw	1	; select bank2/3
 17130  00CE  0087               	movwf	7
 17131  00CF  0181               	clrf	1
 17132                           
 17133                           ;Dimmer_B1.c: 124: if (DimmerLightsIntr->AdjFlag == 1) {
 17134  00D0  0879               	movf	_DimmerLightsIntr,w
 17135  00D1  0086               	movwf	6
 17136  00D2  3001               	movlw	1	; select bank2/3
 17137  00D3  0087               	movwf	7
 17138  00D4  1D81               	btfss	1,3
 17139  00D5  290C               	goto	i1l6571
 17140                           
 17141                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->AdjStatus == 0) {
 17142  00D6  0879               	movf	_DimmerLightsIntr,w
 17143  00D7  0086               	movwf	6
 17144  00D8  3001               	movlw	1	; select bank2/3
 17145  00D9  0087               	movwf	7
 17146  00DA  1A01               	btfsc	1,4
 17147  00DB  28F3               	goto	i1l6565
 17148                           
 17149                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17150  00DC  0879               	movf	_DimmerLightsIntr,w
 17151  00DD  3E04               	addlw	4
 17152  00DE  0086               	movwf	6
 17153  00DF  3001               	movlw	1	; select bank2/3
 17154  00E0  0087               	movwf	7
 17155  00E1  3021               	movlw	33
 17156  00E2  0201               	subwf	1,w
 17157  00E3  1C03               	skipc
 17158  00E4  28ED               	goto	i1l6563
 17159                           
 17160                           ;Dimmer_B1.c: 127: DimmerLightsIntr->DimmingValue--;
 17161  00E5  0879               	movf	_DimmerLightsIntr,w
 17162  00E6  3E04               	addlw	4
 17163  00E7  0086               	movwf	6
 17164  00E8  3001               	movlw	1	; select bank2/3
 17165  00E9  0087               	movwf	7
 17166  00EA  3001               	movlw	1
 17167  00EB  0281               	subwf	1,f
 17168                           
 17169                           ;Dimmer_B1.c: 128: } else {
 17170  00EC  29A7               	goto	i1l6603
 17171  00ED                     i1l6563:	
 17172                           
 17173                           ;Dimmer_B1.c: 129: DimmerLightsIntr->AdjStatus = 1;
 17174  00ED  0879               	movf	_DimmerLightsIntr,w
 17175  00EE  0086               	movwf	6
 17176  00EF  3001               	movlw	1	; select bank2/3
 17177  00F0  0087               	movwf	7
 17178  00F1  1601               	bsf	1,4
 17179                           
 17180                           ;Dimmer_B1.c: 130: }
 17181                           ;Dimmer_B1.c: 131: } else {
 17182  00F2  29A7               	goto	i1l6603
 17183  00F3                     i1l6565:	
 17184                           
 17185                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17186  00F3  0879               	movf	_DimmerLightsIntr,w
 17187  00F4  3E04               	addlw	4
 17188  00F5  0086               	movwf	6
 17189  00F6  3001               	movlw	1	; select bank2/3
 17190  00F7  0087               	movwf	7
 17191  00F8  303C               	movlw	60
 17192  00F9  0201               	subwf	1,w
 17193  00FA  1803               	skipnc
 17194  00FB  2906               	goto	i1l6569
 17195                           
 17196                           ;Dimmer_B1.c: 133: DimmerLightsIntr->DimmingValue++;
 17197  00FC  3001               	movlw	1
 17198  00FD  00F2               	movwf	??_setDimmerLights_IntrControl
 17199  00FE  0879               	movf	_DimmerLightsIntr,w
 17200  00FF  3E04               	addlw	4
 17201  0100  0086               	movwf	6
 17202  0101  3001               	movlw	1	; select bank2/3
 17203  0102  0087               	movwf	7
 17204  0103  0872               	movf	??_setDimmerLights_IntrControl,w
 17205  0104  0781               	addwf	1,f
 17206                           
 17207                           ;Dimmer_B1.c: 134: } else {
 17208  0105  29A7               	goto	i1l6603
 17209  0106                     i1l6569:	
 17210                           
 17211                           ;Dimmer_B1.c: 135: DimmerLightsIntr->AdjStatus = 0;
 17212  0106  0879               	movf	_DimmerLightsIntr,w
 17213  0107  0086               	movwf	6
 17214  0108  3001               	movlw	1	; select bank2/3
 17215  0109  0087               	movwf	7
 17216  010A  1201               	bcf	1,4
 17217                           
 17218                           ;Dimmer_B1.c: 136: }
 17219                           ;Dimmer_B1.c: 137: }
 17220                           ;Dimmer_B1.c: 138: } else if (DimmerLightsIntr->AdjRF == 1) {
 17221  010B  29A7               	goto	i1l6603
 17222  010C                     i1l6571:	
 17223  010C  0879               	movf	_DimmerLightsIntr,w
 17224  010D  0086               	movwf	6
 17225  010E  3001               	movlw	1	; select bank2/3
 17226  010F  0087               	movwf	7
 17227  0110  1D01               	btfss	1,2
 17228  0111  2953               	goto	i1l6585
 17229                           
 17230                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17231  0112  0879               	movf	_DimmerLightsIntr,w
 17232  0113  3E05               	addlw	5
 17233  0114  0086               	movwf	6
 17234  0115  3001               	movlw	1	; select bank2/3
 17235  0116  0087               	movwf	7
 17236  0117  0879               	movf	_DimmerLightsIntr,w
 17237  0118  3E04               	addlw	4
 17238  0119  0084               	movwf	4
 17239  011A  3001               	movlw	1	; select bank2/3
 17240  011B  0085               	movwf	5
 17241  011C  0800               	movf	0,w
 17242  011D  0201               	subwf	1,w
 17243  011E  1803               	skipnc
 17244  011F  2928               	goto	i1l6577
 17245                           
 17246                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue--;
 17247  0120  0879               	movf	_DimmerLightsIntr,w
 17248  0121  3E04               	addlw	4
 17249  0122  0086               	movwf	6
 17250  0123  3001               	movlw	1	; select bank2/3
 17251  0124  0087               	movwf	7
 17252  0125  3001               	movlw	1
 17253  0126  0281               	subwf	1,f
 17254                           
 17255                           ;Dimmer_B1.c: 141: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17256  0127  293F               	goto	i1l6581
 17257  0128                     i1l6577:	
 17258  0128  0879               	movf	_DimmerLightsIntr,w
 17259  0129  3E04               	addlw	4
 17260  012A  0086               	movwf	6
 17261  012B  3001               	movlw	1	; select bank2/3
 17262  012C  0087               	movwf	7
 17263  012D  0879               	movf	_DimmerLightsIntr,w
 17264  012E  3E05               	addlw	5
 17265  012F  0084               	movwf	4
 17266  0130  3001               	movlw	1	; select bank2/3
 17267  0131  0085               	movwf	5
 17268  0132  0800               	movf	0,w
 17269  0133  0201               	subwf	1,w
 17270  0134  1803               	skipnc
 17271  0135  293F               	goto	i1l6581
 17272                           
 17273                           ;Dimmer_B1.c: 142: DimmerLightsIntr->DimmingValue++;
 17274  0136  3001               	movlw	1
 17275  0137  00F2               	movwf	??_setDimmerLights_IntrControl
 17276  0138  0879               	movf	_DimmerLightsIntr,w
 17277  0139  3E04               	addlw	4
 17278  013A  0086               	movwf	6
 17279  013B  3001               	movlw	1	; select bank2/3
 17280  013C  0087               	movwf	7
 17281  013D  0872               	movf	??_setDimmerLights_IntrControl,w
 17282  013E  0781               	addwf	1,f
 17283  013F                     i1l6581:	
 17284                           
 17285                           ;Dimmer_B1.c: 143: }
 17286                           ;Dimmer_B1.c: 144: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17287  013F  0879               	movf	_DimmerLightsIntr,w
 17288  0140  3E05               	addlw	5
 17289  0141  0086               	movwf	6
 17290  0142  3001               	movlw	1	; select bank2/3
 17291  0143  0087               	movwf	7
 17292  0144  0879               	movf	_DimmerLightsIntr,w
 17293  0145  3E04               	addlw	4
 17294  0146  0084               	movwf	4
 17295  0147  3001               	movlw	1	; select bank2/3
 17296  0148  0085               	movwf	5
 17297  0149  0800               	movf	0,w
 17298  014A  0601               	xorwf	1,w
 17299  014B  1D03               	skipz
 17300  014C  29A7               	goto	i1l6603
 17301                           
 17302                           ;Dimmer_B1.c: 145: DimmerLightsIntr->AdjRF = 0;
 17303  014D  0879               	movf	_DimmerLightsIntr,w
 17304  014E  0086               	movwf	6
 17305  014F  3001               	movlw	1	; select bank2/3
 17306  0150  0087               	movwf	7
 17307  0151  1101               	bcf	1,2
 17308  0152  296E               	goto	i1l6591
 17309  0153                     i1l6585:	
 17310                           ;Dimmer_B1.c: 147: }
 17311                           ;Dimmer_B1.c: 148: } else {
 17312                           
 17313                           ;Dimmer_B1.c: 146: DimmerLightsIntr->Signal = 0;
 17314                           
 17315                           
 17316                           ;Dimmer_B1.c: 149: if (DimmerLightsIntr->Status == 1) {
 17317  0153  0879               	movf	_DimmerLightsIntr,w
 17318  0154  0086               	movwf	6
 17319  0155  3001               	movlw	1	; select bank2/3
 17320  0156  0087               	movwf	7
 17321  0157  1E81               	btfss	1,5
 17322  0158  2974               	goto	i1l6593
 17323                           
 17324                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue--;
 17325  0159  0879               	movf	_DimmerLightsIntr,w
 17326  015A  3E04               	addlw	4
 17327  015B  0086               	movwf	6
 17328  015C  3001               	movlw	1	; select bank2/3
 17329  015D  0087               	movwf	7
 17330  015E  3001               	movlw	1
 17331  015F  0281               	subwf	1,f
 17332                           
 17333                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17334  0160  0879               	movf	_DimmerLightsIntr,w
 17335  0161  3E05               	addlw	5
 17336  0162  0086               	movwf	6
 17337  0163  3001               	movlw	1	; select bank2/3
 17338  0164  0087               	movwf	7
 17339  0165  0879               	movf	_DimmerLightsIntr,w
 17340  0166  3E04               	addlw	4
 17341  0167  0084               	movwf	4
 17342  0168  3001               	movlw	1	; select bank2/3
 17343  0169  0085               	movwf	5
 17344  016A  0800               	movf	0,w
 17345  016B  0201               	subwf	1,w
 17346  016C  1C03               	skipc
 17347  016D  29A7               	goto	i1l6603
 17348  016E                     i1l6591:	
 17349                           
 17350                           ;Dimmer_B1.c: 152: DimmerLightsIntr->Signal = 0;
 17351  016E  0879               	movf	_DimmerLightsIntr,w
 17352  016F  0086               	movwf	6
 17353  0170  3001               	movlw	1	; select bank2/3
 17354  0171  0087               	movwf	7
 17355  0172  1081               	bcf	1,1
 17356                           
 17357                           ;Dimmer_B1.c: 153: }
 17358                           ;Dimmer_B1.c: 154: } else {
 17359  0173  29A7               	goto	i1l6603
 17360  0174                     i1l6593:	
 17361                           
 17362                           ;Dimmer_B1.c: 155: DimmerLightsIntr->DimmingValue++;
 17363  0174  3001               	movlw	1
 17364  0175  00F2               	movwf	??_setDimmerLights_IntrControl
 17365  0176  0879               	movf	_DimmerLightsIntr,w
 17366  0177  3E04               	addlw	4
 17367  0178  0086               	movwf	6
 17368  0179  3001               	movlw	1	; select bank2/3
 17369  017A  0087               	movwf	7
 17370  017B  0872               	movf	??_setDimmerLights_IntrControl,w
 17371  017C  0781               	addwf	1,f
 17372                           
 17373                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17374  017D  0879               	movf	_DimmerLightsIntr,w
 17375  017E  3E04               	addlw	4
 17376  017F  0086               	movwf	6
 17377  0180  3001               	movlw	1	; select bank2/3
 17378  0181  0087               	movwf	7
 17379  0182  0879               	movf	_DimmerLightsIntr,w
 17380  0183  3E06               	addlw	6
 17381  0184  0084               	movwf	4
 17382  0185  3001               	movlw	1	; select bank2/3
 17383  0186  0085               	movwf	5
 17384  0187  0800               	movf	0,w
 17385  0188  0201               	subwf	1,w
 17386  0189  1C03               	skipc
 17387  018A  29A7               	goto	i1l6603
 17388                           
 17389                           ;Dimmer_B1.c: 157: DimmerLightsIntr->Signal = 0;
 17390  018B  0879               	movf	_DimmerLightsIntr,w
 17391  018C  0086               	movwf	6
 17392  018D  3001               	movlw	1	; select bank2/3
 17393  018E  0087               	movwf	7
 17394  018F  1081               	bcf	1,1
 17395                           
 17396                           ;Dimmer_B1.c: 158: DimmerLightsIntr->StatusFlag = 0;
 17397  0190  0879               	movf	_DimmerLightsIntr,w
 17398  0191  0086               	movwf	6
 17399  0192  3001               	movlw	1	; select bank2/3
 17400  0193  0087               	movwf	7
 17401  0194  1301               	bcf	1,6
 17402                           
 17403                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Clear = 1;
 17404  0195  0879               	movf	_DimmerLightsIntr,w
 17405  0196  3E09               	addlw	9
 17406  0197  0086               	movwf	6
 17407  0198  3001               	movlw	1	; select bank2/3
 17408  0199  0087               	movwf	7
 17409  019A  1501               	bsf	1,2
 17410                           
 17411                           ;Dimmer_B1.c: 160: Dimmer->Detect = 1;
 17412  019B  0021               	movlb	1	; select bank1
 17413  019C  0850               	movf	_Dimmer^(0+128),w
 17414  019D  0086               	movwf	6
 17415  019E  0187               	clrf	7
 17416  019F  1401               	bsf	1,0
 17417                           
 17418                           ;Dimmer_B1.c: 162: if (lights == 1) {
 17419  01A0  0876               	movf	setDimmerLights_IntrControl@lights,w
 17420  01A1  3A01               	xorlw	1
 17421  01A2  1D03               	skipz
 17422  01A3  29A7               	goto	i1l6603
 17423                           
 17424                           ;Dimmer_B1.c: 163: RA3 = 0;
 17425  01A4  0020               	movlb	0	; select bank0
 17426  01A5  118C               	bcf	12,3	;volatile
 17427                           
 17428                           ;Dimmer_B1.c: 164: RC7=!1;
 17429  01A6  138E               	bcf	14,7	;volatile
 17430  01A7                     i1l6603:	
 17431                           ;Dimmer_B1.c: 165: }
 17432                           ;Dimmer_B1.c: 177: ;;
 17433                           
 17434                           
 17435                           ;Dimmer_B1.c: 178: }
 17436                           ;Dimmer_B1.c: 179: }
 17437                           ;Dimmer_B1.c: 180: }
 17438                           ;Dimmer_B1.c: 181: }
 17439                           ;Dimmer_B1.c: 182: }
 17440                           ;Dimmer_B1.c: 183: }
 17441                           ;Dimmer_B1.c: 184: }
 17442                           ;Dimmer_B1.c: 185: if (DimmerLightsIntr->Triac == 1) {
 17443  01A7  0879               	movf	_DimmerLightsIntr,w
 17444  01A8  3E08               	addlw	8
 17445  01A9  0086               	movwf	6
 17446  01AA  3001               	movlw	1	; select bank2/3
 17447  01AB  0087               	movwf	7
 17448  01AC  1E81               	btfss	1,5
 17449  01AD  29D3               	goto	i1l6617
 17450                           
 17451                           ;Dimmer_B1.c: 186: DimmerLightsIntr->TriacTime++;
 17452  01AE  3001               	movlw	1
 17453  01AF  00F2               	movwf	??_setDimmerLights_IntrControl
 17454  01B0  0879               	movf	_DimmerLightsIntr,w
 17455  01B1  3E07               	addlw	7
 17456  01B2  0086               	movwf	6
 17457  01B3  3001               	movlw	1	; select bank2/3
 17458  01B4  0087               	movwf	7
 17459  01B5  0872               	movf	??_setDimmerLights_IntrControl,w
 17460  01B6  0781               	addwf	1,f
 17461                           
 17462                           ;Dimmer_B1.c: 187: if (DimmerLightsIntr->TriacTime >= 5) {
 17463  01B7  0879               	movf	_DimmerLightsIntr,w
 17464  01B8  3E07               	addlw	7
 17465  01B9  0086               	movwf	6
 17466  01BA  3001               	movlw	1	; select bank2/3
 17467  01BB  0087               	movwf	7
 17468  01BC  3005               	movlw	5
 17469  01BD  0201               	subwf	1,w
 17470  01BE  1C03               	skipc
 17471  01BF  29D3               	goto	i1l6617
 17472                           
 17473                           ;Dimmer_B1.c: 188: DimmerLightsIntr->TriacTime = 0;
 17474  01C0  0879               	movf	_DimmerLightsIntr,w
 17475  01C1  3E07               	addlw	7
 17476  01C2  0086               	movwf	6
 17477  01C3  3001               	movlw	1	; select bank2/3
 17478  01C4  0087               	movwf	7
 17479  01C5  0181               	clrf	1
 17480                           
 17481                           ;Dimmer_B1.c: 189: DimmerLightsIntr->Triac = 0;
 17482  01C6  0879               	movf	_DimmerLightsIntr,w
 17483  01C7  3E08               	addlw	8
 17484  01C8  0086               	movwf	6
 17485  01C9  3001               	movlw	1	; select bank2/3
 17486  01CA  0087               	movwf	7
 17487  01CB  1281               	bcf	1,5
 17488                           
 17489                           ;Dimmer_B1.c: 192: if (lights == 1) {
 17490  01CC  0876               	movf	setDimmerLights_IntrControl@lights,w
 17491  01CD  3A01               	xorlw	1
 17492  01CE  1D03               	skipz
 17493  01CF  29D3               	goto	i1l6617
 17494                           
 17495                           ;Dimmer_B1.c: 193: RA7 = 0;
 17496  01D0  0020               	movlb	0	; select bank0
 17497  01D1  138C               	bcf	12,7	;volatile
 17498                           
 17499                           ;Dimmer_B1.c: 194: RB4=0;
 17500  01D2  120D               	bcf	13,4	;volatile
 17501  01D3                     i1l6617:	
 17502                           
 17503                           ;Dimmer_B1.c: 195: }
 17504                           ;Dimmer_B1.c: 207: }
 17505                           ;Dimmer_B1.c: 208: }
 17506                           ;Dimmer_B1.c: 209: if (DimmerLightsIntr->TriacFlag == 1) {
 17507  01D3  0879               	movf	_DimmerLightsIntr,w
 17508  01D4  3E09               	addlw	9
 17509  01D5  0086               	movwf	6
 17510  01D6  3001               	movlw	1	; select bank2/3
 17511  01D7  0087               	movwf	7
 17512  01D8  1E81               	btfss	1,5
 17513  01D9  0008               	return
 17514                           
 17515                           ;Dimmer_B1.c: 210: DimmerLightsIntr->TriacCount++;
 17516  01DA  3001               	movlw	1
 17517  01DB  00F2               	movwf	??_setDimmerLights_IntrControl
 17518  01DC  0879               	movf	_DimmerLightsIntr,w
 17519  01DD  3E0A               	addlw	10
 17520  01DE  0086               	movwf	6
 17521  01DF  3001               	movlw	1	; select bank2/3
 17522  01E0  0087               	movwf	7
 17523  01E1  0872               	movf	??_setDimmerLights_IntrControl,w
 17524  01E2  0781               	addwf	1,f
 17525                           
 17526                           ;Dimmer_B1.c: 211: if (DimmerLightsIntr->TriacCount == 70) {
 17527  01E3  0879               	movf	_DimmerLightsIntr,w
 17528  01E4  3E0A               	addlw	10
 17529  01E5  0086               	movwf	6
 17530  01E6  3001               	movlw	1	; select bank2/3
 17531  01E7  0087               	movwf	7
 17532  01E8  0801               	movf	1,w
 17533  01E9  3A46               	xorlw	70
 17534  01EA  1D03               	skipz
 17535  01EB  0008               	return
 17536                           
 17537                           ;Dimmer_B1.c: 212: DimmerLightsIntr->TriacCount = 0;
 17538  01EC  0879               	movf	_DimmerLightsIntr,w
 17539  01ED  3E0A               	addlw	10
 17540  01EE  0086               	movwf	6
 17541  01EF  3001               	movlw	1	; select bank2/3
 17542  01F0  0087               	movwf	7
 17543  01F1  0181               	clrf	1
 17544                           
 17545                           ;Dimmer_B1.c: 213: DimmerLightsIntr->TriacFlag = 0;
 17546  01F2  0879               	movf	_DimmerLightsIntr,w
 17547  01F3  3E09               	addlw	9
 17548  01F4  0086               	movwf	6
 17549  01F5  3001               	movlw	1	; select bank2/3
 17550  01F6  0087               	movwf	7
 17551  01F7  1281               	bcf	1,5
 17552  01F8  0008               	return
 17553  01F9                     __end_of_setDimmerLights_IntrControl:	
 17554                           
 17555                           	psect	text127
 17556  1E8A                     __ptext127:	
 17557 ;; *************** function _DimmerIntrPointSelect *****************
 17558 ;; Defined at:
 17559 ;;		line 65 in file "../src/Dimmer_B1.c"
 17560 ;; Parameters:    Size  Location     Type
 17561 ;;  lights          1    wreg     unsigned char 
 17562 ;; Auto vars:     Size  Location     Type
 17563 ;;  lights          1    1[COMMON] unsigned char 
 17564 ;; Return value:  Size  Location     Type
 17565 ;;		None               void
 17566 ;; Registers used:
 17567 ;;		wreg
 17568 ;; Tracked objects:
 17569 ;;		On entry : 0/0
 17570 ;;		On exit  : 0/0
 17571 ;;		Unchanged: 0/0
 17572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17577 ;;Total ram usage:        2 bytes
 17578 ;; Hardware stack levels used:    1
 17579 ;; This function calls:
 17580 ;;		Nothing
 17581 ;; This function is called by:
 17582 ;;		_setDimmerLights_IntrControl
 17583 ;; This function uses a non-reentrant model
 17584 ;;
 17585                           
 17586                           
 17587                           ;psect for function _DimmerIntrPointSelect
 17588  1E8A                     _DimmerIntrPointSelect:	
 17589                           
 17590                           ;incstack = 0
 17591                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17592                           ;DimmerIntrPointSelect@lights stored from wreg
 17593  1E8A  00F1               	movwf	DimmerIntrPointSelect@lights
 17594                           
 17595                           ;Dimmer_B1.c: 67: if (lights == 1) {
 17596  1E8B  0871               	movf	DimmerIntrPointSelect@lights,w
 17597  1E8C  3A01               	xorlw	1
 17598  1E8D  1D03               	skipz
 17599  1E8E  0008               	return
 17600                           
 17601                           ;Dimmer_B1.c: 68: DimmerLightsIntr = &DimmerLights1;
 17602  1E8F  30C0               	movlw	_DimmerLights1& (0+255)
 17603  1E90  00F0               	movwf	??_DimmerIntrPointSelect
 17604  1E91  0870               	movf	??_DimmerIntrPointSelect,w
 17605  1E92  00F9               	movwf	_DimmerLightsIntr
 17606  1E93  0008               	return
 17607  1E94                     __end_of_DimmerIntrPointSelect:	
 17608                           
 17609                           	psect	text128
 17610  1F10                     __ptext128:	
 17611 ;; *************** function _IOC_ISR *****************
 17612 ;; Defined at:
 17613 ;;		line 291 in file "../src/MCU_B1.c"
 17614 ;; Parameters:    Size  Location     Type
 17615 ;;		None
 17616 ;; Auto vars:     Size  Location     Type
 17617 ;;		None
 17618 ;; Return value:  Size  Location     Type
 17619 ;;		None               void
 17620 ;; Registers used:
 17621 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17622 ;; Tracked objects:
 17623 ;;		On entry : 0/0
 17624 ;;		On exit  : 0/0
 17625 ;;		Unchanged: 0/0
 17626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17631 ;;Total ram usage:        0 bytes
 17632 ;; Hardware stack levels used:    1
 17633 ;; Hardware stack levels required when called:    3
 17634 ;; This function calls:
 17635 ;;		_setDimmerReClock
 17636 ;; This function is called by:
 17637 ;;		_ISR
 17638 ;; This function uses a non-reentrant model
 17639 ;;
 17640                           
 17641                           
 17642                           ;psect for function _IOC_ISR
 17643  1F10                     _IOC_ISR:	
 17644                           
 17645                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 17646                           
 17647                           ;incstack = 0
 17648                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17649  1F10  1D8B               	btfss	11,3	;volatile
 17650  1F11  0008               	return
 17651  1F12  0027               	movlb	7	; select bank7
 17652  1F13  1D16               	btfss	22,2	;volatile
 17653  1F14  0008               	return
 17654                           
 17655                           ;MCU_B1.c: 293: IOCBF2 = 0;
 17656  1F15  1116               	bcf	22,2	;volatile
 17657                           
 17658                           ;MCU_B1.c: 294: IOCIF = 0;
 17659  1F16  100B               	bcf	11,0	;volatile
 17660                           
 17661                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 17662  1F17  0021               	movlb	1	; select bank1
 17663  1F18  1C20               	btfss	_myMain^(0+128),0
 17664  1F19  0008               	return
 17665                           
 17666                           ;MCU_B1.c: 297: setDimmerReClock();
 17667  1F1A  319E  2603         	fcall	_setDimmerReClock
 17668  1F1C  0008               	return
 17669  1F1D                     __end_of_IOC_ISR:	
 17670                           
 17671                           	psect	text129
 17672  1E03                     __ptext129:	
 17673 ;; *************** function _setDimmerReClock *****************
 17674 ;; Defined at:
 17675 ;;		line 169 in file "../src/MCU_B1.c"
 17676 ;; Parameters:    Size  Location     Type
 17677 ;;		None
 17678 ;; Auto vars:     Size  Location     Type
 17679 ;;		None
 17680 ;; Return value:  Size  Location     Type
 17681 ;;		None               void
 17682 ;; Registers used:
 17683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17684 ;; Tracked objects:
 17685 ;;		On entry : 0/0
 17686 ;;		On exit  : 0/0
 17687 ;;		Unchanged: 0/0
 17688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;Total ram usage:        0 bytes
 17694 ;; Hardware stack levels used:    1
 17695 ;; Hardware stack levels required when called:    2
 17696 ;; This function calls:
 17697 ;;		_setDimmerLights_IntrIOC_GO
 17698 ;; This function is called by:
 17699 ;;		_IOC_ISR
 17700 ;; This function uses a non-reentrant model
 17701 ;;
 17702                           
 17703                           
 17704                           ;psect for function _setDimmerReClock
 17705  1E03                     _setDimmerReClock:	
 17706                           
 17707                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 17708                           
 17709                           ;incstack = 0
 17710                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17711  1E03  3001               	movlw	1
 17712  1E04  3191  2166         	fcall	_setDimmerLights_IntrIOC_GO
 17713  1E06  0008               	return
 17714  1E07                     __end_of_setDimmerReClock:	
 17715                           
 17716                           	psect	text130
 17717  1166                     __ptext130:	
 17718 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17719 ;; Defined at:
 17720 ;;		line 28 in file "../src/Dimmer_B1.c"
 17721 ;; Parameters:    Size  Location     Type
 17722 ;;  lights          1    wreg     unsigned char 
 17723 ;; Auto vars:     Size  Location     Type
 17724 ;;  lights          1    2[COMMON] unsigned char 
 17725 ;; Return value:  Size  Location     Type
 17726 ;;		None               void
 17727 ;; Registers used:
 17728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17729 ;; Tracked objects:
 17730 ;;		On entry : 0/0
 17731 ;;		On exit  : 0/0
 17732 ;;		Unchanged: 0/0
 17733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;Total ram usage:        1 bytes
 17739 ;; Hardware stack levels used:    1
 17740 ;; Hardware stack levels required when called:    1
 17741 ;; This function calls:
 17742 ;;		_DimmerIntrIOCPointSelect
 17743 ;; This function is called by:
 17744 ;;		_setDimmerReClock
 17745 ;; This function uses a non-reentrant model
 17746 ;;
 17747                           
 17748                           
 17749                           ;psect for function _setDimmerLights_IntrIOC_GO
 17750  1166                     _setDimmerLights_IntrIOC_GO:	
 17751                           
 17752                           ;incstack = 0
 17753                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17754                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17755  1166  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17756                           
 17757                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17758  1167  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17759  1168  319E  269E  3191   	fcall	_DimmerIntrIOCPointSelect
 17760                           
 17761                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17762  116B  0021               	movlb	1	; select bank1
 17763  116C  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17764  116D  0086               	movwf	6
 17765  116E  3001               	movlw	1	; select bank2/3
 17766  116F  0087               	movwf	7
 17767  1170  1801               	btfsc	1,0
 17768  1171  0008               	return
 17769  1172  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17770  1173  3E09               	addlw	9
 17771  1174  0086               	movwf	6
 17772  1175  3001               	movlw	1	; select bank2/3
 17773  1176  0087               	movwf	7
 17774  1177  1A81               	btfsc	1,5
 17775  1178  0008               	return
 17776                           
 17777                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17778  1179  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17779  117A  0086               	movwf	6
 17780  117B  3001               	movlw	1	; select bank2/3
 17781  117C  0087               	movwf	7
 17782  117D  1401               	bsf	1,0
 17783                           
 17784                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17785  117E  0852               	movf	_DimmerLightsIntrIOC^(0+128),w
 17786  117F  3E09               	addlw	9
 17787  1180  0086               	movwf	6
 17788  1181  3001               	movlw	1	; select bank2/3
 17789  1182  0087               	movwf	7
 17790  1183  1681               	bsf	1,5
 17791  1184  0008               	return
 17792  1185                     __end_of_setDimmerLights_IntrIOC_GO:	
 17793                           
 17794                           	psect	text131
 17795  1E9E                     __ptext131:	
 17796 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17797 ;; Defined at:
 17798 ;;		line 8 in file "../src/Dimmer_B1.c"
 17799 ;; Parameters:    Size  Location     Type
 17800 ;;  lights          1    wreg     unsigned char 
 17801 ;; Auto vars:     Size  Location     Type
 17802 ;;  lights          1    1[COMMON] unsigned char 
 17803 ;; Return value:  Size  Location     Type
 17804 ;;		None               void
 17805 ;; Registers used:
 17806 ;;		wreg
 17807 ;; Tracked objects:
 17808 ;;		On entry : 0/0
 17809 ;;		On exit  : 0/0
 17810 ;;		Unchanged: 0/0
 17811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17813 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17816 ;;Total ram usage:        2 bytes
 17817 ;; Hardware stack levels used:    1
 17818 ;; This function calls:
 17819 ;;		Nothing
 17820 ;; This function is called by:
 17821 ;;		_setDimmerLights_IntrIOC_GO
 17822 ;; This function uses a non-reentrant model
 17823 ;;
 17824                           
 17825                           
 17826                           ;psect for function _DimmerIntrIOCPointSelect
 17827  1E9E                     _DimmerIntrIOCPointSelect:	
 17828                           
 17829                           ;incstack = 0
 17830                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17831                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17832  1E9E  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17833                           
 17834                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17835  1E9F  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17836  1EA0  3A01               	xorlw	1
 17837  1EA1  1D03               	skipz
 17838  1EA2  0008               	return
 17839                           
 17840                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17841  1EA3  30C0               	movlw	_DimmerLights1& (0+255)
 17842  1EA4  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17843  1EA5  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17844  1EA6  0021               	movlb	1	; select bank1
 17845  1EA7  00D2               	movwf	_DimmerLightsIntrIOC^(0+128)
 17846  1EA8  0008               	return
 17847  1EA9                     __end_of_DimmerIntrIOCPointSelect:	
 17848  007E                     btemp	set	126	;btemp
 17849  007E                     pic14e$flags	set	126
 17850  007E                     wtemp	set	126
 17851  007E                     wtemp0	set	126
 17852  0080                     wtemp1	set	128
 17853  0082                     wtemp2	set	130
 17854  0084                     wtemp3	set	132
 17855  0086                     wtemp4	set	134
 17856  0088                     wtemp5	set	136
 17857  007F                     wtemp6	set	127
 17858  007E                     ttemp	set	126
 17859  007E                     ttemp0	set	126
 17860  0081                     ttemp1	set	129
 17861  0084                     ttemp2	set	132
 17862  0087                     ttemp3	set	135
 17863  007F                     ttemp4	set	127
 17864  007E                     ltemp	set	126
 17865  007E                     ltemp0	set	126
 17866  0082                     ltemp1	set	130
 17867  0086                     ltemp2	set	134
 17868  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         188
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     77      80
    BANK1            80      0      79
    BANK2            80      0      79
    BANK3            80      0      56
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_Main->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   89723
                                             73 BANK0      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                            _my_Main
 ---------------------------------------------------------------------------------
 (1) _my_Main                                              0     0      0    1375
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    6649
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    6649
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    6626
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   19674
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   19674
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    8759
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    8545
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0     927
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     194
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1282
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1282
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   26978
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   26978
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   26302
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   25015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0    9962
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1092
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11267
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11157
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11091
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11047
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    5308
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    5308
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    5308
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      44
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    3802
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     196
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2202
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1375
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1375
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     230
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     230
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5701
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0    9615
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0    9525
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6333
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1663
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1220
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0      90
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      66
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      24
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      44
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      44
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    9166
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    9166
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     386
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6117
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5427
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     450
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     386
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      44
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      44
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_Main
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      38      11       70.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     133      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     133      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Oct 20 15:25:54 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     l90 096A                                       l92 097E  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1224  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006E       __end_of_getDimmerLights_StatusFlag 1E9E  
             _getDimmerLights_StatusFlag 1E94                   __end_of_setDelayOff_GO 0BD2  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0992  
                           ___ftadd@sign 0048                                      l100 17A9  
                                    l101 17A5                                      l102 1793  
                                    l104 17A3                                      l243 0AE2  
                                    l316 10A2                                      l317 10A3  
                                    l360 12D5                                      l781 156F  
                                    _GIE 005F                                      _CRC 00CF  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 00BE  
                                    _RC0 0070                                      _RA4 0064  
                                    _LED 00CB                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00C6  
                                    _ISR 0004          setPowerFault_Exceptions@command 0030  
                                    _Sw1 01CF                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 10AC           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1DEB                          __end_of_ADC_Set 1E51  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0E72  
                  _setDimmerLights_ERROR 17B0                    _setDimmerLights_AdjRF 12AD  
                  _setDimmerLights_AdjGo 1FCF                  __size_of_setTemp_Enable 0008  
                                   ?_ISR 0070                          _PowerFault_Main 1DF1  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1F1D  
                           ___ftdiv@sign 003D                                     l1241 13F1  
                                   l1250 15FD                                     l1228 11C1  
               ?_DimmerLightsPointSelect 0070                                     l2236 1F82  
                                   l1702 0825                          __end_of_IOC_Set 1F37  
                                   l2711 0A7B                                     l2537 16D5  
                                   l1906 1458                                     l2740 03D3  
                                   l2717 0A92                                     l1933 14EB  
                                   l1870 0C7E                                     l5215 122F  
                                   l5303 068B                                     l6111 0D1C  
                                   l5231 0363                                     l1872 0C8F  
                                   l6121 0D2E                                     l6105 0D13  
                                   l6113 0D1F                                     l1865 0C59  
                                   l6211 1516                                     l6123 0D31  
                                   l6107 0D16                                     l5227 035C  
                                   l7003 020F                                     l5181 0A51  
                                   l5325 06E5                                     l5317 06CC  
                                   l6061 0AB9                                     l5261 03B2  
                                   l5237 0372                                     l5423 0FF7  
                                   l5415 0FDD                                     l5407 0FC2  
                                   l6143 0D48                                     l6127 0D37  
                                   l6055 0AB0                                     l5255 039F  
                                   l1888 1F77                                     l5185 0A58  
                                   l5417 0FE6                                     l5409 0FD0  
                                   l6145 0D60                                     l6081 0AEB  
                                   l6057 0AB3                                     l5273 03E5  
                                   l5257 03A9                                     l5249 038C  
                                   l5361 061A                                     l5345 05D7  
                                   l5441 1089                                     l6171 12E6  
                                   l5195 0A80                                     l5187 0A62  
                                   l5419 0FE9                                     l6075 0ACA  
                                   l5267 03C5                                     l5259 03AE  
                                   l5339 05C1                                     l7043 02AF  
                                   l7019 0244                                     l6173 12F1  
                                   l6181 120E                                     l5525 084F  
                                   l5197 0A88                                     l5189 0A67  
                                   l6093 0AFE                                     l6085 0AF1  
                                   l5277 03F7                                     l5269 03CF  
                                   l5373 0636                                     l5357 0612  
                                   l5445 108F                                     l7029 0271  
                                   l7053 02E1                                     l6431 15A2  
                                   l5551 0886                                     l5543 0875  
                                   l5535 0857                                     l5519 0844  
                                   l5607 07EE                                     l6087 0AF5  
                                   l6079 0AE8                                     l5287 0412  
                                   l5471 136F                                     l6185 1214  
                                   l6441 15B2                                     l6433 15A5  
                                   l5537 0863                                     l5297 0675  
                                   l6257 13D9                                     l6089 0AF8  
                                   l5369 062E                                     l6417 0CEB  
                                   l7241 14B7                                     l6179 120B  
                                   l6443 15B5                                     l5547 087E  
                                   l6437 15AB                                     l5389 0F92  
                                   l7181 049C                                     l6381 0927  
                                   l6447 15BB                                     l7431 1252  
                                   l7089 177D                                     l5913 1122  
                                   l5905 14D9                                     l5673 0BA4  
                                   l5915 1125                                     l7435 125D  
                                   l7451 0B20                                     l7515 0EC7  
                                   l5931 1274                                     l5747 1468  
                                   l5683 0BC3                                     l7461 0B30  
                                   l5677 0BAA                                     l7621 1742  
                                   l5919 112B                                     l7447 0B1A  
                                   l7455 0B26                                     l7543 1566  
                                   l5935 127A                                     l5679 0BB7  
                                   l6751 11CE                                     l7481 0B5B  
                                   l7465 0B36                                     l7545 156B  
                                   l7537 1553                                     l7801 0DF0  
                                   l5929 1271                                     l5881 075C  
                                   l7609 172C                                     l6753 11D1  
                                   l7651 09B9                                     l7803 0DF2  
                                   l5867 0724                                     l7731 0F42  
                                   l7707 0F0F                                     l7299 16BE  
                                   l7477 0B55                                     l7485 0B61  
                                   l7469 0B3C                                     l7653 09BF  
                                   l5797 10F8                                     l5877 0746  
                                   l7741 0F59                                     l7709 0F15  
                                   l6757 11D6                                     l7663 09E7  
                                   l6775 15DD                                     l5799 10FC  
                                   l7575 0C27                                     l7823 0C4D  
                                   l7591 167D                                     l7743 0F5B  
                                   l6769 15C8                                     l7569 0C0C  
                                   l7921 08BC                                     l7579 0C30  
                                   l7843 0C69                                     l7587 1671  
                                   l7685 1710                                     l7765 0D9E  
                                   l6981 1F87                                     l7917 08B1  
                  _myMain_Initialization 1F90                                     l7767 0DA4  
                                   l7689 1717                                     l7793 0DE0  
                                   l6985 1F8D                                     l7789 0DD2  
                                   _CFGS 0CAE                                     _FREE 0CAC  
                                   _LATA 010C                                     _LATB 010D  
                                   _LATC 010E                                     u4025 0F99  
                                   u4055 0FC3                                     u3505 0A76  
                                   u3525 0A83                                     u4085 0FDE  
                                   u4165 135B                                     u4255 085A  
                                   u4360 079C                                     u5065 12DB  
                                   u3705 03A0                                     u4275 0864  
                                   u3555 0A99                                     _PEIE 005E  
                                   u4605 1111                                     u4285 086E  
                                   u3485 0A5D                                     u4365 079A  
                                   u4295 0876                                     u3735 03B3  
                                   u3835 069D                                     u3675 038D  
                                   u3915 05E3                                     u3845 06AD  
                                   u3765 03C6                                     u3925 05F3  
                                   u3855 06CD                                     u3865 06DC  
                                   u3945 061B                                     u3875 06E6  
                                   u3955 0621                                     u6535 1773  
                                   u3985 0637                                     u6715 11B8  
                                   u3995 063D                                     u6735 14AE  
                                   u6745 14BD                                     u6765 1314  
                                   u6785 16A2                                     u6795 16CD  
                                   _LWLO 0CAD                                     _RFSW 007A  
                                   _TMR0 0015                                     _RSSI 00D3  
                                   _WREN 0CAA                                     _Buz1 00B2  
                                   _main 088D                             ___ftpack@arg 0020  
      __end_of_PowerFault_Initialization 1DF1                      __end_of_DlyOff_Main 0E72  
                        __end_of_RF_Main 1DFA                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0010                                     btemp 007E  
                                   ltemp 007E            __size_of_setRF_Initialization 0007  
                       _setDimmerReClock 1E03                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 0800                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1500                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 0076  
                                  ??_ISR 0077                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1F10            __end_of_DimmerIntrPointSelect 1E94  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
              setPowerFault_Exceptions@i 002F                                    ?_main 0069  
                        __end_of___awdiv 088D                          __end_of___ftadd 042A  
                          __CFG_WDTE$OFF 0000                          __end_of___ftdiv 0707  
                        __end_of___ftmul 065E                          ___awdiv@divisor 0020  
                        __end_of___fttol 1000             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                   _setDimmerLights_Switch 1F9F  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 111A  
                          __CFG_WRT$HALF 0000                                    _Temp1 00D9  
     __end_of_setDimmerLights_IntrIOC_GO 1185               _setDimmerLights_IntrIOC_GO 1166  
                       __end_of_TMR0_ISR 12AD             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR0_Set 1E60                                    _getAD 11C3  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 157E  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024                          __end_of_my_Main 16D7  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03E0                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0012  
          __end_of_setLED_Initialization 1086                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0792  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 09ED  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 08E2  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1E1F  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0EF3                     _setSw_Initialization 1FBF  
                setOverTemp_Exceptions@i 002F                                   ??_main 006D  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0BD2                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 1DF4                               _Receive_OK 03E0  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1ECA                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 008B  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0024  
                   __end_of_getTemp_Safe 1E27                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0DF8  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 0069  
                                 _ADRESH 009C                                   _ADRESL 009B  
                      ?_getPowerFault_AD 0070                         ___awdiv@dividend 0022  
                       __end_of___awtoft 1246                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0AA9                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1FAF                                   i1l6603 01A7  
                                 i1l6617 01D3                                   i1l6545 00A3  
                                 i1l6563 00ED                                   i1l6571 010C  
                                 i1l6581 013F                                   i1l6565 00F3  
                                 i1l6591 016E                                   i1l6593 0174  
                                 i1l6577 0128                                   i1l6585 0153  
                                 i1l6569 0106                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                                   u551_25 007C  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                                 u664_25 12A6                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1133  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E3C  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 10D5  
                                 _Dimmer 00D0                                   _DlySw1 0162  
             __end_of_Mcu_Initialization 1F63                      __end_of_Buzzer_Main 17B0  
                                 _Memory 013D                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 1FEF               _setDimmerLights_TriggerAdj 1FDF  
                                 ___bmul 1086            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D7                                   _s_data 00D8  
                                 _setLED 0B0A                                   _myMain 00A0  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 0939                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
                              ??_my_Main 002D      __end_of_setDimmerLights_IntrControl 01F9  
            _setDimmerLights_IntrControl 0043                 Flash_Memory_Read@address 0022  
                      RfSWPointSelect@sw 0021                         ?_Timeout_Counter 0070  
                  __end_of_SwPointSelect 1EE0                  getPowerFault_AD@channel 0025  
                          ?_setRF_Enable 0070                           _setTemp_Enable 1E70  
                        _RfSWPointSelect 1ECA             __size_of_Flash_Memory_Modify 0044  
      setDimmerLights_IntrControl@lights 0076              __size_of_DimmerLights_Close 0014  
                __size_of_LedPointSelect 0022                      Flash_Memory_Write@i 0021  
           __size_of_Flash_Memory_Unlock 0009                               _TouchPower 1F81  
                      ?_Sw_DimmerAdjFunc 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0A48  
       __end_of_CC2500_registers_address 102F     __end_of_setPowerFault_Initialization 1E23  
  __size_of_setPowerFault_Initialization 0004             _setPowerFault_Initialization 1E1F  
                __end_of__initialization 003F              ??_PowerFault_Initialization 0020  
            setDimmerLights_AdjGo@lights 0023                                ?_LED_Main 0070  
                             ___ftadd@f1 003E                               ___ftadd@f2 0041  
                     ??_Sw_DimmerAdjFunc 0024                      setSw_Enable@command 0022  
                             ___ftdiv@f1 0031                               ___ftdiv@f2 002E  
                             ___ftdiv@f3 0039                        ?_Sw_DimmerOffFunc 0070  
                             ___awtoft@c 0028                      ___bmul@multiplicand 0020  
           ?_DimmerLights_Initialization 0070                               ___ftmul@f1 002E  
                             ___ftmul@f2 0031                               ___fttol@f1 004B  
                         __pcstackCOMMON 0070           DimmerIntrIOCPointSelect@lights 0071  
                     ??_Sw_DimmerOffFunc 0062                             __pidataBANK3 11E3  
                          __end_of_getAD 11E3                                ?_TMR0_ISR 0070  
                              ?_TMR0_Set 0070             __size_of_setDimmerLights_Adj 003D  
                     _LED_Initialization 1EF8                ??_setControl_Lights_Table 0067  
       __size_of_DimmerLights_Exceptions 0041                         ??_DelayTimejudge 0024  
            ?_getDimmerLights_StatusFlag 0070            ??_Flash_Memory_Initialization 005D  
                       ?_setDimmerLights 0023                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1E30                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1E07                       __size_of_getRxData 0048  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1E78  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D1                     __size_of_setLED_Main 0047  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1DFD                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006D                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 1766  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1E03  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0024                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1E13  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 1E68  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0024  
                           _DimmerLights 006D                        LedPointSelect@led 0020  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0008  
                            setBuz@count 002C                               __pmaintext 088D  
                    _CC2500_WriteCommand 111A                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR0_ISR 0077                            ?_setTemp_Main 0070  
                             ??_TMR0_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0023                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00B9                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0021  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1E4A  
              _PowerFault_Initialization 1DEE                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 1490             __end_of_setRF_Initialization 1E58  
                  __size_of_getTemp_Safe 0004                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 14C6                  __end_of_RfSWPointSelect 1ED5  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1F10  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1F2A  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 11A4                        _Flash_Memory_Read 114C  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0073  
                 __size_of_CC2500_TxData 0061                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1DF7                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070          __end_of_setControl_Lights_Table 0C39  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 08E2                          _setPercentValue 1605  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 00EB             __end_of_CC2500_FrequencyCabr 1EEC  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 2000  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0167                                  _VarLED2 016B  
                      __end_of_getRxData 1766               __end_of_setPowerFault_Main 0DF8  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1EA9  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1FBF  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1E23  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1FAF                                  ___awdiv 0839  
                                ___ftadd 0334                           ??_setSw_Enable 0022  
                                ___ftdiv 065E                                  ___ftmul 05AA  
                                ___fttol 0F79                      __end_of_Switch_Main 1E2B  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0062                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 1691  
                                __ptext2 1E70                                  __ptext3 1F90  
                                __ptext4 1490                                  __ptext5 12F6  
                                __ptext6 11C3                                  __ptext7 1E00  
                                __ptext8 0EF3                                  __ptext9 164B  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1E8A                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 11C3                __end_of_Flash_Memory_Read 1166  
                             _setRF_Main 0C39                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1E17                        _DimmerLights_Main 1E43  
                                _my_Main 1691           __size_of_DlyOff_Initialization 000B  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1EBF  
             __end_of_CC2500_ClearRXFIFO 1E0B                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1E0F            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006F                           _LedPointSelect 1246  
                    _DelayOffPointSelect 1EA9                                  clrloop0 1E37  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1E8A  
                   end_of_initialization 003F                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 131D                            _DelayTime_1us 12D0  
                      __end_of_setTxData 05AA               __end_of_Flash_Memory_Write 13F8  
                                init_ram 1E30                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1E31                               _setSw_Main 01F9  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1268  
                            ?_getPF_Safe 0070                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1074                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0D0F  
                          _CC2500_TxData 0AA9                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1074           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0027  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 15C1                  _DimmerLights_Exceptions 153D  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E78  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1E4A  
                     _Mcu_Initialization 1F54                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4944 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1268                  __end_of_Sw_DimmerOnFunc 0939  
                __end_of_setPercentValue 164B                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1347                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 0839                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1500                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 128A                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 114C  
                   _setRF_Initialization 1E51                              _Switch_Main 1E27  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1EBF  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 10C0  
                   ??_Mcu_Initialization 0020                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1098  
              __size_of_Sw_DimmerAdjFunc 0031                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1E9E                        __size_of_TMR0_ISR 0023  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 10EB  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 0B6C  
                         __end_of_setBuz 0992                     _CC2500_FrequencyCabr 1EE0  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0707                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 145B                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10C0                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 11A4          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F79                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1F72                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1E2B                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0018                                _VarErrLED 00E7  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1F54                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000E                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1E00                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                              _Rx_Length 00D4                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D5  
                            __pdataBANK3 01A0                                 ??_setLED 0022  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1E0F  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 1490  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4074 0068  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0081  
                          DlyOff_Main@sw 0064                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 007A  
             __size_of_CC2500_ReadStatus 0022                   _setOverTemp_Exceptions 164B  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C0                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006F  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0067  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1DFA                                _getBuz_GO 1FEF  
                       _getPowerFault_AD 12F6        __size_of_setPowerFault_Exceptions 0039  
    __end_of_Flash_Memory_Initialization 04F1              _Flash_Memory_Initialization 042A  
                               ?___awdiv 0020                ?_setPowerFault_Exceptions 0070  
                              __ptext100 1FAF                                __ptext101 1F9F  
                              __ptext110 157E                                __ptext102 1EBF  
                              __ptext111 131D                                __ptext103 0939  
                              __ptext120 1102                                __ptext112 1185  
                              __ptext104 0839                                __ptext121 1098  
                              __ptext113 1203                                __ptext105 1E13  
                              __ptext130 1166                                __ptext122 1766  
                              __ptext114 1EE0                                __ptext106 1EB4  
                              __ptext131 1E9E                                __ptext123 1DEB  
                              __ptext115 12D0                                __ptext107 1EA9  
                              __ptext116 1E0B                                __ptext108 10C0  
                              __ptext125 128A                                __ptext117 1E07  
                              __ptext109 1E0F                                 ?___ftadd 003E  
                              __ptext126 0043                                __ptext118 111A  
                              __ptext127 1E8A                                __ptext119 1E2B  
                              __ptext128 1F10                                __ptext129 1E03  
                              _getRxData 171E                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 0792            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1DEE  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1F90  
                     _setPowerFault_Main 0D82       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 0050                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 013B  
          __end_of_setDimmerLights_ERROR 1800             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12D0            __end_of_setDimmerLights_AdjGo 1FDF  
                 CC2500_WriteByte@loop_a 0021                                 ?_my_Main 0070  
                              _r_address 00D6           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1F9F  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0020  
                           _setRF_Enable 1066                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1ED5                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 171E                      _DimmerLightsIntrIOC 00D2  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1E00  
                      _CC2500_rfSettings 102F                                 _LED_Main 1F04  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 1E36                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 04F1      __end_of_DimmerLights_Initialization 1F2A  
            _DimmerLights_Initialization 1F1D                       _CC2500_ClearRXFIFO 1E07  
                     _CC2500_ClearTXFIFO 1E0B           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1E68                     ??_setPowerFault_Main 0031  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003A                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 13C9                               ?_getRxData 0070  
                               _TMR0_ISR 128A                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR0_Set 1E58  
                       _Sw_DimmerAdjFunc 13F8                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00CD                     __end_of_RF_RxDisable 1F81  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1133  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0CA0  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 000F                                 _DelayOff 0078  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                     __end_of_getPF_Safe 1E70                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EF8                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0023                      __end_of_setLog_Code 145B  
                  _DlyOff_Initialization 1EB4                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E1B                    _Switch_Initialization 1E81  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1F37                             _setMemory_GO 10D5  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 14C6  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 1098  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      ??_PowerFault_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 139C  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 1371  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0EF3  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1F63                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 1224  
                       ??_LedPointSelect 0020                                 ___ftpack 0A48  
                           _setSw_Status 1F45                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 16D7                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 07FE                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                         __size_of_my_Main 0046  
                               __ptext10 1E68                                 __ptext11 1DFD  
                               __ptext20 1FCF                                 __ptext12 1DFA  
                               __ptext21 1E81                                 __ptext13 1E27  
                               __ptext30 0B6C                                 __ptext22 1FBF  
                               __ptext14 01F9                                 __ptext31 1347  
                               __ptext23 1F81                                 __ptext15 1E60  
                               __ptext40 1F72                                 __ptext32 1086  
                               __ptext24 1DF7                                 __ptext16 08E2  
                               __ptext41 0AA9                                 __ptext33 14C6  
                               __ptext25 0C39                                 __ptext17 0CA0  
                               __ptext50 1F63                                 __ptext42 0D0F  
                               __ptext34 145B                                 __ptext26 171E  
                               __ptext18 13F8                                 __ptext51 1066  
                               __ptext43 1268                                 __ptext35 12AD  
                               __ptext27 1429                                 __ptext19 1FDF  
                               __ptext60 1133                                 __ptext52 153D  
                               __ptext44 10EB                                 __ptext36 09ED  
                               __ptext28 0BD2                                 __ptext61 1F2A  
                               __ptext53 1371                                 __ptext45 1DF4  
                               __ptext37 05AA                                 __ptext29 0707  
                               __ptext70 1EEC                                 __ptext62 1E1B  
                               __ptext54 17B0                                 __ptext46 1E51  
                               __ptext38 0334                                 __ptext71 042A  
                               __ptext63 1E4A                                 __ptext55 1E23  
                               __ptext47 1DF1                                 __ptext39 1FEF  
                               __ptext80 1246                                 __ptext72 13C9  
                               __ptext64 1F04                                 __ptext56 1DEE  
                               __ptext48 0D82                                 __ptext81 10AC  
                               __ptext73 1E78                                 __ptext65 16D7  
                               __ptext57 1E1F                                 __ptext49 0800  
                               __ptext90 1F45                                 __ptext82 10D5  
                               __ptext74 114C                                 __ptext66 1EF8  
                               __ptext58 1F54                                 __ptext91 1ED5  
                               __ptext83 1E94                                 __ptext75 1E43  
                               __ptext67 1074                                 __ptext59 1E58  
                               __ptext92 0792                                 __ptext84 1F1D  
                               __ptext76 0992                                 __ptext68 11A4  
                               __ptext93 1605                                 __ptext85 139C  
                               __ptext77 1500                                 __ptext69 15C1  
                               __ptext94 0F79                                 __ptext86 1E3C  
                               __ptext78 0E72                                 __ptext95 065E  
                               __ptext87 1E17                                 __ptext79 0B0A  
                               __ptext96 1224                                 __ptext88 0DF8  
                               __ptext97 0A48                                 __ptext89 04F1  
                               __ptext98 1F37                                 __ptext99 1ECA  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0023                 __size_of_RfSWPointSelect 000B  
         __size_of_Dimmer_Initialization 0007                   __end_of_setRFSW_Status 1F45  
          __end_of_Dimmer_Initialization 1E43             __end_of_setDimmerLights_Main 09ED  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0021                            __size_of_main 0055  
                            _setRF_Learn 1E60                 __end_of_CC2500_SIDLEMode 1E13  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1EB4  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 10AC  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0004  
                            getPF_Safe@i 0020                          _CC2500_ReadByte 10EB  
                     _CC2500_InitPATable 1185      __size_of_getDimmerLights_StatusFlag 000A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0CA0  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 000F  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 0069            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 006B                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 157E              __end_of_Flash_Memory_Modify 1605  
                      ??_getPercentValue 0059                              _setLog_Code 1429  
            __end_of_Flash_Memory_Unlock 1E81                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 1203                       __end_of_setSw_Main 0334  
                          _Transceive_OK 03E1                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1347  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 131D  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13C9  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 139C  
            __end_of_setDimmerLights_Adj 153D                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1DF4  
   __size_of_setDimmerLights_IntrControl 01B6                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1EEC                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007B          __end_of_DelayOff_Initialization 1E17  
    __size_of_setDimmerLights_IntrIOC_GO 001F                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 1E1B                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0B6C         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 1371           __end_of_setOverTemp_Exceptions 1691  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 12F6  
               __end_of_Sw_DimmerAdjFunc 1429                  __end_of_CC2500_ReadByte 1102  
           __end_of_setSw_Initialization 1FCF                          _Timeout_Counter 1102  
                   getPercentValue@value 005B                             _RF_RxDisable 1F72  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 1F04  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1DFD  
               __size_of_Sw_DimmerOnFunc 0057                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DF7                 __end_of_Sw_DimmerOffFunc 0D0F  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0D82                    __end_of_CC2500_TxData 0B0A  
                         ??_getTemp_Safe 0020                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 15C1  
