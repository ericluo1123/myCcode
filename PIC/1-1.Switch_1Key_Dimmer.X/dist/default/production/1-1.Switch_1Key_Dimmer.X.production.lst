

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Thu Oct 23 15:01:47 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	intentry,global,class=CODE,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   155                           	dabs	1,0x7E,2
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  000D                     	;# 
   170  000E                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  008C                     	;# 
   184  008D                     	;# 
   185  008E                     	;# 
   186  0090                     	;# 
   187  0091                     	;# 
   188  0092                     	;# 
   189  0095                     	;# 
   190  0096                     	;# 
   191  0097                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009B                     	;# 
   196  009C                     	;# 
   197  009D                     	;# 
   198  009E                     	;# 
   199  010C                     	;# 
   200  010D                     	;# 
   201  010E                     	;# 
   202  0116                     	;# 
   203  0117                     	;# 
   204  011D                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  018E                     	;# 
   208  0191                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0193                     	;# 
   212  0193                     	;# 
   213  0194                     	;# 
   214  0195                     	;# 
   215  0196                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  019A                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019C                     	;# 
   224  019C                     	;# 
   225  019D                     	;# 
   226  019E                     	;# 
   227  019F                     	;# 
   228  020D                     	;# 
   229  0210                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  0394                     	;# 
   254  0395                     	;# 
   255  0396                     	;# 
   256  0FE4                     	;# 
   257  0FE5                     	;# 
   258  0FE6                     	;# 
   259  0FE7                     	;# 
   260  0FE8                     	;# 
   261  0FE9                     	;# 
   262  0FEA                     	;# 
   263  0FEB                     	;# 
   264  0FED                     	;# 
   265  0FEE                     	;# 
   266  0FEF                     	;# 
   267  0000                     	;# 
   268  0001                     	;# 
   269  0002                     	;# 
   270  0003                     	;# 
   271  0004                     	;# 
   272  0005                     	;# 
   273  0006                     	;# 
   274  0007                     	;# 
   275  0008                     	;# 
   276  0009                     	;# 
   277  000A                     	;# 
   278  000B                     	;# 
   279  000C                     	;# 
   280  000D                     	;# 
   281  000E                     	;# 
   282  0010                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0090                     	;# 
   298  0091                     	;# 
   299  0092                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0099                     	;# 
   304  009A                     	;# 
   305  009B                     	;# 
   306  009B                     	;# 
   307  009C                     	;# 
   308  009D                     	;# 
   309  009E                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0197                     	;# 
   328  0199                     	;# 
   329  019A                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019C                     	;# 
   336  019D                     	;# 
   337  019E                     	;# 
   338  019F                     	;# 
   339  020D                     	;# 
   340  0210                     	;# 
   341  0211                     	;# 
   342  0211                     	;# 
   343  0212                     	;# 
   344  0212                     	;# 
   345  0213                     	;# 
   346  0213                     	;# 
   347  0214                     	;# 
   348  0214                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0216                     	;# 
   353  0216                     	;# 
   354  0217                     	;# 
   355  0217                     	;# 
   356  0291                     	;# 
   357  0291                     	;# 
   358  0292                     	;# 
   359  0293                     	;# 
   360  0298                     	;# 
   361  0298                     	;# 
   362  0299                     	;# 
   363  029A                     	;# 
   364  0394                     	;# 
   365  0395                     	;# 
   366  0396                     	;# 
   367  0FE4                     	;# 
   368  0FE5                     	;# 
   369  0FE6                     	;# 
   370  0FE7                     	;# 
   371  0FE8                     	;# 
   372  0FE9                     	;# 
   373  0FEA                     	;# 
   374  0FEB                     	;# 
   375  0FED                     	;# 
   376  0FEE                     	;# 
   377  0FEF                     	;# 
   378  0000                     	;# 
   379  0001                     	;# 
   380  0002                     	;# 
   381  0003                     	;# 
   382  0004                     	;# 
   383  0005                     	;# 
   384  0006                     	;# 
   385  0007                     	;# 
   386  0008                     	;# 
   387  0009                     	;# 
   388  000A                     	;# 
   389  000B                     	;# 
   390  000C                     	;# 
   391  000D                     	;# 
   392  000E                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0015                     	;# 
   397  0016                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001C                     	;# 
   405  008C                     	;# 
   406  008D                     	;# 
   407  008E                     	;# 
   408  0090                     	;# 
   409  0091                     	;# 
   410  0092                     	;# 
   411  0095                     	;# 
   412  0096                     	;# 
   413  0097                     	;# 
   414  0099                     	;# 
   415  009A                     	;# 
   416  009B                     	;# 
   417  009B                     	;# 
   418  009C                     	;# 
   419  009D                     	;# 
   420  009E                     	;# 
   421  010C                     	;# 
   422  010D                     	;# 
   423  010E                     	;# 
   424  0116                     	;# 
   425  0117                     	;# 
   426  011D                     	;# 
   427  018C                     	;# 
   428  018D                     	;# 
   429  018E                     	;# 
   430  0191                     	;# 
   431  0191                     	;# 
   432  0192                     	;# 
   433  0193                     	;# 
   434  0193                     	;# 
   435  0194                     	;# 
   436  0195                     	;# 
   437  0196                     	;# 
   438  0197                     	;# 
   439  0199                     	;# 
   440  019A                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019C                     	;# 
   446  019C                     	;# 
   447  019D                     	;# 
   448  019E                     	;# 
   449  019F                     	;# 
   450  020D                     	;# 
   451  0210                     	;# 
   452  0211                     	;# 
   453  0211                     	;# 
   454  0212                     	;# 
   455  0212                     	;# 
   456  0213                     	;# 
   457  0213                     	;# 
   458  0214                     	;# 
   459  0214                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0215                     	;# 
   463  0216                     	;# 
   464  0216                     	;# 
   465  0217                     	;# 
   466  0217                     	;# 
   467  0291                     	;# 
   468  0291                     	;# 
   469  0292                     	;# 
   470  0293                     	;# 
   471  0298                     	;# 
   472  0298                     	;# 
   473  0299                     	;# 
   474  029A                     	;# 
   475  0394                     	;# 
   476  0395                     	;# 
   477  0396                     	;# 
   478  0FE4                     	;# 
   479  0FE5                     	;# 
   480  0FE6                     	;# 
   481  0FE7                     	;# 
   482  0FE8                     	;# 
   483  0FE9                     	;# 
   484  0FEA                     	;# 
   485  0FEB                     	;# 
   486  0FED                     	;# 
   487  0FEE                     	;# 
   488  0FEF                     	;# 
   489  0000                     	;# 
   490  0001                     	;# 
   491  0002                     	;# 
   492  0003                     	;# 
   493  0004                     	;# 
   494  0005                     	;# 
   495  0006                     	;# 
   496  0007                     	;# 
   497  0008                     	;# 
   498  0009                     	;# 
   499  000A                     	;# 
   500  000B                     	;# 
   501  000C                     	;# 
   502  000D                     	;# 
   503  000E                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0015                     	;# 
   508  0016                     	;# 
   509  0016                     	;# 
   510  0017                     	;# 
   511  0018                     	;# 
   512  0019                     	;# 
   513  001A                     	;# 
   514  001B                     	;# 
   515  001C                     	;# 
   516  008C                     	;# 
   517  008D                     	;# 
   518  008E                     	;# 
   519  0090                     	;# 
   520  0091                     	;# 
   521  0092                     	;# 
   522  0095                     	;# 
   523  0096                     	;# 
   524  0097                     	;# 
   525  0099                     	;# 
   526  009A                     	;# 
   527  009B                     	;# 
   528  009B                     	;# 
   529  009C                     	;# 
   530  009D                     	;# 
   531  009E                     	;# 
   532  010C                     	;# 
   533  010D                     	;# 
   534  010E                     	;# 
   535  0116                     	;# 
   536  0117                     	;# 
   537  011D                     	;# 
   538  018C                     	;# 
   539  018D                     	;# 
   540  018E                     	;# 
   541  0191                     	;# 
   542  0191                     	;# 
   543  0192                     	;# 
   544  0193                     	;# 
   545  0193                     	;# 
   546  0194                     	;# 
   547  0195                     	;# 
   548  0196                     	;# 
   549  0197                     	;# 
   550  0199                     	;# 
   551  019A                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019C                     	;# 
   557  019C                     	;# 
   558  019D                     	;# 
   559  019E                     	;# 
   560  019F                     	;# 
   561  020D                     	;# 
   562  0210                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0216                     	;# 
   575  0216                     	;# 
   576  0217                     	;# 
   577  0217                     	;# 
   578  0291                     	;# 
   579  0291                     	;# 
   580  0292                     	;# 
   581  0293                     	;# 
   582  0298                     	;# 
   583  0298                     	;# 
   584  0299                     	;# 
   585  029A                     	;# 
   586  0394                     	;# 
   587  0395                     	;# 
   588  0396                     	;# 
   589  0FE4                     	;# 
   590  0FE5                     	;# 
   591  0FE6                     	;# 
   592  0FE7                     	;# 
   593  0FE8                     	;# 
   594  0FE9                     	;# 
   595  0FEA                     	;# 
   596  0FEB                     	;# 
   597  0FED                     	;# 
   598  0FEE                     	;# 
   599  0FEF                     	;# 
   600  0000                     	;# 
   601  0001                     	;# 
   602  0002                     	;# 
   603  0003                     	;# 
   604  0004                     	;# 
   605  0005                     	;# 
   606  0006                     	;# 
   607  0007                     	;# 
   608  0008                     	;# 
   609  0009                     	;# 
   610  000A                     	;# 
   611  000B                     	;# 
   612  000C                     	;# 
   613  000D                     	;# 
   614  000E                     	;# 
   615  0010                     	;# 
   616  0011                     	;# 
   617  0012                     	;# 
   618  0015                     	;# 
   619  0016                     	;# 
   620  0016                     	;# 
   621  0017                     	;# 
   622  0018                     	;# 
   623  0019                     	;# 
   624  001A                     	;# 
   625  001B                     	;# 
   626  001C                     	;# 
   627  008C                     	;# 
   628  008D                     	;# 
   629  008E                     	;# 
   630  0090                     	;# 
   631  0091                     	;# 
   632  0092                     	;# 
   633  0095                     	;# 
   634  0096                     	;# 
   635  0097                     	;# 
   636  0099                     	;# 
   637  009A                     	;# 
   638  009B                     	;# 
   639  009B                     	;# 
   640  009C                     	;# 
   641  009D                     	;# 
   642  009E                     	;# 
   643  010C                     	;# 
   644  010D                     	;# 
   645  010E                     	;# 
   646  0116                     	;# 
   647  0117                     	;# 
   648  011D                     	;# 
   649  018C                     	;# 
   650  018D                     	;# 
   651  018E                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0194                     	;# 
   658  0195                     	;# 
   659  0196                     	;# 
   660  0197                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020D                     	;# 
   673  0210                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0291                     	;# 
   690  0291                     	;# 
   691  0292                     	;# 
   692  0293                     	;# 
   693  0298                     	;# 
   694  0298                     	;# 
   695  0299                     	;# 
   696  029A                     	;# 
   697  0394                     	;# 
   698  0395                     	;# 
   699  0396                     	;# 
   700  0FE4                     	;# 
   701  0FE5                     	;# 
   702  0FE6                     	;# 
   703  0FE7                     	;# 
   704  0FE8                     	;# 
   705  0FE9                     	;# 
   706  0FEA                     	;# 
   707  0FEB                     	;# 
   708  0FED                     	;# 
   709  0FEE                     	;# 
   710  0FEF                     	;# 
   711  0000                     	;# 
   712  0001                     	;# 
   713  0002                     	;# 
   714  0003                     	;# 
   715  0004                     	;# 
   716  0005                     	;# 
   717  0006                     	;# 
   718  0007                     	;# 
   719  0008                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  0010                     	;# 
   727  0011                     	;# 
   728  0012                     	;# 
   729  0015                     	;# 
   730  0016                     	;# 
   731  0016                     	;# 
   732  0017                     	;# 
   733  0018                     	;# 
   734  0019                     	;# 
   735  001A                     	;# 
   736  001B                     	;# 
   737  001C                     	;# 
   738  008C                     	;# 
   739  008D                     	;# 
   740  008E                     	;# 
   741  0090                     	;# 
   742  0091                     	;# 
   743  0092                     	;# 
   744  0095                     	;# 
   745  0096                     	;# 
   746  0097                     	;# 
   747  0099                     	;# 
   748  009A                     	;# 
   749  009B                     	;# 
   750  009B                     	;# 
   751  009C                     	;# 
   752  009D                     	;# 
   753  009E                     	;# 
   754  010C                     	;# 
   755  010D                     	;# 
   756  010E                     	;# 
   757  0116                     	;# 
   758  0117                     	;# 
   759  011D                     	;# 
   760  018C                     	;# 
   761  018D                     	;# 
   762  018E                     	;# 
   763  0191                     	;# 
   764  0191                     	;# 
   765  0192                     	;# 
   766  0193                     	;# 
   767  0193                     	;# 
   768  0194                     	;# 
   769  0195                     	;# 
   770  0196                     	;# 
   771  0197                     	;# 
   772  0199                     	;# 
   773  019A                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019C                     	;# 
   779  019C                     	;# 
   780  019D                     	;# 
   781  019E                     	;# 
   782  019F                     	;# 
   783  020D                     	;# 
   784  0210                     	;# 
   785  0211                     	;# 
   786  0211                     	;# 
   787  0212                     	;# 
   788  0212                     	;# 
   789  0213                     	;# 
   790  0213                     	;# 
   791  0214                     	;# 
   792  0214                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0215                     	;# 
   796  0216                     	;# 
   797  0216                     	;# 
   798  0217                     	;# 
   799  0217                     	;# 
   800  0291                     	;# 
   801  0291                     	;# 
   802  0292                     	;# 
   803  0293                     	;# 
   804  0298                     	;# 
   805  0298                     	;# 
   806  0299                     	;# 
   807  029A                     	;# 
   808  0394                     	;# 
   809  0395                     	;# 
   810  0396                     	;# 
   811  0FE4                     	;# 
   812  0FE5                     	;# 
   813  0FE6                     	;# 
   814  0FE7                     	;# 
   815  0FE8                     	;# 
   816  0FE9                     	;# 
   817  0FEA                     	;# 
   818  0FEB                     	;# 
   819  0FED                     	;# 
   820  0FEE                     	;# 
   821  0FEF                     	;# 
   822  0000                     	;# 
   823  0001                     	;# 
   824  0002                     	;# 
   825  0003                     	;# 
   826  0004                     	;# 
   827  0005                     	;# 
   828  0006                     	;# 
   829  0007                     	;# 
   830  0008                     	;# 
   831  0009                     	;# 
   832  000A                     	;# 
   833  000B                     	;# 
   834  000C                     	;# 
   835  000D                     	;# 
   836  000E                     	;# 
   837  0010                     	;# 
   838  0011                     	;# 
   839  0012                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  001A                     	;# 
   847  001B                     	;# 
   848  001C                     	;# 
   849  008C                     	;# 
   850  008D                     	;# 
   851  008E                     	;# 
   852  0090                     	;# 
   853  0091                     	;# 
   854  0092                     	;# 
   855  0095                     	;# 
   856  0096                     	;# 
   857  0097                     	;# 
   858  0099                     	;# 
   859  009A                     	;# 
   860  009B                     	;# 
   861  009B                     	;# 
   862  009C                     	;# 
   863  009D                     	;# 
   864  009E                     	;# 
   865  010C                     	;# 
   866  010D                     	;# 
   867  010E                     	;# 
   868  0116                     	;# 
   869  0117                     	;# 
   870  011D                     	;# 
   871  018C                     	;# 
   872  018D                     	;# 
   873  018E                     	;# 
   874  0191                     	;# 
   875  0191                     	;# 
   876  0192                     	;# 
   877  0193                     	;# 
   878  0193                     	;# 
   879  0194                     	;# 
   880  0195                     	;# 
   881  0196                     	;# 
   882  0197                     	;# 
   883  0199                     	;# 
   884  019A                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019E                     	;# 
   893  019F                     	;# 
   894  020D                     	;# 
   895  0210                     	;# 
   896  0211                     	;# 
   897  0211                     	;# 
   898  0212                     	;# 
   899  0212                     	;# 
   900  0213                     	;# 
   901  0213                     	;# 
   902  0214                     	;# 
   903  0214                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0215                     	;# 
   907  0216                     	;# 
   908  0216                     	;# 
   909  0217                     	;# 
   910  0217                     	;# 
   911  0291                     	;# 
   912  0291                     	;# 
   913  0292                     	;# 
   914  0293                     	;# 
   915  0298                     	;# 
   916  0298                     	;# 
   917  0299                     	;# 
   918  029A                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  0FE4                     	;# 
   923  0FE5                     	;# 
   924  0FE6                     	;# 
   925  0FE7                     	;# 
   926  0FE8                     	;# 
   927  0FE9                     	;# 
   928  0FEA                     	;# 
   929  0FEB                     	;# 
   930  0FED                     	;# 
   931  0FEE                     	;# 
   932  0FEF                     	;# 
   933  0000                     	;# 
   934  0001                     	;# 
   935  0002                     	;# 
   936  0003                     	;# 
   937  0004                     	;# 
   938  0005                     	;# 
   939  0006                     	;# 
   940  0007                     	;# 
   941  0008                     	;# 
   942  0009                     	;# 
   943  000A                     	;# 
   944  000B                     	;# 
   945  000C                     	;# 
   946  000D                     	;# 
   947  000E                     	;# 
   948  0010                     	;# 
   949  0011                     	;# 
   950  0012                     	;# 
   951  0015                     	;# 
   952  0016                     	;# 
   953  0016                     	;# 
   954  0017                     	;# 
   955  0018                     	;# 
   956  0019                     	;# 
   957  001A                     	;# 
   958  001B                     	;# 
   959  001C                     	;# 
   960  008C                     	;# 
   961  008D                     	;# 
   962  008E                     	;# 
   963  0090                     	;# 
   964  0091                     	;# 
   965  0092                     	;# 
   966  0095                     	;# 
   967  0096                     	;# 
   968  0097                     	;# 
   969  0099                     	;# 
   970  009A                     	;# 
   971  009B                     	;# 
   972  009B                     	;# 
   973  009C                     	;# 
   974  009D                     	;# 
   975  009E                     	;# 
   976  010C                     	;# 
   977  010D                     	;# 
   978  010E                     	;# 
   979  0116                     	;# 
   980  0117                     	;# 
   981  011D                     	;# 
   982  018C                     	;# 
   983  018D                     	;# 
   984  018E                     	;# 
   985  0191                     	;# 
   986  0191                     	;# 
   987  0192                     	;# 
   988  0193                     	;# 
   989  0193                     	;# 
   990  0194                     	;# 
   991  0195                     	;# 
   992  0196                     	;# 
   993  0197                     	;# 
   994  0199                     	;# 
   995  019A                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019C                     	;# 
  1001  019C                     	;# 
  1002  019D                     	;# 
  1003  019E                     	;# 
  1004  019F                     	;# 
  1005  020D                     	;# 
  1006  0210                     	;# 
  1007  0211                     	;# 
  1008  0211                     	;# 
  1009  0212                     	;# 
  1010  0212                     	;# 
  1011  0213                     	;# 
  1012  0213                     	;# 
  1013  0214                     	;# 
  1014  0214                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0215                     	;# 
  1018  0216                     	;# 
  1019  0216                     	;# 
  1020  0217                     	;# 
  1021  0217                     	;# 
  1022  0291                     	;# 
  1023  0291                     	;# 
  1024  0292                     	;# 
  1025  0293                     	;# 
  1026  0298                     	;# 
  1027  0298                     	;# 
  1028  0299                     	;# 
  1029  029A                     	;# 
  1030  0394                     	;# 
  1031  0395                     	;# 
  1032  0396                     	;# 
  1033  0FE4                     	;# 
  1034  0FE5                     	;# 
  1035  0FE6                     	;# 
  1036  0FE7                     	;# 
  1037  0FE8                     	;# 
  1038  0FE9                     	;# 
  1039  0FEA                     	;# 
  1040  0FEB                     	;# 
  1041  0FED                     	;# 
  1042  0FEE                     	;# 
  1043  0FEF                     	;# 
  1044  0000                     	;# 
  1045  0001                     	;# 
  1046  0002                     	;# 
  1047  0003                     	;# 
  1048  0004                     	;# 
  1049  0005                     	;# 
  1050  0006                     	;# 
  1051  0007                     	;# 
  1052  0008                     	;# 
  1053  0009                     	;# 
  1054  000A                     	;# 
  1055  000B                     	;# 
  1056  000C                     	;# 
  1057  000D                     	;# 
  1058  000E                     	;# 
  1059  0010                     	;# 
  1060  0011                     	;# 
  1061  0012                     	;# 
  1062  0015                     	;# 
  1063  0016                     	;# 
  1064  0016                     	;# 
  1065  0017                     	;# 
  1066  0018                     	;# 
  1067  0019                     	;# 
  1068  001A                     	;# 
  1069  001B                     	;# 
  1070  001C                     	;# 
  1071  008C                     	;# 
  1072  008D                     	;# 
  1073  008E                     	;# 
  1074  0090                     	;# 
  1075  0091                     	;# 
  1076  0092                     	;# 
  1077  0095                     	;# 
  1078  0096                     	;# 
  1079  0097                     	;# 
  1080  0099                     	;# 
  1081  009A                     	;# 
  1082  009B                     	;# 
  1083  009B                     	;# 
  1084  009C                     	;# 
  1085  009D                     	;# 
  1086  009E                     	;# 
  1087  010C                     	;# 
  1088  010D                     	;# 
  1089  010E                     	;# 
  1090  0116                     	;# 
  1091  0117                     	;# 
  1092  011D                     	;# 
  1093  018C                     	;# 
  1094  018D                     	;# 
  1095  018E                     	;# 
  1096  0191                     	;# 
  1097  0191                     	;# 
  1098  0192                     	;# 
  1099  0193                     	;# 
  1100  0193                     	;# 
  1101  0194                     	;# 
  1102  0195                     	;# 
  1103  0196                     	;# 
  1104  0197                     	;# 
  1105  0199                     	;# 
  1106  019A                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019C                     	;# 
  1112  019C                     	;# 
  1113  019D                     	;# 
  1114  019E                     	;# 
  1115  019F                     	;# 
  1116  020D                     	;# 
  1117  0210                     	;# 
  1118  0211                     	;# 
  1119  0211                     	;# 
  1120  0212                     	;# 
  1121  0212                     	;# 
  1122  0213                     	;# 
  1123  0213                     	;# 
  1124  0214                     	;# 
  1125  0214                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0215                     	;# 
  1129  0216                     	;# 
  1130  0216                     	;# 
  1131  0217                     	;# 
  1132  0217                     	;# 
  1133  0291                     	;# 
  1134  0291                     	;# 
  1135  0292                     	;# 
  1136  0293                     	;# 
  1137  0298                     	;# 
  1138  0298                     	;# 
  1139  0299                     	;# 
  1140  029A                     	;# 
  1141  0394                     	;# 
  1142  0395                     	;# 
  1143  0396                     	;# 
  1144  0FE4                     	;# 
  1145  0FE5                     	;# 
  1146  0FE6                     	;# 
  1147  0FE7                     	;# 
  1148  0FE8                     	;# 
  1149  0FE9                     	;# 
  1150  0FEA                     	;# 
  1151  0FEB                     	;# 
  1152  0FED                     	;# 
  1153  0FEE                     	;# 
  1154  0FEF                     	;# 
  1155  0000                     	;# 
  1156  0001                     	;# 
  1157  0002                     	;# 
  1158  0003                     	;# 
  1159  0004                     	;# 
  1160  0005                     	;# 
  1161  0006                     	;# 
  1162  0007                     	;# 
  1163  0008                     	;# 
  1164  0009                     	;# 
  1165  000A                     	;# 
  1166  000B                     	;# 
  1167  000C                     	;# 
  1168  000D                     	;# 
  1169  000E                     	;# 
  1170  0010                     	;# 
  1171  0011                     	;# 
  1172  0012                     	;# 
  1173  0015                     	;# 
  1174  0016                     	;# 
  1175  0016                     	;# 
  1176  0017                     	;# 
  1177  0018                     	;# 
  1178  0019                     	;# 
  1179  001A                     	;# 
  1180  001B                     	;# 
  1181  001C                     	;# 
  1182  008C                     	;# 
  1183  008D                     	;# 
  1184  008E                     	;# 
  1185  0090                     	;# 
  1186  0091                     	;# 
  1187  0092                     	;# 
  1188  0095                     	;# 
  1189  0096                     	;# 
  1190  0097                     	;# 
  1191  0099                     	;# 
  1192  009A                     	;# 
  1193  009B                     	;# 
  1194  009B                     	;# 
  1195  009C                     	;# 
  1196  009D                     	;# 
  1197  009E                     	;# 
  1198  010C                     	;# 
  1199  010D                     	;# 
  1200  010E                     	;# 
  1201  0116                     	;# 
  1202  0117                     	;# 
  1203  011D                     	;# 
  1204  018C                     	;# 
  1205  018D                     	;# 
  1206  018E                     	;# 
  1207  0191                     	;# 
  1208  0191                     	;# 
  1209  0192                     	;# 
  1210  0193                     	;# 
  1211  0193                     	;# 
  1212  0194                     	;# 
  1213  0195                     	;# 
  1214  0196                     	;# 
  1215  0197                     	;# 
  1216  0199                     	;# 
  1217  019A                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019C                     	;# 
  1223  019C                     	;# 
  1224  019D                     	;# 
  1225  019E                     	;# 
  1226  019F                     	;# 
  1227  020D                     	;# 
  1228  0210                     	;# 
  1229  0211                     	;# 
  1230  0211                     	;# 
  1231  0212                     	;# 
  1232  0212                     	;# 
  1233  0213                     	;# 
  1234  0213                     	;# 
  1235  0214                     	;# 
  1236  0214                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0215                     	;# 
  1240  0216                     	;# 
  1241  0216                     	;# 
  1242  0217                     	;# 
  1243  0217                     	;# 
  1244  0291                     	;# 
  1245  0291                     	;# 
  1246  0292                     	;# 
  1247  0293                     	;# 
  1248  0298                     	;# 
  1249  0298                     	;# 
  1250  0299                     	;# 
  1251  029A                     	;# 
  1252  0394                     	;# 
  1253  0395                     	;# 
  1254  0396                     	;# 
  1255  0FE4                     	;# 
  1256  0FE5                     	;# 
  1257  0FE6                     	;# 
  1258  0FE7                     	;# 
  1259  0FE8                     	;# 
  1260  0FE9                     	;# 
  1261  0FEA                     	;# 
  1262  0FEB                     	;# 
  1263  0FED                     	;# 
  1264  0FEE                     	;# 
  1265  0FEF                     	;# 
  1266  0000                     	;# 
  1267  0001                     	;# 
  1268  0002                     	;# 
  1269  0003                     	;# 
  1270  0004                     	;# 
  1271  0005                     	;# 
  1272  0006                     	;# 
  1273  0007                     	;# 
  1274  0008                     	;# 
  1275  0009                     	;# 
  1276  000A                     	;# 
  1277  000B                     	;# 
  1278  000C                     	;# 
  1279  000D                     	;# 
  1280  000E                     	;# 
  1281  0010                     	;# 
  1282  0011                     	;# 
  1283  0012                     	;# 
  1284  0015                     	;# 
  1285  0016                     	;# 
  1286  0016                     	;# 
  1287  0017                     	;# 
  1288  0018                     	;# 
  1289  0019                     	;# 
  1290  001A                     	;# 
  1291  001B                     	;# 
  1292  001C                     	;# 
  1293  008C                     	;# 
  1294  008D                     	;# 
  1295  008E                     	;# 
  1296  0090                     	;# 
  1297  0091                     	;# 
  1298  0092                     	;# 
  1299  0095                     	;# 
  1300  0096                     	;# 
  1301  0097                     	;# 
  1302  0099                     	;# 
  1303  009A                     	;# 
  1304  009B                     	;# 
  1305  009B                     	;# 
  1306  009C                     	;# 
  1307  009D                     	;# 
  1308  009E                     	;# 
  1309  010C                     	;# 
  1310  010D                     	;# 
  1311  010E                     	;# 
  1312  0116                     	;# 
  1313  0117                     	;# 
  1314  011D                     	;# 
  1315  018C                     	;# 
  1316  018D                     	;# 
  1317  018E                     	;# 
  1318  0191                     	;# 
  1319  0191                     	;# 
  1320  0192                     	;# 
  1321  0193                     	;# 
  1322  0193                     	;# 
  1323  0194                     	;# 
  1324  0195                     	;# 
  1325  0196                     	;# 
  1326  0197                     	;# 
  1327  0199                     	;# 
  1328  019A                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019C                     	;# 
  1334  019C                     	;# 
  1335  019D                     	;# 
  1336  019E                     	;# 
  1337  019F                     	;# 
  1338  020D                     	;# 
  1339  0210                     	;# 
  1340  0211                     	;# 
  1341  0211                     	;# 
  1342  0212                     	;# 
  1343  0212                     	;# 
  1344  0213                     	;# 
  1345  0213                     	;# 
  1346  0214                     	;# 
  1347  0214                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0216                     	;# 
  1352  0216                     	;# 
  1353  0217                     	;# 
  1354  0217                     	;# 
  1355  0291                     	;# 
  1356  0291                     	;# 
  1357  0292                     	;# 
  1358  0293                     	;# 
  1359  0298                     	;# 
  1360  0298                     	;# 
  1361  0299                     	;# 
  1362  029A                     	;# 
  1363  0394                     	;# 
  1364  0395                     	;# 
  1365  0396                     	;# 
  1366  0FE4                     	;# 
  1367  0FE5                     	;# 
  1368  0FE6                     	;# 
  1369  0FE7                     	;# 
  1370  0FE8                     	;# 
  1371  0FE9                     	;# 
  1372  0FEA                     	;# 
  1373  0FEB                     	;# 
  1374  0FED                     	;# 
  1375  0FEE                     	;# 
  1376  0FEF                     	;# 
  1377  0000                     	;# 
  1378  0001                     	;# 
  1379  0002                     	;# 
  1380  0003                     	;# 
  1381  0004                     	;# 
  1382  0005                     	;# 
  1383  0006                     	;# 
  1384  0007                     	;# 
  1385  0008                     	;# 
  1386  0009                     	;# 
  1387  000A                     	;# 
  1388  000B                     	;# 
  1389  000C                     	;# 
  1390  000D                     	;# 
  1391  000E                     	;# 
  1392  0010                     	;# 
  1393  0011                     	;# 
  1394  0012                     	;# 
  1395  0015                     	;# 
  1396  0016                     	;# 
  1397  0016                     	;# 
  1398  0017                     	;# 
  1399  0018                     	;# 
  1400  0019                     	;# 
  1401  001A                     	;# 
  1402  001B                     	;# 
  1403  001C                     	;# 
  1404  008C                     	;# 
  1405  008D                     	;# 
  1406  008E                     	;# 
  1407  0090                     	;# 
  1408  0091                     	;# 
  1409  0092                     	;# 
  1410  0095                     	;# 
  1411  0096                     	;# 
  1412  0097                     	;# 
  1413  0099                     	;# 
  1414  009A                     	;# 
  1415  009B                     	;# 
  1416  009B                     	;# 
  1417  009C                     	;# 
  1418  009D                     	;# 
  1419  009E                     	;# 
  1420  010C                     	;# 
  1421  010D                     	;# 
  1422  010E                     	;# 
  1423  0116                     	;# 
  1424  0117                     	;# 
  1425  011D                     	;# 
  1426  018C                     	;# 
  1427  018D                     	;# 
  1428  018E                     	;# 
  1429  0191                     	;# 
  1430  0191                     	;# 
  1431  0192                     	;# 
  1432  0193                     	;# 
  1433  0193                     	;# 
  1434  0194                     	;# 
  1435  0195                     	;# 
  1436  0196                     	;# 
  1437  0197                     	;# 
  1438  0199                     	;# 
  1439  019A                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019C                     	;# 
  1445  019C                     	;# 
  1446  019D                     	;# 
  1447  019E                     	;# 
  1448  019F                     	;# 
  1449  020D                     	;# 
  1450  0210                     	;# 
  1451  0211                     	;# 
  1452  0211                     	;# 
  1453  0212                     	;# 
  1454  0212                     	;# 
  1455  0213                     	;# 
  1456  0213                     	;# 
  1457  0214                     	;# 
  1458  0214                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0215                     	;# 
  1462  0216                     	;# 
  1463  0216                     	;# 
  1464  0217                     	;# 
  1465  0217                     	;# 
  1466  0291                     	;# 
  1467  0291                     	;# 
  1468  0292                     	;# 
  1469  0293                     	;# 
  1470  0298                     	;# 
  1471  0298                     	;# 
  1472  0299                     	;# 
  1473  029A                     	;# 
  1474  0394                     	;# 
  1475  0395                     	;# 
  1476  0396                     	;# 
  1477  0FE4                     	;# 
  1478  0FE5                     	;# 
  1479  0FE6                     	;# 
  1480  0FE7                     	;# 
  1481  0FE8                     	;# 
  1482  0FE9                     	;# 
  1483  0FEA                     	;# 
  1484  0FEB                     	;# 
  1485  0FED                     	;# 
  1486  0FEE                     	;# 
  1487  0FEF                     	;# 
  1488  0000                     	;# 
  1489  0001                     	;# 
  1490  0002                     	;# 
  1491  0003                     	;# 
  1492  0004                     	;# 
  1493  0005                     	;# 
  1494  0006                     	;# 
  1495  0007                     	;# 
  1496  0008                     	;# 
  1497  0009                     	;# 
  1498  000A                     	;# 
  1499  000B                     	;# 
  1500  000C                     	;# 
  1501  000D                     	;# 
  1502  000E                     	;# 
  1503  0010                     	;# 
  1504  0011                     	;# 
  1505  0012                     	;# 
  1506  0015                     	;# 
  1507  0016                     	;# 
  1508  0016                     	;# 
  1509  0017                     	;# 
  1510  0018                     	;# 
  1511  0019                     	;# 
  1512  001A                     	;# 
  1513  001B                     	;# 
  1514  001C                     	;# 
  1515  008C                     	;# 
  1516  008D                     	;# 
  1517  008E                     	;# 
  1518  0090                     	;# 
  1519  0091                     	;# 
  1520  0092                     	;# 
  1521  0095                     	;# 
  1522  0096                     	;# 
  1523  0097                     	;# 
  1524  0099                     	;# 
  1525  009A                     	;# 
  1526  009B                     	;# 
  1527  009B                     	;# 
  1528  009C                     	;# 
  1529  009D                     	;# 
  1530  009E                     	;# 
  1531  010C                     	;# 
  1532  010D                     	;# 
  1533  010E                     	;# 
  1534  0116                     	;# 
  1535  0117                     	;# 
  1536  011D                     	;# 
  1537  018C                     	;# 
  1538  018D                     	;# 
  1539  018E                     	;# 
  1540  0191                     	;# 
  1541  0191                     	;# 
  1542  0192                     	;# 
  1543  0193                     	;# 
  1544  0193                     	;# 
  1545  0194                     	;# 
  1546  0195                     	;# 
  1547  0196                     	;# 
  1548  0197                     	;# 
  1549  0199                     	;# 
  1550  019A                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019C                     	;# 
  1556  019C                     	;# 
  1557  019D                     	;# 
  1558  019E                     	;# 
  1559  019F                     	;# 
  1560  020D                     	;# 
  1561  0210                     	;# 
  1562  0211                     	;# 
  1563  0211                     	;# 
  1564  0212                     	;# 
  1565  0212                     	;# 
  1566  0213                     	;# 
  1567  0213                     	;# 
  1568  0214                     	;# 
  1569  0214                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0215                     	;# 
  1573  0216                     	;# 
  1574  0216                     	;# 
  1575  0217                     	;# 
  1576  0217                     	;# 
  1577  0291                     	;# 
  1578  0291                     	;# 
  1579  0292                     	;# 
  1580  0293                     	;# 
  1581  0298                     	;# 
  1582  0298                     	;# 
  1583  0299                     	;# 
  1584  029A                     	;# 
  1585  0394                     	;# 
  1586  0395                     	;# 
  1587  0396                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0010                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0015                     	;# 
  1618  0016                     	;# 
  1619  0016                     	;# 
  1620  0017                     	;# 
  1621  0018                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  008C                     	;# 
  1627  008D                     	;# 
  1628  008E                     	;# 
  1629  0090                     	;# 
  1630  0091                     	;# 
  1631  0092                     	;# 
  1632  0095                     	;# 
  1633  0096                     	;# 
  1634  0097                     	;# 
  1635  0099                     	;# 
  1636  009A                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0116                     	;# 
  1646  0117                     	;# 
  1647  011D                     	;# 
  1648  018C                     	;# 
  1649  018D                     	;# 
  1650  018E                     	;# 
  1651  0191                     	;# 
  1652  0191                     	;# 
  1653  0192                     	;# 
  1654  0193                     	;# 
  1655  0193                     	;# 
  1656  0194                     	;# 
  1657  0195                     	;# 
  1658  0196                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019D                     	;# 
  1669  019E                     	;# 
  1670  019F                     	;# 
  1671  020D                     	;# 
  1672  0210                     	;# 
  1673  0211                     	;# 
  1674  0211                     	;# 
  1675  0212                     	;# 
  1676  0212                     	;# 
  1677  0213                     	;# 
  1678  0213                     	;# 
  1679  0214                     	;# 
  1680  0214                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0215                     	;# 
  1684  0216                     	;# 
  1685  0216                     	;# 
  1686  0217                     	;# 
  1687  0217                     	;# 
  1688  0291                     	;# 
  1689  0291                     	;# 
  1690  0292                     	;# 
  1691  0293                     	;# 
  1692  0298                     	;# 
  1693  0298                     	;# 
  1694  0299                     	;# 
  1695  029A                     	;# 
  1696  0394                     	;# 
  1697  0395                     	;# 
  1698  0396                     	;# 
  1699  0FE4                     	;# 
  1700  0FE5                     	;# 
  1701  0FE6                     	;# 
  1702  0FE7                     	;# 
  1703  0FE8                     	;# 
  1704  0FE9                     	;# 
  1705  0FEA                     	;# 
  1706  0FEB                     	;# 
  1707  0FED                     	;# 
  1708  0FEE                     	;# 
  1709  0FEF                     	;# 
  1710  0000                     	;# 
  1711  0001                     	;# 
  1712  0002                     	;# 
  1713  0003                     	;# 
  1714  0004                     	;# 
  1715  0005                     	;# 
  1716  0006                     	;# 
  1717  0007                     	;# 
  1718  0008                     	;# 
  1719  0009                     	;# 
  1720  000A                     	;# 
  1721  000B                     	;# 
  1722  000C                     	;# 
  1723  000D                     	;# 
  1724  000E                     	;# 
  1725  0010                     	;# 
  1726  0011                     	;# 
  1727  0012                     	;# 
  1728  0015                     	;# 
  1729  0016                     	;# 
  1730  0016                     	;# 
  1731  0017                     	;# 
  1732  0018                     	;# 
  1733  0019                     	;# 
  1734  001A                     	;# 
  1735  001B                     	;# 
  1736  001C                     	;# 
  1737  008C                     	;# 
  1738  008D                     	;# 
  1739  008E                     	;# 
  1740  0090                     	;# 
  1741  0091                     	;# 
  1742  0092                     	;# 
  1743  0095                     	;# 
  1744  0096                     	;# 
  1745  0097                     	;# 
  1746  0099                     	;# 
  1747  009A                     	;# 
  1748  009B                     	;# 
  1749  009B                     	;# 
  1750  009C                     	;# 
  1751  009D                     	;# 
  1752  009E                     	;# 
  1753  010C                     	;# 
  1754  010D                     	;# 
  1755  010E                     	;# 
  1756  0116                     	;# 
  1757  0117                     	;# 
  1758  011D                     	;# 
  1759  018C                     	;# 
  1760  018D                     	;# 
  1761  018E                     	;# 
  1762  0191                     	;# 
  1763  0191                     	;# 
  1764  0192                     	;# 
  1765  0193                     	;# 
  1766  0193                     	;# 
  1767  0194                     	;# 
  1768  0195                     	;# 
  1769  0196                     	;# 
  1770  0197                     	;# 
  1771  0199                     	;# 
  1772  019A                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019C                     	;# 
  1778  019C                     	;# 
  1779  019D                     	;# 
  1780  019E                     	;# 
  1781  019F                     	;# 
  1782  020D                     	;# 
  1783  0210                     	;# 
  1784  0211                     	;# 
  1785  0211                     	;# 
  1786  0212                     	;# 
  1787  0212                     	;# 
  1788  0213                     	;# 
  1789  0213                     	;# 
  1790  0214                     	;# 
  1791  0214                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0215                     	;# 
  1795  0216                     	;# 
  1796  0216                     	;# 
  1797  0217                     	;# 
  1798  0217                     	;# 
  1799  0291                     	;# 
  1800  0291                     	;# 
  1801  0292                     	;# 
  1802  0293                     	;# 
  1803  0298                     	;# 
  1804  0298                     	;# 
  1805  0299                     	;# 
  1806  029A                     	;# 
  1807  0394                     	;# 
  1808  0395                     	;# 
  1809  0396                     	;# 
  1810  0FE4                     	;# 
  1811  0FE5                     	;# 
  1812  0FE6                     	;# 
  1813  0FE7                     	;# 
  1814  0FE8                     	;# 
  1815  0FE9                     	;# 
  1816  0FEA                     	;# 
  1817  0FEB                     	;# 
  1818  0FED                     	;# 
  1819  0FEE                     	;# 
  1820  0FEF                     	;# 
  1821  0000                     	;# 
  1822  0001                     	;# 
  1823  0002                     	;# 
  1824  0003                     	;# 
  1825  0004                     	;# 
  1826  0005                     	;# 
  1827  0006                     	;# 
  1828  0007                     	;# 
  1829  0008                     	;# 
  1830  0009                     	;# 
  1831  000A                     	;# 
  1832  000B                     	;# 
  1833  000C                     	;# 
  1834  000D                     	;# 
  1835  000E                     	;# 
  1836  0010                     	;# 
  1837  0011                     	;# 
  1838  0012                     	;# 
  1839  0015                     	;# 
  1840  0016                     	;# 
  1841  0016                     	;# 
  1842  0017                     	;# 
  1843  0018                     	;# 
  1844  0019                     	;# 
  1845  001A                     	;# 
  1846  001B                     	;# 
  1847  001C                     	;# 
  1848  008C                     	;# 
  1849  008D                     	;# 
  1850  008E                     	;# 
  1851  0090                     	;# 
  1852  0091                     	;# 
  1853  0092                     	;# 
  1854  0095                     	;# 
  1855  0096                     	;# 
  1856  0097                     	;# 
  1857  0099                     	;# 
  1858  009A                     	;# 
  1859  009B                     	;# 
  1860  009B                     	;# 
  1861  009C                     	;# 
  1862  009D                     	;# 
  1863  009E                     	;# 
  1864  010C                     	;# 
  1865  010D                     	;# 
  1866  010E                     	;# 
  1867  0116                     	;# 
  1868  0117                     	;# 
  1869  011D                     	;# 
  1870  018C                     	;# 
  1871  018D                     	;# 
  1872  018E                     	;# 
  1873  0191                     	;# 
  1874  0191                     	;# 
  1875  0192                     	;# 
  1876  0193                     	;# 
  1877  0193                     	;# 
  1878  0194                     	;# 
  1879  0195                     	;# 
  1880  0196                     	;# 
  1881  0197                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019C                     	;# 
  1889  019C                     	;# 
  1890  019D                     	;# 
  1891  019E                     	;# 
  1892  019F                     	;# 
  1893  020D                     	;# 
  1894  0210                     	;# 
  1895  0211                     	;# 
  1896  0211                     	;# 
  1897  0212                     	;# 
  1898  0212                     	;# 
  1899  0213                     	;# 
  1900  0213                     	;# 
  1901  0214                     	;# 
  1902  0214                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0215                     	;# 
  1906  0216                     	;# 
  1907  0216                     	;# 
  1908  0217                     	;# 
  1909  0217                     	;# 
  1910  0291                     	;# 
  1911  0291                     	;# 
  1912  0292                     	;# 
  1913  0293                     	;# 
  1914  0298                     	;# 
  1915  0298                     	;# 
  1916  0299                     	;# 
  1917  029A                     	;# 
  1918  0394                     	;# 
  1919  0395                     	;# 
  1920  0396                     	;# 
  1921  0FE4                     	;# 
  1922  0FE5                     	;# 
  1923  0FE6                     	;# 
  1924  0FE7                     	;# 
  1925  0FE8                     	;# 
  1926  0FE9                     	;# 
  1927  0FEA                     	;# 
  1928  0FEB                     	;# 
  1929  0FED                     	;# 
  1930  0FEE                     	;# 
  1931  0FEF                     	;# 
  1932  0000                     	;# 
  1933  0001                     	;# 
  1934  0002                     	;# 
  1935  0003                     	;# 
  1936  0004                     	;# 
  1937  0005                     	;# 
  1938  0006                     	;# 
  1939  0007                     	;# 
  1940  0008                     	;# 
  1941  0009                     	;# 
  1942  000A                     	;# 
  1943  000B                     	;# 
  1944  000C                     	;# 
  1945  000D                     	;# 
  1946  000E                     	;# 
  1947  0010                     	;# 
  1948  0011                     	;# 
  1949  0012                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  001A                     	;# 
  1957  001B                     	;# 
  1958  001C                     	;# 
  1959  008C                     	;# 
  1960  008D                     	;# 
  1961  008E                     	;# 
  1962  0090                     	;# 
  1963  0091                     	;# 
  1964  0092                     	;# 
  1965  0095                     	;# 
  1966  0096                     	;# 
  1967  0097                     	;# 
  1968  0099                     	;# 
  1969  009A                     	;# 
  1970  009B                     	;# 
  1971  009B                     	;# 
  1972  009C                     	;# 
  1973  009D                     	;# 
  1974  009E                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0116                     	;# 
  1979  0117                     	;# 
  1980  011D                     	;# 
  1981  018C                     	;# 
  1982  018D                     	;# 
  1983  018E                     	;# 
  1984  0191                     	;# 
  1985  0191                     	;# 
  1986  0192                     	;# 
  1987  0193                     	;# 
  1988  0193                     	;# 
  1989  0194                     	;# 
  1990  0195                     	;# 
  1991  0196                     	;# 
  1992  0197                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019C                     	;# 
  2000  019C                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  020D                     	;# 
  2005  0210                     	;# 
  2006  0211                     	;# 
  2007  0211                     	;# 
  2008  0212                     	;# 
  2009  0212                     	;# 
  2010  0213                     	;# 
  2011  0213                     	;# 
  2012  0214                     	;# 
  2013  0214                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0215                     	;# 
  2017  0216                     	;# 
  2018  0216                     	;# 
  2019  0217                     	;# 
  2020  0217                     	;# 
  2021  0291                     	;# 
  2022  0291                     	;# 
  2023  0292                     	;# 
  2024  0293                     	;# 
  2025  0298                     	;# 
  2026  0298                     	;# 
  2027  0299                     	;# 
  2028  029A                     	;# 
  2029  0394                     	;# 
  2030  0395                     	;# 
  2031  0396                     	;# 
  2032  0FE4                     	;# 
  2033  0FE5                     	;# 
  2034  0FE6                     	;# 
  2035  0FE7                     	;# 
  2036  0FE8                     	;# 
  2037  0FE9                     	;# 
  2038  0FEA                     	;# 
  2039  0FEB                     	;# 
  2040  0FED                     	;# 
  2041  0FEE                     	;# 
  2042  0FEF                     	;# 
  2043                           
  2044                           	psect	idataBANK3
  2045  1130                     __pidataBANK3:	
  2046                           
  2047                           ;initializer for __product
  2048  1130  3463               	retlw	99
  2049  1131  3402               	retlw	2
  2050  1132  3400               	retlw	0
  2051  1133  3400               	retlw	0
  2052  1134  3400               	retlw	0
  2053  1135  3400               	retlw	0
  2054  1136  3400               	retlw	0
  2055  1137  3400               	retlw	0
  2056  1138  3400               	retlw	0
  2057  1139  3400               	retlw	0
  2058  113A  3400               	retlw	0
  2059  113B  3400               	retlw	0
  2060  113C  34FF               	retlw	255
  2061  113D  34FF               	retlw	255
  2062  113E  34FF               	retlw	255
  2063  113F  3400               	retlw	0
  2064  1140  3400               	retlw	0
  2065  1141  3400               	retlw	0
  2066  1142  3400               	retlw	0
  2067  1143  3400               	retlw	0
  2068  1144  3400               	retlw	0
  2069  1145  3400               	retlw	0
  2070  1146  3400               	retlw	0
  2071  1147  3400               	retlw	0
  2072  1148  3400               	retlw	0
  2073  1149  3400               	retlw	0
  2074  114A  3400               	retlw	0
  2075  114B  3400               	retlw	0
  2076  114C  3400               	retlw	0
  2077  114D  3400               	retlw	0
  2078  114E  3400               	retlw	0
  2079  114F  3400               	retlw	0
  2080                           
  2081                           	psect	stringtext
  2082  1000                     __pstringtext:	
  2083  1000                     _CC2500_registers_address:	
  2084  1000  3403               	retlw	3
  2085  1001  3416               	retlw	22
  2086  1002  3417               	retlw	23
  2087  1003  341E               	retlw	30
  2088  1004  341F               	retlw	31
  2089  1005  3420               	retlw	32
  2090  1006  342A               	retlw	42
  2091  1007  342B               	retlw	43
  2092  1008  340B               	retlw	11
  2093  1009  340C               	retlw	12
  2094  100A  340D               	retlw	13
  2095  100B  340E               	retlw	14
  2096  100C  340F               	retlw	15
  2097  100D  3410               	retlw	16
  2098  100E  3411               	retlw	17
  2099  100F  3412               	retlw	18
  2100  1010  3413               	retlw	19
  2101  1011  3414               	retlw	20
  2102  1012  340A               	retlw	10
  2103  1013  3415               	retlw	21
  2104  1014  3421               	retlw	33
  2105  1015  3422               	retlw	34
  2106  1016  3418               	retlw	24
  2107  1017  3419               	retlw	25
  2108  1018  341A               	retlw	26
  2109  1019  341B               	retlw	27
  2110  101A  341C               	retlw	28
  2111  101B  341D               	retlw	29
  2112  101C  3423               	retlw	35
  2113  101D  3424               	retlw	36
  2114  101E  3425               	retlw	37
  2115  101F  3426               	retlw	38
  2116  1020  3429               	retlw	41
  2117  1021  342C               	retlw	44
  2118  1022  342D               	retlw	45
  2119  1023  342E               	retlw	46
  2120  1024  3400               	retlw	0
  2121  1025  3401               	retlw	1
  2122  1026  3402               	retlw	2
  2123  1027  3407               	retlw	7
  2124  1028  3408               	retlw	8
  2125  1029  3409               	retlw	9
  2126  102A  3406               	retlw	6
  2127  102B  3404               	retlw	4
  2128  102C  3405               	retlw	5
  2129  102D  3427               	retlw	39
  2130  102E  3428               	retlw	40
  2131  102F                     __end_of_CC2500_registers_address:	
  2132  102F                     _CC2500_rfSettings:	
  2133  102F  3407               	retlw	7
  2134  1030  3407               	retlw	7
  2135  1031  3430               	retlw	48
  2136  1032  3487               	retlw	135
  2137  1033  346B               	retlw	107
  2138  1034  34F8               	retlw	248
  2139  1035  347F               	retlw	127
  2140  1036  343F               	retlw	63
  2141  1037  3409               	retlw	9
  2142  1038  3400               	retlw	0
  2143  1039  345C               	retlw	92
  2144  103A  34A7               	retlw	167
  2145  103B  3462               	retlw	98
  2146  103C  3486               	retlw	134
  2147  103D  3483               	retlw	131
  2148  103E  3403               	retlw	3
  2149  103F  3422               	retlw	34
  2150  1040  34F8               	retlw	248
  2151  1041  3400               	retlw	0
  2152  1042  3444               	retlw	68
  2153  1043  34B6               	retlw	182
  2154  1044  3410               	retlw	16
  2155  1045  3418               	retlw	24
  2156  1046  341D               	retlw	29
  2157  1047  341C               	retlw	28
  2158  1048  34C7               	retlw	199
  2159  1049  3400               	retlw	0
  2160  104A  34B2               	retlw	178
  2161  104B  34EA               	retlw	234
  2162  104C  340A               	retlw	10
  2163  104D  3400               	retlw	0
  2164  104E  3411               	retlw	17
  2165  104F  3459               	retlw	89
  2166  1050  3488               	retlw	136
  2167  1051  3431               	retlw	49
  2168  1052  340B               	retlw	11
  2169  1053  342F               	retlw	47
  2170  1054  342E               	retlw	46
  2171  1055  3406               	retlw	6
  2172  1056  3404               	retlw	4
  2173  1057  3405               	retlw	5
  2174  1058  3400               	retlw	0
  2175  1059  3430               	retlw	48
  2176  105A  34D3               	retlw	211
  2177  105B  3491               	retlw	145
  2178  105C  3441               	retlw	65
  2179  105D  3400               	retlw	0
  2180  105E                     __end_of_CC2500_rfSettings:	
  2181  105E                     _CC2500_patable_vaule:	
  2182  105E  34FE               	retlw	254
  2183  105F  34FE               	retlw	254
  2184  1060  34FE               	retlw	254
  2185  1061  34FE               	retlw	254
  2186  1062  34FE               	retlw	254
  2187  1063  34FE               	retlw	254
  2188  1064  34FE               	retlw	254
  2189  1065  34FE               	retlw	254
  2190  1066                     __end_of_CC2500_patable_vaule:	
  2191                           
  2192                           	psect	nvBANK0
  2193  006C                     __pnvBANK0:	
  2194  006C                     _product:	
  2195  006C                     	ds	1
  2196  000C                     _PORTA	set	12
  2197  000D                     _PORTB	set	13
  2198  000E                     _PORTC	set	14
  2199  0015                     _TMR0	set	21
  2200  005F                     _GIE	set	95
  2201  005B                     _IOCIE	set	91
  2202  0058                     _IOCIF	set	88
  2203  005E                     _PEIE	set	94
  2204  0060                     _RA0	set	96
  2205  0063                     _RA3	set	99
  2206  0064                     _RA4	set	100
  2207  0066                     _RA6	set	102
  2208  0067                     _RA7	set	103
  2209  0068                     _RB0	set	104
  2210  0069                     _RB1	set	105
  2211  006A                     _RB2	set	106
  2212  006B                     _RB3	set	107
  2213  006C                     _RB4	set	108
  2214  006D                     _RB5	set	109
  2215  0070                     _RC0	set	112
  2216  0071                     _RC1	set	113
  2217  0072                     _RC2	set	114
  2218  0074                     _RC4	set	116
  2219  0075                     _RC5	set	117
  2220  0077                     _RC7	set	119
  2221  005D                     _TMR0IE	set	93
  2222  005A                     _TMR0IF	set	90
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0095                     _OPTION_REG	set	149
  2228  0099                     _OSCCON	set	153
  2229  008C                     _TRISA	set	140
  2230  008D                     _TRISB	set	141
  2231  008E                     _TRISC	set	142
  2232  0097                     _WDTCON	set	151
  2233  04E9                     _GO_nDONE	set	1257
  2234  0117                     _FVRCON	set	279
  2235  010C                     _LATA	set	268
  2236  010D                     _LATB	set	269
  2237  010E                     _LATC	set	270
  2238  018C                     _ANSELA	set	396
  2239  018D                     _ANSELB	set	397
  2240  018E                     _ANSELC	set	398
  2241  0192                     _PMADRH	set	402
  2242  0191                     _PMADRL	set	401
  2243  0196                     _PMCON2	set	406
  2244  0194                     _PMDATH	set	404
  2245  0193                     _PMDATL	set	403
  2246  0CAE                     _CFGS	set	3246
  2247  0CAC                     _FREE	set	3244
  2248  0CAD                     _LWLO	set	3245
  2249  0CA8                     _RD	set	3240
  2250  0CA9                     _WR	set	3241
  2251  0CAA                     _WREN	set	3242
  2252  1069                     _WPUB1	set	4201
  2253  106A                     _WPUB2	set	4202
  2254  0396                     _IOCBF	set	918
  2255  0395                     _IOCBN	set	917
  2256  0394                     _IOCBP	set	916
  2257  1CB2                     _IOCBF2	set	7346
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0015                     start_initialization:	
  2263  0015                     __initialization:	
  2264                           
  2265                           ; Clear objects allocated to BITCOMMON
  2266  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2270  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2272  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2273  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK0
  2276  001B  01ED               	clrf	__pbssBANK0& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  001C  30A0               	movlw	low __pbssBANK1
  2280  001D  0084               	movwf	4
  2281  001E  3000               	movlw	high __pbssBANK1
  2282  001F  0085               	movwf	5
  2283  0020  304F               	movlw	79
  2284  0021  319D  254F  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0024  3020               	movlw	low __pbssBANK2
  2288  0025  0084               	movwf	4
  2289  0026  3001               	movlw	high __pbssBANK2
  2290  0027  0085               	movwf	5
  2291  0028  3044               	movlw	68
  2292  0029  319D  254F  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  002C  30A0               	movlw	low __pbssBANK3
  2296  002D  0084               	movwf	4
  2297  002E  3001               	movlw	high __pbssBANK3
  2298  002F  0085               	movwf	5
  2299  0030  3025               	movlw	37
  2300  0031  319D  254F  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Initialize objects allocated to BANK3
  2303  0034  3030               	movlw	low __pidataBANK3
  2304  0035  0084               	movwf	4
  2305  0036  3091               	movlw	(high __pidataBANK3)| (0+128)
  2306  0037  0085               	movwf	5
  2307  0038  30C5               	movlw	low __pdataBANK3
  2308  0039  0086               	movwf	6
  2309  003A  3001               	movlw	high __pdataBANK3
  2310  003B  0087               	movwf	7
  2311  003C  3020               	movlw	32
  2312  003D  319D  2549         	fcall	init_ram
  2313  003F                     end_of_initialization:	
  2314                           ;End of C runtime variable initialization code
  2315                           
  2316  003F                     __end_of__initialization:	
  2317  003F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2318  0040  0020               	movlb	0
  2319  0041  3197  2FA8         	ljmp	_main	;jump to C main() function
  2320                           
  2321                           	psect	bitbssCOMMON
  2322  03D8                     __pbitbssCOMMON:	
  2323  03D8                     _Receive_OK:	
  2324  03D8                     	ds	1
  2325  03D9                     _Transceive_OK:	
  2326  03D9                     	ds	1
  2327                           
  2328                           	psect	bssCOMMON
  2329  0076                     __pbssCOMMON:	
  2330  0076                     _DelayOff:	
  2331  0076                     	ds	1
  2332  0077                     _Dimmer:	
  2333  0077                     	ds	1
  2334  0078                     _DimmerLightsIntr:	
  2335  0078                     	ds	1
  2336  0079                     _LED:	
  2337  0079                     	ds	1
  2338  007A                     _Sw:	
  2339  007A                     	ds	1
  2340                           
  2341                           	psect	bssBANK0
  2342  006D                     __pbssBANK0:	
  2343  006D                     _DimmerLights:	
  2344  006D                     	ds	1
  2345                           
  2346                           	psect	bssBANK1
  2347  00A0                     __pbssBANK1:	
  2348  00A0                     _myMain:	
  2349  00A0                     	ds	18
  2350  00B2                     _Buz1:	
  2351  00B2                     	ds	12
  2352  00BE                     _RF1:	
  2353  00BE                     	ds	9
  2354  00C7                     _PF1:	
  2355  00C7                     	ds	8
  2356  00CF                     _RF_Count:	
  2357  00CF                     	ds	2
  2358  00D1                     _WDT:	
  2359  00D1                     	ds	2
  2360  00D3                     _CRC:	
  2361  00D3                     	ds	1
  2362  00D4                     _DimmerLights11:	
  2363  00D4                     	ds	1
  2364  00D5                     _DimmerLightsIntrIOC:	
  2365  00D5                     	ds	1
  2366  00D6                     _RFSW:	
  2367  00D6                     	ds	1
  2368  00D7                     _RSSI:	
  2369  00D7                     	ds	1
  2370  00D8                     _Rx_Length:	
  2371  00D8                     	ds	1
  2372  00D9                     _SPI0Buffer:	
  2373  00D9                     	ds	1
  2374  00DA                     _Tx_Length:	
  2375  00DA                     	ds	1
  2376  00DB                     _r_address:	
  2377  00DB                     	ds	1
  2378  00DC                     _r_data:	
  2379  00DC                     	ds	1
  2380  00DD                     _s_data:	
  2381  00DD                     	ds	1
  2382  00DE                     _Temp1:	
  2383  00DE                     	ds	14
  2384  00EC                     _DlySw1:	
  2385  00EC                     	ds	2
  2386  00EE                     _RFSW1:	
  2387  00EE                     	ds	1
  2388                           
  2389                           	psect	bssBANK2
  2390  0120                     __pbssBANK2:	
  2391  0120                     _RF_Data:	
  2392  0120                     	ds	21
  2393  0135                     _Timer0:	
  2394  0135                     	ds	8
  2395  013D                     _DimmerLights1:	
  2396  013D                     	ds	15
  2397  014C                     _Sw1:	
  2398  014C                     	ds	9
  2399  0155                     _VarErrLED:	
  2400  0155                     	ds	4
  2401  0159                     _VarLED1:	
  2402  0159                     	ds	4
  2403  015D                     _VarLED2:	
  2404  015D                     	ds	4
  2405  0161                     _Dimmer1:	
  2406  0161                     	ds	3
  2407                           
  2408                           	psect	bssBANK3
  2409  01A0                     __pbssBANK3:	
  2410  01A0                     _Memory:	
  2411  01A0                     	ds	37
  2412                           
  2413                           	psect	dataBANK3
  2414  01C5                     __pdataBANK3:	
  2415  01C5                     __product:	
  2416  01C5                     	ds	32
  2417                           
  2418                           	psect	clrtext
  2419  1D4F                     clear_ram0:	
  2420                           ;	Called with FSR0 containing the base address, and
  2421                           ;	WREG with the size to clear
  2422                           
  2423  1D4F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2424  1D50                     clrloop0:	
  2425  1D50  0180               	clrf	0	;clear RAM location pointed to by FSR
  2426  1D51  3101               	addfsr 0,1
  2427  1D52  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2428  1D53  2D50               	goto	clrloop0	;have we reached the end yet?
  2429  1D54  3400               	retlw	0	;all done for this memory range, return
  2430                           
  2431                           	psect	inittext
  2432  1D49                     init_ram:	
  2433  1D49  00FE               	movwf	126
  2434  1D4A                     initloop:	
  2435  1D4A  0012               	moviw fsr0++
  2436  1D4B  001E               	movwi fsr1++
  2437  1D4C  0BFE               	decfsz	126,f
  2438  1D4D  2D4A               	goto	initloop
  2439  1D4E  3400               	retlw	0
  2440                           
  2441                           	psect	cstackBANK2
  2442  0164                     __pcstackBANK2:	
  2443  0164                     ?_main:	
  2444  0164                     main@argc:	
  2445                           ; 2 bytes @ 0x0
  2446                           
  2447                           
  2448                           ; 2 bytes @ 0x0
  2449  0164                     	ds	2
  2450  0166                     main@argv:	
  2451                           
  2452                           ; 2 bytes @ 0x2
  2453  0166                     	ds	2
  2454                           
  2455                           	psect	cstackCOMMON
  2456  0070                     __pcstackCOMMON:	
  2457  0070                     ?_Timeout_Counter:	
  2458  0070                     ?_set_TimeoutCleared:	
  2459                           ; 0 bytes @ 0x0
  2460                           
  2461  0070                     ?_CC2500_WriteByte:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_WriteCommand:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_ReadStatus:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ReadByte:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_PowerRST:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_InitSetREG:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_InitPATable:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_ClearTXFIFO:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ClearRXFIFO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_FrequencyCabr:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_SIDLEMode:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_DlyOff_Initialization:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_DlyOff_Main:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_setTxData:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setDimmerLights_Initialization:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_Dimmer_Initialization:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_setMemory_GO:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setDimmerLights_Main:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setDimmerLights_ERROR:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setLED_Initialization:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setLED_Main:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_Fosc_Set:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_IO_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_TMR0_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_ADC_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_IOC_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_WDT_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_IOC_ISR:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_TMR0_ISR:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_Flash_Memory_Write:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Flash_Memory_Modify:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_WDT_Clearing:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_setTemp_Initialization:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setTemp_Main:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setOverTemp_Exceptions:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setSw_Enable:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_setRF_Enable:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_setPowerFault_Initialization:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_setPowerFault_Main:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_setPowerFault_Exceptions:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_setRF_Initialization:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setRF_Main:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_getRxData:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_setLog_Code:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setControl_Lights_Table:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setRFSW_Control:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setRFSW_AdjControl:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setRF_DimmerValue:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setSw_Initialization:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setSw_Main:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_Sw_DimmerOnFunc:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_Sw_DimmerAdjFunc:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_Sw_DimmerOffFunc:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_myMain_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_my_MainTime:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_Buzzer_Initialization:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_Buzzer_Main:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_TxData:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_RxData:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_PowerOnInitial:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_DelayOffPointSelect:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DelayOff_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DelayOff_Main:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DimmerIntrIOCPointSelect:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ??_DimmerIntrIOCPointSelect:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_DimmerIntrPointSelect:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ??_DimmerIntrPointSelect:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_IntrControl:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_DimmerLightsPointSelect:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DimmerLights_Initialization:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DimmerLights_Close:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_Main:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Exceptions:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_AdjRF:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_LedPointSelect:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_LED_Initialization:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_LED_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_Mcu_Initialization:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_ISR:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setDimmerReClock:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_Flash_Memory_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Flash_Memory_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Flash_Memory_Unlock:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Erasing:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_WDT_Main:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_Temp_Initialization:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setTemp_Enable:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_getTemp_AD:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_Temp_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_PowerFault_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_PowerFault_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_getPowerFault_AD:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_RF_Initialization:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_RF_Main:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setRF_Learn:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_RfSWPointSelect:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_TouchPower:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_SwPointSelect:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_Switch_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_Switch_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayTimejudge:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_getDimmerLights_StatusFlag:	
  2768                           ; 1 bytes @ 0x0
  2769                           
  2770  0070                     ?_getPercentValue:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_Flash_Memory_Read:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_getPF_Safe:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_setPercentValue:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_getTemp_Safe:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785                           
  2786                           ; 1 bytes @ 0x0
  2787  0070                     	ds	1
  2788  0071                     DimmerIntrIOCPointSelect@lights:	
  2789  0071                     DimmerIntrPointSelect@lights:	
  2790                           ; 1 bytes @ 0x1
  2791                           
  2792                           
  2793                           ; 1 bytes @ 0x1
  2794  0071                     	ds	1
  2795  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2796  0072                     ??_setDimmerLights_IntrControl:	
  2797                           ; 0 bytes @ 0x2
  2798                           
  2799  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2800                           ; 0 bytes @ 0x2
  2801                           
  2802                           
  2803                           ; 1 bytes @ 0x2
  2804  0072                     	ds	1
  2805  0073                     ??_IOC_ISR:	
  2806  0073                     ??_setDimmerReClock:	
  2807                           ; 0 bytes @ 0x3
  2808                           
  2809                           
  2810                           ; 0 bytes @ 0x3
  2811  0073                     	ds	1
  2812  0074                     setDimmerLights_IntrControl@lights:	
  2813                           
  2814                           ; 1 bytes @ 0x4
  2815  0074                     	ds	1
  2816  0075                     ??_TMR0_ISR:	
  2817  0075                     ??_ISR:	
  2818                           ; 0 bytes @ 0x5
  2819                           
  2820                           
  2821                           ; 0 bytes @ 0x5
  2822  0075                     	ds	1
  2823                           
  2824                           	psect	cstackBANK0
  2825  0020                     __pcstackBANK0:	
  2826  0020                     ??_Timeout_Counter:	
  2827  0020                     ??_set_TimeoutCleared:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0020                     ??_CC2500_WriteByte:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_CC2500_ReadByte:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ?_DelayTime_1us:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ??_setTxData:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_Dimmer_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_getDimmerLights_StatusFlag:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_setMemory_GO:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_Fosc_Set:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_IO_Set:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_TMR0_Set:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_ADC_Set:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_IOC_Set:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_WDT_Set:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_Flash_Memory_Read:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_Flash_Memory_Write:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_WDT_Clearing:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_setTemp_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_getPF_Safe:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_setRF_Enable:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_setPowerFault_Initialization:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setRF_Initialization:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_myMain_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_Buzzer_Initialization:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_Buzzer_Main:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_DelayOffPointSelect:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_DimmerLightsPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_LedPointSelect:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_Flash_Memory_Unlock:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_Flash_Memory_Erasing:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_WDT_Main:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_Temp_Initialization:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_setTemp_Enable:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_getTemp_Safe:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_PowerFault_Initialization:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_setRF_Learn:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_RfSWPointSelect:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_TouchPower:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_SwPointSelect:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ?___bmul:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ?_getBuz_GO:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0020                     ?_getAD:	
  2951                           ; 2 bytes @ 0x0
  2952                           
  2953  0020                     ?___wmul:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     ?___awdiv:	
  2957                           ; 2 bytes @ 0x0
  2958                           
  2959  0020                     ?___ftpack:	
  2960                           ; 2 bytes @ 0x0
  2961                           
  2962  0020                     getDimmerLights_StatusFlag@Status:	
  2963                           ; 3 bytes @ 0x0
  2964                           
  2965  0020                     getAD@adcon1:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     setTemp_Enable@command:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     getTemp_Safe@result:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     getPF_Safe@i:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0020                     setRF_Learn@command:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     setRF_Enable@command:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0020                     ___bmul@multiplicand:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0020                     DelayTime_1us@count:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0020                     ___wmul@multiplier:	
  2990                           ; 2 bytes @ 0x0
  2991                           
  2992  0020                     ___awdiv@divisor:	
  2993                           ; 2 bytes @ 0x0
  2994                           
  2995  0020                     ___ftpack@arg:	
  2996                           ; 2 bytes @ 0x0
  2997                           
  2998                           
  2999                           ; 3 bytes @ 0x0
  3000  0020                     	ds	1
  3001  0021                     ??_Mcu_Initialization:	
  3002  0021                     ??_RF_Initialization:	
  3003                           ; 0 bytes @ 0x1
  3004                           
  3005  0021                     ??___bmul:	
  3006                           ; 0 bytes @ 0x1
  3007                           
  3008  0021                     CC2500_WriteByte@loop_a:	
  3009                           ; 0 bytes @ 0x1
  3010                           
  3011  0021                     CC2500_ReadByte@loop_b:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     DelayOffPointSelect@sw:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     DimmerLightsPointSelect@lights:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     LedPointSelect@led:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     Flash_Memory_Read@i:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     Flash_Memory_Write@i:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     RfSWPointSelect@sw:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032  0021                     SwPointSelect@sw:	
  3033                           ; 1 bytes @ 0x1
  3034                           
  3035                           
  3036                           ; 1 bytes @ 0x1
  3037  0021                     	ds	1
  3038  0022                     ??_CC2500_WriteCommand:	
  3039  0022                     ??_CC2500_ReadStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ??_DelayTime_1us:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ?_CC2500_WriteREG:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ??_DlyOff_Initialization:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setSw_Status:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ?_setRFSW_Status:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_setDimmerLights_Trigger:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ?_setDimmerLights_Switch:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ??_setDimmerLights_Initialization:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ?_setDimmerLights_TriggerERROR:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ?_setLED:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_setLED_Main:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_setSw_Enable:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ??_getBuz_GO:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_AdjGo:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     ?_setDimmerLights_TriggerAdj:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     CC2500_WriteREG@value:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0022                     DlyOff_Initialization@sw:	
  3091                           ; 1 bytes @ 0x2
  3092                           
  3093  0022                     setDimmerLights_TriggerERROR@command:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     setDimmerLights_Switch@command:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     setDimmerLights_AdjGo@command:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setDimmerLights_Trigger@command:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setDimmerLights_TriggerAdj@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     setLED@command:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     Flash_Memory_Read@address:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setMemory_GO@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setRFSW_Status@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setSw_Enable@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     setSw_Status@command:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     ___bmul@product:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     DelayTime_1us@i:	
  3130                           ; 1 bytes @ 0x2
  3131                           
  3132  0022                     ___wmul@multiplicand:	
  3133                           ; 2 bytes @ 0x2
  3134                           
  3135  0022                     ___awdiv@dividend:	
  3136                           ; 2 bytes @ 0x2
  3137                           
  3138                           
  3139                           ; 2 bytes @ 0x2
  3140  0022                     	ds	1
  3141  0023                     ??_CC2500_WriteREG:	
  3142  0023                     ??_setSw_Status:	
  3143                           ; 0 bytes @ 0x3
  3144                           
  3145  0023                     ??_setRFSW_Status:	
  3146                           ; 0 bytes @ 0x3
  3147                           
  3148  0023                     ??_setDimmerLights_Trigger:	
  3149                           ; 0 bytes @ 0x3
  3150                           
  3151  0023                     ??_setDimmerLights_Switch:	
  3152                           ; 0 bytes @ 0x3
  3153                           
  3154  0023                     ??_setDimmerLights_TriggerERROR:	
  3155                           ; 0 bytes @ 0x3
  3156                           
  3157  0023                     ??_setLED:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_DelayOff_Initialization:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_DimmerLights_Close:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_setDimmerLights_AdjGo:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     ??_setDimmerLights_TriggerAdj:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     ??_getAD:	
  3173                           ; 0 bytes @ 0x3
  3174                           
  3175  0023                     CC2500_WriteCommand@command:	
  3176                           ; 0 bytes @ 0x3
  3177                           
  3178  0023                     CC2500_ReadStatus@status_addr:	
  3179                           ; 1 bytes @ 0x3
  3180                           
  3181  0023                     setDimmerLights_Initialization@lights:	
  3182                           ; 1 bytes @ 0x3
  3183                           
  3184  0023                     setDimmerLights_TriggerERROR@lights:	
  3185                           ; 1 bytes @ 0x3
  3186                           
  3187  0023                     setDimmerLights_Switch@lights:	
  3188                           ; 1 bytes @ 0x3
  3189                           
  3190  0023                     setDimmerLights_AdjGo@lights:	
  3191                           ; 1 bytes @ 0x3
  3192                           
  3193  0023                     setDimmerLights_Trigger@lights:	
  3194                           ; 1 bytes @ 0x3
  3195                           
  3196  0023                     setDimmerLights_TriggerAdj@lights:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     setLED@led:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     getAD@adcon0:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     Flash_Memory_Read@ret:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     setRFSW_Status@sw:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     setSw_Status@sw:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214  0023                     ___bmul@multiplier:	
  3215                           ; 1 bytes @ 0x3
  3216                           
  3217  0023                     ___ftpack@exp:	
  3218                           ; 1 bytes @ 0x3
  3219                           
  3220                           
  3221                           ; 1 bytes @ 0x3
  3222  0023                     	ds	1
  3223  0024                     ??_CC2500_ClearTXFIFO:	
  3224  0024                     ??_CC2500_ClearRXFIFO:	
  3225                           ; 0 bytes @ 0x4
  3226                           
  3227  0024                     ??_CC2500_SIDLEMode:	
  3228                           ; 0 bytes @ 0x4
  3229                           
  3230  0024                     ??_DelayTimejudge:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ?_setDimmerLights:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ??_setDimmerLights_ERROR:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     ??_setLED_Initialization:	
  3240                           ; 0 bytes @ 0x4
  3241                           
  3242  0024                     ??_Flash_Memory_Modify:	
  3243                           ; 0 bytes @ 0x4
  3244                           
  3245  0024                     ??_setSw_Initialization:	
  3246                           ; 0 bytes @ 0x4
  3247                           
  3248  0024                     ??_Sw_DimmerAdjFunc:	
  3249                           ; 0 bytes @ 0x4
  3250                           
  3251  0024                     ??_CC2500_TxData:	
  3252                           ; 0 bytes @ 0x4
  3253                           
  3254  0024                     ??_CC2500_RxData:	
  3255                           ; 0 bytes @ 0x4
  3256                           
  3257  0024                     ??_DimmerLights_Initialization:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??_getTemp_AD:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     ??_getPowerFault_AD:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     ??___wmul:	
  3267                           ; 0 bytes @ 0x4
  3268                           
  3269  0024                     ??___awdiv:	
  3270                           ; 0 bytes @ 0x4
  3271                           
  3272  0024                     CC2500_WriteREG@w_addr:	
  3273                           ; 0 bytes @ 0x4
  3274                           
  3275  0024                     setDimmerLights@status:	
  3276                           ; 1 bytes @ 0x4
  3277                           
  3278  0024                     setLED_Initialization@led:	
  3279                           ; 1 bytes @ 0x4
  3280                           
  3281  0024                     setLED_Main@led:	
  3282                           ; 1 bytes @ 0x4
  3283                           
  3284  0024                     setSw_Initialization@sw:	
  3285                           ; 1 bytes @ 0x4
  3286                           
  3287  0024                     Sw_DimmerAdjFunc@Idle:	
  3288                           ; 1 bytes @ 0x4
  3289                           
  3290  0024                     ___ftpack@sign:	
  3291                           ; 1 bytes @ 0x4
  3292                           
  3293  0024                     getBuz_GO@i:	
  3294                           ; 1 bytes @ 0x4
  3295                           
  3296  0024                     DelayTime_1us@j:	
  3297                           ; 2 bytes @ 0x4
  3298                           
  3299  0024                     ___wmul@product:	
  3300                           ; 2 bytes @ 0x4
  3301                           
  3302                           
  3303                           ; 2 bytes @ 0x4
  3304  0024                     	ds	1
  3305  0025                     ??_CC2500_InitSetREG:	
  3306  0025                     ??_CC2500_InitPATable:	
  3307                           ; 0 bytes @ 0x5
  3308                           
  3309  0025                     ??_setDimmerLights:	
  3310                           ; 0 bytes @ 0x5
  3311                           
  3312  0025                     ??___ftpack:	
  3313                           ; 0 bytes @ 0x5
  3314                           
  3315  0025                     ??_LED_Initialization:	
  3316                           ; 0 bytes @ 0x5
  3317                           
  3318  0025                     ??_LED_Main:	
  3319                           ; 0 bytes @ 0x5
  3320                           
  3321  0025                     ??_Switch_Initialization:	
  3322                           ; 0 bytes @ 0x5
  3323                           
  3324  0025                     CC2500_TxData@loop_e:	
  3325                           ; 0 bytes @ 0x5
  3326                           
  3327  0025                     CC2500_RxData@loop_f:	
  3328                           ; 1 bytes @ 0x5
  3329                           
  3330  0025                     setDimmerLights_ERROR@lights:	
  3331                           ; 1 bytes @ 0x5
  3332                           
  3333  0025                     Flash_Memory_Modify@i:	
  3334                           ; 1 bytes @ 0x5
  3335                           
  3336  0025                     getTemp_AD@channel:	
  3337                           ; 1 bytes @ 0x5
  3338                           
  3339  0025                     getPowerFault_AD@channel:	
  3340                           ; 1 bytes @ 0x5
  3341                           
  3342  0025                     Sw_DimmerAdjFunc@sw:	
  3343                           ; 1 bytes @ 0x5
  3344                           
  3345  0025                     ___awdiv@counter:	
  3346                           ; 1 bytes @ 0x5
  3347                           
  3348                           
  3349                           ; 1 bytes @ 0x5
  3350  0025                     	ds	1
  3351  0026                     ??_CC2500_PowerRST:	
  3352  0026                     ??_CC2500_FrequencyCabr:	
  3353                           ; 0 bytes @ 0x6
  3354                           
  3355  0026                     ??_Flash_Memory_Main:	
  3356                           ; 0 bytes @ 0x6
  3357                           
  3358  0026                     CC2500_InitSetREG@temp1:	
  3359                           ; 0 bytes @ 0x6
  3360                           
  3361  0026                     CC2500_InitPATable@temp:	
  3362                           ; 1 bytes @ 0x6
  3363                           
  3364  0026                     DelayTimejudge@i:	
  3365                           ; 1 bytes @ 0x6
  3366                           
  3367  0026                     setDimmerLights@lights:	
  3368                           ; 1 bytes @ 0x6
  3369                           
  3370  0026                     ___awdiv@sign:	
  3371                           ; 1 bytes @ 0x6
  3372                           
  3373                           
  3374                           ; 1 bytes @ 0x6
  3375  0026                     	ds	1
  3376  0027                     CC2500_InitSetREG@temp2:	
  3377  0027                     CC2500_InitPATable@loop_d:	
  3378                           ; 1 bytes @ 0x7
  3379                           
  3380  0027                     DelayTimejudge@j:	
  3381                           ; 1 bytes @ 0x7
  3382                           
  3383  0027                     ___awdiv@quotient:	
  3384                           ; 1 bytes @ 0x7
  3385                           
  3386                           
  3387                           ; 2 bytes @ 0x7
  3388  0027                     	ds	1
  3389  0028                     ?___awtoft:	
  3390  0028                     CC2500_InitSetREG@loop_c:	
  3391                           ; 3 bytes @ 0x8
  3392                           
  3393  0028                     DelayTimejudge@k:	
  3394                           ; 1 bytes @ 0x8
  3395                           
  3396  0028                     ___awtoft@c:	
  3397                           ; 1 bytes @ 0x8
  3398                           
  3399                           
  3400                           ; 2 bytes @ 0x8
  3401  0028                     	ds	1
  3402  0029                     ?_setBuz:	
  3403  0029                     ??_CC2500_PowerOnInitial:	
  3404                           ; 0 bytes @ 0x9
  3405                           
  3406  0029                     DelayTimejudge@value:	
  3407                           ; 0 bytes @ 0x9
  3408                           
  3409  0029                     setBuz@time:	
  3410                           ; 1 bytes @ 0x9
  3411                           
  3412                           
  3413                           ; 2 bytes @ 0x9
  3414  0029                     	ds	1
  3415  002A                     ?_setDelayOff_GO:	
  3416  002A                     setDelayOff_GO@command:	
  3417                           ; 0 bytes @ 0xA
  3418                           
  3419                           
  3420                           ; 1 bytes @ 0xA
  3421  002A                     	ds	1
  3422  002B                     ??_setBuz:	
  3423  002B                     ??___awtoft:	
  3424                           ; 0 bytes @ 0xB
  3425                           
  3426  002B                     setDelayOff_GO@value:	
  3427                           ; 0 bytes @ 0xB
  3428                           
  3429                           
  3430                           ; 1 bytes @ 0xB
  3431  002B                     	ds	1
  3432  002C                     ??_setDelayOff_GO:	
  3433  002C                     setBuz@count:	
  3434                           ; 0 bytes @ 0xC
  3435                           
  3436                           
  3437                           ; 1 bytes @ 0xC
  3438  002C                     	ds	1
  3439  002D                     ??_setLog_Code:	
  3440  002D                     ??_my_MainTime:	
  3441                           ; 0 bytes @ 0xD
  3442                           
  3443  002D                     ??_DimmerLights_Exceptions:	
  3444                           ; 0 bytes @ 0xD
  3445                           
  3446  002D                     DimmerLights_Exceptions@status:	
  3447                           ; 0 bytes @ 0xD
  3448                           
  3449  002D                     ___awtoft@sign:	
  3450                           ; 1 bytes @ 0xD
  3451                           
  3452                           
  3453                           ; 1 bytes @ 0xD
  3454  002D                     	ds	1
  3455  002E                     ??_setOverTemp_Exceptions:	
  3456  002E                     ??_setPowerFault_Exceptions:	
  3457                           ; 0 bytes @ 0xE
  3458                           
  3459  002E                     ?___ftdiv:	
  3460                           ; 0 bytes @ 0xE
  3461                           
  3462  002E                     ?___ftmul:	
  3463                           ; 3 bytes @ 0xE
  3464                           
  3465  002E                     setDelayOff_GO@sw:	
  3466                           ; 3 bytes @ 0xE
  3467                           
  3468  002E                     ___ftdiv@f2:	
  3469                           ; 1 bytes @ 0xE
  3470                           
  3471  002E                     ___ftmul@f1:	
  3472                           ; 3 bytes @ 0xE
  3473                           
  3474                           
  3475                           ; 3 bytes @ 0xE
  3476  002E                     	ds	1
  3477  002F                     setOverTemp_Exceptions@i:	
  3478  002F                     setPowerFault_Exceptions@i:	
  3479                           ; 1 bytes @ 0xF
  3480                           
  3481                           
  3482                           ; 1 bytes @ 0xF
  3483  002F                     	ds	1
  3484  0030                     setOverTemp_Exceptions@command:	
  3485  0030                     setPowerFault_Exceptions@command:	
  3486                           ; 1 bytes @ 0x10
  3487                           
  3488                           
  3489                           ; 1 bytes @ 0x10
  3490  0030                     	ds	1
  3491  0031                     ??_setTemp_Main:	
  3492  0031                     ??_setPowerFault_Main:	
  3493                           ; 0 bytes @ 0x11
  3494                           
  3495  0031                     ___ftdiv@f1:	
  3496                           ; 0 bytes @ 0x11
  3497                           
  3498  0031                     ___ftmul@f2:	
  3499                           ; 3 bytes @ 0x11
  3500                           
  3501                           
  3502                           ; 3 bytes @ 0x11
  3503  0031                     	ds	1
  3504  0032                     ??_Temp_Main:	
  3505  0032                     ??_PowerFault_Main:	
  3506                           ; 0 bytes @ 0x12
  3507                           
  3508                           
  3509                           ; 0 bytes @ 0x12
  3510  0032                     	ds	2
  3511  0034                     ??___ftdiv:	
  3512  0034                     ??___ftmul:	
  3513                           ; 0 bytes @ 0x14
  3514                           
  3515                           
  3516                           ; 0 bytes @ 0x14
  3517  0034                     	ds	4
  3518  0038                     ___ftdiv@cntr:	
  3519  0038                     ___ftmul@exp:	
  3520                           ; 1 bytes @ 0x18
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x18
  3524  0038                     	ds	1
  3525  0039                     ___ftdiv@f3:	
  3526  0039                     ___ftmul@f3_as_product:	
  3527                           ; 3 bytes @ 0x19
  3528                           
  3529                           
  3530                           ; 3 bytes @ 0x19
  3531  0039                     	ds	3
  3532  003C                     ___ftdiv@exp:	
  3533  003C                     ___ftmul@cntr:	
  3534                           ; 1 bytes @ 0x1C
  3535                           
  3536                           
  3537                           ; 1 bytes @ 0x1C
  3538  003C                     	ds	1
  3539  003D                     ___ftdiv@sign:	
  3540  003D                     ___ftmul@sign:	
  3541                           ; 1 bytes @ 0x1D
  3542                           
  3543                           
  3544                           ; 1 bytes @ 0x1D
  3545  003D                     	ds	1
  3546  003E                     ?___ftadd:	
  3547  003E                     ___ftadd@f1:	
  3548                           ; 3 bytes @ 0x1E
  3549                           
  3550                           
  3551                           ; 3 bytes @ 0x1E
  3552  003E                     	ds	3
  3553  0041                     ___ftadd@f2:	
  3554                           
  3555                           ; 3 bytes @ 0x21
  3556  0041                     	ds	3
  3557  0044                     ??___ftadd:	
  3558                           
  3559                           ; 0 bytes @ 0x24
  3560  0044                     	ds	4
  3561  0048                     ___ftadd@sign:	
  3562                           
  3563                           ; 1 bytes @ 0x28
  3564  0048                     	ds	1
  3565  0049                     ___ftadd@exp2:	
  3566                           
  3567                           ; 1 bytes @ 0x29
  3568  0049                     	ds	1
  3569  004A                     ___ftadd@exp1:	
  3570                           
  3571                           ; 1 bytes @ 0x2A
  3572  004A                     	ds	1
  3573  004B                     ?___fttol:	
  3574  004B                     ___fttol@f1:	
  3575                           ; 4 bytes @ 0x2B
  3576                           
  3577                           
  3578                           ; 3 bytes @ 0x2B
  3579  004B                     	ds	4
  3580  004F                     ??___fttol:	
  3581                           
  3582                           ; 0 bytes @ 0x2F
  3583  004F                     	ds	4
  3584  0053                     ___fttol@sign1:	
  3585                           
  3586                           ; 1 bytes @ 0x33
  3587  0053                     	ds	1
  3588  0054                     ___fttol@lval:	
  3589                           
  3590                           ; 4 bytes @ 0x34
  3591  0054                     	ds	4
  3592  0058                     ___fttol@exp1:	
  3593                           
  3594                           ; 1 bytes @ 0x38
  3595  0058                     	ds	1
  3596  0059                     ??_getPercentValue:	
  3597  0059                     ??_setPercentValue:	
  3598                           ; 0 bytes @ 0x39
  3599                           
  3600  0059                     setPercentValue@value:	
  3601                           ; 0 bytes @ 0x39
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x39
  3605  0059                     	ds	1
  3606  005A                     setPercentValue@i:	
  3607                           
  3608                           ; 3 bytes @ 0x3A
  3609  005A                     	ds	1
  3610  005B                     getPercentValue@value:	
  3611                           
  3612                           ; 1 bytes @ 0x3B
  3613  005B                     	ds	1
  3614  005C                     getPercentValue@i:	
  3615                           
  3616                           ; 3 bytes @ 0x3C
  3617  005C                     	ds	1
  3618  005D                     ?_setRF_DimmerLights:	
  3619  005D                     ??_Flash_Memory_Initialization:	
  3620                           ; 0 bytes @ 0x3D
  3621                           
  3622  005D                     setRF_DimmerLights@on:	
  3623                           ; 0 bytes @ 0x3D
  3624                           
  3625                           
  3626                           ; 1 bytes @ 0x3D
  3627  005D                     	ds	1
  3628  005E                     ??_setRF_DimmerLights:	
  3629  005E                     Flash_Memory_Initialization@i:	
  3630                           ; 0 bytes @ 0x3E
  3631                           
  3632                           
  3633                           ; 1 bytes @ 0x3E
  3634  005E                     	ds	1
  3635  005F                     ??_setDimmerLights_AdjRF:	
  3636                           
  3637                           ; 0 bytes @ 0x3F
  3638  005F                     	ds	1
  3639  0060                     setDimmerLights_AdjRF@lights:	
  3640  0060                     setRF_DimmerLights@status:	
  3641                           ; 1 bytes @ 0x40
  3642                           
  3643                           
  3644                           ; 1 bytes @ 0x40
  3645  0060                     	ds	1
  3646  0061                     ??_setRF_DimmerValue:	
  3647  0061                     setRF_DimmerLights@lights:	
  3648                           ; 0 bytes @ 0x41
  3649                           
  3650                           
  3651                           ; 1 bytes @ 0x41
  3652  0061                     	ds	1
  3653  0062                     ??_DlyOff_Main:	
  3654  0062                     ?_setDimmerLights_Adj:	
  3655                           ; 0 bytes @ 0x42
  3656                           
  3657  0062                     ??_setRFSW_Control:	
  3658                           ; 0 bytes @ 0x42
  3659                           
  3660  0062                     ??_Sw_DimmerOnFunc:	
  3661                           ; 0 bytes @ 0x42
  3662                           
  3663  0062                     ??_Sw_DimmerOffFunc:	
  3664                           ; 0 bytes @ 0x42
  3665                           
  3666  0062                     setDimmerLights_Adj@status:	
  3667                           ; 0 bytes @ 0x42
  3668                           
  3669  0062                     Sw_DimmerOnFunc@Idle:	
  3670                           ; 1 bytes @ 0x42
  3671                           
  3672                           
  3673                           ; 1 bytes @ 0x42
  3674  0062                     	ds	1
  3675  0063                     ??_setDimmerLights_Adj:	
  3676  0063                     setRFSW_Control@sw:	
  3677                           ; 0 bytes @ 0x43
  3678                           
  3679  0063                     setRF_DimmerValue@lights:	
  3680                           ; 1 bytes @ 0x43
  3681                           
  3682  0063                     Sw_DimmerOnFunc@sw:	
  3683                           ; 1 bytes @ 0x43
  3684                           
  3685                           
  3686                           ; 1 bytes @ 0x43
  3687  0063                     	ds	1
  3688  0064                     ??_setRFSW_AdjControl:	
  3689  0064                     DlyOff_Main@sw:	
  3690                           ; 0 bytes @ 0x44
  3691                           
  3692  0064                     setDimmerLights_Adj@lights:	
  3693                           ; 1 bytes @ 0x44
  3694                           
  3695  0064                     Sw_DimmerOffFunc@sw:	
  3696                           ; 1 bytes @ 0x44
  3697                           
  3698                           
  3699                           ; 1 bytes @ 0x44
  3700  0064                     	ds	1
  3701  0065                     ??_setDimmerLights_Main:	
  3702  0065                     ??_setSw_Main:	
  3703                           ; 0 bytes @ 0x45
  3704                           
  3705  0065                     ??_DelayOff_Main:	
  3706                           ; 0 bytes @ 0x45
  3707                           
  3708  0065                     setDimmerLights_Main@clear:	
  3709                           ; 0 bytes @ 0x45
  3710                           
  3711                           
  3712                           ; 1 bytes @ 0x45
  3713  0065                     	ds	1
  3714  0066                     setDimmerLights_Main@lights:	
  3715  0066                     setRFSW_AdjControl@sw:	
  3716                           ; 1 bytes @ 0x46
  3717                           
  3718                           
  3719                           ; 1 bytes @ 0x46
  3720  0066                     	ds	1
  3721  0067                     ??_setRF_Main:	
  3722  0067                     ??_getRxData:	
  3723                           ; 0 bytes @ 0x47
  3724                           
  3725  0067                     ??_setControl_Lights_Table:	
  3726                           ; 0 bytes @ 0x47
  3727                           
  3728  0067                     ??_DimmerLights_Main:	
  3729                           ; 0 bytes @ 0x47
  3730                           
  3731  0067                     _setSw_Main$5936:	
  3732                           ; 0 bytes @ 0x47
  3733                           
  3734                           
  3735                           ; 1 bytes @ 0x47
  3736  0067                     	ds	1
  3737  0068                     setSw_Main@sw:	
  3738                           
  3739                           ; 1 bytes @ 0x48
  3740  0068                     	ds	1
  3741  0069                     ??_Switch_Main:	
  3742                           
  3743                           ; 0 bytes @ 0x49
  3744  0069                     	ds	2
  3745  006B                     _setRF_Main$4900:	
  3746                           
  3747                           ; 1 bytes @ 0x4B
  3748  006B                     	ds	1
  3749  006C                     ??_RF_Main:	
  3750  006C                     ??_main:	
  3751                           ; 0 bytes @ 0x4C
  3752                           
  3753                           
  3754                           	psect	maintext
  3755  17A8                     __pmaintext:	
  3756                           ; 0 bytes @ 0x4C
  3757 ;;
  3758 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3759 ;;
  3760 ;; *************** function _main *****************
  3761 ;; Defined at:
  3762 ;;		line 7 in file "../src/main_B1.c"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;  argc            2    0[BANK2 ] int 
  3765 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;		None
  3768 ;; Return value:  Size  Location     Type
  3769 ;;                  2    0[BANK2 ] int 
  3770 ;; Registers used:
  3771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 17F/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3777 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3780 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3781 ;;Total ram usage:        4 bytes
  3782 ;; Hardware stack levels required when called:   15
  3783 ;; This function calls:
  3784 ;;		_Buzzer_Initialization
  3785 ;;		_Buzzer_Main
  3786 ;;		_CC2500_PowerOnInitial
  3787 ;;		_DelayOff_Initialization
  3788 ;;		_DelayOff_Main
  3789 ;;		_DimmerLights_Initialization
  3790 ;;		_DimmerLights_Main
  3791 ;;		_Flash_Memory_Initialization
  3792 ;;		_Flash_Memory_Main
  3793 ;;		_LED_Initialization
  3794 ;;		_LED_Main
  3795 ;;		_Mcu_Initialization
  3796 ;;		_PowerFault_Initialization
  3797 ;;		_PowerFault_Main
  3798 ;;		_RF_Initialization
  3799 ;;		_RF_Main
  3800 ;;		_Switch_Initialization
  3801 ;;		_Switch_Main
  3802 ;;		_Temp_Initialization
  3803 ;;		_Temp_Main
  3804 ;;		_WDT_Main
  3805 ;;		_getPowerFault_AD
  3806 ;;		_getTemp_AD
  3807 ;;		_myMain_Initialization
  3808 ;;		_my_MainTime
  3809 ;; This function is called by:
  3810 ;;		Startup code after reset
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           
  3815                           ;psect for function _main
  3816  17A8                     _main:	
  3817                           
  3818                           ;main_B1.c: 8: myMain_Initialization();
  3819                           
  3820                           ;incstack = 0
  3821                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3822  17A8  319E  26A0  3197   	fcall	_myMain_Initialization
  3823                           
  3824                           ;main_B1.c: 9: Mcu_Initialization();
  3825  17AB  319F  2721  3197   	fcall	_Mcu_Initialization
  3826                           
  3827                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3828  17AE  3185  2511  3197   	fcall	_Flash_Memory_Initialization
  3829                           
  3830                           ;main_B1.c: 11: LED_Initialization();
  3831  17B1  319E  2616  3197   	fcall	_LED_Initialization
  3832                           
  3833                           ;main_B1.c: 12: Buzzer_Initialization();
  3834  17B4  319D  2502  3197   	fcall	_Buzzer_Initialization
  3835                           
  3836                           ;main_B1.c: 14: ;;
  3837                           ;main_B1.c: 15: Temp_Initialization();
  3838  17B7  319D  2514  3197   	fcall	_Temp_Initialization
  3839                           
  3840                           ;main_B1.c: 16: ;;
  3841                           ;main_B1.c: 17: PowerFault_Initialization();
  3842  17BA  319D  2505  3197   	fcall	_PowerFault_Initialization
  3843                           
  3844                           ;main_B1.c: 18: DelayOff_Initialization();
  3845  17BD  319D  252A  3197   	fcall	_DelayOff_Initialization
  3846                           
  3847                           ;main_B1.c: 20: DimmerLights_Initialization();
  3848  17C0  319E  262F  3197   	fcall	_DimmerLights_Initialization
  3849                           
  3850                           ;main_B1.c: 21: ;;
  3851                           ;main_B1.c: 22: ;;
  3852                           ;main_B1.c: 23: ;;
  3853                           ;main_B1.c: 24: Switch_Initialization();
  3854  17C3  319D  2594  3197   	fcall	_Switch_Initialization
  3855                           
  3856                           ;main_B1.c: 25: RF_Initialization();
  3857  17C6  319D  250B  3197   	fcall	_RF_Initialization
  3858                           
  3859                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3860  17C9  319F  275A  3197   	fcall	_CC2500_PowerOnInitial
  3861  17CC                     l9572:	
  3862                           ;main_B1.c: 27: ;;
  3863                           ;main_B1.c: 30: while (1) {
  3864                           
  3865                           
  3866                           ;main_B1.c: 32: if (myMain.PowerON) {
  3867  17CC  0021               	movlb	1	; select bank1
  3868  17CD  1C20               	btfss	_myMain^(0+128),0
  3869  17CE  2FD7               	goto	l9576
  3870                           
  3871                           ;main_B1.c: 34: ;;
  3872                           ;main_B1.c: 38: ;;
  3873                           ;main_B1.c: 42: getTemp_AD(0x09);
  3874  17CF  3009               	movlw	9
  3875  17D0  3193  23F0  3197   	fcall	_getTemp_AD
  3876                           
  3877                           ;main_B1.c: 46: getPowerFault_AD(0x11);
  3878  17D3  3011               	movlw	17
  3879  17D4  3192  2226  3197   	fcall	_getPowerFault_AD
  3880  17D7                     l9576:	
  3881                           
  3882                           ;main_B1.c: 61: }
  3883                           ;main_B1.c: 64: if (myMain.T0_Timerout) {
  3884  17D7  0021               	movlb	1	; select bank1
  3885  17D8  1CA0               	btfss	_myMain^(0+128),1
  3886  17D9  2FCC               	goto	l9572
  3887                           
  3888                           ;main_B1.c: 65: myMain.T0_Timerout = 0;
  3889  17DA  10A0               	bcf	_myMain^(0+128),1
  3890                           
  3891                           ;main_B1.c: 66: my_MainTime();
  3892  17DB  3196  266D  3197   	fcall	_my_MainTime
  3893                           
  3894                           ;main_B1.c: 67: WDT_Main();
  3895  17DE  3190  2068  3197   	fcall	_WDT_Main
  3896                           
  3897                           ;main_B1.c: 68: ;;
  3898                           ;main_B1.c: 69: ;;
  3899                           ;main_B1.c: 70: if (myMain.PowerON) {
  3900  17E1  0021               	movlb	1	; select bank1
  3901  17E2  1C20               	btfss	_myMain^(0+128),0
  3902  17E3  2FCC               	goto	l9572
  3903                           
  3904                           ;main_B1.c: 71: Flash_Memory_Main();
  3905  17E4  3190  20F1  3197   	fcall	_Flash_Memory_Main
  3906                           
  3907                           ;main_B1.c: 73: LED_Main();
  3908  17E7  3187  27F4  3197   	fcall	_LED_Main
  3909                           
  3910                           ;main_B1.c: 74: Buzzer_Main();
  3911  17EA  3196  26B3  3197   	fcall	_Buzzer_Main
  3912                           
  3913                           ;main_B1.c: 76: ;;
  3914                           ;main_B1.c: 77: Temp_Main();
  3915  17ED  319D  2517  3197   	fcall	_Temp_Main
  3916                           
  3917                           ;main_B1.c: 78: ;;
  3918                           ;main_B1.c: 79: PowerFault_Main();
  3919  17F0  319D  2508  3197   	fcall	_PowerFault_Main
  3920                           
  3921                           ;main_B1.c: 81: ;;
  3922                           ;main_B1.c: 82: DimmerLights_Main();
  3923  17F3  319D  2555  3197   	fcall	_DimmerLights_Main
  3924                           
  3925                           ;main_B1.c: 83: Switch_Main();
  3926  17F6  319D  253A  3197   	fcall	_Switch_Main
  3927                           
  3928                           ;main_B1.c: 84: ;;
  3929                           ;main_B1.c: 85: ;;
  3930                           ;main_B1.c: 87: RF_Main();
  3931  17F9  319D  250E  3197   	fcall	_RF_Main
  3932                           
  3933                           ;main_B1.c: 88: DelayOff_Main();
  3934  17FC  319D  252E  3197   	fcall	_DelayOff_Main
  3935                           
  3936                           ;main_B1.c: 89: ;;
  3937  17FF  2FCC               	goto	l9572
  3938  1800                     __end_of_main:	
  3939                           ;main_B1.c: 90: }
  3940                           ;main_B1.c: 91: }
  3941                           ;main_B1.c: 109: }
  3942                           ;main_B1.c: 110: return (0);
  3943                           ;	Return value of _main is never used
  3944                           
  3945                           
  3946                           	psect	text1
  3947  166D                     __ptext1:	
  3948 ;; *************** function _my_MainTime *****************
  3949 ;; Defined at:
  3950 ;;		line 127 in file "../src/main_B1.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;		None
  3955 ;; Return value:  Size  Location     Type
  3956 ;;		None               void
  3957 ;; Registers used:
  3958 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3968 ;;Total ram usage:        0 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; Hardware stack levels required when called:    7
  3971 ;; This function calls:
  3972 ;;		_setBuz
  3973 ;;		_setRF_Enable
  3974 ;;		_setSw_Enable
  3975 ;;		_setTemp_Enable
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           
  3982                           ;psect for function _my_MainTime
  3983  166D                     _my_MainTime:	
  3984                           
  3985                           ;main_B1.c: 129: if (myMain.PowerON == 0) {
  3986                           
  3987                           ;incstack = 0
  3988                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3989  166D  0021               	movlb	1	; select bank1
  3990  166E  1820               	btfsc	_myMain^(0+128),0
  3991  166F  2E9A               	goto	l9488
  3992                           
  3993                           ;main_B1.c: 130: myMain.PowerCount++;
  3994  1670  3001               	movlw	1
  3995  1671  07A1               	addwf	(_myMain^(0+128)+1),f
  3996  1672  3000               	movlw	0
  3997  1673  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3998                           
  3999                           ;main_B1.c: 131: if (myMain.PowerCount == 150)
  4000  1674  3001               	movlw	1
  4001  1675  3EA0               	addlw	_myMain& (0+255)
  4002  1676  0086               	movwf	6
  4003  1677  0187               	clrf	7
  4004  1678  3F40               	moviw [0]fsr1
  4005  1679  3A96               	xorlw	150
  4006  167A  1D03               	skipz
  4007  167B  2E7E               	goto	u9915
  4008  167C  3F41               	moviw [1]fsr1
  4009  167D  3A00               	xorlw	0
  4010  167E                     u9915:	
  4011  167E  1D03               	skipz
  4012  167F  0008               	return
  4013                           
  4014                           ;main_B1.c: 132: {
  4015                           ;main_B1.c: 133: myMain.PowerCount = 0;
  4016  1680  01A1               	clrf	(_myMain^(0+128)+1)
  4017  1681  01A2               	clrf	((_myMain+1)^(0+128)+1)
  4018                           
  4019                           ;main_B1.c: 134: myMain.PowerON = 1;
  4020  1682  1420               	bsf	_myMain^(0+128),0
  4021                           
  4022                           ;main_B1.c: 137: setTemp_Enable(1);
  4023  1683  3001               	movlw	1
  4024  1684  319D  2583  3196   	fcall	_setTemp_Enable
  4025                           
  4026                           ;main_B1.c: 141: ;;
  4027                           ;main_B1.c: 147: setBuz(3, 50);
  4028  1687  3032               	movlw	50
  4029  1688  0020               	movlb	0	; select bank0
  4030  1689  00A9               	movwf	setBuz@time
  4031  168A  3000               	movlw	0
  4032  168B  00AA               	movwf	setBuz@time+1
  4033  168C  3003               	movlw	3
  4034  168D  3188  2050  3196   	fcall	_setBuz
  4035                           
  4036                           ;main_B1.c: 148: myMain.SelfTest = 1;
  4037  1690  0021               	movlb	1	; select bank1
  4038  1691  1720               	bsf	_myMain^(0+128),6
  4039                           
  4040                           ;main_B1.c: 150: setSw_Enable(1);
  4041  1692  3001               	movlw	1
  4042  1693  319E  2682  3196   	fcall	_setSw_Enable
  4043                           
  4044                           ;main_B1.c: 153: setRF_Enable(1);
  4045  1696  3001               	movlw	1
  4046  1697  319E  2656         	fcall	_setRF_Enable
  4047                           
  4048                           ;main_B1.c: 157: }
  4049                           ;main_B1.c: 158: } else {
  4050  1699  0008               	return
  4051  169A                     l9488:	
  4052                           
  4053                           ;main_B1.c: 166: myMain.Count1++;
  4054  169A  3001               	movlw	1
  4055  169B  0021               	movlb	1	; select bank1
  4056  169C  07A5               	addwf	(_myMain^(0+128)+5),f
  4057  169D  3000               	movlw	0
  4058  169E  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4059                           
  4060                           ;main_B1.c: 167: if (myMain.Count1 == 100)
  4061  169F  3005               	movlw	5
  4062  16A0  3EA0               	addlw	_myMain& (0+255)
  4063  16A1  0086               	movwf	6
  4064  16A2  0187               	clrf	7
  4065  16A3  3F40               	moviw [0]fsr1
  4066  16A4  3A64               	xorlw	100
  4067  16A5  1D03               	skipz
  4068  16A6  2EA9               	goto	u9925
  4069  16A7  3F41               	moviw [1]fsr1
  4070  16A8  3A00               	xorlw	0
  4071  16A9                     u9925:	
  4072  16A9  1D03               	skipz
  4073  16AA  0008               	return
  4074                           
  4075                           ;main_B1.c: 168: {
  4076                           ;main_B1.c: 169: myMain.Count1 = 0;
  4077  16AB  01A5               	clrf	(_myMain^(0+128)+5)
  4078  16AC  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4079                           
  4080                           ;main_B1.c: 182: if (myMain.Flag) {
  4081  16AD  1DA0               	btfss	_myMain^(0+128),3
  4082  16AE  2EB1               	goto	l2608
  4083                           
  4084                           ;main_B1.c: 183: myMain.Flag = 0;
  4085  16AF  11A0               	bcf	_myMain^(0+128),3
  4086                           
  4087                           ;main_B1.c: 192: } else {
  4088  16B0  0008               	return
  4089  16B1                     l2608:	
  4090                           
  4091                           ;main_B1.c: 193: myMain.Flag = 1;
  4092  16B1  15A0               	bsf	_myMain^(0+128),3
  4093  16B2  0008               	return
  4094  16B3                     __end_of_my_MainTime:	
  4095                           
  4096                           	psect	text2
  4097  1D83                     __ptext2:	
  4098 ;; *************** function _setTemp_Enable *****************
  4099 ;; Defined at:
  4100 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;  command         1    wreg     unsigned char 
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;  command         1    0[BANK0 ] unsigned char 
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		wreg
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4117 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4118 ;;Total ram usage:        1 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    5
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_my_MainTime
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           
  4129                           ;psect for function _setTemp_Enable
  4130  1D83                     _setTemp_Enable:	
  4131                           
  4132                           ;incstack = 0
  4133                           ; Regs used in _setTemp_Enable: [wreg]
  4134                           ;setTemp_Enable@command stored from wreg
  4135  1D83  0020               	movlb	0	; select bank0
  4136  1D84  00A0               	movwf	setTemp_Enable@command
  4137                           
  4138                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4139  1D85  0820               	movf	setTemp_Enable@command,w
  4140  1D86  0021               	movlb	1	; select bank1
  4141  1D87  105E               	bcf	_Temp1^(0+128),0
  4142  1D88  1D03               	skipz
  4143  1D89  145E               	bsf	_Temp1^(0+128),0
  4144  1D8A  0008               	return
  4145  1D8B                     __end_of_setTemp_Enable:	
  4146                           
  4147                           	psect	text3
  4148  1EA0                     __ptext3:	
  4149 ;; *************** function _myMain_Initialization *****************
  4150 ;; Defined at:
  4151 ;;		line 115 in file "../src/main_B1.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;		None
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;		None
  4156 ;; Return value:  Size  Location     Type
  4157 ;;		None               void
  4158 ;; Registers used:
  4159 ;;		wreg, fsr1l, fsr1h
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4168 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    5
  4172 ;; This function calls:
  4173 ;;		Nothing
  4174 ;; This function is called by:
  4175 ;;		_main
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           
  4180                           ;psect for function _myMain_Initialization
  4181  1EA0                     _myMain_Initialization:	
  4182                           
  4183                           ;main_B1.c: 117: product = &_product;
  4184                           
  4185                           ;incstack = 0
  4186                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4187  1EA0  30C5               	movlw	__product& (0+255)
  4188  1EA1  0020               	movlb	0	; select bank0
  4189  1EA2  00A0               	movwf	??_myMain_Initialization
  4190  1EA3  0820               	movf	??_myMain_Initialization,w
  4191  1EA4  00EC               	movwf	_product
  4192                           
  4193                           ;main_B1.c: 118: product->Data[20] = 209;
  4194  1EA5  30D1               	movlw	209
  4195  1EA6  00A0               	movwf	??_myMain_Initialization
  4196  1EA7  086C               	movf	_product,w
  4197  1EA8  3E14               	addlw	20
  4198  1EA9  0086               	movwf	6
  4199  1EAA  3001               	movlw	1	; select bank2/3
  4200  1EAB  0087               	movwf	7
  4201  1EAC  0820               	movf	??_myMain_Initialization,w
  4202  1EAD  0081               	movwf	1
  4203  1EAE  0008               	return
  4204  1EAF                     __end_of_myMain_Initialization:	
  4205                           
  4206                           	psect	text4
  4207  13F0                     __ptext4:	
  4208 ;; *************** function _getTemp_AD *****************
  4209 ;; Defined at:
  4210 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  channel         1    wreg     unsigned char 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  channel         1    5[BANK0 ] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;		None               void
  4217 ;; Registers used:
  4218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4228 ;;Total ram usage:        2 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    7
  4231 ;; This function calls:
  4232 ;;		_getAD
  4233 ;; This function is called by:
  4234 ;;		_main
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           
  4239                           ;psect for function _getTemp_AD
  4240  13F0                     _getTemp_AD:	
  4241                           
  4242                           ;incstack = 0
  4243                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4244                           ;getTemp_AD@channel stored from wreg
  4245  13F0  0020               	movlb	0	; select bank0
  4246  13F1  00A5               	movwf	getTemp_AD@channel
  4247                           
  4248                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4249  13F2  0021               	movlb	1	; select bank1
  4250  13F3  1D5E               	btfss	_Temp1^(0+128),2
  4251  13F4  0008               	return
  4252                           
  4253                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4254  13F5  30F0               	movlw	240
  4255  13F6  0020               	movlb	0	; select bank0
  4256  13F7  00A4               	movwf	??_getTemp_AD
  4257  13F8  0824               	movf	??_getTemp_AD,w
  4258  13F9  00A0               	movwf	getAD@adcon1
  4259  13FA  0825               	movf	getTemp_AD@channel,w
  4260  13FB  3191  2110  3193   	fcall	_getAD
  4261  13FE  0020               	movlb	0	; select bank0
  4262  13FF  0821               	movf	?_getAD+1,w
  4263  1400  0021               	movlb	1	; select bank1
  4264  1401  01EB               	clrf	((_Temp1+1)^(0+128)+12)
  4265  1402  07EB               	addwf	((_Temp1+1)^(0+128)+12),f
  4266  1403  0020               	movlb	0	; select bank0
  4267  1404  0820               	movf	?_getAD,w
  4268  1405  0021               	movlb	1	; select bank1
  4269  1406  01EA               	clrf	(_Temp1^(0+128)+12)
  4270  1407  07EA               	addwf	(_Temp1^(0+128)+12),f
  4271                           
  4272                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4273  1408  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4274  1409  0267               	subwf	((_Temp1+1)^(0+128)+8),w
  4275  140A  1D03               	skipz
  4276  140B  2C0E               	goto	u9865
  4277  140C  086A               	movf	(_Temp1^(0+128)+12),w
  4278  140D  0266               	subwf	(_Temp1^(0+128)+8),w
  4279  140E                     u9865:	
  4280  140E  1803               	skipnc
  4281  140F  2C17               	goto	l9436
  4282                           
  4283                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4284  1410  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4285  1411  01E7               	clrf	((_Temp1+1)^(0+128)+8)
  4286  1412  07E7               	addwf	((_Temp1+1)^(0+128)+8),f
  4287  1413  086A               	movf	(_Temp1^(0+128)+12),w
  4288  1414  01E6               	clrf	(_Temp1^(0+128)+8)
  4289  1415  07E6               	addwf	(_Temp1^(0+128)+8),f
  4290                           
  4291                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4292  1416  0008               	return
  4293  1417                     l9436:	
  4294  1417  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4295  1418  0269               	subwf	((_Temp1+1)^(0+128)+10),w
  4296  1419  1D03               	skipz
  4297  141A  2C1D               	goto	u9875
  4298  141B  086A               	movf	(_Temp1^(0+128)+12),w
  4299  141C  0268               	subwf	(_Temp1^(0+128)+10),w
  4300  141D                     u9875:	
  4301  141D  1803               	skipnc
  4302  141E  0008               	return
  4303                           
  4304                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4305  141F  086B               	movf	((_Temp1+1)^(0+128)+12),w
  4306  1420  01E9               	clrf	((_Temp1+1)^(0+128)+10)
  4307  1421  07E9               	addwf	((_Temp1+1)^(0+128)+10),f
  4308  1422  086A               	movf	(_Temp1^(0+128)+12),w
  4309  1423  01E8               	clrf	(_Temp1^(0+128)+10)
  4310  1424  07E8               	addwf	(_Temp1^(0+128)+10),f
  4311  1425  0008               	return
  4312  1426                     __end_of_getTemp_AD:	
  4313                           
  4314                           	psect	text5
  4315  1226                     __ptext5:	
  4316 ;; *************** function _getPowerFault_AD *****************
  4317 ;; Defined at:
  4318 ;;		line 45 in file "../src/PowerFault_B1.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  channel         1    wreg     unsigned char 
  4321 ;; Auto vars:     Size  Location     Type
  4322 ;;  channel         1    5[BANK0 ] unsigned char 
  4323 ;; Return value:  Size  Location     Type
  4324 ;;		None               void
  4325 ;; Registers used:
  4326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4327 ;; Tracked objects:
  4328 ;;		On entry : 0/0
  4329 ;;		On exit  : 0/0
  4330 ;;		Unchanged: 0/0
  4331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4336 ;;Total ram usage:        2 bytes
  4337 ;; Hardware stack levels used:    1
  4338 ;; Hardware stack levels required when called:    7
  4339 ;; This function calls:
  4340 ;;		_getAD
  4341 ;; This function is called by:
  4342 ;;		_main
  4343 ;; This function uses a non-reentrant model
  4344 ;;
  4345                           
  4346                           
  4347                           ;psect for function _getPowerFault_AD
  4348  1226                     _getPowerFault_AD:	
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4352                           ;getPowerFault_AD@channel stored from wreg
  4353  1226  0020               	movlb	0	; select bank0
  4354  1227  00A5               	movwf	getPowerFault_AD@channel
  4355                           
  4356                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4357  1228  0021               	movlb	1	; select bank1
  4358  1229  1DC7               	btfss	_PF1^(0+128),3
  4359  122A  0008               	return
  4360                           
  4361                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4362  122B  30F0               	movlw	240
  4363  122C  0020               	movlb	0	; select bank0
  4364  122D  00A4               	movwf	??_getPowerFault_AD
  4365  122E  0824               	movf	??_getPowerFault_AD,w
  4366  122F  00A0               	movwf	getAD@adcon1
  4367  1230  0825               	movf	getPowerFault_AD@channel,w
  4368  1231  3191  2110  3192   	fcall	_getAD
  4369  1234  0020               	movlb	0	; select bank0
  4370  1235  0821               	movf	?_getAD+1,w
  4371  1236  0021               	movlb	1	; select bank1
  4372  1237  01CE               	clrf	((_PF1+1)^(0+128)+6)
  4373  1238  07CE               	addwf	((_PF1+1)^(0+128)+6),f
  4374  1239  0020               	movlb	0	; select bank0
  4375  123A  0820               	movf	?_getAD,w
  4376  123B  0021               	movlb	1	; select bank1
  4377  123C  01CD               	clrf	(_PF1^(0+128)+6)
  4378  123D  07CD               	addwf	(_PF1^(0+128)+6),f
  4379                           
  4380                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4381  123E  084E               	movf	((_PF1+1)^(0+128)+6),w
  4382  123F  024C               	subwf	((_PF1+1)^(0+128)+4),w
  4383  1240  1D03               	skipz
  4384  1241  2A44               	goto	u9895
  4385  1242  084D               	movf	(_PF1^(0+128)+6),w
  4386  1243  024B               	subwf	(_PF1^(0+128)+4),w
  4387  1244                     u9895:	
  4388  1244  1803               	skipnc
  4389  1245  0008               	return
  4390                           
  4391                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4392  1246  084E               	movf	((_PF1+1)^(0+128)+6),w
  4393  1247  01CC               	clrf	((_PF1+1)^(0+128)+4)
  4394  1248  07CC               	addwf	((_PF1+1)^(0+128)+4),f
  4395  1249  084D               	movf	(_PF1^(0+128)+6),w
  4396  124A  01CB               	clrf	(_PF1^(0+128)+4)
  4397  124B  07CB               	addwf	(_PF1^(0+128)+4),f
  4398  124C  0008               	return
  4399  124D                     __end_of_getPowerFault_AD:	
  4400                           
  4401                           	psect	text6
  4402  1110                     __ptext6:	
  4403 ;; *************** function _getAD *****************
  4404 ;; Defined at:
  4405 ;;		line 343 in file "../src/MCU_B1.c"
  4406 ;; Parameters:    Size  Location     Type
  4407 ;;  adcon0          1    wreg     unsigned char 
  4408 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4409 ;; Auto vars:     Size  Location     Type
  4410 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  2    0[BANK0 ] int 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4420 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;Total ram usage:        4 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    6
  4427 ;; This function calls:
  4428 ;;		_Timeout_Counter
  4429 ;;		_set_TimeoutCleared
  4430 ;; This function is called by:
  4431 ;;		_getTemp_AD
  4432 ;;		_getPowerFault_AD
  4433 ;; This function uses a non-reentrant model
  4434 ;;
  4435                           
  4436                           
  4437                           ;psect for function _getAD
  4438  1110                     _getAD:	
  4439                           
  4440                           ;incstack = 0
  4441                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4442                           ;getAD@adcon0 stored from wreg
  4443  1110  0020               	movlb	0	; select bank0
  4444  1111  00A3               	movwf	getAD@adcon0
  4445                           
  4446                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4447  1112  0823               	movf	getAD@adcon0,w
  4448  1113  0021               	movlb	1	; select bank1
  4449  1114  009D               	movwf	29	;volatile
  4450                           
  4451                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4452  1115  0020               	movlb	0	; select bank0
  4453  1116  0820               	movf	getAD@adcon1,w
  4454  1117  0021               	movlb	1	; select bank1
  4455  1118  009E               	movwf	30	;volatile
  4456                           
  4457                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4458  1119  149D               	bsf	29,1	;volatile
  4459                           
  4460                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4461  111A  291E               	goto	l8914
  4462  111B                     l8912:	
  4463                           
  4464                           ;MCU_B1.c: 348: Timeout_Counter();
  4465  111B  319F  2745  3191   	fcall	_Timeout_Counter
  4466  111E                     l8914:	
  4467  111E  0021               	movlb	1	; select bank1
  4468  111F  1C9D               	btfss	29,1	;volatile
  4469  1120  2923               	goto	l8918
  4470  1121  1D2F               	btfss	(_myMain^(0+128)+15),2
  4471  1122  291B               	goto	l8912
  4472  1123                     l8918:	
  4473                           
  4474                           ;MCU_B1.c: 349: };
  4475                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4476  1123  319D  253E         	fcall	_set_TimeoutCleared
  4477                           
  4478                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4479  1125  0021               	movlb	1	; select bank1
  4480  1126  081C               	movf	28,w	;volatile
  4481  1127  0020               	movlb	0	; select bank0
  4482  1128  01A1               	clrf	?_getAD+1
  4483  1129  07A1               	addwf	?_getAD+1,f
  4484  112A  0021               	movlb	1	; select bank1
  4485  112B  081B               	movf	27,w	;volatile
  4486  112C  0020               	movlb	0	; select bank0
  4487  112D  01A0               	clrf	?_getAD
  4488  112E  07A0               	addwf	?_getAD,f
  4489  112F  0008               	return
  4490  1130                     __end_of_getAD:	
  4491                           
  4492                           	psect	text7
  4493  1068                     __ptext7:	
  4494 ;; *************** function _WDT_Main *****************
  4495 ;; Defined at:
  4496 ;;		line 902 in file "../src/MCU_B1.c"
  4497 ;; Parameters:    Size  Location     Type
  4498 ;;		None
  4499 ;; Auto vars:     Size  Location     Type
  4500 ;;		None
  4501 ;; Return value:  Size  Location     Type
  4502 ;;		None               void
  4503 ;; Registers used:
  4504 ;;		wreg, status,2, status,0, pclath, cstack
  4505 ;; Tracked objects:
  4506 ;;		On entry : 0/0
  4507 ;;		On exit  : 0/0
  4508 ;;		Unchanged: 0/0
  4509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4514 ;;Total ram usage:        1 bytes
  4515 ;; Hardware stack levels used:    1
  4516 ;; Hardware stack levels required when called:    6
  4517 ;; This function calls:
  4518 ;;		_WDT_Clearing
  4519 ;; This function is called by:
  4520 ;;		_main
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function _WDT_Main
  4526  1068                     _WDT_Main:	
  4527                           
  4528                           ;MCU_B1.c: 903: if (WDT.Enable == 1) {
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4532  1068  0021               	movlb	1	; select bank1
  4533  1069  1C51               	btfss	_WDT^(0+128),0
  4534  106A  0008               	return
  4535                           
  4536                           ;MCU_B1.c: 904: if (WDT.Count-- > 0) {
  4537  106B  3001               	movlw	1
  4538  106C  02D2               	subwf	(_WDT^(0+128)+1),f
  4539  106D  0852               	movf	(_WDT^(0+128)+1),w
  4540  106E  3AFF               	xorlw	255
  4541  106F  1903               	skipnz
  4542  1070  0008               	return
  4543                           
  4544                           ;MCU_B1.c: 905: WDT.Count = 10;
  4545  1071  300A               	movlw	10
  4546  1072  0020               	movlb	0	; select bank0
  4547  1073  00A0               	movwf	??_WDT_Main
  4548  1074  0820               	movf	??_WDT_Main,w
  4549  1075  0021               	movlb	1	; select bank1
  4550  1076  00D2               	movwf	(_WDT^(0+128)+1)
  4551                           
  4552                           ;MCU_B1.c: 906: WDT_Clearing();
  4553  1077  3180  2002         	fcall	_WDT_Clearing
  4554  1079  0008               	return
  4555  107A                     __end_of_WDT_Main:	
  4556                           
  4557                           	psect	text8
  4558  0002                     __ptext8:	
  4559 ;; *************** function _WDT_Clearing *****************
  4560 ;; Defined at:
  4561 ;;		line 912 in file "../src/MCU_B1.c"
  4562 ;; Parameters:    Size  Location     Type
  4563 ;;		None
  4564 ;; Auto vars:     Size  Location     Type
  4565 ;;		None
  4566 ;; Return value:  Size  Location     Type
  4567 ;;		None               void
  4568 ;; Registers used:
  4569 ;;		None
  4570 ;; Tracked objects:
  4571 ;;		On entry : 0/0
  4572 ;;		On exit  : 0/0
  4573 ;;		Unchanged: 0/0
  4574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4579 ;;Total ram usage:        0 bytes
  4580 ;; Hardware stack levels used:    1
  4581 ;; Hardware stack levels required when called:    5
  4582 ;; This function calls:
  4583 ;;		Nothing
  4584 ;; This function is called by:
  4585 ;;		_WDT_Main
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           
  4590                           ;psect for function _WDT_Clearing
  4591  0002                     _WDT_Clearing:	
  4592                           
  4593                           ;incstack = 0
  4594                           ; Regs used in _WDT_Clearing: []
  4595  0002  0064               	clrwdt	;# 
  4596  0003  0008               	return
  4597  0004                     __end_of_WDT_Clearing:	
  4598                           
  4599                           	psect	text9
  4600  1D17                     __ptext9:	
  4601 ;; *************** function _Temp_Main *****************
  4602 ;; Defined at:
  4603 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;		None               void
  4610 ;; Registers used:
  4611 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;Total ram usage:        0 bytes
  4622 ;; Hardware stack levels used:    1
  4623 ;; Hardware stack levels required when called:   11
  4624 ;; This function calls:
  4625 ;;		_setTemp_Main
  4626 ;; This function is called by:
  4627 ;;		_main
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _Temp_Main
  4633  1D17                     _Temp_Main:	
  4634                           
  4635                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4639  1D17  318E  2663         	fcall	_setTemp_Main
  4640  1D19  0008               	return
  4641  1D1A                     __end_of_Temp_Main:	
  4642                           
  4643                           	psect	text10
  4644  0E63                     __ptext10:	
  4645 ;; *************** function _setTemp_Main *****************
  4646 ;; Defined at:
  4647 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4648 ;; Parameters:    Size  Location     Type
  4649 ;;		None
  4650 ;; Auto vars:     Size  Location     Type
  4651 ;;		None
  4652 ;; Return value:  Size  Location     Type
  4653 ;;		None               void
  4654 ;; Registers used:
  4655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4656 ;; Tracked objects:
  4657 ;;		On entry : 0/0
  4658 ;;		On exit  : 0/0
  4659 ;;		Unchanged: 0/0
  4660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4664 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4665 ;;Total ram usage:        1 bytes
  4666 ;; Hardware stack levels used:    1
  4667 ;; Hardware stack levels required when called:   10
  4668 ;; This function calls:
  4669 ;;		_getPF_Safe
  4670 ;;		_setOverTemp_Exceptions
  4671 ;; This function is called by:
  4672 ;;		_Temp_Main
  4673 ;; This function uses a non-reentrant model
  4674 ;;
  4675                           
  4676                           
  4677                           ;psect for function _setTemp_Main
  4678  0E63                     _setTemp_Main:	
  4679                           
  4680                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4681                           
  4682                           ;incstack = 0
  4683                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4684  0E63  0021               	movlb	1	; select bank1
  4685  0E64  1C5E               	btfss	_Temp1^(0+128),0
  4686  0E65  0008               	return
  4687                           
  4688                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4689  0E66  195E               	btfsc	_Temp1^(0+128),2
  4690  0E67  2E85               	goto	l8970
  4691                           
  4692                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4693  0E68  3001               	movlw	1
  4694  0E69  07DF               	addwf	(_Temp1^(0+128)+1),f
  4695  0E6A  3000               	movlw	0
  4696  0E6B  3DE0               	addwfc	((_Temp1+1)^(0+128)+1),f
  4697                           
  4698                           ;OverTemperature_B1.c: 62: {
  4699                           ;OverTemperature_B1.c: 63: if (1 == 1 && getPF_Safe() == 1) {
  4700  0E6C  3001               	movlw	1
  4701  0E6D  0260               	subwf	((_Temp1+1)^(0+128)+1),w
  4702  0E6E  30F4               	movlw	244
  4703  0E6F  1903               	skipnz
  4704  0E70  025F               	subwf	(_Temp1^(0+128)+1),w
  4705  0E71  1C03               	skipc
  4706  0E72  0008               	return
  4707  0E73  319D  257B  318E   	fcall	_getPF_Safe
  4708  0E76  3A01               	xorlw	1
  4709  0E77  1D03               	skipz
  4710  0E78  2E7F               	goto	l8968
  4711                           
  4712                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4713  0E79  0021               	movlb	1	; select bank1
  4714  0E7A  01DF               	clrf	(_Temp1^(0+128)+1)
  4715  0E7B  01E0               	clrf	((_Temp1+1)^(0+128)+1)
  4716                           
  4717                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4718  0E7C  155E               	bsf	_Temp1^(0+128),2
  4719                           
  4720                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4721  0E7D  125E               	bcf	_Temp1^(0+128),4
  4722                           
  4723                           ;OverTemperature_B1.c: 68: } else {
  4724  0E7E  0008               	return
  4725  0E7F                     l8968:	
  4726                           
  4727                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4728  0E7F  30E8               	movlw	232
  4729  0E80  0021               	movlb	1	; select bank1
  4730  0E81  00DF               	movwf	(_Temp1^(0+128)+1)
  4731  0E82  3003               	movlw	3
  4732  0E83  00E0               	movwf	(_Temp1^(0+128)+2)
  4733                           
  4734                           ;OverTemperature_B1.c: 70: }
  4735                           ;OverTemperature_B1.c: 71: }
  4736                           ;OverTemperature_B1.c: 72: } else {
  4737  0E84  0008               	return
  4738  0E85                     l8970:	
  4739                           
  4740                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4741  0E85  3001               	movlw	1
  4742  0E86  07DF               	addwf	(_Temp1^(0+128)+1),f
  4743  0E87  3000               	movlw	0
  4744  0E88  3DE0               	addwfc	((_Temp1+1)^(0+128)+1),f
  4745                           
  4746                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4747  0E89  3000               	movlw	0
  4748  0E8A  0260               	subwf	((_Temp1+1)^(0+128)+1),w
  4749  0E8B  3004               	movlw	4
  4750  0E8C  1903               	skipnz
  4751  0E8D  025F               	subwf	(_Temp1^(0+128)+1),w
  4752  0E8E  1C03               	skipc
  4753  0E8F  0008               	return
  4754                           
  4755                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4756  0E90  01DF               	clrf	(_Temp1^(0+128)+1)
  4757  0E91  01E0               	clrf	((_Temp1+1)^(0+128)+1)
  4758                           
  4759                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4760  0E92  115E               	bcf	_Temp1^(0+128),2
  4761                           
  4762                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4763  0E93  0869               	movf	((_Temp1+1)^(0+128)+10),w
  4764  0E94  01E5               	clrf	((_Temp1+1)^(0+128)+6)
  4765  0E95  07E5               	addwf	((_Temp1+1)^(0+128)+6),f
  4766  0E96  0868               	movf	(_Temp1^(0+128)+10),w
  4767  0E97  01E4               	clrf	(_Temp1^(0+128)+6)
  4768  0E98  07E4               	addwf	(_Temp1^(0+128)+6),f
  4769                           
  4770                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4771  0E99  1CDE               	btfss	_Temp1^(0+128),1
  4772  0E9A  2EB2               	goto	l8992
  4773                           
  4774                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4775  0E9B  3002               	movlw	2
  4776  0E9C  0265               	subwf	((_Temp1+1)^(0+128)+6),w
  4777  0E9D  3058               	movlw	88
  4778  0E9E  1903               	skipnz
  4779  0E9F  0264               	subwf	(_Temp1^(0+128)+6),w
  4780  0EA0  1C03               	skipc
  4781  0EA1  2EC9               	goto	l9002
  4782                           
  4783                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4784  0EA2  3001               	movlw	1
  4785  0EA3  0020               	movlb	0	; select bank0
  4786  0EA4  00B1               	movwf	??_setTemp_Main
  4787  0EA5  0831               	movf	??_setTemp_Main,w
  4788  0EA6  0021               	movlb	1	; select bank1
  4789  0EA7  07E1               	addwf	(_Temp1^(0+128)+3),f
  4790                           
  4791                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4792  0EA8  3003               	movlw	3
  4793  0EA9  0261               	subwf	(_Temp1^(0+128)+3),w
  4794  0EAA  1C03               	skipc
  4795  0EAB  2ECB               	goto	l9004
  4796                           
  4797                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4798  0EAC  01E1               	clrf	(_Temp1^(0+128)+3)
  4799                           
  4800                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4801  0EAD  3000               	movlw	0
  4802  0EAE  3196  2627  318E   	fcall	_setOverTemp_Exceptions
  4803                           
  4804                           ;OverTemperature_B1.c: 84: }
  4805                           ;OverTemperature_B1.c: 85: } else {
  4806  0EB1  2ECB               	goto	l9004
  4807  0EB2                     l8992:	
  4808                           ;OverTemperature_B1.c: 87: }
  4809                           ;OverTemperature_B1.c: 88: } else {
  4810                           
  4811                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4812                           
  4813                           
  4814                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4815  0EB2  3002               	movlw	2
  4816  0EB3  0265               	subwf	((_Temp1+1)^(0+128)+6),w
  4817  0EB4  3027               	movlw	39
  4818  0EB5  1903               	skipnz
  4819  0EB6  0264               	subwf	(_Temp1^(0+128)+6),w
  4820  0EB7  1803               	skipnc
  4821  0EB8  2EC9               	goto	l9002
  4822                           
  4823                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4824  0EB9  3001               	movlw	1
  4825  0EBA  0020               	movlb	0	; select bank0
  4826  0EBB  00B1               	movwf	??_setTemp_Main
  4827  0EBC  0831               	movf	??_setTemp_Main,w
  4828  0EBD  0021               	movlb	1	; select bank1
  4829  0EBE  07E1               	addwf	(_Temp1^(0+128)+3),f
  4830                           
  4831                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4832  0EBF  3003               	movlw	3
  4833  0EC0  0261               	subwf	(_Temp1^(0+128)+3),w
  4834  0EC1  1C03               	skipc
  4835  0EC2  2ECB               	goto	l9004
  4836                           
  4837                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4838  0EC3  01E1               	clrf	(_Temp1^(0+128)+3)
  4839                           
  4840                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4841  0EC4  3001               	movlw	1
  4842  0EC5  3196  2627  318E   	fcall	_setOverTemp_Exceptions
  4843                           
  4844                           ;OverTemperature_B1.c: 94: }
  4845                           ;OverTemperature_B1.c: 95: } else {
  4846  0EC8  2ECB               	goto	l9004
  4847  0EC9                     l9002:	
  4848                           
  4849                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4850  0EC9  0021               	movlb	1	; select bank1
  4851  0ECA  01E1               	clrf	(_Temp1^(0+128)+3)
  4852  0ECB                     l9004:	
  4853                           
  4854                           ;OverTemperature_B1.c: 97: }
  4855                           ;OverTemperature_B1.c: 98: }
  4856                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4857  0ECB  0021               	movlb	1	; select bank1
  4858  0ECC  1CDE               	btfss	_Temp1^(0+128),1
  4859                           
  4860                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4861  0ECD  165E               	bsf	_Temp1^(0+128),4
  4862                           
  4863                           ;OverTemperature_B1.c: 101: }
  4864                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4865  0ECE  0865               	movf	((_Temp1+1)^(0+128)+6),w
  4866  0ECF  0020               	movlb	0	; select bank0
  4867  0ED0  00B1               	movwf	??_setTemp_Main
  4868  0ED1  086C               	movf	_product,w
  4869  0ED2  3E18               	addlw	24
  4870  0ED3  0086               	movwf	6
  4871  0ED4  3001               	movlw	1	; select bank2/3
  4872  0ED5  0087               	movwf	7
  4873  0ED6  0831               	movf	??_setTemp_Main,w
  4874  0ED7  0081               	movwf	1
  4875                           
  4876                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4877  0ED8  0021               	movlb	1	; select bank1
  4878  0ED9  0864               	movf	(_Temp1^(0+128)+6),w
  4879  0EDA  0020               	movlb	0	; select bank0
  4880  0EDB  00B1               	movwf	??_setTemp_Main
  4881  0EDC  086C               	movf	_product,w
  4882  0EDD  3E19               	addlw	25
  4883  0EDE  0086               	movwf	6
  4884  0EDF  3001               	movlw	1	; select bank2/3
  4885  0EE0  0087               	movwf	7
  4886  0EE1  0831               	movf	??_setTemp_Main,w
  4887  0EE2  0081               	movwf	1
  4888                           
  4889                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4890  0EE3  0021               	movlb	1	; select bank1
  4891  0EE4  01E6               	clrf	(_Temp1^(0+128)+8)
  4892  0EE5  01E7               	clrf	((_Temp1+1)^(0+128)+8)
  4893                           
  4894                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4895  0EE6  01E8               	clrf	(_Temp1^(0+128)+10)
  4896  0EE7  01E9               	clrf	((_Temp1+1)^(0+128)+10)
  4897  0EE8  0008               	return
  4898  0EE9                     __end_of_setTemp_Main:	
  4899                           
  4900                           	psect	text11
  4901  1627                     __ptext11:	
  4902 ;; *************** function _setOverTemp_Exceptions *****************
  4903 ;; Defined at:
  4904 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4905 ;; Parameters:    Size  Location     Type
  4906 ;;  command         1    wreg     unsigned char 
  4907 ;; Auto vars:     Size  Location     Type
  4908 ;;  command         1   16[BANK0 ] unsigned char 
  4909 ;;  i               1   15[BANK0 ] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;		None               void
  4912 ;; Registers used:
  4913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;Total ram usage:        3 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    9
  4926 ;; This function calls:
  4927 ;;		_DimmerLights_Exceptions
  4928 ;;		_setBuz
  4929 ;;		_setLED
  4930 ;;		_setRF_Enable
  4931 ;;		_setSw_Enable
  4932 ;; This function is called by:
  4933 ;;		_setTemp_Main
  4934 ;; This function uses a non-reentrant model
  4935 ;;
  4936                           
  4937                           
  4938                           ;psect for function _setOverTemp_Exceptions
  4939  1627                     _setOverTemp_Exceptions:	
  4940                           
  4941                           ;incstack = 0
  4942                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4943                           ;setOverTemp_Exceptions@command stored from wreg
  4944  1627  0020               	movlb	0	; select bank0
  4945  1628  00B0               	movwf	setOverTemp_Exceptions@command
  4946                           
  4947                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4948  1629  0830               	movf	setOverTemp_Exceptions@command,w
  4949  162A  3A01               	xorlw	1
  4950  162B  3000               	movlw	0
  4951  162C  1D03               	skipz
  4952  162D  3001               	movlw	1
  4953  162E  00AE               	movwf	??_setOverTemp_Exceptions
  4954  162F  082E               	movf	??_setOverTemp_Exceptions,w
  4955  1630  00AF               	movwf	setOverTemp_Exceptions@i
  4956                           
  4957                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4958  1631  0830               	movf	setOverTemp_Exceptions@command,w
  4959  1632  0021               	movlb	1	; select bank1
  4960  1633  10DE               	bcf	_Temp1^(0+128),1
  4961  1634  1D03               	skipz
  4962  1635  14DE               	bsf	_Temp1^(0+128),1
  4963                           
  4964                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4965  1636  0020               	movlb	0	; select bank0
  4966  1637  082F               	movf	setOverTemp_Exceptions@i,w
  4967  1638  0021               	movlb	1	; select bank1
  4968  1639  125E               	bcf	_Temp1^(0+128),4
  4969  163A  1D03               	skipz
  4970  163B  165E               	bsf	_Temp1^(0+128),4
  4971                           
  4972                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4973  163C  0020               	movlb	0	; select bank0
  4974  163D  0830               	movf	setOverTemp_Exceptions@command,w
  4975  163E  3A01               	xorlw	1
  4976  163F  1D03               	skipz
  4977  1640  2E4D               	goto	l8546
  4978                           
  4979                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4980  1641  3001               	movlw	1
  4981  1642  3195  2518  3196   	fcall	_DimmerLights_Exceptions
  4982                           
  4983                           ;OverTemperature_B1.c: 121: setLED(2, 1);
  4984  1645  0020               	movlb	0	; select bank0
  4985  1646  01A2               	clrf	setLED@command
  4986  1647  0AA2               	incf	setLED@command,f
  4987  1648  3002               	movlw	2
  4988  1649  3189  215F  3196   	fcall	_setLED
  4989                           
  4990                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  4991  164C  2E59               	goto	l8550
  4992  164D                     l8546:	
  4993  164D  0020               	movlb	0	; select bank0
  4994  164E  08B0               	movf	setOverTemp_Exceptions@command,f
  4995  164F  1D03               	skipz
  4996  1650  2E59               	goto	l8550
  4997                           
  4998                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  4999  1651  3064               	movlw	100
  5000  1652  00A9               	movwf	setBuz@time
  5001  1653  3000               	movlw	0
  5002  1654  00AA               	movwf	setBuz@time+1
  5003  1655  3002               	movlw	2
  5004  1656  3188  2050  3196   	fcall	_setBuz
  5005  1659                     l8550:	
  5006                           
  5007                           ;OverTemperature_B1.c: 125: }
  5008                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5009  1659  0020               	movlb	0	; select bank0
  5010  165A  0830               	movf	setOverTemp_Exceptions@command,w
  5011  165B  3E0A               	addlw	10
  5012  165C  00AE               	movwf	??_setOverTemp_Exceptions
  5013  165D  082E               	movf	??_setOverTemp_Exceptions,w
  5014  165E  00A2               	movwf	setLED@command
  5015  165F  3063               	movlw	99
  5016  1660  3189  215F  3196   	fcall	_setLED
  5017                           
  5018                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5019  1663  0020               	movlb	0	; select bank0
  5020  1664  082F               	movf	setOverTemp_Exceptions@i,w
  5021  1665  319E  2682  3196   	fcall	_setSw_Enable
  5022                           
  5023                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5024  1668  0020               	movlb	0	; select bank0
  5025  1669  082F               	movf	setOverTemp_Exceptions@i,w
  5026  166A  319E  2656         	fcall	_setRF_Enable
  5027  166C  0008               	return
  5028  166D                     __end_of_setOverTemp_Exceptions:	
  5029                           
  5030                           	psect	text12
  5031  1D7B                     __ptext12:	
  5032 ;; *************** function _getPF_Safe *****************
  5033 ;; Defined at:
  5034 ;;		line 34 in file "../src/PowerFault_B1.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  i               1    0[BANK0 ] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      unsigned char 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        1 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    5
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_setTemp_Main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _getPF_Safe
  5064  1D7B                     _getPF_Safe:	
  5065                           
  5066                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _getPF_Safe: [wreg+status,2]
  5070  1D7B  3000               	movlw	0
  5071  1D7C  0021               	movlb	1	; select bank1
  5072  1D7D  1947               	btfsc	_PF1^(0+128),2
  5073  1D7E  3001               	movlw	1
  5074  1D7F  0020               	movlb	0	; select bank0
  5075  1D80  00A0               	movwf	getPF_Safe@i
  5076                           
  5077                           ;PowerFault_B1.c: 36: return i;
  5078  1D81  0820               	movf	getPF_Safe@i,w
  5079  1D82  0008               	return
  5080  1D83                     __end_of_getPF_Safe:	
  5081                           
  5082                           	psect	text13
  5083  1D14                     __ptext13:	
  5084 ;; *************** function _Temp_Initialization *****************
  5085 ;; Defined at:
  5086 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5087 ;; Parameters:    Size  Location     Type
  5088 ;;		None
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;		None
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		status,2, status,0, pclath, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5104 ;;Total ram usage:        0 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    6
  5107 ;; This function calls:
  5108 ;;		_setTemp_Initialization
  5109 ;; This function is called by:
  5110 ;;		_main
  5111 ;; This function uses a non-reentrant model
  5112 ;;
  5113                           
  5114                           
  5115                           ;psect for function _Temp_Initialization
  5116  1D14                     _Temp_Initialization:	
  5117                           
  5118                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5119                           
  5120                           ;incstack = 0
  5121                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5122  1D14  319D  2511         	fcall	_setTemp_Initialization
  5123  1D16  0008               	return
  5124  1D17                     __end_of_Temp_Initialization:	
  5125                           
  5126                           	psect	text14
  5127  1D11                     __ptext14:	
  5128 ;; *************** function _setTemp_Initialization *****************
  5129 ;; Defined at:
  5130 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;		None
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;		None
  5135 ;; Return value:  Size  Location     Type
  5136 ;;		None               void
  5137 ;; Registers used:
  5138 ;;		None
  5139 ;; Tracked objects:
  5140 ;;		On entry : 0/0
  5141 ;;		On exit  : 0/0
  5142 ;;		Unchanged: 0/0
  5143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;Total ram usage:        0 bytes
  5149 ;; Hardware stack levels used:    1
  5150 ;; Hardware stack levels required when called:    5
  5151 ;; This function calls:
  5152 ;;		Nothing
  5153 ;; This function is called by:
  5154 ;;		_Temp_Initialization
  5155 ;; This function uses a non-reentrant model
  5156 ;;
  5157                           
  5158                           
  5159                           ;psect for function _setTemp_Initialization
  5160  1D11                     _setTemp_Initialization:	
  5161                           
  5162                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5163                           
  5164                           ;incstack = 0
  5165                           ; Regs used in _setTemp_Initialization: []
  5166  1D11  0021               	movlb	1	; select bank1
  5167  1D12  165E               	bsf	_Temp1^(0+128),4
  5168  1D13  0008               	return
  5169  1D14                     __end_of_setTemp_Initialization:	
  5170                           
  5171                           	psect	text15
  5172  1D3A                     __ptext15:	
  5173 ;; *************** function _Switch_Main *****************
  5174 ;; Defined at:
  5175 ;;		line 67 in file "../src/Switch_B1.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;		None
  5178 ;; Auto vars:     Size  Location     Type
  5179 ;;		None
  5180 ;; Return value:  Size  Location     Type
  5181 ;;		None               void
  5182 ;; Registers used:
  5183 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;Total ram usage:        0 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:   11
  5196 ;; This function calls:
  5197 ;;		_setSw_Main
  5198 ;; This function is called by:
  5199 ;;		_main
  5200 ;; This function uses a non-reentrant model
  5201 ;;
  5202                           
  5203                           
  5204                           ;psect for function _Switch_Main
  5205  1D3A                     _Switch_Main:	
  5206                           
  5207                           ;Switch_B1.c: 69: setSw_Main(1);
  5208                           
  5209                           ;incstack = 0
  5210                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5211  1D3A  3001               	movlw	1
  5212  1D3B  3181  21EF         	fcall	_setSw_Main
  5213  1D3D  0008               	return
  5214  1D3E                     __end_of_Switch_Main:	
  5215                           
  5216                           	psect	text16
  5217  01EF                     __ptext16:	
  5218 ;; *************** function _setSw_Main *****************
  5219 ;; Defined at:
  5220 ;;		line 117 in file "../src/Switch_B1.c"
  5221 ;; Parameters:    Size  Location     Type
  5222 ;;  sw              1    wreg     unsigned char 
  5223 ;; Auto vars:     Size  Location     Type
  5224 ;;  sw              1   72[BANK0 ] unsigned char 
  5225 ;; Return value:  Size  Location     Type
  5226 ;;		None               void
  5227 ;; Registers used:
  5228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5229 ;; Tracked objects:
  5230 ;;		On entry : 0/0
  5231 ;;		On exit  : 0/0
  5232 ;;		Unchanged: 0/0
  5233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5235 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5237 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5238 ;;Total ram usage:        4 bytes
  5239 ;; Hardware stack levels used:    1
  5240 ;; Hardware stack levels required when called:   10
  5241 ;; This function calls:
  5242 ;;		_SwPointSelect
  5243 ;;		_Sw_DimmerAdjFunc
  5244 ;;		_Sw_DimmerOffFunc
  5245 ;;		_Sw_DimmerOnFunc
  5246 ;;		_setBuz
  5247 ;;		_setRF_Learn
  5248 ;; This function is called by:
  5249 ;;		_Switch_Main
  5250 ;; This function uses a non-reentrant model
  5251 ;;
  5252                           
  5253                           
  5254                           ;psect for function _setSw_Main
  5255  01EF                     _setSw_Main:	
  5256                           
  5257                           ;incstack = 0
  5258                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5259                           ;setSw_Main@sw stored from wreg
  5260  01EF  0020               	movlb	0	; select bank0
  5261  01F0  00E8               	movwf	setSw_Main@sw
  5262                           
  5263                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5264  01F1  0868               	movf	setSw_Main@sw,w
  5265  01F2  319D  25DC  3181   	fcall	_SwPointSelect
  5266                           
  5267                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5268  01F5  087A               	movf	_Sw,w
  5269  01F6  0086               	movwf	6
  5270  01F7  3001               	movlw	1	; select bank2/3
  5271  01F8  0087               	movwf	7
  5272  01F9  1C01               	btfss	1,0
  5273  01FA  0008               	return
  5274                           
  5275                           ;Switch_B1.c: 139: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5276  01FB  0020               	movlb	0	; select bank0
  5277  01FC  01E7               	clrf	_setSw_Main$5936
  5278  01FD  0AE7               	incf	_setSw_Main$5936,f
  5279  01FE  1F0C               	btfss	12,6	;volatile
  5280  01FF  1A0C               	btfsc	12,4	;volatile
  5281  0200  2A05               	goto	l9220
  5282  0201  1C0C               	btfss	12,0	;volatile
  5283  0202  188D               	btfsc	13,1	;volatile
  5284  0203  2A05               	goto	l9220
  5285  0204  01E7               	clrf	_setSw_Main$5936
  5286  0205                     l9220:	
  5287  0205  087A               	movf	_Sw,w
  5288  0206  0086               	movwf	6
  5289  0207  3001               	movlw	1	; select bank2/3
  5290  0208  0087               	movwf	7
  5291  0209  0867               	movf	_setSw_Main$5936,w
  5292  020A  1081               	bcf	1,1
  5293  020B  1D03               	skipz
  5294  020C  1481               	bsf	1,1
  5295                           
  5296                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5297  020D  087A               	movf	_Sw,w
  5298  020E  0086               	movwf	6
  5299  020F  3001               	movlw	1	; select bank2/3
  5300  0210  0087               	movwf	7
  5301  0211  1C81               	btfss	1,1
  5302  0212  2AD7               	goto	l9270
  5303                           
  5304                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5305  0213  087A               	movf	_Sw,w
  5306  0214  0086               	movwf	6
  5307  0215  3001               	movlw	1	; select bank2/3
  5308  0216  0087               	movwf	7
  5309  0217  1901               	btfsc	1,2
  5310  0218  2A3A               	goto	l9236
  5311                           
  5312                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5313  0219  3001               	movlw	1
  5314  021A  00E5               	movwf	??_setSw_Main
  5315  021B  087A               	movf	_Sw,w
  5316  021C  3E02               	addlw	2
  5317  021D  0086               	movwf	6
  5318  021E  3001               	movlw	1	; select bank2/3
  5319  021F  0087               	movwf	7
  5320  0220  0865               	movf	??_setSw_Main,w
  5321  0221  0781               	addwf	1,f
  5322                           
  5323                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5324  0222  087A               	movf	_Sw,w
  5325  0223  3E02               	addlw	2
  5326  0224  0086               	movwf	6
  5327  0225  3001               	movlw	1	; select bank2/3
  5328  0226  0087               	movwf	7
  5329  0227  3005               	movlw	5
  5330  0228  0201               	subwf	1,w
  5331  0229  1C03               	skipc
  5332  022A  0008               	return
  5333                           
  5334                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5335  022B  087A               	movf	_Sw,w
  5336  022C  3E02               	addlw	2
  5337  022D  0086               	movwf	6
  5338  022E  3001               	movlw	1	; select bank2/3
  5339  022F  0087               	movwf	7
  5340  0230  0181               	clrf	1
  5341                           
  5342                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5343  0231  087A               	movf	_Sw,w
  5344  0232  0086               	movwf	6
  5345  0233  3001               	movlw	1	; select bank2/3
  5346  0234  0087               	movwf	7
  5347  0235  1501               	bsf	1,2
  5348                           
  5349                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5350  0236  0868               	movf	setSw_Main@sw,w
  5351  0237  3197  2751         	fcall	_Sw_DimmerOnFunc
  5352                           
  5353                           ;Switch_B1.c: 173: }
  5354                           ;Switch_B1.c: 174: } else {
  5355  0239  0008               	return
  5356  023A                     l9236:	
  5357                           
  5358                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5359  023A  087A               	movf	_Sw,w
  5360  023B  0086               	movwf	6
  5361  023C  3001               	movlw	1	; select bank2/3
  5362  023D  0087               	movwf	7
  5363  023E  1981               	btfsc	1,3
  5364  023F  2A67               	goto	l9246
  5365                           
  5366                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5367  0240  087A               	movf	_Sw,w
  5368  0241  3E03               	addlw	3
  5369  0242  0086               	movwf	6
  5370  0243  3001               	movlw	1	; select bank2/3
  5371  0244  0087               	movwf	7
  5372  0245  3001               	movlw	1
  5373  0246  0781               	addwf	1,f
  5374  0247  3141               	addfsr 1,1
  5375  0248  1803               	skipnc
  5376  0249  0A81               	incf	1,f
  5377                           
  5378                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5379  024A  087A               	movf	_Sw,w
  5380  024B  3E03               	addlw	3
  5381  024C  0086               	movwf	6
  5382  024D  3001               	movlw	1	; select bank2/3
  5383  024E  0087               	movwf	7
  5384  024F  3F40               	moviw [0]fsr1
  5385  0250  0020               	movlb	0	; select bank0
  5386  0251  00E5               	movwf	??_setSw_Main
  5387  0252  3F41               	moviw [1]fsr1
  5388  0253  00E6               	movwf	??_setSw_Main+1
  5389  0254  3000               	movlw	0
  5390  0255  0266               	subwf	??_setSw_Main+1,w
  5391  0256  3096               	movlw	150
  5392  0257  1903               	skipnz
  5393  0258  0265               	subwf	??_setSw_Main,w
  5394  0259  1C03               	skipc
  5395  025A  0008               	return
  5396                           
  5397                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5398  025B  087A               	movf	_Sw,w
  5399  025C  3E03               	addlw	3
  5400  025D  0086               	movwf	6
  5401  025E  3001               	movlw	1	; select bank2/3
  5402  025F  0087               	movwf	7
  5403  0260  3000               	movlw	0
  5404  0261  3FC0               	movwi [0]fsr1
  5405  0262  3FC1               	movwi [1]fsr1
  5406                           
  5407                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5408  0263  0868               	movf	setSw_Main@sw,w
  5409  0264  3193  2358         	fcall	_Sw_DimmerAdjFunc
  5410                           
  5411                           ;Switch_B1.c: 184: }
  5412                           ;Switch_B1.c: 185: } else {
  5413  0266  0008               	return
  5414  0267                     l9246:	
  5415                           
  5416                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5417  0267  087A               	movf	_Sw,w
  5418  0268  0086               	movwf	6
  5419  0269  3001               	movlw	1	; select bank2/3
  5420  026A  0087               	movwf	7
  5421  026B  1A01               	btfsc	1,4
  5422  026C  2AA5               	goto	l9260
  5423                           
  5424                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5425  026D  087A               	movf	_Sw,w
  5426  026E  3E05               	addlw	5
  5427  026F  0086               	movwf	6
  5428  0270  3001               	movlw	1	; select bank2/3
  5429  0271  0087               	movwf	7
  5430  0272  3001               	movlw	1
  5431  0273  0781               	addwf	1,f
  5432  0274  3141               	addfsr 1,1
  5433  0275  1803               	skipnc
  5434  0276  0A81               	incf	1,f
  5435                           
  5436                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5437  0277  087A               	movf	_Sw,w
  5438  0278  3E05               	addlw	5
  5439  0279  0086               	movwf	6
  5440  027A  3001               	movlw	1	; select bank2/3
  5441  027B  0087               	movwf	7
  5442  027C  3F40               	moviw [0]fsr1
  5443  027D  0020               	movlb	0	; select bank0
  5444  027E  00E5               	movwf	??_setSw_Main
  5445  027F  3F41               	moviw [1]fsr1
  5446  0280  00E6               	movwf	??_setSw_Main+1
  5447  0281  3000               	movlw	0
  5448  0282  0266               	subwf	??_setSw_Main+1,w
  5449  0283  3096               	movlw	150
  5450  0284  1903               	skipnz
  5451  0285  0265               	subwf	??_setSw_Main,w
  5452  0286  1C03               	skipc
  5453  0287  0008               	return
  5454                           
  5455                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5456  0288  087A               	movf	_Sw,w
  5457  0289  3E05               	addlw	5
  5458  028A  0086               	movwf	6
  5459  028B  3001               	movlw	1	; select bank2/3
  5460  028C  0087               	movwf	7
  5461  028D  3000               	movlw	0
  5462  028E  3FC0               	movwi [0]fsr1
  5463  028F  3FC1               	movwi [1]fsr1
  5464                           
  5465                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5466  0290  087A               	movf	_Sw,w
  5467  0291  0086               	movwf	6
  5468  0292  3001               	movlw	1	; select bank2/3
  5469  0293  0087               	movwf	7
  5470  0294  1601               	bsf	1,4
  5471                           
  5472                           ;Switch_B1.c: 193: setRF_Learn(1);
  5473  0295  3001               	movlw	1
  5474  0296  319D  2573  3181   	fcall	_setRF_Learn
  5475                           
  5476                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5477  0299  0021               	movlb	1	; select bank1
  5478  029A  1FA0               	btfss	_myMain^(0+128),7
  5479  029B  0008               	return
  5480                           
  5481                           ;Switch_B1.c: 196: setBuz(2, 100);
  5482  029C  3064               	movlw	100
  5483  029D  0020               	movlb	0	; select bank0
  5484  029E  00A9               	movwf	setBuz@time
  5485  029F  3000               	movlw	0
  5486  02A0  00AA               	movwf	setBuz@time+1
  5487  02A1  3002               	movlw	2
  5488  02A2  3188  2050         	fcall	_setBuz
  5489                           
  5490                           ;Switch_B1.c: 197: }
  5491                           ;Switch_B1.c: 199: }
  5492                           ;Switch_B1.c: 200: } else {
  5493  02A4  0008               	return
  5494  02A5                     l9260:	
  5495                           
  5496                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5497  02A5  087A               	movf	_Sw,w
  5498  02A6  0086               	movwf	6
  5499  02A7  3001               	movlw	1	; select bank2/3
  5500  02A8  0087               	movwf	7
  5501  02A9  1A81               	btfsc	1,5
  5502  02AA  0008               	return
  5503                           
  5504                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5505  02AB  087A               	movf	_Sw,w
  5506  02AC  3E07               	addlw	7
  5507  02AD  0086               	movwf	6
  5508  02AE  3001               	movlw	1	; select bank2/3
  5509  02AF  0087               	movwf	7
  5510  02B0  3001               	movlw	1
  5511  02B1  0781               	addwf	1,f
  5512  02B2  3141               	addfsr 1,1
  5513  02B3  1803               	skipnc
  5514  02B4  0A81               	incf	1,f
  5515                           
  5516                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5517  02B5  087A               	movf	_Sw,w
  5518  02B6  3E07               	addlw	7
  5519  02B7  0086               	movwf	6
  5520  02B8  3001               	movlw	1	; select bank2/3
  5521  02B9  0087               	movwf	7
  5522  02BA  3F40               	moviw [0]fsr1
  5523  02BB  0020               	movlb	0	; select bank0
  5524  02BC  00E5               	movwf	??_setSw_Main
  5525  02BD  3F41               	moviw [1]fsr1
  5526  02BE  00E6               	movwf	??_setSw_Main+1
  5527  02BF  3001               	movlw	1
  5528  02C0  0266               	subwf	??_setSw_Main+1,w
  5529  02C1  302C               	movlw	44
  5530  02C2  1903               	skipnz
  5531  02C3  0265               	subwf	??_setSw_Main,w
  5532  02C4  1C03               	skipc
  5533  02C5  0008               	return
  5534                           
  5535                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5536  02C6  087A               	movf	_Sw,w
  5537  02C7  3E07               	addlw	7
  5538  02C8  0086               	movwf	6
  5539  02C9  3001               	movlw	1	; select bank2/3
  5540  02CA  0087               	movwf	7
  5541  02CB  3000               	movlw	0
  5542  02CC  3FC0               	movwi [0]fsr1
  5543  02CD  3FC1               	movwi [1]fsr1
  5544                           
  5545                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5546  02CE  087A               	movf	_Sw,w
  5547  02CF  0086               	movwf	6
  5548  02D0  3001               	movlw	1	; select bank2/3
  5549  02D1  0087               	movwf	7
  5550  02D2  1681               	bsf	1,5
  5551                           
  5552                           ;Switch_B1.c: 208: setRF_Learn(0);
  5553  02D3  3000               	movlw	0
  5554  02D4  319D  2573         	fcall	_setRF_Learn
  5555                           
  5556                           ;Switch_B1.c: 211: }
  5557                           ;Switch_B1.c: 212: }
  5558                           ;Switch_B1.c: 213: }
  5559                           ;Switch_B1.c: 214: }
  5560                           ;Switch_B1.c: 215: }
  5561                           ;Switch_B1.c: 216: } else {
  5562  02D6  0008               	return
  5563  02D7                     l9270:	
  5564                           
  5565                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5566  02D7  087A               	movf	_Sw,w
  5567  02D8  0086               	movwf	6
  5568  02D9  3001               	movlw	1	; select bank2/3
  5569  02DA  0087               	movwf	7
  5570  02DB  1D01               	btfss	1,2
  5571  02DC  0008               	return
  5572                           
  5573                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5574  02DD  3001               	movlw	1
  5575  02DE  0020               	movlb	0	; select bank0
  5576  02DF  00E5               	movwf	??_setSw_Main
  5577  02E0  087A               	movf	_Sw,w
  5578  02E1  3E02               	addlw	2
  5579  02E2  0086               	movwf	6
  5580  02E3  3001               	movlw	1	; select bank2/3
  5581  02E4  0087               	movwf	7
  5582  02E5  0865               	movf	??_setSw_Main,w
  5583  02E6  0781               	addwf	1,f
  5584                           
  5585                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5586  02E7  087A               	movf	_Sw,w
  5587  02E8  3E02               	addlw	2
  5588  02E9  0086               	movwf	6
  5589  02EA  3001               	movlw	1	; select bank2/3
  5590  02EB  0087               	movwf	7
  5591  02EC  3005               	movlw	5
  5592  02ED  0201               	subwf	1,w
  5593  02EE  1C03               	skipc
  5594  02EF  0008               	return
  5595                           
  5596                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5597  02F0  087A               	movf	_Sw,w
  5598  02F1  3E02               	addlw	2
  5599  02F2  0086               	movwf	6
  5600  02F3  3001               	movlw	1	; select bank2/3
  5601  02F4  0087               	movwf	7
  5602  02F5  0181               	clrf	1
  5603                           
  5604                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5605  02F6  087A               	movf	_Sw,w
  5606  02F7  0086               	movwf	6
  5607  02F8  3001               	movlw	1	; select bank2/3
  5608  02F9  0087               	movwf	7
  5609  02FA  1101               	bcf	1,2
  5610                           
  5611                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5612  02FB  087A               	movf	_Sw,w
  5613  02FC  3E03               	addlw	3
  5614  02FD  0086               	movwf	6
  5615  02FE  3001               	movlw	1	; select bank2/3
  5616  02FF  0087               	movwf	7
  5617  0300  3000               	movlw	0
  5618  0301  3FC0               	movwi [0]fsr1
  5619  0302  3FC1               	movwi [1]fsr1
  5620                           
  5621                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5622  0303  087A               	movf	_Sw,w
  5623  0304  0086               	movwf	6
  5624  0305  3001               	movlw	1	; select bank2/3
  5625  0306  0087               	movwf	7
  5626  0307  1181               	bcf	1,3
  5627                           
  5628                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5629  0308  087A               	movf	_Sw,w
  5630  0309  3E05               	addlw	5
  5631  030A  0086               	movwf	6
  5632  030B  3001               	movlw	1	; select bank2/3
  5633  030C  0087               	movwf	7
  5634  030D  3000               	movlw	0
  5635  030E  3FC0               	movwi [0]fsr1
  5636  030F  3FC1               	movwi [1]fsr1
  5637                           
  5638                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5639  0310  087A               	movf	_Sw,w
  5640  0311  0086               	movwf	6
  5641  0312  3001               	movlw	1	; select bank2/3
  5642  0313  0087               	movwf	7
  5643  0314  1201               	bcf	1,4
  5644                           
  5645                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5646  0315  087A               	movf	_Sw,w
  5647  0316  3E07               	addlw	7
  5648  0317  0086               	movwf	6
  5649  0318  3001               	movlw	1	; select bank2/3
  5650  0319  0087               	movwf	7
  5651  031A  3000               	movlw	0
  5652  031B  3FC0               	movwi [0]fsr1
  5653  031C  3FC1               	movwi [1]fsr1
  5654                           
  5655                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5656  031D  087A               	movf	_Sw,w
  5657  031E  0086               	movwf	6
  5658  031F  3001               	movlw	1	; select bank2/3
  5659  0320  0087               	movwf	7
  5660  0321  1281               	bcf	1,5
  5661                           
  5662                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5663  0322  0868               	movf	setSw_Main@sw,w
  5664  0323  318C  2488  3181   	fcall	_Sw_DimmerOffFunc
  5665                           
  5666                           ;Switch_B1.c: 232: setRF_Learn(0);
  5667  0326  3000               	movlw	0
  5668  0327  319D  2573         	fcall	_setRF_Learn
  5669  0329  0008               	return
  5670  032A                     __end_of_setSw_Main:	
  5671                           
  5672                           	psect	text17
  5673  1D73                     __ptext17:	
  5674 ;; *************** function _setRF_Learn *****************
  5675 ;; Defined at:
  5676 ;;		line 23 in file "../src/RF_Control_B1.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;  command         1    wreg     unsigned char 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  command         1    0[BANK0 ] unsigned char 
  5681 ;; Return value:  Size  Location     Type
  5682 ;;		None               void
  5683 ;; Registers used:
  5684 ;;		wreg
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5691 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5693 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5694 ;;Total ram usage:        1 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    5
  5697 ;; This function calls:
  5698 ;;		Nothing
  5699 ;; This function is called by:
  5700 ;;		_setSw_Main
  5701 ;; This function uses a non-reentrant model
  5702 ;;
  5703                           
  5704                           
  5705                           ;psect for function _setRF_Learn
  5706  1D73                     _setRF_Learn:	
  5707                           
  5708                           ;incstack = 0
  5709                           ; Regs used in _setRF_Learn: [wreg]
  5710                           ;setRF_Learn@command stored from wreg
  5711  1D73  0020               	movlb	0	; select bank0
  5712  1D74  00A0               	movwf	setRF_Learn@command
  5713                           
  5714                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5715  1D75  0820               	movf	setRF_Learn@command,w
  5716  1D76  0021               	movlb	1	; select bank1
  5717  1D77  133E               	bcf	_RF1^(0+128),6
  5718  1D78  1D03               	skipz
  5719  1D79  173E               	bsf	_RF1^(0+128),6
  5720  1D7A  0008               	return
  5721  1D7B                     __end_of_setRF_Learn:	
  5722                           
  5723                           	psect	text18
  5724  1751                     __ptext18:	
  5725 ;; *************** function _Sw_DimmerOnFunc *****************
  5726 ;; Defined at:
  5727 ;;		line 241 in file "../src/Switch_B1.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  sw              1    wreg     unsigned char 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  sw              1   67[BANK0 ] unsigned char 
  5732 ;;  Idle            1   66[BANK0 ] unsigned char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;Total ram usage:        2 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    9
  5749 ;; This function calls:
  5750 ;;		_setBuz
  5751 ;;		_setDimmerLights_Switch
  5752 ;;		_setDimmerLights_Trigger
  5753 ;;		_setRFSW_Status
  5754 ;;		_setRF_DimmerLights
  5755 ;;		_setTxData
  5756 ;; This function is called by:
  5757 ;;		_setSw_Main
  5758 ;; This function uses a non-reentrant model
  5759 ;;
  5760                           
  5761                           
  5762                           ;psect for function _Sw_DimmerOnFunc
  5763  1751                     _Sw_DimmerOnFunc:	
  5764                           
  5765                           ;incstack = 0
  5766                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5767                           ;Sw_DimmerOnFunc@sw stored from wreg
  5768  1751  0020               	movlb	0	; select bank0
  5769  1752  00E3               	movwf	Sw_DimmerOnFunc@sw
  5770                           
  5771                           ;Switch_B1.c: 242: char Idle = 1;
  5772  1753  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5773  1754  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5774                           
  5775                           ;Switch_B1.c: 263: if (Idle == 1) {
  5776  1755  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5777  1756  3A01               	xorlw	1
  5778  1757  1D03               	skipz
  5779  1758  0008               	return
  5780                           
  5781                           ;Switch_B1.c: 264: Sw->Flag = 1;
  5782  1759  087A               	movf	_Sw,w
  5783  175A  0086               	movwf	6
  5784  175B  3001               	movlw	1	; select bank2/3
  5785  175C  0087               	movwf	7
  5786  175D  1781               	bsf	1,7
  5787                           
  5788                           ;Switch_B1.c: 265: setBuz(1, 100);
  5789  175E  3064               	movlw	100
  5790  175F  00A9               	movwf	setBuz@time
  5791  1760  3000               	movlw	0
  5792  1761  00AA               	movwf	setBuz@time+1
  5793  1762  3001               	movlw	1
  5794  1763  3188  2050  3197   	fcall	_setBuz
  5795                           
  5796                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5797  1766  087A               	movf	_Sw,w
  5798  1767  0086               	movwf	6
  5799  1768  3001               	movlw	1	; select bank2/3
  5800  1769  0087               	movwf	7
  5801  176A  1B01               	btfsc	1,6
  5802  176B  2F96               	goto	l8628
  5803                           
  5804                           ;Switch_B1.c: 267: Sw->Status = 1;
  5805  176C  087A               	movf	_Sw,w
  5806  176D  0086               	movwf	6
  5807  176E  3001               	movlw	1	; select bank2/3
  5808  176F  0087               	movwf	7
  5809  1770  1701               	bsf	1,6
  5810                           
  5811                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5812  1771  0020               	movlb	0	; select bank0
  5813  1772  01A2               	clrf	setRFSW_Status@command
  5814  1773  0AA2               	incf	setRFSW_Status@command,f
  5815  1774  0863               	movf	Sw_DimmerOnFunc@sw,w
  5816  1775  319E  2664  3197   	fcall	_setRFSW_Status
  5817                           
  5818                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5819  1778  0020               	movlb	0	; select bank0
  5820  1779  01A2               	clrf	setDimmerLights_Trigger@command
  5821  177A  0AA2               	incf	setDimmerLights_Trigger@command,f
  5822  177B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5823  177C  319E  26BF  3197   	fcall	_setDimmerLights_Trigger
  5824                           
  5825                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5826  177F  0020               	movlb	0	; select bank0
  5827  1780  01A2               	clrf	setDimmerLights_Switch@command
  5828  1781  0AA2               	incf	setDimmerLights_Switch@command,f
  5829  1782  0863               	movf	Sw_DimmerOnFunc@sw,w
  5830  1783  319E  26AF  3197   	fcall	_setDimmerLights_Switch
  5831                           
  5832                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5833  1786  087A               	movf	_Sw,w
  5834  1787  0086               	movwf	6
  5835  1788  3001               	movlw	1	; select bank2/3
  5836  1789  0087               	movwf	7
  5837  178A  3000               	movlw	0
  5838  178B  1B01               	btfsc	1,6
  5839  178C  3001               	movlw	1
  5840  178D  0020               	movlb	0	; select bank0
  5841  178E  00DD               	movwf	setRF_DimmerLights@on
  5842  178F  0863               	movf	Sw_DimmerOnFunc@sw,w
  5843  1790  318C  241C  3197   	fcall	_setRF_DimmerLights
  5844                           
  5845                           ;Switch_B1.c: 274: setTxData();
  5846  1793  3185  25D8         	fcall	_setTxData
  5847                           
  5848                           ;Switch_B1.c: 276: } else {
  5849  1795  0008               	return
  5850  1796                     l8628:	
  5851                           
  5852                           ;Switch_B1.c: 277: Sw->Status = 0;
  5853  1796  087A               	movf	_Sw,w
  5854  1797  0086               	movwf	6
  5855  1798  3001               	movlw	1	; select bank2/3
  5856  1799  0087               	movwf	7
  5857  179A  1301               	bcf	1,6
  5858                           
  5859                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5860  179B  087A               	movf	_Sw,w
  5861  179C  0086               	movwf	6
  5862  179D  3001               	movlw	1	; select bank2/3
  5863  179E  0087               	movwf	7
  5864  179F  3000               	movlw	0
  5865  17A0  1B01               	btfsc	1,6
  5866  17A1  3001               	movlw	1
  5867  17A2  0020               	movlb	0	; select bank0
  5868  17A3  00A2               	movwf	setRFSW_Status@command
  5869  17A4  0863               	movf	Sw_DimmerOnFunc@sw,w
  5870  17A5  319E  2664         	fcall	_setRFSW_Status
  5871  17A7  0008               	return
  5872  17A8                     __end_of_Sw_DimmerOnFunc:	
  5873                           
  5874                           	psect	text19
  5875  0C88                     __ptext19:	
  5876 ;; *************** function _Sw_DimmerOffFunc *****************
  5877 ;; Defined at:
  5878 ;;		line 284 in file "../src/Switch_B1.c"
  5879 ;; Parameters:    Size  Location     Type
  5880 ;;  sw              1    wreg     unsigned char 
  5881 ;; Auto vars:     Size  Location     Type
  5882 ;;  sw              1   68[BANK0 ] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;		None               void
  5885 ;; Registers used:
  5886 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5887 ;; Tracked objects:
  5888 ;;		On entry : 0/0
  5889 ;;		On exit  : 0/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5896 ;;Total ram usage:        3 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; Hardware stack levels required when called:    9
  5899 ;; This function calls:
  5900 ;;		_setDelayOff_GO
  5901 ;;		_setDimmerLights_AdjGo
  5902 ;;		_setDimmerLights_Switch
  5903 ;;		_setDimmerLights_Trigger
  5904 ;;		_setDimmerLights_TriggerAdj
  5905 ;;		_setRF_DimmerLights
  5906 ;;		_setTxData
  5907 ;; This function is called by:
  5908 ;;		_setSw_Main
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           
  5913                           ;psect for function _Sw_DimmerOffFunc
  5914  0C88                     _Sw_DimmerOffFunc:	
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5918                           ;Sw_DimmerOffFunc@sw stored from wreg
  5919  0C88  0020               	movlb	0	; select bank0
  5920  0C89  00E4               	movwf	Sw_DimmerOffFunc@sw
  5921                           
  5922                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5923  0C8A  087A               	movf	_Sw,w
  5924  0C8B  0086               	movwf	6
  5925  0C8C  3001               	movlw	1	; select bank2/3
  5926  0C8D  0087               	movwf	7
  5927  0C8E  1F81               	btfss	1,7
  5928  0C8F  0008               	return
  5929                           
  5930                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5931  0C90  087A               	movf	_Sw,w
  5932  0C91  0086               	movwf	6
  5933  0C92  3001               	movlw	1	; select bank2/3
  5934  0C93  0087               	movwf	7
  5935  0C94  1381               	bcf	1,7
  5936                           
  5937                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5938  0C95  087A               	movf	_Sw,w
  5939  0C96  0086               	movwf	6
  5940  0C97  3001               	movlw	1	; select bank2/3
  5941  0C98  0087               	movwf	7
  5942  0C99  1F01               	btfss	1,6
  5943  0C9A  2CD3               	goto	l8664
  5944                           
  5945                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5946  0C9B  0A7A               	incf	_Sw,w
  5947  0C9C  0086               	movwf	6
  5948  0C9D  3001               	movlw	1	; select bank2/3
  5949  0C9E  0087               	movwf	7
  5950  0C9F  1C01               	btfss	1,0
  5951  0CA0  0008               	return
  5952                           
  5953                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5954  0CA1  0A7A               	incf	_Sw,w
  5955  0CA2  0086               	movwf	6
  5956  0CA3  3001               	movlw	1	; select bank2/3
  5957  0CA4  0087               	movwf	7
  5958  0CA5  1001               	bcf	1,0
  5959                           
  5960                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5961  0CA6  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5962  0CA7  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5963  0CA8  0864               	movf	Sw_DimmerOffFunc@sw,w
  5964  0CA9  319E  26EF  318C   	fcall	_setDimmerLights_TriggerAdj
  5965                           
  5966                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5967  0CAC  0020               	movlb	0	; select bank0
  5968  0CAD  01A2               	clrf	setDimmerLights_AdjGo@command
  5969  0CAE  0864               	movf	Sw_DimmerOffFunc@sw,w
  5970  0CAF  319E  26DF  318C   	fcall	_setDimmerLights_AdjGo
  5971                           
  5972                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5973  0CB2  0020               	movlb	0	; select bank0
  5974  0CB3  0864               	movf	Sw_DimmerOffFunc@sw,w
  5975  0CB4  3E1A               	addlw	26
  5976  0CB5  076C               	addwf	_product,w
  5977  0CB6  00E2               	movwf	??_Sw_DimmerOffFunc
  5978  0CB7  0862               	movf	??_Sw_DimmerOffFunc,w
  5979  0CB8  0086               	movwf	6
  5980  0CB9  3001               	movlw	1	; select bank2/3
  5981  0CBA  0087               	movwf	7
  5982  0CBB  0801               	movf	1,w
  5983  0CBC  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5984  0CBD  086C               	movf	_product,w
  5985  0CBE  3E11               	addlw	17
  5986  0CBF  0086               	movwf	6
  5987  0CC0  3001               	movlw	1	; select bank2/3
  5988  0CC1  0087               	movwf	7
  5989  0CC2  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5990  0CC3  0081               	movwf	1
  5991                           
  5992                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5993  0CC4  087A               	movf	_Sw,w
  5994  0CC5  0086               	movwf	6
  5995  0CC6  3001               	movlw	1	; select bank2/3
  5996  0CC7  0087               	movwf	7
  5997  0CC8  3000               	movlw	0
  5998  0CC9  1B01               	btfsc	1,6
  5999  0CCA  3001               	movlw	1
  6000  0CCB  00DD               	movwf	setRF_DimmerLights@on
  6001  0CCC  0864               	movf	Sw_DimmerOffFunc@sw,w
  6002  0CCD  318C  241C  318C   	fcall	_setRF_DimmerLights
  6003                           
  6004                           ;Switch_B1.c: 295: setTxData();
  6005  0CD0  3185  25D8         	fcall	_setTxData
  6006                           
  6007                           ;Switch_B1.c: 297: }
  6008                           ;Switch_B1.c: 298: } else {
  6009  0CD2  0008               	return
  6010  0CD3                     l8664:	
  6011                           
  6012                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6013  0CD3  0020               	movlb	0	; select bank0
  6014  0CD4  01A2               	clrf	setDimmerLights_Trigger@command
  6015  0CD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  6016  0CD6  0864               	movf	Sw_DimmerOffFunc@sw,w
  6017  0CD7  319E  26BF  318C   	fcall	_setDimmerLights_Trigger
  6018                           
  6019                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6020  0CDA  0020               	movlb	0	; select bank0
  6021  0CDB  01A2               	clrf	setDimmerLights_Switch@command
  6022  0CDC  0864               	movf	Sw_DimmerOffFunc@sw,w
  6023  0CDD  319E  26AF  318C   	fcall	_setDimmerLights_Switch
  6024                           
  6025                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6026  0CE0  0020               	movlb	0	; select bank0
  6027  0CE1  01AA               	clrf	setDelayOff_GO@command
  6028  0CE2  01AB               	clrf	setDelayOff_GO@value
  6029  0CE3  0864               	movf	Sw_DimmerOffFunc@sw,w
  6030  0CE4  3189  21BD  318C   	fcall	_setDelayOff_GO
  6031                           
  6032                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6033  0CE7  087A               	movf	_Sw,w
  6034  0CE8  0086               	movwf	6
  6035  0CE9  3001               	movlw	1	; select bank2/3
  6036  0CEA  0087               	movwf	7
  6037  0CEB  3000               	movlw	0
  6038  0CEC  1B01               	btfsc	1,6
  6039  0CED  3001               	movlw	1
  6040  0CEE  0020               	movlb	0	; select bank0
  6041  0CEF  00DD               	movwf	setRF_DimmerLights@on
  6042  0CF0  0864               	movf	Sw_DimmerOffFunc@sw,w
  6043  0CF1  318C  241C  318C   	fcall	_setRF_DimmerLights
  6044                           
  6045                           ;Switch_B1.c: 304: setTxData();
  6046  0CF4  3185  25D8         	fcall	_setTxData
  6047  0CF6  0008               	return
  6048  0CF7                     __end_of_Sw_DimmerOffFunc:	
  6049                           
  6050                           	psect	text20
  6051  1358                     __ptext20:	
  6052 ;; *************** function _Sw_DimmerAdjFunc *****************
  6053 ;; Defined at:
  6054 ;;		line 311 in file "../src/Switch_B1.c"
  6055 ;; Parameters:    Size  Location     Type
  6056 ;;  sw              1    wreg     unsigned char 
  6057 ;; Auto vars:     Size  Location     Type
  6058 ;;  sw              1    5[BANK0 ] unsigned char 
  6059 ;;  Idle            1    4[BANK0 ] unsigned char 
  6060 ;; Return value:  Size  Location     Type
  6061 ;;		None               void
  6062 ;; Registers used:
  6063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6064 ;; Tracked objects:
  6065 ;;		On entry : 0/0
  6066 ;;		On exit  : 0/0
  6067 ;;		Unchanged: 0/0
  6068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;Total ram usage:        2 bytes
  6074 ;; Hardware stack levels used:    1
  6075 ;; Hardware stack levels required when called:    7
  6076 ;; This function calls:
  6077 ;;		_setDimmerLights_AdjGo
  6078 ;;		_setDimmerLights_TriggerAdj
  6079 ;;		_setRFSW_Status
  6080 ;; This function is called by:
  6081 ;;		_setSw_Main
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function _Sw_DimmerAdjFunc
  6087  1358                     _Sw_DimmerAdjFunc:	
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6091                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6092  1358  0020               	movlb	0	; select bank0
  6093  1359  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6094                           
  6095                           ;Switch_B1.c: 312: char Idle = 1;
  6096  135A  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6097  135B  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6098                           
  6099                           ;Switch_B1.c: 332: if (Idle == 1) {
  6100  135C  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6101  135D  3A01               	xorlw	1
  6102  135E  1D03               	skipz
  6103  135F  0008               	return
  6104                           
  6105                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6106  1360  087A               	movf	_Sw,w
  6107  1361  0086               	movwf	6
  6108  1362  3001               	movlw	1	; select bank2/3
  6109  1363  0087               	movwf	7
  6110  1364  1F81               	btfss	1,7
  6111  1365  0008               	return
  6112                           
  6113                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6114  1366  087A               	movf	_Sw,w
  6115  1367  0086               	movwf	6
  6116  1368  3001               	movlw	1	; select bank2/3
  6117  1369  0087               	movwf	7
  6118  136A  1581               	bsf	1,3
  6119                           
  6120                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6121  136B  0A7A               	incf	_Sw,w
  6122  136C  0086               	movwf	6
  6123  136D  3001               	movlw	1	; select bank2/3
  6124  136E  0087               	movwf	7
  6125  136F  1401               	bsf	1,0
  6126                           
  6127                           ;Switch_B1.c: 336: Sw->Status = 1;
  6128  1370  087A               	movf	_Sw,w
  6129  1371  0086               	movwf	6
  6130  1372  3001               	movlw	1	; select bank2/3
  6131  1373  0087               	movwf	7
  6132  1374  1701               	bsf	1,6
  6133                           
  6134                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6135  1375  01A2               	clrf	setRFSW_Status@command
  6136  1376  0AA2               	incf	setRFSW_Status@command,f
  6137  1377  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6138  1378  319E  2664  3193   	fcall	_setRFSW_Status
  6139                           
  6140                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6141  137B  0020               	movlb	0	; select bank0
  6142  137C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6143  137D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6144  137E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6145  137F  319E  26EF  3193   	fcall	_setDimmerLights_TriggerAdj
  6146                           
  6147                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6148  1382  0020               	movlb	0	; select bank0
  6149  1383  01A2               	clrf	setDimmerLights_AdjGo@command
  6150  1384  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6151  1385  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6152  1386  319E  26DF         	fcall	_setDimmerLights_AdjGo
  6153  1388  0008               	return
  6154  1389                     __end_of_Sw_DimmerAdjFunc:	
  6155                           
  6156                           	psect	text21
  6157  1EEF                     __ptext21:	
  6158 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6159 ;; Defined at:
  6160 ;;		line 722 in file "../src/Dimmer_B1.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;  lights          1    wreg     unsigned char 
  6163 ;;  command         1    2[BANK0 ] unsigned char 
  6164 ;; Auto vars:     Size  Location     Type
  6165 ;;  lights          1    3[BANK0 ] unsigned char 
  6166 ;; Return value:  Size  Location     Type
  6167 ;;		None               void
  6168 ;; Registers used:
  6169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6170 ;; Tracked objects:
  6171 ;;		On entry : 0/0
  6172 ;;		On exit  : 0/0
  6173 ;;		Unchanged: 0/0
  6174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6175 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6178 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6179 ;;Total ram usage:        2 bytes
  6180 ;; Hardware stack levels used:    1
  6181 ;; Hardware stack levels required when called:    6
  6182 ;; This function calls:
  6183 ;;		_DimmerLightsPointSelect
  6184 ;; This function is called by:
  6185 ;;		_Sw_DimmerOffFunc
  6186 ;;		_Sw_DimmerAdjFunc
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           
  6191                           ;psect for function _setDimmerLights_TriggerAdj
  6192  1EEF                     _setDimmerLights_TriggerAdj:	
  6193                           
  6194                           ;incstack = 0
  6195                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6196                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6197  1EEF  0020               	movlb	0	; select bank0
  6198  1EF0  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6199                           
  6200                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  6201  1EF1  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6202  1EF2  319D  25D1         	fcall	_DimmerLightsPointSelect
  6203                           
  6204                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  6205  1EF4  0020               	movlb	0	; select bank0
  6206  1EF5  086D               	movf	_DimmerLights,w
  6207  1EF6  3E08               	addlw	8
  6208  1EF7  0086               	movwf	6
  6209  1EF8  3001               	movlw	1	; select bank2/3
  6210  1EF9  0087               	movwf	7
  6211  1EFA  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6212  1EFB  1201               	bcf	1,4
  6213  1EFC  1D03               	skipz
  6214  1EFD  1601               	bsf	1,4
  6215  1EFE  0008               	return
  6216  1EFF                     __end_of_setDimmerLights_TriggerAdj:	
  6217                           
  6218                           	psect	text22
  6219  1EDF                     __ptext22:	
  6220 ;; *************** function _setDimmerLights_AdjGo *****************
  6221 ;; Defined at:
  6222 ;;		line 710 in file "../src/Dimmer_B1.c"
  6223 ;; Parameters:    Size  Location     Type
  6224 ;;  lights          1    wreg     unsigned char 
  6225 ;;  command         1    2[BANK0 ] unsigned char 
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;  lights          1    3[BANK0 ] unsigned char 
  6228 ;; Return value:  Size  Location     Type
  6229 ;;		None               void
  6230 ;; Registers used:
  6231 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6237 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;Total ram usage:        2 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    6
  6244 ;; This function calls:
  6245 ;;		_DimmerLightsPointSelect
  6246 ;; This function is called by:
  6247 ;;		_Sw_DimmerOffFunc
  6248 ;;		_Sw_DimmerAdjFunc
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _setDimmerLights_AdjGo
  6254  1EDF                     _setDimmerLights_AdjGo:	
  6255                           
  6256                           ;incstack = 0
  6257                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6258                           ;setDimmerLights_AdjGo@lights stored from wreg
  6259  1EDF  0020               	movlb	0	; select bank0
  6260  1EE0  00A3               	movwf	setDimmerLights_AdjGo@lights
  6261                           
  6262                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  6263  1EE1  0823               	movf	setDimmerLights_AdjGo@lights,w
  6264  1EE2  319D  25D1         	fcall	_DimmerLightsPointSelect
  6265                           
  6266                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  6267  1EE4  0020               	movlb	0	; select bank0
  6268  1EE5  086D               	movf	_DimmerLights,w
  6269  1EE6  3E08               	addlw	8
  6270  1EE7  0086               	movwf	6
  6271  1EE8  3001               	movlw	1	; select bank2/3
  6272  1EE9  0087               	movwf	7
  6273  1EEA  0822               	movf	setDimmerLights_AdjGo@command,w
  6274  1EEB  1181               	bcf	1,3
  6275  1EEC  1D03               	skipz
  6276  1EED  1581               	bsf	1,3
  6277  1EEE  0008               	return
  6278  1EEF                     __end_of_setDimmerLights_AdjGo:	
  6279                           
  6280                           	psect	text23
  6281  1D94                     __ptext23:	
  6282 ;; *************** function _Switch_Initialization *****************
  6283 ;; Defined at:
  6284 ;;		line 41 in file "../src/Switch_B1.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;		None
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;		None               void
  6291 ;; Registers used:
  6292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6302 ;;Total ram usage:        0 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    8
  6305 ;; This function calls:
  6306 ;;		_TouchPower
  6307 ;;		_setSw_Initialization
  6308 ;; This function is called by:
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           
  6314                           ;psect for function _Switch_Initialization
  6315  1D94                     _Switch_Initialization:	
  6316                           
  6317                           ;Switch_B1.c: 42: TouchPower();
  6318                           
  6319                           ;incstack = 0
  6320                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6321  1D94  319E  2691  319D   	fcall	_TouchPower
  6322                           
  6323                           ;Switch_B1.c: 44: WPUB1 = 0;
  6324  1D97  0024               	movlb	4	; select bank4
  6325  1D98  108D               	bcf	13,1	;volatile
  6326                           
  6327                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6328  1D99  3001               	movlw	1
  6329  1D9A  319E  26CF         	fcall	_setSw_Initialization
  6330  1D9C  0008               	return
  6331  1D9D                     __end_of_Switch_Initialization:	
  6332                           
  6333                           	psect	text24
  6334  1ECF                     __ptext24:	
  6335 ;; *************** function _setSw_Initialization *****************
  6336 ;; Defined at:
  6337 ;;		line 83 in file "../src/Switch_B1.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;  sw              1    wreg     unsigned char 
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;  sw              1    4[BANK0 ] unsigned char 
  6342 ;; Return value:  Size  Location     Type
  6343 ;;		None               void
  6344 ;; Registers used:
  6345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6355 ;;Total ram usage:        1 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    7
  6358 ;; This function calls:
  6359 ;;		_setLED
  6360 ;; This function is called by:
  6361 ;;		_Switch_Initialization
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           
  6366                           ;psect for function _setSw_Initialization
  6367  1ECF                     _setSw_Initialization:	
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6371                           ;setSw_Initialization@sw stored from wreg
  6372  1ECF  0020               	movlb	0	; select bank0
  6373  1ED0  00A4               	movwf	setSw_Initialization@sw
  6374                           
  6375                           ;Switch_B1.c: 84: setLED(sw, 1);
  6376  1ED1  01A2               	clrf	setLED@command
  6377  1ED2  0AA2               	incf	setLED@command,f
  6378  1ED3  0824               	movf	setSw_Initialization@sw,w
  6379  1ED4  3189  215F  319E   	fcall	_setLED
  6380                           
  6381                           ;Switch_B1.c: 86: setLED(sw + 1, 1);
  6382  1ED7  0020               	movlb	0	; select bank0
  6383  1ED8  01A2               	clrf	setLED@command
  6384  1ED9  0AA2               	incf	setLED@command,f
  6385  1EDA  0824               	movf	setSw_Initialization@sw,w
  6386  1EDB  3E01               	addlw	1
  6387  1EDC  3189  215F         	fcall	_setLED
  6388  1EDE  0008               	return
  6389  1EDF                     __end_of_setSw_Initialization:	
  6390                           
  6391                           	psect	text25
  6392  1E91                     __ptext25:	
  6393 ;; *************** function _TouchPower *****************
  6394 ;; Defined at:
  6395 ;;		line 10 in file "../src/Switch_B1.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;		None               void
  6402 ;; Registers used:
  6403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6413 ;;Total ram usage:        0 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    6
  6416 ;; This function calls:
  6417 ;;		_Timeout_Counter
  6418 ;;		_set_TimeoutCleared
  6419 ;; This function is called by:
  6420 ;;		_Switch_Initialization
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424                           
  6425                           ;psect for function _TouchPower
  6426  1E91                     _TouchPower:	
  6427                           
  6428                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6429                           
  6430                           ;incstack = 0
  6431                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6432  1E91  2E97               	goto	l9198
  6433  1E92                     l2303:	
  6434                           
  6435                           ;Switch_B1.c: 12: RC5 = 1;
  6436  1E92  0020               	movlb	0	; select bank0
  6437  1E93  168E               	bsf	14,5	;volatile
  6438                           
  6439                           ;Switch_B1.c: 13: Timeout_Counter();
  6440  1E94  319F  2745  319E   	fcall	_Timeout_Counter
  6441  1E97                     l9198:	
  6442  1E97  0020               	movlb	0	; select bank0
  6443  1E98  1A8E               	btfsc	14,5	;volatile
  6444  1E99  2E9D               	goto	l9202
  6445  1E9A  0021               	movlb	1	; select bank1
  6446  1E9B  1D2F               	btfss	(_myMain^(0+128)+15),2
  6447  1E9C  2E92               	goto	l2303
  6448  1E9D                     l9202:	
  6449                           
  6450                           ;Switch_B1.c: 14: }
  6451                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6452  1E9D  319D  253E         	fcall	_set_TimeoutCleared
  6453  1E9F  0008               	return
  6454  1EA0                     __end_of_TouchPower:	
  6455                           
  6456                           	psect	text26
  6457  1D0E                     __ptext26:	
  6458 ;; *************** function _RF_Main *****************
  6459 ;; Defined at:
  6460 ;;		line 16 in file "../src/RF_Control_B1.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;		None               void
  6467 ;; Registers used:
  6468 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6478 ;;Total ram usage:        0 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:   14
  6481 ;; This function calls:
  6482 ;;		_setRF_Main
  6483 ;; This function is called by:
  6484 ;;		_main
  6485 ;; This function uses a non-reentrant model
  6486 ;;
  6487                           
  6488                           
  6489                           ;psect for function _RF_Main
  6490  1D0E                     _RF_Main:	
  6491                           
  6492                           ;RF_Control_B1.c: 18: setRF_Main();
  6493                           
  6494                           ;incstack = 0
  6495                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6496  1D0E  3184  2420         	fcall	_setRF_Main
  6497  1D10  0008               	return
  6498  1D11                     __end_of_RF_Main:	
  6499                           
  6500                           	psect	text27
  6501  0420                     __ptext27:	
  6502 ;; *************** function _setRF_Main *****************
  6503 ;; Defined at:
  6504 ;;		line 52 in file "../src/RF_Control_B1.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  Receive_OK      1    0        unsigned char 
  6509 ;;  loop_f          1    0        unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;		None               void
  6512 ;; Registers used:
  6513 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;Total ram usage:        5 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:   13
  6526 ;; This function calls:
  6527 ;;		_CC2500_RxData
  6528 ;;		_CC2500_TxData
  6529 ;;		_CC2500_WriteCommand
  6530 ;;		___wmul
  6531 ;;		_getBuz_GO
  6532 ;;		_getRxData
  6533 ;; This function is called by:
  6534 ;;		_RF_Main
  6535 ;; This function uses a non-reentrant model
  6536 ;;
  6537                           
  6538                           
  6539                           ;psect for function _setRF_Main
  6540  0420                     _setRF_Main:	
  6541                           
  6542                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6543                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6544                           
  6545                           ;incstack = 0
  6546                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6547  0420  0021               	movlb	1	; select bank1
  6548  0421  1C3E               	btfss	_RF1^(0+128),0
  6549  0422  0008               	return
  6550                           
  6551                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6552  0423  319F  2710  3184   	fcall	_getBuz_GO
  6553  0426  0020               	movlb	0	; select bank0
  6554  0427  0821               	movf	?_getBuz_GO+1,w
  6555  0428  0420               	iorwf	?_getBuz_GO,w
  6556  0429  1D03               	skipz
  6557  042A  0008               	return
  6558                           
  6559                           ;RF_Control_B1.c: 68: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6560  042B  01EB               	clrf	_setRF_Main$4900
  6561  042C  0AEB               	incf	_setRF_Main$4900,f
  6562  042D  1F0C               	btfss	12,6	;volatile
  6563  042E  1A0C               	btfsc	12,4	;volatile
  6564  042F  2C34               	goto	l9088
  6565  0430  1C0C               	btfss	12,0	;volatile
  6566  0431  188D               	btfsc	13,1	;volatile
  6567  0432  2C34               	goto	l9088
  6568  0433  01EB               	clrf	_setRF_Main$4900
  6569  0434                     l9088:	
  6570  0434  086B               	movf	_setRF_Main$4900,w
  6571  0435  0021               	movlb	1	; select bank1
  6572  0436  13BE               	bcf	_RF1^(0+128),7
  6573  0437  1D03               	skipz
  6574  0438  17BE               	bsf	_RF1^(0+128),7
  6575                           
  6576                           ;RF_Control_B1.c: 70: if (RF1.Key == 1 && RF1.Learn == 0) {
  6577  0439  1BBE               	btfsc	_RF1^(0+128),7
  6578  043A  1B3E               	btfsc	_RF1^(0+128),6
  6579  043B  2C40               	goto	l1910
  6580                           
  6581                           ;RF_Control_B1.c: 71: RF1.Count = 0;
  6582  043C  01C0               	clrf	(_RF1^(0+128)+2)
  6583                           
  6584                           ;RF_Control_B1.c: 72: RF1.Run = 1;
  6585  043D  14BF               	bsf	(_RF1^(0+128)+1),1
  6586                           
  6587                           ;RF_Control_B1.c: 73: RF1.RxStatus = 0;
  6588  043E  11BE               	bcf	_RF1^(0+128),3
  6589                           
  6590                           ;RF_Control_B1.c: 75: } else {
  6591  043F  0008               	return
  6592  0440                     l1910:	
  6593                           
  6594                           ;RF_Control_B1.c: 76: if (RF1.Run == 1 && RF1.Learn == 0) {
  6595  0440  18BF               	btfsc	(_RF1^(0+128)+1),1
  6596  0441  1B3E               	btfsc	_RF1^(0+128),6
  6597  0442  2C50               	goto	l9110
  6598                           
  6599                           ;RF_Control_B1.c: 77: RF1.Count++;
  6600  0443  3001               	movlw	1
  6601  0444  0020               	movlb	0	; select bank0
  6602  0445  00E7               	movwf	??_setRF_Main
  6603  0446  0867               	movf	??_setRF_Main,w
  6604  0447  0021               	movlb	1	; select bank1
  6605  0448  07C0               	addwf	(_RF1^(0+128)+2),f
  6606                           
  6607                           ;RF_Control_B1.c: 78: if (RF1.Count == RF1.RunTime) {
  6608  0449  0840               	movf	(_RF1^(0+128)+2),w
  6609  044A  0643               	xorwf	(_RF1^(0+128)+5),w
  6610  044B  1D03               	skipz
  6611  044C  2CAB               	goto	l9164
  6612                           
  6613                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6614  044D  01C0               	clrf	(_RF1^(0+128)+2)
  6615                           
  6616                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  6617  044E  10BF               	bcf	(_RF1^(0+128)+1),1
  6618                           
  6619                           ;RF_Control_B1.c: 81: }
  6620                           ;RF_Control_B1.c: 82: } else {
  6621  044F  2CAB               	goto	l9164
  6622  0450                     l9110:	
  6623                           
  6624                           ;RF_Control_B1.c: 83: RF1.Count = 0;
  6625  0450  01C0               	clrf	(_RF1^(0+128)+2)
  6626                           
  6627                           ;RF_Control_B1.c: 84: RF1.Run = 0;
  6628  0451  10BF               	bcf	(_RF1^(0+128)+1),1
  6629                           
  6630                           ;RF_Control_B1.c: 86: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6631  0452  193E               	btfsc	_RF1^(0+128),2
  6632  0453  1B3E               	btfsc	_RF1^(0+128),6
  6633  0454  2C5C               	goto	l1915
  6634                           
  6635                           ;RF_Control_B1.c: 87: RF1.TransceiveGO = 0;
  6636  0455  113E               	bcf	_RF1^(0+128),2
  6637                           
  6638                           ;RF_Control_B1.c: 88: RF1.RxStatus = 0;
  6639  0456  11BE               	bcf	_RF1^(0+128),3
  6640                           
  6641                           ;RF_Control_B1.c: 89: RF1.ReceiveGO = 0;
  6642  0457  10BE               	bcf	_RF1^(0+128),1
  6643                           
  6644                           ;RF_Control_B1.c: 94: CC2500_TxData();
  6645  0458  318A  227D  3184   	fcall	_CC2500_TxData
  6646                           
  6647                           ;RF_Control_B1.c: 96: } else {
  6648  045B  2CAB               	goto	l9164
  6649  045C                     l1915:	
  6650                           
  6651                           ;RF_Control_B1.c: 98: if (RF1.RxStatus == 1) {
  6652  045C  1DBE               	btfss	_RF1^(0+128),3
  6653  045D  2C9A               	goto	l1917
  6654                           
  6655                           ;RF_Control_B1.c: 99: CC2500_RxData();
  6656  045E  318D  256D  3184   	fcall	_CC2500_RxData
  6657                           
  6658                           ;RF_Control_B1.c: 100: if (RF1.ReceiveGO == 1) {
  6659  0461  0021               	movlb	1	; select bank1
  6660  0462  1CBE               	btfss	_RF1^(0+128),1
  6661  0463  2CAB               	goto	l9164
  6662                           
  6663                           ;RF_Control_B1.c: 101: RF1.ReceiveGO = 0;
  6664  0464  10BE               	bcf	_RF1^(0+128),1
  6665                           
  6666                           ;RF_Control_B1.c: 102: RF1.Correction = 0;
  6667  0465  12BF               	bcf	(_RF1^(0+128)+1),5
  6668                           
  6669                           ;RF_Control_B1.c: 103: RF1.CorrectionCounter = 0;
  6670  0466  01C5               	clrf	(_RF1^(0+128)+7)
  6671  0467  01C6               	clrf	((_RF1+1)^(0+128)+7)
  6672                           
  6673                           ;RF_Control_B1.c: 111: getRxData();
  6674  0468  318B  2348  3184   	fcall	_getRxData
  6675                           
  6676                           ;RF_Control_B1.c: 114: RF1.Run = 1;
  6677  046B  0021               	movlb	1	; select bank1
  6678  046C  14BF               	bsf	(_RF1^(0+128)+1),1
  6679                           
  6680                           ;RF_Control_B1.c: 115: RB5 = RB5 == 1 ? 0 : 1;
  6681  046D  3020               	movlw	32
  6682  046E  0020               	movlb	0	; select bank0
  6683  046F  068D               	xorwf	13,f
  6684                           
  6685                           ;RF_Control_B1.c: 116: if (RF1.Checked == 1) {
  6686  0470  0021               	movlb	1	; select bank1
  6687  0471  1DBF               	btfss	(_RF1^(0+128)+1),3
  6688  0472  2C7F               	goto	l9144
  6689                           
  6690                           ;RF_Control_B1.c: 117: if (RF1.RunTime > 20) {
  6691  0473  3015               	movlw	21
  6692  0474  0243               	subwf	(_RF1^(0+128)+5),w
  6693  0475  1C03               	skipc
  6694  0476  2C7D               	goto	l9142
  6695                           
  6696                           ;RF_Control_B1.c: 118: RF1.RunTime = 20;
  6697  0477  3014               	movlw	20
  6698  0478  0020               	movlb	0	; select bank0
  6699  0479  00E7               	movwf	??_setRF_Main
  6700  047A  0867               	movf	??_setRF_Main,w
  6701  047B  0021               	movlb	1	; select bank1
  6702  047C  00C3               	movwf	(_RF1^(0+128)+5)
  6703  047D                     l9142:	
  6704                           
  6705                           ;RF_Control_B1.c: 119: }
  6706                           ;RF_Control_B1.c: 120: RF1.CheckCount = 0;
  6707  047D  01C1               	clrf	(_RF1^(0+128)+3)
  6708                           
  6709                           ;RF_Control_B1.c: 121: } else {
  6710  047E  2CAB               	goto	l9164
  6711  047F                     l9144:	
  6712                           
  6713                           ;RF_Control_B1.c: 123: RF1.CheckCount++;
  6714  047F  3001               	movlw	1
  6715  0480  0020               	movlb	0	; select bank0
  6716  0481  00E7               	movwf	??_setRF_Main
  6717  0482  0867               	movf	??_setRF_Main,w
  6718  0483  0021               	movlb	1	; select bank1
  6719  0484  07C1               	addwf	(_RF1^(0+128)+3),f
  6720                           
  6721                           ;RF_Control_B1.c: 124: if (RF1.CheckCount == 2) {
  6722  0485  0841               	movf	(_RF1^(0+128)+3),w
  6723  0486  3A02               	xorlw	2
  6724  0487  1D03               	skipz
  6725  0488  2CAB               	goto	l9164
  6726                           
  6727                           ;RF_Control_B1.c: 125: RF1.CheckCount = 0;
  6728  0489  01C1               	clrf	(_RF1^(0+128)+3)
  6729                           
  6730                           ;RF_Control_B1.c: 126: RF1.CheckedCounter = 0;
  6731  048A  01C2               	clrf	(_RF1^(0+128)+4)
  6732                           
  6733                           ;RF_Control_B1.c: 127: if (RF1.RxChecked == 0) {
  6734  048B  1A3F               	btfsc	(_RF1^(0+128)+1),4
  6735  048C  2C8F               	goto	l9154
  6736                           
  6737                           ;RF_Control_B1.c: 128: RF1.RxChecked = 1;
  6738  048D  163F               	bsf	(_RF1^(0+128)+1),4
  6739                           
  6740                           ;RF_Control_B1.c: 129: } else {
  6741  048E  2CAB               	goto	l9164
  6742  048F                     l9154:	
  6743                           
  6744                           ;RF_Control_B1.c: 130: if (RF1.RunTime < 100) {
  6745  048F  3064               	movlw	100
  6746  0490  0243               	subwf	(_RF1^(0+128)+5),w
  6747  0491  1803               	skipnc
  6748  0492  2CAB               	goto	l9164
  6749                           
  6750                           ;RF_Control_B1.c: 131: RF1.RunTime += 10;
  6751  0493  300A               	movlw	10
  6752  0494  0020               	movlb	0	; select bank0
  6753  0495  00E7               	movwf	??_setRF_Main
  6754  0496  0867               	movf	??_setRF_Main,w
  6755  0497  0021               	movlb	1	; select bank1
  6756  0498  07C3               	addwf	(_RF1^(0+128)+5),f
  6757                           
  6758                           ;RF_Control_B1.c: 132: }
  6759                           ;RF_Control_B1.c: 133: }
  6760                           ;RF_Control_B1.c: 134: }
  6761                           ;RF_Control_B1.c: 135: }
  6762                           ;RF_Control_B1.c: 136: }
  6763                           ;RF_Control_B1.c: 137: } else {
  6764  0499  2CAB               	goto	l9164
  6765  049A                     l1917:	
  6766                           
  6767                           ;RF_Control_B1.c: 139: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6768  049A  1DBE               	btfss	_RF1^(0+128),3
  6769  049B  18BE               	btfsc	_RF1^(0+128),1
  6770  049C  2CAB               	goto	l9164
  6771                           
  6772                           ;RF_Control_B1.c: 140: RF1.RxStatus = 1;
  6773  049D  15BE               	bsf	_RF1^(0+128),3
  6774                           
  6775                           ;RF_Control_B1.c: 141: RF1.Correction = 1;
  6776  049E  16BF               	bsf	(_RF1^(0+128)+1),5
  6777                           
  6778                           ;RF_Control_B1.c: 143: CC2500_WriteCommand(0x36);
  6779  049F  3036               	movlw	54
  6780  04A0  319F  27CC  3184   	fcall	_CC2500_WriteCommand
  6781                           
  6782                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3A);
  6783  04A3  303A               	movlw	58
  6784  04A4  319F  27CC  3184   	fcall	_CC2500_WriteCommand
  6785                           
  6786                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x34);
  6787  04A7  3034               	movlw	52
  6788  04A8  319F  27CC  3184   	fcall	_CC2500_WriteCommand
  6789  04AB                     l9164:	
  6790                           
  6791                           ;RF_Control_B1.c: 148: }
  6792                           ;RF_Control_B1.c: 150: }
  6793                           ;RF_Control_B1.c: 151: }
  6794                           ;RF_Control_B1.c: 152: }
  6795                           ;RF_Control_B1.c: 153: if (RF1.RxChecked == 1) {
  6796  04AB  0021               	movlb	1	; select bank1
  6797  04AC  1E3F               	btfss	(_RF1^(0+128)+1),4
  6798  04AD  2CD4               	goto	l9174
  6799                           
  6800                           ;RF_Control_B1.c: 154: RF1.CheckedCounter++;
  6801  04AE  3001               	movlw	1
  6802  04AF  0020               	movlb	0	; select bank0
  6803  04B0  00E7               	movwf	??_setRF_Main
  6804  04B1  0867               	movf	??_setRF_Main,w
  6805  04B2  0021               	movlb	1	; select bank1
  6806  04B3  07C2               	addwf	(_RF1^(0+128)+4),f
  6807                           
  6808                           ;RF_Control_B1.c: 155: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  6809  04B4  0843               	movf	(_RF1^(0+128)+5),w
  6810  04B5  0020               	movlb	0	; select bank0
  6811  04B6  00E7               	movwf	??_setRF_Main
  6812  04B7  01E8               	clrf	??_setRF_Main+1
  6813  04B8  0867               	movf	??_setRF_Main,w
  6814  04B9  00A0               	movwf	___wmul@multiplier
  6815  04BA  0868               	movf	??_setRF_Main+1,w
  6816  04BB  00A1               	movwf	___wmul@multiplier+1
  6817  04BC  300A               	movlw	10
  6818  04BD  00A2               	movwf	___wmul@multiplicand
  6819  04BE  3000               	movlw	0
  6820  04BF  00A3               	movwf	___wmul@multiplicand+1
  6821  04C0  3190  20B4  3184   	fcall	___wmul
  6822  04C3  0021               	movlb	1	; select bank1
  6823  04C4  0842               	movf	(_RF1^(0+128)+4),w
  6824  04C5  0020               	movlb	0	; select bank0
  6825  04C6  00E9               	movwf	??_setRF_Main+2
  6826  04C7  01EA               	clrf	??_setRF_Main+3
  6827  04C8  0821               	movf	?___wmul+1,w
  6828  04C9  066A               	xorwf	??_setRF_Main+3,w
  6829  04CA  1D03               	skipz
  6830  04CB  2CCE               	goto	u9455
  6831  04CC  0820               	movf	?___wmul,w
  6832  04CD  0669               	xorwf	??_setRF_Main+2,w
  6833  04CE                     u9455:	
  6834  04CE  1D03               	skipz
  6835  04CF  2CFE               	goto	l9184
  6836                           
  6837                           ;RF_Control_B1.c: 156: RF1.CheckedCounter = 0;
  6838  04D0  0021               	movlb	1	; select bank1
  6839  04D1  01C2               	clrf	(_RF1^(0+128)+4)
  6840                           
  6841                           ;RF_Control_B1.c: 157: RF1.RxChecked = 0;
  6842  04D2  123F               	bcf	(_RF1^(0+128)+1),4
  6843                           
  6844                           ;RF_Control_B1.c: 158: }
  6845                           ;RF_Control_B1.c: 159: } else {
  6846  04D3  2CFE               	goto	l9184
  6847  04D4                     l9174:	
  6848                           
  6849                           ;RF_Control_B1.c: 160: if (RF1.RunTime > 20) {
  6850  04D4  3015               	movlw	21
  6851  04D5  0243               	subwf	(_RF1^(0+128)+5),w
  6852  04D6  1C03               	skipc
  6853  04D7  2CFE               	goto	l9184
  6854                           
  6855                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  6856  04D8  3001               	movlw	1
  6857  04D9  0020               	movlb	0	; select bank0
  6858  04DA  00E7               	movwf	??_setRF_Main
  6859  04DB  0867               	movf	??_setRF_Main,w
  6860  04DC  0021               	movlb	1	; select bank1
  6861  04DD  07C2               	addwf	(_RF1^(0+128)+4),f
  6862                           
  6863                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == (10 * RF1.RunTime)) {
  6864  04DE  0843               	movf	(_RF1^(0+128)+5),w
  6865  04DF  0020               	movlb	0	; select bank0
  6866  04E0  00E7               	movwf	??_setRF_Main
  6867  04E1  01E8               	clrf	??_setRF_Main+1
  6868  04E2  0867               	movf	??_setRF_Main,w
  6869  04E3  00A0               	movwf	___wmul@multiplier
  6870  04E4  0868               	movf	??_setRF_Main+1,w
  6871  04E5  00A1               	movwf	___wmul@multiplier+1
  6872  04E6  300A               	movlw	10
  6873  04E7  00A2               	movwf	___wmul@multiplicand
  6874  04E8  3000               	movlw	0
  6875  04E9  00A3               	movwf	___wmul@multiplicand+1
  6876  04EA  3190  20B4  3184   	fcall	___wmul
  6877  04ED  0021               	movlb	1	; select bank1
  6878  04EE  0842               	movf	(_RF1^(0+128)+4),w
  6879  04EF  0020               	movlb	0	; select bank0
  6880  04F0  00E9               	movwf	??_setRF_Main+2
  6881  04F1  01EA               	clrf	??_setRF_Main+3
  6882  04F2  0821               	movf	?___wmul+1,w
  6883  04F3  066A               	xorwf	??_setRF_Main+3,w
  6884  04F4  1D03               	skipz
  6885  04F5  2CF8               	goto	u9475
  6886  04F6  0820               	movf	?___wmul,w
  6887  04F7  0669               	xorwf	??_setRF_Main+2,w
  6888  04F8                     u9475:	
  6889  04F8  1D03               	skipz
  6890  04F9  2CFE               	goto	l9184
  6891                           
  6892                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  6893  04FA  0021               	movlb	1	; select bank1
  6894  04FB  01C2               	clrf	(_RF1^(0+128)+4)
  6895                           
  6896                           ;RF_Control_B1.c: 164: RF1.RunTime -= 10;
  6897  04FC  300A               	movlw	10
  6898  04FD  02C3               	subwf	(_RF1^(0+128)+5),f
  6899  04FE                     l9184:	
  6900                           
  6901                           ;RF_Control_B1.c: 165: }
  6902                           ;RF_Control_B1.c: 166: }
  6903                           ;RF_Control_B1.c: 167: }
  6904                           ;RF_Control_B1.c: 168: if (RF1.Correction == 1) {
  6905  04FE  0021               	movlb	1	; select bank1
  6906  04FF  1EBF               	btfss	(_RF1^(0+128)+1),5
  6907  0500  0008               	return
  6908                           
  6909                           ;RF_Control_B1.c: 169: RF1.CorrectionCounter++;
  6910  0501  3001               	movlw	1
  6911  0502  07C5               	addwf	(_RF1^(0+128)+7),f
  6912  0503  3000               	movlw	0
  6913  0504  3DC6               	addwfc	((_RF1+1)^(0+128)+7),f
  6914                           
  6915                           ;RF_Control_B1.c: 170: if (RF1.CorrectionCounter >= 60000) {
  6916  0505  30EA               	movlw	234
  6917  0506  0246               	subwf	((_RF1+1)^(0+128)+7),w
  6918  0507  3060               	movlw	96
  6919  0508  1903               	skipnz
  6920  0509  0245               	subwf	(_RF1^(0+128)+7),w
  6921  050A  1C03               	skipc
  6922  050B  0008               	return
  6923                           
  6924                           ;RF_Control_B1.c: 171: RF1.CorrectionCounter = 0;
  6925  050C  01C5               	clrf	(_RF1^(0+128)+7)
  6926  050D  01C6               	clrf	((_RF1+1)^(0+128)+7)
  6927                           
  6928                           ;RF_Control_B1.c: 173: RF1.RxStatus = 0;
  6929  050E  11BE               	bcf	_RF1^(0+128),3
  6930                           
  6931                           ;RF_Control_B1.c: 174: RF1.ReceiveGO = 0;
  6932  050F  10BE               	bcf	_RF1^(0+128),1
  6933  0510  0008               	return
  6934  0511                     __end_of_setRF_Main:	
  6935                           
  6936                           	psect	text28
  6937  0B48                     __ptext28:	
  6938 ;; *************** function _getRxData *****************
  6939 ;; Defined at:
  6940 ;;		line 257 in file "../src/RF_Control_B1.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;		None
  6945 ;; Return value:  Size  Location     Type
  6946 ;;		None               void
  6947 ;; Registers used:
  6948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : 0/0
  6951 ;;		On exit  : 0/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;Total ram usage:        0 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:   12
  6961 ;; This function calls:
  6962 ;;		_setControl_Lights_Table
  6963 ;;		_setLog_Code
  6964 ;; This function is called by:
  6965 ;;		_setRF_Main
  6966 ;; This function uses a non-reentrant model
  6967 ;;
  6968                           
  6969                           
  6970                           ;psect for function _getRxData
  6971  0B48                     _getRxData:	
  6972                           
  6973                           ;RF_Control_B1.c: 258: if (RF1.Learn == 1) {
  6974                           
  6975                           ;incstack = 0
  6976                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6977  0B48  0021               	movlb	1	; select bank1
  6978  0B49  1F3E               	btfss	_RF1^(0+128),6
  6979  0B4A  2B5B               	goto	l8572
  6980                           
  6981                           ;RF_Control_B1.c: 259: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6982  0B4B  0022               	movlb	2	; select bank2
  6983  0B4C  08A0               	movf	_RF_Data^(0+256),f
  6984  0B4D  1D03               	skipz
  6985  0B4E  2B58               	goto	l1952
  6986  0B4F  0821               	movf	(_RF_Data^(0+256)+1),w
  6987  0B50  3A64               	xorlw	100
  6988  0B51  1D03               	skipz
  6989  0B52  2B58               	goto	l1952
  6990                           
  6991                           ;RF_Control_B1.c: 260: setLog_Code();
  6992  0B53  3193  2389         	fcall	_setLog_Code
  6993                           
  6994                           ;RF_Control_B1.c: 261: RF1.Checked = 1;
  6995  0B55  0021               	movlb	1	; select bank1
  6996  0B56  15BF               	bsf	(_RF1^(0+128)+1),3
  6997                           
  6998                           ;RF_Control_B1.c: 262: } else {
  6999  0B57  0008               	return
  7000  0B58                     l1952:	
  7001                           
  7002                           ;RF_Control_B1.c: 263: RF1.Checked = 0;
  7003  0B58  0021               	movlb	1	; select bank1
  7004  0B59  11BF               	bcf	(_RF1^(0+128)+1),3
  7005                           
  7006                           ;RF_Control_B1.c: 264: }
  7007                           ;RF_Control_B1.c: 265: } else {
  7008  0B5A  0008               	return
  7009  0B5B                     l8572:	
  7010                           
  7011                           ;RF_Control_B1.c: 266: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7012  0B5B  0022               	movlb	2	; select bank2
  7013  0B5C  08A0               	movf	_RF_Data^(0+256),f
  7014  0B5D  1D03               	skipz
  7015  0B5E  2B99               	goto	l8594
  7016  0B5F  0821               	movf	(_RF_Data^(0+256)+1),w
  7017  0B60  3A02               	xorlw	2
  7018  0B61  1D03               	skipz
  7019  0B62  2B99               	goto	l8594
  7020                           
  7021                           ;RF_Control_B1.c: 268: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7022  0B63  082C               	movf	(_RF_Data^(0+256)+12),w
  7023  0B64  3AFF               	xorlw	255
  7024  0B65  1D03               	skipz
  7025  0B66  2B73               	goto	l8584
  7026  0B67  082D               	movf	(_RF_Data^(0+256)+13),w
  7027  0B68  3AFF               	xorlw	255
  7028  0B69  1D03               	skipz
  7029  0B6A  2B73               	goto	l8584
  7030  0B6B  082E               	movf	(_RF_Data^(0+256)+14),w
  7031  0B6C  3AFF               	xorlw	255
  7032  0B6D  1D03               	skipz
  7033  0B6E  2B73               	goto	l8584
  7034                           
  7035                           ;RF_Control_B1.c: 269: __nop();
  7036  0B6F  0000               	nop
  7037                           
  7038                           ;RF_Control_B1.c: 270: RF1.Checked = 0;
  7039  0B70  0021               	movlb	1	; select bank1
  7040  0B71  11BF               	bcf	(_RF1^(0+128)+1),3
  7041                           
  7042                           ;RF_Control_B1.c: 271: } else {
  7043  0B72  0008               	return
  7044  0B73                     l8584:	
  7045                           
  7046                           ;RF_Control_B1.c: 272: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7047  0B73  0020               	movlb	0	; select bank0
  7048  0B74  086C               	movf	_product,w
  7049  0B75  3E0C               	addlw	12
  7050  0B76  0086               	movwf	6
  7051  0B77  3001               	movlw	1	; select bank2/3
  7052  0B78  0087               	movwf	7
  7053  0B79  0022               	movlb	2	; select bank2
  7054  0B7A  082C               	movf	(_RF_Data^(0+256)+12),w
  7055  0B7B  0601               	xorwf	1,w
  7056  0B7C  1D03               	skipz
  7057  0B7D  0008               	return
  7058  0B7E  0020               	movlb	0	; select bank0
  7059  0B7F  086C               	movf	_product,w
  7060  0B80  3E0D               	addlw	13
  7061  0B81  0086               	movwf	6
  7062  0B82  3001               	movlw	1	; select bank2/3
  7063  0B83  0087               	movwf	7
  7064  0B84  0022               	movlb	2	; select bank2
  7065  0B85  082D               	movf	(_RF_Data^(0+256)+13),w
  7066  0B86  0601               	xorwf	1,w
  7067  0B87  1D03               	skipz
  7068  0B88  0008               	return
  7069  0B89  0020               	movlb	0	; select bank0
  7070  0B8A  086C               	movf	_product,w
  7071  0B8B  3E0E               	addlw	14
  7072  0B8C  0086               	movwf	6
  7073  0B8D  3001               	movlw	1	; select bank2/3
  7074  0B8E  0087               	movwf	7
  7075  0B8F  0022               	movlb	2	; select bank2
  7076  0B90  082E               	movf	(_RF_Data^(0+256)+14),w
  7077  0B91  0601               	xorwf	1,w
  7078  0B92  1D03               	skipz
  7079  0B93  0008               	return
  7080                           
  7081                           ;RF_Control_B1.c: 273: setControl_Lights_Table();
  7082  0B94  318A  22E1         	fcall	_setControl_Lights_Table
  7083                           
  7084                           ;RF_Control_B1.c: 274: RF1.Checked = 1;
  7085  0B96  0021               	movlb	1	; select bank1
  7086  0B97  15BF               	bsf	(_RF1^(0+128)+1),3
  7087                           
  7088                           ;RF_Control_B1.c: 275: }
  7089                           ;RF_Control_B1.c: 276: }
  7090                           ;RF_Control_B1.c: 277: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7091  0B98  0008               	return
  7092  0B99                     l8594:	
  7093  0B99  0022               	movlb	2	; select bank2
  7094  0B9A  0820               	movf	_RF_Data^(0+256),w
  7095  0B9B  3AFF               	xorlw	255
  7096  0B9C  1D03               	skipz
  7097  0B9D  2BA4               	goto	l8600
  7098  0B9E  0821               	movf	(_RF_Data^(0+256)+1),w
  7099  0B9F  3A02               	xorlw	2
  7100  0BA0  1D03               	skipz
  7101  0BA1  2BA4               	goto	l8600
  7102                           
  7103                           ;RF_Control_B1.c: 278: __nop();
  7104  0BA2  0000               	nop
  7105                           
  7106                           ;RF_Control_B1.c: 279: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7107  0BA3  0008               	return
  7108  0BA4                     l8600:	
  7109  0BA4  0022               	movlb	2	; select bank2
  7110  0BA5  08A0               	movf	_RF_Data^(0+256),f
  7111  0BA6  1D03               	skipz
  7112  0BA7  2BAE               	goto	l1962
  7113  0BA8  0821               	movf	(_RF_Data^(0+256)+1),w
  7114  0BA9  3A65               	xorlw	101
  7115  0BAA  1D03               	skipz
  7116  0BAB  2BAE               	goto	l1962
  7117                           
  7118                           ;RF_Control_B1.c: 280: __nop();
  7119  0BAC  0000               	nop
  7120                           
  7121                           ;RF_Control_B1.c: 281: } else {
  7122  0BAD  0008               	return
  7123  0BAE                     l1962:	
  7124                           
  7125                           ;RF_Control_B1.c: 282: RF1.Checked = 0;
  7126  0BAE  0021               	movlb	1	; select bank1
  7127  0BAF  11BF               	bcf	(_RF1^(0+128)+1),3
  7128  0BB0  0008               	return
  7129  0BB1                     __end_of_getRxData:	
  7130                           
  7131                           	psect	text29
  7132  1389                     __ptext29:	
  7133 ;; *************** function _setLog_Code *****************
  7134 ;; Defined at:
  7135 ;;		line 292 in file "../src/RF_Control_B1.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;		None               void
  7142 ;; Registers used:
  7143 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7151 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;Total ram usage:        1 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    7
  7156 ;; This function calls:
  7157 ;;		_setBuz
  7158 ;; This function is called by:
  7159 ;;		_getRxData
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function _setLog_Code
  7165  1389                     _setLog_Code:	
  7166                           
  7167                           ;RF_Control_B1.c: 293: product->Data[12]=RF_Data[12];
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7171  1389  0022               	movlb	2	; select bank2
  7172  138A  082C               	movf	(_RF_Data^(0+256)+12),w
  7173  138B  0020               	movlb	0	; select bank0
  7174  138C  00AD               	movwf	??_setLog_Code
  7175  138D  086C               	movf	_product,w
  7176  138E  3E0C               	addlw	12
  7177  138F  0086               	movwf	6
  7178  1390  3001               	movlw	1	; select bank2/3
  7179  1391  0087               	movwf	7
  7180  1392  082D               	movf	??_setLog_Code,w
  7181  1393  0081               	movwf	1
  7182                           
  7183                           ;RF_Control_B1.c: 294: product->Data[13]=RF_Data[13];
  7184  1394  0022               	movlb	2	; select bank2
  7185  1395  082D               	movf	(_RF_Data^(0+256)+13),w
  7186  1396  0020               	movlb	0	; select bank0
  7187  1397  00AD               	movwf	??_setLog_Code
  7188  1398  086C               	movf	_product,w
  7189  1399  3E0D               	addlw	13
  7190  139A  0086               	movwf	6
  7191  139B  3001               	movlw	1	; select bank2/3
  7192  139C  0087               	movwf	7
  7193  139D  082D               	movf	??_setLog_Code,w
  7194  139E  0081               	movwf	1
  7195                           
  7196                           ;RF_Control_B1.c: 295: product->Data[14]=RF_Data[14];
  7197  139F  0022               	movlb	2	; select bank2
  7198  13A0  082E               	movf	(_RF_Data^(0+256)+14),w
  7199  13A1  0020               	movlb	0	; select bank0
  7200  13A2  00AD               	movwf	??_setLog_Code
  7201  13A3  086C               	movf	_product,w
  7202  13A4  3E0E               	addlw	14
  7203  13A5  0086               	movwf	6
  7204  13A6  3001               	movlw	1	; select bank2/3
  7205  13A7  0087               	movwf	7
  7206  13A8  082D               	movf	??_setLog_Code,w
  7207  13A9  0081               	movwf	1
  7208                           
  7209                           ;RF_Control_B1.c: 296: setBuz(1, 100);
  7210  13AA  3064               	movlw	100
  7211  13AB  00A9               	movwf	setBuz@time
  7212  13AC  3000               	movlw	0
  7213  13AD  00AA               	movwf	setBuz@time+1
  7214  13AE  3001               	movlw	1
  7215  13AF  3188  2050  3193   	fcall	_setBuz
  7216                           
  7217                           ;RF_Control_B1.c: 297: RF1.Learn = 0;
  7218  13B2  0021               	movlb	1	; select bank1
  7219  13B3  133E               	bcf	_RF1^(0+128),6
  7220                           
  7221                           ;RF_Control_B1.c: 298: if (myMain.First) {
  7222  13B4  1FA0               	btfss	_myMain^(0+128),7
  7223  13B5  2BB8               	goto	l1967
  7224                           
  7225                           ;RF_Control_B1.c: 299: Memory.LoopSave=1;
  7226  13B6  0023               	movlb	3	; select bank3
  7227  13B7  1544               	bsf	(_Memory^(0+384)+36),2
  7228  13B8                     l1967:	
  7229                           
  7230                           ;RF_Control_B1.c: 300: }
  7231                           ;RF_Control_B1.c: 301: Memory.Modify=1;
  7232  13B8  0023               	movlb	3	; select bank3
  7233  13B9  1444               	bsf	(_Memory^(0+384)+36),0
  7234  13BA  0008               	return
  7235  13BB                     __end_of_setLog_Code:	
  7236                           
  7237                           	psect	text30
  7238  0AE1                     __ptext30:	
  7239 ;; *************** function _setControl_Lights_Table *****************
  7240 ;; Defined at:
  7241 ;;		line 305 in file "../src/RF_Control_B1.c"
  7242 ;; Parameters:    Size  Location     Type
  7243 ;;		None
  7244 ;; Auto vars:     Size  Location     Type
  7245 ;;		None
  7246 ;; Return value:  Size  Location     Type
  7247 ;;		None               void
  7248 ;; Registers used:
  7249 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7250 ;; Tracked objects:
  7251 ;;		On entry : 0/0
  7252 ;;		On exit  : 0/0
  7253 ;;		Unchanged: 0/0
  7254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7259 ;;Total ram usage:        0 bytes
  7260 ;; Hardware stack levels used:    1
  7261 ;; Hardware stack levels required when called:   11
  7262 ;; This function calls:
  7263 ;;		_setBuz
  7264 ;;		_setDimmerLights
  7265 ;;		_setRFSW_AdjControl
  7266 ;;		_setRFSW_Control
  7267 ;;		_setRFSW_Status
  7268 ;;		_setSw_Status
  7269 ;;		_setTxData
  7270 ;; This function is called by:
  7271 ;;		_getRxData
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           
  7276                           ;psect for function _setControl_Lights_Table
  7277  0AE1                     _setControl_Lights_Table:	
  7278                           
  7279                           ;RF_Control_B1.c: 306: if (RF_Data[15] == 0x00) {
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7283  0AE1  0022               	movlb	2	; select bank2
  7284  0AE2  08AF               	movf	(_RF_Data^(0+256)+15),f
  7285  0AE3  1D03               	skipz
  7286  0AE4  2B1B               	goto	l8298
  7287                           
  7288                           ;RF_Control_B1.c: 308: setDimmerLights(1, 0);
  7289  0AE5  0020               	movlb	0	; select bank0
  7290  0AE6  01A4               	clrf	setDimmerLights@status
  7291  0AE7  3001               	movlw	1
  7292  0AE8  318D  25E3  318A   	fcall	_setDimmerLights
  7293                           
  7294                           ;RF_Control_B1.c: 309: setRFSW_Status(1, 0);
  7295  0AEB  0020               	movlb	0	; select bank0
  7296  0AEC  01A2               	clrf	setRFSW_Status@command
  7297  0AED  3001               	movlw	1
  7298  0AEE  319E  2664  318A   	fcall	_setRFSW_Status
  7299                           
  7300                           ;RF_Control_B1.c: 310: setSw_Status(1, 0);
  7301  0AF1  0020               	movlb	0	; select bank0
  7302  0AF2  01A2               	clrf	setSw_Status@command
  7303  0AF3  3001               	movlw	1
  7304  0AF4  319E  2673  318A   	fcall	_setSw_Status
  7305                           
  7306                           ;RF_Control_B1.c: 323: product->Data[9]=0;
  7307  0AF7  0020               	movlb	0	; select bank0
  7308  0AF8  086C               	movf	_product,w
  7309  0AF9  3E09               	addlw	9
  7310  0AFA  0086               	movwf	6
  7311  0AFB  3001               	movlw	1	; select bank2/3
  7312  0AFC  0087               	movwf	7
  7313  0AFD  0181               	clrf	1
  7314                           
  7315                           ;RF_Control_B1.c: 324: product->Data[11]=0;
  7316  0AFE  086C               	movf	_product,w
  7317  0AFF  3E0B               	addlw	11
  7318  0B00  0086               	movwf	6
  7319  0B01  3001               	movlw	1	; select bank2/3
  7320  0B02  0087               	movwf	7
  7321  0B03  0181               	clrf	1
  7322                           
  7323                           ;RF_Control_B1.c: 325: product->Data[15]=0;
  7324  0B04  086C               	movf	_product,w
  7325  0B05  3E0F               	addlw	15
  7326  0B06  0086               	movwf	6
  7327  0B07  3001               	movlw	1	; select bank2/3
  7328  0B08  0087               	movwf	7
  7329  0B09  0181               	clrf	1
  7330                           
  7331                           ;RF_Control_B1.c: 326: product->Data[17]=0;
  7332  0B0A  086C               	movf	_product,w
  7333  0B0B  3E11               	addlw	17
  7334  0B0C  0086               	movwf	6
  7335  0B0D  3001               	movlw	1	; select bank2/3
  7336  0B0E  0087               	movwf	7
  7337  0B0F  0181               	clrf	1
  7338                           
  7339                           ;RF_Control_B1.c: 327: setBuz(1, 100);
  7340  0B10  3064               	movlw	100
  7341  0B11  00A9               	movwf	setBuz@time
  7342  0B12  3000               	movlw	0
  7343  0B13  00AA               	movwf	setBuz@time+1
  7344  0B14  3001               	movlw	1
  7345  0B15  3188  2050  318A   	fcall	_setBuz
  7346                           
  7347                           ;RF_Control_B1.c: 328: setTxData();
  7348  0B18  3185  25D8         	fcall	_setTxData
  7349                           
  7350                           ;RF_Control_B1.c: 329: } else if (RF_Data[15] == 0x20) {
  7351  0B1A  0008               	return
  7352  0B1B                     l8298:	
  7353  0B1B  0022               	movlb	2	; select bank2
  7354  0B1C  082F               	movf	(_RF_Data^(0+256)+15),w
  7355  0B1D  3A20               	xorlw	32
  7356  0B1E  1D03               	skipz
  7357  0B1F  2B36               	goto	l8304
  7358                           
  7359                           ;RF_Control_B1.c: 330: product->Data[9]=0;
  7360  0B20  0020               	movlb	0	; select bank0
  7361  0B21  086C               	movf	_product,w
  7362  0B22  3E09               	addlw	9
  7363  0B23  0086               	movwf	6
  7364  0B24  3001               	movlw	1	; select bank2/3
  7365  0B25  0087               	movwf	7
  7366  0B26  0181               	clrf	1
  7367                           
  7368                           ;RF_Control_B1.c: 331: product->Data[11]=0;
  7369  0B27  086C               	movf	_product,w
  7370  0B28  3E0B               	addlw	11
  7371  0B29  0086               	movwf	6
  7372  0B2A  3001               	movlw	1	; select bank2/3
  7373  0B2B  0087               	movwf	7
  7374  0B2C  0181               	clrf	1
  7375                           
  7376                           ;RF_Control_B1.c: 332: product->Data[17]=0;
  7377  0B2D  086C               	movf	_product,w
  7378  0B2E  3E11               	addlw	17
  7379  0B2F  0086               	movwf	6
  7380  0B30  3001               	movlw	1	; select bank2/3
  7381  0B31  0087               	movwf	7
  7382  0B32  0181               	clrf	1
  7383                           
  7384                           ;RF_Control_B1.c: 333: setTxData();
  7385  0B33  3185  25D8         	fcall	_setTxData
  7386                           
  7387                           ;RF_Control_B1.c: 334: }
  7388  0B35  0008               	return
  7389  0B36                     l8304:	
  7390                           
  7391                           ;RF_Control_B1.c: 336: else if (RF_Data[15] == 0x01) {
  7392  0B36  0022               	movlb	2	; select bank2
  7393  0B37  082F               	movf	(_RF_Data^(0+256)+15),w
  7394  0B38  3A01               	xorlw	1
  7395  0B39  1D03               	skipz
  7396  0B3A  2B3F               	goto	l8308
  7397                           
  7398                           ;RF_Control_B1.c: 337: setRFSW_Control(1);
  7399  0B3B  3001               	movlw	1
  7400  0B3C  318F  2770         	fcall	_setRFSW_Control
  7401                           
  7402                           ;RF_Control_B1.c: 338: }
  7403  0B3E  0008               	return
  7404  0B3F                     l8308:	
  7405                           
  7406                           ;RF_Control_B1.c: 340: else if (RF_Data[15] == 0x11) {
  7407  0B3F  0022               	movlb	2	; select bank2
  7408  0B40  082F               	movf	(_RF_Data^(0+256)+15),w
  7409  0B41  3A11               	xorlw	17
  7410  0B42  1D03               	skipz
  7411  0B43  0008               	return
  7412                           
  7413                           ;RF_Control_B1.c: 341: setRFSW_AdjControl(1);
  7414  0B44  3001               	movlw	1
  7415  0B45  3194  245F         	fcall	_setRFSW_AdjControl
  7416  0B47  0008               	return
  7417  0B48                     __end_of_setControl_Lights_Table:	
  7418                           
  7419                           	psect	text31
  7420  0F70                     __ptext31:	
  7421 ;; *************** function _setRFSW_Control *****************
  7422 ;; Defined at:
  7423 ;;		line 393 in file "../src/RF_Control_B1.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;  sw              1    wreg     unsigned char 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  sw              1   67[BANK0 ] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;		None               void
  7430 ;; Registers used:
  7431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        2 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    9
  7444 ;; This function calls:
  7445 ;;		_RfSWPointSelect
  7446 ;;		_setBuz
  7447 ;;		_setDelayOff_GO
  7448 ;;		_setDimmerLights_Switch
  7449 ;;		_setDimmerLights_Trigger
  7450 ;;		_setRF_DimmerLights
  7451 ;;		_setSw_Status
  7452 ;;		_setTxData
  7453 ;; This function is called by:
  7454 ;;		_setControl_Lights_Table
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           
  7459                           ;psect for function _setRFSW_Control
  7460  0F70                     _setRFSW_Control:	
  7461                           
  7462                           ;incstack = 0
  7463                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7464                           ;setRFSW_Control@sw stored from wreg
  7465  0F70  0020               	movlb	0	; select bank0
  7466  0F71  00E3               	movwf	setRFSW_Control@sw
  7467                           
  7468                           ;RF_Control_B1.c: 394: RfSWPointSelect(sw);
  7469  0F72  0863               	movf	setRFSW_Control@sw,w
  7470  0F73  319D  25FE  318F   	fcall	_RfSWPointSelect
  7471                           
  7472                           ;RF_Control_B1.c: 395: if (RFSW->Status == 0) {
  7473  0F76  0021               	movlb	1	; select bank1
  7474  0F77  0856               	movf	_RFSW^(0+128),w
  7475  0F78  0086               	movwf	6
  7476  0F79  0187               	clrf	7
  7477  0F7A  1801               	btfsc	1,0
  7478  0F7B  2FB2               	goto	l8146
  7479                           
  7480                           ;RF_Control_B1.c: 396: if (RF_Data[16] == 0x80) {
  7481  0F7C  0022               	movlb	2	; select bank2
  7482  0F7D  0830               	movf	(_RF_Data^(0+256)+16),w
  7483  0F7E  3A80               	xorlw	128
  7484  0F7F  1D03               	skipz
  7485  0F80  2F8E               	goto	l8136
  7486                           
  7487                           ;RF_Control_B1.c: 397: setDelayOff_GO(sw, 1, RF_Data[17]);
  7488  0F81  0020               	movlb	0	; select bank0
  7489  0F82  01AA               	clrf	setDelayOff_GO@command
  7490  0F83  0AAA               	incf	setDelayOff_GO@command,f
  7491  0F84  0022               	movlb	2	; select bank2
  7492  0F85  0831               	movf	(_RF_Data^(0+256)+17),w
  7493  0F86  0020               	movlb	0	; select bank0
  7494  0F87  00E2               	movwf	??_setRFSW_Control
  7495  0F88  0862               	movf	??_setRFSW_Control,w
  7496  0F89  00AB               	movwf	setDelayOff_GO@value
  7497  0F8A  0863               	movf	setRFSW_Control@sw,w
  7498  0F8B  3189  21BD  318F   	fcall	_setDelayOff_GO
  7499  0F8E                     l8136:	
  7500                           
  7501                           ;RF_Control_B1.c: 398: }
  7502                           ;RF_Control_B1.c: 399: RFSW->Status = 1;
  7503  0F8E  0021               	movlb	1	; select bank1
  7504  0F8F  0856               	movf	_RFSW^(0+128),w
  7505  0F90  0086               	movwf	6
  7506  0F91  0187               	clrf	7
  7507  0F92  1401               	bsf	1,0
  7508                           
  7509                           ;RF_Control_B1.c: 400: setSw_Status(sw, 1);
  7510  0F93  0020               	movlb	0	; select bank0
  7511  0F94  01A2               	clrf	setSw_Status@command
  7512  0F95  0AA2               	incf	setSw_Status@command,f
  7513  0F96  0863               	movf	setRFSW_Control@sw,w
  7514  0F97  319E  2673  318F   	fcall	_setSw_Status
  7515                           
  7516                           ;RF_Control_B1.c: 402: setDimmerLights_Trigger(sw, 1);
  7517  0F9A  0020               	movlb	0	; select bank0
  7518  0F9B  01A2               	clrf	setDimmerLights_Trigger@command
  7519  0F9C  0AA2               	incf	setDimmerLights_Trigger@command,f
  7520  0F9D  0863               	movf	setRFSW_Control@sw,w
  7521  0F9E  319E  26BF  318F   	fcall	_setDimmerLights_Trigger
  7522                           
  7523                           ;RF_Control_B1.c: 403: setDimmerLights_Switch(sw, 1);
  7524  0FA1  0020               	movlb	0	; select bank0
  7525  0FA2  01A2               	clrf	setDimmerLights_Switch@command
  7526  0FA3  0AA2               	incf	setDimmerLights_Switch@command,f
  7527  0FA4  0863               	movf	setRFSW_Control@sw,w
  7528  0FA5  319E  26AF  318F   	fcall	_setDimmerLights_Switch
  7529                           
  7530                           ;RF_Control_B1.c: 405: setRF_DimmerLights(sw, RFSW->Status);
  7531  0FA8  0021               	movlb	1	; select bank1
  7532  0FA9  0856               	movf	_RFSW^(0+128),w
  7533  0FAA  0086               	movwf	6
  7534  0FAB  0187               	clrf	7
  7535  0FAC  3000               	movlw	0
  7536  0FAD  1801               	btfsc	1,0
  7537  0FAE  3001               	movlw	1
  7538  0FAF  0020               	movlb	0	; select bank0
  7539  0FB0  00DD               	movwf	setRF_DimmerLights@on
  7540  0FB1  2FF0               	goto	L1
  7541  0FB2                     l8146:	
  7542                           ;RF_Control_B1.c: 406: } else {
  7543                           
  7544                           
  7545                           ;RF_Control_B1.c: 407: if (RF_Data[16] == 0x80) {
  7546  0FB2  0022               	movlb	2	; select bank2
  7547  0FB3  0830               	movf	(_RF_Data^(0+256)+16),w
  7548  0FB4  3A80               	xorlw	128
  7549  0FB5  1D03               	skipz
  7550  0FB6  2FC8               	goto	l8150
  7551                           
  7552                           ;RF_Control_B1.c: 408: setDelayOff_GO(sw, 1, RF_Data[17]);
  7553  0FB7  0020               	movlb	0	; select bank0
  7554  0FB8  01AA               	clrf	setDelayOff_GO@command
  7555  0FB9  0AAA               	incf	setDelayOff_GO@command,f
  7556  0FBA  0022               	movlb	2	; select bank2
  7557  0FBB  0831               	movf	(_RF_Data^(0+256)+17),w
  7558  0FBC  0020               	movlb	0	; select bank0
  7559  0FBD  00E2               	movwf	??_setRFSW_Control
  7560  0FBE  0862               	movf	??_setRFSW_Control,w
  7561  0FBF  00AB               	movwf	setDelayOff_GO@value
  7562  0FC0  0863               	movf	setRFSW_Control@sw,w
  7563  0FC1  3189  21BD  318F   	fcall	_setDelayOff_GO
  7564                           
  7565                           ;RF_Control_B1.c: 409: setRF_DimmerLights(sw, 1);
  7566  0FC4  0020               	movlb	0	; select bank0
  7567  0FC5  01DD               	clrf	setRF_DimmerLights@on
  7568  0FC6  0ADD               	incf	setRF_DimmerLights@on,f
  7569  0FC7  2FF0               	goto	L1
  7570  0FC8                     l8150:	
  7571                           ;RF_Control_B1.c: 410: } else {
  7572                           
  7573                           
  7574                           ;RF_Control_B1.c: 411: RFSW->Status = 0;
  7575  0FC8  0021               	movlb	1	; select bank1
  7576  0FC9  0856               	movf	_RFSW^(0+128),w
  7577  0FCA  0086               	movwf	6
  7578  0FCB  0187               	clrf	7
  7579  0FCC  1001               	bcf	1,0
  7580                           
  7581                           ;RF_Control_B1.c: 412: setSw_Status(sw, 0);
  7582  0FCD  0020               	movlb	0	; select bank0
  7583  0FCE  01A2               	clrf	setSw_Status@command
  7584  0FCF  0863               	movf	setRFSW_Control@sw,w
  7585  0FD0  319E  2673  318F   	fcall	_setSw_Status
  7586                           
  7587                           ;RF_Control_B1.c: 414: setDimmerLights_Trigger(sw, 1);
  7588  0FD3  0020               	movlb	0	; select bank0
  7589  0FD4  01A2               	clrf	setDimmerLights_Trigger@command
  7590  0FD5  0AA2               	incf	setDimmerLights_Trigger@command,f
  7591  0FD6  0863               	movf	setRFSW_Control@sw,w
  7592  0FD7  319E  26BF  318F   	fcall	_setDimmerLights_Trigger
  7593                           
  7594                           ;RF_Control_B1.c: 415: setDimmerLights_Switch(sw, RFSW->Status);
  7595  0FDA  0021               	movlb	1	; select bank1
  7596  0FDB  0856               	movf	_RFSW^(0+128),w
  7597  0FDC  0086               	movwf	6
  7598  0FDD  0187               	clrf	7
  7599  0FDE  3000               	movlw	0
  7600  0FDF  1801               	btfsc	1,0
  7601  0FE0  3001               	movlw	1
  7602  0FE1  0020               	movlb	0	; select bank0
  7603  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7604  0FE3  0863               	movf	setRFSW_Control@sw,w
  7605  0FE4  319E  26AF  318F   	fcall	_setDimmerLights_Switch
  7606                           
  7607                           ;RF_Control_B1.c: 417: setDelayOff_GO(sw, 0, 0);
  7608  0FE7  0020               	movlb	0	; select bank0
  7609  0FE8  01AA               	clrf	setDelayOff_GO@command
  7610  0FE9  01AB               	clrf	setDelayOff_GO@value
  7611  0FEA  0863               	movf	setRFSW_Control@sw,w
  7612  0FEB  3189  21BD  318F   	fcall	_setDelayOff_GO
  7613                           
  7614                           ;RF_Control_B1.c: 418: setRF_DimmerLights(sw, 0);
  7615  0FEE  0020               	movlb	0	; select bank0
  7616  0FEF  01DD               	clrf	setRF_DimmerLights@on
  7617  0FF0                     L1:	
  7618  0FF0  0863               	movf	setRFSW_Control@sw,w
  7619  0FF1  318C  241C  318F   	fcall	_setRF_DimmerLights
  7620                           
  7621                           ;RF_Control_B1.c: 419: }
  7622                           ;RF_Control_B1.c: 420: }
  7623                           ;RF_Control_B1.c: 421: setBuz(1, 100);
  7624  0FF4  3064               	movlw	100
  7625  0FF5  0020               	movlb	0	; select bank0
  7626  0FF6  00A9               	movwf	setBuz@time
  7627  0FF7  3000               	movlw	0
  7628  0FF8  00AA               	movwf	setBuz@time+1
  7629  0FF9  3001               	movlw	1
  7630  0FFA  3188  2050  318F   	fcall	_setBuz
  7631                           
  7632                           ;RF_Control_B1.c: 422: setTxData();
  7633  0FFD  3185  25D8         	fcall	_setTxData
  7634  0FFF  0008               	return
  7635  1000                     __end_of_setRFSW_Control:	
  7636                           
  7637                           	psect	text32
  7638  09BD                     __ptext32:	
  7639 ;; *************** function _setDelayOff_GO *****************
  7640 ;; Defined at:
  7641 ;;		line 86 in file "../src/DelayOff_B1.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  sw              1    wreg     unsigned char 
  7644 ;;  command         1   10[BANK0 ] unsigned char 
  7645 ;;  value           1   11[BANK0 ] unsigned char 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  sw              1   14[BANK0 ] unsigned char 
  7648 ;; Return value:  Size  Location     Type
  7649 ;;		None               void
  7650 ;; Registers used:
  7651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7657 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;Total ram usage:        5 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    7
  7664 ;; This function calls:
  7665 ;;		_DelayOffPointSelect
  7666 ;;		_DelayTimejudge
  7667 ;; This function is called by:
  7668 ;;		_setRFSW_Control
  7669 ;;		_Sw_DimmerOffFunc
  7670 ;; This function uses a non-reentrant model
  7671 ;;
  7672                           
  7673                           
  7674                           ;psect for function _setDelayOff_GO
  7675  09BD                     _setDelayOff_GO:	
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7679                           ;setDelayOff_GO@sw stored from wreg
  7680  09BD  0020               	movlb	0	; select bank0
  7681  09BE  00AE               	movwf	setDelayOff_GO@sw
  7682                           
  7683                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7684  09BF  082E               	movf	setDelayOff_GO@sw,w
  7685  09C0  319D  25C6  3189   	fcall	_DelayOffPointSelect
  7686                           
  7687                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7688  09C3  0876               	movf	_DelayOff,w
  7689  09C4  0086               	movwf	6
  7690  09C5  0187               	clrf	7
  7691  09C6  1C01               	btfss	1,0
  7692  09C7  0008               	return
  7693                           
  7694                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7695  09C8  0020               	movlb	0	; select bank0
  7696  09C9  082A               	movf	setDelayOff_GO@command,w
  7697  09CA  3A01               	xorlw	1
  7698  09CB  3000               	movlw	0
  7699  09CC  1903               	skipnz
  7700  09CD  3001               	movlw	1
  7701  09CE  00AC               	movwf	??_setDelayOff_GO
  7702  09CF  0876               	movf	_DelayOff,w
  7703  09D0  0086               	movwf	6
  7704  09D1  0187               	clrf	7
  7705  09D2  0DAC               	rlf	??_setDelayOff_GO,f
  7706  09D3  0801               	movf	1,w
  7707  09D4  062C               	xorwf	??_setDelayOff_GO,w
  7708  09D5  39FD               	andlw	-3
  7709  09D6  062C               	xorwf	??_setDelayOff_GO,w
  7710  09D7  0081               	movwf	1
  7711                           
  7712                           ;DelayOff_B1.c: 90: if (command == 1) {
  7713  09D8  082A               	movf	setDelayOff_GO@command,w
  7714  09D9  3A01               	xorlw	1
  7715  09DA  1D03               	skipz
  7716  09DB  2A05               	goto	l7950
  7717                           
  7718                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7719  09DC  082B               	movf	setDelayOff_GO@value,w
  7720  09DD  3192  2277  3189   	fcall	_DelayTimejudge
  7721  09E0  0020               	movlb	0	; select bank0
  7722  09E1  00AC               	movwf	??_setDelayOff_GO
  7723  09E2  0876               	movf	_DelayOff,w
  7724  09E3  0086               	movwf	6
  7725  09E4  0187               	clrf	7
  7726  09E5  082C               	movf	??_setDelayOff_GO,w
  7727  09E6  0081               	movwf	1
  7728                           
  7729                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7730  09E7  300F               	movlw	15
  7731  09E8  052B               	andwf	setDelayOff_GO@value,w
  7732  09E9  00AC               	movwf	??_setDelayOff_GO
  7733  09EA  082C               	movf	??_setDelayOff_GO,w
  7734  09EB  3A05               	xorlw	5
  7735  09EC  1903               	skipnz
  7736  09ED  29F2               	goto	l7944
  7737  09EE  082B               	movf	setDelayOff_GO@value,w
  7738  09EF  390F               	andlw	15
  7739  09F0  1D03               	btfss	3,2
  7740  09F1  29F8               	goto	l7948
  7741  09F2                     l7944:	
  7742  09F2  3026               	movlw	38
  7743  09F3  022B               	subwf	setDelayOff_GO@value,w
  7744  09F4  1803               	skipnc
  7745  09F5  29F8               	goto	l7948
  7746                           
  7747                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7748  09F6  082B               	movf	setDelayOff_GO@value,w
  7749  09F7  29F9               	goto	L2
  7750  09F8                     l7948:	
  7751                           ;DelayOff_B1.c: 94: } else {
  7752                           
  7753                           
  7754                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7755  09F8  3005               	movlw	5
  7756  09F9                     L2:	
  7757  09F9  00AC               	movwf	??_setDelayOff_GO
  7758  09FA  082E               	movf	setDelayOff_GO@sw,w
  7759  09FB  3E1A               	addlw	26
  7760  09FC  076C               	addwf	_product,w
  7761  09FD  00AD               	movwf	??_setDelayOff_GO+1
  7762  09FE  082D               	movf	??_setDelayOff_GO+1,w
  7763  09FF  0086               	movwf	6
  7764  0A00  3001               	movlw	1	; select bank2/3
  7765  0A01  0087               	movwf	7
  7766  0A02  082C               	movf	??_setDelayOff_GO,w
  7767  0A03  0081               	movwf	1
  7768                           
  7769                           ;DelayOff_B1.c: 96: }
  7770                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7771  0A04  2A11               	goto	l7954
  7772  0A05                     l7950:	
  7773  0A05  08AA               	movf	setDelayOff_GO@command,f
  7774  0A06  1D03               	skipz
  7775  0A07  2A11               	goto	l7954
  7776                           
  7777                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7778  0A08  082E               	movf	setDelayOff_GO@sw,w
  7779  0A09  3E1A               	addlw	26
  7780  0A0A  076C               	addwf	_product,w
  7781  0A0B  00AC               	movwf	??_setDelayOff_GO
  7782  0A0C  082C               	movf	??_setDelayOff_GO,w
  7783  0A0D  0086               	movwf	6
  7784  0A0E  3001               	movlw	1	; select bank2/3
  7785  0A0F  0087               	movwf	7
  7786  0A10  0181               	clrf	1
  7787  0A11                     l7954:	
  7788                           
  7789                           ;DelayOff_B1.c: 99: }
  7790                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7791  0A11  0876               	movf	_DelayOff,w
  7792  0A12  0086               	movwf	6
  7793  0A13  0187               	clrf	7
  7794  0A14  3000               	movlw	0
  7795  0A15  3FC0               	movwi [0]fsr1
  7796  0A16  3FC1               	movwi [1]fsr1
  7797                           
  7798                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7799  0A17  0876               	movf	_DelayOff,w
  7800  0A18  0086               	movwf	6
  7801  0A19  0187               	clrf	7
  7802  0A1A  0181               	clrf	1
  7803  0A1B  0008               	return
  7804  0A1C                     __end_of_setDelayOff_GO:	
  7805                           
  7806                           	psect	text33
  7807  1277                     __ptext33:	
  7808 ;; *************** function _DelayTimejudge *****************
  7809 ;; Defined at:
  7810 ;;		line 106 in file "../src/DelayOff_B1.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;  value           1    wreg     unsigned char 
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;  value           1    9[BANK0 ] unsigned char 
  7815 ;;  k               1    8[BANK0 ] unsigned char 
  7816 ;;  j               1    7[BANK0 ] unsigned char 
  7817 ;;  i               1    6[BANK0 ] unsigned char 
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      unsigned char 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2, status,0, pclath, cstack
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7828 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7829 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7830 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;Total ram usage:        6 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    6
  7834 ;; This function calls:
  7835 ;;		___bmul
  7836 ;; This function is called by:
  7837 ;;		_setDelayOff_GO
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           
  7842                           ;psect for function _DelayTimejudge
  7843  1277                     _DelayTimejudge:	
  7844                           
  7845                           ;incstack = 0
  7846                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7847                           ;DelayTimejudge@value stored from wreg
  7848  1277  0020               	movlb	0	; select bank0
  7849  1278  00A9               	movwf	DelayTimejudge@value
  7850                           
  7851                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7852  1279  3005               	movlw	5
  7853  127A  00A4               	movwf	??_DelayTimejudge
  7854  127B  0824               	movf	??_DelayTimejudge,w
  7855  127C  00A6               	movwf	DelayTimejudge@i
  7856  127D  01A7               	clrf	DelayTimejudge@j
  7857  127E  01A8               	clrf	DelayTimejudge@k
  7858                           
  7859                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7860  127F  3031               	movlw	49
  7861  1280  0229               	subwf	DelayTimejudge@value,w
  7862  1281  1803               	skipnc
  7863  1282  2A9F               	goto	l7742
  7864                           
  7865                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7866  1283  0829               	movf	DelayTimejudge@value,w
  7867  1284  390F               	andlw	15
  7868  1285  00A4               	movwf	??_DelayTimejudge
  7869  1286  0824               	movf	??_DelayTimejudge,w
  7870  1287  00A7               	movwf	DelayTimejudge@j
  7871                           
  7872                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7873  1288  0829               	movf	DelayTimejudge@value,w
  7874  1289  00A4               	movwf	??_DelayTimejudge
  7875  128A  3004               	movlw	4
  7876  128B                     u7435:	
  7877  128B  36A4               	lsrf	??_DelayTimejudge,f
  7878  128C  0B89               	decfsz	9,f
  7879  128D  2A8B               	goto	u7435
  7880  128E  0824               	movf	??_DelayTimejudge,w
  7881  128F  390F               	andlw	15
  7882  1290  00A5               	movwf	??_DelayTimejudge+1
  7883  1291  0825               	movf	??_DelayTimejudge+1,w
  7884  1292  00A8               	movwf	DelayTimejudge@k
  7885                           
  7886                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7887  1293  300A               	movlw	10
  7888  1294  00A4               	movwf	??_DelayTimejudge
  7889  1295  0824               	movf	??_DelayTimejudge,w
  7890  1296  00A0               	movwf	___bmul@multiplicand
  7891  1297  0828               	movf	DelayTimejudge@k,w
  7892  1298  319F  2733         	fcall	___bmul
  7893  129A  0020               	movlb	0	; select bank0
  7894  129B  0727               	addwf	DelayTimejudge@j,w
  7895  129C  00A5               	movwf	??_DelayTimejudge+1
  7896  129D  0825               	movf	??_DelayTimejudge+1,w
  7897  129E  00A6               	movwf	DelayTimejudge@i
  7898  129F                     l7742:	
  7899                           
  7900                           ;DelayOff_B1.c: 112: }
  7901                           ;DelayOff_B1.c: 133: return i;
  7902  129F  0826               	movf	DelayTimejudge@i,w
  7903  12A0  0008               	return
  7904  12A1                     __end_of_DelayTimejudge:	
  7905                           
  7906                           	psect	text34
  7907  1F33                     __ptext34:	
  7908 ;; *************** function ___bmul *****************
  7909 ;; Defined at:
  7910 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  multiplier      1    wreg     unsigned char 
  7913 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7916 ;;  product         1    2[BANK0 ] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      unsigned char 
  7919 ;; Registers used:
  7920 ;;		wreg, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        4 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    5
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_DelayTimejudge
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function ___bmul
  7942  1F33                     ___bmul:	
  7943                           
  7944                           ;incstack = 0
  7945                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7946                           ;___bmul@multiplier stored from wreg
  7947  1F33  0020               	movlb	0	; select bank0
  7948  1F34  00A3               	movwf	___bmul@multiplier
  7949  1F35  01A2               	clrf	___bmul@product
  7950  1F36                     l7712:	
  7951  1F36  1C23               	btfss	___bmul@multiplier,0
  7952  1F37  2F3C               	goto	l7716
  7953  1F38  0820               	movf	___bmul@multiplicand,w
  7954  1F39  00A1               	movwf	??___bmul
  7955  1F3A  0821               	movf	??___bmul,w
  7956  1F3B  07A2               	addwf	___bmul@product,f
  7957  1F3C                     l7716:	
  7958  1F3C  1003               	clrc
  7959  1F3D  0DA0               	rlf	___bmul@multiplicand,f
  7960  1F3E  1003               	clrc
  7961  1F3F  0CA3               	rrf	___bmul@multiplier,f
  7962  1F40  08A3               	movf	___bmul@multiplier,f
  7963  1F41  1D03               	skipz
  7964  1F42  2F36               	goto	l7712
  7965  1F43  0822               	movf	___bmul@product,w
  7966  1F44  0008               	return
  7967  1F45                     __end_of___bmul:	
  7968                           
  7969                           	psect	text35
  7970  145F                     __ptext35:	
  7971 ;; *************** function _setRFSW_AdjControl *****************
  7972 ;; Defined at:
  7973 ;;		line 426 in file "../src/RF_Control_B1.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  sw              1    wreg     unsigned char 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  sw              1   70[BANK0 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;		None               void
  7980 ;; Registers used:
  7981 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 0/0
  7984 ;;		On exit  : 0/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;Total ram usage:        3 bytes
  7992 ;; Hardware stack levels used:    1
  7993 ;; Hardware stack levels required when called:   10
  7994 ;; This function calls:
  7995 ;;		_RfSWPointSelect
  7996 ;;		_setRF_DimmerValue
  7997 ;;		_setTxData
  7998 ;; This function is called by:
  7999 ;;		_setControl_Lights_Table
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _setRFSW_AdjControl
  8005  145F                     _setRFSW_AdjControl:	
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8009                           ;setRFSW_AdjControl@sw stored from wreg
  8010  145F  0020               	movlb	0	; select bank0
  8011  1460  00E6               	movwf	setRFSW_AdjControl@sw
  8012                           
  8013                           ;RF_Control_B1.c: 427: RfSWPointSelect(sw);
  8014  1461  0866               	movf	setRFSW_AdjControl@sw,w
  8015  1462  319D  25FE  3194   	fcall	_RfSWPointSelect
  8016                           
  8017                           ;RF_Control_B1.c: 428: if (RFSW->Status == 1) {
  8018  1465  0021               	movlb	1	; select bank1
  8019  1466  0856               	movf	_RFSW^(0+128),w
  8020  1467  0086               	movwf	6
  8021  1468  0187               	clrf	7
  8022  1469  1C01               	btfss	1,0
  8023  146A  2C73               	goto	l8174
  8024                           
  8025                           ;RF_Control_B1.c: 429: Memory.Modify=1;
  8026  146B  0023               	movlb	3	; select bank3
  8027  146C  1444               	bsf	(_Memory^(0+384)+36),0
  8028                           
  8029                           ;RF_Control_B1.c: 430: setRF_DimmerValue(sw);
  8030  146D  0020               	movlb	0	; select bank0
  8031  146E  0866               	movf	setRFSW_AdjControl@sw,w
  8032  146F  3193  23BB  3194   	fcall	_setRF_DimmerValue
  8033                           
  8034                           ;RF_Control_B1.c: 431: } else {
  8035  1472  2C85               	goto	l1994
  8036  1473                     l8174:	
  8037                           
  8038                           ;RF_Control_B1.c: 432: product->Data[9]=product->Data[20 + sw];
  8039  1473  0020               	movlb	0	; select bank0
  8040  1474  0866               	movf	setRFSW_AdjControl@sw,w
  8041  1475  3E14               	addlw	20
  8042  1476  076C               	addwf	_product,w
  8043  1477  00E4               	movwf	??_setRFSW_AdjControl
  8044  1478  0864               	movf	??_setRFSW_AdjControl,w
  8045  1479  0086               	movwf	6
  8046  147A  3001               	movlw	1	; select bank2/3
  8047  147B  0087               	movwf	7
  8048  147C  0801               	movf	1,w
  8049  147D  00E5               	movwf	??_setRFSW_AdjControl+1
  8050  147E  086C               	movf	_product,w
  8051  147F  3E09               	addlw	9
  8052  1480  0086               	movwf	6
  8053  1481  3001               	movlw	1	; select bank2/3
  8054  1482  0087               	movwf	7
  8055  1483  0865               	movf	??_setRFSW_AdjControl+1,w
  8056  1484  0081               	movwf	1
  8057  1485                     l1994:	
  8058                           
  8059                           ;RF_Control_B1.c: 433: }
  8060                           ;RF_Control_B1.c: 434: product->Data[17]=product->Data[26 + sw];
  8061  1485  0020               	movlb	0	; select bank0
  8062  1486  0866               	movf	setRFSW_AdjControl@sw,w
  8063  1487  3E1A               	addlw	26
  8064  1488  076C               	addwf	_product,w
  8065  1489  00E4               	movwf	??_setRFSW_AdjControl
  8066  148A  0864               	movf	??_setRFSW_AdjControl,w
  8067  148B  0086               	movwf	6
  8068  148C  3001               	movlw	1	; select bank2/3
  8069  148D  0087               	movwf	7
  8070  148E  0801               	movf	1,w
  8071  148F  00E5               	movwf	??_setRFSW_AdjControl+1
  8072  1490  086C               	movf	_product,w
  8073  1491  3E11               	addlw	17
  8074  1492  0086               	movwf	6
  8075  1493  3001               	movlw	1	; select bank2/3
  8076  1494  0087               	movwf	7
  8077  1495  0865               	movf	??_setRFSW_AdjControl+1,w
  8078  1496  0081               	movwf	1
  8079                           
  8080                           ;RF_Control_B1.c: 435: setTxData();
  8081  1497  3185  25D8         	fcall	_setTxData
  8082  1499  0008               	return
  8083  149A                     __end_of_setRFSW_AdjControl:	
  8084                           
  8085                           	psect	text36
  8086  13BB                     __ptext36:	
  8087 ;; *************** function _setRF_DimmerValue *****************
  8088 ;; Defined at:
  8089 ;;		line 446 in file "../src/RF_Control_B1.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  lights          1    wreg     unsigned char 
  8092 ;; Auto vars:     Size  Location     Type
  8093 ;;  lights          1   67[BANK0 ] unsigned char 
  8094 ;; Return value:  Size  Location     Type
  8095 ;;		None               void
  8096 ;; Registers used:
  8097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8098 ;; Tracked objects:
  8099 ;;		On entry : 0/0
  8100 ;;		On exit  : 0/0
  8101 ;;		Unchanged: 0/0
  8102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;Total ram usage:        3 bytes
  8108 ;; Hardware stack levels used:    1
  8109 ;; Hardware stack levels required when called:    9
  8110 ;; This function calls:
  8111 ;;		_setDimmerLights_AdjRF
  8112 ;; This function is called by:
  8113 ;;		_setRFSW_AdjControl
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           
  8118                           ;psect for function _setRF_DimmerValue
  8119  13BB                     _setRF_DimmerValue:	
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8123                           ;setRF_DimmerValue@lights stored from wreg
  8124  13BB  0020               	movlb	0	; select bank0
  8125  13BC  00E3               	movwf	setRF_DimmerValue@lights
  8126                           
  8127                           ;RF_Control_B1.c: 447: if (RF_Data[9] > 0x64) {
  8128  13BD  3065               	movlw	101
  8129  13BE  0022               	movlb	2	; select bank2
  8130  13BF  0229               	subwf	(_RF_Data^(0+256)+9),w
  8131  13C0  1C03               	skipc
  8132  13C1  2BC8               	goto	l8018
  8133                           
  8134                           ;RF_Control_B1.c: 448: RF_Data[9] = 0x64;
  8135  13C2  3064               	movlw	100
  8136  13C3  0020               	movlb	0	; select bank0
  8137  13C4  00E1               	movwf	??_setRF_DimmerValue
  8138  13C5  0861               	movf	??_setRF_DimmerValue,w
  8139  13C6  0022               	movlb	2	; select bank2
  8140  13C7  00A9               	movwf	(_RF_Data^(0+256)+9)
  8141  13C8                     l8018:	
  8142                           
  8143                           ;RF_Control_B1.c: 449: }
  8144                           ;RF_Control_B1.c: 450: product->Data[9]=RF_Data[9];
  8145  13C8  0829               	movf	(_RF_Data^(0+256)+9),w
  8146  13C9  0020               	movlb	0	; select bank0
  8147  13CA  00E1               	movwf	??_setRF_DimmerValue
  8148  13CB  086C               	movf	_product,w
  8149  13CC  3E09               	addlw	9
  8150  13CD  0086               	movwf	6
  8151  13CE  3001               	movlw	1	; select bank2/3
  8152  13CF  0087               	movwf	7
  8153  13D0  0861               	movf	??_setRF_DimmerValue,w
  8154  13D1  0081               	movwf	1
  8155                           
  8156                           ;RF_Control_B1.c: 451: product->Data[11]=lights;
  8157  13D2  0863               	movf	setRF_DimmerValue@lights,w
  8158  13D3  00E1               	movwf	??_setRF_DimmerValue
  8159  13D4  086C               	movf	_product,w
  8160  13D5  3E0B               	addlw	11
  8161  13D6  0086               	movwf	6
  8162  13D7  3001               	movlw	1	; select bank2/3
  8163  13D8  0087               	movwf	7
  8164  13D9  0861               	movf	??_setRF_DimmerValue,w
  8165  13DA  0081               	movwf	1
  8166                           
  8167                           ;RF_Control_B1.c: 452: product->Data[(20 + lights)]=product->Data[9];
  8168  13DB  086C               	movf	_product,w
  8169  13DC  3E09               	addlw	9
  8170  13DD  0086               	movwf	6
  8171  13DE  3001               	movlw	1	; select bank2/3
  8172  13DF  0087               	movwf	7
  8173  13E0  0801               	movf	1,w
  8174  13E1  00E1               	movwf	??_setRF_DimmerValue
  8175  13E2  0863               	movf	setRF_DimmerValue@lights,w
  8176  13E3  3E14               	addlw	20
  8177  13E4  076C               	addwf	_product,w
  8178  13E5  00E2               	movwf	??_setRF_DimmerValue+1
  8179  13E6  0862               	movf	??_setRF_DimmerValue+1,w
  8180  13E7  0086               	movwf	6
  8181  13E8  3001               	movlw	1	; select bank2/3
  8182  13E9  0087               	movwf	7
  8183  13EA  0861               	movf	??_setRF_DimmerValue,w
  8184  13EB  0081               	movwf	1
  8185                           
  8186                           ;RF_Control_B1.c: 453: setDimmerLights_AdjRF(lights);
  8187  13EC  0863               	movf	setRF_DimmerValue@lights,w
  8188  13ED  3191  21B8         	fcall	_setDimmerLights_AdjRF
  8189  13EF  0008               	return
  8190  13F0                     __end_of_setRF_DimmerValue:	
  8191                           
  8192                           	psect	text37
  8193  11B8                     __ptext37:	
  8194 ;; *************** function _setDimmerLights_AdjRF *****************
  8195 ;; Defined at:
  8196 ;;		line 690 in file "../src/Dimmer_B1.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;  lights          1    wreg     unsigned char 
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  lights          1   64[BANK0 ] unsigned char 
  8201 ;; Return value:  Size  Location     Type
  8202 ;;		None               void
  8203 ;; Registers used:
  8204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8205 ;; Tracked objects:
  8206 ;;		On entry : 0/0
  8207 ;;		On exit  : 0/0
  8208 ;;		Unchanged: 0/0
  8209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8213 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8214 ;;Total ram usage:        2 bytes
  8215 ;; Hardware stack levels used:    1
  8216 ;; Hardware stack levels required when called:    8
  8217 ;; This function calls:
  8218 ;;		_DimmerLightsPointSelect
  8219 ;;		_getPercentValue
  8220 ;; This function is called by:
  8221 ;;		_setRF_DimmerValue
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           
  8226                           ;psect for function _setDimmerLights_AdjRF
  8227  11B8                     _setDimmerLights_AdjRF:	
  8228                           
  8229                           ;incstack = 0
  8230                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8231                           ;setDimmerLights_AdjRF@lights stored from wreg
  8232  11B8  0020               	movlb	0	; select bank0
  8233  11B9  00E0               	movwf	setDimmerLights_AdjRF@lights
  8234                           
  8235                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  8236  11BA  0860               	movf	setDimmerLights_AdjRF@lights,w
  8237  11BB  319D  25D1  3191   	fcall	_DimmerLightsPointSelect
  8238                           
  8239                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  8240  11BE  0020               	movlb	0	; select bank0
  8241  11BF  086D               	movf	_DimmerLights,w
  8242  11C0  0086               	movwf	6
  8243  11C1  3001               	movlw	1	; select bank2/3
  8244  11C2  0087               	movwf	7
  8245  11C3  1501               	bsf	1,2
  8246                           
  8247                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  8248  11C4  086D               	movf	_DimmerLights,w
  8249  11C5  0086               	movwf	6
  8250  11C6  3001               	movlw	1	; select bank2/3
  8251  11C7  0087               	movwf	7
  8252  11C8  1481               	bsf	1,1
  8253                           
  8254                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8255  11C9  086C               	movf	_product,w
  8256  11CA  3E09               	addlw	9
  8257  11CB  0086               	movwf	6
  8258  11CC  3001               	movlw	1	; select bank2/3
  8259  11CD  0087               	movwf	7
  8260  11CE  0801               	movf	1,w
  8261  11CF  3189  2104         	fcall	_getPercentValue
  8262  11D1  0020               	movlb	0	; select bank0
  8263  11D2  00DF               	movwf	??_setDimmerLights_AdjRF
  8264  11D3  086D               	movf	_DimmerLights,w
  8265  11D4  3E05               	addlw	5
  8266  11D5  0086               	movwf	6
  8267  11D6  3001               	movlw	1	; select bank2/3
  8268  11D7  0087               	movwf	7
  8269  11D8  085F               	movf	??_setDimmerLights_AdjRF,w
  8270  11D9  0081               	movwf	1
  8271  11DA  0008               	return
  8272  11DB                     __end_of_setDimmerLights_AdjRF:	
  8273                           
  8274                           	psect	text38
  8275  0904                     __ptext38:	
  8276 ;; *************** function _getPercentValue *****************
  8277 ;; Defined at:
  8278 ;;		line 763 in file "../src/Dimmer_B1.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  value           1    wreg     unsigned char 
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  value           1   59[BANK0 ] unsigned char 
  8283 ;;  i               3   60[BANK0 ] float 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  1    wreg      unsigned char 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0, pclath, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        6 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    7
  8300 ;; This function calls:
  8301 ;;		___awtoft
  8302 ;;		___ftadd
  8303 ;;		___ftdiv
  8304 ;;		___ftmul
  8305 ;;		___fttol
  8306 ;; This function is called by:
  8307 ;;		_setDimmerLights_AdjRF
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           
  8312                           ;psect for function _getPercentValue
  8313  0904                     _getPercentValue:	
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8317                           ;getPercentValue@value stored from wreg
  8318  0904  0020               	movlb	0	; select bank0
  8319  0905  00DB               	movwf	getPercentValue@value
  8320                           
  8321                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8322  0906  3000               	movlw	0
  8323  0907  00DC               	movwf	getPercentValue@i
  8324  0908  30E0               	movlw	224
  8325  0909  00DD               	movwf	getPercentValue@i+1
  8326  090A  3041               	movlw	65
  8327  090B  00DE               	movwf	getPercentValue@i+2
  8328                           
  8329                           ;Dimmer_B1.c: 766: i /= 100;
  8330  090C  3000               	movlw	0
  8331  090D  00AE               	movwf	___ftdiv@f2
  8332  090E  30C8               	movlw	200
  8333  090F  00AF               	movwf	___ftdiv@f2+1
  8334  0910  3042               	movlw	66
  8335  0911  00B0               	movwf	___ftdiv@f2+2
  8336  0912  085C               	movf	getPercentValue@i,w
  8337  0913  00B1               	movwf	___ftdiv@f1
  8338  0914  085D               	movf	getPercentValue@i+1,w
  8339  0915  00B2               	movwf	___ftdiv@f1+1
  8340  0916  085E               	movf	getPercentValue@i+2,w
  8341  0917  00B3               	movwf	___ftdiv@f1+2
  8342  0918  3187  274B  3189   	fcall	___ftdiv
  8343  091B  0020               	movlb	0	; select bank0
  8344  091C  082E               	movf	?___ftdiv,w
  8345  091D  00DC               	movwf	getPercentValue@i
  8346  091E  082F               	movf	?___ftdiv+1,w
  8347  091F  00DD               	movwf	getPercentValue@i+1
  8348  0920  0830               	movf	?___ftdiv+2,w
  8349  0921  00DE               	movwf	getPercentValue@i+2
  8350                           
  8351                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8352  0922  085B               	movf	getPercentValue@value,w
  8353  0923  00D9               	movwf	??_getPercentValue
  8354  0924  01DA               	clrf	??_getPercentValue+1
  8355  0925  09D9               	comf	??_getPercentValue,f
  8356  0926  09DA               	comf	??_getPercentValue+1,f
  8357  0927  0AD9               	incf	??_getPercentValue,f
  8358  0928  1903               	skipnz
  8359  0929  0ADA               	incf	??_getPercentValue+1,f
  8360  092A  0859               	movf	??_getPercentValue,w
  8361  092B  3E64               	addlw	100
  8362  092C  00A8               	movwf	___awtoft@c
  8363  092D  3000               	movlw	0
  8364  092E  3D5A               	addwfc	??_getPercentValue+1,w
  8365  092F  00A9               	movwf	___awtoft@c+1
  8366  0930  3191  2150  3189   	fcall	___awtoft
  8367  0933  0020               	movlb	0	; select bank0
  8368  0934  0828               	movf	?___awtoft,w
  8369  0935  00B1               	movwf	___ftmul@f2
  8370  0936  0829               	movf	?___awtoft+1,w
  8371  0937  00B2               	movwf	___ftmul@f2+1
  8372  0938  082A               	movf	?___awtoft+2,w
  8373  0939  00B3               	movwf	___ftmul@f2+2
  8374  093A  085C               	movf	getPercentValue@i,w
  8375  093B  00AE               	movwf	___ftmul@f1
  8376  093C  085D               	movf	getPercentValue@i+1,w
  8377  093D  00AF               	movwf	___ftmul@f1+1
  8378  093E  085E               	movf	getPercentValue@i+2,w
  8379  093F  00B0               	movwf	___ftmul@f1+2
  8380  0940  3186  2697  3189   	fcall	___ftmul
  8381  0943  0020               	movlb	0	; select bank0
  8382  0944  082E               	movf	?___ftmul,w
  8383  0945  00C1               	movwf	___ftadd@f2
  8384  0946  082F               	movf	?___ftmul+1,w
  8385  0947  00C2               	movwf	___ftadd@f2+1
  8386  0948  0830               	movf	?___ftmul+2,w
  8387  0949  00C3               	movwf	___ftadd@f2+2
  8388  094A  3000               	movlw	0
  8389  094B  00BE               	movwf	___ftadd@f1
  8390  094C  3000               	movlw	0
  8391  094D  00BF               	movwf	___ftadd@f1+1
  8392  094E  3042               	movlw	66
  8393  094F  00C0               	movwf	___ftadd@f1+2
  8394  0950  3183  232A  3189   	fcall	___ftadd
  8395  0953  0020               	movlb	0	; select bank0
  8396  0954  083E               	movf	?___ftadd,w
  8397  0955  00CB               	movwf	___fttol@f1
  8398  0956  083F               	movf	?___ftadd+1,w
  8399  0957  00CC               	movwf	___fttol@f1+1
  8400  0958  0840               	movf	?___ftadd+2,w
  8401  0959  00CD               	movwf	___fttol@f1+2
  8402  095A  318E  26E9         	fcall	___fttol
  8403  095C  0020               	movlb	0	; select bank0
  8404  095D  084B               	movf	?___fttol,w
  8405  095E  0008               	return
  8406  095F                     __end_of_getPercentValue:	
  8407                           
  8408                           	psect	text39
  8409  0697                     __ptext39:	
  8410 ;; *************** function ___ftmul *****************
  8411 ;; Defined at:
  8412 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  f1              3   14[BANK0 ] float 
  8415 ;;  f2              3   17[BANK0 ] float 
  8416 ;; Auto vars:     Size  Location     Type
  8417 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8418 ;;  sign            1   29[BANK0 ] unsigned char 
  8419 ;;  cntr            1   28[BANK0 ] unsigned char 
  8420 ;;  exp             1   24[BANK0 ] unsigned char 
  8421 ;; Return value:  Size  Location     Type
  8422 ;;                  3   14[BANK0 ] float 
  8423 ;; Registers used:
  8424 ;;		wreg, status,2, status,0, pclath, cstack
  8425 ;; Tracked objects:
  8426 ;;		On entry : 0/0
  8427 ;;		On exit  : 0/0
  8428 ;;		Unchanged: 0/0
  8429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8430 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8431 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;Total ram usage:       16 bytes
  8435 ;; Hardware stack levels used:    1
  8436 ;; Hardware stack levels required when called:    6
  8437 ;; This function calls:
  8438 ;;		___ftpack
  8439 ;; This function is called by:
  8440 ;;		_getPercentValue
  8441 ;; This function uses a non-reentrant model
  8442 ;;
  8443                           
  8444                           
  8445                           ;psect for function ___ftmul
  8446  0697                     ___ftmul:	
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8450  0697  0020               	movlb	0	; select bank0
  8451  0698  082E               	movf	___ftmul@f1,w
  8452  0699  00B4               	movwf	??___ftmul
  8453  069A  082F               	movf	___ftmul@f1+1,w
  8454  069B  00B5               	movwf	??___ftmul+1
  8455  069C  0830               	movf	___ftmul@f1+2,w
  8456  069D  00B6               	movwf	??___ftmul+2
  8457  069E  1003               	clrc
  8458  069F  0D35               	rlf	??___ftmul+1,w
  8459  06A0  0D36               	rlf	??___ftmul+2,w
  8460  06A1  00B7               	movwf	??___ftmul+3
  8461  06A2  0837               	movf	??___ftmul+3,w
  8462  06A3  00B8               	movwf	___ftmul@exp
  8463  06A4  08B8               	movf	___ftmul@exp,f
  8464  06A5  1D03               	skipz
  8465  06A6  2EAE               	goto	l5508
  8466  06A7  3000               	movlw	0
  8467  06A8  00AE               	movwf	?___ftmul
  8468  06A9  3000               	movlw	0
  8469  06AA  00AF               	movwf	?___ftmul+1
  8470  06AB  3000               	movlw	0
  8471  06AC  00B0               	movwf	?___ftmul+2
  8472  06AD  0008               	return
  8473  06AE                     l5508:	
  8474  06AE  0831               	movf	___ftmul@f2,w
  8475  06AF  00B4               	movwf	??___ftmul
  8476  06B0  0832               	movf	___ftmul@f2+1,w
  8477  06B1  00B5               	movwf	??___ftmul+1
  8478  06B2  0833               	movf	___ftmul@f2+2,w
  8479  06B3  00B6               	movwf	??___ftmul+2
  8480  06B4  1003               	clrc
  8481  06B5  0D35               	rlf	??___ftmul+1,w
  8482  06B6  0D36               	rlf	??___ftmul+2,w
  8483  06B7  00B7               	movwf	??___ftmul+3
  8484  06B8  0837               	movf	??___ftmul+3,w
  8485  06B9  00BD               	movwf	___ftmul@sign
  8486  06BA  08BD               	movf	___ftmul@sign,f
  8487  06BB  1D03               	skipz
  8488  06BC  2EC4               	goto	l5514
  8489  06BD  3000               	movlw	0
  8490  06BE  00AE               	movwf	?___ftmul
  8491  06BF  3000               	movlw	0
  8492  06C0  00AF               	movwf	?___ftmul+1
  8493  06C1  3000               	movlw	0
  8494  06C2  00B0               	movwf	?___ftmul+2
  8495  06C3  0008               	return
  8496  06C4                     l5514:	
  8497  06C4  083D               	movf	___ftmul@sign,w
  8498  06C5  3E7B               	addlw	123
  8499  06C6  00B4               	movwf	??___ftmul
  8500  06C7  0834               	movf	??___ftmul,w
  8501  06C8  07B8               	addwf	___ftmul@exp,f
  8502  06C9  082E               	movf	___ftmul@f1,w
  8503  06CA  00B4               	movwf	??___ftmul
  8504  06CB  082F               	movf	___ftmul@f1+1,w
  8505  06CC  00B5               	movwf	??___ftmul+1
  8506  06CD  0830               	movf	___ftmul@f1+2,w
  8507  06CE  00B6               	movwf	??___ftmul+2
  8508  06CF  3010               	movlw	16
  8509  06D0                     u4145:	
  8510  06D0  36B6               	lsrf	??___ftmul+2,f
  8511  06D1  0CB5               	rrf	??___ftmul+1,f
  8512  06D2  0CB4               	rrf	??___ftmul,f
  8513  06D3  0B89               	decfsz	9,f
  8514  06D4  2ED0               	goto	u4145
  8515  06D5  0834               	movf	??___ftmul,w
  8516  06D6  00B7               	movwf	??___ftmul+3
  8517  06D7  0837               	movf	??___ftmul+3,w
  8518  06D8  00BD               	movwf	___ftmul@sign
  8519  06D9  0831               	movf	___ftmul@f2,w
  8520  06DA  00B4               	movwf	??___ftmul
  8521  06DB  0832               	movf	___ftmul@f2+1,w
  8522  06DC  00B5               	movwf	??___ftmul+1
  8523  06DD  0833               	movf	___ftmul@f2+2,w
  8524  06DE  00B6               	movwf	??___ftmul+2
  8525  06DF  3010               	movlw	16
  8526  06E0                     u4155:	
  8527  06E0  36B6               	lsrf	??___ftmul+2,f
  8528  06E1  0CB5               	rrf	??___ftmul+1,f
  8529  06E2  0CB4               	rrf	??___ftmul,f
  8530  06E3  0B89               	decfsz	9,f
  8531  06E4  2EE0               	goto	u4155
  8532  06E5  0834               	movf	??___ftmul,w
  8533  06E6  00B7               	movwf	??___ftmul+3
  8534  06E7  0837               	movf	??___ftmul+3,w
  8535  06E8  06BD               	xorwf	___ftmul@sign,f
  8536  06E9  3080               	movlw	128
  8537  06EA  00B4               	movwf	??___ftmul
  8538  06EB  0834               	movf	??___ftmul,w
  8539  06EC  05BD               	andwf	___ftmul@sign,f
  8540  06ED  17AF               	bsf	___ftmul@f1+1,7
  8541  06EE  17B2               	bsf	___ftmul@f2+1,7
  8542  06EF  30FF               	movlw	255
  8543  06F0  05B1               	andwf	___ftmul@f2,f
  8544  06F1  30FF               	movlw	255
  8545  06F2  05B2               	andwf	___ftmul@f2+1,f
  8546  06F3  3000               	movlw	0
  8547  06F4  05B3               	andwf	___ftmul@f2+2,f
  8548  06F5  3000               	movlw	0
  8549  06F6  00B9               	movwf	___ftmul@f3_as_product
  8550  06F7  3000               	movlw	0
  8551  06F8  00BA               	movwf	___ftmul@f3_as_product+1
  8552  06F9  3000               	movlw	0
  8553  06FA  00BB               	movwf	___ftmul@f3_as_product+2
  8554  06FB  3007               	movlw	7
  8555  06FC  00B4               	movwf	??___ftmul
  8556  06FD  0834               	movf	??___ftmul,w
  8557  06FE  00BC               	movwf	___ftmul@cntr
  8558  06FF                     l5526:	
  8559  06FF  1C2E               	btfss	___ftmul@f1,0
  8560  0700  2F07               	goto	l5530
  8561  0701  0831               	movf	___ftmul@f2,w
  8562  0702  07B9               	addwf	___ftmul@f3_as_product,f
  8563  0703  0832               	movf	___ftmul@f2+1,w
  8564  0704  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8565  0705  0833               	movf	___ftmul@f2+2,w
  8566  0706  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8567  0707                     l5530:	
  8568  0707  3001               	movlw	1
  8569  0708                     u4175:	
  8570  0708  36B0               	lsrf	___ftmul@f1+2,f
  8571  0709  0CAF               	rrf	___ftmul@f1+1,f
  8572  070A  0CAE               	rrf	___ftmul@f1,f
  8573  070B  0B89               	decfsz	9,f
  8574  070C  2F08               	goto	u4175
  8575  070D  3001               	movlw	1
  8576  070E                     u4185:	
  8577  070E  35B1               	lslf	___ftmul@f2,f
  8578  070F  0DB2               	rlf	___ftmul@f2+1,f
  8579  0710  0DB3               	rlf	___ftmul@f2+2,f
  8580  0711  0B89               	decfsz	9,f
  8581  0712  2F0E               	goto	u4185
  8582  0713  3001               	movlw	1
  8583  0714  02BC               	subwf	___ftmul@cntr,f
  8584  0715  1D03               	btfss	3,2
  8585  0716  2EFF               	goto	l5526
  8586  0717  3009               	movlw	9
  8587  0718  00B4               	movwf	??___ftmul
  8588  0719  0834               	movf	??___ftmul,w
  8589  071A  00BC               	movwf	___ftmul@cntr
  8590  071B                     l5538:	
  8591  071B  1C2E               	btfss	___ftmul@f1,0
  8592  071C  2F23               	goto	l5542
  8593  071D  0831               	movf	___ftmul@f2,w
  8594  071E  07B9               	addwf	___ftmul@f3_as_product,f
  8595  071F  0832               	movf	___ftmul@f2+1,w
  8596  0720  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8597  0721  0833               	movf	___ftmul@f2+2,w
  8598  0722  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8599  0723                     l5542:	
  8600  0723  3001               	movlw	1
  8601  0724                     u4215:	
  8602  0724  36B0               	lsrf	___ftmul@f1+2,f
  8603  0725  0CAF               	rrf	___ftmul@f1+1,f
  8604  0726  0CAE               	rrf	___ftmul@f1,f
  8605  0727  0B89               	decfsz	9,f
  8606  0728  2F24               	goto	u4215
  8607  0729  3001               	movlw	1
  8608  072A                     u4225:	
  8609  072A  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8610  072B  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8611  072C  0CB9               	rrf	___ftmul@f3_as_product,f
  8612  072D  0B89               	decfsz	9,f
  8613  072E  2F2A               	goto	u4225
  8614  072F  3001               	movlw	1
  8615  0730  02BC               	subwf	___ftmul@cntr,f
  8616  0731  1D03               	btfss	3,2
  8617  0732  2F1B               	goto	l5538
  8618  0733  0839               	movf	___ftmul@f3_as_product,w
  8619  0734  00A0               	movwf	___ftpack@arg
  8620  0735  083A               	movf	___ftmul@f3_as_product+1,w
  8621  0736  00A1               	movwf	___ftpack@arg+1
  8622  0737  083B               	movf	___ftmul@f3_as_product+2,w
  8623  0738  00A2               	movwf	___ftpack@arg+2
  8624  0739  0838               	movf	___ftmul@exp,w
  8625  073A  00B4               	movwf	??___ftmul
  8626  073B  0834               	movf	??___ftmul,w
  8627  073C  00A3               	movwf	___ftpack@exp
  8628  073D  083D               	movf	___ftmul@sign,w
  8629  073E  00B5               	movwf	??___ftmul+1
  8630  073F  0835               	movf	??___ftmul+1,w
  8631  0740  00A4               	movwf	___ftpack@sign
  8632  0741  318A  221C         	fcall	___ftpack
  8633  0743  0020               	movlb	0	; select bank0
  8634  0744  0820               	movf	?___ftpack,w
  8635  0745  00AE               	movwf	?___ftmul
  8636  0746  0821               	movf	?___ftpack+1,w
  8637  0747  00AF               	movwf	?___ftmul+1
  8638  0748  0822               	movf	?___ftpack+2,w
  8639  0749  00B0               	movwf	?___ftmul+2
  8640  074A  0008               	return
  8641  074B                     __end_of___ftmul:	
  8642                           
  8643                           	psect	text40
  8644  032A                     __ptext40:	
  8645 ;; *************** function ___ftadd *****************
  8646 ;; Defined at:
  8647 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8648 ;; Parameters:    Size  Location     Type
  8649 ;;  f1              3   30[BANK0 ] float 
  8650 ;;  f2              3   33[BANK0 ] float 
  8651 ;; Auto vars:     Size  Location     Type
  8652 ;;  exp1            1   42[BANK0 ] unsigned char 
  8653 ;;  exp2            1   41[BANK0 ] unsigned char 
  8654 ;;  sign            1   40[BANK0 ] unsigned char 
  8655 ;; Return value:  Size  Location     Type
  8656 ;;                  3   30[BANK0 ] float 
  8657 ;; Registers used:
  8658 ;;		wreg, status,2, status,0, pclath, cstack
  8659 ;; Tracked objects:
  8660 ;;		On entry : 0/0
  8661 ;;		On exit  : 0/0
  8662 ;;		Unchanged: 0/0
  8663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8664 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8668 ;;Total ram usage:       13 bytes
  8669 ;; Hardware stack levels used:    1
  8670 ;; Hardware stack levels required when called:    6
  8671 ;; This function calls:
  8672 ;;		___ftpack
  8673 ;; This function is called by:
  8674 ;;		_getPercentValue
  8675 ;; This function uses a non-reentrant model
  8676 ;;
  8677                           
  8678                           
  8679                           ;psect for function ___ftadd
  8680  032A                     ___ftadd:	
  8681                           
  8682                           ;incstack = 0
  8683                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8684  032A  0020               	movlb	0	; select bank0
  8685  032B  083E               	movf	___ftadd@f1,w
  8686  032C  00C4               	movwf	??___ftadd
  8687  032D  083F               	movf	___ftadd@f1+1,w
  8688  032E  00C5               	movwf	??___ftadd+1
  8689  032F  0840               	movf	___ftadd@f1+2,w
  8690  0330  00C6               	movwf	??___ftadd+2
  8691  0331  1003               	clrc
  8692  0332  0D45               	rlf	??___ftadd+1,w
  8693  0333  0D46               	rlf	??___ftadd+2,w
  8694  0334  00C7               	movwf	??___ftadd+3
  8695  0335  0847               	movf	??___ftadd+3,w
  8696  0336  00CA               	movwf	___ftadd@exp1
  8697  0337  0841               	movf	___ftadd@f2,w
  8698  0338  00C4               	movwf	??___ftadd
  8699  0339  0842               	movf	___ftadd@f2+1,w
  8700  033A  00C5               	movwf	??___ftadd+1
  8701  033B  0843               	movf	___ftadd@f2+2,w
  8702  033C  00C6               	movwf	??___ftadd+2
  8703  033D  1003               	clrc
  8704  033E  0D45               	rlf	??___ftadd+1,w
  8705  033F  0D46               	rlf	??___ftadd+2,w
  8706  0340  00C7               	movwf	??___ftadd+3
  8707  0341  0847               	movf	??___ftadd+3,w
  8708  0342  00C9               	movwf	___ftadd@exp2
  8709  0343  084A               	movf	___ftadd@exp1,w
  8710  0344  1903               	btfsc	3,2
  8711  0345  2B52               	goto	l5396
  8712  0346  0849               	movf	___ftadd@exp2,w
  8713  0347  024A               	subwf	___ftadd@exp1,w
  8714  0348  1803               	skipnc
  8715  0349  2B59               	goto	l5400
  8716  034A  034A               	decf	___ftadd@exp1,w
  8717  034B  3AFF               	xorlw	255
  8718  034C  0749               	addwf	___ftadd@exp2,w
  8719  034D  00C4               	movwf	??___ftadd
  8720  034E  3019               	movlw	25
  8721  034F  0244               	subwf	??___ftadd,w
  8722  0350  1C03               	skipc
  8723  0351  2B59               	goto	l5400
  8724  0352                     l5396:	
  8725  0352  0841               	movf	___ftadd@f2,w
  8726  0353  00BE               	movwf	?___ftadd
  8727  0354  0842               	movf	___ftadd@f2+1,w
  8728  0355  00BF               	movwf	?___ftadd+1
  8729  0356  0843               	movf	___ftadd@f2+2,w
  8730  0357  00C0               	movwf	?___ftadd+2
  8731  0358  0008               	return
  8732  0359                     l5400:	
  8733  0359  0849               	movf	___ftadd@exp2,w
  8734  035A  1903               	btfsc	3,2
  8735  035B  0008               	return
  8736  035C  084A               	movf	___ftadd@exp1,w
  8737  035D  0249               	subwf	___ftadd@exp2,w
  8738  035E  1803               	skipnc
  8739  035F  2B68               	goto	l5406
  8740  0360  0349               	decf	___ftadd@exp2,w
  8741  0361  3AFF               	xorlw	255
  8742  0362  074A               	addwf	___ftadd@exp1,w
  8743  0363  00C4               	movwf	??___ftadd
  8744  0364  3019               	movlw	25
  8745  0365  0244               	subwf	??___ftadd,w
  8746  0366  1803               	btfsc	3,0
  8747  0367  0008               	return
  8748  0368                     l5406:	
  8749  0368  3006               	movlw	6
  8750  0369  00C4               	movwf	??___ftadd
  8751  036A  0844               	movf	??___ftadd,w
  8752  036B  00C8               	movwf	___ftadd@sign
  8753  036C  1BC0               	btfsc	___ftadd@f1+2,7
  8754  036D  17C8               	bsf	___ftadd@sign,7
  8755  036E  1BC3               	btfsc	___ftadd@f2+2,7
  8756  036F  1748               	bsf	___ftadd@sign,6
  8757  0370  17BF               	bsf	___ftadd@f1+1,7
  8758  0371  30FF               	movlw	255
  8759  0372  05BE               	andwf	___ftadd@f1,f
  8760  0373  30FF               	movlw	255
  8761  0374  05BF               	andwf	___ftadd@f1+1,f
  8762  0375  3000               	movlw	0
  8763  0376  05C0               	andwf	___ftadd@f1+2,f
  8764  0377  17C2               	bsf	___ftadd@f2+1,7
  8765  0378  30FF               	movlw	255
  8766  0379  05C1               	andwf	___ftadd@f2,f
  8767  037A  30FF               	movlw	255
  8768  037B  05C2               	andwf	___ftadd@f2+1,f
  8769  037C  3000               	movlw	0
  8770  037D  05C3               	andwf	___ftadd@f2+2,f
  8771  037E  0849               	movf	___ftadd@exp2,w
  8772  037F  024A               	subwf	___ftadd@exp1,w
  8773  0380  1803               	skipnc
  8774  0381  2BA4               	goto	l5428
  8775  0382                     l5418:	
  8776  0382  3001               	movlw	1
  8777  0383                     u3905:	
  8778  0383  35C1               	lslf	___ftadd@f2,f
  8779  0384  0DC2               	rlf	___ftadd@f2+1,f
  8780  0385  0DC3               	rlf	___ftadd@f2+2,f
  8781  0386  0B89               	decfsz	9,f
  8782  0387  2B83               	goto	u3905
  8783  0388  3001               	movlw	1
  8784  0389  02C9               	subwf	___ftadd@exp2,f
  8785  038A  0849               	movf	___ftadd@exp2,w
  8786  038B  064A               	xorwf	___ftadd@exp1,w
  8787  038C  1903               	skipnz
  8788  038D  2B9F               	goto	l5426
  8789  038E  3001               	movlw	1
  8790  038F  02C8               	subwf	___ftadd@sign,f
  8791  0390  0848               	movf	___ftadd@sign,w
  8792  0391  3907               	andlw	7
  8793  0392  1903               	btfsc	3,2
  8794  0393  2B9F               	goto	l5426
  8795  0394  2B82               	goto	l5418
  8796  0395                     l5424:	
  8797  0395  3001               	movlw	1
  8798  0396                     u3935:	
  8799  0396  36C0               	lsrf	___ftadd@f1+2,f
  8800  0397  0CBF               	rrf	___ftadd@f1+1,f
  8801  0398  0CBE               	rrf	___ftadd@f1,f
  8802  0399  0B89               	decfsz	9,f
  8803  039A  2B96               	goto	u3935
  8804  039B  3001               	movlw	1
  8805  039C  00C4               	movwf	??___ftadd
  8806  039D  0844               	movf	??___ftadd,w
  8807  039E  07CA               	addwf	___ftadd@exp1,f
  8808  039F                     l5426:	
  8809  039F  084A               	movf	___ftadd@exp1,w
  8810  03A0  0649               	xorwf	___ftadd@exp2,w
  8811  03A1  1903               	btfsc	3,2
  8812  03A2  2BC9               	goto	l2811
  8813  03A3  2B95               	goto	l5424
  8814  03A4                     l5428:	
  8815  03A4  084A               	movf	___ftadd@exp1,w
  8816  03A5  0249               	subwf	___ftadd@exp2,w
  8817  03A6  1803               	skipnc
  8818  03A7  2BC9               	goto	l2811
  8819  03A8                     l5430:	
  8820  03A8  3001               	movlw	1
  8821  03A9                     u3965:	
  8822  03A9  35BE               	lslf	___ftadd@f1,f
  8823  03AA  0DBF               	rlf	___ftadd@f1+1,f
  8824  03AB  0DC0               	rlf	___ftadd@f1+2,f
  8825  03AC  0B89               	decfsz	9,f
  8826  03AD  2BA9               	goto	u3965
  8827  03AE  3001               	movlw	1
  8828  03AF  02CA               	subwf	___ftadd@exp1,f
  8829  03B0  0849               	movf	___ftadd@exp2,w
  8830  03B1  064A               	xorwf	___ftadd@exp1,w
  8831  03B2  1903               	skipnz
  8832  03B3  2BC5               	goto	l5438
  8833  03B4  3001               	movlw	1
  8834  03B5  02C8               	subwf	___ftadd@sign,f
  8835  03B6  0848               	movf	___ftadd@sign,w
  8836  03B7  3907               	andlw	7
  8837  03B8  1903               	btfsc	3,2
  8838  03B9  2BC5               	goto	l5438
  8839  03BA  2BA8               	goto	l5430
  8840  03BB                     l5436:	
  8841  03BB  3001               	movlw	1
  8842  03BC                     u3995:	
  8843  03BC  36C3               	lsrf	___ftadd@f2+2,f
  8844  03BD  0CC2               	rrf	___ftadd@f2+1,f
  8845  03BE  0CC1               	rrf	___ftadd@f2,f
  8846  03BF  0B89               	decfsz	9,f
  8847  03C0  2BBC               	goto	u3995
  8848  03C1  3001               	movlw	1
  8849  03C2  00C4               	movwf	??___ftadd
  8850  03C3  0844               	movf	??___ftadd,w
  8851  03C4  07C9               	addwf	___ftadd@exp2,f
  8852  03C5                     l5438:	
  8853  03C5  084A               	movf	___ftadd@exp1,w
  8854  03C6  0649               	xorwf	___ftadd@exp2,w
  8855  03C7  1D03               	skipz
  8856  03C8  2BBB               	goto	l5436
  8857  03C9                     l2811:	
  8858  03C9  1FC8               	btfss	___ftadd@sign,7
  8859  03CA  2BDB               	goto	l5442
  8860  03CB  30FF               	movlw	255
  8861  03CC  06BE               	xorwf	___ftadd@f1,f
  8862  03CD  30FF               	movlw	255
  8863  03CE  06BF               	xorwf	___ftadd@f1+1,f
  8864  03CF  30FF               	movlw	255
  8865  03D0  06C0               	xorwf	___ftadd@f1+2,f
  8866  03D1  3001               	movlw	1
  8867  03D2  07BE               	addwf	___ftadd@f1,f
  8868  03D3  3000               	movlw	0
  8869  03D4  1803               	skipnc
  8870  03D5  3001               	movlw	1
  8871  03D6  07BF               	addwf	___ftadd@f1+1,f
  8872  03D7  3000               	movlw	0
  8873  03D8  1803               	skipnc
  8874  03D9  3001               	movlw	1
  8875  03DA  07C0               	addwf	___ftadd@f1+2,f
  8876  03DB                     l5442:	
  8877  03DB  1F48               	btfss	___ftadd@sign,6
  8878  03DC  2BED               	goto	l5446
  8879  03DD  30FF               	movlw	255
  8880  03DE  06C1               	xorwf	___ftadd@f2,f
  8881  03DF  30FF               	movlw	255
  8882  03E0  06C2               	xorwf	___ftadd@f2+1,f
  8883  03E1  30FF               	movlw	255
  8884  03E2  06C3               	xorwf	___ftadd@f2+2,f
  8885  03E3  3001               	movlw	1
  8886  03E4  07C1               	addwf	___ftadd@f2,f
  8887  03E5  3000               	movlw	0
  8888  03E6  1803               	skipnc
  8889  03E7  3001               	movlw	1
  8890  03E8  07C2               	addwf	___ftadd@f2+1,f
  8891  03E9  3000               	movlw	0
  8892  03EA  1803               	skipnc
  8893  03EB  3001               	movlw	1
  8894  03EC  07C3               	addwf	___ftadd@f2+2,f
  8895  03ED                     l5446:	
  8896  03ED  01C8               	clrf	___ftadd@sign
  8897  03EE  083E               	movf	___ftadd@f1,w
  8898  03EF  07C1               	addwf	___ftadd@f2,f
  8899  03F0  083F               	movf	___ftadd@f1+1,w
  8900  03F1  3DC2               	addwfc	___ftadd@f2+1,f
  8901  03F2  0840               	movf	___ftadd@f1+2,w
  8902  03F3  3DC3               	addwfc	___ftadd@f2+2,f
  8903  03F4  1FC3               	btfss	___ftadd@f2+2,7
  8904  03F5  2C08               	goto	l5456
  8905  03F6  30FF               	movlw	255
  8906  03F7  06C1               	xorwf	___ftadd@f2,f
  8907  03F8  30FF               	movlw	255
  8908  03F9  06C2               	xorwf	___ftadd@f2+1,f
  8909  03FA  30FF               	movlw	255
  8910  03FB  06C3               	xorwf	___ftadd@f2+2,f
  8911  03FC  3001               	movlw	1
  8912  03FD  07C1               	addwf	___ftadd@f2,f
  8913  03FE  3000               	movlw	0
  8914  03FF  1803               	skipnc
  8915  0400  3001               	movlw	1
  8916  0401  07C2               	addwf	___ftadd@f2+1,f
  8917  0402  3000               	movlw	0
  8918  0403  1803               	skipnc
  8919  0404  3001               	movlw	1
  8920  0405  07C3               	addwf	___ftadd@f2+2,f
  8921  0406  01C8               	clrf	___ftadd@sign
  8922  0407  0AC8               	incf	___ftadd@sign,f
  8923  0408                     l5456:	
  8924  0408  0841               	movf	___ftadd@f2,w
  8925  0409  00A0               	movwf	___ftpack@arg
  8926  040A  0842               	movf	___ftadd@f2+1,w
  8927  040B  00A1               	movwf	___ftpack@arg+1
  8928  040C  0843               	movf	___ftadd@f2+2,w
  8929  040D  00A2               	movwf	___ftpack@arg+2
  8930  040E  084A               	movf	___ftadd@exp1,w
  8931  040F  00C4               	movwf	??___ftadd
  8932  0410  0844               	movf	??___ftadd,w
  8933  0411  00A3               	movwf	___ftpack@exp
  8934  0412  0848               	movf	___ftadd@sign,w
  8935  0413  00C5               	movwf	??___ftadd+1
  8936  0414  0845               	movf	??___ftadd+1,w
  8937  0415  00A4               	movwf	___ftpack@sign
  8938  0416  318A  221C         	fcall	___ftpack
  8939  0418  0020               	movlb	0	; select bank0
  8940  0419  0820               	movf	?___ftpack,w
  8941  041A  00BE               	movwf	?___ftadd
  8942  041B  0821               	movf	?___ftpack+1,w
  8943  041C  00BF               	movwf	?___ftadd+1
  8944  041D  0822               	movf	?___ftpack+2,w
  8945  041E  00C0               	movwf	?___ftadd+2
  8946  041F  0008               	return
  8947  0420                     __end_of___ftadd:	
  8948                           
  8949                           	psect	text41
  8950  1F10                     __ptext41:	
  8951 ;; *************** function _getBuz_GO *****************
  8952 ;; Defined at:
  8953 ;;		line 82 in file "../src/Buzzer_B1.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;		None
  8956 ;; Auto vars:     Size  Location     Type
  8957 ;;  i               2    4[BANK0 ] int 
  8958 ;; Return value:  Size  Location     Type
  8959 ;;                  2    0[BANK0 ] int 
  8960 ;; Registers used:
  8961 ;;		wreg, status,2, status,0
  8962 ;; Tracked objects:
  8963 ;;		On entry : 0/0
  8964 ;;		On exit  : 0/0
  8965 ;;		Unchanged: 0/0
  8966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8967 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8970 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;Total ram usage:        6 bytes
  8972 ;; Hardware stack levels used:    1
  8973 ;; Hardware stack levels required when called:    5
  8974 ;; This function calls:
  8975 ;;		Nothing
  8976 ;; This function is called by:
  8977 ;;		_setRF_Main
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           
  8982                           ;psect for function _getBuz_GO
  8983  1F10                     _getBuz_GO:	
  8984                           
  8985                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8986                           
  8987                           ;incstack = 0
  8988                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8989  1F10  0021               	movlb	1	; select bank1
  8990  1F11  0C32               	rrf	_Buz1^(0+128),w
  8991  1F12  3901               	andlw	1
  8992  1F13  0020               	movlb	0	; select bank0
  8993  1F14  00A2               	movwf	??_getBuz_GO
  8994  1F15  01A3               	clrf	??_getBuz_GO+1
  8995  1F16  0822               	movf	??_getBuz_GO,w
  8996  1F17  00A4               	movwf	getBuz_GO@i
  8997  1F18  0823               	movf	??_getBuz_GO+1,w
  8998  1F19  00A5               	movwf	getBuz_GO@i+1
  8999                           
  9000                           ;Buzzer_B1.c: 84: return i;
  9001  1F1A  0825               	movf	getBuz_GO@i+1,w
  9002  1F1B  01A1               	clrf	?_getBuz_GO+1
  9003  1F1C  07A1               	addwf	?_getBuz_GO+1,f
  9004  1F1D  0824               	movf	getBuz_GO@i,w
  9005  1F1E  01A0               	clrf	?_getBuz_GO
  9006  1F1F  07A0               	addwf	?_getBuz_GO,f
  9007  1F20  0008               	return
  9008  1F21                     __end_of_getBuz_GO:	
  9009                           
  9010                           	psect	text42
  9011  10B4                     __ptext42:	
  9012 ;; *************** function ___wmul *****************
  9013 ;; Defined at:
  9014 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9017 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  product         2    4[BANK0 ] unsigned int 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  2    0[BANK0 ] unsigned int 
  9022 ;; Registers used:
  9023 ;;		wreg, status,2, status,0
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9029 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;Total ram usage:        6 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    5
  9036 ;; This function calls:
  9037 ;;		Nothing
  9038 ;; This function is called by:
  9039 ;;		_setRF_Main
  9040 ;; This function uses a non-reentrant model
  9041 ;;
  9042                           
  9043                           
  9044                           ;psect for function ___wmul
  9045  10B4                     ___wmul:	
  9046                           
  9047                           ;incstack = 0
  9048                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9049  10B4  0020               	movlb	0	; select bank0
  9050  10B5  01A4               	clrf	___wmul@product
  9051  10B6  01A5               	clrf	___wmul@product+1
  9052  10B7                     l8668:	
  9053  10B7  1C20               	btfss	___wmul@multiplier,0
  9054  10B8  28BD               	goto	l2621
  9055  10B9  0822               	movf	___wmul@multiplicand,w
  9056  10BA  07A4               	addwf	___wmul@product,f
  9057  10BB  0823               	movf	___wmul@multiplicand+1,w
  9058  10BC  3DA5               	addwfc	___wmul@product+1,f
  9059  10BD                     l2621:	
  9060  10BD  3001               	movlw	1
  9061  10BE                     u8665:	
  9062  10BE  35A2               	lslf	___wmul@multiplicand,f
  9063  10BF  0DA3               	rlf	___wmul@multiplicand+1,f
  9064  10C0  0B89               	decfsz	9,f
  9065  10C1  28BE               	goto	u8665
  9066  10C2  3001               	movlw	1
  9067  10C3                     u8675:	
  9068  10C3  36A1               	lsrf	___wmul@multiplier+1,f
  9069  10C4  0CA0               	rrf	___wmul@multiplier,f
  9070  10C5  0B89               	decfsz	9,f
  9071  10C6  28C3               	goto	u8675
  9072  10C7  0821               	movf	___wmul@multiplier+1,w
  9073  10C8  0420               	iorwf	___wmul@multiplier,w
  9074  10C9  1D03               	skipz
  9075  10CA  28B7               	goto	l8668
  9076  10CB  0825               	movf	___wmul@product+1,w
  9077  10CC  01A1               	clrf	?___wmul+1
  9078  10CD  07A1               	addwf	?___wmul+1,f
  9079  10CE  0824               	movf	___wmul@product,w
  9080  10CF  01A0               	clrf	?___wmul
  9081  10D0  07A0               	addwf	?___wmul,f
  9082  10D1  0008               	return
  9083  10D2                     __end_of___wmul:	
  9084                           
  9085                           	psect	text43
  9086  0A7D                     __ptext43:	
  9087 ;; *************** function _CC2500_TxData *****************
  9088 ;; Defined at:
  9089 ;;		line 32 in file "../src/CC2500_B1.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9094 ;; Return value:  Size  Location     Type
  9095 ;;		None               void
  9096 ;; Registers used:
  9097 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        2 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    7
  9110 ;; This function calls:
  9111 ;;		_CC2500_WriteByte
  9112 ;;		_CC2500_WriteCommand
  9113 ;;		_Timeout_Counter
  9114 ;;		_set_TimeoutCleared
  9115 ;; This function is called by:
  9116 ;;		_setRF_Main
  9117 ;; This function uses a non-reentrant model
  9118 ;;
  9119                           
  9120                           
  9121                           ;psect for function _CC2500_TxData
  9122  0A7D                     _CC2500_TxData:	
  9123                           
  9124                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9125                           ;CC2500_B1.c: 35: RC4 = 0;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9129  0A7D  0020               	movlb	0	; select bank0
  9130  0A7E  120E               	bcf	14,4	;volatile
  9131                           
  9132                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9133  0A7F  307F               	movlw	127
  9134  0A80  00A4               	movwf	??_CC2500_TxData
  9135  0A81  0824               	movf	??_CC2500_TxData,w
  9136  0A82  0021               	movlb	1	; select bank1
  9137  0A83  00D9               	movwf	_SPI0Buffer^(0+128)
  9138                           
  9139                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9140  0A84  2A88               	goto	l8322
  9141  0A85                     l8320:	
  9142                           
  9143                           ;CC2500_B1.c: 38: Timeout_Counter();
  9144  0A85  319F  2745  318A   	fcall	_Timeout_Counter
  9145  0A88                     l8322:	
  9146  0A88  0020               	movlb	0	; select bank0
  9147  0A89  1D0E               	btfss	14,2	;volatile
  9148  0A8A  2A8E               	goto	l8326
  9149  0A8B  0021               	movlb	1	; select bank1
  9150  0A8C  1D2F               	btfss	(_myMain^(0+128)+15),2
  9151  0A8D  2A85               	goto	l8320
  9152  0A8E                     l8326:	
  9153                           
  9154                           ;CC2500_B1.c: 39: };
  9155                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9156  0A8E  319D  253E  318A   	fcall	_set_TimeoutCleared
  9157                           
  9158                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9159  0A91  319F  279A  318A   	fcall	_CC2500_WriteByte
  9160                           
  9161                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9162  0A94  0021               	movlb	1	; select bank1
  9163  0A95  085A               	movf	_Tx_Length^(0+128),w
  9164  0A96  0020               	movlb	0	; select bank0
  9165  0A97  00A4               	movwf	??_CC2500_TxData
  9166  0A98  0824               	movf	??_CC2500_TxData,w
  9167  0A99  0021               	movlb	1	; select bank1
  9168  0A9A  00D9               	movwf	_SPI0Buffer^(0+128)
  9169                           
  9170                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9171  0A9B  319F  279A  318A   	fcall	_CC2500_WriteByte
  9172                           
  9173                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9174  0A9E  0020               	movlb	0	; select bank0
  9175  0A9F  01A5               	clrf	CC2500_TxData@loop_e
  9176  0AA0                     l8340:	
  9177  0AA0  0021               	movlb	1	; select bank1
  9178  0AA1  085A               	movf	_Tx_Length^(0+128),w
  9179  0AA2  0020               	movlb	0	; select bank0
  9180  0AA3  0225               	subwf	CC2500_TxData@loop_e,w
  9181  0AA4  1803               	btfsc	3,0
  9182  0AA5  2AB9               	goto	l247
  9183                           
  9184                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9185  0AA6  0825               	movf	CC2500_TxData@loop_e,w
  9186  0AA7  3E20               	addlw	_RF_Data& (0+255)
  9187  0AA8  0086               	movwf	6
  9188  0AA9  3001               	movlw	1	; select bank2/3
  9189  0AAA  0087               	movwf	7
  9190  0AAB  0801               	movf	1,w
  9191  0AAC  00A4               	movwf	??_CC2500_TxData
  9192  0AAD  0824               	movf	??_CC2500_TxData,w
  9193  0AAE  0021               	movlb	1	; select bank1
  9194  0AAF  00D9               	movwf	_SPI0Buffer^(0+128)
  9195                           
  9196                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9197  0AB0  319F  279A  318A   	fcall	_CC2500_WriteByte
  9198  0AB3  3001               	movlw	1
  9199  0AB4  0020               	movlb	0	; select bank0
  9200  0AB5  00A4               	movwf	??_CC2500_TxData
  9201  0AB6  0824               	movf	??_CC2500_TxData,w
  9202  0AB7  07A5               	addwf	CC2500_TxData@loop_e,f
  9203  0AB8  2AA0               	goto	l8340
  9204  0AB9                     l247:	
  9205                           
  9206                           ;CC2500_B1.c: 48: }
  9207                           ;CC2500_B1.c: 49: RC4 = 1;
  9208  0AB9  160E               	bsf	14,4	;volatile
  9209                           
  9210                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9211  0ABA  3035               	movlw	53
  9212  0ABB  319F  27CC  318A   	fcall	_CC2500_WriteCommand
  9213                           
  9214                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9215  0ABE  2AC2               	goto	l8346
  9216  0ABF                     l8344:	
  9217                           
  9218                           ;CC2500_B1.c: 52: Timeout_Counter();
  9219  0ABF  319F  2745  318A   	fcall	_Timeout_Counter
  9220  0AC2                     l8346:	
  9221  0AC2  0020               	movlb	0	; select bank0
  9222  0AC3  180D               	btfsc	13,0	;volatile
  9223  0AC4  2AC8               	goto	l8350
  9224  0AC5  0021               	movlb	1	; select bank1
  9225  0AC6  1D2F               	btfss	(_myMain^(0+128)+15),2
  9226  0AC7  2ABF               	goto	l8344
  9227  0AC8                     l8350:	
  9228                           
  9229                           ;CC2500_B1.c: 53: };
  9230                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9231  0AC8  319D  253E  318A   	fcall	_set_TimeoutCleared
  9232                           
  9233                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9234  0ACB  2ACF               	goto	l8354
  9235  0ACC                     l8352:	
  9236                           
  9237                           ;CC2500_B1.c: 57: Timeout_Counter();
  9238  0ACC  319F  2745  318A   	fcall	_Timeout_Counter
  9239  0ACF                     l8354:	
  9240  0ACF  0020               	movlb	0	; select bank0
  9241  0AD0  1C0D               	btfss	13,0	;volatile
  9242  0AD1  2AD5               	goto	l8358
  9243  0AD2  0021               	movlb	1	; select bank1
  9244  0AD3  1D2F               	btfss	(_myMain^(0+128)+15),2
  9245  0AD4  2ACC               	goto	l8352
  9246  0AD5                     l8358:	
  9247                           
  9248                           ;CC2500_B1.c: 58: };
  9249                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9250  0AD5  319D  253E  318A   	fcall	_set_TimeoutCleared
  9251                           
  9252                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x36);
  9253  0AD8  3036               	movlw	54
  9254  0AD9  319F  27CC  318A   	fcall	_CC2500_WriteCommand
  9255                           
  9256                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3B);
  9257  0ADC  303B               	movlw	59
  9258  0ADD  319F  27CC         	fcall	_CC2500_WriteCommand
  9259                           
  9260                           ;CC2500_B1.c: 65: Transceive_OK = 1;
  9261  0ADF  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9262  0AE0  0008               	return
  9263  0AE1                     __end_of_CC2500_TxData:	
  9264                           
  9265                           	psect	text44
  9266  0D6D                     __ptext44:	
  9267 ;; *************** function _CC2500_RxData *****************
  9268 ;; Defined at:
  9269 ;;		line 71 in file "../src/CC2500_B1.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;		None
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;		None               void
  9276 ;; Registers used:
  9277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9284 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9285 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9286 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;Total ram usage:        2 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    7
  9290 ;; This function calls:
  9291 ;;		_CC2500_ReadByte
  9292 ;;		_CC2500_ReadStatus
  9293 ;;		_CC2500_WriteByte
  9294 ;;		_Timeout_Counter
  9295 ;;		_set_TimeoutCleared
  9296 ;; This function is called by:
  9297 ;;		_setRF_Main
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           
  9302                           ;psect for function _CC2500_RxData
  9303  0D6D                     _CC2500_RxData:	
  9304                           
  9305                           ;CC2500_B1.c: 72: unsigned char loop_f;
  9306                           ;CC2500_B1.c: 76: if (RB0 == 1)
  9307                           
  9308                           ;incstack = 0
  9309                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9310  0D6D  0020               	movlb	0	; select bank0
  9311  0D6E  180D               	btfsc	13,0	;volatile
  9312  0D6F  2D74               	goto	l8372
  9313  0D70  2D7D               	goto	l8378
  9314  0D71                     l8370:	
  9315                           ;CC2500_B1.c: 77: {
  9316                           ;CC2500_B1.c: 78: while (RB0 == 1 && myMain.Timeout == 0) {
  9317                           
  9318                           
  9319                           ;CC2500_B1.c: 79: Timeout_Counter();
  9320  0D71  319F  2745  318D   	fcall	_Timeout_Counter
  9321  0D74                     l8372:	
  9322  0D74  0020               	movlb	0	; select bank0
  9323  0D75  1C0D               	btfss	13,0	;volatile
  9324  0D76  2D7A               	goto	l8376
  9325  0D77  0021               	movlb	1	; select bank1
  9326  0D78  1D2F               	btfss	(_myMain^(0+128)+15),2
  9327  0D79  2D71               	goto	l8370
  9328  0D7A                     l8376:	
  9329                           
  9330                           ;CC2500_B1.c: 80: };
  9331                           ;CC2500_B1.c: 81: set_TimeoutCleared();
  9332  0D7A  319D  253E  318D   	fcall	_set_TimeoutCleared
  9333  0D7D                     l8378:	
  9334                           
  9335                           ;CC2500_B1.c: 82: }
  9336                           ;CC2500_B1.c: 84: CC2500_ReadStatus(0x3B);
  9337  0D7D  303B               	movlw	59
  9338  0D7E  3191  21DB  318D   	fcall	_CC2500_ReadStatus
  9339                           
  9340                           ;CC2500_B1.c: 86: if (s_data != 0) {
  9341  0D81  0021               	movlb	1	; select bank1
  9342  0D82  085D               	movf	_s_data^(0+128),w
  9343  0D83  1903               	btfsc	3,2
  9344  0D84  0008               	return
  9345                           
  9346                           ;CC2500_B1.c: 87: RC4 = 0;
  9347  0D85  0020               	movlb	0	; select bank0
  9348  0D86  120E               	bcf	14,4	;volatile
  9349                           
  9350                           ;CC2500_B1.c: 88: SPI0Buffer = 0x3F + 0xC0;
  9351  0D87  30FF               	movlw	255
  9352  0D88  00A4               	movwf	??_CC2500_RxData
  9353  0D89  0824               	movf	??_CC2500_RxData,w
  9354  0D8A  0021               	movlb	1	; select bank1
  9355  0D8B  00D9               	movwf	_SPI0Buffer^(0+128)
  9356                           
  9357                           ;CC2500_B1.c: 89: while (RC2 == 1 && myMain.Timeout == 0) {
  9358  0D8C  2D93               	goto	l8388
  9359  0D8D                     l8390:	
  9360  0D8D  0021               	movlb	1	; select bank1
  9361  0D8E  192F               	btfsc	(_myMain^(0+128)+15),2
  9362  0D8F  2D96               	goto	l272
  9363                           
  9364                           ;CC2500_B1.c: 90: Timeout_Counter();
  9365  0D90  319F  2745  318D   	fcall	_Timeout_Counter
  9366  0D93                     l8388:	
  9367  0D93  0020               	movlb	0	; select bank0
  9368  0D94  190E               	btfsc	14,2	;volatile
  9369  0D95  2D8D               	goto	l8390
  9370  0D96                     l272:	
  9371                           
  9372                           ;CC2500_B1.c: 91: };
  9373                           ;CC2500_B1.c: 92: if (myMain.Timeout == 0) {
  9374  0D96  0021               	movlb	1	; select bank1
  9375  0D97  192F               	btfsc	(_myMain^(0+128)+15),2
  9376  0D98  2DDD               	goto	l273
  9377                           
  9378                           ;CC2500_B1.c: 93: CC2500_WriteByte();
  9379  0D99  319F  279A  318D   	fcall	_CC2500_WriteByte
  9380                           
  9381                           ;CC2500_B1.c: 95: CC2500_ReadByte();
  9382  0D9C  3190  2097  318D   	fcall	_CC2500_ReadByte
  9383                           
  9384                           ;CC2500_B1.c: 96: Rx_Length = SPI0Buffer;
  9385  0D9F  0021               	movlb	1	; select bank1
  9386  0DA0  0859               	movf	_SPI0Buffer^(0+128),w
  9387  0DA1  0020               	movlb	0	; select bank0
  9388  0DA2  00A4               	movwf	??_CC2500_RxData
  9389  0DA3  0824               	movf	??_CC2500_RxData,w
  9390  0DA4  0021               	movlb	1	; select bank1
  9391  0DA5  00D8               	movwf	_Rx_Length^(0+128)
  9392                           
  9393                           ;CC2500_B1.c: 97: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9394  0DA6  0020               	movlb	0	; select bank0
  9395  0DA7  01A5               	clrf	CC2500_RxData@loop_f
  9396  0DA8                     l8404:	
  9397  0DA8  0021               	movlb	1	; select bank1
  9398  0DA9  0858               	movf	_Rx_Length^(0+128),w
  9399  0DAA  0020               	movlb	0	; select bank0
  9400  0DAB  0225               	subwf	CC2500_RxData@loop_f,w
  9401  0DAC  1803               	btfsc	3,0
  9402  0DAD  2DC1               	goto	l8406
  9403                           
  9404                           ;CC2500_B1.c: 98: CC2500_ReadByte();
  9405  0DAE  3190  2097  318D   	fcall	_CC2500_ReadByte
  9406                           
  9407                           ;CC2500_B1.c: 99: RF_Data[loop_f] = SPI0Buffer;
  9408  0DB1  0021               	movlb	1	; select bank1
  9409  0DB2  0859               	movf	_SPI0Buffer^(0+128),w
  9410  0DB3  0020               	movlb	0	; select bank0
  9411  0DB4  00A4               	movwf	??_CC2500_RxData
  9412  0DB5  0825               	movf	CC2500_RxData@loop_f,w
  9413  0DB6  3E20               	addlw	_RF_Data& (0+255)
  9414  0DB7  0086               	movwf	6
  9415  0DB8  3001               	movlw	1	; select bank2/3
  9416  0DB9  0087               	movwf	7
  9417  0DBA  0824               	movf	??_CC2500_RxData,w
  9418  0DBB  0081               	movwf	1
  9419  0DBC  3001               	movlw	1
  9420  0DBD  00A4               	movwf	??_CC2500_RxData
  9421  0DBE  0824               	movf	??_CC2500_RxData,w
  9422  0DBF  07A5               	addwf	CC2500_RxData@loop_f,f
  9423  0DC0  2DA8               	goto	l8404
  9424  0DC1                     l8406:	
  9425                           
  9426                           ;CC2500_B1.c: 100: }
  9427                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  9428  0DC1  3190  2097  318D   	fcall	_CC2500_ReadByte
  9429                           
  9430                           ;CC2500_B1.c: 102: RSSI = SPI0Buffer;
  9431  0DC4  0021               	movlb	1	; select bank1
  9432  0DC5  0859               	movf	_SPI0Buffer^(0+128),w
  9433  0DC6  0020               	movlb	0	; select bank0
  9434  0DC7  00A4               	movwf	??_CC2500_RxData
  9435  0DC8  0824               	movf	??_CC2500_RxData,w
  9436  0DC9  0021               	movlb	1	; select bank1
  9437  0DCA  00D7               	movwf	_RSSI^(0+128)
  9438                           
  9439                           ;CC2500_B1.c: 103: CC2500_ReadByte();
  9440  0DCB  3190  2097  318D   	fcall	_CC2500_ReadByte
  9441                           
  9442                           ;CC2500_B1.c: 104: CRC = SPI0Buffer;
  9443  0DCE  0021               	movlb	1	; select bank1
  9444  0DCF  0859               	movf	_SPI0Buffer^(0+128),w
  9445  0DD0  0020               	movlb	0	; select bank0
  9446  0DD1  00A4               	movwf	??_CC2500_RxData
  9447  0DD2  0824               	movf	??_CC2500_RxData,w
  9448  0DD3  0021               	movlb	1	; select bank1
  9449  0DD4  00D3               	movwf	_CRC^(0+128)
  9450                           
  9451                           ;CC2500_B1.c: 105: RC4 = 1;
  9452  0DD5  0020               	movlb	0	; select bank0
  9453  0DD6  160E               	bsf	14,4	;volatile
  9454                           
  9455                           ;CC2500_B1.c: 106: if (CRC & 0x80)
  9456  0DD7  0021               	movlb	1	; select bank1
  9457  0DD8  1BD3               	btfsc	_CRC^(0+128),7
  9458                           
  9459                           ;CC2500_B1.c: 107: Receive_OK = 1;
  9460  0DD9  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9461                           
  9462                           ;CC2500_B1.c: 114: RF1.RxStatus = 0;
  9463  0DDA  11BE               	bcf	_RF1^(0+128),3
  9464                           
  9465                           ;CC2500_B1.c: 115: RF1.ReceiveGO = 1;
  9466  0DDB  14BE               	bsf	_RF1^(0+128),1
  9467                           
  9468                           ;CC2500_B1.c: 116: } else {
  9469  0DDC  2DDF               	goto	l8418
  9470  0DDD                     l273:	
  9471                           
  9472                           ;CC2500_B1.c: 117: RC4 = 1;
  9473  0DDD  0020               	movlb	0	; select bank0
  9474  0DDE  160E               	bsf	14,4	;volatile
  9475  0DDF                     l8418:	
  9476                           
  9477                           ;CC2500_B1.c: 118: }
  9478                           ;CC2500_B1.c: 119: set_TimeoutCleared();
  9479  0DDF  319D  253E         	fcall	_set_TimeoutCleared
  9480  0DE1  0021               	movlb	1	; select bank1
  9481  0DE2  0008               	return
  9482  0DE3                     __end_of_CC2500_RxData:	
  9483                           
  9484                           	psect	text45
  9485  11DB                     __ptext45:	
  9486 ;; *************** function _CC2500_ReadStatus *****************
  9487 ;; Defined at:
  9488 ;;		line 310 in file "../src/CC2500_B1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;  status_addr     1    wreg     unsigned char 
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9493 ;; Return value:  Size  Location     Type
  9494 ;;		None               void
  9495 ;; Registers used:
  9496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;Total ram usage:        2 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    6
  9509 ;; This function calls:
  9510 ;;		_CC2500_ReadByte
  9511 ;;		_CC2500_WriteByte
  9512 ;;		_Timeout_Counter
  9513 ;;		_set_TimeoutCleared
  9514 ;; This function is called by:
  9515 ;;		_CC2500_RxData
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           
  9520                           ;psect for function _CC2500_ReadStatus
  9521  11DB                     _CC2500_ReadStatus:	
  9522                           
  9523                           ;incstack = 0
  9524                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9525                           ;CC2500_ReadStatus@status_addr stored from wreg
  9526  11DB  0020               	movlb	0	; select bank0
  9527  11DC  00A3               	movwf	CC2500_ReadStatus@status_addr
  9528                           
  9529                           ;CC2500_B1.c: 311: RC4 = 0;
  9530  11DD  120E               	bcf	14,4	;volatile
  9531                           
  9532                           ;CC2500_B1.c: 312: SPI0Buffer = status_addr + 0xC0;
  9533  11DE  0823               	movf	CC2500_ReadStatus@status_addr,w
  9534  11DF  3EC0               	addlw	192
  9535  11E0  00A2               	movwf	??_CC2500_ReadStatus
  9536  11E1  0822               	movf	??_CC2500_ReadStatus,w
  9537  11E2  0021               	movlb	1	; select bank1
  9538  11E3  00D9               	movwf	_SPI0Buffer^(0+128)
  9539                           
  9540                           ;CC2500_B1.c: 314: while (RC2 == 1 && myMain.Timeout == 0) {
  9541  11E4  29E8               	goto	l8200
  9542  11E5                     l8198:	
  9543                           
  9544                           ;CC2500_B1.c: 315: Timeout_Counter();
  9545  11E5  319F  2745  3191   	fcall	_Timeout_Counter
  9546  11E8                     l8200:	
  9547  11E8  0020               	movlb	0	; select bank0
  9548  11E9  1D0E               	btfss	14,2	;volatile
  9549  11EA  29EE               	goto	l8204
  9550  11EB  0021               	movlb	1	; select bank1
  9551  11EC  1D2F               	btfss	(_myMain^(0+128)+15),2
  9552  11ED  29E5               	goto	l8198
  9553  11EE                     l8204:	
  9554                           
  9555                           ;CC2500_B1.c: 316: };
  9556                           ;CC2500_B1.c: 317: set_TimeoutCleared();
  9557  11EE  319D  253E  3191   	fcall	_set_TimeoutCleared
  9558                           
  9559                           ;CC2500_B1.c: 319: CC2500_WriteByte();
  9560  11F1  319F  279A  3191   	fcall	_CC2500_WriteByte
  9561                           
  9562                           ;CC2500_B1.c: 320: CC2500_ReadByte();
  9563  11F4  3190  2097         	fcall	_CC2500_ReadByte
  9564                           
  9565                           ;CC2500_B1.c: 321: RC4 = 1;
  9566  11F6  0020               	movlb	0	; select bank0
  9567  11F7  160E               	bsf	14,4	;volatile
  9568                           
  9569                           ;CC2500_B1.c: 323: s_data = SPI0Buffer;
  9570  11F8  0021               	movlb	1	; select bank1
  9571  11F9  0859               	movf	_SPI0Buffer^(0+128),w
  9572  11FA  0020               	movlb	0	; select bank0
  9573  11FB  00A2               	movwf	??_CC2500_ReadStatus
  9574  11FC  0822               	movf	??_CC2500_ReadStatus,w
  9575  11FD  0021               	movlb	1	; select bank1
  9576  11FE  00DD               	movwf	_s_data^(0+128)
  9577  11FF  0008               	return
  9578  1200                     __end_of_CC2500_ReadStatus:	
  9579                           
  9580                           	psect	text46
  9581  1097                     __ptext46:	
  9582 ;; *************** function _CC2500_ReadByte *****************
  9583 ;; Defined at:
  9584 ;;		line 244 in file "../src/CC2500_B1.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;		None
  9587 ;; Auto vars:     Size  Location     Type
  9588 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9589 ;; Return value:  Size  Location     Type
  9590 ;;		None               void
  9591 ;; Registers used:
  9592 ;;		wreg, status,2, status,0
  9593 ;; Tracked objects:
  9594 ;;		On entry : 0/0
  9595 ;;		On exit  : 0/0
  9596 ;;		Unchanged: 0/0
  9597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9599 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9600 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9601 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9602 ;;Total ram usage:        2 bytes
  9603 ;; Hardware stack levels used:    1
  9604 ;; Hardware stack levels required when called:    5
  9605 ;; This function calls:
  9606 ;;		Nothing
  9607 ;; This function is called by:
  9608 ;;		_CC2500_RxData
  9609 ;;		_CC2500_ReadStatus
  9610 ;;		_CC2500_ReadREG
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           
  9615                           ;psect for function _CC2500_ReadByte
  9616  1097                     _CC2500_ReadByte:	
  9617                           
  9618                           ;CC2500_B1.c: 245: unsigned char loop_b;
  9619                           ;CC2500_B1.c: 246: for (loop_b = 0; loop_b < 8; loop_b++) {
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9623  1097  0020               	movlb	0	; select bank0
  9624  1098  01A1               	clrf	CC2500_ReadByte@loop_b
  9625  1099                     L3:	
  9626  1099  3008               	movlw	8
  9627  109A  0221               	subwf	CC2500_ReadByte@loop_b,w
  9628  109B  1803               	btfsc	3,0
  9629  109C  0008               	return
  9630                           
  9631                           ;CC2500_B1.c: 247: RC1 = 1;
  9632  109D  148E               	bsf	14,1	;volatile
  9633                           
  9634                           ;CC2500_B1.c: 248: SPI0Buffer <<= 1;
  9635  109E  1003               	clrc
  9636  109F  0021               	movlb	1	; select bank1
  9637  10A0  0DD9               	rlf	_SPI0Buffer^(0+128),f
  9638                           
  9639                           ;CC2500_B1.c: 249: if (RC2 == 1)
  9640  10A1  0020               	movlb	0	; select bank0
  9641  10A2  1D0E               	btfss	14,2	;volatile
  9642  10A3  28A7               	goto	l8066
  9643                           
  9644                           ;CC2500_B1.c: 250: SPI0Buffer |= 0x01;
  9645  10A4  0021               	movlb	1	; select bank1
  9646  10A5  1459               	bsf	_SPI0Buffer^(0+128),0
  9647  10A6  28AD               	goto	l8068
  9648  10A7                     l8066:	
  9649                           
  9650                           ;CC2500_B1.c: 251: else
  9651                           ;CC2500_B1.c: 252: SPI0Buffer &= 0xFE;
  9652  10A7  30FE               	movlw	254
  9653  10A8  0020               	movlb	0	; select bank0
  9654  10A9  00A0               	movwf	??_CC2500_ReadByte
  9655  10AA  0820               	movf	??_CC2500_ReadByte,w
  9656  10AB  0021               	movlb	1	; select bank1
  9657  10AC  05D9               	andwf	_SPI0Buffer^(0+128),f
  9658  10AD                     l8068:	
  9659                           
  9660                           ;CC2500_B1.c: 253: RC1 = 0;
  9661  10AD  0020               	movlb	0	; select bank0
  9662  10AE  108E               	bcf	14,1	;volatile
  9663  10AF  3001               	movlw	1
  9664  10B0  00A0               	movwf	??_CC2500_ReadByte
  9665  10B1  0820               	movf	??_CC2500_ReadByte,w
  9666  10B2  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9667  10B3  2899               	goto	L3
  9668  10B4                     __end_of_CC2500_ReadByte:	
  9669                           
  9670                           	psect	text47
  9671  1D0B                     __ptext47:	
  9672 ;; *************** function _RF_Initialization *****************
  9673 ;; Defined at:
  9674 ;;		line 9 in file "../src/RF_Control_B1.c"
  9675 ;; Parameters:    Size  Location     Type
  9676 ;;		None
  9677 ;; Auto vars:     Size  Location     Type
  9678 ;;		None
  9679 ;; Return value:  Size  Location     Type
  9680 ;;		None               void
  9681 ;; Registers used:
  9682 ;;		wreg, status,2, status,0, pclath, cstack
  9683 ;; Tracked objects:
  9684 ;;		On entry : 0/0
  9685 ;;		On exit  : 0/0
  9686 ;;		Unchanged: 0/0
  9687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9692 ;;Total ram usage:        0 bytes
  9693 ;; Hardware stack levels used:    1
  9694 ;; Hardware stack levels required when called:    6
  9695 ;; This function calls:
  9696 ;;		_setRF_Initialization
  9697 ;; This function is called by:
  9698 ;;		_main
  9699 ;; This function uses a non-reentrant model
  9700 ;;
  9701                           
  9702                           
  9703                           ;psect for function _RF_Initialization
  9704  1D0B                     _RF_Initialization:	
  9705                           
  9706                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9707                           
  9708                           ;incstack = 0
  9709                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9710  1D0B  319E  2649         	fcall	_setRF_Initialization
  9711  1D0D  0008               	return
  9712  1D0E                     __end_of_RF_Initialization:	
  9713                           
  9714                           	psect	text48
  9715  1E49                     __ptext48:	
  9716 ;; *************** function _setRF_Initialization *****************
  9717 ;; Defined at:
  9718 ;;		line 43 in file "../src/RF_Control_B1.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;		None
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;		None
  9723 ;; Return value:  Size  Location     Type
  9724 ;;		None               void
  9725 ;; Registers used:
  9726 ;;		wreg
  9727 ;; Tracked objects:
  9728 ;;		On entry : 0/0
  9729 ;;		On exit  : 0/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9736 ;;Total ram usage:        1 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    5
  9739 ;; This function calls:
  9740 ;;		Nothing
  9741 ;; This function is called by:
  9742 ;;		_RF_Initialization
  9743 ;; This function uses a non-reentrant model
  9744 ;;
  9745                           
  9746                           
  9747                           ;psect for function _setRF_Initialization
  9748  1E49                     _setRF_Initialization:	
  9749                           
  9750                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9751                           
  9752                           ;incstack = 0
  9753                           ; Regs used in _setRF_Initialization: [wreg]
  9754  1E49  3015               	movlw	21
  9755  1E4A  0020               	movlb	0	; select bank0
  9756  1E4B  00A0               	movwf	??_setRF_Initialization
  9757  1E4C  0820               	movf	??_setRF_Initialization,w
  9758  1E4D  0021               	movlb	1	; select bank1
  9759  1E4E  00DA               	movwf	_Tx_Length^(0+128)
  9760                           
  9761                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9762  1E4F  3014               	movlw	20
  9763  1E50  0020               	movlb	0	; select bank0
  9764  1E51  00A0               	movwf	??_setRF_Initialization
  9765  1E52  0820               	movf	??_setRF_Initialization,w
  9766  1E53  0021               	movlb	1	; select bank1
  9767  1E54  00C3               	movwf	(_RF1^(0+128)+5)
  9768  1E55  0008               	return
  9769  1E56                     __end_of_setRF_Initialization:	
  9770                           
  9771                           	psect	text49
  9772  1D08                     __ptext49:	
  9773 ;; *************** function _PowerFault_Main *****************
  9774 ;; Defined at:
  9775 ;;		line 17 in file "../src/PowerFault_B1.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;		None
  9780 ;; Return value:  Size  Location     Type
  9781 ;;		None               void
  9782 ;; Registers used:
  9783 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;Total ram usage:        0 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:   11
  9796 ;; This function calls:
  9797 ;;		_setPowerFault_Main
  9798 ;; This function is called by:
  9799 ;;		_main
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           
  9804                           ;psect for function _PowerFault_Main
  9805  1D08                     _PowerFault_Main:	
  9806                           
  9807                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9808                           
  9809                           ;incstack = 0
  9810                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9811  1D08  318C  24F7         	fcall	_setPowerFault_Main
  9812  1D0A  0008               	return
  9813  1D0B                     __end_of_PowerFault_Main:	
  9814                           
  9815                           	psect	text50
  9816  0CF7                     __ptext50:	
  9817 ;; *************** function _setPowerFault_Main *****************
  9818 ;; Defined at:
  9819 ;;		line 55 in file "../src/PowerFault_B1.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;		None
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;		None
  9824 ;; Return value:  Size  Location     Type
  9825 ;;		None               void
  9826 ;; Registers used:
  9827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9828 ;; Tracked objects:
  9829 ;;		On entry : 0/0
  9830 ;;		On exit  : 0/0
  9831 ;;		Unchanged: 0/0
  9832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;Total ram usage:        1 bytes
  9838 ;; Hardware stack levels used:    1
  9839 ;; Hardware stack levels required when called:   10
  9840 ;; This function calls:
  9841 ;;		_getTemp_Safe
  9842 ;;		_setPowerFault_Exceptions
  9843 ;; This function is called by:
  9844 ;;		_PowerFault_Main
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           
  9849                           ;psect for function _setPowerFault_Main
  9850  0CF7                     _setPowerFault_Main:	
  9851                           
  9852                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9853                           
  9854                           ;incstack = 0
  9855                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9856  0CF7  0021               	movlb	1	; select bank1
  9857  0CF8  1C47               	btfss	_PF1^(0+128),0
  9858  0CF9  0008               	return
  9859                           
  9860                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9861  0CFA  19C7               	btfsc	_PF1^(0+128),3
  9862  0CFB  2D19               	goto	l9030
  9863                           
  9864                           ;PowerFault_B1.c: 58: PF1.Time++;
  9865  0CFC  3001               	movlw	1
  9866  0CFD  07C9               	addwf	(_PF1^(0+128)+2),f
  9867  0CFE  3000               	movlw	0
  9868  0CFF  3DCA               	addwfc	((_PF1+1)^(0+128)+2),f
  9869                           
  9870                           ;PowerFault_B1.c: 60: {
  9871                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9872  0D00  3002               	movlw	2
  9873  0D01  024A               	subwf	((_PF1+1)^(0+128)+2),w
  9874  0D02  30BC               	movlw	188
  9875  0D03  1903               	skipnz
  9876  0D04  0249               	subwf	(_PF1^(0+128)+2),w
  9877  0D05  1C03               	skipc
  9878  0D06  0008               	return
  9879  0D07  319D  256B  318C   	fcall	_getTemp_Safe
  9880  0D0A  3A01               	xorlw	1
  9881  0D0B  1D03               	skipz
  9882  0D0C  2D13               	goto	l9028
  9883                           
  9884                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9885  0D0D  0021               	movlb	1	; select bank1
  9886  0D0E  01C9               	clrf	(_PF1^(0+128)+2)
  9887  0D0F  01CA               	clrf	((_PF1+1)^(0+128)+2)
  9888                           
  9889                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9890  0D10  15C7               	bsf	_PF1^(0+128),3
  9891                           
  9892                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9893  0D11  1147               	bcf	_PF1^(0+128),2
  9894                           
  9895                           ;PowerFault_B1.c: 65: } else {
  9896  0D12  0008               	return
  9897  0D13                     l9028:	
  9898                           
  9899                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9900  0D13  30BC               	movlw	188
  9901  0D14  0021               	movlb	1	; select bank1
  9902  0D15  00C9               	movwf	(_PF1^(0+128)+2)
  9903  0D16  3002               	movlw	2
  9904  0D17  00CA               	movwf	(_PF1^(0+128)+3)
  9905                           
  9906                           ;PowerFault_B1.c: 67: }
  9907                           ;PowerFault_B1.c: 68: }
  9908                           ;PowerFault_B1.c: 69: } else {
  9909  0D18  0008               	return
  9910  0D19                     l9030:	
  9911                           
  9912                           ;PowerFault_B1.c: 70: PF1.Time++;
  9913  0D19  3001               	movlw	1
  9914  0D1A  07C9               	addwf	(_PF1^(0+128)+2),f
  9915  0D1B  3000               	movlw	0
  9916  0D1C  3DCA               	addwfc	((_PF1+1)^(0+128)+2),f
  9917                           
  9918                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9919  0D1D  3000               	movlw	0
  9920  0D1E  024A               	subwf	((_PF1+1)^(0+128)+2),w
  9921  0D1F  3002               	movlw	2
  9922  0D20  1903               	skipnz
  9923  0D21  0249               	subwf	(_PF1^(0+128)+2),w
  9924  0D22  1C03               	skipc
  9925  0D23  0008               	return
  9926                           
  9927                           ;PowerFault_B1.c: 72: {
  9928                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9929  0D24  01C9               	clrf	(_PF1^(0+128)+2)
  9930  0D25  01CA               	clrf	((_PF1+1)^(0+128)+2)
  9931                           
  9932                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9933  0D26  11C7               	bcf	_PF1^(0+128),3
  9934                           
  9935                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9936  0D27  1CC7               	btfss	_PF1^(0+128),1
  9937  0D28  2D47               	goto	l9052
  9938                           
  9939                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9940  0D29  3001               	movlw	1
  9941  0D2A  024C               	subwf	((_PF1+1)^(0+128)+4),w
  9942  0D2B  3091               	movlw	145
  9943  0D2C  1903               	skipnz
  9944  0D2D  024B               	subwf	(_PF1^(0+128)+4),w
  9945  0D2E  1803               	skipnc
  9946  0D2F  2D65               	goto	l9064
  9947  0D30  3000               	movlw	0
  9948  0D31  024C               	subwf	((_PF1+1)^(0+128)+4),w
  9949  0D32  30C8               	movlw	200
  9950  0D33  1903               	skipnz
  9951  0D34  024B               	subwf	(_PF1^(0+128)+4),w
  9952  0D35  1C03               	skipc
  9953  0D36  2D65               	goto	l9064
  9954                           
  9955                           ;PowerFault_B1.c: 78: PF1.Count++;
  9956  0D37  3001               	movlw	1
  9957  0D38  0020               	movlb	0	; select bank0
  9958  0D39  00B1               	movwf	??_setPowerFault_Main
  9959  0D3A  0831               	movf	??_setPowerFault_Main,w
  9960  0D3B  0021               	movlb	1	; select bank1
  9961  0D3C  07C8               	addwf	(_PF1^(0+128)+1),f
  9962                           
  9963                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9964  0D3D  3002               	movlw	2
  9965  0D3E  0248               	subwf	(_PF1^(0+128)+1),w
  9966  0D3F  1C03               	skipc
  9967  0D40  2D67               	goto	l9066
  9968                           
  9969                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9970  0D41  01C8               	clrf	(_PF1^(0+128)+1)
  9971                           
  9972                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9973  0D42  3000               	movlw	0
  9974  0D43  3194  2426  318C   	fcall	_setPowerFault_Exceptions
  9975                           
  9976                           ;PowerFault_B1.c: 82: }
  9977                           ;PowerFault_B1.c: 83: } else {
  9978  0D46  2D67               	goto	l9066
  9979  0D47                     l9052:	
  9980                           ;PowerFault_B1.c: 85: }
  9981                           ;PowerFault_B1.c: 86: } else {
  9982                           
  9983                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9984                           
  9985                           
  9986                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9987  0D47  3001               	movlw	1
  9988  0D48  024C               	subwf	((_PF1+1)^(0+128)+4),w
  9989  0D49  3090               	movlw	144
  9990  0D4A  1903               	skipnz
  9991  0D4B  024B               	subwf	(_PF1^(0+128)+4),w
  9992  0D4C  1803               	skipnc
  9993  0D4D  2D55               	goto	l9056
  9994  0D4E  3000               	movlw	0
  9995  0D4F  024C               	subwf	((_PF1+1)^(0+128)+4),w
  9996  0D50  30D3               	movlw	211
  9997  0D51  1903               	skipnz
  9998  0D52  024B               	subwf	(_PF1^(0+128)+4),w
  9999  0D53  1803               	skipnc
 10000  0D54  2D65               	goto	l9064
 10001  0D55                     l9056:	
 10002                           
 10003                           ;PowerFault_B1.c: 88: PF1.Count++;
 10004  0D55  3001               	movlw	1
 10005  0D56  0020               	movlb	0	; select bank0
 10006  0D57  00B1               	movwf	??_setPowerFault_Main
 10007  0D58  0831               	movf	??_setPowerFault_Main,w
 10008  0D59  0021               	movlb	1	; select bank1
 10009  0D5A  07C8               	addwf	(_PF1^(0+128)+1),f
 10010                           
 10011                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
 10012  0D5B  3002               	movlw	2
 10013  0D5C  0248               	subwf	(_PF1^(0+128)+1),w
 10014  0D5D  1C03               	skipc
 10015  0D5E  2D67               	goto	l9066
 10016                           
 10017                           ;PowerFault_B1.c: 90: PF1.Count = 0;
 10018  0D5F  01C8               	clrf	(_PF1^(0+128)+1)
 10019                           
 10020                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
 10021  0D60  3001               	movlw	1
 10022  0D61  3194  2426  318C   	fcall	_setPowerFault_Exceptions
 10023                           
 10024                           ;PowerFault_B1.c: 92: }
 10025                           ;PowerFault_B1.c: 93: } else {
 10026  0D64  2D67               	goto	l9066
 10027  0D65                     l9064:	
 10028                           
 10029                           ;PowerFault_B1.c: 94: PF1.Count = 0;
 10030  0D65  0021               	movlb	1	; select bank1
 10031  0D66  01C8               	clrf	(_PF1^(0+128)+1)
 10032  0D67                     l9066:	
 10033                           
 10034                           ;PowerFault_B1.c: 95: }
 10035                           ;PowerFault_B1.c: 97: }
 10036                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
 10037  0D67  0021               	movlb	1	; select bank1
 10038  0D68  1CC7               	btfss	_PF1^(0+128),1
 10039                           
 10040                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
 10041  0D69  1547               	bsf	_PF1^(0+128),2
 10042                           
 10043                           ;PowerFault_B1.c: 100: }
 10044                           ;PowerFault_B1.c: 101: PF1.AD = 0;
 10045  0D6A  01CB               	clrf	(_PF1^(0+128)+4)
 10046  0D6B  01CC               	clrf	((_PF1+1)^(0+128)+4)
 10047  0D6C  0008               	return
 10048  0D6D                     __end_of_setPowerFault_Main:	
 10049                           
 10050                           	psect	text51
 10051  1426                     __ptext51:	
 10052 ;; *************** function _setPowerFault_Exceptions *****************
 10053 ;; Defined at:
 10054 ;;		line 107 in file "../src/PowerFault_B1.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;  command         1    wreg     unsigned char 
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;  command         1   16[BANK0 ] unsigned char 
 10059 ;;  i               1   15[BANK0 ] unsigned char 
 10060 ;; Return value:  Size  Location     Type
 10061 ;;		None               void
 10062 ;; Registers used:
 10063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10064 ;; Tracked objects:
 10065 ;;		On entry : 0/0
 10066 ;;		On exit  : 0/0
 10067 ;;		Unchanged: 0/0
 10068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;Total ram usage:        3 bytes
 10074 ;; Hardware stack levels used:    1
 10075 ;; Hardware stack levels required when called:    9
 10076 ;; This function calls:
 10077 ;;		_DimmerLights_Exceptions
 10078 ;;		_setLED
 10079 ;;		_setRF_Enable
 10080 ;;		_setSw_Enable
 10081 ;; This function is called by:
 10082 ;;		_setPowerFault_Main
 10083 ;; This function uses a non-reentrant model
 10084 ;;
 10085                           
 10086                           
 10087                           ;psect for function _setPowerFault_Exceptions
 10088  1426                     _setPowerFault_Exceptions:	
 10089                           
 10090                           ;incstack = 0
 10091                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 10092                           ;setPowerFault_Exceptions@command stored from wreg
 10093  1426  0020               	movlb	0	; select bank0
 10094  1427  00B0               	movwf	setPowerFault_Exceptions@command
 10095                           
 10096                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
 10097  1428  0830               	movf	setPowerFault_Exceptions@command,w
 10098  1429  3A01               	xorlw	1
 10099  142A  3000               	movlw	0
 10100  142B  1D03               	skipz
 10101  142C  3001               	movlw	1
 10102  142D  00AE               	movwf	??_setPowerFault_Exceptions
 10103  142E  082E               	movf	??_setPowerFault_Exceptions,w
 10104  142F  00AF               	movwf	setPowerFault_Exceptions@i
 10105                           
 10106                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
 10107  1430  0830               	movf	setPowerFault_Exceptions@command,w
 10108  1431  0021               	movlb	1	; select bank1
 10109  1432  10C7               	bcf	_PF1^(0+128),1
 10110  1433  1D03               	skipz
 10111  1434  14C7               	bsf	_PF1^(0+128),1
 10112                           
 10113                           ;PowerFault_B1.c: 110: PF1.Safe = i;
 10114  1435  0020               	movlb	0	; select bank0
 10115  1436  082F               	movf	setPowerFault_Exceptions@i,w
 10116  1437  0021               	movlb	1	; select bank1
 10117  1438  1147               	bcf	_PF1^(0+128),2
 10118  1439  1D03               	skipz
 10119  143A  1547               	bsf	_PF1^(0+128),2
 10120                           
 10121                           ;PowerFault_B1.c: 111: if (command == 1) {
 10122  143B  0020               	movlb	0	; select bank0
 10123  143C  0830               	movf	setPowerFault_Exceptions@command,w
 10124  143D  3A01               	xorlw	1
 10125  143E  1D03               	skipz
 10126  143F  2C4B               	goto	l1747
 10127                           
 10128                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
 10129  1440  3003               	movlw	3
 10130  1441  3195  2518  3194   	fcall	_DimmerLights_Exceptions
 10131                           
 10132                           ;PowerFault_B1.c: 114: setLED(2, 1);
 10133  1444  0020               	movlb	0	; select bank0
 10134  1445  01A2               	clrf	setLED@command
 10135  1446  0AA2               	incf	setLED@command,f
 10136  1447  3002               	movlw	2
 10137  1448  3189  215F  3194   	fcall	_setLED
 10138  144B                     l1747:	
 10139                           
 10140                           ;PowerFault_B1.c: 116: }
 10141                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
 10142  144B  0020               	movlb	0	; select bank0
 10143  144C  0830               	movf	setPowerFault_Exceptions@command,w
 10144  144D  3E0A               	addlw	10
 10145  144E  00AE               	movwf	??_setPowerFault_Exceptions
 10146  144F  082E               	movf	??_setPowerFault_Exceptions,w
 10147  1450  00A2               	movwf	setLED@command
 10148  1451  3063               	movlw	99
 10149  1452  3189  215F  3194   	fcall	_setLED
 10150                           
 10151                           ;PowerFault_B1.c: 119: setSw_Enable(i);
 10152  1455  0020               	movlb	0	; select bank0
 10153  1456  082F               	movf	setPowerFault_Exceptions@i,w
 10154  1457  319E  2682  3194   	fcall	_setSw_Enable
 10155                           
 10156                           ;PowerFault_B1.c: 121: setRF_Enable(i);
 10157  145A  0020               	movlb	0	; select bank0
 10158  145B  082F               	movf	setPowerFault_Exceptions@i,w
 10159  145C  319E  2656         	fcall	_setRF_Enable
 10160  145E  0008               	return
 10161  145F                     __end_of_setPowerFault_Exceptions:	
 10162                           
 10163                           	psect	text52
 10164  1E82                     __ptext52:	
 10165 ;; *************** function _setSw_Enable *****************
 10166 ;; Defined at:
 10167 ;;		line 91 in file "../src/Switch_B1.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  command         1    wreg     unsigned char 
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  command         1    2[BANK0 ] unsigned char 
 10172 ;; Return value:  Size  Location     Type
 10173 ;;		None               void
 10174 ;; Registers used:
 10175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;Total ram usage:        1 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; Hardware stack levels required when called:    6
 10188 ;; This function calls:
 10189 ;;		_SwPointSelect
 10190 ;; This function is called by:
 10191 ;;		_setOverTemp_Exceptions
 10192 ;;		_setPowerFault_Exceptions
 10193 ;;		_my_MainTime
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           
 10198                           ;psect for function _setSw_Enable
 10199  1E82                     _setSw_Enable:	
 10200                           
 10201                           ;incstack = 0
 10202                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10203                           ;setSw_Enable@command stored from wreg
 10204  1E82  0020               	movlb	0	; select bank0
 10205  1E83  00A2               	movwf	setSw_Enable@command
 10206                           
 10207                           ;Switch_B1.c: 94: SwPointSelect(1);
 10208  1E84  3001               	movlw	1
 10209  1E85  319D  25DC         	fcall	_SwPointSelect
 10210                           
 10211                           ;Switch_B1.c: 95: Sw->Enable = command;
 10212  1E87  087A               	movf	_Sw,w
 10213  1E88  0086               	movwf	6
 10214  1E89  3001               	movlw	1	; select bank2/3
 10215  1E8A  0087               	movwf	7
 10216  1E8B  0020               	movlb	0	; select bank0
 10217  1E8C  0822               	movf	setSw_Enable@command,w
 10218  1E8D  1001               	bcf	1,0
 10219  1E8E  1D03               	skipz
 10220  1E8F  1401               	bsf	1,0
 10221  1E90  0008               	return
 10222  1E91                     __end_of_setSw_Enable:	
 10223                           
 10224                           	psect	text53
 10225  1E56                     __ptext53:	
 10226 ;; *************** function _setRF_Enable *****************
 10227 ;; Defined at:
 10228 ;;		line 232 in file "../src/RF_Control_B1.c"
 10229 ;; Parameters:    Size  Location     Type
 10230 ;;  command         1    wreg     unsigned char 
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;  command         1    0[BANK0 ] unsigned char 
 10233 ;; Return value:  Size  Location     Type
 10234 ;;		None               void
 10235 ;; Registers used:
 10236 ;;		wreg, status,2
 10237 ;; Tracked objects:
 10238 ;;		On entry : 0/0
 10239 ;;		On exit  : 0/0
 10240 ;;		Unchanged: 0/0
 10241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;Total ram usage:        1 bytes
 10247 ;; Hardware stack levels used:    1
 10248 ;; Hardware stack levels required when called:    5
 10249 ;; This function calls:
 10250 ;;		Nothing
 10251 ;; This function is called by:
 10252 ;;		_setOverTemp_Exceptions
 10253 ;;		_setPowerFault_Exceptions
 10254 ;;		_my_MainTime
 10255 ;; This function uses a non-reentrant model
 10256 ;;
 10257                           
 10258                           
 10259                           ;psect for function _setRF_Enable
 10260  1E56                     _setRF_Enable:	
 10261                           
 10262                           ;incstack = 0
 10263                           ; Regs used in _setRF_Enable: [wreg+status,2]
 10264                           ;setRF_Enable@command stored from wreg
 10265  1E56  0020               	movlb	0	; select bank0
 10266  1E57  00A0               	movwf	setRF_Enable@command
 10267                           
 10268                           ;RF_Control_B1.c: 233: RF1.Enable = command;
 10269  1E58  0820               	movf	setRF_Enable@command,w
 10270  1E59  0021               	movlb	1	; select bank1
 10271  1E5A  103E               	bcf	_RF1^(0+128),0
 10272  1E5B  1D03               	skipz
 10273  1E5C  143E               	bsf	_RF1^(0+128),0
 10274                           
 10275                           ;RF_Control_B1.c: 234: RF1.Learn = 0;
 10276  1E5D  133E               	bcf	_RF1^(0+128),6
 10277                           
 10278                           ;RF_Control_B1.c: 235: RF1.TransceiveGO = 0;
 10279  1E5E  113E               	bcf	_RF1^(0+128),2
 10280                           
 10281                           ;RF_Control_B1.c: 236: RF1.RxStatus = 0;
 10282  1E5F  11BE               	bcf	_RF1^(0+128),3
 10283                           
 10284                           ;RF_Control_B1.c: 237: RF1.ReceiveGO = 0;
 10285  1E60  10BE               	bcf	_RF1^(0+128),1
 10286                           
 10287                           ;RF_Control_B1.c: 238: RF1.DebounceTime = 0;
 10288  1E61  01C4               	clrf	(_RF1^(0+128)+6)
 10289                           
 10290                           ;RF_Control_B1.c: 239: RF1.Debounce = 0;
 10291  1E62  12BE               	bcf	_RF1^(0+128),5
 10292  1E63  0008               	return
 10293  1E64                     __end_of_setRF_Enable:	
 10294                           
 10295                           	psect	text54
 10296  1518                     __ptext54:	
 10297 ;; *************** function _DimmerLights_Exceptions *****************
 10298 ;; Defined at:
 10299 ;;		line 524 in file "../src/Dimmer_B1.c"
 10300 ;; Parameters:    Size  Location     Type
 10301 ;;  status          1    wreg     unsigned char 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  status          1   13[BANK0 ] unsigned char 
 10304 ;; Return value:  Size  Location     Type
 10305 ;;		None               void
 10306 ;; Registers used:
 10307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10308 ;; Tracked objects:
 10309 ;;		On entry : 0/0
 10310 ;;		On exit  : 0/0
 10311 ;;		Unchanged: 0/0
 10312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;Total ram usage:        1 bytes
 10318 ;; Hardware stack levels used:    1
 10319 ;; Hardware stack levels required when called:    8
 10320 ;; This function calls:
 10321 ;;		_getDimmerLights_StatusFlag
 10322 ;;		_setBuz
 10323 ;;		_setDimmerLights_ERROR
 10324 ;;		_setDimmerLights_TriggerERROR
 10325 ;; This function is called by:
 10326 ;;		_setOverTemp_Exceptions
 10327 ;;		_setPowerFault_Exceptions
 10328 ;; This function uses a non-reentrant model
 10329 ;;
 10330                           
 10331                           
 10332                           ;psect for function _DimmerLights_Exceptions
 10333  1518                     _DimmerLights_Exceptions:	
 10334                           
 10335                           ;incstack = 0
 10336                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10337                           ;DimmerLights_Exceptions@status stored from wreg
 10338  1518  0020               	movlb	0	; select bank0
 10339  1519  00AD               	movwf	DimmerLights_Exceptions@status
 10340                           
 10341                           ;Dimmer_B1.c: 525: if (status == 1) {
 10342  151A  082D               	movf	DimmerLights_Exceptions@status,w
 10343  151B  3A01               	xorlw	1
 10344  151C  1D03               	skipz
 10345  151D  2D2E               	goto	l8222
 10346                           
 10347                           ;Dimmer_B1.c: 526: if (getDimmerLights_StatusFlag() == 1) {
 10348  151E  319D  25B1  3195   	fcall	_getDimmerLights_StatusFlag
 10349  1521  3A01               	xorlw	1
 10350  1522  1D03               	skipz
 10351  1523  2D46               	goto	l8230
 10352                           
 10353                           ;Dimmer_B1.c: 527: setBuz(10, 300);
 10354  1524  302C               	movlw	44
 10355  1525  0020               	movlb	0	; select bank0
 10356  1526  00A9               	movwf	setBuz@time
 10357  1527  3001               	movlw	1
 10358  1528  00AA               	movwf	setBuz@time+1
 10359  1529  300A               	movlw	10
 10360  152A  3188  2050  3195   	fcall	_setBuz
 10361  152D  2D46               	goto	l8230
 10362  152E                     l8222:	
 10363                           ;Dimmer_B1.c: 539: } else if (status == 2)
 10364                           
 10365                           ;Dimmer_B1.c: 528: }
 10366                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(1);
 10367                           
 10368  152E  0020               	movlb	0	; select bank0
 10369  152F  082D               	movf	DimmerLights_Exceptions@status,w
 10370  1530  3A02               	xorlw	2
 10371  1531  1D03               	skipz
 10372  1532  2D41               	goto	l8228
 10373                           
 10374                           ;Dimmer_B1.c: 540: {
 10375                           ;Dimmer_B1.c: 541: setBuz(5, 300);
 10376  1533  302C               	movlw	44
 10377  1534  00A9               	movwf	setBuz@time
 10378  1535  3001               	movlw	1
 10379  1536  00AA               	movwf	setBuz@time+1
 10380  1537  3005               	movlw	5
 10381  1538  3188  2050  3195   	fcall	_setBuz
 10382                           
 10383                           ;Dimmer_B1.c: 542: setDimmerLights_ERROR(Dimmer->Load);
 10384  153B  0A77               	incf	_Dimmer,w
 10385  153C  0086               	movwf	6
 10386  153D  3001               	movlw	1	; select bank2/3
 10387  153E  0087               	movwf	7
 10388  153F  0801               	movf	1,w
 10389  1540  2D47               	goto	L4
 10390  1541                     l8228:	
 10391                           ;Dimmer_B1.c: 543: } else if (status == 3)
 10392                           
 10393  1541  0020               	movlb	0	; select bank0
 10394  1542  082D               	movf	DimmerLights_Exceptions@status,w
 10395  1543  3A03               	xorlw	3
 10396  1544  1D03               	skipz
 10397  1545  2D4A               	goto	l797
 10398  1546                     l8230:	
 10399                           
 10400                           ;Dimmer_B1.c: 544: {
 10401                           ;Dimmer_B1.c: 546: setDimmerLights_ERROR(1);
 10402  1546  3001               	movlw	1
 10403  1547                     L4:	
 10404  1547  3188  2001  3195   	fcall	_setDimmerLights_ERROR
 10405  154A                     l797:	
 10406                           
 10407                           ;Dimmer_B1.c: 554: }
 10408                           ;Dimmer_B1.c: 557: setDimmerLights_TriggerERROR(1, 0);
 10409  154A  0020               	movlb	0	; select bank0
 10410  154B  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10411  154C  3001               	movlw	1
 10412  154D  3192  22A1  3195   	fcall	_setDimmerLights_TriggerERROR
 10413                           
 10414                           ;Dimmer_B1.c: 566: if (myMain.SelfTest == 0) {
 10415  1550  0021               	movlb	1	; select bank1
 10416  1551  1B20               	btfsc	_myMain^(0+128),6
 10417  1552  0008               	return
 10418                           
 10419                           ;Dimmer_B1.c: 567: myMain.i = 0;
 10420  1553  102E               	bcf	(_myMain^(0+128)+14),0
 10421                           
 10422                           ;Dimmer_B1.c: 568: myMain.j = 0;
 10423  1554  10AE               	bcf	(_myMain^(0+128)+14),1
 10424                           
 10425                           ;Dimmer_B1.c: 569: myMain.k = 1;
 10426  1555  152E               	bsf	(_myMain^(0+128)+14),2
 10427                           
 10428                           ;Dimmer_B1.c: 570: myMain.Count2 = 0;
 10429  1556  01A7               	clrf	(_myMain^(0+128)+7)
 10430  1557  01A8               	clrf	((_myMain+1)^(0+128)+7)
 10431  1558  0008               	return
 10432  1559                     __end_of_DimmerLights_Exceptions:	
 10433                           
 10434                           	psect	text55
 10435  12A1                     __ptext55:	
 10436 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10437 ;; Defined at:
 10438 ;;		line 593 in file "../src/Dimmer_B1.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  lights          1    wreg     unsigned char 
 10441 ;;  command         1    2[BANK0 ] unsigned char 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  lights          1    3[BANK0 ] unsigned char 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;		None               void
 10446 ;; Registers used:
 10447 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10453 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;Total ram usage:        2 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; Hardware stack levels required when called:    6
 10460 ;; This function calls:
 10461 ;;		_DimmerLightsPointSelect
 10462 ;; This function is called by:
 10463 ;;		_DimmerLights_Exceptions
 10464 ;; This function uses a non-reentrant model
 10465 ;;
 10466                           
 10467                           
 10468                           ;psect for function _setDimmerLights_TriggerERROR
 10469  12A1                     _setDimmerLights_TriggerERROR:	
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10473                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10474  12A1  0020               	movlb	0	; select bank0
 10475  12A2  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10476                           
 10477                           ;Dimmer_B1.c: 595: DimmerLightsPointSelect(lights);
 10478  12A3  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10479  12A4  319D  25D1         	fcall	_DimmerLightsPointSelect
 10480                           
 10481                           ;Dimmer_B1.c: 596: DimmerLights->Trigger = command;
 10482  12A6  0020               	movlb	0	; select bank0
 10483  12A7  086D               	movf	_DimmerLights,w
 10484  12A8  3E08               	addlw	8
 10485  12A9  0086               	movwf	6
 10486  12AA  3001               	movlw	1	; select bank2/3
 10487  12AB  0087               	movwf	7
 10488  12AC  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10489  12AD  1101               	bcf	1,2
 10490  12AE  1D03               	skipz
 10491  12AF  1501               	bsf	1,2
 10492                           
 10493                           ;Dimmer_B1.c: 597: DimmerLights->Switch = command;
 10494  12B0  086D               	movf	_DimmerLights,w
 10495  12B1  3E08               	addlw	8
 10496  12B2  0086               	movwf	6
 10497  12B3  3001               	movlw	1	; select bank2/3
 10498  12B4  0087               	movwf	7
 10499  12B5  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10500  12B6  1081               	bcf	1,1
 10501  12B7  1D03               	skipz
 10502  12B8  1481               	bsf	1,1
 10503                           
 10504                           ;Dimmer_B1.c: 598: DimmerLights->TriggerAdj = command;
 10505  12B9  086D               	movf	_DimmerLights,w
 10506  12BA  3E08               	addlw	8
 10507  12BB  0086               	movwf	6
 10508  12BC  3001               	movlw	1	; select bank2/3
 10509  12BD  0087               	movwf	7
 10510  12BE  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10511  12BF  1201               	bcf	1,4
 10512  12C0  1D03               	skipz
 10513  12C1  1601               	bsf	1,4
 10514                           
 10515                           ;Dimmer_B1.c: 599: DimmerLights->AdjGo = command;
 10516  12C2  086D               	movf	_DimmerLights,w
 10517  12C3  3E08               	addlw	8
 10518  12C4  0086               	movwf	6
 10519  12C5  3001               	movlw	1	; select bank2/3
 10520  12C6  0087               	movwf	7
 10521  12C7  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10522  12C8  1181               	bcf	1,3
 10523  12C9  1D03               	skipz
 10524  12CA  1581               	bsf	1,3
 10525  12CB  0008               	return
 10526  12CC                     __end_of_setDimmerLights_TriggerERROR:	
 10527                           
 10528                           	psect	text56
 10529  0801                     __ptext56:	
 10530 ;; *************** function _setDimmerLights_ERROR *****************
 10531 ;; Defined at:
 10532 ;;		line 575 in file "../src/Dimmer_B1.c"
 10533 ;; Parameters:    Size  Location     Type
 10534 ;;  lights          1    wreg     unsigned char 
 10535 ;; Auto vars:     Size  Location     Type
 10536 ;;  lights          1    5[BANK0 ] unsigned char 
 10537 ;; Return value:  Size  Location     Type
 10538 ;;		None               void
 10539 ;; Registers used:
 10540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10541 ;; Tracked objects:
 10542 ;;		On entry : 0/0
 10543 ;;		On exit  : 0/0
 10544 ;;		Unchanged: 0/0
 10545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10550 ;;Total ram usage:        2 bytes
 10551 ;; Hardware stack levels used:    1
 10552 ;; Hardware stack levels required when called:    7
 10553 ;; This function calls:
 10554 ;;		_DimmerLightsPointSelect
 10555 ;;		_setLED
 10556 ;;		_setRFSW_Status
 10557 ;;		_setSw_Status
 10558 ;; This function is called by:
 10559 ;;		_DimmerLights_Exceptions
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           
 10564                           ;psect for function _setDimmerLights_ERROR
 10565  0801                     _setDimmerLights_ERROR:	
 10566                           
 10567                           ;incstack = 0
 10568                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10569                           ;setDimmerLights_ERROR@lights stored from wreg
 10570  0801  0020               	movlb	0	; select bank0
 10571  0802  00A5               	movwf	setDimmerLights_ERROR@lights
 10572                           
 10573                           ;Dimmer_B1.c: 576: DimmerLightsPointSelect(lights);
 10574  0803  0825               	movf	setDimmerLights_ERROR@lights,w
 10575  0804  319D  25D1  3188   	fcall	_DimmerLightsPointSelect
 10576                           
 10577                           ;Dimmer_B1.c: 577: if (DimmerLights->Status == 1) {
 10578  0807  0020               	movlb	0	; select bank0
 10579  0808  086D               	movf	_DimmerLights,w
 10580  0809  0086               	movwf	6
 10581  080A  3001               	movlw	1	; select bank2/3
 10582  080B  0087               	movwf	7
 10583  080C  1E81               	btfss	1,5
 10584  080D  0008               	return
 10585                           
 10586                           ;Dimmer_B1.c: 579: DimmerLights->Signal = 0;
 10587  080E  086D               	movf	_DimmerLights,w
 10588  080F  0086               	movwf	6
 10589  0810  3001               	movlw	1	; select bank2/3
 10590  0811  0087               	movwf	7
 10591  0812  1081               	bcf	1,1
 10592                           
 10593                           ;Dimmer_B1.c: 580: DimmerLights->AdjFlag = 0;
 10594  0813  086D               	movf	_DimmerLights,w
 10595  0814  0086               	movwf	6
 10596  0815  3001               	movlw	1	; select bank2/3
 10597  0816  0087               	movwf	7
 10598  0817  1181               	bcf	1,3
 10599                           
 10600                           ;Dimmer_B1.c: 581: DimmerLights->AdjStatus = 0;
 10601  0818  086D               	movf	_DimmerLights,w
 10602  0819  0086               	movwf	6
 10603  081A  3001               	movlw	1	; select bank2/3
 10604  081B  0087               	movwf	7
 10605  081C  1201               	bcf	1,4
 10606                           
 10607                           ;Dimmer_B1.c: 582: DimmerLights->StatusFlag = 0;
 10608  081D  086D               	movf	_DimmerLights,w
 10609  081E  0086               	movwf	6
 10610  081F  3001               	movlw	1	; select bank2/3
 10611  0820  0087               	movwf	7
 10612  0821  1301               	bcf	1,6
 10613                           
 10614                           ;Dimmer_B1.c: 583: DimmerLights->DimmingTimeValue = 7;
 10615  0822  3007               	movlw	7
 10616  0823  00A4               	movwf	??_setDimmerLights_ERROR
 10617  0824  086D               	movf	_DimmerLights,w
 10618  0825  3E02               	addlw	2
 10619  0826  0086               	movwf	6
 10620  0827  3001               	movlw	1	; select bank2/3
 10621  0828  0087               	movwf	7
 10622  0829  0824               	movf	??_setDimmerLights_ERROR,w
 10623  082A  0081               	movwf	1
 10624                           
 10625                           ;Dimmer_B1.c: 584: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10626  082B  086D               	movf	_DimmerLights,w
 10627  082C  3E06               	addlw	6
 10628  082D  0086               	movwf	6
 10629  082E  3001               	movlw	1	; select bank2/3
 10630  082F  0087               	movwf	7
 10631  0830  0801               	movf	1,w
 10632  0831  00A4               	movwf	??_setDimmerLights_ERROR
 10633  0832  086D               	movf	_DimmerLights,w
 10634  0833  3E04               	addlw	4
 10635  0834  0086               	movwf	6
 10636  0835  3001               	movlw	1	; select bank2/3
 10637  0836  0087               	movwf	7
 10638  0837  0824               	movf	??_setDimmerLights_ERROR,w
 10639  0838  0081               	movwf	1
 10640                           
 10641                           ;Dimmer_B1.c: 585: Dimmer->Detect = 1;
 10642  0839  0877               	movf	_Dimmer,w
 10643  083A  0086               	movwf	6
 10644  083B  3001               	movlw	1	; select bank2/3
 10645  083C  0087               	movwf	7
 10646  083D  1401               	bsf	1,0
 10647                           
 10648                           ;Dimmer_B1.c: 586: ;;
 10649                           ;Dimmer_B1.c: 587: setLED(lights, 1);
 10650  083E  01A2               	clrf	setLED@command
 10651  083F  0AA2               	incf	setLED@command,f
 10652  0840  0825               	movf	setDimmerLights_ERROR@lights,w
 10653  0841  3189  215F  3188   	fcall	_setLED
 10654                           
 10655                           ;Dimmer_B1.c: 588: setSw_Status(lights, 0);
 10656  0844  0020               	movlb	0	; select bank0
 10657  0845  01A2               	clrf	setSw_Status@command
 10658  0846  0825               	movf	setDimmerLights_ERROR@lights,w
 10659  0847  319E  2673  3188   	fcall	_setSw_Status
 10660                           
 10661                           ;Dimmer_B1.c: 589: setRFSW_Status(lights, 0);
 10662  084A  0020               	movlb	0	; select bank0
 10663  084B  01A2               	clrf	setRFSW_Status@command
 10664  084C  0825               	movf	setDimmerLights_ERROR@lights,w
 10665  084D  319E  2664         	fcall	_setRFSW_Status
 10666  084F  0008               	return
 10667  0850                     __end_of_setDimmerLights_ERROR:	
 10668                           
 10669                           	psect	text57
 10670  1D6B                     __ptext57:	
 10671 ;; *************** function _getTemp_Safe *****************
 10672 ;; Defined at:
 10673 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10674 ;; Parameters:    Size  Location     Type
 10675 ;;		None
 10676 ;; Auto vars:     Size  Location     Type
 10677 ;;  result          1    0[BANK0 ] unsigned char 
 10678 ;; Return value:  Size  Location     Type
 10679 ;;                  1    wreg      unsigned char 
 10680 ;; Registers used:
 10681 ;;		wreg, status,2
 10682 ;; Tracked objects:
 10683 ;;		On entry : 0/0
 10684 ;;		On exit  : 0/0
 10685 ;;		Unchanged: 0/0
 10686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;Total ram usage:        1 bytes
 10692 ;; Hardware stack levels used:    1
 10693 ;; Hardware stack levels required when called:    5
 10694 ;; This function calls:
 10695 ;;		Nothing
 10696 ;; This function is called by:
 10697 ;;		_setPowerFault_Main
 10698 ;; This function uses a non-reentrant model
 10699 ;;
 10700                           
 10701                           
 10702                           ;psect for function _getTemp_Safe
 10703  1D6B                     _getTemp_Safe:	
 10704                           
 10705                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 10706                           
 10707                           ;incstack = 0
 10708                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 10709  1D6B  3000               	movlw	0
 10710  1D6C  0021               	movlb	1	; select bank1
 10711  1D6D  1A5E               	btfsc	_Temp1^(0+128),4
 10712  1D6E  3001               	movlw	1
 10713  1D6F  0020               	movlb	0	; select bank0
 10714  1D70  00A0               	movwf	getTemp_Safe@result
 10715                           
 10716                           ;OverTemperature_B1.c: 23: return result;
 10717  1D71  0820               	movf	getTemp_Safe@result,w
 10718  1D72  0008               	return
 10719  1D73                     __end_of_getTemp_Safe:	
 10720                           
 10721                           	psect	text58
 10722  1D05                     __ptext58:	
 10723 ;; *************** function _PowerFault_Initialization *****************
 10724 ;; Defined at:
 10725 ;;		line 10 in file "../src/PowerFault_B1.c"
 10726 ;; Parameters:    Size  Location     Type
 10727 ;;		None
 10728 ;; Auto vars:     Size  Location     Type
 10729 ;;		None
 10730 ;; Return value:  Size  Location     Type
 10731 ;;		None               void
 10732 ;; Registers used:
 10733 ;;		status,2, status,0, pclath, cstack
 10734 ;; Tracked objects:
 10735 ;;		On entry : 0/0
 10736 ;;		On exit  : 0/0
 10737 ;;		Unchanged: 0/0
 10738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;Total ram usage:        0 bytes
 10744 ;; Hardware stack levels used:    1
 10745 ;; Hardware stack levels required when called:    6
 10746 ;; This function calls:
 10747 ;;		_setPowerFault_Initialization
 10748 ;; This function is called by:
 10749 ;;		_main
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function _PowerFault_Initialization
 10755  1D05                     _PowerFault_Initialization:	
 10756                           
 10757                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10758                           
 10759                           ;incstack = 0
 10760                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10761  1D05  319D  2536         	fcall	_setPowerFault_Initialization
 10762  1D07  0008               	return
 10763  1D08                     __end_of_PowerFault_Initialization:	
 10764                           
 10765                           	psect	text59
 10766  1D36                     __ptext59:	
 10767 ;; *************** function _setPowerFault_Initialization *****************
 10768 ;; Defined at:
 10769 ;;		line 24 in file "../src/PowerFault_B1.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;		None
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;		None
 10774 ;; Return value:  Size  Location     Type
 10775 ;;		None               void
 10776 ;; Registers used:
 10777 ;;		None
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;Total ram usage:        0 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    5
 10790 ;; This function calls:
 10791 ;;		Nothing
 10792 ;; This function is called by:
 10793 ;;		_PowerFault_Initialization
 10794 ;; This function uses a non-reentrant model
 10795 ;;
 10796                           
 10797                           
 10798                           ;psect for function _setPowerFault_Initialization
 10799  1D36                     _setPowerFault_Initialization:	
 10800                           
 10801                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10802                           
 10803                           ;incstack = 0
 10804                           ; Regs used in _setPowerFault_Initialization: []
 10805  1D36  0021               	movlb	1	; select bank1
 10806  1D37  1447               	bsf	_PF1^(0+128),0
 10807                           
 10808                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10809  1D38  1547               	bsf	_PF1^(0+128),2
 10810  1D39  0008               	return
 10811  1D3A                     __end_of_setPowerFault_Initialization:	
 10812                           
 10813                           	psect	text60
 10814  1F21                     __ptext60:	
 10815 ;; *************** function _Mcu_Initialization *****************
 10816 ;; Defined at:
 10817 ;;		line 30 in file "../src/MCU_B1.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;		None
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;		None
 10822 ;; Return value:  Size  Location     Type
 10823 ;;		None               void
 10824 ;; Registers used:
 10825 ;;		wreg, status,2, status,0, pclath, cstack
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10835 ;;Total ram usage:        0 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; Hardware stack levels required when called:    6
 10838 ;; This function calls:
 10839 ;;		_ADC_Set
 10840 ;;		_Fosc_Set
 10841 ;;		_IOC_Set
 10842 ;;		_IO_Set
 10843 ;;		_TMR0_Set
 10844 ;;		_WDT_Set
 10845 ;; This function is called by:
 10846 ;;		_main
 10847 ;; This function uses a non-reentrant model
 10848 ;;
 10849                           
 10850                           
 10851                           ;psect for function _Mcu_Initialization
 10852  1F21                     _Mcu_Initialization:	
 10853                           
 10854                           ;MCU_B1.c: 32: Fosc_Set();
 10855                           
 10856                           ;incstack = 0
 10857                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10858  1F21  319D  2532  319F   	fcall	_Fosc_Set
 10859                           
 10860                           ;MCU_B1.c: 34: IO_Set();
 10861  1F24  319F  27B3  319F   	fcall	_IO_Set
 10862                           
 10863                           ;MCU_B1.c: 36: TMR0_Set();
 10864  1F27  319D  2563  319F   	fcall	_TMR0_Set
 10865                           
 10866                           ;MCU_B1.c: 38: ;;
 10867                           ;MCU_B1.c: 40: ADC_Set();
 10868  1F2A  319D  255C  319F   	fcall	_ADC_Set
 10869                           
 10870                           ;MCU_B1.c: 44: ;;
 10871                           ;MCU_B1.c: 46: IOC_Set();
 10872  1F2D  319E  263C  319F   	fcall	_IOC_Set
 10873                           
 10874                           ;MCU_B1.c: 48: ;;
 10875                           ;MCU_B1.c: 50: ;;
 10876                           ;MCU_B1.c: 52: WDT_Set();
 10877  1F30  319D  25E7         	fcall	_WDT_Set
 10878  1F32  0008               	return
 10879  1F33                     __end_of_Mcu_Initialization:	
 10880                           
 10881                           	psect	text61
 10882  1DE7                     __ptext61:	
 10883 ;; *************** function _WDT_Set *****************
 10884 ;; Defined at:
 10885 ;;		line 895 in file "../src/MCU_B1.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;		None               void
 10892 ;; Registers used:
 10893 ;;		wreg
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:        1 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    5
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		_Mcu_Initialization
 10910 ;; This function uses a non-reentrant model
 10911 ;;
 10912                           
 10913                           
 10914                           ;psect for function _WDT_Set
 10915  1DE7                     _WDT_Set:	
 10916                           
 10917                           ;MCU_B1.c: 896: WDTCON = 0b00010111;;
 10918                           
 10919                           ;incstack = 0
 10920                           ; Regs used in _WDT_Set: [wreg]
 10921  1DE7  3017               	movlw	23
 10922  1DE8  0021               	movlb	1	; select bank1
 10923  1DE9  0097               	movwf	23	;volatile
 10924                           
 10925                           ;MCU_B1.c: 897: WDT.Enable = 1;
 10926  1DEA  1451               	bsf	_WDT^(0+128),0
 10927                           
 10928                           ;MCU_B1.c: 898: WDT.Count = 10;
 10929  1DEB  300A               	movlw	10
 10930  1DEC  0020               	movlb	0	; select bank0
 10931  1DED  00A0               	movwf	??_WDT_Set
 10932  1DEE  0820               	movf	??_WDT_Set,w
 10933  1DEF  0021               	movlb	1	; select bank1
 10934  1DF0  00D2               	movwf	(_WDT^(0+128)+1)
 10935  1DF1  0008               	return
 10936  1DF2                     __end_of_WDT_Set:	
 10937                           
 10938                           	psect	text62
 10939  1D63                     __ptext62:	
 10940 ;; *************** function _TMR0_Set *****************
 10941 ;; Defined at:
 10942 ;;		line 126 in file "../src/MCU_B1.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;		None
 10947 ;; Return value:  Size  Location     Type
 10948 ;;		None               void
 10949 ;; Registers used:
 10950 ;;		wreg, status,2
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;Total ram usage:        0 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    5
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		_Mcu_Initialization
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           
 10971                           ;psect for function _TMR0_Set
 10972  1D63                     _TMR0_Set:	
 10973                           
 10974                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10975                           
 10976                           ;incstack = 0
 10977                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10978  1D63  0021               	movlb	1	; select bank1
 10979  1D64  0195               	clrf	21	;volatile
 10980                           
 10981                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10982  1D65  3042               	movlw	66
 10983  1D66  0020               	movlb	0	; select bank0
 10984  1D67  0095               	movwf	21	;volatile
 10985                           
 10986                           ;MCU_B1.c: 130: TMR0IE = 1;
 10987  1D68  168B               	bsf	11,5	;volatile
 10988                           
 10989                           ;MCU_B1.c: 131: GIE = 1;
 10990  1D69  178B               	bsf	11,7	;volatile
 10991  1D6A  0008               	return
 10992  1D6B                     __end_of_TMR0_Set:	
 10993                           
 10994                           	psect	text63
 10995  1FB3                     __ptext63:	
 10996 ;; *************** function _IO_Set *****************
 10997 ;; Defined at:
 10998 ;;		line 60 in file "../src/MCU_B1.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;		None               void
 11005 ;; Registers used:
 11006 ;;		wreg, status,2
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:        0 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    5
 11019 ;; This function calls:
 11020 ;;		Nothing
 11021 ;; This function is called by:
 11022 ;;		_Mcu_Initialization
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _IO_Set
 11028  1FB3                     _IO_Set:	
 11029                           
 11030                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _IO_Set: [wreg+status,2]
 11034  1FB3  3077               	movlw	119
 11035  1FB4  0021               	movlb	1	; select bank1
 11036  1FB5  008C               	movwf	12	;volatile
 11037                           
 11038                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 11039  1FB6  3007               	movlw	7
 11040  1FB7  008D               	movwf	13	;volatile
 11041                           
 11042                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 11043  1FB8  300C               	movlw	12
 11044  1FB9  008E               	movwf	14	;volatile
 11045                           
 11046                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 11047  1FBA  0022               	movlb	2	; select bank2
 11048  1FBB  018C               	clrf	12	;volatile
 11049                           
 11050                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 11051  1FBC  3002               	movlw	2
 11052  1FBD  008D               	movwf	13	;volatile
 11053                           
 11054                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 11055  1FBE  018E               	clrf	14	;volatile
 11056                           
 11057                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 11058  1FBF  3022               	movlw	34
 11059  1FC0  0023               	movlb	3	; select bank3
 11060  1FC1  008C               	movwf	12	;volatile
 11061                           
 11062                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 11063  1FC2  018D               	clrf	13	;volatile
 11064                           
 11065                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 11066  1FC3  018E               	clrf	14	;volatile
 11067                           
 11068                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 11069  1FC4  3077               	movlw	119
 11070  1FC5  0020               	movlb	0	; select bank0
 11071  1FC6  008C               	movwf	12	;volatile
 11072                           
 11073                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 11074  1FC7  3007               	movlw	7
 11075  1FC8  008D               	movwf	13	;volatile
 11076                           
 11077                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 11078  1FC9  300C               	movlw	12
 11079  1FCA  008E               	movwf	14	;volatile
 11080  1FCB  0008               	return
 11081  1FCC                     __end_of_IO_Set:	
 11082                           
 11083                           	psect	text64
 11084  1E3C                     __ptext64:	
 11085 ;; *************** function _IOC_Set *****************
 11086 ;; Defined at:
 11087 ;;		line 263 in file "../src/MCU_B1.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;		None
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;		None
 11092 ;; Return value:  Size  Location     Type
 11093 ;;		None               void
 11094 ;; Registers used:
 11095 ;;		wreg, status,2
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;Total ram usage:        0 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    5
 11108 ;; This function calls:
 11109 ;;		Nothing
 11110 ;; This function is called by:
 11111 ;;		_Mcu_Initialization
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _IOC_Set
 11117  1E3C                     _IOC_Set:	
 11118                           
 11119                           ;MCU_B1.c: 264: WPUB2 = 0;
 11120                           
 11121                           ;incstack = 0
 11122                           ; Regs used in _IOC_Set: [wreg+status,2]
 11123  1E3C  0024               	movlb	4	; select bank4
 11124  1E3D  110D               	bcf	13,2	;volatile
 11125                           
 11126                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 11127  1E3E  3004               	movlw	4
 11128  1E3F  0027               	movlb	7	; select bank7
 11129  1E40  0094               	movwf	20	;volatile
 11130                           
 11131                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 11132  1E41  3004               	movlw	4
 11133  1E42  0095               	movwf	21	;volatile
 11134                           
 11135                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 11136  1E43  0196               	clrf	22	;volatile
 11137                           
 11138                           ;MCU_B1.c: 284: IOCIE = 1;
 11139  1E44  158B               	bsf	11,3	;volatile
 11140                           
 11141                           ;MCU_B1.c: 285: IOCIF = 0;
 11142  1E45  100B               	bcf	11,0	;volatile
 11143                           
 11144                           ;MCU_B1.c: 286: PEIE = 1;
 11145  1E46  170B               	bsf	11,6	;volatile
 11146                           
 11147                           ;MCU_B1.c: 287: GIE = 1;
 11148  1E47  178B               	bsf	11,7	;volatile
 11149  1E48  0008               	return
 11150  1E49                     __end_of_IOC_Set:	
 11151                           
 11152                           	psect	text65
 11153  1D32                     __ptext65:	
 11154 ;; *************** function _Fosc_Set *****************
 11155 ;; Defined at:
 11156 ;;		line 56 in file "../src/MCU_B1.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;		None               void
 11163 ;; Registers used:
 11164 ;;		wreg
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    5
 11177 ;; This function calls:
 11178 ;;		Nothing
 11179 ;; This function is called by:
 11180 ;;		_Mcu_Initialization
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function _Fosc_Set
 11186  1D32                     _Fosc_Set:	
 11187                           
 11188                           ;MCU_B1.c: 57: OSCCON = 0x78;
 11189                           
 11190                           ;incstack = 0
 11191                           ; Regs used in _Fosc_Set: [wreg]
 11192  1D32  3078               	movlw	120
 11193  1D33  0021               	movlb	1	; select bank1
 11194  1D34  0099               	movwf	25	;volatile
 11195  1D35  0008               	return
 11196  1D36                     __end_of_Fosc_Set:	
 11197                           
 11198                           	psect	text66
 11199  1D5C                     __ptext66:	
 11200 ;; *************** function _ADC_Set *****************
 11201 ;; Defined at:
 11202 ;;		line 309 in file "../src/MCU_B1.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;		None
 11205 ;; Auto vars:     Size  Location     Type
 11206 ;;		None
 11207 ;; Return value:  Size  Location     Type
 11208 ;;		None               void
 11209 ;; Registers used:
 11210 ;;		wreg
 11211 ;; Tracked objects:
 11212 ;;		On entry : 0/0
 11213 ;;		On exit  : 0/0
 11214 ;;		Unchanged: 0/0
 11215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;Total ram usage:        0 bytes
 11221 ;; Hardware stack levels used:    1
 11222 ;; Hardware stack levels required when called:    5
 11223 ;; This function calls:
 11224 ;;		Nothing
 11225 ;; This function is called by:
 11226 ;;		_Mcu_Initialization
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           
 11231                           ;psect for function _ADC_Set
 11232  1D5C                     _ADC_Set:	
 11233                           
 11234                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in _ADC_Set: [wreg]
 11238  1D5C  30F2               	movlw	242
 11239  1D5D  0021               	movlb	1	; select bank1
 11240  1D5E  009E               	movwf	30	;volatile
 11241                           
 11242                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 11243  1D5F  30C0               	movlw	192
 11244  1D60  0022               	movlb	2	; select bank2
 11245  1D61  0097               	movwf	23	;volatile
 11246  1D62  0008               	return
 11247  1D63                     __end_of_ADC_Set:	
 11248                           
 11249                           	psect	text67
 11250  07F4                     __ptext67:	
 11251 ;; *************** function _LED_Main *****************
 11252 ;; Defined at:
 11253 ;;		line 47 in file "../src/LED_B1.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;		None
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;		None
 11258 ;; Return value:  Size  Location     Type
 11259 ;;		None               void
 11260 ;; Registers used:
 11261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;Total ram usage:        0 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    7
 11274 ;; This function calls:
 11275 ;;		_setLED_Main
 11276 ;; This function is called by:
 11277 ;;		_main
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _LED_Main
 11283  07F4                     _LED_Main:	
 11284                           
 11285                           ;LED_B1.c: 49: setLED_Main(1);
 11286                           
 11287                           ;incstack = 0
 11288                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11289  07F4  3001               	movlw	1
 11290  07F5  3194  24D7  3187   	fcall	_setLED_Main
 11291                           
 11292                           ;LED_B1.c: 52: setLED_Main(2);
 11293  07F8  3002               	movlw	2
 11294  07F9  3194  24D7  3187   	fcall	_setLED_Main
 11295                           
 11296                           ;LED_B1.c: 58: setLED_Main(99);
 11297  07FC  3063               	movlw	99
 11298  07FD  3194  24D7         	fcall	_setLED_Main
 11299  07FF  0008               	return
 11300  0800                     __end_of_LED_Main:	
 11301                           
 11302                           	psect	text68
 11303  14D7                     __ptext68:	
 11304 ;; *************** function _setLED_Main *****************
 11305 ;; Defined at:
 11306 ;;		line 192 in file "../src/LED_B1.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  led             1    wreg     unsigned char 
 11309 ;; Auto vars:     Size  Location     Type
 11310 ;;  led             1    4[BANK0 ] unsigned char 
 11311 ;; Return value:  Size  Location     Type
 11312 ;;		None               void
 11313 ;; Registers used:
 11314 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;Total ram usage:        3 bytes
 11325 ;; Hardware stack levels used:    1
 11326 ;; Hardware stack levels required when called:    6
 11327 ;; This function calls:
 11328 ;;		_LedPointSelect
 11329 ;; This function is called by:
 11330 ;;		_LED_Main
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           
 11335                           ;psect for function _setLED_Main
 11336  14D7                     _setLED_Main:	
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11340                           ;setLED_Main@led stored from wreg
 11341  14D7  0020               	movlb	0	; select bank0
 11342  14D8  00A4               	movwf	setLED_Main@led
 11343                           
 11344                           ;LED_B1.c: 193: LedPointSelect(led);
 11345  14D9  0824               	movf	setLED_Main@led,w
 11346  14DA  3190  207A  3194   	fcall	_LedPointSelect
 11347                           
 11348                           ;LED_B1.c: 194: if (LED->GO == 1) {
 11349  14DD  0879               	movf	_LED,w
 11350  14DE  0086               	movwf	6
 11351  14DF  3001               	movlw	1	; select bank2/3
 11352  14E0  0087               	movwf	7
 11353  14E1  1C81               	btfss	1,1
 11354  14E2  0008               	return
 11355                           
 11356                           ;LED_B1.c: 195: LED->Time++;
 11357  14E3  0A79               	incf	_LED,w
 11358  14E4  0086               	movwf	6
 11359  14E5  3001               	movlw	1	; select bank2/3
 11360  14E6  0087               	movwf	7
 11361  14E7  3001               	movlw	1
 11362  14E8  0781               	addwf	1,f
 11363  14E9  3141               	addfsr 1,1
 11364  14EA  1803               	skipnc
 11365  14EB  0A81               	incf	1,f
 11366                           
 11367                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 11368  14EC  0A79               	incf	_LED,w
 11369  14ED  0086               	movwf	6
 11370  14EE  3001               	movlw	1	; select bank2/3
 11371  14EF  0087               	movwf	7
 11372  14F0  3F40               	moviw [0]fsr1
 11373  14F1  0020               	movlb	0	; select bank0
 11374  14F2  00A2               	movwf	??_setLED_Main
 11375  14F3  3F41               	moviw [1]fsr1
 11376  14F4  00A3               	movwf	??_setLED_Main+1
 11377  14F5  3000               	movlw	0
 11378  14F6  0223               	subwf	??_setLED_Main+1,w
 11379  14F7  3032               	movlw	50
 11380  14F8  1903               	skipnz
 11381  14F9  0222               	subwf	??_setLED_Main,w
 11382  14FA  1C03               	skipc
 11383  14FB  0008               	return
 11384                           
 11385                           ;LED_B1.c: 197: LED->Time = 0;
 11386  14FC  0A79               	incf	_LED,w
 11387  14FD  0086               	movwf	6
 11388  14FE  3001               	movlw	1	; select bank2/3
 11389  14FF  0087               	movwf	7
 11390  1500  3000               	movlw	0
 11391  1501  3FC0               	movwi [0]fsr1
 11392  1502  3FC1               	movwi [1]fsr1
 11393                           
 11394                           ;LED_B1.c: 199: if (led == 1) {
 11395  1503  0824               	movf	setLED_Main@led,w
 11396  1504  3A01               	xorlw	1
 11397  1505  1D03               	skipz
 11398  1506  2D0A               	goto	l8852
 11399                           
 11400                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 11401  1507  3008               	movlw	8
 11402  1508  068C               	xorwf	12,f
 11403                           
 11404                           ;LED_B1.c: 201: }
 11405  1509  0008               	return
 11406  150A                     l8852:	
 11407                           
 11408                           ;LED_B1.c: 204: else if (led == 2) {
 11409  150A  0824               	movf	setLED_Main@led,w
 11410  150B  3A02               	xorlw	2
 11411  150C  1D03               	skipz
 11412  150D  2D11               	goto	l8856
 11413                           
 11414                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 11415  150E  3080               	movlw	128
 11416  150F  068E               	xorwf	14,f
 11417                           
 11418                           ;LED_B1.c: 206: }
 11419  1510  0008               	return
 11420  1511                     l8856:	
 11421                           
 11422                           ;LED_B1.c: 214: else if (led == 99) {
 11423  1511  0824               	movf	setLED_Main@led,w
 11424  1512  3A63               	xorlw	99
 11425  1513  1D03               	skipz
 11426  1514  0008               	return
 11427                           
 11428                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 11429  1515  3020               	movlw	32
 11430  1516  068D               	xorwf	13,f
 11431  1517  0008               	return
 11432  1518                     __end_of_setLED_Main:	
 11433                           
 11434                           	psect	text69
 11435  1E16                     __ptext69:	
 11436 ;; *************** function _LED_Initialization *****************
 11437 ;; Defined at:
 11438 ;;		line 31 in file "../src/LED_B1.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;		None
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;		None               void
 11445 ;; Registers used:
 11446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11456 ;;Total ram usage:        0 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    8
 11459 ;; This function calls:
 11460 ;;		_setLED_Initialization
 11461 ;; This function is called by:
 11462 ;;		_main
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           
 11467                           ;psect for function _LED_Initialization
 11468  1E16                     _LED_Initialization:	
 11469                           
 11470                           ;LED_B1.c: 33: setLED_Initialization(1);
 11471                           
 11472                           ;incstack = 0
 11473                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11474  1E16  3001               	movlw	1
 11475  1E17  319E  26FF  319E   	fcall	_setLED_Initialization
 11476                           
 11477                           ;LED_B1.c: 36: setLED_Initialization(2);
 11478  1E1A  3002               	movlw	2
 11479  1E1B  319E  26FF  319E   	fcall	_setLED_Initialization
 11480                           
 11481                           ;LED_B1.c: 42: setLED_Initialization(99);
 11482  1E1E  3063               	movlw	99
 11483  1E1F  319E  26FF         	fcall	_setLED_Initialization
 11484  1E21  0008               	return
 11485  1E22                     __end_of_LED_Initialization:	
 11486                           
 11487                           	psect	text70
 11488  1EFF                     __ptext70:	
 11489 ;; *************** function _setLED_Initialization *****************
 11490 ;; Defined at:
 11491 ;;		line 63 in file "../src/LED_B1.c"
 11492 ;; Parameters:    Size  Location     Type
 11493 ;;  led             1    wreg     unsigned char 
 11494 ;; Auto vars:     Size  Location     Type
 11495 ;;  led             1    4[BANK0 ] unsigned char 
 11496 ;; Return value:  Size  Location     Type
 11497 ;;		None               void
 11498 ;; Registers used:
 11499 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11500 ;; Tracked objects:
 11501 ;;		On entry : 0/0
 11502 ;;		On exit  : 0/0
 11503 ;;		Unchanged: 0/0
 11504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11508 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;Total ram usage:        1 bytes
 11510 ;; Hardware stack levels used:    1
 11511 ;; Hardware stack levels required when called:    7
 11512 ;; This function calls:
 11513 ;;		_LedPointSelect
 11514 ;;		_setLED
 11515 ;; This function is called by:
 11516 ;;		_LED_Initialization
 11517 ;; This function uses a non-reentrant model
 11518 ;;
 11519                           
 11520                           
 11521                           ;psect for function _setLED_Initialization
 11522  1EFF                     _setLED_Initialization:	
 11523                           
 11524                           ;incstack = 0
 11525                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11526                           ;setLED_Initialization@led stored from wreg
 11527  1EFF  0020               	movlb	0	; select bank0
 11528  1F00  00A4               	movwf	setLED_Initialization@led
 11529                           
 11530                           ;LED_B1.c: 64: LedPointSelect(led);
 11531  1F01  0824               	movf	setLED_Initialization@led,w
 11532  1F02  3190  207A  319E   	fcall	_LedPointSelect
 11533                           
 11534                           ;LED_B1.c: 65: LED->Enable = 1;
 11535  1F05  0879               	movf	_LED,w
 11536  1F06  0086               	movwf	6
 11537  1F07  3001               	movlw	1	; select bank2/3
 11538  1F08  0087               	movwf	7
 11539  1F09  1401               	bsf	1,0
 11540                           
 11541                           ;LED_B1.c: 66: setLED(led, 0);
 11542  1F0A  0020               	movlb	0	; select bank0
 11543  1F0B  01A2               	clrf	setLED@command
 11544  1F0C  0824               	movf	setLED_Initialization@led,w
 11545  1F0D  3189  215F         	fcall	_setLED
 11546  1F0F  0008               	return
 11547  1F10                     __end_of_setLED_Initialization:	
 11548                           
 11549                           	psect	text71
 11550  10F1                     __ptext71:	
 11551 ;; *************** function _Flash_Memory_Main *****************
 11552 ;; Defined at:
 11553 ;;		line 790 in file "../src/MCU_B1.c"
 11554 ;; Parameters:    Size  Location     Type
 11555 ;;		None
 11556 ;; Auto vars:     Size  Location     Type
 11557 ;;		None
 11558 ;; Return value:  Size  Location     Type
 11559 ;;		None               void
 11560 ;; Registers used:
 11561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11571 ;;Total ram usage:        0 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    8
 11574 ;; This function calls:
 11575 ;;		_Flash_Memory_Modify
 11576 ;; This function is called by:
 11577 ;;		_main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _Flash_Memory_Main
 11583  10F1                     _Flash_Memory_Main:	
 11584                           
 11585                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11589  10F1  0023               	movlb	3	; select bank3
 11590  10F2  1CC4               	btfss	(_Memory^(0+384)+36),1
 11591  10F3  0008               	return
 11592                           
 11593                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 11594  10F4  1C44               	btfss	(_Memory^(0+384)+36),0
 11595  10F5  290E               	goto	l1254
 11596                           
 11597                           ;MCU_B1.c: 793: Memory.Time++;
 11598  10F6  3001               	movlw	1
 11599  10F7  07C2               	addwf	(_Memory^(0+384)+34),f
 11600  10F8  3000               	movlw	0
 11601  10F9  3DC3               	addwfc	((_Memory+1)^(0+384)+34),f
 11602                           
 11603                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 11604  10FA  3022               	movlw	34
 11605  10FB  3EA0               	addlw	_Memory& (0+255)
 11606  10FC  0086               	movwf	6
 11607  10FD  3001               	movlw	1	; select bank3/4
 11608  10FE  0087               	movwf	7
 11609  10FF  3F40               	moviw [0]fsr1
 11610  1100  3A19               	xorlw	25
 11611  1101  1D03               	skipz
 11612  1102  2905               	goto	u9825
 11613  1103  3F41               	moviw [1]fsr1
 11614  1104  3A00               	xorlw	0
 11615  1105                     u9825:	
 11616  1105  1D03               	skipz
 11617  1106  0008               	return
 11618                           
 11619                           ;MCU_B1.c: 795: {
 11620                           ;MCU_B1.c: 796: Memory.Time = 0;
 11621  1107  01C2               	clrf	(_Memory^(0+384)+34)
 11622  1108  01C3               	clrf	((_Memory+1)^(0+384)+34)
 11623                           
 11624                           ;MCU_B1.c: 797: Memory.Modify = 0;
 11625  1109  1044               	bcf	(_Memory^(0+384)+36),0
 11626                           
 11627                           ;MCU_B1.c: 798: Memory.GO = 0;
 11628  110A  10C4               	bcf	(_Memory^(0+384)+36),1
 11629                           
 11630                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 11631  110B  3195  259D         	fcall	_Flash_Memory_Modify
 11632                           
 11633                           ;MCU_B1.c: 800: }
 11634                           ;MCU_B1.c: 801: } else {
 11635  110D  0008               	return
 11636  110E                     l1254:	
 11637                           
 11638                           ;MCU_B1.c: 802: Memory.GO = 0;
 11639  110E  10C4               	bcf	(_Memory^(0+384)+36),1
 11640  110F  0008               	return
 11641  1110                     __end_of_Flash_Memory_Main:	
 11642                           
 11643                           	psect	text72
 11644  159D                     __ptext72:	
 11645 ;; *************** function _Flash_Memory_Modify *****************
 11646 ;; Defined at:
 11647 ;;		line 859 in file "../src/MCU_B1.c"
 11648 ;; Parameters:    Size  Location     Type
 11649 ;;		None
 11650 ;; Auto vars:     Size  Location     Type
 11651 ;;  i               1    5[BANK0 ] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;		None               void
 11654 ;; Registers used:
 11655 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11665 ;;Total ram usage:        2 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    7
 11668 ;; This function calls:
 11669 ;;		_Flash_Memory_Erasing
 11670 ;;		_Flash_Memory_Read
 11671 ;;		_Flash_Memory_Write
 11672 ;; This function is called by:
 11673 ;;		_Flash_Memory_Main
 11674 ;; This function uses a non-reentrant model
 11675 ;;
 11676                           
 11677                           
 11678                           ;psect for function _Flash_Memory_Modify
 11679  159D                     _Flash_Memory_Modify:	
 11680                           
 11681                           ;MCU_B1.c: 860: char i = 0;
 11682                           
 11683                           ;incstack = 0
 11684                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11685  159D  0020               	movlb	0	; select bank0
 11686  159E  01A5               	clrf	Flash_Memory_Modify@i
 11687                           
 11688                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 11689  159F  01A5               	clrf	Flash_Memory_Modify@i
 11690  15A0  3020               	movlw	32
 11691  15A1  0225               	subwf	Flash_Memory_Modify@i,w
 11692  15A2  1803               	btfsc	3,0
 11693  15A3  2DB9               	goto	l8936
 11694  15A4                     l8930:	
 11695                           
 11696                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 11697  15A4  0825               	movf	Flash_Memory_Modify@i,w
 11698  15A5  319F  27E6  3195   	fcall	_Flash_Memory_Read
 11699  15A8  0020               	movlb	0	; select bank0
 11700  15A9  00A4               	movwf	??_Flash_Memory_Modify
 11701  15AA  0825               	movf	Flash_Memory_Modify@i,w
 11702  15AB  3EA0               	addlw	_Memory& (0+255)
 11703  15AC  0086               	movwf	6
 11704  15AD  3001               	movlw	1	; select bank3/4
 11705  15AE  0087               	movwf	7
 11706  15AF  0824               	movf	??_Flash_Memory_Modify,w
 11707  15B0  0081               	movwf	1
 11708  15B1  3001               	movlw	1
 11709  15B2  00A4               	movwf	??_Flash_Memory_Modify
 11710  15B3  0824               	movf	??_Flash_Memory_Modify,w
 11711  15B4  07A5               	addwf	Flash_Memory_Modify@i,f
 11712  15B5  3020               	movlw	32
 11713  15B6  0225               	subwf	Flash_Memory_Modify@i,w
 11714  15B7  1C03               	skipc
 11715  15B8  2DA4               	goto	l8930
 11716  15B9                     l8936:	
 11717                           
 11718                           ;MCU_B1.c: 863: }
 11719                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 11720  15B9  086C               	movf	_product,w
 11721  15BA  0086               	movwf	6
 11722  15BB  3001               	movlw	1	; select bank2/3
 11723  15BC  0087               	movwf	7
 11724  15BD  3001               	movlw	1	; select bank2/3
 11725  15BE  3F4C               	moviw [12]fsr1
 11726  15BF  0023               	movlb	3	; select bank3
 11727  15C0  00A0               	movwf	_Memory^(0+384)
 11728                           
 11729                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 11730  15C1  0020               	movlb	0	; select bank0
 11731  15C2  086C               	movf	_product,w
 11732  15C3  0086               	movwf	6
 11733  15C4  3001               	movlw	1	; select bank2/3
 11734  15C5  0087               	movwf	7
 11735  15C6  3001               	movlw	1	; select bank2/3
 11736  15C7  3F4D               	moviw [13]fsr1
 11737  15C8  0023               	movlb	3	; select bank3
 11738  15C9  00A1               	movwf	(_Memory^(0+384)+1)
 11739                           
 11740                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 11741  15CA  0020               	movlb	0	; select bank0
 11742  15CB  086C               	movf	_product,w
 11743  15CC  0086               	movwf	6
 11744  15CD  3001               	movlw	1	; select bank2/3
 11745  15CE  0087               	movwf	7
 11746  15CF  3001               	movlw	1	; select bank2/3
 11747  15D0  3F4E               	moviw [14]fsr1
 11748  15D1  0023               	movlb	3	; select bank3
 11749  15D2  00A2               	movwf	(_Memory^(0+384)+2)
 11750                           
 11751                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 11752  15D3  1D44               	btfss	(_Memory^(0+384)+36),2
 11753  15D4  2DD9               	goto	l1276
 11754                           
 11755                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 11756  15D5  1144               	bcf	(_Memory^(0+384)+36),2
 11757                           
 11758                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 11759  15D6  0021               	movlb	1	; select bank1
 11760  15D7  12A0               	bcf	_myMain^(0+128),5
 11761                           
 11762                           ;MCU_B1.c: 875: myMain.First = 0;
 11763  15D8  13A0               	bcf	_myMain^(0+128),7
 11764  15D9                     l1276:	
 11765                           
 11766                           ;MCU_B1.c: 877: }
 11767                           ;MCU_B1.c: 878: GIE = 0;
 11768  15D9  138B               	bcf	11,7	;volatile
 11769                           
 11770                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 11771  15DA  319E  260A  3195   	fcall	_Flash_Memory_Erasing
 11772                           
 11773                           ;MCU_B1.c: 880: Flash_Memory_Write();
 11774  15DD  3192  22F9         	fcall	_Flash_Memory_Write
 11775                           
 11776                           ;MCU_B1.c: 881: GIE = 1;
 11777  15DF  178B               	bsf	11,7	;volatile
 11778  15E0  0008               	return
 11779  15E1                     __end_of_Flash_Memory_Modify:	
 11780                           
 11781                           	psect	text73
 11782  1E0A                     __ptext73:	
 11783 ;; *************** function _Flash_Memory_Erasing *****************
 11784 ;; Defined at:
 11785 ;;		line 848 in file "../src/MCU_B1.c"
 11786 ;; Parameters:    Size  Location     Type
 11787 ;;		None
 11788 ;; Auto vars:     Size  Location     Type
 11789 ;;		None
 11790 ;; Return value:  Size  Location     Type
 11791 ;;		None               void
 11792 ;; Registers used:
 11793 ;;		wreg, status,2, status,0, pclath, cstack
 11794 ;; Tracked objects:
 11795 ;;		On entry : 0/0
 11796 ;;		On exit  : 0/0
 11797 ;;		Unchanged: 0/0
 11798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11803 ;;Total ram usage:        0 bytes
 11804 ;; Hardware stack levels used:    1
 11805 ;; Hardware stack levels required when called:    6
 11806 ;; This function calls:
 11807 ;;		_Flash_Memory_Unlock
 11808 ;; This function is called by:
 11809 ;;		_Flash_Memory_Modify
 11810 ;; This function uses a non-reentrant model
 11811 ;;
 11812                           
 11813                           
 11814                           ;psect for function _Flash_Memory_Erasing
 11815  1E0A                     _Flash_Memory_Erasing:	
 11816                           
 11817                           ;MCU_B1.c: 849: CFGS = 0;
 11818                           
 11819                           ;incstack = 0
 11820                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11821  1E0A  0023               	movlb	3	; select bank3
 11822  1E0B  1315               	bcf	21,6	;volatile
 11823                           
 11824                           ;MCU_B1.c: 850: PMADRH = 0x30;
 11825  1E0C  3030               	movlw	48
 11826  1E0D  0092               	movwf	18	;volatile
 11827                           
 11828                           ;MCU_B1.c: 851: PMADRL = 0x00;
 11829  1E0E  0191               	clrf	17	;volatile
 11830                           
 11831                           ;MCU_B1.c: 852: FREE = 1;
 11832  1E0F  1615               	bsf	21,4	;volatile
 11833                           
 11834                           ;MCU_B1.c: 853: WREN = 1;
 11835  1E10  1515               	bsf	21,2	;volatile
 11836                           
 11837                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 11838  1E11  319D  258B         	fcall	_Flash_Memory_Unlock
 11839                           
 11840                           ;MCU_B1.c: 855: WREN = 0;
 11841  1E13  0023               	movlb	3	; select bank3
 11842  1E14  1115               	bcf	21,2	;volatile
 11843  1E15  0008               	return
 11844  1E16                     __end_of_Flash_Memory_Erasing:	
 11845                           
 11846                           	psect	text74
 11847  0511                     __ptext74:	
 11848 ;; *************** function _Flash_Memory_Initialization *****************
 11849 ;; Defined at:
 11850 ;;		line 749 in file "../src/MCU_B1.c"
 11851 ;; Parameters:    Size  Location     Type
 11852 ;;		None
 11853 ;; Auto vars:     Size  Location     Type
 11854 ;;  i               1   62[BANK0 ] unsigned char 
 11855 ;; Return value:  Size  Location     Type
 11856 ;;		None               void
 11857 ;; Registers used:
 11858 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11859 ;; Tracked objects:
 11860 ;;		On entry : 0/0
 11861 ;;		On exit  : 0/0
 11862 ;;		Unchanged: 0/0
 11863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;Total ram usage:        2 bytes
 11869 ;; Hardware stack levels used:    1
 11870 ;; Hardware stack levels required when called:    8
 11871 ;; This function calls:
 11872 ;;		_Flash_Memory_Read
 11873 ;;		_Flash_Memory_Write
 11874 ;;		_setPercentValue
 11875 ;; This function is called by:
 11876 ;;		_main
 11877 ;; This function uses a non-reentrant model
 11878 ;;
 11879                           
 11880                           
 11881                           ;psect for function _Flash_Memory_Initialization
 11882  0511                     _Flash_Memory_Initialization:	
 11883                           
 11884                           ;MCU_B1.c: 750: char i = 0;
 11885                           
 11886                           ;incstack = 0
 11887                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11888  0511  0020               	movlb	0	; select bank0
 11889  0512  01DE               	clrf	Flash_Memory_Initialization@i
 11890                           
 11891                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 11892  0513  301F               	movlw	31
 11893  0514  319F  27E6  3185   	fcall	_Flash_Memory_Read
 11894  0517  3AAA               	xorlw	170
 11895  0518  1D03               	skipz
 11896  0519  2D83               	goto	l9372
 11897                           
 11898                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 11899  051A  3000               	movlw	0
 11900  051B  319F  27E6  3185   	fcall	_Flash_Memory_Read
 11901  051E  0020               	movlb	0	; select bank0
 11902  051F  00DD               	movwf	??_Flash_Memory_Initialization
 11903  0520  086C               	movf	_product,w
 11904  0521  3E0C               	addlw	12
 11905  0522  0086               	movwf	6
 11906  0523  3001               	movlw	1	; select bank2/3
 11907  0524  0087               	movwf	7
 11908  0525  085D               	movf	??_Flash_Memory_Initialization,w
 11909  0526  0081               	movwf	1
 11910                           
 11911                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 11912  0527  3001               	movlw	1
 11913  0528  319F  27E6  3185   	fcall	_Flash_Memory_Read
 11914  052B  0020               	movlb	0	; select bank0
 11915  052C  00DD               	movwf	??_Flash_Memory_Initialization
 11916  052D  086C               	movf	_product,w
 11917  052E  3E0D               	addlw	13
 11918  052F  0086               	movwf	6
 11919  0530  3001               	movlw	1	; select bank2/3
 11920  0531  0087               	movwf	7
 11921  0532  085D               	movf	??_Flash_Memory_Initialization,w
 11922  0533  0081               	movwf	1
 11923                           
 11924                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 11925  0534  3002               	movlw	2
 11926  0535  319F  27E6  3185   	fcall	_Flash_Memory_Read
 11927  0538  0020               	movlb	0	; select bank0
 11928  0539  00DD               	movwf	??_Flash_Memory_Initialization
 11929  053A  086C               	movf	_product,w
 11930  053B  3E0E               	addlw	14
 11931  053C  0086               	movwf	6
 11932  053D  3001               	movlw	1	; select bank2/3
 11933  053E  0087               	movwf	7
 11934  053F  085D               	movf	??_Flash_Memory_Initialization,w
 11935  0540  0081               	movwf	1
 11936                           
 11937                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
 11938  0541  3020               	movlw	32
 11939  0542  3195  25E1  3185   	fcall	_setPercentValue
 11940  0545  0020               	movlb	0	; select bank0
 11941  0546  00DD               	movwf	??_Flash_Memory_Initialization
 11942  0547  085D               	movf	??_Flash_Memory_Initialization,w
 11943  0548  00DE               	movwf	Flash_Memory_Initialization@i
 11944                           
 11945                           ;MCU_B1.c: 761: product->Data[21] = i;
 11946  0549  085E               	movf	Flash_Memory_Initialization@i,w
 11947  054A  00DD               	movwf	??_Flash_Memory_Initialization
 11948  054B  086C               	movf	_product,w
 11949  054C  3E15               	addlw	21
 11950  054D  0086               	movwf	6
 11951  054E  3001               	movlw	1	; select bank2/3
 11952  054F  0087               	movwf	7
 11953  0550  085D               	movf	??_Flash_Memory_Initialization,w
 11954  0551  0081               	movwf	1
 11955                           
 11956                           ;MCU_B1.c: 762: product->Data[22] = i;
 11957  0552  085E               	movf	Flash_Memory_Initialization@i,w
 11958  0553  00DD               	movwf	??_Flash_Memory_Initialization
 11959  0554  086C               	movf	_product,w
 11960  0555  3E16               	addlw	22
 11961  0556  0086               	movwf	6
 11962  0557  3001               	movlw	1	; select bank2/3
 11963  0558  0087               	movwf	7
 11964  0559  085D               	movf	??_Flash_Memory_Initialization,w
 11965  055A  0081               	movwf	1
 11966                           
 11967                           ;MCU_B1.c: 763: product->Data[23] = i;
 11968  055B  085E               	movf	Flash_Memory_Initialization@i,w
 11969  055C  00DD               	movwf	??_Flash_Memory_Initialization
 11970  055D  086C               	movf	_product,w
 11971  055E  3E17               	addlw	23
 11972  055F  0086               	movwf	6
 11973  0560  3001               	movlw	1	; select bank2/3
 11974  0561  0087               	movwf	7
 11975  0562  085D               	movf	??_Flash_Memory_Initialization,w
 11976  0563  0081               	movwf	1
 11977                           
 11978                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11979  0564  086C               	movf	_product,w
 11980  0565  3E0C               	addlw	12
 11981  0566  0086               	movwf	6
 11982  0567  3001               	movlw	1	; select bank2/3
 11983  0568  0087               	movwf	7
 11984  0569  0801               	movf	1,w
 11985  056A  3AFF               	xorlw	255
 11986  056B  1D03               	skipz
 11987  056C  0008               	return
 11988  056D  086C               	movf	_product,w
 11989  056E  3E0D               	addlw	13
 11990  056F  0086               	movwf	6
 11991  0570  3001               	movlw	1	; select bank2/3
 11992  0571  0087               	movwf	7
 11993  0572  0801               	movf	1,w
 11994  0573  3AFF               	xorlw	255
 11995  0574  1D03               	skipz
 11996  0575  0008               	return
 11997  0576  086C               	movf	_product,w
 11998  0577  3E0E               	addlw	14
 11999  0578  0086               	movwf	6
 12000  0579  3001               	movlw	1	; select bank2/3
 12001  057A  0087               	movwf	7
 12002  057B  0801               	movf	1,w
 12003  057C  3AFF               	xorlw	255
 12004  057D  1D03               	skipz
 12005  057E  0008               	return
 12006                           
 12007                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 12008  057F  0021               	movlb	1	; select bank1
 12009  0580  16A0               	bsf	_myMain^(0+128),5
 12010                           
 12011                           ;MCU_B1.c: 767: myMain.First = 1;
 12012  0581  17A0               	bsf	_myMain^(0+128),7
 12013                           
 12014                           ;MCU_B1.c: 768: }
 12015                           ;MCU_B1.c: 769: } else {
 12016  0582  0008               	return
 12017  0583                     l9372:	
 12018                           
 12019                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
 12020  0583  3020               	movlw	32
 12021  0584  3195  25E1  3185   	fcall	_setPercentValue
 12022  0587  0020               	movlb	0	; select bank0
 12023  0588  00DD               	movwf	??_Flash_Memory_Initialization
 12024  0589  085D               	movf	??_Flash_Memory_Initialization,w
 12025  058A  00DE               	movwf	Flash_Memory_Initialization@i
 12026                           
 12027                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 12028  058B  30FF               	movlw	255
 12029  058C  00DD               	movwf	??_Flash_Memory_Initialization
 12030  058D  085D               	movf	??_Flash_Memory_Initialization,w
 12031  058E  0023               	movlb	3	; select bank3
 12032  058F  00A0               	movwf	_Memory^(0+384)
 12033                           
 12034                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 12035  0590  30FF               	movlw	255
 12036  0591  0020               	movlb	0	; select bank0
 12037  0592  00DD               	movwf	??_Flash_Memory_Initialization
 12038  0593  085D               	movf	??_Flash_Memory_Initialization,w
 12039  0594  0023               	movlb	3	; select bank3
 12040  0595  00A1               	movwf	(_Memory^(0+384)+1)
 12041                           
 12042                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 12043  0596  30FF               	movlw	255
 12044  0597  0020               	movlb	0	; select bank0
 12045  0598  00DD               	movwf	??_Flash_Memory_Initialization
 12046  0599  085D               	movf	??_Flash_Memory_Initialization,w
 12047  059A  0023               	movlb	3	; select bank3
 12048  059B  00A2               	movwf	(_Memory^(0+384)+2)
 12049                           
 12050                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 12051  059C  30FF               	movlw	255
 12052  059D  0020               	movlb	0	; select bank0
 12053  059E  00DD               	movwf	??_Flash_Memory_Initialization
 12054  059F  085D               	movf	??_Flash_Memory_Initialization,w
 12055  05A0  0023               	movlb	3	; select bank3
 12056  05A1  00A3               	movwf	(_Memory^(0+384)+3)
 12057                           
 12058                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 12059  05A2  30FF               	movlw	255
 12060  05A3  0020               	movlb	0	; select bank0
 12061  05A4  00DD               	movwf	??_Flash_Memory_Initialization
 12062  05A5  085D               	movf	??_Flash_Memory_Initialization,w
 12063  05A6  0023               	movlb	3	; select bank3
 12064  05A7  00A4               	movwf	(_Memory^(0+384)+4)
 12065                           
 12066                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 12067  05A8  30FF               	movlw	255
 12068  05A9  0020               	movlb	0	; select bank0
 12069  05AA  00DD               	movwf	??_Flash_Memory_Initialization
 12070  05AB  085D               	movf	??_Flash_Memory_Initialization,w
 12071  05AC  0023               	movlb	3	; select bank3
 12072  05AD  00A5               	movwf	(_Memory^(0+384)+5)
 12073                           
 12074                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 12075  05AE  30AA               	movlw	170
 12076  05AF  0020               	movlb	0	; select bank0
 12077  05B0  00DD               	movwf	??_Flash_Memory_Initialization
 12078  05B1  085D               	movf	??_Flash_Memory_Initialization,w
 12079  05B2  0023               	movlb	3	; select bank3
 12080  05B3  00BF               	movwf	(_Memory^(0+384)+31)
 12081                           
 12082                           ;MCU_B1.c: 778: product->Data[21] = i;
 12083  05B4  0020               	movlb	0	; select bank0
 12084  05B5  085E               	movf	Flash_Memory_Initialization@i,w
 12085  05B6  00DD               	movwf	??_Flash_Memory_Initialization
 12086  05B7  086C               	movf	_product,w
 12087  05B8  3E15               	addlw	21
 12088  05B9  0086               	movwf	6
 12089  05BA  3001               	movlw	1	; select bank2/3
 12090  05BB  0087               	movwf	7
 12091  05BC  085D               	movf	??_Flash_Memory_Initialization,w
 12092  05BD  0081               	movwf	1
 12093                           
 12094                           ;MCU_B1.c: 779: product->Data[22] = i;
 12095  05BE  085E               	movf	Flash_Memory_Initialization@i,w
 12096  05BF  00DD               	movwf	??_Flash_Memory_Initialization
 12097  05C0  086C               	movf	_product,w
 12098  05C1  3E16               	addlw	22
 12099  05C2  0086               	movwf	6
 12100  05C3  3001               	movlw	1	; select bank2/3
 12101  05C4  0087               	movwf	7
 12102  05C5  085D               	movf	??_Flash_Memory_Initialization,w
 12103  05C6  0081               	movwf	1
 12104                           
 12105                           ;MCU_B1.c: 780: product->Data[23] = i;
 12106  05C7  085E               	movf	Flash_Memory_Initialization@i,w
 12107  05C8  00DD               	movwf	??_Flash_Memory_Initialization
 12108  05C9  086C               	movf	_product,w
 12109  05CA  3E17               	addlw	23
 12110  05CB  0086               	movwf	6
 12111  05CC  3001               	movlw	1	; select bank2/3
 12112  05CD  0087               	movwf	7
 12113  05CE  085D               	movf	??_Flash_Memory_Initialization,w
 12114  05CF  0081               	movwf	1
 12115                           
 12116                           ;MCU_B1.c: 781: GIE = 0;
 12117  05D0  138B               	bcf	11,7	;volatile
 12118                           
 12119                           ;MCU_B1.c: 782: Flash_Memory_Write();
 12120  05D1  3192  22F9         	fcall	_Flash_Memory_Write
 12121                           
 12122                           ;MCU_B1.c: 783: GIE = 1;
 12123  05D3  178B               	bsf	11,7	;volatile
 12124                           
 12125                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 12126  05D4  0021               	movlb	1	; select bank1
 12127  05D5  16A0               	bsf	_myMain^(0+128),5
 12128                           
 12129                           ;MCU_B1.c: 785: myMain.First = 1;
 12130  05D6  17A0               	bsf	_myMain^(0+128),7
 12131  05D7  0008               	return
 12132  05D8                     __end_of_Flash_Memory_Initialization:	
 12133                           
 12134                           	psect	text75
 12135  12F9                     __ptext75:	
 12136 ;; *************** function _Flash_Memory_Write *****************
 12137 ;; Defined at:
 12138 ;;		line 829 in file "../src/MCU_B1.c"
 12139 ;; Parameters:    Size  Location     Type
 12140 ;;		None
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;  i               1    1[BANK0 ] unsigned char 
 12143 ;; Return value:  Size  Location     Type
 12144 ;;		None               void
 12145 ;; Registers used:
 12146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12147 ;; Tracked objects:
 12148 ;;		On entry : 0/0
 12149 ;;		On exit  : 0/0
 12150 ;;		Unchanged: 0/0
 12151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;Total ram usage:        2 bytes
 12157 ;; Hardware stack levels used:    1
 12158 ;; Hardware stack levels required when called:    6
 12159 ;; This function calls:
 12160 ;;		_Flash_Memory_Unlock
 12161 ;; This function is called by:
 12162 ;;		_Flash_Memory_Initialization
 12163 ;;		_Flash_Memory_Modify
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           
 12168                           ;psect for function _Flash_Memory_Write
 12169  12F9                     _Flash_Memory_Write:	
 12170                           
 12171                           ;MCU_B1.c: 830: char i = 0;
 12172                           
 12173                           ;incstack = 0
 12174                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12175  12F9  0020               	movlb	0	; select bank0
 12176  12FA  01A1               	clrf	Flash_Memory_Write@i
 12177                           
 12178                           ;MCU_B1.c: 831: CFGS = 0;
 12179  12FB  0023               	movlb	3	; select bank3
 12180  12FC  1315               	bcf	21,6	;volatile
 12181                           
 12182                           ;MCU_B1.c: 832: PMADRH = 0x30;
 12183  12FD  3030               	movlw	48
 12184  12FE  0092               	movwf	18	;volatile
 12185                           
 12186                           ;MCU_B1.c: 833: PMDATH = 0;
 12187  12FF  0194               	clrf	20	;volatile
 12188                           
 12189                           ;MCU_B1.c: 834: FREE = 0;
 12190  1300  1215               	bcf	21,4	;volatile
 12191                           
 12192                           ;MCU_B1.c: 835: LWLO = 1;
 12193  1301  1695               	bsf	21,5	;volatile
 12194                           
 12195                           ;MCU_B1.c: 836: WREN = 1;
 12196  1302  1515               	bsf	21,2	;volatile
 12197                           
 12198                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 12199  1303  0020               	movlb	0	; select bank0
 12200  1304  01A1               	clrf	Flash_Memory_Write@i
 12201  1305  3020               	movlw	32
 12202  1306  0221               	subwf	Flash_Memory_Write@i,w
 12203  1307  1803               	btfsc	3,0
 12204  1308  2B21               	goto	l1267
 12205  1309                     l8502:	
 12206                           
 12207                           ;MCU_B1.c: 838: PMADRL = i;
 12208  1309  0821               	movf	Flash_Memory_Write@i,w
 12209  130A  0023               	movlb	3	; select bank3
 12210  130B  0091               	movwf	17	;volatile
 12211                           
 12212                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 12213  130C  0020               	movlb	0	; select bank0
 12214  130D  0821               	movf	Flash_Memory_Write@i,w
 12215  130E  3EA0               	addlw	_Memory& (0+255)
 12216  130F  0086               	movwf	6
 12217  1310  3001               	movlw	1	; select bank3/4
 12218  1311  0087               	movwf	7
 12219  1312  0801               	movf	1,w
 12220  1313  0023               	movlb	3	; select bank3
 12221  1314  0093               	movwf	19	;volatile
 12222                           
 12223                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 12224  1315  319D  258B  3192   	fcall	_Flash_Memory_Unlock
 12225  1318  3001               	movlw	1
 12226  1319  0020               	movlb	0	; select bank0
 12227  131A  00A0               	movwf	??_Flash_Memory_Write
 12228  131B  0820               	movf	??_Flash_Memory_Write,w
 12229  131C  07A1               	addwf	Flash_Memory_Write@i,f
 12230  131D  3020               	movlw	32
 12231  131E  0221               	subwf	Flash_Memory_Write@i,w
 12232  131F  1C03               	skipc
 12233  1320  2B09               	goto	l8502
 12234  1321                     l1267:	
 12235                           
 12236                           ;MCU_B1.c: 841: }
 12237                           ;MCU_B1.c: 842: LWLO = 0;
 12238  1321  0023               	movlb	3	; select bank3
 12239  1322  1295               	bcf	21,5	;volatile
 12240                           
 12241                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 12242  1323  319D  258B         	fcall	_Flash_Memory_Unlock
 12243                           
 12244                           ;MCU_B1.c: 844: WREN = 0;
 12245  1325  0023               	movlb	3	; select bank3
 12246  1326  1115               	bcf	21,2	;volatile
 12247  1327  0008               	return
 12248  1328                     __end_of_Flash_Memory_Write:	
 12249                           
 12250                           	psect	text76
 12251  1D8B                     __ptext76:	
 12252 ;; *************** function _Flash_Memory_Unlock *****************
 12253 ;; Defined at:
 12254 ;;		line 808 in file "../src/MCU_B1.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;		None
 12257 ;; Auto vars:     Size  Location     Type
 12258 ;;		None
 12259 ;; Return value:  Size  Location     Type
 12260 ;;		None               void
 12261 ;; Registers used:
 12262 ;;		wreg
 12263 ;; Tracked objects:
 12264 ;;		On entry : 0/0
 12265 ;;		On exit  : 0/0
 12266 ;;		Unchanged: 0/0
 12267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;Total ram usage:        0 bytes
 12273 ;; Hardware stack levels used:    1
 12274 ;; Hardware stack levels required when called:    5
 12275 ;; This function calls:
 12276 ;;		Nothing
 12277 ;; This function is called by:
 12278 ;;		_Flash_Memory_Write
 12279 ;;		_Flash_Memory_Erasing
 12280 ;; This function uses a non-reentrant model
 12281 ;;
 12282                           
 12283                           
 12284                           ;psect for function _Flash_Memory_Unlock
 12285  1D8B                     _Flash_Memory_Unlock:	
 12286                           
 12287                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 12288                           
 12289                           ;incstack = 0
 12290                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12291  1D8B  3055               	movlw	85
 12292  1D8C  0023               	movlb	3	; select bank3
 12293  1D8D  0096               	movwf	22	;volatile
 12294                           
 12295                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 12296  1D8E  30AA               	movlw	170
 12297  1D8F  0096               	movwf	22	;volatile
 12298                           
 12299                           ;MCU_B1.c: 811: WR = 1;
 12300  1D90  1495               	bsf	21,1	;volatile
 12301                           
 12302                           ;MCU_B1.c: 812: __nop();
 12303  1D91  0000               	nop
 12304                           
 12305                           ;MCU_B1.c: 813: __nop();
 12306  1D92  0000               	nop
 12307  1D93  0008               	return
 12308  1D94                     __end_of_Flash_Memory_Unlock:	
 12309                           
 12310                           	psect	text77
 12311  1FE6                     __ptext77:	
 12312 ;; *************** function _Flash_Memory_Read *****************
 12313 ;; Defined at:
 12314 ;;		line 817 in file "../src/MCU_B1.c"
 12315 ;; Parameters:    Size  Location     Type
 12316 ;;  address         1    wreg     unsigned char 
 12317 ;; Auto vars:     Size  Location     Type
 12318 ;;  address         1    2[BANK0 ] unsigned char 
 12319 ;;  ret             1    3[BANK0 ] unsigned char 
 12320 ;;  i               1    1[BANK0 ] unsigned char 
 12321 ;; Return value:  Size  Location     Type
 12322 ;;                  1    wreg      unsigned char 
 12323 ;; Registers used:
 12324 ;;		wreg, status,2
 12325 ;; Tracked objects:
 12326 ;;		On entry : 0/0
 12327 ;;		On exit  : 0/0
 12328 ;;		Unchanged: 0/0
 12329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;Total ram usage:        4 bytes
 12335 ;; Hardware stack levels used:    1
 12336 ;; Hardware stack levels required when called:    5
 12337 ;; This function calls:
 12338 ;;		Nothing
 12339 ;; This function is called by:
 12340 ;;		_Flash_Memory_Initialization
 12341 ;;		_Flash_Memory_Modify
 12342 ;; This function uses a non-reentrant model
 12343 ;;
 12344                           
 12345                           
 12346                           ;psect for function _Flash_Memory_Read
 12347  1FE6                     _Flash_Memory_Read:	
 12348                           
 12349                           ;incstack = 0
 12350                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12351                           ;Flash_Memory_Read@address stored from wreg
 12352  1FE6  0020               	movlb	0	; select bank0
 12353  1FE7  00A2               	movwf	Flash_Memory_Read@address
 12354                           
 12355                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 12356  1FE8  01A1               	clrf	Flash_Memory_Read@i
 12357  1FE9  01A3               	clrf	Flash_Memory_Read@ret
 12358                           
 12359                           ;MCU_B1.c: 819: PMADRH = 0x30;
 12360  1FEA  3030               	movlw	48
 12361  1FEB  0023               	movlb	3	; select bank3
 12362  1FEC  0092               	movwf	18	;volatile
 12363                           
 12364                           ;MCU_B1.c: 820: PMADRL = address;
 12365  1FED  0020               	movlb	0	; select bank0
 12366  1FEE  0822               	movf	Flash_Memory_Read@address,w
 12367  1FEF  0023               	movlb	3	; select bank3
 12368  1FF0  0091               	movwf	17	;volatile
 12369                           
 12370                           ;MCU_B1.c: 821: CFGS = 0;
 12371  1FF1  1315               	bcf	21,6	;volatile
 12372                           
 12373                           ;MCU_B1.c: 822: RD = 1;
 12374  1FF2  1415               	bsf	21,0	;volatile
 12375                           
 12376                           ;MCU_B1.c: 823: i = PMDATH;
 12377  1FF3  0814               	movf	20,w	;volatile
 12378  1FF4  0020               	movlb	0	; select bank0
 12379  1FF5  00A0               	movwf	??_Flash_Memory_Read
 12380  1FF6  0820               	movf	??_Flash_Memory_Read,w
 12381  1FF7  00A1               	movwf	Flash_Memory_Read@i
 12382                           
 12383                           ;MCU_B1.c: 824: ret = PMDATL;
 12384  1FF8  0023               	movlb	3	; select bank3
 12385  1FF9  0813               	movf	19,w	;volatile
 12386  1FFA  0020               	movlb	0	; select bank0
 12387  1FFB  00A0               	movwf	??_Flash_Memory_Read
 12388  1FFC  0820               	movf	??_Flash_Memory_Read,w
 12389  1FFD  00A3               	movwf	Flash_Memory_Read@ret
 12390                           
 12391                           ;MCU_B1.c: 825: return ret;
 12392  1FFE  0823               	movf	Flash_Memory_Read@ret,w
 12393  1FFF  0008               	return
 12394  2000                     __end_of_Flash_Memory_Read:	
 12395                           
 12396                           	psect	text78
 12397  1D55                     __ptext78:	
 12398 ;; *************** function _DimmerLights_Main *****************
 12399 ;; Defined at:
 12400 ;;		line 418 in file "../src/Dimmer_B1.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;		None
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;		None
 12405 ;; Return value:  Size  Location     Type
 12406 ;;		None               void
 12407 ;; Registers used:
 12408 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12418 ;;Total ram usage:        0 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:   11
 12421 ;; This function calls:
 12422 ;;		_DimmerLights_Close
 12423 ;;		_setDimmerLights_Main
 12424 ;; This function is called by:
 12425 ;;		_main
 12426 ;; This function uses a non-reentrant model
 12427 ;;
 12428                           
 12429                           
 12430                           ;psect for function _DimmerLights_Main
 12431  1D55                     _DimmerLights_Main:	
 12432                           
 12433                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 12434                           
 12435                           ;incstack = 0
 12436                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12437  1D55  3001               	movlw	1
 12438  1D56  3188  20A9  319D   	fcall	_setDimmerLights_Main
 12439                           
 12440                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 12441  1D59  319F  276F         	fcall	_DimmerLights_Close
 12442  1D5B  0008               	return
 12443  1D5C                     __end_of_DimmerLights_Main:	
 12444                           
 12445                           	psect	text79
 12446  08A9                     __ptext79:	
 12447 ;; *************** function _setDimmerLights_Main *****************
 12448 ;; Defined at:
 12449 ;;		line 436 in file "../src/Dimmer_B1.c"
 12450 ;; Parameters:    Size  Location     Type
 12451 ;;  lights          1    wreg     unsigned char 
 12452 ;; Auto vars:     Size  Location     Type
 12453 ;;  lights          1   70[BANK0 ] unsigned char 
 12454 ;;  clear           1   69[BANK0 ] unsigned char 
 12455 ;; Return value:  Size  Location     Type
 12456 ;;		None               void
 12457 ;; Registers used:
 12458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12459 ;; Tracked objects:
 12460 ;;		On entry : 0/0
 12461 ;;		On exit  : 0/0
 12462 ;;		Unchanged: 0/0
 12463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12467 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12468 ;;Total ram usage:        2 bytes
 12469 ;; Hardware stack levels used:    1
 12470 ;; Hardware stack levels required when called:   10
 12471 ;; This function calls:
 12472 ;;		_DimmerLightsPointSelect
 12473 ;;		_setBuz
 12474 ;;		_setDimmerLights
 12475 ;;		_setDimmerLights_Adj
 12476 ;; This function is called by:
 12477 ;;		_DimmerLights_Main
 12478 ;; This function uses a non-reentrant model
 12479 ;;
 12480                           
 12481                           
 12482                           ;psect for function _setDimmerLights_Main
 12483  08A9                     _setDimmerLights_Main:	
 12484                           
 12485                           ;incstack = 0
 12486                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12487                           ;setDimmerLights_Main@lights stored from wreg
 12488  08A9  0020               	movlb	0	; select bank0
 12489  08AA  00E6               	movwf	setDimmerLights_Main@lights
 12490                           
 12491                           ;Dimmer_B1.c: 437: char clear = 1;
 12492  08AB  01E5               	clrf	setDimmerLights_Main@clear
 12493  08AC  0AE5               	incf	setDimmerLights_Main@clear,f
 12494                           
 12495                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 12496  08AD  0866               	movf	setDimmerLights_Main@lights,w
 12497  08AE  319D  25D1  3188   	fcall	_DimmerLightsPointSelect
 12498                           
 12499                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 12500  08B1  0020               	movlb	0	; select bank0
 12501  08B2  086D               	movf	_DimmerLights,w
 12502  08B3  3E08               	addlw	8
 12503  08B4  0086               	movwf	6
 12504  08B5  3001               	movlw	1	; select bank2/3
 12505  08B6  0087               	movwf	7
 12506  08B7  1D01               	btfss	1,2
 12507  08B8  28D6               	goto	l8820
 12508                           
 12509                           ;Dimmer_B1.c: 459: if (clear == 1) {
 12510  08B9  0865               	movf	setDimmerLights_Main@clear,w
 12511  08BA  3A01               	xorlw	1
 12512  08BB  1D03               	skipz
 12513  08BC  0008               	return
 12514                           
 12515                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 12516  08BD  086D               	movf	_DimmerLights,w
 12517  08BE  3E08               	addlw	8
 12518  08BF  0086               	movwf	6
 12519  08C0  3001               	movlw	1	; select bank2/3
 12520  08C1  0087               	movwf	7
 12521  08C2  1101               	bcf	1,2
 12522                           
 12523                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 12524  08C3  086D               	movf	_DimmerLights,w
 12525  08C4  3E08               	addlw	8
 12526  08C5  0086               	movwf	6
 12527  08C6  3001               	movlw	1	; select bank2/3
 12528  08C7  0087               	movwf	7
 12529  08C8  1C81               	btfss	1,1
 12530  08C9  28D0               	goto	l8818
 12531                           
 12532                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 12533  08CA  01A4               	clrf	setDimmerLights@status
 12534  08CB  0AA4               	incf	setDimmerLights@status,f
 12535  08CC  0866               	movf	setDimmerLights_Main@lights,w
 12536  08CD  318D  25E3         	fcall	_setDimmerLights
 12537                           
 12538                           ;Dimmer_B1.c: 463: } else {
 12539  08CF  0008               	return
 12540  08D0                     l8818:	
 12541                           
 12542                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 12543  08D0  0020               	movlb	0	; select bank0
 12544  08D1  01A4               	clrf	setDimmerLights@status
 12545  08D2  0866               	movf	setDimmerLights_Main@lights,w
 12546  08D3  318D  25E3         	fcall	_setDimmerLights
 12547                           
 12548                           ;Dimmer_B1.c: 465: }
 12549                           ;Dimmer_B1.c: 469: }
 12550                           ;Dimmer_B1.c: 470: } else {
 12551  08D5  0008               	return
 12552  08D6                     l8820:	
 12553                           
 12554                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 12555  08D6  0020               	movlb	0	; select bank0
 12556  08D7  086D               	movf	_DimmerLights,w
 12557  08D8  3E08               	addlw	8
 12558  08D9  0086               	movwf	6
 12559  08DA  3001               	movlw	1	; select bank2/3
 12560  08DB  0087               	movwf	7
 12561  08DC  1E01               	btfss	1,4
 12562  08DD  0008               	return
 12563                           
 12564                           ;Dimmer_B1.c: 472: if (clear == 1) {
 12565  08DE  0865               	movf	setDimmerLights_Main@clear,w
 12566  08DF  3A01               	xorlw	1
 12567  08E0  1D03               	skipz
 12568  08E1  0008               	return
 12569                           
 12570                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 12571  08E2  086D               	movf	_DimmerLights,w
 12572  08E3  3E08               	addlw	8
 12573  08E4  0086               	movwf	6
 12574  08E5  3001               	movlw	1	; select bank2/3
 12575  08E6  0087               	movwf	7
 12576  08E7  1201               	bcf	1,4
 12577                           
 12578                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 12579  08E8  086D               	movf	_DimmerLights,w
 12580  08E9  3E08               	addlw	8
 12581  08EA  0086               	movwf	6
 12582  08EB  3001               	movlw	1	; select bank2/3
 12583  08EC  0087               	movwf	7
 12584  08ED  1D81               	btfss	1,3
 12585  08EE  28FE               	goto	l8830
 12586                           
 12587                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 12588  08EF  01E2               	clrf	setDimmerLights_Adj@status
 12589  08F0  0AE2               	incf	setDimmerLights_Adj@status,f
 12590  08F1  0866               	movf	setDimmerLights_Main@lights,w
 12591  08F2  3194  249A  3188   	fcall	_setDimmerLights_Adj
 12592                           
 12593                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 12594  08F5  3064               	movlw	100
 12595  08F6  0020               	movlb	0	; select bank0
 12596  08F7  00A9               	movwf	setBuz@time
 12597  08F8  3000               	movlw	0
 12598  08F9  00AA               	movwf	setBuz@time+1
 12599  08FA  3001               	movlw	1
 12600  08FB  3188  2050         	fcall	_setBuz
 12601                           
 12602                           ;Dimmer_B1.c: 477: } else {
 12603  08FD  0008               	return
 12604  08FE                     l8830:	
 12605                           
 12606                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 12607  08FE  0020               	movlb	0	; select bank0
 12608  08FF  01E2               	clrf	setDimmerLights_Adj@status
 12609  0900  0866               	movf	setDimmerLights_Main@lights,w
 12610  0901  3194  249A         	fcall	_setDimmerLights_Adj
 12611  0903  0008               	return
 12612  0904                     __end_of_setDimmerLights_Main:	
 12613                           
 12614                           	psect	text80
 12615  149A                     __ptext80:	
 12616 ;; *************** function _setDimmerLights_Adj *****************
 12617 ;; Defined at:
 12618 ;;		line 657 in file "../src/Dimmer_B1.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;  lights          1    wreg     unsigned char 
 12621 ;;  status          1   66[BANK0 ] unsigned char 
 12622 ;; Auto vars:     Size  Location     Type
 12623 ;;  lights          1   68[BANK0 ] unsigned char 
 12624 ;; Return value:  Size  Location     Type
 12625 ;;		None               void
 12626 ;; Registers used:
 12627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;Total ram usage:        3 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    9
 12640 ;; This function calls:
 12641 ;;		_DimmerLightsPointSelect
 12642 ;;		_setRF_DimmerLights
 12643 ;;		_setTxData
 12644 ;; This function is called by:
 12645 ;;		_setDimmerLights_Main
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           
 12650                           ;psect for function _setDimmerLights_Adj
 12651  149A                     _setDimmerLights_Adj:	
 12652                           
 12653                           ;incstack = 0
 12654                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12655                           ;setDimmerLights_Adj@lights stored from wreg
 12656  149A  0020               	movlb	0	; select bank0
 12657  149B  00E4               	movwf	setDimmerLights_Adj@lights
 12658                           
 12659                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 12660  149C  0864               	movf	setDimmerLights_Adj@lights,w
 12661  149D  319D  25D1  3194   	fcall	_DimmerLightsPointSelect
 12662                           
 12663                           ;Dimmer_B1.c: 659: if (status == 1) {
 12664  14A0  0020               	movlb	0	; select bank0
 12665  14A1  0862               	movf	setDimmerLights_Adj@status,w
 12666  14A2  3A01               	xorlw	1
 12667  14A3  1D03               	skipz
 12668  14A4  2CB0               	goto	l8456
 12669                           
 12670                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 12671  14A5  086D               	movf	_DimmerLights,w
 12672  14A6  0086               	movwf	6
 12673  14A7  3001               	movlw	1	; select bank2/3
 12674  14A8  0087               	movwf	7
 12675  14A9  1581               	bsf	1,3
 12676                           
 12677                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 12678  14AA  086D               	movf	_DimmerLights,w
 12679  14AB  0086               	movwf	6
 12680  14AC  3001               	movlw	1	; select bank2/3
 12681  14AD  0087               	movwf	7
 12682  14AE  1481               	bsf	1,1
 12683                           
 12684                           ;Dimmer_B1.c: 662: } else {
 12685  14AF  0008               	return
 12686  14B0                     l8456:	
 12687                           
 12688                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 12689  14B0  086D               	movf	_DimmerLights,w
 12690  14B1  0086               	movwf	6
 12691  14B2  3001               	movlw	1	; select bank2/3
 12692  14B3  0087               	movwf	7
 12693  14B4  1D81               	btfss	1,3
 12694  14B5  0008               	return
 12695                           
 12696                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 12697  14B6  086D               	movf	_DimmerLights,w
 12698  14B7  0086               	movwf	6
 12699  14B8  3001               	movlw	1	; select bank2/3
 12700  14B9  0087               	movwf	7
 12701  14BA  1081               	bcf	1,1
 12702                           
 12703                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 12704  14BB  086D               	movf	_DimmerLights,w
 12705  14BC  0086               	movwf	6
 12706  14BD  3001               	movlw	1	; select bank2/3
 12707  14BE  0087               	movwf	7
 12708  14BF  1181               	bcf	1,3
 12709                           
 12710                           ;Dimmer_B1.c: 667: ;;
 12711                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12712  14C0  086D               	movf	_DimmerLights,w
 12713  14C1  3E04               	addlw	4
 12714  14C2  0086               	movwf	6
 12715  14C3  3001               	movlw	1	; select bank2/3
 12716  14C4  0087               	movwf	7
 12717  14C5  0801               	movf	1,w
 12718  14C6  00E3               	movwf	??_setDimmerLights_Adj
 12719  14C7  086D               	movf	_DimmerLights,w
 12720  14C8  3E05               	addlw	5
 12721  14C9  0086               	movwf	6
 12722  14CA  3001               	movlw	1	; select bank2/3
 12723  14CB  0087               	movwf	7
 12724  14CC  0863               	movf	??_setDimmerLights_Adj,w
 12725  14CD  0081               	movwf	1
 12726                           
 12727                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 12728  14CE  01DD               	clrf	setRF_DimmerLights@on
 12729  14CF  0ADD               	incf	setRF_DimmerLights@on,f
 12730  14D0  0864               	movf	setDimmerLights_Adj@lights,w
 12731  14D1  318C  241C  3194   	fcall	_setRF_DimmerLights
 12732                           
 12733                           ;Dimmer_B1.c: 677: setTxData();
 12734  14D4  3185  25D8         	fcall	_setTxData
 12735  14D6  0008               	return
 12736  14D7                     __end_of_setDimmerLights_Adj:	
 12737                           
 12738                           	psect	text81
 12739  0DE3                     __ptext81:	
 12740 ;; *************** function _setDimmerLights *****************
 12741 ;; Defined at:
 12742 ;;		line 604 in file "../src/Dimmer_B1.c"
 12743 ;; Parameters:    Size  Location     Type
 12744 ;;  lights          1    wreg     unsigned char 
 12745 ;;  status          1    4[BANK0 ] unsigned char 
 12746 ;; Auto vars:     Size  Location     Type
 12747 ;;  lights          1    6[BANK0 ] unsigned char 
 12748 ;; Return value:  Size  Location     Type
 12749 ;;		None               void
 12750 ;; Registers used:
 12751 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12752 ;; Tracked objects:
 12753 ;;		On entry : 0/0
 12754 ;;		On exit  : 0/0
 12755 ;;		Unchanged: 0/0
 12756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12757 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12758 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;Total ram usage:        3 bytes
 12762 ;; Hardware stack levels used:    1
 12763 ;; Hardware stack levels required when called:    7
 12764 ;; This function calls:
 12765 ;;		_DimmerLightsPointSelect
 12766 ;;		_setLED
 12767 ;;		_setMemory_GO
 12768 ;; This function is called by:
 12769 ;;		_setDimmerLights_Main
 12770 ;;		_setControl_Lights_Table
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           
 12775                           ;psect for function _setDimmerLights
 12776  0DE3                     _setDimmerLights:	
 12777                           
 12778                           ;incstack = 0
 12779                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12780                           ;setDimmerLights@lights stored from wreg
 12781  0DE3  0020               	movlb	0	; select bank0
 12782  0DE4  00A6               	movwf	setDimmerLights@lights
 12783                           
 12784                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 12785  0DE5  0826               	movf	setDimmerLights@lights,w
 12786  0DE6  319D  25D1  318D   	fcall	_DimmerLightsPointSelect
 12787                           
 12788                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 12789  0DE9  0020               	movlb	0	; select bank0
 12790  0DEA  0826               	movf	setDimmerLights@lights,w
 12791  0DEB  00A5               	movwf	??_setDimmerLights
 12792  0DEC  0A77               	incf	_Dimmer,w
 12793  0DED  0086               	movwf	6
 12794  0DEE  3001               	movlw	1	; select bank2/3
 12795  0DEF  0087               	movwf	7
 12796  0DF0  0825               	movf	??_setDimmerLights,w
 12797  0DF1  0081               	movwf	1
 12798                           
 12799                           ;Dimmer_B1.c: 607: if (status == 1) {
 12800  0DF2  0824               	movf	setDimmerLights@status,w
 12801  0DF3  3A01               	xorlw	1
 12802  0DF4  1D03               	skipz
 12803  0DF5  2E37               	goto	l8104
 12804                           
 12805                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 12806  0DF6  086D               	movf	_DimmerLights,w
 12807  0DF7  0086               	movwf	6
 12808  0DF8  3001               	movlw	1	; select bank2/3
 12809  0DF9  0087               	movwf	7
 12810  0DFA  1681               	bsf	1,5
 12811                           
 12812                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 12813  0DFB  01A2               	clrf	setLED@command
 12814  0DFC  0826               	movf	setDimmerLights@lights,w
 12815  0DFD  3189  215F  318D   	fcall	_setLED
 12816                           
 12817                           ;Dimmer_B1.c: 610: RC7=!0;
 12818  0E00  0020               	movlb	0	; select bank0
 12819  0E01  178E               	bsf	14,7	;volatile
 12820                           
 12821                           ;Dimmer_B1.c: 611: ;;
 12822                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 12823  0E02  086D               	movf	_DimmerLights,w
 12824  0E03  0086               	movwf	6
 12825  0E04  3001               	movlw	1	; select bank2/3
 12826  0E05  0087               	movwf	7
 12827  0E06  1481               	bsf	1,1
 12828                           
 12829                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 12830  0E07  3007               	movlw	7
 12831  0E08  00A5               	movwf	??_setDimmerLights
 12832  0E09  086D               	movf	_DimmerLights,w
 12833  0E0A  3E02               	addlw	2
 12834  0E0B  0086               	movwf	6
 12835  0E0C  3001               	movlw	1	; select bank2/3
 12836  0E0D  0087               	movwf	7
 12837  0E0E  0825               	movf	??_setDimmerLights,w
 12838  0E0F  0081               	movwf	1
 12839                           
 12840                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 12841  0E10  086D               	movf	_DimmerLights,w
 12842  0E11  0086               	movwf	6
 12843  0E12  3001               	movlw	1	; select bank2/3
 12844  0E13  0087               	movwf	7
 12845  0E14  1B01               	btfsc	1,6
 12846  0E15  0008               	return
 12847                           
 12848                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 12849  0E16  086D               	movf	_DimmerLights,w
 12850  0E17  0086               	movwf	6
 12851  0E18  3001               	movlw	1	; select bank2/3
 12852  0E19  0087               	movwf	7
 12853  0E1A  1701               	bsf	1,6
 12854                           
 12855                           ;Dimmer_B1.c: 618: ;;
 12856                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 12857  0E1B  3000               	movlw	0
 12858  0E1C  319F  2784         	fcall	_setMemory_GO
 12859                           
 12860                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12861  0E1E  0020               	movlb	0	; select bank0
 12862  0E1F  086D               	movf	_DimmerLights,w
 12863  0E20  3E05               	addlw	5
 12864  0E21  0086               	movwf	6
 12865  0E22  3001               	movlw	1	; select bank2/3
 12866  0E23  0087               	movwf	7
 12867  0E24  0801               	movf	1,w
 12868  0E25  00A5               	movwf	??_setDimmerLights
 12869  0E26  086D               	movf	_DimmerLights,w
 12870  0E27  3E04               	addlw	4
 12871  0E28  0086               	movwf	6
 12872  0E29  3001               	movlw	1	; select bank2/3
 12873  0E2A  0087               	movwf	7
 12874  0E2B  0825               	movf	??_setDimmerLights,w
 12875  0E2C  0081               	movwf	1
 12876                           
 12877                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12878  0E2D  3020               	movlw	32
 12879  0E2E  00A5               	movwf	??_setDimmerLights
 12880  0E2F  086D               	movf	_DimmerLights,w
 12881  0E30  3E04               	addlw	4
 12882  0E31  0086               	movwf	6
 12883  0E32  3001               	movlw	1	; select bank2/3
 12884  0E33  0087               	movwf	7
 12885  0E34  0825               	movf	??_setDimmerLights,w
 12886  0E35  0081               	movwf	1
 12887                           
 12888                           ;Dimmer_B1.c: 628: }
 12889                           ;Dimmer_B1.c: 629: } else {
 12890  0E36  0008               	return
 12891  0E37                     l8104:	
 12892                           
 12893                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 12894  0E37  086D               	movf	_DimmerLights,w
 12895  0E38  0086               	movwf	6
 12896  0E39  3001               	movlw	1	; select bank2/3
 12897  0E3A  0087               	movwf	7
 12898  0E3B  1281               	bcf	1,5
 12899                           
 12900                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12901  0E3C  086D               	movf	_DimmerLights,w
 12902  0E3D  3E06               	addlw	6
 12903  0E3E  0086               	movwf	6
 12904  0E3F  3001               	movlw	1	; select bank2/3
 12905  0E40  0087               	movwf	7
 12906  0E41  0801               	movf	1,w
 12907  0E42  00A5               	movwf	??_setDimmerLights
 12908  0E43  086D               	movf	_DimmerLights,w
 12909  0E44  3E04               	addlw	4
 12910  0E45  0086               	movwf	6
 12911  0E46  3001               	movlw	1	; select bank2/3
 12912  0E47  0087               	movwf	7
 12913  0E48  0825               	movf	??_setDimmerLights,w
 12914  0E49  0081               	movwf	1
 12915                           
 12916                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 12917  0E4A  086D               	movf	_DimmerLights,w
 12918  0E4B  0086               	movwf	6
 12919  0E4C  3001               	movlw	1	; select bank2/3
 12920  0E4D  0087               	movwf	7
 12921  0E4E  1481               	bsf	1,1
 12922                           
 12923                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 12924  0E4F  086D               	movf	_DimmerLights,w
 12925  0E50  0086               	movwf	6
 12926  0E51  3001               	movlw	1	; select bank2/3
 12927  0E52  0087               	movwf	7
 12928  0E53  1181               	bcf	1,3
 12929                           
 12930                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 12931  0E54  086D               	movf	_DimmerLights,w
 12932  0E55  0086               	movwf	6
 12933  0E56  3001               	movlw	1	; select bank2/3
 12934  0E57  0087               	movwf	7
 12935  0E58  1201               	bcf	1,4
 12936                           
 12937                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 12938  0E59  3007               	movlw	7
 12939  0E5A  00A5               	movwf	??_setDimmerLights
 12940  0E5B  086D               	movf	_DimmerLights,w
 12941  0E5C  3E02               	addlw	2
 12942  0E5D  0086               	movwf	6
 12943  0E5E  3001               	movlw	1	; select bank2/3
 12944  0E5F  0087               	movwf	7
 12945  0E60  0825               	movf	??_setDimmerLights,w
 12946  0E61  0081               	movwf	1
 12947  0E62  0008               	return
 12948  0E63                     __end_of_setDimmerLights:	
 12949                           
 12950                           	psect	text82
 12951  095F                     __ptext82:	
 12952 ;; *************** function _setLED *****************
 12953 ;; Defined at:
 12954 ;;		line 70 in file "../src/LED_B1.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;  led             1    wreg     unsigned char 
 12957 ;;  command         1    2[BANK0 ] unsigned char 
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;  led             1    3[BANK0 ] unsigned char 
 12960 ;; Return value:  Size  Location     Type
 12961 ;;		None               void
 12962 ;; Registers used:
 12963 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12969 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;Total ram usage:        2 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    6
 12976 ;; This function calls:
 12977 ;;		_LedPointSelect
 12978 ;; This function is called by:
 12979 ;;		_setDimmerLights_ERROR
 12980 ;;		_setDimmerLights
 12981 ;;		_setLED_Initialization
 12982 ;;		_setOverTemp_Exceptions
 12983 ;;		_setPowerFault_Exceptions
 12984 ;;		_setSw_Initialization
 12985 ;; This function uses a non-reentrant model
 12986 ;;
 12987                           
 12988                           
 12989                           ;psect for function _setLED
 12990  095F                     _setLED:	
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12994                           ;setLED@led stored from wreg
 12995  095F  0020               	movlb	0	; select bank0
 12996  0960  00A3               	movwf	setLED@led
 12997                           
 12998                           ;LED_B1.c: 71: LedPointSelect(led);
 12999  0961  0823               	movf	setLED@led,w
 13000  0962  3190  207A  3189   	fcall	_LedPointSelect
 13001                           
 13002                           ;LED_B1.c: 72: if (command == 0) {
 13003  0965  0020               	movlb	0	; select bank0
 13004  0966  08A2               	movf	setLED@command,f
 13005  0967  1D03               	skipz
 13006  0968  297B               	goto	l7980
 13007                           
 13008                           ;LED_B1.c: 74: if (led == 1) {
 13009  0969  0823               	movf	setLED@led,w
 13010  096A  3A01               	xorlw	1
 13011  096B  1D03               	skipz
 13012  096C  296F               	goto	l7972
 13013                           
 13014                           ;LED_B1.c: 78: RA3 = 1;
 13015  096D  158C               	bsf	12,3	;volatile
 13016                           
 13017                           ;LED_B1.c: 80: }
 13018  096E  0008               	return
 13019  096F                     l7972:	
 13020                           
 13021                           ;LED_B1.c: 83: else if (led == 2) {
 13022  096F  0823               	movf	setLED@led,w
 13023  0970  3A02               	xorlw	2
 13024  0971  1D03               	skipz
 13025  0972  2975               	goto	l7976
 13026                           
 13027                           ;LED_B1.c: 87: RC7 = 1;
 13028  0973  178E               	bsf	14,7	;volatile
 13029                           
 13030                           ;LED_B1.c: 89: }
 13031  0974  0008               	return
 13032  0975                     l7976:	
 13033                           
 13034                           ;LED_B1.c: 101: else if (led == 99) {
 13035  0975  0823               	movf	setLED@led,w
 13036  0976  3A63               	xorlw	99
 13037  0977  1D03               	skipz
 13038  0978  0008               	return
 13039                           
 13040                           ;LED_B1.c: 105: RB5 = 1;
 13041  0979  168D               	bsf	13,5	;volatile
 13042                           
 13043                           ;LED_B1.c: 107: }
 13044                           ;LED_B1.c: 109: } else if (command == 1) {
 13045  097A  0008               	return
 13046  097B                     l7980:	
 13047  097B  0822               	movf	setLED@command,w
 13048  097C  3A01               	xorlw	1
 13049  097D  1D03               	skipz
 13050  097E  2991               	goto	l7994
 13051                           
 13052                           ;LED_B1.c: 111: if (led == 1) {
 13053  097F  0823               	movf	setLED@led,w
 13054  0980  3A01               	xorlw	1
 13055  0981  1D03               	skipz
 13056  0982  2985               	goto	l7986
 13057                           
 13058                           ;LED_B1.c: 115: RA3 = 0;
 13059  0983  118C               	bcf	12,3	;volatile
 13060                           
 13061                           ;LED_B1.c: 117: }
 13062  0984  0008               	return
 13063  0985                     l7986:	
 13064                           
 13065                           ;LED_B1.c: 120: else if (led == 2) {
 13066  0985  0823               	movf	setLED@led,w
 13067  0986  3A02               	xorlw	2
 13068  0987  1D03               	skipz
 13069  0988  298B               	goto	l7990
 13070                           
 13071                           ;LED_B1.c: 124: RC7 = 0;
 13072  0989  138E               	bcf	14,7	;volatile
 13073                           
 13074                           ;LED_B1.c: 126: }
 13075  098A  0008               	return
 13076  098B                     l7990:	
 13077                           
 13078                           ;LED_B1.c: 138: else if (led == 99) {
 13079  098B  0823               	movf	setLED@led,w
 13080  098C  3A63               	xorlw	99
 13081  098D  1D03               	skipz
 13082  098E  0008               	return
 13083                           
 13084                           ;LED_B1.c: 142: RB5 = 0;
 13085  098F  128D               	bcf	13,5	;volatile
 13086                           
 13087                           ;LED_B1.c: 144: }
 13088                           ;LED_B1.c: 146: } else if (command == 10) {
 13089  0990  0008               	return
 13090  0991                     l7994:	
 13091  0991  0822               	movf	setLED@command,w
 13092  0992  3A0A               	xorlw	10
 13093  0993  1D03               	skipz
 13094  0994  29B3               	goto	l8010
 13095                           
 13096                           ;LED_B1.c: 147: LED->GO = 0;
 13097  0995  0879               	movf	_LED,w
 13098  0996  0086               	movwf	6
 13099  0997  3001               	movlw	1	; select bank2/3
 13100  0998  0087               	movwf	7
 13101  0999  1081               	bcf	1,1
 13102                           
 13103                           ;LED_B1.c: 148: LED->Time = 0;
 13104  099A  0A79               	incf	_LED,w
 13105  099B  0086               	movwf	6
 13106  099C  3001               	movlw	1	; select bank2/3
 13107  099D  0087               	movwf	7
 13108  099E  3000               	movlw	0
 13109  099F  3FC0               	movwi [0]fsr1
 13110  09A0  3FC1               	movwi [1]fsr1
 13111                           
 13112                           ;LED_B1.c: 150: if (led == 1) {
 13113  09A1  0823               	movf	setLED@led,w
 13114  09A2  3A01               	xorlw	1
 13115  09A3  1D03               	skipz
 13116  09A4  29A7               	goto	l8002
 13117                           
 13118                           ;LED_B1.c: 154: RA3 = 1;
 13119  09A5  158C               	bsf	12,3	;volatile
 13120                           
 13121                           ;LED_B1.c: 156: }
 13122  09A6  0008               	return
 13123  09A7                     l8002:	
 13124                           
 13125                           ;LED_B1.c: 159: else if (led == 2) {
 13126  09A7  0823               	movf	setLED@led,w
 13127  09A8  3A02               	xorlw	2
 13128  09A9  1D03               	skipz
 13129  09AA  29AD               	goto	l8006
 13130                           
 13131                           ;LED_B1.c: 163: RC7 = 1;
 13132  09AB  178E               	bsf	14,7	;volatile
 13133                           
 13134                           ;LED_B1.c: 165: }
 13135  09AC  0008               	return
 13136  09AD                     l8006:	
 13137                           
 13138                           ;LED_B1.c: 177: else if (led == 99) {
 13139  09AD  0823               	movf	setLED@led,w
 13140  09AE  3A63               	xorlw	99
 13141  09AF  1D03               	skipz
 13142  09B0  0008               	return
 13143                           
 13144                           ;LED_B1.c: 181: RB5 = 1;
 13145  09B1  168D               	bsf	13,5	;volatile
 13146                           
 13147                           ;LED_B1.c: 183: }
 13148                           ;LED_B1.c: 185: } else if (command == 11) {
 13149  09B2  0008               	return
 13150  09B3                     l8010:	
 13151  09B3  0822               	movf	setLED@command,w
 13152  09B4  3A0B               	xorlw	11
 13153  09B5  1D03               	skipz
 13154  09B6  0008               	return
 13155                           
 13156                           ;LED_B1.c: 186: LED->GO = 1;
 13157  09B7  0879               	movf	_LED,w
 13158  09B8  0086               	movwf	6
 13159  09B9  3001               	movlw	1	; select bank2/3
 13160  09BA  0087               	movwf	7
 13161  09BB  1481               	bsf	1,1
 13162  09BC  0008               	return
 13163  09BD                     __end_of_setLED:	
 13164                           
 13165                           	psect	text83
 13166  107A                     __ptext83:	
 13167 ;; *************** function _LedPointSelect *****************
 13168 ;; Defined at:
 13169 ;;		line 7 in file "../src/LED_B1.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;  led             1    wreg     unsigned char 
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;  led             1    1[BANK0 ] unsigned char 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;		None               void
 13176 ;; Registers used:
 13177 ;;		wreg
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13187 ;;Total ram usage:        2 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    5
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_setLED_Initialization
 13194 ;;		_setLED
 13195 ;;		_setLED_Main
 13196 ;; This function uses a non-reentrant model
 13197 ;;
 13198                           
 13199                           
 13200                           ;psect for function _LedPointSelect
 13201  107A                     _LedPointSelect:	
 13202                           
 13203                           ;incstack = 0
 13204                           ; Regs used in _LedPointSelect: [wreg]
 13205                           ;LedPointSelect@led stored from wreg
 13206  107A  0020               	movlb	0	; select bank0
 13207  107B  00A1               	movwf	LedPointSelect@led
 13208                           
 13209                           ;LED_B1.c: 9: if (led == 1) {
 13210  107C  0821               	movf	LedPointSelect@led,w
 13211  107D  3A01               	xorlw	1
 13212  107E  1D03               	skipz
 13213  107F  2885               	goto	l7766
 13214                           
 13215                           ;LED_B1.c: 10: LED = &VarLED1;
 13216  1080  3059               	movlw	_VarLED1& (0+255)
 13217  1081  00A0               	movwf	??_LedPointSelect
 13218  1082  0820               	movf	??_LedPointSelect,w
 13219  1083  00F9               	movwf	_LED
 13220                           
 13221                           ;LED_B1.c: 11: }
 13222  1084  0008               	return
 13223  1085                     l7766:	
 13224                           
 13225                           ;LED_B1.c: 14: else if (led == 2) {
 13226  1085  0821               	movf	LedPointSelect@led,w
 13227  1086  3A02               	xorlw	2
 13228  1087  1D03               	skipz
 13229  1088  288E               	goto	l7770
 13230                           
 13231                           ;LED_B1.c: 15: LED = &VarLED2;
 13232  1089  305D               	movlw	_VarLED2& (0+255)
 13233  108A  00A0               	movwf	??_LedPointSelect
 13234  108B  0820               	movf	??_LedPointSelect,w
 13235  108C  00F9               	movwf	_LED
 13236                           
 13237                           ;LED_B1.c: 16: }
 13238  108D  0008               	return
 13239  108E                     l7770:	
 13240                           
 13241                           ;LED_B1.c: 24: else if (led == 99) {
 13242  108E  0821               	movf	LedPointSelect@led,w
 13243  108F  3A63               	xorlw	99
 13244  1090  1D03               	skipz
 13245  1091  0008               	return
 13246                           
 13247                           ;LED_B1.c: 25: LED = &VarErrLED;
 13248  1092  3055               	movlw	_VarErrLED& (0+255)
 13249  1093  00A0               	movwf	??_LedPointSelect
 13250  1094  0820               	movf	??_LedPointSelect,w
 13251  1095  00F9               	movwf	_LED
 13252  1096  0008               	return
 13253  1097                     __end_of_LedPointSelect:	
 13254                           
 13255                           	psect	text84
 13256  1F6F                     __ptext84:	
 13257 ;; *************** function _DimmerLights_Close *****************
 13258 ;; Defined at:
 13259 ;;		line 407 in file "../src/Dimmer_B1.c"
 13260 ;; Parameters:    Size  Location     Type
 13261 ;;		None
 13262 ;; Auto vars:     Size  Location     Type
 13263 ;;		None
 13264 ;; Return value:  Size  Location     Type
 13265 ;;		None               void
 13266 ;; Registers used:
 13267 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13268 ;; Tracked objects:
 13269 ;;		On entry : 0/0
 13270 ;;		On exit  : 0/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13277 ;;Total ram usage:        0 bytes
 13278 ;; Hardware stack levels used:    1
 13279 ;; Hardware stack levels required when called:    6
 13280 ;; This function calls:
 13281 ;;		_getDimmerLights_StatusFlag
 13282 ;;		_setMemory_GO
 13283 ;; This function is called by:
 13284 ;;		_DimmerLights_Main
 13285 ;; This function uses a non-reentrant model
 13286 ;;
 13287                           
 13288                           
 13289                           ;psect for function _DimmerLights_Close
 13290  1F6F                     _DimmerLights_Close:	
 13291                           
 13292                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 13293                           
 13294                           ;incstack = 0
 13295                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13296  1F6F  0877               	movf	_Dimmer,w
 13297  1F70  0086               	movwf	6
 13298  1F71  3001               	movlw	1	; select bank2/3
 13299  1F72  0087               	movwf	7
 13300  1F73  1C01               	btfss	1,0
 13301  1F74  0008               	return
 13302                           
 13303                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 13304  1F75  0877               	movf	_Dimmer,w
 13305  1F76  0086               	movwf	6
 13306  1F77  3001               	movlw	1	; select bank2/3
 13307  1F78  0087               	movwf	7
 13308  1F79  1001               	bcf	1,0
 13309                           
 13310                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 13311  1F7A  319D  25B1  319F   	fcall	_getDimmerLights_StatusFlag
 13312  1F7D  3800               	iorlw	0
 13313  1F7E  1D03               	skipz
 13314  1F7F  0008               	return
 13315                           
 13316                           ;Dimmer_B1.c: 411: ;;
 13317                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 13318  1F80  3001               	movlw	1
 13319  1F81  319F  2784         	fcall	_setMemory_GO
 13320  1F83  0008               	return
 13321  1F84                     __end_of_DimmerLights_Close:	
 13322                           
 13323                           	psect	text85
 13324  1F84                     __ptext85:	
 13325 ;; *************** function _setMemory_GO *****************
 13326 ;; Defined at:
 13327 ;;		line 885 in file "../src/MCU_B1.c"
 13328 ;; Parameters:    Size  Location     Type
 13329 ;;  command         1    wreg     unsigned char 
 13330 ;; Auto vars:     Size  Location     Type
 13331 ;;  command         1    2[BANK0 ] unsigned char 
 13332 ;; Return value:  Size  Location     Type
 13333 ;;		None               void
 13334 ;; Registers used:
 13335 ;;		wreg, status,2, status,0
 13336 ;; Tracked objects:
 13337 ;;		On entry : 0/0
 13338 ;;		On exit  : 0/0
 13339 ;;		Unchanged: 0/0
 13340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13344 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13345 ;;Total ram usage:        3 bytes
 13346 ;; Hardware stack levels used:    1
 13347 ;; Hardware stack levels required when called:    5
 13348 ;; This function calls:
 13349 ;;		Nothing
 13350 ;; This function is called by:
 13351 ;;		_DimmerLights_Close
 13352 ;;		_setDimmerLights
 13353 ;; This function uses a non-reentrant model
 13354 ;;
 13355                           
 13356                           
 13357                           ;psect for function _setMemory_GO
 13358  1F84                     _setMemory_GO:	
 13359                           
 13360                           ;incstack = 0
 13361                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 13362                           ;setMemory_GO@command stored from wreg
 13363  1F84  0020               	movlb	0	; select bank0
 13364  1F85  00A2               	movwf	setMemory_GO@command
 13365                           
 13366                           ;MCU_B1.c: 886: Memory.GO = command;
 13367  1F86  0822               	movf	setMemory_GO@command,w
 13368  1F87  0023               	movlb	3	; select bank3
 13369  1F88  10C4               	bcf	(_Memory^(0+384)+36),1
 13370  1F89  1D03               	skipz
 13371  1F8A  14C4               	bsf	(_Memory^(0+384)+36),1
 13372                           
 13373                           ;MCU_B1.c: 887: if (command == 0) {
 13374  1F8B  0020               	movlb	0	; select bank0
 13375  1F8C  08A2               	movf	setMemory_GO@command,f
 13376  1F8D  1D03               	skipz
 13377  1F8E  0008               	return
 13378                           
 13379                           ;MCU_B1.c: 888: Memory.Time = command;
 13380  1F8F  0822               	movf	setMemory_GO@command,w
 13381  1F90  00A0               	movwf	??_setMemory_GO
 13382  1F91  01A1               	clrf	??_setMemory_GO+1
 13383  1F92  0820               	movf	??_setMemory_GO,w
 13384  1F93  0023               	movlb	3	; select bank3
 13385  1F94  00C2               	movwf	(_Memory^(0+384)+34)
 13386  1F95  0020               	movlb	0	; select bank0
 13387  1F96  0821               	movf	??_setMemory_GO+1,w
 13388  1F97  0023               	movlb	3	; select bank3
 13389  1F98  00C3               	movwf	((_Memory+1)^(0+384)+34)
 13390  1F99  0008               	return
 13391  1F9A                     __end_of_setMemory_GO:	
 13392                           
 13393                           	psect	text86
 13394  1DB1                     __ptext86:	
 13395 ;; *************** function _getDimmerLights_StatusFlag *****************
 13396 ;; Defined at:
 13397 ;;		line 486 in file "../src/Dimmer_B1.c"
 13398 ;; Parameters:    Size  Location     Type
 13399 ;;		None
 13400 ;; Auto vars:     Size  Location     Type
 13401 ;;  Status          1    0[BANK0 ] unsigned char 
 13402 ;; Return value:  Size  Location     Type
 13403 ;;                  1    wreg      unsigned char 
 13404 ;; Registers used:
 13405 ;;		wreg, status,2
 13406 ;; Tracked objects:
 13407 ;;		On entry : 0/0
 13408 ;;		On exit  : 0/0
 13409 ;;		Unchanged: 0/0
 13410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;Total ram usage:        1 bytes
 13416 ;; Hardware stack levels used:    1
 13417 ;; Hardware stack levels required when called:    5
 13418 ;; This function calls:
 13419 ;;		Nothing
 13420 ;; This function is called by:
 13421 ;;		_DimmerLights_Close
 13422 ;;		_DimmerLights_Exceptions
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           
 13427                           ;psect for function _getDimmerLights_StatusFlag
 13428  1DB1                     _getDimmerLights_StatusFlag:	
 13429                           
 13430                           ;Dimmer_B1.c: 487: char Status = 0;
 13431                           
 13432                           ;incstack = 0
 13433                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13434  1DB1  0020               	movlb	0	; select bank0
 13435  1DB2  01A0               	clrf	getDimmerLights_StatusFlag@Status
 13436                           
 13437                           ;Dimmer_B1.c: 498: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 13438  1DB3  3000               	movlw	0
 13439  1DB4  0022               	movlb	2	; select bank2
 13440  1DB5  1B3D               	btfsc	_DimmerLights1^(0+256),6
 13441  1DB6  3001               	movlw	1
 13442  1DB7  0020               	movlb	0	; select bank0
 13443  1DB8  00A0               	movwf	getDimmerLights_StatusFlag@Status
 13444                           
 13445                           ;Dimmer_B1.c: 501: return Status;
 13446  1DB9  0820               	movf	getDimmerLights_StatusFlag@Status,w
 13447  1DBA  0008               	return
 13448  1DBB                     __end_of_getDimmerLights_StatusFlag:	
 13449                           
 13450                           	psect	text87
 13451  1E2F                     __ptext87:	
 13452 ;; *************** function _DimmerLights_Initialization *****************
 13453 ;; Defined at:
 13454 ;;		line 345 in file "../src/Dimmer_B1.c"
 13455 ;; Parameters:    Size  Location     Type
 13456 ;;		None
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;		None
 13459 ;; Return value:  Size  Location     Type
 13460 ;;		None               void
 13461 ;; Registers used:
 13462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13463 ;; Tracked objects:
 13464 ;;		On entry : 0/0
 13465 ;;		On exit  : 0/0
 13466 ;;		Unchanged: 0/0
 13467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;Total ram usage:        1 bytes
 13473 ;; Hardware stack levels used:    1
 13474 ;; Hardware stack levels required when called:    7
 13475 ;; This function calls:
 13476 ;;		_Dimmer_Initialization
 13477 ;;		_setDimmerLights_Initialization
 13478 ;; This function is called by:
 13479 ;;		_main
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           
 13484                           ;psect for function _DimmerLights_Initialization
 13485  1E2F                     _DimmerLights_Initialization:	
 13486                           
 13487                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 13488                           
 13489                           ;incstack = 0
 13490                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13491  1E2F  303D               	movlw	_DimmerLights1& (0+255)
 13492  1E30  0020               	movlb	0	; select bank0
 13493  1E31  00A4               	movwf	??_DimmerLights_Initialization
 13494  1E32  0824               	movf	??_DimmerLights_Initialization,w
 13495  1E33  0021               	movlb	1	; select bank1
 13496  1E34  00D4               	movwf	_DimmerLights11^(0+128)
 13497                           
 13498                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 13499  1E35  3001               	movlw	1
 13500  1E36  3192  22CC  319E   	fcall	_setDimmerLights_Initialization
 13501                           
 13502                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 13503  1E39  319D  2543         	fcall	_Dimmer_Initialization
 13504  1E3B  0008               	return
 13505  1E3C                     __end_of_DimmerLights_Initialization:	
 13506                           
 13507                           	psect	text88
 13508  12CC                     __ptext88:	
 13509 ;; *************** function _setDimmerLights_Initialization *****************
 13510 ;; Defined at:
 13511 ;;		line 368 in file "../src/Dimmer_B1.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;  lights          1    wreg     unsigned char 
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;  lights          1    3[BANK0 ] unsigned char 
 13516 ;; Return value:  Size  Location     Type
 13517 ;;		None               void
 13518 ;; Registers used:
 13519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        2 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    6
 13532 ;; This function calls:
 13533 ;;		_DimmerLightsPointSelect
 13534 ;; This function is called by:
 13535 ;;		_DimmerLights_Initialization
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           
 13540                           ;psect for function _setDimmerLights_Initialization
 13541  12CC                     _setDimmerLights_Initialization:	
 13542                           
 13543                           ;incstack = 0
 13544                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13545                           ;setDimmerLights_Initialization@lights stored from wreg
 13546  12CC  0020               	movlb	0	; select bank0
 13547  12CD  00A3               	movwf	setDimmerLights_Initialization@lights
 13548                           
 13549                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 13550  12CE  0823               	movf	setDimmerLights_Initialization@lights,w
 13551  12CF  319D  25D1         	fcall	_DimmerLightsPointSelect
 13552                           
 13553                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 13554  12D1  0020               	movlb	0	; select bank0
 13555  12D2  086D               	movf	_DimmerLights,w
 13556  12D3  3E09               	addlw	9
 13557  12D4  0086               	movwf	6
 13558  12D5  3001               	movlw	1	; select bank2/3
 13559  12D6  0087               	movwf	7
 13560  12D7  1501               	bsf	1,2
 13561                           
 13562                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13563  12D8  3020               	movlw	32
 13564  12D9  00A2               	movwf	??_setDimmerLights_Initialization
 13565  12DA  086D               	movf	_DimmerLights,w
 13566  12DB  3E05               	addlw	5
 13567  12DC  0086               	movwf	6
 13568  12DD  3001               	movlw	1	; select bank2/3
 13569  12DE  0087               	movwf	7
 13570  12DF  0822               	movf	??_setDimmerLights_Initialization,w
 13571  12E0  0081               	movwf	1
 13572                           
 13573                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13574  12E1  303C               	movlw	60
 13575  12E2  00A2               	movwf	??_setDimmerLights_Initialization
 13576  12E3  086D               	movf	_DimmerLights,w
 13577  12E4  3E06               	addlw	6
 13578  12E5  0086               	movwf	6
 13579  12E6  3001               	movlw	1	; select bank2/3
 13580  12E7  0087               	movwf	7
 13581  12E8  0822               	movf	??_setDimmerLights_Initialization,w
 13582  12E9  0081               	movwf	1
 13583                           
 13584                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13585  12EA  086D               	movf	_DimmerLights,w
 13586  12EB  3E06               	addlw	6
 13587  12EC  0086               	movwf	6
 13588  12ED  3001               	movlw	1	; select bank2/3
 13589  12EE  0087               	movwf	7
 13590  12EF  0801               	movf	1,w
 13591  12F0  00A2               	movwf	??_setDimmerLights_Initialization
 13592  12F1  086D               	movf	_DimmerLights,w
 13593  12F2  3E04               	addlw	4
 13594  12F3  0086               	movwf	6
 13595  12F4  3001               	movlw	1	; select bank2/3
 13596  12F5  0087               	movwf	7
 13597  12F6  0822               	movf	??_setDimmerLights_Initialization,w
 13598  12F7  0081               	movwf	1
 13599  12F8  0008               	return
 13600  12F9                     __end_of_setDimmerLights_Initialization:	
 13601                           
 13602                           	psect	text89
 13603  1D43                     __ptext89:	
 13604 ;; *************** function _Dimmer_Initialization *****************
 13605 ;; Defined at:
 13606 ;;		line 797 in file "../src/Dimmer_B1.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;		None
 13609 ;; Auto vars:     Size  Location     Type
 13610 ;;		None
 13611 ;; Return value:  Size  Location     Type
 13612 ;;		None               void
 13613 ;; Registers used:
 13614 ;;		wreg
 13615 ;; Tracked objects:
 13616 ;;		On entry : 0/0
 13617 ;;		On exit  : 0/0
 13618 ;;		Unchanged: 0/0
 13619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13624 ;;Total ram usage:        1 bytes
 13625 ;; Hardware stack levels used:    1
 13626 ;; Hardware stack levels required when called:    5
 13627 ;; This function calls:
 13628 ;;		Nothing
 13629 ;; This function is called by:
 13630 ;;		_DimmerLights_Initialization
 13631 ;; This function uses a non-reentrant model
 13632 ;;
 13633                           
 13634                           
 13635                           ;psect for function _Dimmer_Initialization
 13636  1D43                     _Dimmer_Initialization:	
 13637                           
 13638                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 13639                           
 13640                           ;incstack = 0
 13641                           ; Regs used in _Dimmer_Initialization: [wreg]
 13642  1D43  3061               	movlw	_Dimmer1& (0+255)
 13643  1D44  0020               	movlb	0	; select bank0
 13644  1D45  00A0               	movwf	??_Dimmer_Initialization
 13645  1D46  0820               	movf	??_Dimmer_Initialization,w
 13646  1D47  00F7               	movwf	_Dimmer
 13647  1D48  0008               	return
 13648  1D49                     __end_of_Dimmer_Initialization:	
 13649                           
 13650                           	psect	text90
 13651  1D2E                     __ptext90:	
 13652 ;; *************** function _DelayOff_Main *****************
 13653 ;; Defined at:
 13654 ;;		line 41 in file "../src/DelayOff_B1.c"
 13655 ;; Parameters:    Size  Location     Type
 13656 ;;		None
 13657 ;; Auto vars:     Size  Location     Type
 13658 ;;		None
 13659 ;; Return value:  Size  Location     Type
 13660 ;;		None               void
 13661 ;; Registers used:
 13662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13663 ;; Tracked objects:
 13664 ;;		On entry : 0/0
 13665 ;;		On exit  : 0/0
 13666 ;;		Unchanged: 0/0
 13667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;Total ram usage:        0 bytes
 13673 ;; Hardware stack levels used:    1
 13674 ;; Hardware stack levels required when called:   10
 13675 ;; This function calls:
 13676 ;;		_DlyOff_Main
 13677 ;; This function is called by:
 13678 ;;		_main
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           
 13683                           ;psect for function _DelayOff_Main
 13684  1D2E                     _DelayOff_Main:	
 13685                           
 13686                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13687                           
 13688                           ;incstack = 0
 13689                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13690  1D2E  3001               	movlw	1
 13691  1D2F  318B  23B1         	fcall	_DlyOff_Main
 13692  1D31  0008               	return
 13693  1D32                     __end_of_DelayOff_Main:	
 13694                           
 13695                           	psect	text91
 13696  0BB1                     __ptext91:	
 13697 ;; *************** function _DlyOff_Main *****************
 13698 ;; Defined at:
 13699 ;;		line 62 in file "../src/DelayOff_B1.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  sw              1    wreg     unsigned char 
 13702 ;; Auto vars:     Size  Location     Type
 13703 ;;  sw              1   68[BANK0 ] unsigned char 
 13704 ;; Return value:  Size  Location     Type
 13705 ;;		None               void
 13706 ;; Registers used:
 13707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13708 ;; Tracked objects:
 13709 ;;		On entry : 0/0
 13710 ;;		On exit  : 0/0
 13711 ;;		Unchanged: 0/0
 13712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;Total ram usage:        3 bytes
 13718 ;; Hardware stack levels used:    1
 13719 ;; Hardware stack levels required when called:    9
 13720 ;; This function calls:
 13721 ;;		_DelayOffPointSelect
 13722 ;;		_setBuz
 13723 ;;		_setDimmerLights_Switch
 13724 ;;		_setDimmerLights_Trigger
 13725 ;;		_setRFSW_Status
 13726 ;;		_setRF_DimmerLights
 13727 ;;		_setSw_Status
 13728 ;;		_setTxData
 13729 ;; This function is called by:
 13730 ;;		_DelayOff_Main
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           
 13735                           ;psect for function _DlyOff_Main
 13736  0BB1                     _DlyOff_Main:	
 13737                           
 13738                           ;incstack = 0
 13739                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13740                           ;DlyOff_Main@sw stored from wreg
 13741  0BB1  0020               	movlb	0	; select bank0
 13742  0BB2  00E4               	movwf	DlyOff_Main@sw
 13743                           
 13744                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13745  0BB3  0864               	movf	DlyOff_Main@sw,w
 13746  0BB4  319D  25C6  318B   	fcall	_DelayOffPointSelect
 13747                           
 13748                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13749  0BB7  0876               	movf	_DelayOff,w
 13750  0BB8  0086               	movwf	6
 13751  0BB9  0187               	clrf	7
 13752  0BBA  1C81               	btfss	1,1
 13753  0BBB  0008               	return
 13754                           
 13755                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13756  0BBC  0876               	movf	_DelayOff,w
 13757  0BBD  0086               	movwf	6
 13758  0BBE  0187               	clrf	7
 13759  0BBF  3001               	movlw	1
 13760  0BC0  0781               	addwf	1,f
 13761  0BC1  3141               	addfsr 1,1
 13762  0BC2  1803               	skipnc
 13763  0BC3  0A81               	incf	1,f
 13764                           
 13765                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13766  0BC4  0876               	movf	_DelayOff,w
 13767  0BC5  0086               	movwf	6
 13768  0BC6  0187               	clrf	7
 13769  0BC7  3F40               	moviw [0]fsr1
 13770  0BC8  0020               	movlb	0	; select bank0
 13771  0BC9  00E2               	movwf	??_DlyOff_Main
 13772  0BCA  3F41               	moviw [1]fsr1
 13773  0BCB  00E3               	movwf	??_DlyOff_Main+1
 13774  0BCC  3015               	movlw	21
 13775  0BCD  0263               	subwf	??_DlyOff_Main+1,w
 13776  0BCE  30E0               	movlw	224
 13777  0BCF  1903               	skipnz
 13778  0BD0  0262               	subwf	??_DlyOff_Main,w
 13779  0BD1  1C03               	skipc
 13780  0BD2  0008               	return
 13781                           
 13782                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13783  0BD3  0876               	movf	_DelayOff,w
 13784  0BD4  0086               	movwf	6
 13785  0BD5  0187               	clrf	7
 13786  0BD6  3000               	movlw	0
 13787  0BD7  3FC0               	movwi [0]fsr1
 13788  0BD8  3FC1               	movwi [1]fsr1
 13789                           
 13790                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13791  0BD9  3001               	movlw	1
 13792  0BDA  00E2               	movwf	??_DlyOff_Main
 13793  0BDB  0876               	movf	_DelayOff,w
 13794  0BDC  0086               	movwf	6
 13795  0BDD  0187               	clrf	7
 13796  0BDE  0862               	movf	??_DlyOff_Main,w
 13797  0BDF  0781               	addwf	1,f
 13798                           
 13799                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13800  0BE0  0876               	movf	_DelayOff,w
 13801  0BE1  0086               	movwf	6
 13802  0BE2  0187               	clrf	7
 13803  0BE3  0876               	movf	_DelayOff,w
 13804  0BE4  0084               	movwf	4
 13805  0BE5  0185               	clrf	5
 13806  0BE6  0800               	movf	0,w
 13807  0BE7  0201               	subwf	1,w
 13808  0BE8  1C03               	skipc
 13809  0BE9  0008               	return
 13810                           
 13811                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13812  0BEA  0876               	movf	_DelayOff,w
 13813  0BEB  0086               	movwf	6
 13814  0BEC  0187               	clrf	7
 13815  0BED  0181               	clrf	1
 13816                           
 13817                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13818  0BEE  0876               	movf	_DelayOff,w
 13819  0BEF  0086               	movwf	6
 13820  0BF0  0187               	clrf	7
 13821  0BF1  1081               	bcf	1,1
 13822                           
 13823                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13824  0BF2  01A2               	clrf	setSw_Status@command
 13825  0BF3  0864               	movf	DlyOff_Main@sw,w
 13826  0BF4  319E  2673  318B   	fcall	_setSw_Status
 13827                           
 13828                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13829  0BF7  0020               	movlb	0	; select bank0
 13830  0BF8  01A2               	clrf	setRFSW_Status@command
 13831  0BF9  0864               	movf	DlyOff_Main@sw,w
 13832  0BFA  319E  2664  318B   	fcall	_setRFSW_Status
 13833                           
 13834                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13835  0BFD  0020               	movlb	0	; select bank0
 13836  0BFE  01DD               	clrf	setRF_DimmerLights@on
 13837  0BFF  0864               	movf	DlyOff_Main@sw,w
 13838  0C00  318C  241C  318B   	fcall	_setRF_DimmerLights
 13839                           
 13840                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13841  0C03  0020               	movlb	0	; select bank0
 13842  0C04  01A2               	clrf	setDimmerLights_Trigger@command
 13843  0C05  0AA2               	incf	setDimmerLights_Trigger@command,f
 13844  0C06  0864               	movf	DlyOff_Main@sw,w
 13845  0C07  319E  26BF  318B   	fcall	_setDimmerLights_Trigger
 13846                           
 13847                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13848  0C0A  0020               	movlb	0	; select bank0
 13849  0C0B  01A2               	clrf	setDimmerLights_Switch@command
 13850  0C0C  0864               	movf	DlyOff_Main@sw,w
 13851  0C0D  319E  26AF  318B   	fcall	_setDimmerLights_Switch
 13852                           
 13853                           ;DelayOff_B1.c: 78: setTxData();
 13854  0C10  3185  25D8  318B   	fcall	_setTxData
 13855                           
 13856                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13857  0C13  3064               	movlw	100
 13858  0C14  0020               	movlb	0	; select bank0
 13859  0C15  00A9               	movwf	setBuz@time
 13860  0C16  3000               	movlw	0
 13861  0C17  00AA               	movwf	setBuz@time+1
 13862  0C18  3001               	movlw	1
 13863  0C19  3188  2050         	fcall	_setBuz
 13864  0C1B  0008               	return
 13865  0C1C                     __end_of_DlyOff_Main:	
 13866                           
 13867                           	psect	text92
 13868  05D8                     __ptext92:	
 13869 ;; *************** function _setTxData *****************
 13870 ;; Defined at:
 13871 ;;		line 191 in file "../src/RF_Control_B1.c"
 13872 ;; Parameters:    Size  Location     Type
 13873 ;;		None
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;  i               1    0        unsigned char 
 13876 ;; Return value:  Size  Location     Type
 13877 ;;		None               void
 13878 ;; Registers used:
 13879 ;;		wreg, fsr1l, fsr1h
 13880 ;; Tracked objects:
 13881 ;;		On entry : 0/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13888 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13889 ;;Total ram usage:        1 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    5
 13892 ;; This function calls:
 13893 ;;		Nothing
 13894 ;; This function is called by:
 13895 ;;		_DlyOff_Main
 13896 ;;		_setDimmerLights_Adj
 13897 ;;		_setControl_Lights_Table
 13898 ;;		_setRFSW_Control
 13899 ;;		_setRFSW_AdjControl
 13900 ;;		_Sw_DimmerOnFunc
 13901 ;;		_Sw_DimmerOffFunc
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           
 13906                           ;psect for function _setTxData
 13907  05D8                     _setTxData:	
 13908                           
 13909                           ;RF_Control_B1.c: 192: char i;
 13910                           ;RF_Control_B1.c: 193: if (RF1.Enable == 1) {
 13911                           
 13912                           ;incstack = 0
 13913                           ; Regs used in _setTxData: [wregfsr1]
 13914  05D8  0021               	movlb	1	; select bank1
 13915  05D9  1C3E               	btfss	_RF1^(0+128),0
 13916  05DA  0008               	return
 13917                           
 13918                           ;RF_Control_B1.c: 195: RF1.TransceiveGO = 1;
 13919  05DB  153E               	bsf	_RF1^(0+128),2
 13920                           
 13921                           ;RF_Control_B1.c: 196: RF1.RunTime = 20;
 13922  05DC  3014               	movlw	20
 13923  05DD  0020               	movlb	0	; select bank0
 13924  05DE  00A0               	movwf	??_setTxData
 13925  05DF  0820               	movf	??_setTxData,w
 13926  05E0  0021               	movlb	1	; select bank1
 13927  05E1  00C3               	movwf	(_RF1^(0+128)+5)
 13928                           
 13929                           ;RF_Control_B1.c: 206: RF_Data[0] = 0x63;
 13930  05E2  3063               	movlw	99
 13931  05E3  0020               	movlb	0	; select bank0
 13932  05E4  00A0               	movwf	??_setTxData
 13933  05E5  0820               	movf	??_setTxData,w
 13934  05E6  0022               	movlb	2	; select bank2
 13935  05E7  00A0               	movwf	_RF_Data^(0+256)
 13936                           
 13937                           ;RF_Control_B1.c: 207: RF_Data[1] = 0x02;
 13938  05E8  3002               	movlw	2
 13939  05E9  0020               	movlb	0	; select bank0
 13940  05EA  00A0               	movwf	??_setTxData
 13941  05EB  0820               	movf	??_setTxData,w
 13942  05EC  0022               	movlb	2	; select bank2
 13943  05ED  00A1               	movwf	(_RF_Data^(0+256)+1)
 13944                           
 13945                           ;RF_Control_B1.c: 208: RF_Data[2] = product->Data[2];
 13946  05EE  0020               	movlb	0	; select bank0
 13947  05EF  086C               	movf	_product,w
 13948  05F0  0086               	movwf	6
 13949  05F1  3001               	movlw	1	; select bank2/3
 13950  05F2  0087               	movwf	7
 13951  05F3  3001               	movlw	1	; select bank2/3
 13952  05F4  3F42               	moviw [2]fsr1
 13953  05F5  0022               	movlb	2	; select bank2
 13954  05F6  00A2               	movwf	(_RF_Data^(0+256)+2)
 13955                           
 13956                           ;RF_Control_B1.c: 209: RF_Data[3] = product->Data[3];
 13957  05F7  0020               	movlb	0	; select bank0
 13958  05F8  086C               	movf	_product,w
 13959  05F9  0086               	movwf	6
 13960  05FA  3001               	movlw	1	; select bank2/3
 13961  05FB  0087               	movwf	7
 13962  05FC  3001               	movlw	1	; select bank2/3
 13963  05FD  3F43               	moviw [3]fsr1
 13964  05FE  0022               	movlb	2	; select bank2
 13965  05FF  00A3               	movwf	(_RF_Data^(0+256)+3)
 13966                           
 13967                           ;RF_Control_B1.c: 210: RF_Data[4] = product->Data[4];
 13968  0600  0020               	movlb	0	; select bank0
 13969  0601  086C               	movf	_product,w
 13970  0602  0086               	movwf	6
 13971  0603  3001               	movlw	1	; select bank2/3
 13972  0604  0087               	movwf	7
 13973  0605  3001               	movlw	1	; select bank2/3
 13974  0606  3F44               	moviw [4]fsr1
 13975  0607  0022               	movlb	2	; select bank2
 13976  0608  00A4               	movwf	(_RF_Data^(0+256)+4)
 13977                           
 13978                           ;RF_Control_B1.c: 211: RF_Data[5] = product->Data[5];
 13979  0609  0020               	movlb	0	; select bank0
 13980  060A  086C               	movf	_product,w
 13981  060B  0086               	movwf	6
 13982  060C  3001               	movlw	1	; select bank2/3
 13983  060D  0087               	movwf	7
 13984  060E  3001               	movlw	1	; select bank2/3
 13985  060F  3F45               	moviw [5]fsr1
 13986  0610  0022               	movlb	2	; select bank2
 13987  0611  00A5               	movwf	(_RF_Data^(0+256)+5)
 13988                           
 13989                           ;RF_Control_B1.c: 212: RF_Data[6] = product->Data[6];
 13990  0612  0020               	movlb	0	; select bank0
 13991  0613  086C               	movf	_product,w
 13992  0614  0086               	movwf	6
 13993  0615  3001               	movlw	1	; select bank2/3
 13994  0616  0087               	movwf	7
 13995  0617  3001               	movlw	1	; select bank2/3
 13996  0618  3F46               	moviw [6]fsr1
 13997  0619  0022               	movlb	2	; select bank2
 13998  061A  00A6               	movwf	(_RF_Data^(0+256)+6)
 13999                           
 14000                           ;RF_Control_B1.c: 213: RF_Data[7] = product->Data[7];
 14001  061B  0020               	movlb	0	; select bank0
 14002  061C  086C               	movf	_product,w
 14003  061D  0086               	movwf	6
 14004  061E  3001               	movlw	1	; select bank2/3
 14005  061F  0087               	movwf	7
 14006  0620  3001               	movlw	1	; select bank2/3
 14007  0621  3F47               	moviw [7]fsr1
 14008  0622  0022               	movlb	2	; select bank2
 14009  0623  00A7               	movwf	(_RF_Data^(0+256)+7)
 14010                           
 14011                           ;RF_Control_B1.c: 214: RF_Data[8] = product->Data[8];
 14012  0624  0020               	movlb	0	; select bank0
 14013  0625  086C               	movf	_product,w
 14014  0626  0086               	movwf	6
 14015  0627  3001               	movlw	1	; select bank2/3
 14016  0628  0087               	movwf	7
 14017  0629  3001               	movlw	1	; select bank2/3
 14018  062A  3F48               	moviw [8]fsr1
 14019  062B  0022               	movlb	2	; select bank2
 14020  062C  00A8               	movwf	(_RF_Data^(0+256)+8)
 14021                           
 14022                           ;RF_Control_B1.c: 215: RF_Data[9] = product->Data[9];
 14023  062D  0020               	movlb	0	; select bank0
 14024  062E  086C               	movf	_product,w
 14025  062F  0086               	movwf	6
 14026  0630  3001               	movlw	1	; select bank2/3
 14027  0631  0087               	movwf	7
 14028  0632  3001               	movlw	1	; select bank2/3
 14029  0633  3F49               	moviw [9]fsr1
 14030  0634  0022               	movlb	2	; select bank2
 14031  0635  00A9               	movwf	(_RF_Data^(0+256)+9)
 14032                           
 14033                           ;RF_Control_B1.c: 216: RF_Data[10] = product->Data[10];
 14034  0636  0020               	movlb	0	; select bank0
 14035  0637  086C               	movf	_product,w
 14036  0638  0086               	movwf	6
 14037  0639  3001               	movlw	1	; select bank2/3
 14038  063A  0087               	movwf	7
 14039  063B  3001               	movlw	1	; select bank2/3
 14040  063C  3F4A               	moviw [10]fsr1
 14041  063D  0022               	movlb	2	; select bank2
 14042  063E  00AA               	movwf	(_RF_Data^(0+256)+10)
 14043                           
 14044                           ;RF_Control_B1.c: 217: RF_Data[11] = product->Data[11];
 14045  063F  0020               	movlb	0	; select bank0
 14046  0640  086C               	movf	_product,w
 14047  0641  0086               	movwf	6
 14048  0642  3001               	movlw	1	; select bank2/3
 14049  0643  0087               	movwf	7
 14050  0644  3001               	movlw	1	; select bank2/3
 14051  0645  3F4B               	moviw [11]fsr1
 14052  0646  0022               	movlb	2	; select bank2
 14053  0647  00AB               	movwf	(_RF_Data^(0+256)+11)
 14054                           
 14055                           ;RF_Control_B1.c: 218: RF_Data[12] = product->Data[12];
 14056  0648  0020               	movlb	0	; select bank0
 14057  0649  086C               	movf	_product,w
 14058  064A  0086               	movwf	6
 14059  064B  3001               	movlw	1	; select bank2/3
 14060  064C  0087               	movwf	7
 14061  064D  3001               	movlw	1	; select bank2/3
 14062  064E  3F4C               	moviw [12]fsr1
 14063  064F  0022               	movlb	2	; select bank2
 14064  0650  00AC               	movwf	(_RF_Data^(0+256)+12)
 14065                           
 14066                           ;RF_Control_B1.c: 219: RF_Data[13] = product->Data[13];
 14067  0651  0020               	movlb	0	; select bank0
 14068  0652  086C               	movf	_product,w
 14069  0653  0086               	movwf	6
 14070  0654  3001               	movlw	1	; select bank2/3
 14071  0655  0087               	movwf	7
 14072  0656  3001               	movlw	1	; select bank2/3
 14073  0657  3F4D               	moviw [13]fsr1
 14074  0658  0022               	movlb	2	; select bank2
 14075  0659  00AD               	movwf	(_RF_Data^(0+256)+13)
 14076                           
 14077                           ;RF_Control_B1.c: 220: RF_Data[14] = product->Data[14];
 14078  065A  0020               	movlb	0	; select bank0
 14079  065B  086C               	movf	_product,w
 14080  065C  0086               	movwf	6
 14081  065D  3001               	movlw	1	; select bank2/3
 14082  065E  0087               	movwf	7
 14083  065F  3001               	movlw	1	; select bank2/3
 14084  0660  3F4E               	moviw [14]fsr1
 14085  0661  0022               	movlb	2	; select bank2
 14086  0662  00AE               	movwf	(_RF_Data^(0+256)+14)
 14087                           
 14088                           ;RF_Control_B1.c: 221: RF_Data[15] = product->Data[15];
 14089  0663  0020               	movlb	0	; select bank0
 14090  0664  086C               	movf	_product,w
 14091  0665  0086               	movwf	6
 14092  0666  3001               	movlw	1	; select bank2/3
 14093  0667  0087               	movwf	7
 14094  0668  3001               	movlw	1	; select bank2/3
 14095  0669  3F4F               	moviw [15]fsr1
 14096  066A  0022               	movlb	2	; select bank2
 14097  066B  00AF               	movwf	(_RF_Data^(0+256)+15)
 14098                           
 14099                           ;RF_Control_B1.c: 222: RF_Data[16] = product->Data[16];
 14100  066C  0020               	movlb	0	; select bank0
 14101  066D  086C               	movf	_product,w
 14102  066E  0086               	movwf	6
 14103  066F  3001               	movlw	1	; select bank2/3
 14104  0670  0087               	movwf	7
 14105  0671  3001               	movlw	1	; select bank2/3
 14106  0672  3F50               	moviw [16]fsr1
 14107  0673  0022               	movlb	2	; select bank2
 14108  0674  00B0               	movwf	(_RF_Data^(0+256)+16)
 14109                           
 14110                           ;RF_Control_B1.c: 223: RF_Data[17] = product->Data[17];
 14111  0675  0020               	movlb	0	; select bank0
 14112  0676  086C               	movf	_product,w
 14113  0677  0086               	movwf	6
 14114  0678  3001               	movlw	1	; select bank2/3
 14115  0679  0087               	movwf	7
 14116  067A  3001               	movlw	1	; select bank2/3
 14117  067B  3F51               	moviw [17]fsr1
 14118  067C  0022               	movlb	2	; select bank2
 14119  067D  00B1               	movwf	(_RF_Data^(0+256)+17)
 14120                           
 14121                           ;RF_Control_B1.c: 224: RF_Data[18] = product->Data[18];
 14122  067E  0020               	movlb	0	; select bank0
 14123  067F  086C               	movf	_product,w
 14124  0680  0086               	movwf	6
 14125  0681  3001               	movlw	1	; select bank2/3
 14126  0682  0087               	movwf	7
 14127  0683  3001               	movlw	1	; select bank2/3
 14128  0684  3F52               	moviw [18]fsr1
 14129  0685  0022               	movlb	2	; select bank2
 14130  0686  00B2               	movwf	(_RF_Data^(0+256)+18)
 14131                           
 14132                           ;RF_Control_B1.c: 225: RF_Data[19] = product->Data[19];
 14133  0687  0020               	movlb	0	; select bank0
 14134  0688  086C               	movf	_product,w
 14135  0689  0086               	movwf	6
 14136  068A  3001               	movlw	1	; select bank2/3
 14137  068B  0087               	movwf	7
 14138  068C  3001               	movlw	1	; select bank2/3
 14139  068D  3F53               	moviw [19]fsr1
 14140  068E  0022               	movlb	2	; select bank2
 14141  068F  00B3               	movwf	(_RF_Data^(0+256)+19)
 14142                           
 14143                           ;RF_Control_B1.c: 226: RF_Data[20] = 209;
 14144  0690  30D1               	movlw	209
 14145  0691  0020               	movlb	0	; select bank0
 14146  0692  00A0               	movwf	??_setTxData
 14147  0693  0820               	movf	??_setTxData,w
 14148  0694  0022               	movlb	2	; select bank2
 14149  0695  00B4               	movwf	(_RF_Data^(0+256)+20)
 14150  0696  0008               	return
 14151  0697                     __end_of_setTxData:	
 14152                           
 14153                           	psect	text93
 14154  1E73                     __ptext93:	
 14155 ;; *************** function _setSw_Status *****************
 14156 ;; Defined at:
 14157 ;;		line 111 in file "../src/Switch_B1.c"
 14158 ;; Parameters:    Size  Location     Type
 14159 ;;  sw              1    wreg     unsigned char 
 14160 ;;  command         1    2[BANK0 ] unsigned char 
 14161 ;; Auto vars:     Size  Location     Type
 14162 ;;  sw              1    3[BANK0 ] unsigned char 
 14163 ;; Return value:  Size  Location     Type
 14164 ;;		None               void
 14165 ;; Registers used:
 14166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14167 ;; Tracked objects:
 14168 ;;		On entry : 0/0
 14169 ;;		On exit  : 0/0
 14170 ;;		Unchanged: 0/0
 14171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14172 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14176 ;;Total ram usage:        2 bytes
 14177 ;; Hardware stack levels used:    1
 14178 ;; Hardware stack levels required when called:    6
 14179 ;; This function calls:
 14180 ;;		_SwPointSelect
 14181 ;; This function is called by:
 14182 ;;		_DlyOff_Main
 14183 ;;		_setDimmerLights_ERROR
 14184 ;;		_setControl_Lights_Table
 14185 ;;		_setRFSW_Control
 14186 ;; This function uses a non-reentrant model
 14187 ;;
 14188                           
 14189                           
 14190                           ;psect for function _setSw_Status
 14191  1E73                     _setSw_Status:	
 14192                           
 14193                           ;incstack = 0
 14194                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14195                           ;setSw_Status@sw stored from wreg
 14196  1E73  0020               	movlb	0	; select bank0
 14197  1E74  00A3               	movwf	setSw_Status@sw
 14198                           
 14199                           ;Switch_B1.c: 112: SwPointSelect(sw);
 14200  1E75  0823               	movf	setSw_Status@sw,w
 14201  1E76  319D  25DC         	fcall	_SwPointSelect
 14202                           
 14203                           ;Switch_B1.c: 113: Sw->Status = command;
 14204  1E78  087A               	movf	_Sw,w
 14205  1E79  0086               	movwf	6
 14206  1E7A  3001               	movlw	1	; select bank2/3
 14207  1E7B  0087               	movwf	7
 14208  1E7C  0020               	movlb	0	; select bank0
 14209  1E7D  0822               	movf	setSw_Status@command,w
 14210  1E7E  1301               	bcf	1,6
 14211  1E7F  1D03               	skipz
 14212  1E80  1701               	bsf	1,6
 14213  1E81  0008               	return
 14214  1E82                     __end_of_setSw_Status:	
 14215                           
 14216                           	psect	text94
 14217  1DDC                     __ptext94:	
 14218 ;; *************** function _SwPointSelect *****************
 14219 ;; Defined at:
 14220 ;;		line 21 in file "../src/Switch_B1.c"
 14221 ;; Parameters:    Size  Location     Type
 14222 ;;  sw              1    wreg     unsigned char 
 14223 ;; Auto vars:     Size  Location     Type
 14224 ;;  sw              1    1[BANK0 ] unsigned char 
 14225 ;; Return value:  Size  Location     Type
 14226 ;;		None               void
 14227 ;; Registers used:
 14228 ;;		wreg
 14229 ;; Tracked objects:
 14230 ;;		On entry : 0/0
 14231 ;;		On exit  : 0/0
 14232 ;;		Unchanged: 0/0
 14233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14234 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14236 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14237 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14238 ;;Total ram usage:        2 bytes
 14239 ;; Hardware stack levels used:    1
 14240 ;; Hardware stack levels required when called:    5
 14241 ;; This function calls:
 14242 ;;		Nothing
 14243 ;; This function is called by:
 14244 ;;		_setSw_Enable
 14245 ;;		_setSw_Status
 14246 ;;		_setSw_Main
 14247 ;;		_Sw_Detect
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           
 14252                           ;psect for function _SwPointSelect
 14253  1DDC                     _SwPointSelect:	
 14254                           
 14255                           ;incstack = 0
 14256                           ; Regs used in _SwPointSelect: [wreg]
 14257                           ;SwPointSelect@sw stored from wreg
 14258  1DDC  0020               	movlb	0	; select bank0
 14259  1DDD  00A1               	movwf	SwPointSelect@sw
 14260                           
 14261                           ;Switch_B1.c: 24: if (sw == 1) {
 14262  1DDE  0821               	movf	SwPointSelect@sw,w
 14263  1DDF  3A01               	xorlw	1
 14264  1DE0  1D03               	skipz
 14265  1DE1  0008               	return
 14266                           
 14267                           ;Switch_B1.c: 25: Sw = &Sw1;
 14268  1DE2  304C               	movlw	_Sw1& (0+255)
 14269  1DE3  00A0               	movwf	??_SwPointSelect
 14270  1DE4  0820               	movf	??_SwPointSelect,w
 14271  1DE5  00FA               	movwf	_Sw
 14272  1DE6  0008               	return
 14273  1DE7                     __end_of_SwPointSelect:	
 14274                           
 14275                           	psect	text95
 14276  0C1C                     __ptext95:	
 14277 ;; *************** function _setRF_DimmerLights *****************
 14278 ;; Defined at:
 14279 ;;		line 457 in file "../src/RF_Control_B1.c"
 14280 ;; Parameters:    Size  Location     Type
 14281 ;;  lights          1    wreg     unsigned char 
 14282 ;;  on              1   61[BANK0 ] unsigned char 
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;  lights          1   65[BANK0 ] unsigned char 
 14285 ;;  status          1   64[BANK0 ] unsigned char 
 14286 ;; Return value:  Size  Location     Type
 14287 ;;		None               void
 14288 ;; Registers used:
 14289 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14290 ;; Tracked objects:
 14291 ;;		On entry : 0/0
 14292 ;;		On exit  : 0/0
 14293 ;;		Unchanged: 0/0
 14294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14295 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14297 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14298 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14299 ;;Total ram usage:        5 bytes
 14300 ;; Hardware stack levels used:    1
 14301 ;; Hardware stack levels required when called:    8
 14302 ;; This function calls:
 14303 ;;		_setPercentValue
 14304 ;; This function is called by:
 14305 ;;		_DlyOff_Main
 14306 ;;		_setDimmerLights_Adj
 14307 ;;		_setRFSW_Control
 14308 ;;		_Sw_DimmerOnFunc
 14309 ;;		_Sw_DimmerOffFunc
 14310 ;; This function uses a non-reentrant model
 14311 ;;
 14312                           
 14313                           
 14314                           ;psect for function _setRF_DimmerLights
 14315  0C1C                     _setRF_DimmerLights:	
 14316                           
 14317                           ;incstack = 0
 14318                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14319                           ;setRF_DimmerLights@lights stored from wreg
 14320  0C1C  0020               	movlb	0	; select bank0
 14321  0C1D  00E1               	movwf	setRF_DimmerLights@lights
 14322                           
 14323                           ;RF_Control_B1.c: 458: char status;
 14324                           ;RF_Control_B1.c: 459: status = 1;
 14325  0C1E  01E0               	clrf	setRF_DimmerLights@status
 14326  0C1F  0AE0               	incf	setRF_DimmerLights@status,f
 14327                           
 14328                           ;RF_Control_B1.c: 460: status <<= (lights - 1);
 14329  0C20  0861               	movf	setRF_DimmerLights@lights,w
 14330  0C21  3EFF               	addlw	-1
 14331  0C22  0A89               	incf	9,f
 14332  0C23  2C26               	goto	u7630
 14333  0C24                     u7635:	
 14334  0C24  1003               	clrc
 14335  0C25  0DE0               	rlf	setRF_DimmerLights@status,f
 14336  0C26                     u7630:	
 14337  0C26  3EFF               	addlw	-1
 14338  0C27  1D03               	skipz
 14339  0C28  2C24               	goto	u7635
 14340                           
 14341                           ;RF_Control_B1.c: 461: product->Data[11]=lights;
 14342  0C29  0861               	movf	setRF_DimmerLights@lights,w
 14343  0C2A  00DE               	movwf	??_setRF_DimmerLights
 14344  0C2B  086C               	movf	_product,w
 14345  0C2C  3E0B               	addlw	11
 14346  0C2D  0086               	movwf	6
 14347  0C2E  3001               	movlw	1	; select bank2/3
 14348  0C2F  0087               	movwf	7
 14349  0C30  085E               	movf	??_setRF_DimmerLights,w
 14350  0C31  0081               	movwf	1
 14351                           
 14352                           ;RF_Control_B1.c: 464: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 14353  0C32  3020               	movlw	32
 14354  0C33  3195  25E1  318C   	fcall	_setPercentValue
 14355  0C36  0020               	movlb	0	; select bank0
 14356  0C37  00DE               	movwf	??_setRF_DimmerLights
 14357  0C38  0861               	movf	setRF_DimmerLights@lights,w
 14358  0C39  3E14               	addlw	20
 14359  0C3A  076C               	addwf	_product,w
 14360  0C3B  00DF               	movwf	??_setRF_DimmerLights+1
 14361  0C3C  085F               	movf	??_setRF_DimmerLights+1,w
 14362  0C3D  0086               	movwf	6
 14363  0C3E  3001               	movlw	1	; select bank2/3
 14364  0C3F  0087               	movwf	7
 14365  0C40  085E               	movf	??_setRF_DimmerLights,w
 14366  0C41  0081               	movwf	1
 14367                           
 14368                           ;RF_Control_B1.c: 467: product->Data[9]=product->Data[20 + lights];
 14369  0C42  0861               	movf	setRF_DimmerLights@lights,w
 14370  0C43  3E14               	addlw	20
 14371  0C44  076C               	addwf	_product,w
 14372  0C45  00DE               	movwf	??_setRF_DimmerLights
 14373  0C46  085E               	movf	??_setRF_DimmerLights,w
 14374  0C47  0086               	movwf	6
 14375  0C48  3001               	movlw	1	; select bank2/3
 14376  0C49  0087               	movwf	7
 14377  0C4A  0801               	movf	1,w
 14378  0C4B  00DF               	movwf	??_setRF_DimmerLights+1
 14379  0C4C  086C               	movf	_product,w
 14380  0C4D  3E09               	addlw	9
 14381  0C4E  0086               	movwf	6
 14382  0C4F  3001               	movlw	1	; select bank2/3
 14383  0C50  0087               	movwf	7
 14384  0C51  085F               	movf	??_setRF_DimmerLights+1,w
 14385  0C52  0081               	movwf	1
 14386                           
 14387                           ;RF_Control_B1.c: 468: product->Data[17]=product->Data[26 + lights];
 14388  0C53  0861               	movf	setRF_DimmerLights@lights,w
 14389  0C54  3E1A               	addlw	26
 14390  0C55  076C               	addwf	_product,w
 14391  0C56  00DE               	movwf	??_setRF_DimmerLights
 14392  0C57  085E               	movf	??_setRF_DimmerLights,w
 14393  0C58  0086               	movwf	6
 14394  0C59  3001               	movlw	1	; select bank2/3
 14395  0C5A  0087               	movwf	7
 14396  0C5B  0801               	movf	1,w
 14397  0C5C  00DF               	movwf	??_setRF_DimmerLights+1
 14398  0C5D  086C               	movf	_product,w
 14399  0C5E  3E11               	addlw	17
 14400  0C5F  0086               	movwf	6
 14401  0C60  3001               	movlw	1	; select bank2/3
 14402  0C61  0087               	movwf	7
 14403  0C62  085F               	movf	??_setRF_DimmerLights+1,w
 14404  0C63  0081               	movwf	1
 14405                           
 14406                           ;RF_Control_B1.c: 469: if (on == 1) {
 14407  0C64  085D               	movf	setRF_DimmerLights@on,w
 14408  0C65  3A01               	xorlw	1
 14409  0C66  1D03               	skipz
 14410  0C67  2C78               	goto	l7878
 14411                           
 14412                           ;RF_Control_B1.c: 470: product->Data[15]=(product->Data[15] | status);
 14413  0C68  086C               	movf	_product,w
 14414  0C69  3E0F               	addlw	15
 14415  0C6A  0086               	movwf	6
 14416  0C6B  3001               	movlw	1	; select bank2/3
 14417  0C6C  0087               	movwf	7
 14418  0C6D  0801               	movf	1,w
 14419  0C6E  0460               	iorwf	setRF_DimmerLights@status,w
 14420  0C6F  00DE               	movwf	??_setRF_DimmerLights
 14421  0C70  086C               	movf	_product,w
 14422  0C71  3E0F               	addlw	15
 14423  0C72  0086               	movwf	6
 14424  0C73  3001               	movlw	1	; select bank2/3
 14425  0C74  0087               	movwf	7
 14426  0C75  085E               	movf	??_setRF_DimmerLights,w
 14427  0C76  0081               	movwf	1
 14428                           
 14429                           ;RF_Control_B1.c: 471: } else {
 14430  0C77  0008               	return
 14431  0C78                     l7878:	
 14432                           
 14433                           ;RF_Control_B1.c: 472: product->Data[15]=(product->Data[15]&(~status));
 14434  0C78  086C               	movf	_product,w
 14435  0C79  3E0F               	addlw	15
 14436  0C7A  0086               	movwf	6
 14437  0C7B  3001               	movlw	1	; select bank2/3
 14438  0C7C  0087               	movwf	7
 14439  0C7D  0960               	comf	setRF_DimmerLights@status,w
 14440  0C7E  0501               	andwf	1,w
 14441  0C7F  00DE               	movwf	??_setRF_DimmerLights
 14442  0C80  086C               	movf	_product,w
 14443  0C81  3E0F               	addlw	15
 14444  0C82  0086               	movwf	6
 14445  0C83  3001               	movlw	1	; select bank2/3
 14446  0C84  0087               	movwf	7
 14447  0C85  085E               	movf	??_setRF_DimmerLights,w
 14448  0C86  0081               	movwf	1
 14449  0C87  0008               	return
 14450  0C88                     __end_of_setRF_DimmerLights:	
 14451                           
 14452                           	psect	text96
 14453  15E1                     __ptext96:	
 14454 ;; *************** function _setPercentValue *****************
 14455 ;; Defined at:
 14456 ;;		line 779 in file "../src/Dimmer_B1.c"
 14457 ;; Parameters:    Size  Location     Type
 14458 ;;  value           1    wreg     unsigned char 
 14459 ;; Auto vars:     Size  Location     Type
 14460 ;;  value           1   57[BANK0 ] unsigned char 
 14461 ;;  i               3   58[BANK0 ] float 
 14462 ;; Return value:  Size  Location     Type
 14463 ;;                  1    wreg      unsigned char 
 14464 ;; Registers used:
 14465 ;;		wreg, status,2, status,0, pclath, cstack
 14466 ;; Tracked objects:
 14467 ;;		On entry : 0/0
 14468 ;;		On exit  : 0/0
 14469 ;;		Unchanged: 0/0
 14470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14472 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14474 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14475 ;;Total ram usage:        4 bytes
 14476 ;; Hardware stack levels used:    1
 14477 ;; Hardware stack levels required when called:    7
 14478 ;; This function calls:
 14479 ;;		___awtoft
 14480 ;;		___ftdiv
 14481 ;;		___fttol
 14482 ;; This function is called by:
 14483 ;;		_Flash_Memory_Initialization
 14484 ;;		_setRF_DimmerLights
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           
 14489                           ;psect for function _setPercentValue
 14490  15E1                     _setPercentValue:	
 14491                           
 14492                           ;incstack = 0
 14493                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14494                           ;setPercentValue@value stored from wreg
 14495  15E1  0020               	movlb	0	; select bank0
 14496  15E2  00D9               	movwf	setPercentValue@value
 14497                           
 14498                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14499  15E3  3000               	movlw	0
 14500  15E4  00DA               	movwf	setPercentValue@i
 14501  15E5  30E0               	movlw	224
 14502  15E6  00DB               	movwf	setPercentValue@i+1
 14503  15E7  3041               	movlw	65
 14504  15E8  00DC               	movwf	setPercentValue@i+2
 14505                           
 14506                           ;Dimmer_B1.c: 782: i /= 100;
 14507  15E9  3000               	movlw	0
 14508  15EA  00AE               	movwf	___ftdiv@f2
 14509  15EB  30C8               	movlw	200
 14510  15EC  00AF               	movwf	___ftdiv@f2+1
 14511  15ED  3042               	movlw	66
 14512  15EE  00B0               	movwf	___ftdiv@f2+2
 14513  15EF  085A               	movf	setPercentValue@i,w
 14514  15F0  00B1               	movwf	___ftdiv@f1
 14515  15F1  085B               	movf	setPercentValue@i+1,w
 14516  15F2  00B2               	movwf	___ftdiv@f1+1
 14517  15F3  085C               	movf	setPercentValue@i+2,w
 14518  15F4  00B3               	movwf	___ftdiv@f1+2
 14519  15F5  3187  274B  3195   	fcall	___ftdiv
 14520  15F8  0020               	movlb	0	; select bank0
 14521  15F9  082E               	movf	?___ftdiv,w
 14522  15FA  00DA               	movwf	setPercentValue@i
 14523  15FB  082F               	movf	?___ftdiv+1,w
 14524  15FC  00DB               	movwf	setPercentValue@i+1
 14525  15FD  0830               	movf	?___ftdiv+2,w
 14526  15FE  00DC               	movwf	setPercentValue@i+2
 14527                           
 14528                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14529  15FF  0859               	movf	setPercentValue@value,w
 14530  1600  3EE0               	addlw	224
 14531  1601  00A8               	movwf	___awtoft@c
 14532  1602  30FF               	movlw	255
 14533  1603  1803               	skipnc
 14534  1604  3000               	movlw	0
 14535  1605  00A9               	movwf	___awtoft@c+1
 14536  1606  3191  2150  3195   	fcall	___awtoft
 14537  1609  0020               	movlb	0	; select bank0
 14538  160A  0828               	movf	?___awtoft,w
 14539  160B  00B1               	movwf	___ftdiv@f1
 14540  160C  0829               	movf	?___awtoft+1,w
 14541  160D  00B2               	movwf	___ftdiv@f1+1
 14542  160E  082A               	movf	?___awtoft+2,w
 14543  160F  00B3               	movwf	___ftdiv@f1+2
 14544  1610  085A               	movf	setPercentValue@i,w
 14545  1611  00AE               	movwf	___ftdiv@f2
 14546  1612  085B               	movf	setPercentValue@i+1,w
 14547  1613  00AF               	movwf	___ftdiv@f2+1
 14548  1614  085C               	movf	setPercentValue@i+2,w
 14549  1615  00B0               	movwf	___ftdiv@f2+2
 14550  1616  3187  274B  3195   	fcall	___ftdiv
 14551  1619  0020               	movlb	0	; select bank0
 14552  161A  082E               	movf	?___ftdiv,w
 14553  161B  00CB               	movwf	___fttol@f1
 14554  161C  082F               	movf	?___ftdiv+1,w
 14555  161D  00CC               	movwf	___fttol@f1+1
 14556  161E  0830               	movf	?___ftdiv+2,w
 14557  161F  00CD               	movwf	___fttol@f1+2
 14558  1620  318E  26E9         	fcall	___fttol
 14559  1622  0020               	movlb	0	; select bank0
 14560  1623  034B               	decf	?___fttol,w
 14561  1624  3AFF               	xorlw	255
 14562  1625  3E64               	addlw	100
 14563  1626  0008               	return
 14564  1627                     __end_of_setPercentValue:	
 14565                           
 14566                           	psect	text97
 14567  0EE9                     __ptext97:	
 14568 ;; *************** function ___fttol *****************
 14569 ;; Defined at:
 14570 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14571 ;; Parameters:    Size  Location     Type
 14572 ;;  f1              3   43[BANK0 ] float 
 14573 ;; Auto vars:     Size  Location     Type
 14574 ;;  lval            4   52[BANK0 ] unsigned long 
 14575 ;;  exp1            1   56[BANK0 ] unsigned char 
 14576 ;;  sign1           1   51[BANK0 ] unsigned char 
 14577 ;; Return value:  Size  Location     Type
 14578 ;;                  4   43[BANK0 ] long 
 14579 ;; Registers used:
 14580 ;;		wreg, status,2, status,0
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14586 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14587 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14588 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;Total ram usage:       14 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    5
 14593 ;; This function calls:
 14594 ;;		Nothing
 14595 ;; This function is called by:
 14596 ;;		_getPercentValue
 14597 ;;		_setPercentValue
 14598 ;; This function uses a non-reentrant model
 14599 ;;
 14600                           
 14601                           
 14602                           ;psect for function ___fttol
 14603  0EE9                     ___fttol:	
 14604                           
 14605                           ;incstack = 0
 14606                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14607  0EE9  0020               	movlb	0	; select bank0
 14608  0EEA  084B               	movf	___fttol@f1,w
 14609  0EEB  00CF               	movwf	??___fttol
 14610  0EEC  084C               	movf	___fttol@f1+1,w
 14611  0EED  00D0               	movwf	??___fttol+1
 14612  0EEE  084D               	movf	___fttol@f1+2,w
 14613  0EEF  00D1               	movwf	??___fttol+2
 14614  0EF0  1003               	clrc
 14615  0EF1  0D50               	rlf	??___fttol+1,w
 14616  0EF2  0D51               	rlf	??___fttol+2,w
 14617  0EF3  00D2               	movwf	??___fttol+3
 14618  0EF4  0852               	movf	??___fttol+3,w
 14619  0EF5  00D8               	movwf	___fttol@exp1
 14620  0EF6  08D8               	movf	___fttol@exp1,f
 14621  0EF7  1D03               	skipz
 14622  0EF8  2F02               	goto	l5558
 14623  0EF9  3000               	movlw	0
 14624  0EFA  00CE               	movwf	?___fttol+3
 14625  0EFB  3000               	movlw	0
 14626  0EFC  00CD               	movwf	?___fttol+2
 14627  0EFD  3000               	movlw	0
 14628  0EFE  00CC               	movwf	?___fttol+1
 14629  0EFF  3000               	movlw	0
 14630  0F00  00CB               	movwf	?___fttol
 14631  0F01  0008               	return
 14632  0F02                     l5558:	
 14633  0F02  084B               	movf	___fttol@f1,w
 14634  0F03  00CF               	movwf	??___fttol
 14635  0F04  084C               	movf	___fttol@f1+1,w
 14636  0F05  00D0               	movwf	??___fttol+1
 14637  0F06  084D               	movf	___fttol@f1+2,w
 14638  0F07  00D1               	movwf	??___fttol+2
 14639  0F08  3017               	movlw	23
 14640  0F09                     u4255:	
 14641  0F09  36D1               	lsrf	??___fttol+2,f
 14642  0F0A  0CD0               	rrf	??___fttol+1,f
 14643  0F0B  0CCF               	rrf	??___fttol,f
 14644  0F0C  0B89               	decfsz	9,f
 14645  0F0D  2F09               	goto	u4255
 14646  0F0E  084F               	movf	??___fttol,w
 14647  0F0F  00D2               	movwf	??___fttol+3
 14648  0F10  0852               	movf	??___fttol+3,w
 14649  0F11  00D3               	movwf	___fttol@sign1
 14650  0F12  17CC               	bsf	___fttol@f1+1,7
 14651  0F13  30FF               	movlw	255
 14652  0F14  05CB               	andwf	___fttol@f1,f
 14653  0F15  30FF               	movlw	255
 14654  0F16  05CC               	andwf	___fttol@f1+1,f
 14655  0F17  3000               	movlw	0
 14656  0F18  05CD               	andwf	___fttol@f1+2,f
 14657  0F19  084B               	movf	___fttol@f1,w
 14658  0F1A  00D4               	movwf	___fttol@lval
 14659  0F1B  084C               	movf	___fttol@f1+1,w
 14660  0F1C  00D5               	movwf	___fttol@lval+1
 14661  0F1D  084D               	movf	___fttol@f1+2,w
 14662  0F1E  00D6               	movwf	___fttol@lval+2
 14663  0F1F  01D7               	clrf	___fttol@lval+3
 14664  0F20  308E               	movlw	142
 14665  0F21  02D8               	subwf	___fttol@exp1,f
 14666  0F22  1FD8               	btfss	___fttol@exp1,7
 14667  0F23  2F40               	goto	l5578
 14668  0F24  0858               	movf	___fttol@exp1,w
 14669  0F25  3A80               	xorlw	128
 14670  0F26  3E8F               	addlw	143
 14671  0F27  1803               	skipnc
 14672  0F28  2F32               	goto	l5576
 14673  0F29  3000               	movlw	0
 14674  0F2A  00CE               	movwf	?___fttol+3
 14675  0F2B  3000               	movlw	0
 14676  0F2C  00CD               	movwf	?___fttol+2
 14677  0F2D  3000               	movlw	0
 14678  0F2E  00CC               	movwf	?___fttol+1
 14679  0F2F  3000               	movlw	0
 14680  0F30  00CB               	movwf	?___fttol
 14681  0F31  0008               	return
 14682  0F32                     l5576:	
 14683  0F32  3001               	movlw	1
 14684  0F33                     u4285:	
 14685  0F33  36D7               	lsrf	___fttol@lval+3,f
 14686  0F34  0CD6               	rrf	___fttol@lval+2,f
 14687  0F35  0CD5               	rrf	___fttol@lval+1,f
 14688  0F36  0CD4               	rrf	___fttol@lval,f
 14689  0F37  0B89               	decfsz	9,f
 14690  0F38  2F33               	goto	u4285
 14691  0F39  3001               	movlw	1
 14692  0F3A  00CF               	movwf	??___fttol
 14693  0F3B  084F               	movf	??___fttol,w
 14694  0F3C  07D8               	addwf	___fttol@exp1,f
 14695  0F3D  1903               	btfsc	3,2
 14696  0F3E  2F59               	goto	l5588
 14697  0F3F  2F32               	goto	l5576
 14698  0F40                     l5578:	
 14699  0F40  3018               	movlw	24
 14700  0F41  0258               	subwf	___fttol@exp1,w
 14701  0F42  1C03               	skipc
 14702  0F43  2F56               	goto	l5586
 14703  0F44  3000               	movlw	0
 14704  0F45  00CE               	movwf	?___fttol+3
 14705  0F46  3000               	movlw	0
 14706  0F47  00CD               	movwf	?___fttol+2
 14707  0F48  3000               	movlw	0
 14708  0F49  00CC               	movwf	?___fttol+1
 14709  0F4A  3000               	movlw	0
 14710  0F4B  00CB               	movwf	?___fttol
 14711  0F4C  0008               	return
 14712  0F4D                     l5584:	
 14713  0F4D  3001               	movlw	1
 14714  0F4E                     u4315:	
 14715  0F4E  35D4               	lslf	___fttol@lval,f
 14716  0F4F  0DD5               	rlf	___fttol@lval+1,f
 14717  0F50  0DD6               	rlf	___fttol@lval+2,f
 14718  0F51  0DD7               	rlf	___fttol@lval+3,f
 14719  0F52  0B89               	decfsz	9,f
 14720  0F53  2F4E               	goto	u4315
 14721  0F54  3001               	movlw	1
 14722  0F55  02D8               	subwf	___fttol@exp1,f
 14723  0F56                     l5586:	
 14724  0F56  08D8               	movf	___fttol@exp1,f
 14725  0F57  1D03               	skipz
 14726  0F58  2F4D               	goto	l5584
 14727  0F59                     l5588:	
 14728  0F59  0853               	movf	___fttol@sign1,w
 14729  0F5A  1903               	btfsc	3,2
 14730  0F5B  2F67               	goto	l5592
 14731  0F5C  09D4               	comf	___fttol@lval,f
 14732  0F5D  09D5               	comf	___fttol@lval+1,f
 14733  0F5E  09D6               	comf	___fttol@lval+2,f
 14734  0F5F  09D7               	comf	___fttol@lval+3,f
 14735  0F60  0AD4               	incf	___fttol@lval,f
 14736  0F61  1903               	skipnz
 14737  0F62  0AD5               	incf	___fttol@lval+1,f
 14738  0F63  1903               	skipnz
 14739  0F64  0AD6               	incf	___fttol@lval+2,f
 14740  0F65  1903               	skipnz
 14741  0F66  0AD7               	incf	___fttol@lval+3,f
 14742  0F67                     l5592:	
 14743  0F67  0857               	movf	___fttol@lval+3,w
 14744  0F68  00CE               	movwf	?___fttol+3
 14745  0F69  0856               	movf	___fttol@lval+2,w
 14746  0F6A  00CD               	movwf	?___fttol+2
 14747  0F6B  0855               	movf	___fttol@lval+1,w
 14748  0F6C  00CC               	movwf	?___fttol+1
 14749  0F6D  0854               	movf	___fttol@lval,w
 14750  0F6E  00CB               	movwf	?___fttol
 14751  0F6F  0008               	return
 14752  0F70                     __end_of___fttol:	
 14753                           
 14754                           	psect	text98
 14755  074B                     __ptext98:	
 14756 ;; *************** function ___ftdiv *****************
 14757 ;; Defined at:
 14758 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14759 ;; Parameters:    Size  Location     Type
 14760 ;;  f2              3   14[BANK0 ] float 
 14761 ;;  f1              3   17[BANK0 ] float 
 14762 ;; Auto vars:     Size  Location     Type
 14763 ;;  f3              3   25[BANK0 ] float 
 14764 ;;  sign            1   29[BANK0 ] unsigned char 
 14765 ;;  exp             1   28[BANK0 ] unsigned char 
 14766 ;;  cntr            1   24[BANK0 ] unsigned char 
 14767 ;; Return value:  Size  Location     Type
 14768 ;;                  3   14[BANK0 ] float 
 14769 ;; Registers used:
 14770 ;;		wreg, status,2, status,0, pclath, cstack
 14771 ;; Tracked objects:
 14772 ;;		On entry : 0/0
 14773 ;;		On exit  : 0/0
 14774 ;;		Unchanged: 0/0
 14775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14776 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14780 ;;Total ram usage:       16 bytes
 14781 ;; Hardware stack levels used:    1
 14782 ;; Hardware stack levels required when called:    6
 14783 ;; This function calls:
 14784 ;;		___ftpack
 14785 ;; This function is called by:
 14786 ;;		_getPercentValue
 14787 ;;		_setPercentValue
 14788 ;; This function uses a non-reentrant model
 14789 ;;
 14790                           
 14791                           
 14792                           ;psect for function ___ftdiv
 14793  074B                     ___ftdiv:	
 14794                           
 14795                           ;incstack = 0
 14796                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14797  074B  0020               	movlb	0	; select bank0
 14798  074C  0831               	movf	___ftdiv@f1,w
 14799  074D  00B4               	movwf	??___ftdiv
 14800  074E  0832               	movf	___ftdiv@f1+1,w
 14801  074F  00B5               	movwf	??___ftdiv+1
 14802  0750  0833               	movf	___ftdiv@f1+2,w
 14803  0751  00B6               	movwf	??___ftdiv+2
 14804  0752  1003               	clrc
 14805  0753  0D35               	rlf	??___ftdiv+1,w
 14806  0754  0D36               	rlf	??___ftdiv+2,w
 14807  0755  00B7               	movwf	??___ftdiv+3
 14808  0756  0837               	movf	??___ftdiv+3,w
 14809  0757  00BC               	movwf	___ftdiv@exp
 14810  0758  08BC               	movf	___ftdiv@exp,f
 14811  0759  1D03               	skipz
 14812  075A  2F62               	goto	l5466
 14813  075B  3000               	movlw	0
 14814  075C  00AE               	movwf	?___ftdiv
 14815  075D  3000               	movlw	0
 14816  075E  00AF               	movwf	?___ftdiv+1
 14817  075F  3000               	movlw	0
 14818  0760  00B0               	movwf	?___ftdiv+2
 14819  0761  0008               	return
 14820  0762                     l5466:	
 14821  0762  082E               	movf	___ftdiv@f2,w
 14822  0763  00B4               	movwf	??___ftdiv
 14823  0764  082F               	movf	___ftdiv@f2+1,w
 14824  0765  00B5               	movwf	??___ftdiv+1
 14825  0766  0830               	movf	___ftdiv@f2+2,w
 14826  0767  00B6               	movwf	??___ftdiv+2
 14827  0768  1003               	clrc
 14828  0769  0D35               	rlf	??___ftdiv+1,w
 14829  076A  0D36               	rlf	??___ftdiv+2,w
 14830  076B  00B7               	movwf	??___ftdiv+3
 14831  076C  0837               	movf	??___ftdiv+3,w
 14832  076D  00BD               	movwf	___ftdiv@sign
 14833  076E  08BD               	movf	___ftdiv@sign,f
 14834  076F  1D03               	skipz
 14835  0770  2F78               	goto	l5472
 14836  0771  3000               	movlw	0
 14837  0772  00AE               	movwf	?___ftdiv
 14838  0773  3000               	movlw	0
 14839  0774  00AF               	movwf	?___ftdiv+1
 14840  0775  3000               	movlw	0
 14841  0776  00B0               	movwf	?___ftdiv+2
 14842  0777  0008               	return
 14843  0778                     l5472:	
 14844  0778  3000               	movlw	0
 14845  0779  00B9               	movwf	___ftdiv@f3
 14846  077A  3000               	movlw	0
 14847  077B  00BA               	movwf	___ftdiv@f3+1
 14848  077C  3000               	movlw	0
 14849  077D  00BB               	movwf	___ftdiv@f3+2
 14850  077E  3089               	movlw	137
 14851  077F  073D               	addwf	___ftdiv@sign,w
 14852  0780  00B4               	movwf	??___ftdiv
 14853  0781  0834               	movf	??___ftdiv,w
 14854  0782  02BC               	subwf	___ftdiv@exp,f
 14855  0783  0831               	movf	___ftdiv@f1,w
 14856  0784  00B4               	movwf	??___ftdiv
 14857  0785  0832               	movf	___ftdiv@f1+1,w
 14858  0786  00B5               	movwf	??___ftdiv+1
 14859  0787  0833               	movf	___ftdiv@f1+2,w
 14860  0788  00B6               	movwf	??___ftdiv+2
 14861  0789  3010               	movlw	16
 14862  078A                     u4065:	
 14863  078A  36B6               	lsrf	??___ftdiv+2,f
 14864  078B  0CB5               	rrf	??___ftdiv+1,f
 14865  078C  0CB4               	rrf	??___ftdiv,f
 14866  078D  0B89               	decfsz	9,f
 14867  078E  2F8A               	goto	u4065
 14868  078F  0834               	movf	??___ftdiv,w
 14869  0790  00B7               	movwf	??___ftdiv+3
 14870  0791  0837               	movf	??___ftdiv+3,w
 14871  0792  00BD               	movwf	___ftdiv@sign
 14872  0793  082E               	movf	___ftdiv@f2,w
 14873  0794  00B4               	movwf	??___ftdiv
 14874  0795  082F               	movf	___ftdiv@f2+1,w
 14875  0796  00B5               	movwf	??___ftdiv+1
 14876  0797  0830               	movf	___ftdiv@f2+2,w
 14877  0798  00B6               	movwf	??___ftdiv+2
 14878  0799  3010               	movlw	16
 14879  079A                     u4075:	
 14880  079A  36B6               	lsrf	??___ftdiv+2,f
 14881  079B  0CB5               	rrf	??___ftdiv+1,f
 14882  079C  0CB4               	rrf	??___ftdiv,f
 14883  079D  0B89               	decfsz	9,f
 14884  079E  2F9A               	goto	u4075
 14885  079F  0834               	movf	??___ftdiv,w
 14886  07A0  00B7               	movwf	??___ftdiv+3
 14887  07A1  0837               	movf	??___ftdiv+3,w
 14888  07A2  06BD               	xorwf	___ftdiv@sign,f
 14889  07A3  3080               	movlw	128
 14890  07A4  00B4               	movwf	??___ftdiv
 14891  07A5  0834               	movf	??___ftdiv,w
 14892  07A6  05BD               	andwf	___ftdiv@sign,f
 14893  07A7  17B2               	bsf	___ftdiv@f1+1,7
 14894  07A8  30FF               	movlw	255
 14895  07A9  05B1               	andwf	___ftdiv@f1,f
 14896  07AA  30FF               	movlw	255
 14897  07AB  05B2               	andwf	___ftdiv@f1+1,f
 14898  07AC  3000               	movlw	0
 14899  07AD  05B3               	andwf	___ftdiv@f1+2,f
 14900  07AE  17AF               	bsf	___ftdiv@f2+1,7
 14901  07AF  30FF               	movlw	255
 14902  07B0  05AE               	andwf	___ftdiv@f2,f
 14903  07B1  30FF               	movlw	255
 14904  07B2  05AF               	andwf	___ftdiv@f2+1,f
 14905  07B3  3000               	movlw	0
 14906  07B4  05B0               	andwf	___ftdiv@f2+2,f
 14907  07B5  3018               	movlw	24
 14908  07B6  00B4               	movwf	??___ftdiv
 14909  07B7  0834               	movf	??___ftdiv,w
 14910  07B8  00B8               	movwf	___ftdiv@cntr
 14911  07B9                     l5486:	
 14912  07B9  3001               	movlw	1
 14913  07BA                     u4085:	
 14914  07BA  35B9               	lslf	___ftdiv@f3,f
 14915  07BB  0DBA               	rlf	___ftdiv@f3+1,f
 14916  07BC  0DBB               	rlf	___ftdiv@f3+2,f
 14917  07BD  0B89               	decfsz	9,f
 14918  07BE  2FBA               	goto	u4085
 14919  07BF  0830               	movf	___ftdiv@f2+2,w
 14920  07C0  0233               	subwf	___ftdiv@f1+2,w
 14921  07C1  1D03               	skipz
 14922  07C2  2FC9               	goto	u4095
 14923  07C3  082F               	movf	___ftdiv@f2+1,w
 14924  07C4  0232               	subwf	___ftdiv@f1+1,w
 14925  07C5  1D03               	skipz
 14926  07C6  2FC9               	goto	u4095
 14927  07C7  082E               	movf	___ftdiv@f2,w
 14928  07C8  0231               	subwf	___ftdiv@f1,w
 14929  07C9                     u4095:	
 14930  07C9  1C03               	skipc
 14931  07CA  2FD2               	goto	l5494
 14932  07CB  082E               	movf	___ftdiv@f2,w
 14933  07CC  02B1               	subwf	___ftdiv@f1,f
 14934  07CD  082F               	movf	___ftdiv@f2+1,w
 14935  07CE  3BB2               	subwfb	___ftdiv@f1+1,f
 14936  07CF  0830               	movf	___ftdiv@f2+2,w
 14937  07D0  3BB3               	subwfb	___ftdiv@f1+2,f
 14938  07D1  1439               	bsf	___ftdiv@f3,0
 14939  07D2                     l5494:	
 14940  07D2  3001               	movlw	1
 14941  07D3                     u4105:	
 14942  07D3  35B1               	lslf	___ftdiv@f1,f
 14943  07D4  0DB2               	rlf	___ftdiv@f1+1,f
 14944  07D5  0DB3               	rlf	___ftdiv@f1+2,f
 14945  07D6  0B89               	decfsz	9,f
 14946  07D7  2FD3               	goto	u4105
 14947  07D8  3001               	movlw	1
 14948  07D9  02B8               	subwf	___ftdiv@cntr,f
 14949  07DA  1D03               	btfss	3,2
 14950  07DB  2FB9               	goto	l5486
 14951  07DC  0839               	movf	___ftdiv@f3,w
 14952  07DD  00A0               	movwf	___ftpack@arg
 14953  07DE  083A               	movf	___ftdiv@f3+1,w
 14954  07DF  00A1               	movwf	___ftpack@arg+1
 14955  07E0  083B               	movf	___ftdiv@f3+2,w
 14956  07E1  00A2               	movwf	___ftpack@arg+2
 14957  07E2  083C               	movf	___ftdiv@exp,w
 14958  07E3  00B4               	movwf	??___ftdiv
 14959  07E4  0834               	movf	??___ftdiv,w
 14960  07E5  00A3               	movwf	___ftpack@exp
 14961  07E6  083D               	movf	___ftdiv@sign,w
 14962  07E7  00B5               	movwf	??___ftdiv+1
 14963  07E8  0835               	movf	??___ftdiv+1,w
 14964  07E9  00A4               	movwf	___ftpack@sign
 14965  07EA  318A  221C         	fcall	___ftpack
 14966  07EC  0020               	movlb	0	; select bank0
 14967  07ED  0820               	movf	?___ftpack,w
 14968  07EE  00AE               	movwf	?___ftdiv
 14969  07EF  0821               	movf	?___ftpack+1,w
 14970  07F0  00AF               	movwf	?___ftdiv+1
 14971  07F1  0822               	movf	?___ftpack+2,w
 14972  07F2  00B0               	movwf	?___ftdiv+2
 14973  07F3  0008               	return
 14974  07F4                     __end_of___ftdiv:	
 14975                           
 14976                           	psect	text99
 14977  1150                     __ptext99:	
 14978 ;; *************** function ___awtoft *****************
 14979 ;; Defined at:
 14980 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;  c               2    8[BANK0 ] int 
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;  sign            1   13[BANK0 ] unsigned char 
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  3    8[BANK0 ] float 
 14987 ;; Registers used:
 14988 ;;		wreg, status,2, status,0, pclath, cstack
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14994 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14997 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14998 ;;Total ram usage:        6 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    6
 15001 ;; This function calls:
 15002 ;;		___ftpack
 15003 ;; This function is called by:
 15004 ;;		_getPercentValue
 15005 ;;		_setPercentValue
 15006 ;; This function uses a non-reentrant model
 15007 ;;
 15008                           
 15009                           
 15010                           ;psect for function ___awtoft
 15011  1150                     ___awtoft:	
 15012                           
 15013                           ;incstack = 0
 15014                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15015  1150  0020               	movlb	0	; select bank0
 15016  1151  01AD               	clrf	___awtoft@sign
 15017  1152  1FA9               	btfss	___awtoft@c+1,7
 15018  1153  295B               	goto	l7694
 15019  1154  09A8               	comf	___awtoft@c,f
 15020  1155  09A9               	comf	___awtoft@c+1,f
 15021  1156  0AA8               	incf	___awtoft@c,f
 15022  1157  1903               	skipnz
 15023  1158  0AA9               	incf	___awtoft@c+1,f
 15024  1159  01AD               	clrf	___awtoft@sign
 15025  115A  0AAD               	incf	___awtoft@sign,f
 15026  115B                     l7694:	
 15027  115B  0828               	movf	___awtoft@c,w
 15028  115C  00A0               	movwf	___ftpack@arg
 15029  115D  0829               	movf	___awtoft@c+1,w
 15030  115E  00A1               	movwf	___ftpack@arg+1
 15031  115F  01A2               	clrf	___ftpack@arg+2
 15032  1160  308E               	movlw	142
 15033  1161  00AB               	movwf	??___awtoft
 15034  1162  082B               	movf	??___awtoft,w
 15035  1163  00A3               	movwf	___ftpack@exp
 15036  1164  082D               	movf	___awtoft@sign,w
 15037  1165  00AC               	movwf	??___awtoft+1
 15038  1166  082C               	movf	??___awtoft+1,w
 15039  1167  00A4               	movwf	___ftpack@sign
 15040  1168  318A  221C         	fcall	___ftpack
 15041  116A  0020               	movlb	0	; select bank0
 15042  116B  0820               	movf	?___ftpack,w
 15043  116C  00A8               	movwf	?___awtoft
 15044  116D  0821               	movf	?___ftpack+1,w
 15045  116E  00A9               	movwf	?___awtoft+1
 15046  116F  0822               	movf	?___ftpack+2,w
 15047  1170  00AA               	movwf	?___awtoft+2
 15048  1171  0008               	return
 15049  1172                     __end_of___awtoft:	
 15050                           
 15051                           	psect	text100
 15052  0A1C                     __ptext100:	
 15053 ;; *************** function ___ftpack *****************
 15054 ;; Defined at:
 15055 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;  arg             3    0[BANK0 ] unsigned um
 15058 ;;  exp             1    3[BANK0 ] unsigned char 
 15059 ;;  sign            1    4[BANK0 ] unsigned char 
 15060 ;; Auto vars:     Size  Location     Type
 15061 ;;		None
 15062 ;; Return value:  Size  Location     Type
 15063 ;;                  3    0[BANK0 ] float 
 15064 ;; Registers used:
 15065 ;;		wreg, status,2, status,0
 15066 ;; Tracked objects:
 15067 ;;		On entry : 0/0
 15068 ;;		On exit  : 0/0
 15069 ;;		Unchanged: 0/0
 15070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15071 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15075 ;;Total ram usage:        8 bytes
 15076 ;; Hardware stack levels used:    1
 15077 ;; Hardware stack levels required when called:    5
 15078 ;; This function calls:
 15079 ;;		Nothing
 15080 ;; This function is called by:
 15081 ;;		___awtoft
 15082 ;;		___ftadd
 15083 ;;		___ftdiv
 15084 ;;		___ftmul
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           
 15089                           ;psect for function ___ftpack
 15090  0A1C                     ___ftpack:	
 15091                           
 15092                           ;incstack = 0
 15093                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15094  0A1C  0020               	movlb	0	; select bank0
 15095  0A1D  0823               	movf	___ftpack@exp,w
 15096  0A1E  1903               	btfsc	3,2
 15097  0A1F  2A25               	goto	l5350
 15098  0A20  0822               	movf	___ftpack@arg+2,w
 15099  0A21  0421               	iorwf	___ftpack@arg+1,w
 15100  0A22  0420               	iorwf	___ftpack@arg,w
 15101  0A23  1D03               	skipz
 15102  0A24  2A36               	goto	l5356
 15103  0A25                     l5350:	
 15104  0A25  3000               	movlw	0
 15105  0A26  00A0               	movwf	?___ftpack
 15106  0A27  3000               	movlw	0
 15107  0A28  00A1               	movwf	?___ftpack+1
 15108  0A29  3000               	movlw	0
 15109  0A2A  00A2               	movwf	?___ftpack+2
 15110  0A2B  0008               	return
 15111  0A2C                     l5354:	
 15112  0A2C  3001               	movlw	1
 15113  0A2D  00A5               	movwf	??___ftpack
 15114  0A2E  0825               	movf	??___ftpack,w
 15115  0A2F  07A3               	addwf	___ftpack@exp,f
 15116  0A30  3001               	movlw	1
 15117  0A31                     u3715:	
 15118  0A31  36A2               	lsrf	___ftpack@arg+2,f
 15119  0A32  0CA1               	rrf	___ftpack@arg+1,f
 15120  0A33  0CA0               	rrf	___ftpack@arg,f
 15121  0A34  0B89               	decfsz	9,f
 15122  0A35  2A31               	goto	u3715
 15123  0A36                     l5356:	
 15124  0A36  30FE               	movlw	254
 15125  0A37  0522               	andwf	___ftpack@arg+2,w
 15126  0A38  1903               	btfsc	3,2
 15127  0A39  2A4F               	goto	l2782
 15128  0A3A  2A2C               	goto	l5354
 15129  0A3B                     l5358:	
 15130  0A3B  3001               	movlw	1
 15131  0A3C  00A5               	movwf	??___ftpack
 15132  0A3D  0825               	movf	??___ftpack,w
 15133  0A3E  07A3               	addwf	___ftpack@exp,f
 15134  0A3F  3001               	movlw	1
 15135  0A40  07A0               	addwf	___ftpack@arg,f
 15136  0A41  3000               	movlw	0
 15137  0A42  1803               	skipnc
 15138  0A43  3001               	movlw	1
 15139  0A44  07A1               	addwf	___ftpack@arg+1,f
 15140  0A45  3000               	movlw	0
 15141  0A46  1803               	skipnc
 15142  0A47  3001               	movlw	1
 15143  0A48  07A2               	addwf	___ftpack@arg+2,f
 15144  0A49  3001               	movlw	1
 15145  0A4A                     u3735:	
 15146  0A4A  36A2               	lsrf	___ftpack@arg+2,f
 15147  0A4B  0CA1               	rrf	___ftpack@arg+1,f
 15148  0A4C  0CA0               	rrf	___ftpack@arg,f
 15149  0A4D  0B89               	decfsz	9,f
 15150  0A4E  2A4A               	goto	u3735
 15151  0A4F                     l2782:	
 15152  0A4F  30FF               	movlw	255
 15153  0A50  0522               	andwf	___ftpack@arg+2,w
 15154  0A51  1903               	btfsc	3,2
 15155  0A52  2A5C               	goto	l5366
 15156  0A53  2A3B               	goto	l5358
 15157  0A54                     l5364:	
 15158  0A54  3001               	movlw	1
 15159  0A55  02A3               	subwf	___ftpack@exp,f
 15160  0A56  3001               	movlw	1
 15161  0A57                     u3755:	
 15162  0A57  35A0               	lslf	___ftpack@arg,f
 15163  0A58  0DA1               	rlf	___ftpack@arg+1,f
 15164  0A59  0DA2               	rlf	___ftpack@arg+2,f
 15165  0A5A  0B89               	decfsz	9,f
 15166  0A5B  2A57               	goto	u3755
 15167  0A5C                     l5366:	
 15168  0A5C  1FA1               	btfss	___ftpack@arg+1,7
 15169  0A5D  2A54               	goto	l5364
 15170  0A5E  1823               	btfsc	___ftpack@exp,0
 15171  0A5F  2A66               	goto	l2788
 15172  0A60  30FF               	movlw	255
 15173  0A61  05A0               	andwf	___ftpack@arg,f
 15174  0A62  307F               	movlw	127
 15175  0A63  05A1               	andwf	___ftpack@arg+1,f
 15176  0A64  30FF               	movlw	255
 15177  0A65  05A2               	andwf	___ftpack@arg+2,f
 15178  0A66                     l2788:	
 15179  0A66  1003               	clrc
 15180  0A67  0CA3               	rrf	___ftpack@exp,f
 15181  0A68  0823               	movf	___ftpack@exp,w
 15182  0A69  00A5               	movwf	??___ftpack
 15183  0A6A  01A6               	clrf	??___ftpack+1
 15184  0A6B  01A7               	clrf	??___ftpack+2
 15185  0A6C  3010               	movlw	16
 15186  0A6D                     u3785:	
 15187  0A6D  35A5               	lslf	??___ftpack,f
 15188  0A6E  0DA6               	rlf	??___ftpack+1,f
 15189  0A6F  0DA7               	rlf	??___ftpack+2,f
 15190  0A70  0B89               	decfsz	9,f
 15191  0A71  2A6D               	goto	u3785
 15192  0A72  0825               	movf	??___ftpack,w
 15193  0A73  04A0               	iorwf	___ftpack@arg,f
 15194  0A74  0826               	movf	??___ftpack+1,w
 15195  0A75  04A1               	iorwf	___ftpack@arg+1,f
 15196  0A76  0827               	movf	??___ftpack+2,w
 15197  0A77  04A2               	iorwf	___ftpack@arg+2,f
 15198  0A78  0824               	movf	___ftpack@sign,w
 15199  0A79  1903               	btfsc	3,2
 15200  0A7A  0008               	return
 15201  0A7B  17A2               	bsf	___ftpack@arg+2,7
 15202  0A7C  0008               	return
 15203  0A7D                     __end_of___ftpack:	
 15204                           
 15205                           	psect	text101
 15206  1E64                     __ptext101:	
 15207 ;; *************** function _setRFSW_Status *****************
 15208 ;; Defined at:
 15209 ;;		line 439 in file "../src/RF_Control_B1.c"
 15210 ;; Parameters:    Size  Location     Type
 15211 ;;  sw              1    wreg     unsigned char 
 15212 ;;  command         1    2[BANK0 ] unsigned char 
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;  sw              1    3[BANK0 ] unsigned char 
 15215 ;; Return value:  Size  Location     Type
 15216 ;;		None               void
 15217 ;; Registers used:
 15218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15224 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;Total ram usage:        2 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:    6
 15231 ;; This function calls:
 15232 ;;		_RfSWPointSelect
 15233 ;; This function is called by:
 15234 ;;		_DlyOff_Main
 15235 ;;		_setDimmerLights_ERROR
 15236 ;;		_setControl_Lights_Table
 15237 ;;		_Sw_DimmerOnFunc
 15238 ;;		_Sw_DimmerAdjFunc
 15239 ;; This function uses a non-reentrant model
 15240 ;;
 15241                           
 15242                           
 15243                           ;psect for function _setRFSW_Status
 15244  1E64                     _setRFSW_Status:	
 15245                           
 15246                           ;incstack = 0
 15247                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15248                           ;setRFSW_Status@sw stored from wreg
 15249  1E64  0020               	movlb	0	; select bank0
 15250  1E65  00A3               	movwf	setRFSW_Status@sw
 15251                           
 15252                           ;RF_Control_B1.c: 440: RfSWPointSelect(sw);
 15253  1E66  0823               	movf	setRFSW_Status@sw,w
 15254  1E67  319D  25FE         	fcall	_RfSWPointSelect
 15255                           
 15256                           ;RF_Control_B1.c: 441: RFSW->Status = command;
 15257  1E69  0021               	movlb	1	; select bank1
 15258  1E6A  0856               	movf	_RFSW^(0+128),w
 15259  1E6B  0086               	movwf	6
 15260  1E6C  0187               	clrf	7
 15261  1E6D  0020               	movlb	0	; select bank0
 15262  1E6E  0822               	movf	setRFSW_Status@command,w
 15263  1E6F  1001               	bcf	1,0
 15264  1E70  1D03               	skipz
 15265  1E71  1401               	bsf	1,0
 15266  1E72  0008               	return
 15267  1E73                     __end_of_setRFSW_Status:	
 15268                           
 15269                           	psect	text102
 15270  1DFE                     __ptext102:	
 15271 ;; *************** function _RfSWPointSelect *****************
 15272 ;; Defined at:
 15273 ;;		line 374 in file "../src/RF_Control_B1.c"
 15274 ;; Parameters:    Size  Location     Type
 15275 ;;  sw              1    wreg     unsigned char 
 15276 ;; Auto vars:     Size  Location     Type
 15277 ;;  sw              1    1[BANK0 ] unsigned char 
 15278 ;; Return value:  Size  Location     Type
 15279 ;;		None               void
 15280 ;; Registers used:
 15281 ;;		wreg
 15282 ;; Tracked objects:
 15283 ;;		On entry : 0/0
 15284 ;;		On exit  : 0/0
 15285 ;;		Unchanged: 0/0
 15286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;Total ram usage:        2 bytes
 15292 ;; Hardware stack levels used:    1
 15293 ;; Hardware stack levels required when called:    5
 15294 ;; This function calls:
 15295 ;;		Nothing
 15296 ;; This function is called by:
 15297 ;;		_setRFSW_Control
 15298 ;;		_setRFSW_AdjControl
 15299 ;;		_setRFSW_Status
 15300 ;; This function uses a non-reentrant model
 15301 ;;
 15302                           
 15303                           
 15304                           ;psect for function _RfSWPointSelect
 15305  1DFE                     _RfSWPointSelect:	
 15306                           
 15307                           ;incstack = 0
 15308                           ; Regs used in _RfSWPointSelect: [wreg]
 15309                           ;RfSWPointSelect@sw stored from wreg
 15310  1DFE  0020               	movlb	0	; select bank0
 15311  1DFF  00A1               	movwf	RfSWPointSelect@sw
 15312                           
 15313                           ;RF_Control_B1.c: 376: if (sw == 1) {
 15314  1E00  0821               	movf	RfSWPointSelect@sw,w
 15315  1E01  3A01               	xorlw	1
 15316  1E02  1D03               	skipz
 15317  1E03  0008               	return
 15318                           
 15319                           ;RF_Control_B1.c: 377: RFSW = &RFSW1;
 15320  1E04  30EE               	movlw	_RFSW1& (0+255)
 15321  1E05  00A0               	movwf	??_RfSWPointSelect
 15322  1E06  0820               	movf	??_RfSWPointSelect,w
 15323  1E07  0021               	movlb	1	; select bank1
 15324  1E08  00D6               	movwf	_RFSW^(0+128)
 15325  1E09  0008               	return
 15326  1E0A                     __end_of_RfSWPointSelect:	
 15327                           
 15328                           	psect	text103
 15329  1EBF                     __ptext103:	
 15330 ;; *************** function _setDimmerLights_Trigger *****************
 15331 ;; Defined at:
 15332 ;;		line 716 in file "../src/Dimmer_B1.c"
 15333 ;; Parameters:    Size  Location     Type
 15334 ;;  lights          1    wreg     unsigned char 
 15335 ;;  command         1    2[BANK0 ] unsigned char 
 15336 ;; Auto vars:     Size  Location     Type
 15337 ;;  lights          1    3[BANK0 ] unsigned char 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;		None               void
 15340 ;; Registers used:
 15341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15347 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15350 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15351 ;;Total ram usage:        2 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    6
 15354 ;; This function calls:
 15355 ;;		_DimmerLightsPointSelect
 15356 ;; This function is called by:
 15357 ;;		_DlyOff_Main
 15358 ;;		_setRFSW_Control
 15359 ;;		_Sw_DimmerOnFunc
 15360 ;;		_Sw_DimmerOffFunc
 15361 ;; This function uses a non-reentrant model
 15362 ;;
 15363                           
 15364                           
 15365                           ;psect for function _setDimmerLights_Trigger
 15366  1EBF                     _setDimmerLights_Trigger:	
 15367                           
 15368                           ;incstack = 0
 15369                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15370                           ;setDimmerLights_Trigger@lights stored from wreg
 15371  1EBF  0020               	movlb	0	; select bank0
 15372  1EC0  00A3               	movwf	setDimmerLights_Trigger@lights
 15373                           
 15374                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 15375  1EC1  0823               	movf	setDimmerLights_Trigger@lights,w
 15376  1EC2  319D  25D1         	fcall	_DimmerLightsPointSelect
 15377                           
 15378                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 15379  1EC4  0020               	movlb	0	; select bank0
 15380  1EC5  086D               	movf	_DimmerLights,w
 15381  1EC6  3E08               	addlw	8
 15382  1EC7  0086               	movwf	6
 15383  1EC8  3001               	movlw	1	; select bank2/3
 15384  1EC9  0087               	movwf	7
 15385  1ECA  0822               	movf	setDimmerLights_Trigger@command,w
 15386  1ECB  1101               	bcf	1,2
 15387  1ECC  1D03               	skipz
 15388  1ECD  1501               	bsf	1,2
 15389  1ECE  0008               	return
 15390  1ECF                     __end_of_setDimmerLights_Trigger:	
 15391                           
 15392                           	psect	text104
 15393  1EAF                     __ptext104:	
 15394 ;; *************** function _setDimmerLights_Switch *****************
 15395 ;; Defined at:
 15396 ;;		line 704 in file "../src/Dimmer_B1.c"
 15397 ;; Parameters:    Size  Location     Type
 15398 ;;  lights          1    wreg     unsigned char 
 15399 ;;  command         1    2[BANK0 ] unsigned char 
 15400 ;; Auto vars:     Size  Location     Type
 15401 ;;  lights          1    3[BANK0 ] unsigned char 
 15402 ;; Return value:  Size  Location     Type
 15403 ;;		None               void
 15404 ;; Registers used:
 15405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15406 ;; Tracked objects:
 15407 ;;		On entry : 0/0
 15408 ;;		On exit  : 0/0
 15409 ;;		Unchanged: 0/0
 15410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15411 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15415 ;;Total ram usage:        2 bytes
 15416 ;; Hardware stack levels used:    1
 15417 ;; Hardware stack levels required when called:    6
 15418 ;; This function calls:
 15419 ;;		_DimmerLightsPointSelect
 15420 ;; This function is called by:
 15421 ;;		_DlyOff_Main
 15422 ;;		_setRFSW_Control
 15423 ;;		_Sw_DimmerOnFunc
 15424 ;;		_Sw_DimmerOffFunc
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428                           
 15429                           ;psect for function _setDimmerLights_Switch
 15430  1EAF                     _setDimmerLights_Switch:	
 15431                           
 15432                           ;incstack = 0
 15433                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15434                           ;setDimmerLights_Switch@lights stored from wreg
 15435  1EAF  0020               	movlb	0	; select bank0
 15436  1EB0  00A3               	movwf	setDimmerLights_Switch@lights
 15437                           
 15438                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 15439  1EB1  0823               	movf	setDimmerLights_Switch@lights,w
 15440  1EB2  319D  25D1         	fcall	_DimmerLightsPointSelect
 15441                           
 15442                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 15443  1EB4  0020               	movlb	0	; select bank0
 15444  1EB5  086D               	movf	_DimmerLights,w
 15445  1EB6  3E08               	addlw	8
 15446  1EB7  0086               	movwf	6
 15447  1EB8  3001               	movlw	1	; select bank2/3
 15448  1EB9  0087               	movwf	7
 15449  1EBA  0822               	movf	setDimmerLights_Switch@command,w
 15450  1EBB  1081               	bcf	1,1
 15451  1EBC  1D03               	skipz
 15452  1EBD  1481               	bsf	1,1
 15453  1EBE  0008               	return
 15454  1EBF                     __end_of_setDimmerLights_Switch:	
 15455                           
 15456                           	psect	text105
 15457  1DD1                     __ptext105:	
 15458 ;; *************** function _DimmerLightsPointSelect *****************
 15459 ;; Defined at:
 15460 ;;		line 326 in file "../src/Dimmer_B1.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;  lights          1    wreg     unsigned char 
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;  lights          1    1[BANK0 ] unsigned char 
 15465 ;; Return value:  Size  Location     Type
 15466 ;;		None               void
 15467 ;; Registers used:
 15468 ;;		wreg
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15477 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15478 ;;Total ram usage:        2 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    5
 15481 ;; This function calls:
 15482 ;;		Nothing
 15483 ;; This function is called by:
 15484 ;;		_setDimmerLights_Initialization
 15485 ;;		_setDimmerLights_Main
 15486 ;;		_setDimmerLights_ERROR
 15487 ;;		_setDimmerLights_TriggerERROR
 15488 ;;		_setDimmerLights
 15489 ;;		_setDimmerLights_Adj
 15490 ;;		_setDimmerLights_AdjRF
 15491 ;;		_setDimmerLights_Switch
 15492 ;;		_setDimmerLights_AdjGo
 15493 ;;		_setDimmerLights_Trigger
 15494 ;;		_setDimmerLights_TriggerAdj
 15495 ;;		_setDimmerLights_GO
 15496 ;;		_setDimmerLights_MaxmumValue
 15497 ;;		_setDimmerLights_Clear
 15498 ;; This function uses a non-reentrant model
 15499 ;;
 15500                           
 15501                           
 15502                           ;psect for function _DimmerLightsPointSelect
 15503  1DD1                     _DimmerLightsPointSelect:	
 15504                           
 15505                           ;incstack = 0
 15506                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15507                           ;DimmerLightsPointSelect@lights stored from wreg
 15508  1DD1  0020               	movlb	0	; select bank0
 15509  1DD2  00A1               	movwf	DimmerLightsPointSelect@lights
 15510                           
 15511                           ;Dimmer_B1.c: 328: if (lights == 1) {
 15512  1DD3  0821               	movf	DimmerLightsPointSelect@lights,w
 15513  1DD4  3A01               	xorlw	1
 15514  1DD5  1D03               	skipz
 15515  1DD6  0008               	return
 15516                           
 15517                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 15518  1DD7  303D               	movlw	_DimmerLights1& (0+255)
 15519  1DD8  00A0               	movwf	??_DimmerLightsPointSelect
 15520  1DD9  0820               	movf	??_DimmerLightsPointSelect,w
 15521  1DDA  00ED               	movwf	_DimmerLights
 15522  1DDB  0008               	return
 15523  1DDC                     __end_of_DimmerLightsPointSelect:	
 15524                           
 15525                           	psect	text106
 15526  0850                     __ptext106:	
 15527 ;; *************** function _setBuz *****************
 15528 ;; Defined at:
 15529 ;;		line 22 in file "../src/Buzzer_B1.c"
 15530 ;; Parameters:    Size  Location     Type
 15531 ;;  count           1    wreg     unsigned char 
 15532 ;;  time            2    9[BANK0 ] int 
 15533 ;; Auto vars:     Size  Location     Type
 15534 ;;  count           1   12[BANK0 ] unsigned char 
 15535 ;; Return value:  Size  Location     Type
 15536 ;;		None               void
 15537 ;; Registers used:
 15538 ;;		wreg, status,2, status,0, pclath, cstack
 15539 ;; Tracked objects:
 15540 ;;		On entry : 0/0
 15541 ;;		On exit  : 0/0
 15542 ;;		Unchanged: 0/0
 15543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15544 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15545 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15546 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15548 ;;Total ram usage:        4 bytes
 15549 ;; Hardware stack levels used:    1
 15550 ;; Hardware stack levels required when called:    6
 15551 ;; This function calls:
 15552 ;;		___awdiv
 15553 ;; This function is called by:
 15554 ;;		_DlyOff_Main
 15555 ;;		_setDimmerLights_Main
 15556 ;;		_DimmerLights_Exceptions
 15557 ;;		_setOverTemp_Exceptions
 15558 ;;		_setLog_Code
 15559 ;;		_setControl_Lights_Table
 15560 ;;		_setRFSW_Control
 15561 ;;		_setSw_Main
 15562 ;;		_Sw_DimmerOnFunc
 15563 ;;		_my_MainTime
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           
 15568                           ;psect for function _setBuz
 15569  0850                     _setBuz:	
 15570                           
 15571                           ;incstack = 0
 15572                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15573                           ;setBuz@count stored from wreg
 15574  0850  0020               	movlb	0	; select bank0
 15575  0851  00AC               	movwf	setBuz@count
 15576                           
 15577                           ;Buzzer_B1.c: 23: time /= 10;
 15578  0852  300A               	movlw	10
 15579  0853  00A0               	movwf	___awdiv@divisor
 15580  0854  3000               	movlw	0
 15581  0855  00A1               	movwf	___awdiv@divisor+1
 15582  0856  082A               	movf	setBuz@time+1,w
 15583  0857  01A3               	clrf	___awdiv@dividend+1
 15584  0858  07A3               	addwf	___awdiv@dividend+1,f
 15585  0859  0829               	movf	setBuz@time,w
 15586  085A  01A2               	clrf	___awdiv@dividend
 15587  085B  07A2               	addwf	___awdiv@dividend,f
 15588  085C  3196  26FD  3188   	fcall	___awdiv
 15589  085F  0020               	movlb	0	; select bank0
 15590  0860  0821               	movf	?___awdiv+1,w
 15591  0861  01AA               	clrf	setBuz@time+1
 15592  0862  07AA               	addwf	setBuz@time+1,f
 15593  0863  0820               	movf	?___awdiv,w
 15594  0864  01A9               	clrf	setBuz@time
 15595  0865  07A9               	addwf	setBuz@time,f
 15596                           
 15597                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15598  0866  0021               	movlb	1	; select bank1
 15599  0867  1C32               	btfss	_Buz1^(0+128),0
 15600  0868  0008               	return
 15601                           
 15602                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15603  0869  18B2               	btfsc	_Buz1^(0+128),1
 15604  086A  2881               	goto	l92
 15605                           
 15606                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15607  086B  14B2               	bsf	_Buz1^(0+128),1
 15608                           
 15609                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15610  086C  01B3               	clrf	(_Buz1^(0+128)+1)
 15611  086D  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15612                           
 15613                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15614  086E  0020               	movlb	0	; select bank0
 15615  086F  082C               	movf	setBuz@count,w
 15616  0870  00AB               	movwf	??_setBuz
 15617  0871  082B               	movf	??_setBuz,w
 15618  0872  0021               	movlb	1	; select bank1
 15619  0873  00B5               	movwf	(_Buz1^(0+128)+3)
 15620                           
 15621                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15622  0874  0020               	movlb	0	; select bank0
 15623  0875  082A               	movf	setBuz@time+1,w
 15624  0876  0021               	movlb	1	; select bank1
 15625  0877  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15626  0878  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15627  0879  0020               	movlb	0	; select bank0
 15628  087A  0829               	movf	setBuz@time,w
 15629  087B  0021               	movlb	1	; select bank1
 15630  087C  01B8               	clrf	(_Buz1^(0+128)+6)
 15631  087D  07B8               	addwf	(_Buz1^(0+128)+6),f
 15632                           
 15633                           ;Buzzer_B1.c: 30: RB3 = 1;
 15634  087E  0020               	movlb	0	; select bank0
 15635  087F  158D               	bsf	13,3	;volatile
 15636                           
 15637                           ;Buzzer_B1.c: 31: } else {
 15638  0880  0008               	return
 15639  0881                     l92:	
 15640                           
 15641                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15642  0881  19B2               	btfsc	_Buz1^(0+128),3
 15643  0882  2895               	goto	l94
 15644                           
 15645                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15646  0883  15B2               	bsf	_Buz1^(0+128),3
 15647                           
 15648                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15649  0884  0020               	movlb	0	; select bank0
 15650  0885  082C               	movf	setBuz@count,w
 15651  0886  00AB               	movwf	??_setBuz
 15652  0887  082B               	movf	??_setBuz,w
 15653  0888  0021               	movlb	1	; select bank1
 15654  0889  00B6               	movwf	(_Buz1^(0+128)+4)
 15655                           
 15656                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15657  088A  0020               	movlb	0	; select bank0
 15658  088B  082A               	movf	setBuz@time+1,w
 15659  088C  0021               	movlb	1	; select bank1
 15660  088D  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15661  088E  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15662  088F  0020               	movlb	0	; select bank0
 15663  0890  0829               	movf	setBuz@time,w
 15664  0891  0021               	movlb	1	; select bank1
 15665  0892  01BA               	clrf	(_Buz1^(0+128)+8)
 15666  0893  07BA               	addwf	(_Buz1^(0+128)+8),f
 15667                           
 15668                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15669  0894  0008               	return
 15670  0895                     l94:	
 15671  0895  1A32               	btfsc	_Buz1^(0+128),4
 15672  0896  0008               	return
 15673                           
 15674                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15675  0897  1632               	bsf	_Buz1^(0+128),4
 15676                           
 15677                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15678  0898  0020               	movlb	0	; select bank0
 15679  0899  082C               	movf	setBuz@count,w
 15680  089A  00AB               	movwf	??_setBuz
 15681  089B  082B               	movf	??_setBuz,w
 15682  089C  0021               	movlb	1	; select bank1
 15683  089D  00B7               	movwf	(_Buz1^(0+128)+5)
 15684                           
 15685                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15686  089E  0020               	movlb	0	; select bank0
 15687  089F  082A               	movf	setBuz@time+1,w
 15688  08A0  0021               	movlb	1	; select bank1
 15689  08A1  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15690  08A2  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15691  08A3  0020               	movlb	0	; select bank0
 15692  08A4  0829               	movf	setBuz@time,w
 15693  08A5  0021               	movlb	1	; select bank1
 15694  08A6  01BC               	clrf	(_Buz1^(0+128)+10)
 15695  08A7  07BC               	addwf	(_Buz1^(0+128)+10),f
 15696  08A8  0008               	return
 15697  08A9                     __end_of_setBuz:	
 15698                           
 15699                           	psect	text107
 15700  16FD                     __ptext107:	
 15701 ;; *************** function ___awdiv *****************
 15702 ;; Defined at:
 15703 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15704 ;; Parameters:    Size  Location     Type
 15705 ;;  divisor         2    0[BANK0 ] int 
 15706 ;;  dividend        2    2[BANK0 ] int 
 15707 ;; Auto vars:     Size  Location     Type
 15708 ;;  quotient        2    7[BANK0 ] int 
 15709 ;;  sign            1    6[BANK0 ] unsigned char 
 15710 ;;  counter         1    5[BANK0 ] unsigned char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  2    0[BANK0 ] int 
 15713 ;; Registers used:
 15714 ;;		wreg, status,2, status,0
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15721 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;Total ram usage:        9 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    5
 15727 ;; This function calls:
 15728 ;;		Nothing
 15729 ;; This function is called by:
 15730 ;;		_setBuz
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           
 15735                           ;psect for function ___awdiv
 15736  16FD                     ___awdiv:	
 15737                           
 15738                           ;incstack = 0
 15739                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15740  16FD  0020               	movlb	0	; select bank0
 15741  16FE  01A6               	clrf	___awdiv@sign
 15742  16FF  1FA1               	btfss	___awdiv@divisor+1,7
 15743  1700  2F08               	goto	l7790
 15744  1701  09A0               	comf	___awdiv@divisor,f
 15745  1702  09A1               	comf	___awdiv@divisor+1,f
 15746  1703  0AA0               	incf	___awdiv@divisor,f
 15747  1704  1903               	skipnz
 15748  1705  0AA1               	incf	___awdiv@divisor+1,f
 15749  1706  01A6               	clrf	___awdiv@sign
 15750  1707  0AA6               	incf	___awdiv@sign,f
 15751  1708                     l7790:	
 15752  1708  1FA3               	btfss	___awdiv@dividend+1,7
 15753  1709  2F13               	goto	l7796
 15754  170A  09A2               	comf	___awdiv@dividend,f
 15755  170B  09A3               	comf	___awdiv@dividend+1,f
 15756  170C  0AA2               	incf	___awdiv@dividend,f
 15757  170D  1903               	skipnz
 15758  170E  0AA3               	incf	___awdiv@dividend+1,f
 15759  170F  3001               	movlw	1
 15760  1710  00A4               	movwf	??___awdiv
 15761  1711  0824               	movf	??___awdiv,w
 15762  1712  06A6               	xorwf	___awdiv@sign,f
 15763  1713                     l7796:	
 15764  1713  01A7               	clrf	___awdiv@quotient
 15765  1714  01A8               	clrf	___awdiv@quotient+1
 15766  1715  0821               	movf	___awdiv@divisor+1,w
 15767  1716  0420               	iorwf	___awdiv@divisor,w
 15768  1717  1903               	skipnz
 15769  1718  2F42               	goto	l7818
 15770  1719  01A5               	clrf	___awdiv@counter
 15771  171A  0AA5               	incf	___awdiv@counter,f
 15772  171B                     l7806:	
 15773  171B  1BA1               	btfsc	___awdiv@divisor+1,7
 15774  171C  2F27               	goto	l7808
 15775  171D  3001               	movlw	1
 15776  171E                     u7525:	
 15777  171E  35A0               	lslf	___awdiv@divisor,f
 15778  171F  0DA1               	rlf	___awdiv@divisor+1,f
 15779  1720  0B89               	decfsz	9,f
 15780  1721  2F1E               	goto	u7525
 15781  1722  3001               	movlw	1
 15782  1723  00A4               	movwf	??___awdiv
 15783  1724  0824               	movf	??___awdiv,w
 15784  1725  07A5               	addwf	___awdiv@counter,f
 15785  1726  2F1B               	goto	l7806
 15786  1727                     l7808:	
 15787  1727  3001               	movlw	1
 15788  1728                     u7545:	
 15789  1728  35A7               	lslf	___awdiv@quotient,f
 15790  1729  0DA8               	rlf	___awdiv@quotient+1,f
 15791  172A  0B89               	decfsz	9,f
 15792  172B  2F28               	goto	u7545
 15793  172C  0821               	movf	___awdiv@divisor+1,w
 15794  172D  0223               	subwf	___awdiv@dividend+1,w
 15795  172E  1D03               	skipz
 15796  172F  2F32               	goto	u7555
 15797  1730  0820               	movf	___awdiv@divisor,w
 15798  1731  0222               	subwf	___awdiv@dividend,w
 15799  1732                     u7555:	
 15800  1732  1C03               	skipc
 15801  1733  2F39               	goto	l7814
 15802  1734  0820               	movf	___awdiv@divisor,w
 15803  1735  02A2               	subwf	___awdiv@dividend,f
 15804  1736  0821               	movf	___awdiv@divisor+1,w
 15805  1737  3BA3               	subwfb	___awdiv@dividend+1,f
 15806  1738  1427               	bsf	___awdiv@quotient,0
 15807  1739                     l7814:	
 15808  1739  3001               	movlw	1
 15809  173A                     u7565:	
 15810  173A  36A1               	lsrf	___awdiv@divisor+1,f
 15811  173B  0CA0               	rrf	___awdiv@divisor,f
 15812  173C  0B89               	decfsz	9,f
 15813  173D  2F3A               	goto	u7565
 15814  173E  3001               	movlw	1
 15815  173F  02A5               	subwf	___awdiv@counter,f
 15816  1740  1D03               	btfss	3,2
 15817  1741  2F27               	goto	l7808
 15818  1742                     l7818:	
 15819  1742  0826               	movf	___awdiv@sign,w
 15820  1743  1903               	btfsc	3,2
 15821  1744  2F4A               	goto	l7822
 15822  1745  09A7               	comf	___awdiv@quotient,f
 15823  1746  09A8               	comf	___awdiv@quotient+1,f
 15824  1747  0AA7               	incf	___awdiv@quotient,f
 15825  1748  1903               	skipnz
 15826  1749  0AA8               	incf	___awdiv@quotient+1,f
 15827  174A                     l7822:	
 15828  174A  0828               	movf	___awdiv@quotient+1,w
 15829  174B  01A1               	clrf	?___awdiv+1
 15830  174C  07A1               	addwf	?___awdiv+1,f
 15831  174D  0827               	movf	___awdiv@quotient,w
 15832  174E  01A0               	clrf	?___awdiv
 15833  174F  07A0               	addwf	?___awdiv,f
 15834  1750  0008               	return
 15835  1751                     __end_of___awdiv:	
 15836                           
 15837                           	psect	text108
 15838  1D2A                     __ptext108:	
 15839 ;; *************** function _DelayOff_Initialization *****************
 15840 ;; Defined at:
 15841 ;;		line 26 in file "../src/DelayOff_B1.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;		None
 15844 ;; Auto vars:     Size  Location     Type
 15845 ;;		None
 15846 ;; Return value:  Size  Location     Type
 15847 ;;		None               void
 15848 ;; Registers used:
 15849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15850 ;; Tracked objects:
 15851 ;;		On entry : 0/0
 15852 ;;		On exit  : 0/0
 15853 ;;		Unchanged: 0/0
 15854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;Total ram usage:        0 bytes
 15860 ;; Hardware stack levels used:    1
 15861 ;; Hardware stack levels required when called:    7
 15862 ;; This function calls:
 15863 ;;		_DlyOff_Initialization
 15864 ;; This function is called by:
 15865 ;;		_main
 15866 ;; This function uses a non-reentrant model
 15867 ;;
 15868                           
 15869                           
 15870                           ;psect for function _DelayOff_Initialization
 15871  1D2A                     _DelayOff_Initialization:	
 15872                           
 15873                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15874                           
 15875                           ;incstack = 0
 15876                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15877  1D2A  3001               	movlw	1
 15878  1D2B  319D  25A7         	fcall	_DlyOff_Initialization
 15879  1D2D  0008               	return
 15880  1D2E                     __end_of_DelayOff_Initialization:	
 15881                           
 15882                           	psect	text109
 15883  1DA7                     __ptext109:	
 15884 ;; *************** function _DlyOff_Initialization *****************
 15885 ;; Defined at:
 15886 ;;		line 56 in file "../src/DelayOff_B1.c"
 15887 ;; Parameters:    Size  Location     Type
 15888 ;;  sw              1    wreg     unsigned char 
 15889 ;; Auto vars:     Size  Location     Type
 15890 ;;  sw              1    2[BANK0 ] unsigned char 
 15891 ;; Return value:  Size  Location     Type
 15892 ;;		None               void
 15893 ;; Registers used:
 15894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15895 ;; Tracked objects:
 15896 ;;		On entry : 0/0
 15897 ;;		On exit  : 0/0
 15898 ;;		Unchanged: 0/0
 15899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;Total ram usage:        1 bytes
 15905 ;; Hardware stack levels used:    1
 15906 ;; Hardware stack levels required when called:    6
 15907 ;; This function calls:
 15908 ;;		_DelayOffPointSelect
 15909 ;; This function is called by:
 15910 ;;		_DelayOff_Initialization
 15911 ;; This function uses a non-reentrant model
 15912 ;;
 15913                           
 15914                           
 15915                           ;psect for function _DlyOff_Initialization
 15916  1DA7                     _DlyOff_Initialization:	
 15917                           
 15918                           ;incstack = 0
 15919                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15920                           ;DlyOff_Initialization@sw stored from wreg
 15921  1DA7  0020               	movlb	0	; select bank0
 15922  1DA8  00A2               	movwf	DlyOff_Initialization@sw
 15923                           
 15924                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15925  1DA9  0822               	movf	DlyOff_Initialization@sw,w
 15926  1DAA  319D  25C6         	fcall	_DelayOffPointSelect
 15927                           
 15928                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15929  1DAC  0876               	movf	_DelayOff,w
 15930  1DAD  0086               	movwf	6
 15931  1DAE  0187               	clrf	7
 15932  1DAF  1401               	bsf	1,0
 15933  1DB0  0008               	return
 15934  1DB1                     __end_of_DlyOff_Initialization:	
 15935                           
 15936                           	psect	text110
 15937  1DC6                     __ptext110:	
 15938 ;; *************** function _DelayOffPointSelect *****************
 15939 ;; Defined at:
 15940 ;;		line 7 in file "../src/DelayOff_B1.c"
 15941 ;; Parameters:    Size  Location     Type
 15942 ;;  sw              1    wreg     unsigned char 
 15943 ;; Auto vars:     Size  Location     Type
 15944 ;;  sw              1    1[BANK0 ] unsigned char 
 15945 ;; Return value:  Size  Location     Type
 15946 ;;		None               void
 15947 ;; Registers used:
 15948 ;;		wreg
 15949 ;; Tracked objects:
 15950 ;;		On entry : 0/0
 15951 ;;		On exit  : 0/0
 15952 ;;		Unchanged: 0/0
 15953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;Total ram usage:        2 bytes
 15959 ;; Hardware stack levels used:    1
 15960 ;; Hardware stack levels required when called:    5
 15961 ;; This function calls:
 15962 ;;		Nothing
 15963 ;; This function is called by:
 15964 ;;		_DlyOff_Initialization
 15965 ;;		_DlyOff_Main
 15966 ;;		_setDelayOff_GO
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           
 15971                           ;psect for function _DelayOffPointSelect
 15972  1DC6                     _DelayOffPointSelect:	
 15973                           
 15974                           ;incstack = 0
 15975                           ; Regs used in _DelayOffPointSelect: [wreg]
 15976                           ;DelayOffPointSelect@sw stored from wreg
 15977  1DC6  0020               	movlb	0	; select bank0
 15978  1DC7  00A1               	movwf	DelayOffPointSelect@sw
 15979                           
 15980                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15981  1DC8  0821               	movf	DelayOffPointSelect@sw,w
 15982  1DC9  3A01               	xorlw	1
 15983  1DCA  1D03               	skipz
 15984  1DCB  0008               	return
 15985                           
 15986                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15987  1DCC  30EC               	movlw	_DlySw1& (0+255)
 15988  1DCD  00A0               	movwf	??_DelayOffPointSelect
 15989  1DCE  0820               	movf	??_DelayOffPointSelect,w
 15990  1DCF  00F6               	movwf	_DelayOff
 15991  1DD0  0008               	return
 15992  1DD1                     __end_of_DelayOffPointSelect:	
 15993                           
 15994                           	psect	text111
 15995  1F5A                     __ptext111:	
 15996 ;; *************** function _CC2500_PowerOnInitial *****************
 15997 ;; Defined at:
 15998 ;;		line 128 in file "../src/CC2500_B1.c"
 15999 ;; Parameters:    Size  Location     Type
 16000 ;;		None
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;		None
 16003 ;; Return value:  Size  Location     Type
 16004 ;;		None               void
 16005 ;; Registers used:
 16006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16007 ;; Tracked objects:
 16008 ;;		On entry : 0/0
 16009 ;;		On exit  : 0/0
 16010 ;;		Unchanged: 0/0
 16011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;Total ram usage:        0 bytes
 16017 ;; Hardware stack levels used:    1
 16018 ;; Hardware stack levels required when called:    8
 16019 ;; This function calls:
 16020 ;;		_CC2500_ClearRXFIFO
 16021 ;;		_CC2500_ClearTXFIFO
 16022 ;;		_CC2500_FrequencyCabr
 16023 ;;		_CC2500_InitPATable
 16024 ;;		_CC2500_InitSetREG
 16025 ;;		_CC2500_PowerRST
 16026 ;;		_CC2500_SIDLEMode
 16027 ;; This function is called by:
 16028 ;;		_main
 16029 ;; This function uses a non-reentrant model
 16030 ;;
 16031                           
 16032                           
 16033                           ;psect for function _CC2500_PowerOnInitial
 16034  1F5A                     _CC2500_PowerOnInitial:	
 16035                           
 16036                           ;CC2500_B1.c: 129: CC2500_PowerRST();
 16037                           
 16038                           ;incstack = 0
 16039                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16040  1F5A  3195  2559  319F   	fcall	_CC2500_PowerRST
 16041                           
 16042                           ;CC2500_B1.c: 130: CC2500_InitSetREG();
 16043  1F5D  3192  224D  319F   	fcall	_CC2500_InitSetREG
 16044                           
 16045                           ;CC2500_B1.c: 131: CC2500_InitPATable();
 16046  1F60  3190  20D2  319F   	fcall	_CC2500_InitPATable
 16047                           
 16048                           ;CC2500_B1.c: 132: CC2500_ClearTXFIFO();
 16049  1F63  319D  2522  319F   	fcall	_CC2500_ClearTXFIFO
 16050                           
 16051                           ;CC2500_B1.c: 133: CC2500_ClearRXFIFO();
 16052  1F66  319D  251E  319F   	fcall	_CC2500_ClearRXFIFO
 16053                           
 16054                           ;CC2500_B1.c: 134: CC2500_FrequencyCabr();
 16055  1F69  319D  25F2  319F   	fcall	_CC2500_FrequencyCabr
 16056                           
 16057                           ;CC2500_B1.c: 135: CC2500_SIDLEMode();
 16058  1F6C  319D  2526         	fcall	_CC2500_SIDLEMode
 16059  1F6E  0008               	return
 16060  1F6F                     __end_of_CC2500_PowerOnInitial:	
 16061                           
 16062                           	psect	text112
 16063  1D26                     __ptext112:	
 16064 ;; *************** function _CC2500_SIDLEMode *****************
 16065 ;; Defined at:
 16066 ;;		line 218 in file "../src/CC2500_B1.c"
 16067 ;; Parameters:    Size  Location     Type
 16068 ;;		None
 16069 ;; Auto vars:     Size  Location     Type
 16070 ;;		None
 16071 ;; Return value:  Size  Location     Type
 16072 ;;		None               void
 16073 ;; Registers used:
 16074 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16075 ;; Tracked objects:
 16076 ;;		On entry : 0/0
 16077 ;;		On exit  : 0/0
 16078 ;;		Unchanged: 0/0
 16079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;Total ram usage:        0 bytes
 16085 ;; Hardware stack levels used:    1
 16086 ;; Hardware stack levels required when called:    7
 16087 ;; This function calls:
 16088 ;;		_CC2500_WriteCommand
 16089 ;; This function is called by:
 16090 ;;		_CC2500_PowerOnInitial
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           
 16095                           ;psect for function _CC2500_SIDLEMode
 16096  1D26                     _CC2500_SIDLEMode:	
 16097                           
 16098                           ;CC2500_B1.c: 219: CC2500_WriteCommand(0x36);
 16099                           
 16100                           ;incstack = 0
 16101                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16102  1D26  3036               	movlw	54
 16103  1D27  319F  27CC         	fcall	_CC2500_WriteCommand
 16104  1D29  0008               	return
 16105  1D2A                     __end_of_CC2500_SIDLEMode:	
 16106                           
 16107                           	psect	text113
 16108  1559                     __ptext113:	
 16109 ;; *************** function _CC2500_PowerRST *****************
 16110 ;; Defined at:
 16111 ;;		line 141 in file "../src/CC2500_B1.c"
 16112 ;; Parameters:    Size  Location     Type
 16113 ;;		None
 16114 ;; Auto vars:     Size  Location     Type
 16115 ;;		None
 16116 ;; Return value:  Size  Location     Type
 16117 ;;		None               void
 16118 ;; Registers used:
 16119 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16120 ;; Tracked objects:
 16121 ;;		On entry : 0/0
 16122 ;;		On exit  : 0/0
 16123 ;;		Unchanged: 0/0
 16124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16129 ;;Total ram usage:        1 bytes
 16130 ;; Hardware stack levels used:    1
 16131 ;; Hardware stack levels required when called:    6
 16132 ;; This function calls:
 16133 ;;		_CC2500_WriteByte
 16134 ;;		_DelayTime_1us
 16135 ;;		_Timeout_Counter
 16136 ;;		_set_TimeoutCleared
 16137 ;; This function is called by:
 16138 ;;		_CC2500_PowerOnInitial
 16139 ;; This function uses a non-reentrant model
 16140 ;;
 16141                           
 16142                           
 16143                           ;psect for function _CC2500_PowerRST
 16144  1559                     _CC2500_PowerRST:	
 16145                           
 16146                           ;CC2500_B1.c: 142: RC1 = 0;
 16147                           
 16148                           ;incstack = 0
 16149                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16150  1559  0020               	movlb	0	; select bank0
 16151  155A  108E               	bcf	14,1	;volatile
 16152                           
 16153                           ;CC2500_B1.c: 143: RC0 = 0;
 16154  155B  100E               	bcf	14,0	;volatile
 16155                           
 16156                           ;CC2500_B1.c: 144: RC4 = 1;
 16157  155C  160E               	bsf	14,4	;volatile
 16158                           
 16159                           ;CC2500_B1.c: 145: DelayTime_1us(10);
 16160  155D  300A               	movlw	10
 16161  155E  00A0               	movwf	DelayTime_1us@count
 16162  155F  3000               	movlw	0
 16163  1560  00A1               	movwf	DelayTime_1us@count+1
 16164  1561  3192  2200  3195   	fcall	_DelayTime_1us
 16165                           
 16166                           ;CC2500_B1.c: 146: RC4 = 0;
 16167  1564  0020               	movlb	0	; select bank0
 16168  1565  120E               	bcf	14,4	;volatile
 16169                           
 16170                           ;CC2500_B1.c: 147: DelayTime_1us(10);
 16171  1566  300A               	movlw	10
 16172  1567  00A0               	movwf	DelayTime_1us@count
 16173  1568  3000               	movlw	0
 16174  1569  00A1               	movwf	DelayTime_1us@count+1
 16175  156A  3192  2200  3195   	fcall	_DelayTime_1us
 16176                           
 16177                           ;CC2500_B1.c: 148: RC4 = 1;
 16178  156D  0020               	movlb	0	; select bank0
 16179  156E  160E               	bsf	14,4	;volatile
 16180                           
 16181                           ;CC2500_B1.c: 149: DelayTime_1us(40);
 16182  156F  3028               	movlw	40
 16183  1570  00A0               	movwf	DelayTime_1us@count
 16184  1571  3000               	movlw	0
 16185  1572  00A1               	movwf	DelayTime_1us@count+1
 16186  1573  3192  2200  3195   	fcall	_DelayTime_1us
 16187                           
 16188                           ;CC2500_B1.c: 150: RC4 = 0;
 16189  1576  0020               	movlb	0	; select bank0
 16190  1577  120E               	bcf	14,4	;volatile
 16191                           
 16192                           ;CC2500_B1.c: 151: SPI0Buffer = 0x30;
 16193  1578  3030               	movlw	48
 16194  1579  00A6               	movwf	??_CC2500_PowerRST
 16195  157A  0826               	movf	??_CC2500_PowerRST,w
 16196  157B  0021               	movlb	1	; select bank1
 16197  157C  00D9               	movwf	_SPI0Buffer^(0+128)
 16198                           
 16199                           ;CC2500_B1.c: 152: while (RC2 == 1 && myMain.Timeout == 0) {
 16200  157D  2D81               	goto	l8692
 16201  157E                     l8690:	
 16202                           
 16203                           ;CC2500_B1.c: 153: Timeout_Counter();
 16204  157E  319F  2745  3195   	fcall	_Timeout_Counter
 16205  1581                     l8692:	
 16206  1581  0020               	movlb	0	; select bank0
 16207  1582  1D0E               	btfss	14,2	;volatile
 16208  1583  2D87               	goto	l8696
 16209  1584  0021               	movlb	1	; select bank1
 16210  1585  1D2F               	btfss	(_myMain^(0+128)+15),2
 16211  1586  2D7E               	goto	l8690
 16212  1587                     l8696:	
 16213                           
 16214                           ;CC2500_B1.c: 154: };
 16215                           ;CC2500_B1.c: 155: set_TimeoutCleared();
 16216  1587  319D  253E  3195   	fcall	_set_TimeoutCleared
 16217                           
 16218                           ;CC2500_B1.c: 156: CC2500_WriteByte();
 16219  158A  319F  279A  3195   	fcall	_CC2500_WriteByte
 16220                           
 16221                           ;CC2500_B1.c: 157: while (RC2 == 1 && myMain.Timeout == 0) {
 16222  158D  2D91               	goto	l8702
 16223  158E                     l8700:	
 16224                           
 16225                           ;CC2500_B1.c: 158: Timeout_Counter();
 16226  158E  319F  2745  3195   	fcall	_Timeout_Counter
 16227  1591                     l8702:	
 16228  1591  0020               	movlb	0	; select bank0
 16229  1592  1D0E               	btfss	14,2	;volatile
 16230  1593  2D97               	goto	l8706
 16231  1594  0021               	movlb	1	; select bank1
 16232  1595  1D2F               	btfss	(_myMain^(0+128)+15),2
 16233  1596  2D8E               	goto	l8700
 16234  1597                     l8706:	
 16235                           
 16236                           ;CC2500_B1.c: 159: };
 16237                           ;CC2500_B1.c: 160: set_TimeoutCleared();
 16238  1597  319D  253E         	fcall	_set_TimeoutCleared
 16239                           
 16240                           ;CC2500_B1.c: 161: RC0 = 0;
 16241  1599  0020               	movlb	0	; select bank0
 16242  159A  100E               	bcf	14,0	;volatile
 16243                           
 16244                           ;CC2500_B1.c: 162: RC4 = 1;
 16245  159B  160E               	bsf	14,4	;volatile
 16246  159C  0008               	return
 16247  159D                     __end_of_CC2500_PowerRST:	
 16248                           
 16249                           	psect	text114
 16250  124D                     __ptext114:	
 16251 ;; *************** function _CC2500_InitSetREG *****************
 16252 ;; Defined at:
 16253 ;;		line 168 in file "../src/CC2500_B1.c"
 16254 ;; Parameters:    Size  Location     Type
 16255 ;;		None
 16256 ;; Auto vars:     Size  Location     Type
 16257 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16258 ;;  temp2           1    7[BANK0 ] unsigned char 
 16259 ;;  temp1           1    6[BANK0 ] unsigned char 
 16260 ;; Return value:  Size  Location     Type
 16261 ;;		None               void
 16262 ;; Registers used:
 16263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16264 ;; Tracked objects:
 16265 ;;		On entry : 0/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;Total ram usage:        4 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; Hardware stack levels required when called:    7
 16276 ;; This function calls:
 16277 ;;		_CC2500_WriteREG
 16278 ;; This function is called by:
 16279 ;;		_CC2500_PowerOnInitial
 16280 ;; This function uses a non-reentrant model
 16281 ;;
 16282                           
 16283                           
 16284                           ;psect for function _CC2500_InitSetREG
 16285  124D                     _CC2500_InitSetREG:	
 16286                           
 16287                           ;CC2500_B1.c: 169: unsigned char loop_c;
 16288                           ;CC2500_B1.c: 170: unsigned char temp1, temp2;
 16289                           ;CC2500_B1.c: 172: for (loop_c = 0; loop_c < 47; loop_c++) {
 16290                           
 16291                           ;incstack = 0
 16292                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16293  124D  0020               	movlb	0	; select bank0
 16294  124E  01A8               	clrf	CC2500_InitSetREG@loop_c
 16295  124F                     L5:	
 16296  124F  302F               	movlw	47
 16297  1250  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16298  1251  1803               	btfsc	3,0
 16299  1252  0008               	return
 16300                           
 16301                           ;CC2500_B1.c: 173: temp1 = CC2500_registers_address[loop_c];
 16302  1253  0828               	movf	CC2500_InitSetREG@loop_c,w
 16303  1254  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16304  1255  0084               	movwf	4
 16305  1256  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16306  1257  1803               	skipnc
 16307  1258  3E01               	addlw	1
 16308  1259  0085               	movwf	5
 16309  125A  0800               	movf	0,w	;code access
 16310  125B  00A5               	movwf	??_CC2500_InitSetREG
 16311  125C  0825               	movf	??_CC2500_InitSetREG,w
 16312  125D  00A6               	movwf	CC2500_InitSetREG@temp1
 16313                           
 16314                           ;CC2500_B1.c: 174: temp2 = CC2500_rfSettings[loop_c];
 16315  125E  0828               	movf	CC2500_InitSetREG@loop_c,w
 16316  125F  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16317  1260  0084               	movwf	4
 16318  1261  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16319  1262  1803               	skipnc
 16320  1263  3E01               	addlw	1
 16321  1264  0085               	movwf	5
 16322  1265  0800               	movf	0,w	;code access
 16323  1266  00A5               	movwf	??_CC2500_InitSetREG
 16324  1267  0825               	movf	??_CC2500_InitSetREG,w
 16325  1268  00A7               	movwf	CC2500_InitSetREG@temp2
 16326                           
 16327                           ;CC2500_B1.c: 176: CC2500_WriteREG(temp1, temp2);
 16328  1269  0827               	movf	CC2500_InitSetREG@temp2,w
 16329  126A  00A5               	movwf	??_CC2500_InitSetREG
 16330  126B  0825               	movf	??_CC2500_InitSetREG,w
 16331  126C  00A2               	movwf	CC2500_WriteREG@value
 16332  126D  0826               	movf	CC2500_InitSetREG@temp1,w
 16333  126E  3191  2195  3192   	fcall	_CC2500_WriteREG
 16334  1271  3001               	movlw	1
 16335  1272  0020               	movlb	0	; select bank0
 16336  1273  00A5               	movwf	??_CC2500_InitSetREG
 16337  1274  0825               	movf	??_CC2500_InitSetREG,w
 16338  1275  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16339  1276  2A4F               	goto	L5
 16340  1277                     __end_of_CC2500_InitSetREG:	
 16341                           
 16342                           	psect	text115
 16343  10D2                     __ptext115:	
 16344 ;; *************** function _CC2500_InitPATable *****************
 16345 ;; Defined at:
 16346 ;;		line 183 in file "../src/CC2500_B1.c"
 16347 ;; Parameters:    Size  Location     Type
 16348 ;;		None
 16349 ;; Auto vars:     Size  Location     Type
 16350 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16351 ;;  temp            1    6[BANK0 ] unsigned char 
 16352 ;; Return value:  Size  Location     Type
 16353 ;;		None               void
 16354 ;; Registers used:
 16355 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16356 ;; Tracked objects:
 16357 ;;		On entry : 0/0
 16358 ;;		On exit  : 0/0
 16359 ;;		Unchanged: 0/0
 16360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16364 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16365 ;;Total ram usage:        3 bytes
 16366 ;; Hardware stack levels used:    1
 16367 ;; Hardware stack levels required when called:    7
 16368 ;; This function calls:
 16369 ;;		_CC2500_WriteREG
 16370 ;; This function is called by:
 16371 ;;		_CC2500_PowerOnInitial
 16372 ;; This function uses a non-reentrant model
 16373 ;;
 16374                           
 16375                           
 16376                           ;psect for function _CC2500_InitPATable
 16377  10D2                     _CC2500_InitPATable:	
 16378                           
 16379                           ;CC2500_B1.c: 184: unsigned char loop_d;
 16380                           ;CC2500_B1.c: 185: unsigned char temp;
 16381                           ;CC2500_B1.c: 187: for (loop_d = 0; loop_d < 8; loop_d++) {
 16382                           
 16383                           ;incstack = 0
 16384                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16385  10D2  0020               	movlb	0	; select bank0
 16386  10D3  01A7               	clrf	CC2500_InitPATable@loop_d
 16387  10D4                     L6:	
 16388  10D4  3008               	movlw	8
 16389  10D5  0227               	subwf	CC2500_InitPATable@loop_d,w
 16390  10D6  1803               	btfsc	3,0
 16391  10D7  0008               	return
 16392                           
 16393                           ;CC2500_B1.c: 188: temp = CC2500_patable_vaule[loop_d];
 16394  10D8  0827               	movf	CC2500_InitPATable@loop_d,w
 16395  10D9  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16396  10DA  0084               	movwf	4
 16397  10DB  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16398  10DC  1803               	skipnc
 16399  10DD  3E01               	addlw	1
 16400  10DE  0085               	movwf	5
 16401  10DF  0800               	movf	0,w	;code access
 16402  10E0  00A5               	movwf	??_CC2500_InitPATable
 16403  10E1  0825               	movf	??_CC2500_InitPATable,w
 16404  10E2  00A6               	movwf	CC2500_InitPATable@temp
 16405                           
 16406                           ;CC2500_B1.c: 189: CC2500_WriteREG(0x3E, temp);
 16407  10E3  0826               	movf	CC2500_InitPATable@temp,w
 16408  10E4  00A5               	movwf	??_CC2500_InitPATable
 16409  10E5  0825               	movf	??_CC2500_InitPATable,w
 16410  10E6  00A2               	movwf	CC2500_WriteREG@value
 16411  10E7  303E               	movlw	62
 16412  10E8  3191  2195  3190   	fcall	_CC2500_WriteREG
 16413  10EB  3001               	movlw	1
 16414  10EC  0020               	movlb	0	; select bank0
 16415  10ED  00A5               	movwf	??_CC2500_InitPATable
 16416  10EE  0825               	movf	??_CC2500_InitPATable,w
 16417  10EF  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16418  10F0  28D4               	goto	L6
 16419  10F1                     __end_of_CC2500_InitPATable:	
 16420                           
 16421                           	psect	text116
 16422  1195                     __ptext116:	
 16423 ;; *************** function _CC2500_WriteREG *****************
 16424 ;; Defined at:
 16425 ;;		line 260 in file "../src/CC2500_B1.c"
 16426 ;; Parameters:    Size  Location     Type
 16427 ;;  w_addr          1    wreg     unsigned char 
 16428 ;;  value           1    2[BANK0 ] unsigned char 
 16429 ;; Auto vars:     Size  Location     Type
 16430 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16431 ;; Return value:  Size  Location     Type
 16432 ;;		None               void
 16433 ;; Registers used:
 16434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16435 ;; Tracked objects:
 16436 ;;		On entry : 0/0
 16437 ;;		On exit  : 0/0
 16438 ;;		Unchanged: 0/0
 16439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16440 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16442 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16443 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;Total ram usage:        3 bytes
 16445 ;; Hardware stack levels used:    1
 16446 ;; Hardware stack levels required when called:    6
 16447 ;; This function calls:
 16448 ;;		_CC2500_WriteByte
 16449 ;;		_Timeout_Counter
 16450 ;;		_set_TimeoutCleared
 16451 ;; This function is called by:
 16452 ;;		_CC2500_InitSetREG
 16453 ;;		_CC2500_InitPATable
 16454 ;; This function uses a non-reentrant model
 16455 ;;
 16456                           
 16457                           
 16458                           ;psect for function _CC2500_WriteREG
 16459  1195                     _CC2500_WriteREG:	
 16460                           
 16461                           ;incstack = 0
 16462                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16463                           ;CC2500_WriteREG@w_addr stored from wreg
 16464  1195  0020               	movlb	0	; select bank0
 16465  1196  00A4               	movwf	CC2500_WriteREG@w_addr
 16466                           
 16467                           ;CC2500_B1.c: 261: RC4 = 0;
 16468  1197  120E               	bcf	14,4	;volatile
 16469                           
 16470                           ;CC2500_B1.c: 262: SPI0Buffer = w_addr;
 16471  1198  0824               	movf	CC2500_WriteREG@w_addr,w
 16472  1199  00A3               	movwf	??_CC2500_WriteREG
 16473  119A  0823               	movf	??_CC2500_WriteREG,w
 16474  119B  0021               	movlb	1	; select bank1
 16475  119C  00D9               	movwf	_SPI0Buffer^(0+128)
 16476                           
 16477                           ;CC2500_B1.c: 263: while (RC2 == 1 && myMain.Timeout == 0) {
 16478  119D  29A1               	goto	l8438
 16479  119E                     l8436:	
 16480                           
 16481                           ;CC2500_B1.c: 264: Timeout_Counter();
 16482  119E  319F  2745  3191   	fcall	_Timeout_Counter
 16483  11A1                     l8438:	
 16484  11A1  0020               	movlb	0	; select bank0
 16485  11A2  1D0E               	btfss	14,2	;volatile
 16486  11A3  29A7               	goto	l8442
 16487  11A4  0021               	movlb	1	; select bank1
 16488  11A5  1D2F               	btfss	(_myMain^(0+128)+15),2
 16489  11A6  299E               	goto	l8436
 16490  11A7                     l8442:	
 16491                           
 16492                           ;CC2500_B1.c: 265: };
 16493                           ;CC2500_B1.c: 266: set_TimeoutCleared();
 16494  11A7  319D  253E  3191   	fcall	_set_TimeoutCleared
 16495                           
 16496                           ;CC2500_B1.c: 268: CC2500_WriteByte();
 16497  11AA  319F  279A  3191   	fcall	_CC2500_WriteByte
 16498                           
 16499                           ;CC2500_B1.c: 269: SPI0Buffer = value;
 16500  11AD  0020               	movlb	0	; select bank0
 16501  11AE  0822               	movf	CC2500_WriteREG@value,w
 16502  11AF  00A3               	movwf	??_CC2500_WriteREG
 16503  11B0  0823               	movf	??_CC2500_WriteREG,w
 16504  11B1  0021               	movlb	1	; select bank1
 16505  11B2  00D9               	movwf	_SPI0Buffer^(0+128)
 16506                           
 16507                           ;CC2500_B1.c: 270: CC2500_WriteByte();
 16508  11B3  319F  279A         	fcall	_CC2500_WriteByte
 16509                           
 16510                           ;CC2500_B1.c: 271: RC4 = 1;
 16511  11B5  0020               	movlb	0	; select bank0
 16512  11B6  160E               	bsf	14,4	;volatile
 16513  11B7  0008               	return
 16514  11B8                     __end_of_CC2500_WriteREG:	
 16515                           
 16516                           	psect	text117
 16517  1DF2                     __ptext117:	
 16518 ;; *************** function _CC2500_FrequencyCabr *****************
 16519 ;; Defined at:
 16520 ;;		line 210 in file "../src/CC2500_B1.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;		None
 16523 ;; Auto vars:     Size  Location     Type
 16524 ;;		None
 16525 ;; Return value:  Size  Location     Type
 16526 ;;		None               void
 16527 ;; Registers used:
 16528 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16538 ;;Total ram usage:        0 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    7
 16541 ;; This function calls:
 16542 ;;		_CC2500_WriteCommand
 16543 ;;		_DelayTime_1us
 16544 ;; This function is called by:
 16545 ;;		_CC2500_PowerOnInitial
 16546 ;; This function uses a non-reentrant model
 16547 ;;
 16548                           
 16549                           
 16550                           ;psect for function _CC2500_FrequencyCabr
 16551  1DF2                     _CC2500_FrequencyCabr:	
 16552                           
 16553                           ;CC2500_B1.c: 211: CC2500_WriteCommand(0x33);
 16554                           
 16555                           ;incstack = 0
 16556                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16557  1DF2  3033               	movlw	51
 16558  1DF3  319F  27CC  319D   	fcall	_CC2500_WriteCommand
 16559                           
 16560                           ;CC2500_B1.c: 212: DelayTime_1us(1000);
 16561  1DF6  30E8               	movlw	232
 16562  1DF7  0020               	movlb	0	; select bank0
 16563  1DF8  00A0               	movwf	DelayTime_1us@count
 16564  1DF9  3003               	movlw	3
 16565  1DFA  00A1               	movwf	DelayTime_1us@count+1
 16566  1DFB  3192  2200         	fcall	_DelayTime_1us
 16567  1DFD  0008               	return
 16568  1DFE                     __end_of_CC2500_FrequencyCabr:	
 16569                           
 16570                           	psect	text118
 16571  1200                     __ptext118:	
 16572 ;; *************** function _DelayTime_1us *****************
 16573 ;; Defined at:
 16574 ;;		line 329 in file "../src/CC2500_B1.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;  count           2    0[BANK0 ] int 
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;  j               2    4[BANK0 ] unsigned int 
 16579 ;;  i               2    2[BANK0 ] unsigned int 
 16580 ;; Return value:  Size  Location     Type
 16581 ;;		None               void
 16582 ;; Registers used:
 16583 ;;		wreg, status,2
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16589 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;Total ram usage:        6 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    5
 16596 ;; This function calls:
 16597 ;;		Nothing
 16598 ;; This function is called by:
 16599 ;;		_CC2500_PowerRST
 16600 ;;		_CC2500_FrequencyCabr
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           
 16605                           ;psect for function _DelayTime_1us
 16606  1200                     _DelayTime_1us:	
 16607                           
 16608                           ;CC2500_B1.c: 330: unsigned int i, j;
 16609                           ;CC2500_B1.c: 331: for (i = 1; i < count; i++)
 16610                           
 16611                           ;incstack = 0
 16612                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16613  1200  3001               	movlw	1
 16614  1201  0020               	movlb	0	; select bank0
 16615  1202  00A2               	movwf	DelayTime_1us@i
 16616  1203  3000               	movlw	0
 16617  1204  00A3               	movwf	DelayTime_1us@i+1
 16618  1205                     l366:	
 16619  1205  0821               	movf	DelayTime_1us@count+1,w
 16620  1206  0223               	subwf	DelayTime_1us@i+1,w
 16621  1207  1D03               	skipz
 16622  1208  2A0B               	goto	u8335
 16623  1209  0820               	movf	DelayTime_1us@count,w
 16624  120A  0222               	subwf	DelayTime_1us@i,w
 16625  120B                     u8335:	
 16626  120B  1803               	btfsc	3,0
 16627  120C  0008               	return
 16628                           
 16629                           ;CC2500_B1.c: 332: for (j = 0; j <= 1; j++);
 16630  120D  01A4               	clrf	DelayTime_1us@j
 16631  120E  01A5               	clrf	DelayTime_1us@j+1
 16632  120F  3000               	movlw	0
 16633  1210  0225               	subwf	DelayTime_1us@j+1,w
 16634  1211  3002               	movlw	2
 16635  1212  1903               	skipnz
 16636  1213  0224               	subwf	DelayTime_1us@j,w
 16637  1214  1803               	btfsc	3,0
 16638  1215  2A21               	goto	l8430
 16639  1216                     l8428:	
 16640  1216  3001               	movlw	1
 16641  1217  07A4               	addwf	DelayTime_1us@j,f
 16642  1218  3000               	movlw	0
 16643  1219  3DA5               	addwfc	DelayTime_1us@j+1,f
 16644  121A  3000               	movlw	0
 16645  121B  0225               	subwf	DelayTime_1us@j+1,w
 16646  121C  3002               	movlw	2
 16647  121D  1903               	skipnz
 16648  121E  0224               	subwf	DelayTime_1us@j,w
 16649  121F  1C03               	skipc
 16650  1220  2A16               	goto	l8428
 16651  1221                     l8430:	
 16652  1221  3001               	movlw	1
 16653  1222  07A2               	addwf	DelayTime_1us@i,f
 16654  1223  3000               	movlw	0
 16655  1224  3DA3               	addwfc	DelayTime_1us@i+1,f
 16656  1225  2A05               	goto	l366
 16657  1226                     __end_of_DelayTime_1us:	
 16658                           
 16659                           	psect	text119
 16660  1D22                     __ptext119:	
 16661 ;; *************** function _CC2500_ClearTXFIFO *****************
 16662 ;; Defined at:
 16663 ;;		line 196 in file "../src/CC2500_B1.c"
 16664 ;; Parameters:    Size  Location     Type
 16665 ;;		None
 16666 ;; Auto vars:     Size  Location     Type
 16667 ;;		None
 16668 ;; Return value:  Size  Location     Type
 16669 ;;		None               void
 16670 ;; Registers used:
 16671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16672 ;; Tracked objects:
 16673 ;;		On entry : 0/0
 16674 ;;		On exit  : 0/0
 16675 ;;		Unchanged: 0/0
 16676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16681 ;;Total ram usage:        0 bytes
 16682 ;; Hardware stack levels used:    1
 16683 ;; Hardware stack levels required when called:    7
 16684 ;; This function calls:
 16685 ;;		_CC2500_WriteCommand
 16686 ;; This function is called by:
 16687 ;;		_CC2500_PowerOnInitial
 16688 ;; This function uses a non-reentrant model
 16689 ;;
 16690                           
 16691                           
 16692                           ;psect for function _CC2500_ClearTXFIFO
 16693  1D22                     _CC2500_ClearTXFIFO:	
 16694                           
 16695                           ;CC2500_B1.c: 197: CC2500_WriteCommand(0x3B);
 16696                           
 16697                           ;incstack = 0
 16698                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16699  1D22  303B               	movlw	59
 16700  1D23  319F  27CC         	fcall	_CC2500_WriteCommand
 16701  1D25  0008               	return
 16702  1D26                     __end_of_CC2500_ClearTXFIFO:	
 16703                           
 16704                           	psect	text120
 16705  1D1E                     __ptext120:	
 16706 ;; *************** function _CC2500_ClearRXFIFO *****************
 16707 ;; Defined at:
 16708 ;;		line 203 in file "../src/CC2500_B1.c"
 16709 ;; Parameters:    Size  Location     Type
 16710 ;;		None
 16711 ;; Auto vars:     Size  Location     Type
 16712 ;;		None
 16713 ;; Return value:  Size  Location     Type
 16714 ;;		None               void
 16715 ;; Registers used:
 16716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16717 ;; Tracked objects:
 16718 ;;		On entry : 0/0
 16719 ;;		On exit  : 0/0
 16720 ;;		Unchanged: 0/0
 16721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;Total ram usage:        0 bytes
 16727 ;; Hardware stack levels used:    1
 16728 ;; Hardware stack levels required when called:    7
 16729 ;; This function calls:
 16730 ;;		_CC2500_WriteCommand
 16731 ;; This function is called by:
 16732 ;;		_CC2500_PowerOnInitial
 16733 ;; This function uses a non-reentrant model
 16734 ;;
 16735                           
 16736                           
 16737                           ;psect for function _CC2500_ClearRXFIFO
 16738  1D1E                     _CC2500_ClearRXFIFO:	
 16739                           
 16740                           ;CC2500_B1.c: 204: CC2500_WriteCommand(0x3A);
 16741                           
 16742                           ;incstack = 0
 16743                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16744  1D1E  303A               	movlw	58
 16745  1D1F  319F  27CC         	fcall	_CC2500_WriteCommand
 16746  1D21  0008               	return
 16747  1D22                     __end_of_CC2500_ClearRXFIFO:	
 16748                           
 16749                           	psect	text121
 16750  1FCC                     __ptext121:	
 16751 ;; *************** function _CC2500_WriteCommand *****************
 16752 ;; Defined at:
 16753 ;;		line 294 in file "../src/CC2500_B1.c"
 16754 ;; Parameters:    Size  Location     Type
 16755 ;;  command         1    wreg     unsigned char 
 16756 ;; Auto vars:     Size  Location     Type
 16757 ;;  command         1    3[BANK0 ] unsigned char 
 16758 ;; Return value:  Size  Location     Type
 16759 ;;		None               void
 16760 ;; Registers used:
 16761 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16762 ;; Tracked objects:
 16763 ;;		On entry : 0/0
 16764 ;;		On exit  : 0/0
 16765 ;;		Unchanged: 0/0
 16766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16771 ;;Total ram usage:        2 bytes
 16772 ;; Hardware stack levels used:    1
 16773 ;; Hardware stack levels required when called:    6
 16774 ;; This function calls:
 16775 ;;		_CC2500_WriteByte
 16776 ;;		_Timeout_Counter
 16777 ;;		_set_TimeoutCleared
 16778 ;; This function is called by:
 16779 ;;		_CC2500_TxData
 16780 ;;		_CC2500_ClearTXFIFO
 16781 ;;		_CC2500_ClearRXFIFO
 16782 ;;		_CC2500_FrequencyCabr
 16783 ;;		_CC2500_SIDLEMode
 16784 ;;		_setRF_Main
 16785 ;;		_RF_RxDisable
 16786 ;; This function uses a non-reentrant model
 16787 ;;
 16788                           
 16789                           
 16790                           ;psect for function _CC2500_WriteCommand
 16791  1FCC                     _CC2500_WriteCommand:	
 16792                           
 16793                           ;incstack = 0
 16794                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16795                           ;CC2500_WriteCommand@command stored from wreg
 16796  1FCC  0020               	movlb	0	; select bank0
 16797  1FCD  00A3               	movwf	CC2500_WriteCommand@command
 16798                           
 16799                           ;CC2500_B1.c: 295: RC4 = 0;
 16800  1FCE  120E               	bcf	14,4	;volatile
 16801                           
 16802                           ;CC2500_B1.c: 296: SPI0Buffer = command;
 16803  1FCF  0823               	movf	CC2500_WriteCommand@command,w
 16804  1FD0  00A2               	movwf	??_CC2500_WriteCommand
 16805  1FD1  0822               	movf	??_CC2500_WriteCommand,w
 16806  1FD2  0021               	movlb	1	; select bank1
 16807  1FD3  00D9               	movwf	_SPI0Buffer^(0+128)
 16808                           
 16809                           ;CC2500_B1.c: 298: while (RC2 == 1 && myMain.Timeout == 0) {
 16810  1FD4  2FD8               	goto	l8184
 16811  1FD5                     l8182:	
 16812                           
 16813                           ;CC2500_B1.c: 299: Timeout_Counter();
 16814  1FD5  319F  2745  319F   	fcall	_Timeout_Counter
 16815  1FD8                     l8184:	
 16816  1FD8  0020               	movlb	0	; select bank0
 16817  1FD9  1D0E               	btfss	14,2	;volatile
 16818  1FDA  2FDE               	goto	l8188
 16819  1FDB  0021               	movlb	1	; select bank1
 16820  1FDC  1D2F               	btfss	(_myMain^(0+128)+15),2
 16821  1FDD  2FD5               	goto	l8182
 16822  1FDE                     l8188:	
 16823                           
 16824                           ;CC2500_B1.c: 300: };
 16825                           ;CC2500_B1.c: 301: set_TimeoutCleared();
 16826  1FDE  319D  253E  319F   	fcall	_set_TimeoutCleared
 16827                           
 16828                           ;CC2500_B1.c: 303: CC2500_WriteByte();
 16829  1FE1  319F  279A         	fcall	_CC2500_WriteByte
 16830                           
 16831                           ;CC2500_B1.c: 304: RC4 = 1;
 16832  1FE3  0020               	movlb	0	; select bank0
 16833  1FE4  160E               	bsf	14,4	;volatile
 16834  1FE5  0008               	return
 16835  1FE6                     __end_of_CC2500_WriteCommand:	
 16836                           
 16837                           	psect	text122
 16838  1D3E                     __ptext122:	
 16839 ;; *************** function _set_TimeoutCleared *****************
 16840 ;; Defined at:
 16841 ;;		line 217 in file "../src/main_B1.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;		None
 16844 ;; Auto vars:     Size  Location     Type
 16845 ;;		None
 16846 ;; Return value:  Size  Location     Type
 16847 ;;		None               void
 16848 ;; Registers used:
 16849 ;;		status,2
 16850 ;; Tracked objects:
 16851 ;;		On entry : 0/0
 16852 ;;		On exit  : 0/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;Total ram usage:        0 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:    5
 16862 ;; This function calls:
 16863 ;;		Nothing
 16864 ;; This function is called by:
 16865 ;;		_CC2500_TxData
 16866 ;;		_CC2500_RxData
 16867 ;;		_CC2500_PowerRST
 16868 ;;		_CC2500_WriteREG
 16869 ;;		_CC2500_WriteCommand
 16870 ;;		_CC2500_ReadStatus
 16871 ;;		_getAD
 16872 ;;		_TouchPower
 16873 ;;		_CC2500_ReadREG
 16874 ;; This function uses a non-reentrant model
 16875 ;;
 16876                           
 16877                           
 16878                           ;psect for function _set_TimeoutCleared
 16879  1D3E                     _set_TimeoutCleared:	
 16880                           
 16881                           ;main_B1.c: 218: myMain.Timeout = 0;
 16882                           
 16883                           ;incstack = 0
 16884                           ; Regs used in _set_TimeoutCleared: [status,2]
 16885  1D3E  0021               	movlb	1	; select bank1
 16886  1D3F  112F               	bcf	(_myMain^(0+128)+15),2
 16887                           
 16888                           ;main_B1.c: 219: myMain.Timeout_Counter = 0;
 16889  1D40  01B0               	clrf	(_myMain^(0+128)+16)
 16890  1D41  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16891  1D42  0008               	return
 16892  1D43                     __end_of_set_TimeoutCleared:	
 16893                           
 16894                           	psect	text123
 16895  1F45                     __ptext123:	
 16896 ;; *************** function _Timeout_Counter *****************
 16897 ;; Defined at:
 16898 ;;		line 208 in file "../src/main_B1.c"
 16899 ;; Parameters:    Size  Location     Type
 16900 ;;		None
 16901 ;; Auto vars:     Size  Location     Type
 16902 ;;		None
 16903 ;; Return value:  Size  Location     Type
 16904 ;;		None               void
 16905 ;; Registers used:
 16906 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16907 ;; Tracked objects:
 16908 ;;		On entry : 0/0
 16909 ;;		On exit  : 0/0
 16910 ;;		Unchanged: 0/0
 16911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16916 ;;Total ram usage:        0 bytes
 16917 ;; Hardware stack levels used:    1
 16918 ;; Hardware stack levels required when called:    5
 16919 ;; This function calls:
 16920 ;;		Nothing
 16921 ;; This function is called by:
 16922 ;;		_CC2500_TxData
 16923 ;;		_CC2500_RxData
 16924 ;;		_CC2500_PowerRST
 16925 ;;		_CC2500_WriteREG
 16926 ;;		_CC2500_WriteCommand
 16927 ;;		_CC2500_ReadStatus
 16928 ;;		_getAD
 16929 ;;		_TouchPower
 16930 ;;		_CC2500_ReadREG
 16931 ;; This function uses a non-reentrant model
 16932 ;;
 16933                           
 16934                           
 16935                           ;psect for function _Timeout_Counter
 16936  1F45                     _Timeout_Counter:	
 16937                           
 16938                           ;main_B1.c: 209: myMain.Timeout_Counter++;
 16939                           
 16940                           ;incstack = 0
 16941                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16942  1F45  3001               	movlw	1
 16943  1F46  0021               	movlb	1	; select bank1
 16944  1F47  07B0               	addwf	(_myMain^(0+128)+16),f
 16945  1F48  3000               	movlw	0
 16946  1F49  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16947                           
 16948                           ;main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 16949  1F4A  3010               	movlw	16
 16950  1F4B  3EA0               	addlw	_myMain& (0+255)
 16951  1F4C  0086               	movwf	6
 16952  1F4D  0187               	clrf	7
 16953  1F4E  3F40               	moviw [0]fsr1
 16954  1F4F  3A10               	xorlw	16
 16955  1F50  1D03               	skipz
 16956  1F51  2F54               	goto	u7875
 16957  1F52  3F41               	moviw [1]fsr1
 16958  1F53  3A27               	xorlw	39
 16959  1F54                     u7875:	
 16960  1F54  1D03               	skipz
 16961  1F55  0008               	return
 16962                           
 16963                           ;main_B1.c: 211: myMain.Timeout_Counter = 0;
 16964  1F56  01B0               	clrf	(_myMain^(0+128)+16)
 16965  1F57  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16966                           
 16967                           ;main_B1.c: 212: myMain.Timeout = 1;
 16968  1F58  152F               	bsf	(_myMain^(0+128)+15),2
 16969  1F59  0008               	return
 16970  1F5A                     __end_of_Timeout_Counter:	
 16971                           
 16972                           	psect	text124
 16973  1F9A                     __ptext124:	
 16974 ;; *************** function _CC2500_WriteByte *****************
 16975 ;; Defined at:
 16976 ;;		line 228 in file "../src/CC2500_B1.c"
 16977 ;; Parameters:    Size  Location     Type
 16978 ;;		None
 16979 ;; Auto vars:     Size  Location     Type
 16980 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16981 ;; Return value:  Size  Location     Type
 16982 ;;		None               void
 16983 ;; Registers used:
 16984 ;;		wreg, status,2, status,0
 16985 ;; Tracked objects:
 16986 ;;		On entry : 0/0
 16987 ;;		On exit  : 0/0
 16988 ;;		Unchanged: 0/0
 16989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16993 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16994 ;;Total ram usage:        2 bytes
 16995 ;; Hardware stack levels used:    1
 16996 ;; Hardware stack levels required when called:    5
 16997 ;; This function calls:
 16998 ;;		Nothing
 16999 ;; This function is called by:
 17000 ;;		_CC2500_TxData
 17001 ;;		_CC2500_RxData
 17002 ;;		_CC2500_PowerRST
 17003 ;;		_CC2500_WriteREG
 17004 ;;		_CC2500_WriteCommand
 17005 ;;		_CC2500_ReadStatus
 17006 ;;		_CC2500_ReadREG
 17007 ;; This function uses a non-reentrant model
 17008 ;;
 17009                           
 17010                           
 17011                           ;psect for function _CC2500_WriteByte
 17012  1F9A                     _CC2500_WriteByte:	
 17013                           
 17014                           ;CC2500_B1.c: 229: unsigned char loop_a;
 17015                           ;CC2500_B1.c: 230: for (loop_a = 0; loop_a < 8; loop_a++) {
 17016                           
 17017                           ;incstack = 0
 17018                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 17019  1F9A  0020               	movlb	0	; select bank0
 17020  1F9B  01A1               	clrf	CC2500_WriteByte@loop_a
 17021  1F9C                     L7:	
 17022  1F9C  3008               	movlw	8
 17023  1F9D  0221               	subwf	CC2500_WriteByte@loop_a,w
 17024  1F9E  1803               	btfsc	3,0
 17025  1F9F  0008               	return
 17026                           
 17027                           ;CC2500_B1.c: 231: if (SPI0Buffer & 0x80)
 17028  1FA0  0021               	movlb	1	; select bank1
 17029  1FA1  1FD9               	btfss	_SPI0Buffer^(0+128),7
 17030  1FA2  2FA6               	goto	l322
 17031                           
 17032                           ;CC2500_B1.c: 232: RC0 = 1;
 17033  1FA3  0020               	movlb	0	; select bank0
 17034  1FA4  140E               	bsf	14,0	;volatile
 17035  1FA5  2FA8               	goto	l323
 17036  1FA6                     l322:	
 17037                           
 17038                           ;CC2500_B1.c: 233: else
 17039                           ;CC2500_B1.c: 234: RC0 = 0;
 17040  1FA6  0020               	movlb	0	; select bank0
 17041  1FA7  100E               	bcf	14,0	;volatile
 17042  1FA8                     l323:	
 17043                           
 17044                           ;CC2500_B1.c: 235: RC1 = 1;
 17045  1FA8  148E               	bsf	14,1	;volatile
 17046                           
 17047                           ;CC2500_B1.c: 236: SPI0Buffer <<= 1;
 17048  1FA9  1003               	clrc
 17049  1FAA  0021               	movlb	1	; select bank1
 17050  1FAB  0DD9               	rlf	_SPI0Buffer^(0+128),f
 17051                           
 17052                           ;CC2500_B1.c: 237: RC1 = 0;
 17053  1FAC  0020               	movlb	0	; select bank0
 17054  1FAD  108E               	bcf	14,1	;volatile
 17055  1FAE  3001               	movlw	1
 17056  1FAF  00A0               	movwf	??_CC2500_WriteByte
 17057  1FB0  0820               	movf	??_CC2500_WriteByte,w
 17058  1FB1  07A1               	addwf	CC2500_WriteByte@loop_a,f
 17059  1FB2  2F9C               	goto	L7
 17060  1FB3                     __end_of_CC2500_WriteByte:	
 17061                           
 17062                           	psect	text125
 17063  16B3                     __ptext125:	
 17064 ;; *************** function _Buzzer_Main *****************
 17065 ;; Defined at:
 17066 ;;		line 46 in file "../src/Buzzer_B1.c"
 17067 ;; Parameters:    Size  Location     Type
 17068 ;;		None
 17069 ;; Auto vars:     Size  Location     Type
 17070 ;;		None
 17071 ;; Return value:  Size  Location     Type
 17072 ;;		None               void
 17073 ;; Registers used:
 17074 ;;		wreg, status,2, status,0
 17075 ;; Tracked objects:
 17076 ;;		On entry : 0/0
 17077 ;;		On exit  : 0/0
 17078 ;;		Unchanged: 0/0
 17079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;Total ram usage:        1 bytes
 17085 ;; Hardware stack levels used:    1
 17086 ;; Hardware stack levels required when called:    5
 17087 ;; This function calls:
 17088 ;;		Nothing
 17089 ;; This function is called by:
 17090 ;;		_main
 17091 ;; This function uses a non-reentrant model
 17092 ;;
 17093                           
 17094                           
 17095                           ;psect for function _Buzzer_Main
 17096  16B3                     _Buzzer_Main:	
 17097                           
 17098                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17099                           
 17100                           ;incstack = 0
 17101                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17102  16B3  0021               	movlb	1	; select bank1
 17103  16B4  1CB2               	btfss	_Buz1^(0+128),1
 17104  16B5  0008               	return
 17105                           
 17106                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17107  16B6  3001               	movlw	1
 17108  16B7  07B3               	addwf	(_Buz1^(0+128)+1),f
 17109  16B8  3000               	movlw	0
 17110  16B9  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 17111                           
 17112                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17113  16BA  0839               	movf	((_Buz1+1)^(0+128)+6),w
 17114  16BB  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 17115  16BC  1D03               	skipz
 17116  16BD  2EC0               	goto	u9705
 17117  16BE  0838               	movf	(_Buz1^(0+128)+6),w
 17118  16BF  0233               	subwf	(_Buz1^(0+128)+1),w
 17119  16C0                     u9705:	
 17120  16C0  1C03               	skipc
 17121  16C1  0008               	return
 17122                           
 17123                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17124  16C2  01B3               	clrf	(_Buz1^(0+128)+1)
 17125  16C3  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 17126                           
 17127                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17128  16C4  12B2               	bcf	_Buz1^(0+128),5
 17129  16C5  0020               	movlb	0	; select bank0
 17130  16C6  1D8D               	btfss	13,3	;volatile
 17131  16C7  2ECA               	goto	l9306
 17132  16C8  0021               	movlb	1	; select bank1
 17133  16C9  16B2               	bsf	_Buz1^(0+128),5
 17134  16CA                     l9306:	
 17135                           
 17136                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17137  16CA  0021               	movlb	1	; select bank1
 17138  16CB  1AB2               	btfsc	_Buz1^(0+128),5
 17139  16CC  2EF6               	goto	l102
 17140                           
 17141                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17142  16CD  08B5               	movf	(_Buz1^(0+128)+3),f
 17143  16CE  1D03               	skipz
 17144  16CF  2EF2               	goto	l103
 17145                           
 17146                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17147  16D0  1DB2               	btfss	_Buz1^(0+128),3
 17148  16D1  2EE0               	goto	l104
 17149                           
 17150                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17151  16D2  11B2               	bcf	_Buz1^(0+128),3
 17152                           
 17153                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17154  16D3  0836               	movf	(_Buz1^(0+128)+4),w
 17155  16D4  0020               	movlb	0	; select bank0
 17156  16D5  00A0               	movwf	??_Buzzer_Main
 17157  16D6  0820               	movf	??_Buzzer_Main,w
 17158  16D7  0021               	movlb	1	; select bank1
 17159  16D8  00B5               	movwf	(_Buz1^(0+128)+3)
 17160                           
 17161                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17162  16D9  083B               	movf	((_Buz1+1)^(0+128)+8),w
 17163  16DA  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17164  16DB  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17165  16DC  083A               	movf	(_Buz1^(0+128)+8),w
 17166  16DD  01B8               	clrf	(_Buz1^(0+128)+6)
 17167  16DE  07B8               	addwf	(_Buz1^(0+128)+6),f
 17168                           
 17169                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17170  16DF  0008               	return
 17171  16E0                     l104:	
 17172  16E0  1E32               	btfss	_Buz1^(0+128),4
 17173  16E1  2EF0               	goto	l106
 17174                           
 17175                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17176  16E2  1232               	bcf	_Buz1^(0+128),4
 17177                           
 17178                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17179  16E3  0837               	movf	(_Buz1^(0+128)+5),w
 17180  16E4  0020               	movlb	0	; select bank0
 17181  16E5  00A0               	movwf	??_Buzzer_Main
 17182  16E6  0820               	movf	??_Buzzer_Main,w
 17183  16E7  0021               	movlb	1	; select bank1
 17184  16E8  00B5               	movwf	(_Buz1^(0+128)+3)
 17185                           
 17186                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17187  16E9  083D               	movf	((_Buz1+1)^(0+128)+10),w
 17188  16EA  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 17189  16EB  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 17190  16EC  083C               	movf	(_Buz1^(0+128)+10),w
 17191  16ED  01B8               	clrf	(_Buz1^(0+128)+6)
 17192  16EE  07B8               	addwf	(_Buz1^(0+128)+6),f
 17193                           
 17194                           ;Buzzer_B1.c: 62: } else {
 17195  16EF  0008               	return
 17196  16F0                     l106:	
 17197                           
 17198                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17199  16F0  10B2               	bcf	_Buz1^(0+128),1
 17200                           
 17201                           ;Buzzer_B1.c: 64: }
 17202                           ;Buzzer_B1.c: 65: } else {
 17203  16F1  0008               	return
 17204  16F2                     l103:	
 17205                           
 17206                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17207  16F2  16B2               	bsf	_Buz1^(0+128),5
 17208                           
 17209                           ;Buzzer_B1.c: 68: RB3 = 1;
 17210  16F3  0020               	movlb	0	; select bank0
 17211  16F4  158D               	bsf	13,3	;volatile
 17212                           
 17213                           ;Buzzer_B1.c: 69: }
 17214                           ;Buzzer_B1.c: 70: } else {
 17215  16F5  0008               	return
 17216  16F6                     l102:	
 17217                           
 17218                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17219  16F6  12B2               	bcf	_Buz1^(0+128),5
 17220                           
 17221                           ;Buzzer_B1.c: 73: RB3 = 0;
 17222  16F7  0020               	movlb	0	; select bank0
 17223  16F8  118D               	bcf	13,3	;volatile
 17224                           
 17225                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17226  16F9  3001               	movlw	1
 17227  16FA  0021               	movlb	1	; select bank1
 17228  16FB  02B5               	subwf	(_Buz1^(0+128)+3),f
 17229  16FC  0008               	return
 17230  16FD                     __end_of_Buzzer_Main:	
 17231                           
 17232                           	psect	text126
 17233  1D02                     __ptext126:	
 17234 ;; *************** function _Buzzer_Initialization *****************
 17235 ;; Defined at:
 17236 ;;		line 11 in file "../src/Buzzer_B1.c"
 17237 ;; Parameters:    Size  Location     Type
 17238 ;;		None
 17239 ;; Auto vars:     Size  Location     Type
 17240 ;;		None
 17241 ;; Return value:  Size  Location     Type
 17242 ;;		None               void
 17243 ;; Registers used:
 17244 ;;		None
 17245 ;; Tracked objects:
 17246 ;;		On entry : 0/0
 17247 ;;		On exit  : 0/0
 17248 ;;		Unchanged: 0/0
 17249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17254 ;;Total ram usage:        0 bytes
 17255 ;; Hardware stack levels used:    1
 17256 ;; Hardware stack levels required when called:    5
 17257 ;; This function calls:
 17258 ;;		Nothing
 17259 ;; This function is called by:
 17260 ;;		_main
 17261 ;; This function uses a non-reentrant model
 17262 ;;
 17263                           
 17264                           
 17265                           ;psect for function _Buzzer_Initialization
 17266  1D02                     _Buzzer_Initialization:	
 17267                           
 17268                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17269                           
 17270                           ;incstack = 0
 17271                           ; Regs used in _Buzzer_Initialization: []
 17272  1D02  0021               	movlb	1	; select bank1
 17273  1D03  1432               	bsf	_Buz1^(0+128),0
 17274  1D04  0008               	return
 17275  1D05                     __end_of_Buzzer_Initialization:	
 17276                           
 17277                           	psect	intentry
 17278  0004                     __pintentry:	
 17279 ;; *************** function _ISR *****************
 17280 ;; Defined at:
 17281 ;;		line 107 in file "../src/MCU_B1.c"
 17282 ;; Parameters:    Size  Location     Type
 17283 ;;		None
 17284 ;; Auto vars:     Size  Location     Type
 17285 ;;		None
 17286 ;; Return value:  Size  Location     Type
 17287 ;;		None               void
 17288 ;; Registers used:
 17289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17290 ;; Tracked objects:
 17291 ;;		On entry : 0/0
 17292 ;;		On exit  : 0/0
 17293 ;;		Unchanged: 0/0
 17294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17299 ;;Total ram usage:        1 bytes
 17300 ;; Hardware stack levels used:    1
 17301 ;; Hardware stack levels required when called:    4
 17302 ;; This function calls:
 17303 ;;		_IOC_ISR
 17304 ;;		_TMR0_ISR
 17305 ;; This function is called by:
 17306 ;;		Interrupt level 1
 17307 ;; This function uses a non-reentrant model
 17308 ;;
 17309                           
 17310  0004                     _ISR:	
 17311                           
 17312                           ;incstack = 0
 17313                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17314  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17315  0005  3180               	pagesel	$
 17316  0006  0020               	movlb	0	; select bank0
 17317  0007  087F               	movf	127,w
 17318  0008  00F5               	movwf	??_ISR
 17319                           
 17320                           ;MCU_B1.c: 109: IOC_ISR();
 17321  0009  319E  2622  3180   	fcall	_IOC_ISR
 17322                           
 17323                           ;MCU_B1.c: 111: TMR0_ISR();
 17324  000C  3191  2172         	fcall	_TMR0_ISR
 17325  000E  0875               	movf	??_ISR,w
 17326  000F  0020               	movlb	0	; select bank0
 17327  0010  00FF               	movwf	127
 17328  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17329  0012  0009               	retfie
 17330  0013                     __end_of_ISR:	
 17331                           
 17332                           	psect	text128
 17333  1172                     __ptext128:	
 17334 ;; *************** function _TMR0_ISR *****************
 17335 ;; Defined at:
 17336 ;;		line 135 in file "../src/MCU_B1.c"
 17337 ;; Parameters:    Size  Location     Type
 17338 ;;		None
 17339 ;; Auto vars:     Size  Location     Type
 17340 ;;		None
 17341 ;; Return value:  Size  Location     Type
 17342 ;;		None               void
 17343 ;; Registers used:
 17344 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17345 ;; Tracked objects:
 17346 ;;		On entry : 0/0
 17347 ;;		On exit  : 0/0
 17348 ;;		Unchanged: 0/0
 17349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17354 ;;Total ram usage:        0 bytes
 17355 ;; Hardware stack levels used:    1
 17356 ;; Hardware stack levels required when called:    2
 17357 ;; This function calls:
 17358 ;;		_setDimmerLights_IntrControl
 17359 ;; This function is called by:
 17360 ;;		_ISR
 17361 ;; This function uses a non-reentrant model
 17362 ;;
 17363                           
 17364                           
 17365                           ;psect for function _TMR0_ISR
 17366  1172                     _TMR0_ISR:	
 17367                           
 17368                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 17369                           
 17370                           ;incstack = 0
 17371                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17372  1172  1E8B               	btfss	11,5	;volatile
 17373  1173  0008               	return
 17374  1174  1D0B               	btfss	11,2	;volatile
 17375  1175  0008               	return
 17376                           
 17377                           ;MCU_B1.c: 138: TMR0 = (256-190);
 17378  1176  3042               	movlw	66
 17379  1177  0020               	movlb	0	; select bank0
 17380  1178  0095               	movwf	21	;volatile
 17381                           
 17382                           ;MCU_B1.c: 139: TMR0IF = 0;
 17383  1179  110B               	bcf	11,2	;volatile
 17384                           
 17385                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 17386  117A  3001               	movlw	1
 17387  117B  3180  2043  3191   	fcall	_setDimmerLights_IntrControl
 17388                           
 17389                           ;MCU_B1.c: 160: Timer0.Count++;
 17390  117E  3001               	movlw	1
 17391  117F  0022               	movlb	2	; select bank2
 17392  1180  07B6               	addwf	(_Timer0^(0+256)+1),f
 17393  1181  3000               	movlw	0
 17394  1182  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 17395                           
 17396                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 17397  1183  3001               	movlw	1
 17398  1184  3E35               	addlw	_Timer0& (0+255)
 17399  1185  0086               	movwf	6
 17400  1186  3001               	movlw	1	; select bank2/3
 17401  1187  0087               	movwf	7
 17402  1188  3F40               	moviw [0]fsr1
 17403  1189  3A64               	xorlw	100
 17404  118A  1D03               	skipz
 17405  118B  298E               	goto	u706_25
 17406  118C  3F41               	moviw [1]fsr1
 17407  118D  3A00               	xorlw	0
 17408  118E                     u706_25:	
 17409  118E  1D03               	skipz
 17410  118F  0008               	return
 17411                           
 17412                           ;MCU_B1.c: 162: Timer0.Count = 0;
 17413  1190  01B6               	clrf	(_Timer0^(0+256)+1)
 17414  1191  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 17415                           
 17416                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 17417  1192  0021               	movlb	1	; select bank1
 17418  1193  14A0               	bsf	_myMain^(0+128),1
 17419  1194  0008               	return
 17420  1195                     __end_of_TMR0_ISR:	
 17421                           
 17422                           	psect	text129
 17423  0043                     __ptext129:	
 17424 ;; *************** function _setDimmerLights_IntrControl *****************
 17425 ;; Defined at:
 17426 ;;		line 95 in file "../src/Dimmer_B1.c"
 17427 ;; Parameters:    Size  Location     Type
 17428 ;;  lights          1    wreg     unsigned char 
 17429 ;; Auto vars:     Size  Location     Type
 17430 ;;  lights          1    4[COMMON] unsigned char 
 17431 ;; Return value:  Size  Location     Type
 17432 ;;		None               void
 17433 ;; Registers used:
 17434 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17435 ;; Tracked objects:
 17436 ;;		On entry : 0/0
 17437 ;;		On exit  : 0/0
 17438 ;;		Unchanged: 0/0
 17439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17441 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17442 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17443 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17444 ;;Total ram usage:        3 bytes
 17445 ;; Hardware stack levels used:    1
 17446 ;; Hardware stack levels required when called:    1
 17447 ;; This function calls:
 17448 ;;		_DimmerIntrPointSelect
 17449 ;; This function is called by:
 17450 ;;		_TMR0_ISR
 17451 ;; This function uses a non-reentrant model
 17452 ;;
 17453                           
 17454                           
 17455                           ;psect for function _setDimmerLights_IntrControl
 17456  0043                     _setDimmerLights_IntrControl:	
 17457                           
 17458                           ;incstack = 0
 17459                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17460                           ;setDimmerLights_IntrControl@lights stored from wreg
 17461  0043  00F4               	movwf	setDimmerLights_IntrControl@lights
 17462                           
 17463                           ;Dimmer_B1.c: 97: DimmerIntrPointSelect(lights);
 17464  0044  0874               	movf	setDimmerLights_IntrControl@lights,w
 17465  0045  319D  259D  3180   	fcall	_DimmerIntrPointSelect
 17466                           
 17467                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->GO == 1) {
 17468  0048  0878               	movf	_DimmerLightsIntr,w
 17469  0049  0086               	movwf	6
 17470  004A  3001               	movlw	1	; select bank2/3
 17471  004B  0087               	movwf	7
 17472  004C  1C01               	btfss	1,0
 17473  004D  2899               	goto	i1l6726
 17474                           
 17475                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Count++;
 17476  004E  3001               	movlw	1
 17477  004F  00F2               	movwf	??_setDimmerLights_IntrControl
 17478  0050  0878               	movf	_DimmerLightsIntr,w
 17479  0051  3E03               	addlw	3
 17480  0052  0086               	movwf	6
 17481  0053  3001               	movlw	1	; select bank2/3
 17482  0054  0087               	movwf	7
 17483  0055  0872               	movf	??_setDimmerLights_IntrControl,w
 17484  0056  0781               	addwf	1,f
 17485                           
 17486                           ;Dimmer_B1.c: 100: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er->Correction)) {
 17487  0057  0877               	movf	_Dimmer,w
 17488  0058  3E02               	addlw	2
 17489  0059  0086               	movwf	6
 17490  005A  3001               	movlw	1	; select bank2/3
 17491  005B  0087               	movwf	7
 17492  005C  0878               	movf	_DimmerLightsIntr,w
 17493  005D  3E04               	addlw	4
 17494  005E  0084               	movwf	4
 17495  005F  3001               	movlw	1	; select bank2/3
 17496  0060  0085               	movwf	5
 17497  0061  0800               	movf	0,w
 17498  0062  0701               	addwf	1,w
 17499  0063  00F2               	movwf	??_setDimmerLights_IntrControl
 17500  0064  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17501  0065  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 17502  0066  0878               	movf	_DimmerLightsIntr,w
 17503  0067  3E03               	addlw	3
 17504  0068  0086               	movwf	6
 17505  0069  3001               	movlw	1	; select bank2/3
 17506  006A  0087               	movwf	7
 17507  006B  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17508  006C  3A80               	xorlw	128
 17509  006D  3C80               	sublw	128
 17510  006E  1D03               	skipz
 17511  006F  2872               	goto	u582_25
 17512  0070  0872               	movf	??_setDimmerLights_IntrControl,w
 17513  0071  0201               	subwf	1,w
 17514  0072                     u582_25:	
 17515  0072  1C03               	skipc
 17516  0073  299D               	goto	i1l6784
 17517                           
 17518                           ;Dimmer_B1.c: 101: DimmerLightsIntr->Count = 0;
 17519  0074  0878               	movf	_DimmerLightsIntr,w
 17520  0075  3E03               	addlw	3
 17521  0076  0086               	movwf	6
 17522  0077  3001               	movlw	1	; select bank2/3
 17523  0078  0087               	movwf	7
 17524  0079  0181               	clrf	1
 17525                           
 17526                           ;Dimmer_B1.c: 102: DimmerLightsIntr->GO = 0;
 17527  007A  0878               	movf	_DimmerLightsIntr,w
 17528  007B  0086               	movwf	6
 17529  007C  3001               	movlw	1	; select bank2/3
 17530  007D  0087               	movwf	7
 17531  007E  1001               	bcf	1,0
 17532                           
 17533                           ;Dimmer_B1.c: 104: if (DimmerLightsIntr->StatusFlag == 1) {
 17534  007F  0878               	movf	_DimmerLightsIntr,w
 17535  0080  0086               	movwf	6
 17536  0081  3001               	movlw	1	; select bank2/3
 17537  0082  0087               	movwf	7
 17538  0083  1F01               	btfss	1,6
 17539  0084  299D               	goto	i1l6784
 17540                           
 17541                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Flag = 1;
 17542  0085  0878               	movf	_DimmerLightsIntr,w
 17543  0086  3E08               	addlw	8
 17544  0087  0086               	movwf	6
 17545  0088  3001               	movlw	1	; select bank2/3
 17546  0089  0087               	movwf	7
 17547  008A  1401               	bsf	1,0
 17548                           
 17549                           ;Dimmer_B1.c: 106: DimmerLightsIntr->Triac = 1;
 17550  008B  0878               	movf	_DimmerLightsIntr,w
 17551  008C  3E08               	addlw	8
 17552  008D  0086               	movwf	6
 17553  008E  3001               	movlw	1	; select bank2/3
 17554  008F  0087               	movwf	7
 17555  0090  1681               	bsf	1,5
 17556                           
 17557                           ;Dimmer_B1.c: 108: if (lights == 1) {
 17558  0091  0874               	movf	setDimmerLights_IntrControl@lights,w
 17559  0092  3A01               	xorlw	1
 17560  0093  1D03               	skipz
 17561  0094  299D               	goto	i1l6784
 17562                           
 17563                           ;Dimmer_B1.c: 109: RA7 = 1;
 17564  0095  0020               	movlb	0	; select bank0
 17565  0096  178C               	bsf	12,7	;volatile
 17566                           
 17567                           ;Dimmer_B1.c: 110: RB4=1;
 17568  0097  160D               	bsf	13,4	;volatile
 17569                           
 17570                           ;Dimmer_B1.c: 111: }
 17571                           ;Dimmer_B1.c: 123: }
 17572                           ;Dimmer_B1.c: 124: }
 17573                           ;Dimmer_B1.c: 125: } else {
 17574  0098  299D               	goto	i1l6784
 17575  0099                     i1l6726:	
 17576                           
 17577                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->Flag == 1) {
 17578  0099  0878               	movf	_DimmerLightsIntr,w
 17579  009A  3E08               	addlw	8
 17580  009B  0086               	movwf	6
 17581  009C  3001               	movlw	1	; select bank2/3
 17582  009D  0087               	movwf	7
 17583  009E  1C01               	btfss	1,0
 17584  009F  299D               	goto	i1l6784
 17585                           
 17586                           ;Dimmer_B1.c: 127: DimmerLightsIntr->Flag = 0;
 17587  00A0  0878               	movf	_DimmerLightsIntr,w
 17588  00A1  3E08               	addlw	8
 17589  00A2  0086               	movwf	6
 17590  00A3  3001               	movlw	1	; select bank2/3
 17591  00A4  0087               	movwf	7
 17592  00A5  1001               	bcf	1,0
 17593                           
 17594                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->Signal == 1) {
 17595  00A6  0878               	movf	_DimmerLightsIntr,w
 17596  00A7  0086               	movwf	6
 17597  00A8  3001               	movlw	1	; select bank2/3
 17598  00A9  0087               	movwf	7
 17599  00AA  1C81               	btfss	1,1
 17600  00AB  299D               	goto	i1l6784
 17601                           
 17602                           ;Dimmer_B1.c: 129: DimmerLightsIntr->DimmingTime++;
 17603  00AC  3001               	movlw	1
 17604  00AD  00F2               	movwf	??_setDimmerLights_IntrControl
 17605  00AE  0A78               	incf	_DimmerLightsIntr,w
 17606  00AF  0086               	movwf	6
 17607  00B0  3001               	movlw	1	; select bank2/3
 17608  00B1  0087               	movwf	7
 17609  00B2  0872               	movf	??_setDimmerLights_IntrControl,w
 17610  00B3  0781               	addwf	1,f
 17611                           
 17612                           ;Dimmer_B1.c: 130: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17613  00B4  0A78               	incf	_DimmerLightsIntr,w
 17614  00B5  0086               	movwf	6
 17615  00B6  3001               	movlw	1	; select bank2/3
 17616  00B7  0087               	movwf	7
 17617  00B8  0878               	movf	_DimmerLightsIntr,w
 17618  00B9  3E02               	addlw	2
 17619  00BA  0084               	movwf	4
 17620  00BB  3001               	movlw	1	; select bank2/3
 17621  00BC  0085               	movwf	5
 17622  00BD  0800               	movf	0,w
 17623  00BE  0201               	subwf	1,w
 17624  00BF  1C03               	skipc
 17625  00C0  299D               	goto	i1l6784
 17626                           
 17627                           ;Dimmer_B1.c: 131: DimmerLightsIntr->DimmingTime = 0;
 17628  00C1  0A78               	incf	_DimmerLightsIntr,w
 17629  00C2  0086               	movwf	6
 17630  00C3  3001               	movlw	1	; select bank2/3
 17631  00C4  0087               	movwf	7
 17632  00C5  0181               	clrf	1
 17633                           
 17634                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjFlag == 1) {
 17635  00C6  0878               	movf	_DimmerLightsIntr,w
 17636  00C7  0086               	movwf	6
 17637  00C8  3001               	movlw	1	; select bank2/3
 17638  00C9  0087               	movwf	7
 17639  00CA  1D81               	btfss	1,3
 17640  00CB  2902               	goto	i1l6752
 17641                           
 17642                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->AdjStatus == 0) {
 17643  00CC  0878               	movf	_DimmerLightsIntr,w
 17644  00CD  0086               	movwf	6
 17645  00CE  3001               	movlw	1	; select bank2/3
 17646  00CF  0087               	movwf	7
 17647  00D0  1A01               	btfsc	1,4
 17648  00D1  28E9               	goto	i1l6746
 17649                           
 17650                           ;Dimmer_B1.c: 134: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17651  00D2  0878               	movf	_DimmerLightsIntr,w
 17652  00D3  3E04               	addlw	4
 17653  00D4  0086               	movwf	6
 17654  00D5  3001               	movlw	1	; select bank2/3
 17655  00D6  0087               	movwf	7
 17656  00D7  3021               	movlw	33
 17657  00D8  0201               	subwf	1,w
 17658  00D9  1C03               	skipc
 17659  00DA  28E3               	goto	i1l6744
 17660                           
 17661                           ;Dimmer_B1.c: 135: DimmerLightsIntr->DimmingValue--;
 17662  00DB  0878               	movf	_DimmerLightsIntr,w
 17663  00DC  3E04               	addlw	4
 17664  00DD  0086               	movwf	6
 17665  00DE  3001               	movlw	1	; select bank2/3
 17666  00DF  0087               	movwf	7
 17667  00E0  3001               	movlw	1
 17668  00E1  0281               	subwf	1,f
 17669                           
 17670                           ;Dimmer_B1.c: 136: } else {
 17671  00E2  299D               	goto	i1l6784
 17672  00E3                     i1l6744:	
 17673                           
 17674                           ;Dimmer_B1.c: 137: DimmerLightsIntr->AdjStatus = 1;
 17675  00E3  0878               	movf	_DimmerLightsIntr,w
 17676  00E4  0086               	movwf	6
 17677  00E5  3001               	movlw	1	; select bank2/3
 17678  00E6  0087               	movwf	7
 17679  00E7  1601               	bsf	1,4
 17680                           
 17681                           ;Dimmer_B1.c: 138: }
 17682                           ;Dimmer_B1.c: 139: } else {
 17683  00E8  299D               	goto	i1l6784
 17684  00E9                     i1l6746:	
 17685                           
 17686                           ;Dimmer_B1.c: 140: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17687  00E9  0878               	movf	_DimmerLightsIntr,w
 17688  00EA  3E04               	addlw	4
 17689  00EB  0086               	movwf	6
 17690  00EC  3001               	movlw	1	; select bank2/3
 17691  00ED  0087               	movwf	7
 17692  00EE  303C               	movlw	60
 17693  00EF  0201               	subwf	1,w
 17694  00F0  1803               	skipnc
 17695  00F1  28FC               	goto	i1l6750
 17696                           
 17697                           ;Dimmer_B1.c: 141: DimmerLightsIntr->DimmingValue++;
 17698  00F2  3001               	movlw	1
 17699  00F3  00F2               	movwf	??_setDimmerLights_IntrControl
 17700  00F4  0878               	movf	_DimmerLightsIntr,w
 17701  00F5  3E04               	addlw	4
 17702  00F6  0086               	movwf	6
 17703  00F7  3001               	movlw	1	; select bank2/3
 17704  00F8  0087               	movwf	7
 17705  00F9  0872               	movf	??_setDimmerLights_IntrControl,w
 17706  00FA  0781               	addwf	1,f
 17707                           
 17708                           ;Dimmer_B1.c: 142: } else {
 17709  00FB  299D               	goto	i1l6784
 17710  00FC                     i1l6750:	
 17711                           
 17712                           ;Dimmer_B1.c: 143: DimmerLightsIntr->AdjStatus = 0;
 17713  00FC  0878               	movf	_DimmerLightsIntr,w
 17714  00FD  0086               	movwf	6
 17715  00FE  3001               	movlw	1	; select bank2/3
 17716  00FF  0087               	movwf	7
 17717  0100  1201               	bcf	1,4
 17718                           
 17719                           ;Dimmer_B1.c: 144: }
 17720                           ;Dimmer_B1.c: 145: }
 17721                           ;Dimmer_B1.c: 146: } else if (DimmerLightsIntr->AdjRF == 1) {
 17722  0101  299D               	goto	i1l6784
 17723  0102                     i1l6752:	
 17724  0102  0878               	movf	_DimmerLightsIntr,w
 17725  0103  0086               	movwf	6
 17726  0104  3001               	movlw	1	; select bank2/3
 17727  0105  0087               	movwf	7
 17728  0106  1D01               	btfss	1,2
 17729  0107  2949               	goto	i1l6766
 17730                           
 17731                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17732  0108  0878               	movf	_DimmerLightsIntr,w
 17733  0109  3E05               	addlw	5
 17734  010A  0086               	movwf	6
 17735  010B  3001               	movlw	1	; select bank2/3
 17736  010C  0087               	movwf	7
 17737  010D  0878               	movf	_DimmerLightsIntr,w
 17738  010E  3E04               	addlw	4
 17739  010F  0084               	movwf	4
 17740  0110  3001               	movlw	1	; select bank2/3
 17741  0111  0085               	movwf	5
 17742  0112  0800               	movf	0,w
 17743  0113  0201               	subwf	1,w
 17744  0114  1803               	skipnc
 17745  0115  291E               	goto	i1l6758
 17746                           
 17747                           ;Dimmer_B1.c: 148: DimmerLightsIntr->DimmingValue--;
 17748  0116  0878               	movf	_DimmerLightsIntr,w
 17749  0117  3E04               	addlw	4
 17750  0118  0086               	movwf	6
 17751  0119  3001               	movlw	1	; select bank2/3
 17752  011A  0087               	movwf	7
 17753  011B  3001               	movlw	1
 17754  011C  0281               	subwf	1,f
 17755                           
 17756                           ;Dimmer_B1.c: 149: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17757  011D  2935               	goto	i1l6762
 17758  011E                     i1l6758:	
 17759  011E  0878               	movf	_DimmerLightsIntr,w
 17760  011F  3E04               	addlw	4
 17761  0120  0086               	movwf	6
 17762  0121  3001               	movlw	1	; select bank2/3
 17763  0122  0087               	movwf	7
 17764  0123  0878               	movf	_DimmerLightsIntr,w
 17765  0124  3E05               	addlw	5
 17766  0125  0084               	movwf	4
 17767  0126  3001               	movlw	1	; select bank2/3
 17768  0127  0085               	movwf	5
 17769  0128  0800               	movf	0,w
 17770  0129  0201               	subwf	1,w
 17771  012A  1803               	skipnc
 17772  012B  2935               	goto	i1l6762
 17773                           
 17774                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue++;
 17775  012C  3001               	movlw	1
 17776  012D  00F2               	movwf	??_setDimmerLights_IntrControl
 17777  012E  0878               	movf	_DimmerLightsIntr,w
 17778  012F  3E04               	addlw	4
 17779  0130  0086               	movwf	6
 17780  0131  3001               	movlw	1	; select bank2/3
 17781  0132  0087               	movwf	7
 17782  0133  0872               	movf	??_setDimmerLights_IntrControl,w
 17783  0134  0781               	addwf	1,f
 17784  0135                     i1l6762:	
 17785                           
 17786                           ;Dimmer_B1.c: 151: }
 17787                           ;Dimmer_B1.c: 152: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17788  0135  0878               	movf	_DimmerLightsIntr,w
 17789  0136  3E05               	addlw	5
 17790  0137  0086               	movwf	6
 17791  0138  3001               	movlw	1	; select bank2/3
 17792  0139  0087               	movwf	7
 17793  013A  0878               	movf	_DimmerLightsIntr,w
 17794  013B  3E04               	addlw	4
 17795  013C  0084               	movwf	4
 17796  013D  3001               	movlw	1	; select bank2/3
 17797  013E  0085               	movwf	5
 17798  013F  0800               	movf	0,w
 17799  0140  0601               	xorwf	1,w
 17800  0141  1D03               	skipz
 17801  0142  299D               	goto	i1l6784
 17802                           
 17803                           ;Dimmer_B1.c: 153: DimmerLightsIntr->AdjRF = 0;
 17804  0143  0878               	movf	_DimmerLightsIntr,w
 17805  0144  0086               	movwf	6
 17806  0145  3001               	movlw	1	; select bank2/3
 17807  0146  0087               	movwf	7
 17808  0147  1101               	bcf	1,2
 17809  0148  2964               	goto	i1l6772
 17810  0149                     i1l6766:	
 17811                           ;Dimmer_B1.c: 155: }
 17812                           ;Dimmer_B1.c: 156: } else {
 17813                           
 17814                           ;Dimmer_B1.c: 154: DimmerLightsIntr->Signal = 0;
 17815                           
 17816                           
 17817                           ;Dimmer_B1.c: 157: if (DimmerLightsIntr->Status == 1) {
 17818  0149  0878               	movf	_DimmerLightsIntr,w
 17819  014A  0086               	movwf	6
 17820  014B  3001               	movlw	1	; select bank2/3
 17821  014C  0087               	movwf	7
 17822  014D  1E81               	btfss	1,5
 17823  014E  296A               	goto	i1l6774
 17824                           
 17825                           ;Dimmer_B1.c: 158: DimmerLightsIntr->DimmingValue--;
 17826  014F  0878               	movf	_DimmerLightsIntr,w
 17827  0150  3E04               	addlw	4
 17828  0151  0086               	movwf	6
 17829  0152  3001               	movlw	1	; select bank2/3
 17830  0153  0087               	movwf	7
 17831  0154  3001               	movlw	1
 17832  0155  0281               	subwf	1,f
 17833                           
 17834                           ;Dimmer_B1.c: 159: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17835  0156  0878               	movf	_DimmerLightsIntr,w
 17836  0157  3E05               	addlw	5
 17837  0158  0086               	movwf	6
 17838  0159  3001               	movlw	1	; select bank2/3
 17839  015A  0087               	movwf	7
 17840  015B  0878               	movf	_DimmerLightsIntr,w
 17841  015C  3E04               	addlw	4
 17842  015D  0084               	movwf	4
 17843  015E  3001               	movlw	1	; select bank2/3
 17844  015F  0085               	movwf	5
 17845  0160  0800               	movf	0,w
 17846  0161  0201               	subwf	1,w
 17847  0162  1C03               	skipc
 17848  0163  299D               	goto	i1l6784
 17849  0164                     i1l6772:	
 17850                           
 17851                           ;Dimmer_B1.c: 160: DimmerLightsIntr->Signal = 0;
 17852  0164  0878               	movf	_DimmerLightsIntr,w
 17853  0165  0086               	movwf	6
 17854  0166  3001               	movlw	1	; select bank2/3
 17855  0167  0087               	movwf	7
 17856  0168  1081               	bcf	1,1
 17857                           
 17858                           ;Dimmer_B1.c: 161: }
 17859                           ;Dimmer_B1.c: 162: } else {
 17860  0169  299D               	goto	i1l6784
 17861  016A                     i1l6774:	
 17862                           
 17863                           ;Dimmer_B1.c: 163: DimmerLightsIntr->DimmingValue++;
 17864  016A  3001               	movlw	1
 17865  016B  00F2               	movwf	??_setDimmerLights_IntrControl
 17866  016C  0878               	movf	_DimmerLightsIntr,w
 17867  016D  3E04               	addlw	4
 17868  016E  0086               	movwf	6
 17869  016F  3001               	movlw	1	; select bank2/3
 17870  0170  0087               	movwf	7
 17871  0171  0872               	movf	??_setDimmerLights_IntrControl,w
 17872  0172  0781               	addwf	1,f
 17873                           
 17874                           ;Dimmer_B1.c: 164: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17875  0173  0878               	movf	_DimmerLightsIntr,w
 17876  0174  3E04               	addlw	4
 17877  0175  0086               	movwf	6
 17878  0176  3001               	movlw	1	; select bank2/3
 17879  0177  0087               	movwf	7
 17880  0178  0878               	movf	_DimmerLightsIntr,w
 17881  0179  3E06               	addlw	6
 17882  017A  0084               	movwf	4
 17883  017B  3001               	movlw	1	; select bank2/3
 17884  017C  0085               	movwf	5
 17885  017D  0800               	movf	0,w
 17886  017E  0201               	subwf	1,w
 17887  017F  1C03               	skipc
 17888  0180  299D               	goto	i1l6784
 17889                           
 17890                           ;Dimmer_B1.c: 165: DimmerLightsIntr->Signal = 0;
 17891  0181  0878               	movf	_DimmerLightsIntr,w
 17892  0182  0086               	movwf	6
 17893  0183  3001               	movlw	1	; select bank2/3
 17894  0184  0087               	movwf	7
 17895  0185  1081               	bcf	1,1
 17896                           
 17897                           ;Dimmer_B1.c: 166: DimmerLightsIntr->StatusFlag = 0;
 17898  0186  0878               	movf	_DimmerLightsIntr,w
 17899  0187  0086               	movwf	6
 17900  0188  3001               	movlw	1	; select bank2/3
 17901  0189  0087               	movwf	7
 17902  018A  1301               	bcf	1,6
 17903                           
 17904                           ;Dimmer_B1.c: 167: DimmerLightsIntr->Clear = 1;
 17905  018B  0878               	movf	_DimmerLightsIntr,w
 17906  018C  3E09               	addlw	9
 17907  018D  0086               	movwf	6
 17908  018E  3001               	movlw	1	; select bank2/3
 17909  018F  0087               	movwf	7
 17910  0190  1501               	bsf	1,2
 17911                           
 17912                           ;Dimmer_B1.c: 168: Dimmer->Detect = 1;
 17913  0191  0877               	movf	_Dimmer,w
 17914  0192  0086               	movwf	6
 17915  0193  3001               	movlw	1	; select bank2/3
 17916  0194  0087               	movwf	7
 17917  0195  1401               	bsf	1,0
 17918                           
 17919                           ;Dimmer_B1.c: 170: if (lights == 1) {
 17920  0196  0874               	movf	setDimmerLights_IntrControl@lights,w
 17921  0197  3A01               	xorlw	1
 17922  0198  1D03               	skipz
 17923  0199  299D               	goto	i1l6784
 17924                           
 17925                           ;Dimmer_B1.c: 171: RA3 = 0;
 17926  019A  0020               	movlb	0	; select bank0
 17927  019B  118C               	bcf	12,3	;volatile
 17928                           
 17929                           ;Dimmer_B1.c: 172: RC7=!1;
 17930  019C  138E               	bcf	14,7	;volatile
 17931  019D                     i1l6784:	
 17932                           ;Dimmer_B1.c: 173: }
 17933                           ;Dimmer_B1.c: 185: ;;
 17934                           
 17935                           
 17936                           ;Dimmer_B1.c: 186: }
 17937                           ;Dimmer_B1.c: 187: }
 17938                           ;Dimmer_B1.c: 188: }
 17939                           ;Dimmer_B1.c: 189: }
 17940                           ;Dimmer_B1.c: 190: }
 17941                           ;Dimmer_B1.c: 191: }
 17942                           ;Dimmer_B1.c: 192: }
 17943                           ;Dimmer_B1.c: 193: if (DimmerLightsIntr->Triac == 1) {
 17944  019D  0878               	movf	_DimmerLightsIntr,w
 17945  019E  3E08               	addlw	8
 17946  019F  0086               	movwf	6
 17947  01A0  3001               	movlw	1	; select bank2/3
 17948  01A1  0087               	movwf	7
 17949  01A2  1E81               	btfss	1,5
 17950  01A3  29C9               	goto	i1l6798
 17951                           
 17952                           ;Dimmer_B1.c: 194: DimmerLightsIntr->TriacTime++;
 17953  01A4  3001               	movlw	1
 17954  01A5  00F2               	movwf	??_setDimmerLights_IntrControl
 17955  01A6  0878               	movf	_DimmerLightsIntr,w
 17956  01A7  3E07               	addlw	7
 17957  01A8  0086               	movwf	6
 17958  01A9  3001               	movlw	1	; select bank2/3
 17959  01AA  0087               	movwf	7
 17960  01AB  0872               	movf	??_setDimmerLights_IntrControl,w
 17961  01AC  0781               	addwf	1,f
 17962                           
 17963                           ;Dimmer_B1.c: 195: if (DimmerLightsIntr->TriacTime >= 5) {
 17964  01AD  0878               	movf	_DimmerLightsIntr,w
 17965  01AE  3E07               	addlw	7
 17966  01AF  0086               	movwf	6
 17967  01B0  3001               	movlw	1	; select bank2/3
 17968  01B1  0087               	movwf	7
 17969  01B2  3005               	movlw	5
 17970  01B3  0201               	subwf	1,w
 17971  01B4  1C03               	skipc
 17972  01B5  29C9               	goto	i1l6798
 17973                           
 17974                           ;Dimmer_B1.c: 196: DimmerLightsIntr->TriacTime = 0;
 17975  01B6  0878               	movf	_DimmerLightsIntr,w
 17976  01B7  3E07               	addlw	7
 17977  01B8  0086               	movwf	6
 17978  01B9  3001               	movlw	1	; select bank2/3
 17979  01BA  0087               	movwf	7
 17980  01BB  0181               	clrf	1
 17981                           
 17982                           ;Dimmer_B1.c: 197: DimmerLightsIntr->Triac = 0;
 17983  01BC  0878               	movf	_DimmerLightsIntr,w
 17984  01BD  3E08               	addlw	8
 17985  01BE  0086               	movwf	6
 17986  01BF  3001               	movlw	1	; select bank2/3
 17987  01C0  0087               	movwf	7
 17988  01C1  1281               	bcf	1,5
 17989                           
 17990                           ;Dimmer_B1.c: 200: if (lights == 1) {
 17991  01C2  0874               	movf	setDimmerLights_IntrControl@lights,w
 17992  01C3  3A01               	xorlw	1
 17993  01C4  1D03               	skipz
 17994  01C5  29C9               	goto	i1l6798
 17995                           
 17996                           ;Dimmer_B1.c: 201: RA7 = 0;
 17997  01C6  0020               	movlb	0	; select bank0
 17998  01C7  138C               	bcf	12,7	;volatile
 17999                           
 18000                           ;Dimmer_B1.c: 202: RB4=0;
 18001  01C8  120D               	bcf	13,4	;volatile
 18002  01C9                     i1l6798:	
 18003                           
 18004                           ;Dimmer_B1.c: 203: }
 18005                           ;Dimmer_B1.c: 215: }
 18006                           ;Dimmer_B1.c: 216: }
 18007                           ;Dimmer_B1.c: 217: if (DimmerLightsIntr->TriacFlag == 1) {
 18008  01C9  0878               	movf	_DimmerLightsIntr,w
 18009  01CA  3E09               	addlw	9
 18010  01CB  0086               	movwf	6
 18011  01CC  3001               	movlw	1	; select bank2/3
 18012  01CD  0087               	movwf	7
 18013  01CE  1E81               	btfss	1,5
 18014  01CF  0008               	return
 18015                           
 18016                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacCount++;
 18017  01D0  3001               	movlw	1
 18018  01D1  00F2               	movwf	??_setDimmerLights_IntrControl
 18019  01D2  0878               	movf	_DimmerLightsIntr,w
 18020  01D3  3E0A               	addlw	10
 18021  01D4  0086               	movwf	6
 18022  01D5  3001               	movlw	1	; select bank2/3
 18023  01D6  0087               	movwf	7
 18024  01D7  0872               	movf	??_setDimmerLights_IntrControl,w
 18025  01D8  0781               	addwf	1,f
 18026                           
 18027                           ;Dimmer_B1.c: 219: if (DimmerLightsIntr->TriacCount == 70) {
 18028  01D9  0878               	movf	_DimmerLightsIntr,w
 18029  01DA  3E0A               	addlw	10
 18030  01DB  0086               	movwf	6
 18031  01DC  3001               	movlw	1	; select bank2/3
 18032  01DD  0087               	movwf	7
 18033  01DE  0801               	movf	1,w
 18034  01DF  3A46               	xorlw	70
 18035  01E0  1D03               	skipz
 18036  01E1  0008               	return
 18037                           
 18038                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacCount = 0;
 18039  01E2  0878               	movf	_DimmerLightsIntr,w
 18040  01E3  3E0A               	addlw	10
 18041  01E4  0086               	movwf	6
 18042  01E5  3001               	movlw	1	; select bank2/3
 18043  01E6  0087               	movwf	7
 18044  01E7  0181               	clrf	1
 18045                           
 18046                           ;Dimmer_B1.c: 221: DimmerLightsIntr->TriacFlag = 0;
 18047  01E8  0878               	movf	_DimmerLightsIntr,w
 18048  01E9  3E09               	addlw	9
 18049  01EA  0086               	movwf	6
 18050  01EB  3001               	movlw	1	; select bank2/3
 18051  01EC  0087               	movwf	7
 18052  01ED  1281               	bcf	1,5
 18053  01EE  0008               	return
 18054  01EF                     __end_of_setDimmerLights_IntrControl:	
 18055                           
 18056                           	psect	text130
 18057  1D9D                     __ptext130:	
 18058 ;; *************** function _DimmerIntrPointSelect *****************
 18059 ;; Defined at:
 18060 ;;		line 73 in file "../src/Dimmer_B1.c"
 18061 ;; Parameters:    Size  Location     Type
 18062 ;;  lights          1    wreg     unsigned char 
 18063 ;; Auto vars:     Size  Location     Type
 18064 ;;  lights          1    1[COMMON] unsigned char 
 18065 ;; Return value:  Size  Location     Type
 18066 ;;		None               void
 18067 ;; Registers used:
 18068 ;;		wreg
 18069 ;; Tracked objects:
 18070 ;;		On entry : 0/0
 18071 ;;		On exit  : 0/0
 18072 ;;		Unchanged: 0/0
 18073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18075 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18076 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18077 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18078 ;;Total ram usage:        2 bytes
 18079 ;; Hardware stack levels used:    1
 18080 ;; This function calls:
 18081 ;;		Nothing
 18082 ;; This function is called by:
 18083 ;;		_setDimmerLights_IntrControl
 18084 ;; This function uses a non-reentrant model
 18085 ;;
 18086                           
 18087                           
 18088                           ;psect for function _DimmerIntrPointSelect
 18089  1D9D                     _DimmerIntrPointSelect:	
 18090                           
 18091                           ;incstack = 0
 18092                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18093                           ;DimmerIntrPointSelect@lights stored from wreg
 18094  1D9D  00F1               	movwf	DimmerIntrPointSelect@lights
 18095                           
 18096                           ;Dimmer_B1.c: 75: if (lights == 1) {
 18097  1D9E  0871               	movf	DimmerIntrPointSelect@lights,w
 18098  1D9F  3A01               	xorlw	1
 18099  1DA0  1D03               	skipz
 18100  1DA1  0008               	return
 18101                           
 18102                           ;Dimmer_B1.c: 76: DimmerLightsIntr = &DimmerLights1;
 18103  1DA2  303D               	movlw	_DimmerLights1& (0+255)
 18104  1DA3  00F0               	movwf	??_DimmerIntrPointSelect
 18105  1DA4  0870               	movf	??_DimmerIntrPointSelect,w
 18106  1DA5  00F8               	movwf	_DimmerLightsIntr
 18107  1DA6  0008               	return
 18108  1DA7                     __end_of_DimmerIntrPointSelect:	
 18109                           
 18110                           	psect	text131
 18111  1E22                     __ptext131:	
 18112 ;; *************** function _IOC_ISR *****************
 18113 ;; Defined at:
 18114 ;;		line 291 in file "../src/MCU_B1.c"
 18115 ;; Parameters:    Size  Location     Type
 18116 ;;		None
 18117 ;; Auto vars:     Size  Location     Type
 18118 ;;		None
 18119 ;; Return value:  Size  Location     Type
 18120 ;;		None               void
 18121 ;; Registers used:
 18122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18123 ;; Tracked objects:
 18124 ;;		On entry : 0/0
 18125 ;;		On exit  : 0/0
 18126 ;;		Unchanged: 0/0
 18127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18132 ;;Total ram usage:        0 bytes
 18133 ;; Hardware stack levels used:    1
 18134 ;; Hardware stack levels required when called:    3
 18135 ;; This function calls:
 18136 ;;		_setDimmerReClock
 18137 ;; This function is called by:
 18138 ;;		_ISR
 18139 ;; This function uses a non-reentrant model
 18140 ;;
 18141                           
 18142                           
 18143                           ;psect for function _IOC_ISR
 18144  1E22                     _IOC_ISR:	
 18145                           
 18146                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 18147                           
 18148                           ;incstack = 0
 18149                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18150  1E22  1D8B               	btfss	11,3	;volatile
 18151  1E23  0008               	return
 18152  1E24  0027               	movlb	7	; select bank7
 18153  1E25  1D16               	btfss	22,2	;volatile
 18154  1E26  0008               	return
 18155                           
 18156                           ;MCU_B1.c: 293: IOCBF2 = 0;
 18157  1E27  1116               	bcf	22,2	;volatile
 18158                           
 18159                           ;MCU_B1.c: 294: IOCIF = 0;
 18160  1E28  100B               	bcf	11,0	;volatile
 18161                           
 18162                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 18163  1E29  0021               	movlb	1	; select bank1
 18164  1E2A  1C20               	btfss	_myMain^(0+128),0
 18165  1E2B  0008               	return
 18166                           
 18167                           ;MCU_B1.c: 297: setDimmerReClock();
 18168  1E2C  319D  251A         	fcall	_setDimmerReClock
 18169  1E2E  0008               	return
 18170  1E2F                     __end_of_IOC_ISR:	
 18171                           
 18172                           	psect	text132
 18173  1D1A                     __ptext132:	
 18174 ;; *************** function _setDimmerReClock *****************
 18175 ;; Defined at:
 18176 ;;		line 169 in file "../src/MCU_B1.c"
 18177 ;; Parameters:    Size  Location     Type
 18178 ;;		None
 18179 ;; Auto vars:     Size  Location     Type
 18180 ;;		None
 18181 ;; Return value:  Size  Location     Type
 18182 ;;		None               void
 18183 ;; Registers used:
 18184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18185 ;; Tracked objects:
 18186 ;;		On entry : 0/0
 18187 ;;		On exit  : 0/0
 18188 ;;		Unchanged: 0/0
 18189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18194 ;;Total ram usage:        0 bytes
 18195 ;; Hardware stack levels used:    1
 18196 ;; Hardware stack levels required when called:    2
 18197 ;; This function calls:
 18198 ;;		_setDimmerLights_IntrIOC_GO
 18199 ;; This function is called by:
 18200 ;;		_IOC_ISR
 18201 ;; This function uses a non-reentrant model
 18202 ;;
 18203                           
 18204                           
 18205                           ;psect for function _setDimmerReClock
 18206  1D1A                     _setDimmerReClock:	
 18207                           
 18208                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 18209                           
 18210                           ;incstack = 0
 18211                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18212  1D1A  3001               	movlw	1
 18213  1D1B  3193  2328         	fcall	_setDimmerLights_IntrIOC_GO
 18214  1D1D  0008               	return
 18215  1D1E                     __end_of_setDimmerReClock:	
 18216                           
 18217                           	psect	text133
 18218  1328                     __ptext133:	
 18219 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18220 ;; Defined at:
 18221 ;;		line 28 in file "../src/Dimmer_B1.c"
 18222 ;; Parameters:    Size  Location     Type
 18223 ;;  lights          1    wreg     unsigned char 
 18224 ;; Auto vars:     Size  Location     Type
 18225 ;;  lights          1    2[COMMON] unsigned char 
 18226 ;; Return value:  Size  Location     Type
 18227 ;;		None               void
 18228 ;; Registers used:
 18229 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18230 ;; Tracked objects:
 18231 ;;		On entry : 0/0
 18232 ;;		On exit  : 0/0
 18233 ;;		Unchanged: 0/0
 18234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18236 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18238 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18239 ;;Total ram usage:        1 bytes
 18240 ;; Hardware stack levels used:    1
 18241 ;; Hardware stack levels required when called:    1
 18242 ;; This function calls:
 18243 ;;		_DimmerIntrIOCPointSelect
 18244 ;; This function is called by:
 18245 ;;		_setDimmerReClock
 18246 ;; This function uses a non-reentrant model
 18247 ;;
 18248                           
 18249                           
 18250                           ;psect for function _setDimmerLights_IntrIOC_GO
 18251  1328                     _setDimmerLights_IntrIOC_GO:	
 18252                           
 18253                           ;incstack = 0
 18254                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18255                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18256  1328  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18257                           
 18258                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18259  1329  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18260  132A  319D  25BB  3193   	fcall	_DimmerIntrIOCPointSelect
 18261                           
 18262                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18263  132D  0021               	movlb	1	; select bank1
 18264  132E  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 18265  132F  0086               	movwf	6
 18266  1330  3001               	movlw	1	; select bank2/3
 18267  1331  0087               	movwf	7
 18268  1332  1801               	btfsc	1,0
 18269  1333  0008               	return
 18270  1334  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 18271  1335  3E09               	addlw	9
 18272  1336  0086               	movwf	6
 18273  1337  3001               	movlw	1	; select bank2/3
 18274  1338  0087               	movwf	7
 18275  1339  1A81               	btfsc	1,5
 18276  133A  0008               	return
 18277                           
 18278                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18279  133B  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 18280  133C  0086               	movwf	6
 18281  133D  3001               	movlw	1	; select bank2/3
 18282  133E  0087               	movwf	7
 18283  133F  1401               	bsf	1,0
 18284                           
 18285                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18286  1340  0855               	movf	_DimmerLightsIntrIOC^(0+128),w
 18287  1341  3E09               	addlw	9
 18288  1342  0086               	movwf	6
 18289  1343  3001               	movlw	1	; select bank2/3
 18290  1344  0087               	movwf	7
 18291  1345  1681               	bsf	1,5
 18292                           
 18293                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 18294  1346  0020               	movlb	0	; select bank0
 18295  1347  1D0D               	btfss	13,2	;volatile
 18296  1348  2B51               	goto	i1l6364
 18297                           
 18298                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 18299  1349  0877               	movf	_Dimmer,w
 18300  134A  3E02               	addlw	2
 18301  134B  0086               	movwf	6
 18302  134C  3001               	movlw	1	; select bank2/3
 18303  134D  0087               	movwf	7
 18304  134E  0181               	clrf	1
 18305  134F  0A81               	incf	1,f
 18306                           
 18307                           ;Dimmer_B1.c: 37: } else {
 18308  1350  0008               	return
 18309  1351                     i1l6364:	
 18310                           
 18311                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 18312  1351  0877               	movf	_Dimmer,w
 18313  1352  3E02               	addlw	2
 18314  1353  0086               	movwf	6
 18315  1354  3001               	movlw	1	; select bank2/3
 18316  1355  0087               	movwf	7
 18317  1356  0181               	clrf	1
 18318  1357  0008               	return
 18319  1358                     __end_of_setDimmerLights_IntrIOC_GO:	
 18320                           
 18321                           	psect	text134
 18322  1DBB                     __ptext134:	
 18323 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18324 ;; Defined at:
 18325 ;;		line 8 in file "../src/Dimmer_B1.c"
 18326 ;; Parameters:    Size  Location     Type
 18327 ;;  lights          1    wreg     unsigned char 
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;  lights          1    1[COMMON] unsigned char 
 18330 ;; Return value:  Size  Location     Type
 18331 ;;		None               void
 18332 ;; Registers used:
 18333 ;;		wreg
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/0
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18342 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18343 ;;Total ram usage:        2 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; This function calls:
 18346 ;;		Nothing
 18347 ;; This function is called by:
 18348 ;;		_setDimmerLights_IntrIOC_GO
 18349 ;; This function uses a non-reentrant model
 18350 ;;
 18351                           
 18352                           
 18353                           ;psect for function _DimmerIntrIOCPointSelect
 18354  1DBB                     _DimmerIntrIOCPointSelect:	
 18355                           
 18356                           ;incstack = 0
 18357                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18358                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18359  1DBB  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18360                           
 18361                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18362  1DBC  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18363  1DBD  3A01               	xorlw	1
 18364  1DBE  1D03               	skipz
 18365  1DBF  0008               	return
 18366                           
 18367                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18368  1DC0  303D               	movlw	_DimmerLights1& (0+255)
 18369  1DC1  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18370  1DC2  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18371  1DC3  0021               	movlb	1	; select bank1
 18372  1DC4  00D5               	movwf	_DimmerLightsIntrIOC^(0+128)
 18373  1DC5  0008               	return
 18374  1DC6                     __end_of_DimmerIntrIOCPointSelect:	
 18375  007E                     btemp	set	126	;btemp
 18376  007E                     pic14e$flags	set	126
 18377  007E                     wtemp	set	126
 18378  007E                     wtemp0	set	126
 18379  0080                     wtemp1	set	128
 18380  0082                     wtemp2	set	130
 18381  0084                     wtemp3	set	132
 18382  0086                     wtemp4	set	134
 18383  0088                     wtemp5	set	136
 18384  007F                     wtemp6	set	127
 18385  007E                     ttemp	set	126
 18386  007E                     ttemp0	set	126
 18387  0081                     ttemp1	set	129
 18388  0084                     ttemp2	set	132
 18389  0087                     ttemp3	set	135
 18390  007F                     ttemp4	set	127
 18391  007E                     ltemp	set	126
 18392  007E                     ltemp0	set	126
 18393  0082                     ltemp1	set	130
 18394  0086                     ltemp2	set	134
 18395  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         190
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     76      78
    BANK1            80      0      79
    BANK2            80      4      72
    BANK3            80      0      69
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK2[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK2[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw1(BANK1[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  126969
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2141
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9243
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9243
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9209
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   28622
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   28622
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12665
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12271
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1446
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1525
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1525
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   38360
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           7     7      0   38360
                                             71 BANK0      5     5      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                             ___wmul
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37032
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14485
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15160
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15005
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14912
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     552
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    7195
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    7195
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    7161
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      62
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5385
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     290
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2948
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1618
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1618
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13269
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13139
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8848
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2023
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1463
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     130
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13306
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13306
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     613
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     717
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     110
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       ___wmul
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      48       9       90.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      45      11       86.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     136      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     136      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Thu Oct 23 15:01:47 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 0881  
                                     l94 0895                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 11B8                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 007A  
     __end_of_getDimmerLights_StatusFlag 1DBB               _getDimmerLights_StatusFlag 1DB1  
                    ___wmul@multiplicand 0022                   __end_of_setDelayOff_GO 0A1C  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 08A9  
                           ___ftadd@sign 0048                                      l102 16F6  
                                    l103 16F2                                      l104 16E0  
                                    l106 16F0                                      l322 1FA6  
                                    l323 1FA8                                      l247 0AB9  
                                    l272 0D96                                      l273 0DDD  
                                    l366 1205                                      l797 154A  
                                    _GIE 005F                                      _CRC 00D3  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 00C7  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 0079  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BE                                      _ISR 0004  
                                    _WDT 00D1          setPowerFault_Exceptions@command 0030  
                                    _Sw1 014C                setDimmerLights_Adj@status 0062  
               __end_of_CC2500_WriteByte 1FB3           ??_setDimmerLights_TriggerERROR 0023  
                  _Buzzer_Initialization 1D02                          __end_of_ADC_Set 1D63  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023                          _setDimmerLights 0DE3  
                  _setDimmerLights_ERROR 0801                    _setDimmerLights_AdjRF 11B8  
                  _setDimmerLights_AdjGo 1EDF                  __size_of_setTemp_Enable 0008  
                                   ?_ISR 0070                          _PowerFault_Main 1D08  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1E2F  
                           ___ftdiv@sign 003D                                     l1254 110E  
                                   l2303 1E92                 ?_DimmerLightsPointSelect 0070  
                                   l1267 1321                                     l1276 15D9  
                        __end_of_IOC_Set 1E49                                     l2621 10BD  
                                   l1910 0440                                     l2608 16B1  
                                   l1747 144B                                     l2811 03C9  
                                   l1915 045C                                     l1917 049A  
                                   l5400 0359                                     l1952 0B58  
                                   l1962 0BAE                                     l2782 0A4F  
                                   l5350 0A25                                     l5430 03A8  
                                   l5406 0368                                     l1967 13B8  
                                   l5424 0395                                     l5354 0A2C  
                                   l8002 09A7                                     l8010 09B3  
                                   l5442 03DB                                     l5426 039F  
                                   l5418 0382                                     l5530 0707  
                                   l5514 06C4                                     l1994 1485  
                                   l2788 0A66                                     l5364 0A54  
                                   l5356 0A36                                     l5436 03BB  
                                   l5428 03A4                                     l5508 06AE  
                                   l5366 0A5C                                     l5358 0A3B  
                                   l8006 09AD                                     l5446 03ED  
                                   l5438 03C5                                     l5542 0723  
                                   l5526 06FF                                     l5472 0778  
                                   l8104 0E37                                     l8200 11E8  
                                   l5456 0408                                     l5466 0762  
                                   l5538 071B                                     l8018 13C8  
                                   l9002 0EC9                                     l8204 11EE  
                                   l5396 0352                                     l9004 0ECB  
                                   l5494 07D2                                     l5486 07B9  
                                   l5558 0F02                                     l8230 1546  
                                   l8222 152E                                     l9030 0D19  
                                   l8150 0FC8                                     l9110 0450  
                                   l5592 0F67                                     l5584 0F4D  
                                   l5576 0F32                                     l8320 0A85  
                                   l8136 0F8E                                     l8304 0B36  
                                   l5586 0F56                                     l5578 0F40  
                                   l8066 10A7                                     l8322 0A88  
                                   l8146 0FB2                                     l9202 1E9D  
                                   l5588 0F59                                     l8228 1541  
                                   l9052 0D47                                     l9028 0D13  
                                   l8068 10AD                                     l8404 0DA8  
                                   l8340 0AA0                                     l8308 0B3F  
                                   l9220 0205                                     l8182 1FD5  
                                   l8430 1221                                     l8502 1309  
                                   l8406 0DC1                                     l8350 0AC8  
                                   l8326 0A8E                                     l8174 1473  
                                   l9142 047D                                     l8184 1FD8  
                                   l9064 0D65                                     l9056 0D55  
                                   l8352 0ACC                                     l8344 0ABF  
                                   l7712 1F36                                     l8600 0BA4  
                                   l9144 047F                                     l9306 16CA  
                                   l8442 11A7                                     l9066 0D67  
                                   l8418 0DDF                                     l8370 0D71  
                                   l8354 0ACF                                     l8346 0AC2  
                                   l9154 048F                                     l8188 1FDE  
                                   l8428 1216                                     l8436 119E  
                                   l8700 158E                                     l8372 0D74  
                                   l7716 1F3C                                     l9164 04AB  
                                   l9260 02A5                                     l9236 023A  
                                   l8438 11A1                                     l8702 1591  
                                   l7822 174A                                     l7814 1739  
                                   l7806 171B                                     l8198 11E5  
                                   l8390 0D8D                                     l8358 0AD5  
                                   l7742 129F                                     l9174 04D4  
                                   l9246 0267                                     l9270 02D7  
                                   l8550 1659                                     l7808 1727  
                                   l8456 14B0                                     l8376 0D7A  
                                   l9184 04FE                                     l9088 0434  
                                   l8706 1597                                     l7818 1742  
                                   l7770 108E                                     l8378 0D7D  
                                   l8298 0B1B                                     l8546 164D  
                                   l8820 08D6                                     l9372 0583  
                                   l8388 0D93                                     l8572 0B5B  
                                   l8628 1796                                     l9436 1417  
                  _myMain_Initialization 1EA0                                     l7790 1708  
                                   l7694 115B                                     l7766 1085  
                                   l8830 08FE                                     l7950 0A05  
                                   l9198 1E97                                     l7944 09F2  
                                   l8584 0B73                                     l8664 0CD3  
                                   l8912 111B                                     l8690 157E  
                                   l8818 08D0                                     l8930 15A4  
                                   l7954 0A11                                     l8594 0B99  
                                   l8914 111E                                     l8692 1581  
                                   l7796 1713                                     l7972 096F  
                                   l7980 097B                                     l8852 150A  
                                   l8668 10B7                                     l7948 09F8  
                                   l9572 17CC                                     l7878 0C78  
                                   l7990 098B                                     l8918 1123  
                                   l8696 1587                                     l7976 0975  
                                   l8936 15B9                                     l8856 1511  
                                   l9488 169A                                     l9576 17D7  
                                   _CFGS 0CAE                                     l7986 0985  
                                   l7994 0991                                     l8970 0E85  
                                   l8992 0EB2                                     l8968 0E7F  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4105 07D3                                     u4215 0724  
                                   u4065 078A                                     u4225 072A  
                                   u4145 06D0                                     u4075 079A  
                                   u4315 0F4E                                     u4155 06E0  
                                   u4085 07BA                                     u4095 07C9  
                                   u4255 0F09                                     u4175 0708  
                                   u4185 070E                                     u3715 0A31  
                                   _PEIE 005E                                     u4285 0F33  
                                   u3735 0A4A                                     u3905 0383  
                                   u3755 0A57                                     u3935 0396  
                                   u3785 0A6D                                     u3965 03A9  
                                   u3995 03BC                                     u7435 128B  
                                   u7525 171E                                     u7630 0C26  
                                   u8335 120B                                     u7545 1728  
                                   u7555 1732                                     u7635 0C24  
                                   u7565 173A                                     u9455 04CE  
                                   u9705 16C0                                     u8665 10BE  
                                   u7875 1F54                                     u8675 10C3  
                                   u9475 04F8                                     u9825 1105  
                                   u9915 167E                                     _LWLO 0CAD  
                                   u9925 16A9                                     _RFSW 00D6  
                                   _TMR0 0015                                     u9865 140E  
                                   u9875 141D                                     u9895 1244  
                                   _RSSI 00D7                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 17A8  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 1D08  
                    __end_of_DlyOff_Main 0C1C                          __end_of_RF_Main 1D11  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1DF2  
                                   ltemp 007E            __size_of_setRF_Initialization 000D  
                       _setDimmerReClock 1D1A                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1426                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 149A                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 0076  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 0800            __end_of_DimmerIntrPointSelect 1DA7  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
              setPowerFault_Exceptions@i 002F                                    ?_main 0164  
                        __end_of___awdiv 1751                          __end_of___ftadd 0420  
                        __end_of___ftdiv 07F4                          __end_of___ftmul 074B  
                        ___awdiv@divisor 0020                          __end_of___fttol 0F70  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                 _setDimmerLights_Switch 1EAF                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EE  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 1F5A                            __CFG_WRT$HALF 0000  
                                  _Temp1 00DE       __end_of_setDimmerLights_IntrIOC_GO 1358  
             _setDimmerLights_IntrIOC_GO 1328                         __end_of_TMR0_ISR 1195  
           __size_of_CC2500_WriteCommand 001A                         __end_of_TMR0_Set 1D6B  
                                  _getAD 1110                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1559            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 107A              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03D8  
                    setMemory_GO@command 0022                           __CFG_BOREN$OFF 0000  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011            __end_of_setLED_Initialization 1F10  
                                  ttemp0 007E                                    ttemp1 0081  
                                  ttemp2 0084                                    ttemp3 0087  
                                  ttemp4 007F                             ?_setRF_Learn 0070  
                                  status 0003                                    wtemp0 007E  
                                  wtemp1 0080                                    wtemp2 0082  
                                  wtemp3 0084                                    wtemp4 0086  
                                  wtemp5 0088                                    wtemp6 007F  
                     _setRF_DimmerLights 0C1C              __size_of_Flash_Memory_Write 002F  
                      ?_CC2500_SIDLEMode 0070               __size_of_RF_Initialization 0003  
                         setSw_Status@sw 0023         __size_of_DelayOff_Initialization 0004  
                           ?_my_MainTime 0070                setDimmerLights_Main@clear 0065  
                 ??_Flash_Memory_Erasing 0020                          _getPercentValue 0904  
                     ??_CC2500_SIDLEMode 0024                          __initialization 0015  
                       ?_CC2500_PowerRST 0070                        ??_Sw_DimmerOnFunc 0062  
                      ??_setPercentValue 0059                             __end_of_main 1800  
                    ?_setRF_DimmerLights 005D                         __end_of_Fosc_Set 1D36  
                       ?_CC2500_WriteREG 0022                                ??_ADC_Set 0020  
                __end_of_setDimmerLights 0E63                     _setSw_Initialization 1ECF  
                setOverTemp_Exceptions@i 002F                                   ??_main 006C  
                          ___fttol@sign1 0053                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0AE1                   ?_Buzzer_Initialization 0070  
      __size_of_DimmerIntrIOCPointSelect 000B                  ??_DlyOff_Initialization 0022  
                __end_of_PowerFault_Main 1D0B                               _Receive_OK 03D8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                 ?_setDimmerLights_ERROR 0070                                ??_IOC_Set 0020  
        __end_of_DimmerLightsPointSelect 1DDC                   ?_setDimmerLights_AdjRF 0070  
                 ?_setDimmerLights_AdjGo 0022                 __size_of_setRFSW_Control 0090  
                       ??_setRFSW_Status 0023                  ??_Switch_Initialization 0025  
                   __end_of_getTemp_Safe 1D73                     ??_setRF_DimmerLights 005E  
                                 ?_getAD 0020                              _DlyOff_Main 0BB1  
                 ?_myMain_Initialization 0070                                   _ADCON0 009D  
                                 _ADCON1 009E                                ??_RF_Main 006C  
                                 _ADRESH 009C                                   _ADRESL 009B  
                      ?_getPowerFault_AD 0070                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1172  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0A7D  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1EBF  
                                 i1l6364 1351                                   i1l6750 00FC  
                                 i1l6726 0099                                   i1l6744 00E3  
                                 i1l6752 0102                                   i1l6762 0135  
                                 i1l6746 00E9                                   i1l6772 0164  
                                 i1l6774 016A                                   i1l6758 011E  
                                 i1l6766 0149                                   i1l6784 019D  
                                 i1l6798 01C9                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                                   u706_25 118E  
                                 u582_25 0072                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1FB3  
                                 _WDTCON 0097                       DelayTime_1us@count 0020  
                  _Dimmer_Initialization 1D43           __size_of_CC2500_PowerOnInitial 0015  
          __end_of_CC2500_PowerOnInitial 1F6F                                   _Dimmer 0077  
                                 _DlySw1 00EC               __end_of_Mcu_Initialization 1F33  
                    __end_of_Buzzer_Main 16FD                                   _Memory 01A0  
                                 _Timer0 0135       __end_of_setDimmerLights_TriggerAdj 1EFF  
             _setDimmerLights_TriggerAdj 1EEF                                   ___bmul 1F33  
          setDimmerLights_Switch@command 0022                                   ___wmul 10B4  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DC                                   _s_data 00DD  
                                 _setLED 095F                                   _myMain 00A0  
                       _DimmerLightsIntr 0078                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 0850                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 01EF              _setDimmerLights_IntrControl 0043  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1DE7  
                getPowerFault_AD@channel 0025                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1D83                          _RfSWPointSelect 1DFE  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0015                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1E91                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 095F         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1D3A    __size_of_setPowerFault_Initialization 0004  
           _setPowerFault_Initialization 1D36                  __end_of__initialization 003F  
            ??_PowerFault_Initialization 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 1130                            __end_of_getAD 1130  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1E16  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0041  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1D43                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1D1E                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1D8B  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D4                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1D14                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 006D                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 16B3  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1D1A  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1D2A  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 1D7B  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006D                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0008  
                     getTemp_Safe@result 0020                              setBuz@count 002C  
                             __pmaintext 17A8                      _CC2500_WriteCommand 1FCC  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
                   __size_of_my_MainTime 0046            ??_DimmerLights_Initialization 0024  
                                ?___wmul 0020                               ??_TMR0_ISR 0075  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00BF  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1D5C                _PowerFault_Initialization 1D05  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 13F0  
                             ??_WDT_Main 0020             __end_of_setRF_Initialization 1E56  
                  __size_of_getTemp_Safe 0008                            ?_setSw_Status 0022  
                     _setRFSW_AdjControl 145F                  __end_of_RfSWPointSelect 1E0A  
                      Sw_DimmerOnFunc@sw 0063                                  _IOC_ISR 1E22  
                        ?_setTemp_Enable 0070                                  _IOC_Set 1E3C  
                   __size_of_setLog_Code 0032                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 10F1                        _Flash_Memory_Read 1FE6  
            ?_setDimmerLights_IntrIOC_GO 0070                   __size_of_CC2500_RxData 0076  
                 __size_of_CC2500_TxData 0064                      ?_setRFSW_AdjControl 0070  
    setDimmerLights_TriggerERROR@command 0022                                  _RF_Data 0120  
                                _RF_Main 1D0E                       ?_Flash_Memory_Main 0070  
                     ?_Flash_Memory_Read 0070                                  _WDT_Set 1DE7  
        __end_of_setControl_Lights_Table 0B48                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 1751  
                        _setPercentValue 15E1                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 0161  
           __end_of_CC2500_FrequencyCabr 1DFE                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1F21                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 0159  
                                _VarLED2 015D                        __end_of_getRxData 0BB1  
             __end_of_setPowerFault_Main 0D6D                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1DC6                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1ECF                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 1D6B                           ??_setTemp_Main 0031  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1EBF  
                                ___awdiv 16FD                                  ___ftadd 032A  
                         ??_setSw_Enable 0022                                  ___ftdiv 074B  
                        __size_of___wmul 001E                                  ___ftmul 0697  
                                ___fttol 0EE9                      __end_of_Switch_Main 1D3E  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 166D  
                                __ptext2 1D83                                  __ptext3 1EA0  
                                __ptext4 13F0                                  __ptext5 1226  
                                __ptext6 1110                                  __ptext7 1068  
                                __ptext8 0002                                  __ptext9 1D17  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1D9D                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 1110                __end_of_Flash_Memory_Read 2000  
                             _setRF_Main 0420                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1D2E                        _DimmerLights_Main 1D55  
         __size_of_DlyOff_Initialization 000A                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1DB1               __end_of_CC2500_ClearRXFIFO 1D22  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1D26  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006C  
                         _LedPointSelect 107A                      _DelayOffPointSelect 1DC6  
                                clrloop0 1D50           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1D9D                     end_of_initialization 003F  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 124D  
                          _DelayTime_1us 1200                        __end_of_setTxData 0697  
             __end_of_Flash_Memory_Write 1328                                  init_ram 1D49  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1D4A  
                             _setSw_Main 01EF                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 11DB                              ?_getPF_Safe 0070  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1EFF  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 001D  
                          _CC2500_RxData 0D6D                            _CC2500_TxData 0A7D  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1E64  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0027            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 159D  
                _DimmerLights_Exceptions 1518                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1D8B                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1D5C                       _Mcu_Initialization 1F21  
               __size_of_CC2500_PowerRST 0044                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$5936 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1097  
                __end_of_Sw_DimmerOnFunc 17A8                  __end_of_setPercentValue 1627  
               __size_of_CC2500_WriteREG 0023                __end_of_CC2500_InitSetREG 1277  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 145F  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 149A  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 1200  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1FCC  
                   _setRF_Initialization 1E49                              _Switch_Main 1D3A  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1DD1  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1F5A  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1F45                __size_of_Sw_DimmerAdjFunc 0031  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1DBB  
                         __end_of___wmul 10D2                        __size_of_TMR0_ISR 0023  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1F9A  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 09BD  
                         __end_of_setBuz 08A9                     _CC2500_FrequencyCabr 1DF2  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 0F70                        __size_of_WDT_Main 0012  
                    __size_of_getPF_Safe 0008                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 13BB  
                        ?_LedPointSelect 0070               __end_of_DimmerLights_Close 1F84  
                            __end_of_ISR 0013                    ??_Flash_Memory_Modify 0024  
     __size_of_PowerFault_Initialization 0003                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 10F1  
        __size_of_setTemp_Initialization 0003                    ??_Flash_Memory_Unlock 0020  
                ??_Dimmer_Initialization 0020                     __end_of_setTemp_Main 0EE9  
                   __end_of_setSw_Enable 1E91                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1D3E                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 0155  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1E82                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000F                __size_of_CC2500_WriteByte 0019  
                              _Temp_Main 1D17                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                         ??_WDT_Clearing 0020                                _Rx_Length 00D8  
                setRF_DimmerValue@lights 0063                                 ??___bmul 0021  
                  ??_setDimmerLights_Adj 0063                                 ??___wmul 0024  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00DA  
                            __pdataBANK3 01C5                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1D26  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 13F0  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4900 006B  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                            __pcstackBANK2 0164  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 006B  
             __size_of_CC2500_ReadStatus 0025                   _setOverTemp_Exceptions 1627  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 013D                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006C  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00F1                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1D11  
                              _getBuz_GO 1F10                         _getPowerFault_AD 1226  
      __size_of_setPowerFault_Exceptions 0039      __end_of_Flash_Memory_Initialization 05D8  
            _Flash_Memory_Initialization 0511                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 0A1C  
                              __ptext101 1E64                                __ptext110 1DC6  
                              __ptext102 1DFE                                __ptext111 1F5A  
                              __ptext103 1EBF                                __ptext120 1D1E  
                              __ptext112 1D26                                __ptext104 1EAF  
                              __ptext121 1FCC                                __ptext113 1559  
                              __ptext105 1DD1                                __ptext130 1D9D  
                              __ptext122 1D3E                                __ptext114 124D  
                              __ptext106 0850                                __ptext131 1E22  
                              __ptext123 1F45                                __ptext115 10D2  
                              __ptext107 16FD                                __ptext132 1D1A  
                              __ptext124 1F9A                                __ptext116 1195  
                              __ptext108 1D2A                                __ptext133 1328  
                              __ptext125 16B3                                __ptext117 1DF2  
                              __ptext109 1DA7                                 ?___ftadd 003E  
                              __ptext134 1DBB                                __ptext126 1D02  
                              __ptext118 1200                                __ptext119 1D22  
                              __ptext128 1172                                __ptext129 0043  
                              _getRxData 0B48                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 1000            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1D05  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1EA0  
                     _setPowerFault_Main 0CF7       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 004F                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 013B  
          __end_of_setDimmerLights_ERROR 0850             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 11DB            __end_of_setDimmerLights_AdjGo 1EEF  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00DB  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1EAF                         __CFG_WDTE$SWDTEN 0000  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0020  
                           _setRF_Enable 1E56                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1DDC                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1518                      _DimmerLightsIntrIOC 00D5  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1D17  
                      _CC2500_rfSettings 102F                           ___wmul@product 0024  
                               _LED_Main 07F4                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 1D4F  
               CC2500_InitPATable@loop_d 0027                                _setTxData 05D8  
    __end_of_DimmerLights_Initialization 1E3C              _DimmerLights_Initialization 1E2F  
                     _CC2500_ClearRXFIFO 1D1E                       _CC2500_ClearTXFIFO 1D22  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1D7B  
                   ??_setPowerFault_Main 0031                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003B  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 12F9  
                             ?_getRxData 0070                                 _TMR0_ISR 1172  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1D63                         _Sw_DimmerAdjFunc 1358  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 16B3        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00CF                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1FE6                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1068                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007                        ___wmul@multiplier 0020  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0C88                    __size_of_setTemp_Main 0086  
                __size_of_setDelayOff_GO 005F                    __size_of_setSw_Enable 000F  
                               _DelayOff 0076                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                       __end_of_getPF_Safe 1D83  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1E16  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 13BB  
                  _DlyOff_Initialization 1DA7                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1D32                         __size_of_WDT_Set 000B  
                  _Switch_Initialization 1D94                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1E64  
                           _setMemory_GO 1F84                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1426                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1F9A             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 12CC    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 12A1                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0E63                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1E82  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 1150                         ??_LedPointSelect 0020  
                               ___ftpack 0A1C                             _setSw_Status 1E73  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 14D7  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0C88  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                               __ptext10 0E63                                 __ptext11 1627  
                               __ptext20 1358                                 __ptext12 1D7B  
                               __ptext21 1EEF                                 __ptext13 1D14  
                               __ptext30 0AE1                                 __ptext22 1EDF  
                               __ptext14 1D11                                 __ptext31 0F70  
                               __ptext23 1D94                                 __ptext15 1D3A  
                               __ptext40 032A                                 __ptext32 09BD  
                               __ptext24 1ECF                                 __ptext16 01EF  
                               __ptext41 1F10                                 __ptext33 1277  
                               __ptext25 1E91                                 __ptext17 1D73  
                               __ptext50 0CF7                                 __ptext42 10B4  
                               __ptext34 1F33                                 __ptext26 1D0E  
                               __ptext18 1751                                 __ptext51 1426  
                               __ptext43 0A7D                                 __ptext35 145F  
                               __ptext27 0420                                 __ptext19 0C88  
                               __ptext60 1F21                                 __ptext52 1E82  
                               __ptext44 0D6D                                 __ptext36 13BB  
                               __ptext28 0B48                                 __ptext61 1DE7  
                               __ptext53 1E56                                 __ptext45 11DB  
                               __ptext37 11B8                                 __ptext29 1389  
                               __ptext70 1EFF                                 __ptext62 1D63  
                               __ptext54 1518                                 __ptext46 1097  
                               __ptext38 0904                                 __ptext71 10F1  
                               __ptext63 1FB3                                 __ptext55 12A1  
                               __ptext47 1D0B                                 __ptext39 0697  
                               __ptext80 149A                                 __ptext72 159D  
                               __ptext64 1E3C                                 __ptext56 0801  
                               __ptext48 1E49                                 __ptext81 0DE3  
                               __ptext73 1E0A                                 __ptext65 1D32  
                               __ptext57 1D6B                                 __ptext49 1D08  
                               __ptext90 1D2E                                 __ptext82 095F  
                               __ptext74 0511                                 __ptext66 1D5C  
                               __ptext58 1D05                                 __ptext91 0BB1  
                               __ptext83 107A                                 __ptext75 12F9  
                               __ptext67 07F4                                 __ptext59 1D36  
                               __ptext92 05D8                                 __ptext84 1F6F  
                               __ptext76 1D8B                                 __ptext68 14D7  
                               __ptext93 1E73                                 __ptext85 1F84  
                               __ptext77 1FE6                                 __ptext69 1E16  
                               __ptext94 1DDC                                 __ptext86 1DB1  
                               __ptext78 1D55                                 __ptext95 0C1C  
                               __ptext87 1E2F                                 __ptext79 08A9  
                               __ptext96 15E1                                 __ptext88 12CC  
                               __ptext97 0EE9                                 __ptext89 1D43  
                               __ptext98 074B                                 __ptext99 1150  
                               __product 01C5            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000C  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1E73  
          __end_of_Dimmer_Initialization 1D49             __end_of_setDimmerLights_Main 0904  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D73                 __end_of_CC2500_SIDLEMode 1D2A  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1DD1  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1F6F  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0004  
                            getPF_Safe@i 0020                          _CC2500_ReadByte 1097  
                            _my_MainTime 166D                       _CC2500_InitPATable 10D2  
    __size_of_getDimmerLights_StatusFlag 000A            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0511                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 0164  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 0166  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1559  
            __end_of_Flash_Memory_Modify 15E1                        ??_getPercentValue 0059  
                            _setLog_Code 1389              __end_of_Flash_Memory_Unlock 1D94  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1195  
                     __end_of_setSw_Main 032A                            _Transceive_OK 03D9  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1277                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 124D                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 12F9  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 12CC              __end_of_setDimmerLights_Adj 14D7  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1D0B  
   __size_of_setDimmerLights_IntrControl 01AC                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1E0A                       ?_RF_Initialization 0070  
                             _SPI0Buffer 00D9          __end_of_DelayOff_Initialization 1D2E  
    __size_of_setDimmerLights_IntrIOC_GO 0030                               _OPTION_REG 0095  
                  __size_of_WDT_Clearing 0002                    __end_of_DelayOff_Main 1D32  
                    ??_RF_Initialization 0021                           _setDelayOff_GO 09BD  
       __size_of_setControl_Lights_Table 0067                   __end_of_DelayTimejudge 12A1  
         __end_of_setOverTemp_Exceptions 166D     __size_of_Flash_Memory_Initialization 00C7  
            __size_of_set_TimeoutCleared 0005                            ??_DlyOff_Main 0062  
                  __end_of_DelayTime_1us 1226                 __end_of_Sw_DimmerAdjFunc 1389  
                __end_of_CC2500_ReadByte 10B4             __end_of_setSw_Initialization 1EDF  
                        _Timeout_Counter 1F45                     getPercentValue@value 005B  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 1E22  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1D14  
               __size_of_Sw_DimmerOnFunc 0057                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1D0E                 __end_of_Sw_DimmerOffFunc 0CF7  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0DE3                    __end_of_CC2500_TxData 0AE1  
                         ??_getTemp_Safe 0020                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 159D  
