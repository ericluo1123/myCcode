

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Oct 28 13:46:46 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	intentry,global,class=CODE,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	dabs	1,0x7E,2
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0008                     	;# 
   164  0009                     	;# 
   165  000A                     	;# 
   166  000B                     	;# 
   167  000C                     	;# 
   168  000D                     	;# 
   169  000E                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  001A                     	;# 
   180  001B                     	;# 
   181  001C                     	;# 
   182  008C                     	;# 
   183  008D                     	;# 
   184  008E                     	;# 
   185  0090                     	;# 
   186  0091                     	;# 
   187  0092                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0099                     	;# 
   192  009A                     	;# 
   193  009B                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  0116                     	;# 
   202  0117                     	;# 
   203  011D                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  0191                     	;# 
   208  0191                     	;# 
   209  0192                     	;# 
   210  0193                     	;# 
   211  0193                     	;# 
   212  0194                     	;# 
   213  0195                     	;# 
   214  0196                     	;# 
   215  0197                     	;# 
   216  0199                     	;# 
   217  019A                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019C                     	;# 
   223  019C                     	;# 
   224  019D                     	;# 
   225  019E                     	;# 
   226  019F                     	;# 
   227  020D                     	;# 
   228  0210                     	;# 
   229  0211                     	;# 
   230  0211                     	;# 
   231  0212                     	;# 
   232  0212                     	;# 
   233  0213                     	;# 
   234  0213                     	;# 
   235  0214                     	;# 
   236  0214                     	;# 
   237  0215                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0216                     	;# 
   241  0216                     	;# 
   242  0217                     	;# 
   243  0217                     	;# 
   244  0291                     	;# 
   245  0291                     	;# 
   246  0292                     	;# 
   247  0293                     	;# 
   248  0298                     	;# 
   249  0298                     	;# 
   250  0299                     	;# 
   251  029A                     	;# 
   252  0394                     	;# 
   253  0395                     	;# 
   254  0396                     	;# 
   255  0FE4                     	;# 
   256  0FE5                     	;# 
   257  0FE6                     	;# 
   258  0FE7                     	;# 
   259  0FE8                     	;# 
   260  0FE9                     	;# 
   261  0FEA                     	;# 
   262  0FEB                     	;# 
   263  0FED                     	;# 
   264  0FEE                     	;# 
   265  0FEF                     	;# 
   266  0000                     	;# 
   267  0001                     	;# 
   268  0002                     	;# 
   269  0003                     	;# 
   270  0004                     	;# 
   271  0005                     	;# 
   272  0006                     	;# 
   273  0007                     	;# 
   274  0008                     	;# 
   275  0009                     	;# 
   276  000A                     	;# 
   277  000B                     	;# 
   278  000C                     	;# 
   279  000D                     	;# 
   280  000E                     	;# 
   281  0010                     	;# 
   282  0011                     	;# 
   283  0012                     	;# 
   284  0015                     	;# 
   285  0016                     	;# 
   286  0016                     	;# 
   287  0017                     	;# 
   288  0018                     	;# 
   289  0019                     	;# 
   290  001A                     	;# 
   291  001B                     	;# 
   292  001C                     	;# 
   293  008C                     	;# 
   294  008D                     	;# 
   295  008E                     	;# 
   296  0090                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  010C                     	;# 
   310  010D                     	;# 
   311  010E                     	;# 
   312  0116                     	;# 
   313  0117                     	;# 
   314  011D                     	;# 
   315  018C                     	;# 
   316  018D                     	;# 
   317  018E                     	;# 
   318  0191                     	;# 
   319  0191                     	;# 
   320  0192                     	;# 
   321  0193                     	;# 
   322  0193                     	;# 
   323  0194                     	;# 
   324  0195                     	;# 
   325  0196                     	;# 
   326  0197                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019B                     	;# 
   332  019B                     	;# 
   333  019C                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020D                     	;# 
   339  0210                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0291                     	;# 
   356  0291                     	;# 
   357  0292                     	;# 
   358  0293                     	;# 
   359  0298                     	;# 
   360  0298                     	;# 
   361  0299                     	;# 
   362  029A                     	;# 
   363  0394                     	;# 
   364  0395                     	;# 
   365  0396                     	;# 
   366  0FE4                     	;# 
   367  0FE5                     	;# 
   368  0FE6                     	;# 
   369  0FE7                     	;# 
   370  0FE8                     	;# 
   371  0FE9                     	;# 
   372  0FEA                     	;# 
   373  0FEB                     	;# 
   374  0FED                     	;# 
   375  0FEE                     	;# 
   376  0FEF                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0008                     	;# 
   386  0009                     	;# 
   387  000A                     	;# 
   388  000B                     	;# 
   389  000C                     	;# 
   390  000D                     	;# 
   391  000E                     	;# 
   392  0010                     	;# 
   393  0011                     	;# 
   394  0012                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0016                     	;# 
   398  0017                     	;# 
   399  0018                     	;# 
   400  0019                     	;# 
   401  001A                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0090                     	;# 
   408  0091                     	;# 
   409  0092                     	;# 
   410  0095                     	;# 
   411  0096                     	;# 
   412  0097                     	;# 
   413  0099                     	;# 
   414  009A                     	;# 
   415  009B                     	;# 
   416  009B                     	;# 
   417  009C                     	;# 
   418  009D                     	;# 
   419  009E                     	;# 
   420  010C                     	;# 
   421  010D                     	;# 
   422  010E                     	;# 
   423  0116                     	;# 
   424  0117                     	;# 
   425  011D                     	;# 
   426  018C                     	;# 
   427  018D                     	;# 
   428  018E                     	;# 
   429  0191                     	;# 
   430  0191                     	;# 
   431  0192                     	;# 
   432  0193                     	;# 
   433  0193                     	;# 
   434  0194                     	;# 
   435  0195                     	;# 
   436  0196                     	;# 
   437  0197                     	;# 
   438  0199                     	;# 
   439  019A                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019C                     	;# 
   446  019D                     	;# 
   447  019E                     	;# 
   448  019F                     	;# 
   449  020D                     	;# 
   450  0210                     	;# 
   451  0211                     	;# 
   452  0211                     	;# 
   453  0212                     	;# 
   454  0212                     	;# 
   455  0213                     	;# 
   456  0213                     	;# 
   457  0214                     	;# 
   458  0214                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0215                     	;# 
   462  0216                     	;# 
   463  0216                     	;# 
   464  0217                     	;# 
   465  0217                     	;# 
   466  0291                     	;# 
   467  0291                     	;# 
   468  0292                     	;# 
   469  0293                     	;# 
   470  0298                     	;# 
   471  0298                     	;# 
   472  0299                     	;# 
   473  029A                     	;# 
   474  0394                     	;# 
   475  0395                     	;# 
   476  0396                     	;# 
   477  0FE4                     	;# 
   478  0FE5                     	;# 
   479  0FE6                     	;# 
   480  0FE7                     	;# 
   481  0FE8                     	;# 
   482  0FE9                     	;# 
   483  0FEA                     	;# 
   484  0FEB                     	;# 
   485  0FED                     	;# 
   486  0FEE                     	;# 
   487  0FEF                     	;# 
   488  0000                     	;# 
   489  0001                     	;# 
   490  0002                     	;# 
   491  0003                     	;# 
   492  0004                     	;# 
   493  0005                     	;# 
   494  0006                     	;# 
   495  0007                     	;# 
   496  0008                     	;# 
   497  0009                     	;# 
   498  000A                     	;# 
   499  000B                     	;# 
   500  000C                     	;# 
   501  000D                     	;# 
   502  000E                     	;# 
   503  0010                     	;# 
   504  0011                     	;# 
   505  0012                     	;# 
   506  0015                     	;# 
   507  0016                     	;# 
   508  0016                     	;# 
   509  0017                     	;# 
   510  0018                     	;# 
   511  0019                     	;# 
   512  001A                     	;# 
   513  001B                     	;# 
   514  001C                     	;# 
   515  008C                     	;# 
   516  008D                     	;# 
   517  008E                     	;# 
   518  0090                     	;# 
   519  0091                     	;# 
   520  0092                     	;# 
   521  0095                     	;# 
   522  0096                     	;# 
   523  0097                     	;# 
   524  0099                     	;# 
   525  009A                     	;# 
   526  009B                     	;# 
   527  009B                     	;# 
   528  009C                     	;# 
   529  009D                     	;# 
   530  009E                     	;# 
   531  010C                     	;# 
   532  010D                     	;# 
   533  010E                     	;# 
   534  0116                     	;# 
   535  0117                     	;# 
   536  011D                     	;# 
   537  018C                     	;# 
   538  018D                     	;# 
   539  018E                     	;# 
   540  0191                     	;# 
   541  0191                     	;# 
   542  0192                     	;# 
   543  0193                     	;# 
   544  0193                     	;# 
   545  0194                     	;# 
   546  0195                     	;# 
   547  0196                     	;# 
   548  0197                     	;# 
   549  0199                     	;# 
   550  019A                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019B                     	;# 
   554  019B                     	;# 
   555  019C                     	;# 
   556  019C                     	;# 
   557  019D                     	;# 
   558  019E                     	;# 
   559  019F                     	;# 
   560  020D                     	;# 
   561  0210                     	;# 
   562  0211                     	;# 
   563  0211                     	;# 
   564  0212                     	;# 
   565  0212                     	;# 
   566  0213                     	;# 
   567  0213                     	;# 
   568  0214                     	;# 
   569  0214                     	;# 
   570  0215                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0216                     	;# 
   574  0216                     	;# 
   575  0217                     	;# 
   576  0217                     	;# 
   577  0291                     	;# 
   578  0291                     	;# 
   579  0292                     	;# 
   580  0293                     	;# 
   581  0298                     	;# 
   582  0298                     	;# 
   583  0299                     	;# 
   584  029A                     	;# 
   585  0394                     	;# 
   586  0395                     	;# 
   587  0396                     	;# 
   588  0FE4                     	;# 
   589  0FE5                     	;# 
   590  0FE6                     	;# 
   591  0FE7                     	;# 
   592  0FE8                     	;# 
   593  0FE9                     	;# 
   594  0FEA                     	;# 
   595  0FEB                     	;# 
   596  0FED                     	;# 
   597  0FEE                     	;# 
   598  0FEF                     	;# 
   599  0000                     	;# 
   600  0001                     	;# 
   601  0002                     	;# 
   602  0003                     	;# 
   603  0004                     	;# 
   604  0005                     	;# 
   605  0006                     	;# 
   606  0007                     	;# 
   607  0008                     	;# 
   608  0009                     	;# 
   609  000A                     	;# 
   610  000B                     	;# 
   611  000C                     	;# 
   612  000D                     	;# 
   613  000E                     	;# 
   614  0010                     	;# 
   615  0011                     	;# 
   616  0012                     	;# 
   617  0015                     	;# 
   618  0016                     	;# 
   619  0016                     	;# 
   620  0017                     	;# 
   621  0018                     	;# 
   622  0019                     	;# 
   623  001A                     	;# 
   624  001B                     	;# 
   625  001C                     	;# 
   626  008C                     	;# 
   627  008D                     	;# 
   628  008E                     	;# 
   629  0090                     	;# 
   630  0091                     	;# 
   631  0092                     	;# 
   632  0095                     	;# 
   633  0096                     	;# 
   634  0097                     	;# 
   635  0099                     	;# 
   636  009A                     	;# 
   637  009B                     	;# 
   638  009B                     	;# 
   639  009C                     	;# 
   640  009D                     	;# 
   641  009E                     	;# 
   642  010C                     	;# 
   643  010D                     	;# 
   644  010E                     	;# 
   645  0116                     	;# 
   646  0117                     	;# 
   647  011D                     	;# 
   648  018C                     	;# 
   649  018D                     	;# 
   650  018E                     	;# 
   651  0191                     	;# 
   652  0191                     	;# 
   653  0192                     	;# 
   654  0193                     	;# 
   655  0193                     	;# 
   656  0194                     	;# 
   657  0195                     	;# 
   658  0196                     	;# 
   659  0197                     	;# 
   660  0199                     	;# 
   661  019A                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019C                     	;# 
   667  019C                     	;# 
   668  019D                     	;# 
   669  019E                     	;# 
   670  019F                     	;# 
   671  020D                     	;# 
   672  0210                     	;# 
   673  0211                     	;# 
   674  0211                     	;# 
   675  0212                     	;# 
   676  0212                     	;# 
   677  0213                     	;# 
   678  0213                     	;# 
   679  0214                     	;# 
   680  0214                     	;# 
   681  0215                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0216                     	;# 
   685  0216                     	;# 
   686  0217                     	;# 
   687  0217                     	;# 
   688  0291                     	;# 
   689  0291                     	;# 
   690  0292                     	;# 
   691  0293                     	;# 
   692  0298                     	;# 
   693  0298                     	;# 
   694  0299                     	;# 
   695  029A                     	;# 
   696  0394                     	;# 
   697  0395                     	;# 
   698  0396                     	;# 
   699  0FE4                     	;# 
   700  0FE5                     	;# 
   701  0FE6                     	;# 
   702  0FE7                     	;# 
   703  0FE8                     	;# 
   704  0FE9                     	;# 
   705  0FEA                     	;# 
   706  0FEB                     	;# 
   707  0FED                     	;# 
   708  0FEE                     	;# 
   709  0FEF                     	;# 
   710  0000                     	;# 
   711  0001                     	;# 
   712  0002                     	;# 
   713  0003                     	;# 
   714  0004                     	;# 
   715  0005                     	;# 
   716  0006                     	;# 
   717  0007                     	;# 
   718  0008                     	;# 
   719  0009                     	;# 
   720  000A                     	;# 
   721  000B                     	;# 
   722  000C                     	;# 
   723  000D                     	;# 
   724  000E                     	;# 
   725  0010                     	;# 
   726  0011                     	;# 
   727  0012                     	;# 
   728  0015                     	;# 
   729  0016                     	;# 
   730  0016                     	;# 
   731  0017                     	;# 
   732  0018                     	;# 
   733  0019                     	;# 
   734  001A                     	;# 
   735  001B                     	;# 
   736  001C                     	;# 
   737  008C                     	;# 
   738  008D                     	;# 
   739  008E                     	;# 
   740  0090                     	;# 
   741  0091                     	;# 
   742  0092                     	;# 
   743  0095                     	;# 
   744  0096                     	;# 
   745  0097                     	;# 
   746  0099                     	;# 
   747  009A                     	;# 
   748  009B                     	;# 
   749  009B                     	;# 
   750  009C                     	;# 
   751  009D                     	;# 
   752  009E                     	;# 
   753  010C                     	;# 
   754  010D                     	;# 
   755  010E                     	;# 
   756  0116                     	;# 
   757  0117                     	;# 
   758  011D                     	;# 
   759  018C                     	;# 
   760  018D                     	;# 
   761  018E                     	;# 
   762  0191                     	;# 
   763  0191                     	;# 
   764  0192                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0197                     	;# 
   771  0199                     	;# 
   772  019A                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019B                     	;# 
   776  019B                     	;# 
   777  019C                     	;# 
   778  019C                     	;# 
   779  019D                     	;# 
   780  019E                     	;# 
   781  019F                     	;# 
   782  020D                     	;# 
   783  0210                     	;# 
   784  0211                     	;# 
   785  0211                     	;# 
   786  0212                     	;# 
   787  0212                     	;# 
   788  0213                     	;# 
   789  0213                     	;# 
   790  0214                     	;# 
   791  0214                     	;# 
   792  0215                     	;# 
   793  0215                     	;# 
   794  0215                     	;# 
   795  0216                     	;# 
   796  0216                     	;# 
   797  0217                     	;# 
   798  0217                     	;# 
   799  0291                     	;# 
   800  0291                     	;# 
   801  0292                     	;# 
   802  0293                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  0394                     	;# 
   808  0395                     	;# 
   809  0396                     	;# 
   810  0FE4                     	;# 
   811  0FE5                     	;# 
   812  0FE6                     	;# 
   813  0FE7                     	;# 
   814  0FE8                     	;# 
   815  0FE9                     	;# 
   816  0FEA                     	;# 
   817  0FEB                     	;# 
   818  0FED                     	;# 
   819  0FEE                     	;# 
   820  0FEF                     	;# 
   821  0000                     	;# 
   822  0001                     	;# 
   823  0002                     	;# 
   824  0003                     	;# 
   825  0004                     	;# 
   826  0005                     	;# 
   827  0006                     	;# 
   828  0007                     	;# 
   829  0008                     	;# 
   830  0009                     	;# 
   831  000A                     	;# 
   832  000B                     	;# 
   833  000C                     	;# 
   834  000D                     	;# 
   835  000E                     	;# 
   836  0010                     	;# 
   837  0011                     	;# 
   838  0012                     	;# 
   839  0015                     	;# 
   840  0016                     	;# 
   841  0016                     	;# 
   842  0017                     	;# 
   843  0018                     	;# 
   844  0019                     	;# 
   845  001A                     	;# 
   846  001B                     	;# 
   847  001C                     	;# 
   848  008C                     	;# 
   849  008D                     	;# 
   850  008E                     	;# 
   851  0090                     	;# 
   852  0091                     	;# 
   853  0092                     	;# 
   854  0095                     	;# 
   855  0096                     	;# 
   856  0097                     	;# 
   857  0099                     	;# 
   858  009A                     	;# 
   859  009B                     	;# 
   860  009B                     	;# 
   861  009C                     	;# 
   862  009D                     	;# 
   863  009E                     	;# 
   864  010C                     	;# 
   865  010D                     	;# 
   866  010E                     	;# 
   867  0116                     	;# 
   868  0117                     	;# 
   869  011D                     	;# 
   870  018C                     	;# 
   871  018D                     	;# 
   872  018E                     	;# 
   873  0191                     	;# 
   874  0191                     	;# 
   875  0192                     	;# 
   876  0193                     	;# 
   877  0193                     	;# 
   878  0194                     	;# 
   879  0195                     	;# 
   880  0196                     	;# 
   881  0197                     	;# 
   882  0199                     	;# 
   883  019A                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019D                     	;# 
   891  019E                     	;# 
   892  019F                     	;# 
   893  020D                     	;# 
   894  0210                     	;# 
   895  0211                     	;# 
   896  0211                     	;# 
   897  0212                     	;# 
   898  0212                     	;# 
   899  0213                     	;# 
   900  0213                     	;# 
   901  0214                     	;# 
   902  0214                     	;# 
   903  0215                     	;# 
   904  0215                     	;# 
   905  0215                     	;# 
   906  0216                     	;# 
   907  0216                     	;# 
   908  0217                     	;# 
   909  0217                     	;# 
   910  0291                     	;# 
   911  0291                     	;# 
   912  0292                     	;# 
   913  0293                     	;# 
   914  0298                     	;# 
   915  0298                     	;# 
   916  0299                     	;# 
   917  029A                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  0FE4                     	;# 
   922  0FE5                     	;# 
   923  0FE6                     	;# 
   924  0FE7                     	;# 
   925  0FE8                     	;# 
   926  0FE9                     	;# 
   927  0FEA                     	;# 
   928  0FEB                     	;# 
   929  0FED                     	;# 
   930  0FEE                     	;# 
   931  0FEF                     	;# 
   932  0000                     	;# 
   933  0001                     	;# 
   934  0002                     	;# 
   935  0003                     	;# 
   936  0004                     	;# 
   937  0005                     	;# 
   938  0006                     	;# 
   939  0007                     	;# 
   940  0008                     	;# 
   941  0009                     	;# 
   942  000A                     	;# 
   943  000B                     	;# 
   944  000C                     	;# 
   945  000D                     	;# 
   946  000E                     	;# 
   947  0010                     	;# 
   948  0011                     	;# 
   949  0012                     	;# 
   950  0015                     	;# 
   951  0016                     	;# 
   952  0016                     	;# 
   953  0017                     	;# 
   954  0018                     	;# 
   955  0019                     	;# 
   956  001A                     	;# 
   957  001B                     	;# 
   958  001C                     	;# 
   959  008C                     	;# 
   960  008D                     	;# 
   961  008E                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0095                     	;# 
   966  0096                     	;# 
   967  0097                     	;# 
   968  0099                     	;# 
   969  009A                     	;# 
   970  009B                     	;# 
   971  009B                     	;# 
   972  009C                     	;# 
   973  009D                     	;# 
   974  009E                     	;# 
   975  010C                     	;# 
   976  010D                     	;# 
   977  010E                     	;# 
   978  0116                     	;# 
   979  0117                     	;# 
   980  011D                     	;# 
   981  018C                     	;# 
   982  018D                     	;# 
   983  018E                     	;# 
   984  0191                     	;# 
   985  0191                     	;# 
   986  0192                     	;# 
   987  0193                     	;# 
   988  0193                     	;# 
   989  0194                     	;# 
   990  0195                     	;# 
   991  0196                     	;# 
   992  0197                     	;# 
   993  0199                     	;# 
   994  019A                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019B                     	;# 
   998  019B                     	;# 
   999  019C                     	;# 
  1000  019C                     	;# 
  1001  019D                     	;# 
  1002  019E                     	;# 
  1003  019F                     	;# 
  1004  020D                     	;# 
  1005  0210                     	;# 
  1006  0211                     	;# 
  1007  0211                     	;# 
  1008  0212                     	;# 
  1009  0212                     	;# 
  1010  0213                     	;# 
  1011  0213                     	;# 
  1012  0214                     	;# 
  1013  0214                     	;# 
  1014  0215                     	;# 
  1015  0215                     	;# 
  1016  0215                     	;# 
  1017  0216                     	;# 
  1018  0216                     	;# 
  1019  0217                     	;# 
  1020  0217                     	;# 
  1021  0291                     	;# 
  1022  0291                     	;# 
  1023  0292                     	;# 
  1024  0293                     	;# 
  1025  0298                     	;# 
  1026  0298                     	;# 
  1027  0299                     	;# 
  1028  029A                     	;# 
  1029  0394                     	;# 
  1030  0395                     	;# 
  1031  0396                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0010                     	;# 
  1059  0011                     	;# 
  1060  0012                     	;# 
  1061  0015                     	;# 
  1062  0016                     	;# 
  1063  0016                     	;# 
  1064  0017                     	;# 
  1065  0018                     	;# 
  1066  0019                     	;# 
  1067  001A                     	;# 
  1068  001B                     	;# 
  1069  001C                     	;# 
  1070  008C                     	;# 
  1071  008D                     	;# 
  1072  008E                     	;# 
  1073  0090                     	;# 
  1074  0091                     	;# 
  1075  0092                     	;# 
  1076  0095                     	;# 
  1077  0096                     	;# 
  1078  0097                     	;# 
  1079  0099                     	;# 
  1080  009A                     	;# 
  1081  009B                     	;# 
  1082  009B                     	;# 
  1083  009C                     	;# 
  1084  009D                     	;# 
  1085  009E                     	;# 
  1086  010C                     	;# 
  1087  010D                     	;# 
  1088  010E                     	;# 
  1089  0116                     	;# 
  1090  0117                     	;# 
  1091  011D                     	;# 
  1092  018C                     	;# 
  1093  018D                     	;# 
  1094  018E                     	;# 
  1095  0191                     	;# 
  1096  0191                     	;# 
  1097  0192                     	;# 
  1098  0193                     	;# 
  1099  0193                     	;# 
  1100  0194                     	;# 
  1101  0195                     	;# 
  1102  0196                     	;# 
  1103  0197                     	;# 
  1104  0199                     	;# 
  1105  019A                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019B                     	;# 
  1109  019B                     	;# 
  1110  019C                     	;# 
  1111  019C                     	;# 
  1112  019D                     	;# 
  1113  019E                     	;# 
  1114  019F                     	;# 
  1115  020D                     	;# 
  1116  0210                     	;# 
  1117  0211                     	;# 
  1118  0211                     	;# 
  1119  0212                     	;# 
  1120  0212                     	;# 
  1121  0213                     	;# 
  1122  0213                     	;# 
  1123  0214                     	;# 
  1124  0214                     	;# 
  1125  0215                     	;# 
  1126  0215                     	;# 
  1127  0215                     	;# 
  1128  0216                     	;# 
  1129  0216                     	;# 
  1130  0217                     	;# 
  1131  0217                     	;# 
  1132  0291                     	;# 
  1133  0291                     	;# 
  1134  0292                     	;# 
  1135  0293                     	;# 
  1136  0298                     	;# 
  1137  0298                     	;# 
  1138  0299                     	;# 
  1139  029A                     	;# 
  1140  0394                     	;# 
  1141  0395                     	;# 
  1142  0396                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0015                     	;# 
  1173  0016                     	;# 
  1174  0016                     	;# 
  1175  0017                     	;# 
  1176  0018                     	;# 
  1177  0019                     	;# 
  1178  001A                     	;# 
  1179  001B                     	;# 
  1180  001C                     	;# 
  1181  008C                     	;# 
  1182  008D                     	;# 
  1183  008E                     	;# 
  1184  0090                     	;# 
  1185  0091                     	;# 
  1186  0092                     	;# 
  1187  0095                     	;# 
  1188  0096                     	;# 
  1189  0097                     	;# 
  1190  0099                     	;# 
  1191  009A                     	;# 
  1192  009B                     	;# 
  1193  009B                     	;# 
  1194  009C                     	;# 
  1195  009D                     	;# 
  1196  009E                     	;# 
  1197  010C                     	;# 
  1198  010D                     	;# 
  1199  010E                     	;# 
  1200  0116                     	;# 
  1201  0117                     	;# 
  1202  011D                     	;# 
  1203  018C                     	;# 
  1204  018D                     	;# 
  1205  018E                     	;# 
  1206  0191                     	;# 
  1207  0191                     	;# 
  1208  0192                     	;# 
  1209  0193                     	;# 
  1210  0193                     	;# 
  1211  0194                     	;# 
  1212  0195                     	;# 
  1213  0196                     	;# 
  1214  0197                     	;# 
  1215  0199                     	;# 
  1216  019A                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019B                     	;# 
  1220  019B                     	;# 
  1221  019C                     	;# 
  1222  019C                     	;# 
  1223  019D                     	;# 
  1224  019E                     	;# 
  1225  019F                     	;# 
  1226  020D                     	;# 
  1227  0210                     	;# 
  1228  0211                     	;# 
  1229  0211                     	;# 
  1230  0212                     	;# 
  1231  0212                     	;# 
  1232  0213                     	;# 
  1233  0213                     	;# 
  1234  0214                     	;# 
  1235  0214                     	;# 
  1236  0215                     	;# 
  1237  0215                     	;# 
  1238  0215                     	;# 
  1239  0216                     	;# 
  1240  0216                     	;# 
  1241  0217                     	;# 
  1242  0217                     	;# 
  1243  0291                     	;# 
  1244  0291                     	;# 
  1245  0292                     	;# 
  1246  0293                     	;# 
  1247  0298                     	;# 
  1248  0298                     	;# 
  1249  0299                     	;# 
  1250  029A                     	;# 
  1251  0394                     	;# 
  1252  0395                     	;# 
  1253  0396                     	;# 
  1254  0FE4                     	;# 
  1255  0FE5                     	;# 
  1256  0FE6                     	;# 
  1257  0FE7                     	;# 
  1258  0FE8                     	;# 
  1259  0FE9                     	;# 
  1260  0FEA                     	;# 
  1261  0FEB                     	;# 
  1262  0FED                     	;# 
  1263  0FEE                     	;# 
  1264  0FEF                     	;# 
  1265  0000                     	;# 
  1266  0001                     	;# 
  1267  0002                     	;# 
  1268  0003                     	;# 
  1269  0004                     	;# 
  1270  0005                     	;# 
  1271  0006                     	;# 
  1272  0007                     	;# 
  1273  0008                     	;# 
  1274  0009                     	;# 
  1275  000A                     	;# 
  1276  000B                     	;# 
  1277  000C                     	;# 
  1278  000D                     	;# 
  1279  000E                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0015                     	;# 
  1284  0016                     	;# 
  1285  0016                     	;# 
  1286  0017                     	;# 
  1287  0018                     	;# 
  1288  0019                     	;# 
  1289  001A                     	;# 
  1290  001B                     	;# 
  1291  001C                     	;# 
  1292  008C                     	;# 
  1293  008D                     	;# 
  1294  008E                     	;# 
  1295  0090                     	;# 
  1296  0091                     	;# 
  1297  0092                     	;# 
  1298  0095                     	;# 
  1299  0096                     	;# 
  1300  0097                     	;# 
  1301  0099                     	;# 
  1302  009A                     	;# 
  1303  009B                     	;# 
  1304  009B                     	;# 
  1305  009C                     	;# 
  1306  009D                     	;# 
  1307  009E                     	;# 
  1308  010C                     	;# 
  1309  010D                     	;# 
  1310  010E                     	;# 
  1311  0116                     	;# 
  1312  0117                     	;# 
  1313  011D                     	;# 
  1314  018C                     	;# 
  1315  018D                     	;# 
  1316  018E                     	;# 
  1317  0191                     	;# 
  1318  0191                     	;# 
  1319  0192                     	;# 
  1320  0193                     	;# 
  1321  0193                     	;# 
  1322  0194                     	;# 
  1323  0195                     	;# 
  1324  0196                     	;# 
  1325  0197                     	;# 
  1326  0199                     	;# 
  1327  019A                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019B                     	;# 
  1331  019B                     	;# 
  1332  019C                     	;# 
  1333  019C                     	;# 
  1334  019D                     	;# 
  1335  019E                     	;# 
  1336  019F                     	;# 
  1337  020D                     	;# 
  1338  0210                     	;# 
  1339  0211                     	;# 
  1340  0211                     	;# 
  1341  0212                     	;# 
  1342  0212                     	;# 
  1343  0213                     	;# 
  1344  0213                     	;# 
  1345  0214                     	;# 
  1346  0214                     	;# 
  1347  0215                     	;# 
  1348  0215                     	;# 
  1349  0215                     	;# 
  1350  0216                     	;# 
  1351  0216                     	;# 
  1352  0217                     	;# 
  1353  0217                     	;# 
  1354  0291                     	;# 
  1355  0291                     	;# 
  1356  0292                     	;# 
  1357  0293                     	;# 
  1358  0298                     	;# 
  1359  0298                     	;# 
  1360  0299                     	;# 
  1361  029A                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0FE4                     	;# 
  1366  0FE5                     	;# 
  1367  0FE6                     	;# 
  1368  0FE7                     	;# 
  1369  0FE8                     	;# 
  1370  0FE9                     	;# 
  1371  0FEA                     	;# 
  1372  0FEB                     	;# 
  1373  0FED                     	;# 
  1374  0FEE                     	;# 
  1375  0FEF                     	;# 
  1376  0000                     	;# 
  1377  0001                     	;# 
  1378  0002                     	;# 
  1379  0003                     	;# 
  1380  0004                     	;# 
  1381  0005                     	;# 
  1382  0006                     	;# 
  1383  0007                     	;# 
  1384  0008                     	;# 
  1385  0009                     	;# 
  1386  000A                     	;# 
  1387  000B                     	;# 
  1388  000C                     	;# 
  1389  000D                     	;# 
  1390  000E                     	;# 
  1391  0010                     	;# 
  1392  0011                     	;# 
  1393  0012                     	;# 
  1394  0015                     	;# 
  1395  0016                     	;# 
  1396  0016                     	;# 
  1397  0017                     	;# 
  1398  0018                     	;# 
  1399  0019                     	;# 
  1400  001A                     	;# 
  1401  001B                     	;# 
  1402  001C                     	;# 
  1403  008C                     	;# 
  1404  008D                     	;# 
  1405  008E                     	;# 
  1406  0090                     	;# 
  1407  0091                     	;# 
  1408  0092                     	;# 
  1409  0095                     	;# 
  1410  0096                     	;# 
  1411  0097                     	;# 
  1412  0099                     	;# 
  1413  009A                     	;# 
  1414  009B                     	;# 
  1415  009B                     	;# 
  1416  009C                     	;# 
  1417  009D                     	;# 
  1418  009E                     	;# 
  1419  010C                     	;# 
  1420  010D                     	;# 
  1421  010E                     	;# 
  1422  0116                     	;# 
  1423  0117                     	;# 
  1424  011D                     	;# 
  1425  018C                     	;# 
  1426  018D                     	;# 
  1427  018E                     	;# 
  1428  0191                     	;# 
  1429  0191                     	;# 
  1430  0192                     	;# 
  1431  0193                     	;# 
  1432  0193                     	;# 
  1433  0194                     	;# 
  1434  0195                     	;# 
  1435  0196                     	;# 
  1436  0197                     	;# 
  1437  0199                     	;# 
  1438  019A                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019B                     	;# 
  1442  019B                     	;# 
  1443  019C                     	;# 
  1444  019C                     	;# 
  1445  019D                     	;# 
  1446  019E                     	;# 
  1447  019F                     	;# 
  1448  020D                     	;# 
  1449  0210                     	;# 
  1450  0211                     	;# 
  1451  0211                     	;# 
  1452  0212                     	;# 
  1453  0212                     	;# 
  1454  0213                     	;# 
  1455  0213                     	;# 
  1456  0214                     	;# 
  1457  0214                     	;# 
  1458  0215                     	;# 
  1459  0215                     	;# 
  1460  0215                     	;# 
  1461  0216                     	;# 
  1462  0216                     	;# 
  1463  0217                     	;# 
  1464  0217                     	;# 
  1465  0291                     	;# 
  1466  0291                     	;# 
  1467  0292                     	;# 
  1468  0293                     	;# 
  1469  0298                     	;# 
  1470  0298                     	;# 
  1471  0299                     	;# 
  1472  029A                     	;# 
  1473  0394                     	;# 
  1474  0395                     	;# 
  1475  0396                     	;# 
  1476  0FE4                     	;# 
  1477  0FE5                     	;# 
  1478  0FE6                     	;# 
  1479  0FE7                     	;# 
  1480  0FE8                     	;# 
  1481  0FE9                     	;# 
  1482  0FEA                     	;# 
  1483  0FEB                     	;# 
  1484  0FED                     	;# 
  1485  0FEE                     	;# 
  1486  0FEF                     	;# 
  1487  0000                     	;# 
  1488  0001                     	;# 
  1489  0002                     	;# 
  1490  0003                     	;# 
  1491  0004                     	;# 
  1492  0005                     	;# 
  1493  0006                     	;# 
  1494  0007                     	;# 
  1495  0008                     	;# 
  1496  0009                     	;# 
  1497  000A                     	;# 
  1498  000B                     	;# 
  1499  000C                     	;# 
  1500  000D                     	;# 
  1501  000E                     	;# 
  1502  0010                     	;# 
  1503  0011                     	;# 
  1504  0012                     	;# 
  1505  0015                     	;# 
  1506  0016                     	;# 
  1507  0016                     	;# 
  1508  0017                     	;# 
  1509  0018                     	;# 
  1510  0019                     	;# 
  1511  001A                     	;# 
  1512  001B                     	;# 
  1513  001C                     	;# 
  1514  008C                     	;# 
  1515  008D                     	;# 
  1516  008E                     	;# 
  1517  0090                     	;# 
  1518  0091                     	;# 
  1519  0092                     	;# 
  1520  0095                     	;# 
  1521  0096                     	;# 
  1522  0097                     	;# 
  1523  0099                     	;# 
  1524  009A                     	;# 
  1525  009B                     	;# 
  1526  009B                     	;# 
  1527  009C                     	;# 
  1528  009D                     	;# 
  1529  009E                     	;# 
  1530  010C                     	;# 
  1531  010D                     	;# 
  1532  010E                     	;# 
  1533  0116                     	;# 
  1534  0117                     	;# 
  1535  011D                     	;# 
  1536  018C                     	;# 
  1537  018D                     	;# 
  1538  018E                     	;# 
  1539  0191                     	;# 
  1540  0191                     	;# 
  1541  0192                     	;# 
  1542  0193                     	;# 
  1543  0193                     	;# 
  1544  0194                     	;# 
  1545  0195                     	;# 
  1546  0196                     	;# 
  1547  0197                     	;# 
  1548  0199                     	;# 
  1549  019A                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019B                     	;# 
  1553  019B                     	;# 
  1554  019C                     	;# 
  1555  019C                     	;# 
  1556  019D                     	;# 
  1557  019E                     	;# 
  1558  019F                     	;# 
  1559  020D                     	;# 
  1560  0210                     	;# 
  1561  0211                     	;# 
  1562  0211                     	;# 
  1563  0212                     	;# 
  1564  0212                     	;# 
  1565  0213                     	;# 
  1566  0213                     	;# 
  1567  0214                     	;# 
  1568  0214                     	;# 
  1569  0215                     	;# 
  1570  0215                     	;# 
  1571  0215                     	;# 
  1572  0216                     	;# 
  1573  0216                     	;# 
  1574  0217                     	;# 
  1575  0217                     	;# 
  1576  0291                     	;# 
  1577  0291                     	;# 
  1578  0292                     	;# 
  1579  0293                     	;# 
  1580  0298                     	;# 
  1581  0298                     	;# 
  1582  0299                     	;# 
  1583  029A                     	;# 
  1584  0394                     	;# 
  1585  0395                     	;# 
  1586  0396                     	;# 
  1587  0FE4                     	;# 
  1588  0FE5                     	;# 
  1589  0FE6                     	;# 
  1590  0FE7                     	;# 
  1591  0FE8                     	;# 
  1592  0FE9                     	;# 
  1593  0FEA                     	;# 
  1594  0FEB                     	;# 
  1595  0FED                     	;# 
  1596  0FEE                     	;# 
  1597  0FEF                     	;# 
  1598  0000                     	;# 
  1599  0001                     	;# 
  1600  0002                     	;# 
  1601  0003                     	;# 
  1602  0004                     	;# 
  1603  0005                     	;# 
  1604  0006                     	;# 
  1605  0007                     	;# 
  1606  0008                     	;# 
  1607  0009                     	;# 
  1608  000A                     	;# 
  1609  000B                     	;# 
  1610  000C                     	;# 
  1611  000D                     	;# 
  1612  000E                     	;# 
  1613  0010                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  008C                     	;# 
  1626  008D                     	;# 
  1627  008E                     	;# 
  1628  0090                     	;# 
  1629  0091                     	;# 
  1630  0092                     	;# 
  1631  0095                     	;# 
  1632  0096                     	;# 
  1633  0097                     	;# 
  1634  0099                     	;# 
  1635  009A                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  010C                     	;# 
  1642  010D                     	;# 
  1643  010E                     	;# 
  1644  0116                     	;# 
  1645  0117                     	;# 
  1646  011D                     	;# 
  1647  018C                     	;# 
  1648  018D                     	;# 
  1649  018E                     	;# 
  1650  0191                     	;# 
  1651  0191                     	;# 
  1652  0192                     	;# 
  1653  0193                     	;# 
  1654  0193                     	;# 
  1655  0194                     	;# 
  1656  0195                     	;# 
  1657  0196                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019C                     	;# 
  1666  019C                     	;# 
  1667  019D                     	;# 
  1668  019E                     	;# 
  1669  019F                     	;# 
  1670  020D                     	;# 
  1671  0210                     	;# 
  1672  0211                     	;# 
  1673  0211                     	;# 
  1674  0212                     	;# 
  1675  0212                     	;# 
  1676  0213                     	;# 
  1677  0213                     	;# 
  1678  0214                     	;# 
  1679  0214                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0215                     	;# 
  1683  0216                     	;# 
  1684  0216                     	;# 
  1685  0217                     	;# 
  1686  0217                     	;# 
  1687  0291                     	;# 
  1688  0291                     	;# 
  1689  0292                     	;# 
  1690  0293                     	;# 
  1691  0298                     	;# 
  1692  0298                     	;# 
  1693  0299                     	;# 
  1694  029A                     	;# 
  1695  0394                     	;# 
  1696  0395                     	;# 
  1697  0396                     	;# 
  1698  0FE4                     	;# 
  1699  0FE5                     	;# 
  1700  0FE6                     	;# 
  1701  0FE7                     	;# 
  1702  0FE8                     	;# 
  1703  0FE9                     	;# 
  1704  0FEA                     	;# 
  1705  0FEB                     	;# 
  1706  0FED                     	;# 
  1707  0FEE                     	;# 
  1708  0FEF                     	;# 
  1709  0000                     	;# 
  1710  0001                     	;# 
  1711  0002                     	;# 
  1712  0003                     	;# 
  1713  0004                     	;# 
  1714  0005                     	;# 
  1715  0006                     	;# 
  1716  0007                     	;# 
  1717  0008                     	;# 
  1718  0009                     	;# 
  1719  000A                     	;# 
  1720  000B                     	;# 
  1721  000C                     	;# 
  1722  000D                     	;# 
  1723  000E                     	;# 
  1724  0010                     	;# 
  1725  0011                     	;# 
  1726  0012                     	;# 
  1727  0015                     	;# 
  1728  0016                     	;# 
  1729  0016                     	;# 
  1730  0017                     	;# 
  1731  0018                     	;# 
  1732  0019                     	;# 
  1733  001A                     	;# 
  1734  001B                     	;# 
  1735  001C                     	;# 
  1736  008C                     	;# 
  1737  008D                     	;# 
  1738  008E                     	;# 
  1739  0090                     	;# 
  1740  0091                     	;# 
  1741  0092                     	;# 
  1742  0095                     	;# 
  1743  0096                     	;# 
  1744  0097                     	;# 
  1745  0099                     	;# 
  1746  009A                     	;# 
  1747  009B                     	;# 
  1748  009B                     	;# 
  1749  009C                     	;# 
  1750  009D                     	;# 
  1751  009E                     	;# 
  1752  010C                     	;# 
  1753  010D                     	;# 
  1754  010E                     	;# 
  1755  0116                     	;# 
  1756  0117                     	;# 
  1757  011D                     	;# 
  1758  018C                     	;# 
  1759  018D                     	;# 
  1760  018E                     	;# 
  1761  0191                     	;# 
  1762  0191                     	;# 
  1763  0192                     	;# 
  1764  0193                     	;# 
  1765  0193                     	;# 
  1766  0194                     	;# 
  1767  0195                     	;# 
  1768  0196                     	;# 
  1769  0197                     	;# 
  1770  0199                     	;# 
  1771  019A                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019B                     	;# 
  1775  019B                     	;# 
  1776  019C                     	;# 
  1777  019C                     	;# 
  1778  019D                     	;# 
  1779  019E                     	;# 
  1780  019F                     	;# 
  1781  020D                     	;# 
  1782  0210                     	;# 
  1783  0211                     	;# 
  1784  0211                     	;# 
  1785  0212                     	;# 
  1786  0212                     	;# 
  1787  0213                     	;# 
  1788  0213                     	;# 
  1789  0214                     	;# 
  1790  0214                     	;# 
  1791  0215                     	;# 
  1792  0215                     	;# 
  1793  0215                     	;# 
  1794  0216                     	;# 
  1795  0216                     	;# 
  1796  0217                     	;# 
  1797  0217                     	;# 
  1798  0291                     	;# 
  1799  0291                     	;# 
  1800  0292                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  0394                     	;# 
  1807  0395                     	;# 
  1808  0396                     	;# 
  1809  0FE4                     	;# 
  1810  0FE5                     	;# 
  1811  0FE6                     	;# 
  1812  0FE7                     	;# 
  1813  0FE8                     	;# 
  1814  0FE9                     	;# 
  1815  0FEA                     	;# 
  1816  0FEB                     	;# 
  1817  0FED                     	;# 
  1818  0FEE                     	;# 
  1819  0FEF                     	;# 
  1820  0000                     	;# 
  1821  0001                     	;# 
  1822  0002                     	;# 
  1823  0003                     	;# 
  1824  0004                     	;# 
  1825  0005                     	;# 
  1826  0006                     	;# 
  1827  0007                     	;# 
  1828  0008                     	;# 
  1829  0009                     	;# 
  1830  000A                     	;# 
  1831  000B                     	;# 
  1832  000C                     	;# 
  1833  000D                     	;# 
  1834  000E                     	;# 
  1835  0010                     	;# 
  1836  0011                     	;# 
  1837  0012                     	;# 
  1838  0015                     	;# 
  1839  0016                     	;# 
  1840  0016                     	;# 
  1841  0017                     	;# 
  1842  0018                     	;# 
  1843  0019                     	;# 
  1844  001A                     	;# 
  1845  001B                     	;# 
  1846  001C                     	;# 
  1847  008C                     	;# 
  1848  008D                     	;# 
  1849  008E                     	;# 
  1850  0090                     	;# 
  1851  0091                     	;# 
  1852  0092                     	;# 
  1853  0095                     	;# 
  1854  0096                     	;# 
  1855  0097                     	;# 
  1856  0099                     	;# 
  1857  009A                     	;# 
  1858  009B                     	;# 
  1859  009B                     	;# 
  1860  009C                     	;# 
  1861  009D                     	;# 
  1862  009E                     	;# 
  1863  010C                     	;# 
  1864  010D                     	;# 
  1865  010E                     	;# 
  1866  0116                     	;# 
  1867  0117                     	;# 
  1868  011D                     	;# 
  1869  018C                     	;# 
  1870  018D                     	;# 
  1871  018E                     	;# 
  1872  0191                     	;# 
  1873  0191                     	;# 
  1874  0192                     	;# 
  1875  0193                     	;# 
  1876  0193                     	;# 
  1877  0194                     	;# 
  1878  0195                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0199                     	;# 
  1882  019A                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019B                     	;# 
  1886  019B                     	;# 
  1887  019C                     	;# 
  1888  019C                     	;# 
  1889  019D                     	;# 
  1890  019E                     	;# 
  1891  019F                     	;# 
  1892  020D                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  0212                     	;# 
  1897  0212                     	;# 
  1898  0213                     	;# 
  1899  0213                     	;# 
  1900  0214                     	;# 
  1901  0214                     	;# 
  1902  0215                     	;# 
  1903  0215                     	;# 
  1904  0215                     	;# 
  1905  0216                     	;# 
  1906  0216                     	;# 
  1907  0217                     	;# 
  1908  0217                     	;# 
  1909  0291                     	;# 
  1910  0291                     	;# 
  1911  0292                     	;# 
  1912  0293                     	;# 
  1913  0298                     	;# 
  1914  0298                     	;# 
  1915  0299                     	;# 
  1916  029A                     	;# 
  1917  0394                     	;# 
  1918  0395                     	;# 
  1919  0396                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931  0000                     	;# 
  1932  0001                     	;# 
  1933  0002                     	;# 
  1934  0003                     	;# 
  1935  0004                     	;# 
  1936  0005                     	;# 
  1937  0006                     	;# 
  1938  0007                     	;# 
  1939  0008                     	;# 
  1940  0009                     	;# 
  1941  000A                     	;# 
  1942  000B                     	;# 
  1943  000C                     	;# 
  1944  000D                     	;# 
  1945  000E                     	;# 
  1946  0010                     	;# 
  1947  0011                     	;# 
  1948  0012                     	;# 
  1949  0015                     	;# 
  1950  0016                     	;# 
  1951  0016                     	;# 
  1952  0017                     	;# 
  1953  0018                     	;# 
  1954  0019                     	;# 
  1955  001A                     	;# 
  1956  001B                     	;# 
  1957  001C                     	;# 
  1958  008C                     	;# 
  1959  008D                     	;# 
  1960  008E                     	;# 
  1961  0090                     	;# 
  1962  0091                     	;# 
  1963  0092                     	;# 
  1964  0095                     	;# 
  1965  0096                     	;# 
  1966  0097                     	;# 
  1967  0099                     	;# 
  1968  009A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  010C                     	;# 
  1975  010D                     	;# 
  1976  010E                     	;# 
  1977  0116                     	;# 
  1978  0117                     	;# 
  1979  011D                     	;# 
  1980  018C                     	;# 
  1981  018D                     	;# 
  1982  018E                     	;# 
  1983  0191                     	;# 
  1984  0191                     	;# 
  1985  0192                     	;# 
  1986  0193                     	;# 
  1987  0193                     	;# 
  1988  0194                     	;# 
  1989  0195                     	;# 
  1990  0196                     	;# 
  1991  0197                     	;# 
  1992  0199                     	;# 
  1993  019A                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019B                     	;# 
  1997  019B                     	;# 
  1998  019C                     	;# 
  1999  019C                     	;# 
  2000  019D                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  020D                     	;# 
  2004  0210                     	;# 
  2005  0211                     	;# 
  2006  0211                     	;# 
  2007  0212                     	;# 
  2008  0212                     	;# 
  2009  0213                     	;# 
  2010  0213                     	;# 
  2011  0214                     	;# 
  2012  0214                     	;# 
  2013  0215                     	;# 
  2014  0215                     	;# 
  2015  0215                     	;# 
  2016  0216                     	;# 
  2017  0216                     	;# 
  2018  0217                     	;# 
  2019  0217                     	;# 
  2020  0291                     	;# 
  2021  0291                     	;# 
  2022  0292                     	;# 
  2023  0293                     	;# 
  2024  0298                     	;# 
  2025  0298                     	;# 
  2026  0299                     	;# 
  2027  029A                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0FE4                     	;# 
  2032  0FE5                     	;# 
  2033  0FE6                     	;# 
  2034  0FE7                     	;# 
  2035  0FE8                     	;# 
  2036  0FE9                     	;# 
  2037  0FEA                     	;# 
  2038  0FEB                     	;# 
  2039  0FED                     	;# 
  2040  0FEE                     	;# 
  2041  0FEF                     	;# 
  2042                           
  2043                           	psect	idataBANK3
  2044  111F                     __pidataBANK3:	
  2045                           
  2046                           ;initializer for __product
  2047  111F  3463               	retlw	99
  2048  1120  3402               	retlw	2
  2049  1121  3400               	retlw	0
  2050  1122  3400               	retlw	0
  2051  1123  3400               	retlw	0
  2052  1124  3400               	retlw	0
  2053  1125  3400               	retlw	0
  2054  1126  3400               	retlw	0
  2055  1127  3400               	retlw	0
  2056  1128  3400               	retlw	0
  2057  1129  3400               	retlw	0
  2058  112A  3400               	retlw	0
  2059  112B  34FF               	retlw	255
  2060  112C  34FF               	retlw	255
  2061  112D  34FF               	retlw	255
  2062  112E  3400               	retlw	0
  2063  112F  3400               	retlw	0
  2064  1130  3400               	retlw	0
  2065  1131  3400               	retlw	0
  2066  1132  3400               	retlw	0
  2067  1133  3400               	retlw	0
  2068  1134  3400               	retlw	0
  2069  1135  3400               	retlw	0
  2070  1136  3400               	retlw	0
  2071  1137  3400               	retlw	0
  2072  1138  3400               	retlw	0
  2073  1139  3400               	retlw	0
  2074  113A  3400               	retlw	0
  2075  113B  3400               	retlw	0
  2076  113C  3400               	retlw	0
  2077  113D  3400               	retlw	0
  2078  113E  3400               	retlw	0
  2079                           
  2080                           	psect	stringtext
  2081  1000                     __pstringtext:	
  2082  1000                     _CC2500_registers_address:	
  2083  1000  3403               	retlw	3
  2084  1001  3416               	retlw	22
  2085  1002  3417               	retlw	23
  2086  1003  341E               	retlw	30
  2087  1004  341F               	retlw	31
  2088  1005  3420               	retlw	32
  2089  1006  342A               	retlw	42
  2090  1007  342B               	retlw	43
  2091  1008  340B               	retlw	11
  2092  1009  340C               	retlw	12
  2093  100A  340D               	retlw	13
  2094  100B  340E               	retlw	14
  2095  100C  340F               	retlw	15
  2096  100D  3410               	retlw	16
  2097  100E  3411               	retlw	17
  2098  100F  3412               	retlw	18
  2099  1010  3413               	retlw	19
  2100  1011  3414               	retlw	20
  2101  1012  340A               	retlw	10
  2102  1013  3415               	retlw	21
  2103  1014  3421               	retlw	33
  2104  1015  3422               	retlw	34
  2105  1016  3418               	retlw	24
  2106  1017  3419               	retlw	25
  2107  1018  341A               	retlw	26
  2108  1019  341B               	retlw	27
  2109  101A  341C               	retlw	28
  2110  101B  341D               	retlw	29
  2111  101C  3423               	retlw	35
  2112  101D  3424               	retlw	36
  2113  101E  3425               	retlw	37
  2114  101F  3426               	retlw	38
  2115  1020  3429               	retlw	41
  2116  1021  342C               	retlw	44
  2117  1022  342D               	retlw	45
  2118  1023  342E               	retlw	46
  2119  1024  3400               	retlw	0
  2120  1025  3401               	retlw	1
  2121  1026  3402               	retlw	2
  2122  1027  3407               	retlw	7
  2123  1028  3408               	retlw	8
  2124  1029  3409               	retlw	9
  2125  102A  3406               	retlw	6
  2126  102B  3404               	retlw	4
  2127  102C  3405               	retlw	5
  2128  102D  3427               	retlw	39
  2129  102E  3428               	retlw	40
  2130  102F                     __end_of_CC2500_registers_address:	
  2131  102F                     _CC2500_rfSettings:	
  2132  102F  3407               	retlw	7
  2133  1030  3407               	retlw	7
  2134  1031  3430               	retlw	48
  2135  1032  3487               	retlw	135
  2136  1033  346B               	retlw	107
  2137  1034  34F8               	retlw	248
  2138  1035  347F               	retlw	127
  2139  1036  343F               	retlw	63
  2140  1037  3409               	retlw	9
  2141  1038  3400               	retlw	0
  2142  1039  345C               	retlw	92
  2143  103A  34A7               	retlw	167
  2144  103B  3462               	retlw	98
  2145  103C  3486               	retlw	134
  2146  103D  3483               	retlw	131
  2147  103E  3403               	retlw	3
  2148  103F  3422               	retlw	34
  2149  1040  34F8               	retlw	248
  2150  1041  3400               	retlw	0
  2151  1042  3444               	retlw	68
  2152  1043  34B6               	retlw	182
  2153  1044  3410               	retlw	16
  2154  1045  3418               	retlw	24
  2155  1046  341D               	retlw	29
  2156  1047  341C               	retlw	28
  2157  1048  34C7               	retlw	199
  2158  1049  3400               	retlw	0
  2159  104A  34B2               	retlw	178
  2160  104B  34EA               	retlw	234
  2161  104C  340A               	retlw	10
  2162  104D  3400               	retlw	0
  2163  104E  3411               	retlw	17
  2164  104F  3459               	retlw	89
  2165  1050  3488               	retlw	136
  2166  1051  3431               	retlw	49
  2167  1052  340B               	retlw	11
  2168  1053  342F               	retlw	47
  2169  1054  342E               	retlw	46
  2170  1055  3406               	retlw	6
  2171  1056  3404               	retlw	4
  2172  1057  3405               	retlw	5
  2173  1058  3400               	retlw	0
  2174  1059  3430               	retlw	48
  2175  105A  34D3               	retlw	211
  2176  105B  3491               	retlw	145
  2177  105C  3441               	retlw	65
  2178  105D  3400               	retlw	0
  2179  105E                     __end_of_CC2500_rfSettings:	
  2180  105E                     _CC2500_patable_vaule:	
  2181  105E  34FE               	retlw	254
  2182  105F  34FE               	retlw	254
  2183  1060  34FE               	retlw	254
  2184  1061  34FE               	retlw	254
  2185  1062  34FE               	retlw	254
  2186  1063  34FE               	retlw	254
  2187  1064  34FE               	retlw	254
  2188  1065  34FE               	retlw	254
  2189  1066                     __end_of_CC2500_patable_vaule:	
  2190                           
  2191                           	psect	nvBANK0
  2192  006D                     __pnvBANK0:	
  2193  006D                     _product:	
  2194  006D                     	ds	1
  2195  000C                     _PORTA	set	12
  2196  000D                     _PORTB	set	13
  2197  000E                     _PORTC	set	14
  2198  0018                     _T1CON	set	24
  2199  0017                     _TMR1H	set	23
  2200  0016                     _TMR1L	set	22
  2201  005F                     _GIE	set	95
  2202  005B                     _IOCIE	set	91
  2203  0058                     _IOCIF	set	88
  2204  005E                     _PEIE	set	94
  2205  0060                     _RA0	set	96
  2206  0063                     _RA3	set	99
  2207  0064                     _RA4	set	100
  2208  0066                     _RA6	set	102
  2209  0067                     _RA7	set	103
  2210  0068                     _RB0	set	104
  2211  0069                     _RB1	set	105
  2212  006A                     _RB2	set	106
  2213  006B                     _RB3	set	107
  2214  006C                     _RB4	set	108
  2215  006D                     _RB5	set	109
  2216  0070                     _RC0	set	112
  2217  0071                     _RC1	set	113
  2218  0072                     _RC2	set	114
  2219  0074                     _RC4	set	116
  2220  0075                     _RC5	set	117
  2221  0077                     _RC7	set	119
  2222  0088                     _TMR1IF	set	136
  2223  009D                     _ADCON0	set	157
  2224  009E                     _ADCON1	set	158
  2225  009C                     _ADRESH	set	156
  2226  009B                     _ADRESL	set	155
  2227  0099                     _OSCCON	set	153
  2228  008C                     _TRISA	set	140
  2229  008D                     _TRISB	set	141
  2230  008E                     _TRISC	set	142
  2231  0097                     _WDTCON	set	151
  2232  04E9                     _GO_nDONE	set	1257
  2233  0488                     _TMR1IE	set	1160
  2234  0117                     _FVRCON	set	279
  2235  010C                     _LATA	set	268
  2236  010D                     _LATB	set	269
  2237  010E                     _LATC	set	270
  2238  018C                     _ANSELA	set	396
  2239  018D                     _ANSELB	set	397
  2240  018E                     _ANSELC	set	398
  2241  0192                     _PMADRH	set	402
  2242  0191                     _PMADRL	set	401
  2243  0196                     _PMCON2	set	406
  2244  0194                     _PMDATH	set	404
  2245  0193                     _PMDATL	set	403
  2246  0CAE                     _CFGS	set	3246
  2247  0CAC                     _FREE	set	3244
  2248  0CAD                     _LWLO	set	3245
  2249  0CA8                     _RD	set	3240
  2250  0CA9                     _WR	set	3241
  2251  0CAA                     _WREN	set	3242
  2252  1069                     _WPUB1	set	4201
  2253  106A                     _WPUB2	set	4202
  2254  0396                     _IOCBF	set	918
  2255  0395                     _IOCBN	set	917
  2256  0394                     _IOCBP	set	916
  2257  1CB2                     _IOCBF2	set	7346
  2258                           
  2259                           ; #config settings
  2260  0000                     
  2261                           	psect	cinit
  2262  0015                     start_initialization:	
  2263  0015                     __initialization:	
  2264                           
  2265                           ; Clear objects allocated to BITCOMMON
  2266  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2270  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2272  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2273  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2274                           
  2275                           ; Clear objects allocated to BANK0
  2276  001B  01E9               	clrf	__pbssBANK0& (0+127)
  2277  001C  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2278  001D  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2279  001E  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2280                           
  2281                           ; Clear objects allocated to BANK1
  2282  001F  30A0               	movlw	low __pbssBANK1
  2283  0020  0084               	movwf	4
  2284  0021  3000               	movlw	high __pbssBANK1
  2285  0022  0085               	movwf	5
  2286  0023  304F               	movlw	79
  2287  0024  319D  257C  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK2
  2290  0027  3020               	movlw	low __pbssBANK2
  2291  0028  0084               	movwf	4
  2292  0029  3001               	movlw	high __pbssBANK2
  2293  002A  0085               	movwf	5
  2294  002B  304D               	movlw	77
  2295  002C  319D  257C  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK3
  2298  002F  30C0               	movlw	low __pbssBANK3
  2299  0030  0084               	movwf	4
  2300  0031  3001               	movlw	high __pbssBANK3
  2301  0032  0085               	movwf	5
  2302  0033  3018               	movlw	24
  2303  0034  319D  257C  3180   	fcall	clear_ram0
  2304                           
  2305                           ; Initialize objects allocated to BANK3
  2306  0037  301F               	movlw	low __pidataBANK3
  2307  0038  0084               	movwf	4
  2308  0039  3091               	movlw	(high __pidataBANK3)| (0+128)
  2309  003A  0085               	movwf	5
  2310  003B  30A0               	movlw	low __pdataBANK3
  2311  003C  0086               	movwf	6
  2312  003D  3001               	movlw	high __pdataBANK3
  2313  003E  0087               	movwf	7
  2314  003F  3020               	movlw	32
  2315  0040  319D  2576         	fcall	init_ram
  2316  0042                     end_of_initialization:	
  2317                           ;End of C runtime variable initialization code
  2318                           
  2319  0042                     __end_of__initialization:	
  2320  0042  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2321  0043  0020               	movlb	0
  2322  0044  3197  2F4F         	ljmp	_main	;jump to C main() function
  2323                           
  2324                           	psect	bitbssCOMMON
  2325  03D8                     __pbitbssCOMMON:	
  2326  03D8                     _Receive_OK:	
  2327  03D8                     	ds	1
  2328  03D9                     _Transceive_OK:	
  2329  03D9                     	ds	1
  2330                           
  2331                           	psect	bssCOMMON
  2332  0076                     __pbssCOMMON:	
  2333  0076                     _Dimmer:	
  2334  0076                     	ds	1
  2335  0077                     _DimmerLightsIntr:	
  2336  0077                     	ds	1
  2337  0078                     _DimmerLightsIntrIOC:	
  2338  0078                     	ds	1
  2339  0079                     _RFSW:	
  2340  0079                     	ds	1
  2341  007A                     _SPI0Buffer:	
  2342  007A                     	ds	1
  2343                           
  2344                           	psect	bssBANK0
  2345  0069                     __pbssBANK0:	
  2346  0069                     _DelayOff:	
  2347  0069                     	ds	1
  2348  006A                     _DimmerLights:	
  2349  006A                     	ds	1
  2350  006B                     _LED:	
  2351  006B                     	ds	1
  2352  006C                     _Sw:	
  2353  006C                     	ds	1
  2354                           
  2355                           	psect	bssBANK1
  2356  00A0                     __pbssBANK1:	
  2357  00A0                     _myMain:	
  2358  00A0                     	ds	19
  2359  00B3                     _Buz1:	
  2360  00B3                     	ds	12
  2361  00BF                     _RF1:	
  2362  00BF                     	ds	12
  2363  00CB                     _PF1:	
  2364  00CB                     	ds	8
  2365  00D3                     _Timer1:	
  2366  00D3                     	ds	3
  2367  00D6                     _WDT:	
  2368  00D6                     	ds	2
  2369  00D8                     _CRC:	
  2370  00D8                     	ds	1
  2371  00D9                     _DimmerLights11:	
  2372  00D9                     	ds	1
  2373  00DA                     _RSSI:	
  2374  00DA                     	ds	1
  2375  00DB                     _Rx_Length:	
  2376  00DB                     	ds	1
  2377  00DC                     _Tx_Length:	
  2378  00DC                     	ds	1
  2379  00DD                     _r_address:	
  2380  00DD                     	ds	1
  2381  00DE                     _r_data:	
  2382  00DE                     	ds	1
  2383  00DF                     _s_data:	
  2384  00DF                     	ds	1
  2385  00E0                     _Temp1:	
  2386  00E0                     	ds	14
  2387  00EE                     _RFSW1:	
  2388  00EE                     	ds	1
  2389                           
  2390                           	psect	bssBANK2
  2391  0120                     __pbssBANK2:	
  2392  0120                     _RF_Data:	
  2393  0120                     	ds	21
  2394  0135                     _RF_Count:	
  2395  0135                     	ds	2
  2396  0137                     _Memory:	
  2397  0137                     	ds	37
  2398  015C                     _VarErrLED:	
  2399  015C                     	ds	4
  2400  0160                     _VarLED1:	
  2401  0160                     	ds	4
  2402  0164                     _VarLED2:	
  2403  0164                     	ds	4
  2404  0168                     _Dimmer1:	
  2405  0168                     	ds	3
  2406  016B                     _DlySw1:	
  2407  016B                     	ds	2
  2408                           
  2409                           	psect	bssBANK3
  2410  01C0                     __pbssBANK3:	
  2411  01C0                     _DimmerLights1:	
  2412  01C0                     	ds	15
  2413  01CF                     _Sw1:	
  2414  01CF                     	ds	9
  2415                           
  2416                           	psect	dataBANK3
  2417  01A0                     __pdataBANK3:	
  2418  01A0                     __product:	
  2419  01A0                     	ds	32
  2420                           
  2421                           	psect	clrtext
  2422  1D7C                     clear_ram0:	
  2423                           ;	Called with FSR0 containing the base address, and
  2424                           ;	WREG with the size to clear
  2425                           
  2426  1D7C  0064               	clrwdt	;clear the watchdog before getting into this loop
  2427  1D7D                     clrloop0:	
  2428  1D7D  0180               	clrf	0	;clear RAM location pointed to by FSR
  2429  1D7E  3101               	addfsr 0,1
  2430  1D7F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2431  1D80  2D7D               	goto	clrloop0	;have we reached the end yet?
  2432  1D81  3400               	retlw	0	;all done for this memory range, return
  2433                           
  2434                           	psect	inittext
  2435  1D76                     init_ram:	
  2436  1D76  00FE               	movwf	126
  2437  1D77                     initloop:	
  2438  1D77  0012               	moviw fsr0++
  2439  1D78  001E               	movwi fsr1++
  2440  1D79  0BFE               	decfsz	126,f
  2441  1D7A  2D77               	goto	initloop
  2442  1D7B  3400               	retlw	0
  2443                           
  2444                           	psect	cstackBANK3
  2445  01D8                     __pcstackBANK3:	
  2446  01D8                     ?_main:	
  2447  01D8                     main@argc:	
  2448                           ; 2 bytes @ 0x0
  2449                           
  2450                           
  2451                           ; 2 bytes @ 0x0
  2452  01D8                     	ds	2
  2453  01DA                     main@argv:	
  2454                           
  2455                           ; 2 bytes @ 0x2
  2456  01DA                     	ds	2
  2457                           
  2458                           	psect	cstackCOMMON
  2459  0070                     __pcstackCOMMON:	
  2460  0070                     ?_Timeout_Counter:	
  2461  0070                     ?_set_TimeoutCleared:	
  2462                           ; 0 bytes @ 0x0
  2463                           
  2464  0070                     ?_CC2500_WriteByte:	
  2465                           ; 0 bytes @ 0x0
  2466                           
  2467  0070                     ?_CC2500_WriteCommand:	
  2468                           ; 0 bytes @ 0x0
  2469                           
  2470  0070                     ?_CC2500_ReadStatus:	
  2471                           ; 0 bytes @ 0x0
  2472                           
  2473  0070                     ?_CC2500_ReadByte:	
  2474                           ; 0 bytes @ 0x0
  2475                           
  2476  0070                     ?_CC2500_PowerRST:	
  2477                           ; 0 bytes @ 0x0
  2478                           
  2479  0070                     ?_CC2500_InitSetREG:	
  2480                           ; 0 bytes @ 0x0
  2481                           
  2482  0070                     ?_CC2500_InitPATable:	
  2483                           ; 0 bytes @ 0x0
  2484                           
  2485  0070                     ?_CC2500_ClearTXFIFO:	
  2486                           ; 0 bytes @ 0x0
  2487                           
  2488  0070                     ?_CC2500_ClearRXFIFO:	
  2489                           ; 0 bytes @ 0x0
  2490                           
  2491  0070                     ?_CC2500_FrequencyCabr:	
  2492                           ; 0 bytes @ 0x0
  2493                           
  2494  0070                     ?_CC2500_SIDLEMode:	
  2495                           ; 0 bytes @ 0x0
  2496                           
  2497  0070                     ?_DlyOff_Initialization:	
  2498                           ; 0 bytes @ 0x0
  2499                           
  2500  0070                     ?_DlyOff_Main:	
  2501                           ; 0 bytes @ 0x0
  2502                           
  2503  0070                     ?_setTxData:	
  2504                           ; 0 bytes @ 0x0
  2505                           
  2506  0070                     ?_setDimmerLights_Initialization:	
  2507                           ; 0 bytes @ 0x0
  2508                           
  2509  0070                     ?_Dimmer_Initialization:	
  2510                           ; 0 bytes @ 0x0
  2511                           
  2512  0070                     ?_setMemory_GO:	
  2513                           ; 0 bytes @ 0x0
  2514                           
  2515  0070                     ?_setDimmerLights_Main:	
  2516                           ; 0 bytes @ 0x0
  2517                           
  2518  0070                     ?_setDimmerLights_ERROR:	
  2519                           ; 0 bytes @ 0x0
  2520                           
  2521  0070                     ?_setLED_Initialization:	
  2522                           ; 0 bytes @ 0x0
  2523                           
  2524  0070                     ?_setLED_Main:	
  2525                           ; 0 bytes @ 0x0
  2526                           
  2527  0070                     ?_Fosc_Set:	
  2528                           ; 0 bytes @ 0x0
  2529                           
  2530  0070                     ?_IO_Set:	
  2531                           ; 0 bytes @ 0x0
  2532                           
  2533  0070                     ?_TMR1_Set:	
  2534                           ; 0 bytes @ 0x0
  2535                           
  2536  0070                     ?_ADC_Set:	
  2537                           ; 0 bytes @ 0x0
  2538                           
  2539  0070                     ?_IOC_Set:	
  2540                           ; 0 bytes @ 0x0
  2541                           
  2542  0070                     ?_WDT_Set:	
  2543                           ; 0 bytes @ 0x0
  2544                           
  2545  0070                     ?_IOC_ISR:	
  2546                           ; 0 bytes @ 0x0
  2547                           
  2548  0070                     ?_TMR1_ISR:	
  2549                           ; 0 bytes @ 0x0
  2550                           
  2551  0070                     ?_Flash_Memory_Write:	
  2552                           ; 0 bytes @ 0x0
  2553                           
  2554  0070                     ?_Flash_Memory_Modify:	
  2555                           ; 0 bytes @ 0x0
  2556                           
  2557  0070                     ?_WDT_Clearing:	
  2558                           ; 0 bytes @ 0x0
  2559                           
  2560  0070                     ?_setTemp_Initialization:	
  2561                           ; 0 bytes @ 0x0
  2562                           
  2563  0070                     ?_setTemp_Main:	
  2564                           ; 0 bytes @ 0x0
  2565                           
  2566  0070                     ?_setOverTemp_Exceptions:	
  2567                           ; 0 bytes @ 0x0
  2568                           
  2569  0070                     ?_setSw_Enable:	
  2570                           ; 0 bytes @ 0x0
  2571                           
  2572  0070                     ?_setRF_Enable:	
  2573                           ; 0 bytes @ 0x0
  2574                           
  2575  0070                     ?_setPowerFault_Initialization:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578  0070                     ?_setPowerFault_Main:	
  2579                           ; 0 bytes @ 0x0
  2580                           
  2581  0070                     ?_setPowerFault_Exceptions:	
  2582                           ; 0 bytes @ 0x0
  2583                           
  2584  0070                     ?_setRF_Initialization:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setRF_Main:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_getRxData:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_setLog_Code:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_setControl_Lights_Table:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_setRFSW_Control:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_setRFSW_AdjControl:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_setRF_DimmerValue:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_setSw_Initialization:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_setSw_Main:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_Sw_DimmerOnFunc:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_Sw_DimmerAdjFunc:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_Sw_DimmerOffFunc:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_myMain_Initialization:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_my_MainTime:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_Buzzer_Initialization:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_Buzzer_Main:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_TxData:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_RxData:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_PowerOnInitial:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_DelayOffPointSelect:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DelayOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DelayOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_DimmerIntrIOCPointSelect:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ??_DimmerIntrIOCPointSelect:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_DimmerIntrPointSelect:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ??_DimmerIntrPointSelect:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_IntrControl:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_DimmerLightsPointSelect:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_DimmerLights_Initialization:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DimmerLights_Close:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DimmerLights_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_DimmerLights_Exceptions:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_AdjRF:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_LedPointSelect:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_LED_Initialization:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_LED_Main:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_Mcu_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setDimmerReClock:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Flash_Memory_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Flash_Memory_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Unlock:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Erasing:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Main:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_Temp_Initialization:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setTemp_Enable:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_getTemp_AD:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_Temp_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_PowerFault_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_PowerFault_Main:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getPowerFault_AD:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_RF_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_RF_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setRF_Learn:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_RfSWPointSelect:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_TouchPower:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_SwPointSelect:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_Switch_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_Switch_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayTimejudge:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_getDimmerLights_StatusFlag:	
  2771                           ; 1 bytes @ 0x0
  2772                           
  2773  0070                     ?_getPercentValue:	
  2774                           ; 1 bytes @ 0x0
  2775                           
  2776  0070                     ?_Flash_Memory_Read:	
  2777                           ; 1 bytes @ 0x0
  2778                           
  2779  0070                     ?_getPF_Safe:	
  2780                           ; 1 bytes @ 0x0
  2781                           
  2782  0070                     ?_setPercentValue:	
  2783                           ; 1 bytes @ 0x0
  2784                           
  2785  0070                     ?_getTemp_Safe:	
  2786                           ; 1 bytes @ 0x0
  2787                           
  2788                           
  2789                           ; 1 bytes @ 0x0
  2790  0070                     	ds	1
  2791  0071                     DimmerIntrIOCPointSelect@lights:	
  2792  0071                     DimmerIntrPointSelect@lights:	
  2793                           ; 1 bytes @ 0x1
  2794                           
  2795                           
  2796                           ; 1 bytes @ 0x1
  2797  0071                     	ds	1
  2798  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2799  0072                     ??_setDimmerLights_IntrControl:	
  2800                           ; 0 bytes @ 0x2
  2801                           
  2802  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2803                           ; 0 bytes @ 0x2
  2804                           
  2805                           
  2806                           ; 1 bytes @ 0x2
  2807  0072                     	ds	1
  2808  0073                     ??_IOC_ISR:	
  2809  0073                     ??_setDimmerReClock:	
  2810                           ; 0 bytes @ 0x3
  2811                           
  2812                           
  2813                           ; 0 bytes @ 0x3
  2814  0073                     	ds	1
  2815  0074                     setDimmerLights_IntrControl@lights:	
  2816                           
  2817                           ; 1 bytes @ 0x4
  2818  0074                     	ds	1
  2819  0075                     ??_TMR1_ISR:	
  2820  0075                     ??_ISR:	
  2821                           ; 0 bytes @ 0x5
  2822                           
  2823                           
  2824                           ; 0 bytes @ 0x5
  2825  0075                     	ds	1
  2826                           
  2827                           	psect	cstackBANK0
  2828  0020                     __pcstackBANK0:	
  2829  0020                     ??_Timeout_Counter:	
  2830  0020                     ??_set_TimeoutCleared:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0020                     ??_CC2500_WriteByte:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0020                     ??_CC2500_ReadByte:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0020                     ?_DelayTime_1us:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0020                     ??_setTxData:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0020                     ??_Dimmer_Initialization:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0020                     ??_getDimmerLights_StatusFlag:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0020                     ??_setMemory_GO:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0020                     ??_Fosc_Set:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0020                     ??_IO_Set:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0020                     ??_TMR1_Set:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0020                     ??_ADC_Set:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0020                     ??_IOC_Set:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0020                     ??_WDT_Set:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0020                     ??_Flash_Memory_Read:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0020                     ??_Flash_Memory_Write:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0020                     ??_WDT_Clearing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0020                     ??_setTemp_Initialization:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0020                     ??_getPF_Safe:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0020                     ??_setRF_Enable:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0020                     ??_setPowerFault_Initialization:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0020                     ??_setRF_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0020                     ??_myMain_Initialization:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0020                     ??_Buzzer_Initialization:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0020                     ??_Buzzer_Main:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0020                     ??_DelayOffPointSelect:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0020                     ??_DimmerLightsPointSelect:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0020                     ??_LedPointSelect:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0020                     ??_Flash_Memory_Unlock:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0020                     ??_Flash_Memory_Erasing:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0020                     ??_WDT_Main:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0020                     ??_Temp_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0020                     ??_setTemp_Enable:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0020                     ??_getTemp_Safe:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0020                     ??_PowerFault_Initialization:	
  2933                           ; 0 bytes @ 0x0
  2934                           
  2935  0020                     ??_setRF_Learn:	
  2936                           ; 0 bytes @ 0x0
  2937                           
  2938  0020                     ??_RfSWPointSelect:	
  2939                           ; 0 bytes @ 0x0
  2940                           
  2941  0020                     ??_TouchPower:	
  2942                           ; 0 bytes @ 0x0
  2943                           
  2944  0020                     ??_SwPointSelect:	
  2945                           ; 0 bytes @ 0x0
  2946                           
  2947  0020                     ?___bmul:	
  2948                           ; 0 bytes @ 0x0
  2949                           
  2950  0020                     ?_getBuz_GO:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0020                     ?_getAD:	
  2954                           ; 2 bytes @ 0x0
  2955                           
  2956  0020                     ?___awdiv:	
  2957                           ; 2 bytes @ 0x0
  2958                           
  2959  0020                     ?___ftpack:	
  2960                           ; 2 bytes @ 0x0
  2961                           
  2962  0020                     getDimmerLights_StatusFlag@Status:	
  2963                           ; 3 bytes @ 0x0
  2964                           
  2965  0020                     getAD@adcon1:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0020                     setTemp_Enable@command:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0020                     getTemp_Safe@result:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0020                     getPF_Safe@i:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0020                     setRF_Learn@command:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0020                     setRF_Enable@command:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0020                     ___bmul@multiplicand:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0020                     DelayTime_1us@count:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0020                     ___awdiv@divisor:	
  2990                           ; 2 bytes @ 0x0
  2991                           
  2992  0020                     ___ftpack@arg:	
  2993                           ; 2 bytes @ 0x0
  2994                           
  2995                           
  2996                           ; 3 bytes @ 0x0
  2997  0020                     	ds	1
  2998  0021                     ??_Mcu_Initialization:	
  2999  0021                     ??_RF_Initialization:	
  3000                           ; 0 bytes @ 0x1
  3001                           
  3002  0021                     ??___bmul:	
  3003                           ; 0 bytes @ 0x1
  3004                           
  3005  0021                     CC2500_WriteByte@loop_a:	
  3006                           ; 0 bytes @ 0x1
  3007                           
  3008  0021                     CC2500_ReadByte@loop_b:	
  3009                           ; 1 bytes @ 0x1
  3010                           
  3011  0021                     DelayOffPointSelect@sw:	
  3012                           ; 1 bytes @ 0x1
  3013                           
  3014  0021                     DimmerLightsPointSelect@lights:	
  3015                           ; 1 bytes @ 0x1
  3016                           
  3017  0021                     LedPointSelect@led:	
  3018                           ; 1 bytes @ 0x1
  3019                           
  3020  0021                     Flash_Memory_Read@i:	
  3021                           ; 1 bytes @ 0x1
  3022                           
  3023  0021                     Flash_Memory_Write@i:	
  3024                           ; 1 bytes @ 0x1
  3025                           
  3026  0021                     RfSWPointSelect@sw:	
  3027                           ; 1 bytes @ 0x1
  3028                           
  3029  0021                     SwPointSelect@sw:	
  3030                           ; 1 bytes @ 0x1
  3031                           
  3032                           
  3033                           ; 1 bytes @ 0x1
  3034  0021                     	ds	1
  3035  0022                     ??_CC2500_WriteCommand:	
  3036  0022                     ??_CC2500_ReadStatus:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0022                     ??_DelayTime_1us:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0022                     ?_CC2500_WriteREG:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0022                     ??_DlyOff_Initialization:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0022                     ?_setSw_Status:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0022                     ?_setRFSW_Status:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0022                     ?_setDimmerLights_Trigger:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0022                     ?_setDimmerLights_Switch:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0022                     ??_setDimmerLights_Initialization:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0022                     ?_setDimmerLights_TriggerERROR:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0022                     ?_setLED:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0022                     ??_setLED_Main:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0022                     ??_setSw_Enable:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0022                     ??_getBuz_GO:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0022                     ?_setDimmerLights_AdjGo:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0022                     ?_setDimmerLights_TriggerAdj:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0022                     CC2500_WriteREG@value:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0022                     DlyOff_Initialization@sw:	
  3088                           ; 1 bytes @ 0x2
  3089                           
  3090  0022                     setDimmerLights_TriggerERROR@command:	
  3091                           ; 1 bytes @ 0x2
  3092                           
  3093  0022                     setDimmerLights_Switch@command:	
  3094                           ; 1 bytes @ 0x2
  3095                           
  3096  0022                     setDimmerLights_AdjGo@command:	
  3097                           ; 1 bytes @ 0x2
  3098                           
  3099  0022                     setDimmerLights_Trigger@command:	
  3100                           ; 1 bytes @ 0x2
  3101                           
  3102  0022                     setDimmerLights_TriggerAdj@command:	
  3103                           ; 1 bytes @ 0x2
  3104                           
  3105  0022                     setLED@command:	
  3106                           ; 1 bytes @ 0x2
  3107                           
  3108  0022                     Flash_Memory_Read@address:	
  3109                           ; 1 bytes @ 0x2
  3110                           
  3111  0022                     setMemory_GO@command:	
  3112                           ; 1 bytes @ 0x2
  3113                           
  3114  0022                     setRFSW_Status@command:	
  3115                           ; 1 bytes @ 0x2
  3116                           
  3117  0022                     setSw_Enable@command:	
  3118                           ; 1 bytes @ 0x2
  3119                           
  3120  0022                     setSw_Status@command:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0022                     ___bmul@product:	
  3124                           ; 1 bytes @ 0x2
  3125                           
  3126  0022                     DelayTime_1us@i:	
  3127                           ; 1 bytes @ 0x2
  3128                           
  3129  0022                     ___awdiv@dividend:	
  3130                           ; 2 bytes @ 0x2
  3131                           
  3132                           
  3133                           ; 2 bytes @ 0x2
  3134  0022                     	ds	1
  3135  0023                     ??_CC2500_WriteREG:	
  3136  0023                     ??_setSw_Status:	
  3137                           ; 0 bytes @ 0x3
  3138                           
  3139  0023                     ??_setRFSW_Status:	
  3140                           ; 0 bytes @ 0x3
  3141                           
  3142  0023                     ??_setDimmerLights_Trigger:	
  3143                           ; 0 bytes @ 0x3
  3144                           
  3145  0023                     ??_setDimmerLights_Switch:	
  3146                           ; 0 bytes @ 0x3
  3147                           
  3148  0023                     ??_setDimmerLights_TriggerERROR:	
  3149                           ; 0 bytes @ 0x3
  3150                           
  3151  0023                     ??_setLED:	
  3152                           ; 0 bytes @ 0x3
  3153                           
  3154  0023                     ??_DelayOff_Initialization:	
  3155                           ; 0 bytes @ 0x3
  3156                           
  3157  0023                     ??_DimmerLights_Close:	
  3158                           ; 0 bytes @ 0x3
  3159                           
  3160  0023                     ??_setDimmerLights_AdjGo:	
  3161                           ; 0 bytes @ 0x3
  3162                           
  3163  0023                     ??_setDimmerLights_TriggerAdj:	
  3164                           ; 0 bytes @ 0x3
  3165                           
  3166  0023                     ??_getAD:	
  3167                           ; 0 bytes @ 0x3
  3168                           
  3169  0023                     CC2500_WriteCommand@command:	
  3170                           ; 0 bytes @ 0x3
  3171                           
  3172  0023                     CC2500_ReadStatus@status_addr:	
  3173                           ; 1 bytes @ 0x3
  3174                           
  3175  0023                     setDimmerLights_Initialization@lights:	
  3176                           ; 1 bytes @ 0x3
  3177                           
  3178  0023                     setDimmerLights_TriggerERROR@lights:	
  3179                           ; 1 bytes @ 0x3
  3180                           
  3181  0023                     setDimmerLights_Switch@lights:	
  3182                           ; 1 bytes @ 0x3
  3183                           
  3184  0023                     setDimmerLights_AdjGo@lights:	
  3185                           ; 1 bytes @ 0x3
  3186                           
  3187  0023                     setDimmerLights_Trigger@lights:	
  3188                           ; 1 bytes @ 0x3
  3189                           
  3190  0023                     setDimmerLights_TriggerAdj@lights:	
  3191                           ; 1 bytes @ 0x3
  3192                           
  3193  0023                     setLED@led:	
  3194                           ; 1 bytes @ 0x3
  3195                           
  3196  0023                     getAD@adcon0:	
  3197                           ; 1 bytes @ 0x3
  3198                           
  3199  0023                     Flash_Memory_Read@ret:	
  3200                           ; 1 bytes @ 0x3
  3201                           
  3202  0023                     setRFSW_Status@sw:	
  3203                           ; 1 bytes @ 0x3
  3204                           
  3205  0023                     setSw_Status@sw:	
  3206                           ; 1 bytes @ 0x3
  3207                           
  3208  0023                     ___bmul@multiplier:	
  3209                           ; 1 bytes @ 0x3
  3210                           
  3211  0023                     ___ftpack@exp:	
  3212                           ; 1 bytes @ 0x3
  3213                           
  3214                           
  3215                           ; 1 bytes @ 0x3
  3216  0023                     	ds	1
  3217  0024                     ??_CC2500_ClearTXFIFO:	
  3218  0024                     ??_CC2500_ClearRXFIFO:	
  3219                           ; 0 bytes @ 0x4
  3220                           
  3221  0024                     ??_CC2500_SIDLEMode:	
  3222                           ; 0 bytes @ 0x4
  3223                           
  3224  0024                     ??_DelayTimejudge:	
  3225                           ; 0 bytes @ 0x4
  3226                           
  3227  0024                     ?_setDimmerLights:	
  3228                           ; 0 bytes @ 0x4
  3229                           
  3230  0024                     ??_setDimmerLights_ERROR:	
  3231                           ; 0 bytes @ 0x4
  3232                           
  3233  0024                     ??_setLED_Initialization:	
  3234                           ; 0 bytes @ 0x4
  3235                           
  3236  0024                     ??_Flash_Memory_Modify:	
  3237                           ; 0 bytes @ 0x4
  3238                           
  3239  0024                     ??_setSw_Initialization:	
  3240                           ; 0 bytes @ 0x4
  3241                           
  3242  0024                     ??_Sw_DimmerAdjFunc:	
  3243                           ; 0 bytes @ 0x4
  3244                           
  3245  0024                     ??_CC2500_TxData:	
  3246                           ; 0 bytes @ 0x4
  3247                           
  3248  0024                     ??_CC2500_RxData:	
  3249                           ; 0 bytes @ 0x4
  3250                           
  3251  0024                     ??_DimmerLights_Initialization:	
  3252                           ; 0 bytes @ 0x4
  3253                           
  3254  0024                     ??_getTemp_AD:	
  3255                           ; 0 bytes @ 0x4
  3256                           
  3257  0024                     ??_getPowerFault_AD:	
  3258                           ; 0 bytes @ 0x4
  3259                           
  3260  0024                     ??___awdiv:	
  3261                           ; 0 bytes @ 0x4
  3262                           
  3263  0024                     CC2500_WriteREG@w_addr:	
  3264                           ; 0 bytes @ 0x4
  3265                           
  3266  0024                     setDimmerLights@status:	
  3267                           ; 1 bytes @ 0x4
  3268                           
  3269  0024                     setLED_Initialization@led:	
  3270                           ; 1 bytes @ 0x4
  3271                           
  3272  0024                     setLED_Main@led:	
  3273                           ; 1 bytes @ 0x4
  3274                           
  3275  0024                     setSw_Initialization@sw:	
  3276                           ; 1 bytes @ 0x4
  3277                           
  3278  0024                     Sw_DimmerAdjFunc@Idle:	
  3279                           ; 1 bytes @ 0x4
  3280                           
  3281  0024                     ___ftpack@sign:	
  3282                           ; 1 bytes @ 0x4
  3283                           
  3284  0024                     getBuz_GO@i:	
  3285                           ; 1 bytes @ 0x4
  3286                           
  3287  0024                     DelayTime_1us@j:	
  3288                           ; 2 bytes @ 0x4
  3289                           
  3290                           
  3291                           ; 2 bytes @ 0x4
  3292  0024                     	ds	1
  3293  0025                     ??_CC2500_InitSetREG:	
  3294  0025                     ??_CC2500_InitPATable:	
  3295                           ; 0 bytes @ 0x5
  3296                           
  3297  0025                     ??_setDimmerLights:	
  3298                           ; 0 bytes @ 0x5
  3299                           
  3300  0025                     ??___ftpack:	
  3301                           ; 0 bytes @ 0x5
  3302                           
  3303  0025                     ??_LED_Initialization:	
  3304                           ; 0 bytes @ 0x5
  3305                           
  3306  0025                     ??_LED_Main:	
  3307                           ; 0 bytes @ 0x5
  3308                           
  3309  0025                     ??_Switch_Initialization:	
  3310                           ; 0 bytes @ 0x5
  3311                           
  3312  0025                     CC2500_TxData@loop_e:	
  3313                           ; 0 bytes @ 0x5
  3314                           
  3315  0025                     CC2500_RxData@loop_f:	
  3316                           ; 1 bytes @ 0x5
  3317                           
  3318  0025                     setDimmerLights_ERROR@lights:	
  3319                           ; 1 bytes @ 0x5
  3320                           
  3321  0025                     Flash_Memory_Modify@i:	
  3322                           ; 1 bytes @ 0x5
  3323                           
  3324  0025                     getTemp_AD@channel:	
  3325                           ; 1 bytes @ 0x5
  3326                           
  3327  0025                     getPowerFault_AD@channel:	
  3328                           ; 1 bytes @ 0x5
  3329                           
  3330  0025                     Sw_DimmerAdjFunc@sw:	
  3331                           ; 1 bytes @ 0x5
  3332                           
  3333  0025                     ___awdiv@counter:	
  3334                           ; 1 bytes @ 0x5
  3335                           
  3336                           
  3337                           ; 1 bytes @ 0x5
  3338  0025                     	ds	1
  3339  0026                     ??_CC2500_PowerRST:	
  3340  0026                     ??_CC2500_FrequencyCabr:	
  3341                           ; 0 bytes @ 0x6
  3342                           
  3343  0026                     ??_Flash_Memory_Main:	
  3344                           ; 0 bytes @ 0x6
  3345                           
  3346  0026                     CC2500_InitSetREG@temp1:	
  3347                           ; 0 bytes @ 0x6
  3348                           
  3349  0026                     CC2500_InitPATable@temp:	
  3350                           ; 1 bytes @ 0x6
  3351                           
  3352  0026                     DelayTimejudge@i:	
  3353                           ; 1 bytes @ 0x6
  3354                           
  3355  0026                     setDimmerLights@lights:	
  3356                           ; 1 bytes @ 0x6
  3357                           
  3358  0026                     ___awdiv@sign:	
  3359                           ; 1 bytes @ 0x6
  3360                           
  3361                           
  3362                           ; 1 bytes @ 0x6
  3363  0026                     	ds	1
  3364  0027                     CC2500_InitSetREG@temp2:	
  3365  0027                     CC2500_InitPATable@loop_d:	
  3366                           ; 1 bytes @ 0x7
  3367                           
  3368  0027                     DelayTimejudge@j:	
  3369                           ; 1 bytes @ 0x7
  3370                           
  3371  0027                     ___awdiv@quotient:	
  3372                           ; 1 bytes @ 0x7
  3373                           
  3374                           
  3375                           ; 2 bytes @ 0x7
  3376  0027                     	ds	1
  3377  0028                     ?___awtoft:	
  3378  0028                     CC2500_InitSetREG@loop_c:	
  3379                           ; 3 bytes @ 0x8
  3380                           
  3381  0028                     DelayTimejudge@k:	
  3382                           ; 1 bytes @ 0x8
  3383                           
  3384  0028                     ___awtoft@c:	
  3385                           ; 1 bytes @ 0x8
  3386                           
  3387                           
  3388                           ; 2 bytes @ 0x8
  3389  0028                     	ds	1
  3390  0029                     ?_setBuz:	
  3391  0029                     ??_CC2500_PowerOnInitial:	
  3392                           ; 0 bytes @ 0x9
  3393                           
  3394  0029                     DelayTimejudge@value:	
  3395                           ; 0 bytes @ 0x9
  3396                           
  3397  0029                     setBuz@time:	
  3398                           ; 1 bytes @ 0x9
  3399                           
  3400                           
  3401                           ; 2 bytes @ 0x9
  3402  0029                     	ds	1
  3403  002A                     ?_setDelayOff_GO:	
  3404  002A                     setDelayOff_GO@command:	
  3405                           ; 0 bytes @ 0xA
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0xA
  3409  002A                     	ds	1
  3410  002B                     ??_setBuz:	
  3411  002B                     ??___awtoft:	
  3412                           ; 0 bytes @ 0xB
  3413                           
  3414  002B                     setDelayOff_GO@value:	
  3415                           ; 0 bytes @ 0xB
  3416                           
  3417                           
  3418                           ; 1 bytes @ 0xB
  3419  002B                     	ds	1
  3420  002C                     ??_setDelayOff_GO:	
  3421  002C                     setBuz@count:	
  3422                           ; 0 bytes @ 0xC
  3423                           
  3424                           
  3425                           ; 1 bytes @ 0xC
  3426  002C                     	ds	1
  3427  002D                     ??_setLog_Code:	
  3428  002D                     ??_my_MainTime:	
  3429                           ; 0 bytes @ 0xD
  3430                           
  3431  002D                     ??_DimmerLights_Exceptions:	
  3432                           ; 0 bytes @ 0xD
  3433                           
  3434  002D                     DimmerLights_Exceptions@status:	
  3435                           ; 0 bytes @ 0xD
  3436                           
  3437  002D                     ___awtoft@sign:	
  3438                           ; 1 bytes @ 0xD
  3439                           
  3440                           
  3441                           ; 1 bytes @ 0xD
  3442  002D                     	ds	1
  3443  002E                     ??_setOverTemp_Exceptions:	
  3444  002E                     ??_setPowerFault_Exceptions:	
  3445                           ; 0 bytes @ 0xE
  3446                           
  3447  002E                     ?___ftdiv:	
  3448                           ; 0 bytes @ 0xE
  3449                           
  3450  002E                     ?___ftmul:	
  3451                           ; 3 bytes @ 0xE
  3452                           
  3453  002E                     setDelayOff_GO@sw:	
  3454                           ; 3 bytes @ 0xE
  3455                           
  3456  002E                     ___ftdiv@f2:	
  3457                           ; 1 bytes @ 0xE
  3458                           
  3459  002E                     ___ftmul@f1:	
  3460                           ; 3 bytes @ 0xE
  3461                           
  3462                           
  3463                           ; 3 bytes @ 0xE
  3464  002E                     	ds	1
  3465  002F                     setOverTemp_Exceptions@i:	
  3466  002F                     setPowerFault_Exceptions@i:	
  3467                           ; 1 bytes @ 0xF
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0xF
  3471  002F                     	ds	1
  3472  0030                     setOverTemp_Exceptions@command:	
  3473  0030                     setPowerFault_Exceptions@command:	
  3474                           ; 1 bytes @ 0x10
  3475                           
  3476                           
  3477                           ; 1 bytes @ 0x10
  3478  0030                     	ds	1
  3479  0031                     ??_setTemp_Main:	
  3480  0031                     ??_setPowerFault_Main:	
  3481                           ; 0 bytes @ 0x11
  3482                           
  3483  0031                     ___ftdiv@f1:	
  3484                           ; 0 bytes @ 0x11
  3485                           
  3486  0031                     ___ftmul@f2:	
  3487                           ; 3 bytes @ 0x11
  3488                           
  3489                           
  3490                           ; 3 bytes @ 0x11
  3491  0031                     	ds	1
  3492  0032                     ??_Temp_Main:	
  3493  0032                     ??_PowerFault_Main:	
  3494                           ; 0 bytes @ 0x12
  3495                           
  3496                           
  3497                           ; 0 bytes @ 0x12
  3498  0032                     	ds	2
  3499  0034                     ??___ftdiv:	
  3500  0034                     ??___ftmul:	
  3501                           ; 0 bytes @ 0x14
  3502                           
  3503                           
  3504                           ; 0 bytes @ 0x14
  3505  0034                     	ds	4
  3506  0038                     ___ftdiv@cntr:	
  3507  0038                     ___ftmul@exp:	
  3508                           ; 1 bytes @ 0x18
  3509                           
  3510                           
  3511                           ; 1 bytes @ 0x18
  3512  0038                     	ds	1
  3513  0039                     ___ftdiv@f3:	
  3514  0039                     ___ftmul@f3_as_product:	
  3515                           ; 3 bytes @ 0x19
  3516                           
  3517                           
  3518                           ; 3 bytes @ 0x19
  3519  0039                     	ds	3
  3520  003C                     ___ftdiv@exp:	
  3521  003C                     ___ftmul@cntr:	
  3522                           ; 1 bytes @ 0x1C
  3523                           
  3524                           
  3525                           ; 1 bytes @ 0x1C
  3526  003C                     	ds	1
  3527  003D                     ___ftdiv@sign:	
  3528  003D                     ___ftmul@sign:	
  3529                           ; 1 bytes @ 0x1D
  3530                           
  3531                           
  3532                           ; 1 bytes @ 0x1D
  3533  003D                     	ds	1
  3534  003E                     ?___ftadd:	
  3535  003E                     ___ftadd@f1:	
  3536                           ; 3 bytes @ 0x1E
  3537                           
  3538                           
  3539                           ; 3 bytes @ 0x1E
  3540  003E                     	ds	3
  3541  0041                     ___ftadd@f2:	
  3542                           
  3543                           ; 3 bytes @ 0x21
  3544  0041                     	ds	3
  3545  0044                     ??___ftadd:	
  3546                           
  3547                           ; 0 bytes @ 0x24
  3548  0044                     	ds	4
  3549  0048                     ___ftadd@sign:	
  3550                           
  3551                           ; 1 bytes @ 0x28
  3552  0048                     	ds	1
  3553  0049                     ___ftadd@exp2:	
  3554                           
  3555                           ; 1 bytes @ 0x29
  3556  0049                     	ds	1
  3557  004A                     ___ftadd@exp1:	
  3558                           
  3559                           ; 1 bytes @ 0x2A
  3560  004A                     	ds	1
  3561  004B                     ?___fttol:	
  3562  004B                     ___fttol@f1:	
  3563                           ; 4 bytes @ 0x2B
  3564                           
  3565                           
  3566                           ; 3 bytes @ 0x2B
  3567  004B                     	ds	4
  3568  004F                     ??___fttol:	
  3569                           
  3570                           ; 0 bytes @ 0x2F
  3571  004F                     	ds	4
  3572  0053                     ___fttol@sign1:	
  3573                           
  3574                           ; 1 bytes @ 0x33
  3575  0053                     	ds	1
  3576  0054                     ___fttol@lval:	
  3577                           
  3578                           ; 4 bytes @ 0x34
  3579  0054                     	ds	4
  3580  0058                     ___fttol@exp1:	
  3581                           
  3582                           ; 1 bytes @ 0x38
  3583  0058                     	ds	1
  3584  0059                     ??_getPercentValue:	
  3585  0059                     ??_setPercentValue:	
  3586                           ; 0 bytes @ 0x39
  3587                           
  3588  0059                     setPercentValue@value:	
  3589                           ; 0 bytes @ 0x39
  3590                           
  3591                           
  3592                           ; 1 bytes @ 0x39
  3593  0059                     	ds	1
  3594  005A                     setPercentValue@i:	
  3595                           
  3596                           ; 3 bytes @ 0x3A
  3597  005A                     	ds	1
  3598  005B                     getPercentValue@value:	
  3599                           
  3600                           ; 1 bytes @ 0x3B
  3601  005B                     	ds	1
  3602  005C                     getPercentValue@i:	
  3603                           
  3604                           ; 3 bytes @ 0x3C
  3605  005C                     	ds	1
  3606  005D                     ?_setRF_DimmerLights:	
  3607  005D                     ??_Flash_Memory_Initialization:	
  3608                           ; 0 bytes @ 0x3D
  3609                           
  3610  005D                     setRF_DimmerLights@on:	
  3611                           ; 0 bytes @ 0x3D
  3612                           
  3613                           
  3614                           ; 1 bytes @ 0x3D
  3615  005D                     	ds	1
  3616  005E                     ??_setRF_DimmerLights:	
  3617  005E                     Flash_Memory_Initialization@i:	
  3618                           ; 0 bytes @ 0x3E
  3619                           
  3620                           
  3621                           ; 1 bytes @ 0x3E
  3622  005E                     	ds	1
  3623  005F                     ??_setDimmerLights_AdjRF:	
  3624                           
  3625                           ; 0 bytes @ 0x3F
  3626  005F                     	ds	1
  3627  0060                     setDimmerLights_AdjRF@lights:	
  3628  0060                     setRF_DimmerLights@status:	
  3629                           ; 1 bytes @ 0x40
  3630                           
  3631                           
  3632                           ; 1 bytes @ 0x40
  3633  0060                     	ds	1
  3634  0061                     ??_setRF_DimmerValue:	
  3635  0061                     setRF_DimmerLights@lights:	
  3636                           ; 0 bytes @ 0x41
  3637                           
  3638                           
  3639                           ; 1 bytes @ 0x41
  3640  0061                     	ds	1
  3641  0062                     ??_DlyOff_Main:	
  3642  0062                     ?_setDimmerLights_Adj:	
  3643                           ; 0 bytes @ 0x42
  3644                           
  3645  0062                     ??_setRFSW_Control:	
  3646                           ; 0 bytes @ 0x42
  3647                           
  3648  0062                     ??_Sw_DimmerOnFunc:	
  3649                           ; 0 bytes @ 0x42
  3650                           
  3651  0062                     ??_Sw_DimmerOffFunc:	
  3652                           ; 0 bytes @ 0x42
  3653                           
  3654  0062                     setDimmerLights_Adj@status:	
  3655                           ; 0 bytes @ 0x42
  3656                           
  3657  0062                     Sw_DimmerOnFunc@Idle:	
  3658                           ; 1 bytes @ 0x42
  3659                           
  3660                           
  3661                           ; 1 bytes @ 0x42
  3662  0062                     	ds	1
  3663  0063                     ??_setDimmerLights_Adj:	
  3664  0063                     setRFSW_Control@sw:	
  3665                           ; 0 bytes @ 0x43
  3666                           
  3667  0063                     setRF_DimmerValue@lights:	
  3668                           ; 1 bytes @ 0x43
  3669                           
  3670  0063                     Sw_DimmerOnFunc@sw:	
  3671                           ; 1 bytes @ 0x43
  3672                           
  3673                           
  3674                           ; 1 bytes @ 0x43
  3675  0063                     	ds	1
  3676  0064                     ??_setRFSW_AdjControl:	
  3677  0064                     DlyOff_Main@sw:	
  3678                           ; 0 bytes @ 0x44
  3679                           
  3680  0064                     setDimmerLights_Adj@lights:	
  3681                           ; 1 bytes @ 0x44
  3682                           
  3683  0064                     Sw_DimmerOffFunc@sw:	
  3684                           ; 1 bytes @ 0x44
  3685                           
  3686                           
  3687                           ; 1 bytes @ 0x44
  3688  0064                     	ds	1
  3689  0065                     ??_setDimmerLights_Main:	
  3690  0065                     ??_setSw_Main:	
  3691                           ; 0 bytes @ 0x45
  3692                           
  3693  0065                     ??_DelayOff_Main:	
  3694                           ; 0 bytes @ 0x45
  3695                           
  3696  0065                     setDimmerLights_Main@clear:	
  3697                           ; 0 bytes @ 0x45
  3698                           
  3699                           
  3700                           ; 1 bytes @ 0x45
  3701  0065                     	ds	1
  3702  0066                     setDimmerLights_Main@lights:	
  3703  0066                     setRFSW_AdjControl@sw:	
  3704                           ; 1 bytes @ 0x46
  3705                           
  3706                           
  3707                           ; 1 bytes @ 0x46
  3708  0066                     	ds	1
  3709  0067                     ??_setRF_Main:	
  3710  0067                     ??_getRxData:	
  3711                           ; 0 bytes @ 0x47
  3712                           
  3713  0067                     ??_setControl_Lights_Table:	
  3714                           ; 0 bytes @ 0x47
  3715                           
  3716  0067                     ??_DimmerLights_Main:	
  3717                           ; 0 bytes @ 0x47
  3718                           
  3719  0067                     _setSw_Main$5862:	
  3720                           ; 0 bytes @ 0x47
  3721                           
  3722                           
  3723                           ; 1 bytes @ 0x47
  3724  0067                     	ds	1
  3725  0068                     _setRF_Main$4841:	
  3726  0068                     setSw_Main@sw:	
  3727                           ; 1 bytes @ 0x48
  3728                           
  3729                           
  3730                           ; 1 bytes @ 0x48
  3731  0068                     	ds	1
  3732  0069                     ??_RF_Main:	
  3733  0069                     ??_Switch_Main:	
  3734                           ; 0 bytes @ 0x49
  3735                           
  3736  0069                     ??_main:	
  3737                           ; 0 bytes @ 0x49
  3738                           
  3739                           
  3740                           	psect	maintext
  3741  174F                     __pmaintext:	
  3742                           ; 0 bytes @ 0x49
  3743 ;;
  3744 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3745 ;;
  3746 ;; *************** function _main *****************
  3747 ;; Defined at:
  3748 ;;		line 7 in file "../src/main_B1.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  argc            2    0[BANK3 ] int 
  3751 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;		None
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  2    0[BANK3 ] int 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 17F/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3763 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3767 ;;Total ram usage:        4 bytes
  3768 ;; Hardware stack levels required when called:   15
  3769 ;; This function calls:
  3770 ;;		_Buzzer_Initialization
  3771 ;;		_Buzzer_Main
  3772 ;;		_CC2500_PowerOnInitial
  3773 ;;		_DelayOff_Initialization
  3774 ;;		_DelayOff_Main
  3775 ;;		_DimmerLights_Initialization
  3776 ;;		_DimmerLights_Main
  3777 ;;		_Flash_Memory_Initialization
  3778 ;;		_Flash_Memory_Main
  3779 ;;		_LED_Initialization
  3780 ;;		_LED_Main
  3781 ;;		_Mcu_Initialization
  3782 ;;		_PowerFault_Initialization
  3783 ;;		_PowerFault_Main
  3784 ;;		_RF_Initialization
  3785 ;;		_RF_Main
  3786 ;;		_Switch_Initialization
  3787 ;;		_Switch_Main
  3788 ;;		_Temp_Initialization
  3789 ;;		_Temp_Main
  3790 ;;		_WDT_Main
  3791 ;;		_getPowerFault_AD
  3792 ;;		_getTemp_AD
  3793 ;;		_myMain_Initialization
  3794 ;;		_my_MainTime
  3795 ;; This function is called by:
  3796 ;;		Startup code after reset
  3797 ;; This function uses a non-reentrant model
  3798 ;;
  3799                           
  3800                           
  3801                           ;psect for function _main
  3802  174F                     _main:	
  3803                           
  3804                           ;main_B1.c: 8: myMain_Initialization();
  3805                           
  3806                           ;incstack = 0
  3807                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3808  174F  319E  26DA  3197   	fcall	_myMain_Initialization
  3809                           
  3810                           ;main_B1.c: 9: Mcu_Initialization();
  3811  1752  319F  274A  3197   	fcall	_Mcu_Initialization
  3812                           
  3813                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3814  1755  3185  2500  3197   	fcall	_Flash_Memory_Initialization
  3815                           
  3816                           ;main_B1.c: 11: LED_Initialization();
  3817  1758  319E  2646  3197   	fcall	_LED_Initialization
  3818                           
  3819                           ;main_B1.c: 12: Buzzer_Initialization();
  3820  175B  319D  252F  3197   	fcall	_Buzzer_Initialization
  3821                           
  3822                           ;main_B1.c: 14: ;;
  3823                           ;main_B1.c: 15: Temp_Initialization();
  3824  175E  319D  2541  3197   	fcall	_Temp_Initialization
  3825                           
  3826                           ;main_B1.c: 16: ;;
  3827                           ;main_B1.c: 17: PowerFault_Initialization();
  3828  1761  319D  2532  3197   	fcall	_PowerFault_Initialization
  3829                           
  3830                           ;main_B1.c: 18: DelayOff_Initialization();
  3831  1764  319D  2557  3197   	fcall	_DelayOff_Initialization
  3832                           
  3833                           ;main_B1.c: 20: DimmerLights_Initialization();
  3834  1767  319E  2677  3197   	fcall	_DimmerLights_Initialization
  3835                           
  3836                           ;main_B1.c: 21: ;;
  3837                           ;main_B1.c: 22: ;;
  3838                           ;main_B1.c: 23: ;;
  3839                           ;main_B1.c: 24: Switch_Initialization();
  3840  176A  319D  25B9  3197   	fcall	_Switch_Initialization
  3841                           
  3842                           ;main_B1.c: 25: RF_Initialization();
  3843  176D  319D  2538  3197   	fcall	_RF_Initialization
  3844                           
  3845                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3846  1770  319F  27A9  3197   	fcall	_CC2500_PowerOnInitial
  3847  1773                     l9538:	
  3848                           ;main_B1.c: 27: ;;
  3849                           ;main_B1.c: 29: while (1) {
  3850                           
  3851                           
  3852                           ;main_B1.c: 31: if (myMain.PowerON) {
  3853  1773  0021               	movlb	1	; select bank1
  3854  1774  1C20               	btfss	_myMain^(0+128),0
  3855  1775  2F7E               	goto	l9542
  3856                           
  3857                           ;main_B1.c: 33: ;;
  3858                           ;main_B1.c: 37: ;;
  3859                           ;main_B1.c: 41: getTemp_AD(0x09);
  3860  1776  3009               	movlw	9
  3861  1777  3193  23DA  3197   	fcall	_getTemp_AD
  3862                           
  3863                           ;main_B1.c: 45: getPowerFault_AD(0x11);
  3864  177A  3011               	movlw	17
  3865  177B  3192  2211  3197   	fcall	_getPowerFault_AD
  3866  177E                     l9542:	
  3867                           
  3868                           ;main_B1.c: 60: }
  3869                           ;main_B1.c: 96: if (myMain.T1_Timerout) {
  3870  177E  0021               	movlb	1	; select bank1
  3871  177F  1D20               	btfss	_myMain^(0+128),2
  3872  1780  2F73               	goto	l9538
  3873                           
  3874                           ;main_B1.c: 97: myMain.T1_Timerout = 0;
  3875  1781  1120               	bcf	_myMain^(0+128),2
  3876                           
  3877                           ;main_B1.c: 98: my_MainTime();
  3878  1782  3188  204A  3197   	fcall	_my_MainTime
  3879                           
  3880                           ;main_B1.c: 99: WDT_Main();
  3881  1785  319F  276E  3197   	fcall	_WDT_Main
  3882                           
  3883                           ;main_B1.c: 100: ;;
  3884                           ;main_B1.c: 101: ;;
  3885                           ;main_B1.c: 102: if (myMain.PowerON) {
  3886  1788  0021               	movlb	1	; select bank1
  3887  1789  1C20               	btfss	_myMain^(0+128),0
  3888  178A  2F73               	goto	l9538
  3889                           
  3890                           ;main_B1.c: 103: Flash_Memory_Main();
  3891  178B  3187  27E1  3197   	fcall	_Flash_Memory_Main
  3892                           
  3893                           ;main_B1.c: 105: LED_Main();
  3894  178E  319E  2652  3197   	fcall	_LED_Main
  3895                           
  3896                           ;main_B1.c: 106: Buzzer_Main();
  3897  1791  3188  2000  3197   	fcall	_Buzzer_Main
  3898                           
  3899                           ;main_B1.c: 108: ;;
  3900                           ;main_B1.c: 109: Temp_Main();
  3901  1794  319D  2544  3197   	fcall	_Temp_Main
  3902                           
  3903                           ;main_B1.c: 110: ;;
  3904                           ;main_B1.c: 111: PowerFault_Main();
  3905  1797  319D  2535  3197   	fcall	_PowerFault_Main
  3906                           
  3907                           ;main_B1.c: 113: ;;
  3908                           ;main_B1.c: 114: DimmerLights_Main();
  3909  179A  319D  2582  3197   	fcall	_DimmerLights_Main
  3910                           
  3911                           ;main_B1.c: 115: Switch_Main();
  3912  179D  319D  2567  3197   	fcall	_Switch_Main
  3913                           
  3914                           ;main_B1.c: 116: ;;
  3915                           ;main_B1.c: 117: ;;
  3916                           ;main_B1.c: 119: RF_Main();
  3917  17A0  319D  253B  3197   	fcall	_RF_Main
  3918                           
  3919                           ;main_B1.c: 120: DelayOff_Main();
  3920  17A3  319D  255B  3197   	fcall	_DelayOff_Main
  3921                           
  3922                           ;main_B1.c: 121: ;;
  3923  17A6  2F73               	goto	l9538
  3924  17A7                     __end_of_main:	
  3925                           ;main_B1.c: 129: }
  3926                           ;main_B1.c: 130: }
  3927                           ;main_B1.c: 164: }
  3928                           ;main_B1.c: 165: return (0);
  3929                           ;	Return value of _main is never used
  3930                           
  3931                           
  3932                           	psect	text1
  3933  084A                     __ptext1:	
  3934 ;; *************** function _my_MainTime *****************
  3935 ;; Defined at:
  3936 ;;		line 183 in file "../src/main_B1.c"
  3937 ;; Parameters:    Size  Location     Type
  3938 ;;		None
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;		None               void
  3943 ;; Registers used:
  3944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;Total ram usage:        0 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    7
  3957 ;; This function calls:
  3958 ;;		_setBuz
  3959 ;;		_setRF_Enable
  3960 ;;		_setSw_Enable
  3961 ;;		_setTemp_Enable
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           
  3968                           ;psect for function _my_MainTime
  3969  084A                     _my_MainTime:	
  3970                           
  3971                           ;main_B1.c: 185: if (myMain.PowerON == 0) {
  3972                           
  3973                           ;incstack = 0
  3974                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3975  084A  0021               	movlb	1	; select bank1
  3976  084B  1820               	btfsc	_myMain^(0+128),0
  3977  084C  2878               	goto	l9448
  3978                           
  3979                           ;main_B1.c: 186: myMain.PowerCount++;
  3980  084D  3001               	movlw	1
  3981  084E  07A2               	addwf	(_myMain^(0+128)+2),f
  3982  084F  3000               	movlw	0
  3983  0850  3DA3               	addwfc	((_myMain+1)^(0+128)+2),f
  3984                           
  3985                           ;main_B1.c: 187: if (myMain.PowerCount == 150)
  3986  0851  3002               	movlw	2
  3987  0852  3EA0               	addlw	_myMain& (0+255)
  3988  0853  0086               	movwf	6
  3989  0854  0187               	clrf	7
  3990  0855  3F40               	moviw [0]fsr1
  3991  0856  3A96               	xorlw	150
  3992  0857  1D03               	skipz
  3993  0858  285B               	goto	u9785
  3994  0859  3F41               	moviw [1]fsr1
  3995  085A  3A00               	xorlw	0
  3996  085B                     u9785:	
  3997  085B  1D03               	skipz
  3998  085C  2890               	goto	l9458
  3999                           
  4000                           ;main_B1.c: 188: {
  4001                           ;main_B1.c: 189: myMain.PowerCount = 0;
  4002  085D  01A2               	clrf	(_myMain^(0+128)+2)
  4003  085E  01A3               	clrf	((_myMain+1)^(0+128)+2)
  4004                           
  4005                           ;main_B1.c: 190: myMain.PowerON = 1;
  4006  085F  1420               	bsf	_myMain^(0+128),0
  4007                           
  4008                           ;main_B1.c: 193: setTemp_Enable(1);
  4009  0860  3001               	movlw	1
  4010  0861  319D  25A8  3188   	fcall	_setTemp_Enable
  4011                           
  4012                           ;main_B1.c: 197: ;;
  4013                           ;main_B1.c: 203: setBuz(3, 50);
  4014  0864  3032               	movlw	50
  4015  0865  0020               	movlb	0	; select bank0
  4016  0866  00A9               	movwf	setBuz@time
  4017  0867  3000               	movlw	0
  4018  0868  00AA               	movwf	setBuz@time+1
  4019  0869  3003               	movlw	3
  4020  086A  3197  27A7  3188   	fcall	_setBuz
  4021                           
  4022                           ;main_B1.c: 204: myMain.SelfTest = 1;
  4023  086D  0021               	movlb	1	; select bank1
  4024  086E  17A0               	bsf	_myMain^(0+128),7
  4025                           
  4026                           ;main_B1.c: 206: setSw_Enable(1);
  4027  086F  3001               	movlw	1
  4028  0870  319E  26BC  3188   	fcall	_setSw_Enable
  4029                           
  4030                           ;main_B1.c: 209: setRF_Enable(1);
  4031  0873  3001               	movlw	1
  4032  0874  319E  269F  3188   	fcall	_setRF_Enable
  4033                           
  4034                           ;main_B1.c: 213: }
  4035                           ;main_B1.c: 214: } else {
  4036  0877  2890               	goto	l9458
  4037  0878                     l9448:	
  4038                           
  4039                           ;main_B1.c: 222: myMain.Count1++;
  4040  0878  3001               	movlw	1
  4041  0879  0021               	movlb	1	; select bank1
  4042  087A  07A6               	addwf	(_myMain^(0+128)+6),f
  4043  087B  3000               	movlw	0
  4044  087C  3DA7               	addwfc	((_myMain+1)^(0+128)+6),f
  4045                           
  4046                           ;main_B1.c: 223: if (myMain.Count1 == 100)
  4047  087D  3006               	movlw	6
  4048  087E  3EA0               	addlw	_myMain& (0+255)
  4049  087F  0086               	movwf	6
  4050  0880  0187               	clrf	7
  4051  0881  3F40               	moviw [0]fsr1
  4052  0882  3A64               	xorlw	100
  4053  0883  1D03               	skipz
  4054  0884  2887               	goto	u9795
  4055  0885  3F41               	moviw [1]fsr1
  4056  0886  3A00               	xorlw	0
  4057  0887                     u9795:	
  4058  0887  1D03               	skipz
  4059  0888  2890               	goto	l9458
  4060                           
  4061                           ;main_B1.c: 224: {
  4062                           ;main_B1.c: 225: myMain.Count1 = 0;
  4063  0889  01A6               	clrf	(_myMain^(0+128)+6)
  4064  088A  01A7               	clrf	((_myMain+1)^(0+128)+6)
  4065                           
  4066                           ;main_B1.c: 237: if (myMain.Flag) {
  4067  088B  1E20               	btfss	_myMain^(0+128),4
  4068  088C  288F               	goto	l2609
  4069                           
  4070                           ;main_B1.c: 238: myMain.Flag = 0;
  4071  088D  1220               	bcf	_myMain^(0+128),4
  4072                           
  4073                           ;main_B1.c: 247: } else {
  4074  088E  2890               	goto	l9458
  4075  088F                     l2609:	
  4076                           
  4077                           ;main_B1.c: 248: myMain.Flag = 1;
  4078  088F  1620               	bsf	_myMain^(0+128),4
  4079  0890                     l9458:	
  4080                           
  4081                           ;main_B1.c: 257: }
  4082                           ;main_B1.c: 258: }
  4083                           ;main_B1.c: 260: }
  4084                           ;main_B1.c: 262: myMain.Count2++;
  4085  0890  3001               	movlw	1
  4086  0891  0021               	movlb	1	; select bank1
  4087  0892  07A8               	addwf	(_myMain^(0+128)+8),f
  4088  0893  3000               	movlw	0
  4089  0894  3DA9               	addwfc	((_myMain+1)^(0+128)+8),f
  4090                           
  4091                           ;main_B1.c: 263: if (myMain.Count2 == 50) {
  4092  0895  3008               	movlw	8
  4093  0896  3EA0               	addlw	_myMain& (0+255)
  4094  0897  0086               	movwf	6
  4095  0898  0187               	clrf	7
  4096  0899  3F40               	moviw [0]fsr1
  4097  089A  3A32               	xorlw	50
  4098  089B  1D03               	skipz
  4099  089C  289F               	goto	u9815
  4100  089D  3F41               	moviw [1]fsr1
  4101  089E  3A00               	xorlw	0
  4102  089F                     u9815:	
  4103  089F  1D03               	skipz
  4104  08A0  0008               	return
  4105                           
  4106                           ;main_B1.c: 264: myMain.Count2 = 0;
  4107  08A1  01A8               	clrf	(_myMain^(0+128)+8)
  4108  08A2  01A9               	clrf	((_myMain+1)^(0+128)+8)
  4109  08A3  0008               	return
  4110  08A4                     __end_of_my_MainTime:	
  4111                           
  4112                           	psect	text2
  4113  1DA8                     __ptext2:	
  4114 ;; *************** function _setTemp_Enable *****************
  4115 ;; Defined at:
  4116 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;  command         1    wreg     unsigned char 
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;  command         1    0[BANK0 ] unsigned char 
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 0/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;Total ram usage:        1 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    5
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_my_MainTime
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _setTemp_Enable
  4146  1DA8                     _setTemp_Enable:	
  4147                           
  4148                           ;incstack = 0
  4149                           ; Regs used in _setTemp_Enable: [wreg]
  4150                           ;setTemp_Enable@command stored from wreg
  4151  1DA8  0020               	movlb	0	; select bank0
  4152  1DA9  00A0               	movwf	setTemp_Enable@command
  4153                           
  4154                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4155  1DAA  0820               	movf	setTemp_Enable@command,w
  4156  1DAB  0021               	movlb	1	; select bank1
  4157  1DAC  1060               	bcf	_Temp1^(0+128),0
  4158  1DAD  1D03               	skipz
  4159  1DAE  1460               	bsf	_Temp1^(0+128),0
  4160  1DAF  0008               	return
  4161  1DB0                     __end_of_setTemp_Enable:	
  4162                           
  4163                           	psect	text3
  4164  1EDA                     __ptext3:	
  4165 ;; *************** function _myMain_Initialization *****************
  4166 ;; Defined at:
  4167 ;;		line 171 in file "../src/main_B1.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;		None               void
  4174 ;; Registers used:
  4175 ;;		wreg, fsr1l, fsr1h
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4184 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4185 ;;Total ram usage:        1 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; Hardware stack levels required when called:    5
  4188 ;; This function calls:
  4189 ;;		Nothing
  4190 ;; This function is called by:
  4191 ;;		_main
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _myMain_Initialization
  4197  1EDA                     _myMain_Initialization:	
  4198                           
  4199                           ;main_B1.c: 173: product = &_product;
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4203  1EDA  30A0               	movlw	__product& (0+255)
  4204  1EDB  0020               	movlb	0	; select bank0
  4205  1EDC  00A0               	movwf	??_myMain_Initialization
  4206  1EDD  0820               	movf	??_myMain_Initialization,w
  4207  1EDE  00ED               	movwf	_product
  4208                           
  4209                           ;main_B1.c: 174: product->Data[20] = 209;
  4210  1EDF  30D1               	movlw	209
  4211  1EE0  00A0               	movwf	??_myMain_Initialization
  4212  1EE1  086D               	movf	_product,w
  4213  1EE2  3E14               	addlw	20
  4214  1EE3  0086               	movwf	6
  4215  1EE4  3001               	movlw	1	; select bank2/3
  4216  1EE5  0087               	movwf	7
  4217  1EE6  0820               	movf	??_myMain_Initialization,w
  4218  1EE7  0081               	movwf	1
  4219  1EE8  0008               	return
  4220  1EE9                     __end_of_myMain_Initialization:	
  4221                           
  4222                           	psect	text4
  4223  13DA                     __ptext4:	
  4224 ;; *************** function _getTemp_AD *****************
  4225 ;; Defined at:
  4226 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;  channel         1    wreg     unsigned char 
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  channel         1    5[BANK0 ] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;		None               void
  4233 ;; Registers used:
  4234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;Total ram usage:        2 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; Hardware stack levels required when called:    7
  4247 ;; This function calls:
  4248 ;;		_getAD
  4249 ;; This function is called by:
  4250 ;;		_main
  4251 ;; This function uses a non-reentrant model
  4252 ;;
  4253                           
  4254                           
  4255                           ;psect for function _getTemp_AD
  4256  13DA                     _getTemp_AD:	
  4257                           
  4258                           ;incstack = 0
  4259                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4260                           ;getTemp_AD@channel stored from wreg
  4261  13DA  0020               	movlb	0	; select bank0
  4262  13DB  00A5               	movwf	getTemp_AD@channel
  4263                           
  4264                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4265  13DC  0021               	movlb	1	; select bank1
  4266  13DD  1D60               	btfss	_Temp1^(0+128),2
  4267  13DE  0008               	return
  4268                           
  4269                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4270  13DF  30F0               	movlw	240
  4271  13E0  0020               	movlb	0	; select bank0
  4272  13E1  00A4               	movwf	??_getTemp_AD
  4273  13E2  0824               	movf	??_getTemp_AD,w
  4274  13E3  00A0               	movwf	getAD@adcon1
  4275  13E4  0825               	movf	getTemp_AD@channel,w
  4276  13E5  3190  20FF  3193   	fcall	_getAD
  4277  13E8  0020               	movlb	0	; select bank0
  4278  13E9  0821               	movf	?_getAD+1,w
  4279  13EA  0021               	movlb	1	; select bank1
  4280  13EB  01ED               	clrf	((_Temp1+1)^(0+128)+12)
  4281  13EC  07ED               	addwf	((_Temp1+1)^(0+128)+12),f
  4282  13ED  0020               	movlb	0	; select bank0
  4283  13EE  0820               	movf	?_getAD,w
  4284  13EF  0021               	movlb	1	; select bank1
  4285  13F0  01EC               	clrf	(_Temp1^(0+128)+12)
  4286  13F1  07EC               	addwf	(_Temp1^(0+128)+12),f
  4287                           
  4288                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4289  13F2  086D               	movf	((_Temp1+1)^(0+128)+12),w
  4290  13F3  0269               	subwf	((_Temp1+1)^(0+128)+8),w
  4291  13F4  1D03               	skipz
  4292  13F5  2BF8               	goto	u9735
  4293  13F6  086C               	movf	(_Temp1^(0+128)+12),w
  4294  13F7  0268               	subwf	(_Temp1^(0+128)+8),w
  4295  13F8                     u9735:	
  4296  13F8  1803               	skipnc
  4297  13F9  2C01               	goto	l9396
  4298                           
  4299                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4300  13FA  086D               	movf	((_Temp1+1)^(0+128)+12),w
  4301  13FB  01E9               	clrf	((_Temp1+1)^(0+128)+8)
  4302  13FC  07E9               	addwf	((_Temp1+1)^(0+128)+8),f
  4303  13FD  086C               	movf	(_Temp1^(0+128)+12),w
  4304  13FE  01E8               	clrf	(_Temp1^(0+128)+8)
  4305  13FF  07E8               	addwf	(_Temp1^(0+128)+8),f
  4306                           
  4307                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4308  1400  0008               	return
  4309  1401                     l9396:	
  4310  1401  086D               	movf	((_Temp1+1)^(0+128)+12),w
  4311  1402  026B               	subwf	((_Temp1+1)^(0+128)+10),w
  4312  1403  1D03               	skipz
  4313  1404  2C07               	goto	u9745
  4314  1405  086C               	movf	(_Temp1^(0+128)+12),w
  4315  1406  026A               	subwf	(_Temp1^(0+128)+10),w
  4316  1407                     u9745:	
  4317  1407  1803               	skipnc
  4318  1408  0008               	return
  4319                           
  4320                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4321  1409  086D               	movf	((_Temp1+1)^(0+128)+12),w
  4322  140A  01EB               	clrf	((_Temp1+1)^(0+128)+10)
  4323  140B  07EB               	addwf	((_Temp1+1)^(0+128)+10),f
  4324  140C  086C               	movf	(_Temp1^(0+128)+12),w
  4325  140D  01EA               	clrf	(_Temp1^(0+128)+10)
  4326  140E  07EA               	addwf	(_Temp1^(0+128)+10),f
  4327  140F  0008               	return
  4328  1410                     __end_of_getTemp_AD:	
  4329                           
  4330                           	psect	text5
  4331  1211                     __ptext5:	
  4332 ;; *************** function _getPowerFault_AD *****************
  4333 ;; Defined at:
  4334 ;;		line 45 in file "../src/PowerFault_B1.c"
  4335 ;; Parameters:    Size  Location     Type
  4336 ;;  channel         1    wreg     unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  channel         1    5[BANK0 ] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;		None               void
  4341 ;; Registers used:
  4342 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4349 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4350 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;Total ram usage:        2 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    7
  4355 ;; This function calls:
  4356 ;;		_getAD
  4357 ;; This function is called by:
  4358 ;;		_main
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           
  4363                           ;psect for function _getPowerFault_AD
  4364  1211                     _getPowerFault_AD:	
  4365                           
  4366                           ;incstack = 0
  4367                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4368                           ;getPowerFault_AD@channel stored from wreg
  4369  1211  0020               	movlb	0	; select bank0
  4370  1212  00A5               	movwf	getPowerFault_AD@channel
  4371                           
  4372                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4373  1213  0021               	movlb	1	; select bank1
  4374  1214  1DCB               	btfss	_PF1^(0+128),3
  4375  1215  0008               	return
  4376                           
  4377                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4378  1216  30F0               	movlw	240
  4379  1217  0020               	movlb	0	; select bank0
  4380  1218  00A4               	movwf	??_getPowerFault_AD
  4381  1219  0824               	movf	??_getPowerFault_AD,w
  4382  121A  00A0               	movwf	getAD@adcon1
  4383  121B  0825               	movf	getPowerFault_AD@channel,w
  4384  121C  3190  20FF  3192   	fcall	_getAD
  4385  121F  0020               	movlb	0	; select bank0
  4386  1220  0821               	movf	?_getAD+1,w
  4387  1221  0021               	movlb	1	; select bank1
  4388  1222  01D2               	clrf	((_PF1+1)^(0+128)+6)
  4389  1223  07D2               	addwf	((_PF1+1)^(0+128)+6),f
  4390  1224  0020               	movlb	0	; select bank0
  4391  1225  0820               	movf	?_getAD,w
  4392  1226  0021               	movlb	1	; select bank1
  4393  1227  01D1               	clrf	(_PF1^(0+128)+6)
  4394  1228  07D1               	addwf	(_PF1^(0+128)+6),f
  4395                           
  4396                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4397  1229  0852               	movf	((_PF1+1)^(0+128)+6),w
  4398  122A  0250               	subwf	((_PF1+1)^(0+128)+4),w
  4399  122B  1D03               	skipz
  4400  122C  2A2F               	goto	u9765
  4401  122D  0851               	movf	(_PF1^(0+128)+6),w
  4402  122E  024F               	subwf	(_PF1^(0+128)+4),w
  4403  122F                     u9765:	
  4404  122F  1803               	skipnc
  4405  1230  0008               	return
  4406                           
  4407                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4408  1231  0852               	movf	((_PF1+1)^(0+128)+6),w
  4409  1232  01D0               	clrf	((_PF1+1)^(0+128)+4)
  4410  1233  07D0               	addwf	((_PF1+1)^(0+128)+4),f
  4411  1234  0851               	movf	(_PF1^(0+128)+6),w
  4412  1235  01CF               	clrf	(_PF1^(0+128)+4)
  4413  1236  07CF               	addwf	(_PF1^(0+128)+4),f
  4414  1237  0008               	return
  4415  1238                     __end_of_getPowerFault_AD:	
  4416                           
  4417                           	psect	text6
  4418  10FF                     __ptext6:	
  4419 ;; *************** function _getAD *****************
  4420 ;; Defined at:
  4421 ;;		line 453 in file "../src/MCU_B1.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  adcon0          1    wreg     unsigned char 
  4424 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  2    0[BANK0 ] int 
  4429 ;; Registers used:
  4430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        4 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    6
  4443 ;; This function calls:
  4444 ;;		_Timeout_Counter
  4445 ;;		_set_TimeoutCleared
  4446 ;; This function is called by:
  4447 ;;		_getTemp_AD
  4448 ;;		_getPowerFault_AD
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           
  4453                           ;psect for function _getAD
  4454  10FF                     _getAD:	
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4458                           ;getAD@adcon0 stored from wreg
  4459  10FF  0020               	movlb	0	; select bank0
  4460  1100  00A3               	movwf	getAD@adcon0
  4461                           
  4462                           ;MCU_B1.c: 454: ADCON0 = adcon0;
  4463  1101  0823               	movf	getAD@adcon0,w
  4464  1102  0021               	movlb	1	; select bank1
  4465  1103  009D               	movwf	29	;volatile
  4466                           
  4467                           ;MCU_B1.c: 455: ADCON1 = adcon1;
  4468  1104  0020               	movlb	0	; select bank0
  4469  1105  0820               	movf	getAD@adcon1,w
  4470  1106  0021               	movlb	1	; select bank1
  4471  1107  009E               	movwf	30	;volatile
  4472                           
  4473                           ;MCU_B1.c: 456: GO_nDONE = 1;
  4474  1108  149D               	bsf	29,1	;volatile
  4475                           
  4476                           ;MCU_B1.c: 457: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4477  1109  290D               	goto	l8882
  4478  110A                     l8880:	
  4479                           
  4480                           ;MCU_B1.c: 458: Timeout_Counter();
  4481  110A  319F  2794  3190   	fcall	_Timeout_Counter
  4482  110D                     l8882:	
  4483  110D  0021               	movlb	1	; select bank1
  4484  110E  1C9D               	btfss	29,1	;volatile
  4485  110F  2912               	goto	l8886
  4486  1110  1D30               	btfss	(_myMain^(0+128)+16),2
  4487  1111  290A               	goto	l8880
  4488  1112                     l8886:	
  4489                           
  4490                           ;MCU_B1.c: 459: };
  4491                           ;MCU_B1.c: 460: set_TimeoutCleared();
  4492  1112  319D  256B         	fcall	_set_TimeoutCleared
  4493                           
  4494                           ;MCU_B1.c: 461: return ((ADRESH*256)+ADRESL);
  4495  1114  0021               	movlb	1	; select bank1
  4496  1115  081C               	movf	28,w	;volatile
  4497  1116  0020               	movlb	0	; select bank0
  4498  1117  01A1               	clrf	?_getAD+1
  4499  1118  07A1               	addwf	?_getAD+1,f
  4500  1119  0021               	movlb	1	; select bank1
  4501  111A  081B               	movf	27,w	;volatile
  4502  111B  0020               	movlb	0	; select bank0
  4503  111C  01A0               	clrf	?_getAD
  4504  111D  07A0               	addwf	?_getAD,f
  4505  111E  0008               	return
  4506  111F                     __end_of_getAD:	
  4507                           
  4508                           	psect	text7
  4509  1F6E                     __ptext7:	
  4510 ;; *************** function _WDT_Main *****************
  4511 ;; Defined at:
  4512 ;;		line 1019 in file "../src/MCU_B1.c"
  4513 ;; Parameters:    Size  Location     Type
  4514 ;;		None
  4515 ;; Auto vars:     Size  Location     Type
  4516 ;;		None
  4517 ;; Return value:  Size  Location     Type
  4518 ;;		None               void
  4519 ;; Registers used:
  4520 ;;		wreg, status,2, status,0, pclath, cstack
  4521 ;; Tracked objects:
  4522 ;;		On entry : 0/0
  4523 ;;		On exit  : 0/0
  4524 ;;		Unchanged: 0/0
  4525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4529 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4530 ;;Total ram usage:        1 bytes
  4531 ;; Hardware stack levels used:    1
  4532 ;; Hardware stack levels required when called:    6
  4533 ;; This function calls:
  4534 ;;		_WDT_Clearing
  4535 ;; This function is called by:
  4536 ;;		_main
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540                           
  4541                           ;psect for function _WDT_Main
  4542  1F6E                     _WDT_Main:	
  4543                           
  4544                           ;MCU_B1.c: 1020: if (WDT.Enable == 1) {
  4545                           
  4546                           ;incstack = 0
  4547                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4548  1F6E  0021               	movlb	1	; select bank1
  4549  1F6F  1C56               	btfss	_WDT^(0+128),0
  4550  1F70  0008               	return
  4551                           
  4552                           ;MCU_B1.c: 1021: if (WDT.Timer-- > 0) {
  4553  1F71  3001               	movlw	1
  4554  1F72  02D7               	subwf	(_WDT^(0+128)+1),f
  4555  1F73  0857               	movf	(_WDT^(0+128)+1),w
  4556  1F74  3AFF               	xorlw	255
  4557  1F75  1903               	skipnz
  4558  1F76  0008               	return
  4559                           
  4560                           ;MCU_B1.c: 1022: WDT.Timer = 100;
  4561  1F77  3064               	movlw	100
  4562  1F78  0020               	movlb	0	; select bank0
  4563  1F79  00A0               	movwf	??_WDT_Main
  4564  1F7A  0820               	movf	??_WDT_Main,w
  4565  1F7B  0021               	movlb	1	; select bank1
  4566  1F7C  00D7               	movwf	(_WDT^(0+128)+1)
  4567                           
  4568                           ;MCU_B1.c: 1023: WDT_Clearing();
  4569  1F7D  3180  2002         	fcall	_WDT_Clearing
  4570  1F7F  0008               	return
  4571  1F80                     __end_of_WDT_Main:	
  4572                           
  4573                           	psect	text8
  4574  0002                     __ptext8:	
  4575 ;; *************** function _WDT_Clearing *****************
  4576 ;; Defined at:
  4577 ;;		line 1029 in file "../src/MCU_B1.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;		None
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;		None               void
  4584 ;; Registers used:
  4585 ;;		None
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4595 ;;Total ram usage:        0 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    5
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_WDT_Main
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function _WDT_Clearing
  4607  0002                     _WDT_Clearing:	
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in _WDT_Clearing: []
  4611  0002  0064               	clrwdt	;# 
  4612  0003  0008               	return
  4613  0004                     __end_of_WDT_Clearing:	
  4614                           
  4615                           	psect	text9
  4616  1D44                     __ptext9:	
  4617 ;; *************** function _Temp_Main *****************
  4618 ;; Defined at:
  4619 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4620 ;; Parameters:    Size  Location     Type
  4621 ;;		None
  4622 ;; Auto vars:     Size  Location     Type
  4623 ;;		None
  4624 ;; Return value:  Size  Location     Type
  4625 ;;		None               void
  4626 ;; Registers used:
  4627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4628 ;; Tracked objects:
  4629 ;;		On entry : 0/0
  4630 ;;		On exit  : 0/0
  4631 ;;		Unchanged: 0/0
  4632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4637 ;;Total ram usage:        0 bytes
  4638 ;; Hardware stack levels used:    1
  4639 ;; Hardware stack levels required when called:   11
  4640 ;; This function calls:
  4641 ;;		_setTemp_Main
  4642 ;; This function is called by:
  4643 ;;		_main
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646                           
  4647                           
  4648                           ;psect for function _Temp_Main
  4649  1D44                     _Temp_Main:	
  4650                           
  4651                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4652                           
  4653                           ;incstack = 0
  4654                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4655  1D44  318E  2668         	fcall	_setTemp_Main
  4656  1D46  0008               	return
  4657  1D47                     __end_of_Temp_Main:	
  4658                           
  4659                           	psect	text10
  4660  0E68                     __ptext10:	
  4661 ;; *************** function _setTemp_Main *****************
  4662 ;; Defined at:
  4663 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;		None
  4668 ;; Return value:  Size  Location     Type
  4669 ;;		None               void
  4670 ;; Registers used:
  4671 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;Total ram usage:        1 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:   10
  4684 ;; This function calls:
  4685 ;;		_getPF_Safe
  4686 ;;		_setOverTemp_Exceptions
  4687 ;; This function is called by:
  4688 ;;		_Temp_Main
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _setTemp_Main
  4694  0E68                     _setTemp_Main:	
  4695                           
  4696                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4700  0E68  0021               	movlb	1	; select bank1
  4701  0E69  1C60               	btfss	_Temp1^(0+128),0
  4702  0E6A  0008               	return
  4703                           
  4704                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4705  0E6B  1960               	btfsc	_Temp1^(0+128),2
  4706  0E6C  2E8A               	goto	l8938
  4707                           
  4708                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4709  0E6D  3001               	movlw	1
  4710  0E6E  07E1               	addwf	(_Temp1^(0+128)+1),f
  4711  0E6F  3000               	movlw	0
  4712  0E70  3DE2               	addwfc	((_Temp1+1)^(0+128)+1),f
  4713                           
  4714                           ;OverTemperature_B1.c: 62: {
  4715                           ;OverTemperature_B1.c: 63: if (1 == 1 && getPF_Safe() == 1) {
  4716  0E71  3001               	movlw	1
  4717  0E72  0262               	subwf	((_Temp1+1)^(0+128)+1),w
  4718  0E73  30F4               	movlw	244
  4719  0E74  1903               	skipnz
  4720  0E75  0261               	subwf	(_Temp1^(0+128)+1),w
  4721  0E76  1C03               	skipc
  4722  0E77  0008               	return
  4723  0E78  319D  25A0  318E   	fcall	_getPF_Safe
  4724  0E7B  3A01               	xorlw	1
  4725  0E7C  1D03               	skipz
  4726  0E7D  2E84               	goto	l8936
  4727                           
  4728                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4729  0E7E  0021               	movlb	1	; select bank1
  4730  0E7F  01E1               	clrf	(_Temp1^(0+128)+1)
  4731  0E80  01E2               	clrf	((_Temp1+1)^(0+128)+1)
  4732                           
  4733                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4734  0E81  1560               	bsf	_Temp1^(0+128),2
  4735                           
  4736                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4737  0E82  1260               	bcf	_Temp1^(0+128),4
  4738                           
  4739                           ;OverTemperature_B1.c: 68: } else {
  4740  0E83  0008               	return
  4741  0E84                     l8936:	
  4742                           
  4743                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4744  0E84  30E8               	movlw	232
  4745  0E85  0021               	movlb	1	; select bank1
  4746  0E86  00E1               	movwf	(_Temp1^(0+128)+1)
  4747  0E87  3003               	movlw	3
  4748  0E88  00E2               	movwf	(_Temp1^(0+128)+2)
  4749                           
  4750                           ;OverTemperature_B1.c: 70: }
  4751                           ;OverTemperature_B1.c: 71: }
  4752                           ;OverTemperature_B1.c: 72: } else {
  4753  0E89  0008               	return
  4754  0E8A                     l8938:	
  4755                           
  4756                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4757  0E8A  3001               	movlw	1
  4758  0E8B  07E1               	addwf	(_Temp1^(0+128)+1),f
  4759  0E8C  3000               	movlw	0
  4760  0E8D  3DE2               	addwfc	((_Temp1+1)^(0+128)+1),f
  4761                           
  4762                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4763  0E8E  3000               	movlw	0
  4764  0E8F  0262               	subwf	((_Temp1+1)^(0+128)+1),w
  4765  0E90  3004               	movlw	4
  4766  0E91  1903               	skipnz
  4767  0E92  0261               	subwf	(_Temp1^(0+128)+1),w
  4768  0E93  1C03               	skipc
  4769  0E94  0008               	return
  4770                           
  4771                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4772  0E95  01E1               	clrf	(_Temp1^(0+128)+1)
  4773  0E96  01E2               	clrf	((_Temp1+1)^(0+128)+1)
  4774                           
  4775                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4776  0E97  1160               	bcf	_Temp1^(0+128),2
  4777                           
  4778                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4779  0E98  086B               	movf	((_Temp1+1)^(0+128)+10),w
  4780  0E99  01E7               	clrf	((_Temp1+1)^(0+128)+6)
  4781  0E9A  07E7               	addwf	((_Temp1+1)^(0+128)+6),f
  4782  0E9B  086A               	movf	(_Temp1^(0+128)+10),w
  4783  0E9C  01E6               	clrf	(_Temp1^(0+128)+6)
  4784  0E9D  07E6               	addwf	(_Temp1^(0+128)+6),f
  4785                           
  4786                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4787  0E9E  1CE0               	btfss	_Temp1^(0+128),1
  4788  0E9F  2EB7               	goto	l8960
  4789                           
  4790                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4791  0EA0  3002               	movlw	2
  4792  0EA1  0267               	subwf	((_Temp1+1)^(0+128)+6),w
  4793  0EA2  3058               	movlw	88
  4794  0EA3  1903               	skipnz
  4795  0EA4  0266               	subwf	(_Temp1^(0+128)+6),w
  4796  0EA5  1C03               	skipc
  4797  0EA6  2ECE               	goto	l8970
  4798                           
  4799                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4800  0EA7  3001               	movlw	1
  4801  0EA8  0020               	movlb	0	; select bank0
  4802  0EA9  00B1               	movwf	??_setTemp_Main
  4803  0EAA  0831               	movf	??_setTemp_Main,w
  4804  0EAB  0021               	movlb	1	; select bank1
  4805  0EAC  07E3               	addwf	(_Temp1^(0+128)+3),f
  4806                           
  4807                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4808  0EAD  3003               	movlw	3
  4809  0EAE  0263               	subwf	(_Temp1^(0+128)+3),w
  4810  0EAF  1C03               	skipc
  4811  0EB0  2ED0               	goto	l8972
  4812                           
  4813                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4814  0EB1  01E3               	clrf	(_Temp1^(0+128)+3)
  4815                           
  4816                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4817  0EB2  3000               	movlw	0
  4818  0EB3  3196  260F  318E   	fcall	_setOverTemp_Exceptions
  4819                           
  4820                           ;OverTemperature_B1.c: 84: }
  4821                           ;OverTemperature_B1.c: 85: } else {
  4822  0EB6  2ED0               	goto	l8972
  4823  0EB7                     l8960:	
  4824                           ;OverTemperature_B1.c: 87: }
  4825                           ;OverTemperature_B1.c: 88: } else {
  4826                           
  4827                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4828                           
  4829                           
  4830                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4831  0EB7  3002               	movlw	2
  4832  0EB8  0267               	subwf	((_Temp1+1)^(0+128)+6),w
  4833  0EB9  3027               	movlw	39
  4834  0EBA  1903               	skipnz
  4835  0EBB  0266               	subwf	(_Temp1^(0+128)+6),w
  4836  0EBC  1803               	skipnc
  4837  0EBD  2ECE               	goto	l8970
  4838                           
  4839                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4840  0EBE  3001               	movlw	1
  4841  0EBF  0020               	movlb	0	; select bank0
  4842  0EC0  00B1               	movwf	??_setTemp_Main
  4843  0EC1  0831               	movf	??_setTemp_Main,w
  4844  0EC2  0021               	movlb	1	; select bank1
  4845  0EC3  07E3               	addwf	(_Temp1^(0+128)+3),f
  4846                           
  4847                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4848  0EC4  3003               	movlw	3
  4849  0EC5  0263               	subwf	(_Temp1^(0+128)+3),w
  4850  0EC6  1C03               	skipc
  4851  0EC7  2ED0               	goto	l8972
  4852                           
  4853                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4854  0EC8  01E3               	clrf	(_Temp1^(0+128)+3)
  4855                           
  4856                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4857  0EC9  3001               	movlw	1
  4858  0ECA  3196  260F  318E   	fcall	_setOverTemp_Exceptions
  4859                           
  4860                           ;OverTemperature_B1.c: 94: }
  4861                           ;OverTemperature_B1.c: 95: } else {
  4862  0ECD  2ED0               	goto	l8972
  4863  0ECE                     l8970:	
  4864                           
  4865                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4866  0ECE  0021               	movlb	1	; select bank1
  4867  0ECF  01E3               	clrf	(_Temp1^(0+128)+3)
  4868  0ED0                     l8972:	
  4869                           
  4870                           ;OverTemperature_B1.c: 97: }
  4871                           ;OverTemperature_B1.c: 98: }
  4872                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4873  0ED0  0021               	movlb	1	; select bank1
  4874  0ED1  1CE0               	btfss	_Temp1^(0+128),1
  4875                           
  4876                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4877  0ED2  1660               	bsf	_Temp1^(0+128),4
  4878                           
  4879                           ;OverTemperature_B1.c: 101: }
  4880                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4881  0ED3  0867               	movf	((_Temp1+1)^(0+128)+6),w
  4882  0ED4  0020               	movlb	0	; select bank0
  4883  0ED5  00B1               	movwf	??_setTemp_Main
  4884  0ED6  086D               	movf	_product,w
  4885  0ED7  3E18               	addlw	24
  4886  0ED8  0086               	movwf	6
  4887  0ED9  3001               	movlw	1	; select bank2/3
  4888  0EDA  0087               	movwf	7
  4889  0EDB  0831               	movf	??_setTemp_Main,w
  4890  0EDC  0081               	movwf	1
  4891                           
  4892                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4893  0EDD  0021               	movlb	1	; select bank1
  4894  0EDE  0866               	movf	(_Temp1^(0+128)+6),w
  4895  0EDF  0020               	movlb	0	; select bank0
  4896  0EE0  00B1               	movwf	??_setTemp_Main
  4897  0EE1  086D               	movf	_product,w
  4898  0EE2  3E19               	addlw	25
  4899  0EE3  0086               	movwf	6
  4900  0EE4  3001               	movlw	1	; select bank2/3
  4901  0EE5  0087               	movwf	7
  4902  0EE6  0831               	movf	??_setTemp_Main,w
  4903  0EE7  0081               	movwf	1
  4904                           
  4905                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4906  0EE8  0021               	movlb	1	; select bank1
  4907  0EE9  01E8               	clrf	(_Temp1^(0+128)+8)
  4908  0EEA  01E9               	clrf	((_Temp1+1)^(0+128)+8)
  4909                           
  4910                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4911  0EEB  01EA               	clrf	(_Temp1^(0+128)+10)
  4912  0EEC  01EB               	clrf	((_Temp1+1)^(0+128)+10)
  4913  0EED  0008               	return
  4914  0EEE                     __end_of_setTemp_Main:	
  4915                           
  4916                           	psect	text11
  4917  160F                     __ptext11:	
  4918 ;; *************** function _setOverTemp_Exceptions *****************
  4919 ;; Defined at:
  4920 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4921 ;; Parameters:    Size  Location     Type
  4922 ;;  command         1    wreg     unsigned char 
  4923 ;; Auto vars:     Size  Location     Type
  4924 ;;  command         1   16[BANK0 ] unsigned char 
  4925 ;;  i               1   15[BANK0 ] unsigned char 
  4926 ;; Return value:  Size  Location     Type
  4927 ;;		None               void
  4928 ;; Registers used:
  4929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4930 ;; Tracked objects:
  4931 ;;		On entry : 0/0
  4932 ;;		On exit  : 0/0
  4933 ;;		Unchanged: 0/0
  4934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4939 ;;Total ram usage:        3 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    9
  4942 ;; This function calls:
  4943 ;;		_DimmerLights_Exceptions
  4944 ;;		_setBuz
  4945 ;;		_setLED
  4946 ;;		_setRF_Enable
  4947 ;;		_setSw_Enable
  4948 ;; This function is called by:
  4949 ;;		_setTemp_Main
  4950 ;; This function uses a non-reentrant model
  4951 ;;
  4952                           
  4953                           
  4954                           ;psect for function _setOverTemp_Exceptions
  4955  160F                     _setOverTemp_Exceptions:	
  4956                           
  4957                           ;incstack = 0
  4958                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4959                           ;setOverTemp_Exceptions@command stored from wreg
  4960  160F  0020               	movlb	0	; select bank0
  4961  1610  00B0               	movwf	setOverTemp_Exceptions@command
  4962                           
  4963                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4964  1611  0830               	movf	setOverTemp_Exceptions@command,w
  4965  1612  3A01               	xorlw	1
  4966  1613  3000               	movlw	0
  4967  1614  1D03               	skipz
  4968  1615  3001               	movlw	1
  4969  1616  00AE               	movwf	??_setOverTemp_Exceptions
  4970  1617  082E               	movf	??_setOverTemp_Exceptions,w
  4971  1618  00AF               	movwf	setOverTemp_Exceptions@i
  4972                           
  4973                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4974  1619  0830               	movf	setOverTemp_Exceptions@command,w
  4975  161A  0021               	movlb	1	; select bank1
  4976  161B  10E0               	bcf	_Temp1^(0+128),1
  4977  161C  1D03               	skipz
  4978  161D  14E0               	bsf	_Temp1^(0+128),1
  4979                           
  4980                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4981  161E  0020               	movlb	0	; select bank0
  4982  161F  082F               	movf	setOverTemp_Exceptions@i,w
  4983  1620  0021               	movlb	1	; select bank1
  4984  1621  1260               	bcf	_Temp1^(0+128),4
  4985  1622  1D03               	skipz
  4986  1623  1660               	bsf	_Temp1^(0+128),4
  4987                           
  4988                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4989  1624  0020               	movlb	0	; select bank0
  4990  1625  0830               	movf	setOverTemp_Exceptions@command,w
  4991  1626  3A01               	xorlw	1
  4992  1627  1D03               	skipz
  4993  1628  2E35               	goto	l8526
  4994                           
  4995                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4996  1629  3001               	movlw	1
  4997  162A  3195  2501  3196   	fcall	_DimmerLights_Exceptions
  4998                           
  4999                           ;OverTemperature_B1.c: 121: setLED(2, 1);
  5000  162D  0020               	movlb	0	; select bank0
  5001  162E  01A2               	clrf	setLED@command
  5002  162F  0AA2               	incf	setLED@command,f
  5003  1630  3002               	movlw	2
  5004  1631  3189  215A  3196   	fcall	_setLED
  5005                           
  5006                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  5007  1634  2E41               	goto	l8530
  5008  1635                     l8526:	
  5009  1635  0020               	movlb	0	; select bank0
  5010  1636  08B0               	movf	setOverTemp_Exceptions@command,f
  5011  1637  1D03               	skipz
  5012  1638  2E41               	goto	l8530
  5013                           
  5014                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  5015  1639  3064               	movlw	100
  5016  163A  00A9               	movwf	setBuz@time
  5017  163B  3000               	movlw	0
  5018  163C  00AA               	movwf	setBuz@time+1
  5019  163D  3002               	movlw	2
  5020  163E  3197  27A7  3196   	fcall	_setBuz
  5021  1641                     l8530:	
  5022                           
  5023                           ;OverTemperature_B1.c: 125: }
  5024                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  5025  1641  0020               	movlb	0	; select bank0
  5026  1642  0830               	movf	setOverTemp_Exceptions@command,w
  5027  1643  3E0A               	addlw	10
  5028  1644  00AE               	movwf	??_setOverTemp_Exceptions
  5029  1645  082E               	movf	??_setOverTemp_Exceptions,w
  5030  1646  00A2               	movwf	setLED@command
  5031  1647  3063               	movlw	99
  5032  1648  3189  215A  3196   	fcall	_setLED
  5033                           
  5034                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  5035  164B  0020               	movlb	0	; select bank0
  5036  164C  082F               	movf	setOverTemp_Exceptions@i,w
  5037  164D  319E  26BC  3196   	fcall	_setSw_Enable
  5038                           
  5039                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  5040  1650  0020               	movlb	0	; select bank0
  5041  1651  082F               	movf	setOverTemp_Exceptions@i,w
  5042  1652  319E  269F         	fcall	_setRF_Enable
  5043  1654  0008               	return
  5044  1655                     __end_of_setOverTemp_Exceptions:	
  5045                           
  5046                           	psect	text12
  5047  1DA0                     __ptext12:	
  5048 ;; *************** function _getPF_Safe *****************
  5049 ;; Defined at:
  5050 ;;		line 34 in file "../src/PowerFault_B1.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;  i               1    0[BANK0 ] unsigned char 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  1    wreg      unsigned char 
  5057 ;; Registers used:
  5058 ;;		wreg, status,2
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;Total ram usage:        1 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    5
  5071 ;; This function calls:
  5072 ;;		Nothing
  5073 ;; This function is called by:
  5074 ;;		_setTemp_Main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _getPF_Safe
  5080  1DA0                     _getPF_Safe:	
  5081                           
  5082                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _getPF_Safe: [wreg+status,2]
  5086  1DA0  3000               	movlw	0
  5087  1DA1  0021               	movlb	1	; select bank1
  5088  1DA2  194B               	btfsc	_PF1^(0+128),2
  5089  1DA3  3001               	movlw	1
  5090  1DA4  0020               	movlb	0	; select bank0
  5091  1DA5  00A0               	movwf	getPF_Safe@i
  5092                           
  5093                           ;PowerFault_B1.c: 36: return i;
  5094  1DA6  0820               	movf	getPF_Safe@i,w
  5095  1DA7  0008               	return
  5096  1DA8                     __end_of_getPF_Safe:	
  5097                           
  5098                           	psect	text13
  5099  1D41                     __ptext13:	
  5100 ;; *************** function _Temp_Initialization *****************
  5101 ;; Defined at:
  5102 ;;		line 9 in file "../src/OverTemperature_B1.c"
  5103 ;; Parameters:    Size  Location     Type
  5104 ;;		None
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;		None               void
  5109 ;; Registers used:
  5110 ;;		status,2, status,0, pclath, cstack
  5111 ;; Tracked objects:
  5112 ;;		On entry : 0/0
  5113 ;;		On exit  : 0/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5120 ;;Total ram usage:        0 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    6
  5123 ;; This function calls:
  5124 ;;		_setTemp_Initialization
  5125 ;; This function is called by:
  5126 ;;		_main
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _Temp_Initialization
  5132  1D41                     _Temp_Initialization:	
  5133                           
  5134                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5138  1D41  319D  253E         	fcall	_setTemp_Initialization
  5139  1D43  0008               	return
  5140  1D44                     __end_of_Temp_Initialization:	
  5141                           
  5142                           	psect	text14
  5143  1D3E                     __ptext14:	
  5144 ;; *************** function _setTemp_Initialization *****************
  5145 ;; Defined at:
  5146 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;		None
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;		None
  5151 ;; Return value:  Size  Location     Type
  5152 ;;		None               void
  5153 ;; Registers used:
  5154 ;;		None
  5155 ;; Tracked objects:
  5156 ;;		On entry : 0/0
  5157 ;;		On exit  : 0/0
  5158 ;;		Unchanged: 0/0
  5159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5164 ;;Total ram usage:        0 bytes
  5165 ;; Hardware stack levels used:    1
  5166 ;; Hardware stack levels required when called:    5
  5167 ;; This function calls:
  5168 ;;		Nothing
  5169 ;; This function is called by:
  5170 ;;		_Temp_Initialization
  5171 ;; This function uses a non-reentrant model
  5172 ;;
  5173                           
  5174                           
  5175                           ;psect for function _setTemp_Initialization
  5176  1D3E                     _setTemp_Initialization:	
  5177                           
  5178                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5179                           
  5180                           ;incstack = 0
  5181                           ; Regs used in _setTemp_Initialization: []
  5182  1D3E  0021               	movlb	1	; select bank1
  5183  1D3F  1660               	bsf	_Temp1^(0+128),4
  5184  1D40  0008               	return
  5185  1D41                     __end_of_setTemp_Initialization:	
  5186                           
  5187                           	psect	text15
  5188  1D67                     __ptext15:	
  5189 ;; *************** function _Switch_Main *****************
  5190 ;; Defined at:
  5191 ;;		line 67 in file "../src/Switch_B1.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;		None
  5194 ;; Auto vars:     Size  Location     Type
  5195 ;;		None
  5196 ;; Return value:  Size  Location     Type
  5197 ;;		None               void
  5198 ;; Registers used:
  5199 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5200 ;; Tracked objects:
  5201 ;;		On entry : 0/0
  5202 ;;		On exit  : 0/0
  5203 ;;		Unchanged: 0/0
  5204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5206 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5208 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5209 ;;Total ram usage:        0 bytes
  5210 ;; Hardware stack levels used:    1
  5211 ;; Hardware stack levels required when called:   11
  5212 ;; This function calls:
  5213 ;;		_setSw_Main
  5214 ;; This function is called by:
  5215 ;;		_main
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           
  5220                           ;psect for function _Switch_Main
  5221  1D67                     _Switch_Main:	
  5222                           
  5223                           ;Switch_B1.c: 69: setSw_Main(1);
  5224                           
  5225                           ;incstack = 0
  5226                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5227  1D67  3001               	movlw	1
  5228  1D68  3181  21F2         	fcall	_setSw_Main
  5229  1D6A  0008               	return
  5230  1D6B                     __end_of_Switch_Main:	
  5231                           
  5232                           	psect	text16
  5233  01F2                     __ptext16:	
  5234 ;; *************** function _setSw_Main *****************
  5235 ;; Defined at:
  5236 ;;		line 117 in file "../src/Switch_B1.c"
  5237 ;; Parameters:    Size  Location     Type
  5238 ;;  sw              1    wreg     unsigned char 
  5239 ;; Auto vars:     Size  Location     Type
  5240 ;;  sw              1   72[BANK0 ] unsigned char 
  5241 ;; Return value:  Size  Location     Type
  5242 ;;		None               void
  5243 ;; Registers used:
  5244 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5245 ;; Tracked objects:
  5246 ;;		On entry : 0/0
  5247 ;;		On exit  : 0/0
  5248 ;;		Unchanged: 0/0
  5249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5252 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5253 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5254 ;;Total ram usage:        4 bytes
  5255 ;; Hardware stack levels used:    1
  5256 ;; Hardware stack levels required when called:   10
  5257 ;; This function calls:
  5258 ;;		_SwPointSelect
  5259 ;;		_Sw_DimmerAdjFunc
  5260 ;;		_Sw_DimmerOffFunc
  5261 ;;		_Sw_DimmerOnFunc
  5262 ;;		_setBuz
  5263 ;;		_setRF_Learn
  5264 ;; This function is called by:
  5265 ;;		_Switch_Main
  5266 ;; This function uses a non-reentrant model
  5267 ;;
  5268                           
  5269                           
  5270                           ;psect for function _setSw_Main
  5271  01F2                     _setSw_Main:	
  5272                           
  5273                           ;incstack = 0
  5274                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5275                           ;setSw_Main@sw stored from wreg
  5276  01F2  0020               	movlb	0	; select bank0
  5277  01F3  00E8               	movwf	setSw_Main@sw
  5278                           
  5279                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5280  01F4  0868               	movf	setSw_Main@sw,w
  5281  01F5  319E  2601  3181   	fcall	_SwPointSelect
  5282                           
  5283                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5284  01F8  0020               	movlb	0	; select bank0
  5285  01F9  086C               	movf	_Sw,w
  5286  01FA  0086               	movwf	6
  5287  01FB  3001               	movlw	1	; select bank2/3
  5288  01FC  0087               	movwf	7
  5289  01FD  1C01               	btfss	1,0
  5290  01FE  0008               	return
  5291                           
  5292                           ;Switch_B1.c: 139: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5293  01FF  01E7               	clrf	_setSw_Main$5862
  5294  0200  0AE7               	incf	_setSw_Main$5862,f
  5295  0201  1F0C               	btfss	12,6	;volatile
  5296  0202  1A0C               	btfsc	12,4	;volatile
  5297  0203  2A08               	goto	l9180
  5298  0204  1C0C               	btfss	12,0	;volatile
  5299  0205  188D               	btfsc	13,1	;volatile
  5300  0206  2A08               	goto	l9180
  5301  0207  01E7               	clrf	_setSw_Main$5862
  5302  0208                     l9180:	
  5303  0208  086C               	movf	_Sw,w
  5304  0209  0086               	movwf	6
  5305  020A  3001               	movlw	1	; select bank2/3
  5306  020B  0087               	movwf	7
  5307  020C  0867               	movf	_setSw_Main$5862,w
  5308  020D  1081               	bcf	1,1
  5309  020E  1D03               	skipz
  5310  020F  1481               	bsf	1,1
  5311                           
  5312                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5313  0210  086C               	movf	_Sw,w
  5314  0211  0086               	movwf	6
  5315  0212  3001               	movlw	1	; select bank2/3
  5316  0213  0087               	movwf	7
  5317  0214  1C81               	btfss	1,1
  5318  0215  2ADA               	goto	l9230
  5319                           
  5320                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5321  0216  086C               	movf	_Sw,w
  5322  0217  0086               	movwf	6
  5323  0218  3001               	movlw	1	; select bank2/3
  5324  0219  0087               	movwf	7
  5325  021A  1901               	btfsc	1,2
  5326  021B  2A3D               	goto	l9196
  5327                           
  5328                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5329  021C  3001               	movlw	1
  5330  021D  00E5               	movwf	??_setSw_Main
  5331  021E  086C               	movf	_Sw,w
  5332  021F  3E02               	addlw	2
  5333  0220  0086               	movwf	6
  5334  0221  3001               	movlw	1	; select bank2/3
  5335  0222  0087               	movwf	7
  5336  0223  0865               	movf	??_setSw_Main,w
  5337  0224  0781               	addwf	1,f
  5338                           
  5339                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5340  0225  086C               	movf	_Sw,w
  5341  0226  3E02               	addlw	2
  5342  0227  0086               	movwf	6
  5343  0228  3001               	movlw	1	; select bank2/3
  5344  0229  0087               	movwf	7
  5345  022A  3005               	movlw	5
  5346  022B  0201               	subwf	1,w
  5347  022C  1C03               	skipc
  5348  022D  0008               	return
  5349                           
  5350                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5351  022E  086C               	movf	_Sw,w
  5352  022F  3E02               	addlw	2
  5353  0230  0086               	movwf	6
  5354  0231  3001               	movlw	1	; select bank2/3
  5355  0232  0087               	movwf	7
  5356  0233  0181               	clrf	1
  5357                           
  5358                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5359  0234  086C               	movf	_Sw,w
  5360  0235  0086               	movwf	6
  5361  0236  3001               	movlw	1	; select bank2/3
  5362  0237  0087               	movwf	7
  5363  0238  1501               	bsf	1,2
  5364                           
  5365                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5366  0239  0868               	movf	setSw_Main@sw,w
  5367  023A  3196  26F8         	fcall	_Sw_DimmerOnFunc
  5368                           
  5369                           ;Switch_B1.c: 173: }
  5370                           ;Switch_B1.c: 174: } else {
  5371  023C  0008               	return
  5372  023D                     l9196:	
  5373                           
  5374                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5375  023D  0020               	movlb	0	; select bank0
  5376  023E  086C               	movf	_Sw,w
  5377  023F  0086               	movwf	6
  5378  0240  3001               	movlw	1	; select bank2/3
  5379  0241  0087               	movwf	7
  5380  0242  1981               	btfsc	1,3
  5381  0243  2A6A               	goto	l9206
  5382                           
  5383                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5384  0244  086C               	movf	_Sw,w
  5385  0245  3E03               	addlw	3
  5386  0246  0086               	movwf	6
  5387  0247  3001               	movlw	1	; select bank2/3
  5388  0248  0087               	movwf	7
  5389  0249  3001               	movlw	1
  5390  024A  0781               	addwf	1,f
  5391  024B  3141               	addfsr 1,1
  5392  024C  1803               	skipnc
  5393  024D  0A81               	incf	1,f
  5394                           
  5395                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5396  024E  086C               	movf	_Sw,w
  5397  024F  3E03               	addlw	3
  5398  0250  0086               	movwf	6
  5399  0251  3001               	movlw	1	; select bank2/3
  5400  0252  0087               	movwf	7
  5401  0253  3F40               	moviw [0]fsr1
  5402  0254  00E5               	movwf	??_setSw_Main
  5403  0255  3F41               	moviw [1]fsr1
  5404  0256  00E6               	movwf	??_setSw_Main+1
  5405  0257  3000               	movlw	0
  5406  0258  0266               	subwf	??_setSw_Main+1,w
  5407  0259  3096               	movlw	150
  5408  025A  1903               	skipnz
  5409  025B  0265               	subwf	??_setSw_Main,w
  5410  025C  1C03               	skipc
  5411  025D  0008               	return
  5412                           
  5413                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5414  025E  086C               	movf	_Sw,w
  5415  025F  3E03               	addlw	3
  5416  0260  0086               	movwf	6
  5417  0261  3001               	movlw	1	; select bank2/3
  5418  0262  0087               	movwf	7
  5419  0263  3000               	movlw	0
  5420  0264  3FC0               	movwi [0]fsr1
  5421  0265  3FC1               	movwi [1]fsr1
  5422                           
  5423                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5424  0266  0868               	movf	setSw_Main@sw,w
  5425  0267  3193  2342         	fcall	_Sw_DimmerAdjFunc
  5426                           
  5427                           ;Switch_B1.c: 184: }
  5428                           ;Switch_B1.c: 185: } else {
  5429  0269  0008               	return
  5430  026A                     l9206:	
  5431                           
  5432                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5433  026A  0020               	movlb	0	; select bank0
  5434  026B  086C               	movf	_Sw,w
  5435  026C  0086               	movwf	6
  5436  026D  3001               	movlw	1	; select bank2/3
  5437  026E  0087               	movwf	7
  5438  026F  1A01               	btfsc	1,4
  5439  0270  2AA8               	goto	l9220
  5440                           
  5441                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5442  0271  086C               	movf	_Sw,w
  5443  0272  3E05               	addlw	5
  5444  0273  0086               	movwf	6
  5445  0274  3001               	movlw	1	; select bank2/3
  5446  0275  0087               	movwf	7
  5447  0276  3001               	movlw	1
  5448  0277  0781               	addwf	1,f
  5449  0278  3141               	addfsr 1,1
  5450  0279  1803               	skipnc
  5451  027A  0A81               	incf	1,f
  5452                           
  5453                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5454  027B  086C               	movf	_Sw,w
  5455  027C  3E05               	addlw	5
  5456  027D  0086               	movwf	6
  5457  027E  3001               	movlw	1	; select bank2/3
  5458  027F  0087               	movwf	7
  5459  0280  3F40               	moviw [0]fsr1
  5460  0281  00E5               	movwf	??_setSw_Main
  5461  0282  3F41               	moviw [1]fsr1
  5462  0283  00E6               	movwf	??_setSw_Main+1
  5463  0284  3000               	movlw	0
  5464  0285  0266               	subwf	??_setSw_Main+1,w
  5465  0286  3096               	movlw	150
  5466  0287  1903               	skipnz
  5467  0288  0265               	subwf	??_setSw_Main,w
  5468  0289  1C03               	skipc
  5469  028A  0008               	return
  5470                           
  5471                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5472  028B  086C               	movf	_Sw,w
  5473  028C  3E05               	addlw	5
  5474  028D  0086               	movwf	6
  5475  028E  3001               	movlw	1	; select bank2/3
  5476  028F  0087               	movwf	7
  5477  0290  3000               	movlw	0
  5478  0291  3FC0               	movwi [0]fsr1
  5479  0292  3FC1               	movwi [1]fsr1
  5480                           
  5481                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5482  0293  086C               	movf	_Sw,w
  5483  0294  0086               	movwf	6
  5484  0295  3001               	movlw	1	; select bank2/3
  5485  0296  0087               	movwf	7
  5486  0297  1601               	bsf	1,4
  5487                           
  5488                           ;Switch_B1.c: 193: setRF_Learn(1);
  5489  0298  3001               	movlw	1
  5490  0299  319D  2598  3181   	fcall	_setRF_Learn
  5491                           
  5492                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5493  029C  0021               	movlb	1	; select bank1
  5494  029D  1C21               	btfss	(_myMain^(0+128)+1),0
  5495  029E  0008               	return
  5496                           
  5497                           ;Switch_B1.c: 196: setBuz(2, 100);
  5498  029F  3064               	movlw	100
  5499  02A0  0020               	movlb	0	; select bank0
  5500  02A1  00A9               	movwf	setBuz@time
  5501  02A2  3000               	movlw	0
  5502  02A3  00AA               	movwf	setBuz@time+1
  5503  02A4  3002               	movlw	2
  5504  02A5  3197  27A7         	fcall	_setBuz
  5505                           
  5506                           ;Switch_B1.c: 197: }
  5507                           ;Switch_B1.c: 199: }
  5508                           ;Switch_B1.c: 200: } else {
  5509  02A7  0008               	return
  5510  02A8                     l9220:	
  5511                           
  5512                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5513  02A8  0020               	movlb	0	; select bank0
  5514  02A9  086C               	movf	_Sw,w
  5515  02AA  0086               	movwf	6
  5516  02AB  3001               	movlw	1	; select bank2/3
  5517  02AC  0087               	movwf	7
  5518  02AD  1A81               	btfsc	1,5
  5519  02AE  0008               	return
  5520                           
  5521                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5522  02AF  086C               	movf	_Sw,w
  5523  02B0  3E07               	addlw	7
  5524  02B1  0086               	movwf	6
  5525  02B2  3001               	movlw	1	; select bank2/3
  5526  02B3  0087               	movwf	7
  5527  02B4  3001               	movlw	1
  5528  02B5  0781               	addwf	1,f
  5529  02B6  3141               	addfsr 1,1
  5530  02B7  1803               	skipnc
  5531  02B8  0A81               	incf	1,f
  5532                           
  5533                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5534  02B9  086C               	movf	_Sw,w
  5535  02BA  3E07               	addlw	7
  5536  02BB  0086               	movwf	6
  5537  02BC  3001               	movlw	1	; select bank2/3
  5538  02BD  0087               	movwf	7
  5539  02BE  3F40               	moviw [0]fsr1
  5540  02BF  00E5               	movwf	??_setSw_Main
  5541  02C0  3F41               	moviw [1]fsr1
  5542  02C1  00E6               	movwf	??_setSw_Main+1
  5543  02C2  3001               	movlw	1
  5544  02C3  0266               	subwf	??_setSw_Main+1,w
  5545  02C4  302C               	movlw	44
  5546  02C5  1903               	skipnz
  5547  02C6  0265               	subwf	??_setSw_Main,w
  5548  02C7  1C03               	skipc
  5549  02C8  0008               	return
  5550                           
  5551                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5552  02C9  086C               	movf	_Sw,w
  5553  02CA  3E07               	addlw	7
  5554  02CB  0086               	movwf	6
  5555  02CC  3001               	movlw	1	; select bank2/3
  5556  02CD  0087               	movwf	7
  5557  02CE  3000               	movlw	0
  5558  02CF  3FC0               	movwi [0]fsr1
  5559  02D0  3FC1               	movwi [1]fsr1
  5560                           
  5561                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5562  02D1  086C               	movf	_Sw,w
  5563  02D2  0086               	movwf	6
  5564  02D3  3001               	movlw	1	; select bank2/3
  5565  02D4  0087               	movwf	7
  5566  02D5  1681               	bsf	1,5
  5567                           
  5568                           ;Switch_B1.c: 208: setRF_Learn(0);
  5569  02D6  3000               	movlw	0
  5570  02D7  319D  2598         	fcall	_setRF_Learn
  5571                           
  5572                           ;Switch_B1.c: 211: }
  5573                           ;Switch_B1.c: 212: }
  5574                           ;Switch_B1.c: 213: }
  5575                           ;Switch_B1.c: 214: }
  5576                           ;Switch_B1.c: 215: }
  5577                           ;Switch_B1.c: 216: } else {
  5578  02D9  0008               	return
  5579  02DA                     l9230:	
  5580                           
  5581                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5582  02DA  0020               	movlb	0	; select bank0
  5583  02DB  086C               	movf	_Sw,w
  5584  02DC  0086               	movwf	6
  5585  02DD  3001               	movlw	1	; select bank2/3
  5586  02DE  0087               	movwf	7
  5587  02DF  1D01               	btfss	1,2
  5588  02E0  0008               	return
  5589                           
  5590                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5591  02E1  3001               	movlw	1
  5592  02E2  00E5               	movwf	??_setSw_Main
  5593  02E3  086C               	movf	_Sw,w
  5594  02E4  3E02               	addlw	2
  5595  02E5  0086               	movwf	6
  5596  02E6  3001               	movlw	1	; select bank2/3
  5597  02E7  0087               	movwf	7
  5598  02E8  0865               	movf	??_setSw_Main,w
  5599  02E9  0781               	addwf	1,f
  5600                           
  5601                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5602  02EA  086C               	movf	_Sw,w
  5603  02EB  3E02               	addlw	2
  5604  02EC  0086               	movwf	6
  5605  02ED  3001               	movlw	1	; select bank2/3
  5606  02EE  0087               	movwf	7
  5607  02EF  3005               	movlw	5
  5608  02F0  0201               	subwf	1,w
  5609  02F1  1C03               	skipc
  5610  02F2  0008               	return
  5611                           
  5612                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5613  02F3  086C               	movf	_Sw,w
  5614  02F4  3E02               	addlw	2
  5615  02F5  0086               	movwf	6
  5616  02F6  3001               	movlw	1	; select bank2/3
  5617  02F7  0087               	movwf	7
  5618  02F8  0181               	clrf	1
  5619                           
  5620                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5621  02F9  086C               	movf	_Sw,w
  5622  02FA  0086               	movwf	6
  5623  02FB  3001               	movlw	1	; select bank2/3
  5624  02FC  0087               	movwf	7
  5625  02FD  1101               	bcf	1,2
  5626                           
  5627                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5628  02FE  086C               	movf	_Sw,w
  5629  02FF  3E03               	addlw	3
  5630  0300  0086               	movwf	6
  5631  0301  3001               	movlw	1	; select bank2/3
  5632  0302  0087               	movwf	7
  5633  0303  3000               	movlw	0
  5634  0304  3FC0               	movwi [0]fsr1
  5635  0305  3FC1               	movwi [1]fsr1
  5636                           
  5637                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5638  0306  086C               	movf	_Sw,w
  5639  0307  0086               	movwf	6
  5640  0308  3001               	movlw	1	; select bank2/3
  5641  0309  0087               	movwf	7
  5642  030A  1181               	bcf	1,3
  5643                           
  5644                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5645  030B  086C               	movf	_Sw,w
  5646  030C  3E05               	addlw	5
  5647  030D  0086               	movwf	6
  5648  030E  3001               	movlw	1	; select bank2/3
  5649  030F  0087               	movwf	7
  5650  0310  3000               	movlw	0
  5651  0311  3FC0               	movwi [0]fsr1
  5652  0312  3FC1               	movwi [1]fsr1
  5653                           
  5654                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5655  0313  086C               	movf	_Sw,w
  5656  0314  0086               	movwf	6
  5657  0315  3001               	movlw	1	; select bank2/3
  5658  0316  0087               	movwf	7
  5659  0317  1201               	bcf	1,4
  5660                           
  5661                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5662  0318  086C               	movf	_Sw,w
  5663  0319  3E07               	addlw	7
  5664  031A  0086               	movwf	6
  5665  031B  3001               	movlw	1	; select bank2/3
  5666  031C  0087               	movwf	7
  5667  031D  3000               	movlw	0
  5668  031E  3FC0               	movwi [0]fsr1
  5669  031F  3FC1               	movwi [1]fsr1
  5670                           
  5671                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5672  0320  086C               	movf	_Sw,w
  5673  0321  0086               	movwf	6
  5674  0322  3001               	movlw	1	; select bank2/3
  5675  0323  0087               	movwf	7
  5676  0324  1281               	bcf	1,5
  5677                           
  5678                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5679  0325  0868               	movf	setSw_Main@sw,w
  5680  0326  318C  241E  3181   	fcall	_Sw_DimmerOffFunc
  5681                           
  5682                           ;Switch_B1.c: 232: setRF_Learn(0);
  5683  0329  3000               	movlw	0
  5684  032A  319D  2598         	fcall	_setRF_Learn
  5685  032C  0008               	return
  5686  032D                     __end_of_setSw_Main:	
  5687                           
  5688                           	psect	text17
  5689  1D98                     __ptext17:	
  5690 ;; *************** function _setRF_Learn *****************
  5691 ;; Defined at:
  5692 ;;		line 23 in file "../src/RF_Control_B1.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  command         1    wreg     unsigned char 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  command         1    0[BANK0 ] unsigned char 
  5697 ;; Return value:  Size  Location     Type
  5698 ;;		None               void
  5699 ;; Registers used:
  5700 ;;		wreg
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;Total ram usage:        1 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    5
  5713 ;; This function calls:
  5714 ;;		Nothing
  5715 ;; This function is called by:
  5716 ;;		_setSw_Main
  5717 ;; This function uses a non-reentrant model
  5718 ;;
  5719                           
  5720                           
  5721                           ;psect for function _setRF_Learn
  5722  1D98                     _setRF_Learn:	
  5723                           
  5724                           ;incstack = 0
  5725                           ; Regs used in _setRF_Learn: [wreg]
  5726                           ;setRF_Learn@command stored from wreg
  5727  1D98  0020               	movlb	0	; select bank0
  5728  1D99  00A0               	movwf	setRF_Learn@command
  5729                           
  5730                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5731  1D9A  0820               	movf	setRF_Learn@command,w
  5732  1D9B  0021               	movlb	1	; select bank1
  5733  1D9C  133F               	bcf	_RF1^(0+128),6
  5734  1D9D  1D03               	skipz
  5735  1D9E  173F               	bsf	_RF1^(0+128),6
  5736  1D9F  0008               	return
  5737  1DA0                     __end_of_setRF_Learn:	
  5738                           
  5739                           	psect	text18
  5740  16F8                     __ptext18:	
  5741 ;; *************** function _Sw_DimmerOnFunc *****************
  5742 ;; Defined at:
  5743 ;;		line 241 in file "../src/Switch_B1.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;  sw              1    wreg     unsigned char 
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;  sw              1   67[BANK0 ] unsigned char 
  5748 ;;  Idle            1   66[BANK0 ] unsigned char 
  5749 ;; Return value:  Size  Location     Type
  5750 ;;		None               void
  5751 ;; Registers used:
  5752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5753 ;; Tracked objects:
  5754 ;;		On entry : 0/0
  5755 ;;		On exit  : 0/0
  5756 ;;		Unchanged: 0/0
  5757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5759 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;Total ram usage:        2 bytes
  5763 ;; Hardware stack levels used:    1
  5764 ;; Hardware stack levels required when called:    9
  5765 ;; This function calls:
  5766 ;;		_setBuz
  5767 ;;		_setDimmerLights_Switch
  5768 ;;		_setDimmerLights_Trigger
  5769 ;;		_setRFSW_Status
  5770 ;;		_setRF_DimmerLights
  5771 ;;		_setTxData
  5772 ;; This function is called by:
  5773 ;;		_setSw_Main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           
  5778                           ;psect for function _Sw_DimmerOnFunc
  5779  16F8                     _Sw_DimmerOnFunc:	
  5780                           
  5781                           ;incstack = 0
  5782                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5783                           ;Sw_DimmerOnFunc@sw stored from wreg
  5784  16F8  0020               	movlb	0	; select bank0
  5785  16F9  00E3               	movwf	Sw_DimmerOnFunc@sw
  5786                           
  5787                           ;Switch_B1.c: 242: char Idle = 1;
  5788  16FA  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5789  16FB  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5790                           
  5791                           ;Switch_B1.c: 263: if (Idle == 1) {
  5792  16FC  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5793  16FD  3A01               	xorlw	1
  5794  16FE  1D03               	skipz
  5795  16FF  0008               	return
  5796                           
  5797                           ;Switch_B1.c: 264: Sw->Flag = 1;
  5798  1700  086C               	movf	_Sw,w
  5799  1701  0086               	movwf	6
  5800  1702  3001               	movlw	1	; select bank2/3
  5801  1703  0087               	movwf	7
  5802  1704  1781               	bsf	1,7
  5803                           
  5804                           ;Switch_B1.c: 265: setBuz(1, 100);
  5805  1705  3064               	movlw	100
  5806  1706  00A9               	movwf	setBuz@time
  5807  1707  3000               	movlw	0
  5808  1708  00AA               	movwf	setBuz@time+1
  5809  1709  3001               	movlw	1
  5810  170A  3197  27A7  3196   	fcall	_setBuz
  5811                           
  5812                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5813  170D  0020               	movlb	0	; select bank0
  5814  170E  086C               	movf	_Sw,w
  5815  170F  0086               	movwf	6
  5816  1710  3001               	movlw	1	; select bank2/3
  5817  1711  0087               	movwf	7
  5818  1712  1B01               	btfsc	1,6
  5819  1713  2F3D               	goto	l8608
  5820                           
  5821                           ;Switch_B1.c: 267: Sw->Status = 1;
  5822  1714  086C               	movf	_Sw,w
  5823  1715  0086               	movwf	6
  5824  1716  3001               	movlw	1	; select bank2/3
  5825  1717  0087               	movwf	7
  5826  1718  1701               	bsf	1,6
  5827                           
  5828                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5829  1719  01A2               	clrf	setRFSW_Status@command
  5830  171A  0AA2               	incf	setRFSW_Status@command,f
  5831  171B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5832  171C  319E  2691  3196   	fcall	_setRFSW_Status
  5833                           
  5834                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5835  171F  0020               	movlb	0	; select bank0
  5836  1720  01A2               	clrf	setDimmerLights_Trigger@command
  5837  1721  0AA2               	incf	setDimmerLights_Trigger@command,f
  5838  1722  0863               	movf	Sw_DimmerOnFunc@sw,w
  5839  1723  319E  26F9  3196   	fcall	_setDimmerLights_Trigger
  5840                           
  5841                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5842  1726  0020               	movlb	0	; select bank0
  5843  1727  01A2               	clrf	setDimmerLights_Switch@command
  5844  1728  0AA2               	incf	setDimmerLights_Switch@command,f
  5845  1729  0863               	movf	Sw_DimmerOnFunc@sw,w
  5846  172A  319E  26E9  3196   	fcall	_setDimmerLights_Switch
  5847                           
  5848                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5849  172D  0020               	movlb	0	; select bank0
  5850  172E  086C               	movf	_Sw,w
  5851  172F  0086               	movwf	6
  5852  1730  3001               	movlw	1	; select bank2/3
  5853  1731  0087               	movwf	7
  5854  1732  3000               	movlw	0
  5855  1733  1B01               	btfsc	1,6
  5856  1734  3001               	movlw	1
  5857  1735  00DD               	movwf	setRF_DimmerLights@on
  5858  1736  0863               	movf	Sw_DimmerOnFunc@sw,w
  5859  1737  318B  23B2  3196   	fcall	_setRF_DimmerLights
  5860                           
  5861                           ;Switch_B1.c: 274: setTxData();
  5862  173A  3185  25C7         	fcall	_setTxData
  5863                           
  5864                           ;Switch_B1.c: 276: } else {
  5865  173C  0008               	return
  5866  173D                     l8608:	
  5867                           
  5868                           ;Switch_B1.c: 277: Sw->Status = 0;
  5869  173D  0020               	movlb	0	; select bank0
  5870  173E  086C               	movf	_Sw,w
  5871  173F  0086               	movwf	6
  5872  1740  3001               	movlw	1	; select bank2/3
  5873  1741  0087               	movwf	7
  5874  1742  1301               	bcf	1,6
  5875                           
  5876                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5877  1743  086C               	movf	_Sw,w
  5878  1744  0086               	movwf	6
  5879  1745  3001               	movlw	1	; select bank2/3
  5880  1746  0087               	movwf	7
  5881  1747  3000               	movlw	0
  5882  1748  1B01               	btfsc	1,6
  5883  1749  3001               	movlw	1
  5884  174A  00A2               	movwf	setRFSW_Status@command
  5885  174B  0863               	movf	Sw_DimmerOnFunc@sw,w
  5886  174C  319E  2691         	fcall	_setRFSW_Status
  5887  174E  0008               	return
  5888  174F                     __end_of_Sw_DimmerOnFunc:	
  5889                           
  5890                           	psect	text19
  5891  0C1E                     __ptext19:	
  5892 ;; *************** function _Sw_DimmerOffFunc *****************
  5893 ;; Defined at:
  5894 ;;		line 284 in file "../src/Switch_B1.c"
  5895 ;; Parameters:    Size  Location     Type
  5896 ;;  sw              1    wreg     unsigned char 
  5897 ;; Auto vars:     Size  Location     Type
  5898 ;;  sw              1   68[BANK0 ] unsigned char 
  5899 ;; Return value:  Size  Location     Type
  5900 ;;		None               void
  5901 ;; Registers used:
  5902 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5903 ;; Tracked objects:
  5904 ;;		On entry : 0/0
  5905 ;;		On exit  : 0/0
  5906 ;;		Unchanged: 0/0
  5907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5909 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5910 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;Total ram usage:        3 bytes
  5913 ;; Hardware stack levels used:    1
  5914 ;; Hardware stack levels required when called:    9
  5915 ;; This function calls:
  5916 ;;		_setDelayOff_GO
  5917 ;;		_setDimmerLights_AdjGo
  5918 ;;		_setDimmerLights_Switch
  5919 ;;		_setDimmerLights_Trigger
  5920 ;;		_setDimmerLights_TriggerAdj
  5921 ;;		_setRF_DimmerLights
  5922 ;;		_setTxData
  5923 ;; This function is called by:
  5924 ;;		_setSw_Main
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           
  5929                           ;psect for function _Sw_DimmerOffFunc
  5930  0C1E                     _Sw_DimmerOffFunc:	
  5931                           
  5932                           ;incstack = 0
  5933                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5934                           ;Sw_DimmerOffFunc@sw stored from wreg
  5935  0C1E  0020               	movlb	0	; select bank0
  5936  0C1F  00E4               	movwf	Sw_DimmerOffFunc@sw
  5937                           
  5938                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5939  0C20  086C               	movf	_Sw,w
  5940  0C21  0086               	movwf	6
  5941  0C22  3001               	movlw	1	; select bank2/3
  5942  0C23  0087               	movwf	7
  5943  0C24  1F81               	btfss	1,7
  5944  0C25  0008               	return
  5945                           
  5946                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5947  0C26  086C               	movf	_Sw,w
  5948  0C27  0086               	movwf	6
  5949  0C28  3001               	movlw	1	; select bank2/3
  5950  0C29  0087               	movwf	7
  5951  0C2A  1381               	bcf	1,7
  5952                           
  5953                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5954  0C2B  086C               	movf	_Sw,w
  5955  0C2C  0086               	movwf	6
  5956  0C2D  3001               	movlw	1	; select bank2/3
  5957  0C2E  0087               	movwf	7
  5958  0C2F  1F01               	btfss	1,6
  5959  0C30  2C69               	goto	l8644
  5960                           
  5961                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5962  0C31  0A6C               	incf	_Sw,w
  5963  0C32  0086               	movwf	6
  5964  0C33  3001               	movlw	1	; select bank2/3
  5965  0C34  0087               	movwf	7
  5966  0C35  1C01               	btfss	1,0
  5967  0C36  0008               	return
  5968                           
  5969                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5970  0C37  0A6C               	incf	_Sw,w
  5971  0C38  0086               	movwf	6
  5972  0C39  3001               	movlw	1	; select bank2/3
  5973  0C3A  0087               	movwf	7
  5974  0C3B  1001               	bcf	1,0
  5975                           
  5976                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5977  0C3C  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5978  0C3D  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5979  0C3E  0864               	movf	Sw_DimmerOffFunc@sw,w
  5980  0C3F  319F  2729  318C   	fcall	_setDimmerLights_TriggerAdj
  5981                           
  5982                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5983  0C42  0020               	movlb	0	; select bank0
  5984  0C43  01A2               	clrf	setDimmerLights_AdjGo@command
  5985  0C44  0864               	movf	Sw_DimmerOffFunc@sw,w
  5986  0C45  319F  2719  318C   	fcall	_setDimmerLights_AdjGo
  5987                           
  5988                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5989  0C48  0020               	movlb	0	; select bank0
  5990  0C49  0864               	movf	Sw_DimmerOffFunc@sw,w
  5991  0C4A  3E1A               	addlw	26
  5992  0C4B  076D               	addwf	_product,w
  5993  0C4C  00E2               	movwf	??_Sw_DimmerOffFunc
  5994  0C4D  0862               	movf	??_Sw_DimmerOffFunc,w
  5995  0C4E  0086               	movwf	6
  5996  0C4F  3001               	movlw	1	; select bank2/3
  5997  0C50  0087               	movwf	7
  5998  0C51  0801               	movf	1,w
  5999  0C52  00E3               	movwf	??_Sw_DimmerOffFunc+1
  6000  0C53  086D               	movf	_product,w
  6001  0C54  3E11               	addlw	17
  6002  0C55  0086               	movwf	6
  6003  0C56  3001               	movlw	1	; select bank2/3
  6004  0C57  0087               	movwf	7
  6005  0C58  0863               	movf	??_Sw_DimmerOffFunc+1,w
  6006  0C59  0081               	movwf	1
  6007                           
  6008                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  6009  0C5A  086C               	movf	_Sw,w
  6010  0C5B  0086               	movwf	6
  6011  0C5C  3001               	movlw	1	; select bank2/3
  6012  0C5D  0087               	movwf	7
  6013  0C5E  3000               	movlw	0
  6014  0C5F  1B01               	btfsc	1,6
  6015  0C60  3001               	movlw	1
  6016  0C61  00DD               	movwf	setRF_DimmerLights@on
  6017  0C62  0864               	movf	Sw_DimmerOffFunc@sw,w
  6018  0C63  318B  23B2  318C   	fcall	_setRF_DimmerLights
  6019                           
  6020                           ;Switch_B1.c: 295: setTxData();
  6021  0C66  3185  25C7         	fcall	_setTxData
  6022                           
  6023                           ;Switch_B1.c: 297: }
  6024                           ;Switch_B1.c: 298: } else {
  6025  0C68  0008               	return
  6026  0C69                     l8644:	
  6027                           
  6028                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  6029  0C69  0020               	movlb	0	; select bank0
  6030  0C6A  01A2               	clrf	setDimmerLights_Trigger@command
  6031  0C6B  0AA2               	incf	setDimmerLights_Trigger@command,f
  6032  0C6C  0864               	movf	Sw_DimmerOffFunc@sw,w
  6033  0C6D  319E  26F9  318C   	fcall	_setDimmerLights_Trigger
  6034                           
  6035                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  6036  0C70  0020               	movlb	0	; select bank0
  6037  0C71  01A2               	clrf	setDimmerLights_Switch@command
  6038  0C72  0864               	movf	Sw_DimmerOffFunc@sw,w
  6039  0C73  319E  26E9  318C   	fcall	_setDimmerLights_Switch
  6040                           
  6041                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  6042  0C76  0020               	movlb	0	; select bank0
  6043  0C77  01AA               	clrf	setDelayOff_GO@command
  6044  0C78  01AB               	clrf	setDelayOff_GO@value
  6045  0C79  0864               	movf	Sw_DimmerOffFunc@sw,w
  6046  0C7A  318A  2219  318C   	fcall	_setDelayOff_GO
  6047                           
  6048                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  6049  0C7D  0020               	movlb	0	; select bank0
  6050  0C7E  086C               	movf	_Sw,w
  6051  0C7F  0086               	movwf	6
  6052  0C80  3001               	movlw	1	; select bank2/3
  6053  0C81  0087               	movwf	7
  6054  0C82  3000               	movlw	0
  6055  0C83  1B01               	btfsc	1,6
  6056  0C84  3001               	movlw	1
  6057  0C85  00DD               	movwf	setRF_DimmerLights@on
  6058  0C86  0864               	movf	Sw_DimmerOffFunc@sw,w
  6059  0C87  318B  23B2  318C   	fcall	_setRF_DimmerLights
  6060                           
  6061                           ;Switch_B1.c: 304: setTxData();
  6062  0C8A  3185  25C7         	fcall	_setTxData
  6063  0C8C  0008               	return
  6064  0C8D                     __end_of_Sw_DimmerOffFunc:	
  6065                           
  6066                           	psect	text20
  6067  1342                     __ptext20:	
  6068 ;; *************** function _Sw_DimmerAdjFunc *****************
  6069 ;; Defined at:
  6070 ;;		line 311 in file "../src/Switch_B1.c"
  6071 ;; Parameters:    Size  Location     Type
  6072 ;;  sw              1    wreg     unsigned char 
  6073 ;; Auto vars:     Size  Location     Type
  6074 ;;  sw              1    5[BANK0 ] unsigned char 
  6075 ;;  Idle            1    4[BANK0 ] unsigned char 
  6076 ;; Return value:  Size  Location     Type
  6077 ;;		None               void
  6078 ;; Registers used:
  6079 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6080 ;; Tracked objects:
  6081 ;;		On entry : 0/0
  6082 ;;		On exit  : 0/0
  6083 ;;		Unchanged: 0/0
  6084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;Total ram usage:        2 bytes
  6090 ;; Hardware stack levels used:    1
  6091 ;; Hardware stack levels required when called:    7
  6092 ;; This function calls:
  6093 ;;		_setDimmerLights_AdjGo
  6094 ;;		_setDimmerLights_TriggerAdj
  6095 ;;		_setRFSW_Status
  6096 ;; This function is called by:
  6097 ;;		_setSw_Main
  6098 ;; This function uses a non-reentrant model
  6099 ;;
  6100                           
  6101                           
  6102                           ;psect for function _Sw_DimmerAdjFunc
  6103  1342                     _Sw_DimmerAdjFunc:	
  6104                           
  6105                           ;incstack = 0
  6106                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6107                           ;Sw_DimmerAdjFunc@sw stored from wreg
  6108  1342  0020               	movlb	0	; select bank0
  6109  1343  00A5               	movwf	Sw_DimmerAdjFunc@sw
  6110                           
  6111                           ;Switch_B1.c: 312: char Idle = 1;
  6112  1344  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  6113  1345  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  6114                           
  6115                           ;Switch_B1.c: 332: if (Idle == 1) {
  6116  1346  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  6117  1347  3A01               	xorlw	1
  6118  1348  1D03               	skipz
  6119  1349  0008               	return
  6120                           
  6121                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  6122  134A  086C               	movf	_Sw,w
  6123  134B  0086               	movwf	6
  6124  134C  3001               	movlw	1	; select bank2/3
  6125  134D  0087               	movwf	7
  6126  134E  1F81               	btfss	1,7
  6127  134F  0008               	return
  6128                           
  6129                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  6130  1350  086C               	movf	_Sw,w
  6131  1351  0086               	movwf	6
  6132  1352  3001               	movlw	1	; select bank2/3
  6133  1353  0087               	movwf	7
  6134  1354  1581               	bsf	1,3
  6135                           
  6136                           ;Switch_B1.c: 335: Sw->Adj = 1;
  6137  1355  0A6C               	incf	_Sw,w
  6138  1356  0086               	movwf	6
  6139  1357  3001               	movlw	1	; select bank2/3
  6140  1358  0087               	movwf	7
  6141  1359  1401               	bsf	1,0
  6142                           
  6143                           ;Switch_B1.c: 336: Sw->Status = 1;
  6144  135A  086C               	movf	_Sw,w
  6145  135B  0086               	movwf	6
  6146  135C  3001               	movlw	1	; select bank2/3
  6147  135D  0087               	movwf	7
  6148  135E  1701               	bsf	1,6
  6149                           
  6150                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  6151  135F  01A2               	clrf	setRFSW_Status@command
  6152  1360  0AA2               	incf	setRFSW_Status@command,f
  6153  1361  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6154  1362  319E  2691  3193   	fcall	_setRFSW_Status
  6155                           
  6156                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6157  1365  0020               	movlb	0	; select bank0
  6158  1366  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6159  1367  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6160  1368  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6161  1369  319F  2729  3193   	fcall	_setDimmerLights_TriggerAdj
  6162                           
  6163                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6164  136C  0020               	movlb	0	; select bank0
  6165  136D  01A2               	clrf	setDimmerLights_AdjGo@command
  6166  136E  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6167  136F  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6168  1370  319F  2719         	fcall	_setDimmerLights_AdjGo
  6169  1372  0008               	return
  6170  1373                     __end_of_Sw_DimmerAdjFunc:	
  6171                           
  6172                           	psect	text21
  6173  1F29                     __ptext21:	
  6174 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6175 ;; Defined at:
  6176 ;;		line 720 in file "../src/Dimmer_B1.c"
  6177 ;; Parameters:    Size  Location     Type
  6178 ;;  lights          1    wreg     unsigned char 
  6179 ;;  command         1    2[BANK0 ] unsigned char 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;  lights          1    3[BANK0 ] unsigned char 
  6182 ;; Return value:  Size  Location     Type
  6183 ;;		None               void
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6191 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;Total ram usage:        2 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    6
  6198 ;; This function calls:
  6199 ;;		_DimmerLightsPointSelect
  6200 ;; This function is called by:
  6201 ;;		_Sw_DimmerOffFunc
  6202 ;;		_Sw_DimmerAdjFunc
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           
  6207                           ;psect for function _setDimmerLights_TriggerAdj
  6208  1F29                     _setDimmerLights_TriggerAdj:	
  6209                           
  6210                           ;incstack = 0
  6211                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6212                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6213  1F29  0020               	movlb	0	; select bank0
  6214  1F2A  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6215                           
  6216                           ;Dimmer_B1.c: 722: DimmerLightsPointSelect(lights);
  6217  1F2B  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6218  1F2C  319D  25EB         	fcall	_DimmerLightsPointSelect
  6219                           
  6220                           ;Dimmer_B1.c: 723: DimmerLights->TriggerAdj = command;
  6221  1F2E  0020               	movlb	0	; select bank0
  6222  1F2F  086A               	movf	_DimmerLights,w
  6223  1F30  3E08               	addlw	8
  6224  1F31  0086               	movwf	6
  6225  1F32  3001               	movlw	1	; select bank2/3
  6226  1F33  0087               	movwf	7
  6227  1F34  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6228  1F35  1201               	bcf	1,4
  6229  1F36  1D03               	skipz
  6230  1F37  1601               	bsf	1,4
  6231  1F38  0008               	return
  6232  1F39                     __end_of_setDimmerLights_TriggerAdj:	
  6233                           
  6234                           	psect	text22
  6235  1F19                     __ptext22:	
  6236 ;; *************** function _setDimmerLights_AdjGo *****************
  6237 ;; Defined at:
  6238 ;;		line 708 in file "../src/Dimmer_B1.c"
  6239 ;; Parameters:    Size  Location     Type
  6240 ;;  lights          1    wreg     unsigned char 
  6241 ;;  command         1    2[BANK0 ] unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  lights          1    3[BANK0 ] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6253 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;Total ram usage:        2 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; Hardware stack levels required when called:    6
  6260 ;; This function calls:
  6261 ;;		_DimmerLightsPointSelect
  6262 ;; This function is called by:
  6263 ;;		_Sw_DimmerOffFunc
  6264 ;;		_Sw_DimmerAdjFunc
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           
  6269                           ;psect for function _setDimmerLights_AdjGo
  6270  1F19                     _setDimmerLights_AdjGo:	
  6271                           
  6272                           ;incstack = 0
  6273                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6274                           ;setDimmerLights_AdjGo@lights stored from wreg
  6275  1F19  0020               	movlb	0	; select bank0
  6276  1F1A  00A3               	movwf	setDimmerLights_AdjGo@lights
  6277                           
  6278                           ;Dimmer_B1.c: 710: DimmerLightsPointSelect(lights);
  6279  1F1B  0823               	movf	setDimmerLights_AdjGo@lights,w
  6280  1F1C  319D  25EB         	fcall	_DimmerLightsPointSelect
  6281                           
  6282                           ;Dimmer_B1.c: 711: DimmerLights->AdjGo = command;
  6283  1F1E  0020               	movlb	0	; select bank0
  6284  1F1F  086A               	movf	_DimmerLights,w
  6285  1F20  3E08               	addlw	8
  6286  1F21  0086               	movwf	6
  6287  1F22  3001               	movlw	1	; select bank2/3
  6288  1F23  0087               	movwf	7
  6289  1F24  0822               	movf	setDimmerLights_AdjGo@command,w
  6290  1F25  1181               	bcf	1,3
  6291  1F26  1D03               	skipz
  6292  1F27  1581               	bsf	1,3
  6293  1F28  0008               	return
  6294  1F29                     __end_of_setDimmerLights_AdjGo:	
  6295                           
  6296                           	psect	text23
  6297  1DB9                     __ptext23:	
  6298 ;; *************** function _Switch_Initialization *****************
  6299 ;; Defined at:
  6300 ;;		line 41 in file "../src/Switch_B1.c"
  6301 ;; Parameters:    Size  Location     Type
  6302 ;;		None
  6303 ;; Auto vars:     Size  Location     Type
  6304 ;;		None
  6305 ;; Return value:  Size  Location     Type
  6306 ;;		None               void
  6307 ;; Registers used:
  6308 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;Total ram usage:        0 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    8
  6321 ;; This function calls:
  6322 ;;		_TouchPower
  6323 ;;		_setSw_Initialization
  6324 ;; This function is called by:
  6325 ;;		_main
  6326 ;; This function uses a non-reentrant model
  6327 ;;
  6328                           
  6329                           
  6330                           ;psect for function _Switch_Initialization
  6331  1DB9                     _Switch_Initialization:	
  6332                           
  6333                           ;Switch_B1.c: 42: TouchPower();
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6337  1DB9  319E  26CB  319D   	fcall	_TouchPower
  6338                           
  6339                           ;Switch_B1.c: 44: WPUB1 = 0;
  6340  1DBC  0024               	movlb	4	; select bank4
  6341  1DBD  108D               	bcf	13,1	;volatile
  6342                           
  6343                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6344  1DBE  3001               	movlw	1
  6345  1DBF  319F  2709         	fcall	_setSw_Initialization
  6346  1DC1  0008               	return
  6347  1DC2                     __end_of_Switch_Initialization:	
  6348                           
  6349                           	psect	text24
  6350  1F09                     __ptext24:	
  6351 ;; *************** function _setSw_Initialization *****************
  6352 ;; Defined at:
  6353 ;;		line 83 in file "../src/Switch_B1.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;  sw              1    wreg     unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  sw              1    4[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;		None               void
  6360 ;; Registers used:
  6361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;Total ram usage:        1 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    7
  6374 ;; This function calls:
  6375 ;;		_setLED
  6376 ;; This function is called by:
  6377 ;;		_Switch_Initialization
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           
  6382                           ;psect for function _setSw_Initialization
  6383  1F09                     _setSw_Initialization:	
  6384                           
  6385                           ;incstack = 0
  6386                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6387                           ;setSw_Initialization@sw stored from wreg
  6388  1F09  0020               	movlb	0	; select bank0
  6389  1F0A  00A4               	movwf	setSw_Initialization@sw
  6390                           
  6391                           ;Switch_B1.c: 84: setLED(sw, 1);
  6392  1F0B  01A2               	clrf	setLED@command
  6393  1F0C  0AA2               	incf	setLED@command,f
  6394  1F0D  0824               	movf	setSw_Initialization@sw,w
  6395  1F0E  3189  215A  319F   	fcall	_setLED
  6396                           
  6397                           ;Switch_B1.c: 86: setLED(sw + 1, 1);
  6398  1F11  0020               	movlb	0	; select bank0
  6399  1F12  01A2               	clrf	setLED@command
  6400  1F13  0AA2               	incf	setLED@command,f
  6401  1F14  0824               	movf	setSw_Initialization@sw,w
  6402  1F15  3E01               	addlw	1
  6403  1F16  3189  215A         	fcall	_setLED
  6404  1F18  0008               	return
  6405  1F19                     __end_of_setSw_Initialization:	
  6406                           
  6407                           	psect	text25
  6408  1ECB                     __ptext25:	
  6409 ;; *************** function _TouchPower *****************
  6410 ;; Defined at:
  6411 ;;		line 10 in file "../src/Switch_B1.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;		None
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;		None
  6416 ;; Return value:  Size  Location     Type
  6417 ;;		None               void
  6418 ;; Registers used:
  6419 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6420 ;; Tracked objects:
  6421 ;;		On entry : 0/0
  6422 ;;		On exit  : 0/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;Total ram usage:        0 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:    6
  6432 ;; This function calls:
  6433 ;;		_Timeout_Counter
  6434 ;;		_set_TimeoutCleared
  6435 ;; This function is called by:
  6436 ;;		_Switch_Initialization
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           
  6441                           ;psect for function _TouchPower
  6442  1ECB                     _TouchPower:	
  6443                           
  6444                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6445                           
  6446                           ;incstack = 0
  6447                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6448  1ECB  2ED1               	goto	l9158
  6449  1ECC                     l2304:	
  6450                           
  6451                           ;Switch_B1.c: 12: RC5 = 1;
  6452  1ECC  0020               	movlb	0	; select bank0
  6453  1ECD  168E               	bsf	14,5	;volatile
  6454                           
  6455                           ;Switch_B1.c: 13: Timeout_Counter();
  6456  1ECE  319F  2794  319E   	fcall	_Timeout_Counter
  6457  1ED1                     l9158:	
  6458  1ED1  0020               	movlb	0	; select bank0
  6459  1ED2  1A8E               	btfsc	14,5	;volatile
  6460  1ED3  2ED7               	goto	l9162
  6461  1ED4  0021               	movlb	1	; select bank1
  6462  1ED5  1D30               	btfss	(_myMain^(0+128)+16),2
  6463  1ED6  2ECC               	goto	l2304
  6464  1ED7                     l9162:	
  6465                           
  6466                           ;Switch_B1.c: 14: }
  6467                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6468  1ED7  319D  256B         	fcall	_set_TimeoutCleared
  6469  1ED9  0008               	return
  6470  1EDA                     __end_of_TouchPower:	
  6471                           
  6472                           	psect	text26
  6473  1D3B                     __ptext26:	
  6474 ;; *************** function _RF_Main *****************
  6475 ;; Defined at:
  6476 ;;		line 16 in file "../src/RF_Control_B1.c"
  6477 ;; Parameters:    Size  Location     Type
  6478 ;;		None
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;		None               void
  6483 ;; Registers used:
  6484 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6494 ;;Total ram usage:        0 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:   14
  6497 ;; This function calls:
  6498 ;;		_setRF_Main
  6499 ;; This function is called by:
  6500 ;;		_main
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504                           
  6505                           ;psect for function _RF_Main
  6506  1D3B                     _RF_Main:	
  6507                           
  6508                           ;RF_Control_B1.c: 18: setRF_Main();
  6509                           
  6510                           ;incstack = 0
  6511                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6512  1D3B  3184  2423         	fcall	_setRF_Main
  6513  1D3D  0008               	return
  6514  1D3E                     __end_of_RF_Main:	
  6515                           
  6516                           	psect	text27
  6517  0423                     __ptext27:	
  6518 ;; *************** function _setRF_Main *****************
  6519 ;; Defined at:
  6520 ;;		line 52 in file "../src/RF_Control_B1.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  Receive_OK      1    0        unsigned char 
  6525 ;;  loop_f          1    0        unsigned char 
  6526 ;; Return value:  Size  Location     Type
  6527 ;;		None               void
  6528 ;; Registers used:
  6529 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6530 ;; Tracked objects:
  6531 ;;		On entry : 0/0
  6532 ;;		On exit  : 0/0
  6533 ;;		Unchanged: 0/0
  6534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;Total ram usage:        2 bytes
  6540 ;; Hardware stack levels used:    1
  6541 ;; Hardware stack levels required when called:   13
  6542 ;; This function calls:
  6543 ;;		_CC2500_ReadStatus
  6544 ;;		_CC2500_RxData
  6545 ;;		_CC2500_TxData
  6546 ;;		_CC2500_WriteCommand
  6547 ;;		_getBuz_GO
  6548 ;;		_getRxData
  6549 ;; This function is called by:
  6550 ;;		_RF_Main
  6551 ;; This function uses a non-reentrant model
  6552 ;;
  6553                           
  6554                           
  6555                           ;psect for function _setRF_Main
  6556  0423                     _setRF_Main:	
  6557                           
  6558                           ;RF_Control_B1.c: 53: char loop_f, Receive_OK;
  6559                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6560                           
  6561                           ;incstack = 0
  6562                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6563  0423  0021               	movlb	1	; select bank1
  6564  0424  1C3F               	btfss	_RF1^(0+128),0
  6565  0425  0008               	return
  6566                           
  6567                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6568  0426  3190  2066  3184   	fcall	_getBuz_GO
  6569  0429  0020               	movlb	0	; select bank0
  6570  042A  0821               	movf	?_getBuz_GO+1,w
  6571  042B  0420               	iorwf	?_getBuz_GO,w
  6572  042C  1D03               	skipz
  6573  042D  0008               	return
  6574                           
  6575                           ;RF_Control_B1.c: 68: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6576  042E  01E8               	clrf	_setRF_Main$4841
  6577  042F  0AE8               	incf	_setRF_Main$4841,f
  6578  0430  1F0C               	btfss	12,6	;volatile
  6579  0431  1A0C               	btfsc	12,4	;volatile
  6580  0432  2C37               	goto	l9056
  6581  0433  1C0C               	btfss	12,0	;volatile
  6582  0434  188D               	btfsc	13,1	;volatile
  6583  0435  2C37               	goto	l9056
  6584  0436  01E8               	clrf	_setRF_Main$4841
  6585  0437                     l9056:	
  6586  0437  0868               	movf	_setRF_Main$4841,w
  6587  0438  0021               	movlb	1	; select bank1
  6588  0439  13BF               	bcf	_RF1^(0+128),7
  6589  043A  1D03               	skipz
  6590  043B  17BF               	bsf	_RF1^(0+128),7
  6591                           
  6592                           ;RF_Control_B1.c: 71: if (RF1.Key == 1 && RF1.Learn == 0) {
  6593  043C  1BBF               	btfsc	_RF1^(0+128),7
  6594  043D  1B3F               	btfsc	_RF1^(0+128),6
  6595  043E  2C44               	goto	l1914
  6596                           
  6597                           ;RF_Control_B1.c: 72: RF1.Count = 0;
  6598  043F  01C1               	clrf	(_RF1^(0+128)+2)
  6599  0440  01C2               	clrf	((_RF1+1)^(0+128)+2)
  6600                           
  6601                           ;RF_Control_B1.c: 73: RF1.Run = 1;
  6602  0441  14C0               	bsf	(_RF1^(0+128)+1),1
  6603                           
  6604                           ;RF_Control_B1.c: 74: RF1.RxStatus = 0;
  6605  0442  11BF               	bcf	_RF1^(0+128),3
  6606                           
  6607                           ;RF_Control_B1.c: 76: } else {
  6608  0443  0008               	return
  6609  0444                     l1914:	
  6610                           
  6611                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6612  0444  18C0               	btfsc	(_RF1^(0+128)+1),1
  6613  0445  1B3F               	btfsc	_RF1^(0+128),6
  6614  0446  2C5B               	goto	l9078
  6615                           
  6616                           ;RF_Control_B1.c: 78: RF1.Count++;
  6617  0447  3001               	movlw	1
  6618  0448  07C1               	addwf	(_RF1^(0+128)+2),f
  6619  0449  3000               	movlw	0
  6620  044A  3DC2               	addwfc	((_RF1+1)^(0+128)+2),f
  6621                           
  6622                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6623  044B  3002               	movlw	2
  6624  044C  3EBF               	addlw	_RF1& (0+255)
  6625  044D  0086               	movwf	6
  6626  044E  0187               	clrf	7
  6627  044F  3F40               	moviw [0]fsr1
  6628  0450  0646               	xorwf	(_RF1^(0+128)+7),w
  6629  0451  1D03               	skipz
  6630  0452  2C55               	goto	u9205
  6631  0453  3F41               	moviw [1]fsr1
  6632  0454  0647               	xorwf	((_RF1+1)^(0+128)+7),w
  6633  0455                     u9205:	
  6634  0455  1D03               	skipz
  6635  0456  2CCD               	goto	l9132
  6636                           
  6637                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6638  0457  01C1               	clrf	(_RF1^(0+128)+2)
  6639  0458  01C2               	clrf	((_RF1+1)^(0+128)+2)
  6640                           
  6641                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6642  0459  10C0               	bcf	(_RF1^(0+128)+1),1
  6643                           
  6644                           ;RF_Control_B1.c: 82: }
  6645                           ;RF_Control_B1.c: 83: } else {
  6646  045A  2CCD               	goto	l9132
  6647  045B                     l9078:	
  6648                           
  6649                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6650  045B  01C1               	clrf	(_RF1^(0+128)+2)
  6651  045C  01C2               	clrf	((_RF1+1)^(0+128)+2)
  6652                           
  6653                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6654  045D  10C0               	bcf	(_RF1^(0+128)+1),1
  6655                           
  6656                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6657  045E  193F               	btfsc	_RF1^(0+128),2
  6658  045F  1B3F               	btfsc	_RF1^(0+128),6
  6659  0460  2C7C               	goto	l1919
  6660                           
  6661                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6662  0461  113F               	bcf	_RF1^(0+128),2
  6663                           
  6664                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6665  0462  11BF               	bcf	_RF1^(0+128),3
  6666                           
  6667                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6668  0463  10BF               	bcf	_RF1^(0+128),1
  6669                           
  6670                           ;RF_Control_B1.c: 92: CC2500_ReadStatus(0x3B);
  6671  0464  303B               	movlw	59
  6672  0465  3191  2182  3184   	fcall	_CC2500_ReadStatus
  6673                           
  6674                           ;RF_Control_B1.c: 93: if (s_data != 0) {
  6675  0468  0021               	movlb	1	; select bank1
  6676  0469  085F               	movf	_s_data^(0+128),w
  6677  046A  1903               	btfsc	3,2
  6678  046B  2C78               	goto	l1920
  6679                           
  6680                           ;RF_Control_B1.c: 94: CC2500_WriteCommand(0x36);
  6681  046C  3036               	movlw	54
  6682  046D  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6683                           
  6684                           ;RF_Control_B1.c: 95: CC2500_WriteCommand(0x3B);
  6685  0470  303B               	movlw	59
  6686  0471  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6687                           
  6688                           ;RF_Control_B1.c: 96: CC2500_WriteCommand(0x3A);
  6689  0474  303A               	movlw	58
  6690  0475  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6691  0478                     l1920:	
  6692                           
  6693                           ;RF_Control_B1.c: 97: }
  6694                           ;RF_Control_B1.c: 98: CC2500_TxData();
  6695  0478  318A  227D  3184   	fcall	_CC2500_TxData
  6696                           
  6697                           ;RF_Control_B1.c: 100: } else {
  6698  047B  2CCD               	goto	l9132
  6699  047C                     l1919:	
  6700                           
  6701                           ;RF_Control_B1.c: 102: if (RF1.RxStatus == 1) {
  6702  047C  1DBF               	btfss	_RF1^(0+128),3
  6703  047D  2CB8               	goto	l1922
  6704                           
  6705                           ;RF_Control_B1.c: 103: CC2500_RxData();
  6706  047E  318C  248D  3184   	fcall	_CC2500_RxData
  6707                           
  6708                           ;RF_Control_B1.c: 104: if (RF1.ReceiveGO == 1) {
  6709  0481  0021               	movlb	1	; select bank1
  6710  0482  1CBF               	btfss	_RF1^(0+128),1
  6711  0483  2CCD               	goto	l9132
  6712                           
  6713                           ;RF_Control_B1.c: 105: RF1.ReceiveGO = 0;
  6714  0484  10BF               	bcf	_RF1^(0+128),1
  6715                           
  6716                           ;RF_Control_B1.c: 106: RF1.Correction = 0;
  6717  0485  12C0               	bcf	(_RF1^(0+128)+1),5
  6718                           
  6719                           ;RF_Control_B1.c: 107: RF1.CorrectionCounter = 0;
  6720  0486  01C9               	clrf	(_RF1^(0+128)+10)
  6721  0487  01CA               	clrf	((_RF1+1)^(0+128)+10)
  6722                           
  6723                           ;RF_Control_B1.c: 116: getRxData();
  6724  0488  318B  2349  3184   	fcall	_getRxData
  6725                           
  6726                           ;RF_Control_B1.c: 117: RB5 = RB5 == 1 ? 0 : 1;
  6727  048B  3020               	movlw	32
  6728  048C  0020               	movlb	0	; select bank0
  6729  048D  068D               	xorwf	13,f
  6730                           
  6731                           ;RF_Control_B1.c: 120: RF1.Run = 1;
  6732  048E  0021               	movlb	1	; select bank1
  6733  048F  14C0               	bsf	(_RF1^(0+128)+1),1
  6734                           
  6735                           ;RF_Control_B1.c: 122: if (RF1.Checked == 1) {
  6736  0490  1DC0               	btfss	(_RF1^(0+128)+1),3
  6737  0491  2C9F               	goto	l9116
  6738                           
  6739                           ;RF_Control_B1.c: 123: if (RF1.RunTime > 20) {
  6740  0492  3000               	movlw	0
  6741  0493  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6742  0494  3015               	movlw	21
  6743  0495  1903               	skipnz
  6744  0496  0246               	subwf	(_RF1^(0+128)+7),w
  6745  0497  1C03               	skipc
  6746  0498  2C9D               	goto	l9114
  6747                           
  6748                           ;RF_Control_B1.c: 124: RF1.RunTime = 20;
  6749  0499  3014               	movlw	20
  6750  049A  00C6               	movwf	(_RF1^(0+128)+7)
  6751  049B  3000               	movlw	0
  6752  049C  00C7               	movwf	(_RF1^(0+128)+8)
  6753  049D                     l9114:	
  6754                           
  6755                           ;RF_Control_B1.c: 125: }
  6756                           ;RF_Control_B1.c: 126: RF1.CheckCount = 0;
  6757  049D  01C3               	clrf	(_RF1^(0+128)+4)
  6758                           
  6759                           ;RF_Control_B1.c: 127: } else {
  6760  049E  2CCD               	goto	l9132
  6761  049F                     l9116:	
  6762                           
  6763                           ;RF_Control_B1.c: 128: RF1.CheckCount++;
  6764  049F  3001               	movlw	1
  6765  04A0  0020               	movlb	0	; select bank0
  6766  04A1  00E7               	movwf	??_setRF_Main
  6767  04A2  0867               	movf	??_setRF_Main,w
  6768  04A3  0021               	movlb	1	; select bank1
  6769  04A4  07C3               	addwf	(_RF1^(0+128)+4),f
  6770                           
  6771                           ;RF_Control_B1.c: 129: if (RF1.CheckCount == 2) {
  6772  04A5  0843               	movf	(_RF1^(0+128)+4),w
  6773  04A6  3A02               	xorlw	2
  6774  04A7  1D03               	skipz
  6775  04A8  2CCD               	goto	l9132
  6776                           
  6777                           ;RF_Control_B1.c: 130: RF1.CheckCount = 0;
  6778  04A9  01C3               	clrf	(_RF1^(0+128)+4)
  6779                           
  6780                           ;RF_Control_B1.c: 131: RF1.CheckedCounter = 0;
  6781  04AA  01C4               	clrf	(_RF1^(0+128)+5)
  6782  04AB  01C5               	clrf	((_RF1+1)^(0+128)+5)
  6783                           
  6784                           ;RF_Control_B1.c: 132: if (RF1.RunTime < 300) {
  6785  04AC  3001               	movlw	1
  6786  04AD  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6787  04AE  302C               	movlw	44
  6788  04AF  1903               	skipnz
  6789  04B0  0246               	subwf	(_RF1^(0+128)+7),w
  6790  04B1  1803               	skipnc
  6791  04B2  2CCD               	goto	l9132
  6792                           
  6793                           ;RF_Control_B1.c: 133: RF1.RunTime += 10;
  6794  04B3  300A               	movlw	10
  6795  04B4  07C6               	addwf	(_RF1^(0+128)+7),f
  6796  04B5  3000               	movlw	0
  6797  04B6  3DC7               	addwfc	((_RF1+1)^(0+128)+7),f
  6798                           
  6799                           ;RF_Control_B1.c: 134: }
  6800                           ;RF_Control_B1.c: 135: }
  6801                           ;RF_Control_B1.c: 136: }
  6802                           ;RF_Control_B1.c: 137: }
  6803                           ;RF_Control_B1.c: 138: } else {
  6804  04B7  2CCD               	goto	l9132
  6805  04B8                     l1922:	
  6806                           
  6807                           ;RF_Control_B1.c: 140: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6808  04B8  1DBF               	btfss	_RF1^(0+128),3
  6809  04B9  18BF               	btfsc	_RF1^(0+128),1
  6810  04BA  2CCD               	goto	l9132
  6811                           
  6812                           ;RF_Control_B1.c: 141: RF1.RxStatus = 1;
  6813  04BB  15BF               	bsf	_RF1^(0+128),3
  6814                           
  6815                           ;RF_Control_B1.c: 142: RF1.Correction = 1;
  6816  04BC  16C0               	bsf	(_RF1^(0+128)+1),5
  6817                           
  6818                           ;RF_Control_B1.c: 144: CC2500_WriteCommand(0x36);
  6819  04BD  3036               	movlw	54
  6820  04BE  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6821                           
  6822                           ;RF_Control_B1.c: 145: CC2500_WriteCommand(0x3B);
  6823  04C1  303B               	movlw	59
  6824  04C2  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6825                           
  6826                           ;RF_Control_B1.c: 146: CC2500_WriteCommand(0x3A);
  6827  04C5  303A               	movlw	58
  6828  04C6  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6829                           
  6830                           ;RF_Control_B1.c: 147: CC2500_WriteCommand(0x34);
  6831  04C9  3034               	movlw	52
  6832  04CA  3190  2077  3184   	fcall	_CC2500_WriteCommand
  6833  04CD                     l9132:	
  6834                           
  6835                           ;RF_Control_B1.c: 149: }
  6836                           ;RF_Control_B1.c: 151: }
  6837                           ;RF_Control_B1.c: 152: }
  6838                           ;RF_Control_B1.c: 153: }
  6839                           ;RF_Control_B1.c: 154: if (RF1.RxStatus == 1) {
  6840  04CD  0021               	movlb	1	; select bank1
  6841  04CE  1DBF               	btfss	_RF1^(0+128),3
  6842  04CF  2CEE               	goto	l9144
  6843                           
  6844                           ;RF_Control_B1.c: 155: RF1.CheckedCounter++;
  6845  04D0  3001               	movlw	1
  6846  04D1  07C4               	addwf	(_RF1^(0+128)+5),f
  6847  04D2  3000               	movlw	0
  6848  04D3  3DC5               	addwfc	((_RF1+1)^(0+128)+5),f
  6849                           
  6850                           ;RF_Control_B1.c: 156: if (RF1.CheckedCounter == 100) {
  6851  04D4  3005               	movlw	5
  6852  04D5  3EBF               	addlw	_RF1& (0+255)
  6853  04D6  0086               	movwf	6
  6854  04D7  0187               	clrf	7
  6855  04D8  3F40               	moviw [0]fsr1
  6856  04D9  3A64               	xorlw	100
  6857  04DA  1D03               	skipz
  6858  04DB  2CDE               	goto	u9335
  6859  04DC  3F41               	moviw [1]fsr1
  6860  04DD  3A00               	xorlw	0
  6861  04DE                     u9335:	
  6862  04DE  1D03               	skipz
  6863  04DF  2CEE               	goto	l9144
  6864                           
  6865                           ;RF_Control_B1.c: 157: RF1.CheckedCounter = 0;
  6866  04E0  01C4               	clrf	(_RF1^(0+128)+5)
  6867  04E1  01C5               	clrf	((_RF1+1)^(0+128)+5)
  6868                           
  6869                           ;RF_Control_B1.c: 158: RF1.CheckCount = 0;
  6870  04E2  01C3               	clrf	(_RF1^(0+128)+4)
  6871                           
  6872                           ;RF_Control_B1.c: 159: if (RF1.RunTime > 20) {
  6873  04E3  3000               	movlw	0
  6874  04E4  0247               	subwf	((_RF1+1)^(0+128)+7),w
  6875  04E5  3015               	movlw	21
  6876  04E6  1903               	skipnz
  6877  04E7  0246               	subwf	(_RF1^(0+128)+7),w
  6878  04E8  1C03               	skipc
  6879  04E9  2CEE               	goto	l9144
  6880                           
  6881                           ;RF_Control_B1.c: 160: RF1.RunTime -= 10;
  6882  04EA  300A               	movlw	10
  6883  04EB  02C6               	subwf	(_RF1^(0+128)+7),f
  6884  04EC  3000               	movlw	0
  6885  04ED  3BC7               	subwfb	((_RF1+1)^(0+128)+7),f
  6886  04EE                     l9144:	
  6887                           
  6888                           ;RF_Control_B1.c: 161: }
  6889                           ;RF_Control_B1.c: 162: }
  6890                           ;RF_Control_B1.c: 163: }
  6891                           ;RF_Control_B1.c: 164: if (RF1.Correction == 1) {
  6892  04EE  1EC0               	btfss	(_RF1^(0+128)+1),5
  6893  04EF  0008               	return
  6894                           
  6895                           ;RF_Control_B1.c: 165: RF1.CorrectionCounter++;
  6896  04F0  3001               	movlw	1
  6897  04F1  07C9               	addwf	(_RF1^(0+128)+10),f
  6898  04F2  3000               	movlw	0
  6899  04F3  3DCA               	addwfc	((_RF1+1)^(0+128)+10),f
  6900                           
  6901                           ;RF_Control_B1.c: 166: if (RF1.CorrectionCounter >= 30000) {
  6902  04F4  3075               	movlw	117
  6903  04F5  024A               	subwf	((_RF1+1)^(0+128)+10),w
  6904  04F6  3030               	movlw	48
  6905  04F7  1903               	skipnz
  6906  04F8  0249               	subwf	(_RF1^(0+128)+10),w
  6907  04F9  1C03               	skipc
  6908  04FA  0008               	return
  6909                           
  6910                           ;RF_Control_B1.c: 167: RF1.CorrectionCounter = 0;
  6911  04FB  01C9               	clrf	(_RF1^(0+128)+10)
  6912  04FC  01CA               	clrf	((_RF1+1)^(0+128)+10)
  6913                           
  6914                           ;RF_Control_B1.c: 168: RF1.RxStatus = 0;
  6915  04FD  11BF               	bcf	_RF1^(0+128),3
  6916                           
  6917                           ;RF_Control_B1.c: 169: RF1.ReceiveGO = 0;
  6918  04FE  10BF               	bcf	_RF1^(0+128),1
  6919  04FF  0008               	return
  6920  0500                     __end_of_setRF_Main:	
  6921                           
  6922                           	psect	text28
  6923  0B49                     __ptext28:	
  6924 ;; *************** function _getRxData *****************
  6925 ;; Defined at:
  6926 ;;		line 252 in file "../src/RF_Control_B1.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;		None
  6931 ;; Return value:  Size  Location     Type
  6932 ;;		None               void
  6933 ;; Registers used:
  6934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;Total ram usage:        0 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:   12
  6947 ;; This function calls:
  6948 ;;		_setControl_Lights_Table
  6949 ;;		_setLog_Code
  6950 ;; This function is called by:
  6951 ;;		_setRF_Main
  6952 ;; This function uses a non-reentrant model
  6953 ;;
  6954                           
  6955                           
  6956                           ;psect for function _getRxData
  6957  0B49                     _getRxData:	
  6958                           
  6959                           ;RF_Control_B1.c: 253: if (RF1.Learn == 1) {
  6960                           
  6961                           ;incstack = 0
  6962                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6963  0B49  0021               	movlb	1	; select bank1
  6964  0B4A  1F3F               	btfss	_RF1^(0+128),6
  6965  0B4B  2B5C               	goto	l8552
  6966                           
  6967                           ;RF_Control_B1.c: 254: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6968  0B4C  0022               	movlb	2	; select bank2
  6969  0B4D  08A0               	movf	_RF_Data^(0+256),f
  6970  0B4E  1D03               	skipz
  6971  0B4F  2B59               	goto	l1953
  6972  0B50  0821               	movf	(_RF_Data^(0+256)+1),w
  6973  0B51  3A64               	xorlw	100
  6974  0B52  1D03               	skipz
  6975  0B53  2B59               	goto	l1953
  6976                           
  6977                           ;RF_Control_B1.c: 255: setLog_Code();
  6978  0B54  3193  2373         	fcall	_setLog_Code
  6979                           
  6980                           ;RF_Control_B1.c: 256: RF1.Checked = 1;
  6981  0B56  0021               	movlb	1	; select bank1
  6982  0B57  15C0               	bsf	(_RF1^(0+128)+1),3
  6983                           
  6984                           ;RF_Control_B1.c: 257: } else {
  6985  0B58  0008               	return
  6986  0B59                     l1953:	
  6987                           
  6988                           ;RF_Control_B1.c: 258: RF1.Checked = 0;
  6989  0B59  0021               	movlb	1	; select bank1
  6990  0B5A  11C0               	bcf	(_RF1^(0+128)+1),3
  6991                           
  6992                           ;RF_Control_B1.c: 259: }
  6993                           ;RF_Control_B1.c: 260: } else {
  6994  0B5B  0008               	return
  6995  0B5C                     l8552:	
  6996                           
  6997                           ;RF_Control_B1.c: 261: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6998  0B5C  0022               	movlb	2	; select bank2
  6999  0B5D  08A0               	movf	_RF_Data^(0+256),f
  7000  0B5E  1D03               	skipz
  7001  0B5F  2B9A               	goto	l8574
  7002  0B60  0821               	movf	(_RF_Data^(0+256)+1),w
  7003  0B61  3A02               	xorlw	2
  7004  0B62  1D03               	skipz
  7005  0B63  2B9A               	goto	l8574
  7006                           
  7007                           ;RF_Control_B1.c: 263: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7008  0B64  082C               	movf	(_RF_Data^(0+256)+12),w
  7009  0B65  3AFF               	xorlw	255
  7010  0B66  1D03               	skipz
  7011  0B67  2B74               	goto	l8564
  7012  0B68  082D               	movf	(_RF_Data^(0+256)+13),w
  7013  0B69  3AFF               	xorlw	255
  7014  0B6A  1D03               	skipz
  7015  0B6B  2B74               	goto	l8564
  7016  0B6C  082E               	movf	(_RF_Data^(0+256)+14),w
  7017  0B6D  3AFF               	xorlw	255
  7018  0B6E  1D03               	skipz
  7019  0B6F  2B74               	goto	l8564
  7020                           
  7021                           ;RF_Control_B1.c: 264: __nop();
  7022  0B70  0000               	nop
  7023                           
  7024                           ;RF_Control_B1.c: 265: RF1.Checked = 0;
  7025  0B71  0021               	movlb	1	; select bank1
  7026  0B72  11C0               	bcf	(_RF1^(0+128)+1),3
  7027                           
  7028                           ;RF_Control_B1.c: 266: } else {
  7029  0B73  0008               	return
  7030  0B74                     l8564:	
  7031                           
  7032                           ;RF_Control_B1.c: 267: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7033  0B74  0020               	movlb	0	; select bank0
  7034  0B75  086D               	movf	_product,w
  7035  0B76  3E0C               	addlw	12
  7036  0B77  0086               	movwf	6
  7037  0B78  3001               	movlw	1	; select bank2/3
  7038  0B79  0087               	movwf	7
  7039  0B7A  0022               	movlb	2	; select bank2
  7040  0B7B  082C               	movf	(_RF_Data^(0+256)+12),w
  7041  0B7C  0601               	xorwf	1,w
  7042  0B7D  1D03               	skipz
  7043  0B7E  0008               	return
  7044  0B7F  0020               	movlb	0	; select bank0
  7045  0B80  086D               	movf	_product,w
  7046  0B81  3E0D               	addlw	13
  7047  0B82  0086               	movwf	6
  7048  0B83  3001               	movlw	1	; select bank2/3
  7049  0B84  0087               	movwf	7
  7050  0B85  0022               	movlb	2	; select bank2
  7051  0B86  082D               	movf	(_RF_Data^(0+256)+13),w
  7052  0B87  0601               	xorwf	1,w
  7053  0B88  1D03               	skipz
  7054  0B89  0008               	return
  7055  0B8A  0020               	movlb	0	; select bank0
  7056  0B8B  086D               	movf	_product,w
  7057  0B8C  3E0E               	addlw	14
  7058  0B8D  0086               	movwf	6
  7059  0B8E  3001               	movlw	1	; select bank2/3
  7060  0B8F  0087               	movwf	7
  7061  0B90  0022               	movlb	2	; select bank2
  7062  0B91  082E               	movf	(_RF_Data^(0+256)+14),w
  7063  0B92  0601               	xorwf	1,w
  7064  0B93  1D03               	skipz
  7065  0B94  0008               	return
  7066                           
  7067                           ;RF_Control_B1.c: 268: setControl_Lights_Table();
  7068  0B95  318A  22E2         	fcall	_setControl_Lights_Table
  7069                           
  7070                           ;RF_Control_B1.c: 269: RF1.Checked = 1;
  7071  0B97  0021               	movlb	1	; select bank1
  7072  0B98  15C0               	bsf	(_RF1^(0+128)+1),3
  7073                           
  7074                           ;RF_Control_B1.c: 270: }
  7075                           ;RF_Control_B1.c: 271: }
  7076                           ;RF_Control_B1.c: 272: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7077  0B99  0008               	return
  7078  0B9A                     l8574:	
  7079  0B9A  0022               	movlb	2	; select bank2
  7080  0B9B  0820               	movf	_RF_Data^(0+256),w
  7081  0B9C  3AFF               	xorlw	255
  7082  0B9D  1D03               	skipz
  7083  0B9E  2BA5               	goto	l8580
  7084  0B9F  0821               	movf	(_RF_Data^(0+256)+1),w
  7085  0BA0  3A02               	xorlw	2
  7086  0BA1  1D03               	skipz
  7087  0BA2  2BA5               	goto	l8580
  7088                           
  7089                           ;RF_Control_B1.c: 273: __nop();
  7090  0BA3  0000               	nop
  7091                           
  7092                           ;RF_Control_B1.c: 274: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7093  0BA4  0008               	return
  7094  0BA5                     l8580:	
  7095  0BA5  0022               	movlb	2	; select bank2
  7096  0BA6  08A0               	movf	_RF_Data^(0+256),f
  7097  0BA7  1D03               	skipz
  7098  0BA8  2BAF               	goto	l1963
  7099  0BA9  0821               	movf	(_RF_Data^(0+256)+1),w
  7100  0BAA  3A65               	xorlw	101
  7101  0BAB  1D03               	skipz
  7102  0BAC  2BAF               	goto	l1963
  7103                           
  7104                           ;RF_Control_B1.c: 275: __nop();
  7105  0BAD  0000               	nop
  7106                           
  7107                           ;RF_Control_B1.c: 276: } else {
  7108  0BAE  0008               	return
  7109  0BAF                     l1963:	
  7110                           
  7111                           ;RF_Control_B1.c: 277: RF1.Checked = 0;
  7112  0BAF  0021               	movlb	1	; select bank1
  7113  0BB0  11C0               	bcf	(_RF1^(0+128)+1),3
  7114  0BB1  0008               	return
  7115  0BB2                     __end_of_getRxData:	
  7116                           
  7117                           	psect	text29
  7118  1373                     __ptext29:	
  7119 ;; *************** function _setLog_Code *****************
  7120 ;; Defined at:
  7121 ;;		line 287 in file "../src/RF_Control_B1.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;		None               void
  7128 ;; Registers used:
  7129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:        1 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    7
  7142 ;; This function calls:
  7143 ;;		_setBuz
  7144 ;; This function is called by:
  7145 ;;		_getRxData
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _setLog_Code
  7151  1373                     _setLog_Code:	
  7152                           
  7153                           ;RF_Control_B1.c: 288: product->Data[12]=RF_Data[12];
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7157  1373  0022               	movlb	2	; select bank2
  7158  1374  082C               	movf	(_RF_Data^(0+256)+12),w
  7159  1375  0020               	movlb	0	; select bank0
  7160  1376  00AD               	movwf	??_setLog_Code
  7161  1377  086D               	movf	_product,w
  7162  1378  3E0C               	addlw	12
  7163  1379  0086               	movwf	6
  7164  137A  3001               	movlw	1	; select bank2/3
  7165  137B  0087               	movwf	7
  7166  137C  082D               	movf	??_setLog_Code,w
  7167  137D  0081               	movwf	1
  7168                           
  7169                           ;RF_Control_B1.c: 289: product->Data[13]=RF_Data[13];
  7170  137E  0022               	movlb	2	; select bank2
  7171  137F  082D               	movf	(_RF_Data^(0+256)+13),w
  7172  1380  0020               	movlb	0	; select bank0
  7173  1381  00AD               	movwf	??_setLog_Code
  7174  1382  086D               	movf	_product,w
  7175  1383  3E0D               	addlw	13
  7176  1384  0086               	movwf	6
  7177  1385  3001               	movlw	1	; select bank2/3
  7178  1386  0087               	movwf	7
  7179  1387  082D               	movf	??_setLog_Code,w
  7180  1388  0081               	movwf	1
  7181                           
  7182                           ;RF_Control_B1.c: 290: product->Data[14]=RF_Data[14];
  7183  1389  0022               	movlb	2	; select bank2
  7184  138A  082E               	movf	(_RF_Data^(0+256)+14),w
  7185  138B  0020               	movlb	0	; select bank0
  7186  138C  00AD               	movwf	??_setLog_Code
  7187  138D  086D               	movf	_product,w
  7188  138E  3E0E               	addlw	14
  7189  138F  0086               	movwf	6
  7190  1390  3001               	movlw	1	; select bank2/3
  7191  1391  0087               	movwf	7
  7192  1392  082D               	movf	??_setLog_Code,w
  7193  1393  0081               	movwf	1
  7194                           
  7195                           ;RF_Control_B1.c: 291: setBuz(1, 100);
  7196  1394  3064               	movlw	100
  7197  1395  00A9               	movwf	setBuz@time
  7198  1396  3000               	movlw	0
  7199  1397  00AA               	movwf	setBuz@time+1
  7200  1398  3001               	movlw	1
  7201  1399  3197  27A7  3193   	fcall	_setBuz
  7202                           
  7203                           ;RF_Control_B1.c: 292: RF1.Learn = 0;
  7204  139C  0021               	movlb	1	; select bank1
  7205  139D  133F               	bcf	_RF1^(0+128),6
  7206                           
  7207                           ;RF_Control_B1.c: 293: if (myMain.First) {
  7208  139E  1C21               	btfss	(_myMain^(0+128)+1),0
  7209  139F  2BA2               	goto	l1968
  7210                           
  7211                           ;RF_Control_B1.c: 294: Memory.LoopSave=1;
  7212  13A0  0022               	movlb	2	; select bank2
  7213  13A1  155B               	bsf	(_Memory^(0+256)+36),2
  7214  13A2                     l1968:	
  7215                           
  7216                           ;RF_Control_B1.c: 295: }
  7217                           ;RF_Control_B1.c: 296: Memory.Modify=1;
  7218  13A2  0022               	movlb	2	; select bank2
  7219  13A3  145B               	bsf	(_Memory^(0+256)+36),0
  7220  13A4  0008               	return
  7221  13A5                     __end_of_setLog_Code:	
  7222                           
  7223                           	psect	text30
  7224  0AE2                     __ptext30:	
  7225 ;; *************** function _setControl_Lights_Table *****************
  7226 ;; Defined at:
  7227 ;;		line 300 in file "../src/RF_Control_B1.c"
  7228 ;; Parameters:    Size  Location     Type
  7229 ;;		None
  7230 ;; Auto vars:     Size  Location     Type
  7231 ;;		None
  7232 ;; Return value:  Size  Location     Type
  7233 ;;		None               void
  7234 ;; Registers used:
  7235 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7236 ;; Tracked objects:
  7237 ;;		On entry : 0/0
  7238 ;;		On exit  : 0/0
  7239 ;;		Unchanged: 0/0
  7240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7245 ;;Total ram usage:        0 bytes
  7246 ;; Hardware stack levels used:    1
  7247 ;; Hardware stack levels required when called:   11
  7248 ;; This function calls:
  7249 ;;		_setBuz
  7250 ;;		_setDimmerLights
  7251 ;;		_setRFSW_AdjControl
  7252 ;;		_setRFSW_Control
  7253 ;;		_setRFSW_Status
  7254 ;;		_setSw_Status
  7255 ;;		_setTxData
  7256 ;; This function is called by:
  7257 ;;		_getRxData
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           
  7262                           ;psect for function _setControl_Lights_Table
  7263  0AE2                     _setControl_Lights_Table:	
  7264                           
  7265                           ;RF_Control_B1.c: 301: if (RF_Data[15] == 0x00) {
  7266                           
  7267                           ;incstack = 0
  7268                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  7269  0AE2  0022               	movlb	2	; select bank2
  7270  0AE3  08AF               	movf	(_RF_Data^(0+256)+15),f
  7271  0AE4  1D03               	skipz
  7272  0AE5  2B1C               	goto	l8276
  7273                           
  7274                           ;RF_Control_B1.c: 303: setDimmerLights(1, 0);
  7275  0AE6  0020               	movlb	0	; select bank0
  7276  0AE7  01A4               	clrf	setDimmerLights@status
  7277  0AE8  3001               	movlw	1
  7278  0AE9  318D  25E8  318A   	fcall	_setDimmerLights
  7279                           
  7280                           ;RF_Control_B1.c: 304: setRFSW_Status(1, 0);
  7281  0AEC  0020               	movlb	0	; select bank0
  7282  0AED  01A2               	clrf	setRFSW_Status@command
  7283  0AEE  3001               	movlw	1
  7284  0AEF  319E  2691  318A   	fcall	_setRFSW_Status
  7285                           
  7286                           ;RF_Control_B1.c: 305: setSw_Status(1, 0);
  7287  0AF2  0020               	movlb	0	; select bank0
  7288  0AF3  01A2               	clrf	setSw_Status@command
  7289  0AF4  3001               	movlw	1
  7290  0AF5  319E  26AD  318A   	fcall	_setSw_Status
  7291                           
  7292                           ;RF_Control_B1.c: 318: product->Data[9]=0;
  7293  0AF8  0020               	movlb	0	; select bank0
  7294  0AF9  086D               	movf	_product,w
  7295  0AFA  3E09               	addlw	9
  7296  0AFB  0086               	movwf	6
  7297  0AFC  3001               	movlw	1	; select bank2/3
  7298  0AFD  0087               	movwf	7
  7299  0AFE  0181               	clrf	1
  7300                           
  7301                           ;RF_Control_B1.c: 319: product->Data[11]=0;
  7302  0AFF  086D               	movf	_product,w
  7303  0B00  3E0B               	addlw	11
  7304  0B01  0086               	movwf	6
  7305  0B02  3001               	movlw	1	; select bank2/3
  7306  0B03  0087               	movwf	7
  7307  0B04  0181               	clrf	1
  7308                           
  7309                           ;RF_Control_B1.c: 320: product->Data[15]=0;
  7310  0B05  086D               	movf	_product,w
  7311  0B06  3E0F               	addlw	15
  7312  0B07  0086               	movwf	6
  7313  0B08  3001               	movlw	1	; select bank2/3
  7314  0B09  0087               	movwf	7
  7315  0B0A  0181               	clrf	1
  7316                           
  7317                           ;RF_Control_B1.c: 321: product->Data[17]=0;
  7318  0B0B  086D               	movf	_product,w
  7319  0B0C  3E11               	addlw	17
  7320  0B0D  0086               	movwf	6
  7321  0B0E  3001               	movlw	1	; select bank2/3
  7322  0B0F  0087               	movwf	7
  7323  0B10  0181               	clrf	1
  7324                           
  7325                           ;RF_Control_B1.c: 322: setBuz(1, 100);
  7326  0B11  3064               	movlw	100
  7327  0B12  00A9               	movwf	setBuz@time
  7328  0B13  3000               	movlw	0
  7329  0B14  00AA               	movwf	setBuz@time+1
  7330  0B15  3001               	movlw	1
  7331  0B16  3197  27A7  318A   	fcall	_setBuz
  7332                           
  7333                           ;RF_Control_B1.c: 323: setTxData();
  7334  0B19  3185  25C7         	fcall	_setTxData
  7335                           
  7336                           ;RF_Control_B1.c: 324: } else if (RF_Data[15] == 0x20) {
  7337  0B1B  0008               	return
  7338  0B1C                     l8276:	
  7339  0B1C  0022               	movlb	2	; select bank2
  7340  0B1D  082F               	movf	(_RF_Data^(0+256)+15),w
  7341  0B1E  3A20               	xorlw	32
  7342  0B1F  1D03               	skipz
  7343  0B20  2B37               	goto	l8282
  7344                           
  7345                           ;RF_Control_B1.c: 325: product->Data[9]=0;
  7346  0B21  0020               	movlb	0	; select bank0
  7347  0B22  086D               	movf	_product,w
  7348  0B23  3E09               	addlw	9
  7349  0B24  0086               	movwf	6
  7350  0B25  3001               	movlw	1	; select bank2/3
  7351  0B26  0087               	movwf	7
  7352  0B27  0181               	clrf	1
  7353                           
  7354                           ;RF_Control_B1.c: 326: product->Data[11]=0;
  7355  0B28  086D               	movf	_product,w
  7356  0B29  3E0B               	addlw	11
  7357  0B2A  0086               	movwf	6
  7358  0B2B  3001               	movlw	1	; select bank2/3
  7359  0B2C  0087               	movwf	7
  7360  0B2D  0181               	clrf	1
  7361                           
  7362                           ;RF_Control_B1.c: 327: product->Data[17]=0;
  7363  0B2E  086D               	movf	_product,w
  7364  0B2F  3E11               	addlw	17
  7365  0B30  0086               	movwf	6
  7366  0B31  3001               	movlw	1	; select bank2/3
  7367  0B32  0087               	movwf	7
  7368  0B33  0181               	clrf	1
  7369                           
  7370                           ;RF_Control_B1.c: 328: setTxData();
  7371  0B34  3185  25C7         	fcall	_setTxData
  7372                           
  7373                           ;RF_Control_B1.c: 329: }
  7374  0B36  0008               	return
  7375  0B37                     l8282:	
  7376                           
  7377                           ;RF_Control_B1.c: 331: else if (RF_Data[15] == 0x01) {
  7378  0B37  0022               	movlb	2	; select bank2
  7379  0B38  082F               	movf	(_RF_Data^(0+256)+15),w
  7380  0B39  3A01               	xorlw	1
  7381  0B3A  1D03               	skipz
  7382  0B3B  2B40               	goto	l8286
  7383                           
  7384                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7385  0B3C  3001               	movlw	1
  7386  0B3D  318F  2775         	fcall	_setRFSW_Control
  7387                           
  7388                           ;RF_Control_B1.c: 333: }
  7389  0B3F  0008               	return
  7390  0B40                     l8286:	
  7391                           
  7392                           ;RF_Control_B1.c: 335: else if (RF_Data[15] == 0x11) {
  7393  0B40  0022               	movlb	2	; select bank2
  7394  0B41  082F               	movf	(_RF_Data^(0+256)+15),w
  7395  0B42  3A11               	xorlw	17
  7396  0B43  1D03               	skipz
  7397  0B44  0008               	return
  7398                           
  7399                           ;RF_Control_B1.c: 336: setRFSW_AdjControl(1);
  7400  0B45  3001               	movlw	1
  7401  0B46  3194  2449         	fcall	_setRFSW_AdjControl
  7402  0B48  0008               	return
  7403  0B49                     __end_of_setControl_Lights_Table:	
  7404                           
  7405                           	psect	text31
  7406  0F75                     __ptext31:	
  7407 ;; *************** function _setRFSW_Control *****************
  7408 ;; Defined at:
  7409 ;;		line 388 in file "../src/RF_Control_B1.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  sw              1    wreg     unsigned char 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  sw              1   67[BANK0 ] unsigned char 
  7414 ;; Return value:  Size  Location     Type
  7415 ;;		None               void
  7416 ;; Registers used:
  7417 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7418 ;; Tracked objects:
  7419 ;;		On entry : 0/0
  7420 ;;		On exit  : 0/0
  7421 ;;		Unchanged: 0/0
  7422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;Total ram usage:        2 bytes
  7428 ;; Hardware stack levels used:    1
  7429 ;; Hardware stack levels required when called:    9
  7430 ;; This function calls:
  7431 ;;		_RfSWPointSelect
  7432 ;;		_setBuz
  7433 ;;		_setDelayOff_GO
  7434 ;;		_setDimmerLights_Switch
  7435 ;;		_setDimmerLights_Trigger
  7436 ;;		_setRF_DimmerLights
  7437 ;;		_setSw_Status
  7438 ;;		_setTxData
  7439 ;; This function is called by:
  7440 ;;		_setControl_Lights_Table
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           
  7445                           ;psect for function _setRFSW_Control
  7446  0F75                     _setRFSW_Control:	
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7450                           ;setRFSW_Control@sw stored from wreg
  7451  0F75  0020               	movlb	0	; select bank0
  7452  0F76  00E3               	movwf	setRFSW_Control@sw
  7453                           
  7454                           ;RF_Control_B1.c: 389: RfSWPointSelect(sw);
  7455  0F77  0863               	movf	setRFSW_Control@sw,w
  7456  0F78  319D  25F6  318F   	fcall	_RfSWPointSelect
  7457                           
  7458                           ;RF_Control_B1.c: 390: if (RFSW->Status == 0) {
  7459  0F7B  0879               	movf	_RFSW,w
  7460  0F7C  0086               	movwf	6
  7461  0F7D  0187               	clrf	7
  7462  0F7E  1801               	btfsc	1,0
  7463  0F7F  2FB4               	goto	l8124
  7464                           
  7465                           ;RF_Control_B1.c: 391: if (RF_Data[16] == 0x80) {
  7466  0F80  0022               	movlb	2	; select bank2
  7467  0F81  0830               	movf	(_RF_Data^(0+256)+16),w
  7468  0F82  3A80               	xorlw	128
  7469  0F83  1D03               	skipz
  7470  0F84  2F92               	goto	l8114
  7471                           
  7472                           ;RF_Control_B1.c: 392: setDelayOff_GO(sw, 1, RF_Data[17]);
  7473  0F85  0020               	movlb	0	; select bank0
  7474  0F86  01AA               	clrf	setDelayOff_GO@command
  7475  0F87  0AAA               	incf	setDelayOff_GO@command,f
  7476  0F88  0022               	movlb	2	; select bank2
  7477  0F89  0831               	movf	(_RF_Data^(0+256)+17),w
  7478  0F8A  0020               	movlb	0	; select bank0
  7479  0F8B  00E2               	movwf	??_setRFSW_Control
  7480  0F8C  0862               	movf	??_setRFSW_Control,w
  7481  0F8D  00AB               	movwf	setDelayOff_GO@value
  7482  0F8E  0863               	movf	setRFSW_Control@sw,w
  7483  0F8F  318A  2219  318F   	fcall	_setDelayOff_GO
  7484  0F92                     l8114:	
  7485                           
  7486                           ;RF_Control_B1.c: 393: }
  7487                           ;RF_Control_B1.c: 394: RFSW->Status = 1;
  7488  0F92  0879               	movf	_RFSW,w
  7489  0F93  0086               	movwf	6
  7490  0F94  0187               	clrf	7
  7491  0F95  1401               	bsf	1,0
  7492                           
  7493                           ;RF_Control_B1.c: 395: setSw_Status(sw, 1);
  7494  0F96  0020               	movlb	0	; select bank0
  7495  0F97  01A2               	clrf	setSw_Status@command
  7496  0F98  0AA2               	incf	setSw_Status@command,f
  7497  0F99  0863               	movf	setRFSW_Control@sw,w
  7498  0F9A  319E  26AD  318F   	fcall	_setSw_Status
  7499                           
  7500                           ;RF_Control_B1.c: 397: setDimmerLights_Trigger(sw, 1);
  7501  0F9D  0020               	movlb	0	; select bank0
  7502  0F9E  01A2               	clrf	setDimmerLights_Trigger@command
  7503  0F9F  0AA2               	incf	setDimmerLights_Trigger@command,f
  7504  0FA0  0863               	movf	setRFSW_Control@sw,w
  7505  0FA1  319E  26F9  318F   	fcall	_setDimmerLights_Trigger
  7506                           
  7507                           ;RF_Control_B1.c: 398: setDimmerLights_Switch(sw, 1);
  7508  0FA4  0020               	movlb	0	; select bank0
  7509  0FA5  01A2               	clrf	setDimmerLights_Switch@command
  7510  0FA6  0AA2               	incf	setDimmerLights_Switch@command,f
  7511  0FA7  0863               	movf	setRFSW_Control@sw,w
  7512  0FA8  319E  26E9  318F   	fcall	_setDimmerLights_Switch
  7513                           
  7514                           ;RF_Control_B1.c: 400: setRF_DimmerLights(sw, RFSW->Status);
  7515  0FAB  0879               	movf	_RFSW,w
  7516  0FAC  0086               	movwf	6
  7517  0FAD  0187               	clrf	7
  7518  0FAE  3000               	movlw	0
  7519  0FAF  1801               	btfsc	1,0
  7520  0FB0  3001               	movlw	1
  7521  0FB1  0020               	movlb	0	; select bank0
  7522  0FB2  00DD               	movwf	setRF_DimmerLights@on
  7523  0FB3  2FF0               	goto	L1
  7524  0FB4                     l8124:	
  7525                           ;RF_Control_B1.c: 401: } else {
  7526                           
  7527                           
  7528                           ;RF_Control_B1.c: 402: if (RF_Data[16] == 0x80) {
  7529  0FB4  0022               	movlb	2	; select bank2
  7530  0FB5  0830               	movf	(_RF_Data^(0+256)+16),w
  7531  0FB6  3A80               	xorlw	128
  7532  0FB7  1D03               	skipz
  7533  0FB8  2FCA               	goto	l8128
  7534                           
  7535                           ;RF_Control_B1.c: 403: setDelayOff_GO(sw, 1, RF_Data[17]);
  7536  0FB9  0020               	movlb	0	; select bank0
  7537  0FBA  01AA               	clrf	setDelayOff_GO@command
  7538  0FBB  0AAA               	incf	setDelayOff_GO@command,f
  7539  0FBC  0022               	movlb	2	; select bank2
  7540  0FBD  0831               	movf	(_RF_Data^(0+256)+17),w
  7541  0FBE  0020               	movlb	0	; select bank0
  7542  0FBF  00E2               	movwf	??_setRFSW_Control
  7543  0FC0  0862               	movf	??_setRFSW_Control,w
  7544  0FC1  00AB               	movwf	setDelayOff_GO@value
  7545  0FC2  0863               	movf	setRFSW_Control@sw,w
  7546  0FC3  318A  2219  318F   	fcall	_setDelayOff_GO
  7547                           
  7548                           ;RF_Control_B1.c: 404: setRF_DimmerLights(sw, 1);
  7549  0FC6  0020               	movlb	0	; select bank0
  7550  0FC7  01DD               	clrf	setRF_DimmerLights@on
  7551  0FC8  0ADD               	incf	setRF_DimmerLights@on,f
  7552  0FC9  2FF0               	goto	L1
  7553  0FCA                     l8128:	
  7554                           ;RF_Control_B1.c: 405: } else {
  7555                           
  7556                           
  7557                           ;RF_Control_B1.c: 406: RFSW->Status = 0;
  7558  0FCA  0879               	movf	_RFSW,w
  7559  0FCB  0086               	movwf	6
  7560  0FCC  0187               	clrf	7
  7561  0FCD  1001               	bcf	1,0
  7562                           
  7563                           ;RF_Control_B1.c: 407: setSw_Status(sw, 0);
  7564  0FCE  0020               	movlb	0	; select bank0
  7565  0FCF  01A2               	clrf	setSw_Status@command
  7566  0FD0  0863               	movf	setRFSW_Control@sw,w
  7567  0FD1  319E  26AD  318F   	fcall	_setSw_Status
  7568                           
  7569                           ;RF_Control_B1.c: 409: setDimmerLights_Trigger(sw, 1);
  7570  0FD4  0020               	movlb	0	; select bank0
  7571  0FD5  01A2               	clrf	setDimmerLights_Trigger@command
  7572  0FD6  0AA2               	incf	setDimmerLights_Trigger@command,f
  7573  0FD7  0863               	movf	setRFSW_Control@sw,w
  7574  0FD8  319E  26F9  318F   	fcall	_setDimmerLights_Trigger
  7575                           
  7576                           ;RF_Control_B1.c: 410: setDimmerLights_Switch(sw, RFSW->Status);
  7577  0FDB  0879               	movf	_RFSW,w
  7578  0FDC  0086               	movwf	6
  7579  0FDD  0187               	clrf	7
  7580  0FDE  3000               	movlw	0
  7581  0FDF  1801               	btfsc	1,0
  7582  0FE0  3001               	movlw	1
  7583  0FE1  0020               	movlb	0	; select bank0
  7584  0FE2  00A2               	movwf	setDimmerLights_Switch@command
  7585  0FE3  0863               	movf	setRFSW_Control@sw,w
  7586  0FE4  319E  26E9  318F   	fcall	_setDimmerLights_Switch
  7587                           
  7588                           ;RF_Control_B1.c: 412: setDelayOff_GO(sw, 0, 0);
  7589  0FE7  0020               	movlb	0	; select bank0
  7590  0FE8  01AA               	clrf	setDelayOff_GO@command
  7591  0FE9  01AB               	clrf	setDelayOff_GO@value
  7592  0FEA  0863               	movf	setRFSW_Control@sw,w
  7593  0FEB  318A  2219  318F   	fcall	_setDelayOff_GO
  7594                           
  7595                           ;RF_Control_B1.c: 413: setRF_DimmerLights(sw, 0);
  7596  0FEE  0020               	movlb	0	; select bank0
  7597  0FEF  01DD               	clrf	setRF_DimmerLights@on
  7598  0FF0                     L1:	
  7599  0FF0  0863               	movf	setRFSW_Control@sw,w
  7600  0FF1  318B  23B2  318F   	fcall	_setRF_DimmerLights
  7601                           
  7602                           ;RF_Control_B1.c: 414: }
  7603                           ;RF_Control_B1.c: 415: }
  7604                           ;RF_Control_B1.c: 416: setBuz(1, 100);
  7605  0FF4  3064               	movlw	100
  7606  0FF5  0020               	movlb	0	; select bank0
  7607  0FF6  00A9               	movwf	setBuz@time
  7608  0FF7  3000               	movlw	0
  7609  0FF8  00AA               	movwf	setBuz@time+1
  7610  0FF9  3001               	movlw	1
  7611  0FFA  3197  27A7  318F   	fcall	_setBuz
  7612                           
  7613                           ;RF_Control_B1.c: 417: setTxData();
  7614  0FFD  3185  25C7         	fcall	_setTxData
  7615  0FFF  0008               	return
  7616  1000                     __end_of_setRFSW_Control:	
  7617                           
  7618                           	psect	text32
  7619  0A19                     __ptext32:	
  7620 ;; *************** function _setDelayOff_GO *****************
  7621 ;; Defined at:
  7622 ;;		line 86 in file "../src/DelayOff_B1.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;  sw              1    wreg     unsigned char 
  7625 ;;  command         1   10[BANK0 ] unsigned char 
  7626 ;;  value           1   11[BANK0 ] unsigned char 
  7627 ;; Auto vars:     Size  Location     Type
  7628 ;;  sw              1   14[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;		None               void
  7631 ;; Registers used:
  7632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        5 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    7
  7645 ;; This function calls:
  7646 ;;		_DelayOffPointSelect
  7647 ;;		_DelayTimejudge
  7648 ;; This function is called by:
  7649 ;;		_setRFSW_Control
  7650 ;;		_Sw_DimmerOffFunc
  7651 ;; This function uses a non-reentrant model
  7652 ;;
  7653                           
  7654                           
  7655                           ;psect for function _setDelayOff_GO
  7656  0A19                     _setDelayOff_GO:	
  7657                           
  7658                           ;incstack = 0
  7659                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7660                           ;setDelayOff_GO@sw stored from wreg
  7661  0A19  0020               	movlb	0	; select bank0
  7662  0A1A  00AE               	movwf	setDelayOff_GO@sw
  7663                           
  7664                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7665  0A1B  082E               	movf	setDelayOff_GO@sw,w
  7666  0A1C  319D  25E0  318A   	fcall	_DelayOffPointSelect
  7667                           
  7668                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7669  0A1F  0020               	movlb	0	; select bank0
  7670  0A20  0869               	movf	_DelayOff,w
  7671  0A21  0086               	movwf	6
  7672  0A22  3001               	movlw	1	; select bank2/3
  7673  0A23  0087               	movwf	7
  7674  0A24  1C01               	btfss	1,0
  7675  0A25  0008               	return
  7676                           
  7677                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7678  0A26  082A               	movf	setDelayOff_GO@command,w
  7679  0A27  3A01               	xorlw	1
  7680  0A28  3000               	movlw	0
  7681  0A29  1903               	skipnz
  7682  0A2A  3001               	movlw	1
  7683  0A2B  00AC               	movwf	??_setDelayOff_GO
  7684  0A2C  0869               	movf	_DelayOff,w
  7685  0A2D  0086               	movwf	6
  7686  0A2E  3001               	movlw	1	; select bank2/3
  7687  0A2F  0087               	movwf	7
  7688  0A30  0DAC               	rlf	??_setDelayOff_GO,f
  7689  0A31  0801               	movf	1,w
  7690  0A32  062C               	xorwf	??_setDelayOff_GO,w
  7691  0A33  39FD               	andlw	-3
  7692  0A34  062C               	xorwf	??_setDelayOff_GO,w
  7693  0A35  0081               	movwf	1
  7694                           
  7695                           ;DelayOff_B1.c: 90: if (command == 1) {
  7696  0A36  082A               	movf	setDelayOff_GO@command,w
  7697  0A37  3A01               	xorlw	1
  7698  0A38  1D03               	skipz
  7699  0A39  2A64               	goto	l7928
  7700                           
  7701                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7702  0A3A  082B               	movf	setDelayOff_GO@value,w
  7703  0A3B  3192  2262  318A   	fcall	_DelayTimejudge
  7704  0A3E  0020               	movlb	0	; select bank0
  7705  0A3F  00AC               	movwf	??_setDelayOff_GO
  7706  0A40  0869               	movf	_DelayOff,w
  7707  0A41  0086               	movwf	6
  7708  0A42  3001               	movlw	1	; select bank2/3
  7709  0A43  0087               	movwf	7
  7710  0A44  082C               	movf	??_setDelayOff_GO,w
  7711  0A45  0081               	movwf	1
  7712                           
  7713                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7714  0A46  300F               	movlw	15
  7715  0A47  052B               	andwf	setDelayOff_GO@value,w
  7716  0A48  00AC               	movwf	??_setDelayOff_GO
  7717  0A49  082C               	movf	??_setDelayOff_GO,w
  7718  0A4A  3A05               	xorlw	5
  7719  0A4B  1903               	skipnz
  7720  0A4C  2A51               	goto	l7922
  7721  0A4D  082B               	movf	setDelayOff_GO@value,w
  7722  0A4E  390F               	andlw	15
  7723  0A4F  1D03               	btfss	3,2
  7724  0A50  2A57               	goto	l7926
  7725  0A51                     l7922:	
  7726  0A51  3026               	movlw	38
  7727  0A52  022B               	subwf	setDelayOff_GO@value,w
  7728  0A53  1803               	skipnc
  7729  0A54  2A57               	goto	l7926
  7730                           
  7731                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7732  0A55  082B               	movf	setDelayOff_GO@value,w
  7733  0A56  2A58               	goto	L2
  7734  0A57                     l7926:	
  7735                           ;DelayOff_B1.c: 94: } else {
  7736                           
  7737                           
  7738                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7739  0A57  3005               	movlw	5
  7740  0A58                     L2:	
  7741  0A58  00AC               	movwf	??_setDelayOff_GO
  7742  0A59  082E               	movf	setDelayOff_GO@sw,w
  7743  0A5A  3E1A               	addlw	26
  7744  0A5B  076D               	addwf	_product,w
  7745  0A5C  00AD               	movwf	??_setDelayOff_GO+1
  7746  0A5D  082D               	movf	??_setDelayOff_GO+1,w
  7747  0A5E  0086               	movwf	6
  7748  0A5F  3001               	movlw	1	; select bank2/3
  7749  0A60  0087               	movwf	7
  7750  0A61  082C               	movf	??_setDelayOff_GO,w
  7751  0A62  0081               	movwf	1
  7752                           
  7753                           ;DelayOff_B1.c: 96: }
  7754                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7755  0A63  2A70               	goto	l7932
  7756  0A64                     l7928:	
  7757  0A64  08AA               	movf	setDelayOff_GO@command,f
  7758  0A65  1D03               	skipz
  7759  0A66  2A70               	goto	l7932
  7760                           
  7761                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7762  0A67  082E               	movf	setDelayOff_GO@sw,w
  7763  0A68  3E1A               	addlw	26
  7764  0A69  076D               	addwf	_product,w
  7765  0A6A  00AC               	movwf	??_setDelayOff_GO
  7766  0A6B  082C               	movf	??_setDelayOff_GO,w
  7767  0A6C  0086               	movwf	6
  7768  0A6D  3001               	movlw	1	; select bank2/3
  7769  0A6E  0087               	movwf	7
  7770  0A6F  0181               	clrf	1
  7771  0A70                     l7932:	
  7772                           
  7773                           ;DelayOff_B1.c: 99: }
  7774                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7775  0A70  0869               	movf	_DelayOff,w
  7776  0A71  0086               	movwf	6
  7777  0A72  3001               	movlw	1	; select bank2/3
  7778  0A73  0087               	movwf	7
  7779  0A74  3000               	movlw	0
  7780  0A75  3FC0               	movwi [0]fsr1
  7781  0A76  3FC1               	movwi [1]fsr1
  7782                           
  7783                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7784  0A77  0869               	movf	_DelayOff,w
  7785  0A78  0086               	movwf	6
  7786  0A79  3001               	movlw	1	; select bank2/3
  7787  0A7A  0087               	movwf	7
  7788  0A7B  0181               	clrf	1
  7789  0A7C  0008               	return
  7790  0A7D                     __end_of_setDelayOff_GO:	
  7791                           
  7792                           	psect	text33
  7793  1262                     __ptext33:	
  7794 ;; *************** function _DelayTimejudge *****************
  7795 ;; Defined at:
  7796 ;;		line 106 in file "../src/DelayOff_B1.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  value           1    wreg     unsigned char 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  value           1    9[BANK0 ] unsigned char 
  7801 ;;  k               1    8[BANK0 ] unsigned char 
  7802 ;;  j               1    7[BANK0 ] unsigned char 
  7803 ;;  i               1    6[BANK0 ] unsigned char 
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  1    wreg      unsigned char 
  7806 ;; Registers used:
  7807 ;;		wreg, status,2, status,0, pclath, cstack
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;Total ram usage:        6 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    6
  7820 ;; This function calls:
  7821 ;;		___bmul
  7822 ;; This function is called by:
  7823 ;;		_setDelayOff_GO
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function _DelayTimejudge
  7829  1262                     _DelayTimejudge:	
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7833                           ;DelayTimejudge@value stored from wreg
  7834  1262  0020               	movlb	0	; select bank0
  7835  1263  00A9               	movwf	DelayTimejudge@value
  7836                           
  7837                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7838  1264  3005               	movlw	5
  7839  1265  00A4               	movwf	??_DelayTimejudge
  7840  1266  0824               	movf	??_DelayTimejudge,w
  7841  1267  00A6               	movwf	DelayTimejudge@i
  7842  1268  01A7               	clrf	DelayTimejudge@j
  7843  1269  01A8               	clrf	DelayTimejudge@k
  7844                           
  7845                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7846  126A  3031               	movlw	49
  7847  126B  0229               	subwf	DelayTimejudge@value,w
  7848  126C  1803               	skipnc
  7849  126D  2A8A               	goto	l7720
  7850                           
  7851                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7852  126E  0829               	movf	DelayTimejudge@value,w
  7853  126F  390F               	andlw	15
  7854  1270  00A4               	movwf	??_DelayTimejudge
  7855  1271  0824               	movf	??_DelayTimejudge,w
  7856  1272  00A7               	movwf	DelayTimejudge@j
  7857                           
  7858                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7859  1273  0829               	movf	DelayTimejudge@value,w
  7860  1274  00A4               	movwf	??_DelayTimejudge
  7861  1275  3004               	movlw	4
  7862  1276                     u7355:	
  7863  1276  36A4               	lsrf	??_DelayTimejudge,f
  7864  1277  0B89               	decfsz	9,f
  7865  1278  2A76               	goto	u7355
  7866  1279  0824               	movf	??_DelayTimejudge,w
  7867  127A  390F               	andlw	15
  7868  127B  00A5               	movwf	??_DelayTimejudge+1
  7869  127C  0825               	movf	??_DelayTimejudge+1,w
  7870  127D  00A8               	movwf	DelayTimejudge@k
  7871                           
  7872                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7873  127E  300A               	movlw	10
  7874  127F  00A4               	movwf	??_DelayTimejudge
  7875  1280  0824               	movf	??_DelayTimejudge,w
  7876  1281  00A0               	movwf	___bmul@multiplicand
  7877  1282  0828               	movf	DelayTimejudge@k,w
  7878  1283  319F  275C         	fcall	___bmul
  7879  1285  0020               	movlb	0	; select bank0
  7880  1286  0727               	addwf	DelayTimejudge@j,w
  7881  1287  00A5               	movwf	??_DelayTimejudge+1
  7882  1288  0825               	movf	??_DelayTimejudge+1,w
  7883  1289  00A6               	movwf	DelayTimejudge@i
  7884  128A                     l7720:	
  7885                           
  7886                           ;DelayOff_B1.c: 112: }
  7887                           ;DelayOff_B1.c: 133: return i;
  7888  128A  0826               	movf	DelayTimejudge@i,w
  7889  128B  0008               	return
  7890  128C                     __end_of_DelayTimejudge:	
  7891                           
  7892                           	psect	text34
  7893  1F5C                     __ptext34:	
  7894 ;; *************** function ___bmul *****************
  7895 ;; Defined at:
  7896 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  multiplier      1    wreg     unsigned char 
  7899 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7902 ;;  product         1    2[BANK0 ] unsigned char 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  1    wreg      unsigned char 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7912 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;Total ram usage:        4 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    5
  7919 ;; This function calls:
  7920 ;;		Nothing
  7921 ;; This function is called by:
  7922 ;;		_DelayTimejudge
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function ___bmul
  7928  1F5C                     ___bmul:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7932                           ;___bmul@multiplier stored from wreg
  7933  1F5C  0020               	movlb	0	; select bank0
  7934  1F5D  00A3               	movwf	___bmul@multiplier
  7935  1F5E  01A2               	clrf	___bmul@product
  7936  1F5F                     l7690:	
  7937  1F5F  1C23               	btfss	___bmul@multiplier,0
  7938  1F60  2F65               	goto	l7694
  7939  1F61  0820               	movf	___bmul@multiplicand,w
  7940  1F62  00A1               	movwf	??___bmul
  7941  1F63  0821               	movf	??___bmul,w
  7942  1F64  07A2               	addwf	___bmul@product,f
  7943  1F65                     l7694:	
  7944  1F65  1003               	clrc
  7945  1F66  0DA0               	rlf	___bmul@multiplicand,f
  7946  1F67  1003               	clrc
  7947  1F68  0CA3               	rrf	___bmul@multiplier,f
  7948  1F69  08A3               	movf	___bmul@multiplier,f
  7949  1F6A  1D03               	skipz
  7950  1F6B  2F5F               	goto	l7690
  7951  1F6C  0822               	movf	___bmul@product,w
  7952  1F6D  0008               	return
  7953  1F6E                     __end_of___bmul:	
  7954                           
  7955                           	psect	text35
  7956  1449                     __ptext35:	
  7957 ;; *************** function _setRFSW_AdjControl *****************
  7958 ;; Defined at:
  7959 ;;		line 421 in file "../src/RF_Control_B1.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  sw              1    wreg     unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  sw              1   70[BANK0 ] unsigned char 
  7964 ;; Return value:  Size  Location     Type
  7965 ;;		None               void
  7966 ;; Registers used:
  7967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7968 ;; Tracked objects:
  7969 ;;		On entry : 0/0
  7970 ;;		On exit  : 0/0
  7971 ;;		Unchanged: 0/0
  7972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;Total ram usage:        3 bytes
  7978 ;; Hardware stack levels used:    1
  7979 ;; Hardware stack levels required when called:   10
  7980 ;; This function calls:
  7981 ;;		_RfSWPointSelect
  7982 ;;		_setRF_DimmerValue
  7983 ;;		_setTxData
  7984 ;; This function is called by:
  7985 ;;		_setControl_Lights_Table
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           
  7990                           ;psect for function _setRFSW_AdjControl
  7991  1449                     _setRFSW_AdjControl:	
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7995                           ;setRFSW_AdjControl@sw stored from wreg
  7996  1449  0020               	movlb	0	; select bank0
  7997  144A  00E6               	movwf	setRFSW_AdjControl@sw
  7998                           
  7999                           ;RF_Control_B1.c: 422: RfSWPointSelect(sw);
  8000  144B  0866               	movf	setRFSW_AdjControl@sw,w
  8001  144C  319D  25F6  3194   	fcall	_RfSWPointSelect
  8002                           
  8003                           ;RF_Control_B1.c: 423: if (RFSW->Status == 1) {
  8004  144F  0879               	movf	_RFSW,w
  8005  1450  0086               	movwf	6
  8006  1451  0187               	clrf	7
  8007  1452  1C01               	btfss	1,0
  8008  1453  2C5C               	goto	l8152
  8009                           
  8010                           ;RF_Control_B1.c: 424: Memory.Modify=1;
  8011  1454  0022               	movlb	2	; select bank2
  8012  1455  145B               	bsf	(_Memory^(0+256)+36),0
  8013                           
  8014                           ;RF_Control_B1.c: 425: setRF_DimmerValue(sw);
  8015  1456  0020               	movlb	0	; select bank0
  8016  1457  0866               	movf	setRFSW_AdjControl@sw,w
  8017  1458  3193  23A5  3194   	fcall	_setRF_DimmerValue
  8018                           
  8019                           ;RF_Control_B1.c: 426: } else {
  8020  145B  2C6E               	goto	l1995
  8021  145C                     l8152:	
  8022                           
  8023                           ;RF_Control_B1.c: 427: product->Data[9]=product->Data[20 + sw];
  8024  145C  0020               	movlb	0	; select bank0
  8025  145D  0866               	movf	setRFSW_AdjControl@sw,w
  8026  145E  3E14               	addlw	20
  8027  145F  076D               	addwf	_product,w
  8028  1460  00E4               	movwf	??_setRFSW_AdjControl
  8029  1461  0864               	movf	??_setRFSW_AdjControl,w
  8030  1462  0086               	movwf	6
  8031  1463  3001               	movlw	1	; select bank2/3
  8032  1464  0087               	movwf	7
  8033  1465  0801               	movf	1,w
  8034  1466  00E5               	movwf	??_setRFSW_AdjControl+1
  8035  1467  086D               	movf	_product,w
  8036  1468  3E09               	addlw	9
  8037  1469  0086               	movwf	6
  8038  146A  3001               	movlw	1	; select bank2/3
  8039  146B  0087               	movwf	7
  8040  146C  0865               	movf	??_setRFSW_AdjControl+1,w
  8041  146D  0081               	movwf	1
  8042  146E                     l1995:	
  8043                           
  8044                           ;RF_Control_B1.c: 428: }
  8045                           ;RF_Control_B1.c: 429: product->Data[17]=product->Data[26 + sw];
  8046  146E  0020               	movlb	0	; select bank0
  8047  146F  0866               	movf	setRFSW_AdjControl@sw,w
  8048  1470  3E1A               	addlw	26
  8049  1471  076D               	addwf	_product,w
  8050  1472  00E4               	movwf	??_setRFSW_AdjControl
  8051  1473  0864               	movf	??_setRFSW_AdjControl,w
  8052  1474  0086               	movwf	6
  8053  1475  3001               	movlw	1	; select bank2/3
  8054  1476  0087               	movwf	7
  8055  1477  0801               	movf	1,w
  8056  1478  00E5               	movwf	??_setRFSW_AdjControl+1
  8057  1479  086D               	movf	_product,w
  8058  147A  3E11               	addlw	17
  8059  147B  0086               	movwf	6
  8060  147C  3001               	movlw	1	; select bank2/3
  8061  147D  0087               	movwf	7
  8062  147E  0865               	movf	??_setRFSW_AdjControl+1,w
  8063  147F  0081               	movwf	1
  8064                           
  8065                           ;RF_Control_B1.c: 430: setTxData();
  8066  1480  3185  25C7         	fcall	_setTxData
  8067  1482  0008               	return
  8068  1483                     __end_of_setRFSW_AdjControl:	
  8069                           
  8070                           	psect	text36
  8071  13A5                     __ptext36:	
  8072 ;; *************** function _setRF_DimmerValue *****************
  8073 ;; Defined at:
  8074 ;;		line 441 in file "../src/RF_Control_B1.c"
  8075 ;; Parameters:    Size  Location     Type
  8076 ;;  lights          1    wreg     unsigned char 
  8077 ;; Auto vars:     Size  Location     Type
  8078 ;;  lights          1   67[BANK0 ] unsigned char 
  8079 ;; Return value:  Size  Location     Type
  8080 ;;		None               void
  8081 ;; Registers used:
  8082 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8083 ;; Tracked objects:
  8084 ;;		On entry : 0/0
  8085 ;;		On exit  : 0/0
  8086 ;;		Unchanged: 0/0
  8087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;Total ram usage:        3 bytes
  8093 ;; Hardware stack levels used:    1
  8094 ;; Hardware stack levels required when called:    9
  8095 ;; This function calls:
  8096 ;;		_setDimmerLights_AdjRF
  8097 ;; This function is called by:
  8098 ;;		_setRFSW_AdjControl
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           
  8103                           ;psect for function _setRF_DimmerValue
  8104  13A5                     _setRF_DimmerValue:	
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8108                           ;setRF_DimmerValue@lights stored from wreg
  8109  13A5  0020               	movlb	0	; select bank0
  8110  13A6  00E3               	movwf	setRF_DimmerValue@lights
  8111                           
  8112                           ;RF_Control_B1.c: 442: if (RF_Data[9] > 0x64) {
  8113  13A7  3065               	movlw	101
  8114  13A8  0022               	movlb	2	; select bank2
  8115  13A9  0229               	subwf	(_RF_Data^(0+256)+9),w
  8116  13AA  1C03               	skipc
  8117  13AB  2BB2               	goto	l7996
  8118                           
  8119                           ;RF_Control_B1.c: 443: RF_Data[9] = 0x64;
  8120  13AC  3064               	movlw	100
  8121  13AD  0020               	movlb	0	; select bank0
  8122  13AE  00E1               	movwf	??_setRF_DimmerValue
  8123  13AF  0861               	movf	??_setRF_DimmerValue,w
  8124  13B0  0022               	movlb	2	; select bank2
  8125  13B1  00A9               	movwf	(_RF_Data^(0+256)+9)
  8126  13B2                     l7996:	
  8127                           
  8128                           ;RF_Control_B1.c: 444: }
  8129                           ;RF_Control_B1.c: 445: product->Data[9]=RF_Data[9];
  8130  13B2  0829               	movf	(_RF_Data^(0+256)+9),w
  8131  13B3  0020               	movlb	0	; select bank0
  8132  13B4  00E1               	movwf	??_setRF_DimmerValue
  8133  13B5  086D               	movf	_product,w
  8134  13B6  3E09               	addlw	9
  8135  13B7  0086               	movwf	6
  8136  13B8  3001               	movlw	1	; select bank2/3
  8137  13B9  0087               	movwf	7
  8138  13BA  0861               	movf	??_setRF_DimmerValue,w
  8139  13BB  0081               	movwf	1
  8140                           
  8141                           ;RF_Control_B1.c: 446: product->Data[11]=lights;
  8142  13BC  0863               	movf	setRF_DimmerValue@lights,w
  8143  13BD  00E1               	movwf	??_setRF_DimmerValue
  8144  13BE  086D               	movf	_product,w
  8145  13BF  3E0B               	addlw	11
  8146  13C0  0086               	movwf	6
  8147  13C1  3001               	movlw	1	; select bank2/3
  8148  13C2  0087               	movwf	7
  8149  13C3  0861               	movf	??_setRF_DimmerValue,w
  8150  13C4  0081               	movwf	1
  8151                           
  8152                           ;RF_Control_B1.c: 447: product->Data[(20 + lights)]=product->Data[9];
  8153  13C5  086D               	movf	_product,w
  8154  13C6  3E09               	addlw	9
  8155  13C7  0086               	movwf	6
  8156  13C8  3001               	movlw	1	; select bank2/3
  8157  13C9  0087               	movwf	7
  8158  13CA  0801               	movf	1,w
  8159  13CB  00E1               	movwf	??_setRF_DimmerValue
  8160  13CC  0863               	movf	setRF_DimmerValue@lights,w
  8161  13CD  3E14               	addlw	20
  8162  13CE  076D               	addwf	_product,w
  8163  13CF  00E2               	movwf	??_setRF_DimmerValue+1
  8164  13D0  0862               	movf	??_setRF_DimmerValue+1,w
  8165  13D1  0086               	movwf	6
  8166  13D2  3001               	movlw	1	; select bank2/3
  8167  13D3  0087               	movwf	7
  8168  13D4  0861               	movf	??_setRF_DimmerValue,w
  8169  13D5  0081               	movwf	1
  8170                           
  8171                           ;RF_Control_B1.c: 448: setDimmerLights_AdjRF(lights);
  8172  13D6  0863               	movf	setRF_DimmerValue@lights,w
  8173  13D7  3191  21A4         	fcall	_setDimmerLights_AdjRF
  8174  13D9  0008               	return
  8175  13DA                     __end_of_setRF_DimmerValue:	
  8176                           
  8177                           	psect	text37
  8178  11A4                     __ptext37:	
  8179 ;; *************** function _setDimmerLights_AdjRF *****************
  8180 ;; Defined at:
  8181 ;;		line 688 in file "../src/Dimmer_B1.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;  lights          1    wreg     unsigned char 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  lights          1   64[BANK0 ] unsigned char 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;		None               void
  8188 ;; Registers used:
  8189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;Total ram usage:        2 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    8
  8202 ;; This function calls:
  8203 ;;		_DimmerLightsPointSelect
  8204 ;;		_getPercentValue
  8205 ;; This function is called by:
  8206 ;;		_setRF_DimmerValue
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           
  8211                           ;psect for function _setDimmerLights_AdjRF
  8212  11A4                     _setDimmerLights_AdjRF:	
  8213                           
  8214                           ;incstack = 0
  8215                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8216                           ;setDimmerLights_AdjRF@lights stored from wreg
  8217  11A4  0020               	movlb	0	; select bank0
  8218  11A5  00E0               	movwf	setDimmerLights_AdjRF@lights
  8219                           
  8220                           ;Dimmer_B1.c: 690: DimmerLightsPointSelect(lights);
  8221  11A6  0860               	movf	setDimmerLights_AdjRF@lights,w
  8222  11A7  319D  25EB  3191   	fcall	_DimmerLightsPointSelect
  8223                           
  8224                           ;Dimmer_B1.c: 691: DimmerLights->AdjRF = 1;
  8225  11AA  0020               	movlb	0	; select bank0
  8226  11AB  086A               	movf	_DimmerLights,w
  8227  11AC  0086               	movwf	6
  8228  11AD  3001               	movlw	1	; select bank2/3
  8229  11AE  0087               	movwf	7
  8230  11AF  1501               	bsf	1,2
  8231                           
  8232                           ;Dimmer_B1.c: 692: DimmerLights->Signal = 1;
  8233  11B0  086A               	movf	_DimmerLights,w
  8234  11B1  0086               	movwf	6
  8235  11B2  3001               	movlw	1	; select bank2/3
  8236  11B3  0087               	movwf	7
  8237  11B4  1481               	bsf	1,1
  8238                           
  8239                           ;Dimmer_B1.c: 693: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8240  11B5  086D               	movf	_product,w
  8241  11B6  3E09               	addlw	9
  8242  11B7  0086               	movwf	6
  8243  11B8  3001               	movlw	1	; select bank2/3
  8244  11B9  0087               	movwf	7
  8245  11BA  0801               	movf	1,w
  8246  11BB  3188  20FF         	fcall	_getPercentValue
  8247  11BD  0020               	movlb	0	; select bank0
  8248  11BE  00DF               	movwf	??_setDimmerLights_AdjRF
  8249  11BF  086A               	movf	_DimmerLights,w
  8250  11C0  3E05               	addlw	5
  8251  11C1  0086               	movwf	6
  8252  11C2  3001               	movlw	1	; select bank2/3
  8253  11C3  0087               	movwf	7
  8254  11C4  085F               	movf	??_setDimmerLights_AdjRF,w
  8255  11C5  0081               	movwf	1
  8256  11C6  0008               	return
  8257  11C7                     __end_of_setDimmerLights_AdjRF:	
  8258                           
  8259                           	psect	text38
  8260  08FF                     __ptext38:	
  8261 ;; *************** function _getPercentValue *****************
  8262 ;; Defined at:
  8263 ;;		line 761 in file "../src/Dimmer_B1.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;  value           1    wreg     unsigned char 
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  value           1   59[BANK0 ] unsigned char 
  8268 ;;  i               3   60[BANK0 ] float 
  8269 ;; Return value:  Size  Location     Type
  8270 ;;                  1    wreg      unsigned char 
  8271 ;; Registers used:
  8272 ;;		wreg, status,2, status,0, pclath, cstack
  8273 ;; Tracked objects:
  8274 ;;		On entry : 0/0
  8275 ;;		On exit  : 0/0
  8276 ;;		Unchanged: 0/0
  8277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;Total ram usage:        6 bytes
  8283 ;; Hardware stack levels used:    1
  8284 ;; Hardware stack levels required when called:    7
  8285 ;; This function calls:
  8286 ;;		___awtoft
  8287 ;;		___ftadd
  8288 ;;		___ftdiv
  8289 ;;		___ftmul
  8290 ;;		___fttol
  8291 ;; This function is called by:
  8292 ;;		_setDimmerLights_AdjRF
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _getPercentValue
  8298  08FF                     _getPercentValue:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8302                           ;getPercentValue@value stored from wreg
  8303  08FF  0020               	movlb	0	; select bank0
  8304  0900  00DB               	movwf	getPercentValue@value
  8305                           
  8306                           ;Dimmer_B1.c: 763: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  8307  0901  3000               	movlw	0
  8308  0902  00DC               	movwf	getPercentValue@i
  8309  0903  30E0               	movlw	224
  8310  0904  00DD               	movwf	getPercentValue@i+1
  8311  0905  3041               	movlw	65
  8312  0906  00DE               	movwf	getPercentValue@i+2
  8313                           
  8314                           ;Dimmer_B1.c: 764: i /= 100;
  8315  0907  3000               	movlw	0
  8316  0908  00AE               	movwf	___ftdiv@f2
  8317  0909  30C8               	movlw	200
  8318  090A  00AF               	movwf	___ftdiv@f2+1
  8319  090B  3042               	movlw	66
  8320  090C  00B0               	movwf	___ftdiv@f2+2
  8321  090D  085C               	movf	getPercentValue@i,w
  8322  090E  00B1               	movwf	___ftdiv@f1
  8323  090F  085D               	movf	getPercentValue@i+1,w
  8324  0910  00B2               	movwf	___ftdiv@f1+1
  8325  0911  085E               	movf	getPercentValue@i+2,w
  8326  0912  00B3               	movwf	___ftdiv@f1+2
  8327  0913  3187  2738  3188   	fcall	___ftdiv
  8328  0916  0020               	movlb	0	; select bank0
  8329  0917  082E               	movf	?___ftdiv,w
  8330  0918  00DC               	movwf	getPercentValue@i
  8331  0919  082F               	movf	?___ftdiv+1,w
  8332  091A  00DD               	movwf	getPercentValue@i+1
  8333  091B  0830               	movf	?___ftdiv+2,w
  8334  091C  00DE               	movwf	getPercentValue@i+2
  8335                           
  8336                           ;Dimmer_B1.c: 765: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  8337  091D  085B               	movf	getPercentValue@value,w
  8338  091E  00D9               	movwf	??_getPercentValue
  8339  091F  01DA               	clrf	??_getPercentValue+1
  8340  0920  09D9               	comf	??_getPercentValue,f
  8341  0921  09DA               	comf	??_getPercentValue+1,f
  8342  0922  0AD9               	incf	??_getPercentValue,f
  8343  0923  1903               	skipnz
  8344  0924  0ADA               	incf	??_getPercentValue+1,f
  8345  0925  0859               	movf	??_getPercentValue,w
  8346  0926  3E64               	addlw	100
  8347  0927  00A8               	movwf	___awtoft@c
  8348  0928  3000               	movlw	0
  8349  0929  3D5A               	addwfc	??_getPercentValue+1,w
  8350  092A  00A9               	movwf	___awtoft@c+1
  8351  092B  3191  2160  3188   	fcall	___awtoft
  8352  092E  0020               	movlb	0	; select bank0
  8353  092F  0828               	movf	?___awtoft,w
  8354  0930  00B1               	movwf	___ftmul@f2
  8355  0931  0829               	movf	?___awtoft+1,w
  8356  0932  00B2               	movwf	___ftmul@f2+1
  8357  0933  082A               	movf	?___awtoft+2,w
  8358  0934  00B3               	movwf	___ftmul@f2+2
  8359  0935  085C               	movf	getPercentValue@i,w
  8360  0936  00AE               	movwf	___ftmul@f1
  8361  0937  085D               	movf	getPercentValue@i+1,w
  8362  0938  00AF               	movwf	___ftmul@f1+1
  8363  0939  085E               	movf	getPercentValue@i+2,w
  8364  093A  00B0               	movwf	___ftmul@f1+2
  8365  093B  3186  2684  3188   	fcall	___ftmul
  8366  093E  0020               	movlb	0	; select bank0
  8367  093F  082E               	movf	?___ftmul,w
  8368  0940  00C1               	movwf	___ftadd@f2
  8369  0941  082F               	movf	?___ftmul+1,w
  8370  0942  00C2               	movwf	___ftadd@f2+1
  8371  0943  0830               	movf	?___ftmul+2,w
  8372  0944  00C3               	movwf	___ftadd@f2+2
  8373  0945  3000               	movlw	0
  8374  0946  00BE               	movwf	___ftadd@f1
  8375  0947  3000               	movlw	0
  8376  0948  00BF               	movwf	___ftadd@f1+1
  8377  0949  3042               	movlw	66
  8378  094A  00C0               	movwf	___ftadd@f1+2
  8379  094B  3183  232D  3188   	fcall	___ftadd
  8380  094E  0020               	movlb	0	; select bank0
  8381  094F  083E               	movf	?___ftadd,w
  8382  0950  00CB               	movwf	___fttol@f1
  8383  0951  083F               	movf	?___ftadd+1,w
  8384  0952  00CC               	movwf	___fttol@f1+1
  8385  0953  0840               	movf	?___ftadd+2,w
  8386  0954  00CD               	movwf	___fttol@f1+2
  8387  0955  318E  26EE         	fcall	___fttol
  8388  0957  0020               	movlb	0	; select bank0
  8389  0958  084B               	movf	?___fttol,w
  8390  0959  0008               	return
  8391  095A                     __end_of_getPercentValue:	
  8392                           
  8393                           	psect	text39
  8394  0684                     __ptext39:	
  8395 ;; *************** function ___ftmul *****************
  8396 ;; Defined at:
  8397 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  f1              3   14[BANK0 ] float 
  8400 ;;  f2              3   17[BANK0 ] float 
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8403 ;;  sign            1   29[BANK0 ] unsigned char 
  8404 ;;  cntr            1   28[BANK0 ] unsigned char 
  8405 ;;  exp             1   24[BANK0 ] unsigned char 
  8406 ;; Return value:  Size  Location     Type
  8407 ;;                  3   14[BANK0 ] float 
  8408 ;; Registers used:
  8409 ;;		wreg, status,2, status,0, pclath, cstack
  8410 ;; Tracked objects:
  8411 ;;		On entry : 0/0
  8412 ;;		On exit  : 0/0
  8413 ;;		Unchanged: 0/0
  8414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8415 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;Total ram usage:       16 bytes
  8420 ;; Hardware stack levels used:    1
  8421 ;; Hardware stack levels required when called:    6
  8422 ;; This function calls:
  8423 ;;		___ftpack
  8424 ;; This function is called by:
  8425 ;;		_getPercentValue
  8426 ;; This function uses a non-reentrant model
  8427 ;;
  8428                           
  8429                           
  8430                           ;psect for function ___ftmul
  8431  0684                     ___ftmul:	
  8432                           
  8433                           ;incstack = 0
  8434                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8435  0684  0020               	movlb	0	; select bank0
  8436  0685  082E               	movf	___ftmul@f1,w
  8437  0686  00B4               	movwf	??___ftmul
  8438  0687  082F               	movf	___ftmul@f1+1,w
  8439  0688  00B5               	movwf	??___ftmul+1
  8440  0689  0830               	movf	___ftmul@f1+2,w
  8441  068A  00B6               	movwf	??___ftmul+2
  8442  068B  1003               	clrc
  8443  068C  0D35               	rlf	??___ftmul+1,w
  8444  068D  0D36               	rlf	??___ftmul+2,w
  8445  068E  00B7               	movwf	??___ftmul+3
  8446  068F  0837               	movf	??___ftmul+3,w
  8447  0690  00B8               	movwf	___ftmul@exp
  8448  0691  08B8               	movf	___ftmul@exp,f
  8449  0692  1D03               	skipz
  8450  0693  2E9B               	goto	l5498
  8451  0694  3000               	movlw	0
  8452  0695  00AE               	movwf	?___ftmul
  8453  0696  3000               	movlw	0
  8454  0697  00AF               	movwf	?___ftmul+1
  8455  0698  3000               	movlw	0
  8456  0699  00B0               	movwf	?___ftmul+2
  8457  069A  0008               	return
  8458  069B                     l5498:	
  8459  069B  0831               	movf	___ftmul@f2,w
  8460  069C  00B4               	movwf	??___ftmul
  8461  069D  0832               	movf	___ftmul@f2+1,w
  8462  069E  00B5               	movwf	??___ftmul+1
  8463  069F  0833               	movf	___ftmul@f2+2,w
  8464  06A0  00B6               	movwf	??___ftmul+2
  8465  06A1  1003               	clrc
  8466  06A2  0D35               	rlf	??___ftmul+1,w
  8467  06A3  0D36               	rlf	??___ftmul+2,w
  8468  06A4  00B7               	movwf	??___ftmul+3
  8469  06A5  0837               	movf	??___ftmul+3,w
  8470  06A6  00BD               	movwf	___ftmul@sign
  8471  06A7  08BD               	movf	___ftmul@sign,f
  8472  06A8  1D03               	skipz
  8473  06A9  2EB1               	goto	l5504
  8474  06AA  3000               	movlw	0
  8475  06AB  00AE               	movwf	?___ftmul
  8476  06AC  3000               	movlw	0
  8477  06AD  00AF               	movwf	?___ftmul+1
  8478  06AE  3000               	movlw	0
  8479  06AF  00B0               	movwf	?___ftmul+2
  8480  06B0  0008               	return
  8481  06B1                     l5504:	
  8482  06B1  083D               	movf	___ftmul@sign,w
  8483  06B2  3E7B               	addlw	123
  8484  06B3  00B4               	movwf	??___ftmul
  8485  06B4  0834               	movf	??___ftmul,w
  8486  06B5  07B8               	addwf	___ftmul@exp,f
  8487  06B6  082E               	movf	___ftmul@f1,w
  8488  06B7  00B4               	movwf	??___ftmul
  8489  06B8  082F               	movf	___ftmul@f1+1,w
  8490  06B9  00B5               	movwf	??___ftmul+1
  8491  06BA  0830               	movf	___ftmul@f1+2,w
  8492  06BB  00B6               	movwf	??___ftmul+2
  8493  06BC  3010               	movlw	16
  8494  06BD                     u4105:	
  8495  06BD  36B6               	lsrf	??___ftmul+2,f
  8496  06BE  0CB5               	rrf	??___ftmul+1,f
  8497  06BF  0CB4               	rrf	??___ftmul,f
  8498  06C0  0B89               	decfsz	9,f
  8499  06C1  2EBD               	goto	u4105
  8500  06C2  0834               	movf	??___ftmul,w
  8501  06C3  00B7               	movwf	??___ftmul+3
  8502  06C4  0837               	movf	??___ftmul+3,w
  8503  06C5  00BD               	movwf	___ftmul@sign
  8504  06C6  0831               	movf	___ftmul@f2,w
  8505  06C7  00B4               	movwf	??___ftmul
  8506  06C8  0832               	movf	___ftmul@f2+1,w
  8507  06C9  00B5               	movwf	??___ftmul+1
  8508  06CA  0833               	movf	___ftmul@f2+2,w
  8509  06CB  00B6               	movwf	??___ftmul+2
  8510  06CC  3010               	movlw	16
  8511  06CD                     u4115:	
  8512  06CD  36B6               	lsrf	??___ftmul+2,f
  8513  06CE  0CB5               	rrf	??___ftmul+1,f
  8514  06CF  0CB4               	rrf	??___ftmul,f
  8515  06D0  0B89               	decfsz	9,f
  8516  06D1  2ECD               	goto	u4115
  8517  06D2  0834               	movf	??___ftmul,w
  8518  06D3  00B7               	movwf	??___ftmul+3
  8519  06D4  0837               	movf	??___ftmul+3,w
  8520  06D5  06BD               	xorwf	___ftmul@sign,f
  8521  06D6  3080               	movlw	128
  8522  06D7  00B4               	movwf	??___ftmul
  8523  06D8  0834               	movf	??___ftmul,w
  8524  06D9  05BD               	andwf	___ftmul@sign,f
  8525  06DA  17AF               	bsf	___ftmul@f1+1,7
  8526  06DB  17B2               	bsf	___ftmul@f2+1,7
  8527  06DC  30FF               	movlw	255
  8528  06DD  05B1               	andwf	___ftmul@f2,f
  8529  06DE  30FF               	movlw	255
  8530  06DF  05B2               	andwf	___ftmul@f2+1,f
  8531  06E0  3000               	movlw	0
  8532  06E1  05B3               	andwf	___ftmul@f2+2,f
  8533  06E2  3000               	movlw	0
  8534  06E3  00B9               	movwf	___ftmul@f3_as_product
  8535  06E4  3000               	movlw	0
  8536  06E5  00BA               	movwf	___ftmul@f3_as_product+1
  8537  06E6  3000               	movlw	0
  8538  06E7  00BB               	movwf	___ftmul@f3_as_product+2
  8539  06E8  3007               	movlw	7
  8540  06E9  00B4               	movwf	??___ftmul
  8541  06EA  0834               	movf	??___ftmul,w
  8542  06EB  00BC               	movwf	___ftmul@cntr
  8543  06EC                     l5516:	
  8544  06EC  1C2E               	btfss	___ftmul@f1,0
  8545  06ED  2EF4               	goto	l5520
  8546  06EE  0831               	movf	___ftmul@f2,w
  8547  06EF  07B9               	addwf	___ftmul@f3_as_product,f
  8548  06F0  0832               	movf	___ftmul@f2+1,w
  8549  06F1  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8550  06F2  0833               	movf	___ftmul@f2+2,w
  8551  06F3  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8552  06F4                     l5520:	
  8553  06F4  3001               	movlw	1
  8554  06F5                     u4135:	
  8555  06F5  36B0               	lsrf	___ftmul@f1+2,f
  8556  06F6  0CAF               	rrf	___ftmul@f1+1,f
  8557  06F7  0CAE               	rrf	___ftmul@f1,f
  8558  06F8  0B89               	decfsz	9,f
  8559  06F9  2EF5               	goto	u4135
  8560  06FA  3001               	movlw	1
  8561  06FB                     u4145:	
  8562  06FB  35B1               	lslf	___ftmul@f2,f
  8563  06FC  0DB2               	rlf	___ftmul@f2+1,f
  8564  06FD  0DB3               	rlf	___ftmul@f2+2,f
  8565  06FE  0B89               	decfsz	9,f
  8566  06FF  2EFB               	goto	u4145
  8567  0700  3001               	movlw	1
  8568  0701  02BC               	subwf	___ftmul@cntr,f
  8569  0702  1D03               	btfss	3,2
  8570  0703  2EEC               	goto	l5516
  8571  0704  3009               	movlw	9
  8572  0705  00B4               	movwf	??___ftmul
  8573  0706  0834               	movf	??___ftmul,w
  8574  0707  00BC               	movwf	___ftmul@cntr
  8575  0708                     l5528:	
  8576  0708  1C2E               	btfss	___ftmul@f1,0
  8577  0709  2F10               	goto	l5532
  8578  070A  0831               	movf	___ftmul@f2,w
  8579  070B  07B9               	addwf	___ftmul@f3_as_product,f
  8580  070C  0832               	movf	___ftmul@f2+1,w
  8581  070D  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8582  070E  0833               	movf	___ftmul@f2+2,w
  8583  070F  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8584  0710                     l5532:	
  8585  0710  3001               	movlw	1
  8586  0711                     u4175:	
  8587  0711  36B0               	lsrf	___ftmul@f1+2,f
  8588  0712  0CAF               	rrf	___ftmul@f1+1,f
  8589  0713  0CAE               	rrf	___ftmul@f1,f
  8590  0714  0B89               	decfsz	9,f
  8591  0715  2F11               	goto	u4175
  8592  0716  3001               	movlw	1
  8593  0717                     u4185:	
  8594  0717  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8595  0718  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8596  0719  0CB9               	rrf	___ftmul@f3_as_product,f
  8597  071A  0B89               	decfsz	9,f
  8598  071B  2F17               	goto	u4185
  8599  071C  3001               	movlw	1
  8600  071D  02BC               	subwf	___ftmul@cntr,f
  8601  071E  1D03               	btfss	3,2
  8602  071F  2F08               	goto	l5528
  8603  0720  0839               	movf	___ftmul@f3_as_product,w
  8604  0721  00A0               	movwf	___ftpack@arg
  8605  0722  083A               	movf	___ftmul@f3_as_product+1,w
  8606  0723  00A1               	movwf	___ftpack@arg+1
  8607  0724  083B               	movf	___ftmul@f3_as_product+2,w
  8608  0725  00A2               	movwf	___ftpack@arg+2
  8609  0726  0838               	movf	___ftmul@exp,w
  8610  0727  00B4               	movwf	??___ftmul
  8611  0728  0834               	movf	??___ftmul,w
  8612  0729  00A3               	movwf	___ftpack@exp
  8613  072A  083D               	movf	___ftmul@sign,w
  8614  072B  00B5               	movwf	??___ftmul+1
  8615  072C  0835               	movf	??___ftmul+1,w
  8616  072D  00A4               	movwf	___ftpack@sign
  8617  072E  3189  21B8         	fcall	___ftpack
  8618  0730  0020               	movlb	0	; select bank0
  8619  0731  0820               	movf	?___ftpack,w
  8620  0732  00AE               	movwf	?___ftmul
  8621  0733  0821               	movf	?___ftpack+1,w
  8622  0734  00AF               	movwf	?___ftmul+1
  8623  0735  0822               	movf	?___ftpack+2,w
  8624  0736  00B0               	movwf	?___ftmul+2
  8625  0737  0008               	return
  8626  0738                     __end_of___ftmul:	
  8627                           
  8628                           	psect	text40
  8629  032D                     __ptext40:	
  8630 ;; *************** function ___ftadd *****************
  8631 ;; Defined at:
  8632 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;  f1              3   30[BANK0 ] float 
  8635 ;;  f2              3   33[BANK0 ] float 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  exp1            1   42[BANK0 ] unsigned char 
  8638 ;;  exp2            1   41[BANK0 ] unsigned char 
  8639 ;;  sign            1   40[BANK0 ] unsigned char 
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  3   30[BANK0 ] float 
  8642 ;; Registers used:
  8643 ;;		wreg, status,2, status,0, pclath, cstack
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8649 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8652 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;Total ram usage:       13 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    6
  8656 ;; This function calls:
  8657 ;;		___ftpack
  8658 ;; This function is called by:
  8659 ;;		_getPercentValue
  8660 ;; This function uses a non-reentrant model
  8661 ;;
  8662                           
  8663                           
  8664                           ;psect for function ___ftadd
  8665  032D                     ___ftadd:	
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8669  032D  0020               	movlb	0	; select bank0
  8670  032E  083E               	movf	___ftadd@f1,w
  8671  032F  00C4               	movwf	??___ftadd
  8672  0330  083F               	movf	___ftadd@f1+1,w
  8673  0331  00C5               	movwf	??___ftadd+1
  8674  0332  0840               	movf	___ftadd@f1+2,w
  8675  0333  00C6               	movwf	??___ftadd+2
  8676  0334  1003               	clrc
  8677  0335  0D45               	rlf	??___ftadd+1,w
  8678  0336  0D46               	rlf	??___ftadd+2,w
  8679  0337  00C7               	movwf	??___ftadd+3
  8680  0338  0847               	movf	??___ftadd+3,w
  8681  0339  00CA               	movwf	___ftadd@exp1
  8682  033A  0841               	movf	___ftadd@f2,w
  8683  033B  00C4               	movwf	??___ftadd
  8684  033C  0842               	movf	___ftadd@f2+1,w
  8685  033D  00C5               	movwf	??___ftadd+1
  8686  033E  0843               	movf	___ftadd@f2+2,w
  8687  033F  00C6               	movwf	??___ftadd+2
  8688  0340  1003               	clrc
  8689  0341  0D45               	rlf	??___ftadd+1,w
  8690  0342  0D46               	rlf	??___ftadd+2,w
  8691  0343  00C7               	movwf	??___ftadd+3
  8692  0344  0847               	movf	??___ftadd+3,w
  8693  0345  00C9               	movwf	___ftadd@exp2
  8694  0346  084A               	movf	___ftadd@exp1,w
  8695  0347  1903               	btfsc	3,2
  8696  0348  2B55               	goto	l5386
  8697  0349  0849               	movf	___ftadd@exp2,w
  8698  034A  024A               	subwf	___ftadd@exp1,w
  8699  034B  1803               	skipnc
  8700  034C  2B5C               	goto	l5390
  8701  034D  034A               	decf	___ftadd@exp1,w
  8702  034E  3AFF               	xorlw	255
  8703  034F  0749               	addwf	___ftadd@exp2,w
  8704  0350  00C4               	movwf	??___ftadd
  8705  0351  3019               	movlw	25
  8706  0352  0244               	subwf	??___ftadd,w
  8707  0353  1C03               	skipc
  8708  0354  2B5C               	goto	l5390
  8709  0355                     l5386:	
  8710  0355  0841               	movf	___ftadd@f2,w
  8711  0356  00BE               	movwf	?___ftadd
  8712  0357  0842               	movf	___ftadd@f2+1,w
  8713  0358  00BF               	movwf	?___ftadd+1
  8714  0359  0843               	movf	___ftadd@f2+2,w
  8715  035A  00C0               	movwf	?___ftadd+2
  8716  035B  0008               	return
  8717  035C                     l5390:	
  8718  035C  0849               	movf	___ftadd@exp2,w
  8719  035D  1903               	btfsc	3,2
  8720  035E  0008               	return
  8721  035F  084A               	movf	___ftadd@exp1,w
  8722  0360  0249               	subwf	___ftadd@exp2,w
  8723  0361  1803               	skipnc
  8724  0362  2B6B               	goto	l5396
  8725  0363  0349               	decf	___ftadd@exp2,w
  8726  0364  3AFF               	xorlw	255
  8727  0365  074A               	addwf	___ftadd@exp1,w
  8728  0366  00C4               	movwf	??___ftadd
  8729  0367  3019               	movlw	25
  8730  0368  0244               	subwf	??___ftadd,w
  8731  0369  1803               	btfsc	3,0
  8732  036A  0008               	return
  8733  036B                     l5396:	
  8734  036B  3006               	movlw	6
  8735  036C  00C4               	movwf	??___ftadd
  8736  036D  0844               	movf	??___ftadd,w
  8737  036E  00C8               	movwf	___ftadd@sign
  8738  036F  1BC0               	btfsc	___ftadd@f1+2,7
  8739  0370  17C8               	bsf	___ftadd@sign,7
  8740  0371  1BC3               	btfsc	___ftadd@f2+2,7
  8741  0372  1748               	bsf	___ftadd@sign,6
  8742  0373  17BF               	bsf	___ftadd@f1+1,7
  8743  0374  30FF               	movlw	255
  8744  0375  05BE               	andwf	___ftadd@f1,f
  8745  0376  30FF               	movlw	255
  8746  0377  05BF               	andwf	___ftadd@f1+1,f
  8747  0378  3000               	movlw	0
  8748  0379  05C0               	andwf	___ftadd@f1+2,f
  8749  037A  17C2               	bsf	___ftadd@f2+1,7
  8750  037B  30FF               	movlw	255
  8751  037C  05C1               	andwf	___ftadd@f2,f
  8752  037D  30FF               	movlw	255
  8753  037E  05C2               	andwf	___ftadd@f2+1,f
  8754  037F  3000               	movlw	0
  8755  0380  05C3               	andwf	___ftadd@f2+2,f
  8756  0381  0849               	movf	___ftadd@exp2,w
  8757  0382  024A               	subwf	___ftadd@exp1,w
  8758  0383  1803               	skipnc
  8759  0384  2BA7               	goto	l5418
  8760  0385                     l5408:	
  8761  0385  3001               	movlw	1
  8762  0386                     u3865:	
  8763  0386  35C1               	lslf	___ftadd@f2,f
  8764  0387  0DC2               	rlf	___ftadd@f2+1,f
  8765  0388  0DC3               	rlf	___ftadd@f2+2,f
  8766  0389  0B89               	decfsz	9,f
  8767  038A  2B86               	goto	u3865
  8768  038B  3001               	movlw	1
  8769  038C  02C9               	subwf	___ftadd@exp2,f
  8770  038D  0849               	movf	___ftadd@exp2,w
  8771  038E  064A               	xorwf	___ftadd@exp1,w
  8772  038F  1903               	skipnz
  8773  0390  2BA2               	goto	l5416
  8774  0391  3001               	movlw	1
  8775  0392  02C8               	subwf	___ftadd@sign,f
  8776  0393  0848               	movf	___ftadd@sign,w
  8777  0394  3907               	andlw	7
  8778  0395  1903               	btfsc	3,2
  8779  0396  2BA2               	goto	l5416
  8780  0397  2B85               	goto	l5408
  8781  0398                     l5414:	
  8782  0398  3001               	movlw	1
  8783  0399                     u3895:	
  8784  0399  36C0               	lsrf	___ftadd@f1+2,f
  8785  039A  0CBF               	rrf	___ftadd@f1+1,f
  8786  039B  0CBE               	rrf	___ftadd@f1,f
  8787  039C  0B89               	decfsz	9,f
  8788  039D  2B99               	goto	u3895
  8789  039E  3001               	movlw	1
  8790  039F  00C4               	movwf	??___ftadd
  8791  03A0  0844               	movf	??___ftadd,w
  8792  03A1  07CA               	addwf	___ftadd@exp1,f
  8793  03A2                     l5416:	
  8794  03A2  084A               	movf	___ftadd@exp1,w
  8795  03A3  0649               	xorwf	___ftadd@exp2,w
  8796  03A4  1903               	btfsc	3,2
  8797  03A5  2BCC               	goto	l2813
  8798  03A6  2B98               	goto	l5414
  8799  03A7                     l5418:	
  8800  03A7  084A               	movf	___ftadd@exp1,w
  8801  03A8  0249               	subwf	___ftadd@exp2,w
  8802  03A9  1803               	skipnc
  8803  03AA  2BCC               	goto	l2813
  8804  03AB                     l5420:	
  8805  03AB  3001               	movlw	1
  8806  03AC                     u3925:	
  8807  03AC  35BE               	lslf	___ftadd@f1,f
  8808  03AD  0DBF               	rlf	___ftadd@f1+1,f
  8809  03AE  0DC0               	rlf	___ftadd@f1+2,f
  8810  03AF  0B89               	decfsz	9,f
  8811  03B0  2BAC               	goto	u3925
  8812  03B1  3001               	movlw	1
  8813  03B2  02CA               	subwf	___ftadd@exp1,f
  8814  03B3  0849               	movf	___ftadd@exp2,w
  8815  03B4  064A               	xorwf	___ftadd@exp1,w
  8816  03B5  1903               	skipnz
  8817  03B6  2BC8               	goto	l5428
  8818  03B7  3001               	movlw	1
  8819  03B8  02C8               	subwf	___ftadd@sign,f
  8820  03B9  0848               	movf	___ftadd@sign,w
  8821  03BA  3907               	andlw	7
  8822  03BB  1903               	btfsc	3,2
  8823  03BC  2BC8               	goto	l5428
  8824  03BD  2BAB               	goto	l5420
  8825  03BE                     l5426:	
  8826  03BE  3001               	movlw	1
  8827  03BF                     u3955:	
  8828  03BF  36C3               	lsrf	___ftadd@f2+2,f
  8829  03C0  0CC2               	rrf	___ftadd@f2+1,f
  8830  03C1  0CC1               	rrf	___ftadd@f2,f
  8831  03C2  0B89               	decfsz	9,f
  8832  03C3  2BBF               	goto	u3955
  8833  03C4  3001               	movlw	1
  8834  03C5  00C4               	movwf	??___ftadd
  8835  03C6  0844               	movf	??___ftadd,w
  8836  03C7  07C9               	addwf	___ftadd@exp2,f
  8837  03C8                     l5428:	
  8838  03C8  084A               	movf	___ftadd@exp1,w
  8839  03C9  0649               	xorwf	___ftadd@exp2,w
  8840  03CA  1D03               	skipz
  8841  03CB  2BBE               	goto	l5426
  8842  03CC                     l2813:	
  8843  03CC  1FC8               	btfss	___ftadd@sign,7
  8844  03CD  2BDE               	goto	l5432
  8845  03CE  30FF               	movlw	255
  8846  03CF  06BE               	xorwf	___ftadd@f1,f
  8847  03D0  30FF               	movlw	255
  8848  03D1  06BF               	xorwf	___ftadd@f1+1,f
  8849  03D2  30FF               	movlw	255
  8850  03D3  06C0               	xorwf	___ftadd@f1+2,f
  8851  03D4  3001               	movlw	1
  8852  03D5  07BE               	addwf	___ftadd@f1,f
  8853  03D6  3000               	movlw	0
  8854  03D7  1803               	skipnc
  8855  03D8  3001               	movlw	1
  8856  03D9  07BF               	addwf	___ftadd@f1+1,f
  8857  03DA  3000               	movlw	0
  8858  03DB  1803               	skipnc
  8859  03DC  3001               	movlw	1
  8860  03DD  07C0               	addwf	___ftadd@f1+2,f
  8861  03DE                     l5432:	
  8862  03DE  1F48               	btfss	___ftadd@sign,6
  8863  03DF  2BF0               	goto	l5436
  8864  03E0  30FF               	movlw	255
  8865  03E1  06C1               	xorwf	___ftadd@f2,f
  8866  03E2  30FF               	movlw	255
  8867  03E3  06C2               	xorwf	___ftadd@f2+1,f
  8868  03E4  30FF               	movlw	255
  8869  03E5  06C3               	xorwf	___ftadd@f2+2,f
  8870  03E6  3001               	movlw	1
  8871  03E7  07C1               	addwf	___ftadd@f2,f
  8872  03E8  3000               	movlw	0
  8873  03E9  1803               	skipnc
  8874  03EA  3001               	movlw	1
  8875  03EB  07C2               	addwf	___ftadd@f2+1,f
  8876  03EC  3000               	movlw	0
  8877  03ED  1803               	skipnc
  8878  03EE  3001               	movlw	1
  8879  03EF  07C3               	addwf	___ftadd@f2+2,f
  8880  03F0                     l5436:	
  8881  03F0  01C8               	clrf	___ftadd@sign
  8882  03F1  083E               	movf	___ftadd@f1,w
  8883  03F2  07C1               	addwf	___ftadd@f2,f
  8884  03F3  083F               	movf	___ftadd@f1+1,w
  8885  03F4  3DC2               	addwfc	___ftadd@f2+1,f
  8886  03F5  0840               	movf	___ftadd@f1+2,w
  8887  03F6  3DC3               	addwfc	___ftadd@f2+2,f
  8888  03F7  1FC3               	btfss	___ftadd@f2+2,7
  8889  03F8  2C0B               	goto	l5446
  8890  03F9  30FF               	movlw	255
  8891  03FA  06C1               	xorwf	___ftadd@f2,f
  8892  03FB  30FF               	movlw	255
  8893  03FC  06C2               	xorwf	___ftadd@f2+1,f
  8894  03FD  30FF               	movlw	255
  8895  03FE  06C3               	xorwf	___ftadd@f2+2,f
  8896  03FF  3001               	movlw	1
  8897  0400  07C1               	addwf	___ftadd@f2,f
  8898  0401  3000               	movlw	0
  8899  0402  1803               	skipnc
  8900  0403  3001               	movlw	1
  8901  0404  07C2               	addwf	___ftadd@f2+1,f
  8902  0405  3000               	movlw	0
  8903  0406  1803               	skipnc
  8904  0407  3001               	movlw	1
  8905  0408  07C3               	addwf	___ftadd@f2+2,f
  8906  0409  01C8               	clrf	___ftadd@sign
  8907  040A  0AC8               	incf	___ftadd@sign,f
  8908  040B                     l5446:	
  8909  040B  0841               	movf	___ftadd@f2,w
  8910  040C  00A0               	movwf	___ftpack@arg
  8911  040D  0842               	movf	___ftadd@f2+1,w
  8912  040E  00A1               	movwf	___ftpack@arg+1
  8913  040F  0843               	movf	___ftadd@f2+2,w
  8914  0410  00A2               	movwf	___ftpack@arg+2
  8915  0411  084A               	movf	___ftadd@exp1,w
  8916  0412  00C4               	movwf	??___ftadd
  8917  0413  0844               	movf	??___ftadd,w
  8918  0414  00A3               	movwf	___ftpack@exp
  8919  0415  0848               	movf	___ftadd@sign,w
  8920  0416  00C5               	movwf	??___ftadd+1
  8921  0417  0845               	movf	??___ftadd+1,w
  8922  0418  00A4               	movwf	___ftpack@sign
  8923  0419  3189  21B8         	fcall	___ftpack
  8924  041B  0020               	movlb	0	; select bank0
  8925  041C  0820               	movf	?___ftpack,w
  8926  041D  00BE               	movwf	?___ftadd
  8927  041E  0821               	movf	?___ftpack+1,w
  8928  041F  00BF               	movwf	?___ftadd+1
  8929  0420  0822               	movf	?___ftpack+2,w
  8930  0421  00C0               	movwf	?___ftadd+2
  8931  0422  0008               	return
  8932  0423                     __end_of___ftadd:	
  8933                           
  8934                           	psect	text41
  8935  1066                     __ptext41:	
  8936 ;; *************** function _getBuz_GO *****************
  8937 ;; Defined at:
  8938 ;;		line 82 in file "../src/Buzzer_B1.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;		None
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;  i               2    4[BANK0 ] int 
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  2    0[BANK0 ] int 
  8945 ;; Registers used:
  8946 ;;		wreg, status,2, status,0
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8952 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;Total ram usage:        6 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    5
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_setRF_Main
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function _getBuz_GO
  8968  1066                     _getBuz_GO:	
  8969                           
  8970                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8974  1066  0021               	movlb	1	; select bank1
  8975  1067  0C33               	rrf	_Buz1^(0+128),w
  8976  1068  3901               	andlw	1
  8977  1069  0020               	movlb	0	; select bank0
  8978  106A  00A2               	movwf	??_getBuz_GO
  8979  106B  01A3               	clrf	??_getBuz_GO+1
  8980  106C  0822               	movf	??_getBuz_GO,w
  8981  106D  00A4               	movwf	getBuz_GO@i
  8982  106E  0823               	movf	??_getBuz_GO+1,w
  8983  106F  00A5               	movwf	getBuz_GO@i+1
  8984                           
  8985                           ;Buzzer_B1.c: 84: return i;
  8986  1070  0825               	movf	getBuz_GO@i+1,w
  8987  1071  01A1               	clrf	?_getBuz_GO+1
  8988  1072  07A1               	addwf	?_getBuz_GO+1,f
  8989  1073  0824               	movf	getBuz_GO@i,w
  8990  1074  01A0               	clrf	?_getBuz_GO
  8991  1075  07A0               	addwf	?_getBuz_GO,f
  8992  1076  0008               	return
  8993  1077                     __end_of_getBuz_GO:	
  8994                           
  8995                           	psect	text42
  8996  0A7D                     __ptext42:	
  8997 ;; *************** function _CC2500_TxData *****************
  8998 ;; Defined at:
  8999 ;;		line 32 in file "../src/CC2500_B1.c"
  9000 ;; Parameters:    Size  Location     Type
  9001 ;;		None
  9002 ;; Auto vars:     Size  Location     Type
  9003 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9004 ;; Return value:  Size  Location     Type
  9005 ;;		None               void
  9006 ;; Registers used:
  9007 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9014 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;Total ram usage:        2 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    7
  9020 ;; This function calls:
  9021 ;;		_CC2500_WriteByte
  9022 ;;		_CC2500_WriteCommand
  9023 ;;		_Timeout_Counter
  9024 ;;		_set_TimeoutCleared
  9025 ;; This function is called by:
  9026 ;;		_setRF_Main
  9027 ;; This function uses a non-reentrant model
  9028 ;;
  9029                           
  9030                           
  9031                           ;psect for function _CC2500_TxData
  9032  0A7D                     _CC2500_TxData:	
  9033                           
  9034                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9035                           ;CC2500_B1.c: 35: RC4 = 0;
  9036                           
  9037                           ;incstack = 0
  9038                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9039  0A7D  0020               	movlb	0	; select bank0
  9040  0A7E  120E               	bcf	14,4	;volatile
  9041                           
  9042                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9043  0A7F  307F               	movlw	127
  9044  0A80  00A4               	movwf	??_CC2500_TxData
  9045  0A81  0824               	movf	??_CC2500_TxData,w
  9046  0A82  00FA               	movwf	_SPI0Buffer
  9047                           
  9048                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9049  0A83  2A87               	goto	l8300
  9050  0A84                     l8298:	
  9051                           
  9052                           ;CC2500_B1.c: 38: Timeout_Counter();
  9053  0A84  319F  2794  318A   	fcall	_Timeout_Counter
  9054  0A87                     l8300:	
  9055  0A87  0020               	movlb	0	; select bank0
  9056  0A88  1D0E               	btfss	14,2	;volatile
  9057  0A89  2A8D               	goto	l8304
  9058  0A8A  0021               	movlb	1	; select bank1
  9059  0A8B  1D30               	btfss	(_myMain^(0+128)+16),2
  9060  0A8C  2A84               	goto	l8298
  9061  0A8D                     l8304:	
  9062                           
  9063                           ;CC2500_B1.c: 39: };
  9064                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9065  0A8D  319D  256B  318A   	fcall	_set_TimeoutCleared
  9066                           
  9067                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9068  0A90  319F  2780  318A   	fcall	_CC2500_WriteByte
  9069                           
  9070                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9071  0A93  0021               	movlb	1	; select bank1
  9072  0A94  085C               	movf	_Tx_Length^(0+128),w
  9073  0A95  0020               	movlb	0	; select bank0
  9074  0A96  00A4               	movwf	??_CC2500_TxData
  9075  0A97  0824               	movf	??_CC2500_TxData,w
  9076  0A98  00FA               	movwf	_SPI0Buffer
  9077                           
  9078                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9079  0A99  319F  2780  318A   	fcall	_CC2500_WriteByte
  9080                           
  9081                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9082  0A9C  0020               	movlb	0	; select bank0
  9083  0A9D  01A5               	clrf	CC2500_TxData@loop_e
  9084  0A9E                     l8318:	
  9085  0A9E  0021               	movlb	1	; select bank1
  9086  0A9F  085C               	movf	_Tx_Length^(0+128),w
  9087  0AA0  0020               	movlb	0	; select bank0
  9088  0AA1  0225               	subwf	CC2500_TxData@loop_e,w
  9089  0AA2  1803               	btfsc	3,0
  9090  0AA3  2AB6               	goto	l247
  9091                           
  9092                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9093  0AA4  0825               	movf	CC2500_TxData@loop_e,w
  9094  0AA5  3E20               	addlw	_RF_Data& (0+255)
  9095  0AA6  0086               	movwf	6
  9096  0AA7  3001               	movlw	1	; select bank2/3
  9097  0AA8  0087               	movwf	7
  9098  0AA9  0801               	movf	1,w
  9099  0AAA  00A4               	movwf	??_CC2500_TxData
  9100  0AAB  0824               	movf	??_CC2500_TxData,w
  9101  0AAC  00FA               	movwf	_SPI0Buffer
  9102                           
  9103                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9104  0AAD  319F  2780  318A   	fcall	_CC2500_WriteByte
  9105  0AB0  3001               	movlw	1
  9106  0AB1  0020               	movlb	0	; select bank0
  9107  0AB2  00A4               	movwf	??_CC2500_TxData
  9108  0AB3  0824               	movf	??_CC2500_TxData,w
  9109  0AB4  07A5               	addwf	CC2500_TxData@loop_e,f
  9110  0AB5  2A9E               	goto	l8318
  9111  0AB6                     l247:	
  9112                           
  9113                           ;CC2500_B1.c: 48: }
  9114                           ;CC2500_B1.c: 49: RC4 = 1;
  9115  0AB6  160E               	bsf	14,4	;volatile
  9116                           
  9117                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9118  0AB7  3035               	movlw	53
  9119  0AB8  3190  2077  318A   	fcall	_CC2500_WriteCommand
  9120                           
  9121                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9122  0ABB  2ABF               	goto	l8324
  9123  0ABC                     l8322:	
  9124                           
  9125                           ;CC2500_B1.c: 52: Timeout_Counter();
  9126  0ABC  319F  2794  318A   	fcall	_Timeout_Counter
  9127  0ABF                     l8324:	
  9128  0ABF  0020               	movlb	0	; select bank0
  9129  0AC0  180D               	btfsc	13,0	;volatile
  9130  0AC1  2AC5               	goto	l8328
  9131  0AC2  0021               	movlb	1	; select bank1
  9132  0AC3  1D30               	btfss	(_myMain^(0+128)+16),2
  9133  0AC4  2ABC               	goto	l8322
  9134  0AC5                     l8328:	
  9135                           
  9136                           ;CC2500_B1.c: 53: };
  9137                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9138  0AC5  319D  256B  318A   	fcall	_set_TimeoutCleared
  9139                           
  9140                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9141  0AC8  2ACC               	goto	l8332
  9142  0AC9                     l8330:	
  9143                           
  9144                           ;CC2500_B1.c: 57: Timeout_Counter();
  9145  0AC9  319F  2794  318A   	fcall	_Timeout_Counter
  9146  0ACC                     l8332:	
  9147  0ACC  0020               	movlb	0	; select bank0
  9148  0ACD  1C0D               	btfss	13,0	;volatile
  9149  0ACE  2AD2               	goto	l8336
  9150  0ACF  0021               	movlb	1	; select bank1
  9151  0AD0  1D30               	btfss	(_myMain^(0+128)+16),2
  9152  0AD1  2AC9               	goto	l8330
  9153  0AD2                     l8336:	
  9154                           
  9155                           ;CC2500_B1.c: 58: };
  9156                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9157  0AD2  319D  256B  318A   	fcall	_set_TimeoutCleared
  9158                           
  9159                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9160  0AD5  3036               	movlw	54
  9161  0AD6  3190  2077  318A   	fcall	_CC2500_WriteCommand
  9162                           
  9163                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9164  0AD9  303B               	movlw	59
  9165  0ADA  3190  2077  318A   	fcall	_CC2500_WriteCommand
  9166                           
  9167                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  9168  0ADD  303A               	movlw	58
  9169  0ADE  3190  2077         	fcall	_CC2500_WriteCommand
  9170                           
  9171                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9172  0AE0  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9173  0AE1  0008               	return
  9174  0AE2                     __end_of_CC2500_TxData:	
  9175                           
  9176                           	psect	text43
  9177  0C8D                     __ptext43:	
  9178 ;; *************** function _CC2500_RxData *****************
  9179 ;; Defined at:
  9180 ;;		line 70 in file "../src/CC2500_B1.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;		None               void
  9187 ;; Registers used:
  9188 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9197 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;Total ram usage:        2 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:    7
  9201 ;; This function calls:
  9202 ;;		_CC2500_ReadByte
  9203 ;;		_CC2500_ReadStatus
  9204 ;;		_CC2500_WriteByte
  9205 ;;		_Timeout_Counter
  9206 ;;		_set_TimeoutCleared
  9207 ;; This function is called by:
  9208 ;;		_setRF_Main
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function _CC2500_RxData
  9214  0C8D                     _CC2500_RxData:	
  9215                           
  9216                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9217                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9218                           
  9219                           ;incstack = 0
  9220                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9221  0C8D  0020               	movlb	0	; select bank0
  9222  0C8E  180D               	btfsc	13,0	;volatile
  9223  0C8F  2C94               	goto	l8352
  9224  0C90  2C9D               	goto	l8358
  9225  0C91                     l8350:	
  9226                           ;CC2500_B1.c: 76: {
  9227                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9228                           
  9229                           
  9230                           ;CC2500_B1.c: 78: Timeout_Counter();
  9231  0C91  319F  2794  318C   	fcall	_Timeout_Counter
  9232  0C94                     l8352:	
  9233  0C94  0020               	movlb	0	; select bank0
  9234  0C95  1C0D               	btfss	13,0	;volatile
  9235  0C96  2C9A               	goto	l8356
  9236  0C97  0021               	movlb	1	; select bank1
  9237  0C98  1D30               	btfss	(_myMain^(0+128)+16),2
  9238  0C99  2C91               	goto	l8350
  9239  0C9A                     l8356:	
  9240                           
  9241                           ;CC2500_B1.c: 79: };
  9242                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9243  0C9A  319D  256B  318C   	fcall	_set_TimeoutCleared
  9244  0C9D                     l8358:	
  9245                           
  9246                           ;CC2500_B1.c: 81: }
  9247                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9248  0C9D  303B               	movlw	59
  9249  0C9E  3191  2182  318C   	fcall	_CC2500_ReadStatus
  9250                           
  9251                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9252  0CA1  0021               	movlb	1	; select bank1
  9253  0CA2  085F               	movf	_s_data^(0+128),w
  9254  0CA3  1903               	btfsc	3,2
  9255  0CA4  0008               	return
  9256                           
  9257                           ;CC2500_B1.c: 86: RC4 = 0;
  9258  0CA5  0020               	movlb	0	; select bank0
  9259  0CA6  120E               	bcf	14,4	;volatile
  9260                           
  9261                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9262  0CA7  30FF               	movlw	255
  9263  0CA8  00A4               	movwf	??_CC2500_RxData
  9264  0CA9  0824               	movf	??_CC2500_RxData,w
  9265  0CAA  00FA               	movwf	_SPI0Buffer
  9266                           
  9267                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9268  0CAB  2CB2               	goto	l8368
  9269  0CAC                     l8370:	
  9270  0CAC  0021               	movlb	1	; select bank1
  9271  0CAD  1930               	btfsc	(_myMain^(0+128)+16),2
  9272  0CAE  2CB5               	goto	l272
  9273                           
  9274                           ;CC2500_B1.c: 89: Timeout_Counter();
  9275  0CAF  319F  2794  318C   	fcall	_Timeout_Counter
  9276  0CB2                     l8368:	
  9277  0CB2  0020               	movlb	0	; select bank0
  9278  0CB3  190E               	btfsc	14,2	;volatile
  9279  0CB4  2CAC               	goto	l8370
  9280  0CB5                     l272:	
  9281                           
  9282                           ;CC2500_B1.c: 90: };
  9283                           ;CC2500_B1.c: 91: if (myMain.Timeout == 0) {
  9284  0CB5  0021               	movlb	1	; select bank1
  9285  0CB6  1930               	btfsc	(_myMain^(0+128)+16),2
  9286  0CB7  2CF8               	goto	l273
  9287                           
  9288                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9289  0CB8  319F  2780  318C   	fcall	_CC2500_WriteByte
  9290                           
  9291                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9292  0CBB  319F  27E9  318C   	fcall	_CC2500_ReadByte
  9293                           
  9294                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9295  0CBE  087A               	movf	_SPI0Buffer,w
  9296  0CBF  0020               	movlb	0	; select bank0
  9297  0CC0  00A4               	movwf	??_CC2500_RxData
  9298  0CC1  0824               	movf	??_CC2500_RxData,w
  9299  0CC2  0021               	movlb	1	; select bank1
  9300  0CC3  00DB               	movwf	_Rx_Length^(0+128)
  9301                           
  9302                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9303  0CC4  0020               	movlb	0	; select bank0
  9304  0CC5  01A5               	clrf	CC2500_RxData@loop_f
  9305  0CC6                     l8384:	
  9306  0CC6  0021               	movlb	1	; select bank1
  9307  0CC7  085B               	movf	_Rx_Length^(0+128),w
  9308  0CC8  0020               	movlb	0	; select bank0
  9309  0CC9  0225               	subwf	CC2500_RxData@loop_f,w
  9310  0CCA  1803               	btfsc	3,0
  9311  0CCB  2CDE               	goto	l8386
  9312                           
  9313                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9314  0CCC  319F  27E9  318C   	fcall	_CC2500_ReadByte
  9315                           
  9316                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9317  0CCF  087A               	movf	_SPI0Buffer,w
  9318  0CD0  0020               	movlb	0	; select bank0
  9319  0CD1  00A4               	movwf	??_CC2500_RxData
  9320  0CD2  0825               	movf	CC2500_RxData@loop_f,w
  9321  0CD3  3E20               	addlw	_RF_Data& (0+255)
  9322  0CD4  0086               	movwf	6
  9323  0CD5  3001               	movlw	1	; select bank2/3
  9324  0CD6  0087               	movwf	7
  9325  0CD7  0824               	movf	??_CC2500_RxData,w
  9326  0CD8  0081               	movwf	1
  9327  0CD9  3001               	movlw	1
  9328  0CDA  00A4               	movwf	??_CC2500_RxData
  9329  0CDB  0824               	movf	??_CC2500_RxData,w
  9330  0CDC  07A5               	addwf	CC2500_RxData@loop_f,f
  9331  0CDD  2CC6               	goto	l8384
  9332  0CDE                     l8386:	
  9333                           
  9334                           ;CC2500_B1.c: 99: }
  9335                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9336  0CDE  319F  27E9  318C   	fcall	_CC2500_ReadByte
  9337                           
  9338                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9339  0CE1  087A               	movf	_SPI0Buffer,w
  9340  0CE2  0020               	movlb	0	; select bank0
  9341  0CE3  00A4               	movwf	??_CC2500_RxData
  9342  0CE4  0824               	movf	??_CC2500_RxData,w
  9343  0CE5  0021               	movlb	1	; select bank1
  9344  0CE6  00DA               	movwf	_RSSI^(0+128)
  9345                           
  9346                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9347  0CE7  319F  27E9  318C   	fcall	_CC2500_ReadByte
  9348                           
  9349                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9350  0CEA  087A               	movf	_SPI0Buffer,w
  9351  0CEB  0020               	movlb	0	; select bank0
  9352  0CEC  00A4               	movwf	??_CC2500_RxData
  9353  0CED  0824               	movf	??_CC2500_RxData,w
  9354  0CEE  0021               	movlb	1	; select bank1
  9355  0CEF  00D8               	movwf	_CRC^(0+128)
  9356                           
  9357                           ;CC2500_B1.c: 104: RC4 = 1;
  9358  0CF0  0020               	movlb	0	; select bank0
  9359  0CF1  160E               	bsf	14,4	;volatile
  9360                           
  9361                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9362  0CF2  0021               	movlb	1	; select bank1
  9363  0CF3  1BD8               	btfsc	_CRC^(0+128),7
  9364                           
  9365                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9366  0CF4  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9367                           
  9368                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9369  0CF5  11BF               	bcf	_RF1^(0+128),3
  9370                           
  9371                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9372  0CF6  14BF               	bsf	_RF1^(0+128),1
  9373                           
  9374                           ;CC2500_B1.c: 110: } else {
  9375  0CF7  2CFA               	goto	l8398
  9376  0CF8                     l273:	
  9377                           
  9378                           ;CC2500_B1.c: 111: RC4 = 1;
  9379  0CF8  0020               	movlb	0	; select bank0
  9380  0CF9  160E               	bsf	14,4	;volatile
  9381  0CFA                     l8398:	
  9382                           
  9383                           ;CC2500_B1.c: 112: }
  9384                           ;CC2500_B1.c: 113: set_TimeoutCleared();
  9385  0CFA  319D  256B         	fcall	_set_TimeoutCleared
  9386  0CFC  0021               	movlb	1	; select bank1
  9387  0CFD  0008               	return
  9388  0CFE                     __end_of_CC2500_RxData:	
  9389                           
  9390                           	psect	text44
  9391  1182                     __ptext44:	
  9392 ;; *************** function _CC2500_ReadStatus *****************
  9393 ;; Defined at:
  9394 ;;		line 304 in file "../src/CC2500_B1.c"
  9395 ;; Parameters:    Size  Location     Type
  9396 ;;  status_addr     1    wreg     unsigned char 
  9397 ;; Auto vars:     Size  Location     Type
  9398 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9399 ;; Return value:  Size  Location     Type
  9400 ;;		None               void
  9401 ;; Registers used:
  9402 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9403 ;; Tracked objects:
  9404 ;;		On entry : 0/0
  9405 ;;		On exit  : 0/0
  9406 ;;		Unchanged: 0/0
  9407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;Total ram usage:        2 bytes
  9413 ;; Hardware stack levels used:    1
  9414 ;; Hardware stack levels required when called:    6
  9415 ;; This function calls:
  9416 ;;		_CC2500_ReadByte
  9417 ;;		_CC2500_WriteByte
  9418 ;;		_Timeout_Counter
  9419 ;;		_set_TimeoutCleared
  9420 ;; This function is called by:
  9421 ;;		_CC2500_RxData
  9422 ;;		_setRF_Main
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function _CC2500_ReadStatus
  9428  1182                     _CC2500_ReadStatus:	
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9432                           ;CC2500_ReadStatus@status_addr stored from wreg
  9433  1182  0020               	movlb	0	; select bank0
  9434  1183  00A3               	movwf	CC2500_ReadStatus@status_addr
  9435                           
  9436                           ;CC2500_B1.c: 305: RC4 = 0;
  9437  1184  120E               	bcf	14,4	;volatile
  9438                           
  9439                           ;CC2500_B1.c: 306: SPI0Buffer = status_addr + 0xC0;
  9440  1185  0823               	movf	CC2500_ReadStatus@status_addr,w
  9441  1186  3EC0               	addlw	192
  9442  1187  00A2               	movwf	??_CC2500_ReadStatus
  9443  1188  0822               	movf	??_CC2500_ReadStatus,w
  9444  1189  00FA               	movwf	_SPI0Buffer
  9445                           
  9446                           ;CC2500_B1.c: 308: while (RC2 == 1 && myMain.Timeout == 0) {
  9447  118A  298E               	goto	l8178
  9448  118B                     l8176:	
  9449                           
  9450                           ;CC2500_B1.c: 309: Timeout_Counter();
  9451  118B  319F  2794  3191   	fcall	_Timeout_Counter
  9452  118E                     l8178:	
  9453  118E  0020               	movlb	0	; select bank0
  9454  118F  1D0E               	btfss	14,2	;volatile
  9455  1190  2994               	goto	l8182
  9456  1191  0021               	movlb	1	; select bank1
  9457  1192  1D30               	btfss	(_myMain^(0+128)+16),2
  9458  1193  298B               	goto	l8176
  9459  1194                     l8182:	
  9460                           
  9461                           ;CC2500_B1.c: 310: };
  9462                           ;CC2500_B1.c: 311: set_TimeoutCleared();
  9463  1194  319D  256B  3191   	fcall	_set_TimeoutCleared
  9464                           
  9465                           ;CC2500_B1.c: 313: CC2500_WriteByte();
  9466  1197  319F  2780  3191   	fcall	_CC2500_WriteByte
  9467                           
  9468                           ;CC2500_B1.c: 314: CC2500_ReadByte();
  9469  119A  319F  27E9         	fcall	_CC2500_ReadByte
  9470                           
  9471                           ;CC2500_B1.c: 315: RC4 = 1;
  9472  119C  0020               	movlb	0	; select bank0
  9473  119D  160E               	bsf	14,4	;volatile
  9474                           
  9475                           ;CC2500_B1.c: 317: s_data = SPI0Buffer;
  9476  119E  087A               	movf	_SPI0Buffer,w
  9477  119F  00A2               	movwf	??_CC2500_ReadStatus
  9478  11A0  0822               	movf	??_CC2500_ReadStatus,w
  9479  11A1  0021               	movlb	1	; select bank1
  9480  11A2  00DF               	movwf	_s_data^(0+128)
  9481  11A3  0008               	return
  9482  11A4                     __end_of_CC2500_ReadStatus:	
  9483                           
  9484                           	psect	text45
  9485  1FE9                     __ptext45:	
  9486 ;; *************** function _CC2500_ReadByte *****************
  9487 ;; Defined at:
  9488 ;;		line 238 in file "../src/CC2500_B1.c"
  9489 ;; Parameters:    Size  Location     Type
  9490 ;;		None
  9491 ;; Auto vars:     Size  Location     Type
  9492 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9493 ;; Return value:  Size  Location     Type
  9494 ;;		None               void
  9495 ;; Registers used:
  9496 ;;		wreg, status,2, status,0
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;Total ram usage:        2 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    5
  9509 ;; This function calls:
  9510 ;;		Nothing
  9511 ;; This function is called by:
  9512 ;;		_CC2500_RxData
  9513 ;;		_CC2500_ReadStatus
  9514 ;;		_CC2500_ReadREG
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _CC2500_ReadByte
  9520  1FE9                     _CC2500_ReadByte:	
  9521                           
  9522                           ;CC2500_B1.c: 239: unsigned char loop_b;
  9523                           ;CC2500_B1.c: 240: for (loop_b = 0; loop_b < 8; loop_b++) {
  9524                           
  9525                           ;incstack = 0
  9526                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9527  1FE9  0020               	movlb	0	; select bank0
  9528  1FEA  01A1               	clrf	CC2500_ReadByte@loop_b
  9529  1FEB                     L3:	
  9530  1FEB  3008               	movlw	8
  9531  1FEC  0221               	subwf	CC2500_ReadByte@loop_b,w
  9532  1FED  1803               	btfsc	3,0
  9533  1FEE  0008               	return
  9534                           
  9535                           ;CC2500_B1.c: 241: RC1 = 1;
  9536  1FEF  148E               	bsf	14,1	;volatile
  9537                           
  9538                           ;CC2500_B1.c: 242: SPI0Buffer <<= 1;
  9539  1FF0  1003               	clrc
  9540  1FF1  0DFA               	rlf	_SPI0Buffer,f
  9541                           
  9542                           ;CC2500_B1.c: 243: if (RC2 == 1)
  9543  1FF2  1D0E               	btfss	14,2	;volatile
  9544  1FF3  2FF6               	goto	l8044
  9545                           
  9546                           ;CC2500_B1.c: 244: SPI0Buffer |= 0x01;
  9547  1FF4  147A               	bsf	_SPI0Buffer,0
  9548  1FF5  2FFA               	goto	l8046
  9549  1FF6                     l8044:	
  9550                           
  9551                           ;CC2500_B1.c: 245: else
  9552                           ;CC2500_B1.c: 246: SPI0Buffer &= 0xFE;
  9553  1FF6  30FE               	movlw	254
  9554  1FF7  00A0               	movwf	??_CC2500_ReadByte
  9555  1FF8  0820               	movf	??_CC2500_ReadByte,w
  9556  1FF9  05FA               	andwf	_SPI0Buffer,f
  9557  1FFA                     l8046:	
  9558                           
  9559                           ;CC2500_B1.c: 247: RC1 = 0;
  9560  1FFA  108E               	bcf	14,1	;volatile
  9561  1FFB  3001               	movlw	1
  9562  1FFC  00A0               	movwf	??_CC2500_ReadByte
  9563  1FFD  0820               	movf	??_CC2500_ReadByte,w
  9564  1FFE  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9565  1FFF  2FEB               	goto	L3
  9566  2000                     __end_of_CC2500_ReadByte:	
  9567                           
  9568                           	psect	text46
  9569  1D38                     __ptext46:	
  9570 ;; *************** function _RF_Initialization *****************
  9571 ;; Defined at:
  9572 ;;		line 9 in file "../src/RF_Control_B1.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, status,0, pclath, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    6
  9593 ;; This function calls:
  9594 ;;		_setRF_Initialization
  9595 ;; This function is called by:
  9596 ;;		_main
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _RF_Initialization
  9602  1D38                     _RF_Initialization:	
  9603                           
  9604                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9608  1D38  319E  2617         	fcall	_setRF_Initialization
  9609  1D3A  0008               	return
  9610  1D3B                     __end_of_RF_Initialization:	
  9611                           
  9612                           	psect	text47
  9613  1E17                     __ptext47:	
  9614 ;; *************** function _setRF_Initialization *****************
  9615 ;; Defined at:
  9616 ;;		line 43 in file "../src/RF_Control_B1.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;		None
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;		None               void
  9623 ;; Registers used:
  9624 ;;		wreg
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;Total ram usage:        1 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    5
  9637 ;; This function calls:
  9638 ;;		Nothing
  9639 ;; This function is called by:
  9640 ;;		_RF_Initialization
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function _setRF_Initialization
  9646  1E17                     _setRF_Initialization:	
  9647                           
  9648                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in _setRF_Initialization: [wreg]
  9652  1E17  3015               	movlw	21
  9653  1E18  0020               	movlb	0	; select bank0
  9654  1E19  00A0               	movwf	??_setRF_Initialization
  9655  1E1A  0820               	movf	??_setRF_Initialization,w
  9656  1E1B  0021               	movlb	1	; select bank1
  9657  1E1C  00DC               	movwf	_Tx_Length^(0+128)
  9658                           
  9659                           ;RF_Control_B1.c: 46: RF1.RunTime = 20;
  9660  1E1D  3014               	movlw	20
  9661  1E1E  00C6               	movwf	(_RF1^(0+128)+7)
  9662  1E1F  3000               	movlw	0
  9663  1E20  00C7               	movwf	(_RF1^(0+128)+8)
  9664  1E21  0008               	return
  9665  1E22                     __end_of_setRF_Initialization:	
  9666                           
  9667                           	psect	text48
  9668  1D35                     __ptext48:	
  9669 ;; *************** function _PowerFault_Main *****************
  9670 ;; Defined at:
  9671 ;;		line 17 in file "../src/PowerFault_B1.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;		None
  9676 ;; Return value:  Size  Location     Type
  9677 ;;		None               void
  9678 ;; Registers used:
  9679 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : 0/0
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9686 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;Total ram usage:        0 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:   11
  9692 ;; This function calls:
  9693 ;;		_setPowerFault_Main
  9694 ;; This function is called by:
  9695 ;;		_main
  9696 ;; This function uses a non-reentrant model
  9697 ;;
  9698                           
  9699                           
  9700                           ;psect for function _PowerFault_Main
  9701  1D35                     _PowerFault_Main:	
  9702                           
  9703                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9704                           
  9705                           ;incstack = 0
  9706                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9707  1D35  318D  2572         	fcall	_setPowerFault_Main
  9708  1D37  0008               	return
  9709  1D38                     __end_of_PowerFault_Main:	
  9710                           
  9711                           	psect	text49
  9712  0D72                     __ptext49:	
  9713 ;; *************** function _setPowerFault_Main *****************
  9714 ;; Defined at:
  9715 ;;		line 55 in file "../src/PowerFault_B1.c"
  9716 ;; Parameters:    Size  Location     Type
  9717 ;;		None
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;		None
  9720 ;; Return value:  Size  Location     Type
  9721 ;;		None               void
  9722 ;; Registers used:
  9723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9724 ;; Tracked objects:
  9725 ;;		On entry : 0/0
  9726 ;;		On exit  : 0/0
  9727 ;;		Unchanged: 0/0
  9728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9733 ;;Total ram usage:        1 bytes
  9734 ;; Hardware stack levels used:    1
  9735 ;; Hardware stack levels required when called:   10
  9736 ;; This function calls:
  9737 ;;		_getTemp_Safe
  9738 ;;		_setPowerFault_Exceptions
  9739 ;; This function is called by:
  9740 ;;		_PowerFault_Main
  9741 ;; This function uses a non-reentrant model
  9742 ;;
  9743                           
  9744                           
  9745                           ;psect for function _setPowerFault_Main
  9746  0D72                     _setPowerFault_Main:	
  9747                           
  9748                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9749                           
  9750                           ;incstack = 0
  9751                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9752  0D72  0021               	movlb	1	; select bank1
  9753  0D73  1C4B               	btfss	_PF1^(0+128),0
  9754  0D74  0008               	return
  9755                           
  9756                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9757  0D75  19CB               	btfsc	_PF1^(0+128),3
  9758  0D76  2D94               	goto	l8998
  9759                           
  9760                           ;PowerFault_B1.c: 58: PF1.Time++;
  9761  0D77  3001               	movlw	1
  9762  0D78  07CD               	addwf	(_PF1^(0+128)+2),f
  9763  0D79  3000               	movlw	0
  9764  0D7A  3DCE               	addwfc	((_PF1+1)^(0+128)+2),f
  9765                           
  9766                           ;PowerFault_B1.c: 60: {
  9767                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9768  0D7B  3002               	movlw	2
  9769  0D7C  024E               	subwf	((_PF1+1)^(0+128)+2),w
  9770  0D7D  30BC               	movlw	188
  9771  0D7E  1903               	skipnz
  9772  0D7F  024D               	subwf	(_PF1^(0+128)+2),w
  9773  0D80  1C03               	skipc
  9774  0D81  0008               	return
  9775  0D82  319D  2590  318D   	fcall	_getTemp_Safe
  9776  0D85  3A01               	xorlw	1
  9777  0D86  1D03               	skipz
  9778  0D87  2D8E               	goto	l8996
  9779                           
  9780                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9781  0D88  0021               	movlb	1	; select bank1
  9782  0D89  01CD               	clrf	(_PF1^(0+128)+2)
  9783  0D8A  01CE               	clrf	((_PF1+1)^(0+128)+2)
  9784                           
  9785                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9786  0D8B  15CB               	bsf	_PF1^(0+128),3
  9787                           
  9788                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9789  0D8C  114B               	bcf	_PF1^(0+128),2
  9790                           
  9791                           ;PowerFault_B1.c: 65: } else {
  9792  0D8D  0008               	return
  9793  0D8E                     l8996:	
  9794                           
  9795                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9796  0D8E  30BC               	movlw	188
  9797  0D8F  0021               	movlb	1	; select bank1
  9798  0D90  00CD               	movwf	(_PF1^(0+128)+2)
  9799  0D91  3002               	movlw	2
  9800  0D92  00CE               	movwf	(_PF1^(0+128)+3)
  9801                           
  9802                           ;PowerFault_B1.c: 67: }
  9803                           ;PowerFault_B1.c: 68: }
  9804                           ;PowerFault_B1.c: 69: } else {
  9805  0D93  0008               	return
  9806  0D94                     l8998:	
  9807                           
  9808                           ;PowerFault_B1.c: 70: PF1.Time++;
  9809  0D94  3001               	movlw	1
  9810  0D95  07CD               	addwf	(_PF1^(0+128)+2),f
  9811  0D96  3000               	movlw	0
  9812  0D97  3DCE               	addwfc	((_PF1+1)^(0+128)+2),f
  9813                           
  9814                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9815  0D98  3000               	movlw	0
  9816  0D99  024E               	subwf	((_PF1+1)^(0+128)+2),w
  9817  0D9A  3002               	movlw	2
  9818  0D9B  1903               	skipnz
  9819  0D9C  024D               	subwf	(_PF1^(0+128)+2),w
  9820  0D9D  1C03               	skipc
  9821  0D9E  0008               	return
  9822                           
  9823                           ;PowerFault_B1.c: 72: {
  9824                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9825  0D9F  01CD               	clrf	(_PF1^(0+128)+2)
  9826  0DA0  01CE               	clrf	((_PF1+1)^(0+128)+2)
  9827                           
  9828                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9829  0DA1  11CB               	bcf	_PF1^(0+128),3
  9830                           
  9831                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9832  0DA2  1CCB               	btfss	_PF1^(0+128),1
  9833  0DA3  2DC2               	goto	l9020
  9834                           
  9835                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9836  0DA4  3001               	movlw	1
  9837  0DA5  0250               	subwf	((_PF1+1)^(0+128)+4),w
  9838  0DA6  3091               	movlw	145
  9839  0DA7  1903               	skipnz
  9840  0DA8  024F               	subwf	(_PF1^(0+128)+4),w
  9841  0DA9  1803               	skipnc
  9842  0DAA  2DE0               	goto	l9032
  9843  0DAB  3000               	movlw	0
  9844  0DAC  0250               	subwf	((_PF1+1)^(0+128)+4),w
  9845  0DAD  30C8               	movlw	200
  9846  0DAE  1903               	skipnz
  9847  0DAF  024F               	subwf	(_PF1^(0+128)+4),w
  9848  0DB0  1C03               	skipc
  9849  0DB1  2DE0               	goto	l9032
  9850                           
  9851                           ;PowerFault_B1.c: 78: PF1.Count++;
  9852  0DB2  3001               	movlw	1
  9853  0DB3  0020               	movlb	0	; select bank0
  9854  0DB4  00B1               	movwf	??_setPowerFault_Main
  9855  0DB5  0831               	movf	??_setPowerFault_Main,w
  9856  0DB6  0021               	movlb	1	; select bank1
  9857  0DB7  07CC               	addwf	(_PF1^(0+128)+1),f
  9858                           
  9859                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9860  0DB8  3002               	movlw	2
  9861  0DB9  024C               	subwf	(_PF1^(0+128)+1),w
  9862  0DBA  1C03               	skipc
  9863  0DBB  2DE2               	goto	l9034
  9864                           
  9865                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9866  0DBC  01CC               	clrf	(_PF1^(0+128)+1)
  9867                           
  9868                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9869  0DBD  3000               	movlw	0
  9870  0DBE  3194  2410  318D   	fcall	_setPowerFault_Exceptions
  9871                           
  9872                           ;PowerFault_B1.c: 82: }
  9873                           ;PowerFault_B1.c: 83: } else {
  9874  0DC1  2DE2               	goto	l9034
  9875  0DC2                     l9020:	
  9876                           ;PowerFault_B1.c: 85: }
  9877                           ;PowerFault_B1.c: 86: } else {
  9878                           
  9879                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9880                           
  9881                           
  9882                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9883  0DC2  3001               	movlw	1
  9884  0DC3  0250               	subwf	((_PF1+1)^(0+128)+4),w
  9885  0DC4  3090               	movlw	144
  9886  0DC5  1903               	skipnz
  9887  0DC6  024F               	subwf	(_PF1^(0+128)+4),w
  9888  0DC7  1803               	skipnc
  9889  0DC8  2DD0               	goto	l9024
  9890  0DC9  3000               	movlw	0
  9891  0DCA  0250               	subwf	((_PF1+1)^(0+128)+4),w
  9892  0DCB  30D3               	movlw	211
  9893  0DCC  1903               	skipnz
  9894  0DCD  024F               	subwf	(_PF1^(0+128)+4),w
  9895  0DCE  1803               	skipnc
  9896  0DCF  2DE0               	goto	l9032
  9897  0DD0                     l9024:	
  9898                           
  9899                           ;PowerFault_B1.c: 88: PF1.Count++;
  9900  0DD0  3001               	movlw	1
  9901  0DD1  0020               	movlb	0	; select bank0
  9902  0DD2  00B1               	movwf	??_setPowerFault_Main
  9903  0DD3  0831               	movf	??_setPowerFault_Main,w
  9904  0DD4  0021               	movlb	1	; select bank1
  9905  0DD5  07CC               	addwf	(_PF1^(0+128)+1),f
  9906                           
  9907                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9908  0DD6  3002               	movlw	2
  9909  0DD7  024C               	subwf	(_PF1^(0+128)+1),w
  9910  0DD8  1C03               	skipc
  9911  0DD9  2DE2               	goto	l9034
  9912                           
  9913                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9914  0DDA  01CC               	clrf	(_PF1^(0+128)+1)
  9915                           
  9916                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9917  0DDB  3001               	movlw	1
  9918  0DDC  3194  2410  318D   	fcall	_setPowerFault_Exceptions
  9919                           
  9920                           ;PowerFault_B1.c: 92: }
  9921                           ;PowerFault_B1.c: 93: } else {
  9922  0DDF  2DE2               	goto	l9034
  9923  0DE0                     l9032:	
  9924                           
  9925                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9926  0DE0  0021               	movlb	1	; select bank1
  9927  0DE1  01CC               	clrf	(_PF1^(0+128)+1)
  9928  0DE2                     l9034:	
  9929                           
  9930                           ;PowerFault_B1.c: 95: }
  9931                           ;PowerFault_B1.c: 97: }
  9932                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9933  0DE2  0021               	movlb	1	; select bank1
  9934  0DE3  1CCB               	btfss	_PF1^(0+128),1
  9935                           
  9936                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9937  0DE4  154B               	bsf	_PF1^(0+128),2
  9938                           
  9939                           ;PowerFault_B1.c: 100: }
  9940                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9941  0DE5  01CF               	clrf	(_PF1^(0+128)+4)
  9942  0DE6  01D0               	clrf	((_PF1+1)^(0+128)+4)
  9943  0DE7  0008               	return
  9944  0DE8                     __end_of_setPowerFault_Main:	
  9945                           
  9946                           	psect	text50
  9947  1410                     __ptext50:	
  9948 ;; *************** function _setPowerFault_Exceptions *****************
  9949 ;; Defined at:
  9950 ;;		line 107 in file "../src/PowerFault_B1.c"
  9951 ;; Parameters:    Size  Location     Type
  9952 ;;  command         1    wreg     unsigned char 
  9953 ;; Auto vars:     Size  Location     Type
  9954 ;;  command         1   16[BANK0 ] unsigned char 
  9955 ;;  i               1   15[BANK0 ] unsigned char 
  9956 ;; Return value:  Size  Location     Type
  9957 ;;		None               void
  9958 ;; Registers used:
  9959 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        3 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    9
  9972 ;; This function calls:
  9973 ;;		_DimmerLights_Exceptions
  9974 ;;		_setLED
  9975 ;;		_setRF_Enable
  9976 ;;		_setSw_Enable
  9977 ;; This function is called by:
  9978 ;;		_setPowerFault_Main
  9979 ;; This function uses a non-reentrant model
  9980 ;;
  9981                           
  9982                           
  9983                           ;psect for function _setPowerFault_Exceptions
  9984  1410                     _setPowerFault_Exceptions:	
  9985                           
  9986                           ;incstack = 0
  9987                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9988                           ;setPowerFault_Exceptions@command stored from wreg
  9989  1410  0020               	movlb	0	; select bank0
  9990  1411  00B0               	movwf	setPowerFault_Exceptions@command
  9991                           
  9992                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9993  1412  0830               	movf	setPowerFault_Exceptions@command,w
  9994  1413  3A01               	xorlw	1
  9995  1414  3000               	movlw	0
  9996  1415  1D03               	skipz
  9997  1416  3001               	movlw	1
  9998  1417  00AE               	movwf	??_setPowerFault_Exceptions
  9999  1418  082E               	movf	??_setPowerFault_Exceptions,w
 10000  1419  00AF               	movwf	setPowerFault_Exceptions@i
 10001                           
 10002                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
 10003  141A  0830               	movf	setPowerFault_Exceptions@command,w
 10004  141B  0021               	movlb	1	; select bank1
 10005  141C  10CB               	bcf	_PF1^(0+128),1
 10006  141D  1D03               	skipz
 10007  141E  14CB               	bsf	_PF1^(0+128),1
 10008                           
 10009                           ;PowerFault_B1.c: 110: PF1.Safe = i;
 10010  141F  0020               	movlb	0	; select bank0
 10011  1420  082F               	movf	setPowerFault_Exceptions@i,w
 10012  1421  0021               	movlb	1	; select bank1
 10013  1422  114B               	bcf	_PF1^(0+128),2
 10014  1423  1D03               	skipz
 10015  1424  154B               	bsf	_PF1^(0+128),2
 10016                           
 10017                           ;PowerFault_B1.c: 111: if (command == 1) {
 10018  1425  0020               	movlb	0	; select bank0
 10019  1426  0830               	movf	setPowerFault_Exceptions@command,w
 10020  1427  3A01               	xorlw	1
 10021  1428  1D03               	skipz
 10022  1429  2C35               	goto	l1749
 10023                           
 10024                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
 10025  142A  3003               	movlw	3
 10026  142B  3195  2501  3194   	fcall	_DimmerLights_Exceptions
 10027                           
 10028                           ;PowerFault_B1.c: 114: setLED(2, 1);
 10029  142E  0020               	movlb	0	; select bank0
 10030  142F  01A2               	clrf	setLED@command
 10031  1430  0AA2               	incf	setLED@command,f
 10032  1431  3002               	movlw	2
 10033  1432  3189  215A  3194   	fcall	_setLED
 10034  1435                     l1749:	
 10035                           
 10036                           ;PowerFault_B1.c: 116: }
 10037                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
 10038  1435  0020               	movlb	0	; select bank0
 10039  1436  0830               	movf	setPowerFault_Exceptions@command,w
 10040  1437  3E0A               	addlw	10
 10041  1438  00AE               	movwf	??_setPowerFault_Exceptions
 10042  1439  082E               	movf	??_setPowerFault_Exceptions,w
 10043  143A  00A2               	movwf	setLED@command
 10044  143B  3063               	movlw	99
 10045  143C  3189  215A  3194   	fcall	_setLED
 10046                           
 10047                           ;PowerFault_B1.c: 119: setSw_Enable(i);
 10048  143F  0020               	movlb	0	; select bank0
 10049  1440  082F               	movf	setPowerFault_Exceptions@i,w
 10050  1441  319E  26BC  3194   	fcall	_setSw_Enable
 10051                           
 10052                           ;PowerFault_B1.c: 121: setRF_Enable(i);
 10053  1444  0020               	movlb	0	; select bank0
 10054  1445  082F               	movf	setPowerFault_Exceptions@i,w
 10055  1446  319E  269F         	fcall	_setRF_Enable
 10056  1448  0008               	return
 10057  1449                     __end_of_setPowerFault_Exceptions:	
 10058                           
 10059                           	psect	text51
 10060  1EBC                     __ptext51:	
 10061 ;; *************** function _setSw_Enable *****************
 10062 ;; Defined at:
 10063 ;;		line 91 in file "../src/Switch_B1.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;  command         1    wreg     unsigned char 
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;  command         1    2[BANK0 ] unsigned char 
 10068 ;; Return value:  Size  Location     Type
 10069 ;;		None               void
 10070 ;; Registers used:
 10071 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        1 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    6
 10084 ;; This function calls:
 10085 ;;		_SwPointSelect
 10086 ;; This function is called by:
 10087 ;;		_setOverTemp_Exceptions
 10088 ;;		_setPowerFault_Exceptions
 10089 ;;		_my_MainTime
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _setSw_Enable
 10095  1EBC                     _setSw_Enable:	
 10096                           
 10097                           ;incstack = 0
 10098                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10099                           ;setSw_Enable@command stored from wreg
 10100  1EBC  0020               	movlb	0	; select bank0
 10101  1EBD  00A2               	movwf	setSw_Enable@command
 10102                           
 10103                           ;Switch_B1.c: 94: SwPointSelect(1);
 10104  1EBE  3001               	movlw	1
 10105  1EBF  319E  2601         	fcall	_SwPointSelect
 10106                           
 10107                           ;Switch_B1.c: 95: Sw->Enable = command;
 10108  1EC1  0020               	movlb	0	; select bank0
 10109  1EC2  086C               	movf	_Sw,w
 10110  1EC3  0086               	movwf	6
 10111  1EC4  3001               	movlw	1	; select bank2/3
 10112  1EC5  0087               	movwf	7
 10113  1EC6  0822               	movf	setSw_Enable@command,w
 10114  1EC7  1001               	bcf	1,0
 10115  1EC8  1D03               	skipz
 10116  1EC9  1401               	bsf	1,0
 10117  1ECA  0008               	return
 10118  1ECB                     __end_of_setSw_Enable:	
 10119                           
 10120                           	psect	text52
 10121  1E9F                     __ptext52:	
 10122 ;; *************** function _setRF_Enable *****************
 10123 ;; Defined at:
 10124 ;;		line 227 in file "../src/RF_Control_B1.c"
 10125 ;; Parameters:    Size  Location     Type
 10126 ;;  command         1    wreg     unsigned char 
 10127 ;; Auto vars:     Size  Location     Type
 10128 ;;  command         1    0[BANK0 ] unsigned char 
 10129 ;; Return value:  Size  Location     Type
 10130 ;;		None               void
 10131 ;; Registers used:
 10132 ;;		wreg, status,2
 10133 ;; Tracked objects:
 10134 ;;		On entry : 0/0
 10135 ;;		On exit  : 0/0
 10136 ;;		Unchanged: 0/0
 10137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;Total ram usage:        1 bytes
 10143 ;; Hardware stack levels used:    1
 10144 ;; Hardware stack levels required when called:    5
 10145 ;; This function calls:
 10146 ;;		Nothing
 10147 ;; This function is called by:
 10148 ;;		_setOverTemp_Exceptions
 10149 ;;		_setPowerFault_Exceptions
 10150 ;;		_my_MainTime
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           
 10155                           ;psect for function _setRF_Enable
 10156  1E9F                     _setRF_Enable:	
 10157                           
 10158                           ;incstack = 0
 10159                           ; Regs used in _setRF_Enable: [wreg+status,2]
 10160                           ;setRF_Enable@command stored from wreg
 10161  1E9F  0020               	movlb	0	; select bank0
 10162  1EA0  00A0               	movwf	setRF_Enable@command
 10163                           
 10164                           ;RF_Control_B1.c: 228: RF1.Enable = command;
 10165  1EA1  0820               	movf	setRF_Enable@command,w
 10166  1EA2  0021               	movlb	1	; select bank1
 10167  1EA3  103F               	bcf	_RF1^(0+128),0
 10168  1EA4  1D03               	skipz
 10169  1EA5  143F               	bsf	_RF1^(0+128),0
 10170                           
 10171                           ;RF_Control_B1.c: 229: RF1.Learn = 0;
 10172  1EA6  133F               	bcf	_RF1^(0+128),6
 10173                           
 10174                           ;RF_Control_B1.c: 230: RF1.TransceiveGO = 0;
 10175  1EA7  113F               	bcf	_RF1^(0+128),2
 10176                           
 10177                           ;RF_Control_B1.c: 231: RF1.RxStatus = 0;
 10178  1EA8  11BF               	bcf	_RF1^(0+128),3
 10179                           
 10180                           ;RF_Control_B1.c: 232: RF1.ReceiveGO = 0;
 10181  1EA9  10BF               	bcf	_RF1^(0+128),1
 10182                           
 10183                           ;RF_Control_B1.c: 233: RF1.DebounceTime = 0;
 10184  1EAA  01C8               	clrf	(_RF1^(0+128)+9)
 10185                           
 10186                           ;RF_Control_B1.c: 234: RF1.Debounce = 0;
 10187  1EAB  12BF               	bcf	_RF1^(0+128),5
 10188  1EAC  0008               	return
 10189  1EAD                     __end_of_setRF_Enable:	
 10190                           
 10191                           	psect	text53
 10192  1501                     __ptext53:	
 10193 ;; *************** function _DimmerLights_Exceptions *****************
 10194 ;; Defined at:
 10195 ;;		line 522 in file "../src/Dimmer_B1.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;  status          1    wreg     unsigned char 
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;  status          1   13[BANK0 ] unsigned char 
 10200 ;; Return value:  Size  Location     Type
 10201 ;;		None               void
 10202 ;; Registers used:
 10203 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;Total ram usage:        1 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    8
 10216 ;; This function calls:
 10217 ;;		_getDimmerLights_StatusFlag
 10218 ;;		_setBuz
 10219 ;;		_setDimmerLights_ERROR
 10220 ;;		_setDimmerLights_TriggerERROR
 10221 ;; This function is called by:
 10222 ;;		_setOverTemp_Exceptions
 10223 ;;		_setPowerFault_Exceptions
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           
 10228                           ;psect for function _DimmerLights_Exceptions
 10229  1501                     _DimmerLights_Exceptions:	
 10230                           
 10231                           ;incstack = 0
 10232                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 10233                           ;DimmerLights_Exceptions@status stored from wreg
 10234  1501  0020               	movlb	0	; select bank0
 10235  1502  00AD               	movwf	DimmerLights_Exceptions@status
 10236                           
 10237                           ;Dimmer_B1.c: 523: if (status == 1) {
 10238  1503  082D               	movf	DimmerLights_Exceptions@status,w
 10239  1504  3A01               	xorlw	1
 10240  1505  1D03               	skipz
 10241  1506  2D17               	goto	l8200
 10242                           
 10243                           ;Dimmer_B1.c: 524: if (getDimmerLights_StatusFlag() == 1) {
 10244  1507  319D  25D6  3195   	fcall	_getDimmerLights_StatusFlag
 10245  150A  3A01               	xorlw	1
 10246  150B  1D03               	skipz
 10247  150C  2D2F               	goto	l8208
 10248                           
 10249                           ;Dimmer_B1.c: 525: setBuz(10, 300);
 10250  150D  302C               	movlw	44
 10251  150E  0020               	movlb	0	; select bank0
 10252  150F  00A9               	movwf	setBuz@time
 10253  1510  3001               	movlw	1
 10254  1511  00AA               	movwf	setBuz@time+1
 10255  1512  300A               	movlw	10
 10256  1513  3197  27A7  3195   	fcall	_setBuz
 10257  1516  2D2F               	goto	l8208
 10258  1517                     l8200:	
 10259                           ;Dimmer_B1.c: 537: } else if (status == 2)
 10260                           
 10261                           ;Dimmer_B1.c: 526: }
 10262                           ;Dimmer_B1.c: 529: setDimmerLights_ERROR(1);
 10263                           
 10264  1517  0020               	movlb	0	; select bank0
 10265  1518  082D               	movf	DimmerLights_Exceptions@status,w
 10266  1519  3A02               	xorlw	2
 10267  151A  1D03               	skipz
 10268  151B  2D2A               	goto	l8206
 10269                           
 10270                           ;Dimmer_B1.c: 538: {
 10271                           ;Dimmer_B1.c: 539: setBuz(5, 300);
 10272  151C  302C               	movlw	44
 10273  151D  00A9               	movwf	setBuz@time
 10274  151E  3001               	movlw	1
 10275  151F  00AA               	movwf	setBuz@time+1
 10276  1520  3005               	movlw	5
 10277  1521  3197  27A7  3195   	fcall	_setBuz
 10278                           
 10279                           ;Dimmer_B1.c: 540: setDimmerLights_ERROR(Dimmer->Load);
 10280  1524  0A76               	incf	_Dimmer,w
 10281  1525  0086               	movwf	6
 10282  1526  3001               	movlw	1	; select bank2/3
 10283  1527  0087               	movwf	7
 10284  1528  0801               	movf	1,w
 10285  1529  2D30               	goto	L4
 10286  152A                     l8206:	
 10287                           ;Dimmer_B1.c: 541: } else if (status == 3)
 10288                           
 10289  152A  0020               	movlb	0	; select bank0
 10290  152B  082D               	movf	DimmerLights_Exceptions@status,w
 10291  152C  3A03               	xorlw	3
 10292  152D  1D03               	skipz
 10293  152E  2D33               	goto	l797
 10294  152F                     l8208:	
 10295                           
 10296                           ;Dimmer_B1.c: 542: {
 10297                           ;Dimmer_B1.c: 544: setDimmerLights_ERROR(1);
 10298  152F  3001               	movlw	1
 10299  1530                     L4:	
 10300  1530  3196  2655  3195   	fcall	_setDimmerLights_ERROR
 10301  1533                     l797:	
 10302                           
 10303                           ;Dimmer_B1.c: 552: }
 10304                           ;Dimmer_B1.c: 555: setDimmerLights_TriggerERROR(1, 0);
 10305  1533  0020               	movlb	0	; select bank0
 10306  1534  01A2               	clrf	setDimmerLights_TriggerERROR@command
 10307  1535  3001               	movlw	1
 10308  1536  3192  228C  3195   	fcall	_setDimmerLights_TriggerERROR
 10309                           
 10310                           ;Dimmer_B1.c: 564: if (myMain.SelfTest == 0) {
 10311  1539  0021               	movlb	1	; select bank1
 10312  153A  1BA0               	btfsc	_myMain^(0+128),7
 10313  153B  0008               	return
 10314                           
 10315                           ;Dimmer_B1.c: 565: myMain.i = 0;
 10316  153C  102F               	bcf	(_myMain^(0+128)+15),0
 10317                           
 10318                           ;Dimmer_B1.c: 566: myMain.j = 0;
 10319  153D  10AF               	bcf	(_myMain^(0+128)+15),1
 10320                           
 10321                           ;Dimmer_B1.c: 567: myMain.k = 1;
 10322  153E  152F               	bsf	(_myMain^(0+128)+15),2
 10323                           
 10324                           ;Dimmer_B1.c: 568: myMain.Count2 = 0;
 10325  153F  01A8               	clrf	(_myMain^(0+128)+8)
 10326  1540  01A9               	clrf	((_myMain+1)^(0+128)+8)
 10327  1541  0008               	return
 10328  1542                     __end_of_DimmerLights_Exceptions:	
 10329                           
 10330                           	psect	text54
 10331  128C                     __ptext54:	
 10332 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10333 ;; Defined at:
 10334 ;;		line 591 in file "../src/Dimmer_B1.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  lights          1    wreg     unsigned char 
 10337 ;;  command         1    2[BANK0 ] unsigned char 
 10338 ;; Auto vars:     Size  Location     Type
 10339 ;;  lights          1    3[BANK0 ] unsigned char 
 10340 ;; Return value:  Size  Location     Type
 10341 ;;		None               void
 10342 ;; Registers used:
 10343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10344 ;; Tracked objects:
 10345 ;;		On entry : 0/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10349 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;Total ram usage:        2 bytes
 10354 ;; Hardware stack levels used:    1
 10355 ;; Hardware stack levels required when called:    6
 10356 ;; This function calls:
 10357 ;;		_DimmerLightsPointSelect
 10358 ;; This function is called by:
 10359 ;;		_DimmerLights_Exceptions
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           
 10364                           ;psect for function _setDimmerLights_TriggerERROR
 10365  128C                     _setDimmerLights_TriggerERROR:	
 10366                           
 10367                           ;incstack = 0
 10368                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10369                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10370  128C  0020               	movlb	0	; select bank0
 10371  128D  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10372                           
 10373                           ;Dimmer_B1.c: 593: DimmerLightsPointSelect(lights);
 10374  128E  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10375  128F  319D  25EB         	fcall	_DimmerLightsPointSelect
 10376                           
 10377                           ;Dimmer_B1.c: 594: DimmerLights->Trigger = command;
 10378  1291  0020               	movlb	0	; select bank0
 10379  1292  086A               	movf	_DimmerLights,w
 10380  1293  3E08               	addlw	8
 10381  1294  0086               	movwf	6
 10382  1295  3001               	movlw	1	; select bank2/3
 10383  1296  0087               	movwf	7
 10384  1297  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10385  1298  1101               	bcf	1,2
 10386  1299  1D03               	skipz
 10387  129A  1501               	bsf	1,2
 10388                           
 10389                           ;Dimmer_B1.c: 595: DimmerLights->Switch = command;
 10390  129B  086A               	movf	_DimmerLights,w
 10391  129C  3E08               	addlw	8
 10392  129D  0086               	movwf	6
 10393  129E  3001               	movlw	1	; select bank2/3
 10394  129F  0087               	movwf	7
 10395  12A0  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10396  12A1  1081               	bcf	1,1
 10397  12A2  1D03               	skipz
 10398  12A3  1481               	bsf	1,1
 10399                           
 10400                           ;Dimmer_B1.c: 596: DimmerLights->TriggerAdj = command;
 10401  12A4  086A               	movf	_DimmerLights,w
 10402  12A5  3E08               	addlw	8
 10403  12A6  0086               	movwf	6
 10404  12A7  3001               	movlw	1	; select bank2/3
 10405  12A8  0087               	movwf	7
 10406  12A9  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10407  12AA  1201               	bcf	1,4
 10408  12AB  1D03               	skipz
 10409  12AC  1601               	bsf	1,4
 10410                           
 10411                           ;Dimmer_B1.c: 597: DimmerLights->AdjGo = command;
 10412  12AD  086A               	movf	_DimmerLights,w
 10413  12AE  3E08               	addlw	8
 10414  12AF  0086               	movwf	6
 10415  12B0  3001               	movlw	1	; select bank2/3
 10416  12B1  0087               	movwf	7
 10417  12B2  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10418  12B3  1181               	bcf	1,3
 10419  12B4  1D03               	skipz
 10420  12B5  1581               	bsf	1,3
 10421  12B6  0008               	return
 10422  12B7                     __end_of_setDimmerLights_TriggerERROR:	
 10423                           
 10424                           	psect	text55
 10425  1655                     __ptext55:	
 10426 ;; *************** function _setDimmerLights_ERROR *****************
 10427 ;; Defined at:
 10428 ;;		line 573 in file "../src/Dimmer_B1.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  lights          1    wreg     unsigned char 
 10431 ;; Auto vars:     Size  Location     Type
 10432 ;;  lights          1    5[BANK0 ] unsigned char 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;		None               void
 10435 ;; Registers used:
 10436 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;Total ram usage:        2 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:    7
 10449 ;; This function calls:
 10450 ;;		_DimmerLightsPointSelect
 10451 ;;		_setLED
 10452 ;;		_setRFSW_Status
 10453 ;;		_setSw_Status
 10454 ;; This function is called by:
 10455 ;;		_DimmerLights_Exceptions
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           
 10460                           ;psect for function _setDimmerLights_ERROR
 10461  1655                     _setDimmerLights_ERROR:	
 10462                           
 10463                           ;incstack = 0
 10464                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10465                           ;setDimmerLights_ERROR@lights stored from wreg
 10466  1655  0020               	movlb	0	; select bank0
 10467  1656  00A5               	movwf	setDimmerLights_ERROR@lights
 10468                           
 10469                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(lights);
 10470  1657  0825               	movf	setDimmerLights_ERROR@lights,w
 10471  1658  319D  25EB  3196   	fcall	_DimmerLightsPointSelect
 10472                           
 10473                           ;Dimmer_B1.c: 575: if (DimmerLights->Status == 1) {
 10474  165B  0020               	movlb	0	; select bank0
 10475  165C  086A               	movf	_DimmerLights,w
 10476  165D  0086               	movwf	6
 10477  165E  3001               	movlw	1	; select bank2/3
 10478  165F  0087               	movwf	7
 10479  1660  1E81               	btfss	1,5
 10480  1661  0008               	return
 10481                           
 10482                           ;Dimmer_B1.c: 577: DimmerLights->Signal = 0;
 10483  1662  086A               	movf	_DimmerLights,w
 10484  1663  0086               	movwf	6
 10485  1664  3001               	movlw	1	; select bank2/3
 10486  1665  0087               	movwf	7
 10487  1666  1081               	bcf	1,1
 10488                           
 10489                           ;Dimmer_B1.c: 578: DimmerLights->AdjFlag = 0;
 10490  1667  086A               	movf	_DimmerLights,w
 10491  1668  0086               	movwf	6
 10492  1669  3001               	movlw	1	; select bank2/3
 10493  166A  0087               	movwf	7
 10494  166B  1181               	bcf	1,3
 10495                           
 10496                           ;Dimmer_B1.c: 579: DimmerLights->AdjStatus = 0;
 10497  166C  086A               	movf	_DimmerLights,w
 10498  166D  0086               	movwf	6
 10499  166E  3001               	movlw	1	; select bank2/3
 10500  166F  0087               	movwf	7
 10501  1670  1201               	bcf	1,4
 10502                           
 10503                           ;Dimmer_B1.c: 580: DimmerLights->StatusFlag = 0;
 10504  1671  086A               	movf	_DimmerLights,w
 10505  1672  0086               	movwf	6
 10506  1673  3001               	movlw	1	; select bank2/3
 10507  1674  0087               	movwf	7
 10508  1675  1301               	bcf	1,6
 10509                           
 10510                           ;Dimmer_B1.c: 581: DimmerLights->DimmingTimeValue = 7;
 10511  1676  3007               	movlw	7
 10512  1677  00A4               	movwf	??_setDimmerLights_ERROR
 10513  1678  086A               	movf	_DimmerLights,w
 10514  1679  3E02               	addlw	2
 10515  167A  0086               	movwf	6
 10516  167B  3001               	movlw	1	; select bank2/3
 10517  167C  0087               	movwf	7
 10518  167D  0824               	movf	??_setDimmerLights_ERROR,w
 10519  167E  0081               	movwf	1
 10520                           
 10521                           ;Dimmer_B1.c: 582: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10522  167F  086A               	movf	_DimmerLights,w
 10523  1680  3E06               	addlw	6
 10524  1681  0086               	movwf	6
 10525  1682  3001               	movlw	1	; select bank2/3
 10526  1683  0087               	movwf	7
 10527  1684  0801               	movf	1,w
 10528  1685  00A4               	movwf	??_setDimmerLights_ERROR
 10529  1686  086A               	movf	_DimmerLights,w
 10530  1687  3E04               	addlw	4
 10531  1688  0086               	movwf	6
 10532  1689  3001               	movlw	1	; select bank2/3
 10533  168A  0087               	movwf	7
 10534  168B  0824               	movf	??_setDimmerLights_ERROR,w
 10535  168C  0081               	movwf	1
 10536                           
 10537                           ;Dimmer_B1.c: 583: Dimmer->Detect = 1;
 10538  168D  0876               	movf	_Dimmer,w
 10539  168E  0086               	movwf	6
 10540  168F  3001               	movlw	1	; select bank2/3
 10541  1690  0087               	movwf	7
 10542  1691  1401               	bsf	1,0
 10543                           
 10544                           ;Dimmer_B1.c: 584: ;;
 10545                           ;Dimmer_B1.c: 585: setLED(lights, 1);
 10546  1692  01A2               	clrf	setLED@command
 10547  1693  0AA2               	incf	setLED@command,f
 10548  1694  0825               	movf	setDimmerLights_ERROR@lights,w
 10549  1695  3189  215A  3196   	fcall	_setLED
 10550                           
 10551                           ;Dimmer_B1.c: 586: setSw_Status(lights, 0);
 10552  1698  0020               	movlb	0	; select bank0
 10553  1699  01A2               	clrf	setSw_Status@command
 10554  169A  0825               	movf	setDimmerLights_ERROR@lights,w
 10555  169B  319E  26AD  3196   	fcall	_setSw_Status
 10556                           
 10557                           ;Dimmer_B1.c: 587: setRFSW_Status(lights, 0);
 10558  169E  0020               	movlb	0	; select bank0
 10559  169F  01A2               	clrf	setRFSW_Status@command
 10560  16A0  0825               	movf	setDimmerLights_ERROR@lights,w
 10561  16A1  319E  2691         	fcall	_setRFSW_Status
 10562  16A3  0008               	return
 10563  16A4                     __end_of_setDimmerLights_ERROR:	
 10564                           
 10565                           	psect	text56
 10566  1D90                     __ptext56:	
 10567 ;; *************** function _getTemp_Safe *****************
 10568 ;; Defined at:
 10569 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10570 ;; Parameters:    Size  Location     Type
 10571 ;;		None
 10572 ;; Auto vars:     Size  Location     Type
 10573 ;;  result          1    0[BANK0 ] unsigned char 
 10574 ;; Return value:  Size  Location     Type
 10575 ;;                  1    wreg      unsigned char 
 10576 ;; Registers used:
 10577 ;;		wreg, status,2
 10578 ;; Tracked objects:
 10579 ;;		On entry : 0/0
 10580 ;;		On exit  : 0/0
 10581 ;;		Unchanged: 0/0
 10582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10587 ;;Total ram usage:        1 bytes
 10588 ;; Hardware stack levels used:    1
 10589 ;; Hardware stack levels required when called:    5
 10590 ;; This function calls:
 10591 ;;		Nothing
 10592 ;; This function is called by:
 10593 ;;		_setPowerFault_Main
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           
 10598                           ;psect for function _getTemp_Safe
 10599  1D90                     _getTemp_Safe:	
 10600                           
 10601                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 10602                           
 10603                           ;incstack = 0
 10604                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 10605  1D90  3000               	movlw	0
 10606  1D91  0021               	movlb	1	; select bank1
 10607  1D92  1A60               	btfsc	_Temp1^(0+128),4
 10608  1D93  3001               	movlw	1
 10609  1D94  0020               	movlb	0	; select bank0
 10610  1D95  00A0               	movwf	getTemp_Safe@result
 10611                           
 10612                           ;OverTemperature_B1.c: 23: return result;
 10613  1D96  0820               	movf	getTemp_Safe@result,w
 10614  1D97  0008               	return
 10615  1D98                     __end_of_getTemp_Safe:	
 10616                           
 10617                           	psect	text57
 10618  1D32                     __ptext57:	
 10619 ;; *************** function _PowerFault_Initialization *****************
 10620 ;; Defined at:
 10621 ;;		line 10 in file "../src/PowerFault_B1.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;		None
 10624 ;; Auto vars:     Size  Location     Type
 10625 ;;		None
 10626 ;; Return value:  Size  Location     Type
 10627 ;;		None               void
 10628 ;; Registers used:
 10629 ;;		status,2, status,0, pclath, cstack
 10630 ;; Tracked objects:
 10631 ;;		On entry : 0/0
 10632 ;;		On exit  : 0/0
 10633 ;;		Unchanged: 0/0
 10634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10639 ;;Total ram usage:        0 bytes
 10640 ;; Hardware stack levels used:    1
 10641 ;; Hardware stack levels required when called:    6
 10642 ;; This function calls:
 10643 ;;		_setPowerFault_Initialization
 10644 ;; This function is called by:
 10645 ;;		_main
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           
 10650                           ;psect for function _PowerFault_Initialization
 10651  1D32                     _PowerFault_Initialization:	
 10652                           
 10653                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10654                           
 10655                           ;incstack = 0
 10656                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10657  1D32  319D  2563         	fcall	_setPowerFault_Initialization
 10658  1D34  0008               	return
 10659  1D35                     __end_of_PowerFault_Initialization:	
 10660                           
 10661                           	psect	text58
 10662  1D63                     __ptext58:	
 10663 ;; *************** function _setPowerFault_Initialization *****************
 10664 ;; Defined at:
 10665 ;;		line 24 in file "../src/PowerFault_B1.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;		None
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;		None
 10670 ;; Return value:  Size  Location     Type
 10671 ;;		None               void
 10672 ;; Registers used:
 10673 ;;		None
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;Total ram usage:        0 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    5
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_PowerFault_Initialization
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           
 10694                           ;psect for function _setPowerFault_Initialization
 10695  1D63                     _setPowerFault_Initialization:	
 10696                           
 10697                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in _setPowerFault_Initialization: []
 10701  1D63  0021               	movlb	1	; select bank1
 10702  1D64  144B               	bsf	_PF1^(0+128),0
 10703                           
 10704                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10705  1D65  154B               	bsf	_PF1^(0+128),2
 10706  1D66  0008               	return
 10707  1D67                     __end_of_setPowerFault_Initialization:	
 10708                           
 10709                           	psect	text59
 10710  1F4A                     __ptext59:	
 10711 ;; *************** function _Mcu_Initialization *****************
 10712 ;; Defined at:
 10713 ;;		line 30 in file "../src/MCU_B1.c"
 10714 ;; Parameters:    Size  Location     Type
 10715 ;;		None
 10716 ;; Auto vars:     Size  Location     Type
 10717 ;;		None
 10718 ;; Return value:  Size  Location     Type
 10719 ;;		None               void
 10720 ;; Registers used:
 10721 ;;		wreg, status,2, status,0, pclath, cstack
 10722 ;; Tracked objects:
 10723 ;;		On entry : 0/0
 10724 ;;		On exit  : 0/0
 10725 ;;		Unchanged: 0/0
 10726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10731 ;;Total ram usage:        0 bytes
 10732 ;; Hardware stack levels used:    1
 10733 ;; Hardware stack levels required when called:    6
 10734 ;; This function calls:
 10735 ;;		_ADC_Set
 10736 ;;		_Fosc_Set
 10737 ;;		_IOC_Set
 10738 ;;		_IO_Set
 10739 ;;		_TMR1_Set
 10740 ;;		_WDT_Set
 10741 ;; This function is called by:
 10742 ;;		_main
 10743 ;; This function uses a non-reentrant model
 10744 ;;
 10745                           
 10746                           
 10747                           ;psect for function _Mcu_Initialization
 10748  1F4A                     _Mcu_Initialization:	
 10749                           
 10750                           ;MCU_B1.c: 32: Fosc_Set();
 10751                           
 10752                           ;incstack = 0
 10753                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10754  1F4A  319D  255F  319F   	fcall	_Fosc_Set
 10755                           
 10756                           ;MCU_B1.c: 34: IO_Set();
 10757  1F4D  3190  2090  319F   	fcall	_IO_Set
 10758                           
 10759                           ;MCU_B1.c: 36: ;;
 10760                           ;MCU_B1.c: 38: TMR1_Set();
 10761  1F50  319E  265E  319F   	fcall	_TMR1_Set
 10762                           
 10763                           ;MCU_B1.c: 40: ADC_Set();
 10764  1F53  319D  2589  319F   	fcall	_ADC_Set
 10765                           
 10766                           ;MCU_B1.c: 42: ;;
 10767                           ;MCU_B1.c: 44: ;;
 10768                           ;MCU_B1.c: 46: IOC_Set();
 10769  1F56  319E  2684  319F   	fcall	_IOC_Set
 10770                           
 10771                           ;MCU_B1.c: 48: ;;
 10772                           ;MCU_B1.c: 50: ;;
 10773                           ;MCU_B1.c: 52: WDT_Set();
 10774  1F59  319E  260C         	fcall	_WDT_Set
 10775  1F5B  0008               	return
 10776  1F5C                     __end_of_Mcu_Initialization:	
 10777                           
 10778                           	psect	text60
 10779  1E0C                     __ptext60:	
 10780 ;; *************** function _WDT_Set *****************
 10781 ;; Defined at:
 10782 ;;		line 1005 in file "../src/MCU_B1.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;		None
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;		None
 10787 ;; Return value:  Size  Location     Type
 10788 ;;		None               void
 10789 ;; Registers used:
 10790 ;;		wreg
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/0
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;Total ram usage:        1 bytes
 10801 ;; Hardware stack levels used:    1
 10802 ;; Hardware stack levels required when called:    5
 10803 ;; This function calls:
 10804 ;;		Nothing
 10805 ;; This function is called by:
 10806 ;;		_Mcu_Initialization
 10807 ;; This function uses a non-reentrant model
 10808 ;;
 10809                           
 10810                           
 10811                           ;psect for function _WDT_Set
 10812  1E0C                     _WDT_Set:	
 10813                           
 10814                           ;MCU_B1.c: 1012: WDTCON = 0b00010111;;
 10815                           
 10816                           ;incstack = 0
 10817                           ; Regs used in _WDT_Set: [wreg]
 10818  1E0C  3017               	movlw	23
 10819  1E0D  0021               	movlb	1	; select bank1
 10820  1E0E  0097               	movwf	23	;volatile
 10821                           
 10822                           ;MCU_B1.c: 1014: WDT.Enable = 1;
 10823  1E0F  1456               	bsf	_WDT^(0+128),0
 10824                           
 10825                           ;MCU_B1.c: 1015: WDT.Timer = 10;
 10826  1E10  300A               	movlw	10
 10827  1E11  0020               	movlb	0	; select bank0
 10828  1E12  00A0               	movwf	??_WDT_Set
 10829  1E13  0820               	movf	??_WDT_Set,w
 10830  1E14  0021               	movlb	1	; select bank1
 10831  1E15  00D7               	movwf	(_WDT^(0+128)+1)
 10832  1E16  0008               	return
 10833  1E17                     __end_of_WDT_Set:	
 10834                           
 10835                           	psect	text61
 10836  1E5E                     __ptext61:	
 10837 ;; *************** function _TMR1_Set *****************
 10838 ;; Defined at:
 10839 ;;		line 199 in file "../src/MCU_B1.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;		None
 10842 ;; Auto vars:     Size  Location     Type
 10843 ;;		None
 10844 ;; Return value:  Size  Location     Type
 10845 ;;		None               void
 10846 ;; Registers used:
 10847 ;;		wreg
 10848 ;; Tracked objects:
 10849 ;;		On entry : 0/0
 10850 ;;		On exit  : 0/0
 10851 ;;		Unchanged: 0/0
 10852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;Total ram usage:        0 bytes
 10858 ;; Hardware stack levels used:    1
 10859 ;; Hardware stack levels required when called:    5
 10860 ;; This function calls:
 10861 ;;		Nothing
 10862 ;; This function is called by:
 10863 ;;		_Mcu_Initialization
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           
 10868                           ;psect for function _TMR1_Set
 10869  1E5E                     _TMR1_Set:	
 10870                           
 10871                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
 10872                           
 10873                           ;incstack = 0
 10874                           ; Regs used in _TMR1_Set: [wreg]
 10875  1E5E  3041               	movlw	65
 10876  1E5F  0020               	movlb	0	; select bank0
 10877  1E60  0098               	movwf	24	;volatile
 10878                           
 10879                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
 10880  1E61  30FA               	movlw	250
 10881  1E62  0097               	movwf	23	;volatile
 10882                           
 10883                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
 10884  1E63  3038               	movlw	56
 10885  1E64  0096               	movwf	22	;volatile
 10886                           
 10887                           ;MCU_B1.c: 203: TMR1IE = 1;
 10888  1E65  0021               	movlb	1	; select bank1
 10889  1E66  1411               	bsf	17,0	;volatile
 10890                           
 10891                           ;MCU_B1.c: 204: PEIE = 1;
 10892  1E67  170B               	bsf	11,6	;volatile
 10893                           
 10894                           ;MCU_B1.c: 205: GIE = 1;
 10895  1E68  178B               	bsf	11,7	;volatile
 10896  1E69  0008               	return
 10897  1E6A                     __end_of_TMR1_Set:	
 10898                           
 10899                           	psect	text62
 10900  1090                     __ptext62:	
 10901 ;; *************** function _IO_Set *****************
 10902 ;; Defined at:
 10903 ;;		line 60 in file "../src/MCU_B1.c"
 10904 ;; Parameters:    Size  Location     Type
 10905 ;;		None
 10906 ;; Auto vars:     Size  Location     Type
 10907 ;;		None
 10908 ;; Return value:  Size  Location     Type
 10909 ;;		None               void
 10910 ;; Registers used:
 10911 ;;		wreg, status,2
 10912 ;; Tracked objects:
 10913 ;;		On entry : 0/0
 10914 ;;		On exit  : 0/0
 10915 ;;		Unchanged: 0/0
 10916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;Total ram usage:        0 bytes
 10922 ;; Hardware stack levels used:    1
 10923 ;; Hardware stack levels required when called:    5
 10924 ;; This function calls:
 10925 ;;		Nothing
 10926 ;; This function is called by:
 10927 ;;		_Mcu_Initialization
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           
 10932                           ;psect for function _IO_Set
 10933  1090                     _IO_Set:	
 10934                           
 10935                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10936                           
 10937                           ;incstack = 0
 10938                           ; Regs used in _IO_Set: [wreg+status,2]
 10939  1090  3077               	movlw	119
 10940  1091  0021               	movlb	1	; select bank1
 10941  1092  008C               	movwf	12	;volatile
 10942                           
 10943                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10944  1093  3007               	movlw	7
 10945  1094  008D               	movwf	13	;volatile
 10946                           
 10947                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10948  1095  300C               	movlw	12
 10949  1096  008E               	movwf	14	;volatile
 10950                           
 10951                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10952  1097  0022               	movlb	2	; select bank2
 10953  1098  018C               	clrf	12	;volatile
 10954                           
 10955                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10956  1099  3002               	movlw	2
 10957  109A  008D               	movwf	13	;volatile
 10958                           
 10959                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10960  109B  018E               	clrf	14	;volatile
 10961                           
 10962                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10963  109C  3022               	movlw	34
 10964  109D  0023               	movlb	3	; select bank3
 10965  109E  008C               	movwf	12	;volatile
 10966                           
 10967                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10968  109F  018D               	clrf	13	;volatile
 10969                           
 10970                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10971  10A0  018E               	clrf	14	;volatile
 10972                           
 10973                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10974  10A1  3077               	movlw	119
 10975  10A2  0020               	movlb	0	; select bank0
 10976  10A3  008C               	movwf	12	;volatile
 10977                           
 10978                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10979  10A4  3007               	movlw	7
 10980  10A5  008D               	movwf	13	;volatile
 10981                           
 10982                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10983  10A6  300C               	movlw	12
 10984  10A7  008E               	movwf	14	;volatile
 10985  10A8  0008               	return
 10986  10A9                     __end_of_IO_Set:	
 10987                           
 10988                           	psect	text63
 10989  1E84                     __ptext63:	
 10990 ;; *************** function _IOC_Set *****************
 10991 ;; Defined at:
 10992 ;;		line 367 in file "../src/MCU_B1.c"
 10993 ;; Parameters:    Size  Location     Type
 10994 ;;		None
 10995 ;; Auto vars:     Size  Location     Type
 10996 ;;		None
 10997 ;; Return value:  Size  Location     Type
 10998 ;;		None               void
 10999 ;; Registers used:
 11000 ;;		wreg, status,2
 11001 ;; Tracked objects:
 11002 ;;		On entry : 0/0
 11003 ;;		On exit  : 0/0
 11004 ;;		Unchanged: 0/0
 11005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;Total ram usage:        0 bytes
 11011 ;; Hardware stack levels used:    1
 11012 ;; Hardware stack levels required when called:    5
 11013 ;; This function calls:
 11014 ;;		Nothing
 11015 ;; This function is called by:
 11016 ;;		_Mcu_Initialization
 11017 ;; This function uses a non-reentrant model
 11018 ;;
 11019                           
 11020                           
 11021                           ;psect for function _IOC_Set
 11022  1E84                     _IOC_Set:	
 11023                           
 11024                           ;MCU_B1.c: 368: WPUB2 = 0;
 11025                           
 11026                           ;incstack = 0
 11027                           ; Regs used in _IOC_Set: [wreg+status,2]
 11028  1E84  0024               	movlb	4	; select bank4
 11029  1E85  110D               	bcf	13,2	;volatile
 11030                           
 11031                           ;MCU_B1.c: 371: IOCBP = 0b00000100;
 11032  1E86  3004               	movlw	4
 11033  1E87  0027               	movlb	7	; select bank7
 11034  1E88  0094               	movwf	20	;volatile
 11035                           
 11036                           ;MCU_B1.c: 372: IOCBN = 0b00000100;
 11037  1E89  3004               	movlw	4
 11038  1E8A  0095               	movwf	21	;volatile
 11039                           
 11040                           ;MCU_B1.c: 392: IOCBF = 0b00000000;
 11041  1E8B  0196               	clrf	22	;volatile
 11042                           
 11043                           ;MCU_B1.c: 394: IOCIE = 1;
 11044  1E8C  158B               	bsf	11,3	;volatile
 11045                           
 11046                           ;MCU_B1.c: 395: IOCIF = 0;
 11047  1E8D  100B               	bcf	11,0	;volatile
 11048                           
 11049                           ;MCU_B1.c: 396: PEIE = 1;
 11050  1E8E  170B               	bsf	11,6	;volatile
 11051                           
 11052                           ;MCU_B1.c: 397: GIE = 1;
 11053  1E8F  178B               	bsf	11,7	;volatile
 11054  1E90  0008               	return
 11055  1E91                     __end_of_IOC_Set:	
 11056                           
 11057                           	psect	text64
 11058  1D5F                     __ptext64:	
 11059 ;; *************** function _Fosc_Set *****************
 11060 ;; Defined at:
 11061 ;;		line 56 in file "../src/MCU_B1.c"
 11062 ;; Parameters:    Size  Location     Type
 11063 ;;		None
 11064 ;; Auto vars:     Size  Location     Type
 11065 ;;		None
 11066 ;; Return value:  Size  Location     Type
 11067 ;;		None               void
 11068 ;; Registers used:
 11069 ;;		wreg
 11070 ;; Tracked objects:
 11071 ;;		On entry : 0/0
 11072 ;;		On exit  : 0/0
 11073 ;;		Unchanged: 0/0
 11074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;Total ram usage:        0 bytes
 11080 ;; Hardware stack levels used:    1
 11081 ;; Hardware stack levels required when called:    5
 11082 ;; This function calls:
 11083 ;;		Nothing
 11084 ;; This function is called by:
 11085 ;;		_Mcu_Initialization
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           
 11090                           ;psect for function _Fosc_Set
 11091  1D5F                     _Fosc_Set:	
 11092                           
 11093                           ;MCU_B1.c: 57: OSCCON = 0x78;
 11094                           
 11095                           ;incstack = 0
 11096                           ; Regs used in _Fosc_Set: [wreg]
 11097  1D5F  3078               	movlw	120
 11098  1D60  0021               	movlb	1	; select bank1
 11099  1D61  0099               	movwf	25	;volatile
 11100  1D62  0008               	return
 11101  1D63                     __end_of_Fosc_Set:	
 11102                           
 11103                           	psect	text65
 11104  1D89                     __ptext65:	
 11105 ;; *************** function _ADC_Set *****************
 11106 ;; Defined at:
 11107 ;;		line 419 in file "../src/MCU_B1.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;		None               void
 11114 ;; Registers used:
 11115 ;;		wreg
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;Total ram usage:        0 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    5
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_Mcu_Initialization
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           
 11136                           ;psect for function _ADC_Set
 11137  1D89                     _ADC_Set:	
 11138                           
 11139                           ;MCU_B1.c: 420: ADCON1 = 0xf2;
 11140                           
 11141                           ;incstack = 0
 11142                           ; Regs used in _ADC_Set: [wreg]
 11143  1D89  30F2               	movlw	242
 11144  1D8A  0021               	movlb	1	; select bank1
 11145  1D8B  009E               	movwf	30	;volatile
 11146                           
 11147                           ;MCU_B1.c: 421: FVRCON = 0xc0;
 11148  1D8C  30C0               	movlw	192
 11149  1D8D  0022               	movlb	2	; select bank2
 11150  1D8E  0097               	movwf	23	;volatile
 11151  1D8F  0008               	return
 11152  1D90                     __end_of_ADC_Set:	
 11153                           
 11154                           	psect	text66
 11155  1E52                     __ptext66:	
 11156 ;; *************** function _LED_Main *****************
 11157 ;; Defined at:
 11158 ;;		line 47 in file "../src/LED_B1.c"
 11159 ;; Parameters:    Size  Location     Type
 11160 ;;		None
 11161 ;; Auto vars:     Size  Location     Type
 11162 ;;		None
 11163 ;; Return value:  Size  Location     Type
 11164 ;;		None               void
 11165 ;; Registers used:
 11166 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11167 ;; Tracked objects:
 11168 ;;		On entry : 0/0
 11169 ;;		On exit  : 0/0
 11170 ;;		Unchanged: 0/0
 11171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11175 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11176 ;;Total ram usage:        0 bytes
 11177 ;; Hardware stack levels used:    1
 11178 ;; Hardware stack levels required when called:    7
 11179 ;; This function calls:
 11180 ;;		_setLED_Main
 11181 ;; This function is called by:
 11182 ;;		_main
 11183 ;; This function uses a non-reentrant model
 11184 ;;
 11185                           
 11186                           
 11187                           ;psect for function _LED_Main
 11188  1E52                     _LED_Main:	
 11189                           
 11190                           ;LED_B1.c: 49: setLED_Main(1);
 11191                           
 11192                           ;incstack = 0
 11193                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11194  1E52  3001               	movlw	1
 11195  1E53  3194  24C0  319E   	fcall	_setLED_Main
 11196                           
 11197                           ;LED_B1.c: 52: setLED_Main(2);
 11198  1E56  3002               	movlw	2
 11199  1E57  3194  24C0  319E   	fcall	_setLED_Main
 11200                           
 11201                           ;LED_B1.c: 58: setLED_Main(99);
 11202  1E5A  3063               	movlw	99
 11203  1E5B  3194  24C0         	fcall	_setLED_Main
 11204  1E5D  0008               	return
 11205  1E5E                     __end_of_LED_Main:	
 11206                           
 11207                           	psect	text67
 11208  14C0                     __ptext67:	
 11209 ;; *************** function _setLED_Main *****************
 11210 ;; Defined at:
 11211 ;;		line 192 in file "../src/LED_B1.c"
 11212 ;; Parameters:    Size  Location     Type
 11213 ;;  led             1    wreg     unsigned char 
 11214 ;; Auto vars:     Size  Location     Type
 11215 ;;  led             1    4[BANK0 ] unsigned char 
 11216 ;; Return value:  Size  Location     Type
 11217 ;;		None               void
 11218 ;; Registers used:
 11219 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11220 ;; Tracked objects:
 11221 ;;		On entry : 0/0
 11222 ;;		On exit  : 0/0
 11223 ;;		Unchanged: 0/0
 11224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11225 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;Total ram usage:        3 bytes
 11230 ;; Hardware stack levels used:    1
 11231 ;; Hardware stack levels required when called:    6
 11232 ;; This function calls:
 11233 ;;		_LedPointSelect
 11234 ;; This function is called by:
 11235 ;;		_LED_Main
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           
 11240                           ;psect for function _setLED_Main
 11241  14C0                     _setLED_Main:	
 11242                           
 11243                           ;incstack = 0
 11244                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11245                           ;setLED_Main@led stored from wreg
 11246  14C0  0020               	movlb	0	; select bank0
 11247  14C1  00A4               	movwf	setLED_Main@led
 11248                           
 11249                           ;LED_B1.c: 193: LedPointSelect(led);
 11250  14C2  0824               	movf	setLED_Main@led,w
 11251  14C3  3190  20C3  3194   	fcall	_LedPointSelect
 11252                           
 11253                           ;LED_B1.c: 194: if (LED->GO == 1) {
 11254  14C6  0020               	movlb	0	; select bank0
 11255  14C7  086B               	movf	_LED,w
 11256  14C8  0086               	movwf	6
 11257  14C9  3001               	movlw	1	; select bank2/3
 11258  14CA  0087               	movwf	7
 11259  14CB  1C81               	btfss	1,1
 11260  14CC  0008               	return
 11261                           
 11262                           ;LED_B1.c: 195: LED->Time++;
 11263  14CD  0A6B               	incf	_LED,w
 11264  14CE  0086               	movwf	6
 11265  14CF  3001               	movlw	1	; select bank2/3
 11266  14D0  0087               	movwf	7
 11267  14D1  3001               	movlw	1
 11268  14D2  0781               	addwf	1,f
 11269  14D3  3141               	addfsr 1,1
 11270  14D4  1803               	skipnc
 11271  14D5  0A81               	incf	1,f
 11272                           
 11273                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 11274  14D6  0A6B               	incf	_LED,w
 11275  14D7  0086               	movwf	6
 11276  14D8  3001               	movlw	1	; select bank2/3
 11277  14D9  0087               	movwf	7
 11278  14DA  3F40               	moviw [0]fsr1
 11279  14DB  00A2               	movwf	??_setLED_Main
 11280  14DC  3F41               	moviw [1]fsr1
 11281  14DD  00A3               	movwf	??_setLED_Main+1
 11282  14DE  3000               	movlw	0
 11283  14DF  0223               	subwf	??_setLED_Main+1,w
 11284  14E0  3032               	movlw	50
 11285  14E1  1903               	skipnz
 11286  14E2  0222               	subwf	??_setLED_Main,w
 11287  14E3  1C03               	skipc
 11288  14E4  0008               	return
 11289                           
 11290                           ;LED_B1.c: 197: LED->Time = 0;
 11291  14E5  0A6B               	incf	_LED,w
 11292  14E6  0086               	movwf	6
 11293  14E7  3001               	movlw	1	; select bank2/3
 11294  14E8  0087               	movwf	7
 11295  14E9  3000               	movlw	0
 11296  14EA  3FC0               	movwi [0]fsr1
 11297  14EB  3FC1               	movwi [1]fsr1
 11298                           
 11299                           ;LED_B1.c: 199: if (led == 1) {
 11300  14EC  0824               	movf	setLED_Main@led,w
 11301  14ED  3A01               	xorlw	1
 11302  14EE  1D03               	skipz
 11303  14EF  2CF3               	goto	l8820
 11304                           
 11305                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 11306  14F0  3008               	movlw	8
 11307  14F1  068C               	xorwf	12,f
 11308                           
 11309                           ;LED_B1.c: 201: }
 11310  14F2  0008               	return
 11311  14F3                     l8820:	
 11312                           
 11313                           ;LED_B1.c: 204: else if (led == 2) {
 11314  14F3  0824               	movf	setLED_Main@led,w
 11315  14F4  3A02               	xorlw	2
 11316  14F5  1D03               	skipz
 11317  14F6  2CFA               	goto	l8824
 11318                           
 11319                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 11320  14F7  3080               	movlw	128
 11321  14F8  068E               	xorwf	14,f
 11322                           
 11323                           ;LED_B1.c: 206: }
 11324  14F9  0008               	return
 11325  14FA                     l8824:	
 11326                           
 11327                           ;LED_B1.c: 214: else if (led == 99) {
 11328  14FA  0824               	movf	setLED_Main@led,w
 11329  14FB  3A63               	xorlw	99
 11330  14FC  1D03               	skipz
 11331  14FD  0008               	return
 11332                           
 11333                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 11334  14FE  3020               	movlw	32
 11335  14FF  068D               	xorwf	13,f
 11336  1500  0008               	return
 11337  1501                     __end_of_setLED_Main:	
 11338                           
 11339                           	psect	text68
 11340  1E46                     __ptext68:	
 11341 ;; *************** function _LED_Initialization *****************
 11342 ;; Defined at:
 11343 ;;		line 31 in file "../src/LED_B1.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;		None               void
 11350 ;; Registers used:
 11351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;Total ram usage:        0 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:    8
 11364 ;; This function calls:
 11365 ;;		_setLED_Initialization
 11366 ;; This function is called by:
 11367 ;;		_main
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _LED_Initialization
 11373  1E46                     _LED_Initialization:	
 11374                           
 11375                           ;LED_B1.c: 33: setLED_Initialization(1);
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11379  1E46  3001               	movlw	1
 11380  1E47  319F  2739  319E   	fcall	_setLED_Initialization
 11381                           
 11382                           ;LED_B1.c: 36: setLED_Initialization(2);
 11383  1E4A  3002               	movlw	2
 11384  1E4B  319F  2739  319E   	fcall	_setLED_Initialization
 11385                           
 11386                           ;LED_B1.c: 42: setLED_Initialization(99);
 11387  1E4E  3063               	movlw	99
 11388  1E4F  319F  2739         	fcall	_setLED_Initialization
 11389  1E51  0008               	return
 11390  1E52                     __end_of_LED_Initialization:	
 11391                           
 11392                           	psect	text69
 11393  1F39                     __ptext69:	
 11394 ;; *************** function _setLED_Initialization *****************
 11395 ;; Defined at:
 11396 ;;		line 63 in file "../src/LED_B1.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  led             1    wreg     unsigned char 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;  led             1    4[BANK0 ] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;		None               void
 11403 ;; Registers used:
 11404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11413 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;Total ram usage:        1 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    7
 11417 ;; This function calls:
 11418 ;;		_LedPointSelect
 11419 ;;		_setLED
 11420 ;; This function is called by:
 11421 ;;		_LED_Initialization
 11422 ;; This function uses a non-reentrant model
 11423 ;;
 11424                           
 11425                           
 11426                           ;psect for function _setLED_Initialization
 11427  1F39                     _setLED_Initialization:	
 11428                           
 11429                           ;incstack = 0
 11430                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11431                           ;setLED_Initialization@led stored from wreg
 11432  1F39  0020               	movlb	0	; select bank0
 11433  1F3A  00A4               	movwf	setLED_Initialization@led
 11434                           
 11435                           ;LED_B1.c: 64: LedPointSelect(led);
 11436  1F3B  0824               	movf	setLED_Initialization@led,w
 11437  1F3C  3190  20C3  319F   	fcall	_LedPointSelect
 11438                           
 11439                           ;LED_B1.c: 65: LED->Enable = 1;
 11440  1F3F  0020               	movlb	0	; select bank0
 11441  1F40  086B               	movf	_LED,w
 11442  1F41  0086               	movwf	6
 11443  1F42  3001               	movlw	1	; select bank2/3
 11444  1F43  0087               	movwf	7
 11445  1F44  1401               	bsf	1,0
 11446                           
 11447                           ;LED_B1.c: 66: setLED(led, 0);
 11448  1F45  01A2               	clrf	setLED@command
 11449  1F46  0824               	movf	setLED_Initialization@led,w
 11450  1F47  3189  215A         	fcall	_setLED
 11451  1F49  0008               	return
 11452  1F4A                     __end_of_setLED_Initialization:	
 11453                           
 11454                           	psect	text70
 11455  07E1                     __ptext70:	
 11456 ;; *************** function _Flash_Memory_Main *****************
 11457 ;; Defined at:
 11458 ;;		line 900 in file "../src/MCU_B1.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;		None
 11461 ;; Auto vars:     Size  Location     Type
 11462 ;;		None
 11463 ;; Return value:  Size  Location     Type
 11464 ;;		None               void
 11465 ;; Registers used:
 11466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11467 ;; Tracked objects:
 11468 ;;		On entry : 0/0
 11469 ;;		On exit  : 0/0
 11470 ;;		Unchanged: 0/0
 11471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;Total ram usage:        0 bytes
 11477 ;; Hardware stack levels used:    1
 11478 ;; Hardware stack levels required when called:    8
 11479 ;; This function calls:
 11480 ;;		_Flash_Memory_Modify
 11481 ;; This function is called by:
 11482 ;;		_main
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           
 11487                           ;psect for function _Flash_Memory_Main
 11488  07E1                     _Flash_Memory_Main:	
 11489                           
 11490                           ;MCU_B1.c: 901: if (Memory.GO == 1) {
 11491                           
 11492                           ;incstack = 0
 11493                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11494  07E1  0022               	movlb	2	; select bank2
 11495  07E2  1CDB               	btfss	(_Memory^(0+256)+36),1
 11496  07E3  0008               	return
 11497                           
 11498                           ;MCU_B1.c: 902: if (Memory.Modify == 1) {
 11499  07E4  1C5B               	btfss	(_Memory^(0+256)+36),0
 11500  07E5  2FFE               	goto	l1256
 11501                           
 11502                           ;MCU_B1.c: 903: Memory.Time++;
 11503  07E6  3001               	movlw	1
 11504  07E7  07D9               	addwf	(_Memory^(0+256)+34),f
 11505  07E8  3000               	movlw	0
 11506  07E9  3DDA               	addwfc	((_Memory+1)^(0+256)+34),f
 11507                           
 11508                           ;MCU_B1.c: 904: if (Memory.Time == 25)
 11509  07EA  3022               	movlw	34
 11510  07EB  3E37               	addlw	_Memory& (0+255)
 11511  07EC  0086               	movwf	6
 11512  07ED  3001               	movlw	1	; select bank2/3
 11513  07EE  0087               	movwf	7
 11514  07EF  3F40               	moviw [0]fsr1
 11515  07F0  3A19               	xorlw	25
 11516  07F1  1D03               	skipz
 11517  07F2  2FF5               	goto	u9695
 11518  07F3  3F41               	moviw [1]fsr1
 11519  07F4  3A00               	xorlw	0
 11520  07F5                     u9695:	
 11521  07F5  1D03               	skipz
 11522  07F6  0008               	return
 11523                           
 11524                           ;MCU_B1.c: 905: {
 11525                           ;MCU_B1.c: 906: Memory.Time = 0;
 11526  07F7  01D9               	clrf	(_Memory^(0+256)+34)
 11527  07F8  01DA               	clrf	((_Memory+1)^(0+256)+34)
 11528                           
 11529                           ;MCU_B1.c: 907: Memory.Modify = 0;
 11530  07F9  105B               	bcf	(_Memory^(0+256)+36),0
 11531                           
 11532                           ;MCU_B1.c: 908: Memory.GO = 0;
 11533  07FA  10DB               	bcf	(_Memory^(0+256)+36),1
 11534                           
 11535                           ;MCU_B1.c: 909: Flash_Memory_Modify();
 11536  07FB  3195  2585         	fcall	_Flash_Memory_Modify
 11537                           
 11538                           ;MCU_B1.c: 910: }
 11539                           ;MCU_B1.c: 911: } else {
 11540  07FD  0008               	return
 11541  07FE                     l1256:	
 11542                           
 11543                           ;MCU_B1.c: 912: Memory.GO = 0;
 11544  07FE  10DB               	bcf	(_Memory^(0+256)+36),1
 11545  07FF  0008               	return
 11546  0800                     __end_of_Flash_Memory_Main:	
 11547                           
 11548                           	psect	text71
 11549  1585                     __ptext71:	
 11550 ;; *************** function _Flash_Memory_Modify *****************
 11551 ;; Defined at:
 11552 ;;		line 969 in file "../src/MCU_B1.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;		None
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;  i               1    5[BANK0 ] unsigned char 
 11557 ;; Return value:  Size  Location     Type
 11558 ;;		None               void
 11559 ;; Registers used:
 11560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11561 ;; Tracked objects:
 11562 ;;		On entry : 0/0
 11563 ;;		On exit  : 0/0
 11564 ;;		Unchanged: 0/0
 11565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;Total ram usage:        2 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; Hardware stack levels required when called:    7
 11573 ;; This function calls:
 11574 ;;		_Flash_Memory_Erasing
 11575 ;;		_Flash_Memory_Read
 11576 ;;		_Flash_Memory_Write
 11577 ;; This function is called by:
 11578 ;;		_Flash_Memory_Main
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           
 11583                           ;psect for function _Flash_Memory_Modify
 11584  1585                     _Flash_Memory_Modify:	
 11585                           
 11586                           ;MCU_B1.c: 970: char i = 0;
 11587                           
 11588                           ;incstack = 0
 11589                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11590  1585  0020               	movlb	0	; select bank0
 11591  1586  01A5               	clrf	Flash_Memory_Modify@i
 11592                           
 11593                           ;MCU_B1.c: 971: for (i = 0; i < 32; i++) {
 11594  1587  01A5               	clrf	Flash_Memory_Modify@i
 11595  1588  3020               	movlw	32
 11596  1589  0225               	subwf	Flash_Memory_Modify@i,w
 11597  158A  1803               	btfsc	3,0
 11598  158B  2DA1               	goto	l8904
 11599  158C                     l8898:	
 11600                           
 11601                           ;MCU_B1.c: 972: Memory.Data[i] = Flash_Memory_Read(i);
 11602  158C  0825               	movf	Flash_Memory_Modify@i,w
 11603  158D  3190  20A9  3195   	fcall	_Flash_Memory_Read
 11604  1590  0020               	movlb	0	; select bank0
 11605  1591  00A4               	movwf	??_Flash_Memory_Modify
 11606  1592  0825               	movf	Flash_Memory_Modify@i,w
 11607  1593  3E37               	addlw	_Memory& (0+255)
 11608  1594  0086               	movwf	6
 11609  1595  3001               	movlw	1	; select bank2/3
 11610  1596  0087               	movwf	7
 11611  1597  0824               	movf	??_Flash_Memory_Modify,w
 11612  1598  0081               	movwf	1
 11613  1599  3001               	movlw	1
 11614  159A  00A4               	movwf	??_Flash_Memory_Modify
 11615  159B  0824               	movf	??_Flash_Memory_Modify,w
 11616  159C  07A5               	addwf	Flash_Memory_Modify@i,f
 11617  159D  3020               	movlw	32
 11618  159E  0225               	subwf	Flash_Memory_Modify@i,w
 11619  159F  1C03               	skipc
 11620  15A0  2D8C               	goto	l8898
 11621  15A1                     l8904:	
 11622                           
 11623                           ;MCU_B1.c: 973: }
 11624                           ;MCU_B1.c: 974: Memory.Data[0]=product->Data[12];
 11625  15A1  086D               	movf	_product,w
 11626  15A2  0086               	movwf	6
 11627  15A3  3001               	movlw	1	; select bank2/3
 11628  15A4  0087               	movwf	7
 11629  15A5  3001               	movlw	1	; select bank2/3
 11630  15A6  3F4C               	moviw [12]fsr1
 11631  15A7  0022               	movlb	2	; select bank2
 11632  15A8  00B7               	movwf	_Memory^(0+256)
 11633                           
 11634                           ;MCU_B1.c: 975: Memory.Data[1]=product->Data[13];
 11635  15A9  0020               	movlb	0	; select bank0
 11636  15AA  086D               	movf	_product,w
 11637  15AB  0086               	movwf	6
 11638  15AC  3001               	movlw	1	; select bank2/3
 11639  15AD  0087               	movwf	7
 11640  15AE  3001               	movlw	1	; select bank2/3
 11641  15AF  3F4D               	moviw [13]fsr1
 11642  15B0  0022               	movlb	2	; select bank2
 11643  15B1  00B8               	movwf	(_Memory^(0+256)+1)
 11644                           
 11645                           ;MCU_B1.c: 976: Memory.Data[2]=product->Data[14];
 11646  15B2  0020               	movlb	0	; select bank0
 11647  15B3  086D               	movf	_product,w
 11648  15B4  0086               	movwf	6
 11649  15B5  3001               	movlw	1	; select bank2/3
 11650  15B6  0087               	movwf	7
 11651  15B7  3001               	movlw	1	; select bank2/3
 11652  15B8  3F4E               	moviw [14]fsr1
 11653  15B9  0022               	movlb	2	; select bank2
 11654  15BA  00B9               	movwf	(_Memory^(0+256)+2)
 11655                           
 11656                           ;MCU_B1.c: 982: if (Memory.LoopSave == 1) {
 11657  15BB  1D5B               	btfss	(_Memory^(0+256)+36),2
 11658  15BC  2DC1               	goto	l1278
 11659                           
 11660                           ;MCU_B1.c: 983: Memory.LoopSave = 0;
 11661  15BD  115B               	bcf	(_Memory^(0+256)+36),2
 11662                           
 11663                           ;MCU_B1.c: 984: myMain.FirstOpen = 0;
 11664  15BE  0021               	movlb	1	; select bank1
 11665  15BF  1320               	bcf	_myMain^(0+128),6
 11666                           
 11667                           ;MCU_B1.c: 985: myMain.First = 0;
 11668  15C0  1021               	bcf	(_myMain^(0+128)+1),0
 11669  15C1                     l1278:	
 11670                           
 11671                           ;MCU_B1.c: 987: }
 11672                           ;MCU_B1.c: 988: GIE = 0;
 11673  15C1  138B               	bcf	11,7	;volatile
 11674                           
 11675                           ;MCU_B1.c: 989: Flash_Memory_Erasing();
 11676  15C2  319E  263A  3195   	fcall	_Flash_Memory_Erasing
 11677                           
 11678                           ;MCU_B1.c: 990: Flash_Memory_Write();
 11679  15C5  3193  2313         	fcall	_Flash_Memory_Write
 11680                           
 11681                           ;MCU_B1.c: 991: GIE = 1;
 11682  15C7  178B               	bsf	11,7	;volatile
 11683  15C8  0008               	return
 11684  15C9                     __end_of_Flash_Memory_Modify:	
 11685                           
 11686                           	psect	text72
 11687  1E3A                     __ptext72:	
 11688 ;; *************** function _Flash_Memory_Erasing *****************
 11689 ;; Defined at:
 11690 ;;		line 958 in file "../src/MCU_B1.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;		None
 11693 ;; Auto vars:     Size  Location     Type
 11694 ;;		None
 11695 ;; Return value:  Size  Location     Type
 11696 ;;		None               void
 11697 ;; Registers used:
 11698 ;;		wreg, status,2, status,0, pclath, cstack
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11708 ;;Total ram usage:        0 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    6
 11711 ;; This function calls:
 11712 ;;		_Flash_Memory_Unlock
 11713 ;; This function is called by:
 11714 ;;		_Flash_Memory_Modify
 11715 ;; This function uses a non-reentrant model
 11716 ;;
 11717                           
 11718                           
 11719                           ;psect for function _Flash_Memory_Erasing
 11720  1E3A                     _Flash_Memory_Erasing:	
 11721                           
 11722                           ;MCU_B1.c: 959: CFGS = 0;
 11723                           
 11724                           ;incstack = 0
 11725                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11726  1E3A  0023               	movlb	3	; select bank3
 11727  1E3B  1315               	bcf	21,6	;volatile
 11728                           
 11729                           ;MCU_B1.c: 960: PMADRH = 0x30;
 11730  1E3C  3030               	movlw	48
 11731  1E3D  0092               	movwf	18	;volatile
 11732                           
 11733                           ;MCU_B1.c: 961: PMADRL = 0x00;
 11734  1E3E  0191               	clrf	17	;volatile
 11735                           
 11736                           ;MCU_B1.c: 962: FREE = 1;
 11737  1E3F  1615               	bsf	21,4	;volatile
 11738                           
 11739                           ;MCU_B1.c: 963: WREN = 1;
 11740  1E40  1515               	bsf	21,2	;volatile
 11741                           
 11742                           ;MCU_B1.c: 964: Flash_Memory_Unlock();
 11743  1E41  319D  25B0         	fcall	_Flash_Memory_Unlock
 11744                           
 11745                           ;MCU_B1.c: 965: WREN = 0;
 11746  1E43  0023               	movlb	3	; select bank3
 11747  1E44  1115               	bcf	21,2	;volatile
 11748  1E45  0008               	return
 11749  1E46                     __end_of_Flash_Memory_Erasing:	
 11750                           
 11751                           	psect	text73
 11752  0500                     __ptext73:	
 11753 ;; *************** function _Flash_Memory_Initialization *****************
 11754 ;; Defined at:
 11755 ;;		line 859 in file "../src/MCU_B1.c"
 11756 ;; Parameters:    Size  Location     Type
 11757 ;;		None
 11758 ;; Auto vars:     Size  Location     Type
 11759 ;;  i               1   62[BANK0 ] unsigned char 
 11760 ;; Return value:  Size  Location     Type
 11761 ;;		None               void
 11762 ;; Registers used:
 11763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11764 ;; Tracked objects:
 11765 ;;		On entry : 0/0
 11766 ;;		On exit  : 0/0
 11767 ;;		Unchanged: 0/0
 11768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;Total ram usage:        2 bytes
 11774 ;; Hardware stack levels used:    1
 11775 ;; Hardware stack levels required when called:    8
 11776 ;; This function calls:
 11777 ;;		_Flash_Memory_Read
 11778 ;;		_Flash_Memory_Write
 11779 ;;		_setPercentValue
 11780 ;; This function is called by:
 11781 ;;		_main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _Flash_Memory_Initialization
 11787  0500                     _Flash_Memory_Initialization:	
 11788                           
 11789                           ;MCU_B1.c: 860: char i = 0;
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11793  0500  0020               	movlb	0	; select bank0
 11794  0501  01DE               	clrf	Flash_Memory_Initialization@i
 11795                           
 11796                           ;MCU_B1.c: 861: if (Flash_Memory_Read(31) == 0xaa) {
 11797  0502  301F               	movlw	31
 11798  0503  3190  20A9  3185   	fcall	_Flash_Memory_Read
 11799  0506  3AAA               	xorlw	170
 11800  0507  1D03               	skipz
 11801  0508  2D72               	goto	l9332
 11802                           
 11803                           ;MCU_B1.c: 862: product->Data[12] = Flash_Memory_Read(0);
 11804  0509  3000               	movlw	0
 11805  050A  3190  20A9  3185   	fcall	_Flash_Memory_Read
 11806  050D  0020               	movlb	0	; select bank0
 11807  050E  00DD               	movwf	??_Flash_Memory_Initialization
 11808  050F  086D               	movf	_product,w
 11809  0510  3E0C               	addlw	12
 11810  0511  0086               	movwf	6
 11811  0512  3001               	movlw	1	; select bank2/3
 11812  0513  0087               	movwf	7
 11813  0514  085D               	movf	??_Flash_Memory_Initialization,w
 11814  0515  0081               	movwf	1
 11815                           
 11816                           ;MCU_B1.c: 863: product->Data[13] = Flash_Memory_Read(1);
 11817  0516  3001               	movlw	1
 11818  0517  3190  20A9  3185   	fcall	_Flash_Memory_Read
 11819  051A  0020               	movlb	0	; select bank0
 11820  051B  00DD               	movwf	??_Flash_Memory_Initialization
 11821  051C  086D               	movf	_product,w
 11822  051D  3E0D               	addlw	13
 11823  051E  0086               	movwf	6
 11824  051F  3001               	movlw	1	; select bank2/3
 11825  0520  0087               	movwf	7
 11826  0521  085D               	movf	??_Flash_Memory_Initialization,w
 11827  0522  0081               	movwf	1
 11828                           
 11829                           ;MCU_B1.c: 864: product->Data[14] = Flash_Memory_Read(2);
 11830  0523  3002               	movlw	2
 11831  0524  3190  20A9  3185   	fcall	_Flash_Memory_Read
 11832  0527  0020               	movlb	0	; select bank0
 11833  0528  00DD               	movwf	??_Flash_Memory_Initialization
 11834  0529  086D               	movf	_product,w
 11835  052A  3E0E               	addlw	14
 11836  052B  0086               	movwf	6
 11837  052C  3001               	movlw	1	; select bank2/3
 11838  052D  0087               	movwf	7
 11839  052E  085D               	movf	??_Flash_Memory_Initialization,w
 11840  052F  0081               	movwf	1
 11841                           
 11842                           ;MCU_B1.c: 870: i = setPercentValue(((char)((100-60)*0.8)));
 11843  0530  3020               	movlw	32
 11844  0531  3195  25C9  3185   	fcall	_setPercentValue
 11845  0534  0020               	movlb	0	; select bank0
 11846  0535  00DD               	movwf	??_Flash_Memory_Initialization
 11847  0536  085D               	movf	??_Flash_Memory_Initialization,w
 11848  0537  00DE               	movwf	Flash_Memory_Initialization@i
 11849                           
 11850                           ;MCU_B1.c: 871: product->Data[21] = i;
 11851  0538  085E               	movf	Flash_Memory_Initialization@i,w
 11852  0539  00DD               	movwf	??_Flash_Memory_Initialization
 11853  053A  086D               	movf	_product,w
 11854  053B  3E15               	addlw	21
 11855  053C  0086               	movwf	6
 11856  053D  3001               	movlw	1	; select bank2/3
 11857  053E  0087               	movwf	7
 11858  053F  085D               	movf	??_Flash_Memory_Initialization,w
 11859  0540  0081               	movwf	1
 11860                           
 11861                           ;MCU_B1.c: 872: product->Data[22] = i;
 11862  0541  085E               	movf	Flash_Memory_Initialization@i,w
 11863  0542  00DD               	movwf	??_Flash_Memory_Initialization
 11864  0543  086D               	movf	_product,w
 11865  0544  3E16               	addlw	22
 11866  0545  0086               	movwf	6
 11867  0546  3001               	movlw	1	; select bank2/3
 11868  0547  0087               	movwf	7
 11869  0548  085D               	movf	??_Flash_Memory_Initialization,w
 11870  0549  0081               	movwf	1
 11871                           
 11872                           ;MCU_B1.c: 873: product->Data[23] = i;
 11873  054A  085E               	movf	Flash_Memory_Initialization@i,w
 11874  054B  00DD               	movwf	??_Flash_Memory_Initialization
 11875  054C  086D               	movf	_product,w
 11876  054D  3E17               	addlw	23
 11877  054E  0086               	movwf	6
 11878  054F  3001               	movlw	1	; select bank2/3
 11879  0550  0087               	movwf	7
 11880  0551  085D               	movf	??_Flash_Memory_Initialization,w
 11881  0552  0081               	movwf	1
 11882                           
 11883                           ;MCU_B1.c: 875: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11884  0553  086D               	movf	_product,w
 11885  0554  3E0C               	addlw	12
 11886  0555  0086               	movwf	6
 11887  0556  3001               	movlw	1	; select bank2/3
 11888  0557  0087               	movwf	7
 11889  0558  0801               	movf	1,w
 11890  0559  3AFF               	xorlw	255
 11891  055A  1D03               	skipz
 11892  055B  0008               	return
 11893  055C  086D               	movf	_product,w
 11894  055D  3E0D               	addlw	13
 11895  055E  0086               	movwf	6
 11896  055F  3001               	movlw	1	; select bank2/3
 11897  0560  0087               	movwf	7
 11898  0561  0801               	movf	1,w
 11899  0562  3AFF               	xorlw	255
 11900  0563  1D03               	skipz
 11901  0564  0008               	return
 11902  0565  086D               	movf	_product,w
 11903  0566  3E0E               	addlw	14
 11904  0567  0086               	movwf	6
 11905  0568  3001               	movlw	1	; select bank2/3
 11906  0569  0087               	movwf	7
 11907  056A  0801               	movf	1,w
 11908  056B  3AFF               	xorlw	255
 11909  056C  1D03               	skipz
 11910  056D  0008               	return
 11911                           
 11912                           ;MCU_B1.c: 876: myMain.FirstOpen = 1;
 11913  056E  0021               	movlb	1	; select bank1
 11914  056F  1720               	bsf	_myMain^(0+128),6
 11915                           
 11916                           ;MCU_B1.c: 877: myMain.First = 1;
 11917  0570  1421               	bsf	(_myMain^(0+128)+1),0
 11918                           
 11919                           ;MCU_B1.c: 878: }
 11920                           ;MCU_B1.c: 879: } else {
 11921  0571  0008               	return
 11922  0572                     l9332:	
 11923                           
 11924                           ;MCU_B1.c: 880: i = setPercentValue(((char)((100-60)*0.8)));
 11925  0572  3020               	movlw	32
 11926  0573  3195  25C9  3185   	fcall	_setPercentValue
 11927  0576  0020               	movlb	0	; select bank0
 11928  0577  00DD               	movwf	??_Flash_Memory_Initialization
 11929  0578  085D               	movf	??_Flash_Memory_Initialization,w
 11930  0579  00DE               	movwf	Flash_Memory_Initialization@i
 11931                           
 11932                           ;MCU_B1.c: 881: Memory.Data[0]=0xff;
 11933  057A  30FF               	movlw	255
 11934  057B  00DD               	movwf	??_Flash_Memory_Initialization
 11935  057C  085D               	movf	??_Flash_Memory_Initialization,w
 11936  057D  0022               	movlb	2	; select bank2
 11937  057E  00B7               	movwf	_Memory^(0+256)
 11938                           
 11939                           ;MCU_B1.c: 882: Memory.Data[1]=0xff;
 11940  057F  30FF               	movlw	255
 11941  0580  0020               	movlb	0	; select bank0
 11942  0581  00DD               	movwf	??_Flash_Memory_Initialization
 11943  0582  085D               	movf	??_Flash_Memory_Initialization,w
 11944  0583  0022               	movlb	2	; select bank2
 11945  0584  00B8               	movwf	(_Memory^(0+256)+1)
 11946                           
 11947                           ;MCU_B1.c: 883: Memory.Data[2]=0xff;
 11948  0585  30FF               	movlw	255
 11949  0586  0020               	movlb	0	; select bank0
 11950  0587  00DD               	movwf	??_Flash_Memory_Initialization
 11951  0588  085D               	movf	??_Flash_Memory_Initialization,w
 11952  0589  0022               	movlb	2	; select bank2
 11953  058A  00B9               	movwf	(_Memory^(0+256)+2)
 11954                           
 11955                           ;MCU_B1.c: 884: Memory.Data[3]=0xff;
 11956  058B  30FF               	movlw	255
 11957  058C  0020               	movlb	0	; select bank0
 11958  058D  00DD               	movwf	??_Flash_Memory_Initialization
 11959  058E  085D               	movf	??_Flash_Memory_Initialization,w
 11960  058F  0022               	movlb	2	; select bank2
 11961  0590  00BA               	movwf	(_Memory^(0+256)+3)
 11962                           
 11963                           ;MCU_B1.c: 885: Memory.Data[4]=0xff;
 11964  0591  30FF               	movlw	255
 11965  0592  0020               	movlb	0	; select bank0
 11966  0593  00DD               	movwf	??_Flash_Memory_Initialization
 11967  0594  085D               	movf	??_Flash_Memory_Initialization,w
 11968  0595  0022               	movlb	2	; select bank2
 11969  0596  00BB               	movwf	(_Memory^(0+256)+4)
 11970                           
 11971                           ;MCU_B1.c: 886: Memory.Data[5]=0xff;
 11972  0597  30FF               	movlw	255
 11973  0598  0020               	movlb	0	; select bank0
 11974  0599  00DD               	movwf	??_Flash_Memory_Initialization
 11975  059A  085D               	movf	??_Flash_Memory_Initialization,w
 11976  059B  0022               	movlb	2	; select bank2
 11977  059C  00BC               	movwf	(_Memory^(0+256)+5)
 11978                           
 11979                           ;MCU_B1.c: 887: Memory.Data[31]=0xaa;
 11980  059D  30AA               	movlw	170
 11981  059E  0020               	movlb	0	; select bank0
 11982  059F  00DD               	movwf	??_Flash_Memory_Initialization
 11983  05A0  085D               	movf	??_Flash_Memory_Initialization,w
 11984  05A1  0022               	movlb	2	; select bank2
 11985  05A2  00D6               	movwf	(_Memory^(0+256)+31)
 11986                           
 11987                           ;MCU_B1.c: 888: product->Data[21] = i;
 11988  05A3  0020               	movlb	0	; select bank0
 11989  05A4  085E               	movf	Flash_Memory_Initialization@i,w
 11990  05A5  00DD               	movwf	??_Flash_Memory_Initialization
 11991  05A6  086D               	movf	_product,w
 11992  05A7  3E15               	addlw	21
 11993  05A8  0086               	movwf	6
 11994  05A9  3001               	movlw	1	; select bank2/3
 11995  05AA  0087               	movwf	7
 11996  05AB  085D               	movf	??_Flash_Memory_Initialization,w
 11997  05AC  0081               	movwf	1
 11998                           
 11999                           ;MCU_B1.c: 889: product->Data[22] = i;
 12000  05AD  085E               	movf	Flash_Memory_Initialization@i,w
 12001  05AE  00DD               	movwf	??_Flash_Memory_Initialization
 12002  05AF  086D               	movf	_product,w
 12003  05B0  3E16               	addlw	22
 12004  05B1  0086               	movwf	6
 12005  05B2  3001               	movlw	1	; select bank2/3
 12006  05B3  0087               	movwf	7
 12007  05B4  085D               	movf	??_Flash_Memory_Initialization,w
 12008  05B5  0081               	movwf	1
 12009                           
 12010                           ;MCU_B1.c: 890: product->Data[23] = i;
 12011  05B6  085E               	movf	Flash_Memory_Initialization@i,w
 12012  05B7  00DD               	movwf	??_Flash_Memory_Initialization
 12013  05B8  086D               	movf	_product,w
 12014  05B9  3E17               	addlw	23
 12015  05BA  0086               	movwf	6
 12016  05BB  3001               	movlw	1	; select bank2/3
 12017  05BC  0087               	movwf	7
 12018  05BD  085D               	movf	??_Flash_Memory_Initialization,w
 12019  05BE  0081               	movwf	1
 12020                           
 12021                           ;MCU_B1.c: 891: GIE = 0;
 12022  05BF  138B               	bcf	11,7	;volatile
 12023                           
 12024                           ;MCU_B1.c: 892: Flash_Memory_Write();
 12025  05C0  3193  2313         	fcall	_Flash_Memory_Write
 12026                           
 12027                           ;MCU_B1.c: 893: GIE = 1;
 12028  05C2  178B               	bsf	11,7	;volatile
 12029                           
 12030                           ;MCU_B1.c: 894: myMain.FirstOpen = 1;
 12031  05C3  0021               	movlb	1	; select bank1
 12032  05C4  1720               	bsf	_myMain^(0+128),6
 12033                           
 12034                           ;MCU_B1.c: 895: myMain.First = 1;
 12035  05C5  1421               	bsf	(_myMain^(0+128)+1),0
 12036  05C6  0008               	return
 12037  05C7                     __end_of_Flash_Memory_Initialization:	
 12038                           
 12039                           	psect	text74
 12040  1313                     __ptext74:	
 12041 ;; *************** function _Flash_Memory_Write *****************
 12042 ;; Defined at:
 12043 ;;		line 939 in file "../src/MCU_B1.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;  i               1    1[BANK0 ] unsigned char 
 12048 ;; Return value:  Size  Location     Type
 12049 ;;		None               void
 12050 ;; Registers used:
 12051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12059 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12060 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12061 ;;Total ram usage:        2 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    6
 12064 ;; This function calls:
 12065 ;;		_Flash_Memory_Unlock
 12066 ;; This function is called by:
 12067 ;;		_Flash_Memory_Initialization
 12068 ;;		_Flash_Memory_Modify
 12069 ;; This function uses a non-reentrant model
 12070 ;;
 12071                           
 12072                           
 12073                           ;psect for function _Flash_Memory_Write
 12074  1313                     _Flash_Memory_Write:	
 12075                           
 12076                           ;MCU_B1.c: 940: char i = 0;
 12077                           
 12078                           ;incstack = 0
 12079                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12080  1313  0020               	movlb	0	; select bank0
 12081  1314  01A1               	clrf	Flash_Memory_Write@i
 12082                           
 12083                           ;MCU_B1.c: 941: CFGS = 0;
 12084  1315  0023               	movlb	3	; select bank3
 12085  1316  1315               	bcf	21,6	;volatile
 12086                           
 12087                           ;MCU_B1.c: 942: PMADRH = 0x30;
 12088  1317  3030               	movlw	48
 12089  1318  0092               	movwf	18	;volatile
 12090                           
 12091                           ;MCU_B1.c: 943: PMDATH = 0;
 12092  1319  0194               	clrf	20	;volatile
 12093                           
 12094                           ;MCU_B1.c: 944: FREE = 0;
 12095  131A  1215               	bcf	21,4	;volatile
 12096                           
 12097                           ;MCU_B1.c: 945: LWLO = 1;
 12098  131B  1695               	bsf	21,5	;volatile
 12099                           
 12100                           ;MCU_B1.c: 946: WREN = 1;
 12101  131C  1515               	bsf	21,2	;volatile
 12102                           
 12103                           ;MCU_B1.c: 947: for (i = 0; i < 32; i++) {
 12104  131D  0020               	movlb	0	; select bank0
 12105  131E  01A1               	clrf	Flash_Memory_Write@i
 12106  131F  3020               	movlw	32
 12107  1320  0221               	subwf	Flash_Memory_Write@i,w
 12108  1321  1803               	btfsc	3,0
 12109  1322  2B3B               	goto	l1269
 12110  1323                     l8482:	
 12111                           
 12112                           ;MCU_B1.c: 948: PMADRL = i;
 12113  1323  0821               	movf	Flash_Memory_Write@i,w
 12114  1324  0023               	movlb	3	; select bank3
 12115  1325  0091               	movwf	17	;volatile
 12116                           
 12117                           ;MCU_B1.c: 949: PMDATL = Memory.Data[i];
 12118  1326  0020               	movlb	0	; select bank0
 12119  1327  0821               	movf	Flash_Memory_Write@i,w
 12120  1328  3E37               	addlw	_Memory& (0+255)
 12121  1329  0086               	movwf	6
 12122  132A  3001               	movlw	1	; select bank2/3
 12123  132B  0087               	movwf	7
 12124  132C  0801               	movf	1,w
 12125  132D  0023               	movlb	3	; select bank3
 12126  132E  0093               	movwf	19	;volatile
 12127                           
 12128                           ;MCU_B1.c: 950: Flash_Memory_Unlock();
 12129  132F  319D  25B0  3193   	fcall	_Flash_Memory_Unlock
 12130  1332  3001               	movlw	1
 12131  1333  0020               	movlb	0	; select bank0
 12132  1334  00A0               	movwf	??_Flash_Memory_Write
 12133  1335  0820               	movf	??_Flash_Memory_Write,w
 12134  1336  07A1               	addwf	Flash_Memory_Write@i,f
 12135  1337  3020               	movlw	32
 12136  1338  0221               	subwf	Flash_Memory_Write@i,w
 12137  1339  1C03               	skipc
 12138  133A  2B23               	goto	l8482
 12139  133B                     l1269:	
 12140                           
 12141                           ;MCU_B1.c: 951: }
 12142                           ;MCU_B1.c: 952: LWLO = 0;
 12143  133B  0023               	movlb	3	; select bank3
 12144  133C  1295               	bcf	21,5	;volatile
 12145                           
 12146                           ;MCU_B1.c: 953: Flash_Memory_Unlock();
 12147  133D  319D  25B0         	fcall	_Flash_Memory_Unlock
 12148                           
 12149                           ;MCU_B1.c: 954: WREN = 0;
 12150  133F  0023               	movlb	3	; select bank3
 12151  1340  1115               	bcf	21,2	;volatile
 12152  1341  0008               	return
 12153  1342                     __end_of_Flash_Memory_Write:	
 12154                           
 12155                           	psect	text75
 12156  1DB0                     __ptext75:	
 12157 ;; *************** function _Flash_Memory_Unlock *****************
 12158 ;; Defined at:
 12159 ;;		line 918 in file "../src/MCU_B1.c"
 12160 ;; Parameters:    Size  Location     Type
 12161 ;;		None
 12162 ;; Auto vars:     Size  Location     Type
 12163 ;;		None
 12164 ;; Return value:  Size  Location     Type
 12165 ;;		None               void
 12166 ;; Registers used:
 12167 ;;		wreg
 12168 ;; Tracked objects:
 12169 ;;		On entry : 0/0
 12170 ;;		On exit  : 0/0
 12171 ;;		Unchanged: 0/0
 12172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12177 ;;Total ram usage:        0 bytes
 12178 ;; Hardware stack levels used:    1
 12179 ;; Hardware stack levels required when called:    5
 12180 ;; This function calls:
 12181 ;;		Nothing
 12182 ;; This function is called by:
 12183 ;;		_Flash_Memory_Write
 12184 ;;		_Flash_Memory_Erasing
 12185 ;; This function uses a non-reentrant model
 12186 ;;
 12187                           
 12188                           
 12189                           ;psect for function _Flash_Memory_Unlock
 12190  1DB0                     _Flash_Memory_Unlock:	
 12191                           
 12192                           ;MCU_B1.c: 919: PMCON2 = 0x55;
 12193                           
 12194                           ;incstack = 0
 12195                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12196  1DB0  3055               	movlw	85
 12197  1DB1  0023               	movlb	3	; select bank3
 12198  1DB2  0096               	movwf	22	;volatile
 12199                           
 12200                           ;MCU_B1.c: 920: PMCON2 = 0xaa;
 12201  1DB3  30AA               	movlw	170
 12202  1DB4  0096               	movwf	22	;volatile
 12203                           
 12204                           ;MCU_B1.c: 921: WR = 1;
 12205  1DB5  1495               	bsf	21,1	;volatile
 12206                           
 12207                           ;MCU_B1.c: 922: __nop();
 12208  1DB6  0000               	nop
 12209                           
 12210                           ;MCU_B1.c: 923: __nop();
 12211  1DB7  0000               	nop
 12212  1DB8  0008               	return
 12213  1DB9                     __end_of_Flash_Memory_Unlock:	
 12214                           
 12215                           	psect	text76
 12216  10A9                     __ptext76:	
 12217 ;; *************** function _Flash_Memory_Read *****************
 12218 ;; Defined at:
 12219 ;;		line 927 in file "../src/MCU_B1.c"
 12220 ;; Parameters:    Size  Location     Type
 12221 ;;  address         1    wreg     unsigned char 
 12222 ;; Auto vars:     Size  Location     Type
 12223 ;;  address         1    2[BANK0 ] unsigned char 
 12224 ;;  ret             1    3[BANK0 ] unsigned char 
 12225 ;;  i               1    1[BANK0 ] unsigned char 
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      unsigned char 
 12228 ;; Registers used:
 12229 ;;		wreg, status,2
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12236 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12238 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;Total ram usage:        4 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    5
 12242 ;; This function calls:
 12243 ;;		Nothing
 12244 ;; This function is called by:
 12245 ;;		_Flash_Memory_Initialization
 12246 ;;		_Flash_Memory_Modify
 12247 ;; This function uses a non-reentrant model
 12248 ;;
 12249                           
 12250                           
 12251                           ;psect for function _Flash_Memory_Read
 12252  10A9                     _Flash_Memory_Read:	
 12253                           
 12254                           ;incstack = 0
 12255                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12256                           ;Flash_Memory_Read@address stored from wreg
 12257  10A9  0020               	movlb	0	; select bank0
 12258  10AA  00A2               	movwf	Flash_Memory_Read@address
 12259                           
 12260                           ;MCU_B1.c: 928: char i = 0, ret = 0;
 12261  10AB  01A1               	clrf	Flash_Memory_Read@i
 12262  10AC  01A3               	clrf	Flash_Memory_Read@ret
 12263                           
 12264                           ;MCU_B1.c: 929: PMADRH = 0x30;
 12265  10AD  3030               	movlw	48
 12266  10AE  0023               	movlb	3	; select bank3
 12267  10AF  0092               	movwf	18	;volatile
 12268                           
 12269                           ;MCU_B1.c: 930: PMADRL = address;
 12270  10B0  0020               	movlb	0	; select bank0
 12271  10B1  0822               	movf	Flash_Memory_Read@address,w
 12272  10B2  0023               	movlb	3	; select bank3
 12273  10B3  0091               	movwf	17	;volatile
 12274                           
 12275                           ;MCU_B1.c: 931: CFGS = 0;
 12276  10B4  1315               	bcf	21,6	;volatile
 12277                           
 12278                           ;MCU_B1.c: 932: RD = 1;
 12279  10B5  1415               	bsf	21,0	;volatile
 12280                           
 12281                           ;MCU_B1.c: 933: i = PMDATH;
 12282  10B6  0814               	movf	20,w	;volatile
 12283  10B7  0020               	movlb	0	; select bank0
 12284  10B8  00A0               	movwf	??_Flash_Memory_Read
 12285  10B9  0820               	movf	??_Flash_Memory_Read,w
 12286  10BA  00A1               	movwf	Flash_Memory_Read@i
 12287                           
 12288                           ;MCU_B1.c: 934: ret = PMDATL;
 12289  10BB  0023               	movlb	3	; select bank3
 12290  10BC  0813               	movf	19,w	;volatile
 12291  10BD  0020               	movlb	0	; select bank0
 12292  10BE  00A0               	movwf	??_Flash_Memory_Read
 12293  10BF  0820               	movf	??_Flash_Memory_Read,w
 12294  10C0  00A3               	movwf	Flash_Memory_Read@ret
 12295                           
 12296                           ;MCU_B1.c: 935: return ret;
 12297  10C1  0823               	movf	Flash_Memory_Read@ret,w
 12298  10C2  0008               	return
 12299  10C3                     __end_of_Flash_Memory_Read:	
 12300                           
 12301                           	psect	text77
 12302  1D82                     __ptext77:	
 12303 ;; *************** function _DimmerLights_Main *****************
 12304 ;; Defined at:
 12305 ;;		line 416 in file "../src/Dimmer_B1.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;		None
 12310 ;; Return value:  Size  Location     Type
 12311 ;;		None               void
 12312 ;; Registers used:
 12313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:        0 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:   11
 12326 ;; This function calls:
 12327 ;;		_DimmerLights_Close
 12328 ;;		_setDimmerLights_Main
 12329 ;; This function is called by:
 12330 ;;		_main
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           
 12335                           ;psect for function _DimmerLights_Main
 12336  1D82                     _DimmerLights_Main:	
 12337                           
 12338                           ;Dimmer_B1.c: 419: setDimmerLights_Main(1);
 12339                           
 12340                           ;incstack = 0
 12341                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12342  1D82  3001               	movlw	1
 12343  1D83  3188  20A4  319D   	fcall	_setDimmerLights_Main
 12344                           
 12345                           ;Dimmer_B1.c: 430: DimmerLights_Close();
 12346  1D86  319F  27BE         	fcall	_DimmerLights_Close
 12347  1D88  0008               	return
 12348  1D89                     __end_of_DimmerLights_Main:	
 12349                           
 12350                           	psect	text78
 12351  08A4                     __ptext78:	
 12352 ;; *************** function _setDimmerLights_Main *****************
 12353 ;; Defined at:
 12354 ;;		line 434 in file "../src/Dimmer_B1.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;  lights          1    wreg     unsigned char 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  lights          1   70[BANK0 ] unsigned char 
 12359 ;;  clear           1   69[BANK0 ] unsigned char 
 12360 ;; Return value:  Size  Location     Type
 12361 ;;		None               void
 12362 ;; Registers used:
 12363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12364 ;; Tracked objects:
 12365 ;;		On entry : 0/0
 12366 ;;		On exit  : 0/0
 12367 ;;		Unchanged: 0/0
 12368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;Total ram usage:        2 bytes
 12374 ;; Hardware stack levels used:    1
 12375 ;; Hardware stack levels required when called:   10
 12376 ;; This function calls:
 12377 ;;		_DimmerLightsPointSelect
 12378 ;;		_setBuz
 12379 ;;		_setDimmerLights
 12380 ;;		_setDimmerLights_Adj
 12381 ;; This function is called by:
 12382 ;;		_DimmerLights_Main
 12383 ;; This function uses a non-reentrant model
 12384 ;;
 12385                           
 12386                           
 12387                           ;psect for function _setDimmerLights_Main
 12388  08A4                     _setDimmerLights_Main:	
 12389                           
 12390                           ;incstack = 0
 12391                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12392                           ;setDimmerLights_Main@lights stored from wreg
 12393  08A4  0020               	movlb	0	; select bank0
 12394  08A5  00E6               	movwf	setDimmerLights_Main@lights
 12395                           
 12396                           ;Dimmer_B1.c: 435: char clear = 1;
 12397  08A6  01E5               	clrf	setDimmerLights_Main@clear
 12398  08A7  0AE5               	incf	setDimmerLights_Main@clear,f
 12399                           
 12400                           ;Dimmer_B1.c: 436: DimmerLightsPointSelect(lights);
 12401  08A8  0866               	movf	setDimmerLights_Main@lights,w
 12402  08A9  319D  25EB  3188   	fcall	_DimmerLightsPointSelect
 12403                           
 12404                           ;Dimmer_B1.c: 456: if (DimmerLights->Trigger == 1) {
 12405  08AC  0020               	movlb	0	; select bank0
 12406  08AD  086A               	movf	_DimmerLights,w
 12407  08AE  3E08               	addlw	8
 12408  08AF  0086               	movwf	6
 12409  08B0  3001               	movlw	1	; select bank2/3
 12410  08B1  0087               	movwf	7
 12411  08B2  1D01               	btfss	1,2
 12412  08B3  28D1               	goto	l8788
 12413                           
 12414                           ;Dimmer_B1.c: 457: if (clear == 1) {
 12415  08B4  0865               	movf	setDimmerLights_Main@clear,w
 12416  08B5  3A01               	xorlw	1
 12417  08B6  1D03               	skipz
 12418  08B7  0008               	return
 12419                           
 12420                           ;Dimmer_B1.c: 458: DimmerLights->Trigger = 0;
 12421  08B8  086A               	movf	_DimmerLights,w
 12422  08B9  3E08               	addlw	8
 12423  08BA  0086               	movwf	6
 12424  08BB  3001               	movlw	1	; select bank2/3
 12425  08BC  0087               	movwf	7
 12426  08BD  1101               	bcf	1,2
 12427                           
 12428                           ;Dimmer_B1.c: 459: if (DimmerLights->Switch == 1) {
 12429  08BE  086A               	movf	_DimmerLights,w
 12430  08BF  3E08               	addlw	8
 12431  08C0  0086               	movwf	6
 12432  08C1  3001               	movlw	1	; select bank2/3
 12433  08C2  0087               	movwf	7
 12434  08C3  1C81               	btfss	1,1
 12435  08C4  28CB               	goto	l8786
 12436                           
 12437                           ;Dimmer_B1.c: 460: setDimmerLights(lights, 1);
 12438  08C5  01A4               	clrf	setDimmerLights@status
 12439  08C6  0AA4               	incf	setDimmerLights@status,f
 12440  08C7  0866               	movf	setDimmerLights_Main@lights,w
 12441  08C8  318D  25E8         	fcall	_setDimmerLights
 12442                           
 12443                           ;Dimmer_B1.c: 461: } else {
 12444  08CA  0008               	return
 12445  08CB                     l8786:	
 12446                           
 12447                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 0);
 12448  08CB  0020               	movlb	0	; select bank0
 12449  08CC  01A4               	clrf	setDimmerLights@status
 12450  08CD  0866               	movf	setDimmerLights_Main@lights,w
 12451  08CE  318D  25E8         	fcall	_setDimmerLights
 12452                           
 12453                           ;Dimmer_B1.c: 463: }
 12454                           ;Dimmer_B1.c: 467: }
 12455                           ;Dimmer_B1.c: 468: } else {
 12456  08D0  0008               	return
 12457  08D1                     l8788:	
 12458                           
 12459                           ;Dimmer_B1.c: 469: if (DimmerLights->TriggerAdj == 1) {
 12460  08D1  0020               	movlb	0	; select bank0
 12461  08D2  086A               	movf	_DimmerLights,w
 12462  08D3  3E08               	addlw	8
 12463  08D4  0086               	movwf	6
 12464  08D5  3001               	movlw	1	; select bank2/3
 12465  08D6  0087               	movwf	7
 12466  08D7  1E01               	btfss	1,4
 12467  08D8  0008               	return
 12468                           
 12469                           ;Dimmer_B1.c: 470: if (clear == 1) {
 12470  08D9  0865               	movf	setDimmerLights_Main@clear,w
 12471  08DA  3A01               	xorlw	1
 12472  08DB  1D03               	skipz
 12473  08DC  0008               	return
 12474                           
 12475                           ;Dimmer_B1.c: 471: DimmerLights->TriggerAdj = 0;
 12476  08DD  086A               	movf	_DimmerLights,w
 12477  08DE  3E08               	addlw	8
 12478  08DF  0086               	movwf	6
 12479  08E0  3001               	movlw	1	; select bank2/3
 12480  08E1  0087               	movwf	7
 12481  08E2  1201               	bcf	1,4
 12482                           
 12483                           ;Dimmer_B1.c: 472: if (DimmerLights->AdjGo == 1) {
 12484  08E3  086A               	movf	_DimmerLights,w
 12485  08E4  3E08               	addlw	8
 12486  08E5  0086               	movwf	6
 12487  08E6  3001               	movlw	1	; select bank2/3
 12488  08E7  0087               	movwf	7
 12489  08E8  1D81               	btfss	1,3
 12490  08E9  28F9               	goto	l8798
 12491                           
 12492                           ;Dimmer_B1.c: 473: setDimmerLights_Adj(lights, 1);
 12493  08EA  01E2               	clrf	setDimmerLights_Adj@status
 12494  08EB  0AE2               	incf	setDimmerLights_Adj@status,f
 12495  08EC  0866               	movf	setDimmerLights_Main@lights,w
 12496  08ED  3194  2483  3188   	fcall	_setDimmerLights_Adj
 12497                           
 12498                           ;Dimmer_B1.c: 474: setBuz(1, 100);
 12499  08F0  3064               	movlw	100
 12500  08F1  0020               	movlb	0	; select bank0
 12501  08F2  00A9               	movwf	setBuz@time
 12502  08F3  3000               	movlw	0
 12503  08F4  00AA               	movwf	setBuz@time+1
 12504  08F5  3001               	movlw	1
 12505  08F6  3197  27A7         	fcall	_setBuz
 12506                           
 12507                           ;Dimmer_B1.c: 475: } else {
 12508  08F8  0008               	return
 12509  08F9                     l8798:	
 12510                           
 12511                           ;Dimmer_B1.c: 476: setDimmerLights_Adj(lights, 0);
 12512  08F9  0020               	movlb	0	; select bank0
 12513  08FA  01E2               	clrf	setDimmerLights_Adj@status
 12514  08FB  0866               	movf	setDimmerLights_Main@lights,w
 12515  08FC  3194  2483         	fcall	_setDimmerLights_Adj
 12516  08FE  0008               	return
 12517  08FF                     __end_of_setDimmerLights_Main:	
 12518                           
 12519                           	psect	text79
 12520  1483                     __ptext79:	
 12521 ;; *************** function _setDimmerLights_Adj *****************
 12522 ;; Defined at:
 12523 ;;		line 655 in file "../src/Dimmer_B1.c"
 12524 ;; Parameters:    Size  Location     Type
 12525 ;;  lights          1    wreg     unsigned char 
 12526 ;;  status          1   66[BANK0 ] unsigned char 
 12527 ;; Auto vars:     Size  Location     Type
 12528 ;;  lights          1   68[BANK0 ] unsigned char 
 12529 ;; Return value:  Size  Location     Type
 12530 ;;		None               void
 12531 ;; Registers used:
 12532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12533 ;; Tracked objects:
 12534 ;;		On entry : 0/0
 12535 ;;		On exit  : 0/0
 12536 ;;		Unchanged: 0/0
 12537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12538 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;Total ram usage:        3 bytes
 12543 ;; Hardware stack levels used:    1
 12544 ;; Hardware stack levels required when called:    9
 12545 ;; This function calls:
 12546 ;;		_DimmerLightsPointSelect
 12547 ;;		_setRF_DimmerLights
 12548 ;;		_setTxData
 12549 ;; This function is called by:
 12550 ;;		_setDimmerLights_Main
 12551 ;; This function uses a non-reentrant model
 12552 ;;
 12553                           
 12554                           
 12555                           ;psect for function _setDimmerLights_Adj
 12556  1483                     _setDimmerLights_Adj:	
 12557                           
 12558                           ;incstack = 0
 12559                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12560                           ;setDimmerLights_Adj@lights stored from wreg
 12561  1483  0020               	movlb	0	; select bank0
 12562  1484  00E4               	movwf	setDimmerLights_Adj@lights
 12563                           
 12564                           ;Dimmer_B1.c: 656: DimmerLightsPointSelect(lights);
 12565  1485  0864               	movf	setDimmerLights_Adj@lights,w
 12566  1486  319D  25EB  3194   	fcall	_DimmerLightsPointSelect
 12567                           
 12568                           ;Dimmer_B1.c: 657: if (status == 1) {
 12569  1489  0020               	movlb	0	; select bank0
 12570  148A  0862               	movf	setDimmerLights_Adj@status,w
 12571  148B  3A01               	xorlw	1
 12572  148C  1D03               	skipz
 12573  148D  2C99               	goto	l8436
 12574                           
 12575                           ;Dimmer_B1.c: 658: DimmerLights->AdjFlag = 1;
 12576  148E  086A               	movf	_DimmerLights,w
 12577  148F  0086               	movwf	6
 12578  1490  3001               	movlw	1	; select bank2/3
 12579  1491  0087               	movwf	7
 12580  1492  1581               	bsf	1,3
 12581                           
 12582                           ;Dimmer_B1.c: 659: DimmerLights->Signal = 1;
 12583  1493  086A               	movf	_DimmerLights,w
 12584  1494  0086               	movwf	6
 12585  1495  3001               	movlw	1	; select bank2/3
 12586  1496  0087               	movwf	7
 12587  1497  1481               	bsf	1,1
 12588                           
 12589                           ;Dimmer_B1.c: 660: } else {
 12590  1498  0008               	return
 12591  1499                     l8436:	
 12592                           
 12593                           ;Dimmer_B1.c: 661: if (DimmerLights->AdjFlag == 1) {
 12594  1499  086A               	movf	_DimmerLights,w
 12595  149A  0086               	movwf	6
 12596  149B  3001               	movlw	1	; select bank2/3
 12597  149C  0087               	movwf	7
 12598  149D  1D81               	btfss	1,3
 12599  149E  0008               	return
 12600                           
 12601                           ;Dimmer_B1.c: 663: DimmerLights->Signal = 0;
 12602  149F  086A               	movf	_DimmerLights,w
 12603  14A0  0086               	movwf	6
 12604  14A1  3001               	movlw	1	; select bank2/3
 12605  14A2  0087               	movwf	7
 12606  14A3  1081               	bcf	1,1
 12607                           
 12608                           ;Dimmer_B1.c: 664: DimmerLights->AdjFlag = 0;
 12609  14A4  086A               	movf	_DimmerLights,w
 12610  14A5  0086               	movwf	6
 12611  14A6  3001               	movlw	1	; select bank2/3
 12612  14A7  0087               	movwf	7
 12613  14A8  1181               	bcf	1,3
 12614                           
 12615                           ;Dimmer_B1.c: 665: ;;
 12616                           ;Dimmer_B1.c: 666: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12617  14A9  086A               	movf	_DimmerLights,w
 12618  14AA  3E04               	addlw	4
 12619  14AB  0086               	movwf	6
 12620  14AC  3001               	movlw	1	; select bank2/3
 12621  14AD  0087               	movwf	7
 12622  14AE  0801               	movf	1,w
 12623  14AF  00E3               	movwf	??_setDimmerLights_Adj
 12624  14B0  086A               	movf	_DimmerLights,w
 12625  14B1  3E05               	addlw	5
 12626  14B2  0086               	movwf	6
 12627  14B3  3001               	movlw	1	; select bank2/3
 12628  14B4  0087               	movwf	7
 12629  14B5  0863               	movf	??_setDimmerLights_Adj,w
 12630  14B6  0081               	movwf	1
 12631                           
 12632                           ;Dimmer_B1.c: 674: setRF_DimmerLights(lights, 1);
 12633  14B7  01DD               	clrf	setRF_DimmerLights@on
 12634  14B8  0ADD               	incf	setRF_DimmerLights@on,f
 12635  14B9  0864               	movf	setDimmerLights_Adj@lights,w
 12636  14BA  318B  23B2  3194   	fcall	_setRF_DimmerLights
 12637                           
 12638                           ;Dimmer_B1.c: 675: setTxData();
 12639  14BD  3185  25C7         	fcall	_setTxData
 12640  14BF  0008               	return
 12641  14C0                     __end_of_setDimmerLights_Adj:	
 12642                           
 12643                           	psect	text80
 12644  0DE8                     __ptext80:	
 12645 ;; *************** function _setDimmerLights *****************
 12646 ;; Defined at:
 12647 ;;		line 602 in file "../src/Dimmer_B1.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;  lights          1    wreg     unsigned char 
 12650 ;;  status          1    4[BANK0 ] unsigned char 
 12651 ;; Auto vars:     Size  Location     Type
 12652 ;;  lights          1    6[BANK0 ] unsigned char 
 12653 ;; Return value:  Size  Location     Type
 12654 ;;		None               void
 12655 ;; Registers used:
 12656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12657 ;; Tracked objects:
 12658 ;;		On entry : 0/0
 12659 ;;		On exit  : 0/0
 12660 ;;		Unchanged: 0/0
 12661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12662 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12665 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12666 ;;Total ram usage:        3 bytes
 12667 ;; Hardware stack levels used:    1
 12668 ;; Hardware stack levels required when called:    7
 12669 ;; This function calls:
 12670 ;;		_DimmerLightsPointSelect
 12671 ;;		_setLED
 12672 ;;		_setMemory_GO
 12673 ;; This function is called by:
 12674 ;;		_setDimmerLights_Main
 12675 ;;		_setControl_Lights_Table
 12676 ;; This function uses a non-reentrant model
 12677 ;;
 12678                           
 12679                           
 12680                           ;psect for function _setDimmerLights
 12681  0DE8                     _setDimmerLights:	
 12682                           
 12683                           ;incstack = 0
 12684                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12685                           ;setDimmerLights@lights stored from wreg
 12686  0DE8  0020               	movlb	0	; select bank0
 12687  0DE9  00A6               	movwf	setDimmerLights@lights
 12688                           
 12689                           ;Dimmer_B1.c: 603: DimmerLightsPointSelect(lights);
 12690  0DEA  0826               	movf	setDimmerLights@lights,w
 12691  0DEB  319D  25EB  318D   	fcall	_DimmerLightsPointSelect
 12692                           
 12693                           ;Dimmer_B1.c: 604: Dimmer->Load = lights;
 12694  0DEE  0020               	movlb	0	; select bank0
 12695  0DEF  0826               	movf	setDimmerLights@lights,w
 12696  0DF0  00A5               	movwf	??_setDimmerLights
 12697  0DF1  0A76               	incf	_Dimmer,w
 12698  0DF2  0086               	movwf	6
 12699  0DF3  3001               	movlw	1	; select bank2/3
 12700  0DF4  0087               	movwf	7
 12701  0DF5  0825               	movf	??_setDimmerLights,w
 12702  0DF6  0081               	movwf	1
 12703                           
 12704                           ;Dimmer_B1.c: 605: if (status == 1) {
 12705  0DF7  0824               	movf	setDimmerLights@status,w
 12706  0DF8  3A01               	xorlw	1
 12707  0DF9  1D03               	skipz
 12708  0DFA  2E3C               	goto	l8082
 12709                           
 12710                           ;Dimmer_B1.c: 606: DimmerLights->Status = 1;
 12711  0DFB  086A               	movf	_DimmerLights,w
 12712  0DFC  0086               	movwf	6
 12713  0DFD  3001               	movlw	1	; select bank2/3
 12714  0DFE  0087               	movwf	7
 12715  0DFF  1681               	bsf	1,5
 12716                           
 12717                           ;Dimmer_B1.c: 607: setLED(lights, 0);
 12718  0E00  01A2               	clrf	setLED@command
 12719  0E01  0826               	movf	setDimmerLights@lights,w
 12720  0E02  3189  215A  318D   	fcall	_setLED
 12721                           
 12722                           ;Dimmer_B1.c: 608: RC7=!0;
 12723  0E05  0020               	movlb	0	; select bank0
 12724  0E06  178E               	bsf	14,7	;volatile
 12725                           
 12726                           ;Dimmer_B1.c: 609: ;;
 12727                           ;Dimmer_B1.c: 611: DimmerLights->Signal = 1;
 12728  0E07  086A               	movf	_DimmerLights,w
 12729  0E08  0086               	movwf	6
 12730  0E09  3001               	movlw	1	; select bank2/3
 12731  0E0A  0087               	movwf	7
 12732  0E0B  1481               	bsf	1,1
 12733                           
 12734                           ;Dimmer_B1.c: 612: DimmerLights->DimmingTimeValue = 7;
 12735  0E0C  3007               	movlw	7
 12736  0E0D  00A5               	movwf	??_setDimmerLights
 12737  0E0E  086A               	movf	_DimmerLights,w
 12738  0E0F  3E02               	addlw	2
 12739  0E10  0086               	movwf	6
 12740  0E11  3001               	movlw	1	; select bank2/3
 12741  0E12  0087               	movwf	7
 12742  0E13  0825               	movf	??_setDimmerLights,w
 12743  0E14  0081               	movwf	1
 12744                           
 12745                           ;Dimmer_B1.c: 614: if (DimmerLights->StatusFlag == 0) {
 12746  0E15  086A               	movf	_DimmerLights,w
 12747  0E16  0086               	movwf	6
 12748  0E17  3001               	movlw	1	; select bank2/3
 12749  0E18  0087               	movwf	7
 12750  0E19  1B01               	btfsc	1,6
 12751  0E1A  0008               	return
 12752                           
 12753                           ;Dimmer_B1.c: 615: DimmerLights->StatusFlag = 1;
 12754  0E1B  086A               	movf	_DimmerLights,w
 12755  0E1C  0086               	movwf	6
 12756  0E1D  3001               	movlw	1	; select bank2/3
 12757  0E1E  0087               	movwf	7
 12758  0E1F  1701               	bsf	1,6
 12759                           
 12760                           ;Dimmer_B1.c: 616: ;;
 12761                           ;Dimmer_B1.c: 617: setMemory_GO(0);
 12762  0E20  3000               	movlw	0
 12763  0E21  319F  27D3         	fcall	_setMemory_GO
 12764                           
 12765                           ;Dimmer_B1.c: 620: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12766  0E23  0020               	movlb	0	; select bank0
 12767  0E24  086A               	movf	_DimmerLights,w
 12768  0E25  3E05               	addlw	5
 12769  0E26  0086               	movwf	6
 12770  0E27  3001               	movlw	1	; select bank2/3
 12771  0E28  0087               	movwf	7
 12772  0E29  0801               	movf	1,w
 12773  0E2A  00A5               	movwf	??_setDimmerLights
 12774  0E2B  086A               	movf	_DimmerLights,w
 12775  0E2C  3E04               	addlw	4
 12776  0E2D  0086               	movwf	6
 12777  0E2E  3001               	movlw	1	; select bank2/3
 12778  0E2F  0087               	movwf	7
 12779  0E30  0825               	movf	??_setDimmerLights,w
 12780  0E31  0081               	movwf	1
 12781                           
 12782                           ;Dimmer_B1.c: 624: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12783  0E32  3020               	movlw	32
 12784  0E33  00A5               	movwf	??_setDimmerLights
 12785  0E34  086A               	movf	_DimmerLights,w
 12786  0E35  3E04               	addlw	4
 12787  0E36  0086               	movwf	6
 12788  0E37  3001               	movlw	1	; select bank2/3
 12789  0E38  0087               	movwf	7
 12790  0E39  0825               	movf	??_setDimmerLights,w
 12791  0E3A  0081               	movwf	1
 12792                           
 12793                           ;Dimmer_B1.c: 626: }
 12794                           ;Dimmer_B1.c: 627: } else {
 12795  0E3B  0008               	return
 12796  0E3C                     l8082:	
 12797                           
 12798                           ;Dimmer_B1.c: 628: DimmerLights->Status = 0;
 12799  0E3C  086A               	movf	_DimmerLights,w
 12800  0E3D  0086               	movwf	6
 12801  0E3E  3001               	movlw	1	; select bank2/3
 12802  0E3F  0087               	movwf	7
 12803  0E40  1281               	bcf	1,5
 12804                           
 12805                           ;Dimmer_B1.c: 630: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12806  0E41  086A               	movf	_DimmerLights,w
 12807  0E42  3E06               	addlw	6
 12808  0E43  0086               	movwf	6
 12809  0E44  3001               	movlw	1	; select bank2/3
 12810  0E45  0087               	movwf	7
 12811  0E46  0801               	movf	1,w
 12812  0E47  00A5               	movwf	??_setDimmerLights
 12813  0E48  086A               	movf	_DimmerLights,w
 12814  0E49  3E04               	addlw	4
 12815  0E4A  0086               	movwf	6
 12816  0E4B  3001               	movlw	1	; select bank2/3
 12817  0E4C  0087               	movwf	7
 12818  0E4D  0825               	movf	??_setDimmerLights,w
 12819  0E4E  0081               	movwf	1
 12820                           
 12821                           ;Dimmer_B1.c: 637: DimmerLights->Signal = 1;
 12822  0E4F  086A               	movf	_DimmerLights,w
 12823  0E50  0086               	movwf	6
 12824  0E51  3001               	movlw	1	; select bank2/3
 12825  0E52  0087               	movwf	7
 12826  0E53  1481               	bsf	1,1
 12827                           
 12828                           ;Dimmer_B1.c: 638: DimmerLights->AdjFlag = 0;
 12829  0E54  086A               	movf	_DimmerLights,w
 12830  0E55  0086               	movwf	6
 12831  0E56  3001               	movlw	1	; select bank2/3
 12832  0E57  0087               	movwf	7
 12833  0E58  1181               	bcf	1,3
 12834                           
 12835                           ;Dimmer_B1.c: 639: DimmerLights->AdjStatus = 0;
 12836  0E59  086A               	movf	_DimmerLights,w
 12837  0E5A  0086               	movwf	6
 12838  0E5B  3001               	movlw	1	; select bank2/3
 12839  0E5C  0087               	movwf	7
 12840  0E5D  1201               	bcf	1,4
 12841                           
 12842                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 12843  0E5E  3007               	movlw	7
 12844  0E5F  00A5               	movwf	??_setDimmerLights
 12845  0E60  086A               	movf	_DimmerLights,w
 12846  0E61  3E02               	addlw	2
 12847  0E62  0086               	movwf	6
 12848  0E63  3001               	movlw	1	; select bank2/3
 12849  0E64  0087               	movwf	7
 12850  0E65  0825               	movf	??_setDimmerLights,w
 12851  0E66  0081               	movwf	1
 12852  0E67  0008               	return
 12853  0E68                     __end_of_setDimmerLights:	
 12854                           
 12855                           	psect	text81
 12856  095A                     __ptext81:	
 12857 ;; *************** function _setLED *****************
 12858 ;; Defined at:
 12859 ;;		line 70 in file "../src/LED_B1.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;  led             1    wreg     unsigned char 
 12862 ;;  command         1    2[BANK0 ] unsigned char 
 12863 ;; Auto vars:     Size  Location     Type
 12864 ;;  led             1    3[BANK0 ] unsigned char 
 12865 ;; Return value:  Size  Location     Type
 12866 ;;		None               void
 12867 ;; Registers used:
 12868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12869 ;; Tracked objects:
 12870 ;;		On entry : 0/0
 12871 ;;		On exit  : 0/0
 12872 ;;		Unchanged: 0/0
 12873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12874 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12878 ;;Total ram usage:        2 bytes
 12879 ;; Hardware stack levels used:    1
 12880 ;; Hardware stack levels required when called:    6
 12881 ;; This function calls:
 12882 ;;		_LedPointSelect
 12883 ;; This function is called by:
 12884 ;;		_setDimmerLights_ERROR
 12885 ;;		_setDimmerLights
 12886 ;;		_setLED_Initialization
 12887 ;;		_setOverTemp_Exceptions
 12888 ;;		_setPowerFault_Exceptions
 12889 ;;		_setSw_Initialization
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           
 12894                           ;psect for function _setLED
 12895  095A                     _setLED:	
 12896                           
 12897                           ;incstack = 0
 12898                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12899                           ;setLED@led stored from wreg
 12900  095A  0020               	movlb	0	; select bank0
 12901  095B  00A3               	movwf	setLED@led
 12902                           
 12903                           ;LED_B1.c: 71: LedPointSelect(led);
 12904  095C  0823               	movf	setLED@led,w
 12905  095D  3190  20C3  3189   	fcall	_LedPointSelect
 12906                           
 12907                           ;LED_B1.c: 72: if (command == 0) {
 12908  0960  0020               	movlb	0	; select bank0
 12909  0961  08A2               	movf	setLED@command,f
 12910  0962  1D03               	skipz
 12911  0963  2976               	goto	l7958
 12912                           
 12913                           ;LED_B1.c: 74: if (led == 1) {
 12914  0964  0823               	movf	setLED@led,w
 12915  0965  3A01               	xorlw	1
 12916  0966  1D03               	skipz
 12917  0967  296A               	goto	l7950
 12918                           
 12919                           ;LED_B1.c: 78: RA3 = 1;
 12920  0968  158C               	bsf	12,3	;volatile
 12921                           
 12922                           ;LED_B1.c: 80: }
 12923  0969  0008               	return
 12924  096A                     l7950:	
 12925                           
 12926                           ;LED_B1.c: 83: else if (led == 2) {
 12927  096A  0823               	movf	setLED@led,w
 12928  096B  3A02               	xorlw	2
 12929  096C  1D03               	skipz
 12930  096D  2970               	goto	l7954
 12931                           
 12932                           ;LED_B1.c: 87: RC7 = 1;
 12933  096E  178E               	bsf	14,7	;volatile
 12934                           
 12935                           ;LED_B1.c: 89: }
 12936  096F  0008               	return
 12937  0970                     l7954:	
 12938                           
 12939                           ;LED_B1.c: 101: else if (led == 99) {
 12940  0970  0823               	movf	setLED@led,w
 12941  0971  3A63               	xorlw	99
 12942  0972  1D03               	skipz
 12943  0973  0008               	return
 12944                           
 12945                           ;LED_B1.c: 105: RB5 = 1;
 12946  0974  168D               	bsf	13,5	;volatile
 12947                           
 12948                           ;LED_B1.c: 107: }
 12949                           ;LED_B1.c: 109: } else if (command == 1) {
 12950  0975  0008               	return
 12951  0976                     l7958:	
 12952  0976  0822               	movf	setLED@command,w
 12953  0977  3A01               	xorlw	1
 12954  0978  1D03               	skipz
 12955  0979  298C               	goto	l7972
 12956                           
 12957                           ;LED_B1.c: 111: if (led == 1) {
 12958  097A  0823               	movf	setLED@led,w
 12959  097B  3A01               	xorlw	1
 12960  097C  1D03               	skipz
 12961  097D  2980               	goto	l7964
 12962                           
 12963                           ;LED_B1.c: 115: RA3 = 0;
 12964  097E  118C               	bcf	12,3	;volatile
 12965                           
 12966                           ;LED_B1.c: 117: }
 12967  097F  0008               	return
 12968  0980                     l7964:	
 12969                           
 12970                           ;LED_B1.c: 120: else if (led == 2) {
 12971  0980  0823               	movf	setLED@led,w
 12972  0981  3A02               	xorlw	2
 12973  0982  1D03               	skipz
 12974  0983  2986               	goto	l7968
 12975                           
 12976                           ;LED_B1.c: 124: RC7 = 0;
 12977  0984  138E               	bcf	14,7	;volatile
 12978                           
 12979                           ;LED_B1.c: 126: }
 12980  0985  0008               	return
 12981  0986                     l7968:	
 12982                           
 12983                           ;LED_B1.c: 138: else if (led == 99) {
 12984  0986  0823               	movf	setLED@led,w
 12985  0987  3A63               	xorlw	99
 12986  0988  1D03               	skipz
 12987  0989  0008               	return
 12988                           
 12989                           ;LED_B1.c: 142: RB5 = 0;
 12990  098A  128D               	bcf	13,5	;volatile
 12991                           
 12992                           ;LED_B1.c: 144: }
 12993                           ;LED_B1.c: 146: } else if (command == 10) {
 12994  098B  0008               	return
 12995  098C                     l7972:	
 12996  098C  0822               	movf	setLED@command,w
 12997  098D  3A0A               	xorlw	10
 12998  098E  1D03               	skipz
 12999  098F  29AE               	goto	l7988
 13000                           
 13001                           ;LED_B1.c: 147: LED->GO = 0;
 13002  0990  086B               	movf	_LED,w
 13003  0991  0086               	movwf	6
 13004  0992  3001               	movlw	1	; select bank2/3
 13005  0993  0087               	movwf	7
 13006  0994  1081               	bcf	1,1
 13007                           
 13008                           ;LED_B1.c: 148: LED->Time = 0;
 13009  0995  0A6B               	incf	_LED,w
 13010  0996  0086               	movwf	6
 13011  0997  3001               	movlw	1	; select bank2/3
 13012  0998  0087               	movwf	7
 13013  0999  3000               	movlw	0
 13014  099A  3FC0               	movwi [0]fsr1
 13015  099B  3FC1               	movwi [1]fsr1
 13016                           
 13017                           ;LED_B1.c: 150: if (led == 1) {
 13018  099C  0823               	movf	setLED@led,w
 13019  099D  3A01               	xorlw	1
 13020  099E  1D03               	skipz
 13021  099F  29A2               	goto	l7980
 13022                           
 13023                           ;LED_B1.c: 154: RA3 = 1;
 13024  09A0  158C               	bsf	12,3	;volatile
 13025                           
 13026                           ;LED_B1.c: 156: }
 13027  09A1  0008               	return
 13028  09A2                     l7980:	
 13029                           
 13030                           ;LED_B1.c: 159: else if (led == 2) {
 13031  09A2  0823               	movf	setLED@led,w
 13032  09A3  3A02               	xorlw	2
 13033  09A4  1D03               	skipz
 13034  09A5  29A8               	goto	l7984
 13035                           
 13036                           ;LED_B1.c: 163: RC7 = 1;
 13037  09A6  178E               	bsf	14,7	;volatile
 13038                           
 13039                           ;LED_B1.c: 165: }
 13040  09A7  0008               	return
 13041  09A8                     l7984:	
 13042                           
 13043                           ;LED_B1.c: 177: else if (led == 99) {
 13044  09A8  0823               	movf	setLED@led,w
 13045  09A9  3A63               	xorlw	99
 13046  09AA  1D03               	skipz
 13047  09AB  0008               	return
 13048                           
 13049                           ;LED_B1.c: 181: RB5 = 1;
 13050  09AC  168D               	bsf	13,5	;volatile
 13051                           
 13052                           ;LED_B1.c: 183: }
 13053                           ;LED_B1.c: 185: } else if (command == 11) {
 13054  09AD  0008               	return
 13055  09AE                     l7988:	
 13056  09AE  0822               	movf	setLED@command,w
 13057  09AF  3A0B               	xorlw	11
 13058  09B0  1D03               	skipz
 13059  09B1  0008               	return
 13060                           
 13061                           ;LED_B1.c: 186: LED->GO = 1;
 13062  09B2  086B               	movf	_LED,w
 13063  09B3  0086               	movwf	6
 13064  09B4  3001               	movlw	1	; select bank2/3
 13065  09B5  0087               	movwf	7
 13066  09B6  1481               	bsf	1,1
 13067  09B7  0008               	return
 13068  09B8                     __end_of_setLED:	
 13069                           
 13070                           	psect	text82
 13071  10C3                     __ptext82:	
 13072 ;; *************** function _LedPointSelect *****************
 13073 ;; Defined at:
 13074 ;;		line 7 in file "../src/LED_B1.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;  led             1    wreg     unsigned char 
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  led             1    1[BANK0 ] unsigned char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;		None               void
 13081 ;; Registers used:
 13082 ;;		wreg
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13092 ;;Total ram usage:        2 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    5
 13095 ;; This function calls:
 13096 ;;		Nothing
 13097 ;; This function is called by:
 13098 ;;		_setLED_Initialization
 13099 ;;		_setLED
 13100 ;;		_setLED_Main
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           
 13105                           ;psect for function _LedPointSelect
 13106  10C3                     _LedPointSelect:	
 13107                           
 13108                           ;incstack = 0
 13109                           ; Regs used in _LedPointSelect: [wreg]
 13110                           ;LedPointSelect@led stored from wreg
 13111  10C3  0020               	movlb	0	; select bank0
 13112  10C4  00A1               	movwf	LedPointSelect@led
 13113                           
 13114                           ;LED_B1.c: 9: if (led == 1) {
 13115  10C5  0821               	movf	LedPointSelect@led,w
 13116  10C6  3A01               	xorlw	1
 13117  10C7  1D03               	skipz
 13118  10C8  28CE               	goto	l7744
 13119                           
 13120                           ;LED_B1.c: 10: LED = &VarLED1;
 13121  10C9  3060               	movlw	_VarLED1& (0+255)
 13122  10CA  00A0               	movwf	??_LedPointSelect
 13123  10CB  0820               	movf	??_LedPointSelect,w
 13124  10CC  00EB               	movwf	_LED
 13125                           
 13126                           ;LED_B1.c: 11: }
 13127  10CD  0008               	return
 13128  10CE                     l7744:	
 13129                           
 13130                           ;LED_B1.c: 14: else if (led == 2) {
 13131  10CE  0821               	movf	LedPointSelect@led,w
 13132  10CF  3A02               	xorlw	2
 13133  10D0  1D03               	skipz
 13134  10D1  28D7               	goto	l7748
 13135                           
 13136                           ;LED_B1.c: 15: LED = &VarLED2;
 13137  10D2  3064               	movlw	_VarLED2& (0+255)
 13138  10D3  00A0               	movwf	??_LedPointSelect
 13139  10D4  0820               	movf	??_LedPointSelect,w
 13140  10D5  00EB               	movwf	_LED
 13141                           
 13142                           ;LED_B1.c: 16: }
 13143  10D6  0008               	return
 13144  10D7                     l7748:	
 13145                           
 13146                           ;LED_B1.c: 24: else if (led == 99) {
 13147  10D7  0821               	movf	LedPointSelect@led,w
 13148  10D8  3A63               	xorlw	99
 13149  10D9  1D03               	skipz
 13150  10DA  0008               	return
 13151                           
 13152                           ;LED_B1.c: 25: LED = &VarErrLED;
 13153  10DB  305C               	movlw	_VarErrLED& (0+255)
 13154  10DC  00A0               	movwf	??_LedPointSelect
 13155  10DD  0820               	movf	??_LedPointSelect,w
 13156  10DE  00EB               	movwf	_LED
 13157  10DF  0008               	return
 13158  10E0                     __end_of_LedPointSelect:	
 13159                           
 13160                           	psect	text83
 13161  1FBE                     __ptext83:	
 13162 ;; *************** function _DimmerLights_Close *****************
 13163 ;; Defined at:
 13164 ;;		line 405 in file "../src/Dimmer_B1.c"
 13165 ;; Parameters:    Size  Location     Type
 13166 ;;		None
 13167 ;; Auto vars:     Size  Location     Type
 13168 ;;		None
 13169 ;; Return value:  Size  Location     Type
 13170 ;;		None               void
 13171 ;; Registers used:
 13172 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13173 ;; Tracked objects:
 13174 ;;		On entry : 0/0
 13175 ;;		On exit  : 0/0
 13176 ;;		Unchanged: 0/0
 13177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13182 ;;Total ram usage:        0 bytes
 13183 ;; Hardware stack levels used:    1
 13184 ;; Hardware stack levels required when called:    6
 13185 ;; This function calls:
 13186 ;;		_getDimmerLights_StatusFlag
 13187 ;;		_setMemory_GO
 13188 ;; This function is called by:
 13189 ;;		_DimmerLights_Main
 13190 ;; This function uses a non-reentrant model
 13191 ;;
 13192                           
 13193                           
 13194                           ;psect for function _DimmerLights_Close
 13195  1FBE                     _DimmerLights_Close:	
 13196                           
 13197                           ;Dimmer_B1.c: 406: if (Dimmer->Detect == 1) {
 13198                           
 13199                           ;incstack = 0
 13200                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13201  1FBE  0876               	movf	_Dimmer,w
 13202  1FBF  0086               	movwf	6
 13203  1FC0  3001               	movlw	1	; select bank2/3
 13204  1FC1  0087               	movwf	7
 13205  1FC2  1C01               	btfss	1,0
 13206  1FC3  0008               	return
 13207                           
 13208                           ;Dimmer_B1.c: 407: Dimmer->Detect = 0;
 13209  1FC4  0876               	movf	_Dimmer,w
 13210  1FC5  0086               	movwf	6
 13211  1FC6  3001               	movlw	1	; select bank2/3
 13212  1FC7  0087               	movwf	7
 13213  1FC8  1001               	bcf	1,0
 13214                           
 13215                           ;Dimmer_B1.c: 408: if (getDimmerLights_StatusFlag() == 0) {
 13216  1FC9  319D  25D6  319F   	fcall	_getDimmerLights_StatusFlag
 13217  1FCC  3800               	iorlw	0
 13218  1FCD  1D03               	skipz
 13219  1FCE  0008               	return
 13220                           
 13221                           ;Dimmer_B1.c: 409: ;;
 13222                           ;Dimmer_B1.c: 410: setMemory_GO(1);
 13223  1FCF  3001               	movlw	1
 13224  1FD0  319F  27D3         	fcall	_setMemory_GO
 13225  1FD2  0008               	return
 13226  1FD3                     __end_of_DimmerLights_Close:	
 13227                           
 13228                           	psect	text84
 13229  1FD3                     __ptext84:	
 13230 ;; *************** function _setMemory_GO *****************
 13231 ;; Defined at:
 13232 ;;		line 995 in file "../src/MCU_B1.c"
 13233 ;; Parameters:    Size  Location     Type
 13234 ;;  command         1    wreg     unsigned char 
 13235 ;; Auto vars:     Size  Location     Type
 13236 ;;  command         1    2[BANK0 ] unsigned char 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;		None               void
 13239 ;; Registers used:
 13240 ;;		wreg, status,2, status,0
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13249 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13250 ;;Total ram usage:        3 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    5
 13253 ;; This function calls:
 13254 ;;		Nothing
 13255 ;; This function is called by:
 13256 ;;		_DimmerLights_Close
 13257 ;;		_setDimmerLights
 13258 ;; This function uses a non-reentrant model
 13259 ;;
 13260                           
 13261                           
 13262                           ;psect for function _setMemory_GO
 13263  1FD3                     _setMemory_GO:	
 13264                           
 13265                           ;incstack = 0
 13266                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 13267                           ;setMemory_GO@command stored from wreg
 13268  1FD3  0020               	movlb	0	; select bank0
 13269  1FD4  00A2               	movwf	setMemory_GO@command
 13270                           
 13271                           ;MCU_B1.c: 996: Memory.GO = command;
 13272  1FD5  0822               	movf	setMemory_GO@command,w
 13273  1FD6  0022               	movlb	2	; select bank2
 13274  1FD7  10DB               	bcf	(_Memory^(0+256)+36),1
 13275  1FD8  1D03               	skipz
 13276  1FD9  14DB               	bsf	(_Memory^(0+256)+36),1
 13277                           
 13278                           ;MCU_B1.c: 997: if (command == 0) {
 13279  1FDA  0020               	movlb	0	; select bank0
 13280  1FDB  08A2               	movf	setMemory_GO@command,f
 13281  1FDC  1D03               	skipz
 13282  1FDD  0008               	return
 13283                           
 13284                           ;MCU_B1.c: 998: Memory.Time = command;
 13285  1FDE  0822               	movf	setMemory_GO@command,w
 13286  1FDF  00A0               	movwf	??_setMemory_GO
 13287  1FE0  01A1               	clrf	??_setMemory_GO+1
 13288  1FE1  0820               	movf	??_setMemory_GO,w
 13289  1FE2  0022               	movlb	2	; select bank2
 13290  1FE3  00D9               	movwf	(_Memory^(0+256)+34)
 13291  1FE4  0020               	movlb	0	; select bank0
 13292  1FE5  0821               	movf	??_setMemory_GO+1,w
 13293  1FE6  0022               	movlb	2	; select bank2
 13294  1FE7  00DA               	movwf	((_Memory+1)^(0+256)+34)
 13295  1FE8  0008               	return
 13296  1FE9                     __end_of_setMemory_GO:	
 13297                           
 13298                           	psect	text85
 13299  1DD6                     __ptext85:	
 13300 ;; *************** function _getDimmerLights_StatusFlag *****************
 13301 ;; Defined at:
 13302 ;;		line 484 in file "../src/Dimmer_B1.c"
 13303 ;; Parameters:    Size  Location     Type
 13304 ;;		None
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;  Status          1    0[BANK0 ] unsigned char 
 13307 ;; Return value:  Size  Location     Type
 13308 ;;                  1    wreg      unsigned char 
 13309 ;; Registers used:
 13310 ;;		wreg, status,2
 13311 ;; Tracked objects:
 13312 ;;		On entry : 0/0
 13313 ;;		On exit  : 0/0
 13314 ;;		Unchanged: 0/0
 13315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13319 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13320 ;;Total ram usage:        1 bytes
 13321 ;; Hardware stack levels used:    1
 13322 ;; Hardware stack levels required when called:    5
 13323 ;; This function calls:
 13324 ;;		Nothing
 13325 ;; This function is called by:
 13326 ;;		_DimmerLights_Close
 13327 ;;		_DimmerLights_Exceptions
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           
 13332                           ;psect for function _getDimmerLights_StatusFlag
 13333  1DD6                     _getDimmerLights_StatusFlag:	
 13334                           
 13335                           ;Dimmer_B1.c: 485: char Status = 0;
 13336                           
 13337                           ;incstack = 0
 13338                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 13339  1DD6  0020               	movlb	0	; select bank0
 13340  1DD7  01A0               	clrf	getDimmerLights_StatusFlag@Status
 13341                           
 13342                           ;Dimmer_B1.c: 496: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 13343  1DD8  3000               	movlw	0
 13344  1DD9  0023               	movlb	3	; select bank3
 13345  1DDA  1B40               	btfsc	_DimmerLights1^(0+384),6
 13346  1DDB  3001               	movlw	1
 13347  1DDC  0020               	movlb	0	; select bank0
 13348  1DDD  00A0               	movwf	getDimmerLights_StatusFlag@Status
 13349                           
 13350                           ;Dimmer_B1.c: 499: return Status;
 13351  1DDE  0820               	movf	getDimmerLights_StatusFlag@Status,w
 13352  1DDF  0008               	return
 13353  1DE0                     __end_of_getDimmerLights_StatusFlag:	
 13354                           
 13355                           	psect	text86
 13356  1E77                     __ptext86:	
 13357 ;; *************** function _DimmerLights_Initialization *****************
 13358 ;; Defined at:
 13359 ;;		line 343 in file "../src/Dimmer_B1.c"
 13360 ;; Parameters:    Size  Location     Type
 13361 ;;		None
 13362 ;; Auto vars:     Size  Location     Type
 13363 ;;		None
 13364 ;; Return value:  Size  Location     Type
 13365 ;;		None               void
 13366 ;; Registers used:
 13367 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13368 ;; Tracked objects:
 13369 ;;		On entry : 0/0
 13370 ;;		On exit  : 0/0
 13371 ;;		Unchanged: 0/0
 13372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;Total ram usage:        1 bytes
 13378 ;; Hardware stack levels used:    1
 13379 ;; Hardware stack levels required when called:    7
 13380 ;; This function calls:
 13381 ;;		_Dimmer_Initialization
 13382 ;;		_setDimmerLights_Initialization
 13383 ;; This function is called by:
 13384 ;;		_main
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           
 13389                           ;psect for function _DimmerLights_Initialization
 13390  1E77                     _DimmerLights_Initialization:	
 13391                           
 13392                           ;Dimmer_B1.c: 346: DimmerLights11 = &DimmerLights1;
 13393                           
 13394                           ;incstack = 0
 13395                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13396  1E77  30C0               	movlw	_DimmerLights1& (0+255)
 13397  1E78  0020               	movlb	0	; select bank0
 13398  1E79  00A4               	movwf	??_DimmerLights_Initialization
 13399  1E7A  0824               	movf	??_DimmerLights_Initialization,w
 13400  1E7B  0021               	movlb	1	; select bank1
 13401  1E7C  00D9               	movwf	_DimmerLights11^(0+128)
 13402                           
 13403                           ;Dimmer_B1.c: 347: setDimmerLights_Initialization(1);
 13404  1E7D  3001               	movlw	1
 13405  1E7E  3192  22B7  319E   	fcall	_setDimmerLights_Initialization
 13406                           
 13407                           ;Dimmer_B1.c: 361: Dimmer_Initialization();
 13408  1E81  319D  2570         	fcall	_Dimmer_Initialization
 13409  1E83  0008               	return
 13410  1E84                     __end_of_DimmerLights_Initialization:	
 13411                           
 13412                           	psect	text87
 13413  12B7                     __ptext87:	
 13414 ;; *************** function _setDimmerLights_Initialization *****************
 13415 ;; Defined at:
 13416 ;;		line 366 in file "../src/Dimmer_B1.c"
 13417 ;; Parameters:    Size  Location     Type
 13418 ;;  lights          1    wreg     unsigned char 
 13419 ;; Auto vars:     Size  Location     Type
 13420 ;;  lights          1    3[BANK0 ] unsigned char 
 13421 ;; Return value:  Size  Location     Type
 13422 ;;		None               void
 13423 ;; Registers used:
 13424 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13425 ;; Tracked objects:
 13426 ;;		On entry : 0/0
 13427 ;;		On exit  : 0/0
 13428 ;;		Unchanged: 0/0
 13429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13431 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13432 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13433 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13434 ;;Total ram usage:        2 bytes
 13435 ;; Hardware stack levels used:    1
 13436 ;; Hardware stack levels required when called:    6
 13437 ;; This function calls:
 13438 ;;		_DimmerLightsPointSelect
 13439 ;; This function is called by:
 13440 ;;		_DimmerLights_Initialization
 13441 ;; This function uses a non-reentrant model
 13442 ;;
 13443                           
 13444                           
 13445                           ;psect for function _setDimmerLights_Initialization
 13446  12B7                     _setDimmerLights_Initialization:	
 13447                           
 13448                           ;incstack = 0
 13449                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13450                           ;setDimmerLights_Initialization@lights stored from wreg
 13451  12B7  0020               	movlb	0	; select bank0
 13452  12B8  00A3               	movwf	setDimmerLights_Initialization@lights
 13453                           
 13454                           ;Dimmer_B1.c: 368: DimmerLightsPointSelect(lights);
 13455  12B9  0823               	movf	setDimmerLights_Initialization@lights,w
 13456  12BA  319D  25EB         	fcall	_DimmerLightsPointSelect
 13457                           
 13458                           ;Dimmer_B1.c: 369: DimmerLights->Clear = 1;
 13459  12BC  0020               	movlb	0	; select bank0
 13460  12BD  086A               	movf	_DimmerLights,w
 13461  12BE  3E09               	addlw	9
 13462  12BF  0086               	movwf	6
 13463  12C0  3001               	movlw	1	; select bank2/3
 13464  12C1  0087               	movwf	7
 13465  12C2  1501               	bsf	1,2
 13466                           
 13467                           ;Dimmer_B1.c: 375: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13468  12C3  3020               	movlw	32
 13469  12C4  00A2               	movwf	??_setDimmerLights_Initialization
 13470  12C5  086A               	movf	_DimmerLights,w
 13471  12C6  3E05               	addlw	5
 13472  12C7  0086               	movwf	6
 13473  12C8  3001               	movlw	1	; select bank2/3
 13474  12C9  0087               	movwf	7
 13475  12CA  0822               	movf	??_setDimmerLights_Initialization,w
 13476  12CB  0081               	movwf	1
 13477                           
 13478                           ;Dimmer_B1.c: 376: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13479  12CC  303C               	movlw	60
 13480  12CD  00A2               	movwf	??_setDimmerLights_Initialization
 13481  12CE  086A               	movf	_DimmerLights,w
 13482  12CF  3E06               	addlw	6
 13483  12D0  0086               	movwf	6
 13484  12D1  3001               	movlw	1	; select bank2/3
 13485  12D2  0087               	movwf	7
 13486  12D3  0822               	movf	??_setDimmerLights_Initialization,w
 13487  12D4  0081               	movwf	1
 13488                           
 13489                           ;Dimmer_B1.c: 386: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13490  12D5  086A               	movf	_DimmerLights,w
 13491  12D6  3E06               	addlw	6
 13492  12D7  0086               	movwf	6
 13493  12D8  3001               	movlw	1	; select bank2/3
 13494  12D9  0087               	movwf	7
 13495  12DA  0801               	movf	1,w
 13496  12DB  00A2               	movwf	??_setDimmerLights_Initialization
 13497  12DC  086A               	movf	_DimmerLights,w
 13498  12DD  3E04               	addlw	4
 13499  12DE  0086               	movwf	6
 13500  12DF  3001               	movlw	1	; select bank2/3
 13501  12E0  0087               	movwf	7
 13502  12E1  0822               	movf	??_setDimmerLights_Initialization,w
 13503  12E2  0081               	movwf	1
 13504  12E3  0008               	return
 13505  12E4                     __end_of_setDimmerLights_Initialization:	
 13506                           
 13507                           	psect	text88
 13508  1D70                     __ptext88:	
 13509 ;; *************** function _Dimmer_Initialization *****************
 13510 ;; Defined at:
 13511 ;;		line 795 in file "../src/Dimmer_B1.c"
 13512 ;; Parameters:    Size  Location     Type
 13513 ;;		None
 13514 ;; Auto vars:     Size  Location     Type
 13515 ;;		None
 13516 ;; Return value:  Size  Location     Type
 13517 ;;		None               void
 13518 ;; Registers used:
 13519 ;;		wreg
 13520 ;; Tracked objects:
 13521 ;;		On entry : 0/0
 13522 ;;		On exit  : 0/0
 13523 ;;		Unchanged: 0/0
 13524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13529 ;;Total ram usage:        1 bytes
 13530 ;; Hardware stack levels used:    1
 13531 ;; Hardware stack levels required when called:    5
 13532 ;; This function calls:
 13533 ;;		Nothing
 13534 ;; This function is called by:
 13535 ;;		_DimmerLights_Initialization
 13536 ;; This function uses a non-reentrant model
 13537 ;;
 13538                           
 13539                           
 13540                           ;psect for function _Dimmer_Initialization
 13541  1D70                     _Dimmer_Initialization:	
 13542                           
 13543                           ;Dimmer_B1.c: 797: Dimmer = &Dimmer1;
 13544                           
 13545                           ;incstack = 0
 13546                           ; Regs used in _Dimmer_Initialization: [wreg]
 13547  1D70  3068               	movlw	_Dimmer1& (0+255)
 13548  1D71  0020               	movlb	0	; select bank0
 13549  1D72  00A0               	movwf	??_Dimmer_Initialization
 13550  1D73  0820               	movf	??_Dimmer_Initialization,w
 13551  1D74  00F6               	movwf	_Dimmer
 13552  1D75  0008               	return
 13553  1D76                     __end_of_Dimmer_Initialization:	
 13554                           
 13555                           	psect	text89
 13556  1D5B                     __ptext89:	
 13557 ;; *************** function _DelayOff_Main *****************
 13558 ;; Defined at:
 13559 ;;		line 41 in file "../src/DelayOff_B1.c"
 13560 ;; Parameters:    Size  Location     Type
 13561 ;;		None
 13562 ;; Auto vars:     Size  Location     Type
 13563 ;;		None
 13564 ;; Return value:  Size  Location     Type
 13565 ;;		None               void
 13566 ;; Registers used:
 13567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13568 ;; Tracked objects:
 13569 ;;		On entry : 0/0
 13570 ;;		On exit  : 0/0
 13571 ;;		Unchanged: 0/0
 13572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13577 ;;Total ram usage:        0 bytes
 13578 ;; Hardware stack levels used:    1
 13579 ;; Hardware stack levels required when called:   10
 13580 ;; This function calls:
 13581 ;;		_DlyOff_Main
 13582 ;; This function is called by:
 13583 ;;		_main
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           
 13588                           ;psect for function _DelayOff_Main
 13589  1D5B                     _DelayOff_Main:	
 13590                           
 13591                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13592                           
 13593                           ;incstack = 0
 13594                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13595  1D5B  3001               	movlw	1
 13596  1D5C  318C  24FE         	fcall	_DlyOff_Main
 13597  1D5E  0008               	return
 13598  1D5F                     __end_of_DelayOff_Main:	
 13599                           
 13600                           	psect	text90
 13601  0CFE                     __ptext90:	
 13602 ;; *************** function _DlyOff_Main *****************
 13603 ;; Defined at:
 13604 ;;		line 62 in file "../src/DelayOff_B1.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  sw              1    wreg     unsigned char 
 13607 ;; Auto vars:     Size  Location     Type
 13608 ;;  sw              1   68[BANK0 ] unsigned char 
 13609 ;; Return value:  Size  Location     Type
 13610 ;;		None               void
 13611 ;; Registers used:
 13612 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13613 ;; Tracked objects:
 13614 ;;		On entry : 0/0
 13615 ;;		On exit  : 0/0
 13616 ;;		Unchanged: 0/0
 13617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;Total ram usage:        3 bytes
 13623 ;; Hardware stack levels used:    1
 13624 ;; Hardware stack levels required when called:    9
 13625 ;; This function calls:
 13626 ;;		_DelayOffPointSelect
 13627 ;;		_setBuz
 13628 ;;		_setDimmerLights_Switch
 13629 ;;		_setDimmerLights_Trigger
 13630 ;;		_setRFSW_Status
 13631 ;;		_setRF_DimmerLights
 13632 ;;		_setSw_Status
 13633 ;;		_setTxData
 13634 ;; This function is called by:
 13635 ;;		_DelayOff_Main
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           
 13640                           ;psect for function _DlyOff_Main
 13641  0CFE                     _DlyOff_Main:	
 13642                           
 13643                           ;incstack = 0
 13644                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13645                           ;DlyOff_Main@sw stored from wreg
 13646  0CFE  0020               	movlb	0	; select bank0
 13647  0CFF  00E4               	movwf	DlyOff_Main@sw
 13648                           
 13649                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13650  0D00  0864               	movf	DlyOff_Main@sw,w
 13651  0D01  319D  25E0  318C   	fcall	_DelayOffPointSelect
 13652                           
 13653                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13654  0D04  0020               	movlb	0	; select bank0
 13655  0D05  0869               	movf	_DelayOff,w
 13656  0D06  0086               	movwf	6
 13657  0D07  3001               	movlw	1	; select bank2/3
 13658  0D08  0087               	movwf	7
 13659  0D09  1C81               	btfss	1,1
 13660  0D0A  0008               	return
 13661                           
 13662                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13663  0D0B  0869               	movf	_DelayOff,w
 13664  0D0C  0086               	movwf	6
 13665  0D0D  3001               	movlw	1	; select bank2/3
 13666  0D0E  0087               	movwf	7
 13667  0D0F  3001               	movlw	1
 13668  0D10  0781               	addwf	1,f
 13669  0D11  3141               	addfsr 1,1
 13670  0D12  1803               	skipnc
 13671  0D13  0A81               	incf	1,f
 13672                           
 13673                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13674  0D14  0869               	movf	_DelayOff,w
 13675  0D15  0086               	movwf	6
 13676  0D16  3001               	movlw	1	; select bank2/3
 13677  0D17  0087               	movwf	7
 13678  0D18  3F40               	moviw [0]fsr1
 13679  0D19  00E2               	movwf	??_DlyOff_Main
 13680  0D1A  3F41               	moviw [1]fsr1
 13681  0D1B  00E3               	movwf	??_DlyOff_Main+1
 13682  0D1C  3015               	movlw	21
 13683  0D1D  0263               	subwf	??_DlyOff_Main+1,w
 13684  0D1E  30E0               	movlw	224
 13685  0D1F  1903               	skipnz
 13686  0D20  0262               	subwf	??_DlyOff_Main,w
 13687  0D21  1C03               	skipc
 13688  0D22  0008               	return
 13689                           
 13690                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13691  0D23  0869               	movf	_DelayOff,w
 13692  0D24  0086               	movwf	6
 13693  0D25  3001               	movlw	1	; select bank2/3
 13694  0D26  0087               	movwf	7
 13695  0D27  3000               	movlw	0
 13696  0D28  3FC0               	movwi [0]fsr1
 13697  0D29  3FC1               	movwi [1]fsr1
 13698                           
 13699                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13700  0D2A  3001               	movlw	1
 13701  0D2B  00E2               	movwf	??_DlyOff_Main
 13702  0D2C  0869               	movf	_DelayOff,w
 13703  0D2D  0086               	movwf	6
 13704  0D2E  3001               	movlw	1	; select bank2/3
 13705  0D2F  0087               	movwf	7
 13706  0D30  0862               	movf	??_DlyOff_Main,w
 13707  0D31  0781               	addwf	1,f
 13708                           
 13709                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13710  0D32  0869               	movf	_DelayOff,w
 13711  0D33  0086               	movwf	6
 13712  0D34  3001               	movlw	1	; select bank2/3
 13713  0D35  0087               	movwf	7
 13714  0D36  0869               	movf	_DelayOff,w
 13715  0D37  0084               	movwf	4
 13716  0D38  3001               	movlw	1	; select bank2/3
 13717  0D39  0085               	movwf	5
 13718  0D3A  0800               	movf	0,w
 13719  0D3B  0201               	subwf	1,w
 13720  0D3C  1C03               	skipc
 13721  0D3D  0008               	return
 13722                           
 13723                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13724  0D3E  0869               	movf	_DelayOff,w
 13725  0D3F  0086               	movwf	6
 13726  0D40  3001               	movlw	1	; select bank2/3
 13727  0D41  0087               	movwf	7
 13728  0D42  0181               	clrf	1
 13729                           
 13730                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13731  0D43  0869               	movf	_DelayOff,w
 13732  0D44  0086               	movwf	6
 13733  0D45  3001               	movlw	1	; select bank2/3
 13734  0D46  0087               	movwf	7
 13735  0D47  1081               	bcf	1,1
 13736                           
 13737                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13738  0D48  01A2               	clrf	setSw_Status@command
 13739  0D49  0864               	movf	DlyOff_Main@sw,w
 13740  0D4A  319E  26AD  318C   	fcall	_setSw_Status
 13741                           
 13742                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13743  0D4D  0020               	movlb	0	; select bank0
 13744  0D4E  01A2               	clrf	setRFSW_Status@command
 13745  0D4F  0864               	movf	DlyOff_Main@sw,w
 13746  0D50  319E  2691  318C   	fcall	_setRFSW_Status
 13747                           
 13748                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13749  0D53  0020               	movlb	0	; select bank0
 13750  0D54  01DD               	clrf	setRF_DimmerLights@on
 13751  0D55  0864               	movf	DlyOff_Main@sw,w
 13752  0D56  318B  23B2  318C   	fcall	_setRF_DimmerLights
 13753                           
 13754                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13755  0D59  0020               	movlb	0	; select bank0
 13756  0D5A  01A2               	clrf	setDimmerLights_Trigger@command
 13757  0D5B  0AA2               	incf	setDimmerLights_Trigger@command,f
 13758  0D5C  0864               	movf	DlyOff_Main@sw,w
 13759  0D5D  319E  26F9  318C   	fcall	_setDimmerLights_Trigger
 13760                           
 13761                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13762  0D60  0020               	movlb	0	; select bank0
 13763  0D61  01A2               	clrf	setDimmerLights_Switch@command
 13764  0D62  0864               	movf	DlyOff_Main@sw,w
 13765  0D63  319E  26E9  318C   	fcall	_setDimmerLights_Switch
 13766                           
 13767                           ;DelayOff_B1.c: 78: setTxData();
 13768  0D66  3185  25C7  318C   	fcall	_setTxData
 13769                           
 13770                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13771  0D69  3064               	movlw	100
 13772  0D6A  0020               	movlb	0	; select bank0
 13773  0D6B  00A9               	movwf	setBuz@time
 13774  0D6C  3000               	movlw	0
 13775  0D6D  00AA               	movwf	setBuz@time+1
 13776  0D6E  3001               	movlw	1
 13777  0D6F  3197  27A7         	fcall	_setBuz
 13778  0D71  0008               	return
 13779  0D72                     __end_of_DlyOff_Main:	
 13780                           
 13781                           	psect	text91
 13782  05C7                     __ptext91:	
 13783 ;; *************** function _setTxData *****************
 13784 ;; Defined at:
 13785 ;;		line 186 in file "../src/RF_Control_B1.c"
 13786 ;; Parameters:    Size  Location     Type
 13787 ;;		None
 13788 ;; Auto vars:     Size  Location     Type
 13789 ;;  i               1    0        unsigned char 
 13790 ;; Return value:  Size  Location     Type
 13791 ;;		None               void
 13792 ;; Registers used:
 13793 ;;		wreg, fsr1l, fsr1h
 13794 ;; Tracked objects:
 13795 ;;		On entry : 0/0
 13796 ;;		On exit  : 0/0
 13797 ;;		Unchanged: 0/0
 13798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;Total ram usage:        1 bytes
 13804 ;; Hardware stack levels used:    1
 13805 ;; Hardware stack levels required when called:    5
 13806 ;; This function calls:
 13807 ;;		Nothing
 13808 ;; This function is called by:
 13809 ;;		_DlyOff_Main
 13810 ;;		_setDimmerLights_Adj
 13811 ;;		_setControl_Lights_Table
 13812 ;;		_setRFSW_Control
 13813 ;;		_setRFSW_AdjControl
 13814 ;;		_Sw_DimmerOnFunc
 13815 ;;		_Sw_DimmerOffFunc
 13816 ;; This function uses a non-reentrant model
 13817 ;;
 13818                           
 13819                           
 13820                           ;psect for function _setTxData
 13821  05C7                     _setTxData:	
 13822                           
 13823                           ;RF_Control_B1.c: 187: char i;
 13824                           ;RF_Control_B1.c: 188: if (RF1.Enable == 1) {
 13825                           
 13826                           ;incstack = 0
 13827                           ; Regs used in _setTxData: [wregfsr1]
 13828  05C7  0021               	movlb	1	; select bank1
 13829  05C8  1C3F               	btfss	_RF1^(0+128),0
 13830  05C9  0008               	return
 13831                           
 13832                           ;RF_Control_B1.c: 190: RF1.TransceiveGO = 1;
 13833  05CA  153F               	bsf	_RF1^(0+128),2
 13834                           
 13835                           ;RF_Control_B1.c: 191: RF1.RunTime = 20;
 13836  05CB  3014               	movlw	20
 13837  05CC  00C6               	movwf	(_RF1^(0+128)+7)
 13838  05CD  3000               	movlw	0
 13839  05CE  00C7               	movwf	(_RF1^(0+128)+8)
 13840                           
 13841                           ;RF_Control_B1.c: 201: RF_Data[0] = 0x63;
 13842  05CF  3063               	movlw	99
 13843  05D0  0020               	movlb	0	; select bank0
 13844  05D1  00A0               	movwf	??_setTxData
 13845  05D2  0820               	movf	??_setTxData,w
 13846  05D3  0022               	movlb	2	; select bank2
 13847  05D4  00A0               	movwf	_RF_Data^(0+256)
 13848                           
 13849                           ;RF_Control_B1.c: 202: RF_Data[1] = 0x02;
 13850  05D5  3002               	movlw	2
 13851  05D6  0020               	movlb	0	; select bank0
 13852  05D7  00A0               	movwf	??_setTxData
 13853  05D8  0820               	movf	??_setTxData,w
 13854  05D9  0022               	movlb	2	; select bank2
 13855  05DA  00A1               	movwf	(_RF_Data^(0+256)+1)
 13856                           
 13857                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 13858  05DB  0020               	movlb	0	; select bank0
 13859  05DC  086D               	movf	_product,w
 13860  05DD  0086               	movwf	6
 13861  05DE  3001               	movlw	1	; select bank2/3
 13862  05DF  0087               	movwf	7
 13863  05E0  3001               	movlw	1	; select bank2/3
 13864  05E1  3F42               	moviw [2]fsr1
 13865  05E2  0022               	movlb	2	; select bank2
 13866  05E3  00A2               	movwf	(_RF_Data^(0+256)+2)
 13867                           
 13868                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 13869  05E4  0020               	movlb	0	; select bank0
 13870  05E5  086D               	movf	_product,w
 13871  05E6  0086               	movwf	6
 13872  05E7  3001               	movlw	1	; select bank2/3
 13873  05E8  0087               	movwf	7
 13874  05E9  3001               	movlw	1	; select bank2/3
 13875  05EA  3F43               	moviw [3]fsr1
 13876  05EB  0022               	movlb	2	; select bank2
 13877  05EC  00A3               	movwf	(_RF_Data^(0+256)+3)
 13878                           
 13879                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 13880  05ED  0020               	movlb	0	; select bank0
 13881  05EE  086D               	movf	_product,w
 13882  05EF  0086               	movwf	6
 13883  05F0  3001               	movlw	1	; select bank2/3
 13884  05F1  0087               	movwf	7
 13885  05F2  3001               	movlw	1	; select bank2/3
 13886  05F3  3F44               	moviw [4]fsr1
 13887  05F4  0022               	movlb	2	; select bank2
 13888  05F5  00A4               	movwf	(_RF_Data^(0+256)+4)
 13889                           
 13890                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 13891  05F6  0020               	movlb	0	; select bank0
 13892  05F7  086D               	movf	_product,w
 13893  05F8  0086               	movwf	6
 13894  05F9  3001               	movlw	1	; select bank2/3
 13895  05FA  0087               	movwf	7
 13896  05FB  3001               	movlw	1	; select bank2/3
 13897  05FC  3F45               	moviw [5]fsr1
 13898  05FD  0022               	movlb	2	; select bank2
 13899  05FE  00A5               	movwf	(_RF_Data^(0+256)+5)
 13900                           
 13901                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 13902  05FF  0020               	movlb	0	; select bank0
 13903  0600  086D               	movf	_product,w
 13904  0601  0086               	movwf	6
 13905  0602  3001               	movlw	1	; select bank2/3
 13906  0603  0087               	movwf	7
 13907  0604  3001               	movlw	1	; select bank2/3
 13908  0605  3F46               	moviw [6]fsr1
 13909  0606  0022               	movlb	2	; select bank2
 13910  0607  00A6               	movwf	(_RF_Data^(0+256)+6)
 13911                           
 13912                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 13913  0608  0020               	movlb	0	; select bank0
 13914  0609  086D               	movf	_product,w
 13915  060A  0086               	movwf	6
 13916  060B  3001               	movlw	1	; select bank2/3
 13917  060C  0087               	movwf	7
 13918  060D  3001               	movlw	1	; select bank2/3
 13919  060E  3F47               	moviw [7]fsr1
 13920  060F  0022               	movlb	2	; select bank2
 13921  0610  00A7               	movwf	(_RF_Data^(0+256)+7)
 13922                           
 13923                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 13924  0611  0020               	movlb	0	; select bank0
 13925  0612  086D               	movf	_product,w
 13926  0613  0086               	movwf	6
 13927  0614  3001               	movlw	1	; select bank2/3
 13928  0615  0087               	movwf	7
 13929  0616  3001               	movlw	1	; select bank2/3
 13930  0617  3F48               	moviw [8]fsr1
 13931  0618  0022               	movlb	2	; select bank2
 13932  0619  00A8               	movwf	(_RF_Data^(0+256)+8)
 13933                           
 13934                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 13935  061A  0020               	movlb	0	; select bank0
 13936  061B  086D               	movf	_product,w
 13937  061C  0086               	movwf	6
 13938  061D  3001               	movlw	1	; select bank2/3
 13939  061E  0087               	movwf	7
 13940  061F  3001               	movlw	1	; select bank2/3
 13941  0620  3F49               	moviw [9]fsr1
 13942  0621  0022               	movlb	2	; select bank2
 13943  0622  00A9               	movwf	(_RF_Data^(0+256)+9)
 13944                           
 13945                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 13946  0623  0020               	movlb	0	; select bank0
 13947  0624  086D               	movf	_product,w
 13948  0625  0086               	movwf	6
 13949  0626  3001               	movlw	1	; select bank2/3
 13950  0627  0087               	movwf	7
 13951  0628  3001               	movlw	1	; select bank2/3
 13952  0629  3F4A               	moviw [10]fsr1
 13953  062A  0022               	movlb	2	; select bank2
 13954  062B  00AA               	movwf	(_RF_Data^(0+256)+10)
 13955                           
 13956                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 13957  062C  0020               	movlb	0	; select bank0
 13958  062D  086D               	movf	_product,w
 13959  062E  0086               	movwf	6
 13960  062F  3001               	movlw	1	; select bank2/3
 13961  0630  0087               	movwf	7
 13962  0631  3001               	movlw	1	; select bank2/3
 13963  0632  3F4B               	moviw [11]fsr1
 13964  0633  0022               	movlb	2	; select bank2
 13965  0634  00AB               	movwf	(_RF_Data^(0+256)+11)
 13966                           
 13967                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 13968  0635  0020               	movlb	0	; select bank0
 13969  0636  086D               	movf	_product,w
 13970  0637  0086               	movwf	6
 13971  0638  3001               	movlw	1	; select bank2/3
 13972  0639  0087               	movwf	7
 13973  063A  3001               	movlw	1	; select bank2/3
 13974  063B  3F4C               	moviw [12]fsr1
 13975  063C  0022               	movlb	2	; select bank2
 13976  063D  00AC               	movwf	(_RF_Data^(0+256)+12)
 13977                           
 13978                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 13979  063E  0020               	movlb	0	; select bank0
 13980  063F  086D               	movf	_product,w
 13981  0640  0086               	movwf	6
 13982  0641  3001               	movlw	1	; select bank2/3
 13983  0642  0087               	movwf	7
 13984  0643  3001               	movlw	1	; select bank2/3
 13985  0644  3F4D               	moviw [13]fsr1
 13986  0645  0022               	movlb	2	; select bank2
 13987  0646  00AD               	movwf	(_RF_Data^(0+256)+13)
 13988                           
 13989                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 13990  0647  0020               	movlb	0	; select bank0
 13991  0648  086D               	movf	_product,w
 13992  0649  0086               	movwf	6
 13993  064A  3001               	movlw	1	; select bank2/3
 13994  064B  0087               	movwf	7
 13995  064C  3001               	movlw	1	; select bank2/3
 13996  064D  3F4E               	moviw [14]fsr1
 13997  064E  0022               	movlb	2	; select bank2
 13998  064F  00AE               	movwf	(_RF_Data^(0+256)+14)
 13999                           
 14000                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 14001  0650  0020               	movlb	0	; select bank0
 14002  0651  086D               	movf	_product,w
 14003  0652  0086               	movwf	6
 14004  0653  3001               	movlw	1	; select bank2/3
 14005  0654  0087               	movwf	7
 14006  0655  3001               	movlw	1	; select bank2/3
 14007  0656  3F4F               	moviw [15]fsr1
 14008  0657  0022               	movlb	2	; select bank2
 14009  0658  00AF               	movwf	(_RF_Data^(0+256)+15)
 14010                           
 14011                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 14012  0659  0020               	movlb	0	; select bank0
 14013  065A  086D               	movf	_product,w
 14014  065B  0086               	movwf	6
 14015  065C  3001               	movlw	1	; select bank2/3
 14016  065D  0087               	movwf	7
 14017  065E  3001               	movlw	1	; select bank2/3
 14018  065F  3F50               	moviw [16]fsr1
 14019  0660  0022               	movlb	2	; select bank2
 14020  0661  00B0               	movwf	(_RF_Data^(0+256)+16)
 14021                           
 14022                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 14023  0662  0020               	movlb	0	; select bank0
 14024  0663  086D               	movf	_product,w
 14025  0664  0086               	movwf	6
 14026  0665  3001               	movlw	1	; select bank2/3
 14027  0666  0087               	movwf	7
 14028  0667  3001               	movlw	1	; select bank2/3
 14029  0668  3F51               	moviw [17]fsr1
 14030  0669  0022               	movlb	2	; select bank2
 14031  066A  00B1               	movwf	(_RF_Data^(0+256)+17)
 14032                           
 14033                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 14034  066B  0020               	movlb	0	; select bank0
 14035  066C  086D               	movf	_product,w
 14036  066D  0086               	movwf	6
 14037  066E  3001               	movlw	1	; select bank2/3
 14038  066F  0087               	movwf	7
 14039  0670  3001               	movlw	1	; select bank2/3
 14040  0671  3F52               	moviw [18]fsr1
 14041  0672  0022               	movlb	2	; select bank2
 14042  0673  00B2               	movwf	(_RF_Data^(0+256)+18)
 14043                           
 14044                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 14045  0674  0020               	movlb	0	; select bank0
 14046  0675  086D               	movf	_product,w
 14047  0676  0086               	movwf	6
 14048  0677  3001               	movlw	1	; select bank2/3
 14049  0678  0087               	movwf	7
 14050  0679  3001               	movlw	1	; select bank2/3
 14051  067A  3F53               	moviw [19]fsr1
 14052  067B  0022               	movlb	2	; select bank2
 14053  067C  00B3               	movwf	(_RF_Data^(0+256)+19)
 14054                           
 14055                           ;RF_Control_B1.c: 221: RF_Data[20] = 209;
 14056  067D  30D1               	movlw	209
 14057  067E  0020               	movlb	0	; select bank0
 14058  067F  00A0               	movwf	??_setTxData
 14059  0680  0820               	movf	??_setTxData,w
 14060  0681  0022               	movlb	2	; select bank2
 14061  0682  00B4               	movwf	(_RF_Data^(0+256)+20)
 14062  0683  0008               	return
 14063  0684                     __end_of_setTxData:	
 14064                           
 14065                           	psect	text92
 14066  1EAD                     __ptext92:	
 14067 ;; *************** function _setSw_Status *****************
 14068 ;; Defined at:
 14069 ;;		line 111 in file "../src/Switch_B1.c"
 14070 ;; Parameters:    Size  Location     Type
 14071 ;;  sw              1    wreg     unsigned char 
 14072 ;;  command         1    2[BANK0 ] unsigned char 
 14073 ;; Auto vars:     Size  Location     Type
 14074 ;;  sw              1    3[BANK0 ] unsigned char 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;		None               void
 14077 ;; Registers used:
 14078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14084 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;Total ram usage:        2 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    6
 14091 ;; This function calls:
 14092 ;;		_SwPointSelect
 14093 ;; This function is called by:
 14094 ;;		_DlyOff_Main
 14095 ;;		_setDimmerLights_ERROR
 14096 ;;		_setControl_Lights_Table
 14097 ;;		_setRFSW_Control
 14098 ;; This function uses a non-reentrant model
 14099 ;;
 14100                           
 14101                           
 14102                           ;psect for function _setSw_Status
 14103  1EAD                     _setSw_Status:	
 14104                           
 14105                           ;incstack = 0
 14106                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14107                           ;setSw_Status@sw stored from wreg
 14108  1EAD  0020               	movlb	0	; select bank0
 14109  1EAE  00A3               	movwf	setSw_Status@sw
 14110                           
 14111                           ;Switch_B1.c: 112: SwPointSelect(sw);
 14112  1EAF  0823               	movf	setSw_Status@sw,w
 14113  1EB0  319E  2601         	fcall	_SwPointSelect
 14114                           
 14115                           ;Switch_B1.c: 113: Sw->Status = command;
 14116  1EB2  0020               	movlb	0	; select bank0
 14117  1EB3  086C               	movf	_Sw,w
 14118  1EB4  0086               	movwf	6
 14119  1EB5  3001               	movlw	1	; select bank2/3
 14120  1EB6  0087               	movwf	7
 14121  1EB7  0822               	movf	setSw_Status@command,w
 14122  1EB8  1301               	bcf	1,6
 14123  1EB9  1D03               	skipz
 14124  1EBA  1701               	bsf	1,6
 14125  1EBB  0008               	return
 14126  1EBC                     __end_of_setSw_Status:	
 14127                           
 14128                           	psect	text93
 14129  1E01                     __ptext93:	
 14130 ;; *************** function _SwPointSelect *****************
 14131 ;; Defined at:
 14132 ;;		line 21 in file "../src/Switch_B1.c"
 14133 ;; Parameters:    Size  Location     Type
 14134 ;;  sw              1    wreg     unsigned char 
 14135 ;; Auto vars:     Size  Location     Type
 14136 ;;  sw              1    1[BANK0 ] unsigned char 
 14137 ;; Return value:  Size  Location     Type
 14138 ;;		None               void
 14139 ;; Registers used:
 14140 ;;		wreg
 14141 ;; Tracked objects:
 14142 ;;		On entry : 0/0
 14143 ;;		On exit  : 0/0
 14144 ;;		Unchanged: 0/0
 14145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14149 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14150 ;;Total ram usage:        2 bytes
 14151 ;; Hardware stack levels used:    1
 14152 ;; Hardware stack levels required when called:    5
 14153 ;; This function calls:
 14154 ;;		Nothing
 14155 ;; This function is called by:
 14156 ;;		_setSw_Enable
 14157 ;;		_setSw_Status
 14158 ;;		_setSw_Main
 14159 ;;		_Sw_Detect
 14160 ;; This function uses a non-reentrant model
 14161 ;;
 14162                           
 14163                           
 14164                           ;psect for function _SwPointSelect
 14165  1E01                     _SwPointSelect:	
 14166                           
 14167                           ;incstack = 0
 14168                           ; Regs used in _SwPointSelect: [wreg]
 14169                           ;SwPointSelect@sw stored from wreg
 14170  1E01  0020               	movlb	0	; select bank0
 14171  1E02  00A1               	movwf	SwPointSelect@sw
 14172                           
 14173                           ;Switch_B1.c: 24: if (sw == 1) {
 14174  1E03  0821               	movf	SwPointSelect@sw,w
 14175  1E04  3A01               	xorlw	1
 14176  1E05  1D03               	skipz
 14177  1E06  0008               	return
 14178                           
 14179                           ;Switch_B1.c: 25: Sw = &Sw1;
 14180  1E07  30CF               	movlw	_Sw1& (0+255)
 14181  1E08  00A0               	movwf	??_SwPointSelect
 14182  1E09  0820               	movf	??_SwPointSelect,w
 14183  1E0A  00EC               	movwf	_Sw
 14184  1E0B  0008               	return
 14185  1E0C                     __end_of_SwPointSelect:	
 14186                           
 14187                           	psect	text94
 14188  0BB2                     __ptext94:	
 14189 ;; *************** function _setRF_DimmerLights *****************
 14190 ;; Defined at:
 14191 ;;		line 452 in file "../src/RF_Control_B1.c"
 14192 ;; Parameters:    Size  Location     Type
 14193 ;;  lights          1    wreg     unsigned char 
 14194 ;;  on              1   61[BANK0 ] unsigned char 
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;  lights          1   65[BANK0 ] unsigned char 
 14197 ;;  status          1   64[BANK0 ] unsigned char 
 14198 ;; Return value:  Size  Location     Type
 14199 ;;		None               void
 14200 ;; Registers used:
 14201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14207 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;Total ram usage:        5 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:    8
 14214 ;; This function calls:
 14215 ;;		_setPercentValue
 14216 ;; This function is called by:
 14217 ;;		_DlyOff_Main
 14218 ;;		_setDimmerLights_Adj
 14219 ;;		_setRFSW_Control
 14220 ;;		_Sw_DimmerOnFunc
 14221 ;;		_Sw_DimmerOffFunc
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           
 14226                           ;psect for function _setRF_DimmerLights
 14227  0BB2                     _setRF_DimmerLights:	
 14228                           
 14229                           ;incstack = 0
 14230                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14231                           ;setRF_DimmerLights@lights stored from wreg
 14232  0BB2  0020               	movlb	0	; select bank0
 14233  0BB3  00E1               	movwf	setRF_DimmerLights@lights
 14234                           
 14235                           ;RF_Control_B1.c: 453: char status;
 14236                           ;RF_Control_B1.c: 454: status = 1;
 14237  0BB4  01E0               	clrf	setRF_DimmerLights@status
 14238  0BB5  0AE0               	incf	setRF_DimmerLights@status,f
 14239                           
 14240                           ;RF_Control_B1.c: 455: status <<= (lights - 1);
 14241  0BB6  0861               	movf	setRF_DimmerLights@lights,w
 14242  0BB7  3EFF               	addlw	-1
 14243  0BB8  0A89               	incf	9,f
 14244  0BB9  2BBC               	goto	u7550
 14245  0BBA                     u7555:	
 14246  0BBA  1003               	clrc
 14247  0BBB  0DE0               	rlf	setRF_DimmerLights@status,f
 14248  0BBC                     u7550:	
 14249  0BBC  3EFF               	addlw	-1
 14250  0BBD  1D03               	skipz
 14251  0BBE  2BBA               	goto	u7555
 14252                           
 14253                           ;RF_Control_B1.c: 456: product->Data[11]=lights;
 14254  0BBF  0861               	movf	setRF_DimmerLights@lights,w
 14255  0BC0  00DE               	movwf	??_setRF_DimmerLights
 14256  0BC1  086D               	movf	_product,w
 14257  0BC2  3E0B               	addlw	11
 14258  0BC3  0086               	movwf	6
 14259  0BC4  3001               	movlw	1	; select bank2/3
 14260  0BC5  0087               	movwf	7
 14261  0BC6  085E               	movf	??_setRF_DimmerLights,w
 14262  0BC7  0081               	movwf	1
 14263                           
 14264                           ;RF_Control_B1.c: 459: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 14265  0BC8  3020               	movlw	32
 14266  0BC9  3195  25C9  318B   	fcall	_setPercentValue
 14267  0BCC  0020               	movlb	0	; select bank0
 14268  0BCD  00DE               	movwf	??_setRF_DimmerLights
 14269  0BCE  0861               	movf	setRF_DimmerLights@lights,w
 14270  0BCF  3E14               	addlw	20
 14271  0BD0  076D               	addwf	_product,w
 14272  0BD1  00DF               	movwf	??_setRF_DimmerLights+1
 14273  0BD2  085F               	movf	??_setRF_DimmerLights+1,w
 14274  0BD3  0086               	movwf	6
 14275  0BD4  3001               	movlw	1	; select bank2/3
 14276  0BD5  0087               	movwf	7
 14277  0BD6  085E               	movf	??_setRF_DimmerLights,w
 14278  0BD7  0081               	movwf	1
 14279                           
 14280                           ;RF_Control_B1.c: 462: product->Data[9]=product->Data[20 + lights];
 14281  0BD8  0861               	movf	setRF_DimmerLights@lights,w
 14282  0BD9  3E14               	addlw	20
 14283  0BDA  076D               	addwf	_product,w
 14284  0BDB  00DE               	movwf	??_setRF_DimmerLights
 14285  0BDC  085E               	movf	??_setRF_DimmerLights,w
 14286  0BDD  0086               	movwf	6
 14287  0BDE  3001               	movlw	1	; select bank2/3
 14288  0BDF  0087               	movwf	7
 14289  0BE0  0801               	movf	1,w
 14290  0BE1  00DF               	movwf	??_setRF_DimmerLights+1
 14291  0BE2  086D               	movf	_product,w
 14292  0BE3  3E09               	addlw	9
 14293  0BE4  0086               	movwf	6
 14294  0BE5  3001               	movlw	1	; select bank2/3
 14295  0BE6  0087               	movwf	7
 14296  0BE7  085F               	movf	??_setRF_DimmerLights+1,w
 14297  0BE8  0081               	movwf	1
 14298                           
 14299                           ;RF_Control_B1.c: 463: product->Data[17]=product->Data[26 + lights];
 14300  0BE9  0861               	movf	setRF_DimmerLights@lights,w
 14301  0BEA  3E1A               	addlw	26
 14302  0BEB  076D               	addwf	_product,w
 14303  0BEC  00DE               	movwf	??_setRF_DimmerLights
 14304  0BED  085E               	movf	??_setRF_DimmerLights,w
 14305  0BEE  0086               	movwf	6
 14306  0BEF  3001               	movlw	1	; select bank2/3
 14307  0BF0  0087               	movwf	7
 14308  0BF1  0801               	movf	1,w
 14309  0BF2  00DF               	movwf	??_setRF_DimmerLights+1
 14310  0BF3  086D               	movf	_product,w
 14311  0BF4  3E11               	addlw	17
 14312  0BF5  0086               	movwf	6
 14313  0BF6  3001               	movlw	1	; select bank2/3
 14314  0BF7  0087               	movwf	7
 14315  0BF8  085F               	movf	??_setRF_DimmerLights+1,w
 14316  0BF9  0081               	movwf	1
 14317                           
 14318                           ;RF_Control_B1.c: 464: if (on == 1) {
 14319  0BFA  085D               	movf	setRF_DimmerLights@on,w
 14320  0BFB  3A01               	xorlw	1
 14321  0BFC  1D03               	skipz
 14322  0BFD  2C0E               	goto	l7856
 14323                           
 14324                           ;RF_Control_B1.c: 465: product->Data[15]=(product->Data[15] | status);
 14325  0BFE  086D               	movf	_product,w
 14326  0BFF  3E0F               	addlw	15
 14327  0C00  0086               	movwf	6
 14328  0C01  3001               	movlw	1	; select bank2/3
 14329  0C02  0087               	movwf	7
 14330  0C03  0801               	movf	1,w
 14331  0C04  0460               	iorwf	setRF_DimmerLights@status,w
 14332  0C05  00DE               	movwf	??_setRF_DimmerLights
 14333  0C06  086D               	movf	_product,w
 14334  0C07  3E0F               	addlw	15
 14335  0C08  0086               	movwf	6
 14336  0C09  3001               	movlw	1	; select bank2/3
 14337  0C0A  0087               	movwf	7
 14338  0C0B  085E               	movf	??_setRF_DimmerLights,w
 14339  0C0C  0081               	movwf	1
 14340                           
 14341                           ;RF_Control_B1.c: 466: } else {
 14342  0C0D  0008               	return
 14343  0C0E                     l7856:	
 14344                           
 14345                           ;RF_Control_B1.c: 467: product->Data[15]=(product->Data[15]&(~status));
 14346  0C0E  086D               	movf	_product,w
 14347  0C0F  3E0F               	addlw	15
 14348  0C10  0086               	movwf	6
 14349  0C11  3001               	movlw	1	; select bank2/3
 14350  0C12  0087               	movwf	7
 14351  0C13  0960               	comf	setRF_DimmerLights@status,w
 14352  0C14  0501               	andwf	1,w
 14353  0C15  00DE               	movwf	??_setRF_DimmerLights
 14354  0C16  086D               	movf	_product,w
 14355  0C17  3E0F               	addlw	15
 14356  0C18  0086               	movwf	6
 14357  0C19  3001               	movlw	1	; select bank2/3
 14358  0C1A  0087               	movwf	7
 14359  0C1B  085E               	movf	??_setRF_DimmerLights,w
 14360  0C1C  0081               	movwf	1
 14361  0C1D  0008               	return
 14362  0C1E                     __end_of_setRF_DimmerLights:	
 14363                           
 14364                           	psect	text95
 14365  15C9                     __ptext95:	
 14366 ;; *************** function _setPercentValue *****************
 14367 ;; Defined at:
 14368 ;;		line 777 in file "../src/Dimmer_B1.c"
 14369 ;; Parameters:    Size  Location     Type
 14370 ;;  value           1    wreg     unsigned char 
 14371 ;; Auto vars:     Size  Location     Type
 14372 ;;  value           1   57[BANK0 ] unsigned char 
 14373 ;;  i               3   58[BANK0 ] float 
 14374 ;; Return value:  Size  Location     Type
 14375 ;;                  1    wreg      unsigned char 
 14376 ;; Registers used:
 14377 ;;		wreg, status,2, status,0, pclath, cstack
 14378 ;; Tracked objects:
 14379 ;;		On entry : 0/0
 14380 ;;		On exit  : 0/0
 14381 ;;		Unchanged: 0/0
 14382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14387 ;;Total ram usage:        4 bytes
 14388 ;; Hardware stack levels used:    1
 14389 ;; Hardware stack levels required when called:    7
 14390 ;; This function calls:
 14391 ;;		___awtoft
 14392 ;;		___ftdiv
 14393 ;;		___fttol
 14394 ;; This function is called by:
 14395 ;;		_Flash_Memory_Initialization
 14396 ;;		_setRF_DimmerLights
 14397 ;; This function uses a non-reentrant model
 14398 ;;
 14399                           
 14400                           
 14401                           ;psect for function _setPercentValue
 14402  15C9                     _setPercentValue:	
 14403                           
 14404                           ;incstack = 0
 14405                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14406                           ;setPercentValue@value stored from wreg
 14407  15C9  0020               	movlb	0	; select bank0
 14408  15CA  00D9               	movwf	setPercentValue@value
 14409                           
 14410                           ;Dimmer_B1.c: 779: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14411  15CB  3000               	movlw	0
 14412  15CC  00DA               	movwf	setPercentValue@i
 14413  15CD  30E0               	movlw	224
 14414  15CE  00DB               	movwf	setPercentValue@i+1
 14415  15CF  3041               	movlw	65
 14416  15D0  00DC               	movwf	setPercentValue@i+2
 14417                           
 14418                           ;Dimmer_B1.c: 780: i /= 100;
 14419  15D1  3000               	movlw	0
 14420  15D2  00AE               	movwf	___ftdiv@f2
 14421  15D3  30C8               	movlw	200
 14422  15D4  00AF               	movwf	___ftdiv@f2+1
 14423  15D5  3042               	movlw	66
 14424  15D6  00B0               	movwf	___ftdiv@f2+2
 14425  15D7  085A               	movf	setPercentValue@i,w
 14426  15D8  00B1               	movwf	___ftdiv@f1
 14427  15D9  085B               	movf	setPercentValue@i+1,w
 14428  15DA  00B2               	movwf	___ftdiv@f1+1
 14429  15DB  085C               	movf	setPercentValue@i+2,w
 14430  15DC  00B3               	movwf	___ftdiv@f1+2
 14431  15DD  3187  2738  3195   	fcall	___ftdiv
 14432  15E0  0020               	movlb	0	; select bank0
 14433  15E1  082E               	movf	?___ftdiv,w
 14434  15E2  00DA               	movwf	setPercentValue@i
 14435  15E3  082F               	movf	?___ftdiv+1,w
 14436  15E4  00DB               	movwf	setPercentValue@i+1
 14437  15E5  0830               	movf	?___ftdiv+2,w
 14438  15E6  00DC               	movwf	setPercentValue@i+2
 14439                           
 14440                           ;Dimmer_B1.c: 781: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14441  15E7  0859               	movf	setPercentValue@value,w
 14442  15E8  3EE0               	addlw	224
 14443  15E9  00A8               	movwf	___awtoft@c
 14444  15EA  30FF               	movlw	255
 14445  15EB  1803               	skipnc
 14446  15EC  3000               	movlw	0
 14447  15ED  00A9               	movwf	___awtoft@c+1
 14448  15EE  3191  2160  3195   	fcall	___awtoft
 14449  15F1  0020               	movlb	0	; select bank0
 14450  15F2  0828               	movf	?___awtoft,w
 14451  15F3  00B1               	movwf	___ftdiv@f1
 14452  15F4  0829               	movf	?___awtoft+1,w
 14453  15F5  00B2               	movwf	___ftdiv@f1+1
 14454  15F6  082A               	movf	?___awtoft+2,w
 14455  15F7  00B3               	movwf	___ftdiv@f1+2
 14456  15F8  085A               	movf	setPercentValue@i,w
 14457  15F9  00AE               	movwf	___ftdiv@f2
 14458  15FA  085B               	movf	setPercentValue@i+1,w
 14459  15FB  00AF               	movwf	___ftdiv@f2+1
 14460  15FC  085C               	movf	setPercentValue@i+2,w
 14461  15FD  00B0               	movwf	___ftdiv@f2+2
 14462  15FE  3187  2738  3195   	fcall	___ftdiv
 14463  1601  0020               	movlb	0	; select bank0
 14464  1602  082E               	movf	?___ftdiv,w
 14465  1603  00CB               	movwf	___fttol@f1
 14466  1604  082F               	movf	?___ftdiv+1,w
 14467  1605  00CC               	movwf	___fttol@f1+1
 14468  1606  0830               	movf	?___ftdiv+2,w
 14469  1607  00CD               	movwf	___fttol@f1+2
 14470  1608  318E  26EE         	fcall	___fttol
 14471  160A  0020               	movlb	0	; select bank0
 14472  160B  034B               	decf	?___fttol,w
 14473  160C  3AFF               	xorlw	255
 14474  160D  3E64               	addlw	100
 14475  160E  0008               	return
 14476  160F                     __end_of_setPercentValue:	
 14477                           
 14478                           	psect	text96
 14479  0EEE                     __ptext96:	
 14480 ;; *************** function ___fttol *****************
 14481 ;; Defined at:
 14482 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;  f1              3   43[BANK0 ] float 
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;  lval            4   52[BANK0 ] unsigned long 
 14487 ;;  exp1            1   56[BANK0 ] unsigned char 
 14488 ;;  sign1           1   51[BANK0 ] unsigned char 
 14489 ;; Return value:  Size  Location     Type
 14490 ;;                  4   43[BANK0 ] long 
 14491 ;; Registers used:
 14492 ;;		wreg, status,2, status,0
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/0
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14498 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14501 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;Total ram usage:       14 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    5
 14505 ;; This function calls:
 14506 ;;		Nothing
 14507 ;; This function is called by:
 14508 ;;		_getPercentValue
 14509 ;;		_setPercentValue
 14510 ;; This function uses a non-reentrant model
 14511 ;;
 14512                           
 14513                           
 14514                           ;psect for function ___fttol
 14515  0EEE                     ___fttol:	
 14516                           
 14517                           ;incstack = 0
 14518                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14519  0EEE  0020               	movlb	0	; select bank0
 14520  0EEF  084B               	movf	___fttol@f1,w
 14521  0EF0  00CF               	movwf	??___fttol
 14522  0EF1  084C               	movf	___fttol@f1+1,w
 14523  0EF2  00D0               	movwf	??___fttol+1
 14524  0EF3  084D               	movf	___fttol@f1+2,w
 14525  0EF4  00D1               	movwf	??___fttol+2
 14526  0EF5  1003               	clrc
 14527  0EF6  0D50               	rlf	??___fttol+1,w
 14528  0EF7  0D51               	rlf	??___fttol+2,w
 14529  0EF8  00D2               	movwf	??___fttol+3
 14530  0EF9  0852               	movf	??___fttol+3,w
 14531  0EFA  00D8               	movwf	___fttol@exp1
 14532  0EFB  08D8               	movf	___fttol@exp1,f
 14533  0EFC  1D03               	skipz
 14534  0EFD  2F07               	goto	l5548
 14535  0EFE  3000               	movlw	0
 14536  0EFF  00CE               	movwf	?___fttol+3
 14537  0F00  3000               	movlw	0
 14538  0F01  00CD               	movwf	?___fttol+2
 14539  0F02  3000               	movlw	0
 14540  0F03  00CC               	movwf	?___fttol+1
 14541  0F04  3000               	movlw	0
 14542  0F05  00CB               	movwf	?___fttol
 14543  0F06  0008               	return
 14544  0F07                     l5548:	
 14545  0F07  084B               	movf	___fttol@f1,w
 14546  0F08  00CF               	movwf	??___fttol
 14547  0F09  084C               	movf	___fttol@f1+1,w
 14548  0F0A  00D0               	movwf	??___fttol+1
 14549  0F0B  084D               	movf	___fttol@f1+2,w
 14550  0F0C  00D1               	movwf	??___fttol+2
 14551  0F0D  3017               	movlw	23
 14552  0F0E                     u4215:	
 14553  0F0E  36D1               	lsrf	??___fttol+2,f
 14554  0F0F  0CD0               	rrf	??___fttol+1,f
 14555  0F10  0CCF               	rrf	??___fttol,f
 14556  0F11  0B89               	decfsz	9,f
 14557  0F12  2F0E               	goto	u4215
 14558  0F13  084F               	movf	??___fttol,w
 14559  0F14  00D2               	movwf	??___fttol+3
 14560  0F15  0852               	movf	??___fttol+3,w
 14561  0F16  00D3               	movwf	___fttol@sign1
 14562  0F17  17CC               	bsf	___fttol@f1+1,7
 14563  0F18  30FF               	movlw	255
 14564  0F19  05CB               	andwf	___fttol@f1,f
 14565  0F1A  30FF               	movlw	255
 14566  0F1B  05CC               	andwf	___fttol@f1+1,f
 14567  0F1C  3000               	movlw	0
 14568  0F1D  05CD               	andwf	___fttol@f1+2,f
 14569  0F1E  084B               	movf	___fttol@f1,w
 14570  0F1F  00D4               	movwf	___fttol@lval
 14571  0F20  084C               	movf	___fttol@f1+1,w
 14572  0F21  00D5               	movwf	___fttol@lval+1
 14573  0F22  084D               	movf	___fttol@f1+2,w
 14574  0F23  00D6               	movwf	___fttol@lval+2
 14575  0F24  01D7               	clrf	___fttol@lval+3
 14576  0F25  308E               	movlw	142
 14577  0F26  02D8               	subwf	___fttol@exp1,f
 14578  0F27  1FD8               	btfss	___fttol@exp1,7
 14579  0F28  2F45               	goto	l5568
 14580  0F29  0858               	movf	___fttol@exp1,w
 14581  0F2A  3A80               	xorlw	128
 14582  0F2B  3E8F               	addlw	143
 14583  0F2C  1803               	skipnc
 14584  0F2D  2F37               	goto	l5566
 14585  0F2E  3000               	movlw	0
 14586  0F2F  00CE               	movwf	?___fttol+3
 14587  0F30  3000               	movlw	0
 14588  0F31  00CD               	movwf	?___fttol+2
 14589  0F32  3000               	movlw	0
 14590  0F33  00CC               	movwf	?___fttol+1
 14591  0F34  3000               	movlw	0
 14592  0F35  00CB               	movwf	?___fttol
 14593  0F36  0008               	return
 14594  0F37                     l5566:	
 14595  0F37  3001               	movlw	1
 14596  0F38                     u4245:	
 14597  0F38  36D7               	lsrf	___fttol@lval+3,f
 14598  0F39  0CD6               	rrf	___fttol@lval+2,f
 14599  0F3A  0CD5               	rrf	___fttol@lval+1,f
 14600  0F3B  0CD4               	rrf	___fttol@lval,f
 14601  0F3C  0B89               	decfsz	9,f
 14602  0F3D  2F38               	goto	u4245
 14603  0F3E  3001               	movlw	1
 14604  0F3F  00CF               	movwf	??___fttol
 14605  0F40  084F               	movf	??___fttol,w
 14606  0F41  07D8               	addwf	___fttol@exp1,f
 14607  0F42  1903               	btfsc	3,2
 14608  0F43  2F5E               	goto	l5578
 14609  0F44  2F37               	goto	l5566
 14610  0F45                     l5568:	
 14611  0F45  3018               	movlw	24
 14612  0F46  0258               	subwf	___fttol@exp1,w
 14613  0F47  1C03               	skipc
 14614  0F48  2F5B               	goto	l5576
 14615  0F49  3000               	movlw	0
 14616  0F4A  00CE               	movwf	?___fttol+3
 14617  0F4B  3000               	movlw	0
 14618  0F4C  00CD               	movwf	?___fttol+2
 14619  0F4D  3000               	movlw	0
 14620  0F4E  00CC               	movwf	?___fttol+1
 14621  0F4F  3000               	movlw	0
 14622  0F50  00CB               	movwf	?___fttol
 14623  0F51  0008               	return
 14624  0F52                     l5574:	
 14625  0F52  3001               	movlw	1
 14626  0F53                     u4275:	
 14627  0F53  35D4               	lslf	___fttol@lval,f
 14628  0F54  0DD5               	rlf	___fttol@lval+1,f
 14629  0F55  0DD6               	rlf	___fttol@lval+2,f
 14630  0F56  0DD7               	rlf	___fttol@lval+3,f
 14631  0F57  0B89               	decfsz	9,f
 14632  0F58  2F53               	goto	u4275
 14633  0F59  3001               	movlw	1
 14634  0F5A  02D8               	subwf	___fttol@exp1,f
 14635  0F5B                     l5576:	
 14636  0F5B  08D8               	movf	___fttol@exp1,f
 14637  0F5C  1D03               	skipz
 14638  0F5D  2F52               	goto	l5574
 14639  0F5E                     l5578:	
 14640  0F5E  0853               	movf	___fttol@sign1,w
 14641  0F5F  1903               	btfsc	3,2
 14642  0F60  2F6C               	goto	l5582
 14643  0F61  09D4               	comf	___fttol@lval,f
 14644  0F62  09D5               	comf	___fttol@lval+1,f
 14645  0F63  09D6               	comf	___fttol@lval+2,f
 14646  0F64  09D7               	comf	___fttol@lval+3,f
 14647  0F65  0AD4               	incf	___fttol@lval,f
 14648  0F66  1903               	skipnz
 14649  0F67  0AD5               	incf	___fttol@lval+1,f
 14650  0F68  1903               	skipnz
 14651  0F69  0AD6               	incf	___fttol@lval+2,f
 14652  0F6A  1903               	skipnz
 14653  0F6B  0AD7               	incf	___fttol@lval+3,f
 14654  0F6C                     l5582:	
 14655  0F6C  0857               	movf	___fttol@lval+3,w
 14656  0F6D  00CE               	movwf	?___fttol+3
 14657  0F6E  0856               	movf	___fttol@lval+2,w
 14658  0F6F  00CD               	movwf	?___fttol+2
 14659  0F70  0855               	movf	___fttol@lval+1,w
 14660  0F71  00CC               	movwf	?___fttol+1
 14661  0F72  0854               	movf	___fttol@lval,w
 14662  0F73  00CB               	movwf	?___fttol
 14663  0F74  0008               	return
 14664  0F75                     __end_of___fttol:	
 14665                           
 14666                           	psect	text97
 14667  0738                     __ptext97:	
 14668 ;; *************** function ___ftdiv *****************
 14669 ;; Defined at:
 14670 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14671 ;; Parameters:    Size  Location     Type
 14672 ;;  f2              3   14[BANK0 ] float 
 14673 ;;  f1              3   17[BANK0 ] float 
 14674 ;; Auto vars:     Size  Location     Type
 14675 ;;  f3              3   25[BANK0 ] float 
 14676 ;;  sign            1   29[BANK0 ] unsigned char 
 14677 ;;  exp             1   28[BANK0 ] unsigned char 
 14678 ;;  cntr            1   24[BANK0 ] unsigned char 
 14679 ;; Return value:  Size  Location     Type
 14680 ;;                  3   14[BANK0 ] float 
 14681 ;; Registers used:
 14682 ;;		wreg, status,2, status,0, pclath, cstack
 14683 ;; Tracked objects:
 14684 ;;		On entry : 0/0
 14685 ;;		On exit  : 0/0
 14686 ;;		Unchanged: 0/0
 14687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14688 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14689 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14690 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14691 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;Total ram usage:       16 bytes
 14693 ;; Hardware stack levels used:    1
 14694 ;; Hardware stack levels required when called:    6
 14695 ;; This function calls:
 14696 ;;		___ftpack
 14697 ;; This function is called by:
 14698 ;;		_getPercentValue
 14699 ;;		_setPercentValue
 14700 ;; This function uses a non-reentrant model
 14701 ;;
 14702                           
 14703                           
 14704                           ;psect for function ___ftdiv
 14705  0738                     ___ftdiv:	
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14709  0738  0020               	movlb	0	; select bank0
 14710  0739  0831               	movf	___ftdiv@f1,w
 14711  073A  00B4               	movwf	??___ftdiv
 14712  073B  0832               	movf	___ftdiv@f1+1,w
 14713  073C  00B5               	movwf	??___ftdiv+1
 14714  073D  0833               	movf	___ftdiv@f1+2,w
 14715  073E  00B6               	movwf	??___ftdiv+2
 14716  073F  1003               	clrc
 14717  0740  0D35               	rlf	??___ftdiv+1,w
 14718  0741  0D36               	rlf	??___ftdiv+2,w
 14719  0742  00B7               	movwf	??___ftdiv+3
 14720  0743  0837               	movf	??___ftdiv+3,w
 14721  0744  00BC               	movwf	___ftdiv@exp
 14722  0745  08BC               	movf	___ftdiv@exp,f
 14723  0746  1D03               	skipz
 14724  0747  2F4F               	goto	l5456
 14725  0748  3000               	movlw	0
 14726  0749  00AE               	movwf	?___ftdiv
 14727  074A  3000               	movlw	0
 14728  074B  00AF               	movwf	?___ftdiv+1
 14729  074C  3000               	movlw	0
 14730  074D  00B0               	movwf	?___ftdiv+2
 14731  074E  0008               	return
 14732  074F                     l5456:	
 14733  074F  082E               	movf	___ftdiv@f2,w
 14734  0750  00B4               	movwf	??___ftdiv
 14735  0751  082F               	movf	___ftdiv@f2+1,w
 14736  0752  00B5               	movwf	??___ftdiv+1
 14737  0753  0830               	movf	___ftdiv@f2+2,w
 14738  0754  00B6               	movwf	??___ftdiv+2
 14739  0755  1003               	clrc
 14740  0756  0D35               	rlf	??___ftdiv+1,w
 14741  0757  0D36               	rlf	??___ftdiv+2,w
 14742  0758  00B7               	movwf	??___ftdiv+3
 14743  0759  0837               	movf	??___ftdiv+3,w
 14744  075A  00BD               	movwf	___ftdiv@sign
 14745  075B  08BD               	movf	___ftdiv@sign,f
 14746  075C  1D03               	skipz
 14747  075D  2F65               	goto	l5462
 14748  075E  3000               	movlw	0
 14749  075F  00AE               	movwf	?___ftdiv
 14750  0760  3000               	movlw	0
 14751  0761  00AF               	movwf	?___ftdiv+1
 14752  0762  3000               	movlw	0
 14753  0763  00B0               	movwf	?___ftdiv+2
 14754  0764  0008               	return
 14755  0765                     l5462:	
 14756  0765  3000               	movlw	0
 14757  0766  00B9               	movwf	___ftdiv@f3
 14758  0767  3000               	movlw	0
 14759  0768  00BA               	movwf	___ftdiv@f3+1
 14760  0769  3000               	movlw	0
 14761  076A  00BB               	movwf	___ftdiv@f3+2
 14762  076B  3089               	movlw	137
 14763  076C  073D               	addwf	___ftdiv@sign,w
 14764  076D  00B4               	movwf	??___ftdiv
 14765  076E  0834               	movf	??___ftdiv,w
 14766  076F  02BC               	subwf	___ftdiv@exp,f
 14767  0770  0831               	movf	___ftdiv@f1,w
 14768  0771  00B4               	movwf	??___ftdiv
 14769  0772  0832               	movf	___ftdiv@f1+1,w
 14770  0773  00B5               	movwf	??___ftdiv+1
 14771  0774  0833               	movf	___ftdiv@f1+2,w
 14772  0775  00B6               	movwf	??___ftdiv+2
 14773  0776  3010               	movlw	16
 14774  0777                     u4025:	
 14775  0777  36B6               	lsrf	??___ftdiv+2,f
 14776  0778  0CB5               	rrf	??___ftdiv+1,f
 14777  0779  0CB4               	rrf	??___ftdiv,f
 14778  077A  0B89               	decfsz	9,f
 14779  077B  2F77               	goto	u4025
 14780  077C  0834               	movf	??___ftdiv,w
 14781  077D  00B7               	movwf	??___ftdiv+3
 14782  077E  0837               	movf	??___ftdiv+3,w
 14783  077F  00BD               	movwf	___ftdiv@sign
 14784  0780  082E               	movf	___ftdiv@f2,w
 14785  0781  00B4               	movwf	??___ftdiv
 14786  0782  082F               	movf	___ftdiv@f2+1,w
 14787  0783  00B5               	movwf	??___ftdiv+1
 14788  0784  0830               	movf	___ftdiv@f2+2,w
 14789  0785  00B6               	movwf	??___ftdiv+2
 14790  0786  3010               	movlw	16
 14791  0787                     u4035:	
 14792  0787  36B6               	lsrf	??___ftdiv+2,f
 14793  0788  0CB5               	rrf	??___ftdiv+1,f
 14794  0789  0CB4               	rrf	??___ftdiv,f
 14795  078A  0B89               	decfsz	9,f
 14796  078B  2F87               	goto	u4035
 14797  078C  0834               	movf	??___ftdiv,w
 14798  078D  00B7               	movwf	??___ftdiv+3
 14799  078E  0837               	movf	??___ftdiv+3,w
 14800  078F  06BD               	xorwf	___ftdiv@sign,f
 14801  0790  3080               	movlw	128
 14802  0791  00B4               	movwf	??___ftdiv
 14803  0792  0834               	movf	??___ftdiv,w
 14804  0793  05BD               	andwf	___ftdiv@sign,f
 14805  0794  17B2               	bsf	___ftdiv@f1+1,7
 14806  0795  30FF               	movlw	255
 14807  0796  05B1               	andwf	___ftdiv@f1,f
 14808  0797  30FF               	movlw	255
 14809  0798  05B2               	andwf	___ftdiv@f1+1,f
 14810  0799  3000               	movlw	0
 14811  079A  05B3               	andwf	___ftdiv@f1+2,f
 14812  079B  17AF               	bsf	___ftdiv@f2+1,7
 14813  079C  30FF               	movlw	255
 14814  079D  05AE               	andwf	___ftdiv@f2,f
 14815  079E  30FF               	movlw	255
 14816  079F  05AF               	andwf	___ftdiv@f2+1,f
 14817  07A0  3000               	movlw	0
 14818  07A1  05B0               	andwf	___ftdiv@f2+2,f
 14819  07A2  3018               	movlw	24
 14820  07A3  00B4               	movwf	??___ftdiv
 14821  07A4  0834               	movf	??___ftdiv,w
 14822  07A5  00B8               	movwf	___ftdiv@cntr
 14823  07A6                     l5476:	
 14824  07A6  3001               	movlw	1
 14825  07A7                     u4045:	
 14826  07A7  35B9               	lslf	___ftdiv@f3,f
 14827  07A8  0DBA               	rlf	___ftdiv@f3+1,f
 14828  07A9  0DBB               	rlf	___ftdiv@f3+2,f
 14829  07AA  0B89               	decfsz	9,f
 14830  07AB  2FA7               	goto	u4045
 14831  07AC  0830               	movf	___ftdiv@f2+2,w
 14832  07AD  0233               	subwf	___ftdiv@f1+2,w
 14833  07AE  1D03               	skipz
 14834  07AF  2FB6               	goto	u4055
 14835  07B0  082F               	movf	___ftdiv@f2+1,w
 14836  07B1  0232               	subwf	___ftdiv@f1+1,w
 14837  07B2  1D03               	skipz
 14838  07B3  2FB6               	goto	u4055
 14839  07B4  082E               	movf	___ftdiv@f2,w
 14840  07B5  0231               	subwf	___ftdiv@f1,w
 14841  07B6                     u4055:	
 14842  07B6  1C03               	skipc
 14843  07B7  2FBF               	goto	l5484
 14844  07B8  082E               	movf	___ftdiv@f2,w
 14845  07B9  02B1               	subwf	___ftdiv@f1,f
 14846  07BA  082F               	movf	___ftdiv@f2+1,w
 14847  07BB  3BB2               	subwfb	___ftdiv@f1+1,f
 14848  07BC  0830               	movf	___ftdiv@f2+2,w
 14849  07BD  3BB3               	subwfb	___ftdiv@f1+2,f
 14850  07BE  1439               	bsf	___ftdiv@f3,0
 14851  07BF                     l5484:	
 14852  07BF  3001               	movlw	1
 14853  07C0                     u4065:	
 14854  07C0  35B1               	lslf	___ftdiv@f1,f
 14855  07C1  0DB2               	rlf	___ftdiv@f1+1,f
 14856  07C2  0DB3               	rlf	___ftdiv@f1+2,f
 14857  07C3  0B89               	decfsz	9,f
 14858  07C4  2FC0               	goto	u4065
 14859  07C5  3001               	movlw	1
 14860  07C6  02B8               	subwf	___ftdiv@cntr,f
 14861  07C7  1D03               	btfss	3,2
 14862  07C8  2FA6               	goto	l5476
 14863  07C9  0839               	movf	___ftdiv@f3,w
 14864  07CA  00A0               	movwf	___ftpack@arg
 14865  07CB  083A               	movf	___ftdiv@f3+1,w
 14866  07CC  00A1               	movwf	___ftpack@arg+1
 14867  07CD  083B               	movf	___ftdiv@f3+2,w
 14868  07CE  00A2               	movwf	___ftpack@arg+2
 14869  07CF  083C               	movf	___ftdiv@exp,w
 14870  07D0  00B4               	movwf	??___ftdiv
 14871  07D1  0834               	movf	??___ftdiv,w
 14872  07D2  00A3               	movwf	___ftpack@exp
 14873  07D3  083D               	movf	___ftdiv@sign,w
 14874  07D4  00B5               	movwf	??___ftdiv+1
 14875  07D5  0835               	movf	??___ftdiv+1,w
 14876  07D6  00A4               	movwf	___ftpack@sign
 14877  07D7  3189  21B8         	fcall	___ftpack
 14878  07D9  0020               	movlb	0	; select bank0
 14879  07DA  0820               	movf	?___ftpack,w
 14880  07DB  00AE               	movwf	?___ftdiv
 14881  07DC  0821               	movf	?___ftpack+1,w
 14882  07DD  00AF               	movwf	?___ftdiv+1
 14883  07DE  0822               	movf	?___ftpack+2,w
 14884  07DF  00B0               	movwf	?___ftdiv+2
 14885  07E0  0008               	return
 14886  07E1                     __end_of___ftdiv:	
 14887                           
 14888                           	psect	text98
 14889  1160                     __ptext98:	
 14890 ;; *************** function ___awtoft *****************
 14891 ;; Defined at:
 14892 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14893 ;; Parameters:    Size  Location     Type
 14894 ;;  c               2    8[BANK0 ] int 
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;  sign            1   13[BANK0 ] unsigned char 
 14897 ;; Return value:  Size  Location     Type
 14898 ;;                  3    8[BANK0 ] float 
 14899 ;; Registers used:
 14900 ;;		wreg, status,2, status,0, pclath, cstack
 14901 ;; Tracked objects:
 14902 ;;		On entry : 0/0
 14903 ;;		On exit  : 0/0
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14906 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14910 ;;Total ram usage:        6 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; Hardware stack levels required when called:    6
 14913 ;; This function calls:
 14914 ;;		___ftpack
 14915 ;; This function is called by:
 14916 ;;		_getPercentValue
 14917 ;;		_setPercentValue
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           
 14922                           ;psect for function ___awtoft
 14923  1160                     ___awtoft:	
 14924                           
 14925                           ;incstack = 0
 14926                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14927  1160  0020               	movlb	0	; select bank0
 14928  1161  01AD               	clrf	___awtoft@sign
 14929  1162  1FA9               	btfss	___awtoft@c+1,7
 14930  1163  296B               	goto	l7672
 14931  1164  09A8               	comf	___awtoft@c,f
 14932  1165  09A9               	comf	___awtoft@c+1,f
 14933  1166  0AA8               	incf	___awtoft@c,f
 14934  1167  1903               	skipnz
 14935  1168  0AA9               	incf	___awtoft@c+1,f
 14936  1169  01AD               	clrf	___awtoft@sign
 14937  116A  0AAD               	incf	___awtoft@sign,f
 14938  116B                     l7672:	
 14939  116B  0828               	movf	___awtoft@c,w
 14940  116C  00A0               	movwf	___ftpack@arg
 14941  116D  0829               	movf	___awtoft@c+1,w
 14942  116E  00A1               	movwf	___ftpack@arg+1
 14943  116F  01A2               	clrf	___ftpack@arg+2
 14944  1170  308E               	movlw	142
 14945  1171  00AB               	movwf	??___awtoft
 14946  1172  082B               	movf	??___awtoft,w
 14947  1173  00A3               	movwf	___ftpack@exp
 14948  1174  082D               	movf	___awtoft@sign,w
 14949  1175  00AC               	movwf	??___awtoft+1
 14950  1176  082C               	movf	??___awtoft+1,w
 14951  1177  00A4               	movwf	___ftpack@sign
 14952  1178  3189  21B8         	fcall	___ftpack
 14953  117A  0020               	movlb	0	; select bank0
 14954  117B  0820               	movf	?___ftpack,w
 14955  117C  00A8               	movwf	?___awtoft
 14956  117D  0821               	movf	?___ftpack+1,w
 14957  117E  00A9               	movwf	?___awtoft+1
 14958  117F  0822               	movf	?___ftpack+2,w
 14959  1180  00AA               	movwf	?___awtoft+2
 14960  1181  0008               	return
 14961  1182                     __end_of___awtoft:	
 14962                           
 14963                           	psect	text99
 14964  09B8                     __ptext99:	
 14965 ;; *************** function ___ftpack *****************
 14966 ;; Defined at:
 14967 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;  arg             3    0[BANK0 ] unsigned um
 14970 ;;  exp             1    3[BANK0 ] unsigned char 
 14971 ;;  sign            1    4[BANK0 ] unsigned char 
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;		None
 14974 ;; Return value:  Size  Location     Type
 14975 ;;                  3    0[BANK0 ] float 
 14976 ;; Registers used:
 14977 ;;		wreg, status,2, status,0
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14983 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;Total ram usage:        8 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; Hardware stack levels required when called:    5
 14990 ;; This function calls:
 14991 ;;		Nothing
 14992 ;; This function is called by:
 14993 ;;		___awtoft
 14994 ;;		___ftadd
 14995 ;;		___ftdiv
 14996 ;;		___ftmul
 14997 ;; This function uses a non-reentrant model
 14998 ;;
 14999                           
 15000                           
 15001                           ;psect for function ___ftpack
 15002  09B8                     ___ftpack:	
 15003                           
 15004                           ;incstack = 0
 15005                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15006  09B8  0020               	movlb	0	; select bank0
 15007  09B9  0823               	movf	___ftpack@exp,w
 15008  09BA  1903               	btfsc	3,2
 15009  09BB  29C1               	goto	l5340
 15010  09BC  0822               	movf	___ftpack@arg+2,w
 15011  09BD  0421               	iorwf	___ftpack@arg+1,w
 15012  09BE  0420               	iorwf	___ftpack@arg,w
 15013  09BF  1D03               	skipz
 15014  09C0  29D2               	goto	l5346
 15015  09C1                     l5340:	
 15016  09C1  3000               	movlw	0
 15017  09C2  00A0               	movwf	?___ftpack
 15018  09C3  3000               	movlw	0
 15019  09C4  00A1               	movwf	?___ftpack+1
 15020  09C5  3000               	movlw	0
 15021  09C6  00A2               	movwf	?___ftpack+2
 15022  09C7  0008               	return
 15023  09C8                     l5344:	
 15024  09C8  3001               	movlw	1
 15025  09C9  00A5               	movwf	??___ftpack
 15026  09CA  0825               	movf	??___ftpack,w
 15027  09CB  07A3               	addwf	___ftpack@exp,f
 15028  09CC  3001               	movlw	1
 15029  09CD                     u3675:	
 15030  09CD  36A2               	lsrf	___ftpack@arg+2,f
 15031  09CE  0CA1               	rrf	___ftpack@arg+1,f
 15032  09CF  0CA0               	rrf	___ftpack@arg,f
 15033  09D0  0B89               	decfsz	9,f
 15034  09D1  29CD               	goto	u3675
 15035  09D2                     l5346:	
 15036  09D2  30FE               	movlw	254
 15037  09D3  0522               	andwf	___ftpack@arg+2,w
 15038  09D4  1903               	btfsc	3,2
 15039  09D5  29EB               	goto	l2784
 15040  09D6  29C8               	goto	l5344
 15041  09D7                     l5348:	
 15042  09D7  3001               	movlw	1
 15043  09D8  00A5               	movwf	??___ftpack
 15044  09D9  0825               	movf	??___ftpack,w
 15045  09DA  07A3               	addwf	___ftpack@exp,f
 15046  09DB  3001               	movlw	1
 15047  09DC  07A0               	addwf	___ftpack@arg,f
 15048  09DD  3000               	movlw	0
 15049  09DE  1803               	skipnc
 15050  09DF  3001               	movlw	1
 15051  09E0  07A1               	addwf	___ftpack@arg+1,f
 15052  09E1  3000               	movlw	0
 15053  09E2  1803               	skipnc
 15054  09E3  3001               	movlw	1
 15055  09E4  07A2               	addwf	___ftpack@arg+2,f
 15056  09E5  3001               	movlw	1
 15057  09E6                     u3695:	
 15058  09E6  36A2               	lsrf	___ftpack@arg+2,f
 15059  09E7  0CA1               	rrf	___ftpack@arg+1,f
 15060  09E8  0CA0               	rrf	___ftpack@arg,f
 15061  09E9  0B89               	decfsz	9,f
 15062  09EA  29E6               	goto	u3695
 15063  09EB                     l2784:	
 15064  09EB  30FF               	movlw	255
 15065  09EC  0522               	andwf	___ftpack@arg+2,w
 15066  09ED  1903               	btfsc	3,2
 15067  09EE  29F8               	goto	l5356
 15068  09EF  29D7               	goto	l5348
 15069  09F0                     l5354:	
 15070  09F0  3001               	movlw	1
 15071  09F1  02A3               	subwf	___ftpack@exp,f
 15072  09F2  3001               	movlw	1
 15073  09F3                     u3715:	
 15074  09F3  35A0               	lslf	___ftpack@arg,f
 15075  09F4  0DA1               	rlf	___ftpack@arg+1,f
 15076  09F5  0DA2               	rlf	___ftpack@arg+2,f
 15077  09F6  0B89               	decfsz	9,f
 15078  09F7  29F3               	goto	u3715
 15079  09F8                     l5356:	
 15080  09F8  1FA1               	btfss	___ftpack@arg+1,7
 15081  09F9  29F0               	goto	l5354
 15082  09FA  1823               	btfsc	___ftpack@exp,0
 15083  09FB  2A02               	goto	l2790
 15084  09FC  30FF               	movlw	255
 15085  09FD  05A0               	andwf	___ftpack@arg,f
 15086  09FE  307F               	movlw	127
 15087  09FF  05A1               	andwf	___ftpack@arg+1,f
 15088  0A00  30FF               	movlw	255
 15089  0A01  05A2               	andwf	___ftpack@arg+2,f
 15090  0A02                     l2790:	
 15091  0A02  1003               	clrc
 15092  0A03  0CA3               	rrf	___ftpack@exp,f
 15093  0A04  0823               	movf	___ftpack@exp,w
 15094  0A05  00A5               	movwf	??___ftpack
 15095  0A06  01A6               	clrf	??___ftpack+1
 15096  0A07  01A7               	clrf	??___ftpack+2
 15097  0A08  3010               	movlw	16
 15098  0A09                     u3745:	
 15099  0A09  35A5               	lslf	??___ftpack,f
 15100  0A0A  0DA6               	rlf	??___ftpack+1,f
 15101  0A0B  0DA7               	rlf	??___ftpack+2,f
 15102  0A0C  0B89               	decfsz	9,f
 15103  0A0D  2A09               	goto	u3745
 15104  0A0E  0825               	movf	??___ftpack,w
 15105  0A0F  04A0               	iorwf	___ftpack@arg,f
 15106  0A10  0826               	movf	??___ftpack+1,w
 15107  0A11  04A1               	iorwf	___ftpack@arg+1,f
 15108  0A12  0827               	movf	??___ftpack+2,w
 15109  0A13  04A2               	iorwf	___ftpack@arg+2,f
 15110  0A14  0824               	movf	___ftpack@sign,w
 15111  0A15  1903               	btfsc	3,2
 15112  0A16  0008               	return
 15113  0A17  17A2               	bsf	___ftpack@arg+2,7
 15114  0A18  0008               	return
 15115  0A19                     __end_of___ftpack:	
 15116                           
 15117                           	psect	text100
 15118  1E91                     __ptext100:	
 15119 ;; *************** function _setRFSW_Status *****************
 15120 ;; Defined at:
 15121 ;;		line 434 in file "../src/RF_Control_B1.c"
 15122 ;; Parameters:    Size  Location     Type
 15123 ;;  sw              1    wreg     unsigned char 
 15124 ;;  command         1    2[BANK0 ] unsigned char 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  sw              1    3[BANK0 ] unsigned char 
 15127 ;; Return value:  Size  Location     Type
 15128 ;;		None               void
 15129 ;; Registers used:
 15130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15131 ;; Tracked objects:
 15132 ;;		On entry : 0/0
 15133 ;;		On exit  : 0/0
 15134 ;;		Unchanged: 0/0
 15135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15136 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15140 ;;Total ram usage:        2 bytes
 15141 ;; Hardware stack levels used:    1
 15142 ;; Hardware stack levels required when called:    6
 15143 ;; This function calls:
 15144 ;;		_RfSWPointSelect
 15145 ;; This function is called by:
 15146 ;;		_DlyOff_Main
 15147 ;;		_setDimmerLights_ERROR
 15148 ;;		_setControl_Lights_Table
 15149 ;;		_Sw_DimmerOnFunc
 15150 ;;		_Sw_DimmerAdjFunc
 15151 ;; This function uses a non-reentrant model
 15152 ;;
 15153                           
 15154                           
 15155                           ;psect for function _setRFSW_Status
 15156  1E91                     _setRFSW_Status:	
 15157                           
 15158                           ;incstack = 0
 15159                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15160                           ;setRFSW_Status@sw stored from wreg
 15161  1E91  0020               	movlb	0	; select bank0
 15162  1E92  00A3               	movwf	setRFSW_Status@sw
 15163                           
 15164                           ;RF_Control_B1.c: 435: RfSWPointSelect(sw);
 15165  1E93  0823               	movf	setRFSW_Status@sw,w
 15166  1E94  319D  25F6         	fcall	_RfSWPointSelect
 15167                           
 15168                           ;RF_Control_B1.c: 436: RFSW->Status = command;
 15169  1E96  0879               	movf	_RFSW,w
 15170  1E97  0086               	movwf	6
 15171  1E98  0187               	clrf	7
 15172  1E99  0020               	movlb	0	; select bank0
 15173  1E9A  0822               	movf	setRFSW_Status@command,w
 15174  1E9B  1001               	bcf	1,0
 15175  1E9C  1D03               	skipz
 15176  1E9D  1401               	bsf	1,0
 15177  1E9E  0008               	return
 15178  1E9F                     __end_of_setRFSW_Status:	
 15179                           
 15180                           	psect	text101
 15181  1DF6                     __ptext101:	
 15182 ;; *************** function _RfSWPointSelect *****************
 15183 ;; Defined at:
 15184 ;;		line 369 in file "../src/RF_Control_B1.c"
 15185 ;; Parameters:    Size  Location     Type
 15186 ;;  sw              1    wreg     unsigned char 
 15187 ;; Auto vars:     Size  Location     Type
 15188 ;;  sw              1    1[BANK0 ] unsigned char 
 15189 ;; Return value:  Size  Location     Type
 15190 ;;		None               void
 15191 ;; Registers used:
 15192 ;;		wreg
 15193 ;; Tracked objects:
 15194 ;;		On entry : 0/0
 15195 ;;		On exit  : 0/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15200 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15201 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15202 ;;Total ram usage:        2 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; Hardware stack levels required when called:    5
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_setRFSW_Control
 15209 ;;		_setRFSW_AdjControl
 15210 ;;		_setRFSW_Status
 15211 ;; This function uses a non-reentrant model
 15212 ;;
 15213                           
 15214                           
 15215                           ;psect for function _RfSWPointSelect
 15216  1DF6                     _RfSWPointSelect:	
 15217                           
 15218                           ;incstack = 0
 15219                           ; Regs used in _RfSWPointSelect: [wreg]
 15220                           ;RfSWPointSelect@sw stored from wreg
 15221  1DF6  0020               	movlb	0	; select bank0
 15222  1DF7  00A1               	movwf	RfSWPointSelect@sw
 15223                           
 15224                           ;RF_Control_B1.c: 371: if (sw == 1) {
 15225  1DF8  0821               	movf	RfSWPointSelect@sw,w
 15226  1DF9  3A01               	xorlw	1
 15227  1DFA  1D03               	skipz
 15228  1DFB  0008               	return
 15229                           
 15230                           ;RF_Control_B1.c: 372: RFSW = &RFSW1;
 15231  1DFC  30EE               	movlw	_RFSW1& (0+255)
 15232  1DFD  00A0               	movwf	??_RfSWPointSelect
 15233  1DFE  0820               	movf	??_RfSWPointSelect,w
 15234  1DFF  00F9               	movwf	_RFSW
 15235  1E00  0008               	return
 15236  1E01                     __end_of_RfSWPointSelect:	
 15237                           
 15238                           	psect	text102
 15239  1EF9                     __ptext102:	
 15240 ;; *************** function _setDimmerLights_Trigger *****************
 15241 ;; Defined at:
 15242 ;;		line 714 in file "../src/Dimmer_B1.c"
 15243 ;; Parameters:    Size  Location     Type
 15244 ;;  lights          1    wreg     unsigned char 
 15245 ;;  command         1    2[BANK0 ] unsigned char 
 15246 ;; Auto vars:     Size  Location     Type
 15247 ;;  lights          1    3[BANK0 ] unsigned char 
 15248 ;; Return value:  Size  Location     Type
 15249 ;;		None               void
 15250 ;; Registers used:
 15251 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 0/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15257 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15261 ;;Total ram usage:        2 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:    6
 15264 ;; This function calls:
 15265 ;;		_DimmerLightsPointSelect
 15266 ;; This function is called by:
 15267 ;;		_DlyOff_Main
 15268 ;;		_setRFSW_Control
 15269 ;;		_Sw_DimmerOnFunc
 15270 ;;		_Sw_DimmerOffFunc
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           
 15275                           ;psect for function _setDimmerLights_Trigger
 15276  1EF9                     _setDimmerLights_Trigger:	
 15277                           
 15278                           ;incstack = 0
 15279                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15280                           ;setDimmerLights_Trigger@lights stored from wreg
 15281  1EF9  0020               	movlb	0	; select bank0
 15282  1EFA  00A3               	movwf	setDimmerLights_Trigger@lights
 15283                           
 15284                           ;Dimmer_B1.c: 716: DimmerLightsPointSelect(lights);
 15285  1EFB  0823               	movf	setDimmerLights_Trigger@lights,w
 15286  1EFC  319D  25EB         	fcall	_DimmerLightsPointSelect
 15287                           
 15288                           ;Dimmer_B1.c: 717: DimmerLights->Trigger = command;
 15289  1EFE  0020               	movlb	0	; select bank0
 15290  1EFF  086A               	movf	_DimmerLights,w
 15291  1F00  3E08               	addlw	8
 15292  1F01  0086               	movwf	6
 15293  1F02  3001               	movlw	1	; select bank2/3
 15294  1F03  0087               	movwf	7
 15295  1F04  0822               	movf	setDimmerLights_Trigger@command,w
 15296  1F05  1101               	bcf	1,2
 15297  1F06  1D03               	skipz
 15298  1F07  1501               	bsf	1,2
 15299  1F08  0008               	return
 15300  1F09                     __end_of_setDimmerLights_Trigger:	
 15301                           
 15302                           	psect	text103
 15303  1EE9                     __ptext103:	
 15304 ;; *************** function _setDimmerLights_Switch *****************
 15305 ;; Defined at:
 15306 ;;		line 702 in file "../src/Dimmer_B1.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;  lights          1    wreg     unsigned char 
 15309 ;;  command         1    2[BANK0 ] unsigned char 
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;  lights          1    3[BANK0 ] unsigned char 
 15312 ;; Return value:  Size  Location     Type
 15313 ;;		None               void
 15314 ;; Registers used:
 15315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15316 ;; Tracked objects:
 15317 ;;		On entry : 0/0
 15318 ;;		On exit  : 0/0
 15319 ;;		Unchanged: 0/0
 15320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15321 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15324 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;Total ram usage:        2 bytes
 15326 ;; Hardware stack levels used:    1
 15327 ;; Hardware stack levels required when called:    6
 15328 ;; This function calls:
 15329 ;;		_DimmerLightsPointSelect
 15330 ;; This function is called by:
 15331 ;;		_DlyOff_Main
 15332 ;;		_setRFSW_Control
 15333 ;;		_Sw_DimmerOnFunc
 15334 ;;		_Sw_DimmerOffFunc
 15335 ;; This function uses a non-reentrant model
 15336 ;;
 15337                           
 15338                           
 15339                           ;psect for function _setDimmerLights_Switch
 15340  1EE9                     _setDimmerLights_Switch:	
 15341                           
 15342                           ;incstack = 0
 15343                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15344                           ;setDimmerLights_Switch@lights stored from wreg
 15345  1EE9  0020               	movlb	0	; select bank0
 15346  1EEA  00A3               	movwf	setDimmerLights_Switch@lights
 15347                           
 15348                           ;Dimmer_B1.c: 704: DimmerLightsPointSelect(lights);
 15349  1EEB  0823               	movf	setDimmerLights_Switch@lights,w
 15350  1EEC  319D  25EB         	fcall	_DimmerLightsPointSelect
 15351                           
 15352                           ;Dimmer_B1.c: 705: DimmerLights->Switch = command;
 15353  1EEE  0020               	movlb	0	; select bank0
 15354  1EEF  086A               	movf	_DimmerLights,w
 15355  1EF0  3E08               	addlw	8
 15356  1EF1  0086               	movwf	6
 15357  1EF2  3001               	movlw	1	; select bank2/3
 15358  1EF3  0087               	movwf	7
 15359  1EF4  0822               	movf	setDimmerLights_Switch@command,w
 15360  1EF5  1081               	bcf	1,1
 15361  1EF6  1D03               	skipz
 15362  1EF7  1481               	bsf	1,1
 15363  1EF8  0008               	return
 15364  1EF9                     __end_of_setDimmerLights_Switch:	
 15365                           
 15366                           	psect	text104
 15367  1DEB                     __ptext104:	
 15368 ;; *************** function _DimmerLightsPointSelect *****************
 15369 ;; Defined at:
 15370 ;;		line 324 in file "../src/Dimmer_B1.c"
 15371 ;; Parameters:    Size  Location     Type
 15372 ;;  lights          1    wreg     unsigned char 
 15373 ;; Auto vars:     Size  Location     Type
 15374 ;;  lights          1    1[BANK0 ] unsigned char 
 15375 ;; Return value:  Size  Location     Type
 15376 ;;		None               void
 15377 ;; Registers used:
 15378 ;;		wreg
 15379 ;; Tracked objects:
 15380 ;;		On entry : 0/0
 15381 ;;		On exit  : 0/0
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15385 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15386 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15388 ;;Total ram usage:        2 bytes
 15389 ;; Hardware stack levels used:    1
 15390 ;; Hardware stack levels required when called:    5
 15391 ;; This function calls:
 15392 ;;		Nothing
 15393 ;; This function is called by:
 15394 ;;		_setDimmerLights_Initialization
 15395 ;;		_setDimmerLights_Main
 15396 ;;		_setDimmerLights_ERROR
 15397 ;;		_setDimmerLights_TriggerERROR
 15398 ;;		_setDimmerLights
 15399 ;;		_setDimmerLights_Adj
 15400 ;;		_setDimmerLights_AdjRF
 15401 ;;		_setDimmerLights_Switch
 15402 ;;		_setDimmerLights_AdjGo
 15403 ;;		_setDimmerLights_Trigger
 15404 ;;		_setDimmerLights_TriggerAdj
 15405 ;;		_setDimmerLights_GO
 15406 ;;		_setDimmerLights_MaxmumValue
 15407 ;;		_setDimmerLights_Clear
 15408 ;; This function uses a non-reentrant model
 15409 ;;
 15410                           
 15411                           
 15412                           ;psect for function _DimmerLightsPointSelect
 15413  1DEB                     _DimmerLightsPointSelect:	
 15414                           
 15415                           ;incstack = 0
 15416                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15417                           ;DimmerLightsPointSelect@lights stored from wreg
 15418  1DEB  0020               	movlb	0	; select bank0
 15419  1DEC  00A1               	movwf	DimmerLightsPointSelect@lights
 15420                           
 15421                           ;Dimmer_B1.c: 326: if (lights == 1) {
 15422  1DED  0821               	movf	DimmerLightsPointSelect@lights,w
 15423  1DEE  3A01               	xorlw	1
 15424  1DEF  1D03               	skipz
 15425  1DF0  0008               	return
 15426                           
 15427                           ;Dimmer_B1.c: 327: DimmerLights = &DimmerLights1;
 15428  1DF1  30C0               	movlw	_DimmerLights1& (0+255)
 15429  1DF2  00A0               	movwf	??_DimmerLightsPointSelect
 15430  1DF3  0820               	movf	??_DimmerLightsPointSelect,w
 15431  1DF4  00EA               	movwf	_DimmerLights
 15432  1DF5  0008               	return
 15433  1DF6                     __end_of_DimmerLightsPointSelect:	
 15434                           
 15435                           	psect	text105
 15436  17A7                     __ptext105:	
 15437 ;; *************** function _setBuz *****************
 15438 ;; Defined at:
 15439 ;;		line 22 in file "../src/Buzzer_B1.c"
 15440 ;; Parameters:    Size  Location     Type
 15441 ;;  count           1    wreg     unsigned char 
 15442 ;;  time            2    9[BANK0 ] int 
 15443 ;; Auto vars:     Size  Location     Type
 15444 ;;  count           1   12[BANK0 ] unsigned char 
 15445 ;; Return value:  Size  Location     Type
 15446 ;;		None               void
 15447 ;; Registers used:
 15448 ;;		wreg, status,2, status,0, pclath, cstack
 15449 ;; Tracked objects:
 15450 ;;		On entry : 0/0
 15451 ;;		On exit  : 0/0
 15452 ;;		Unchanged: 0/0
 15453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15458 ;;Total ram usage:        4 bytes
 15459 ;; Hardware stack levels used:    1
 15460 ;; Hardware stack levels required when called:    6
 15461 ;; This function calls:
 15462 ;;		___awdiv
 15463 ;; This function is called by:
 15464 ;;		_DlyOff_Main
 15465 ;;		_setDimmerLights_Main
 15466 ;;		_DimmerLights_Exceptions
 15467 ;;		_setOverTemp_Exceptions
 15468 ;;		_setLog_Code
 15469 ;;		_setControl_Lights_Table
 15470 ;;		_setRFSW_Control
 15471 ;;		_setSw_Main
 15472 ;;		_Sw_DimmerOnFunc
 15473 ;;		_my_MainTime
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           
 15478                           ;psect for function _setBuz
 15479  17A7                     _setBuz:	
 15480                           
 15481                           ;incstack = 0
 15482                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15483                           ;setBuz@count stored from wreg
 15484  17A7  0020               	movlb	0	; select bank0
 15485  17A8  00AC               	movwf	setBuz@count
 15486                           
 15487                           ;Buzzer_B1.c: 23: time /= 10;
 15488  17A9  300A               	movlw	10
 15489  17AA  00A0               	movwf	___awdiv@divisor
 15490  17AB  3000               	movlw	0
 15491  17AC  00A1               	movwf	___awdiv@divisor+1
 15492  17AD  082A               	movf	setBuz@time+1,w
 15493  17AE  01A3               	clrf	___awdiv@dividend+1
 15494  17AF  07A3               	addwf	___awdiv@dividend+1,f
 15495  17B0  0829               	movf	setBuz@time,w
 15496  17B1  01A2               	clrf	___awdiv@dividend
 15497  17B2  07A2               	addwf	___awdiv@dividend,f
 15498  17B3  3196  26A4  3197   	fcall	___awdiv
 15499  17B6  0020               	movlb	0	; select bank0
 15500  17B7  0821               	movf	?___awdiv+1,w
 15501  17B8  01AA               	clrf	setBuz@time+1
 15502  17B9  07AA               	addwf	setBuz@time+1,f
 15503  17BA  0820               	movf	?___awdiv,w
 15504  17BB  01A9               	clrf	setBuz@time
 15505  17BC  07A9               	addwf	setBuz@time,f
 15506                           
 15507                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15508  17BD  0021               	movlb	1	; select bank1
 15509  17BE  1C33               	btfss	_Buz1^(0+128),0
 15510  17BF  0008               	return
 15511                           
 15512                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15513  17C0  18B3               	btfsc	_Buz1^(0+128),1
 15514  17C1  2FD8               	goto	l92
 15515                           
 15516                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15517  17C2  14B3               	bsf	_Buz1^(0+128),1
 15518                           
 15519                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15520  17C3  01B4               	clrf	(_Buz1^(0+128)+1)
 15521  17C4  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 15522                           
 15523                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15524  17C5  0020               	movlb	0	; select bank0
 15525  17C6  082C               	movf	setBuz@count,w
 15526  17C7  00AB               	movwf	??_setBuz
 15527  17C8  082B               	movf	??_setBuz,w
 15528  17C9  0021               	movlb	1	; select bank1
 15529  17CA  00B6               	movwf	(_Buz1^(0+128)+3)
 15530                           
 15531                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15532  17CB  0020               	movlb	0	; select bank0
 15533  17CC  082A               	movf	setBuz@time+1,w
 15534  17CD  0021               	movlb	1	; select bank1
 15535  17CE  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 15536  17CF  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 15537  17D0  0020               	movlb	0	; select bank0
 15538  17D1  0829               	movf	setBuz@time,w
 15539  17D2  0021               	movlb	1	; select bank1
 15540  17D3  01B9               	clrf	(_Buz1^(0+128)+6)
 15541  17D4  07B9               	addwf	(_Buz1^(0+128)+6),f
 15542                           
 15543                           ;Buzzer_B1.c: 30: RB3 = 1;
 15544  17D5  0020               	movlb	0	; select bank0
 15545  17D6  158D               	bsf	13,3	;volatile
 15546                           
 15547                           ;Buzzer_B1.c: 31: } else {
 15548  17D7  0008               	return
 15549  17D8                     l92:	
 15550                           
 15551                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15552  17D8  19B3               	btfsc	_Buz1^(0+128),3
 15553  17D9  2FEC               	goto	l94
 15554                           
 15555                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15556  17DA  15B3               	bsf	_Buz1^(0+128),3
 15557                           
 15558                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15559  17DB  0020               	movlb	0	; select bank0
 15560  17DC  082C               	movf	setBuz@count,w
 15561  17DD  00AB               	movwf	??_setBuz
 15562  17DE  082B               	movf	??_setBuz,w
 15563  17DF  0021               	movlb	1	; select bank1
 15564  17E0  00B7               	movwf	(_Buz1^(0+128)+4)
 15565                           
 15566                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15567  17E1  0020               	movlb	0	; select bank0
 15568  17E2  082A               	movf	setBuz@time+1,w
 15569  17E3  0021               	movlb	1	; select bank1
 15570  17E4  01BC               	clrf	((_Buz1+1)^(0+128)+8)
 15571  17E5  07BC               	addwf	((_Buz1+1)^(0+128)+8),f
 15572  17E6  0020               	movlb	0	; select bank0
 15573  17E7  0829               	movf	setBuz@time,w
 15574  17E8  0021               	movlb	1	; select bank1
 15575  17E9  01BB               	clrf	(_Buz1^(0+128)+8)
 15576  17EA  07BB               	addwf	(_Buz1^(0+128)+8),f
 15577                           
 15578                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15579  17EB  0008               	return
 15580  17EC                     l94:	
 15581  17EC  1A33               	btfsc	_Buz1^(0+128),4
 15582  17ED  0008               	return
 15583                           
 15584                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15585  17EE  1633               	bsf	_Buz1^(0+128),4
 15586                           
 15587                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15588  17EF  0020               	movlb	0	; select bank0
 15589  17F0  082C               	movf	setBuz@count,w
 15590  17F1  00AB               	movwf	??_setBuz
 15591  17F2  082B               	movf	??_setBuz,w
 15592  17F3  0021               	movlb	1	; select bank1
 15593  17F4  00B8               	movwf	(_Buz1^(0+128)+5)
 15594                           
 15595                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15596  17F5  0020               	movlb	0	; select bank0
 15597  17F6  082A               	movf	setBuz@time+1,w
 15598  17F7  0021               	movlb	1	; select bank1
 15599  17F8  01BE               	clrf	((_Buz1+1)^(0+128)+10)
 15600  17F9  07BE               	addwf	((_Buz1+1)^(0+128)+10),f
 15601  17FA  0020               	movlb	0	; select bank0
 15602  17FB  0829               	movf	setBuz@time,w
 15603  17FC  0021               	movlb	1	; select bank1
 15604  17FD  01BD               	clrf	(_Buz1^(0+128)+10)
 15605  17FE  07BD               	addwf	(_Buz1^(0+128)+10),f
 15606  17FF  0008               	return
 15607  1800                     __end_of_setBuz:	
 15608                           
 15609                           	psect	text106
 15610  16A4                     __ptext106:	
 15611 ;; *************** function ___awdiv *****************
 15612 ;; Defined at:
 15613 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15614 ;; Parameters:    Size  Location     Type
 15615 ;;  divisor         2    0[BANK0 ] int 
 15616 ;;  dividend        2    2[BANK0 ] int 
 15617 ;; Auto vars:     Size  Location     Type
 15618 ;;  quotient        2    7[BANK0 ] int 
 15619 ;;  sign            1    6[BANK0 ] unsigned char 
 15620 ;;  counter         1    5[BANK0 ] unsigned char 
 15621 ;; Return value:  Size  Location     Type
 15622 ;;                  2    0[BANK0 ] int 
 15623 ;; Registers used:
 15624 ;;		wreg, status,2, status,0
 15625 ;; Tracked objects:
 15626 ;;		On entry : 0/0
 15627 ;;		On exit  : 0/0
 15628 ;;		Unchanged: 0/0
 15629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15630 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15631 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;Total ram usage:        9 bytes
 15635 ;; Hardware stack levels used:    1
 15636 ;; Hardware stack levels required when called:    5
 15637 ;; This function calls:
 15638 ;;		Nothing
 15639 ;; This function is called by:
 15640 ;;		_setBuz
 15641 ;; This function uses a non-reentrant model
 15642 ;;
 15643                           
 15644                           
 15645                           ;psect for function ___awdiv
 15646  16A4                     ___awdiv:	
 15647                           
 15648                           ;incstack = 0
 15649                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15650  16A4  0020               	movlb	0	; select bank0
 15651  16A5  01A6               	clrf	___awdiv@sign
 15652  16A6  1FA1               	btfss	___awdiv@divisor+1,7
 15653  16A7  2EAF               	goto	l7768
 15654  16A8  09A0               	comf	___awdiv@divisor,f
 15655  16A9  09A1               	comf	___awdiv@divisor+1,f
 15656  16AA  0AA0               	incf	___awdiv@divisor,f
 15657  16AB  1903               	skipnz
 15658  16AC  0AA1               	incf	___awdiv@divisor+1,f
 15659  16AD  01A6               	clrf	___awdiv@sign
 15660  16AE  0AA6               	incf	___awdiv@sign,f
 15661  16AF                     l7768:	
 15662  16AF  1FA3               	btfss	___awdiv@dividend+1,7
 15663  16B0  2EBA               	goto	l7774
 15664  16B1  09A2               	comf	___awdiv@dividend,f
 15665  16B2  09A3               	comf	___awdiv@dividend+1,f
 15666  16B3  0AA2               	incf	___awdiv@dividend,f
 15667  16B4  1903               	skipnz
 15668  16B5  0AA3               	incf	___awdiv@dividend+1,f
 15669  16B6  3001               	movlw	1
 15670  16B7  00A4               	movwf	??___awdiv
 15671  16B8  0824               	movf	??___awdiv,w
 15672  16B9  06A6               	xorwf	___awdiv@sign,f
 15673  16BA                     l7774:	
 15674  16BA  01A7               	clrf	___awdiv@quotient
 15675  16BB  01A8               	clrf	___awdiv@quotient+1
 15676  16BC  0821               	movf	___awdiv@divisor+1,w
 15677  16BD  0420               	iorwf	___awdiv@divisor,w
 15678  16BE  1903               	skipnz
 15679  16BF  2EE9               	goto	l7796
 15680  16C0  01A5               	clrf	___awdiv@counter
 15681  16C1  0AA5               	incf	___awdiv@counter,f
 15682  16C2                     l7784:	
 15683  16C2  1BA1               	btfsc	___awdiv@divisor+1,7
 15684  16C3  2ECE               	goto	l7786
 15685  16C4  3001               	movlw	1
 15686  16C5                     u7445:	
 15687  16C5  35A0               	lslf	___awdiv@divisor,f
 15688  16C6  0DA1               	rlf	___awdiv@divisor+1,f
 15689  16C7  0B89               	decfsz	9,f
 15690  16C8  2EC5               	goto	u7445
 15691  16C9  3001               	movlw	1
 15692  16CA  00A4               	movwf	??___awdiv
 15693  16CB  0824               	movf	??___awdiv,w
 15694  16CC  07A5               	addwf	___awdiv@counter,f
 15695  16CD  2EC2               	goto	l7784
 15696  16CE                     l7786:	
 15697  16CE  3001               	movlw	1
 15698  16CF                     u7465:	
 15699  16CF  35A7               	lslf	___awdiv@quotient,f
 15700  16D0  0DA8               	rlf	___awdiv@quotient+1,f
 15701  16D1  0B89               	decfsz	9,f
 15702  16D2  2ECF               	goto	u7465
 15703  16D3  0821               	movf	___awdiv@divisor+1,w
 15704  16D4  0223               	subwf	___awdiv@dividend+1,w
 15705  16D5  1D03               	skipz
 15706  16D6  2ED9               	goto	u7475
 15707  16D7  0820               	movf	___awdiv@divisor,w
 15708  16D8  0222               	subwf	___awdiv@dividend,w
 15709  16D9                     u7475:	
 15710  16D9  1C03               	skipc
 15711  16DA  2EE0               	goto	l7792
 15712  16DB  0820               	movf	___awdiv@divisor,w
 15713  16DC  02A2               	subwf	___awdiv@dividend,f
 15714  16DD  0821               	movf	___awdiv@divisor+1,w
 15715  16DE  3BA3               	subwfb	___awdiv@dividend+1,f
 15716  16DF  1427               	bsf	___awdiv@quotient,0
 15717  16E0                     l7792:	
 15718  16E0  3001               	movlw	1
 15719  16E1                     u7485:	
 15720  16E1  36A1               	lsrf	___awdiv@divisor+1,f
 15721  16E2  0CA0               	rrf	___awdiv@divisor,f
 15722  16E3  0B89               	decfsz	9,f
 15723  16E4  2EE1               	goto	u7485
 15724  16E5  3001               	movlw	1
 15725  16E6  02A5               	subwf	___awdiv@counter,f
 15726  16E7  1D03               	btfss	3,2
 15727  16E8  2ECE               	goto	l7786
 15728  16E9                     l7796:	
 15729  16E9  0826               	movf	___awdiv@sign,w
 15730  16EA  1903               	btfsc	3,2
 15731  16EB  2EF1               	goto	l7800
 15732  16EC  09A7               	comf	___awdiv@quotient,f
 15733  16ED  09A8               	comf	___awdiv@quotient+1,f
 15734  16EE  0AA7               	incf	___awdiv@quotient,f
 15735  16EF  1903               	skipnz
 15736  16F0  0AA8               	incf	___awdiv@quotient+1,f
 15737  16F1                     l7800:	
 15738  16F1  0828               	movf	___awdiv@quotient+1,w
 15739  16F2  01A1               	clrf	?___awdiv+1
 15740  16F3  07A1               	addwf	?___awdiv+1,f
 15741  16F4  0827               	movf	___awdiv@quotient,w
 15742  16F5  01A0               	clrf	?___awdiv
 15743  16F6  07A0               	addwf	?___awdiv,f
 15744  16F7  0008               	return
 15745  16F8                     __end_of___awdiv:	
 15746                           
 15747                           	psect	text107
 15748  1D57                     __ptext107:	
 15749 ;; *************** function _DelayOff_Initialization *****************
 15750 ;; Defined at:
 15751 ;;		line 26 in file "../src/DelayOff_B1.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;		None
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;		None
 15756 ;; Return value:  Size  Location     Type
 15757 ;;		None               void
 15758 ;; Registers used:
 15759 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;Total ram usage:        0 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    7
 15772 ;; This function calls:
 15773 ;;		_DlyOff_Initialization
 15774 ;; This function is called by:
 15775 ;;		_main
 15776 ;; This function uses a non-reentrant model
 15777 ;;
 15778                           
 15779                           
 15780                           ;psect for function _DelayOff_Initialization
 15781  1D57                     _DelayOff_Initialization:	
 15782                           
 15783                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15784                           
 15785                           ;incstack = 0
 15786                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15787  1D57  3001               	movlw	1
 15788  1D58  319E  262E         	fcall	_DlyOff_Initialization
 15789  1D5A  0008               	return
 15790  1D5B                     __end_of_DelayOff_Initialization:	
 15791                           
 15792                           	psect	text108
 15793  1E2E                     __ptext108:	
 15794 ;; *************** function _DlyOff_Initialization *****************
 15795 ;; Defined at:
 15796 ;;		line 56 in file "../src/DelayOff_B1.c"
 15797 ;; Parameters:    Size  Location     Type
 15798 ;;  sw              1    wreg     unsigned char 
 15799 ;; Auto vars:     Size  Location     Type
 15800 ;;  sw              1    2[BANK0 ] unsigned char 
 15801 ;; Return value:  Size  Location     Type
 15802 ;;		None               void
 15803 ;; Registers used:
 15804 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15805 ;; Tracked objects:
 15806 ;;		On entry : 0/0
 15807 ;;		On exit  : 0/0
 15808 ;;		Unchanged: 0/0
 15809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15814 ;;Total ram usage:        1 bytes
 15815 ;; Hardware stack levels used:    1
 15816 ;; Hardware stack levels required when called:    6
 15817 ;; This function calls:
 15818 ;;		_DelayOffPointSelect
 15819 ;; This function is called by:
 15820 ;;		_DelayOff_Initialization
 15821 ;; This function uses a non-reentrant model
 15822 ;;
 15823                           
 15824                           
 15825                           ;psect for function _DlyOff_Initialization
 15826  1E2E                     _DlyOff_Initialization:	
 15827                           
 15828                           ;incstack = 0
 15829                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15830                           ;DlyOff_Initialization@sw stored from wreg
 15831  1E2E  0020               	movlb	0	; select bank0
 15832  1E2F  00A2               	movwf	DlyOff_Initialization@sw
 15833                           
 15834                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15835  1E30  0822               	movf	DlyOff_Initialization@sw,w
 15836  1E31  319D  25E0         	fcall	_DelayOffPointSelect
 15837                           
 15838                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15839  1E33  0020               	movlb	0	; select bank0
 15840  1E34  0869               	movf	_DelayOff,w
 15841  1E35  0086               	movwf	6
 15842  1E36  3001               	movlw	1	; select bank2/3
 15843  1E37  0087               	movwf	7
 15844  1E38  1401               	bsf	1,0
 15845  1E39  0008               	return
 15846  1E3A                     __end_of_DlyOff_Initialization:	
 15847                           
 15848                           	psect	text109
 15849  1DE0                     __ptext109:	
 15850 ;; *************** function _DelayOffPointSelect *****************
 15851 ;; Defined at:
 15852 ;;		line 7 in file "../src/DelayOff_B1.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;  sw              1    wreg     unsigned char 
 15855 ;; Auto vars:     Size  Location     Type
 15856 ;;  sw              1    1[BANK0 ] unsigned char 
 15857 ;; Return value:  Size  Location     Type
 15858 ;;		None               void
 15859 ;; Registers used:
 15860 ;;		wreg
 15861 ;; Tracked objects:
 15862 ;;		On entry : 0/0
 15863 ;;		On exit  : 0/0
 15864 ;;		Unchanged: 0/0
 15865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15870 ;;Total ram usage:        2 bytes
 15871 ;; Hardware stack levels used:    1
 15872 ;; Hardware stack levels required when called:    5
 15873 ;; This function calls:
 15874 ;;		Nothing
 15875 ;; This function is called by:
 15876 ;;		_DlyOff_Initialization
 15877 ;;		_DlyOff_Main
 15878 ;;		_setDelayOff_GO
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           
 15883                           ;psect for function _DelayOffPointSelect
 15884  1DE0                     _DelayOffPointSelect:	
 15885                           
 15886                           ;incstack = 0
 15887                           ; Regs used in _DelayOffPointSelect: [wreg]
 15888                           ;DelayOffPointSelect@sw stored from wreg
 15889  1DE0  0020               	movlb	0	; select bank0
 15890  1DE1  00A1               	movwf	DelayOffPointSelect@sw
 15891                           
 15892                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15893  1DE2  0821               	movf	DelayOffPointSelect@sw,w
 15894  1DE3  3A01               	xorlw	1
 15895  1DE4  1D03               	skipz
 15896  1DE5  0008               	return
 15897                           
 15898                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15899  1DE6  306B               	movlw	_DlySw1& (0+255)
 15900  1DE7  00A0               	movwf	??_DelayOffPointSelect
 15901  1DE8  0820               	movf	??_DelayOffPointSelect,w
 15902  1DE9  00E9               	movwf	_DelayOff
 15903  1DEA  0008               	return
 15904  1DEB                     __end_of_DelayOffPointSelect:	
 15905                           
 15906                           	psect	text110
 15907  1FA9                     __ptext110:	
 15908 ;; *************** function _CC2500_PowerOnInitial *****************
 15909 ;; Defined at:
 15910 ;;		line 122 in file "../src/CC2500_B1.c"
 15911 ;; Parameters:    Size  Location     Type
 15912 ;;		None
 15913 ;; Auto vars:     Size  Location     Type
 15914 ;;		None
 15915 ;; Return value:  Size  Location     Type
 15916 ;;		None               void
 15917 ;; Registers used:
 15918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15919 ;; Tracked objects:
 15920 ;;		On entry : 0/0
 15921 ;;		On exit  : 0/0
 15922 ;;		Unchanged: 0/0
 15923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15925 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;Total ram usage:        0 bytes
 15929 ;; Hardware stack levels used:    1
 15930 ;; Hardware stack levels required when called:    8
 15931 ;; This function calls:
 15932 ;;		_CC2500_ClearRXFIFO
 15933 ;;		_CC2500_ClearTXFIFO
 15934 ;;		_CC2500_FrequencyCabr
 15935 ;;		_CC2500_InitPATable
 15936 ;;		_CC2500_InitSetREG
 15937 ;;		_CC2500_PowerRST
 15938 ;;		_CC2500_SIDLEMode
 15939 ;; This function is called by:
 15940 ;;		_main
 15941 ;; This function uses a non-reentrant model
 15942 ;;
 15943                           
 15944                           
 15945                           ;psect for function _CC2500_PowerOnInitial
 15946  1FA9                     _CC2500_PowerOnInitial:	
 15947                           
 15948                           ;CC2500_B1.c: 123: CC2500_PowerRST();
 15949                           
 15950                           ;incstack = 0
 15951                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15952  1FA9  3195  2542  319F   	fcall	_CC2500_PowerRST
 15953                           
 15954                           ;CC2500_B1.c: 124: CC2500_InitSetREG();
 15955  1FAC  3192  2238  319F   	fcall	_CC2500_InitSetREG
 15956                           
 15957                           ;CC2500_B1.c: 125: CC2500_InitPATable();
 15958  1FAF  3190  20E0  319F   	fcall	_CC2500_InitPATable
 15959                           
 15960                           ;CC2500_B1.c: 126: CC2500_ClearTXFIFO();
 15961  1FB2  319D  254F  319F   	fcall	_CC2500_ClearTXFIFO
 15962                           
 15963                           ;CC2500_B1.c: 127: CC2500_ClearRXFIFO();
 15964  1FB5  319D  254B  319F   	fcall	_CC2500_ClearRXFIFO
 15965                           
 15966                           ;CC2500_B1.c: 128: CC2500_FrequencyCabr();
 15967  1FB8  319E  2622  319F   	fcall	_CC2500_FrequencyCabr
 15968                           
 15969                           ;CC2500_B1.c: 129: CC2500_SIDLEMode();
 15970  1FBB  319D  2553         	fcall	_CC2500_SIDLEMode
 15971  1FBD  0008               	return
 15972  1FBE                     __end_of_CC2500_PowerOnInitial:	
 15973                           
 15974                           	psect	text111
 15975  1D53                     __ptext111:	
 15976 ;; *************** function _CC2500_SIDLEMode *****************
 15977 ;; Defined at:
 15978 ;;		line 212 in file "../src/CC2500_B1.c"
 15979 ;; Parameters:    Size  Location     Type
 15980 ;;		None
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;		None
 15983 ;; Return value:  Size  Location     Type
 15984 ;;		None               void
 15985 ;; Registers used:
 15986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15987 ;; Tracked objects:
 15988 ;;		On entry : 0/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;Total ram usage:        0 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    7
 15999 ;; This function calls:
 16000 ;;		_CC2500_WriteCommand
 16001 ;; This function is called by:
 16002 ;;		_CC2500_PowerOnInitial
 16003 ;; This function uses a non-reentrant model
 16004 ;;
 16005                           
 16006                           
 16007                           ;psect for function _CC2500_SIDLEMode
 16008  1D53                     _CC2500_SIDLEMode:	
 16009                           
 16010                           ;CC2500_B1.c: 213: CC2500_WriteCommand(0x36);
 16011                           
 16012                           ;incstack = 0
 16013                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16014  1D53  3036               	movlw	54
 16015  1D54  3190  2077         	fcall	_CC2500_WriteCommand
 16016  1D56  0008               	return
 16017  1D57                     __end_of_CC2500_SIDLEMode:	
 16018                           
 16019                           	psect	text112
 16020  1542                     __ptext112:	
 16021 ;; *************** function _CC2500_PowerRST *****************
 16022 ;; Defined at:
 16023 ;;		line 135 in file "../src/CC2500_B1.c"
 16024 ;; Parameters:    Size  Location     Type
 16025 ;;		None
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;		None
 16028 ;; Return value:  Size  Location     Type
 16029 ;;		None               void
 16030 ;; Registers used:
 16031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;Total ram usage:        1 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    6
 16044 ;; This function calls:
 16045 ;;		_CC2500_WriteByte
 16046 ;;		_DelayTime_1us
 16047 ;;		_Timeout_Counter
 16048 ;;		_set_TimeoutCleared
 16049 ;; This function is called by:
 16050 ;;		_CC2500_PowerOnInitial
 16051 ;; This function uses a non-reentrant model
 16052 ;;
 16053                           
 16054                           
 16055                           ;psect for function _CC2500_PowerRST
 16056  1542                     _CC2500_PowerRST:	
 16057                           
 16058                           ;CC2500_B1.c: 136: RC1 = 0;
 16059                           
 16060                           ;incstack = 0
 16061                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16062  1542  0020               	movlb	0	; select bank0
 16063  1543  108E               	bcf	14,1	;volatile
 16064                           
 16065                           ;CC2500_B1.c: 137: RC0 = 0;
 16066  1544  100E               	bcf	14,0	;volatile
 16067                           
 16068                           ;CC2500_B1.c: 138: RC4 = 1;
 16069  1545  160E               	bsf	14,4	;volatile
 16070                           
 16071                           ;CC2500_B1.c: 139: DelayTime_1us(10);
 16072  1546  300A               	movlw	10
 16073  1547  00A0               	movwf	DelayTime_1us@count
 16074  1548  3000               	movlw	0
 16075  1549  00A1               	movwf	DelayTime_1us@count+1
 16076  154A  3191  21EB  3195   	fcall	_DelayTime_1us
 16077                           
 16078                           ;CC2500_B1.c: 140: RC4 = 0;
 16079  154D  0020               	movlb	0	; select bank0
 16080  154E  120E               	bcf	14,4	;volatile
 16081                           
 16082                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 16083  154F  300A               	movlw	10
 16084  1550  00A0               	movwf	DelayTime_1us@count
 16085  1551  3000               	movlw	0
 16086  1552  00A1               	movwf	DelayTime_1us@count+1
 16087  1553  3191  21EB  3195   	fcall	_DelayTime_1us
 16088                           
 16089                           ;CC2500_B1.c: 142: RC4 = 1;
 16090  1556  0020               	movlb	0	; select bank0
 16091  1557  160E               	bsf	14,4	;volatile
 16092                           
 16093                           ;CC2500_B1.c: 143: DelayTime_1us(40);
 16094  1558  3028               	movlw	40
 16095  1559  00A0               	movwf	DelayTime_1us@count
 16096  155A  3000               	movlw	0
 16097  155B  00A1               	movwf	DelayTime_1us@count+1
 16098  155C  3191  21EB  3195   	fcall	_DelayTime_1us
 16099                           
 16100                           ;CC2500_B1.c: 144: RC4 = 0;
 16101  155F  0020               	movlb	0	; select bank0
 16102  1560  120E               	bcf	14,4	;volatile
 16103                           
 16104                           ;CC2500_B1.c: 145: SPI0Buffer = 0x30;
 16105  1561  3030               	movlw	48
 16106  1562  00A6               	movwf	??_CC2500_PowerRST
 16107  1563  0826               	movf	??_CC2500_PowerRST,w
 16108  1564  00FA               	movwf	_SPI0Buffer
 16109                           
 16110                           ;CC2500_B1.c: 146: while (RC2 == 1 && myMain.Timeout == 0) {
 16111  1565  2D69               	goto	l8660
 16112  1566                     l8658:	
 16113                           
 16114                           ;CC2500_B1.c: 147: Timeout_Counter();
 16115  1566  319F  2794  3195   	fcall	_Timeout_Counter
 16116  1569                     l8660:	
 16117  1569  0020               	movlb	0	; select bank0
 16118  156A  1D0E               	btfss	14,2	;volatile
 16119  156B  2D6F               	goto	l8664
 16120  156C  0021               	movlb	1	; select bank1
 16121  156D  1D30               	btfss	(_myMain^(0+128)+16),2
 16122  156E  2D66               	goto	l8658
 16123  156F                     l8664:	
 16124                           
 16125                           ;CC2500_B1.c: 148: };
 16126                           ;CC2500_B1.c: 149: set_TimeoutCleared();
 16127  156F  319D  256B  3195   	fcall	_set_TimeoutCleared
 16128                           
 16129                           ;CC2500_B1.c: 150: CC2500_WriteByte();
 16130  1572  319F  2780  3195   	fcall	_CC2500_WriteByte
 16131                           
 16132                           ;CC2500_B1.c: 151: while (RC2 == 1 && myMain.Timeout == 0) {
 16133  1575  2D79               	goto	l8670
 16134  1576                     l8668:	
 16135                           
 16136                           ;CC2500_B1.c: 152: Timeout_Counter();
 16137  1576  319F  2794  3195   	fcall	_Timeout_Counter
 16138  1579                     l8670:	
 16139  1579  0020               	movlb	0	; select bank0
 16140  157A  1D0E               	btfss	14,2	;volatile
 16141  157B  2D7F               	goto	l8674
 16142  157C  0021               	movlb	1	; select bank1
 16143  157D  1D30               	btfss	(_myMain^(0+128)+16),2
 16144  157E  2D76               	goto	l8668
 16145  157F                     l8674:	
 16146                           
 16147                           ;CC2500_B1.c: 153: };
 16148                           ;CC2500_B1.c: 154: set_TimeoutCleared();
 16149  157F  319D  256B         	fcall	_set_TimeoutCleared
 16150                           
 16151                           ;CC2500_B1.c: 155: RC0 = 0;
 16152  1581  0020               	movlb	0	; select bank0
 16153  1582  100E               	bcf	14,0	;volatile
 16154                           
 16155                           ;CC2500_B1.c: 156: RC4 = 1;
 16156  1583  160E               	bsf	14,4	;volatile
 16157  1584  0008               	return
 16158  1585                     __end_of_CC2500_PowerRST:	
 16159                           
 16160                           	psect	text113
 16161  1238                     __ptext113:	
 16162 ;; *************** function _CC2500_InitSetREG *****************
 16163 ;; Defined at:
 16164 ;;		line 162 in file "../src/CC2500_B1.c"
 16165 ;; Parameters:    Size  Location     Type
 16166 ;;		None
 16167 ;; Auto vars:     Size  Location     Type
 16168 ;;  loop_c          1    8[BANK0 ] unsigned char 
 16169 ;;  temp2           1    7[BANK0 ] unsigned char 
 16170 ;;  temp1           1    6[BANK0 ] unsigned char 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;		None               void
 16173 ;; Registers used:
 16174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:        4 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    7
 16187 ;; This function calls:
 16188 ;;		_CC2500_WriteREG
 16189 ;; This function is called by:
 16190 ;;		_CC2500_PowerOnInitial
 16191 ;; This function uses a non-reentrant model
 16192 ;;
 16193                           
 16194                           
 16195                           ;psect for function _CC2500_InitSetREG
 16196  1238                     _CC2500_InitSetREG:	
 16197                           
 16198                           ;CC2500_B1.c: 163: unsigned char loop_c;
 16199                           ;CC2500_B1.c: 164: unsigned char temp1, temp2;
 16200                           ;CC2500_B1.c: 166: for (loop_c = 0; loop_c < 47; loop_c++) {
 16201                           
 16202                           ;incstack = 0
 16203                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16204  1238  0020               	movlb	0	; select bank0
 16205  1239  01A8               	clrf	CC2500_InitSetREG@loop_c
 16206  123A                     L5:	
 16207  123A  302F               	movlw	47
 16208  123B  0228               	subwf	CC2500_InitSetREG@loop_c,w
 16209  123C  1803               	btfsc	3,0
 16210  123D  0008               	return
 16211                           
 16212                           ;CC2500_B1.c: 167: temp1 = CC2500_registers_address[loop_c];
 16213  123E  0828               	movf	CC2500_InitSetREG@loop_c,w
 16214  123F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 16215  1240  0084               	movwf	4
 16216  1241  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 16217  1242  1803               	skipnc
 16218  1243  3E01               	addlw	1
 16219  1244  0085               	movwf	5
 16220  1245  0800               	movf	0,w	;code access
 16221  1246  00A5               	movwf	??_CC2500_InitSetREG
 16222  1247  0825               	movf	??_CC2500_InitSetREG,w
 16223  1248  00A6               	movwf	CC2500_InitSetREG@temp1
 16224                           
 16225                           ;CC2500_B1.c: 168: temp2 = CC2500_rfSettings[loop_c];
 16226  1249  0828               	movf	CC2500_InitSetREG@loop_c,w
 16227  124A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 16228  124B  0084               	movwf	4
 16229  124C  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 16230  124D  1803               	skipnc
 16231  124E  3E01               	addlw	1
 16232  124F  0085               	movwf	5
 16233  1250  0800               	movf	0,w	;code access
 16234  1251  00A5               	movwf	??_CC2500_InitSetREG
 16235  1252  0825               	movf	??_CC2500_InitSetREG,w
 16236  1253  00A7               	movwf	CC2500_InitSetREG@temp2
 16237                           
 16238                           ;CC2500_B1.c: 170: CC2500_WriteREG(temp1, temp2);
 16239  1254  0827               	movf	CC2500_InitSetREG@temp2,w
 16240  1255  00A5               	movwf	??_CC2500_InitSetREG
 16241  1256  0825               	movf	??_CC2500_InitSetREG,w
 16242  1257  00A2               	movwf	CC2500_WriteREG@value
 16243  1258  0826               	movf	CC2500_InitSetREG@temp1,w
 16244  1259  3191  213F  3192   	fcall	_CC2500_WriteREG
 16245  125C  3001               	movlw	1
 16246  125D  0020               	movlb	0	; select bank0
 16247  125E  00A5               	movwf	??_CC2500_InitSetREG
 16248  125F  0825               	movf	??_CC2500_InitSetREG,w
 16249  1260  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 16250  1261  2A3A               	goto	L5
 16251  1262                     __end_of_CC2500_InitSetREG:	
 16252                           
 16253                           	psect	text114
 16254  10E0                     __ptext114:	
 16255 ;; *************** function _CC2500_InitPATable *****************
 16256 ;; Defined at:
 16257 ;;		line 177 in file "../src/CC2500_B1.c"
 16258 ;; Parameters:    Size  Location     Type
 16259 ;;		None
 16260 ;; Auto vars:     Size  Location     Type
 16261 ;;  loop_d          1    7[BANK0 ] unsigned char 
 16262 ;;  temp            1    6[BANK0 ] unsigned char 
 16263 ;; Return value:  Size  Location     Type
 16264 ;;		None               void
 16265 ;; Registers used:
 16266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16267 ;; Tracked objects:
 16268 ;;		On entry : 0/0
 16269 ;;		On exit  : 0/0
 16270 ;;		Unchanged: 0/0
 16271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;Total ram usage:        3 bytes
 16277 ;; Hardware stack levels used:    1
 16278 ;; Hardware stack levels required when called:    7
 16279 ;; This function calls:
 16280 ;;		_CC2500_WriteREG
 16281 ;; This function is called by:
 16282 ;;		_CC2500_PowerOnInitial
 16283 ;; This function uses a non-reentrant model
 16284 ;;
 16285                           
 16286                           
 16287                           ;psect for function _CC2500_InitPATable
 16288  10E0                     _CC2500_InitPATable:	
 16289                           
 16290                           ;CC2500_B1.c: 178: unsigned char loop_d;
 16291                           ;CC2500_B1.c: 179: unsigned char temp;
 16292                           ;CC2500_B1.c: 181: for (loop_d = 0; loop_d < 8; loop_d++) {
 16293                           
 16294                           ;incstack = 0
 16295                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16296  10E0  0020               	movlb	0	; select bank0
 16297  10E1  01A7               	clrf	CC2500_InitPATable@loop_d
 16298  10E2                     L6:	
 16299  10E2  3008               	movlw	8
 16300  10E3  0227               	subwf	CC2500_InitPATable@loop_d,w
 16301  10E4  1803               	btfsc	3,0
 16302  10E5  0008               	return
 16303                           
 16304                           ;CC2500_B1.c: 182: temp = CC2500_patable_vaule[loop_d];
 16305  10E6  0827               	movf	CC2500_InitPATable@loop_d,w
 16306  10E7  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 16307  10E8  0084               	movwf	4
 16308  10E9  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 16309  10EA  1803               	skipnc
 16310  10EB  3E01               	addlw	1
 16311  10EC  0085               	movwf	5
 16312  10ED  0800               	movf	0,w	;code access
 16313  10EE  00A5               	movwf	??_CC2500_InitPATable
 16314  10EF  0825               	movf	??_CC2500_InitPATable,w
 16315  10F0  00A6               	movwf	CC2500_InitPATable@temp
 16316                           
 16317                           ;CC2500_B1.c: 183: CC2500_WriteREG(0x3E, temp);
 16318  10F1  0826               	movf	CC2500_InitPATable@temp,w
 16319  10F2  00A5               	movwf	??_CC2500_InitPATable
 16320  10F3  0825               	movf	??_CC2500_InitPATable,w
 16321  10F4  00A2               	movwf	CC2500_WriteREG@value
 16322  10F5  303E               	movlw	62
 16323  10F6  3191  213F  3190   	fcall	_CC2500_WriteREG
 16324  10F9  3001               	movlw	1
 16325  10FA  0020               	movlb	0	; select bank0
 16326  10FB  00A5               	movwf	??_CC2500_InitPATable
 16327  10FC  0825               	movf	??_CC2500_InitPATable,w
 16328  10FD  07A7               	addwf	CC2500_InitPATable@loop_d,f
 16329  10FE  28E2               	goto	L6
 16330  10FF                     __end_of_CC2500_InitPATable:	
 16331                           
 16332                           	psect	text115
 16333  113F                     __ptext115:	
 16334 ;; *************** function _CC2500_WriteREG *****************
 16335 ;; Defined at:
 16336 ;;		line 254 in file "../src/CC2500_B1.c"
 16337 ;; Parameters:    Size  Location     Type
 16338 ;;  w_addr          1    wreg     unsigned char 
 16339 ;;  value           1    2[BANK0 ] unsigned char 
 16340 ;; Auto vars:     Size  Location     Type
 16341 ;;  w_addr          1    4[BANK0 ] unsigned char 
 16342 ;; Return value:  Size  Location     Type
 16343 ;;		None               void
 16344 ;; Registers used:
 16345 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16346 ;; Tracked objects:
 16347 ;;		On entry : 0/0
 16348 ;;		On exit  : 0/0
 16349 ;;		Unchanged: 0/0
 16350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16355 ;;Total ram usage:        3 bytes
 16356 ;; Hardware stack levels used:    1
 16357 ;; Hardware stack levels required when called:    6
 16358 ;; This function calls:
 16359 ;;		_CC2500_WriteByte
 16360 ;;		_Timeout_Counter
 16361 ;;		_set_TimeoutCleared
 16362 ;; This function is called by:
 16363 ;;		_CC2500_InitSetREG
 16364 ;;		_CC2500_InitPATable
 16365 ;; This function uses a non-reentrant model
 16366 ;;
 16367                           
 16368                           
 16369                           ;psect for function _CC2500_WriteREG
 16370  113F                     _CC2500_WriteREG:	
 16371                           
 16372                           ;incstack = 0
 16373                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16374                           ;CC2500_WriteREG@w_addr stored from wreg
 16375  113F  0020               	movlb	0	; select bank0
 16376  1140  00A4               	movwf	CC2500_WriteREG@w_addr
 16377                           
 16378                           ;CC2500_B1.c: 255: RC4 = 0;
 16379  1141  120E               	bcf	14,4	;volatile
 16380                           
 16381                           ;CC2500_B1.c: 256: SPI0Buffer = w_addr;
 16382  1142  0824               	movf	CC2500_WriteREG@w_addr,w
 16383  1143  00A3               	movwf	??_CC2500_WriteREG
 16384  1144  0823               	movf	??_CC2500_WriteREG,w
 16385  1145  00FA               	movwf	_SPI0Buffer
 16386                           
 16387                           ;CC2500_B1.c: 257: while (RC2 == 1 && myMain.Timeout == 0) {
 16388  1146  294A               	goto	l8418
 16389  1147                     l8416:	
 16390                           
 16391                           ;CC2500_B1.c: 258: Timeout_Counter();
 16392  1147  319F  2794  3191   	fcall	_Timeout_Counter
 16393  114A                     l8418:	
 16394  114A  0020               	movlb	0	; select bank0
 16395  114B  1D0E               	btfss	14,2	;volatile
 16396  114C  2950               	goto	l8422
 16397  114D  0021               	movlb	1	; select bank1
 16398  114E  1D30               	btfss	(_myMain^(0+128)+16),2
 16399  114F  2947               	goto	l8416
 16400  1150                     l8422:	
 16401                           
 16402                           ;CC2500_B1.c: 259: };
 16403                           ;CC2500_B1.c: 260: set_TimeoutCleared();
 16404  1150  319D  256B  3191   	fcall	_set_TimeoutCleared
 16405                           
 16406                           ;CC2500_B1.c: 262: CC2500_WriteByte();
 16407  1153  319F  2780  3191   	fcall	_CC2500_WriteByte
 16408                           
 16409                           ;CC2500_B1.c: 263: SPI0Buffer = value;
 16410  1156  0020               	movlb	0	; select bank0
 16411  1157  0822               	movf	CC2500_WriteREG@value,w
 16412  1158  00A3               	movwf	??_CC2500_WriteREG
 16413  1159  0823               	movf	??_CC2500_WriteREG,w
 16414  115A  00FA               	movwf	_SPI0Buffer
 16415                           
 16416                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 16417  115B  319F  2780         	fcall	_CC2500_WriteByte
 16418                           
 16419                           ;CC2500_B1.c: 265: RC4 = 1;
 16420  115D  0020               	movlb	0	; select bank0
 16421  115E  160E               	bsf	14,4	;volatile
 16422  115F  0008               	return
 16423  1160                     __end_of_CC2500_WriteREG:	
 16424                           
 16425                           	psect	text116
 16426  1E22                     __ptext116:	
 16427 ;; *************** function _CC2500_FrequencyCabr *****************
 16428 ;; Defined at:
 16429 ;;		line 204 in file "../src/CC2500_B1.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;		None
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;		None
 16434 ;; Return value:  Size  Location     Type
 16435 ;;		None               void
 16436 ;; Registers used:
 16437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16447 ;;Total ram usage:        0 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:    7
 16450 ;; This function calls:
 16451 ;;		_CC2500_WriteCommand
 16452 ;;		_DelayTime_1us
 16453 ;; This function is called by:
 16454 ;;		_CC2500_PowerOnInitial
 16455 ;; This function uses a non-reentrant model
 16456 ;;
 16457                           
 16458                           
 16459                           ;psect for function _CC2500_FrequencyCabr
 16460  1E22                     _CC2500_FrequencyCabr:	
 16461                           
 16462                           ;CC2500_B1.c: 205: CC2500_WriteCommand(0x33);
 16463                           
 16464                           ;incstack = 0
 16465                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16466  1E22  3033               	movlw	51
 16467  1E23  3190  2077  319E   	fcall	_CC2500_WriteCommand
 16468                           
 16469                           ;CC2500_B1.c: 206: DelayTime_1us(1000);
 16470  1E26  30E8               	movlw	232
 16471  1E27  0020               	movlb	0	; select bank0
 16472  1E28  00A0               	movwf	DelayTime_1us@count
 16473  1E29  3003               	movlw	3
 16474  1E2A  00A1               	movwf	DelayTime_1us@count+1
 16475  1E2B  3191  21EB         	fcall	_DelayTime_1us
 16476  1E2D  0008               	return
 16477  1E2E                     __end_of_CC2500_FrequencyCabr:	
 16478                           
 16479                           	psect	text117
 16480  11EB                     __ptext117:	
 16481 ;; *************** function _DelayTime_1us *****************
 16482 ;; Defined at:
 16483 ;;		line 323 in file "../src/CC2500_B1.c"
 16484 ;; Parameters:    Size  Location     Type
 16485 ;;  count           2    0[BANK0 ] int 
 16486 ;; Auto vars:     Size  Location     Type
 16487 ;;  j               2    4[BANK0 ] unsigned int 
 16488 ;;  i               2    2[BANK0 ] unsigned int 
 16489 ;; Return value:  Size  Location     Type
 16490 ;;		None               void
 16491 ;; Registers used:
 16492 ;;		wreg, status,2
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16498 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;Total ram usage:        6 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    5
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_CC2500_PowerRST
 16509 ;;		_CC2500_FrequencyCabr
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           
 16514                           ;psect for function _DelayTime_1us
 16515  11EB                     _DelayTime_1us:	
 16516                           
 16517                           ;CC2500_B1.c: 324: unsigned int i, j;
 16518                           ;CC2500_B1.c: 325: for (i = 1; i < count; i++)
 16519                           
 16520                           ;incstack = 0
 16521                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16522  11EB  3001               	movlw	1
 16523  11EC  0020               	movlb	0	; select bank0
 16524  11ED  00A2               	movwf	DelayTime_1us@i
 16525  11EE  3000               	movlw	0
 16526  11EF  00A3               	movwf	DelayTime_1us@i+1
 16527  11F0                     l366:	
 16528  11F0  0821               	movf	DelayTime_1us@count+1,w
 16529  11F1  0223               	subwf	DelayTime_1us@i+1,w
 16530  11F2  1D03               	skipz
 16531  11F3  29F6               	goto	u8255
 16532  11F4  0820               	movf	DelayTime_1us@count,w
 16533  11F5  0222               	subwf	DelayTime_1us@i,w
 16534  11F6                     u8255:	
 16535  11F6  1803               	btfsc	3,0
 16536  11F7  0008               	return
 16537                           
 16538                           ;CC2500_B1.c: 326: for (j = 0; j <= 1; j++);
 16539  11F8  01A4               	clrf	DelayTime_1us@j
 16540  11F9  01A5               	clrf	DelayTime_1us@j+1
 16541  11FA  3000               	movlw	0
 16542  11FB  0225               	subwf	DelayTime_1us@j+1,w
 16543  11FC  3002               	movlw	2
 16544  11FD  1903               	skipnz
 16545  11FE  0224               	subwf	DelayTime_1us@j,w
 16546  11FF  1803               	btfsc	3,0
 16547  1200  2A0C               	goto	l8410
 16548  1201                     l8408:	
 16549  1201  3001               	movlw	1
 16550  1202  07A4               	addwf	DelayTime_1us@j,f
 16551  1203  3000               	movlw	0
 16552  1204  3DA5               	addwfc	DelayTime_1us@j+1,f
 16553  1205  3000               	movlw	0
 16554  1206  0225               	subwf	DelayTime_1us@j+1,w
 16555  1207  3002               	movlw	2
 16556  1208  1903               	skipnz
 16557  1209  0224               	subwf	DelayTime_1us@j,w
 16558  120A  1C03               	skipc
 16559  120B  2A01               	goto	l8408
 16560  120C                     l8410:	
 16561  120C  3001               	movlw	1
 16562  120D  07A2               	addwf	DelayTime_1us@i,f
 16563  120E  3000               	movlw	0
 16564  120F  3DA3               	addwfc	DelayTime_1us@i+1,f
 16565  1210  29F0               	goto	l366
 16566  1211                     __end_of_DelayTime_1us:	
 16567                           
 16568                           	psect	text118
 16569  1D4F                     __ptext118:	
 16570 ;; *************** function _CC2500_ClearTXFIFO *****************
 16571 ;; Defined at:
 16572 ;;		line 190 in file "../src/CC2500_B1.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;		None
 16575 ;; Auto vars:     Size  Location     Type
 16576 ;;		None
 16577 ;; Return value:  Size  Location     Type
 16578 ;;		None               void
 16579 ;; Registers used:
 16580 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16581 ;; Tracked objects:
 16582 ;;		On entry : 0/0
 16583 ;;		On exit  : 0/0
 16584 ;;		Unchanged: 0/0
 16585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;Total ram usage:        0 bytes
 16591 ;; Hardware stack levels used:    1
 16592 ;; Hardware stack levels required when called:    7
 16593 ;; This function calls:
 16594 ;;		_CC2500_WriteCommand
 16595 ;; This function is called by:
 16596 ;;		_CC2500_PowerOnInitial
 16597 ;; This function uses a non-reentrant model
 16598 ;;
 16599                           
 16600                           
 16601                           ;psect for function _CC2500_ClearTXFIFO
 16602  1D4F                     _CC2500_ClearTXFIFO:	
 16603                           
 16604                           ;CC2500_B1.c: 191: CC2500_WriteCommand(0x3B);
 16605                           
 16606                           ;incstack = 0
 16607                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16608  1D4F  303B               	movlw	59
 16609  1D50  3190  2077         	fcall	_CC2500_WriteCommand
 16610  1D52  0008               	return
 16611  1D53                     __end_of_CC2500_ClearTXFIFO:	
 16612                           
 16613                           	psect	text119
 16614  1D4B                     __ptext119:	
 16615 ;; *************** function _CC2500_ClearRXFIFO *****************
 16616 ;; Defined at:
 16617 ;;		line 197 in file "../src/CC2500_B1.c"
 16618 ;; Parameters:    Size  Location     Type
 16619 ;;		None
 16620 ;; Auto vars:     Size  Location     Type
 16621 ;;		None
 16622 ;; Return value:  Size  Location     Type
 16623 ;;		None               void
 16624 ;; Registers used:
 16625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16626 ;; Tracked objects:
 16627 ;;		On entry : 0/0
 16628 ;;		On exit  : 0/0
 16629 ;;		Unchanged: 0/0
 16630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16635 ;;Total ram usage:        0 bytes
 16636 ;; Hardware stack levels used:    1
 16637 ;; Hardware stack levels required when called:    7
 16638 ;; This function calls:
 16639 ;;		_CC2500_WriteCommand
 16640 ;; This function is called by:
 16641 ;;		_CC2500_PowerOnInitial
 16642 ;; This function uses a non-reentrant model
 16643 ;;
 16644                           
 16645                           
 16646                           ;psect for function _CC2500_ClearRXFIFO
 16647  1D4B                     _CC2500_ClearRXFIFO:	
 16648                           
 16649                           ;CC2500_B1.c: 198: CC2500_WriteCommand(0x3A);
 16650                           
 16651                           ;incstack = 0
 16652                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16653  1D4B  303A               	movlw	58
 16654  1D4C  3190  2077         	fcall	_CC2500_WriteCommand
 16655  1D4E  0008               	return
 16656  1D4F                     __end_of_CC2500_ClearRXFIFO:	
 16657                           
 16658                           	psect	text120
 16659  1077                     __ptext120:	
 16660 ;; *************** function _CC2500_WriteCommand *****************
 16661 ;; Defined at:
 16662 ;;		line 288 in file "../src/CC2500_B1.c"
 16663 ;; Parameters:    Size  Location     Type
 16664 ;;  command         1    wreg     unsigned char 
 16665 ;; Auto vars:     Size  Location     Type
 16666 ;;  command         1    3[BANK0 ] unsigned char 
 16667 ;; Return value:  Size  Location     Type
 16668 ;;		None               void
 16669 ;; Registers used:
 16670 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16671 ;; Tracked objects:
 16672 ;;		On entry : 0/0
 16673 ;;		On exit  : 0/0
 16674 ;;		Unchanged: 0/0
 16675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16678 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16680 ;;Total ram usage:        2 bytes
 16681 ;; Hardware stack levels used:    1
 16682 ;; Hardware stack levels required when called:    6
 16683 ;; This function calls:
 16684 ;;		_CC2500_WriteByte
 16685 ;;		_Timeout_Counter
 16686 ;;		_set_TimeoutCleared
 16687 ;; This function is called by:
 16688 ;;		_CC2500_TxData
 16689 ;;		_CC2500_ClearTXFIFO
 16690 ;;		_CC2500_ClearRXFIFO
 16691 ;;		_CC2500_FrequencyCabr
 16692 ;;		_CC2500_SIDLEMode
 16693 ;;		_setRF_Main
 16694 ;;		_RF_RxDisable
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           
 16699                           ;psect for function _CC2500_WriteCommand
 16700  1077                     _CC2500_WriteCommand:	
 16701                           
 16702                           ;incstack = 0
 16703                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16704                           ;CC2500_WriteCommand@command stored from wreg
 16705  1077  0020               	movlb	0	; select bank0
 16706  1078  00A3               	movwf	CC2500_WriteCommand@command
 16707                           
 16708                           ;CC2500_B1.c: 289: RC4 = 0;
 16709  1079  120E               	bcf	14,4	;volatile
 16710                           
 16711                           ;CC2500_B1.c: 290: SPI0Buffer = command;
 16712  107A  0823               	movf	CC2500_WriteCommand@command,w
 16713  107B  00A2               	movwf	??_CC2500_WriteCommand
 16714  107C  0822               	movf	??_CC2500_WriteCommand,w
 16715  107D  00FA               	movwf	_SPI0Buffer
 16716                           
 16717                           ;CC2500_B1.c: 292: while (RC2 == 1 && myMain.Timeout == 0) {
 16718  107E  2882               	goto	l8162
 16719  107F                     l8160:	
 16720                           
 16721                           ;CC2500_B1.c: 293: Timeout_Counter();
 16722  107F  319F  2794  3190   	fcall	_Timeout_Counter
 16723  1082                     l8162:	
 16724  1082  0020               	movlb	0	; select bank0
 16725  1083  1D0E               	btfss	14,2	;volatile
 16726  1084  2888               	goto	l8166
 16727  1085  0021               	movlb	1	; select bank1
 16728  1086  1D30               	btfss	(_myMain^(0+128)+16),2
 16729  1087  287F               	goto	l8160
 16730  1088                     l8166:	
 16731                           
 16732                           ;CC2500_B1.c: 294: };
 16733                           ;CC2500_B1.c: 295: set_TimeoutCleared();
 16734  1088  319D  256B  3190   	fcall	_set_TimeoutCleared
 16735                           
 16736                           ;CC2500_B1.c: 297: CC2500_WriteByte();
 16737  108B  319F  2780         	fcall	_CC2500_WriteByte
 16738                           
 16739                           ;CC2500_B1.c: 298: RC4 = 1;
 16740  108D  0020               	movlb	0	; select bank0
 16741  108E  160E               	bsf	14,4	;volatile
 16742  108F  0008               	return
 16743  1090                     __end_of_CC2500_WriteCommand:	
 16744                           
 16745                           	psect	text121
 16746  1D6B                     __ptext121:	
 16747 ;; *************** function _set_TimeoutCleared *****************
 16748 ;; Defined at:
 16749 ;;		line 279 in file "../src/main_B1.c"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;		None
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;		None
 16754 ;; Return value:  Size  Location     Type
 16755 ;;		None               void
 16756 ;; Registers used:
 16757 ;;		status,2
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16767 ;;Total ram usage:        0 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:    5
 16770 ;; This function calls:
 16771 ;;		Nothing
 16772 ;; This function is called by:
 16773 ;;		_CC2500_TxData
 16774 ;;		_CC2500_RxData
 16775 ;;		_CC2500_PowerRST
 16776 ;;		_CC2500_WriteREG
 16777 ;;		_CC2500_WriteCommand
 16778 ;;		_CC2500_ReadStatus
 16779 ;;		_getAD
 16780 ;;		_TouchPower
 16781 ;;		_CC2500_ReadREG
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           
 16786                           ;psect for function _set_TimeoutCleared
 16787  1D6B                     _set_TimeoutCleared:	
 16788                           
 16789                           ;main_B1.c: 280: myMain.Timeout = 0;
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in _set_TimeoutCleared: [status,2]
 16793  1D6B  0021               	movlb	1	; select bank1
 16794  1D6C  1130               	bcf	(_myMain^(0+128)+16),2
 16795                           
 16796                           ;main_B1.c: 281: myMain.Timeout_Counter = 0;
 16797  1D6D  01B1               	clrf	(_myMain^(0+128)+17)
 16798  1D6E  01B2               	clrf	((_myMain+1)^(0+128)+17)
 16799  1D6F  0008               	return
 16800  1D70                     __end_of_set_TimeoutCleared:	
 16801                           
 16802                           	psect	text122
 16803  1F94                     __ptext122:	
 16804 ;; *************** function _Timeout_Counter *****************
 16805 ;; Defined at:
 16806 ;;		line 270 in file "../src/main_B1.c"
 16807 ;; Parameters:    Size  Location     Type
 16808 ;;		None
 16809 ;; Auto vars:     Size  Location     Type
 16810 ;;		None
 16811 ;; Return value:  Size  Location     Type
 16812 ;;		None               void
 16813 ;; Registers used:
 16814 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16815 ;; Tracked objects:
 16816 ;;		On entry : 0/0
 16817 ;;		On exit  : 0/0
 16818 ;;		Unchanged: 0/0
 16819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16824 ;;Total ram usage:        0 bytes
 16825 ;; Hardware stack levels used:    1
 16826 ;; Hardware stack levels required when called:    5
 16827 ;; This function calls:
 16828 ;;		Nothing
 16829 ;; This function is called by:
 16830 ;;		_CC2500_TxData
 16831 ;;		_CC2500_RxData
 16832 ;;		_CC2500_PowerRST
 16833 ;;		_CC2500_WriteREG
 16834 ;;		_CC2500_WriteCommand
 16835 ;;		_CC2500_ReadStatus
 16836 ;;		_getAD
 16837 ;;		_TouchPower
 16838 ;;		_CC2500_ReadREG
 16839 ;; This function uses a non-reentrant model
 16840 ;;
 16841                           
 16842                           
 16843                           ;psect for function _Timeout_Counter
 16844  1F94                     _Timeout_Counter:	
 16845                           
 16846                           ;main_B1.c: 271: myMain.Timeout_Counter++;
 16847                           
 16848                           ;incstack = 0
 16849                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16850  1F94  3001               	movlw	1
 16851  1F95  0021               	movlb	1	; select bank1
 16852  1F96  07B1               	addwf	(_myMain^(0+128)+17),f
 16853  1F97  3000               	movlw	0
 16854  1F98  3DB2               	addwfc	((_myMain+1)^(0+128)+17),f
 16855                           
 16856                           ;main_B1.c: 272: if (myMain.Timeout_Counter == 10000) {
 16857  1F99  3011               	movlw	17
 16858  1F9A  3EA0               	addlw	_myMain& (0+255)
 16859  1F9B  0086               	movwf	6
 16860  1F9C  0187               	clrf	7
 16861  1F9D  3F40               	moviw [0]fsr1
 16862  1F9E  3A10               	xorlw	16
 16863  1F9F  1D03               	skipz
 16864  1FA0  2FA3               	goto	u7795
 16865  1FA1  3F41               	moviw [1]fsr1
 16866  1FA2  3A27               	xorlw	39
 16867  1FA3                     u7795:	
 16868  1FA3  1D03               	skipz
 16869  1FA4  0008               	return
 16870                           
 16871                           ;main_B1.c: 273: myMain.Timeout_Counter = 0;
 16872  1FA5  01B1               	clrf	(_myMain^(0+128)+17)
 16873  1FA6  01B2               	clrf	((_myMain+1)^(0+128)+17)
 16874                           
 16875                           ;main_B1.c: 274: myMain.Timeout = 1;
 16876  1FA7  1530               	bsf	(_myMain^(0+128)+16),2
 16877  1FA8  0008               	return
 16878  1FA9                     __end_of_Timeout_Counter:	
 16879                           
 16880                           	psect	text123
 16881  1F80                     __ptext123:	
 16882 ;; *************** function _CC2500_WriteByte *****************
 16883 ;; Defined at:
 16884 ;;		line 222 in file "../src/CC2500_B1.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;		None
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16889 ;; Return value:  Size  Location     Type
 16890 ;;		None               void
 16891 ;; Registers used:
 16892 ;;		wreg, status,2, status,0
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;Total ram usage:        2 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; Hardware stack levels required when called:    5
 16905 ;; This function calls:
 16906 ;;		Nothing
 16907 ;; This function is called by:
 16908 ;;		_CC2500_TxData
 16909 ;;		_CC2500_RxData
 16910 ;;		_CC2500_PowerRST
 16911 ;;		_CC2500_WriteREG
 16912 ;;		_CC2500_WriteCommand
 16913 ;;		_CC2500_ReadStatus
 16914 ;;		_CC2500_ReadREG
 16915 ;; This function uses a non-reentrant model
 16916 ;;
 16917                           
 16918                           
 16919                           ;psect for function _CC2500_WriteByte
 16920  1F80                     _CC2500_WriteByte:	
 16921                           
 16922                           ;CC2500_B1.c: 223: unsigned char loop_a;
 16923                           ;CC2500_B1.c: 224: for (loop_a = 0; loop_a < 8; loop_a++) {
 16924                           
 16925                           ;incstack = 0
 16926                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16927  1F80  0020               	movlb	0	; select bank0
 16928  1F81  01A1               	clrf	CC2500_WriteByte@loop_a
 16929  1F82                     L7:	
 16930  1F82  3008               	movlw	8
 16931  1F83  0221               	subwf	CC2500_WriteByte@loop_a,w
 16932  1F84  1803               	btfsc	3,0
 16933  1F85  0008               	return
 16934                           
 16935                           ;CC2500_B1.c: 225: if (SPI0Buffer & 0x80)
 16936  1F86  1FFA               	btfss	_SPI0Buffer,7
 16937  1F87  2F8A               	goto	l322
 16938                           
 16939                           ;CC2500_B1.c: 226: RC0 = 1;
 16940  1F88  140E               	bsf	14,0	;volatile
 16941  1F89  2F8B               	goto	l323
 16942  1F8A                     l322:	
 16943                           
 16944                           ;CC2500_B1.c: 227: else
 16945                           ;CC2500_B1.c: 228: RC0 = 0;
 16946  1F8A  100E               	bcf	14,0	;volatile
 16947  1F8B                     l323:	
 16948                           
 16949                           ;CC2500_B1.c: 229: RC1 = 1;
 16950  1F8B  148E               	bsf	14,1	;volatile
 16951                           
 16952                           ;CC2500_B1.c: 230: SPI0Buffer <<= 1;
 16953  1F8C  1003               	clrc
 16954  1F8D  0DFA               	rlf	_SPI0Buffer,f
 16955                           
 16956                           ;CC2500_B1.c: 231: RC1 = 0;
 16957  1F8E  108E               	bcf	14,1	;volatile
 16958  1F8F  3001               	movlw	1
 16959  1F90  00A0               	movwf	??_CC2500_WriteByte
 16960  1F91  0820               	movf	??_CC2500_WriteByte,w
 16961  1F92  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16962  1F93  2F82               	goto	L7
 16963  1F94                     __end_of_CC2500_WriteByte:	
 16964                           
 16965                           	psect	text124
 16966  0800                     __ptext124:	
 16967 ;; *************** function _Buzzer_Main *****************
 16968 ;; Defined at:
 16969 ;;		line 46 in file "../src/Buzzer_B1.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;		None
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;		None
 16974 ;; Return value:  Size  Location     Type
 16975 ;;		None               void
 16976 ;; Registers used:
 16977 ;;		wreg, status,2, status,0
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;Total ram usage:        1 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; Hardware stack levels required when called:    5
 16990 ;; This function calls:
 16991 ;;		Nothing
 16992 ;; This function is called by:
 16993 ;;		_main
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           
 16998                           ;psect for function _Buzzer_Main
 16999  0800                     _Buzzer_Main:	
 17000                           
 17001                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 17002                           
 17003                           ;incstack = 0
 17004                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 17005  0800  0021               	movlb	1	; select bank1
 17006  0801  1CB3               	btfss	_Buz1^(0+128),1
 17007  0802  0008               	return
 17008                           
 17009                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 17010  0803  3001               	movlw	1
 17011  0804  07B4               	addwf	(_Buz1^(0+128)+1),f
 17012  0805  3000               	movlw	0
 17013  0806  3DB5               	addwfc	((_Buz1+1)^(0+128)+1),f
 17014                           
 17015                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 17016  0807  083A               	movf	((_Buz1+1)^(0+128)+6),w
 17017  0808  0235               	subwf	((_Buz1+1)^(0+128)+1),w
 17018  0809  1D03               	skipz
 17019  080A  280D               	goto	u9575
 17020  080B  0839               	movf	(_Buz1^(0+128)+6),w
 17021  080C  0234               	subwf	(_Buz1^(0+128)+1),w
 17022  080D                     u9575:	
 17023  080D  1C03               	skipc
 17024  080E  0008               	return
 17025                           
 17026                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 17027  080F  01B4               	clrf	(_Buz1^(0+128)+1)
 17028  0810  01B5               	clrf	((_Buz1+1)^(0+128)+1)
 17029                           
 17030                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 17031  0811  12B3               	bcf	_Buz1^(0+128),5
 17032  0812  0020               	movlb	0	; select bank0
 17033  0813  1D8D               	btfss	13,3	;volatile
 17034  0814  2817               	goto	l9266
 17035  0815  0021               	movlb	1	; select bank1
 17036  0816  16B3               	bsf	_Buz1^(0+128),5
 17037  0817                     l9266:	
 17038                           
 17039                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 17040  0817  0021               	movlb	1	; select bank1
 17041  0818  1AB3               	btfsc	_Buz1^(0+128),5
 17042  0819  2843               	goto	l102
 17043                           
 17044                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 17045  081A  08B6               	movf	(_Buz1^(0+128)+3),f
 17046  081B  1D03               	skipz
 17047  081C  283F               	goto	l103
 17048                           
 17049                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 17050  081D  1DB3               	btfss	_Buz1^(0+128),3
 17051  081E  282D               	goto	l104
 17052                           
 17053                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 17054  081F  11B3               	bcf	_Buz1^(0+128),3
 17055                           
 17056                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 17057  0820  0837               	movf	(_Buz1^(0+128)+4),w
 17058  0821  0020               	movlb	0	; select bank0
 17059  0822  00A0               	movwf	??_Buzzer_Main
 17060  0823  0820               	movf	??_Buzzer_Main,w
 17061  0824  0021               	movlb	1	; select bank1
 17062  0825  00B6               	movwf	(_Buz1^(0+128)+3)
 17063                           
 17064                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 17065  0826  083C               	movf	((_Buz1+1)^(0+128)+8),w
 17066  0827  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 17067  0828  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 17068  0829  083B               	movf	(_Buz1^(0+128)+8),w
 17069  082A  01B9               	clrf	(_Buz1^(0+128)+6)
 17070  082B  07B9               	addwf	(_Buz1^(0+128)+6),f
 17071                           
 17072                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 17073  082C  0008               	return
 17074  082D                     l104:	
 17075  082D  1E33               	btfss	_Buz1^(0+128),4
 17076  082E  283D               	goto	l106
 17077                           
 17078                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 17079  082F  1233               	bcf	_Buz1^(0+128),4
 17080                           
 17081                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 17082  0830  0838               	movf	(_Buz1^(0+128)+5),w
 17083  0831  0020               	movlb	0	; select bank0
 17084  0832  00A0               	movwf	??_Buzzer_Main
 17085  0833  0820               	movf	??_Buzzer_Main,w
 17086  0834  0021               	movlb	1	; select bank1
 17087  0835  00B6               	movwf	(_Buz1^(0+128)+3)
 17088                           
 17089                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 17090  0836  083E               	movf	((_Buz1+1)^(0+128)+10),w
 17091  0837  01BA               	clrf	((_Buz1+1)^(0+128)+6)
 17092  0838  07BA               	addwf	((_Buz1+1)^(0+128)+6),f
 17093  0839  083D               	movf	(_Buz1^(0+128)+10),w
 17094  083A  01B9               	clrf	(_Buz1^(0+128)+6)
 17095  083B  07B9               	addwf	(_Buz1^(0+128)+6),f
 17096                           
 17097                           ;Buzzer_B1.c: 62: } else {
 17098  083C  0008               	return
 17099  083D                     l106:	
 17100                           
 17101                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 17102  083D  10B3               	bcf	_Buz1^(0+128),1
 17103                           
 17104                           ;Buzzer_B1.c: 64: }
 17105                           ;Buzzer_B1.c: 65: } else {
 17106  083E  0008               	return
 17107  083F                     l103:	
 17108                           
 17109                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 17110  083F  16B3               	bsf	_Buz1^(0+128),5
 17111                           
 17112                           ;Buzzer_B1.c: 68: RB3 = 1;
 17113  0840  0020               	movlb	0	; select bank0
 17114  0841  158D               	bsf	13,3	;volatile
 17115                           
 17116                           ;Buzzer_B1.c: 69: }
 17117                           ;Buzzer_B1.c: 70: } else {
 17118  0842  0008               	return
 17119  0843                     l102:	
 17120                           
 17121                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 17122  0843  12B3               	bcf	_Buz1^(0+128),5
 17123                           
 17124                           ;Buzzer_B1.c: 73: RB3 = 0;
 17125  0844  0020               	movlb	0	; select bank0
 17126  0845  118D               	bcf	13,3	;volatile
 17127                           
 17128                           ;Buzzer_B1.c: 75: Buz1.Count--;
 17129  0846  3001               	movlw	1
 17130  0847  0021               	movlb	1	; select bank1
 17131  0848  02B6               	subwf	(_Buz1^(0+128)+3),f
 17132  0849  0008               	return
 17133  084A                     __end_of_Buzzer_Main:	
 17134                           
 17135                           	psect	text125
 17136  1D2F                     __ptext125:	
 17137 ;; *************** function _Buzzer_Initialization *****************
 17138 ;; Defined at:
 17139 ;;		line 11 in file "../src/Buzzer_B1.c"
 17140 ;; Parameters:    Size  Location     Type
 17141 ;;		None
 17142 ;; Auto vars:     Size  Location     Type
 17143 ;;		None
 17144 ;; Return value:  Size  Location     Type
 17145 ;;		None               void
 17146 ;; Registers used:
 17147 ;;		None
 17148 ;; Tracked objects:
 17149 ;;		On entry : 0/0
 17150 ;;		On exit  : 0/0
 17151 ;;		Unchanged: 0/0
 17152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;Total ram usage:        0 bytes
 17158 ;; Hardware stack levels used:    1
 17159 ;; Hardware stack levels required when called:    5
 17160 ;; This function calls:
 17161 ;;		Nothing
 17162 ;; This function is called by:
 17163 ;;		_main
 17164 ;; This function uses a non-reentrant model
 17165 ;;
 17166                           
 17167                           
 17168                           ;psect for function _Buzzer_Initialization
 17169  1D2F                     _Buzzer_Initialization:	
 17170                           
 17171                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 17172                           
 17173                           ;incstack = 0
 17174                           ; Regs used in _Buzzer_Initialization: []
 17175  1D2F  0021               	movlb	1	; select bank1
 17176  1D30  1433               	bsf	_Buz1^(0+128),0
 17177  1D31  0008               	return
 17178  1D32                     __end_of_Buzzer_Initialization:	
 17179                           
 17180                           	psect	intentry
 17181  0004                     __pintentry:	
 17182 ;; *************** function _ISR *****************
 17183 ;; Defined at:
 17184 ;;		line 107 in file "../src/MCU_B1.c"
 17185 ;; Parameters:    Size  Location     Type
 17186 ;;		None
 17187 ;; Auto vars:     Size  Location     Type
 17188 ;;		None
 17189 ;; Return value:  Size  Location     Type
 17190 ;;		None               void
 17191 ;; Registers used:
 17192 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17193 ;; Tracked objects:
 17194 ;;		On entry : 0/0
 17195 ;;		On exit  : 0/0
 17196 ;;		Unchanged: 0/0
 17197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17202 ;;Total ram usage:        1 bytes
 17203 ;; Hardware stack levels used:    1
 17204 ;; Hardware stack levels required when called:    4
 17205 ;; This function calls:
 17206 ;;		_IOC_ISR
 17207 ;;		_TMR1_ISR
 17208 ;; This function is called by:
 17209 ;;		Interrupt level 1
 17210 ;; This function uses a non-reentrant model
 17211 ;;
 17212                           
 17213  0004                     _ISR:	
 17214                           
 17215                           ;incstack = 0
 17216                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17217  0004  147E               	bsf	126,0	;set compiler interrupt flag
 17218  0005  3180               	pagesel	$
 17219  0006  0020               	movlb	0	; select bank0
 17220  0007  087F               	movf	127,w
 17221  0008  00F5               	movwf	??_ISR
 17222                           
 17223                           ;MCU_B1.c: 109: IOC_ISR();
 17224  0009  319E  266A  3180   	fcall	_IOC_ISR
 17225                           
 17226                           ;MCU_B1.c: 111: ;;
 17227                           ;MCU_B1.c: 113: TMR1_ISR();
 17228  000C  3191  21C7         	fcall	_TMR1_ISR
 17229  000E  0875               	movf	??_ISR,w
 17230  000F  0020               	movlb	0	; select bank0
 17231  0010  00FF               	movwf	127
 17232  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 17233  0012  0009               	retfie
 17234  0013                     __end_of_ISR:	
 17235                           
 17236                           	psect	text127
 17237  11C7                     __ptext127:	
 17238 ;; *************** function _TMR1_ISR *****************
 17239 ;; Defined at:
 17240 ;;		line 209 in file "../src/MCU_B1.c"
 17241 ;; Parameters:    Size  Location     Type
 17242 ;;		None
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;		None
 17245 ;; Return value:  Size  Location     Type
 17246 ;;		None               void
 17247 ;; Registers used:
 17248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17258 ;;Total ram usage:        0 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; Hardware stack levels required when called:    2
 17261 ;; This function calls:
 17262 ;;		_setDimmerLights_IntrControl
 17263 ;; This function is called by:
 17264 ;;		_ISR
 17265 ;; This function uses a non-reentrant model
 17266 ;;
 17267                           
 17268                           
 17269                           ;psect for function _TMR1_ISR
 17270  11C7                     _TMR1_ISR:	
 17271                           
 17272                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 17273                           
 17274                           ;incstack = 0
 17275                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17276  11C7  0021               	movlb	1	; select bank1
 17277  11C8  1C11               	btfss	17,0	;volatile
 17278  11C9  0008               	return
 17279  11CA  0020               	movlb	0	; select bank0
 17280  11CB  1C11               	btfss	17,0	;volatile
 17281  11CC  0008               	return
 17282                           
 17283                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 17284  11CD  30FA               	movlw	250
 17285  11CE  0097               	movwf	23	;volatile
 17286                           
 17287                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 17288  11CF  3038               	movlw	56
 17289  11D0  0096               	movwf	22	;volatile
 17290                           
 17291                           ;MCU_B1.c: 214: TMR1IF = 0;
 17292  11D1  1011               	bcf	17,0	;volatile
 17293                           
 17294                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 17295  11D2  3001               	movlw	1
 17296  11D3  3180  2046  3191   	fcall	_setDimmerLights_IntrControl
 17297                           
 17298                           ;MCU_B1.c: 234: Timer1.Count++;
 17299  11D6  3001               	movlw	1
 17300  11D7  0021               	movlb	1	; select bank1
 17301  11D8  07D4               	addwf	(_Timer1^(0+128)+1),f
 17302  11D9  3000               	movlw	0
 17303  11DA  3DD5               	addwfc	((_Timer1+1)^(0+128)+1),f
 17304                           
 17305                           ;MCU_B1.c: 235: if (Timer1.Count == 100)
 17306  11DB  3001               	movlw	1
 17307  11DC  3ED3               	addlw	_Timer1& (0+255)
 17308  11DD  0086               	movwf	6
 17309  11DE  0187               	clrf	7
 17310  11DF  3F40               	moviw [0]fsr1
 17311  11E0  3A64               	xorlw	100
 17312  11E1  1D03               	skipz
 17313  11E2  29E5               	goto	u697_25
 17314  11E3  3F41               	moviw [1]fsr1
 17315  11E4  3A00               	xorlw	0
 17316  11E5                     u697_25:	
 17317  11E5  1D03               	skipz
 17318  11E6  0008               	return
 17319                           
 17320                           ;MCU_B1.c: 236: {
 17321                           ;MCU_B1.c: 237: Timer1.Count = 0;
 17322  11E7  01D4               	clrf	(_Timer1^(0+128)+1)
 17323  11E8  01D5               	clrf	((_Timer1+1)^(0+128)+1)
 17324                           
 17325                           ;MCU_B1.c: 238: myMain.T1_Timerout = 1;
 17326  11E9  1520               	bsf	_myMain^(0+128),2
 17327  11EA  0008               	return
 17328  11EB                     __end_of_TMR1_ISR:	
 17329                           
 17330                           	psect	text128
 17331  0046                     __ptext128:	
 17332 ;; *************** function _setDimmerLights_IntrControl *****************
 17333 ;; Defined at:
 17334 ;;		line 94 in file "../src/Dimmer_B1.c"
 17335 ;; Parameters:    Size  Location     Type
 17336 ;;  lights          1    wreg     unsigned char 
 17337 ;; Auto vars:     Size  Location     Type
 17338 ;;  lights          1    4[COMMON] unsigned char 
 17339 ;; Return value:  Size  Location     Type
 17340 ;;		None               void
 17341 ;; Registers used:
 17342 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17350 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17352 ;;Total ram usage:        3 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    1
 17355 ;; This function calls:
 17356 ;;		_DimmerIntrPointSelect
 17357 ;; This function is called by:
 17358 ;;		_TMR1_ISR
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           
 17363                           ;psect for function _setDimmerLights_IntrControl
 17364  0046                     _setDimmerLights_IntrControl:	
 17365                           
 17366                           ;incstack = 0
 17367                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 17368                           ;setDimmerLights_IntrControl@lights stored from wreg
 17369  0046  00F4               	movwf	setDimmerLights_IntrControl@lights
 17370                           
 17371                           ;Dimmer_B1.c: 96: DimmerIntrPointSelect(lights);
 17372  0047  0874               	movf	setDimmerLights_IntrControl@lights,w
 17373  0048  319D  25CC  3180   	fcall	_DimmerIntrPointSelect
 17374                           
 17375                           ;Dimmer_B1.c: 97: if (DimmerLightsIntr->GO == 1) {
 17376  004B  0877               	movf	_DimmerLightsIntr,w
 17377  004C  0086               	movwf	6
 17378  004D  3001               	movlw	1	; select bank2/3
 17379  004E  0087               	movwf	7
 17380  004F  1C01               	btfss	1,0
 17381  0050  289C               	goto	i1l6706
 17382                           
 17383                           ;Dimmer_B1.c: 98: DimmerLightsIntr->Count++;
 17384  0051  3001               	movlw	1
 17385  0052  00F2               	movwf	??_setDimmerLights_IntrControl
 17386  0053  0877               	movf	_DimmerLightsIntr,w
 17387  0054  3E03               	addlw	3
 17388  0055  0086               	movwf	6
 17389  0056  3001               	movlw	1	; select bank2/3
 17390  0057  0087               	movwf	7
 17391  0058  0872               	movf	??_setDimmerLights_IntrControl,w
 17392  0059  0781               	addwf	1,f
 17393                           
 17394                           ;Dimmer_B1.c: 99: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimme
      +                          r->Correction)) {
 17395  005A  0876               	movf	_Dimmer,w
 17396  005B  3E02               	addlw	2
 17397  005C  0086               	movwf	6
 17398  005D  3001               	movlw	1	; select bank2/3
 17399  005E  0087               	movwf	7
 17400  005F  0877               	movf	_DimmerLightsIntr,w
 17401  0060  3E04               	addlw	4
 17402  0061  0084               	movwf	4
 17403  0062  3001               	movlw	1	; select bank2/3
 17404  0063  0085               	movwf	5
 17405  0064  0800               	movf	0,w
 17406  0065  0701               	addwf	1,w
 17407  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 17408  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 17409  0068  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 17410  0069  0877               	movf	_DimmerLightsIntr,w
 17411  006A  3E03               	addlw	3
 17412  006B  0086               	movwf	6
 17413  006C  3001               	movlw	1	; select bank2/3
 17414  006D  0087               	movwf	7
 17415  006E  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17416  006F  3A80               	xorlw	128
 17417  0070  3C80               	sublw	128
 17418  0071  1D03               	skipz
 17419  0072  2875               	goto	u574_25
 17420  0073  0872               	movf	??_setDimmerLights_IntrControl,w
 17421  0074  0201               	subwf	1,w
 17422  0075                     u574_25:	
 17423  0075  1C03               	skipc
 17424  0076  29A0               	goto	i1l6764
 17425                           
 17426                           ;Dimmer_B1.c: 100: DimmerLightsIntr->Count = 0;
 17427  0077  0877               	movf	_DimmerLightsIntr,w
 17428  0078  3E03               	addlw	3
 17429  0079  0086               	movwf	6
 17430  007A  3001               	movlw	1	; select bank2/3
 17431  007B  0087               	movwf	7
 17432  007C  0181               	clrf	1
 17433                           
 17434                           ;Dimmer_B1.c: 101: DimmerLightsIntr->GO = 0;
 17435  007D  0877               	movf	_DimmerLightsIntr,w
 17436  007E  0086               	movwf	6
 17437  007F  3001               	movlw	1	; select bank2/3
 17438  0080  0087               	movwf	7
 17439  0081  1001               	bcf	1,0
 17440                           
 17441                           ;Dimmer_B1.c: 103: if (DimmerLightsIntr->StatusFlag == 1) {
 17442  0082  0877               	movf	_DimmerLightsIntr,w
 17443  0083  0086               	movwf	6
 17444  0084  3001               	movlw	1	; select bank2/3
 17445  0085  0087               	movwf	7
 17446  0086  1F01               	btfss	1,6
 17447  0087  29A0               	goto	i1l6764
 17448                           
 17449                           ;Dimmer_B1.c: 104: DimmerLightsIntr->Flag = 1;
 17450  0088  0877               	movf	_DimmerLightsIntr,w
 17451  0089  3E08               	addlw	8
 17452  008A  0086               	movwf	6
 17453  008B  3001               	movlw	1	; select bank2/3
 17454  008C  0087               	movwf	7
 17455  008D  1401               	bsf	1,0
 17456                           
 17457                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Triac = 1;
 17458  008E  0877               	movf	_DimmerLightsIntr,w
 17459  008F  3E08               	addlw	8
 17460  0090  0086               	movwf	6
 17461  0091  3001               	movlw	1	; select bank2/3
 17462  0092  0087               	movwf	7
 17463  0093  1681               	bsf	1,5
 17464                           
 17465                           ;Dimmer_B1.c: 107: if (lights == 1) {
 17466  0094  0874               	movf	setDimmerLights_IntrControl@lights,w
 17467  0095  3A01               	xorlw	1
 17468  0096  1D03               	skipz
 17469  0097  29A0               	goto	i1l6764
 17470                           
 17471                           ;Dimmer_B1.c: 108: RA7 = 1;
 17472  0098  0020               	movlb	0	; select bank0
 17473  0099  178C               	bsf	12,7	;volatile
 17474                           
 17475                           ;Dimmer_B1.c: 109: RB4=1;
 17476  009A  160D               	bsf	13,4	;volatile
 17477                           
 17478                           ;Dimmer_B1.c: 110: }
 17479                           ;Dimmer_B1.c: 122: }
 17480                           ;Dimmer_B1.c: 123: }
 17481                           ;Dimmer_B1.c: 124: } else {
 17482  009B  29A0               	goto	i1l6764
 17483  009C                     i1l6706:	
 17484                           
 17485                           ;Dimmer_B1.c: 125: if (DimmerLightsIntr->Flag == 1) {
 17486  009C  0877               	movf	_DimmerLightsIntr,w
 17487  009D  3E08               	addlw	8
 17488  009E  0086               	movwf	6
 17489  009F  3001               	movlw	1	; select bank2/3
 17490  00A0  0087               	movwf	7
 17491  00A1  1C01               	btfss	1,0
 17492  00A2  29A0               	goto	i1l6764
 17493                           
 17494                           ;Dimmer_B1.c: 126: DimmerLightsIntr->Flag = 0;
 17495  00A3  0877               	movf	_DimmerLightsIntr,w
 17496  00A4  3E08               	addlw	8
 17497  00A5  0086               	movwf	6
 17498  00A6  3001               	movlw	1	; select bank2/3
 17499  00A7  0087               	movwf	7
 17500  00A8  1001               	bcf	1,0
 17501                           
 17502                           ;Dimmer_B1.c: 127: if (DimmerLightsIntr->Signal == 1) {
 17503  00A9  0877               	movf	_DimmerLightsIntr,w
 17504  00AA  0086               	movwf	6
 17505  00AB  3001               	movlw	1	; select bank2/3
 17506  00AC  0087               	movwf	7
 17507  00AD  1C81               	btfss	1,1
 17508  00AE  29A0               	goto	i1l6764
 17509                           
 17510                           ;Dimmer_B1.c: 128: DimmerLightsIntr->DimmingTime++;
 17511  00AF  3001               	movlw	1
 17512  00B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17513  00B1  0A77               	incf	_DimmerLightsIntr,w
 17514  00B2  0086               	movwf	6
 17515  00B3  3001               	movlw	1	; select bank2/3
 17516  00B4  0087               	movwf	7
 17517  00B5  0872               	movf	??_setDimmerLights_IntrControl,w
 17518  00B6  0781               	addwf	1,f
 17519                           
 17520                           ;Dimmer_B1.c: 129: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17521  00B7  0A77               	incf	_DimmerLightsIntr,w
 17522  00B8  0086               	movwf	6
 17523  00B9  3001               	movlw	1	; select bank2/3
 17524  00BA  0087               	movwf	7
 17525  00BB  0877               	movf	_DimmerLightsIntr,w
 17526  00BC  3E02               	addlw	2
 17527  00BD  0084               	movwf	4
 17528  00BE  3001               	movlw	1	; select bank2/3
 17529  00BF  0085               	movwf	5
 17530  00C0  0800               	movf	0,w
 17531  00C1  0201               	subwf	1,w
 17532  00C2  1C03               	skipc
 17533  00C3  29A0               	goto	i1l6764
 17534                           
 17535                           ;Dimmer_B1.c: 130: DimmerLightsIntr->DimmingTime = 0;
 17536  00C4  0A77               	incf	_DimmerLightsIntr,w
 17537  00C5  0086               	movwf	6
 17538  00C6  3001               	movlw	1	; select bank2/3
 17539  00C7  0087               	movwf	7
 17540  00C8  0181               	clrf	1
 17541                           
 17542                           ;Dimmer_B1.c: 131: if (DimmerLightsIntr->AdjFlag == 1) {
 17543  00C9  0877               	movf	_DimmerLightsIntr,w
 17544  00CA  0086               	movwf	6
 17545  00CB  3001               	movlw	1	; select bank2/3
 17546  00CC  0087               	movwf	7
 17547  00CD  1D81               	btfss	1,3
 17548  00CE  2905               	goto	i1l6732
 17549                           
 17550                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjStatus == 0) {
 17551  00CF  0877               	movf	_DimmerLightsIntr,w
 17552  00D0  0086               	movwf	6
 17553  00D1  3001               	movlw	1	; select bank2/3
 17554  00D2  0087               	movwf	7
 17555  00D3  1A01               	btfsc	1,4
 17556  00D4  28EC               	goto	i1l6726
 17557                           
 17558                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17559  00D5  0877               	movf	_DimmerLightsIntr,w
 17560  00D6  3E04               	addlw	4
 17561  00D7  0086               	movwf	6
 17562  00D8  3001               	movlw	1	; select bank2/3
 17563  00D9  0087               	movwf	7
 17564  00DA  3021               	movlw	33
 17565  00DB  0201               	subwf	1,w
 17566  00DC  1C03               	skipc
 17567  00DD  28E6               	goto	i1l6724
 17568                           
 17569                           ;Dimmer_B1.c: 134: DimmerLightsIntr->DimmingValue--;
 17570  00DE  0877               	movf	_DimmerLightsIntr,w
 17571  00DF  3E04               	addlw	4
 17572  00E0  0086               	movwf	6
 17573  00E1  3001               	movlw	1	; select bank2/3
 17574  00E2  0087               	movwf	7
 17575  00E3  3001               	movlw	1
 17576  00E4  0281               	subwf	1,f
 17577                           
 17578                           ;Dimmer_B1.c: 135: } else {
 17579  00E5  29A0               	goto	i1l6764
 17580  00E6                     i1l6724:	
 17581                           
 17582                           ;Dimmer_B1.c: 136: DimmerLightsIntr->AdjStatus = 1;
 17583  00E6  0877               	movf	_DimmerLightsIntr,w
 17584  00E7  0086               	movwf	6
 17585  00E8  3001               	movlw	1	; select bank2/3
 17586  00E9  0087               	movwf	7
 17587  00EA  1601               	bsf	1,4
 17588                           
 17589                           ;Dimmer_B1.c: 137: }
 17590                           ;Dimmer_B1.c: 138: } else {
 17591  00EB  29A0               	goto	i1l6764
 17592  00EC                     i1l6726:	
 17593                           
 17594                           ;Dimmer_B1.c: 139: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17595  00EC  0877               	movf	_DimmerLightsIntr,w
 17596  00ED  3E04               	addlw	4
 17597  00EE  0086               	movwf	6
 17598  00EF  3001               	movlw	1	; select bank2/3
 17599  00F0  0087               	movwf	7
 17600  00F1  303C               	movlw	60
 17601  00F2  0201               	subwf	1,w
 17602  00F3  1803               	skipnc
 17603  00F4  28FF               	goto	i1l6730
 17604                           
 17605                           ;Dimmer_B1.c: 140: DimmerLightsIntr->DimmingValue++;
 17606  00F5  3001               	movlw	1
 17607  00F6  00F2               	movwf	??_setDimmerLights_IntrControl
 17608  00F7  0877               	movf	_DimmerLightsIntr,w
 17609  00F8  3E04               	addlw	4
 17610  00F9  0086               	movwf	6
 17611  00FA  3001               	movlw	1	; select bank2/3
 17612  00FB  0087               	movwf	7
 17613  00FC  0872               	movf	??_setDimmerLights_IntrControl,w
 17614  00FD  0781               	addwf	1,f
 17615                           
 17616                           ;Dimmer_B1.c: 141: } else {
 17617  00FE  29A0               	goto	i1l6764
 17618  00FF                     i1l6730:	
 17619                           
 17620                           ;Dimmer_B1.c: 142: DimmerLightsIntr->AdjStatus = 0;
 17621  00FF  0877               	movf	_DimmerLightsIntr,w
 17622  0100  0086               	movwf	6
 17623  0101  3001               	movlw	1	; select bank2/3
 17624  0102  0087               	movwf	7
 17625  0103  1201               	bcf	1,4
 17626                           
 17627                           ;Dimmer_B1.c: 143: }
 17628                           ;Dimmer_B1.c: 144: }
 17629                           ;Dimmer_B1.c: 145: } else if (DimmerLightsIntr->AdjRF == 1) {
 17630  0104  29A0               	goto	i1l6764
 17631  0105                     i1l6732:	
 17632  0105  0877               	movf	_DimmerLightsIntr,w
 17633  0106  0086               	movwf	6
 17634  0107  3001               	movlw	1	; select bank2/3
 17635  0108  0087               	movwf	7
 17636  0109  1D01               	btfss	1,2
 17637  010A  294C               	goto	i1l6746
 17638                           
 17639                           ;Dimmer_B1.c: 146: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17640  010B  0877               	movf	_DimmerLightsIntr,w
 17641  010C  3E05               	addlw	5
 17642  010D  0086               	movwf	6
 17643  010E  3001               	movlw	1	; select bank2/3
 17644  010F  0087               	movwf	7
 17645  0110  0877               	movf	_DimmerLightsIntr,w
 17646  0111  3E04               	addlw	4
 17647  0112  0084               	movwf	4
 17648  0113  3001               	movlw	1	; select bank2/3
 17649  0114  0085               	movwf	5
 17650  0115  0800               	movf	0,w
 17651  0116  0201               	subwf	1,w
 17652  0117  1803               	skipnc
 17653  0118  2921               	goto	i1l6738
 17654                           
 17655                           ;Dimmer_B1.c: 147: DimmerLightsIntr->DimmingValue--;
 17656  0119  0877               	movf	_DimmerLightsIntr,w
 17657  011A  3E04               	addlw	4
 17658  011B  0086               	movwf	6
 17659  011C  3001               	movlw	1	; select bank2/3
 17660  011D  0087               	movwf	7
 17661  011E  3001               	movlw	1
 17662  011F  0281               	subwf	1,f
 17663                           
 17664                           ;Dimmer_B1.c: 148: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17665  0120  2938               	goto	i1l6742
 17666  0121                     i1l6738:	
 17667  0121  0877               	movf	_DimmerLightsIntr,w
 17668  0122  3E04               	addlw	4
 17669  0123  0086               	movwf	6
 17670  0124  3001               	movlw	1	; select bank2/3
 17671  0125  0087               	movwf	7
 17672  0126  0877               	movf	_DimmerLightsIntr,w
 17673  0127  3E05               	addlw	5
 17674  0128  0084               	movwf	4
 17675  0129  3001               	movlw	1	; select bank2/3
 17676  012A  0085               	movwf	5
 17677  012B  0800               	movf	0,w
 17678  012C  0201               	subwf	1,w
 17679  012D  1803               	skipnc
 17680  012E  2938               	goto	i1l6742
 17681                           
 17682                           ;Dimmer_B1.c: 149: DimmerLightsIntr->DimmingValue++;
 17683  012F  3001               	movlw	1
 17684  0130  00F2               	movwf	??_setDimmerLights_IntrControl
 17685  0131  0877               	movf	_DimmerLightsIntr,w
 17686  0132  3E04               	addlw	4
 17687  0133  0086               	movwf	6
 17688  0134  3001               	movlw	1	; select bank2/3
 17689  0135  0087               	movwf	7
 17690  0136  0872               	movf	??_setDimmerLights_IntrControl,w
 17691  0137  0781               	addwf	1,f
 17692  0138                     i1l6742:	
 17693                           
 17694                           ;Dimmer_B1.c: 150: }
 17695                           ;Dimmer_B1.c: 151: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17696  0138  0877               	movf	_DimmerLightsIntr,w
 17697  0139  3E05               	addlw	5
 17698  013A  0086               	movwf	6
 17699  013B  3001               	movlw	1	; select bank2/3
 17700  013C  0087               	movwf	7
 17701  013D  0877               	movf	_DimmerLightsIntr,w
 17702  013E  3E04               	addlw	4
 17703  013F  0084               	movwf	4
 17704  0140  3001               	movlw	1	; select bank2/3
 17705  0141  0085               	movwf	5
 17706  0142  0800               	movf	0,w
 17707  0143  0601               	xorwf	1,w
 17708  0144  1D03               	skipz
 17709  0145  29A0               	goto	i1l6764
 17710                           
 17711                           ;Dimmer_B1.c: 152: DimmerLightsIntr->AdjRF = 0;
 17712  0146  0877               	movf	_DimmerLightsIntr,w
 17713  0147  0086               	movwf	6
 17714  0148  3001               	movlw	1	; select bank2/3
 17715  0149  0087               	movwf	7
 17716  014A  1101               	bcf	1,2
 17717  014B  2967               	goto	i1l6752
 17718  014C                     i1l6746:	
 17719                           ;Dimmer_B1.c: 154: }
 17720                           ;Dimmer_B1.c: 155: } else {
 17721                           
 17722                           ;Dimmer_B1.c: 153: DimmerLightsIntr->Signal = 0;
 17723                           
 17724                           
 17725                           ;Dimmer_B1.c: 156: if (DimmerLightsIntr->Status == 1) {
 17726  014C  0877               	movf	_DimmerLightsIntr,w
 17727  014D  0086               	movwf	6
 17728  014E  3001               	movlw	1	; select bank2/3
 17729  014F  0087               	movwf	7
 17730  0150  1E81               	btfss	1,5
 17731  0151  296D               	goto	i1l6754
 17732                           
 17733                           ;Dimmer_B1.c: 157: DimmerLightsIntr->DimmingValue--;
 17734  0152  0877               	movf	_DimmerLightsIntr,w
 17735  0153  3E04               	addlw	4
 17736  0154  0086               	movwf	6
 17737  0155  3001               	movlw	1	; select bank2/3
 17738  0156  0087               	movwf	7
 17739  0157  3001               	movlw	1
 17740  0158  0281               	subwf	1,f
 17741                           
 17742                           ;Dimmer_B1.c: 158: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17743  0159  0877               	movf	_DimmerLightsIntr,w
 17744  015A  3E05               	addlw	5
 17745  015B  0086               	movwf	6
 17746  015C  3001               	movlw	1	; select bank2/3
 17747  015D  0087               	movwf	7
 17748  015E  0877               	movf	_DimmerLightsIntr,w
 17749  015F  3E04               	addlw	4
 17750  0160  0084               	movwf	4
 17751  0161  3001               	movlw	1	; select bank2/3
 17752  0162  0085               	movwf	5
 17753  0163  0800               	movf	0,w
 17754  0164  0201               	subwf	1,w
 17755  0165  1C03               	skipc
 17756  0166  29A0               	goto	i1l6764
 17757  0167                     i1l6752:	
 17758                           
 17759                           ;Dimmer_B1.c: 159: DimmerLightsIntr->Signal = 0;
 17760  0167  0877               	movf	_DimmerLightsIntr,w
 17761  0168  0086               	movwf	6
 17762  0169  3001               	movlw	1	; select bank2/3
 17763  016A  0087               	movwf	7
 17764  016B  1081               	bcf	1,1
 17765                           
 17766                           ;Dimmer_B1.c: 160: }
 17767                           ;Dimmer_B1.c: 161: } else {
 17768  016C  29A0               	goto	i1l6764
 17769  016D                     i1l6754:	
 17770                           
 17771                           ;Dimmer_B1.c: 162: DimmerLightsIntr->DimmingValue++;
 17772  016D  3001               	movlw	1
 17773  016E  00F2               	movwf	??_setDimmerLights_IntrControl
 17774  016F  0877               	movf	_DimmerLightsIntr,w
 17775  0170  3E04               	addlw	4
 17776  0171  0086               	movwf	6
 17777  0172  3001               	movlw	1	; select bank2/3
 17778  0173  0087               	movwf	7
 17779  0174  0872               	movf	??_setDimmerLights_IntrControl,w
 17780  0175  0781               	addwf	1,f
 17781                           
 17782                           ;Dimmer_B1.c: 163: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17783  0176  0877               	movf	_DimmerLightsIntr,w
 17784  0177  3E04               	addlw	4
 17785  0178  0086               	movwf	6
 17786  0179  3001               	movlw	1	; select bank2/3
 17787  017A  0087               	movwf	7
 17788  017B  0877               	movf	_DimmerLightsIntr,w
 17789  017C  3E06               	addlw	6
 17790  017D  0084               	movwf	4
 17791  017E  3001               	movlw	1	; select bank2/3
 17792  017F  0085               	movwf	5
 17793  0180  0800               	movf	0,w
 17794  0181  0201               	subwf	1,w
 17795  0182  1C03               	skipc
 17796  0183  29A0               	goto	i1l6764
 17797                           
 17798                           ;Dimmer_B1.c: 164: DimmerLightsIntr->Signal = 0;
 17799  0184  0877               	movf	_DimmerLightsIntr,w
 17800  0185  0086               	movwf	6
 17801  0186  3001               	movlw	1	; select bank2/3
 17802  0187  0087               	movwf	7
 17803  0188  1081               	bcf	1,1
 17804                           
 17805                           ;Dimmer_B1.c: 165: DimmerLightsIntr->StatusFlag = 0;
 17806  0189  0877               	movf	_DimmerLightsIntr,w
 17807  018A  0086               	movwf	6
 17808  018B  3001               	movlw	1	; select bank2/3
 17809  018C  0087               	movwf	7
 17810  018D  1301               	bcf	1,6
 17811                           
 17812                           ;Dimmer_B1.c: 166: DimmerLightsIntr->Clear = 1;
 17813  018E  0877               	movf	_DimmerLightsIntr,w
 17814  018F  3E09               	addlw	9
 17815  0190  0086               	movwf	6
 17816  0191  3001               	movlw	1	; select bank2/3
 17817  0192  0087               	movwf	7
 17818  0193  1501               	bsf	1,2
 17819                           
 17820                           ;Dimmer_B1.c: 167: Dimmer->Detect = 1;
 17821  0194  0876               	movf	_Dimmer,w
 17822  0195  0086               	movwf	6
 17823  0196  3001               	movlw	1	; select bank2/3
 17824  0197  0087               	movwf	7
 17825  0198  1401               	bsf	1,0
 17826                           
 17827                           ;Dimmer_B1.c: 169: if (lights == 1) {
 17828  0199  0874               	movf	setDimmerLights_IntrControl@lights,w
 17829  019A  3A01               	xorlw	1
 17830  019B  1D03               	skipz
 17831  019C  29A0               	goto	i1l6764
 17832                           
 17833                           ;Dimmer_B1.c: 170: RA3 = 0;
 17834  019D  0020               	movlb	0	; select bank0
 17835  019E  118C               	bcf	12,3	;volatile
 17836                           
 17837                           ;Dimmer_B1.c: 171: RC7=!1;
 17838  019F  138E               	bcf	14,7	;volatile
 17839  01A0                     i1l6764:	
 17840                           ;Dimmer_B1.c: 172: }
 17841                           ;Dimmer_B1.c: 184: ;;
 17842                           
 17843                           
 17844                           ;Dimmer_B1.c: 185: }
 17845                           ;Dimmer_B1.c: 186: }
 17846                           ;Dimmer_B1.c: 187: }
 17847                           ;Dimmer_B1.c: 188: }
 17848                           ;Dimmer_B1.c: 189: }
 17849                           ;Dimmer_B1.c: 190: }
 17850                           ;Dimmer_B1.c: 191: }
 17851                           ;Dimmer_B1.c: 192: if (DimmerLightsIntr->Triac == 1) {
 17852  01A0  0877               	movf	_DimmerLightsIntr,w
 17853  01A1  3E08               	addlw	8
 17854  01A2  0086               	movwf	6
 17855  01A3  3001               	movlw	1	; select bank2/3
 17856  01A4  0087               	movwf	7
 17857  01A5  1E81               	btfss	1,5
 17858  01A6  29CC               	goto	i1l6778
 17859                           
 17860                           ;Dimmer_B1.c: 193: DimmerLightsIntr->TriacTime++;
 17861  01A7  3001               	movlw	1
 17862  01A8  00F2               	movwf	??_setDimmerLights_IntrControl
 17863  01A9  0877               	movf	_DimmerLightsIntr,w
 17864  01AA  3E07               	addlw	7
 17865  01AB  0086               	movwf	6
 17866  01AC  3001               	movlw	1	; select bank2/3
 17867  01AD  0087               	movwf	7
 17868  01AE  0872               	movf	??_setDimmerLights_IntrControl,w
 17869  01AF  0781               	addwf	1,f
 17870                           
 17871                           ;Dimmer_B1.c: 194: if (DimmerLightsIntr->TriacTime >= 5) {
 17872  01B0  0877               	movf	_DimmerLightsIntr,w
 17873  01B1  3E07               	addlw	7
 17874  01B2  0086               	movwf	6
 17875  01B3  3001               	movlw	1	; select bank2/3
 17876  01B4  0087               	movwf	7
 17877  01B5  3005               	movlw	5
 17878  01B6  0201               	subwf	1,w
 17879  01B7  1C03               	skipc
 17880  01B8  29CC               	goto	i1l6778
 17881                           
 17882                           ;Dimmer_B1.c: 195: DimmerLightsIntr->TriacTime = 0;
 17883  01B9  0877               	movf	_DimmerLightsIntr,w
 17884  01BA  3E07               	addlw	7
 17885  01BB  0086               	movwf	6
 17886  01BC  3001               	movlw	1	; select bank2/3
 17887  01BD  0087               	movwf	7
 17888  01BE  0181               	clrf	1
 17889                           
 17890                           ;Dimmer_B1.c: 196: DimmerLightsIntr->Triac = 0;
 17891  01BF  0877               	movf	_DimmerLightsIntr,w
 17892  01C0  3E08               	addlw	8
 17893  01C1  0086               	movwf	6
 17894  01C2  3001               	movlw	1	; select bank2/3
 17895  01C3  0087               	movwf	7
 17896  01C4  1281               	bcf	1,5
 17897                           
 17898                           ;Dimmer_B1.c: 199: if (lights == 1) {
 17899  01C5  0874               	movf	setDimmerLights_IntrControl@lights,w
 17900  01C6  3A01               	xorlw	1
 17901  01C7  1D03               	skipz
 17902  01C8  29CC               	goto	i1l6778
 17903                           
 17904                           ;Dimmer_B1.c: 200: RA7 = 0;
 17905  01C9  0020               	movlb	0	; select bank0
 17906  01CA  138C               	bcf	12,7	;volatile
 17907                           
 17908                           ;Dimmer_B1.c: 201: RB4=0;
 17909  01CB  120D               	bcf	13,4	;volatile
 17910  01CC                     i1l6778:	
 17911                           
 17912                           ;Dimmer_B1.c: 202: }
 17913                           ;Dimmer_B1.c: 214: }
 17914                           ;Dimmer_B1.c: 215: }
 17915                           ;Dimmer_B1.c: 216: if (DimmerLightsIntr->TriacFlag == 1) {
 17916  01CC  0877               	movf	_DimmerLightsIntr,w
 17917  01CD  3E09               	addlw	9
 17918  01CE  0086               	movwf	6
 17919  01CF  3001               	movlw	1	; select bank2/3
 17920  01D0  0087               	movwf	7
 17921  01D1  1E81               	btfss	1,5
 17922  01D2  0008               	return
 17923                           
 17924                           ;Dimmer_B1.c: 217: DimmerLightsIntr->TriacCount++;
 17925  01D3  3001               	movlw	1
 17926  01D4  00F2               	movwf	??_setDimmerLights_IntrControl
 17927  01D5  0877               	movf	_DimmerLightsIntr,w
 17928  01D6  3E0A               	addlw	10
 17929  01D7  0086               	movwf	6
 17930  01D8  3001               	movlw	1	; select bank2/3
 17931  01D9  0087               	movwf	7
 17932  01DA  0872               	movf	??_setDimmerLights_IntrControl,w
 17933  01DB  0781               	addwf	1,f
 17934                           
 17935                           ;Dimmer_B1.c: 218: if (DimmerLightsIntr->TriacCount == 70) {
 17936  01DC  0877               	movf	_DimmerLightsIntr,w
 17937  01DD  3E0A               	addlw	10
 17938  01DE  0086               	movwf	6
 17939  01DF  3001               	movlw	1	; select bank2/3
 17940  01E0  0087               	movwf	7
 17941  01E1  0801               	movf	1,w
 17942  01E2  3A46               	xorlw	70
 17943  01E3  1D03               	skipz
 17944  01E4  0008               	return
 17945                           
 17946                           ;Dimmer_B1.c: 219: DimmerLightsIntr->TriacCount = 0;
 17947  01E5  0877               	movf	_DimmerLightsIntr,w
 17948  01E6  3E0A               	addlw	10
 17949  01E7  0086               	movwf	6
 17950  01E8  3001               	movlw	1	; select bank2/3
 17951  01E9  0087               	movwf	7
 17952  01EA  0181               	clrf	1
 17953                           
 17954                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacFlag = 0;
 17955  01EB  0877               	movf	_DimmerLightsIntr,w
 17956  01EC  3E09               	addlw	9
 17957  01ED  0086               	movwf	6
 17958  01EE  3001               	movlw	1	; select bank2/3
 17959  01EF  0087               	movwf	7
 17960  01F0  1281               	bcf	1,5
 17961  01F1  0008               	return
 17962  01F2                     __end_of_setDimmerLights_IntrControl:	
 17963                           
 17964                           	psect	text129
 17965  1DCC                     __ptext129:	
 17966 ;; *************** function _DimmerIntrPointSelect *****************
 17967 ;; Defined at:
 17968 ;;		line 72 in file "../src/Dimmer_B1.c"
 17969 ;; Parameters:    Size  Location     Type
 17970 ;;  lights          1    wreg     unsigned char 
 17971 ;; Auto vars:     Size  Location     Type
 17972 ;;  lights          1    1[COMMON] unsigned char 
 17973 ;; Return value:  Size  Location     Type
 17974 ;;		None               void
 17975 ;; Registers used:
 17976 ;;		wreg
 17977 ;; Tracked objects:
 17978 ;;		On entry : 0/0
 17979 ;;		On exit  : 0/0
 17980 ;;		Unchanged: 0/0
 17981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17983 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17985 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17986 ;;Total ram usage:        2 bytes
 17987 ;; Hardware stack levels used:    1
 17988 ;; This function calls:
 17989 ;;		Nothing
 17990 ;; This function is called by:
 17991 ;;		_setDimmerLights_IntrControl
 17992 ;; This function uses a non-reentrant model
 17993 ;;
 17994                           
 17995                           
 17996                           ;psect for function _DimmerIntrPointSelect
 17997  1DCC                     _DimmerIntrPointSelect:	
 17998                           
 17999                           ;incstack = 0
 18000                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 18001                           ;DimmerIntrPointSelect@lights stored from wreg
 18002  1DCC  00F1               	movwf	DimmerIntrPointSelect@lights
 18003                           
 18004                           ;Dimmer_B1.c: 74: if (lights == 1) {
 18005  1DCD  0871               	movf	DimmerIntrPointSelect@lights,w
 18006  1DCE  3A01               	xorlw	1
 18007  1DCF  1D03               	skipz
 18008  1DD0  0008               	return
 18009                           
 18010                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 18011  1DD1  30C0               	movlw	_DimmerLights1& (0+255)
 18012  1DD2  00F0               	movwf	??_DimmerIntrPointSelect
 18013  1DD3  0870               	movf	??_DimmerIntrPointSelect,w
 18014  1DD4  00F7               	movwf	_DimmerLightsIntr
 18015  1DD5  0008               	return
 18016  1DD6                     __end_of_DimmerIntrPointSelect:	
 18017                           
 18018                           	psect	text130
 18019  1E6A                     __ptext130:	
 18020 ;; *************** function _IOC_ISR *****************
 18021 ;; Defined at:
 18022 ;;		line 401 in file "../src/MCU_B1.c"
 18023 ;; Parameters:    Size  Location     Type
 18024 ;;		None
 18025 ;; Auto vars:     Size  Location     Type
 18026 ;;		None
 18027 ;; Return value:  Size  Location     Type
 18028 ;;		None               void
 18029 ;; Registers used:
 18030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18031 ;; Tracked objects:
 18032 ;;		On entry : 0/0
 18033 ;;		On exit  : 0/0
 18034 ;;		Unchanged: 0/0
 18035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18040 ;;Total ram usage:        0 bytes
 18041 ;; Hardware stack levels used:    1
 18042 ;; Hardware stack levels required when called:    3
 18043 ;; This function calls:
 18044 ;;		_setDimmerReClock
 18045 ;; This function is called by:
 18046 ;;		_ISR
 18047 ;; This function uses a non-reentrant model
 18048 ;;
 18049                           
 18050                           
 18051                           ;psect for function _IOC_ISR
 18052  1E6A                     _IOC_ISR:	
 18053                           
 18054                           ;MCU_B1.c: 402: if (IOCIE == 1 && IOCBF2 == 1) {
 18055                           
 18056                           ;incstack = 0
 18057                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18058  1E6A  1D8B               	btfss	11,3	;volatile
 18059  1E6B  0008               	return
 18060  1E6C  0027               	movlb	7	; select bank7
 18061  1E6D  1D16               	btfss	22,2	;volatile
 18062  1E6E  0008               	return
 18063                           
 18064                           ;MCU_B1.c: 403: IOCBF2 = 0;
 18065  1E6F  1116               	bcf	22,2	;volatile
 18066                           
 18067                           ;MCU_B1.c: 404: IOCIF = 0;
 18068  1E70  100B               	bcf	11,0	;volatile
 18069                           
 18070                           ;MCU_B1.c: 405: if (myMain.PowerON == 1) {
 18071  1E71  0021               	movlb	1	; select bank1
 18072  1E72  1C20               	btfss	_myMain^(0+128),0
 18073  1E73  0008               	return
 18074                           
 18075                           ;MCU_B1.c: 407: setDimmerReClock();
 18076  1E74  319D  2547         	fcall	_setDimmerReClock
 18077  1E76  0008               	return
 18078  1E77                     __end_of_IOC_ISR:	
 18079                           
 18080                           	psect	text131
 18081  1D47                     __ptext131:	
 18082 ;; *************** function _setDimmerReClock *****************
 18083 ;; Defined at:
 18084 ;;		line 246 in file "../src/MCU_B1.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;		None
 18087 ;; Auto vars:     Size  Location     Type
 18088 ;;		None
 18089 ;; Return value:  Size  Location     Type
 18090 ;;		None               void
 18091 ;; Registers used:
 18092 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18093 ;; Tracked objects:
 18094 ;;		On entry : 0/0
 18095 ;;		On exit  : 0/0
 18096 ;;		Unchanged: 0/0
 18097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18102 ;;Total ram usage:        0 bytes
 18103 ;; Hardware stack levels used:    1
 18104 ;; Hardware stack levels required when called:    2
 18105 ;; This function calls:
 18106 ;;		_setDimmerLights_IntrIOC_GO
 18107 ;; This function is called by:
 18108 ;;		_IOC_ISR
 18109 ;; This function uses a non-reentrant model
 18110 ;;
 18111                           
 18112                           
 18113                           ;psect for function _setDimmerReClock
 18114  1D47                     _setDimmerReClock:	
 18115                           
 18116                           ;MCU_B1.c: 251: setDimmerLights_IntrIOC_GO(1);
 18117                           
 18118                           ;incstack = 0
 18119                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18120  1D47  3001               	movlw	1
 18121  1D48  3192  22E4         	fcall	_setDimmerLights_IntrIOC_GO
 18122  1D4A  0008               	return
 18123  1D4B                     __end_of_setDimmerReClock:	
 18124                           
 18125                           	psect	text132
 18126  12E4                     __ptext132:	
 18127 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 18128 ;; Defined at:
 18129 ;;		line 28 in file "../src/Dimmer_B1.c"
 18130 ;; Parameters:    Size  Location     Type
 18131 ;;  lights          1    wreg     unsigned char 
 18132 ;; Auto vars:     Size  Location     Type
 18133 ;;  lights          1    2[COMMON] unsigned char 
 18134 ;; Return value:  Size  Location     Type
 18135 ;;		None               void
 18136 ;; Registers used:
 18137 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18138 ;; Tracked objects:
 18139 ;;		On entry : 0/0
 18140 ;;		On exit  : 0/0
 18141 ;;		Unchanged: 0/0
 18142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18147 ;;Total ram usage:        1 bytes
 18148 ;; Hardware stack levels used:    1
 18149 ;; Hardware stack levels required when called:    1
 18150 ;; This function calls:
 18151 ;;		_DimmerIntrIOCPointSelect
 18152 ;; This function is called by:
 18153 ;;		_setDimmerReClock
 18154 ;; This function uses a non-reentrant model
 18155 ;;
 18156                           
 18157                           
 18158                           ;psect for function _setDimmerLights_IntrIOC_GO
 18159  12E4                     _setDimmerLights_IntrIOC_GO:	
 18160                           
 18161                           ;incstack = 0
 18162                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 18163                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 18164  12E4  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 18165                           
 18166                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 18167  12E5  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 18168  12E6  319D  25C2  3192   	fcall	_DimmerIntrIOCPointSelect
 18169                           
 18170                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 18171  12E9  0878               	movf	_DimmerLightsIntrIOC,w
 18172  12EA  0086               	movwf	6
 18173  12EB  3001               	movlw	1	; select bank2/3
 18174  12EC  0087               	movwf	7
 18175  12ED  1801               	btfsc	1,0
 18176  12EE  0008               	return
 18177  12EF  0878               	movf	_DimmerLightsIntrIOC,w
 18178  12F0  3E09               	addlw	9
 18179  12F1  0086               	movwf	6
 18180  12F2  3001               	movlw	1	; select bank2/3
 18181  12F3  0087               	movwf	7
 18182  12F4  1A81               	btfsc	1,5
 18183  12F5  0008               	return
 18184                           
 18185                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 18186  12F6  0878               	movf	_DimmerLightsIntrIOC,w
 18187  12F7  0086               	movwf	6
 18188  12F8  3001               	movlw	1	; select bank2/3
 18189  12F9  0087               	movwf	7
 18190  12FA  1401               	bsf	1,0
 18191                           
 18192                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 18193  12FB  0878               	movf	_DimmerLightsIntrIOC,w
 18194  12FC  3E09               	addlw	9
 18195  12FD  0086               	movwf	6
 18196  12FE  3001               	movlw	1	; select bank2/3
 18197  12FF  0087               	movwf	7
 18198  1300  1681               	bsf	1,5
 18199                           
 18200                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 18201  1301  0020               	movlb	0	; select bank0
 18202  1302  1D0D               	btfss	13,2	;volatile
 18203  1303  2B0C               	goto	i1l6356
 18204                           
 18205                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 18206  1304  0876               	movf	_Dimmer,w
 18207  1305  3E02               	addlw	2
 18208  1306  0086               	movwf	6
 18209  1307  3001               	movlw	1	; select bank2/3
 18210  1308  0087               	movwf	7
 18211  1309  0181               	clrf	1
 18212  130A  0A81               	incf	1,f
 18213                           
 18214                           ;Dimmer_B1.c: 37: } else {
 18215  130B  0008               	return
 18216  130C                     i1l6356:	
 18217                           
 18218                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 18219  130C  0876               	movf	_Dimmer,w
 18220  130D  3E02               	addlw	2
 18221  130E  0086               	movwf	6
 18222  130F  3001               	movlw	1	; select bank2/3
 18223  1310  0087               	movwf	7
 18224  1311  0181               	clrf	1
 18225  1312  0008               	return
 18226  1313                     __end_of_setDimmerLights_IntrIOC_GO:	
 18227                           
 18228                           	psect	text133
 18229  1DC2                     __ptext133:	
 18230 ;; *************** function _DimmerIntrIOCPointSelect *****************
 18231 ;; Defined at:
 18232 ;;		line 8 in file "../src/Dimmer_B1.c"
 18233 ;; Parameters:    Size  Location     Type
 18234 ;;  lights          1    wreg     unsigned char 
 18235 ;; Auto vars:     Size  Location     Type
 18236 ;;  lights          1    1[COMMON] unsigned char 
 18237 ;; Return value:  Size  Location     Type
 18238 ;;		None               void
 18239 ;; Registers used:
 18240 ;;		wreg
 18241 ;; Tracked objects:
 18242 ;;		On entry : 0/0
 18243 ;;		On exit  : 0/0
 18244 ;;		Unchanged: 0/0
 18245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18248 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18249 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18250 ;;Total ram usage:        2 bytes
 18251 ;; Hardware stack levels used:    1
 18252 ;; This function calls:
 18253 ;;		Nothing
 18254 ;; This function is called by:
 18255 ;;		_setDimmerLights_IntrIOC_GO
 18256 ;; This function uses a non-reentrant model
 18257 ;;
 18258                           
 18259                           
 18260                           ;psect for function _DimmerIntrIOCPointSelect
 18261  1DC2                     _DimmerIntrIOCPointSelect:	
 18262                           
 18263                           ;incstack = 0
 18264                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 18265                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 18266  1DC2  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 18267                           
 18268                           ;Dimmer_B1.c: 10: if (lights == 1) {
 18269  1DC3  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 18270  1DC4  3A01               	xorlw	1
 18271  1DC5  1D03               	skipz
 18272  1DC6  0008               	return
 18273                           
 18274                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 18275  1DC7  30C0               	movlw	_DimmerLights1& (0+255)
 18276  1DC8  00F0               	movwf	??_DimmerIntrIOCPointSelect
 18277  1DC9  0870               	movf	??_DimmerIntrIOCPointSelect,w
 18278  1DCA  00F8               	movwf	_DimmerLightsIntrIOC
 18279  1DCB  0008               	return
 18280  1DCC                     __end_of_DimmerIntrIOCPointSelect:	
 18281  007E                     btemp	set	126	;btemp
 18282  007E                     pic14e$flags	set	126
 18283  007E                     wtemp	set	126
 18284  007E                     wtemp0	set	126
 18285  0080                     wtemp1	set	128
 18286  0082                     wtemp2	set	130
 18287  0084                     wtemp3	set	132
 18288  0086                     wtemp4	set	134
 18289  0088                     wtemp5	set	136
 18290  007F                     wtemp6	set	127
 18291  007E                     ttemp	set	126
 18292  007E                     ttemp0	set	126
 18293  0081                     ttemp1	set	129
 18294  0084                     ttemp2	set	132
 18295  0087                     ttemp3	set	135
 18296  007F                     ttemp4	set	127
 18297  007E                     ltemp	set	126
 18298  007E                     ltemp0	set	126
 18299  0082                     ltemp1	set	130
 18300  0086                     ltemp2	set	134
 18301  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         189
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     73      78
    BANK1            80      0      79
    BANK2            80      0      77
    BANK3            80      4      60
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK2[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 2
		 -> NULL(NULL[0]), DlySw1(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setLED
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _Mcu_Initialization->_WDT_Set
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  126584
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    2141
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     301
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    9243
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    9243
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    9209
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   28622
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   28622
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0   12665
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0   12271
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1446
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     301
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1525
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1525
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   37975
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   37975
                                             71 BANK0      2     2      0
                  _CC2500_ReadStatus
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   37032
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    2017
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35015
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   14485
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1679
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     444
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     240
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   15160
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   15005
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   14912
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   14850
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    4043
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     371
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    7195
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    7195
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    7161
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      62
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    5385
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     290
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2948
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1618
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1618
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    7832
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   13269
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   13139
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    8848
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    2023
                                              4 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1463
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     130
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   13306
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   13306
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     613
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    8516
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    7430
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     430
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    3214
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     717
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     613
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    2017
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2575
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     620
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     651
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     552
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     110
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_ReadStatus
         _CC2500_ReadByte
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _WDT_Main
     _WDT_Clearing
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     132      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     132      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Oct 28 13:46:46 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                                       l92 17D8  
                                     l94 17EC                                       _RD 0CA8  
                __end_of_CC2500_WriteREG 1160                                       _WR 0CA9  
                           ___awdiv@sign 0026                                       _Sw 006C  
     __end_of_getDimmerLights_StatusFlag 1DE0               _getDimmerLights_StatusFlag 1DD6  
                 __end_of_setDelayOff_GO 0A7D                             ___ftadd@exp1 004A  
                           ___ftadd@exp2 0049                setDimmerLights_Adj@lights 0064  
                   _setDimmerLights_Main 08A4                             ___ftadd@sign 0048  
                                    l102 0843                                      l103 083F  
                                    l104 082D                                      l106 083D  
                                    l322 1F8A                                      l323 1F8B  
                                    l247 0AB6                                      l272 0CB5  
                                    l273 0CF8                                      l366 11F0  
                                    l797 1533                                      _GIE 005F  
                                    _CRC 00D8                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 000D  
                                    _RB1 0069                                      _RA3 0063  
                                    _PF1 00CB                                      _RC0 0070  
                                    _RB2 006A                                      _RA4 0064  
                                    _LED 006B                                      _RC1 0071  
                                    _RB3 006B                                      _RC2 0072  
                                    _RB4 006C                                      _RA6 0066  
                                    _RB5 006D                                      _RA7 0067  
                                    _RC4 0074                                      _RC5 0075  
                                    _RC7 0077                                      _RF1 00BF  
                                    _ISR 0004                                      _WDT 00D6  
        setPowerFault_Exceptions@command 0030                                      _Sw1 01CF  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1F94  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1D2F  
                        __end_of_ADC_Set 1D90                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0DE8                    _setDimmerLights_ERROR 1655  
                  _setDimmerLights_AdjRF 11A4                    _setDimmerLights_AdjGo 1F19  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                        _PowerFault_Main 1D35                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1E77                             ___ftdiv@sign 003D  
                                   l1256 07FE                                     l2304 1ECC  
               ?_DimmerLightsPointSelect 0070                                     l1269 133B  
                                   l1278 15C1                          __end_of_IOC_Set 1E91  
                                   l1920 0478                                     l2609 088F  
                                   l1922 04B8                                     l1914 0444  
                                   l1749 1435                                     l2813 03CC  
                                   l1919 047C                                     l1953 0B59  
                                   l1963 0BAF                                     l5340 09C1  
                                   l5420 03AB                                     l2790 0A02  
                                   l5414 0398                                     l2784 09EB  
                                   l5344 09C8                                     l5432 03DE  
                                   l5416 03A2                                     l5408 0385  
                                   l5520 06F4                                     l5504 06B1  
                                   l1968 13A2                                     l5354 09F0  
                                   l5346 09D2                                     l5426 03BE  
                                   l5418 03A7                                     l1995 146E  
                                   l5356 09F8                                     l5348 09D7  
                                   l5436 03F0                                     l5428 03C8  
                                   l5532 0710                                     l5516 06EC  
                                   l5462 0765                                     l5446 040B  
                                   l5390 035C                                     l5456 074F  
                                   l8200 1517                                     l5528 0708  
                                   l5386 0355                                     l8114 0F92  
                                   l5484 07BF                                     l5476 07A6  
                                   l5548 0F07                                     l9020 0DC2  
                                   l8044 1FF6                                     l8300 0A87  
                                   l5396 036B                                     l8124 0FB4  
                                   l5582 0F6C                                     l5574 0F52  
                                   l5566 0F37                                     l8206 152A  
                                   l8046 1FFA                                     l8160 107F  
                                   l5576 0F5B                                     l5568 0F45  
                                   l8208 152F                                     l9032 0DE0  
                                   l9024 0DD0                                     l8304 0A8D  
                                   l8152 145C                                     l8128 0FCA  
                                   l8162 1082                                     l8410 120C  
                                   l5578 0F5E                                     l8082 0E3C  
                                   l9034 0DE2                                     l8330 0AC9  
                                   l8322 0ABC                                     l5498 069B  
                                   l9114 049D                                     l8332 0ACC  
                                   l8324 0ABF                                     l9116 049F  
                                   l9132 04CD                                     l9220 02A8  
                                   l8166 1088                                     l8422 1150  
                                   l8182 1194                                     l8350 0C91  
                                   l8318 0A9E                                     l9206 026A  
                                   l9230 02DA                                     l8408 1201  
                                   l8416 1147                                     l7800 16F1  
                                   l8176 118B                                     l8352 0C94  
                                   l8336 0AD2                                     l8328 0AC5  
                                   l7720 128A                                     l9144 04EE  
                                   l9056 0437                                     l8418 114A  
                                   l8178 118E                                     l8370 0CAC  
                                   l8282 0B37                                     l9162 1ED7  
                                   l8530 1641                                     l8436 1499  
                                   l9332 0572                                     l8356 0C9A  
                                   l8276 0B1C                                     l9180 0208  
                                   l8358 0C9D                                     l8286 0B40  
                                   l9078 045B                                     l9158 1ED1  
                                   l8526 1635                                     l7672 116B  
                                   l7744 10CE                                     l8384 0CC6  
                                   l8368 0CB2                                     l8552 0B5C  
                                   l8608 173D                                     l9266 0817  
                                   l8482 1323                                     l8386 0CDE  
                                   l8298 0A84                                     l7690 1F5F  
                                   l7922 0A51                                     l8660 1569  
                                   l7748 10D7                                     l8820 14F3  
                                   l7932 0A70                                     l8580 0BA5  
                                   l8564 0B74                                     l8644 0C69  
                                   l9196 023D                    _myMain_Initialization 1EDA  
                                   l8670 1579                                     l7774 16BA  
                                   l7950 096A                                     l8398 0CFA  
                                   l7694 1F65                                     l7926 0A57  
                                   l8574 0B9A                                     l9542 177E  
                                   l8664 156F                                     l7792 16E0  
                                   l7784 16C2                                     l7768 16AF  
                                   l7856 0C0E                                     l8904 15A1  
                                   l8824 14FA                                     l7928 0A64  
                                   l9448 0878                                     l8674 157F  
                                   l8658 1566                                     l7786 16CE  
                                   l7954 0970                                     l9458 0890  
                                   l9538 1773                                     l8668 1576  
                                   l7796 16E9                                     l7980 09A2  
                                   l7964 0980                                     l7972 098C  
                                   l9396 1401                                     l7958 0976  
                                   l7984 09A8                                     l7968 0986  
                                   l8960 0EB7                                     l8936 0E84  
                                   l8880 110A                                     _CFGS 0CAE  
                                   l8786 08CB                                     l8970 0ECE  
                                   l8938 0E8A                                     l8882 110D  
                                   l7988 09AE                                     l8788 08D1  
                                   l7996 13B2                                     l8972 0ED0  
                                   l8798 08F9                                     l8886 1112  
                           __CFG_WDTE$ON 0000                                     l8898 158C  
                                   l8996 0D8E                                     l8998 0D94  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4025 0777                                     u4105 06BD  
                                   u4035 0787                                     u4115 06CD  
                                   u4045 07A7                                     u4055 07B6  
                                   u4215 0F0E                                     u4135 06F5  
                                   u4065 07C0                                     u4145 06FB  
                                   u4245 0F38                                     u4175 0711  
                                   u4185 0717                                     u3715 09F3  
                                   u4275 0F53                                     _PEIE 005E  
                                   u3745 0A09                                     u3675 09CD  
                                   u3925 03AC                                     u3695 09E6  
                                   u3865 0386                                     u3955 03BF  
                                   u3895 0399                                     u7355 1276  
                                   u7445 16C5                                     u9205 0455  
                                   u7550 0BBC                                     u8255 11F6  
                                   u7465 16CF                                     u7475 16D9  
                                   u7555 0BBA                                     u7485 16E1  
                                   u9335 04DE                                     u7795 1FA3  
                                   u9575 080D                                     u9735 13F8  
                                   u9815 089F                                     u9745 1407  
                                   _LWLO 0CAD                                     u9765 122F  
                                   _RFSW 0079                                     u9695 07F5  
                                   u9785 085B                                     u9795 0887  
                                   _RSSI 00DA                                     _WREN 0CAA  
                                   _Buz1 00B3                                     _main 174F  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 1D35  
                    __end_of_DlyOff_Main 0D72                          __end_of_RF_Main 1D3E  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                          __end_of_WDT_Set 1E17  
                                   ltemp 007E            __size_of_setRF_Initialization 000B  
                       _setDimmerReClock 1D47                                     start 0013  
                                   ttemp 007E                                     wtemp 007E  
               _setPowerFault_Exceptions 1410                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 1483                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003              __size_of_setPowerFault_Main 0076  
                                  ??_ISR 0075                             ___fttol@exp1 0058  
                           ___fttol@lval 0054           __size_of_DimmerIntrPointSelect 000A  
                       __end_of_LED_Main 1E5E            __end_of_DimmerIntrPointSelect 1DD6  
                  ?_setDimmerLights_Main 0070                          ?_setDelayOff_GO 002A  
              setPowerFault_Exceptions@i 002F                                    ?_main 01D8  
                        __end_of___awdiv 16F8                          __end_of___ftadd 0423  
                        __end_of___ftdiv 07E1                          __end_of___ftmul 0738  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0F75             setDimmerLights_AdjGo@command 0022  
                                  _IOCBF 0396                                    _IOCBN 0395  
                                  _IOCBP 0394                                    _IOCIE 005B  
                                  _IOCIF 0058                   _setDimmerLights_Switch 1EE9  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _RFSW1 00EE                                    _TMR1H 0017  
                                  _TMR1L 0016                                    _PORTA 000C  
                                  _PORTB 000D                                    _PORTC 000E  
                           ?_setLED_Main 0070                       setRF_Learn@command 0020  
                                  _TRISA 008C                                    _TRISB 008D  
                                  _TRISC 008E                                    _WPUB1 1069  
                                  _WPUB2 106A                  __end_of_Timeout_Counter 1FA9  
                          __CFG_WRT$HALF 0000                                    _Temp1 00E0  
     __end_of_setDimmerLights_IntrIOC_GO 1313               _setDimmerLights_IntrIOC_GO 12E4  
                       __end_of_TMR1_ISR 11EB             __size_of_CC2500_WriteCommand 0019  
                       __end_of_TMR1_Set 1E6A                                    _getAD 10FF  
                          ___awtoft@sign 002D          __end_of_DimmerLights_Exceptions 1542  
          DimmerLights_Exceptions@status 002D              DimmerIntrPointSelect@lights 0071  
                          ___ftpack@sign 0024              __size_of_CC2500_ClearRXFIFO 0004  
                          ??_Buzzer_Main 0020                         __end_of_WDT_Main 1F80  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1F4A                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0BB2  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 08FF                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 17A7                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1D63                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0E68  
                   _setSw_Initialization 1F09                  setOverTemp_Exceptions@i 002F  
                                 ??_main 0069                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0AE2  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000A  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 1D38  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1DF6  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0025                     __end_of_getTemp_Safe 1D98  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0CFE                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                        ?_getPowerFault_AD 0070  
                       ___awdiv@dividend 0022                                ??_WDT_Set 0020  
                       __end_of___awtoft 1182                                   _ANSELA 018C  
                                 _ANSELB 018D                                   _ANSELC 018E  
                       __end_of___ftpack 0A19                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 1EF9                                   i1l6356 130C  
                                 i1l6730 00FF                                   i1l6706 009C  
                                 i1l6724 00E6                                   i1l6732 0105  
                                 i1l6742 0138                                   i1l6726 00EC  
                                 i1l6752 0167                                   i1l6754 016D  
                                 i1l6738 0121                                   i1l6746 014C  
                                 i1l6764 01A0                                   i1l6778 01CC  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                     ??_getPowerFault_AD 0024                                   _OSCCON 0099  
                                 u574_25 0075                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1090  
                                 u697_25 11E5                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1D70  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1FBE  
                                 _Dimmer 0076                                   _DlySw1 016B  
             __end_of_Mcu_Initialization 1F5C                      __end_of_Buzzer_Main 084A  
                                 _Memory 0137                                   _Timer1 00D3  
     __end_of_setDimmerLights_TriggerAdj 1F39               _setDimmerLights_TriggerAdj 1F29  
                                 ___bmul 1F5C            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0026                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00DE                                   _s_data 00DF  
                                 _setLED 095A                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0024                         ___awdiv@quotient 0027  
                                 _setBuz 17A7                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 01F2              _setDimmerLights_IntrControl 0046  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1E0C  
                getPowerFault_AD@channel 0025                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1DA8                          _RfSWPointSelect 1DF6  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0015                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1ECB                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 095A         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1D67    __size_of_setPowerFault_Initialization 0004  
           _setPowerFault_Initialization 1D63                  __end_of__initialization 0042  
            ??_PowerFault_Initialization 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 111F                            __end_of_getAD 111F  
                              ?_TMR1_ISR 0070                                ?_TMR1_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1E46  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0041  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0024  
                              ?_WDT_Main 0070                       __size_of_getBuz_GO 0011  
             __end_of_set_TimeoutCleared 1D70                         ?_PowerFault_Main 0070  
               __end_of_setDimmerReClock 1D4B                       __size_of_getRxData 0069  
                    ?_LED_Initialization 0070                   __end_of_setTemp_Enable 1DB0  
                      ?_CC2500_WriteByte 0070                           ??_setRF_Enable 0020  
                         _DimmerLights11 00D9                     __size_of_setLED_Main 0041  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1D41                       ??_CC2500_WriteByte 0020  
             ??_setPowerFault_Exceptions 002E             setDimmerLights_Switch@lights 0023  
                             __pbssBANK0 0069                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01C0  
                              ?_Fosc_Set 0070                              _Buzzer_Main 0800  
                      ??_setRFSW_Control 0062                        __end_of_Temp_Main 1D47  
                 ?_Dimmer_Initialization 0070                                  ?_IO_Set 0070  
                             ??_LED_Main 0025                            ?_setMemory_GO 0070  
                        __CFG_VCAPEN$OFF 0000                  _DelayOff_Initialization 1D57  
          ?_setPowerFault_Initialization 0070                               _getPF_Safe 1DA0  
                          ??_Switch_Main 0069                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006A                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0004                     __size_of_setRF_Learn 0008  
                     getTemp_Safe@result 0020                              setBuz@count 002C  
                             __pmaintext 174F                      _CC2500_WriteCommand 1077  
                   ?_Temp_Initialization 0070                                  ?___bmul 0020  
       __size_of_DimmerLightsPointSelect 000B                         ??_setDelayOff_GO 002C  
                   __size_of_my_MainTime 005A            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0075                            ?_setTemp_Main 0070  
                             ??_TMR1_Set 0020                               __pintentry 0004  
                 ??_setSw_Initialization 0024                            ?_setSw_Enable 0070  
                     __size_of_setTxData 00BD                  ?_setDimmerLights_Switch 0022  
                   Sw_DimmerAdjFunc@Idle 0024                                  ?_setLED 0022  
                 __size_of_DelayTime_1us 0026                                  _ADC_Set 1D89  
              _PowerFault_Initialization 1D32                                  ?_setBuz 0029  
                              ?___awtoft 0028                                ?___ftpack 0020  
                             _getTemp_AD 13DA                               ??_WDT_Main 0020  
           __end_of_setRF_Initialization 1E22                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 1449  
                __end_of_RfSWPointSelect 1E01                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 1E6A                          ?_setTemp_Enable 0070  
                                _IOC_Set 1E84                     __size_of_setLog_Code 0032  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 07E1  
                      _Flash_Memory_Read 10A9              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 0071                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                                _RF_Data 0120                                  _RF_Main 1D3B  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1E0C          __end_of_setControl_Lights_Table 0B49  
                             ??_Fosc_Set 0020                              ?_TouchPower 0070  
                        _Sw_DimmerOnFunc 16F8                          _setPercentValue 15C9  
                         ??_setMemory_GO 0020                         ?_getPercentValue 0070  
                                _Dimmer1 0168             __end_of_CC2500_FrequencyCabr 1E2E  
                        __size_of_IO_Set 0019                        __end_of_getBuz_GO 1077  
                    ??_Flash_Memory_Main 0026                      ??_Flash_Memory_Read 0020  
                                _VarLED1 0160                                  _VarLED2 0164  
                      __end_of_getRxData 0BB2               __end_of_setPowerFault_Main 0DE8  
               _CC2500_registers_address 1000         __end_of_DimmerIntrIOCPointSelect 1DCC  
                  ??_Temp_Initialization 0020          __end_of_setDimmerLights_Trigger 1F09  
                   ??_setRFSW_AdjControl 0064                             _getTemp_Safe 1D90  
                         ??_setTemp_Main 0031                          __size_of___bmul 0012  
         __end_of_setDimmerLights_Switch 1EF9                                  ___awdiv 16A4  
                                ___ftadd 032D                           ??_setSw_Enable 0022  
                                ___ftdiv 0738                                  ___ftmul 0684  
                                ___fttol 0EEE                      __end_of_Switch_Main 1D6B  
                ??_Buzzer_Initialization 0020                 ??_setOverTemp_Exceptions 002E  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 005E                     setRFSW_AdjControl@sw 0066  
                ??_setDimmerLights_ERROR 0024                          __size_of_setBuz 0059  
                         ??_setSw_Status 0023                                  __ptext1 084A  
                                __ptext2 1DA8                                  __ptext3 1EDA  
                                __ptext4 13DA                                  __ptext5 1211  
                                __ptext6 10FF                                  __ptext7 1F6E  
                                __ptext8 0002                                  __ptext9 1D44  
                ??_setDimmerLights_AdjRF 005F                  ??_setDimmerLights_AdjGo 0023  
              __size_of_CC2500_SIDLEMode 0004                      Sw_DimmerOnFunc@Idle 0062  
                  _DimmerIntrPointSelect 1DCC                             __size_of_ISR 000F  
              __end_of_Flash_Memory_Main 0800                __end_of_Flash_Memory_Read 10C3  
                             _setRF_Main 0423                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1D5B                        _DimmerLights_Main 1D82  
         __size_of_DlyOff_Initialization 000C                    ??_CC2500_WriteCommand 0022  
          __end_of_DlyOff_Initialization 1E3A               __end_of_CC2500_ClearRXFIFO 1D4F  
               ??_setTemp_Initialization 0020               __end_of_CC2500_ClearTXFIFO 1D53  
          DimmerLightsPointSelect@lights 0021                             ?_DlyOff_Main 0070  
                     ?_DimmerLights_Main 0070                                  _product 006D  
                         _LedPointSelect 10C3                      _DelayOffPointSelect 1DE0  
                                clrloop0 1D7D           __size_of_Switch_Initialization 0009  
          __end_of_Switch_Initialization 1DC2                     end_of_initialization 0042  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1238  
                          _DelayTime_1us 11EB                        __end_of_setTxData 0684  
             __end_of_Flash_Memory_Write 1342                                  init_ram 1D76  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1D77  
                             _setSw_Main 01F2                    CC2500_ReadByte@loop_b 0021  
                      _CC2500_ReadStatus 1182                              ?_getPF_Safe 0070  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1F39  
                             getBuz_GO@i 0024                       ?_CC2500_ReadStatus 0070  
                       setRFSW_Status@sw 0023                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0C8D                            _CC2500_TxData 0A7D  
                    ??_CC2500_InitSetREG 0025                     __end_of_setRF_Enable 1EAD  
         ??_setPowerFault_Initialization 0020              ?_setDimmerLights_TriggerAdj 0022  
              __size_of_getPowerFault_AD 0027            __size_of_Flash_Memory_Erasing 000C  
                   ?_DelayOffPointSelect 0070                      _Flash_Memory_Modify 1585  
                _DimmerLights_Exceptions 1501                             __pstringtext 1000  
                    _Flash_Memory_Unlock 1DB0                      ??_CC2500_ReadStatus 0022  
       getDimmerLights_StatusFlag@Status 0020                  CC2500_InitSetREG@loop_c 0028  
                            ?_getTemp_AD 0070                      __size_of_TouchPower 000F  
               setLED_Initialization@led 0024                   setSw_Initialization@sw 0024  
              __end_of_DimmerLights_Main 1D89                       _Mcu_Initialization 1F4A  
               __size_of_CC2500_PowerRST 0043                           ?_DelayOff_Main 0070  
                       ?_RfSWPointSelect 0070                          _setSw_Main$5862 0067  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 10E0  
                __end_of_Sw_DimmerOnFunc 174F                  __end_of_setPercentValue 160F  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 1262  
                    ?_Mcu_Initialization 0070         __end_of_setPowerFault_Exceptions 1449  
                   ?_Flash_Memory_Modify 0070              __size_of_setRF_DimmerLights 006C  
                         ?_DelayTime_1us 0020                      _setDimmerLights_Adj 1483  
                   ?_Flash_Memory_Unlock 0070                __end_of_CC2500_ReadStatus 11A4  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 10A9  
                   _setRF_Initialization 1E17                              _Switch_Main 1D67  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1DEB  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 1FA9  
                   ??_Mcu_Initialization 0021                    ??_DelayOffPointSelect 0020  
                          ?_WDT_Clearing 0070                     ?_setDimmerLights_Adj 0062  
                         __end_of___bmul 1F6E                __size_of_Sw_DimmerAdjFunc 0031  
                   setRF_DimmerLights@on 005D                 _DimmerIntrIOCPointSelect 1DC2  
        __size_of_setOverTemp_Exceptions 0046                        __size_of_TMR1_ISR 0024  
                 ?_DimmerIntrPointSelect 0070                        __size_of_TMR1_Set 000C  
                   __end_of_setMemory_GO 1FE9            __size_of_setDimmerLights_Main 005B  
                         __end_of_setLED 09B8                           __end_of_setBuz 1800  
                   _CC2500_FrequencyCabr 1E22                __size_of_Sw_DimmerOffFunc 006F  
             __size_of_Flash_Memory_Main 001F               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 0F75  
                      __size_of_WDT_Main 0012                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 13A5                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 1FD3                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 10FF          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EEE                     __end_of_setSw_Enable 1ECB  
                           ?_Buzzer_Main 0070                       _set_TimeoutCleared 1D6B  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015C                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0061                      __size_of_getTemp_AD 0036  
                 ?_setLED_Initialization 0070                     __end_of_setSw_Status 1EBC  
                     Sw_DimmerAdjFunc@sw 0025                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                  __size_of_setRFSW_Status 000E  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1D44  
              ??_DimmerLights_Exceptions 002D            setOverTemp_Exceptions@command 0030  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00DB                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00DC  
                            __pdataBANK3 01A0                                 ??_setLED 0023  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1D53  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 13DA  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4841 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                            __pcstackBANK3 01D8  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 0080                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                               ?_WDT_Set 0070                             ??_TouchPower 0020  
               __size_of_PowerFault_Main 0003                     __size_of_DlyOff_Main 0074  
             __size_of_CC2500_ReadStatus 0022                   _setOverTemp_Exceptions 160F  
                      ??_CC2500_WriteREG 0023                            ??_setRF_Learn 0020  
                          _DimmerLights1 01C0                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
                  __size_of_setRF_Enable 000E                          ??_CC2500_RxData 0024  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006D  
                          ??_my_MainTime 002D              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00DD                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                   _setTemp_Initialization 1D3E  
                              _getBuz_GO 1066                         _getPowerFault_AD 1211  
      __size_of_setPowerFault_Exceptions 0039      __end_of_Flash_Memory_Initialization 05C7  
            _Flash_Memory_Initialization 0500                                 ?___awdiv 0020  
              ?_setPowerFault_Exceptions 0070                                __ptext100 1E91  
                              __ptext101 1DF6                                __ptext110 1FA9  
                              __ptext102 1EF9                                __ptext111 1D53  
                              __ptext103 1EE9                                __ptext120 1077  
                              __ptext112 1542                                __ptext104 1DEB  
                              __ptext121 1D6B                                __ptext113 1238  
                              __ptext105 17A7                                __ptext130 1E6A  
                              __ptext122 1F94                                __ptext114 10E0  
                              __ptext106 16A4                                __ptext131 1D47  
                              __ptext123 1F80                                __ptext115 113F  
                              __ptext107 1D57                                __ptext132 12E4  
                              __ptext124 0800                                __ptext116 1E22  
                              __ptext108 1E2E                                __ptext133 1DC2  
                              __ptext125 1D2F                                __ptext117 11EB  
                              __ptext109 1DE0                                 ?___ftadd 003E  
                              __ptext118 1D4F                                __ptext127 11C7  
                              __ptext119 1D4B                                __ptext128 0046  
                              __ptext129 1DCC                                _getRxData 0B49  
                               ?___ftdiv 002E                                 ?___ftmul 002E  
                               ?___fttol 004B                  __end_of_setRFSW_Control 1000  
          __size_of_setSw_Initialization 0010           __size_of_Buzzer_Initialization 0003  
          __end_of_Buzzer_Initialization 1D32                         getPercentValue@i 005C  
                       setPercentValue@i 005A                            ??_setLog_Code 002D  
                     __end_of_TouchPower 1EDA                       _setPowerFault_Main 0D72  
     setDimmerLights_TriggerERROR@lights 0023           __size_of_setDimmerLights_ERROR 004F  
               ?_setDimmerLights_Trigger 0022                          DelayTimejudge@i 0026  
                        DelayTimejudge@j 0027                          DelayTimejudge@k 0028  
                    __size_of_setSw_Main 013B            __end_of_setDimmerLights_ERROR 16A4  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
         __size_of_setDimmerLights_AdjGo 0010            __end_of_setDimmerLights_AdjRF 11C7  
          __end_of_setDimmerLights_AdjGo 1F29                   CC2500_WriteByte@loop_a 0021  
                              _r_address 00DD           __size_of_myMain_Initialization 000F  
           __end_of_CC2500_patable_vaule 1066            __end_of_myMain_Initialization 1EE9  
                    ?_setPowerFault_Main 0070                           __size_of_getAD 0020  
                           _setRF_Enable 1E9F                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1E01                       Sw_DimmerOffFunc@sw 0064  
                    __end_of_setLED_Main 1501                      _DimmerLightsIntrIOC 0078  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1D44  
                      _CC2500_rfSettings 102F                                 _LED_Main 1E52  
                           ??_getPF_Safe 0020                          SwPointSelect@sw 0021  
                              clear_ram0 1D7C                 CC2500_InitPATable@loop_d 0027  
                              _setTxData 05C7      __end_of_DimmerLights_Initialization 1E84  
            _DimmerLights_Initialization 1E77                       _CC2500_ClearRXFIFO 1D4B  
                     _CC2500_ClearTXFIFO 1D4F           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0061                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1DA0                     ??_setPowerFault_Main 0031  
                      ??_Timeout_Counter 0020                               ?_getBuz_GO 0020  
               __size_of_getPercentValue 005B                 setRF_DimmerLights@status 0060  
            __size_of_setRFSW_AdjControl 003A                    __size_of_setMemory_GO 0016  
                     _Flash_Memory_Write 1313                               ?_getRxData 0070  
                               _TMR1_ISR 11C7                   CC2500_InitSetREG@temp1 0026  
                 CC2500_InitSetREG@temp2 0027                                 _TMR1_Set 1E5E  
                       _Sw_DimmerAdjFunc 1342                      ?_CC2500_ClearRXFIFO 0070  
                    ?_CC2500_ClearTXFIFO 0070                      __end_of_my_MainTime 08A4  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0135  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1090  
                 ??_CC2500_FrequencyCabr 0026                                 _WDT_Main 1F6E  
                DlyOff_Initialization@sw 0022                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0035                      ?_Flash_Memory_Write 0070  
                       _Sw_DimmerOffFunc 0C1E                    __size_of_setTemp_Main 0086  
                __size_of_setDelayOff_GO 0064                    __size_of_setSw_Enable 000F  
                               _DelayOff 0069                             setSw_Main@sw 0068  
       setDimmerLights_IntrIOC_GO@lights 0072                       __end_of_getPF_Safe 1DA8  
                       __size_of_IOC_ISR 000D             ?_setDimmerLights_IntrControl 0070  
                       __size_of_IOC_Set 000D             __end_of_Flash_Memory_Erasing 1E46  
                         ?_SwPointSelect 0070                              getAD@adcon0 0023  
                            getAD@adcon1 0020                           setLED_Main@led 0024  
                   __end_of_WDT_Clearing 0004                      __end_of_setLog_Code 13A5  
                  _DlyOff_Initialization 1E2E                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1D5F                         __size_of_WDT_Set 000B  
                  _Switch_Initialization 1DB9                     ??_Flash_Memory_Write 0020  
                      ??_setDimmerLights 0025                           _setRFSW_Status 1E91  
                           _setMemory_GO 1FD3                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 1410                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1F80             Flash_Memory_Initialization@i 005E  
                            ??_Temp_Main 0032                        ??_PowerFault_Main 0032  
                      setRFSW_Control@sw 0063                                setLED@led 0023  
   __end_of_setDimmerLights_TriggerERROR 12B7    __size_of_setDimmerLights_TriggerERROR 002B  
           _setDimmerLights_TriggerERROR 128C                  ??_DimmerIntrPointSelect 0070  
                           _setTemp_Main 0E68                         __size_of___awdiv 0054  
                       __size_of___ftadd 00F6                         ?_setRFSW_Control 0070  
                       __size_of___ftdiv 00A9                             _setSw_Enable 1EBC  
                       __size_of___ftmul 00B4                         __size_of___fttol 0087  
                               ___awtoft 1160                         ??_LedPointSelect 0020  
                               ___ftpack 09B8                             _setSw_Status 1EAD  
                      getTemp_AD@channel 0025                             ??_setRF_Main 0067  
                   CC2500_WriteREG@value 0022                              _setLED_Main 14C0  
                  setRFSW_Status@command 0022               __end_of_setRF_DimmerLights 0C1E  
               ?_DelayOff_Initialization 0070                         setDelayOff_GO@sw 002E  
                               __ptext10 0E68                                 __ptext11 160F  
                               __ptext20 1342                                 __ptext12 1DA0  
                               __ptext21 1F29                                 __ptext13 1D41  
                               __ptext30 0AE2                                 __ptext22 1F19  
                               __ptext14 1D3E                                 __ptext31 0F75  
                               __ptext23 1DB9                                 __ptext15 1D67  
                               __ptext40 032D                                 __ptext32 0A19  
                               __ptext24 1F09                                 __ptext16 01F2  
                               __ptext41 1066                                 __ptext33 1262  
                               __ptext25 1ECB                                 __ptext17 1D98  
                               __ptext50 1410                                 __ptext42 0A7D  
                               __ptext34 1F5C                                 __ptext26 1D3B  
                               __ptext18 16F8                                 __ptext51 1EBC  
                               __ptext43 0C8D                                 __ptext35 1449  
                               __ptext27 0423                                 __ptext19 0C1E  
                               __ptext60 1E0C                                 __ptext52 1E9F  
                               __ptext44 1182                                 __ptext36 13A5  
                               __ptext28 0B49                                 __ptext61 1E5E  
                               __ptext53 1501                                 __ptext45 1FE9  
                               __ptext37 11A4                                 __ptext29 1373  
                               __ptext70 07E1                                 __ptext62 1090  
                               __ptext54 128C                                 __ptext46 1D38  
                               __ptext38 08FF                                 __ptext71 1585  
                               __ptext63 1E84                                 __ptext55 1655  
                               __ptext47 1E17                                 __ptext39 0684  
                               __ptext80 0DE8                                 __ptext72 1E3A  
                               __ptext64 1D5F                                 __ptext56 1D90  
                               __ptext48 1D35                                 __ptext81 095A  
                               __ptext73 0500                                 __ptext65 1D89  
                               __ptext57 1D32                                 __ptext49 0D72  
                               __ptext90 0CFE                                 __ptext82 10C3  
                               __ptext74 1313                                 __ptext66 1E52  
                               __ptext58 1D63                                 __ptext91 05C7  
                               __ptext83 1FBE                                 __ptext75 1DB0  
                               __ptext67 14C0                                 __ptext59 1F4A  
                               __ptext92 1EAD                                 __ptext84 1FD3  
                               __ptext76 10A9                                 __ptext68 1E46  
                               __ptext93 1E01                                 __ptext85 1DD6  
                               __ptext77 1D82                                 __ptext69 1F39  
                               __ptext94 0BB2                                 __ptext86 1E77  
                               __ptext78 08A4                                 __ptext95 15C9  
                               __ptext87 12B7                                 __ptext79 1483  
                               __ptext96 0EEE                                 __ptext88 1D70  
                               __ptext97 0738                                 __ptext89 1D5B  
                               __ptext98 1160                                 __ptext99 09B8  
                               __product 01A0            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 __size_of_RfSWPointSelect 000B  
         __size_of_Dimmer_Initialization 0006                   __end_of_setRFSW_Status 1E9F  
          __end_of_Dimmer_Initialization 1D76             __end_of_setDimmerLights_Main 08FF  
            setDimmerLights_ERROR@lights 0025                             ??_setSw_Main 0065  
                          setLED@command 0022                            __size_of_main 0058  
                            _setRF_Learn 1D98                 __end_of_CC2500_SIDLEMode 1D57  
             setDimmerLights_Main@lights 0066              __end_of_DelayOffPointSelect 1DEB  
             CC2500_WriteCommand@command 0023                       _DimmerLights_Close 1FBE  
               ??_setDimmerLights_Switch 0023                __size_of_setDimmerReClock 0004  
                            getPF_Safe@i 0020                          _CC2500_ReadByte 1FE9  
                            _my_MainTime 084A                       _CC2500_InitPATable 10E0  
    __size_of_getDimmerLights_StatusFlag 000A            setDimmerLights_Trigger@lights 0023  
                     __end_of_setRF_Main 0500                              ??_getBuz_GO 0022  
            __size_of_Mcu_Initialization 0012                     _CC2500_patable_vaule 105E  
                            ??_getRxData 0067                      ?_DimmerLights_Close 0070  
       setDimmerLights_TriggerAdj@lights 0023                                 main@argc 01D8  
          ?_setDimmerLights_TriggerERROR 0022                                 main@argv 01DA  
                    ?_CC2500_InitPATable 0070                          _CC2500_PowerRST 1542  
            __end_of_Flash_Memory_Modify 15C9                        ??_getPercentValue 0059  
                            _setLog_Code 1373              __end_of_Flash_Memory_Unlock 1DB9  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 113F  
                     __end_of_setSw_Main 032D                            _Transceive_OK 03D9  
                 ?_DlyOff_Initialization 0070                  ?_setOverTemp_Exceptions 0070  
                         _DelayTimejudge 1262                              pic14e$flags 007E  
               __end_of_getPowerFault_AD 1238                     ??_DimmerLights_Close 0023  
           ??_setDimmerLights_IntrIOC_GO 0072                                 intlevel1 0000  
                   ??_CC2500_InitPATable 0025                   ?_Switch_Initialization 0070  
                        ?_setRFSW_Status 0022                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 12E4  __size_of_setDimmerLights_Initialization 002D  
         _setDimmerLights_Initialization 12B7              __end_of_setDimmerLights_Adj 14C0  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                        _RF_Initialization 1D38  
   __size_of_setDimmerLights_IntrControl 01AC                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1E3A                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1D5B  
    __size_of_setDimmerLights_IntrIOC_GO 002F                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1D5F                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0A19         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 128C           __end_of_setOverTemp_Exceptions 1655  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 1211  
               __end_of_Sw_DimmerAdjFunc 1373                  __end_of_CC2500_ReadByte 2000  
           __end_of_setSw_Initialization 1F19                          _Timeout_Counter 1F94  
                   getPercentValue@value 005B               ?_PowerFault_Initialization 0070  
             __end_of_LED_Initialization 1E52         __size_of_setDimmerLights_Trigger 0010  
         __end_of_setTemp_Initialization 1D41                 __size_of_Sw_DimmerOnFunc 0057  
               ?_DimmerLights_Exceptions 0070                 __size_of_setPercentValue 0046  
                   setPercentValue@value 0059                __end_of_RF_Initialization 1D3B  
               __end_of_Sw_DimmerOffFunc 0C8D          __size_of_setDimmerLights_Switch 0010  
                      ??_RfSWPointSelect 0020                    __end_of_CC2500_RxData 0CFE  
                  __end_of_CC2500_TxData 0AE2                           ??_getTemp_Safe 0020  
                    setSw_Status@command 0022                  __end_of_CC2500_PowerRST 1585  
