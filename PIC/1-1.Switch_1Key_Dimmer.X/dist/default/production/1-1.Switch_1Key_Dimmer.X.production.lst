

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Oct 22 11:16:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,inline,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,inline,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	intentry,global,class=CODE,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	dabs	1,0x7E,2
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0095                     	;# 
   187  0096                     	;# 
   188  0097                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  0116                     	;# 
   200  0117                     	;# 
   201  011D                     	;# 
   202  018C                     	;# 
   203  018D                     	;# 
   204  018E                     	;# 
   205  0191                     	;# 
   206  0191                     	;# 
   207  0192                     	;# 
   208  0193                     	;# 
   209  0193                     	;# 
   210  0194                     	;# 
   211  0195                     	;# 
   212  0196                     	;# 
   213  0197                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019B                     	;# 
   218  019B                     	;# 
   219  019B                     	;# 
   220  019C                     	;# 
   221  019C                     	;# 
   222  019D                     	;# 
   223  019E                     	;# 
   224  019F                     	;# 
   225  020D                     	;# 
   226  0210                     	;# 
   227  0211                     	;# 
   228  0211                     	;# 
   229  0212                     	;# 
   230  0212                     	;# 
   231  0213                     	;# 
   232  0213                     	;# 
   233  0214                     	;# 
   234  0214                     	;# 
   235  0215                     	;# 
   236  0215                     	;# 
   237  0215                     	;# 
   238  0216                     	;# 
   239  0216                     	;# 
   240  0217                     	;# 
   241  0217                     	;# 
   242  0291                     	;# 
   243  0291                     	;# 
   244  0292                     	;# 
   245  0293                     	;# 
   246  0298                     	;# 
   247  0298                     	;# 
   248  0299                     	;# 
   249  029A                     	;# 
   250  0394                     	;# 
   251  0395                     	;# 
   252  0396                     	;# 
   253  0FE4                     	;# 
   254  0FE5                     	;# 
   255  0FE6                     	;# 
   256  0FE7                     	;# 
   257  0FE8                     	;# 
   258  0FE9                     	;# 
   259  0FEA                     	;# 
   260  0FEB                     	;# 
   261  0FED                     	;# 
   262  0FEE                     	;# 
   263  0FEF                     	;# 
   264  0000                     	;# 
   265  0001                     	;# 
   266  0002                     	;# 
   267  0003                     	;# 
   268  0004                     	;# 
   269  0005                     	;# 
   270  0006                     	;# 
   271  0007                     	;# 
   272  0008                     	;# 
   273  0009                     	;# 
   274  000A                     	;# 
   275  000B                     	;# 
   276  000C                     	;# 
   277  000D                     	;# 
   278  000E                     	;# 
   279  0010                     	;# 
   280  0011                     	;# 
   281  0012                     	;# 
   282  0015                     	;# 
   283  0016                     	;# 
   284  0016                     	;# 
   285  0017                     	;# 
   286  0018                     	;# 
   287  0019                     	;# 
   288  001A                     	;# 
   289  001B                     	;# 
   290  001C                     	;# 
   291  008C                     	;# 
   292  008D                     	;# 
   293  008E                     	;# 
   294  0090                     	;# 
   295  0091                     	;# 
   296  0092                     	;# 
   297  0095                     	;# 
   298  0096                     	;# 
   299  0097                     	;# 
   300  0099                     	;# 
   301  009A                     	;# 
   302  009B                     	;# 
   303  009B                     	;# 
   304  009C                     	;# 
   305  009D                     	;# 
   306  009E                     	;# 
   307  010C                     	;# 
   308  010D                     	;# 
   309  010E                     	;# 
   310  0116                     	;# 
   311  0117                     	;# 
   312  011D                     	;# 
   313  018C                     	;# 
   314  018D                     	;# 
   315  018E                     	;# 
   316  0191                     	;# 
   317  0191                     	;# 
   318  0192                     	;# 
   319  0193                     	;# 
   320  0193                     	;# 
   321  0194                     	;# 
   322  0195                     	;# 
   323  0196                     	;# 
   324  0197                     	;# 
   325  0199                     	;# 
   326  019A                     	;# 
   327  019B                     	;# 
   328  019B                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019C                     	;# 
   333  019D                     	;# 
   334  019E                     	;# 
   335  019F                     	;# 
   336  020D                     	;# 
   337  0210                     	;# 
   338  0211                     	;# 
   339  0211                     	;# 
   340  0212                     	;# 
   341  0212                     	;# 
   342  0213                     	;# 
   343  0213                     	;# 
   344  0214                     	;# 
   345  0214                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0215                     	;# 
   349  0216                     	;# 
   350  0216                     	;# 
   351  0217                     	;# 
   352  0217                     	;# 
   353  0291                     	;# 
   354  0291                     	;# 
   355  0292                     	;# 
   356  0293                     	;# 
   357  0298                     	;# 
   358  0298                     	;# 
   359  0299                     	;# 
   360  029A                     	;# 
   361  0394                     	;# 
   362  0395                     	;# 
   363  0396                     	;# 
   364  0FE4                     	;# 
   365  0FE5                     	;# 
   366  0FE6                     	;# 
   367  0FE7                     	;# 
   368  0FE8                     	;# 
   369  0FE9                     	;# 
   370  0FEA                     	;# 
   371  0FEB                     	;# 
   372  0FED                     	;# 
   373  0FEE                     	;# 
   374  0FEF                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0008                     	;# 
   384  0009                     	;# 
   385  000A                     	;# 
   386  000B                     	;# 
   387  000C                     	;# 
   388  000D                     	;# 
   389  000E                     	;# 
   390  0010                     	;# 
   391  0011                     	;# 
   392  0012                     	;# 
   393  0015                     	;# 
   394  0016                     	;# 
   395  0016                     	;# 
   396  0017                     	;# 
   397  0018                     	;# 
   398  0019                     	;# 
   399  001A                     	;# 
   400  001B                     	;# 
   401  001C                     	;# 
   402  008C                     	;# 
   403  008D                     	;# 
   404  008E                     	;# 
   405  0090                     	;# 
   406  0091                     	;# 
   407  0092                     	;# 
   408  0095                     	;# 
   409  0096                     	;# 
   410  0097                     	;# 
   411  0099                     	;# 
   412  009A                     	;# 
   413  009B                     	;# 
   414  009B                     	;# 
   415  009C                     	;# 
   416  009D                     	;# 
   417  009E                     	;# 
   418  010C                     	;# 
   419  010D                     	;# 
   420  010E                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  011D                     	;# 
   424  018C                     	;# 
   425  018D                     	;# 
   426  018E                     	;# 
   427  0191                     	;# 
   428  0191                     	;# 
   429  0192                     	;# 
   430  0193                     	;# 
   431  0193                     	;# 
   432  0194                     	;# 
   433  0195                     	;# 
   434  0196                     	;# 
   435  0197                     	;# 
   436  0199                     	;# 
   437  019A                     	;# 
   438  019B                     	;# 
   439  019B                     	;# 
   440  019B                     	;# 
   441  019B                     	;# 
   442  019C                     	;# 
   443  019C                     	;# 
   444  019D                     	;# 
   445  019E                     	;# 
   446  019F                     	;# 
   447  020D                     	;# 
   448  0210                     	;# 
   449  0211                     	;# 
   450  0211                     	;# 
   451  0212                     	;# 
   452  0212                     	;# 
   453  0213                     	;# 
   454  0213                     	;# 
   455  0214                     	;# 
   456  0214                     	;# 
   457  0215                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0216                     	;# 
   461  0216                     	;# 
   462  0217                     	;# 
   463  0217                     	;# 
   464  0291                     	;# 
   465  0291                     	;# 
   466  0292                     	;# 
   467  0293                     	;# 
   468  0298                     	;# 
   469  0298                     	;# 
   470  0299                     	;# 
   471  029A                     	;# 
   472  0394                     	;# 
   473  0395                     	;# 
   474  0396                     	;# 
   475  0FE4                     	;# 
   476  0FE5                     	;# 
   477  0FE6                     	;# 
   478  0FE7                     	;# 
   479  0FE8                     	;# 
   480  0FE9                     	;# 
   481  0FEA                     	;# 
   482  0FEB                     	;# 
   483  0FED                     	;# 
   484  0FEE                     	;# 
   485  0FEF                     	;# 
   486  0000                     	;# 
   487  0001                     	;# 
   488  0002                     	;# 
   489  0003                     	;# 
   490  0004                     	;# 
   491  0005                     	;# 
   492  0006                     	;# 
   493  0007                     	;# 
   494  0008                     	;# 
   495  0009                     	;# 
   496  000A                     	;# 
   497  000B                     	;# 
   498  000C                     	;# 
   499  000D                     	;# 
   500  000E                     	;# 
   501  0010                     	;# 
   502  0011                     	;# 
   503  0012                     	;# 
   504  0015                     	;# 
   505  0016                     	;# 
   506  0016                     	;# 
   507  0017                     	;# 
   508  0018                     	;# 
   509  0019                     	;# 
   510  001A                     	;# 
   511  001B                     	;# 
   512  001C                     	;# 
   513  008C                     	;# 
   514  008D                     	;# 
   515  008E                     	;# 
   516  0090                     	;# 
   517  0091                     	;# 
   518  0092                     	;# 
   519  0095                     	;# 
   520  0096                     	;# 
   521  0097                     	;# 
   522  0099                     	;# 
   523  009A                     	;# 
   524  009B                     	;# 
   525  009B                     	;# 
   526  009C                     	;# 
   527  009D                     	;# 
   528  009E                     	;# 
   529  010C                     	;# 
   530  010D                     	;# 
   531  010E                     	;# 
   532  0116                     	;# 
   533  0117                     	;# 
   534  011D                     	;# 
   535  018C                     	;# 
   536  018D                     	;# 
   537  018E                     	;# 
   538  0191                     	;# 
   539  0191                     	;# 
   540  0192                     	;# 
   541  0193                     	;# 
   542  0193                     	;# 
   543  0194                     	;# 
   544  0195                     	;# 
   545  0196                     	;# 
   546  0197                     	;# 
   547  0199                     	;# 
   548  019A                     	;# 
   549  019B                     	;# 
   550  019B                     	;# 
   551  019B                     	;# 
   552  019B                     	;# 
   553  019C                     	;# 
   554  019C                     	;# 
   555  019D                     	;# 
   556  019E                     	;# 
   557  019F                     	;# 
   558  020D                     	;# 
   559  0210                     	;# 
   560  0211                     	;# 
   561  0211                     	;# 
   562  0212                     	;# 
   563  0212                     	;# 
   564  0213                     	;# 
   565  0213                     	;# 
   566  0214                     	;# 
   567  0214                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0291                     	;# 
   576  0291                     	;# 
   577  0292                     	;# 
   578  0293                     	;# 
   579  0298                     	;# 
   580  0298                     	;# 
   581  0299                     	;# 
   582  029A                     	;# 
   583  0394                     	;# 
   584  0395                     	;# 
   585  0396                     	;# 
   586  0FE4                     	;# 
   587  0FE5                     	;# 
   588  0FE6                     	;# 
   589  0FE7                     	;# 
   590  0FE8                     	;# 
   591  0FE9                     	;# 
   592  0FEA                     	;# 
   593  0FEB                     	;# 
   594  0FED                     	;# 
   595  0FEE                     	;# 
   596  0FEF                     	;# 
   597  0000                     	;# 
   598  0001                     	;# 
   599  0002                     	;# 
   600  0003                     	;# 
   601  0004                     	;# 
   602  0005                     	;# 
   603  0006                     	;# 
   604  0007                     	;# 
   605  0008                     	;# 
   606  0009                     	;# 
   607  000A                     	;# 
   608  000B                     	;# 
   609  000C                     	;# 
   610  000D                     	;# 
   611  000E                     	;# 
   612  0010                     	;# 
   613  0011                     	;# 
   614  0012                     	;# 
   615  0015                     	;# 
   616  0016                     	;# 
   617  0016                     	;# 
   618  0017                     	;# 
   619  0018                     	;# 
   620  0019                     	;# 
   621  001A                     	;# 
   622  001B                     	;# 
   623  001C                     	;# 
   624  008C                     	;# 
   625  008D                     	;# 
   626  008E                     	;# 
   627  0090                     	;# 
   628  0091                     	;# 
   629  0092                     	;# 
   630  0095                     	;# 
   631  0096                     	;# 
   632  0097                     	;# 
   633  0099                     	;# 
   634  009A                     	;# 
   635  009B                     	;# 
   636  009B                     	;# 
   637  009C                     	;# 
   638  009D                     	;# 
   639  009E                     	;# 
   640  010C                     	;# 
   641  010D                     	;# 
   642  010E                     	;# 
   643  0116                     	;# 
   644  0117                     	;# 
   645  011D                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  018E                     	;# 
   649  0191                     	;# 
   650  0191                     	;# 
   651  0192                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0197                     	;# 
   658  0199                     	;# 
   659  019A                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019B                     	;# 
   664  019C                     	;# 
   665  019C                     	;# 
   666  019D                     	;# 
   667  019E                     	;# 
   668  019F                     	;# 
   669  020D                     	;# 
   670  0210                     	;# 
   671  0211                     	;# 
   672  0211                     	;# 
   673  0212                     	;# 
   674  0212                     	;# 
   675  0213                     	;# 
   676  0213                     	;# 
   677  0214                     	;# 
   678  0214                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0215                     	;# 
   682  0216                     	;# 
   683  0216                     	;# 
   684  0217                     	;# 
   685  0217                     	;# 
   686  0291                     	;# 
   687  0291                     	;# 
   688  0292                     	;# 
   689  0293                     	;# 
   690  0298                     	;# 
   691  0298                     	;# 
   692  0299                     	;# 
   693  029A                     	;# 
   694  0394                     	;# 
   695  0395                     	;# 
   696  0396                     	;# 
   697  0FE4                     	;# 
   698  0FE5                     	;# 
   699  0FE6                     	;# 
   700  0FE7                     	;# 
   701  0FE8                     	;# 
   702  0FE9                     	;# 
   703  0FEA                     	;# 
   704  0FEB                     	;# 
   705  0FED                     	;# 
   706  0FEE                     	;# 
   707  0FEF                     	;# 
   708  0000                     	;# 
   709  0001                     	;# 
   710  0002                     	;# 
   711  0003                     	;# 
   712  0004                     	;# 
   713  0005                     	;# 
   714  0006                     	;# 
   715  0007                     	;# 
   716  0008                     	;# 
   717  0009                     	;# 
   718  000A                     	;# 
   719  000B                     	;# 
   720  000C                     	;# 
   721  000D                     	;# 
   722  000E                     	;# 
   723  0010                     	;# 
   724  0011                     	;# 
   725  0012                     	;# 
   726  0015                     	;# 
   727  0016                     	;# 
   728  0016                     	;# 
   729  0017                     	;# 
   730  0018                     	;# 
   731  0019                     	;# 
   732  001A                     	;# 
   733  001B                     	;# 
   734  001C                     	;# 
   735  008C                     	;# 
   736  008D                     	;# 
   737  008E                     	;# 
   738  0090                     	;# 
   739  0091                     	;# 
   740  0092                     	;# 
   741  0095                     	;# 
   742  0096                     	;# 
   743  0097                     	;# 
   744  0099                     	;# 
   745  009A                     	;# 
   746  009B                     	;# 
   747  009B                     	;# 
   748  009C                     	;# 
   749  009D                     	;# 
   750  009E                     	;# 
   751  010C                     	;# 
   752  010D                     	;# 
   753  010E                     	;# 
   754  0116                     	;# 
   755  0117                     	;# 
   756  011D                     	;# 
   757  018C                     	;# 
   758  018D                     	;# 
   759  018E                     	;# 
   760  0191                     	;# 
   761  0191                     	;# 
   762  0192                     	;# 
   763  0193                     	;# 
   764  0193                     	;# 
   765  0194                     	;# 
   766  0195                     	;# 
   767  0196                     	;# 
   768  0197                     	;# 
   769  0199                     	;# 
   770  019A                     	;# 
   771  019B                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019B                     	;# 
   775  019C                     	;# 
   776  019C                     	;# 
   777  019D                     	;# 
   778  019E                     	;# 
   779  019F                     	;# 
   780  020D                     	;# 
   781  0210                     	;# 
   782  0211                     	;# 
   783  0211                     	;# 
   784  0212                     	;# 
   785  0212                     	;# 
   786  0213                     	;# 
   787  0213                     	;# 
   788  0214                     	;# 
   789  0214                     	;# 
   790  0215                     	;# 
   791  0215                     	;# 
   792  0215                     	;# 
   793  0216                     	;# 
   794  0216                     	;# 
   795  0217                     	;# 
   796  0217                     	;# 
   797  0291                     	;# 
   798  0291                     	;# 
   799  0292                     	;# 
   800  0293                     	;# 
   801  0298                     	;# 
   802  0298                     	;# 
   803  0299                     	;# 
   804  029A                     	;# 
   805  0394                     	;# 
   806  0395                     	;# 
   807  0396                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0015                     	;# 
   838  0016                     	;# 
   839  0016                     	;# 
   840  0017                     	;# 
   841  0018                     	;# 
   842  0019                     	;# 
   843  001A                     	;# 
   844  001B                     	;# 
   845  001C                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0095                     	;# 
   853  0096                     	;# 
   854  0097                     	;# 
   855  0099                     	;# 
   856  009A                     	;# 
   857  009B                     	;# 
   858  009B                     	;# 
   859  009C                     	;# 
   860  009D                     	;# 
   861  009E                     	;# 
   862  010C                     	;# 
   863  010D                     	;# 
   864  010E                     	;# 
   865  0116                     	;# 
   866  0117                     	;# 
   867  011D                     	;# 
   868  018C                     	;# 
   869  018D                     	;# 
   870  018E                     	;# 
   871  0191                     	;# 
   872  0191                     	;# 
   873  0192                     	;# 
   874  0193                     	;# 
   875  0193                     	;# 
   876  0194                     	;# 
   877  0195                     	;# 
   878  0196                     	;# 
   879  0197                     	;# 
   880  0199                     	;# 
   881  019A                     	;# 
   882  019B                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019C                     	;# 
   887  019C                     	;# 
   888  019D                     	;# 
   889  019E                     	;# 
   890  019F                     	;# 
   891  020D                     	;# 
   892  0210                     	;# 
   893  0211                     	;# 
   894  0211                     	;# 
   895  0212                     	;# 
   896  0212                     	;# 
   897  0213                     	;# 
   898  0213                     	;# 
   899  0214                     	;# 
   900  0214                     	;# 
   901  0215                     	;# 
   902  0215                     	;# 
   903  0215                     	;# 
   904  0216                     	;# 
   905  0216                     	;# 
   906  0217                     	;# 
   907  0217                     	;# 
   908  0291                     	;# 
   909  0291                     	;# 
   910  0292                     	;# 
   911  0293                     	;# 
   912  0298                     	;# 
   913  0298                     	;# 
   914  0299                     	;# 
   915  029A                     	;# 
   916  0394                     	;# 
   917  0395                     	;# 
   918  0396                     	;# 
   919  0FE4                     	;# 
   920  0FE5                     	;# 
   921  0FE6                     	;# 
   922  0FE7                     	;# 
   923  0FE8                     	;# 
   924  0FE9                     	;# 
   925  0FEA                     	;# 
   926  0FEB                     	;# 
   927  0FED                     	;# 
   928  0FEE                     	;# 
   929  0FEF                     	;# 
   930  0000                     	;# 
   931  0001                     	;# 
   932  0002                     	;# 
   933  0003                     	;# 
   934  0004                     	;# 
   935  0005                     	;# 
   936  0006                     	;# 
   937  0007                     	;# 
   938  0008                     	;# 
   939  0009                     	;# 
   940  000A                     	;# 
   941  000B                     	;# 
   942  000C                     	;# 
   943  000D                     	;# 
   944  000E                     	;# 
   945  0010                     	;# 
   946  0011                     	;# 
   947  0012                     	;# 
   948  0015                     	;# 
   949  0016                     	;# 
   950  0016                     	;# 
   951  0017                     	;# 
   952  0018                     	;# 
   953  0019                     	;# 
   954  001A                     	;# 
   955  001B                     	;# 
   956  001C                     	;# 
   957  008C                     	;# 
   958  008D                     	;# 
   959  008E                     	;# 
   960  0090                     	;# 
   961  0091                     	;# 
   962  0092                     	;# 
   963  0095                     	;# 
   964  0096                     	;# 
   965  0097                     	;# 
   966  0099                     	;# 
   967  009A                     	;# 
   968  009B                     	;# 
   969  009B                     	;# 
   970  009C                     	;# 
   971  009D                     	;# 
   972  009E                     	;# 
   973  010C                     	;# 
   974  010D                     	;# 
   975  010E                     	;# 
   976  0116                     	;# 
   977  0117                     	;# 
   978  011D                     	;# 
   979  018C                     	;# 
   980  018D                     	;# 
   981  018E                     	;# 
   982  0191                     	;# 
   983  0191                     	;# 
   984  0192                     	;# 
   985  0193                     	;# 
   986  0193                     	;# 
   987  0194                     	;# 
   988  0195                     	;# 
   989  0196                     	;# 
   990  0197                     	;# 
   991  0199                     	;# 
   992  019A                     	;# 
   993  019B                     	;# 
   994  019B                     	;# 
   995  019B                     	;# 
   996  019B                     	;# 
   997  019C                     	;# 
   998  019C                     	;# 
   999  019D                     	;# 
  1000  019E                     	;# 
  1001  019F                     	;# 
  1002  020D                     	;# 
  1003  0210                     	;# 
  1004  0211                     	;# 
  1005  0211                     	;# 
  1006  0212                     	;# 
  1007  0212                     	;# 
  1008  0213                     	;# 
  1009  0213                     	;# 
  1010  0214                     	;# 
  1011  0214                     	;# 
  1012  0215                     	;# 
  1013  0215                     	;# 
  1014  0215                     	;# 
  1015  0216                     	;# 
  1016  0216                     	;# 
  1017  0217                     	;# 
  1018  0217                     	;# 
  1019  0291                     	;# 
  1020  0291                     	;# 
  1021  0292                     	;# 
  1022  0293                     	;# 
  1023  0298                     	;# 
  1024  0298                     	;# 
  1025  0299                     	;# 
  1026  029A                     	;# 
  1027  0394                     	;# 
  1028  0395                     	;# 
  1029  0396                     	;# 
  1030  0FE4                     	;# 
  1031  0FE5                     	;# 
  1032  0FE6                     	;# 
  1033  0FE7                     	;# 
  1034  0FE8                     	;# 
  1035  0FE9                     	;# 
  1036  0FEA                     	;# 
  1037  0FEB                     	;# 
  1038  0FED                     	;# 
  1039  0FEE                     	;# 
  1040  0FEF                     	;# 
  1041  0000                     	;# 
  1042  0001                     	;# 
  1043  0002                     	;# 
  1044  0003                     	;# 
  1045  0004                     	;# 
  1046  0005                     	;# 
  1047  0006                     	;# 
  1048  0007                     	;# 
  1049  0008                     	;# 
  1050  0009                     	;# 
  1051  000A                     	;# 
  1052  000B                     	;# 
  1053  000C                     	;# 
  1054  000D                     	;# 
  1055  000E                     	;# 
  1056  0010                     	;# 
  1057  0011                     	;# 
  1058  0012                     	;# 
  1059  0015                     	;# 
  1060  0016                     	;# 
  1061  0016                     	;# 
  1062  0017                     	;# 
  1063  0018                     	;# 
  1064  0019                     	;# 
  1065  001A                     	;# 
  1066  001B                     	;# 
  1067  001C                     	;# 
  1068  008C                     	;# 
  1069  008D                     	;# 
  1070  008E                     	;# 
  1071  0090                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  010C                     	;# 
  1085  010D                     	;# 
  1086  010E                     	;# 
  1087  0116                     	;# 
  1088  0117                     	;# 
  1089  011D                     	;# 
  1090  018C                     	;# 
  1091  018D                     	;# 
  1092  018E                     	;# 
  1093  0191                     	;# 
  1094  0191                     	;# 
  1095  0192                     	;# 
  1096  0193                     	;# 
  1097  0193                     	;# 
  1098  0194                     	;# 
  1099  0195                     	;# 
  1100  0196                     	;# 
  1101  0197                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019B                     	;# 
  1107  019B                     	;# 
  1108  019C                     	;# 
  1109  019C                     	;# 
  1110  019D                     	;# 
  1111  019E                     	;# 
  1112  019F                     	;# 
  1113  020D                     	;# 
  1114  0210                     	;# 
  1115  0211                     	;# 
  1116  0211                     	;# 
  1117  0212                     	;# 
  1118  0212                     	;# 
  1119  0213                     	;# 
  1120  0213                     	;# 
  1121  0214                     	;# 
  1122  0214                     	;# 
  1123  0215                     	;# 
  1124  0215                     	;# 
  1125  0215                     	;# 
  1126  0216                     	;# 
  1127  0216                     	;# 
  1128  0217                     	;# 
  1129  0217                     	;# 
  1130  0291                     	;# 
  1131  0291                     	;# 
  1132  0292                     	;# 
  1133  0293                     	;# 
  1134  0298                     	;# 
  1135  0298                     	;# 
  1136  0299                     	;# 
  1137  029A                     	;# 
  1138  0394                     	;# 
  1139  0395                     	;# 
  1140  0396                     	;# 
  1141  0FE4                     	;# 
  1142  0FE5                     	;# 
  1143  0FE6                     	;# 
  1144  0FE7                     	;# 
  1145  0FE8                     	;# 
  1146  0FE9                     	;# 
  1147  0FEA                     	;# 
  1148  0FEB                     	;# 
  1149  0FED                     	;# 
  1150  0FEE                     	;# 
  1151  0FEF                     	;# 
  1152  0000                     	;# 
  1153  0001                     	;# 
  1154  0002                     	;# 
  1155  0003                     	;# 
  1156  0004                     	;# 
  1157  0005                     	;# 
  1158  0006                     	;# 
  1159  0007                     	;# 
  1160  0008                     	;# 
  1161  0009                     	;# 
  1162  000A                     	;# 
  1163  000B                     	;# 
  1164  000C                     	;# 
  1165  000D                     	;# 
  1166  000E                     	;# 
  1167  0010                     	;# 
  1168  0011                     	;# 
  1169  0012                     	;# 
  1170  0015                     	;# 
  1171  0016                     	;# 
  1172  0016                     	;# 
  1173  0017                     	;# 
  1174  0018                     	;# 
  1175  0019                     	;# 
  1176  001A                     	;# 
  1177  001B                     	;# 
  1178  001C                     	;# 
  1179  008C                     	;# 
  1180  008D                     	;# 
  1181  008E                     	;# 
  1182  0090                     	;# 
  1183  0091                     	;# 
  1184  0092                     	;# 
  1185  0095                     	;# 
  1186  0096                     	;# 
  1187  0097                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009B                     	;# 
  1192  009C                     	;# 
  1193  009D                     	;# 
  1194  009E                     	;# 
  1195  010C                     	;# 
  1196  010D                     	;# 
  1197  010E                     	;# 
  1198  0116                     	;# 
  1199  0117                     	;# 
  1200  011D                     	;# 
  1201  018C                     	;# 
  1202  018D                     	;# 
  1203  018E                     	;# 
  1204  0191                     	;# 
  1205  0191                     	;# 
  1206  0192                     	;# 
  1207  0193                     	;# 
  1208  0193                     	;# 
  1209  0194                     	;# 
  1210  0195                     	;# 
  1211  0196                     	;# 
  1212  0197                     	;# 
  1213  0199                     	;# 
  1214  019A                     	;# 
  1215  019B                     	;# 
  1216  019B                     	;# 
  1217  019B                     	;# 
  1218  019B                     	;# 
  1219  019C                     	;# 
  1220  019C                     	;# 
  1221  019D                     	;# 
  1222  019E                     	;# 
  1223  019F                     	;# 
  1224  020D                     	;# 
  1225  0210                     	;# 
  1226  0211                     	;# 
  1227  0211                     	;# 
  1228  0212                     	;# 
  1229  0212                     	;# 
  1230  0213                     	;# 
  1231  0213                     	;# 
  1232  0214                     	;# 
  1233  0214                     	;# 
  1234  0215                     	;# 
  1235  0215                     	;# 
  1236  0215                     	;# 
  1237  0216                     	;# 
  1238  0216                     	;# 
  1239  0217                     	;# 
  1240  0217                     	;# 
  1241  0291                     	;# 
  1242  0291                     	;# 
  1243  0292                     	;# 
  1244  0293                     	;# 
  1245  0298                     	;# 
  1246  0298                     	;# 
  1247  0299                     	;# 
  1248  029A                     	;# 
  1249  0394                     	;# 
  1250  0395                     	;# 
  1251  0396                     	;# 
  1252  0FE4                     	;# 
  1253  0FE5                     	;# 
  1254  0FE6                     	;# 
  1255  0FE7                     	;# 
  1256  0FE8                     	;# 
  1257  0FE9                     	;# 
  1258  0FEA                     	;# 
  1259  0FEB                     	;# 
  1260  0FED                     	;# 
  1261  0FEE                     	;# 
  1262  0FEF                     	;# 
  1263  0000                     	;# 
  1264  0001                     	;# 
  1265  0002                     	;# 
  1266  0003                     	;# 
  1267  0004                     	;# 
  1268  0005                     	;# 
  1269  0006                     	;# 
  1270  0007                     	;# 
  1271  0008                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  0010                     	;# 
  1279  0011                     	;# 
  1280  0012                     	;# 
  1281  0015                     	;# 
  1282  0016                     	;# 
  1283  0016                     	;# 
  1284  0017                     	;# 
  1285  0018                     	;# 
  1286  0019                     	;# 
  1287  001A                     	;# 
  1288  001B                     	;# 
  1289  001C                     	;# 
  1290  008C                     	;# 
  1291  008D                     	;# 
  1292  008E                     	;# 
  1293  0090                     	;# 
  1294  0091                     	;# 
  1295  0092                     	;# 
  1296  0095                     	;# 
  1297  0096                     	;# 
  1298  0097                     	;# 
  1299  0099                     	;# 
  1300  009A                     	;# 
  1301  009B                     	;# 
  1302  009B                     	;# 
  1303  009C                     	;# 
  1304  009D                     	;# 
  1305  009E                     	;# 
  1306  010C                     	;# 
  1307  010D                     	;# 
  1308  010E                     	;# 
  1309  0116                     	;# 
  1310  0117                     	;# 
  1311  011D                     	;# 
  1312  018C                     	;# 
  1313  018D                     	;# 
  1314  018E                     	;# 
  1315  0191                     	;# 
  1316  0191                     	;# 
  1317  0192                     	;# 
  1318  0193                     	;# 
  1319  0193                     	;# 
  1320  0194                     	;# 
  1321  0195                     	;# 
  1322  0196                     	;# 
  1323  0197                     	;# 
  1324  0199                     	;# 
  1325  019A                     	;# 
  1326  019B                     	;# 
  1327  019B                     	;# 
  1328  019B                     	;# 
  1329  019B                     	;# 
  1330  019C                     	;# 
  1331  019C                     	;# 
  1332  019D                     	;# 
  1333  019E                     	;# 
  1334  019F                     	;# 
  1335  020D                     	;# 
  1336  0210                     	;# 
  1337  0211                     	;# 
  1338  0211                     	;# 
  1339  0212                     	;# 
  1340  0212                     	;# 
  1341  0213                     	;# 
  1342  0213                     	;# 
  1343  0214                     	;# 
  1344  0214                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0215                     	;# 
  1348  0216                     	;# 
  1349  0216                     	;# 
  1350  0217                     	;# 
  1351  0217                     	;# 
  1352  0291                     	;# 
  1353  0291                     	;# 
  1354  0292                     	;# 
  1355  0293                     	;# 
  1356  0298                     	;# 
  1357  0298                     	;# 
  1358  0299                     	;# 
  1359  029A                     	;# 
  1360  0394                     	;# 
  1361  0395                     	;# 
  1362  0396                     	;# 
  1363  0FE4                     	;# 
  1364  0FE5                     	;# 
  1365  0FE6                     	;# 
  1366  0FE7                     	;# 
  1367  0FE8                     	;# 
  1368  0FE9                     	;# 
  1369  0FEA                     	;# 
  1370  0FEB                     	;# 
  1371  0FED                     	;# 
  1372  0FEE                     	;# 
  1373  0FEF                     	;# 
  1374  0000                     	;# 
  1375  0001                     	;# 
  1376  0002                     	;# 
  1377  0003                     	;# 
  1378  0004                     	;# 
  1379  0005                     	;# 
  1380  0006                     	;# 
  1381  0007                     	;# 
  1382  0008                     	;# 
  1383  0009                     	;# 
  1384  000A                     	;# 
  1385  000B                     	;# 
  1386  000C                     	;# 
  1387  000D                     	;# 
  1388  000E                     	;# 
  1389  0010                     	;# 
  1390  0011                     	;# 
  1391  0012                     	;# 
  1392  0015                     	;# 
  1393  0016                     	;# 
  1394  0016                     	;# 
  1395  0017                     	;# 
  1396  0018                     	;# 
  1397  0019                     	;# 
  1398  001A                     	;# 
  1399  001B                     	;# 
  1400  001C                     	;# 
  1401  008C                     	;# 
  1402  008D                     	;# 
  1403  008E                     	;# 
  1404  0090                     	;# 
  1405  0091                     	;# 
  1406  0092                     	;# 
  1407  0095                     	;# 
  1408  0096                     	;# 
  1409  0097                     	;# 
  1410  0099                     	;# 
  1411  009A                     	;# 
  1412  009B                     	;# 
  1413  009B                     	;# 
  1414  009C                     	;# 
  1415  009D                     	;# 
  1416  009E                     	;# 
  1417  010C                     	;# 
  1418  010D                     	;# 
  1419  010E                     	;# 
  1420  0116                     	;# 
  1421  0117                     	;# 
  1422  011D                     	;# 
  1423  018C                     	;# 
  1424  018D                     	;# 
  1425  018E                     	;# 
  1426  0191                     	;# 
  1427  0191                     	;# 
  1428  0192                     	;# 
  1429  0193                     	;# 
  1430  0193                     	;# 
  1431  0194                     	;# 
  1432  0195                     	;# 
  1433  0196                     	;# 
  1434  0197                     	;# 
  1435  0199                     	;# 
  1436  019A                     	;# 
  1437  019B                     	;# 
  1438  019B                     	;# 
  1439  019B                     	;# 
  1440  019B                     	;# 
  1441  019C                     	;# 
  1442  019C                     	;# 
  1443  019D                     	;# 
  1444  019E                     	;# 
  1445  019F                     	;# 
  1446  020D                     	;# 
  1447  0210                     	;# 
  1448  0211                     	;# 
  1449  0211                     	;# 
  1450  0212                     	;# 
  1451  0212                     	;# 
  1452  0213                     	;# 
  1453  0213                     	;# 
  1454  0214                     	;# 
  1455  0214                     	;# 
  1456  0215                     	;# 
  1457  0215                     	;# 
  1458  0215                     	;# 
  1459  0216                     	;# 
  1460  0216                     	;# 
  1461  0217                     	;# 
  1462  0217                     	;# 
  1463  0291                     	;# 
  1464  0291                     	;# 
  1465  0292                     	;# 
  1466  0293                     	;# 
  1467  0298                     	;# 
  1468  0298                     	;# 
  1469  0299                     	;# 
  1470  029A                     	;# 
  1471  0394                     	;# 
  1472  0395                     	;# 
  1473  0396                     	;# 
  1474  0FE4                     	;# 
  1475  0FE5                     	;# 
  1476  0FE6                     	;# 
  1477  0FE7                     	;# 
  1478  0FE8                     	;# 
  1479  0FE9                     	;# 
  1480  0FEA                     	;# 
  1481  0FEB                     	;# 
  1482  0FED                     	;# 
  1483  0FEE                     	;# 
  1484  0FEF                     	;# 
  1485  0000                     	;# 
  1486  0001                     	;# 
  1487  0002                     	;# 
  1488  0003                     	;# 
  1489  0004                     	;# 
  1490  0005                     	;# 
  1491  0006                     	;# 
  1492  0007                     	;# 
  1493  0008                     	;# 
  1494  0009                     	;# 
  1495  000A                     	;# 
  1496  000B                     	;# 
  1497  000C                     	;# 
  1498  000D                     	;# 
  1499  000E                     	;# 
  1500  0010                     	;# 
  1501  0011                     	;# 
  1502  0012                     	;# 
  1503  0015                     	;# 
  1504  0016                     	;# 
  1505  0016                     	;# 
  1506  0017                     	;# 
  1507  0018                     	;# 
  1508  0019                     	;# 
  1509  001A                     	;# 
  1510  001B                     	;# 
  1511  001C                     	;# 
  1512  008C                     	;# 
  1513  008D                     	;# 
  1514  008E                     	;# 
  1515  0090                     	;# 
  1516  0091                     	;# 
  1517  0092                     	;# 
  1518  0095                     	;# 
  1519  0096                     	;# 
  1520  0097                     	;# 
  1521  0099                     	;# 
  1522  009A                     	;# 
  1523  009B                     	;# 
  1524  009B                     	;# 
  1525  009C                     	;# 
  1526  009D                     	;# 
  1527  009E                     	;# 
  1528  010C                     	;# 
  1529  010D                     	;# 
  1530  010E                     	;# 
  1531  0116                     	;# 
  1532  0117                     	;# 
  1533  011D                     	;# 
  1534  018C                     	;# 
  1535  018D                     	;# 
  1536  018E                     	;# 
  1537  0191                     	;# 
  1538  0191                     	;# 
  1539  0192                     	;# 
  1540  0193                     	;# 
  1541  0193                     	;# 
  1542  0194                     	;# 
  1543  0195                     	;# 
  1544  0196                     	;# 
  1545  0197                     	;# 
  1546  0199                     	;# 
  1547  019A                     	;# 
  1548  019B                     	;# 
  1549  019B                     	;# 
  1550  019B                     	;# 
  1551  019B                     	;# 
  1552  019C                     	;# 
  1553  019C                     	;# 
  1554  019D                     	;# 
  1555  019E                     	;# 
  1556  019F                     	;# 
  1557  020D                     	;# 
  1558  0210                     	;# 
  1559  0211                     	;# 
  1560  0211                     	;# 
  1561  0212                     	;# 
  1562  0212                     	;# 
  1563  0213                     	;# 
  1564  0213                     	;# 
  1565  0214                     	;# 
  1566  0214                     	;# 
  1567  0215                     	;# 
  1568  0215                     	;# 
  1569  0215                     	;# 
  1570  0216                     	;# 
  1571  0216                     	;# 
  1572  0217                     	;# 
  1573  0217                     	;# 
  1574  0291                     	;# 
  1575  0291                     	;# 
  1576  0292                     	;# 
  1577  0293                     	;# 
  1578  0298                     	;# 
  1579  0298                     	;# 
  1580  0299                     	;# 
  1581  029A                     	;# 
  1582  0394                     	;# 
  1583  0395                     	;# 
  1584  0396                     	;# 
  1585  0FE4                     	;# 
  1586  0FE5                     	;# 
  1587  0FE6                     	;# 
  1588  0FE7                     	;# 
  1589  0FE8                     	;# 
  1590  0FE9                     	;# 
  1591  0FEA                     	;# 
  1592  0FEB                     	;# 
  1593  0FED                     	;# 
  1594  0FEE                     	;# 
  1595  0FEF                     	;# 
  1596  0000                     	;# 
  1597  0001                     	;# 
  1598  0002                     	;# 
  1599  0003                     	;# 
  1600  0004                     	;# 
  1601  0005                     	;# 
  1602  0006                     	;# 
  1603  0007                     	;# 
  1604  0008                     	;# 
  1605  0009                     	;# 
  1606  000A                     	;# 
  1607  000B                     	;# 
  1608  000C                     	;# 
  1609  000D                     	;# 
  1610  000E                     	;# 
  1611  0010                     	;# 
  1612  0011                     	;# 
  1613  0012                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  001A                     	;# 
  1621  001B                     	;# 
  1622  001C                     	;# 
  1623  008C                     	;# 
  1624  008D                     	;# 
  1625  008E                     	;# 
  1626  0090                     	;# 
  1627  0091                     	;# 
  1628  0092                     	;# 
  1629  0095                     	;# 
  1630  0096                     	;# 
  1631  0097                     	;# 
  1632  0099                     	;# 
  1633  009A                     	;# 
  1634  009B                     	;# 
  1635  009B                     	;# 
  1636  009C                     	;# 
  1637  009D                     	;# 
  1638  009E                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0116                     	;# 
  1643  0117                     	;# 
  1644  011D                     	;# 
  1645  018C                     	;# 
  1646  018D                     	;# 
  1647  018E                     	;# 
  1648  0191                     	;# 
  1649  0191                     	;# 
  1650  0192                     	;# 
  1651  0193                     	;# 
  1652  0193                     	;# 
  1653  0194                     	;# 
  1654  0195                     	;# 
  1655  0196                     	;# 
  1656  0197                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019B                     	;# 
  1660  019B                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019C                     	;# 
  1664  019C                     	;# 
  1665  019D                     	;# 
  1666  019E                     	;# 
  1667  019F                     	;# 
  1668  020D                     	;# 
  1669  0210                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0298                     	;# 
  1690  0298                     	;# 
  1691  0299                     	;# 
  1692  029A                     	;# 
  1693  0394                     	;# 
  1694  0395                     	;# 
  1695  0396                     	;# 
  1696  0FE4                     	;# 
  1697  0FE5                     	;# 
  1698  0FE6                     	;# 
  1699  0FE7                     	;# 
  1700  0FE8                     	;# 
  1701  0FE9                     	;# 
  1702  0FEA                     	;# 
  1703  0FEB                     	;# 
  1704  0FED                     	;# 
  1705  0FEE                     	;# 
  1706  0FEF                     	;# 
  1707  0000                     	;# 
  1708  0001                     	;# 
  1709  0002                     	;# 
  1710  0003                     	;# 
  1711  0004                     	;# 
  1712  0005                     	;# 
  1713  0006                     	;# 
  1714  0007                     	;# 
  1715  0008                     	;# 
  1716  0009                     	;# 
  1717  000A                     	;# 
  1718  000B                     	;# 
  1719  000C                     	;# 
  1720  000D                     	;# 
  1721  000E                     	;# 
  1722  0010                     	;# 
  1723  0011                     	;# 
  1724  0012                     	;# 
  1725  0015                     	;# 
  1726  0016                     	;# 
  1727  0016                     	;# 
  1728  0017                     	;# 
  1729  0018                     	;# 
  1730  0019                     	;# 
  1731  001A                     	;# 
  1732  001B                     	;# 
  1733  001C                     	;# 
  1734  008C                     	;# 
  1735  008D                     	;# 
  1736  008E                     	;# 
  1737  0090                     	;# 
  1738  0091                     	;# 
  1739  0092                     	;# 
  1740  0095                     	;# 
  1741  0096                     	;# 
  1742  0097                     	;# 
  1743  0099                     	;# 
  1744  009A                     	;# 
  1745  009B                     	;# 
  1746  009B                     	;# 
  1747  009C                     	;# 
  1748  009D                     	;# 
  1749  009E                     	;# 
  1750  010C                     	;# 
  1751  010D                     	;# 
  1752  010E                     	;# 
  1753  0116                     	;# 
  1754  0117                     	;# 
  1755  011D                     	;# 
  1756  018C                     	;# 
  1757  018D                     	;# 
  1758  018E                     	;# 
  1759  0191                     	;# 
  1760  0191                     	;# 
  1761  0192                     	;# 
  1762  0193                     	;# 
  1763  0193                     	;# 
  1764  0194                     	;# 
  1765  0195                     	;# 
  1766  0196                     	;# 
  1767  0197                     	;# 
  1768  0199                     	;# 
  1769  019A                     	;# 
  1770  019B                     	;# 
  1771  019B                     	;# 
  1772  019B                     	;# 
  1773  019B                     	;# 
  1774  019C                     	;# 
  1775  019C                     	;# 
  1776  019D                     	;# 
  1777  019E                     	;# 
  1778  019F                     	;# 
  1779  020D                     	;# 
  1780  0210                     	;# 
  1781  0211                     	;# 
  1782  0211                     	;# 
  1783  0212                     	;# 
  1784  0212                     	;# 
  1785  0213                     	;# 
  1786  0213                     	;# 
  1787  0214                     	;# 
  1788  0214                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0215                     	;# 
  1792  0216                     	;# 
  1793  0216                     	;# 
  1794  0217                     	;# 
  1795  0217                     	;# 
  1796  0291                     	;# 
  1797  0291                     	;# 
  1798  0292                     	;# 
  1799  0293                     	;# 
  1800  0298                     	;# 
  1801  0298                     	;# 
  1802  0299                     	;# 
  1803  029A                     	;# 
  1804  0394                     	;# 
  1805  0395                     	;# 
  1806  0396                     	;# 
  1807  0FE4                     	;# 
  1808  0FE5                     	;# 
  1809  0FE6                     	;# 
  1810  0FE7                     	;# 
  1811  0FE8                     	;# 
  1812  0FE9                     	;# 
  1813  0FEA                     	;# 
  1814  0FEB                     	;# 
  1815  0FED                     	;# 
  1816  0FEE                     	;# 
  1817  0FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0011                     	;# 
  1835  0012                     	;# 
  1836  0015                     	;# 
  1837  0016                     	;# 
  1838  0016                     	;# 
  1839  0017                     	;# 
  1840  0018                     	;# 
  1841  0019                     	;# 
  1842  001A                     	;# 
  1843  001B                     	;# 
  1844  001C                     	;# 
  1845  008C                     	;# 
  1846  008D                     	;# 
  1847  008E                     	;# 
  1848  0090                     	;# 
  1849  0091                     	;# 
  1850  0092                     	;# 
  1851  0095                     	;# 
  1852  0096                     	;# 
  1853  0097                     	;# 
  1854  0099                     	;# 
  1855  009A                     	;# 
  1856  009B                     	;# 
  1857  009B                     	;# 
  1858  009C                     	;# 
  1859  009D                     	;# 
  1860  009E                     	;# 
  1861  010C                     	;# 
  1862  010D                     	;# 
  1863  010E                     	;# 
  1864  0116                     	;# 
  1865  0117                     	;# 
  1866  011D                     	;# 
  1867  018C                     	;# 
  1868  018D                     	;# 
  1869  018E                     	;# 
  1870  0191                     	;# 
  1871  0191                     	;# 
  1872  0192                     	;# 
  1873  0193                     	;# 
  1874  0193                     	;# 
  1875  0194                     	;# 
  1876  0195                     	;# 
  1877  0196                     	;# 
  1878  0197                     	;# 
  1879  0199                     	;# 
  1880  019A                     	;# 
  1881  019B                     	;# 
  1882  019B                     	;# 
  1883  019B                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  019C                     	;# 
  1887  019D                     	;# 
  1888  019E                     	;# 
  1889  019F                     	;# 
  1890  020D                     	;# 
  1891  0210                     	;# 
  1892  0211                     	;# 
  1893  0211                     	;# 
  1894  0212                     	;# 
  1895  0212                     	;# 
  1896  0213                     	;# 
  1897  0213                     	;# 
  1898  0214                     	;# 
  1899  0214                     	;# 
  1900  0215                     	;# 
  1901  0215                     	;# 
  1902  0215                     	;# 
  1903  0216                     	;# 
  1904  0216                     	;# 
  1905  0217                     	;# 
  1906  0217                     	;# 
  1907  0291                     	;# 
  1908  0291                     	;# 
  1909  0292                     	;# 
  1910  0293                     	;# 
  1911  0298                     	;# 
  1912  0298                     	;# 
  1913  0299                     	;# 
  1914  029A                     	;# 
  1915  0394                     	;# 
  1916  0395                     	;# 
  1917  0396                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  001A                     	;# 
  1954  001B                     	;# 
  1955  001C                     	;# 
  1956  008C                     	;# 
  1957  008D                     	;# 
  1958  008E                     	;# 
  1959  0090                     	;# 
  1960  0091                     	;# 
  1961  0092                     	;# 
  1962  0095                     	;# 
  1963  0096                     	;# 
  1964  0097                     	;# 
  1965  0099                     	;# 
  1966  009A                     	;# 
  1967  009B                     	;# 
  1968  009B                     	;# 
  1969  009C                     	;# 
  1970  009D                     	;# 
  1971  009E                     	;# 
  1972  010C                     	;# 
  1973  010D                     	;# 
  1974  010E                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  011D                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0191                     	;# 
  1982  0191                     	;# 
  1983  0192                     	;# 
  1984  0193                     	;# 
  1985  0193                     	;# 
  1986  0194                     	;# 
  1987  0195                     	;# 
  1988  0196                     	;# 
  1989  0197                     	;# 
  1990  0199                     	;# 
  1991  019A                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019F                     	;# 
  2001  020D                     	;# 
  2002  0210                     	;# 
  2003  0211                     	;# 
  2004  0211                     	;# 
  2005  0212                     	;# 
  2006  0212                     	;# 
  2007  0213                     	;# 
  2008  0213                     	;# 
  2009  0214                     	;# 
  2010  0214                     	;# 
  2011  0215                     	;# 
  2012  0215                     	;# 
  2013  0215                     	;# 
  2014  0216                     	;# 
  2015  0216                     	;# 
  2016  0217                     	;# 
  2017  0217                     	;# 
  2018  0291                     	;# 
  2019  0291                     	;# 
  2020  0292                     	;# 
  2021  0293                     	;# 
  2022  0298                     	;# 
  2023  0298                     	;# 
  2024  0299                     	;# 
  2025  029A                     	;# 
  2026  0394                     	;# 
  2027  0395                     	;# 
  2028  0396                     	;# 
  2029  0FE4                     	;# 
  2030  0FE5                     	;# 
  2031  0FE6                     	;# 
  2032  0FE7                     	;# 
  2033  0FE8                     	;# 
  2034  0FE9                     	;# 
  2035  0FEA                     	;# 
  2036  0FEB                     	;# 
  2037  0FED                     	;# 
  2038  0FEE                     	;# 
  2039  0FEF                     	;# 
  2040                           
  2041                           	psect	idataBANK3
  2042  11DF                     __pidataBANK3:	
  2043                           
  2044                           ;initializer for __product
  2045  11DF  3463               	retlw	99
  2046  11E0  3402               	retlw	2
  2047  11E1  3400               	retlw	0
  2048  11E2  3400               	retlw	0
  2049  11E3  3400               	retlw	0
  2050  11E4  3400               	retlw	0
  2051  11E5  3400               	retlw	0
  2052  11E6  3400               	retlw	0
  2053  11E7  3400               	retlw	0
  2054  11E8  3400               	retlw	0
  2055  11E9  3400               	retlw	0
  2056  11EA  3400               	retlw	0
  2057  11EB  34FF               	retlw	255
  2058  11EC  34FF               	retlw	255
  2059  11ED  34FF               	retlw	255
  2060  11EE  3400               	retlw	0
  2061  11EF  3400               	retlw	0
  2062  11F0  3400               	retlw	0
  2063  11F1  3400               	retlw	0
  2064  11F2  3400               	retlw	0
  2065  11F3  3400               	retlw	0
  2066  11F4  3400               	retlw	0
  2067  11F5  3400               	retlw	0
  2068  11F6  3400               	retlw	0
  2069  11F7  3400               	retlw	0
  2070  11F8  3400               	retlw	0
  2071  11F9  3400               	retlw	0
  2072  11FA  3400               	retlw	0
  2073  11FB  3400               	retlw	0
  2074  11FC  3400               	retlw	0
  2075  11FD  3400               	retlw	0
  2076  11FE  3400               	retlw	0
  2077                           
  2078                           	psect	stringtext
  2079  1000                     __pstringtext:	
  2080  1000                     _CC2500_registers_address:	
  2081  1000  3403               	retlw	3
  2082  1001  3416               	retlw	22
  2083  1002  3417               	retlw	23
  2084  1003  341E               	retlw	30
  2085  1004  341F               	retlw	31
  2086  1005  3420               	retlw	32
  2087  1006  342A               	retlw	42
  2088  1007  342B               	retlw	43
  2089  1008  340B               	retlw	11
  2090  1009  340C               	retlw	12
  2091  100A  340D               	retlw	13
  2092  100B  340E               	retlw	14
  2093  100C  340F               	retlw	15
  2094  100D  3410               	retlw	16
  2095  100E  3411               	retlw	17
  2096  100F  3412               	retlw	18
  2097  1010  3413               	retlw	19
  2098  1011  3414               	retlw	20
  2099  1012  340A               	retlw	10
  2100  1013  3415               	retlw	21
  2101  1014  3421               	retlw	33
  2102  1015  3422               	retlw	34
  2103  1016  3418               	retlw	24
  2104  1017  3419               	retlw	25
  2105  1018  341A               	retlw	26
  2106  1019  341B               	retlw	27
  2107  101A  341C               	retlw	28
  2108  101B  341D               	retlw	29
  2109  101C  3423               	retlw	35
  2110  101D  3424               	retlw	36
  2111  101E  3425               	retlw	37
  2112  101F  3426               	retlw	38
  2113  1020  3429               	retlw	41
  2114  1021  342C               	retlw	44
  2115  1022  342D               	retlw	45
  2116  1023  342E               	retlw	46
  2117  1024  3400               	retlw	0
  2118  1025  3401               	retlw	1
  2119  1026  3402               	retlw	2
  2120  1027  3407               	retlw	7
  2121  1028  3408               	retlw	8
  2122  1029  3409               	retlw	9
  2123  102A  3406               	retlw	6
  2124  102B  3404               	retlw	4
  2125  102C  3405               	retlw	5
  2126  102D  3427               	retlw	39
  2127  102E  3428               	retlw	40
  2128  102F                     __end_of_CC2500_registers_address:	
  2129  102F                     _CC2500_rfSettings:	
  2130  102F  3407               	retlw	7
  2131  1030  3407               	retlw	7
  2132  1031  3430               	retlw	48
  2133  1032  3487               	retlw	135
  2134  1033  346B               	retlw	107
  2135  1034  34F8               	retlw	248
  2136  1035  347F               	retlw	127
  2137  1036  343F               	retlw	63
  2138  1037  3409               	retlw	9
  2139  1038  3400               	retlw	0
  2140  1039  345C               	retlw	92
  2141  103A  34A7               	retlw	167
  2142  103B  3462               	retlw	98
  2143  103C  3486               	retlw	134
  2144  103D  3483               	retlw	131
  2145  103E  3403               	retlw	3
  2146  103F  3422               	retlw	34
  2147  1040  34F8               	retlw	248
  2148  1041  3400               	retlw	0
  2149  1042  3444               	retlw	68
  2150  1043  34B6               	retlw	182
  2151  1044  3410               	retlw	16
  2152  1045  3418               	retlw	24
  2153  1046  341D               	retlw	29
  2154  1047  341C               	retlw	28
  2155  1048  34C7               	retlw	199
  2156  1049  3400               	retlw	0
  2157  104A  34B2               	retlw	178
  2158  104B  34EA               	retlw	234
  2159  104C  340A               	retlw	10
  2160  104D  3400               	retlw	0
  2161  104E  3411               	retlw	17
  2162  104F  3459               	retlw	89
  2163  1050  3488               	retlw	136
  2164  1051  3431               	retlw	49
  2165  1052  340B               	retlw	11
  2166  1053  342F               	retlw	47
  2167  1054  342E               	retlw	46
  2168  1055  3406               	retlw	6
  2169  1056  3404               	retlw	4
  2170  1057  3405               	retlw	5
  2171  1058  3400               	retlw	0
  2172  1059  3430               	retlw	48
  2173  105A  34D3               	retlw	211
  2174  105B  3491               	retlw	145
  2175  105C  3441               	retlw	65
  2176  105D  3400               	retlw	0
  2177  105E                     __end_of_CC2500_rfSettings:	
  2178  105E                     _CC2500_patable_vaule:	
  2179  105E  34FE               	retlw	254
  2180  105F  34FE               	retlw	254
  2181  1060  34FE               	retlw	254
  2182  1061  34FE               	retlw	254
  2183  1062  34FE               	retlw	254
  2184  1063  34FE               	retlw	254
  2185  1064  34FE               	retlw	254
  2186  1065  34FE               	retlw	254
  2187  1066                     __end_of_CC2500_patable_vaule:	
  2188                           
  2189                           	psect	nvBANK0
  2190  006E                     __pnvBANK0:	
  2191  006E                     _product:	
  2192  006E                     	ds	1
  2193  000C                     _PORTA	set	12
  2194  000D                     _PORTB	set	13
  2195  000E                     _PORTC	set	14
  2196  0015                     _TMR0	set	21
  2197  005F                     _GIE	set	95
  2198  005B                     _IOCIE	set	91
  2199  0058                     _IOCIF	set	88
  2200  005E                     _PEIE	set	94
  2201  0060                     _RA0	set	96
  2202  0063                     _RA3	set	99
  2203  0064                     _RA4	set	100
  2204  0066                     _RA6	set	102
  2205  0067                     _RA7	set	103
  2206  0068                     _RB0	set	104
  2207  0069                     _RB1	set	105
  2208  006A                     _RB2	set	106
  2209  006B                     _RB3	set	107
  2210  006C                     _RB4	set	108
  2211  006D                     _RB5	set	109
  2212  0070                     _RC0	set	112
  2213  0071                     _RC1	set	113
  2214  0072                     _RC2	set	114
  2215  0074                     _RC4	set	116
  2216  0075                     _RC5	set	117
  2217  0077                     _RC7	set	119
  2218  005D                     _TMR0IE	set	93
  2219  005A                     _TMR0IF	set	90
  2220  009D                     _ADCON0	set	157
  2221  009E                     _ADCON1	set	158
  2222  009C                     _ADRESH	set	156
  2223  009B                     _ADRESL	set	155
  2224  0095                     _OPTION_REG	set	149
  2225  0099                     _OSCCON	set	153
  2226  008C                     _TRISA	set	140
  2227  008D                     _TRISB	set	141
  2228  008E                     _TRISC	set	142
  2229  04E9                     _GO_nDONE	set	1257
  2230  0117                     _FVRCON	set	279
  2231  010C                     _LATA	set	268
  2232  010D                     _LATB	set	269
  2233  010E                     _LATC	set	270
  2234  018C                     _ANSELA	set	396
  2235  018D                     _ANSELB	set	397
  2236  018E                     _ANSELC	set	398
  2237  0192                     _PMADRH	set	402
  2238  0191                     _PMADRL	set	401
  2239  0196                     _PMCON2	set	406
  2240  0194                     _PMDATH	set	404
  2241  0193                     _PMDATL	set	403
  2242  0CAE                     _CFGS	set	3246
  2243  0CAC                     _FREE	set	3244
  2244  0CAD                     _LWLO	set	3245
  2245  0CA8                     _RD	set	3240
  2246  0CA9                     _WR	set	3241
  2247  0CAA                     _WREN	set	3242
  2248  1069                     _WPUB1	set	4201
  2249  106A                     _WPUB2	set	4202
  2250  0396                     _IOCBF	set	918
  2251  0395                     _IOCBN	set	917
  2252  0394                     _IOCBP	set	916
  2253  1CB2                     _IOCBF2	set	7346
  2254                           
  2255                           ; #config settings
  2256  0000                     
  2257                           	psect	cinit
  2258  0015                     start_initialization:	
  2259  0015                     __initialization:	
  2260                           
  2261                           ; Clear objects allocated to BITCOMMON
  2262  0015  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2263                           
  2264                           ; Clear objects allocated to COMMON
  2265  0016  01F6               	clrf	__pbssCOMMON& (0+127)
  2266  0017  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  2267  0018  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  2268  0019  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  2269  001A  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  2270                           
  2271                           ; Clear objects allocated to BANK0
  2272  001B  01E9               	clrf	__pbssBANK0& (0+127)
  2273  001C  01EA               	clrf	(__pbssBANK0+1)& (0+127)
  2274  001D  01EB               	clrf	(__pbssBANK0+2)& (0+127)
  2275  001E  01EC               	clrf	(__pbssBANK0+3)& (0+127)
  2276  001F  01ED               	clrf	(__pbssBANK0+4)& (0+127)
  2277                           
  2278                           ; Clear objects allocated to BANK1
  2279  0020  30A0               	movlw	low __pbssBANK1
  2280  0021  0084               	movwf	4
  2281  0022  3000               	movlw	high __pbssBANK1
  2282  0023  0085               	movwf	5
  2283  0024  304F               	movlw	79
  2284  0025  319E  2638  3180   	fcall	clear_ram0
  2285                           
  2286                           ; Clear objects allocated to BANK2
  2287  0028  3020               	movlw	low __pbssBANK2
  2288  0029  0084               	movwf	4
  2289  002A  3001               	movlw	high __pbssBANK2
  2290  002B  0085               	movwf	5
  2291  002C  304B               	movlw	75
  2292  002D  319E  2638  3180   	fcall	clear_ram0
  2293                           
  2294                           ; Clear objects allocated to BANK3
  2295  0030  30C0               	movlw	low __pbssBANK3
  2296  0031  0084               	movwf	4
  2297  0032  3001               	movlw	high __pbssBANK3
  2298  0033  0085               	movwf	5
  2299  0034  3018               	movlw	24
  2300  0035  319E  2638  3180   	fcall	clear_ram0
  2301                           
  2302                           ; Initialize objects allocated to BANK3
  2303  0038  30DF               	movlw	low __pidataBANK3
  2304  0039  0084               	movwf	4
  2305  003A  3091               	movlw	(high __pidataBANK3)| (0+128)
  2306  003B  0085               	movwf	5
  2307  003C  30A0               	movlw	low __pdataBANK3
  2308  003D  0086               	movwf	6
  2309  003E  3001               	movlw	high __pdataBANK3
  2310  003F  0087               	movwf	7
  2311  0040  3020               	movlw	32
  2312  0041  319E  2632         	fcall	init_ram
  2313  0043                     end_of_initialization:	
  2314                           ;End of C runtime variable initialization code
  2315                           
  2316  0043                     __end_of__initialization:	
  2317  0043  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2318  0044  0020               	movlb	0
  2319  0045  3188  288F         	ljmp	_main	;jump to C main() function
  2320                           
  2321                           	psect	bitbssCOMMON
  2322  03D8                     __pbitbssCOMMON:	
  2323  03D8                     _Receive_OK:	
  2324  03D8                     	ds	1
  2325  03D9                     _Transceive_OK:	
  2326  03D9                     	ds	1
  2327                           
  2328                           	psect	bssCOMMON
  2329  0076                     __pbssCOMMON:	
  2330  0076                     _Dimmer:	
  2331  0076                     	ds	1
  2332  0077                     _DimmerLightsIntr:	
  2333  0077                     	ds	1
  2334  0078                     _DimmerLightsIntrIOC:	
  2335  0078                     	ds	1
  2336  0079                     _RFSW:	
  2337  0079                     	ds	1
  2338  007A                     _SPI0Buffer:	
  2339  007A                     	ds	1
  2340                           
  2341                           	psect	bssBANK0
  2342  0069                     __pbssBANK0:	
  2343  0069                     _LED:	
  2344  0069                     	ds	2
  2345  006B                     _DelayOff:	
  2346  006B                     	ds	1
  2347  006C                     _DimmerLights:	
  2348  006C                     	ds	1
  2349  006D                     _Sw:	
  2350  006D                     	ds	1
  2351                           
  2352                           	psect	bssBANK1
  2353  00A0                     __pbssBANK1:	
  2354  00A0                     _myMain:	
  2355  00A0                     	ds	18
  2356  00B2                     _Buz1:	
  2357  00B2                     	ds	12
  2358  00BE                     _PF1:	
  2359  00BE                     	ds	8
  2360  00C6                     _RF1:	
  2361  00C6                     	ds	5
  2362  00CB                     _RF_Count:	
  2363  00CB                     	ds	2
  2364  00CD                     _CRC:	
  2365  00CD                     	ds	1
  2366  00CE                     _DimmerLights11:	
  2367  00CE                     	ds	1
  2368  00CF                     _RSSI:	
  2369  00CF                     	ds	1
  2370  00D0                     _Rx_Length:	
  2371  00D0                     	ds	1
  2372  00D1                     _Tx_Length:	
  2373  00D1                     	ds	1
  2374  00D2                     _r_address:	
  2375  00D2                     	ds	1
  2376  00D3                     _r_data:	
  2377  00D3                     	ds	1
  2378  00D4                     _s_data:	
  2379  00D4                     	ds	1
  2380  00D5                     _Temp1:	
  2381  00D5                     	ds	14
  2382  00E3                     _VarErrLED:	
  2383  00E3                     	ds	4
  2384  00E7                     _VarLED1:	
  2385  00E7                     	ds	4
  2386  00EB                     _Dimmer1:	
  2387  00EB                     	ds	3
  2388  00EE                     _RFSW1:	
  2389  00EE                     	ds	1
  2390                           
  2391                           	psect	bssBANK2
  2392  0120                     __pbssBANK2:	
  2393  0120                     _RF_Data:	
  2394  0120                     	ds	21
  2395  0135                     _Timer0:	
  2396  0135                     	ds	8
  2397  013D                     _Memory:	
  2398  013D                     	ds	37
  2399  0162                     _DlySw1:	
  2400  0162                     	ds	5
  2401  0167                     _VarLED2:	
  2402  0167                     	ds	4
  2403                           
  2404                           	psect	bssBANK3
  2405  01C0                     __pbssBANK3:	
  2406  01C0                     _DimmerLights1:	
  2407  01C0                     	ds	15
  2408  01CF                     _Sw1:	
  2409  01CF                     	ds	9
  2410                           
  2411                           	psect	dataBANK3
  2412  01A0                     __pdataBANK3:	
  2413  01A0                     __product:	
  2414  01A0                     	ds	32
  2415                           
  2416                           	psect	clrtext
  2417  1E38                     clear_ram0:	
  2418                           ;	Called with FSR0 containing the base address, and
  2419                           ;	WREG with the size to clear
  2420                           
  2421  1E38  0064               	clrwdt	;clear the watchdog before getting into this loop
  2422  1E39                     clrloop0:	
  2423  1E39  0180               	clrf	0	;clear RAM location pointed to by FSR
  2424  1E3A  3101               	addfsr 0,1
  2425  1E3B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2426  1E3C  2E39               	goto	clrloop0	;have we reached the end yet?
  2427  1E3D  3400               	retlw	0	;all done for this memory range, return
  2428                           
  2429                           	psect	inittext
  2430  1E32                     init_ram:	
  2431  1E32  00FE               	movwf	126
  2432  1E33                     initloop:	
  2433  1E33  0012               	moviw fsr0++
  2434  1E34  001E               	movwi fsr1++
  2435  1E35  0BFE               	decfsz	126,f
  2436  1E36  2E33               	goto	initloop
  2437  1E37  3400               	retlw	0
  2438                           
  2439                           	psect	cstackBANK2
  2440  016B                     __pcstackBANK2:	
  2441  016B                     ?_main:	
  2442  016B                     main@argc:	
  2443                           ; 2 bytes @ 0x0
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0x0
  2447  016B                     	ds	2
  2448  016D                     main@argv:	
  2449                           
  2450                           ; 2 bytes @ 0x2
  2451  016D                     	ds	2
  2452                           
  2453                           	psect	cstackCOMMON
  2454  0070                     __pcstackCOMMON:	
  2455  0070                     ?_Timeout_Counter:	
  2456  0070                     ?_set_TimeoutCleared:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_CC2500_WriteByte:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_CC2500_WriteCommand:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_CC2500_ReadStatus:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_CC2500_ReadByte:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_CC2500_PowerRST:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_CC2500_InitSetREG:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_CC2500_InitPATable:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_CC2500_ClearTXFIFO:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_CC2500_ClearRXFIFO:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_CC2500_FrequencyCabr:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_CC2500_SIDLEMode:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_DlyOff_Initialization:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_DlyOff_Main:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_setTxData:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?_setDimmerLights_Initialization:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ?_Dimmer_Initialization:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?_setMemory_GO:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ?_setDimmerLights_Main:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?_setDimmerLights_ERROR:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ?_setLED_Initialization:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?_setLED_Main:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ?_Fosc_Set:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?_IO_Set:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ?_TMR0_Set:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_ADC_Set:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     ?_IOC_Set:	
  2535                           ; 0 bytes @ 0x0
  2536                           
  2537  0070                     ?_IOC_ISR:	
  2538                           ; 0 bytes @ 0x0
  2539                           
  2540  0070                     ?_TMR0_ISR:	
  2541                           ; 0 bytes @ 0x0
  2542                           
  2543  0070                     ?_Flash_Memory_Write:	
  2544                           ; 0 bytes @ 0x0
  2545                           
  2546  0070                     ?_Flash_Memory_Modify:	
  2547                           ; 0 bytes @ 0x0
  2548                           
  2549  0070                     ?_setTemp_Initialization:	
  2550                           ; 0 bytes @ 0x0
  2551                           
  2552  0070                     ?_setTemp_Main:	
  2553                           ; 0 bytes @ 0x0
  2554                           
  2555  0070                     ?_setOverTemp_Exceptions:	
  2556                           ; 0 bytes @ 0x0
  2557                           
  2558  0070                     ?_setSw_Enable:	
  2559                           ; 0 bytes @ 0x0
  2560                           
  2561  0070                     ?_setRF_Enable:	
  2562                           ; 0 bytes @ 0x0
  2563                           
  2564  0070                     ?_setPowerFault_Initialization:	
  2565                           ; 0 bytes @ 0x0
  2566                           
  2567  0070                     ?_setPowerFault_Main:	
  2568                           ; 0 bytes @ 0x0
  2569                           
  2570  0070                     ?_setPowerFault_Exceptions:	
  2571                           ; 0 bytes @ 0x0
  2572                           
  2573  0070                     ?_setRF_Initialization:	
  2574                           ; 0 bytes @ 0x0
  2575                           
  2576  0070                     ?_setRF_Main:	
  2577                           ; 0 bytes @ 0x0
  2578                           
  2579  0070                     ?_RF_RxDisable:	
  2580                           ; 0 bytes @ 0x0
  2581                           
  2582  0070                     ?_getRxData:	
  2583                           ; 0 bytes @ 0x0
  2584                           
  2585  0070                     ?_setLog_Code:	
  2586                           ; 0 bytes @ 0x0
  2587                           
  2588  0070                     ?_setControl_Lights_Table:	
  2589                           ; 0 bytes @ 0x0
  2590                           
  2591  0070                     ?_setRFSW_Control:	
  2592                           ; 0 bytes @ 0x0
  2593                           
  2594  0070                     ?_setRFSW_AdjControl:	
  2595                           ; 0 bytes @ 0x0
  2596                           
  2597  0070                     ?_setRF_DimmerValue:	
  2598                           ; 0 bytes @ 0x0
  2599                           
  2600  0070                     ?_setSw_Initialization:	
  2601                           ; 0 bytes @ 0x0
  2602                           
  2603  0070                     ?_setSw_Main:	
  2604                           ; 0 bytes @ 0x0
  2605                           
  2606  0070                     ?_Sw_DimmerOnFunc:	
  2607                           ; 0 bytes @ 0x0
  2608                           
  2609  0070                     ?_Sw_DimmerAdjFunc:	
  2610                           ; 0 bytes @ 0x0
  2611                           
  2612  0070                     ?_Sw_DimmerOffFunc:	
  2613                           ; 0 bytes @ 0x0
  2614                           
  2615  0070                     ?_myMain_Initialization:	
  2616                           ; 0 bytes @ 0x0
  2617                           
  2618  0070                     ?_my_MainTime:	
  2619                           ; 0 bytes @ 0x0
  2620                           
  2621  0070                     ?_Buzzer_Initialization:	
  2622                           ; 0 bytes @ 0x0
  2623                           
  2624  0070                     ?_Buzzer_Main:	
  2625                           ; 0 bytes @ 0x0
  2626                           
  2627  0070                     ?_CC2500_TxData:	
  2628                           ; 0 bytes @ 0x0
  2629                           
  2630  0070                     ?_CC2500_RxData:	
  2631                           ; 0 bytes @ 0x0
  2632                           
  2633  0070                     ?_CC2500_PowerOnInitial:	
  2634                           ; 0 bytes @ 0x0
  2635                           
  2636  0070                     ?_DelayOffPointSelect:	
  2637                           ; 0 bytes @ 0x0
  2638                           
  2639  0070                     ?_DelayOff_Initialization:	
  2640                           ; 0 bytes @ 0x0
  2641                           
  2642  0070                     ?_DelayOff_Main:	
  2643                           ; 0 bytes @ 0x0
  2644                           
  2645  0070                     ?_DimmerIntrIOCPointSelect:	
  2646                           ; 0 bytes @ 0x0
  2647                           
  2648  0070                     ??_DimmerIntrIOCPointSelect:	
  2649                           ; 0 bytes @ 0x0
  2650                           
  2651  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2652                           ; 0 bytes @ 0x0
  2653                           
  2654  0070                     ?_DimmerIntrPointSelect:	
  2655                           ; 0 bytes @ 0x0
  2656                           
  2657  0070                     ??_DimmerIntrPointSelect:	
  2658                           ; 0 bytes @ 0x0
  2659                           
  2660  0070                     ?_setDimmerLights_IntrControl:	
  2661                           ; 0 bytes @ 0x0
  2662                           
  2663  0070                     ?_DimmerLightsPointSelect:	
  2664                           ; 0 bytes @ 0x0
  2665                           
  2666  0070                     ?_DimmerLights_Initialization:	
  2667                           ; 0 bytes @ 0x0
  2668                           
  2669  0070                     ?_DimmerLights_Close:	
  2670                           ; 0 bytes @ 0x0
  2671                           
  2672  0070                     ?_DimmerLights_Main:	
  2673                           ; 0 bytes @ 0x0
  2674                           
  2675  0070                     ?_DimmerLights_Exceptions:	
  2676                           ; 0 bytes @ 0x0
  2677                           
  2678  0070                     ?_setDimmerLights_AdjRF:	
  2679                           ; 0 bytes @ 0x0
  2680                           
  2681  0070                     ?_LedPointSelect:	
  2682                           ; 0 bytes @ 0x0
  2683                           
  2684  0070                     ?_LED_Initialization:	
  2685                           ; 0 bytes @ 0x0
  2686                           
  2687  0070                     ?_LED_Main:	
  2688                           ; 0 bytes @ 0x0
  2689                           
  2690  0070                     ?_Mcu_Initialization:	
  2691                           ; 0 bytes @ 0x0
  2692                           
  2693  0070                     ?_ISR:	
  2694                           ; 0 bytes @ 0x0
  2695                           
  2696  0070                     ?_setDimmerReClock:	
  2697                           ; 0 bytes @ 0x0
  2698                           
  2699  0070                     ?_Flash_Memory_Initialization:	
  2700                           ; 0 bytes @ 0x0
  2701                           
  2702  0070                     ?_Flash_Memory_Main:	
  2703                           ; 0 bytes @ 0x0
  2704                           
  2705  0070                     ?_Flash_Memory_Unlock:	
  2706                           ; 0 bytes @ 0x0
  2707                           
  2708  0070                     ?_Flash_Memory_Erasing:	
  2709                           ; 0 bytes @ 0x0
  2710                           
  2711  0070                     ?_Temp_Initialization:	
  2712                           ; 0 bytes @ 0x0
  2713                           
  2714  0070                     ?_setTemp_Enable:	
  2715                           ; 0 bytes @ 0x0
  2716                           
  2717  0070                     ?_getTemp_AD:	
  2718                           ; 0 bytes @ 0x0
  2719                           
  2720  0070                     ?_Temp_Main:	
  2721                           ; 0 bytes @ 0x0
  2722                           
  2723  0070                     ?_PowerFault_Initialization:	
  2724                           ; 0 bytes @ 0x0
  2725                           
  2726  0070                     ?_PowerFault_Main:	
  2727                           ; 0 bytes @ 0x0
  2728                           
  2729  0070                     ?_getPowerFault_AD:	
  2730                           ; 0 bytes @ 0x0
  2731                           
  2732  0070                     ?_RF_Initialization:	
  2733                           ; 0 bytes @ 0x0
  2734                           
  2735  0070                     ?_RF_Main:	
  2736                           ; 0 bytes @ 0x0
  2737                           
  2738  0070                     ?_setRF_Learn:	
  2739                           ; 0 bytes @ 0x0
  2740                           
  2741  0070                     ?_RfSWPointSelect:	
  2742                           ; 0 bytes @ 0x0
  2743                           
  2744  0070                     ?_TouchPower:	
  2745                           ; 0 bytes @ 0x0
  2746                           
  2747  0070                     ?_SwPointSelect:	
  2748                           ; 0 bytes @ 0x0
  2749                           
  2750  0070                     ?_Switch_Initialization:	
  2751                           ; 0 bytes @ 0x0
  2752                           
  2753  0070                     ?_Switch_Main:	
  2754                           ; 0 bytes @ 0x0
  2755                           
  2756  0070                     ?_DelayTimejudge:	
  2757                           ; 0 bytes @ 0x0
  2758                           
  2759  0070                     ?_getDimmerLights_StatusFlag:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0070                     ?_getPercentValue:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0070                     ?_Flash_Memory_Read:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0070                     ?_getPF_Safe:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0070                     ?_setPercentValue:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0070                     ?_getTemp_Safe:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777                           
  2778                           ; 1 bytes @ 0x0
  2779  0070                     	ds	1
  2780  0071                     DimmerIntrIOCPointSelect@lights:	
  2781  0071                     DimmerIntrPointSelect@lights:	
  2782                           ; 1 bytes @ 0x1
  2783                           
  2784                           
  2785                           ; 1 bytes @ 0x1
  2786  0071                     	ds	1
  2787  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2788  0072                     ??_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x2
  2790                           
  2791  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2792                           ; 0 bytes @ 0x2
  2793                           
  2794                           
  2795                           ; 1 bytes @ 0x2
  2796  0072                     	ds	1
  2797  0073                     ??_IOC_ISR:	
  2798  0073                     ??_setDimmerReClock:	
  2799                           ; 0 bytes @ 0x3
  2800                           
  2801                           
  2802                           ; 0 bytes @ 0x3
  2803  0073                     	ds	1
  2804  0074                     setDimmerLights_IntrControl@lights:	
  2805                           
  2806                           ; 1 bytes @ 0x4
  2807  0074                     	ds	1
  2808  0075                     ??_TMR0_ISR:	
  2809  0075                     ??_ISR:	
  2810                           ; 0 bytes @ 0x5
  2811                           
  2812                           
  2813                           ; 0 bytes @ 0x5
  2814  0075                     	ds	1
  2815                           
  2816                           	psect	cstackBANK0
  2817  0020                     __pcstackBANK0:	
  2818  0020                     ??_Timeout_Counter:	
  2819  0020                     ??_set_TimeoutCleared:	
  2820                           ; 0 bytes @ 0x0
  2821                           
  2822  0020                     ??_CC2500_WriteByte:	
  2823                           ; 0 bytes @ 0x0
  2824                           
  2825  0020                     ??_CC2500_ReadByte:	
  2826                           ; 0 bytes @ 0x0
  2827                           
  2828  0020                     ?_DelayTime_1us:	
  2829                           ; 0 bytes @ 0x0
  2830                           
  2831  0020                     ??_setTxData:	
  2832                           ; 0 bytes @ 0x0
  2833                           
  2834  0020                     ??_Dimmer_Initialization:	
  2835                           ; 0 bytes @ 0x0
  2836                           
  2837  0020                     ??_getDimmerLights_StatusFlag:	
  2838                           ; 0 bytes @ 0x0
  2839                           
  2840  0020                     ??_setMemory_GO:	
  2841                           ; 0 bytes @ 0x0
  2842                           
  2843  0020                     ??_Fosc_Set:	
  2844                           ; 0 bytes @ 0x0
  2845                           
  2846  0020                     ??_IO_Set:	
  2847                           ; 0 bytes @ 0x0
  2848                           
  2849  0020                     ??_TMR0_Set:	
  2850                           ; 0 bytes @ 0x0
  2851                           
  2852  0020                     ??_ADC_Set:	
  2853                           ; 0 bytes @ 0x0
  2854                           
  2855  0020                     ??_IOC_Set:	
  2856                           ; 0 bytes @ 0x0
  2857                           
  2858  0020                     ??_Flash_Memory_Read:	
  2859                           ; 0 bytes @ 0x0
  2860                           
  2861  0020                     ??_Flash_Memory_Write:	
  2862                           ; 0 bytes @ 0x0
  2863                           
  2864  0020                     ??_setTemp_Initialization:	
  2865                           ; 0 bytes @ 0x0
  2866                           
  2867  0020                     ??_getPF_Safe:	
  2868                           ; 0 bytes @ 0x0
  2869                           
  2870  0020                     ??_setRF_Enable:	
  2871                           ; 0 bytes @ 0x0
  2872                           
  2873  0020                     ??_setPowerFault_Initialization:	
  2874                           ; 0 bytes @ 0x0
  2875                           
  2876  0020                     ??_setRF_Initialization:	
  2877                           ; 0 bytes @ 0x0
  2878                           
  2879  0020                     ??_myMain_Initialization:	
  2880                           ; 0 bytes @ 0x0
  2881                           
  2882  0020                     ??_Buzzer_Initialization:	
  2883                           ; 0 bytes @ 0x0
  2884                           
  2885  0020                     ??_Buzzer_Main:	
  2886                           ; 0 bytes @ 0x0
  2887                           
  2888  0020                     ??_DelayOffPointSelect:	
  2889                           ; 0 bytes @ 0x0
  2890                           
  2891  0020                     ??_DimmerLightsPointSelect:	
  2892                           ; 0 bytes @ 0x0
  2893                           
  2894  0020                     ??_LedPointSelect:	
  2895                           ; 0 bytes @ 0x0
  2896                           
  2897  0020                     ??_Mcu_Initialization:	
  2898                           ; 0 bytes @ 0x0
  2899                           
  2900  0020                     ??_Flash_Memory_Unlock:	
  2901                           ; 0 bytes @ 0x0
  2902                           
  2903  0020                     ??_Flash_Memory_Erasing:	
  2904                           ; 0 bytes @ 0x0
  2905                           
  2906  0020                     ??_Temp_Initialization:	
  2907                           ; 0 bytes @ 0x0
  2908                           
  2909  0020                     ??_setTemp_Enable:	
  2910                           ; 0 bytes @ 0x0
  2911                           
  2912  0020                     ??_getTemp_Safe:	
  2913                           ; 0 bytes @ 0x0
  2914                           
  2915  0020                     ??_PowerFault_Initialization:	
  2916                           ; 0 bytes @ 0x0
  2917                           
  2918  0020                     ??_setRF_Learn:	
  2919                           ; 0 bytes @ 0x0
  2920                           
  2921  0020                     ??_RfSWPointSelect:	
  2922                           ; 0 bytes @ 0x0
  2923                           
  2924  0020                     ??_TouchPower:	
  2925                           ; 0 bytes @ 0x0
  2926                           
  2927  0020                     ??_SwPointSelect:	
  2928                           ; 0 bytes @ 0x0
  2929                           
  2930  0020                     ?___bmul:	
  2931                           ; 0 bytes @ 0x0
  2932                           
  2933  0020                     ?_getBuz_GO:	
  2934                           ; 1 bytes @ 0x0
  2935                           
  2936  0020                     ?_getAD:	
  2937                           ; 2 bytes @ 0x0
  2938                           
  2939  0020                     ?___awdiv:	
  2940                           ; 2 bytes @ 0x0
  2941                           
  2942  0020                     ?___ftpack:	
  2943                           ; 2 bytes @ 0x0
  2944                           
  2945  0020                     getDimmerLights_StatusFlag@Status:	
  2946                           ; 3 bytes @ 0x0
  2947                           
  2948  0020                     LedPointSelect@led:	
  2949                           ; 1 bytes @ 0x0
  2950                           
  2951  0020                     getAD@adcon1:	
  2952                           ; 1 bytes @ 0x0
  2953                           
  2954  0020                     setTemp_Enable@command:	
  2955                           ; 1 bytes @ 0x0
  2956                           
  2957  0020                     getTemp_Safe@result:	
  2958                           ; 1 bytes @ 0x0
  2959                           
  2960  0020                     getPF_Safe@i:	
  2961                           ; 1 bytes @ 0x0
  2962                           
  2963  0020                     setRF_Learn@command:	
  2964                           ; 1 bytes @ 0x0
  2965                           
  2966  0020                     setRF_Enable@command:	
  2967                           ; 1 bytes @ 0x0
  2968                           
  2969  0020                     ___bmul@multiplicand:	
  2970                           ; 1 bytes @ 0x0
  2971                           
  2972  0020                     DelayTime_1us@count:	
  2973                           ; 1 bytes @ 0x0
  2974                           
  2975  0020                     ___awdiv@divisor:	
  2976                           ; 2 bytes @ 0x0
  2977                           
  2978  0020                     ___ftpack@arg:	
  2979                           ; 2 bytes @ 0x0
  2980                           
  2981                           
  2982                           ; 3 bytes @ 0x0
  2983  0020                     	ds	1
  2984  0021                     ?_setLED:	
  2985  0021                     ??_setLED_Main:	
  2986                           ; 0 bytes @ 0x1
  2987                           
  2988  0021                     ??_RF_Initialization:	
  2989                           ; 0 bytes @ 0x1
  2990                           
  2991  0021                     ??___bmul:	
  2992                           ; 0 bytes @ 0x1
  2993                           
  2994  0021                     CC2500_WriteByte@loop_a:	
  2995                           ; 0 bytes @ 0x1
  2996                           
  2997  0021                     CC2500_ReadByte@loop_b:	
  2998                           ; 1 bytes @ 0x1
  2999                           
  3000  0021                     DelayOffPointSelect@sw:	
  3001                           ; 1 bytes @ 0x1
  3002                           
  3003  0021                     DimmerLightsPointSelect@lights:	
  3004                           ; 1 bytes @ 0x1
  3005                           
  3006  0021                     setLED@command:	
  3007                           ; 1 bytes @ 0x1
  3008                           
  3009  0021                     Flash_Memory_Read@i:	
  3010                           ; 1 bytes @ 0x1
  3011                           
  3012  0021                     Flash_Memory_Write@i:	
  3013                           ; 1 bytes @ 0x1
  3014                           
  3015  0021                     RfSWPointSelect@sw:	
  3016                           ; 1 bytes @ 0x1
  3017                           
  3018  0021                     SwPointSelect@sw:	
  3019                           ; 1 bytes @ 0x1
  3020                           
  3021                           
  3022                           ; 1 bytes @ 0x1
  3023  0021                     	ds	1
  3024  0022                     ??_CC2500_WriteCommand:	
  3025  0022                     ??_CC2500_ReadStatus:	
  3026                           ; 0 bytes @ 0x2
  3027                           
  3028  0022                     ??_DelayTime_1us:	
  3029                           ; 0 bytes @ 0x2
  3030                           
  3031  0022                     ?_CC2500_WriteREG:	
  3032                           ; 0 bytes @ 0x2
  3033                           
  3034  0022                     ??_DlyOff_Initialization:	
  3035                           ; 0 bytes @ 0x2
  3036                           
  3037  0022                     ?_setSw_Status:	
  3038                           ; 0 bytes @ 0x2
  3039                           
  3040  0022                     ?_setRFSW_Status:	
  3041                           ; 0 bytes @ 0x2
  3042                           
  3043  0022                     ?_setDimmerLights_Trigger:	
  3044                           ; 0 bytes @ 0x2
  3045                           
  3046  0022                     ?_setDimmerLights_Switch:	
  3047                           ; 0 bytes @ 0x2
  3048                           
  3049  0022                     ??_setDimmerLights_Initialization:	
  3050                           ; 0 bytes @ 0x2
  3051                           
  3052  0022                     ?_setDimmerLights_TriggerERROR:	
  3053                           ; 0 bytes @ 0x2
  3054                           
  3055  0022                     ??_setLED:	
  3056                           ; 0 bytes @ 0x2
  3057                           
  3058  0022                     ??_setSw_Enable:	
  3059                           ; 0 bytes @ 0x2
  3060                           
  3061  0022                     ??_getBuz_GO:	
  3062                           ; 0 bytes @ 0x2
  3063                           
  3064  0022                     ?_setDimmerLights_AdjGo:	
  3065                           ; 0 bytes @ 0x2
  3066                           
  3067  0022                     ?_setDimmerLights_TriggerAdj:	
  3068                           ; 0 bytes @ 0x2
  3069                           
  3070  0022                     CC2500_WriteREG@value:	
  3071                           ; 0 bytes @ 0x2
  3072                           
  3073  0022                     DlyOff_Initialization@sw:	
  3074                           ; 1 bytes @ 0x2
  3075                           
  3076  0022                     setDimmerLights_TriggerERROR@command:	
  3077                           ; 1 bytes @ 0x2
  3078                           
  3079  0022                     setDimmerLights_Switch@command:	
  3080                           ; 1 bytes @ 0x2
  3081                           
  3082  0022                     setDimmerLights_AdjGo@command:	
  3083                           ; 1 bytes @ 0x2
  3084                           
  3085  0022                     setDimmerLights_Trigger@command:	
  3086                           ; 1 bytes @ 0x2
  3087                           
  3088  0022                     setDimmerLights_TriggerAdj@command:	
  3089                           ; 1 bytes @ 0x2
  3090                           
  3091  0022                     setLED@led:	
  3092                           ; 1 bytes @ 0x2
  3093                           
  3094  0022                     Flash_Memory_Read@address:	
  3095                           ; 1 bytes @ 0x2
  3096                           
  3097  0022                     setMemory_GO@command:	
  3098                           ; 1 bytes @ 0x2
  3099                           
  3100  0022                     setRFSW_Status@command:	
  3101                           ; 1 bytes @ 0x2
  3102                           
  3103  0022                     setSw_Enable@command:	
  3104                           ; 1 bytes @ 0x2
  3105                           
  3106  0022                     setSw_Status@command:	
  3107                           ; 1 bytes @ 0x2
  3108                           
  3109  0022                     ___bmul@product:	
  3110                           ; 1 bytes @ 0x2
  3111                           
  3112  0022                     DelayTime_1us@i:	
  3113                           ; 1 bytes @ 0x2
  3114                           
  3115  0022                     ___awdiv@dividend:	
  3116                           ; 2 bytes @ 0x2
  3117                           
  3118                           
  3119                           ; 2 bytes @ 0x2
  3120  0022                     	ds	1
  3121  0023                     ??_CC2500_WriteREG:	
  3122  0023                     ??_setSw_Status:	
  3123                           ; 0 bytes @ 0x3
  3124                           
  3125  0023                     ??_setRFSW_Status:	
  3126                           ; 0 bytes @ 0x3
  3127                           
  3128  0023                     ??_setDimmerLights_Trigger:	
  3129                           ; 0 bytes @ 0x3
  3130                           
  3131  0023                     ??_setDimmerLights_Switch:	
  3132                           ; 0 bytes @ 0x3
  3133                           
  3134  0023                     ?_setDimmerLights:	
  3135                           ; 0 bytes @ 0x3
  3136                           
  3137  0023                     ??_setDimmerLights_TriggerERROR:	
  3138                           ; 0 bytes @ 0x3
  3139                           
  3140  0023                     ??_setLED_Initialization:	
  3141                           ; 0 bytes @ 0x3
  3142                           
  3143  0023                     ??_setSw_Initialization:	
  3144                           ; 0 bytes @ 0x3
  3145                           
  3146  0023                     ??_DelayOff_Initialization:	
  3147                           ; 0 bytes @ 0x3
  3148                           
  3149  0023                     ??_DimmerLights_Close:	
  3150                           ; 0 bytes @ 0x3
  3151                           
  3152  0023                     ??_setDimmerLights_AdjGo:	
  3153                           ; 0 bytes @ 0x3
  3154                           
  3155  0023                     ??_setDimmerLights_TriggerAdj:	
  3156                           ; 0 bytes @ 0x3
  3157                           
  3158  0023                     ??_getAD:	
  3159                           ; 0 bytes @ 0x3
  3160                           
  3161  0023                     CC2500_WriteCommand@command:	
  3162                           ; 0 bytes @ 0x3
  3163                           
  3164  0023                     CC2500_ReadStatus@status_addr:	
  3165                           ; 1 bytes @ 0x3
  3166                           
  3167  0023                     setDimmerLights_Initialization@lights:	
  3168                           ; 1 bytes @ 0x3
  3169                           
  3170  0023                     setDimmerLights_TriggerERROR@lights:	
  3171                           ; 1 bytes @ 0x3
  3172                           
  3173  0023                     setDimmerLights@status:	
  3174                           ; 1 bytes @ 0x3
  3175                           
  3176  0023                     setDimmerLights_Switch@lights:	
  3177                           ; 1 bytes @ 0x3
  3178                           
  3179  0023                     setDimmerLights_AdjGo@lights:	
  3180                           ; 1 bytes @ 0x3
  3181                           
  3182  0023                     setDimmerLights_Trigger@lights:	
  3183                           ; 1 bytes @ 0x3
  3184                           
  3185  0023                     setDimmerLights_TriggerAdj@lights:	
  3186                           ; 1 bytes @ 0x3
  3187                           
  3188  0023                     setLED_Initialization@led:	
  3189                           ; 1 bytes @ 0x3
  3190                           
  3191  0023                     setLED_Main@led:	
  3192                           ; 1 bytes @ 0x3
  3193                           
  3194  0023                     getAD@adcon0:	
  3195                           ; 1 bytes @ 0x3
  3196                           
  3197  0023                     Flash_Memory_Read@ret:	
  3198                           ; 1 bytes @ 0x3
  3199                           
  3200  0023                     setRFSW_Status@sw:	
  3201                           ; 1 bytes @ 0x3
  3202                           
  3203  0023                     setSw_Initialization@sw:	
  3204                           ; 1 bytes @ 0x3
  3205                           
  3206  0023                     setSw_Status@sw:	
  3207                           ; 1 bytes @ 0x3
  3208                           
  3209  0023                     ___bmul@multiplier:	
  3210                           ; 1 bytes @ 0x3
  3211                           
  3212  0023                     ___ftpack@exp:	
  3213                           ; 1 bytes @ 0x3
  3214                           
  3215                           
  3216                           ; 1 bytes @ 0x3
  3217  0023                     	ds	1
  3218  0024                     ??_CC2500_ClearTXFIFO:	
  3219  0024                     ??_CC2500_ClearRXFIFO:	
  3220                           ; 0 bytes @ 0x4
  3221                           
  3222  0024                     ??_CC2500_SIDLEMode:	
  3223                           ; 0 bytes @ 0x4
  3224                           
  3225  0024                     ??_DelayTimejudge:	
  3226                           ; 0 bytes @ 0x4
  3227                           
  3228  0024                     ??_setDimmerLights:	
  3229                           ; 0 bytes @ 0x4
  3230                           
  3231  0024                     ??_setDimmerLights_ERROR:	
  3232                           ; 0 bytes @ 0x4
  3233                           
  3234  0024                     ??_Flash_Memory_Modify:	
  3235                           ; 0 bytes @ 0x4
  3236                           
  3237  0024                     ??_RF_RxDisable:	
  3238                           ; 0 bytes @ 0x4
  3239                           
  3240  0024                     ??_Sw_DimmerAdjFunc:	
  3241                           ; 0 bytes @ 0x4
  3242                           
  3243  0024                     ??_CC2500_TxData:	
  3244                           ; 0 bytes @ 0x4
  3245                           
  3246  0024                     ??_CC2500_RxData:	
  3247                           ; 0 bytes @ 0x4
  3248                           
  3249  0024                     ??_DimmerLights_Initialization:	
  3250                           ; 0 bytes @ 0x4
  3251                           
  3252  0024                     ??_LED_Initialization:	
  3253                           ; 0 bytes @ 0x4
  3254                           
  3255  0024                     ??_LED_Main:	
  3256                           ; 0 bytes @ 0x4
  3257                           
  3258  0024                     ??_getTemp_AD:	
  3259                           ; 0 bytes @ 0x4
  3260                           
  3261  0024                     ??_getPowerFault_AD:	
  3262                           ; 0 bytes @ 0x4
  3263                           
  3264  0024                     ??_Switch_Initialization:	
  3265                           ; 0 bytes @ 0x4
  3266                           
  3267  0024                     ??___awdiv:	
  3268                           ; 0 bytes @ 0x4
  3269                           
  3270  0024                     CC2500_WriteREG@w_addr:	
  3271                           ; 0 bytes @ 0x4
  3272                           
  3273  0024                     Sw_DimmerAdjFunc@Idle:	
  3274                           ; 1 bytes @ 0x4
  3275                           
  3276  0024                     ___ftpack@sign:	
  3277                           ; 1 bytes @ 0x4
  3278                           
  3279  0024                     getBuz_GO@i:	
  3280                           ; 1 bytes @ 0x4
  3281                           
  3282  0024                     DelayTime_1us@j:	
  3283                           ; 2 bytes @ 0x4
  3284                           
  3285                           
  3286                           ; 2 bytes @ 0x4
  3287  0024                     	ds	1
  3288  0025                     ??_CC2500_InitSetREG:	
  3289  0025                     ??_CC2500_InitPATable:	
  3290                           ; 0 bytes @ 0x5
  3291                           
  3292  0025                     ??___ftpack:	
  3293                           ; 0 bytes @ 0x5
  3294                           
  3295  0025                     CC2500_TxData@loop_e:	
  3296                           ; 0 bytes @ 0x5
  3297                           
  3298  0025                     CC2500_RxData@loop_f:	
  3299                           ; 1 bytes @ 0x5
  3300                           
  3301  0025                     setDimmerLights_ERROR@lights:	
  3302                           ; 1 bytes @ 0x5
  3303                           
  3304  0025                     setDimmerLights@lights:	
  3305                           ; 1 bytes @ 0x5
  3306                           
  3307  0025                     Flash_Memory_Modify@i:	
  3308                           ; 1 bytes @ 0x5
  3309                           
  3310  0025                     getTemp_AD@channel:	
  3311                           ; 1 bytes @ 0x5
  3312                           
  3313  0025                     getPowerFault_AD@channel:	
  3314                           ; 1 bytes @ 0x5
  3315                           
  3316  0025                     Sw_DimmerAdjFunc@sw:	
  3317                           ; 1 bytes @ 0x5
  3318                           
  3319  0025                     ___awdiv@counter:	
  3320                           ; 1 bytes @ 0x5
  3321                           
  3322                           
  3323                           ; 1 bytes @ 0x5
  3324  0025                     	ds	1
  3325  0026                     ??_CC2500_PowerRST:	
  3326  0026                     ??_CC2500_FrequencyCabr:	
  3327                           ; 0 bytes @ 0x6
  3328                           
  3329  0026                     ??_Flash_Memory_Main:	
  3330                           ; 0 bytes @ 0x6
  3331                           
  3332  0026                     CC2500_InitSetREG@temp1:	
  3333                           ; 0 bytes @ 0x6
  3334                           
  3335  0026                     CC2500_InitPATable@temp:	
  3336                           ; 1 bytes @ 0x6
  3337                           
  3338  0026                     DelayTimejudge@i:	
  3339                           ; 1 bytes @ 0x6
  3340                           
  3341  0026                     ___awdiv@sign:	
  3342                           ; 1 bytes @ 0x6
  3343                           
  3344                           
  3345                           ; 1 bytes @ 0x6
  3346  0026                     	ds	1
  3347  0027                     CC2500_InitSetREG@temp2:	
  3348  0027                     CC2500_InitPATable@loop_d:	
  3349                           ; 1 bytes @ 0x7
  3350                           
  3351  0027                     DelayTimejudge@j:	
  3352                           ; 1 bytes @ 0x7
  3353                           
  3354  0027                     ___awdiv@quotient:	
  3355                           ; 1 bytes @ 0x7
  3356                           
  3357                           
  3358                           ; 2 bytes @ 0x7
  3359  0027                     	ds	1
  3360  0028                     ?___awtoft:	
  3361  0028                     CC2500_InitSetREG@loop_c:	
  3362                           ; 3 bytes @ 0x8
  3363                           
  3364  0028                     DelayTimejudge@k:	
  3365                           ; 1 bytes @ 0x8
  3366                           
  3367  0028                     ___awtoft@c:	
  3368                           ; 1 bytes @ 0x8
  3369                           
  3370                           
  3371                           ; 2 bytes @ 0x8
  3372  0028                     	ds	1
  3373  0029                     ?_setBuz:	
  3374  0029                     ??_CC2500_PowerOnInitial:	
  3375                           ; 0 bytes @ 0x9
  3376                           
  3377  0029                     DelayTimejudge@value:	
  3378                           ; 0 bytes @ 0x9
  3379                           
  3380  0029                     setBuz@time:	
  3381                           ; 1 bytes @ 0x9
  3382                           
  3383                           
  3384                           ; 2 bytes @ 0x9
  3385  0029                     	ds	1
  3386  002A                     ?_setDelayOff_GO:	
  3387  002A                     setDelayOff_GO@command:	
  3388                           ; 0 bytes @ 0xA
  3389                           
  3390                           
  3391                           ; 1 bytes @ 0xA
  3392  002A                     	ds	1
  3393  002B                     ??_setBuz:	
  3394  002B                     ??___awtoft:	
  3395                           ; 0 bytes @ 0xB
  3396                           
  3397  002B                     setDelayOff_GO@value:	
  3398                           ; 0 bytes @ 0xB
  3399                           
  3400                           
  3401                           ; 1 bytes @ 0xB
  3402  002B                     	ds	1
  3403  002C                     ??_setDelayOff_GO:	
  3404  002C                     setBuz@count:	
  3405                           ; 0 bytes @ 0xC
  3406                           
  3407                           
  3408                           ; 1 bytes @ 0xC
  3409  002C                     	ds	1
  3410  002D                     ??_setLog_Code:	
  3411  002D                     ??_my_MainTime:	
  3412                           ; 0 bytes @ 0xD
  3413                           
  3414  002D                     ??_DimmerLights_Exceptions:	
  3415                           ; 0 bytes @ 0xD
  3416                           
  3417  002D                     DimmerLights_Exceptions@status:	
  3418                           ; 0 bytes @ 0xD
  3419                           
  3420  002D                     ___awtoft@sign:	
  3421                           ; 1 bytes @ 0xD
  3422                           
  3423                           
  3424                           ; 1 bytes @ 0xD
  3425  002D                     	ds	1
  3426  002E                     ??_setOverTemp_Exceptions:	
  3427  002E                     ??_setPowerFault_Exceptions:	
  3428                           ; 0 bytes @ 0xE
  3429                           
  3430  002E                     ?___ftdiv:	
  3431                           ; 0 bytes @ 0xE
  3432                           
  3433  002E                     ?___ftmul:	
  3434                           ; 3 bytes @ 0xE
  3435                           
  3436  002E                     setDelayOff_GO@sw:	
  3437                           ; 3 bytes @ 0xE
  3438                           
  3439  002E                     ___ftdiv@f2:	
  3440                           ; 1 bytes @ 0xE
  3441                           
  3442  002E                     ___ftmul@f1:	
  3443                           ; 3 bytes @ 0xE
  3444                           
  3445                           
  3446                           ; 3 bytes @ 0xE
  3447  002E                     	ds	1
  3448  002F                     setOverTemp_Exceptions@i:	
  3449  002F                     setPowerFault_Exceptions@i:	
  3450                           ; 1 bytes @ 0xF
  3451                           
  3452                           
  3453                           ; 1 bytes @ 0xF
  3454  002F                     	ds	1
  3455  0030                     setOverTemp_Exceptions@command:	
  3456  0030                     setPowerFault_Exceptions@command:	
  3457                           ; 1 bytes @ 0x10
  3458                           
  3459                           
  3460                           ; 1 bytes @ 0x10
  3461  0030                     	ds	1
  3462  0031                     ??_setTemp_Main:	
  3463  0031                     ??_setPowerFault_Main:	
  3464                           ; 0 bytes @ 0x11
  3465                           
  3466  0031                     ___ftdiv@f1:	
  3467                           ; 0 bytes @ 0x11
  3468                           
  3469  0031                     ___ftmul@f2:	
  3470                           ; 3 bytes @ 0x11
  3471                           
  3472                           
  3473                           ; 3 bytes @ 0x11
  3474  0031                     	ds	1
  3475  0032                     ??_Temp_Main:	
  3476  0032                     ??_PowerFault_Main:	
  3477                           ; 0 bytes @ 0x12
  3478                           
  3479                           
  3480                           ; 0 bytes @ 0x12
  3481  0032                     	ds	2
  3482  0034                     ??___ftdiv:	
  3483  0034                     ??___ftmul:	
  3484                           ; 0 bytes @ 0x14
  3485                           
  3486                           
  3487                           ; 0 bytes @ 0x14
  3488  0034                     	ds	4
  3489  0038                     ___ftdiv@cntr:	
  3490  0038                     ___ftmul@exp:	
  3491                           ; 1 bytes @ 0x18
  3492                           
  3493                           
  3494                           ; 1 bytes @ 0x18
  3495  0038                     	ds	1
  3496  0039                     ___ftdiv@f3:	
  3497  0039                     ___ftmul@f3_as_product:	
  3498                           ; 3 bytes @ 0x19
  3499                           
  3500                           
  3501                           ; 3 bytes @ 0x19
  3502  0039                     	ds	3
  3503  003C                     ___ftdiv@exp:	
  3504  003C                     ___ftmul@cntr:	
  3505                           ; 1 bytes @ 0x1C
  3506                           
  3507                           
  3508                           ; 1 bytes @ 0x1C
  3509  003C                     	ds	1
  3510  003D                     ___ftdiv@sign:	
  3511  003D                     ___ftmul@sign:	
  3512                           ; 1 bytes @ 0x1D
  3513                           
  3514                           
  3515                           ; 1 bytes @ 0x1D
  3516  003D                     	ds	1
  3517  003E                     ?___ftadd:	
  3518  003E                     ___ftadd@f1:	
  3519                           ; 3 bytes @ 0x1E
  3520                           
  3521                           
  3522                           ; 3 bytes @ 0x1E
  3523  003E                     	ds	3
  3524  0041                     ___ftadd@f2:	
  3525                           
  3526                           ; 3 bytes @ 0x21
  3527  0041                     	ds	3
  3528  0044                     ??___ftadd:	
  3529                           
  3530                           ; 0 bytes @ 0x24
  3531  0044                     	ds	4
  3532  0048                     ___ftadd@sign:	
  3533                           
  3534                           ; 1 bytes @ 0x28
  3535  0048                     	ds	1
  3536  0049                     ___ftadd@exp2:	
  3537                           
  3538                           ; 1 bytes @ 0x29
  3539  0049                     	ds	1
  3540  004A                     ___ftadd@exp1:	
  3541                           
  3542                           ; 1 bytes @ 0x2A
  3543  004A                     	ds	1
  3544  004B                     ?___fttol:	
  3545  004B                     ___fttol@f1:	
  3546                           ; 4 bytes @ 0x2B
  3547                           
  3548                           
  3549                           ; 3 bytes @ 0x2B
  3550  004B                     	ds	4
  3551  004F                     ??___fttol:	
  3552                           
  3553                           ; 0 bytes @ 0x2F
  3554  004F                     	ds	4
  3555  0053                     ___fttol@sign1:	
  3556                           
  3557                           ; 1 bytes @ 0x33
  3558  0053                     	ds	1
  3559  0054                     ___fttol@lval:	
  3560                           
  3561                           ; 4 bytes @ 0x34
  3562  0054                     	ds	4
  3563  0058                     ___fttol@exp1:	
  3564                           
  3565                           ; 1 bytes @ 0x38
  3566  0058                     	ds	1
  3567  0059                     ??_getPercentValue:	
  3568  0059                     ??_setPercentValue:	
  3569                           ; 0 bytes @ 0x39
  3570                           
  3571  0059                     setPercentValue@value:	
  3572                           ; 0 bytes @ 0x39
  3573                           
  3574                           
  3575                           ; 1 bytes @ 0x39
  3576  0059                     	ds	1
  3577  005A                     setPercentValue@i:	
  3578                           
  3579                           ; 3 bytes @ 0x3A
  3580  005A                     	ds	1
  3581  005B                     getPercentValue@value:	
  3582                           
  3583                           ; 1 bytes @ 0x3B
  3584  005B                     	ds	1
  3585  005C                     getPercentValue@i:	
  3586                           
  3587                           ; 3 bytes @ 0x3C
  3588  005C                     	ds	1
  3589  005D                     ?_setRF_DimmerLights:	
  3590  005D                     ??_Flash_Memory_Initialization:	
  3591                           ; 0 bytes @ 0x3D
  3592                           
  3593  005D                     setRF_DimmerLights@on:	
  3594                           ; 0 bytes @ 0x3D
  3595                           
  3596                           
  3597                           ; 1 bytes @ 0x3D
  3598  005D                     	ds	1
  3599  005E                     ??_setRF_DimmerLights:	
  3600  005E                     Flash_Memory_Initialization@i:	
  3601                           ; 0 bytes @ 0x3E
  3602                           
  3603                           
  3604                           ; 1 bytes @ 0x3E
  3605  005E                     	ds	1
  3606  005F                     ??_setDimmerLights_AdjRF:	
  3607                           
  3608                           ; 0 bytes @ 0x3F
  3609  005F                     	ds	1
  3610  0060                     setDimmerLights_AdjRF@lights:	
  3611  0060                     setRF_DimmerLights@status:	
  3612                           ; 1 bytes @ 0x40
  3613                           
  3614                           
  3615                           ; 1 bytes @ 0x40
  3616  0060                     	ds	1
  3617  0061                     ??_setRF_DimmerValue:	
  3618  0061                     setRF_DimmerLights@lights:	
  3619                           ; 0 bytes @ 0x41
  3620                           
  3621                           
  3622                           ; 1 bytes @ 0x41
  3623  0061                     	ds	1
  3624  0062                     ??_DlyOff_Main:	
  3625  0062                     ?_setDimmerLights_Adj:	
  3626                           ; 0 bytes @ 0x42
  3627                           
  3628  0062                     ??_setRFSW_Control:	
  3629                           ; 0 bytes @ 0x42
  3630                           
  3631  0062                     ??_Sw_DimmerOnFunc:	
  3632                           ; 0 bytes @ 0x42
  3633                           
  3634  0062                     ??_Sw_DimmerOffFunc:	
  3635                           ; 0 bytes @ 0x42
  3636                           
  3637  0062                     setDimmerLights_Adj@status:	
  3638                           ; 0 bytes @ 0x42
  3639                           
  3640  0062                     Sw_DimmerOnFunc@Idle:	
  3641                           ; 1 bytes @ 0x42
  3642                           
  3643                           
  3644                           ; 1 bytes @ 0x42
  3645  0062                     	ds	1
  3646  0063                     ??_setDimmerLights_Adj:	
  3647  0063                     setRFSW_Control@sw:	
  3648                           ; 0 bytes @ 0x43
  3649                           
  3650  0063                     setRF_DimmerValue@lights:	
  3651                           ; 1 bytes @ 0x43
  3652                           
  3653  0063                     Sw_DimmerOnFunc@sw:	
  3654                           ; 1 bytes @ 0x43
  3655                           
  3656                           
  3657                           ; 1 bytes @ 0x43
  3658  0063                     	ds	1
  3659  0064                     ??_setRFSW_AdjControl:	
  3660  0064                     DlyOff_Main@sw:	
  3661                           ; 0 bytes @ 0x44
  3662                           
  3663  0064                     setDimmerLights_Adj@lights:	
  3664                           ; 1 bytes @ 0x44
  3665                           
  3666  0064                     Sw_DimmerOffFunc@sw:	
  3667                           ; 1 bytes @ 0x44
  3668                           
  3669                           
  3670                           ; 1 bytes @ 0x44
  3671  0064                     	ds	1
  3672  0065                     ??_setDimmerLights_Main:	
  3673  0065                     ??_setSw_Main:	
  3674                           ; 0 bytes @ 0x45
  3675                           
  3676  0065                     ??_DelayOff_Main:	
  3677                           ; 0 bytes @ 0x45
  3678                           
  3679  0065                     setDimmerLights_Main@clear:	
  3680                           ; 0 bytes @ 0x45
  3681                           
  3682                           
  3683                           ; 1 bytes @ 0x45
  3684  0065                     	ds	1
  3685  0066                     setDimmerLights_Main@lights:	
  3686  0066                     setRFSW_AdjControl@sw:	
  3687                           ; 1 bytes @ 0x46
  3688                           
  3689                           
  3690                           ; 1 bytes @ 0x46
  3691  0066                     	ds	1
  3692  0067                     ??_setRF_Main:	
  3693  0067                     ??_getRxData:	
  3694                           ; 0 bytes @ 0x47
  3695                           
  3696  0067                     ??_setControl_Lights_Table:	
  3697                           ; 0 bytes @ 0x47
  3698                           
  3699  0067                     ??_DimmerLights_Main:	
  3700                           ; 0 bytes @ 0x47
  3701                           
  3702  0067                     _setSw_Main$4947:	
  3703                           ; 0 bytes @ 0x47
  3704                           
  3705                           
  3706                           ; 1 bytes @ 0x47
  3707  0067                     	ds	1
  3708  0068                     _setRF_Main$4077:	
  3709  0068                     setSw_Main@sw:	
  3710                           ; 1 bytes @ 0x48
  3711                           
  3712                           
  3713                           ; 1 bytes @ 0x48
  3714  0068                     	ds	1
  3715  0069                     ??_RF_Main:	
  3716  0069                     ??_Switch_Main:	
  3717                           ; 0 bytes @ 0x49
  3718                           
  3719  0069                     ??_main:	
  3720                           ; 0 bytes @ 0x49
  3721                           
  3722                           
  3723                           	psect	maintext
  3724  088F                     __pmaintext:	
  3725                           ; 0 bytes @ 0x49
  3726 ;;
  3727 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3728 ;;
  3729 ;; *************** function _main *****************
  3730 ;; Defined at:
  3731 ;;		line 7 in file "../src/main_B1.c"
  3732 ;; Parameters:    Size  Location     Type
  3733 ;;  argc            2    0[BANK2 ] int 
  3734 ;;  argv            2    2[BANK2 ] PTR PTR unsigned char 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;		None
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  2    0[BANK2 ] int 
  3739 ;; Registers used:
  3740 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 17F/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3746 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3749 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0
  3750 ;;Total ram usage:        4 bytes
  3751 ;; Hardware stack levels required when called:   15
  3752 ;; This function calls:
  3753 ;;		_Buzzer_Initialization
  3754 ;;		_Buzzer_Main
  3755 ;;		_CC2500_PowerOnInitial
  3756 ;;		_DelayOff_Initialization
  3757 ;;		_DelayOff_Main
  3758 ;;		_DimmerLights_Initialization
  3759 ;;		_DimmerLights_Main
  3760 ;;		_Flash_Memory_Initialization
  3761 ;;		_Flash_Memory_Main
  3762 ;;		_LED_Initialization
  3763 ;;		_LED_Main
  3764 ;;		_Mcu_Initialization
  3765 ;;		_PowerFault_Initialization
  3766 ;;		_PowerFault_Main
  3767 ;;		_RF_Initialization
  3768 ;;		_RF_Main
  3769 ;;		_Switch_Initialization
  3770 ;;		_Switch_Main
  3771 ;;		_Temp_Initialization
  3772 ;;		_Temp_Main
  3773 ;;		_getPowerFault_AD
  3774 ;;		_getTemp_AD
  3775 ;;		_myMain_Initialization
  3776 ;;		_my_MainTime
  3777 ;; This function is called by:
  3778 ;;		Startup code after reset
  3779 ;; This function uses a non-reentrant model
  3780 ;;
  3781                           
  3782                           
  3783                           ;psect for function _main
  3784  088F                     _main:	
  3785                           
  3786                           ;main_B1.c: 8: myMain_Initialization();
  3787                           
  3788                           ;incstack = 0
  3789                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3790  088F  319F  27A1  3188   	fcall	_myMain_Initialization
  3791                           
  3792                           ;main_B1.c: 9: Mcu_Initialization();
  3793  0892  319F  2765  3188   	fcall	_Mcu_Initialization
  3794                           
  3795                           ;main_B1.c: 10: Flash_Memory_Initialization();
  3796  0895  3184  2422  3188   	fcall	_Flash_Memory_Initialization
  3797                           
  3798                           ;main_B1.c: 11: LED_Initialization();
  3799  0898  319E  26FB  3188   	fcall	_LED_Initialization
  3800                           
  3801                           ;main_B1.c: 12: Buzzer_Initialization();
  3802  089B  319D  25EB  3188   	fcall	_Buzzer_Initialization
  3803                           
  3804                           ;main_B1.c: 14: ;;
  3805                           ;main_B1.c: 15: Temp_Initialization();
  3806  089E  319D  25FD  3188   	fcall	_Temp_Initialization
  3807                           
  3808                           ;main_B1.c: 16: ;;
  3809                           ;main_B1.c: 17: PowerFault_Initialization();
  3810  08A1  319D  25EE  3188   	fcall	_PowerFault_Initialization
  3811                           
  3812                           ;main_B1.c: 18: DelayOff_Initialization();
  3813  08A4  319E  2613  3188   	fcall	_DelayOff_Initialization
  3814                           
  3815                           ;main_B1.c: 20: DimmerLights_Initialization();
  3816  08A7  319F  2720  3188   	fcall	_DimmerLights_Initialization
  3817                           
  3818                           ;main_B1.c: 21: ;;
  3819                           ;main_B1.c: 22: ;;
  3820                           ;main_B1.c: 23: ;;
  3821                           ;main_B1.c: 24: Switch_Initialization();
  3822  08AA  319E  2684  3188   	fcall	_Switch_Initialization
  3823                           
  3824                           ;main_B1.c: 25: RF_Initialization();
  3825  08AD  319D  25F4  3188   	fcall	_RF_Initialization
  3826                           
  3827                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  3828  08B0  3190  20D6  3188   	fcall	_CC2500_PowerOnInitial
  3829  08B3                     l9253:	
  3830                           ;main_B1.c: 27: ;;
  3831                           ;main_B1.c: 30: while (1) {
  3832                           
  3833                           
  3834                           ;main_B1.c: 32: if (myMain.PowerON) {
  3835  08B3  0021               	movlb	1	; select bank1
  3836  08B4  1C20               	btfss	_myMain^(0+128),0
  3837  08B5  28BE               	goto	l9257
  3838                           
  3839                           ;main_B1.c: 34: ;;
  3840                           ;main_B1.c: 38: ;;
  3841                           ;main_B1.c: 42: getTemp_AD(0x09);
  3842  08B6  3009               	movlw	9
  3843  08B7  3194  2497  3188   	fcall	_getTemp_AD
  3844                           
  3845                           ;main_B1.c: 46: getPowerFault_AD(0x11);
  3846  08BA  3011               	movlw	17
  3847  08BB  3192  22D0  3188   	fcall	_getPowerFault_AD
  3848  08BE                     l9257:	
  3849                           
  3850                           ;main_B1.c: 61: }
  3851                           ;main_B1.c: 64: if (myMain.T0_Timerout) {
  3852  08BE  0021               	movlb	1	; select bank1
  3853  08BF  1CA0               	btfss	_myMain^(0+128),1
  3854  08C0  28B3               	goto	l9253
  3855                           
  3856                           ;main_B1.c: 65: myMain.T0_Timerout = 0;
  3857  08C1  10A0               	bcf	_myMain^(0+128),1
  3858                           
  3859                           ;main_B1.c: 66: my_MainTime();
  3860  08C2  3196  26DA  3188   	fcall	_my_MainTime
  3861                           
  3862                           ;main_B1.c: 67: ;;
  3863                           ;main_B1.c: 68: ;;
  3864                           ;main_B1.c: 69: ;;
  3865                           ;main_B1.c: 70: if (myMain.PowerON) {
  3866  08C5  0021               	movlb	1	; select bank1
  3867  08C6  1C20               	btfss	_myMain^(0+128),0
  3868  08C7  28B3               	goto	l9253
  3869                           
  3870                           ;main_B1.c: 71: Flash_Memory_Main();
  3871  08C8  3191  21A0  3188   	fcall	_Flash_Memory_Main
  3872                           
  3873                           ;main_B1.c: 73: LED_Main();
  3874  08CB  319F  2707  3188   	fcall	_LED_Main
  3875                           
  3876                           ;main_B1.c: 74: Buzzer_Main();
  3877  08CE  3197  2768  3188   	fcall	_Buzzer_Main
  3878                           
  3879                           ;main_B1.c: 76: ;;
  3880                           ;main_B1.c: 77: Temp_Main();
  3881  08D1  319E  2600  3188   	fcall	_Temp_Main
  3882                           
  3883                           ;main_B1.c: 78: ;;
  3884                           ;main_B1.c: 79: PowerFault_Main();
  3885  08D4  319D  25F1  3188   	fcall	_PowerFault_Main
  3886                           
  3887                           ;main_B1.c: 81: ;;
  3888                           ;main_B1.c: 82: DimmerLights_Main();
  3889  08D7  319E  263E  3188   	fcall	_DimmerLights_Main
  3890                           
  3891                           ;main_B1.c: 83: Switch_Main();
  3892  08DA  319E  2623  3188   	fcall	_Switch_Main
  3893                           
  3894                           ;main_B1.c: 84: ;;
  3895                           ;main_B1.c: 85: ;;
  3896                           ;main_B1.c: 87: RF_Main();
  3897  08DD  319D  25F7  3188   	fcall	_RF_Main
  3898                           
  3899                           ;main_B1.c: 88: DelayOff_Main();
  3900  08E0  319E  2617  3188   	fcall	_DelayOff_Main
  3901                           
  3902                           ;main_B1.c: 89: ;;
  3903  08E3  28B3               	goto	l9253
  3904  08E4                     __end_of_main:	
  3905                           ;main_B1.c: 90: }
  3906                           ;main_B1.c: 91: }
  3907                           ;main_B1.c: 109: }
  3908                           ;main_B1.c: 110: return (0);
  3909                           ;	Return value of _main is never used
  3910                           
  3911                           
  3912                           	psect	text1
  3913  16DA                     __ptext1:	
  3914 ;; *************** function _my_MainTime *****************
  3915 ;; Defined at:
  3916 ;;		line 127 in file "../src/main_B1.c"
  3917 ;; Parameters:    Size  Location     Type
  3918 ;;		None
  3919 ;; Auto vars:     Size  Location     Type
  3920 ;;		None
  3921 ;; Return value:  Size  Location     Type
  3922 ;;		None               void
  3923 ;; Registers used:
  3924 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3925 ;; Tracked objects:
  3926 ;;		On entry : 0/0
  3927 ;;		On exit  : 0/0
  3928 ;;		Unchanged: 0/0
  3929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3934 ;;Total ram usage:        0 bytes
  3935 ;; Hardware stack levels used:    1
  3936 ;; Hardware stack levels required when called:    7
  3937 ;; This function calls:
  3938 ;;		_setBuz
  3939 ;;		_setRF_Enable
  3940 ;;		_setSw_Enable
  3941 ;;		_setTemp_Enable
  3942 ;; This function is called by:
  3943 ;;		_main
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           
  3948                           ;psect for function _my_MainTime
  3949  16DA                     _my_MainTime:	
  3950                           
  3951                           ;main_B1.c: 129: if (myMain.PowerON == 0) {
  3952                           
  3953                           ;incstack = 0
  3954                           ; Regs used in _my_MainTime: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3955  16DA  0021               	movlb	1	; select bank1
  3956  16DB  1820               	btfsc	_myMain^(0+128),0
  3957  16DC  2F07               	goto	l9175
  3958                           
  3959                           ;main_B1.c: 130: myMain.PowerCount++;
  3960  16DD  3001               	movlw	1
  3961  16DE  07A1               	addwf	(_myMain^(0+128)+1),f
  3962  16DF  3000               	movlw	0
  3963  16E0  3DA2               	addwfc	((_myMain+1)^(0+128)+1),f
  3964                           
  3965                           ;main_B1.c: 131: if (myMain.PowerCount == 150)
  3966  16E1  3001               	movlw	1
  3967  16E2  3EA0               	addlw	_myMain& (0+255)
  3968  16E3  0086               	movwf	6
  3969  16E4  0187               	clrf	7
  3970  16E5  3F40               	moviw [0]fsr1
  3971  16E6  3A96               	xorlw	150
  3972  16E7  1D03               	skipz
  3973  16E8  2EEB               	goto	u9305
  3974  16E9  3F41               	moviw [1]fsr1
  3975  16EA  3A00               	xorlw	0
  3976  16EB                     u9305:	
  3977  16EB  1D03               	skipz
  3978  16EC  0008               	return
  3979                           
  3980                           ;main_B1.c: 132: {
  3981                           ;main_B1.c: 133: myMain.PowerCount = 0;
  3982  16ED  01A1               	clrf	(_myMain^(0+128)+1)
  3983  16EE  01A2               	clrf	((_myMain+1)^(0+128)+1)
  3984                           
  3985                           ;main_B1.c: 134: myMain.PowerON = 1;
  3986  16EF  1420               	bsf	_myMain^(0+128),0
  3987                           
  3988                           ;main_B1.c: 137: setTemp_Enable(1);
  3989  16F0  3001               	movlw	1
  3990  16F1  319E  2673  3196   	fcall	_setTemp_Enable
  3991                           
  3992                           ;main_B1.c: 141: ;;
  3993                           ;main_B1.c: 147: setBuz(3, 50);
  3994  16F4  3032               	movlw	50
  3995  16F5  0020               	movlb	0	; select bank0
  3996  16F6  00A9               	movwf	setBuz@time
  3997  16F7  3000               	movlw	0
  3998  16F8  00AA               	movwf	setBuz@time+1
  3999  16F9  3003               	movlw	3
  4000  16FA  3189  213B  3196   	fcall	_setBuz
  4001                           
  4002                           ;main_B1.c: 148: myMain.SelfTest = 1;
  4003  16FD  0021               	movlb	1	; select bank1
  4004  16FE  1720               	bsf	_myMain^(0+128),6
  4005                           
  4006                           ;main_B1.c: 150: setSw_Enable(1);
  4007  16FF  3001               	movlw	1
  4008  1700  319F  2774  3196   	fcall	_setSw_Enable
  4009                           
  4010                           ;main_B1.c: 153: setRF_Enable(1);
  4011  1703  3001               	movlw	1
  4012  1704  319F  2748         	fcall	_setRF_Enable
  4013                           
  4014                           ;main_B1.c: 157: }
  4015                           ;main_B1.c: 158: } else {
  4016  1706  0008               	return
  4017  1707                     l9175:	
  4018                           
  4019                           ;main_B1.c: 166: myMain.Count1++;
  4020  1707  3001               	movlw	1
  4021  1708  0021               	movlb	1	; select bank1
  4022  1709  07A5               	addwf	(_myMain^(0+128)+5),f
  4023  170A  3000               	movlw	0
  4024  170B  3DA6               	addwfc	((_myMain+1)^(0+128)+5),f
  4025                           
  4026                           ;main_B1.c: 167: if (myMain.Count1 == 100)
  4027  170C  3005               	movlw	5
  4028  170D  3EA0               	addlw	_myMain& (0+255)
  4029  170E  0086               	movwf	6
  4030  170F  0187               	clrf	7
  4031  1710  3F40               	moviw [0]fsr1
  4032  1711  3A64               	xorlw	100
  4033  1712  1D03               	skipz
  4034  1713  2F16               	goto	u9315
  4035  1714  3F41               	moviw [1]fsr1
  4036  1715  3A00               	xorlw	0
  4037  1716                     u9315:	
  4038  1716  1D03               	skipz
  4039  1717  0008               	return
  4040                           
  4041                           ;main_B1.c: 168: {
  4042                           ;main_B1.c: 169: myMain.Count1 = 0;
  4043  1718  01A5               	clrf	(_myMain^(0+128)+5)
  4044  1719  01A6               	clrf	((_myMain+1)^(0+128)+5)
  4045                           
  4046                           ;main_B1.c: 182: if (myMain.Flag) {
  4047  171A  1DA0               	btfss	_myMain^(0+128),3
  4048  171B  2F1E               	goto	l2541
  4049                           
  4050                           ;main_B1.c: 183: myMain.Flag = 0;
  4051  171C  11A0               	bcf	_myMain^(0+128),3
  4052                           
  4053                           ;main_B1.c: 192: } else {
  4054  171D  0008               	return
  4055  171E                     l2541:	
  4056                           
  4057                           ;main_B1.c: 193: myMain.Flag = 1;
  4058  171E  15A0               	bsf	_myMain^(0+128),3
  4059  171F  0008               	return
  4060  1720                     __end_of_my_MainTime:	
  4061                           
  4062                           	psect	text2
  4063  1E73                     __ptext2:	
  4064 ;; *************** function _setTemp_Enable *****************
  4065 ;; Defined at:
  4066 ;;		line 16 in file "../src/OverTemperature_B1.c"
  4067 ;; Parameters:    Size  Location     Type
  4068 ;;  command         1    wreg     unsigned char 
  4069 ;; Auto vars:     Size  Location     Type
  4070 ;;  command         1    0[BANK0 ] unsigned char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;		None               void
  4073 ;; Registers used:
  4074 ;;		wreg
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;Total ram usage:        1 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    5
  4087 ;; This function calls:
  4088 ;;		Nothing
  4089 ;; This function is called by:
  4090 ;;		_my_MainTime
  4091 ;; This function uses a non-reentrant model
  4092 ;;
  4093                           
  4094                           
  4095                           ;psect for function _setTemp_Enable
  4096  1E73                     _setTemp_Enable:	
  4097                           
  4098                           ;incstack = 0
  4099                           ; Regs used in _setTemp_Enable: [wreg]
  4100                           ;setTemp_Enable@command stored from wreg
  4101  1E73  0020               	movlb	0	; select bank0
  4102  1E74  00A0               	movwf	setTemp_Enable@command
  4103                           
  4104                           ;OverTemperature_B1.c: 17: Temp1.Enable = command;
  4105  1E75  0820               	movf	setTemp_Enable@command,w
  4106  1E76  0021               	movlb	1	; select bank1
  4107  1E77  1055               	bcf	_Temp1^(0+128),0
  4108  1E78  1D03               	skipz
  4109  1E79  1455               	bsf	_Temp1^(0+128),0
  4110  1E7A  0008               	return
  4111  1E7B                     __end_of_setTemp_Enable:	
  4112                           
  4113                           	psect	text3
  4114  1FA1                     __ptext3:	
  4115 ;; *************** function _myMain_Initialization *****************
  4116 ;; Defined at:
  4117 ;;		line 115 in file "../src/main_B1.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;		None               void
  4124 ;; Registers used:
  4125 ;;		wreg, fsr1l, fsr1h
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4133 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4134 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4135 ;;Total ram usage:        1 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    5
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_main
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           
  4146                           ;psect for function _myMain_Initialization
  4147  1FA1                     _myMain_Initialization:	
  4148                           
  4149                           ;main_B1.c: 117: product = &_product;
  4150                           
  4151                           ;incstack = 0
  4152                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4153  1FA1  30A0               	movlw	__product& (0+255)
  4154  1FA2  0020               	movlb	0	; select bank0
  4155  1FA3  00A0               	movwf	??_myMain_Initialization
  4156  1FA4  0820               	movf	??_myMain_Initialization,w
  4157  1FA5  00EE               	movwf	_product
  4158                           
  4159                           ;main_B1.c: 118: product->Data[20] = 209;
  4160  1FA6  30D1               	movlw	209
  4161  1FA7  00A0               	movwf	??_myMain_Initialization
  4162  1FA8  086E               	movf	_product,w
  4163  1FA9  3E14               	addlw	20
  4164  1FAA  0086               	movwf	6
  4165  1FAB  3001               	movlw	1	; select bank2/3
  4166  1FAC  0087               	movwf	7
  4167  1FAD  0820               	movf	??_myMain_Initialization,w
  4168  1FAE  0081               	movwf	1
  4169  1FAF  0008               	return
  4170  1FB0                     __end_of_myMain_Initialization:	
  4171                           
  4172                           	psect	text4
  4173  1497                     __ptext4:	
  4174 ;; *************** function _getTemp_AD *****************
  4175 ;; Defined at:
  4176 ;;		line 33 in file "../src/OverTemperature_B1.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;  channel         1    wreg     unsigned char 
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  channel         1    5[BANK0 ] unsigned char 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;		None               void
  4183 ;; Registers used:
  4184 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4193 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4194 ;;Total ram usage:        2 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    7
  4197 ;; This function calls:
  4198 ;;		_getAD
  4199 ;; This function is called by:
  4200 ;;		_main
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           
  4205                           ;psect for function _getTemp_AD
  4206  1497                     _getTemp_AD:	
  4207                           
  4208                           ;incstack = 0
  4209                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4210                           ;getTemp_AD@channel stored from wreg
  4211  1497  0020               	movlb	0	; select bank0
  4212  1498  00A5               	movwf	getTemp_AD@channel
  4213                           
  4214                           ;OverTemperature_B1.c: 34: if (Temp1.ADtoGO == 1) {
  4215  1499  0021               	movlb	1	; select bank1
  4216  149A  1D55               	btfss	_Temp1^(0+128),2
  4217  149B  0008               	return
  4218                           
  4219                           ;OverTemperature_B1.c: 35: Temp1.ADRES = getAD(channel, 0xf0);
  4220  149C  30F0               	movlw	240
  4221  149D  0020               	movlb	0	; select bank0
  4222  149E  00A4               	movwf	??_getTemp_AD
  4223  149F  0824               	movf	??_getTemp_AD,w
  4224  14A0  00A0               	movwf	getAD@adcon1
  4225  14A1  0825               	movf	getTemp_AD@channel,w
  4226  14A2  3191  21BF  3194   	fcall	_getAD
  4227  14A5  0020               	movlb	0	; select bank0
  4228  14A6  0821               	movf	?_getAD+1,w
  4229  14A7  0021               	movlb	1	; select bank1
  4230  14A8  01E2               	clrf	((_Temp1+1)^(0+128)+12)
  4231  14A9  07E2               	addwf	((_Temp1+1)^(0+128)+12),f
  4232  14AA  0020               	movlb	0	; select bank0
  4233  14AB  0820               	movf	?_getAD,w
  4234  14AC  0021               	movlb	1	; select bank1
  4235  14AD  01E1               	clrf	(_Temp1^(0+128)+12)
  4236  14AE  07E1               	addwf	(_Temp1^(0+128)+12),f
  4237                           
  4238                           ;OverTemperature_B1.c: 36: if (Temp1.ADH[0] < Temp1.ADRES) {
  4239  14AF  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4240  14B0  025E               	subwf	((_Temp1+1)^(0+128)+8),w
  4241  14B1  1D03               	skipz
  4242  14B2  2CB5               	goto	u9255
  4243  14B3  0861               	movf	(_Temp1^(0+128)+12),w
  4244  14B4  025D               	subwf	(_Temp1^(0+128)+8),w
  4245  14B5                     u9255:	
  4246  14B5  1803               	skipnc
  4247  14B6  2CBE               	goto	l9123
  4248                           
  4249                           ;OverTemperature_B1.c: 37: Temp1.ADH[0] = Temp1.ADRES;
  4250  14B7  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4251  14B8  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4252  14B9  07DE               	addwf	((_Temp1+1)^(0+128)+8),f
  4253  14BA  0861               	movf	(_Temp1^(0+128)+12),w
  4254  14BB  01DD               	clrf	(_Temp1^(0+128)+8)
  4255  14BC  07DD               	addwf	(_Temp1^(0+128)+8),f
  4256                           
  4257                           ;OverTemperature_B1.c: 38: } else if (Temp1.ADH[1] < Temp1.ADRES) {
  4258  14BD  0008               	return
  4259  14BE                     l9123:	
  4260  14BE  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4261  14BF  0260               	subwf	((_Temp1+1)^(0+128)+10),w
  4262  14C0  1D03               	skipz
  4263  14C1  2CC4               	goto	u9265
  4264  14C2  0861               	movf	(_Temp1^(0+128)+12),w
  4265  14C3  025F               	subwf	(_Temp1^(0+128)+10),w
  4266  14C4                     u9265:	
  4267  14C4  1803               	skipnc
  4268  14C5  0008               	return
  4269                           
  4270                           ;OverTemperature_B1.c: 39: Temp1.ADH[1] = Temp1.ADRES;
  4271  14C6  0862               	movf	((_Temp1+1)^(0+128)+12),w
  4272  14C7  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4273  14C8  07E0               	addwf	((_Temp1+1)^(0+128)+10),f
  4274  14C9  0861               	movf	(_Temp1^(0+128)+12),w
  4275  14CA  01DF               	clrf	(_Temp1^(0+128)+10)
  4276  14CB  07DF               	addwf	(_Temp1^(0+128)+10),f
  4277  14CC  0008               	return
  4278  14CD                     __end_of_getTemp_AD:	
  4279                           
  4280                           	psect	text5
  4281  12D0                     __ptext5:	
  4282 ;; *************** function _getPowerFault_AD *****************
  4283 ;; Defined at:
  4284 ;;		line 45 in file "../src/PowerFault_B1.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  channel         1    wreg     unsigned char 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;  channel         1    5[BANK0 ] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;		None               void
  4291 ;; Registers used:
  4292 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4302 ;;Total ram usage:        2 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    7
  4305 ;; This function calls:
  4306 ;;		_getAD
  4307 ;; This function is called by:
  4308 ;;		_main
  4309 ;; This function uses a non-reentrant model
  4310 ;;
  4311                           
  4312                           
  4313                           ;psect for function _getPowerFault_AD
  4314  12D0                     _getPowerFault_AD:	
  4315                           
  4316                           ;incstack = 0
  4317                           ; Regs used in _getPowerFault_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4318                           ;getPowerFault_AD@channel stored from wreg
  4319  12D0  0020               	movlb	0	; select bank0
  4320  12D1  00A5               	movwf	getPowerFault_AD@channel
  4321                           
  4322                           ;PowerFault_B1.c: 46: if (PF1.ADtoGO == 1) {
  4323  12D2  0021               	movlb	1	; select bank1
  4324  12D3  1DBE               	btfss	_PF1^(0+128),3
  4325  12D4  0008               	return
  4326                           
  4327                           ;PowerFault_B1.c: 47: PF1.ADRES = getAD(channel, 0xf0);
  4328  12D5  30F0               	movlw	240
  4329  12D6  0020               	movlb	0	; select bank0
  4330  12D7  00A4               	movwf	??_getPowerFault_AD
  4331  12D8  0824               	movf	??_getPowerFault_AD,w
  4332  12D9  00A0               	movwf	getAD@adcon1
  4333  12DA  0825               	movf	getPowerFault_AD@channel,w
  4334  12DB  3191  21BF  3192   	fcall	_getAD
  4335  12DE  0020               	movlb	0	; select bank0
  4336  12DF  0821               	movf	?_getAD+1,w
  4337  12E0  0021               	movlb	1	; select bank1
  4338  12E1  01C5               	clrf	((_PF1+1)^(0+128)+6)
  4339  12E2  07C5               	addwf	((_PF1+1)^(0+128)+6),f
  4340  12E3  0020               	movlb	0	; select bank0
  4341  12E4  0820               	movf	?_getAD,w
  4342  12E5  0021               	movlb	1	; select bank1
  4343  12E6  01C4               	clrf	(_PF1^(0+128)+6)
  4344  12E7  07C4               	addwf	(_PF1^(0+128)+6),f
  4345                           
  4346                           ;PowerFault_B1.c: 48: if (PF1.AD < PF1.ADRES) {
  4347  12E8  0845               	movf	((_PF1+1)^(0+128)+6),w
  4348  12E9  0243               	subwf	((_PF1+1)^(0+128)+4),w
  4349  12EA  1D03               	skipz
  4350  12EB  2AEE               	goto	u9285
  4351  12EC  0844               	movf	(_PF1^(0+128)+6),w
  4352  12ED  0242               	subwf	(_PF1^(0+128)+4),w
  4353  12EE                     u9285:	
  4354  12EE  1803               	skipnc
  4355  12EF  0008               	return
  4356                           
  4357                           ;PowerFault_B1.c: 49: PF1.AD = PF1.ADRES;
  4358  12F0  0845               	movf	((_PF1+1)^(0+128)+6),w
  4359  12F1  01C3               	clrf	((_PF1+1)^(0+128)+4)
  4360  12F2  07C3               	addwf	((_PF1+1)^(0+128)+4),f
  4361  12F3  0844               	movf	(_PF1^(0+128)+6),w
  4362  12F4  01C2               	clrf	(_PF1^(0+128)+4)
  4363  12F5  07C2               	addwf	(_PF1^(0+128)+4),f
  4364  12F6  0008               	return
  4365  12F7                     __end_of_getPowerFault_AD:	
  4366                           
  4367                           	psect	text6
  4368  11BF                     __ptext6:	
  4369 ;; *************** function _getAD *****************
  4370 ;; Defined at:
  4371 ;;		line 343 in file "../src/MCU_B1.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  adcon0          1    wreg     unsigned char 
  4374 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  2    0[BANK0 ] int 
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4386 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4389 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4390 ;;Total ram usage:        4 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    6
  4393 ;; This function calls:
  4394 ;;		_Timeout_Counter
  4395 ;;		_set_TimeoutCleared
  4396 ;; This function is called by:
  4397 ;;		_getTemp_AD
  4398 ;;		_getPowerFault_AD
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           
  4403                           ;psect for function _getAD
  4404  11BF                     _getAD:	
  4405                           
  4406                           ;incstack = 0
  4407                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4408                           ;getAD@adcon0 stored from wreg
  4409  11BF  0020               	movlb	0	; select bank0
  4410  11C0  00A3               	movwf	getAD@adcon0
  4411                           
  4412                           ;MCU_B1.c: 344: ADCON0 = adcon0;
  4413  11C1  0823               	movf	getAD@adcon0,w
  4414  11C2  0021               	movlb	1	; select bank1
  4415  11C3  009D               	movwf	29	;volatile
  4416                           
  4417                           ;MCU_B1.c: 345: ADCON1 = adcon1;
  4418  11C4  0020               	movlb	0	; select bank0
  4419  11C5  0820               	movf	getAD@adcon1,w
  4420  11C6  0021               	movlb	1	; select bank1
  4421  11C7  009E               	movwf	30	;volatile
  4422                           
  4423                           ;MCU_B1.c: 346: GO_nDONE = 1;
  4424  11C8  149D               	bsf	29,1	;volatile
  4425                           
  4426                           ;MCU_B1.c: 347: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4427  11C9  29CD               	goto	l8667
  4428  11CA                     l8665:	
  4429                           
  4430                           ;MCU_B1.c: 348: Timeout_Counter();
  4431  11CA  3190  20C1  3191   	fcall	_Timeout_Counter
  4432  11CD                     l8667:	
  4433  11CD  0021               	movlb	1	; select bank1
  4434  11CE  1C9D               	btfss	29,1	;volatile
  4435  11CF  29D2               	goto	l8671
  4436  11D0  1D2F               	btfss	(_myMain^(0+128)+15),2
  4437  11D1  29CA               	goto	l8665
  4438  11D2                     l8671:	
  4439                           
  4440                           ;MCU_B1.c: 349: };
  4441                           ;MCU_B1.c: 350: set_TimeoutCleared();
  4442  11D2  319E  2627         	fcall	_set_TimeoutCleared
  4443                           
  4444                           ;MCU_B1.c: 351: return ((ADRESH*256)+ADRESL);
  4445  11D4  0021               	movlb	1	; select bank1
  4446  11D5  081C               	movf	28,w	;volatile
  4447  11D6  0020               	movlb	0	; select bank0
  4448  11D7  01A1               	clrf	?_getAD+1
  4449  11D8  07A1               	addwf	?_getAD+1,f
  4450  11D9  0021               	movlb	1	; select bank1
  4451  11DA  081B               	movf	27,w	;volatile
  4452  11DB  0020               	movlb	0	; select bank0
  4453  11DC  01A0               	clrf	?_getAD
  4454  11DD  07A0               	addwf	?_getAD,f
  4455  11DE  0008               	return
  4456  11DF                     __end_of_getAD:	
  4457                           
  4458                           	psect	text7
  4459  1E00                     __ptext7:	
  4460 ;; *************** function _Temp_Main *****************
  4461 ;; Defined at:
  4462 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4463 ;; Parameters:    Size  Location     Type
  4464 ;;		None
  4465 ;; Auto vars:     Size  Location     Type
  4466 ;;		None
  4467 ;; Return value:  Size  Location     Type
  4468 ;;		None               void
  4469 ;; Registers used:
  4470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4471 ;; Tracked objects:
  4472 ;;		On entry : 0/0
  4473 ;;		On exit  : 0/0
  4474 ;;		Unchanged: 0/0
  4475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4480 ;;Total ram usage:        0 bytes
  4481 ;; Hardware stack levels used:    1
  4482 ;; Hardware stack levels required when called:   11
  4483 ;; This function calls:
  4484 ;;		_setTemp_Main
  4485 ;; This function is called by:
  4486 ;;		_main
  4487 ;; This function uses a non-reentrant model
  4488 ;;
  4489                           
  4490                           
  4491                           ;psect for function _Temp_Main
  4492  1E00                     _Temp_Main:	
  4493                           
  4494                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4495                           
  4496                           ;incstack = 0
  4497                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4498  1E00  318E  26F3         	fcall	_setTemp_Main
  4499  1E02  0008               	return
  4500  1E03                     __end_of_Temp_Main:	
  4501                           
  4502                           	psect	text8
  4503  0EF3                     __ptext8:	
  4504 ;; *************** function _setTemp_Main *****************
  4505 ;; Defined at:
  4506 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;		None
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;		None               void
  4513 ;; Registers used:
  4514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4522 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;Total ram usage:        1 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:   10
  4527 ;; This function calls:
  4528 ;;		_getPF_Safe
  4529 ;;		_setOverTemp_Exceptions
  4530 ;; This function is called by:
  4531 ;;		_Temp_Main
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           
  4536                           ;psect for function _setTemp_Main
  4537  0EF3                     _setTemp_Main:	
  4538                           
  4539                           ;OverTemperature_B1.c: 58: if (Temp1.Enable == 1) {
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4543  0EF3  0021               	movlb	1	; select bank1
  4544  0EF4  1C55               	btfss	_Temp1^(0+128),0
  4545  0EF5  0008               	return
  4546                           
  4547                           ;OverTemperature_B1.c: 59: if (Temp1.ADtoGO == 0) {
  4548  0EF6  1955               	btfsc	_Temp1^(0+128),2
  4549  0EF7  2F15               	goto	l8721
  4550                           
  4551                           ;OverTemperature_B1.c: 60: Temp1.Time++;
  4552  0EF8  3001               	movlw	1
  4553  0EF9  07D6               	addwf	(_Temp1^(0+128)+1),f
  4554  0EFA  3000               	movlw	0
  4555  0EFB  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4556                           
  4557                           ;OverTemperature_B1.c: 62: {
  4558                           ;OverTemperature_B1.c: 63: if (1 == 1 && getPF_Safe() == 1) {
  4559  0EFC  3001               	movlw	1
  4560  0EFD  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4561  0EFE  30F4               	movlw	244
  4562  0EFF  1903               	skipnz
  4563  0F00  0256               	subwf	(_Temp1^(0+128)+1),w
  4564  0F01  1C03               	skipc
  4565  0F02  0008               	return
  4566  0F03  319E  266B  318E   	fcall	_getPF_Safe
  4567  0F06  3A01               	xorlw	1
  4568  0F07  1D03               	skipz
  4569  0F08  2F0F               	goto	l8719
  4570                           
  4571                           ;OverTemperature_B1.c: 64: Temp1.Time = 0;
  4572  0F09  0021               	movlb	1	; select bank1
  4573  0F0A  01D6               	clrf	(_Temp1^(0+128)+1)
  4574  0F0B  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4575                           
  4576                           ;OverTemperature_B1.c: 65: Temp1.ADtoGO = 1;
  4577  0F0C  1555               	bsf	_Temp1^(0+128),2
  4578                           
  4579                           ;OverTemperature_B1.c: 66: Temp1.Safe = 0;
  4580  0F0D  1255               	bcf	_Temp1^(0+128),4
  4581                           
  4582                           ;OverTemperature_B1.c: 68: } else {
  4583  0F0E  0008               	return
  4584  0F0F                     l8719:	
  4585                           
  4586                           ;OverTemperature_B1.c: 69: Temp1.Time = 1000;
  4587  0F0F  30E8               	movlw	232
  4588  0F10  0021               	movlb	1	; select bank1
  4589  0F11  00D6               	movwf	(_Temp1^(0+128)+1)
  4590  0F12  3003               	movlw	3
  4591  0F13  00D7               	movwf	(_Temp1^(0+128)+2)
  4592                           
  4593                           ;OverTemperature_B1.c: 70: }
  4594                           ;OverTemperature_B1.c: 71: }
  4595                           ;OverTemperature_B1.c: 72: } else {
  4596  0F14  0008               	return
  4597  0F15                     l8721:	
  4598                           
  4599                           ;OverTemperature_B1.c: 73: Temp1.Time++;
  4600  0F15  3001               	movlw	1
  4601  0F16  07D6               	addwf	(_Temp1^(0+128)+1),f
  4602  0F17  3000               	movlw	0
  4603  0F18  3DD7               	addwfc	((_Temp1+1)^(0+128)+1),f
  4604                           
  4605                           ;OverTemperature_B1.c: 74: if (Temp1.Time >= 4) {
  4606  0F19  3000               	movlw	0
  4607  0F1A  0257               	subwf	((_Temp1+1)^(0+128)+1),w
  4608  0F1B  3004               	movlw	4
  4609  0F1C  1903               	skipnz
  4610  0F1D  0256               	subwf	(_Temp1^(0+128)+1),w
  4611  0F1E  1C03               	skipc
  4612  0F1F  0008               	return
  4613                           
  4614                           ;OverTemperature_B1.c: 75: Temp1.Time = 0;
  4615  0F20  01D6               	clrf	(_Temp1^(0+128)+1)
  4616  0F21  01D7               	clrf	((_Temp1+1)^(0+128)+1)
  4617                           
  4618                           ;OverTemperature_B1.c: 76: Temp1.ADtoGO = 0;
  4619  0F22  1155               	bcf	_Temp1^(0+128),2
  4620                           
  4621                           ;OverTemperature_B1.c: 77: Temp1.AD = Temp1.ADH[1];
  4622  0F23  0860               	movf	((_Temp1+1)^(0+128)+10),w
  4623  0F24  01DC               	clrf	((_Temp1+1)^(0+128)+6)
  4624  0F25  07DC               	addwf	((_Temp1+1)^(0+128)+6),f
  4625  0F26  085F               	movf	(_Temp1^(0+128)+10),w
  4626  0F27  01DB               	clrf	(_Temp1^(0+128)+6)
  4627  0F28  07DB               	addwf	(_Temp1^(0+128)+6),f
  4628                           
  4629                           ;OverTemperature_B1.c: 78: if (Temp1.ERROR == 1) {
  4630  0F29  1CD5               	btfss	_Temp1^(0+128),1
  4631  0F2A  2F42               	goto	l8743
  4632                           
  4633                           ;OverTemperature_B1.c: 79: if (Temp1.AD >= 600) {
  4634  0F2B  3002               	movlw	2
  4635  0F2C  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4636  0F2D  3058               	movlw	88
  4637  0F2E  1903               	skipnz
  4638  0F2F  025B               	subwf	(_Temp1^(0+128)+6),w
  4639  0F30  1C03               	skipc
  4640  0F31  2F59               	goto	l8753
  4641                           
  4642                           ;OverTemperature_B1.c: 80: Temp1.Count++;
  4643  0F32  3001               	movlw	1
  4644  0F33  0020               	movlb	0	; select bank0
  4645  0F34  00B1               	movwf	??_setTemp_Main
  4646  0F35  0831               	movf	??_setTemp_Main,w
  4647  0F36  0021               	movlb	1	; select bank1
  4648  0F37  07D8               	addwf	(_Temp1^(0+128)+3),f
  4649                           
  4650                           ;OverTemperature_B1.c: 81: if (Temp1.Count >= 3) {
  4651  0F38  3003               	movlw	3
  4652  0F39  0258               	subwf	(_Temp1^(0+128)+3),w
  4653  0F3A  1C03               	skipc
  4654  0F3B  2F5B               	goto	l8755
  4655                           
  4656                           ;OverTemperature_B1.c: 82: Temp1.Count = 0;
  4657  0F3C  01D8               	clrf	(_Temp1^(0+128)+3)
  4658                           
  4659                           ;OverTemperature_B1.c: 83: setOverTemp_Exceptions(0);
  4660  0F3D  3000               	movlw	0
  4661  0F3E  3196  2694  318E   	fcall	_setOverTemp_Exceptions
  4662                           
  4663                           ;OverTemperature_B1.c: 84: }
  4664                           ;OverTemperature_B1.c: 85: } else {
  4665  0F41  2F5B               	goto	l8755
  4666  0F42                     l8743:	
  4667                           ;OverTemperature_B1.c: 87: }
  4668                           ;OverTemperature_B1.c: 88: } else {
  4669                           
  4670                           ;OverTemperature_B1.c: 86: Temp1.Count = 0;
  4671                           
  4672                           
  4673                           ;OverTemperature_B1.c: 89: if (Temp1.AD <= 550) {
  4674  0F42  3002               	movlw	2
  4675  0F43  025C               	subwf	((_Temp1+1)^(0+128)+6),w
  4676  0F44  3027               	movlw	39
  4677  0F45  1903               	skipnz
  4678  0F46  025B               	subwf	(_Temp1^(0+128)+6),w
  4679  0F47  1803               	skipnc
  4680  0F48  2F59               	goto	l8753
  4681                           
  4682                           ;OverTemperature_B1.c: 90: Temp1.Count++;
  4683  0F49  3001               	movlw	1
  4684  0F4A  0020               	movlb	0	; select bank0
  4685  0F4B  00B1               	movwf	??_setTemp_Main
  4686  0F4C  0831               	movf	??_setTemp_Main,w
  4687  0F4D  0021               	movlb	1	; select bank1
  4688  0F4E  07D8               	addwf	(_Temp1^(0+128)+3),f
  4689                           
  4690                           ;OverTemperature_B1.c: 91: if (Temp1.Count >= 3) {
  4691  0F4F  3003               	movlw	3
  4692  0F50  0258               	subwf	(_Temp1^(0+128)+3),w
  4693  0F51  1C03               	skipc
  4694  0F52  2F5B               	goto	l8755
  4695                           
  4696                           ;OverTemperature_B1.c: 92: Temp1.Count = 0;
  4697  0F53  01D8               	clrf	(_Temp1^(0+128)+3)
  4698                           
  4699                           ;OverTemperature_B1.c: 93: setOverTemp_Exceptions(1);
  4700  0F54  3001               	movlw	1
  4701  0F55  3196  2694  318E   	fcall	_setOverTemp_Exceptions
  4702                           
  4703                           ;OverTemperature_B1.c: 94: }
  4704                           ;OverTemperature_B1.c: 95: } else {
  4705  0F58  2F5B               	goto	l8755
  4706  0F59                     l8753:	
  4707                           
  4708                           ;OverTemperature_B1.c: 96: Temp1.Count = 0;
  4709  0F59  0021               	movlb	1	; select bank1
  4710  0F5A  01D8               	clrf	(_Temp1^(0+128)+3)
  4711  0F5B                     l8755:	
  4712                           
  4713                           ;OverTemperature_B1.c: 97: }
  4714                           ;OverTemperature_B1.c: 98: }
  4715                           ;OverTemperature_B1.c: 99: if (Temp1.ERROR == 0) {
  4716  0F5B  0021               	movlb	1	; select bank1
  4717  0F5C  1CD5               	btfss	_Temp1^(0+128),1
  4718                           
  4719                           ;OverTemperature_B1.c: 100: Temp1.Safe = 1;
  4720  0F5D  1655               	bsf	_Temp1^(0+128),4
  4721                           
  4722                           ;OverTemperature_B1.c: 101: }
  4723                           ;OverTemperature_B1.c: 102: product->Data[24]=Temp1.AD >> 8;
  4724  0F5E  085C               	movf	((_Temp1+1)^(0+128)+6),w
  4725  0F5F  0020               	movlb	0	; select bank0
  4726  0F60  00B1               	movwf	??_setTemp_Main
  4727  0F61  086E               	movf	_product,w
  4728  0F62  3E18               	addlw	24
  4729  0F63  0086               	movwf	6
  4730  0F64  3001               	movlw	1	; select bank2/3
  4731  0F65  0087               	movwf	7
  4732  0F66  0831               	movf	??_setTemp_Main,w
  4733  0F67  0081               	movwf	1
  4734                           
  4735                           ;OverTemperature_B1.c: 103: product->Data[25]=Temp1.AD;
  4736  0F68  0021               	movlb	1	; select bank1
  4737  0F69  085B               	movf	(_Temp1^(0+128)+6),w
  4738  0F6A  0020               	movlb	0	; select bank0
  4739  0F6B  00B1               	movwf	??_setTemp_Main
  4740  0F6C  086E               	movf	_product,w
  4741  0F6D  3E19               	addlw	25
  4742  0F6E  0086               	movwf	6
  4743  0F6F  3001               	movlw	1	; select bank2/3
  4744  0F70  0087               	movwf	7
  4745  0F71  0831               	movf	??_setTemp_Main,w
  4746  0F72  0081               	movwf	1
  4747                           
  4748                           ;OverTemperature_B1.c: 106: Temp1.ADH[0] = 0;
  4749  0F73  0021               	movlb	1	; select bank1
  4750  0F74  01DD               	clrf	(_Temp1^(0+128)+8)
  4751  0F75  01DE               	clrf	((_Temp1+1)^(0+128)+8)
  4752                           
  4753                           ;OverTemperature_B1.c: 107: Temp1.ADH[1] = 0;
  4754  0F76  01DF               	clrf	(_Temp1^(0+128)+10)
  4755  0F77  01E0               	clrf	((_Temp1+1)^(0+128)+10)
  4756  0F78  0008               	return
  4757  0F79                     __end_of_setTemp_Main:	
  4758                           
  4759                           	psect	text9
  4760  1694                     __ptext9:	
  4761 ;; *************** function _setOverTemp_Exceptions *****************
  4762 ;; Defined at:
  4763 ;;		line 114 in file "../src/OverTemperature_B1.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  command         1    wreg     unsigned char 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  command         1   16[BANK0 ] unsigned char 
  4768 ;;  i               1   15[BANK0 ] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4779 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4780 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;Total ram usage:        3 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    9
  4785 ;; This function calls:
  4786 ;;		_DimmerLights_Exceptions
  4787 ;;		_setBuz
  4788 ;;		_setLED
  4789 ;;		_setRF_Enable
  4790 ;;		_setSw_Enable
  4791 ;; This function is called by:
  4792 ;;		_setTemp_Main
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _setOverTemp_Exceptions
  4798  1694                     _setOverTemp_Exceptions:	
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _setOverTemp_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  4802                           ;setOverTemp_Exceptions@command stored from wreg
  4803  1694  0020               	movlb	0	; select bank0
  4804  1695  00B0               	movwf	setOverTemp_Exceptions@command
  4805                           
  4806                           ;OverTemperature_B1.c: 115: char i = command == 1 ? 0 : 1;
  4807  1696  0830               	movf	setOverTemp_Exceptions@command,w
  4808  1697  3A01               	xorlw	1
  4809  1698  3000               	movlw	0
  4810  1699  1D03               	skipz
  4811  169A  3001               	movlw	1
  4812  169B  00AE               	movwf	??_setOverTemp_Exceptions
  4813  169C  082E               	movf	??_setOverTemp_Exceptions,w
  4814  169D  00AF               	movwf	setOverTemp_Exceptions@i
  4815                           
  4816                           ;OverTemperature_B1.c: 116: Temp1.ERROR = command;
  4817  169E  0830               	movf	setOverTemp_Exceptions@command,w
  4818  169F  0021               	movlb	1	; select bank1
  4819  16A0  10D5               	bcf	_Temp1^(0+128),1
  4820  16A1  1D03               	skipz
  4821  16A2  14D5               	bsf	_Temp1^(0+128),1
  4822                           
  4823                           ;OverTemperature_B1.c: 117: Temp1.Safe = i;
  4824  16A3  0020               	movlb	0	; select bank0
  4825  16A4  082F               	movf	setOverTemp_Exceptions@i,w
  4826  16A5  0021               	movlb	1	; select bank1
  4827  16A6  1255               	bcf	_Temp1^(0+128),4
  4828  16A7  1D03               	skipz
  4829  16A8  1655               	bsf	_Temp1^(0+128),4
  4830                           
  4831                           ;OverTemperature_B1.c: 118: if (command == 1) {
  4832  16A9  0020               	movlb	0	; select bank0
  4833  16AA  0830               	movf	setOverTemp_Exceptions@command,w
  4834  16AB  3A01               	xorlw	1
  4835  16AC  1D03               	skipz
  4836  16AD  2EBA               	goto	l8315
  4837                           
  4838                           ;OverTemperature_B1.c: 119: DimmerLights_Exceptions(1);
  4839  16AE  3001               	movlw	1
  4840  16AF  3195  2543  3196   	fcall	_DimmerLights_Exceptions
  4841                           
  4842                           ;OverTemperature_B1.c: 121: setLED(2, 1);
  4843  16B2  0020               	movlb	0	; select bank0
  4844  16B3  01A1               	clrf	setLED@command
  4845  16B4  0AA1               	incf	setLED@command,f
  4846  16B5  3002               	movlw	2
  4847  16B6  318A  224A  3196   	fcall	_setLED
  4848                           
  4849                           ;OverTemperature_B1.c: 123: } else if (command == 0) {
  4850  16B9  2EC6               	goto	l8319
  4851  16BA                     l8315:	
  4852  16BA  0020               	movlb	0	; select bank0
  4853  16BB  08B0               	movf	setOverTemp_Exceptions@command,f
  4854  16BC  1D03               	skipz
  4855  16BD  2EC6               	goto	l8319
  4856                           
  4857                           ;OverTemperature_B1.c: 124: setBuz(2, 100);
  4858  16BE  3064               	movlw	100
  4859  16BF  00A9               	movwf	setBuz@time
  4860  16C0  3000               	movlw	0
  4861  16C1  00AA               	movwf	setBuz@time+1
  4862  16C2  3002               	movlw	2
  4863  16C3  3189  213B  3196   	fcall	_setBuz
  4864  16C6                     l8319:	
  4865                           
  4866                           ;OverTemperature_B1.c: 125: }
  4867                           ;OverTemperature_B1.c: 128: setLED(99, command + 10);
  4868  16C6  0020               	movlb	0	; select bank0
  4869  16C7  0830               	movf	setOverTemp_Exceptions@command,w
  4870  16C8  3E0A               	addlw	10
  4871  16C9  00AE               	movwf	??_setOverTemp_Exceptions
  4872  16CA  082E               	movf	??_setOverTemp_Exceptions,w
  4873  16CB  00A1               	movwf	setLED@command
  4874  16CC  3063               	movlw	99
  4875  16CD  318A  224A  3196   	fcall	_setLED
  4876                           
  4877                           ;OverTemperature_B1.c: 130: setSw_Enable(i);
  4878  16D0  0020               	movlb	0	; select bank0
  4879  16D1  082F               	movf	setOverTemp_Exceptions@i,w
  4880  16D2  319F  2774  3196   	fcall	_setSw_Enable
  4881                           
  4882                           ;OverTemperature_B1.c: 132: setRF_Enable(i);
  4883  16D5  0020               	movlb	0	; select bank0
  4884  16D6  082F               	movf	setOverTemp_Exceptions@i,w
  4885  16D7  319F  2748         	fcall	_setRF_Enable
  4886  16D9  0008               	return
  4887  16DA                     __end_of_setOverTemp_Exceptions:	
  4888                           
  4889                           	psect	text10
  4890  1E6B                     __ptext10:	
  4891 ;; *************** function _getPF_Safe *****************
  4892 ;; Defined at:
  4893 ;;		line 34 in file "../src/PowerFault_B1.c"
  4894 ;; Parameters:    Size  Location     Type
  4895 ;;		None
  4896 ;; Auto vars:     Size  Location     Type
  4897 ;;  i               1    0[BANK0 ] unsigned char 
  4898 ;; Return value:  Size  Location     Type
  4899 ;;                  1    wreg      unsigned char 
  4900 ;; Registers used:
  4901 ;;		wreg, status,2
  4902 ;; Tracked objects:
  4903 ;;		On entry : 0/0
  4904 ;;		On exit  : 0/0
  4905 ;;		Unchanged: 0/0
  4906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4908 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4910 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4911 ;;Total ram usage:        1 bytes
  4912 ;; Hardware stack levels used:    1
  4913 ;; Hardware stack levels required when called:    5
  4914 ;; This function calls:
  4915 ;;		Nothing
  4916 ;; This function is called by:
  4917 ;;		_setTemp_Main
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           
  4922                           ;psect for function _getPF_Safe
  4923  1E6B                     _getPF_Safe:	
  4924                           
  4925                           ;PowerFault_B1.c: 35: char i = PF1.Safe;
  4926                           
  4927                           ;incstack = 0
  4928                           ; Regs used in _getPF_Safe: [wreg+status,2]
  4929  1E6B  3000               	movlw	0
  4930  1E6C  0021               	movlb	1	; select bank1
  4931  1E6D  193E               	btfsc	_PF1^(0+128),2
  4932  1E6E  3001               	movlw	1
  4933  1E6F  0020               	movlb	0	; select bank0
  4934  1E70  00A0               	movwf	getPF_Safe@i
  4935                           
  4936                           ;PowerFault_B1.c: 36: return i;
  4937  1E71  0820               	movf	getPF_Safe@i,w
  4938  1E72  0008               	return
  4939  1E73                     __end_of_getPF_Safe:	
  4940                           
  4941                           	psect	text11
  4942  1DFD                     __ptext11:	
  4943 ;; *************** function _Temp_Initialization *****************
  4944 ;; Defined at:
  4945 ;;		line 9 in file "../src/OverTemperature_B1.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;		None               void
  4952 ;; Registers used:
  4953 ;;		status,2, status,0, pclath, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4963 ;;Total ram usage:        0 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:    6
  4966 ;; This function calls:
  4967 ;;		_setTemp_Initialization
  4968 ;; This function is called by:
  4969 ;;		_main
  4970 ;; This function uses a non-reentrant model
  4971 ;;
  4972                           
  4973                           
  4974                           ;psect for function _Temp_Initialization
  4975  1DFD                     _Temp_Initialization:	
  4976                           
  4977                           ;OverTemperature_B1.c: 11: setTemp_Initialization();
  4978                           
  4979                           ;incstack = 0
  4980                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  4981  1DFD  319D  25FA         	fcall	_setTemp_Initialization
  4982  1DFF  0008               	return
  4983  1E00                     __end_of_Temp_Initialization:	
  4984                           
  4985                           	psect	text12
  4986  1DFA                     __ptext12:	
  4987 ;; *************** function _setTemp_Initialization *****************
  4988 ;; Defined at:
  4989 ;;		line 45 in file "../src/OverTemperature_B1.c"
  4990 ;; Parameters:    Size  Location     Type
  4991 ;;		None
  4992 ;; Auto vars:     Size  Location     Type
  4993 ;;		None
  4994 ;; Return value:  Size  Location     Type
  4995 ;;		None               void
  4996 ;; Registers used:
  4997 ;;		None
  4998 ;; Tracked objects:
  4999 ;;		On entry : 0/0
  5000 ;;		On exit  : 0/0
  5001 ;;		Unchanged: 0/0
  5002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5007 ;;Total ram usage:        0 bytes
  5008 ;; Hardware stack levels used:    1
  5009 ;; Hardware stack levels required when called:    5
  5010 ;; This function calls:
  5011 ;;		Nothing
  5012 ;; This function is called by:
  5013 ;;		_Temp_Initialization
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           
  5018                           ;psect for function _setTemp_Initialization
  5019  1DFA                     _setTemp_Initialization:	
  5020                           
  5021                           ;OverTemperature_B1.c: 46: Temp1.Safe = 1;
  5022                           
  5023                           ;incstack = 0
  5024                           ; Regs used in _setTemp_Initialization: []
  5025  1DFA  0021               	movlb	1	; select bank1
  5026  1DFB  1655               	bsf	_Temp1^(0+128),4
  5027  1DFC  0008               	return
  5028  1DFD                     __end_of_setTemp_Initialization:	
  5029                           
  5030                           	psect	text13
  5031  1E23                     __ptext13:	
  5032 ;; *************** function _Switch_Main *****************
  5033 ;; Defined at:
  5034 ;;		line 67 in file "../src/Switch_B1.c"
  5035 ;; Parameters:    Size  Location     Type
  5036 ;;		None
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;		None
  5039 ;; Return value:  Size  Location     Type
  5040 ;;		None               void
  5041 ;; Registers used:
  5042 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        0 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:   11
  5055 ;; This function calls:
  5056 ;;		_setSw_Main
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _Switch_Main
  5064  1E23                     _Switch_Main:	
  5065                           
  5066                           ;Switch_B1.c: 69: setSw_Main(1);
  5067                           
  5068                           ;incstack = 0
  5069                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5070  1E23  3001               	movlw	1
  5071  1E24  3181  21F1         	fcall	_setSw_Main
  5072  1E26  0008               	return
  5073  1E27                     __end_of_Switch_Main:	
  5074                           
  5075                           	psect	text14
  5076  01F1                     __ptext14:	
  5077 ;; *************** function _setSw_Main *****************
  5078 ;; Defined at:
  5079 ;;		line 117 in file "../src/Switch_B1.c"
  5080 ;; Parameters:    Size  Location     Type
  5081 ;;  sw              1    wreg     unsigned char 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  sw              1   72[BANK0 ] unsigned char 
  5084 ;; Return value:  Size  Location     Type
  5085 ;;		None               void
  5086 ;; Registers used:
  5087 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5088 ;; Tracked objects:
  5089 ;;		On entry : 0/0
  5090 ;;		On exit  : 0/0
  5091 ;;		Unchanged: 0/0
  5092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5097 ;;Total ram usage:        4 bytes
  5098 ;; Hardware stack levels used:    1
  5099 ;; Hardware stack levels required when called:   10
  5100 ;; This function calls:
  5101 ;;		_SwPointSelect
  5102 ;;		_Sw_DimmerAdjFunc
  5103 ;;		_Sw_DimmerOffFunc
  5104 ;;		_Sw_DimmerOnFunc
  5105 ;;		_setBuz
  5106 ;;		_setRF_Learn
  5107 ;; This function is called by:
  5108 ;;		_Switch_Main
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           
  5113                           ;psect for function _setSw_Main
  5114  01F1                     _setSw_Main:	
  5115                           
  5116                           ;incstack = 0
  5117                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5118                           ;setSw_Main@sw stored from wreg
  5119  01F1  0020               	movlb	0	; select bank0
  5120  01F2  00E8               	movwf	setSw_Main@sw
  5121                           
  5122                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5123  01F3  0868               	movf	setSw_Main@sw,w
  5124  01F4  319E  26CC  3181   	fcall	_SwPointSelect
  5125                           
  5126                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5127  01F7  0020               	movlb	0	; select bank0
  5128  01F8  086D               	movf	_Sw,w
  5129  01F9  0086               	movwf	6
  5130  01FA  3001               	movlw	1	; select bank2/3
  5131  01FB  0087               	movwf	7
  5132  01FC  1C01               	btfss	1,0
  5133  01FD  0008               	return
  5134                           
  5135                           ;Switch_B1.c: 139: Sw->Touch = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  5136  01FE  01E7               	clrf	_setSw_Main$4947
  5137  01FF  0AE7               	incf	_setSw_Main$4947,f
  5138  0200  1F0C               	btfss	12,6	;volatile
  5139  0201  1A0C               	btfsc	12,4	;volatile
  5140  0202  2A07               	goto	l8915
  5141  0203  1C0C               	btfss	12,0	;volatile
  5142  0204  188D               	btfsc	13,1	;volatile
  5143  0205  2A07               	goto	l8915
  5144  0206  01E7               	clrf	_setSw_Main$4947
  5145  0207                     l8915:	
  5146  0207  086D               	movf	_Sw,w
  5147  0208  0086               	movwf	6
  5148  0209  3001               	movlw	1	; select bank2/3
  5149  020A  0087               	movwf	7
  5150  020B  0867               	movf	_setSw_Main$4947,w
  5151  020C  1081               	bcf	1,1
  5152  020D  1D03               	skipz
  5153  020E  1481               	bsf	1,1
  5154                           
  5155                           ;Switch_B1.c: 141: if (Sw->Touch == 1) {
  5156  020F  086D               	movf	_Sw,w
  5157  0210  0086               	movwf	6
  5158  0211  3001               	movlw	1	; select bank2/3
  5159  0212  0087               	movwf	7
  5160  0213  1C81               	btfss	1,1
  5161  0214  2AD9               	goto	l8965
  5162                           
  5163                           ;Switch_B1.c: 142: if (Sw->Debounce == 0) {
  5164  0215  086D               	movf	_Sw,w
  5165  0216  0086               	movwf	6
  5166  0217  3001               	movlw	1	; select bank2/3
  5167  0218  0087               	movwf	7
  5168  0219  1901               	btfsc	1,2
  5169  021A  2A3C               	goto	l8931
  5170                           
  5171                           ;Switch_B1.c: 143: Sw->DebounceTime++;
  5172  021B  3001               	movlw	1
  5173  021C  00E5               	movwf	??_setSw_Main
  5174  021D  086D               	movf	_Sw,w
  5175  021E  3E02               	addlw	2
  5176  021F  0086               	movwf	6
  5177  0220  3001               	movlw	1	; select bank2/3
  5178  0221  0087               	movwf	7
  5179  0222  0865               	movf	??_setSw_Main,w
  5180  0223  0781               	addwf	1,f
  5181                           
  5182                           ;Switch_B1.c: 144: if (Sw->DebounceTime >= 5) {
  5183  0224  086D               	movf	_Sw,w
  5184  0225  3E02               	addlw	2
  5185  0226  0086               	movwf	6
  5186  0227  3001               	movlw	1	; select bank2/3
  5187  0228  0087               	movwf	7
  5188  0229  3005               	movlw	5
  5189  022A  0201               	subwf	1,w
  5190  022B  1C03               	skipc
  5191  022C  0008               	return
  5192                           
  5193                           ;Switch_B1.c: 145: Sw->DebounceTime = 0;
  5194  022D  086D               	movf	_Sw,w
  5195  022E  3E02               	addlw	2
  5196  022F  0086               	movwf	6
  5197  0230  3001               	movlw	1	; select bank2/3
  5198  0231  0087               	movwf	7
  5199  0232  0181               	clrf	1
  5200                           
  5201                           ;Switch_B1.c: 146: Sw->Debounce = 1;
  5202  0233  086D               	movf	_Sw,w
  5203  0234  0086               	movwf	6
  5204  0235  3001               	movlw	1	; select bank2/3
  5205  0236  0087               	movwf	7
  5206  0237  1501               	bsf	1,2
  5207                           
  5208                           ;Switch_B1.c: 149: Sw_DimmerOnFunc(sw);
  5209  0238  0868               	movf	setSw_Main@sw,w
  5210  0239  3188  20E4         	fcall	_Sw_DimmerOnFunc
  5211                           
  5212                           ;Switch_B1.c: 173: }
  5213                           ;Switch_B1.c: 174: } else {
  5214  023B  0008               	return
  5215  023C                     l8931:	
  5216                           
  5217                           ;Switch_B1.c: 175: if (Sw->Hold1 == 0) {
  5218  023C  0020               	movlb	0	; select bank0
  5219  023D  086D               	movf	_Sw,w
  5220  023E  0086               	movwf	6
  5221  023F  3001               	movlw	1	; select bank2/3
  5222  0240  0087               	movwf	7
  5223  0241  1981               	btfsc	1,3
  5224  0242  2A69               	goto	l8941
  5225                           
  5226                           ;Switch_B1.c: 176: Sw->Hold1Time++;
  5227  0243  086D               	movf	_Sw,w
  5228  0244  3E03               	addlw	3
  5229  0245  0086               	movwf	6
  5230  0246  3001               	movlw	1	; select bank2/3
  5231  0247  0087               	movwf	7
  5232  0248  3001               	movlw	1
  5233  0249  0781               	addwf	1,f
  5234  024A  3141               	addfsr 1,1
  5235  024B  1803               	skipnc
  5236  024C  0A81               	incf	1,f
  5237                           
  5238                           ;Switch_B1.c: 177: if (Sw->Hold1Time >= 150) {
  5239  024D  086D               	movf	_Sw,w
  5240  024E  3E03               	addlw	3
  5241  024F  0086               	movwf	6
  5242  0250  3001               	movlw	1	; select bank2/3
  5243  0251  0087               	movwf	7
  5244  0252  3F40               	moviw [0]fsr1
  5245  0253  00E5               	movwf	??_setSw_Main
  5246  0254  3F41               	moviw [1]fsr1
  5247  0255  00E6               	movwf	??_setSw_Main+1
  5248  0256  3000               	movlw	0
  5249  0257  0266               	subwf	??_setSw_Main+1,w
  5250  0258  3096               	movlw	150
  5251  0259  1903               	skipnz
  5252  025A  0265               	subwf	??_setSw_Main,w
  5253  025B  1C03               	skipc
  5254  025C  0008               	return
  5255                           
  5256                           ;Switch_B1.c: 178: Sw->Hold1Time = 0;
  5257  025D  086D               	movf	_Sw,w
  5258  025E  3E03               	addlw	3
  5259  025F  0086               	movwf	6
  5260  0260  3001               	movlw	1	; select bank2/3
  5261  0261  0087               	movwf	7
  5262  0262  3000               	movlw	0
  5263  0263  3FC0               	movwi [0]fsr1
  5264  0264  3FC1               	movwi [1]fsr1
  5265                           
  5266                           ;Switch_B1.c: 181: Sw_DimmerAdjFunc(sw);
  5267  0265  0868               	movf	setSw_Main@sw,w
  5268  0266  3193  23FF         	fcall	_Sw_DimmerAdjFunc
  5269                           
  5270                           ;Switch_B1.c: 184: }
  5271                           ;Switch_B1.c: 185: } else {
  5272  0268  0008               	return
  5273  0269                     l8941:	
  5274                           
  5275                           ;Switch_B1.c: 186: if (Sw->Hold2 == 0) {
  5276  0269  0020               	movlb	0	; select bank0
  5277  026A  086D               	movf	_Sw,w
  5278  026B  0086               	movwf	6
  5279  026C  3001               	movlw	1	; select bank2/3
  5280  026D  0087               	movwf	7
  5281  026E  1A01               	btfsc	1,4
  5282  026F  2AA7               	goto	l8955
  5283                           
  5284                           ;Switch_B1.c: 187: Sw->Hold2Time++;
  5285  0270  086D               	movf	_Sw,w
  5286  0271  3E05               	addlw	5
  5287  0272  0086               	movwf	6
  5288  0273  3001               	movlw	1	; select bank2/3
  5289  0274  0087               	movwf	7
  5290  0275  3001               	movlw	1
  5291  0276  0781               	addwf	1,f
  5292  0277  3141               	addfsr 1,1
  5293  0278  1803               	skipnc
  5294  0279  0A81               	incf	1,f
  5295                           
  5296                           ;Switch_B1.c: 188: if (Sw->Hold2Time >= 150) {
  5297  027A  086D               	movf	_Sw,w
  5298  027B  3E05               	addlw	5
  5299  027C  0086               	movwf	6
  5300  027D  3001               	movlw	1	; select bank2/3
  5301  027E  0087               	movwf	7
  5302  027F  3F40               	moviw [0]fsr1
  5303  0280  00E5               	movwf	??_setSw_Main
  5304  0281  3F41               	moviw [1]fsr1
  5305  0282  00E6               	movwf	??_setSw_Main+1
  5306  0283  3000               	movlw	0
  5307  0284  0266               	subwf	??_setSw_Main+1,w
  5308  0285  3096               	movlw	150
  5309  0286  1903               	skipnz
  5310  0287  0265               	subwf	??_setSw_Main,w
  5311  0288  1C03               	skipc
  5312  0289  0008               	return
  5313                           
  5314                           ;Switch_B1.c: 189: Sw->Hold2Time = 0;
  5315  028A  086D               	movf	_Sw,w
  5316  028B  3E05               	addlw	5
  5317  028C  0086               	movwf	6
  5318  028D  3001               	movlw	1	; select bank2/3
  5319  028E  0087               	movwf	7
  5320  028F  3000               	movlw	0
  5321  0290  3FC0               	movwi [0]fsr1
  5322  0291  3FC1               	movwi [1]fsr1
  5323                           
  5324                           ;Switch_B1.c: 190: Sw->Hold2 = 1;
  5325  0292  086D               	movf	_Sw,w
  5326  0293  0086               	movwf	6
  5327  0294  3001               	movlw	1	; select bank2/3
  5328  0295  0087               	movwf	7
  5329  0296  1601               	bsf	1,4
  5330                           
  5331                           ;Switch_B1.c: 193: setRF_Learn(1);
  5332  0297  3001               	movlw	1
  5333  0298  319E  2663  3181   	fcall	_setRF_Learn
  5334                           
  5335                           ;Switch_B1.c: 195: if (myMain.First == 1) {
  5336  029B  0021               	movlb	1	; select bank1
  5337  029C  1FA0               	btfss	_myMain^(0+128),7
  5338  029D  0008               	return
  5339                           
  5340                           ;Switch_B1.c: 196: setBuz(2, 100);
  5341  029E  3064               	movlw	100
  5342  029F  0020               	movlb	0	; select bank0
  5343  02A0  00A9               	movwf	setBuz@time
  5344  02A1  3000               	movlw	0
  5345  02A2  00AA               	movwf	setBuz@time+1
  5346  02A3  3002               	movlw	2
  5347  02A4  3189  213B         	fcall	_setBuz
  5348                           
  5349                           ;Switch_B1.c: 197: }
  5350                           ;Switch_B1.c: 199: }
  5351                           ;Switch_B1.c: 200: } else {
  5352  02A6  0008               	return
  5353  02A7                     l8955:	
  5354                           
  5355                           ;Switch_B1.c: 201: if (Sw->Hold3 == 0) {
  5356  02A7  0020               	movlb	0	; select bank0
  5357  02A8  086D               	movf	_Sw,w
  5358  02A9  0086               	movwf	6
  5359  02AA  3001               	movlw	1	; select bank2/3
  5360  02AB  0087               	movwf	7
  5361  02AC  1A81               	btfsc	1,5
  5362  02AD  0008               	return
  5363                           
  5364                           ;Switch_B1.c: 202: Sw->Hold3Time++;
  5365  02AE  086D               	movf	_Sw,w
  5366  02AF  3E07               	addlw	7
  5367  02B0  0086               	movwf	6
  5368  02B1  3001               	movlw	1	; select bank2/3
  5369  02B2  0087               	movwf	7
  5370  02B3  3001               	movlw	1
  5371  02B4  0781               	addwf	1,f
  5372  02B5  3141               	addfsr 1,1
  5373  02B6  1803               	skipnc
  5374  02B7  0A81               	incf	1,f
  5375                           
  5376                           ;Switch_B1.c: 203: if (Sw->Hold3Time >= 300) {
  5377  02B8  086D               	movf	_Sw,w
  5378  02B9  3E07               	addlw	7
  5379  02BA  0086               	movwf	6
  5380  02BB  3001               	movlw	1	; select bank2/3
  5381  02BC  0087               	movwf	7
  5382  02BD  3F40               	moviw [0]fsr1
  5383  02BE  00E5               	movwf	??_setSw_Main
  5384  02BF  3F41               	moviw [1]fsr1
  5385  02C0  00E6               	movwf	??_setSw_Main+1
  5386  02C1  3001               	movlw	1
  5387  02C2  0266               	subwf	??_setSw_Main+1,w
  5388  02C3  302C               	movlw	44
  5389  02C4  1903               	skipnz
  5390  02C5  0265               	subwf	??_setSw_Main,w
  5391  02C6  1C03               	skipc
  5392  02C7  0008               	return
  5393                           
  5394                           ;Switch_B1.c: 204: Sw->Hold3Time = 0;
  5395  02C8  086D               	movf	_Sw,w
  5396  02C9  3E07               	addlw	7
  5397  02CA  0086               	movwf	6
  5398  02CB  3001               	movlw	1	; select bank2/3
  5399  02CC  0087               	movwf	7
  5400  02CD  3000               	movlw	0
  5401  02CE  3FC0               	movwi [0]fsr1
  5402  02CF  3FC1               	movwi [1]fsr1
  5403                           
  5404                           ;Switch_B1.c: 205: Sw->Hold3 = 1;
  5405  02D0  086D               	movf	_Sw,w
  5406  02D1  0086               	movwf	6
  5407  02D2  3001               	movlw	1	; select bank2/3
  5408  02D3  0087               	movwf	7
  5409  02D4  1681               	bsf	1,5
  5410                           
  5411                           ;Switch_B1.c: 208: setRF_Learn(0);
  5412  02D5  3000               	movlw	0
  5413  02D6  319E  2663         	fcall	_setRF_Learn
  5414                           
  5415                           ;Switch_B1.c: 211: }
  5416                           ;Switch_B1.c: 212: }
  5417                           ;Switch_B1.c: 213: }
  5418                           ;Switch_B1.c: 214: }
  5419                           ;Switch_B1.c: 215: }
  5420                           ;Switch_B1.c: 216: } else {
  5421  02D8  0008               	return
  5422  02D9                     l8965:	
  5423                           
  5424                           ;Switch_B1.c: 217: if (Sw->Debounce == 1) {
  5425  02D9  0020               	movlb	0	; select bank0
  5426  02DA  086D               	movf	_Sw,w
  5427  02DB  0086               	movwf	6
  5428  02DC  3001               	movlw	1	; select bank2/3
  5429  02DD  0087               	movwf	7
  5430  02DE  1D01               	btfss	1,2
  5431  02DF  0008               	return
  5432                           
  5433                           ;Switch_B1.c: 218: Sw->DebounceTime++;
  5434  02E0  3001               	movlw	1
  5435  02E1  00E5               	movwf	??_setSw_Main
  5436  02E2  086D               	movf	_Sw,w
  5437  02E3  3E02               	addlw	2
  5438  02E4  0086               	movwf	6
  5439  02E5  3001               	movlw	1	; select bank2/3
  5440  02E6  0087               	movwf	7
  5441  02E7  0865               	movf	??_setSw_Main,w
  5442  02E8  0781               	addwf	1,f
  5443                           
  5444                           ;Switch_B1.c: 219: if (Sw->DebounceTime >= 5) {
  5445  02E9  086D               	movf	_Sw,w
  5446  02EA  3E02               	addlw	2
  5447  02EB  0086               	movwf	6
  5448  02EC  3001               	movlw	1	; select bank2/3
  5449  02ED  0087               	movwf	7
  5450  02EE  3005               	movlw	5
  5451  02EF  0201               	subwf	1,w
  5452  02F0  1C03               	skipc
  5453  02F1  0008               	return
  5454                           
  5455                           ;Switch_B1.c: 220: Sw->DebounceTime = 0;
  5456  02F2  086D               	movf	_Sw,w
  5457  02F3  3E02               	addlw	2
  5458  02F4  0086               	movwf	6
  5459  02F5  3001               	movlw	1	; select bank2/3
  5460  02F6  0087               	movwf	7
  5461  02F7  0181               	clrf	1
  5462                           
  5463                           ;Switch_B1.c: 221: Sw->Debounce = 0;
  5464  02F8  086D               	movf	_Sw,w
  5465  02F9  0086               	movwf	6
  5466  02FA  3001               	movlw	1	; select bank2/3
  5467  02FB  0087               	movwf	7
  5468  02FC  1101               	bcf	1,2
  5469                           
  5470                           ;Switch_B1.c: 222: Sw->Hold1Time = 0;
  5471  02FD  086D               	movf	_Sw,w
  5472  02FE  3E03               	addlw	3
  5473  02FF  0086               	movwf	6
  5474  0300  3001               	movlw	1	; select bank2/3
  5475  0301  0087               	movwf	7
  5476  0302  3000               	movlw	0
  5477  0303  3FC0               	movwi [0]fsr1
  5478  0304  3FC1               	movwi [1]fsr1
  5479                           
  5480                           ;Switch_B1.c: 223: Sw->Hold1 = 0;
  5481  0305  086D               	movf	_Sw,w
  5482  0306  0086               	movwf	6
  5483  0307  3001               	movlw	1	; select bank2/3
  5484  0308  0087               	movwf	7
  5485  0309  1181               	bcf	1,3
  5486                           
  5487                           ;Switch_B1.c: 224: Sw->Hold2Time = 0;
  5488  030A  086D               	movf	_Sw,w
  5489  030B  3E05               	addlw	5
  5490  030C  0086               	movwf	6
  5491  030D  3001               	movlw	1	; select bank2/3
  5492  030E  0087               	movwf	7
  5493  030F  3000               	movlw	0
  5494  0310  3FC0               	movwi [0]fsr1
  5495  0311  3FC1               	movwi [1]fsr1
  5496                           
  5497                           ;Switch_B1.c: 225: Sw->Hold2 = 0;
  5498  0312  086D               	movf	_Sw,w
  5499  0313  0086               	movwf	6
  5500  0314  3001               	movlw	1	; select bank2/3
  5501  0315  0087               	movwf	7
  5502  0316  1201               	bcf	1,4
  5503                           
  5504                           ;Switch_B1.c: 226: Sw->Hold3Time = 0;
  5505  0317  086D               	movf	_Sw,w
  5506  0318  3E07               	addlw	7
  5507  0319  0086               	movwf	6
  5508  031A  3001               	movlw	1	; select bank2/3
  5509  031B  0087               	movwf	7
  5510  031C  3000               	movlw	0
  5511  031D  3FC0               	movwi [0]fsr1
  5512  031E  3FC1               	movwi [1]fsr1
  5513                           
  5514                           ;Switch_B1.c: 227: Sw->Hold3 = 0;
  5515  031F  086D               	movf	_Sw,w
  5516  0320  0086               	movwf	6
  5517  0321  3001               	movlw	1	; select bank2/3
  5518  0322  0087               	movwf	7
  5519  0323  1281               	bcf	1,5
  5520                           
  5521                           ;Switch_B1.c: 229: Sw_DimmerOffFunc(sw);
  5522  0324  0868               	movf	setSw_Main@sw,w
  5523  0325  318D  250D  3181   	fcall	_Sw_DimmerOffFunc
  5524                           
  5525                           ;Switch_B1.c: 232: setRF_Learn(0);
  5526  0328  3000               	movlw	0
  5527  0329  319E  2663         	fcall	_setRF_Learn
  5528  032B  0008               	return
  5529  032C                     __end_of_setSw_Main:	
  5530                           
  5531                           	psect	text15
  5532  1E63                     __ptext15:	
  5533 ;; *************** function _setRF_Learn *****************
  5534 ;; Defined at:
  5535 ;;		line 23 in file "../src/RF_Control_B1.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  command         1    wreg     unsigned char 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  command         1    0[BANK0 ] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;		None               void
  5542 ;; Registers used:
  5543 ;;		wreg
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used:    1
  5555 ;; Hardware stack levels required when called:    5
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_setSw_Main
  5560 ;; This function uses a non-reentrant model
  5561 ;;
  5562                           
  5563                           
  5564                           ;psect for function _setRF_Learn
  5565  1E63                     _setRF_Learn:	
  5566                           
  5567                           ;incstack = 0
  5568                           ; Regs used in _setRF_Learn: [wreg]
  5569                           ;setRF_Learn@command stored from wreg
  5570  1E63  0020               	movlb	0	; select bank0
  5571  1E64  00A0               	movwf	setRF_Learn@command
  5572                           
  5573                           ;RF_Control_B1.c: 24: RF1.Learn = command;
  5574  1E65  0820               	movf	setRF_Learn@command,w
  5575  1E66  0021               	movlb	1	; select bank1
  5576  1E67  1346               	bcf	_RF1^(0+128),6
  5577  1E68  1D03               	skipz
  5578  1E69  1746               	bsf	_RF1^(0+128),6
  5579  1E6A  0008               	return
  5580  1E6B                     __end_of_setRF_Learn:	
  5581                           
  5582                           	psect	text16
  5583  08E4                     __ptext16:	
  5584 ;; *************** function _Sw_DimmerOnFunc *****************
  5585 ;; Defined at:
  5586 ;;		line 241 in file "../src/Switch_B1.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;  sw              1    wreg     unsigned char 
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;  sw              1   67[BANK0 ] unsigned char 
  5591 ;;  Idle            1   66[BANK0 ] unsigned char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;		None               void
  5594 ;; Registers used:
  5595 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 0/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5602 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5605 ;;Total ram usage:        2 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    9
  5608 ;; This function calls:
  5609 ;;		_setBuz
  5610 ;;		_setDimmerLights_Switch
  5611 ;;		_setDimmerLights_Trigger
  5612 ;;		_setRFSW_Status
  5613 ;;		_setRF_DimmerLights
  5614 ;;		_setTxData
  5615 ;; This function is called by:
  5616 ;;		_setSw_Main
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           
  5621                           ;psect for function _Sw_DimmerOnFunc
  5622  08E4                     _Sw_DimmerOnFunc:	
  5623                           
  5624                           ;incstack = 0
  5625                           ; Regs used in _Sw_DimmerOnFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5626                           ;Sw_DimmerOnFunc@sw stored from wreg
  5627  08E4  0020               	movlb	0	; select bank0
  5628  08E5  00E3               	movwf	Sw_DimmerOnFunc@sw
  5629                           
  5630                           ;Switch_B1.c: 242: char Idle = 1;
  5631  08E6  01E2               	clrf	Sw_DimmerOnFunc@Idle
  5632  08E7  0AE2               	incf	Sw_DimmerOnFunc@Idle,f
  5633                           
  5634                           ;Switch_B1.c: 263: if (Idle == 1) {
  5635  08E8  0862               	movf	Sw_DimmerOnFunc@Idle,w
  5636  08E9  3A01               	xorlw	1
  5637  08EA  1D03               	skipz
  5638  08EB  0008               	return
  5639                           
  5640                           ;Switch_B1.c: 264: Sw->Flag = 1;
  5641  08EC  086D               	movf	_Sw,w
  5642  08ED  0086               	movwf	6
  5643  08EE  3001               	movlw	1	; select bank2/3
  5644  08EF  0087               	movwf	7
  5645  08F0  1781               	bsf	1,7
  5646                           
  5647                           ;Switch_B1.c: 265: setBuz(1, 100);
  5648  08F1  3064               	movlw	100
  5649  08F2  00A9               	movwf	setBuz@time
  5650  08F3  3000               	movlw	0
  5651  08F4  00AA               	movwf	setBuz@time+1
  5652  08F5  3001               	movlw	1
  5653  08F6  3189  213B  3188   	fcall	_setBuz
  5654                           
  5655                           ;Switch_B1.c: 266: if (Sw->Status == 0) {
  5656  08F9  0020               	movlb	0	; select bank0
  5657  08FA  086D               	movf	_Sw,w
  5658  08FB  0086               	movwf	6
  5659  08FC  3001               	movlw	1	; select bank2/3
  5660  08FD  0087               	movwf	7
  5661  08FE  1B01               	btfsc	1,6
  5662  08FF  2929               	goto	l8397
  5663                           
  5664                           ;Switch_B1.c: 267: Sw->Status = 1;
  5665  0900  086D               	movf	_Sw,w
  5666  0901  0086               	movwf	6
  5667  0902  3001               	movlw	1	; select bank2/3
  5668  0903  0087               	movwf	7
  5669  0904  1701               	bsf	1,6
  5670                           
  5671                           ;Switch_B1.c: 268: setRFSW_Status(sw, 1);
  5672  0905  01A2               	clrf	setRFSW_Status@command
  5673  0906  0AA2               	incf	setRFSW_Status@command,f
  5674  0907  0863               	movf	Sw_DimmerOnFunc@sw,w
  5675  0908  319F  273A  3188   	fcall	_setRFSW_Status
  5676                           
  5677                           ;Switch_B1.c: 270: setDimmerLights_Trigger(sw, 1);
  5678  090B  0020               	movlb	0	; select bank0
  5679  090C  01A2               	clrf	setDimmerLights_Trigger@command
  5680  090D  0AA2               	incf	setDimmerLights_Trigger@command,f
  5681  090E  0863               	movf	Sw_DimmerOnFunc@sw,w
  5682  090F  319F  27C0  3188   	fcall	_setDimmerLights_Trigger
  5683                           
  5684                           ;Switch_B1.c: 271: setDimmerLights_Switch(sw, 1);
  5685  0912  0020               	movlb	0	; select bank0
  5686  0913  01A2               	clrf	setDimmerLights_Switch@command
  5687  0914  0AA2               	incf	setDimmerLights_Switch@command,f
  5688  0915  0863               	movf	Sw_DimmerOnFunc@sw,w
  5689  0916  319F  27B0  3188   	fcall	_setDimmerLights_Switch
  5690                           
  5691                           ;Switch_B1.c: 273: setRF_DimmerLights(sw, Sw->Status);
  5692  0919  0020               	movlb	0	; select bank0
  5693  091A  086D               	movf	_Sw,w
  5694  091B  0086               	movwf	6
  5695  091C  3001               	movlw	1	; select bank2/3
  5696  091D  0087               	movwf	7
  5697  091E  3000               	movlw	0
  5698  091F  1B01               	btfsc	1,6
  5699  0920  3001               	movlw	1
  5700  0921  00DD               	movwf	setRF_DimmerLights@on
  5701  0922  0863               	movf	Sw_DimmerOnFunc@sw,w
  5702  0923  318C  24A1  3188   	fcall	_setRF_DimmerLights
  5703                           
  5704                           ;Switch_B1.c: 274: setTxData();
  5705  0926  3184  24E9         	fcall	_setTxData
  5706                           
  5707                           ;Switch_B1.c: 276: } else {
  5708  0928  0008               	return
  5709  0929                     l8397:	
  5710                           
  5711                           ;Switch_B1.c: 277: Sw->Status = 0;
  5712  0929  0020               	movlb	0	; select bank0
  5713  092A  086D               	movf	_Sw,w
  5714  092B  0086               	movwf	6
  5715  092C  3001               	movlw	1	; select bank2/3
  5716  092D  0087               	movwf	7
  5717  092E  1301               	bcf	1,6
  5718                           
  5719                           ;Switch_B1.c: 278: setRFSW_Status(sw, Sw->Status);
  5720  092F  086D               	movf	_Sw,w
  5721  0930  0086               	movwf	6
  5722  0931  3001               	movlw	1	; select bank2/3
  5723  0932  0087               	movwf	7
  5724  0933  3000               	movlw	0
  5725  0934  1B01               	btfsc	1,6
  5726  0935  3001               	movlw	1
  5727  0936  00A2               	movwf	setRFSW_Status@command
  5728  0937  0863               	movf	Sw_DimmerOnFunc@sw,w
  5729  0938  319F  273A         	fcall	_setRFSW_Status
  5730  093A  0008               	return
  5731  093B                     __end_of_Sw_DimmerOnFunc:	
  5732                           
  5733                           	psect	text17
  5734  0D0D                     __ptext17:	
  5735 ;; *************** function _Sw_DimmerOffFunc *****************
  5736 ;; Defined at:
  5737 ;;		line 284 in file "../src/Switch_B1.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  sw              1    wreg     unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  sw              1   68[BANK0 ] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;		None               void
  5744 ;; Registers used:
  5745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5753 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5754 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;Total ram usage:        3 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    9
  5758 ;; This function calls:
  5759 ;;		_setDelayOff_GO
  5760 ;;		_setDimmerLights_AdjGo
  5761 ;;		_setDimmerLights_Switch
  5762 ;;		_setDimmerLights_Trigger
  5763 ;;		_setDimmerLights_TriggerAdj
  5764 ;;		_setRF_DimmerLights
  5765 ;;		_setTxData
  5766 ;; This function is called by:
  5767 ;;		_setSw_Main
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           
  5772                           ;psect for function _Sw_DimmerOffFunc
  5773  0D0D                     _Sw_DimmerOffFunc:	
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _Sw_DimmerOffFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5777                           ;Sw_DimmerOffFunc@sw stored from wreg
  5778  0D0D  0020               	movlb	0	; select bank0
  5779  0D0E  00E4               	movwf	Sw_DimmerOffFunc@sw
  5780                           
  5781                           ;Switch_B1.c: 285: if (Sw->Flag == 1) {
  5782  0D0F  086D               	movf	_Sw,w
  5783  0D10  0086               	movwf	6
  5784  0D11  3001               	movlw	1	; select bank2/3
  5785  0D12  0087               	movwf	7
  5786  0D13  1F81               	btfss	1,7
  5787  0D14  0008               	return
  5788                           
  5789                           ;Switch_B1.c: 286: Sw->Flag = 0;
  5790  0D15  086D               	movf	_Sw,w
  5791  0D16  0086               	movwf	6
  5792  0D17  3001               	movlw	1	; select bank2/3
  5793  0D18  0087               	movwf	7
  5794  0D19  1381               	bcf	1,7
  5795                           
  5796                           ;Switch_B1.c: 287: if (Sw->Status == 1) {
  5797  0D1A  086D               	movf	_Sw,w
  5798  0D1B  0086               	movwf	6
  5799  0D1C  3001               	movlw	1	; select bank2/3
  5800  0D1D  0087               	movwf	7
  5801  0D1E  1F01               	btfss	1,6
  5802  0D1F  2D58               	goto	l8433
  5803                           
  5804                           ;Switch_B1.c: 288: if (Sw->Adj == 1) {
  5805  0D20  0A6D               	incf	_Sw,w
  5806  0D21  0086               	movwf	6
  5807  0D22  3001               	movlw	1	; select bank2/3
  5808  0D23  0087               	movwf	7
  5809  0D24  1C01               	btfss	1,0
  5810  0D25  0008               	return
  5811                           
  5812                           ;Switch_B1.c: 289: Sw->Adj = 0;
  5813  0D26  0A6D               	incf	_Sw,w
  5814  0D27  0086               	movwf	6
  5815  0D28  3001               	movlw	1	; select bank2/3
  5816  0D29  0087               	movwf	7
  5817  0D2A  1001               	bcf	1,0
  5818                           
  5819                           ;Switch_B1.c: 290: setDimmerLights_TriggerAdj(sw, 1);
  5820  0D2B  01A2               	clrf	setDimmerLights_TriggerAdj@command
  5821  0D2C  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  5822  0D2D  0864               	movf	Sw_DimmerOffFunc@sw,w
  5823  0D2E  319F  27F0  318D   	fcall	_setDimmerLights_TriggerAdj
  5824                           
  5825                           ;Switch_B1.c: 291: setDimmerLights_AdjGo(sw, 0);
  5826  0D31  0020               	movlb	0	; select bank0
  5827  0D32  01A2               	clrf	setDimmerLights_AdjGo@command
  5828  0D33  0864               	movf	Sw_DimmerOffFunc@sw,w
  5829  0D34  319F  27E0  318D   	fcall	_setDimmerLights_AdjGo
  5830                           
  5831                           ;Switch_B1.c: 293: product->Data[17]=product->Data[26 + sw];
  5832  0D37  0020               	movlb	0	; select bank0
  5833  0D38  0864               	movf	Sw_DimmerOffFunc@sw,w
  5834  0D39  3E1A               	addlw	26
  5835  0D3A  076E               	addwf	_product,w
  5836  0D3B  00E2               	movwf	??_Sw_DimmerOffFunc
  5837  0D3C  0862               	movf	??_Sw_DimmerOffFunc,w
  5838  0D3D  0086               	movwf	6
  5839  0D3E  3001               	movlw	1	; select bank2/3
  5840  0D3F  0087               	movwf	7
  5841  0D40  0801               	movf	1,w
  5842  0D41  00E3               	movwf	??_Sw_DimmerOffFunc+1
  5843  0D42  086E               	movf	_product,w
  5844  0D43  3E11               	addlw	17
  5845  0D44  0086               	movwf	6
  5846  0D45  3001               	movlw	1	; select bank2/3
  5847  0D46  0087               	movwf	7
  5848  0D47  0863               	movf	??_Sw_DimmerOffFunc+1,w
  5849  0D48  0081               	movwf	1
  5850                           
  5851                           ;Switch_B1.c: 294: setRF_DimmerLights(sw, Sw->Status);
  5852  0D49  086D               	movf	_Sw,w
  5853  0D4A  0086               	movwf	6
  5854  0D4B  3001               	movlw	1	; select bank2/3
  5855  0D4C  0087               	movwf	7
  5856  0D4D  3000               	movlw	0
  5857  0D4E  1B01               	btfsc	1,6
  5858  0D4F  3001               	movlw	1
  5859  0D50  00DD               	movwf	setRF_DimmerLights@on
  5860  0D51  0864               	movf	Sw_DimmerOffFunc@sw,w
  5861  0D52  318C  24A1  318D   	fcall	_setRF_DimmerLights
  5862                           
  5863                           ;Switch_B1.c: 295: setTxData();
  5864  0D55  3184  24E9         	fcall	_setTxData
  5865                           
  5866                           ;Switch_B1.c: 297: }
  5867                           ;Switch_B1.c: 298: } else {
  5868  0D57  0008               	return
  5869  0D58                     l8433:	
  5870                           
  5871                           ;Switch_B1.c: 299: setDimmerLights_Trigger(sw, 1);
  5872  0D58  0020               	movlb	0	; select bank0
  5873  0D59  01A2               	clrf	setDimmerLights_Trigger@command
  5874  0D5A  0AA2               	incf	setDimmerLights_Trigger@command,f
  5875  0D5B  0864               	movf	Sw_DimmerOffFunc@sw,w
  5876  0D5C  319F  27C0  318D   	fcall	_setDimmerLights_Trigger
  5877                           
  5878                           ;Switch_B1.c: 300: setDimmerLights_Switch(sw, 0);
  5879  0D5F  0020               	movlb	0	; select bank0
  5880  0D60  01A2               	clrf	setDimmerLights_Switch@command
  5881  0D61  0864               	movf	Sw_DimmerOffFunc@sw,w
  5882  0D62  319F  27B0  318D   	fcall	_setDimmerLights_Switch
  5883                           
  5884                           ;Switch_B1.c: 302: setDelayOff_GO(sw, 0, 0);
  5885  0D65  0020               	movlb	0	; select bank0
  5886  0D66  01AA               	clrf	setDelayOff_GO@command
  5887  0D67  01AB               	clrf	setDelayOff_GO@value
  5888  0D68  0864               	movf	Sw_DimmerOffFunc@sw,w
  5889  0D69  318B  23D4  318D   	fcall	_setDelayOff_GO
  5890                           
  5891                           ;Switch_B1.c: 303: setRF_DimmerLights(sw, Sw->Status);
  5892  0D6C  0020               	movlb	0	; select bank0
  5893  0D6D  086D               	movf	_Sw,w
  5894  0D6E  0086               	movwf	6
  5895  0D6F  3001               	movlw	1	; select bank2/3
  5896  0D70  0087               	movwf	7
  5897  0D71  3000               	movlw	0
  5898  0D72  1B01               	btfsc	1,6
  5899  0D73  3001               	movlw	1
  5900  0D74  00DD               	movwf	setRF_DimmerLights@on
  5901  0D75  0864               	movf	Sw_DimmerOffFunc@sw,w
  5902  0D76  318C  24A1  318D   	fcall	_setRF_DimmerLights
  5903                           
  5904                           ;Switch_B1.c: 304: setTxData();
  5905  0D79  3184  24E9         	fcall	_setTxData
  5906  0D7B  0008               	return
  5907  0D7C                     __end_of_Sw_DimmerOffFunc:	
  5908                           
  5909                           	psect	text18
  5910  13FF                     __ptext18:	
  5911 ;; *************** function _Sw_DimmerAdjFunc *****************
  5912 ;; Defined at:
  5913 ;;		line 311 in file "../src/Switch_B1.c"
  5914 ;; Parameters:    Size  Location     Type
  5915 ;;  sw              1    wreg     unsigned char 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  sw              1    5[BANK0 ] unsigned char 
  5918 ;;  Idle            1    4[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;		None               void
  5921 ;; Registers used:
  5922 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5929 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5931 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;Total ram usage:        2 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    7
  5935 ;; This function calls:
  5936 ;;		_setDimmerLights_AdjGo
  5937 ;;		_setDimmerLights_TriggerAdj
  5938 ;;		_setRFSW_Status
  5939 ;; This function is called by:
  5940 ;;		_setSw_Main
  5941 ;; This function uses a non-reentrant model
  5942 ;;
  5943                           
  5944                           
  5945                           ;psect for function _Sw_DimmerAdjFunc
  5946  13FF                     _Sw_DimmerAdjFunc:	
  5947                           
  5948                           ;incstack = 0
  5949                           ; Regs used in _Sw_DimmerAdjFunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5950                           ;Sw_DimmerAdjFunc@sw stored from wreg
  5951  13FF  0020               	movlb	0	; select bank0
  5952  1400  00A5               	movwf	Sw_DimmerAdjFunc@sw
  5953                           
  5954                           ;Switch_B1.c: 312: char Idle = 1;
  5955  1401  01A4               	clrf	Sw_DimmerAdjFunc@Idle
  5956  1402  0AA4               	incf	Sw_DimmerAdjFunc@Idle,f
  5957                           
  5958                           ;Switch_B1.c: 332: if (Idle == 1) {
  5959  1403  0824               	movf	Sw_DimmerAdjFunc@Idle,w
  5960  1404  3A01               	xorlw	1
  5961  1405  1D03               	skipz
  5962  1406  0008               	return
  5963                           
  5964                           ;Switch_B1.c: 333: if (Sw->Flag == 1) {
  5965  1407  086D               	movf	_Sw,w
  5966  1408  0086               	movwf	6
  5967  1409  3001               	movlw	1	; select bank2/3
  5968  140A  0087               	movwf	7
  5969  140B  1F81               	btfss	1,7
  5970  140C  0008               	return
  5971                           
  5972                           ;Switch_B1.c: 334: Sw->Hold1 = 1;
  5973  140D  086D               	movf	_Sw,w
  5974  140E  0086               	movwf	6
  5975  140F  3001               	movlw	1	; select bank2/3
  5976  1410  0087               	movwf	7
  5977  1411  1581               	bsf	1,3
  5978                           
  5979                           ;Switch_B1.c: 335: Sw->Adj = 1;
  5980  1412  0A6D               	incf	_Sw,w
  5981  1413  0086               	movwf	6
  5982  1414  3001               	movlw	1	; select bank2/3
  5983  1415  0087               	movwf	7
  5984  1416  1401               	bsf	1,0
  5985                           
  5986                           ;Switch_B1.c: 336: Sw->Status = 1;
  5987  1417  086D               	movf	_Sw,w
  5988  1418  0086               	movwf	6
  5989  1419  3001               	movlw	1	; select bank2/3
  5990  141A  0087               	movwf	7
  5991  141B  1701               	bsf	1,6
  5992                           
  5993                           ;Switch_B1.c: 337: setRFSW_Status(sw, 1);
  5994  141C  01A2               	clrf	setRFSW_Status@command
  5995  141D  0AA2               	incf	setRFSW_Status@command,f
  5996  141E  0825               	movf	Sw_DimmerAdjFunc@sw,w
  5997  141F  319F  273A  3193   	fcall	_setRFSW_Status
  5998                           
  5999                           ;Switch_B1.c: 339: setDimmerLights_TriggerAdj(sw, 1);
  6000  1422  0020               	movlb	0	; select bank0
  6001  1423  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6002  1424  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6003  1425  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6004  1426  319F  27F0  3193   	fcall	_setDimmerLights_TriggerAdj
  6005                           
  6006                           ;Switch_B1.c: 340: setDimmerLights_AdjGo(sw, 1);
  6007  1429  0020               	movlb	0	; select bank0
  6008  142A  01A2               	clrf	setDimmerLights_AdjGo@command
  6009  142B  0AA2               	incf	setDimmerLights_AdjGo@command,f
  6010  142C  0825               	movf	Sw_DimmerAdjFunc@sw,w
  6011  142D  319F  27E0         	fcall	_setDimmerLights_AdjGo
  6012  142F  0008               	return
  6013  1430                     __end_of_Sw_DimmerAdjFunc:	
  6014                           
  6015                           	psect	text19
  6016  1FF0                     __ptext19:	
  6017 ;; *************** function _setDimmerLights_TriggerAdj *****************
  6018 ;; Defined at:
  6019 ;;		line 722 in file "../src/Dimmer_B1.c"
  6020 ;; Parameters:    Size  Location     Type
  6021 ;;  lights          1    wreg     unsigned char 
  6022 ;;  command         1    2[BANK0 ] unsigned char 
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  lights          1    3[BANK0 ] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;		None               void
  6027 ;; Registers used:
  6028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : 0/0
  6032 ;;		Unchanged: 0/0
  6033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6034 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6035 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;Total ram usage:        2 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    6
  6041 ;; This function calls:
  6042 ;;		_DimmerLightsPointSelect
  6043 ;; This function is called by:
  6044 ;;		_Sw_DimmerOffFunc
  6045 ;;		_Sw_DimmerAdjFunc
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           
  6050                           ;psect for function _setDimmerLights_TriggerAdj
  6051  1FF0                     _setDimmerLights_TriggerAdj:	
  6052                           
  6053                           ;incstack = 0
  6054                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6055                           ;setDimmerLights_TriggerAdj@lights stored from wreg
  6056  1FF0  0020               	movlb	0	; select bank0
  6057  1FF1  00A3               	movwf	setDimmerLights_TriggerAdj@lights
  6058                           
  6059                           ;Dimmer_B1.c: 724: DimmerLightsPointSelect(lights);
  6060  1FF2  0823               	movf	setDimmerLights_TriggerAdj@lights,w
  6061  1FF3  319E  26B6         	fcall	_DimmerLightsPointSelect
  6062                           
  6063                           ;Dimmer_B1.c: 725: DimmerLights->TriggerAdj = command;
  6064  1FF5  0020               	movlb	0	; select bank0
  6065  1FF6  086C               	movf	_DimmerLights,w
  6066  1FF7  3E08               	addlw	8
  6067  1FF8  0086               	movwf	6
  6068  1FF9  3001               	movlw	1	; select bank2/3
  6069  1FFA  0087               	movwf	7
  6070  1FFB  0822               	movf	setDimmerLights_TriggerAdj@command,w
  6071  1FFC  1201               	bcf	1,4
  6072  1FFD  1D03               	skipz
  6073  1FFE  1601               	bsf	1,4
  6074  1FFF  0008               	return
  6075  2000                     __end_of_setDimmerLights_TriggerAdj:	
  6076                           
  6077                           	psect	text20
  6078  1FE0                     __ptext20:	
  6079 ;; *************** function _setDimmerLights_AdjGo *****************
  6080 ;; Defined at:
  6081 ;;		line 710 in file "../src/Dimmer_B1.c"
  6082 ;; Parameters:    Size  Location     Type
  6083 ;;  lights          1    wreg     unsigned char 
  6084 ;;  command         1    2[BANK0 ] unsigned char 
  6085 ;; Auto vars:     Size  Location     Type
  6086 ;;  lights          1    3[BANK0 ] unsigned char 
  6087 ;; Return value:  Size  Location     Type
  6088 ;;		None               void
  6089 ;; Registers used:
  6090 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6091 ;; Tracked objects:
  6092 ;;		On entry : 0/0
  6093 ;;		On exit  : 0/0
  6094 ;;		Unchanged: 0/0
  6095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6096 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;Total ram usage:        2 bytes
  6101 ;; Hardware stack levels used:    1
  6102 ;; Hardware stack levels required when called:    6
  6103 ;; This function calls:
  6104 ;;		_DimmerLightsPointSelect
  6105 ;; This function is called by:
  6106 ;;		_Sw_DimmerOffFunc
  6107 ;;		_Sw_DimmerAdjFunc
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           
  6112                           ;psect for function _setDimmerLights_AdjGo
  6113  1FE0                     _setDimmerLights_AdjGo:	
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _setDimmerLights_AdjGo: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6117                           ;setDimmerLights_AdjGo@lights stored from wreg
  6118  1FE0  0020               	movlb	0	; select bank0
  6119  1FE1  00A3               	movwf	setDimmerLights_AdjGo@lights
  6120                           
  6121                           ;Dimmer_B1.c: 712: DimmerLightsPointSelect(lights);
  6122  1FE2  0823               	movf	setDimmerLights_AdjGo@lights,w
  6123  1FE3  319E  26B6         	fcall	_DimmerLightsPointSelect
  6124                           
  6125                           ;Dimmer_B1.c: 713: DimmerLights->AdjGo = command;
  6126  1FE5  0020               	movlb	0	; select bank0
  6127  1FE6  086C               	movf	_DimmerLights,w
  6128  1FE7  3E08               	addlw	8
  6129  1FE8  0086               	movwf	6
  6130  1FE9  3001               	movlw	1	; select bank2/3
  6131  1FEA  0087               	movwf	7
  6132  1FEB  0822               	movf	setDimmerLights_AdjGo@command,w
  6133  1FEC  1181               	bcf	1,3
  6134  1FED  1D03               	skipz
  6135  1FEE  1581               	bsf	1,3
  6136  1FEF  0008               	return
  6137  1FF0                     __end_of_setDimmerLights_AdjGo:	
  6138                           
  6139                           	psect	text21
  6140  1E84                     __ptext21:	
  6141 ;; *************** function _Switch_Initialization *****************
  6142 ;; Defined at:
  6143 ;;		line 41 in file "../src/Switch_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;		None
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;		None               void
  6150 ;; Registers used:
  6151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;Total ram usage:        0 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    8
  6164 ;; This function calls:
  6165 ;;		_TouchPower
  6166 ;;		_setSw_Initialization
  6167 ;; This function is called by:
  6168 ;;		_main
  6169 ;; This function uses a non-reentrant model
  6170 ;;
  6171                           
  6172                           
  6173                           ;psect for function _Switch_Initialization
  6174  1E84                     _Switch_Initialization:	
  6175                           
  6176                           ;Switch_B1.c: 42: TouchPower();
  6177                           
  6178                           ;incstack = 0
  6179                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6180  1E84  319F  2792  319E   	fcall	_TouchPower
  6181                           
  6182                           ;Switch_B1.c: 44: WPUB1 = 0;
  6183  1E87  0024               	movlb	4	; select bank4
  6184  1E88  108D               	bcf	13,1	;volatile
  6185                           
  6186                           ;Switch_B1.c: 53: setSw_Initialization(1);
  6187  1E89  3001               	movlw	1
  6188  1E8A  319F  27D0         	fcall	_setSw_Initialization
  6189  1E8C  0008               	return
  6190  1E8D                     __end_of_Switch_Initialization:	
  6191                           
  6192                           	psect	text22
  6193  1FD0                     __ptext22:	
  6194 ;; *************** function _setSw_Initialization *****************
  6195 ;; Defined at:
  6196 ;;		line 83 in file "../src/Switch_B1.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  sw              1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  sw              1    3[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        1 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    7
  6217 ;; This function calls:
  6218 ;;		_setLED
  6219 ;; This function is called by:
  6220 ;;		_Switch_Initialization
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _setSw_Initialization
  6226  1FD0                     _setSw_Initialization:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6230                           ;setSw_Initialization@sw stored from wreg
  6231  1FD0  0020               	movlb	0	; select bank0
  6232  1FD1  00A3               	movwf	setSw_Initialization@sw
  6233                           
  6234                           ;Switch_B1.c: 84: setLED(sw, 1);
  6235  1FD2  01A1               	clrf	setLED@command
  6236  1FD3  0AA1               	incf	setLED@command,f
  6237  1FD4  0823               	movf	setSw_Initialization@sw,w
  6238  1FD5  318A  224A  319F   	fcall	_setLED
  6239                           
  6240                           ;Switch_B1.c: 86: setLED(sw + 1, 1);
  6241  1FD8  0020               	movlb	0	; select bank0
  6242  1FD9  01A1               	clrf	setLED@command
  6243  1FDA  0AA1               	incf	setLED@command,f
  6244  1FDB  0823               	movf	setSw_Initialization@sw,w
  6245  1FDC  3E01               	addlw	1
  6246  1FDD  318A  224A         	fcall	_setLED
  6247  1FDF  0008               	return
  6248  1FE0                     __end_of_setSw_Initialization:	
  6249                           
  6250                           	psect	text23
  6251  1F92                     __ptext23:	
  6252 ;; *************** function _TouchPower *****************
  6253 ;; Defined at:
  6254 ;;		line 10 in file "../src/Switch_B1.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;		None
  6257 ;; Auto vars:     Size  Location     Type
  6258 ;;		None
  6259 ;; Return value:  Size  Location     Type
  6260 ;;		None               void
  6261 ;; Registers used:
  6262 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6263 ;; Tracked objects:
  6264 ;;		On entry : 0/0
  6265 ;;		On exit  : 0/0
  6266 ;;		Unchanged: 0/0
  6267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6272 ;;Total ram usage:        0 bytes
  6273 ;; Hardware stack levels used:    1
  6274 ;; Hardware stack levels required when called:    6
  6275 ;; This function calls:
  6276 ;;		_Timeout_Counter
  6277 ;;		_set_TimeoutCleared
  6278 ;; This function is called by:
  6279 ;;		_Switch_Initialization
  6280 ;; This function uses a non-reentrant model
  6281 ;;
  6282                           
  6283                           
  6284                           ;psect for function _TouchPower
  6285  1F92                     _TouchPower:	
  6286                           
  6287                           ;Switch_B1.c: 11: while (RC5 == 0 && myMain.Timeout == 0) {
  6288                           
  6289                           ;incstack = 0
  6290                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6291  1F92  2F98               	goto	l8893
  6292  1F93                     l2242:	
  6293                           
  6294                           ;Switch_B1.c: 12: RC5 = 1;
  6295  1F93  0020               	movlb	0	; select bank0
  6296  1F94  168E               	bsf	14,5	;volatile
  6297                           
  6298                           ;Switch_B1.c: 13: Timeout_Counter();
  6299  1F95  3190  20C1  319F   	fcall	_Timeout_Counter
  6300  1F98                     l8893:	
  6301  1F98  0020               	movlb	0	; select bank0
  6302  1F99  1A8E               	btfsc	14,5	;volatile
  6303  1F9A  2F9E               	goto	l8897
  6304  1F9B  0021               	movlb	1	; select bank1
  6305  1F9C  1D2F               	btfss	(_myMain^(0+128)+15),2
  6306  1F9D  2F93               	goto	l2242
  6307  1F9E                     l8897:	
  6308                           
  6309                           ;Switch_B1.c: 14: }
  6310                           ;Switch_B1.c: 15: set_TimeoutCleared();
  6311  1F9E  319E  2627         	fcall	_set_TimeoutCleared
  6312  1FA0  0008               	return
  6313  1FA1                     __end_of_TouchPower:	
  6314                           
  6315                           	psect	text24
  6316  1DF7                     __ptext24:	
  6317 ;; *************** function _RF_Main *****************
  6318 ;; Defined at:
  6319 ;;		line 16 in file "../src/RF_Control_B1.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;		None               void
  6326 ;; Registers used:
  6327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used:    1
  6339 ;; Hardware stack levels required when called:   14
  6340 ;; This function calls:
  6341 ;;		_setRF_Main
  6342 ;; This function is called by:
  6343 ;;		_main
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           
  6348                           ;psect for function _RF_Main
  6349  1DF7                     _RF_Main:	
  6350                           
  6351                           ;RF_Control_B1.c: 18: setRF_Main();
  6352                           
  6353                           ;incstack = 0
  6354                           ; Regs used in _RF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6355  1DF7  318B  236F         	fcall	_setRF_Main
  6356  1DF9  0008               	return
  6357  1DFA                     __end_of_RF_Main:	
  6358                           
  6359                           	psect	text25
  6360  0B6F                     __ptext25:	
  6361 ;; *************** function _setRF_Main *****************
  6362 ;; Defined at:
  6363 ;;		line 51 in file "../src/RF_Control_B1.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  Receive_OK      1    0        unsigned char 
  6368 ;;  loop_f          1    0        unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;		None               void
  6371 ;; Registers used:
  6372 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;Total ram usage:        2 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:   13
  6385 ;; This function calls:
  6386 ;;		_CC2500_RxData
  6387 ;;		_CC2500_TxData
  6388 ;;		_CC2500_WriteCommand
  6389 ;;		_RF_RxDisable
  6390 ;;		_getBuz_GO
  6391 ;;		_getRxData
  6392 ;; This function is called by:
  6393 ;;		_RF_Main
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           
  6398                           ;psect for function _setRF_Main
  6399  0B6F                     _setRF_Main:	
  6400                           
  6401                           ;RF_Control_B1.c: 52: char loop_f, Receive_OK;
  6402                           ;RF_Control_B1.c: 53: if (RF1.Enable == 1) {
  6403                           
  6404                           ;incstack = 0
  6405                           ; Regs used in _setRF_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6406  0B6F  0021               	movlb	1	; select bank1
  6407  0B70  1C46               	btfss	_RF1^(0+128),0
  6408  0B71  0008               	return
  6409                           
  6410                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6411  0B72  3190  2077  318B   	fcall	_getBuz_GO
  6412  0B75  0020               	movlb	0	; select bank0
  6413  0B76  0821               	movf	?_getBuz_GO+1,w
  6414  0B77  0420               	iorwf	?_getBuz_GO,w
  6415  0B78  1D03               	skipz
  6416  0B79  0008               	return
  6417                           
  6418                           ;RF_Control_B1.c: 66: RF1.Key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  6419  0B7A  01E8               	clrf	_setRF_Main$4077
  6420  0B7B  0AE8               	incf	_setRF_Main$4077,f
  6421  0B7C  1F0C               	btfss	12,6	;volatile
  6422  0B7D  1A0C               	btfsc	12,4	;volatile
  6423  0B7E  2B83               	goto	l8839
  6424  0B7F  1C0C               	btfss	12,0	;volatile
  6425  0B80  188D               	btfsc	13,1	;volatile
  6426  0B81  2B83               	goto	l8839
  6427  0B82  01E8               	clrf	_setRF_Main$4077
  6428  0B83                     l8839:	
  6429  0B83  0868               	movf	_setRF_Main$4077,w
  6430  0B84  0021               	movlb	1	; select bank1
  6431  0B85  13C6               	bcf	_RF1^(0+128),7
  6432  0B86  1D03               	skipz
  6433  0B87  17C6               	bsf	_RF1^(0+128),7
  6434                           
  6435                           ;RF_Control_B1.c: 68: if (RF1.Key == 1 && RF1.Learn == 0) {
  6436  0B88  1BC6               	btfsc	_RF1^(0+128),7
  6437  0B89  1B46               	btfsc	_RF1^(0+128),6
  6438  0B8A  2B8F               	goto	l1871
  6439                           
  6440                           ;RF_Control_B1.c: 69: RF1.Run = 1;
  6441  0B8B  14C7               	bsf	(_RF1^(0+128)+1),1
  6442                           
  6443                           ;RF_Control_B1.c: 70: RF_RxDisable();
  6444  0B8C  319F  2783         	fcall	_RF_RxDisable
  6445                           
  6446                           ;RF_Control_B1.c: 71: } else {
  6447  0B8E  0008               	return
  6448  0B8F                     l1871:	
  6449                           
  6450                           ;RF_Control_B1.c: 72: if (RF1.Run == 1 && RF1.Learn == 0) {
  6451  0B8F  18C7               	btfsc	(_RF1^(0+128)+1),1
  6452  0B90  1B46               	btfsc	_RF1^(0+128),6
  6453  0B91  2B9F               	goto	l8859
  6454                           
  6455                           ;RF_Control_B1.c: 73: RF1.Count++;
  6456  0B92  3001               	movlw	1
  6457  0B93  0020               	movlb	0	; select bank0
  6458  0B94  00E7               	movwf	??_setRF_Main
  6459  0B95  0867               	movf	??_setRF_Main,w
  6460  0B96  0021               	movlb	1	; select bank1
  6461  0B97  07C9               	addwf	(_RF1^(0+128)+3),f
  6462                           
  6463                           ;RF_Control_B1.c: 74: if (RF1.Count == 30) {
  6464  0B98  0849               	movf	(_RF1^(0+128)+3),w
  6465  0B99  3A1E               	xorlw	30
  6466  0B9A  1D03               	skipz
  6467  0B9B  0008               	return
  6468                           
  6469                           ;RF_Control_B1.c: 75: RF1.Count = 0;
  6470  0B9C  01C9               	clrf	(_RF1^(0+128)+3)
  6471                           
  6472                           ;RF_Control_B1.c: 76: RF1.Run = 0;
  6473  0B9D  10C7               	bcf	(_RF1^(0+128)+1),1
  6474                           
  6475                           ;RF_Control_B1.c: 77: }
  6476                           ;RF_Control_B1.c: 78: } else {
  6477  0B9E  0008               	return
  6478  0B9F                     l8859:	
  6479                           
  6480                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6481  0B9F  01C9               	clrf	(_RF1^(0+128)+3)
  6482                           
  6483                           ;RF_Control_B1.c: 80: RF1.Run = 0;
  6484  0BA0  10C7               	bcf	(_RF1^(0+128)+1),1
  6485                           
  6486                           ;RF_Control_B1.c: 82: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6487  0BA1  1946               	btfsc	_RF1^(0+128),2
  6488  0BA2  1B46               	btfsc	_RF1^(0+128),6
  6489  0BA3  2BB2               	goto	l1876
  6490                           
  6491                           ;RF_Control_B1.c: 83: RF1.TransceiveGO = 0;
  6492  0BA4  1146               	bcf	_RF1^(0+128),2
  6493                           
  6494                           ;RF_Control_B1.c: 84: RF1.RxStatus = 0;
  6495  0BA5  11C6               	bcf	_RF1^(0+128),3
  6496                           
  6497                           ;RF_Control_B1.c: 85: RF1.ReceiveGO = 0;
  6498  0BA6  10C6               	bcf	_RF1^(0+128),1
  6499                           
  6500                           ;RF_Control_B1.c: 88: CC2500_WriteCommand(0x3B);
  6501  0BA7  303B               	movlw	59
  6502  0BA8  3191  2118  318B   	fcall	_CC2500_WriteCommand
  6503                           
  6504                           ;RF_Control_B1.c: 89: CC2500_WriteCommand(0x3A);
  6505  0BAB  303A               	movlw	58
  6506  0BAC  3191  2118  318B   	fcall	_CC2500_WriteCommand
  6507                           
  6508                           ;RF_Control_B1.c: 90: CC2500_TxData();
  6509  0BAF  318B  230A         	fcall	_CC2500_TxData
  6510                           
  6511                           ;RF_Control_B1.c: 92: } else {
  6512  0BB1  0008               	return
  6513  0BB2                     l1876:	
  6514                           
  6515                           ;RF_Control_B1.c: 94: if (RF1.RxStatus == 1) {
  6516  0BB2  1DC6               	btfss	_RF1^(0+128),3
  6517  0BB3  2BC3               	goto	l1878
  6518                           
  6519                           ;RF_Control_B1.c: 95: CC2500_RxData();
  6520  0BB4  318D  25F6  318B   	fcall	_CC2500_RxData
  6521                           
  6522                           ;RF_Control_B1.c: 96: if (RF1.ReceiveGO == 1) {
  6523  0BB7  0021               	movlb	1	; select bank1
  6524  0BB8  1CC6               	btfss	_RF1^(0+128),1
  6525  0BB9  0008               	return
  6526                           
  6527                           ;RF_Control_B1.c: 97: RF1.ReceiveGO = 0;
  6528  0BBA  10C6               	bcf	_RF1^(0+128),1
  6529                           
  6530                           ;RF_Control_B1.c: 104: getRxData();
  6531  0BBB  3197  2720         	fcall	_getRxData
  6532                           
  6533                           ;RF_Control_B1.c: 106: RF1.Run = 1;
  6534  0BBD  0021               	movlb	1	; select bank1
  6535  0BBE  14C7               	bsf	(_RF1^(0+128)+1),1
  6536                           
  6537                           ;RF_Control_B1.c: 107: RB5 = RB5 == 1 ? 0 : 1;
  6538  0BBF  3020               	movlw	32
  6539  0BC0  0020               	movlb	0	; select bank0
  6540  0BC1  068D               	xorwf	13,f
  6541                           
  6542                           ;RF_Control_B1.c: 108: }
  6543                           ;RF_Control_B1.c: 109: } else {
  6544  0BC2  0008               	return
  6545  0BC3                     l1878:	
  6546                           
  6547                           ;RF_Control_B1.c: 111: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  6548  0BC3  19C6               	btfsc	_RF1^(0+128),3
  6549  0BC4  0008               	return
  6550  0BC5  18C6               	btfsc	_RF1^(0+128),1
  6551  0BC6  0008               	return
  6552                           
  6553                           ;RF_Control_B1.c: 112: RF1.RxStatus = 1;
  6554  0BC7  15C6               	bsf	_RF1^(0+128),3
  6555                           
  6556                           ;RF_Control_B1.c: 114: CC2500_WriteCommand(0x3B);
  6557  0BC8  303B               	movlw	59
  6558  0BC9  3191  2118  318B   	fcall	_CC2500_WriteCommand
  6559                           
  6560                           ;RF_Control_B1.c: 115: CC2500_WriteCommand(0x3A);
  6561  0BCC  303A               	movlw	58
  6562  0BCD  3191  2118  318B   	fcall	_CC2500_WriteCommand
  6563                           
  6564                           ;RF_Control_B1.c: 116: CC2500_WriteCommand(0x34);
  6565  0BD0  3034               	movlw	52
  6566  0BD1  3191  2118         	fcall	_CC2500_WriteCommand
  6567  0BD3  0008               	return
  6568  0BD4                     __end_of_setRF_Main:	
  6569                           
  6570                           	psect	text26
  6571  1720                     __ptext26:	
  6572 ;; *************** function _getRxData *****************
  6573 ;; Defined at:
  6574 ;;		line 201 in file "../src/RF_Control_B1.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;		None
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;		None
  6579 ;; Return value:  Size  Location     Type
  6580 ;;		None               void
  6581 ;; Registers used:
  6582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;Total ram usage:        0 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:   12
  6595 ;; This function calls:
  6596 ;;		_setControl_Lights_Table
  6597 ;;		_setLog_Code
  6598 ;; This function is called by:
  6599 ;;		_setRF_Main
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function _getRxData
  6605  1720                     _getRxData:	
  6606                           
  6607                           ;RF_Control_B1.c: 202: if (RF1.Learn == 1) {
  6608                           
  6609                           ;incstack = 0
  6610                           ; Regs used in _getRxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6611  1720  0021               	movlb	1	; select bank1
  6612  1721  1F46               	btfss	_RF1^(0+128),6
  6613  1722  2F2E               	goto	l8345
  6614                           
  6615                           ;RF_Control_B1.c: 203: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  6616  1723  0022               	movlb	2	; select bank2
  6617  1724  08A0               	movf	_RF_Data^(0+256),f
  6618  1725  1D03               	skipz
  6619  1726  0008               	return
  6620  1727  0821               	movf	(_RF_Data^(0+256)+1),w
  6621  1728  3A64               	xorlw	100
  6622  1729  1D03               	skipz
  6623  172A  0008               	return
  6624                           
  6625                           ;RF_Control_B1.c: 204: setLog_Code();
  6626  172B  3194  2430         	fcall	_setLog_Code
  6627                           
  6628                           ;RF_Control_B1.c: 205: }
  6629                           ;RF_Control_B1.c: 206: } else {
  6630  172D  0008               	return
  6631  172E                     l8345:	
  6632                           
  6633                           ;RF_Control_B1.c: 207: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  6634  172E  0022               	movlb	2	; select bank2
  6635  172F  08A0               	movf	_RF_Data^(0+256),f
  6636  1730  1D03               	skipz
  6637  1731  0008               	return
  6638  1732  0821               	movf	(_RF_Data^(0+256)+1),w
  6639  1733  3A02               	xorlw	2
  6640  1734  1D03               	skipz
  6641  1735  0008               	return
  6642                           
  6643                           ;RF_Control_B1.c: 209: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  6644  1736  082C               	movf	(_RF_Data^(0+256)+12),w
  6645  1737  3AFF               	xorlw	255
  6646  1738  1D03               	skipz
  6647  1739  2F44               	goto	l8357
  6648  173A  082D               	movf	(_RF_Data^(0+256)+13),w
  6649  173B  3AFF               	xorlw	255
  6650  173C  1D03               	skipz
  6651  173D  2F44               	goto	l8357
  6652  173E  082E               	movf	(_RF_Data^(0+256)+14),w
  6653  173F  3AFF               	xorlw	255
  6654  1740  1D03               	skipz
  6655  1741  2F44               	goto	l8357
  6656                           
  6657                           ;RF_Control_B1.c: 210: __nop();
  6658  1742  0000               	nop
  6659                           
  6660                           ;RF_Control_B1.c: 211: } else {
  6661  1743  0008               	return
  6662  1744                     l8357:	
  6663                           
  6664                           ;RF_Control_B1.c: 212: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  6665  1744  0020               	movlb	0	; select bank0
  6666  1745  086E               	movf	_product,w
  6667  1746  3E0C               	addlw	12
  6668  1747  0086               	movwf	6
  6669  1748  3001               	movlw	1	; select bank2/3
  6670  1749  0087               	movwf	7
  6671  174A  0022               	movlb	2	; select bank2
  6672  174B  082C               	movf	(_RF_Data^(0+256)+12),w
  6673  174C  0601               	xorwf	1,w
  6674  174D  1D03               	skipz
  6675  174E  0008               	return
  6676  174F  0020               	movlb	0	; select bank0
  6677  1750  086E               	movf	_product,w
  6678  1751  3E0D               	addlw	13
  6679  1752  0086               	movwf	6
  6680  1753  3001               	movlw	1	; select bank2/3
  6681  1754  0087               	movwf	7
  6682  1755  0022               	movlb	2	; select bank2
  6683  1756  082D               	movf	(_RF_Data^(0+256)+13),w
  6684  1757  0601               	xorwf	1,w
  6685  1758  1D03               	skipz
  6686  1759  0008               	return
  6687  175A  0020               	movlb	0	; select bank0
  6688  175B  086E               	movf	_product,w
  6689  175C  3E0E               	addlw	14
  6690  175D  0086               	movwf	6
  6691  175E  3001               	movlw	1	; select bank2/3
  6692  175F  0087               	movwf	7
  6693  1760  0022               	movlb	2	; select bank2
  6694  1761  082E               	movf	(_RF_Data^(0+256)+14),w
  6695  1762  0601               	xorwf	1,w
  6696  1763  1D03               	skipz
  6697  1764  0008               	return
  6698                           
  6699                           ;RF_Control_B1.c: 213: setControl_Lights_Table();
  6700  1765  318C  243A         	fcall	_setControl_Lights_Table
  6701                           
  6702                           ;RF_Control_B1.c: 219: ;
  6703                           
  6704                           ;RF_Control_B1.c: 217: ;
  6705                           ;RF_Control_B1.c: 218: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  6706                           
  6707                           ;RF_Control_B1.c: 214: }
  6708                           ;RF_Control_B1.c: 215: }
  6709                           ;RF_Control_B1.c: 216: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  6710  1767  0008               	return
  6711  1768                     __end_of_getRxData:	
  6712                           
  6713                           	psect	text27
  6714  1430                     __ptext27:	
  6715 ;; *************** function _setLog_Code *****************
  6716 ;; Defined at:
  6717 ;;		line 229 in file "../src/RF_Control_B1.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;		None
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;		None
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        1 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    7
  6738 ;; This function calls:
  6739 ;;		_setBuz
  6740 ;; This function is called by:
  6741 ;;		_getRxData
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _setLog_Code
  6747  1430                     _setLog_Code:	
  6748                           
  6749                           ;RF_Control_B1.c: 230: product->Data[12]=RF_Data[12];
  6750                           
  6751                           ;incstack = 0
  6752                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6753  1430  0022               	movlb	2	; select bank2
  6754  1431  082C               	movf	(_RF_Data^(0+256)+12),w
  6755  1432  0020               	movlb	0	; select bank0
  6756  1433  00AD               	movwf	??_setLog_Code
  6757  1434  086E               	movf	_product,w
  6758  1435  3E0C               	addlw	12
  6759  1436  0086               	movwf	6
  6760  1437  3001               	movlw	1	; select bank2/3
  6761  1438  0087               	movwf	7
  6762  1439  082D               	movf	??_setLog_Code,w
  6763  143A  0081               	movwf	1
  6764                           
  6765                           ;RF_Control_B1.c: 231: product->Data[13]=RF_Data[13];
  6766  143B  0022               	movlb	2	; select bank2
  6767  143C  082D               	movf	(_RF_Data^(0+256)+13),w
  6768  143D  0020               	movlb	0	; select bank0
  6769  143E  00AD               	movwf	??_setLog_Code
  6770  143F  086E               	movf	_product,w
  6771  1440  3E0D               	addlw	13
  6772  1441  0086               	movwf	6
  6773  1442  3001               	movlw	1	; select bank2/3
  6774  1443  0087               	movwf	7
  6775  1444  082D               	movf	??_setLog_Code,w
  6776  1445  0081               	movwf	1
  6777                           
  6778                           ;RF_Control_B1.c: 232: product->Data[14]=RF_Data[14];
  6779  1446  0022               	movlb	2	; select bank2
  6780  1447  082E               	movf	(_RF_Data^(0+256)+14),w
  6781  1448  0020               	movlb	0	; select bank0
  6782  1449  00AD               	movwf	??_setLog_Code
  6783  144A  086E               	movf	_product,w
  6784  144B  3E0E               	addlw	14
  6785  144C  0086               	movwf	6
  6786  144D  3001               	movlw	1	; select bank2/3
  6787  144E  0087               	movwf	7
  6788  144F  082D               	movf	??_setLog_Code,w
  6789  1450  0081               	movwf	1
  6790                           
  6791                           ;RF_Control_B1.c: 233: setBuz(1, 100);
  6792  1451  3064               	movlw	100
  6793  1452  00A9               	movwf	setBuz@time
  6794  1453  3000               	movlw	0
  6795  1454  00AA               	movwf	setBuz@time+1
  6796  1455  3001               	movlw	1
  6797  1456  3189  213B  3194   	fcall	_setBuz
  6798                           
  6799                           ;RF_Control_B1.c: 234: RF1.Learn = 0;
  6800  1459  0021               	movlb	1	; select bank1
  6801  145A  1346               	bcf	_RF1^(0+128),6
  6802                           
  6803                           ;RF_Control_B1.c: 235: if (myMain.First) {
  6804  145B  1FA0               	btfss	_myMain^(0+128),7
  6805  145C  2C5F               	goto	l1912
  6806                           
  6807                           ;RF_Control_B1.c: 236: Memory.LoopSave=1;
  6808  145D  0022               	movlb	2	; select bank2
  6809  145E  1561               	bsf	(_Memory^(0+256)+36),2
  6810  145F                     l1912:	
  6811                           
  6812                           ;RF_Control_B1.c: 237: }
  6813                           ;RF_Control_B1.c: 238: Memory.Modify=1;
  6814  145F  0022               	movlb	2	; select bank2
  6815  1460  1461               	bsf	(_Memory^(0+256)+36),0
  6816  1461  0008               	return
  6817  1462                     __end_of_setLog_Code:	
  6818                           
  6819                           	psect	text28
  6820  0C3A                     __ptext28:	
  6821 ;; *************** function _setControl_Lights_Table *****************
  6822 ;; Defined at:
  6823 ;;		line 242 in file "../src/RF_Control_B1.c"
  6824 ;; Parameters:    Size  Location     Type
  6825 ;;		None
  6826 ;; Auto vars:     Size  Location     Type
  6827 ;;		None
  6828 ;; Return value:  Size  Location     Type
  6829 ;;		None               void
  6830 ;; Registers used:
  6831 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6832 ;; Tracked objects:
  6833 ;;		On entry : 0/0
  6834 ;;		On exit  : 0/0
  6835 ;;		Unchanged: 0/0
  6836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;Total ram usage:        0 bytes
  6842 ;; Hardware stack levels used:    1
  6843 ;; Hardware stack levels required when called:   11
  6844 ;; This function calls:
  6845 ;;		_setBuz
  6846 ;;		_setDimmerLights
  6847 ;;		_setRFSW_AdjControl
  6848 ;;		_setRFSW_Control
  6849 ;;		_setRFSW_Status
  6850 ;;		_setSw_Status
  6851 ;;		_setTxData
  6852 ;; This function is called by:
  6853 ;;		_getRxData
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _setControl_Lights_Table
  6859  0C3A                     _setControl_Lights_Table:	
  6860                           
  6861                           ;RF_Control_B1.c: 243: if (RF_Data[15] == 0x00) {
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in _setControl_Lights_Table: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  6865  0C3A  0022               	movlb	2	; select bank2
  6866  0C3B  08AF               	movf	(_RF_Data^(0+256)+15),f
  6867  0C3C  1D03               	skipz
  6868  0C3D  2C74               	goto	l8059
  6869                           
  6870                           ;RF_Control_B1.c: 245: setDimmerLights(1, 0);
  6871  0C3E  0020               	movlb	0	; select bank0
  6872  0C3F  01A3               	clrf	setDimmerLights@status
  6873  0C40  3001               	movlw	1
  6874  0C41  318E  2674  318C   	fcall	_setDimmerLights
  6875                           
  6876                           ;RF_Control_B1.c: 246: setRFSW_Status(1, 0);
  6877  0C44  0020               	movlb	0	; select bank0
  6878  0C45  01A2               	clrf	setRFSW_Status@command
  6879  0C46  3001               	movlw	1
  6880  0C47  319F  273A  318C   	fcall	_setRFSW_Status
  6881                           
  6882                           ;RF_Control_B1.c: 247: setSw_Status(1, 0);
  6883  0C4A  0020               	movlb	0	; select bank0
  6884  0C4B  01A2               	clrf	setSw_Status@command
  6885  0C4C  3001               	movlw	1
  6886  0C4D  319F  2756  318C   	fcall	_setSw_Status
  6887                           
  6888                           ;RF_Control_B1.c: 260: product->Data[9]=0;
  6889  0C50  0020               	movlb	0	; select bank0
  6890  0C51  086E               	movf	_product,w
  6891  0C52  3E09               	addlw	9
  6892  0C53  0086               	movwf	6
  6893  0C54  3001               	movlw	1	; select bank2/3
  6894  0C55  0087               	movwf	7
  6895  0C56  0181               	clrf	1
  6896                           
  6897                           ;RF_Control_B1.c: 261: product->Data[11]=0;
  6898  0C57  086E               	movf	_product,w
  6899  0C58  3E0B               	addlw	11
  6900  0C59  0086               	movwf	6
  6901  0C5A  3001               	movlw	1	; select bank2/3
  6902  0C5B  0087               	movwf	7
  6903  0C5C  0181               	clrf	1
  6904                           
  6905                           ;RF_Control_B1.c: 262: product->Data[15]=0;
  6906  0C5D  086E               	movf	_product,w
  6907  0C5E  3E0F               	addlw	15
  6908  0C5F  0086               	movwf	6
  6909  0C60  3001               	movlw	1	; select bank2/3
  6910  0C61  0087               	movwf	7
  6911  0C62  0181               	clrf	1
  6912                           
  6913                           ;RF_Control_B1.c: 263: product->Data[17]=0;
  6914  0C63  086E               	movf	_product,w
  6915  0C64  3E11               	addlw	17
  6916  0C65  0086               	movwf	6
  6917  0C66  3001               	movlw	1	; select bank2/3
  6918  0C67  0087               	movwf	7
  6919  0C68  0181               	clrf	1
  6920                           
  6921                           ;RF_Control_B1.c: 264: setBuz(1, 100);
  6922  0C69  3064               	movlw	100
  6923  0C6A  00A9               	movwf	setBuz@time
  6924  0C6B  3000               	movlw	0
  6925  0C6C  00AA               	movwf	setBuz@time+1
  6926  0C6D  3001               	movlw	1
  6927  0C6E  3189  213B  318C   	fcall	_setBuz
  6928                           
  6929                           ;RF_Control_B1.c: 265: setTxData();
  6930  0C71  3184  24E9         	fcall	_setTxData
  6931                           
  6932                           ;RF_Control_B1.c: 266: } else if (RF_Data[15] == 0x20) {
  6933  0C73  0008               	return
  6934  0C74                     l8059:	
  6935  0C74  0022               	movlb	2	; select bank2
  6936  0C75  082F               	movf	(_RF_Data^(0+256)+15),w
  6937  0C76  3A20               	xorlw	32
  6938  0C77  1D03               	skipz
  6939  0C78  2C8F               	goto	l8065
  6940                           
  6941                           ;RF_Control_B1.c: 267: product->Data[9]=0;
  6942  0C79  0020               	movlb	0	; select bank0
  6943  0C7A  086E               	movf	_product,w
  6944  0C7B  3E09               	addlw	9
  6945  0C7C  0086               	movwf	6
  6946  0C7D  3001               	movlw	1	; select bank2/3
  6947  0C7E  0087               	movwf	7
  6948  0C7F  0181               	clrf	1
  6949                           
  6950                           ;RF_Control_B1.c: 268: product->Data[11]=0;
  6951  0C80  086E               	movf	_product,w
  6952  0C81  3E0B               	addlw	11
  6953  0C82  0086               	movwf	6
  6954  0C83  3001               	movlw	1	; select bank2/3
  6955  0C84  0087               	movwf	7
  6956  0C85  0181               	clrf	1
  6957                           
  6958                           ;RF_Control_B1.c: 269: product->Data[17]=0;
  6959  0C86  086E               	movf	_product,w
  6960  0C87  3E11               	addlw	17
  6961  0C88  0086               	movwf	6
  6962  0C89  3001               	movlw	1	; select bank2/3
  6963  0C8A  0087               	movwf	7
  6964  0C8B  0181               	clrf	1
  6965                           
  6966                           ;RF_Control_B1.c: 270: setTxData();
  6967  0C8C  3184  24E9         	fcall	_setTxData
  6968                           
  6969                           ;RF_Control_B1.c: 271: }
  6970  0C8E  0008               	return
  6971  0C8F                     l8065:	
  6972                           
  6973                           ;RF_Control_B1.c: 273: else if (RF_Data[15] == 0x01) {
  6974  0C8F  0022               	movlb	2	; select bank2
  6975  0C90  082F               	movf	(_RF_Data^(0+256)+15),w
  6976  0C91  3A01               	xorlw	1
  6977  0C92  1D03               	skipz
  6978  0C93  2C98               	goto	l8069
  6979                           
  6980                           ;RF_Control_B1.c: 274: setRFSW_Control(1);
  6981  0C94  3001               	movlw	1
  6982  0C95  3186  26FF         	fcall	_setRFSW_Control
  6983                           
  6984                           ;RF_Control_B1.c: 275: }
  6985  0C97  0008               	return
  6986  0C98                     l8069:	
  6987                           
  6988                           ;RF_Control_B1.c: 277: else if (RF_Data[15] == 0x11) {
  6989  0C98  0022               	movlb	2	; select bank2
  6990  0C99  082F               	movf	(_RF_Data^(0+256)+15),w
  6991  0C9A  3A11               	xorlw	17
  6992  0C9B  1D03               	skipz
  6993  0C9C  0008               	return
  6994                           
  6995                           ;RF_Control_B1.c: 278: setRFSW_AdjControl(1);
  6996  0C9D  3001               	movlw	1
  6997  0C9E  3188  2001         	fcall	_setRFSW_AdjControl
  6998  0CA0  0008               	return
  6999  0CA1                     __end_of_setControl_Lights_Table:	
  7000                           
  7001                           	psect	text29
  7002  06FF                     __ptext29:	
  7003 ;; *************** function _setRFSW_Control *****************
  7004 ;; Defined at:
  7005 ;;		line 330 in file "../src/RF_Control_B1.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  sw              1    wreg     unsigned char 
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  sw              1   67[BANK0 ] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;		None               void
  7012 ;; Registers used:
  7013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;Total ram usage:        2 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    9
  7026 ;; This function calls:
  7027 ;;		_RfSWPointSelect
  7028 ;;		_setBuz
  7029 ;;		_setDelayOff_GO
  7030 ;;		_setDimmerLights_Switch
  7031 ;;		_setDimmerLights_Trigger
  7032 ;;		_setRF_DimmerLights
  7033 ;;		_setSw_Status
  7034 ;;		_setTxData
  7035 ;; This function is called by:
  7036 ;;		_setControl_Lights_Table
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           
  7041                           ;psect for function _setRFSW_Control
  7042  06FF                     _setRFSW_Control:	
  7043                           
  7044                           ;incstack = 0
  7045                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7046                           ;setRFSW_Control@sw stored from wreg
  7047  06FF  0020               	movlb	0	; select bank0
  7048  0700  00E3               	movwf	setRFSW_Control@sw
  7049                           
  7050                           ;RF_Control_B1.c: 331: RfSWPointSelect(sw);
  7051  0701  0863               	movf	setRFSW_Control@sw,w
  7052  0702  319E  26C1  3186   	fcall	_RfSWPointSelect
  7053                           
  7054                           ;RF_Control_B1.c: 332: if (RFSW->Status == 0) {
  7055  0705  0879               	movf	_RFSW,w
  7056  0706  0086               	movwf	6
  7057  0707  0187               	clrf	7
  7058  0708  1801               	btfsc	1,0
  7059  0709  2F3E               	goto	l7907
  7060                           
  7061                           ;RF_Control_B1.c: 333: if (RF_Data[16] == 0x80) {
  7062  070A  0022               	movlb	2	; select bank2
  7063  070B  0830               	movf	(_RF_Data^(0+256)+16),w
  7064  070C  3A80               	xorlw	128
  7065  070D  1D03               	skipz
  7066  070E  2F1C               	goto	l7897
  7067                           
  7068                           ;RF_Control_B1.c: 334: setDelayOff_GO(sw, 1, RF_Data[17]);
  7069  070F  0020               	movlb	0	; select bank0
  7070  0710  01AA               	clrf	setDelayOff_GO@command
  7071  0711  0AAA               	incf	setDelayOff_GO@command,f
  7072  0712  0022               	movlb	2	; select bank2
  7073  0713  0831               	movf	(_RF_Data^(0+256)+17),w
  7074  0714  0020               	movlb	0	; select bank0
  7075  0715  00E2               	movwf	??_setRFSW_Control
  7076  0716  0862               	movf	??_setRFSW_Control,w
  7077  0717  00AB               	movwf	setDelayOff_GO@value
  7078  0718  0863               	movf	setRFSW_Control@sw,w
  7079  0719  318B  23D4  3186   	fcall	_setDelayOff_GO
  7080  071C                     l7897:	
  7081                           
  7082                           ;RF_Control_B1.c: 335: }
  7083                           ;RF_Control_B1.c: 336: RFSW->Status = 1;
  7084  071C  0879               	movf	_RFSW,w
  7085  071D  0086               	movwf	6
  7086  071E  0187               	clrf	7
  7087  071F  1401               	bsf	1,0
  7088                           
  7089                           ;RF_Control_B1.c: 337: setSw_Status(sw, 1);
  7090  0720  0020               	movlb	0	; select bank0
  7091  0721  01A2               	clrf	setSw_Status@command
  7092  0722  0AA2               	incf	setSw_Status@command,f
  7093  0723  0863               	movf	setRFSW_Control@sw,w
  7094  0724  319F  2756  3186   	fcall	_setSw_Status
  7095                           
  7096                           ;RF_Control_B1.c: 339: setDimmerLights_Trigger(sw, 1);
  7097  0727  0020               	movlb	0	; select bank0
  7098  0728  01A2               	clrf	setDimmerLights_Trigger@command
  7099  0729  0AA2               	incf	setDimmerLights_Trigger@command,f
  7100  072A  0863               	movf	setRFSW_Control@sw,w
  7101  072B  319F  27C0  3186   	fcall	_setDimmerLights_Trigger
  7102                           
  7103                           ;RF_Control_B1.c: 340: setDimmerLights_Switch(sw, 1);
  7104  072E  0020               	movlb	0	; select bank0
  7105  072F  01A2               	clrf	setDimmerLights_Switch@command
  7106  0730  0AA2               	incf	setDimmerLights_Switch@command,f
  7107  0731  0863               	movf	setRFSW_Control@sw,w
  7108  0732  319F  27B0  3186   	fcall	_setDimmerLights_Switch
  7109                           
  7110                           ;RF_Control_B1.c: 342: setRF_DimmerLights(sw, RFSW->Status);
  7111  0735  0879               	movf	_RFSW,w
  7112  0736  0086               	movwf	6
  7113  0737  0187               	clrf	7
  7114  0738  3000               	movlw	0
  7115  0739  1801               	btfsc	1,0
  7116  073A  3001               	movlw	1
  7117  073B  0020               	movlb	0	; select bank0
  7118  073C  00DD               	movwf	setRF_DimmerLights@on
  7119  073D  2F7A               	goto	L1
  7120  073E                     l7907:	
  7121                           ;RF_Control_B1.c: 343: } else {
  7122                           
  7123                           
  7124                           ;RF_Control_B1.c: 344: if (RF_Data[16] == 0x80) {
  7125  073E  0022               	movlb	2	; select bank2
  7126  073F  0830               	movf	(_RF_Data^(0+256)+16),w
  7127  0740  3A80               	xorlw	128
  7128  0741  1D03               	skipz
  7129  0742  2F54               	goto	l7911
  7130                           
  7131                           ;RF_Control_B1.c: 345: setDelayOff_GO(sw, 1, RF_Data[17]);
  7132  0743  0020               	movlb	0	; select bank0
  7133  0744  01AA               	clrf	setDelayOff_GO@command
  7134  0745  0AAA               	incf	setDelayOff_GO@command,f
  7135  0746  0022               	movlb	2	; select bank2
  7136  0747  0831               	movf	(_RF_Data^(0+256)+17),w
  7137  0748  0020               	movlb	0	; select bank0
  7138  0749  00E2               	movwf	??_setRFSW_Control
  7139  074A  0862               	movf	??_setRFSW_Control,w
  7140  074B  00AB               	movwf	setDelayOff_GO@value
  7141  074C  0863               	movf	setRFSW_Control@sw,w
  7142  074D  318B  23D4  3186   	fcall	_setDelayOff_GO
  7143                           
  7144                           ;RF_Control_B1.c: 346: setRF_DimmerLights(sw, 1);
  7145  0750  0020               	movlb	0	; select bank0
  7146  0751  01DD               	clrf	setRF_DimmerLights@on
  7147  0752  0ADD               	incf	setRF_DimmerLights@on,f
  7148  0753  2F7A               	goto	L1
  7149  0754                     l7911:	
  7150                           ;RF_Control_B1.c: 347: } else {
  7151                           
  7152                           
  7153                           ;RF_Control_B1.c: 348: RFSW->Status = 0;
  7154  0754  0879               	movf	_RFSW,w
  7155  0755  0086               	movwf	6
  7156  0756  0187               	clrf	7
  7157  0757  1001               	bcf	1,0
  7158                           
  7159                           ;RF_Control_B1.c: 349: setSw_Status(sw, 0);
  7160  0758  0020               	movlb	0	; select bank0
  7161  0759  01A2               	clrf	setSw_Status@command
  7162  075A  0863               	movf	setRFSW_Control@sw,w
  7163  075B  319F  2756  3186   	fcall	_setSw_Status
  7164                           
  7165                           ;RF_Control_B1.c: 351: setDimmerLights_Trigger(sw, 1);
  7166  075E  0020               	movlb	0	; select bank0
  7167  075F  01A2               	clrf	setDimmerLights_Trigger@command
  7168  0760  0AA2               	incf	setDimmerLights_Trigger@command,f
  7169  0761  0863               	movf	setRFSW_Control@sw,w
  7170  0762  319F  27C0  3186   	fcall	_setDimmerLights_Trigger
  7171                           
  7172                           ;RF_Control_B1.c: 352: setDimmerLights_Switch(sw, RFSW->Status);
  7173  0765  0879               	movf	_RFSW,w
  7174  0766  0086               	movwf	6
  7175  0767  0187               	clrf	7
  7176  0768  3000               	movlw	0
  7177  0769  1801               	btfsc	1,0
  7178  076A  3001               	movlw	1
  7179  076B  0020               	movlb	0	; select bank0
  7180  076C  00A2               	movwf	setDimmerLights_Switch@command
  7181  076D  0863               	movf	setRFSW_Control@sw,w
  7182  076E  319F  27B0  3186   	fcall	_setDimmerLights_Switch
  7183                           
  7184                           ;RF_Control_B1.c: 354: setDelayOff_GO(sw, 0, 0);
  7185  0771  0020               	movlb	0	; select bank0
  7186  0772  01AA               	clrf	setDelayOff_GO@command
  7187  0773  01AB               	clrf	setDelayOff_GO@value
  7188  0774  0863               	movf	setRFSW_Control@sw,w
  7189  0775  318B  23D4  3186   	fcall	_setDelayOff_GO
  7190                           
  7191                           ;RF_Control_B1.c: 355: setRF_DimmerLights(sw, 0);
  7192  0778  0020               	movlb	0	; select bank0
  7193  0779  01DD               	clrf	setRF_DimmerLights@on
  7194  077A                     L1:	
  7195  077A  0863               	movf	setRFSW_Control@sw,w
  7196  077B  318C  24A1  3186   	fcall	_setRF_DimmerLights
  7197                           
  7198                           ;RF_Control_B1.c: 356: }
  7199                           ;RF_Control_B1.c: 357: }
  7200                           ;RF_Control_B1.c: 358: setBuz(1, 100);
  7201  077E  3064               	movlw	100
  7202  077F  0020               	movlb	0	; select bank0
  7203  0780  00A9               	movwf	setBuz@time
  7204  0781  3000               	movlw	0
  7205  0782  00AA               	movwf	setBuz@time+1
  7206  0783  3001               	movlw	1
  7207  0784  3189  213B  3186   	fcall	_setBuz
  7208                           
  7209                           ;RF_Control_B1.c: 359: setTxData();
  7210  0787  3184  24E9         	fcall	_setTxData
  7211  0789  0008               	return
  7212  078A                     __end_of_setRFSW_Control:	
  7213                           
  7214                           	psect	text30
  7215  0BD4                     __ptext30:	
  7216 ;; *************** function _setDelayOff_GO *****************
  7217 ;; Defined at:
  7218 ;;		line 86 in file "../src/DelayOff_B1.c"
  7219 ;; Parameters:    Size  Location     Type
  7220 ;;  sw              1    wreg     unsigned char 
  7221 ;;  command         1   10[BANK0 ] unsigned char 
  7222 ;;  value           1   11[BANK0 ] unsigned char 
  7223 ;; Auto vars:     Size  Location     Type
  7224 ;;  sw              1   14[BANK0 ] unsigned char 
  7225 ;; Return value:  Size  Location     Type
  7226 ;;		None               void
  7227 ;; Registers used:
  7228 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7229 ;; Tracked objects:
  7230 ;;		On entry : 0/0
  7231 ;;		On exit  : 0/0
  7232 ;;		Unchanged: 0/0
  7233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7238 ;;Total ram usage:        5 bytes
  7239 ;; Hardware stack levels used:    1
  7240 ;; Hardware stack levels required when called:    7
  7241 ;; This function calls:
  7242 ;;		_DelayOffPointSelect
  7243 ;;		_DelayTimejudge
  7244 ;; This function is called by:
  7245 ;;		_setRFSW_Control
  7246 ;;		_Sw_DimmerOffFunc
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           
  7251                           ;psect for function _setDelayOff_GO
  7252  0BD4                     _setDelayOff_GO:	
  7253                           
  7254                           ;incstack = 0
  7255                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7256                           ;setDelayOff_GO@sw stored from wreg
  7257  0BD4  0020               	movlb	0	; select bank0
  7258  0BD5  00AE               	movwf	setDelayOff_GO@sw
  7259                           
  7260                           ;DelayOff_B1.c: 87: DelayOffPointSelect(sw);
  7261  0BD6  082E               	movf	setDelayOff_GO@sw,w
  7262  0BD7  319E  26AB  318B   	fcall	_DelayOffPointSelect
  7263                           
  7264                           ;DelayOff_B1.c: 88: if (DelayOff->Enable == 1) {
  7265  0BDA  0020               	movlb	0	; select bank0
  7266  0BDB  086B               	movf	_DelayOff,w
  7267  0BDC  0086               	movwf	6
  7268  0BDD  3001               	movlw	1	; select bank2/3
  7269  0BDE  0087               	movwf	7
  7270  0BDF  1C01               	btfss	1,0
  7271  0BE0  0008               	return
  7272                           
  7273                           ;DelayOff_B1.c: 89: DelayOff->GO = command == 1 ? 1 : 0;
  7274  0BE1  082A               	movf	setDelayOff_GO@command,w
  7275  0BE2  3A01               	xorlw	1
  7276  0BE3  3000               	movlw	0
  7277  0BE4  1903               	skipnz
  7278  0BE5  3001               	movlw	1
  7279  0BE6  00AC               	movwf	??_setDelayOff_GO
  7280  0BE7  086B               	movf	_DelayOff,w
  7281  0BE8  0086               	movwf	6
  7282  0BE9  3001               	movlw	1	; select bank2/3
  7283  0BEA  0087               	movwf	7
  7284  0BEB  0DAC               	rlf	??_setDelayOff_GO,f
  7285  0BEC  0801               	movf	1,w
  7286  0BED  062C               	xorwf	??_setDelayOff_GO,w
  7287  0BEE  39FD               	andlw	-3
  7288  0BEF  062C               	xorwf	??_setDelayOff_GO,w
  7289  0BF0  0081               	movwf	1
  7290                           
  7291                           ;DelayOff_B1.c: 90: if (command == 1) {
  7292  0BF1  082A               	movf	setDelayOff_GO@command,w
  7293  0BF2  3A01               	xorlw	1
  7294  0BF3  1D03               	skipz
  7295  0BF4  2C1F               	goto	l7711
  7296                           
  7297                           ;DelayOff_B1.c: 91: DelayOff->Value = DelayTimejudge(value);
  7298  0BF5  082B               	movf	setDelayOff_GO@value,w
  7299  0BF6  3193  2321  318B   	fcall	_DelayTimejudge
  7300  0BF9  0020               	movlb	0	; select bank0
  7301  0BFA  00AC               	movwf	??_setDelayOff_GO
  7302  0BFB  0A6B               	incf	_DelayOff,w
  7303  0BFC  0086               	movwf	6
  7304  0BFD  3001               	movlw	1	; select bank2/3
  7305  0BFE  0087               	movwf	7
  7306  0BFF  082C               	movf	??_setDelayOff_GO,w
  7307  0C00  0081               	movwf	1
  7308                           
  7309                           ;DelayOff_B1.c: 92: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
  7310  0C01  300F               	movlw	15
  7311  0C02  052B               	andwf	setDelayOff_GO@value,w
  7312  0C03  00AC               	movwf	??_setDelayOff_GO
  7313  0C04  082C               	movf	??_setDelayOff_GO,w
  7314  0C05  3A05               	xorlw	5
  7315  0C06  1903               	skipnz
  7316  0C07  2C0C               	goto	l7705
  7317  0C08  082B               	movf	setDelayOff_GO@value,w
  7318  0C09  390F               	andlw	15
  7319  0C0A  1D03               	btfss	3,2
  7320  0C0B  2C12               	goto	l7709
  7321  0C0C                     l7705:	
  7322  0C0C  3026               	movlw	38
  7323  0C0D  022B               	subwf	setDelayOff_GO@value,w
  7324  0C0E  1803               	skipnc
  7325  0C0F  2C12               	goto	l7709
  7326                           
  7327                           ;DelayOff_B1.c: 93: product->Data[26 + sw]=value;
  7328  0C10  082B               	movf	setDelayOff_GO@value,w
  7329  0C11  2C13               	goto	L2
  7330  0C12                     l7709:	
  7331                           ;DelayOff_B1.c: 94: } else {
  7332                           
  7333                           
  7334                           ;DelayOff_B1.c: 95: product->Data[26 + sw]=0x05;
  7335  0C12  3005               	movlw	5
  7336  0C13                     L2:	
  7337  0C13  00AC               	movwf	??_setDelayOff_GO
  7338  0C14  082E               	movf	setDelayOff_GO@sw,w
  7339  0C15  3E1A               	addlw	26
  7340  0C16  076E               	addwf	_product,w
  7341  0C17  00AD               	movwf	??_setDelayOff_GO+1
  7342  0C18  082D               	movf	??_setDelayOff_GO+1,w
  7343  0C19  0086               	movwf	6
  7344  0C1A  3001               	movlw	1	; select bank2/3
  7345  0C1B  0087               	movwf	7
  7346  0C1C  082C               	movf	??_setDelayOff_GO,w
  7347  0C1D  0081               	movwf	1
  7348                           
  7349                           ;DelayOff_B1.c: 96: }
  7350                           ;DelayOff_B1.c: 97: } else if (command == 0) {
  7351  0C1E  2C2B               	goto	l7715
  7352  0C1F                     l7711:	
  7353  0C1F  08AA               	movf	setDelayOff_GO@command,f
  7354  0C20  1D03               	skipz
  7355  0C21  2C2B               	goto	l7715
  7356                           
  7357                           ;DelayOff_B1.c: 98: product->Data[sw + 26]=0;
  7358  0C22  082E               	movf	setDelayOff_GO@sw,w
  7359  0C23  3E1A               	addlw	26
  7360  0C24  076E               	addwf	_product,w
  7361  0C25  00AC               	movwf	??_setDelayOff_GO
  7362  0C26  082C               	movf	??_setDelayOff_GO,w
  7363  0C27  0086               	movwf	6
  7364  0C28  3001               	movlw	1	; select bank2/3
  7365  0C29  0087               	movwf	7
  7366  0C2A  0181               	clrf	1
  7367  0C2B                     l7715:	
  7368                           
  7369                           ;DelayOff_B1.c: 99: }
  7370                           ;DelayOff_B1.c: 100: DelayOff->SecondTime = 0;
  7371  0C2B  086B               	movf	_DelayOff,w
  7372  0C2C  3E02               	addlw	2
  7373  0C2D  0086               	movwf	6
  7374  0C2E  3001               	movlw	1	; select bank2/3
  7375  0C2F  0087               	movwf	7
  7376  0C30  3000               	movlw	0
  7377  0C31  3FC0               	movwi [0]fsr1
  7378  0C32  3FC1               	movwi [1]fsr1
  7379                           
  7380                           ;DelayOff_B1.c: 101: DelayOff->MinuteTime = 0;
  7381  0C33  086B               	movf	_DelayOff,w
  7382  0C34  3E04               	addlw	4
  7383  0C35  0086               	movwf	6
  7384  0C36  3001               	movlw	1	; select bank2/3
  7385  0C37  0087               	movwf	7
  7386  0C38  0181               	clrf	1
  7387  0C39  0008               	return
  7388  0C3A                     __end_of_setDelayOff_GO:	
  7389                           
  7390                           	psect	text31
  7391  1321                     __ptext31:	
  7392 ;; *************** function _DelayTimejudge *****************
  7393 ;; Defined at:
  7394 ;;		line 106 in file "../src/DelayOff_B1.c"
  7395 ;; Parameters:    Size  Location     Type
  7396 ;;  value           1    wreg     unsigned char 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;  value           1    9[BANK0 ] unsigned char 
  7399 ;;  k               1    8[BANK0 ] unsigned char 
  7400 ;;  j               1    7[BANK0 ] unsigned char 
  7401 ;;  i               1    6[BANK0 ] unsigned char 
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      unsigned char 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2, status,0, pclath, cstack
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:        6 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    6
  7418 ;; This function calls:
  7419 ;;		___bmul
  7420 ;; This function is called by:
  7421 ;;		_setDelayOff_GO
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function _DelayTimejudge
  7427  1321                     _DelayTimejudge:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
  7431                           ;DelayTimejudge@value stored from wreg
  7432  1321  0020               	movlb	0	; select bank0
  7433  1322  00A9               	movwf	DelayTimejudge@value
  7434                           
  7435                           ;DelayOff_B1.c: 107: char i = 5, j = 0, k = 0;
  7436  1323  3005               	movlw	5
  7437  1324  00A4               	movwf	??_DelayTimejudge
  7438  1325  0824               	movf	??_DelayTimejudge,w
  7439  1326  00A6               	movwf	DelayTimejudge@i
  7440  1327  01A7               	clrf	DelayTimejudge@j
  7441  1328  01A8               	clrf	DelayTimejudge@k
  7442                           
  7443                           ;DelayOff_B1.c: 108: if (value <= 0x30) {
  7444  1329  3031               	movlw	49
  7445  132A  0229               	subwf	DelayTimejudge@value,w
  7446  132B  1803               	skipnc
  7447  132C  2B49               	goto	l7503
  7448                           
  7449                           ;DelayOff_B1.c: 109: j = value & 0x0f;
  7450  132D  0829               	movf	DelayTimejudge@value,w
  7451  132E  390F               	andlw	15
  7452  132F  00A4               	movwf	??_DelayTimejudge
  7453  1330  0824               	movf	??_DelayTimejudge,w
  7454  1331  00A7               	movwf	DelayTimejudge@j
  7455                           
  7456                           ;DelayOff_B1.c: 110: k = (value >> 4) & 0x0f;
  7457  1332  0829               	movf	DelayTimejudge@value,w
  7458  1333  00A4               	movwf	??_DelayTimejudge
  7459  1334  3004               	movlw	4
  7460  1335                     u7015:	
  7461  1335  36A4               	lsrf	??_DelayTimejudge,f
  7462  1336  0B89               	decfsz	9,f
  7463  1337  2B35               	goto	u7015
  7464  1338  0824               	movf	??_DelayTimejudge,w
  7465  1339  390F               	andlw	15
  7466  133A  00A5               	movwf	??_DelayTimejudge+1
  7467  133B  0825               	movf	??_DelayTimejudge+1,w
  7468  133C  00A8               	movwf	DelayTimejudge@k
  7469                           
  7470                           ;DelayOff_B1.c: 111: i = j + (k * 10);
  7471  133D  300A               	movlw	10
  7472  133E  00A4               	movwf	??_DelayTimejudge
  7473  133F  0824               	movf	??_DelayTimejudge,w
  7474  1340  00A0               	movwf	___bmul@multiplicand
  7475  1341  0828               	movf	DelayTimejudge@k,w
  7476  1342  3190  2088         	fcall	___bmul
  7477  1344  0020               	movlb	0	; select bank0
  7478  1345  0727               	addwf	DelayTimejudge@j,w
  7479  1346  00A5               	movwf	??_DelayTimejudge+1
  7480  1347  0825               	movf	??_DelayTimejudge+1,w
  7481  1348  00A6               	movwf	DelayTimejudge@i
  7482  1349                     l7503:	
  7483                           
  7484                           ;DelayOff_B1.c: 112: }
  7485                           ;DelayOff_B1.c: 133: return i;
  7486  1349  0826               	movf	DelayTimejudge@i,w
  7487  134A  0008               	return
  7488  134B                     __end_of_DelayTimejudge:	
  7489                           
  7490                           	psect	text32
  7491  1088                     __ptext32:	
  7492 ;; *************** function ___bmul *****************
  7493 ;; Defined at:
  7494 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;  multiplier      1    wreg     unsigned char 
  7497 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7498 ;; Auto vars:     Size  Location     Type
  7499 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7500 ;;  product         1    2[BANK0 ] unsigned char 
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      unsigned char 
  7503 ;; Registers used:
  7504 ;;		wreg, status,2, status,0
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7510 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7511 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7512 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;Total ram usage:        4 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:    5
  7517 ;; This function calls:
  7518 ;;		Nothing
  7519 ;; This function is called by:
  7520 ;;		_DelayTimejudge
  7521 ;; This function uses a non-reentrant model
  7522 ;;
  7523                           
  7524                           
  7525                           ;psect for function ___bmul
  7526  1088                     ___bmul:	
  7527                           
  7528                           ;incstack = 0
  7529                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7530                           ;___bmul@multiplier stored from wreg
  7531  1088  0020               	movlb	0	; select bank0
  7532  1089  00A3               	movwf	___bmul@multiplier
  7533  108A  01A2               	clrf	___bmul@product
  7534  108B                     l7473:	
  7535  108B  1C23               	btfss	___bmul@multiplier,0
  7536  108C  2891               	goto	l7477
  7537  108D  0820               	movf	___bmul@multiplicand,w
  7538  108E  00A1               	movwf	??___bmul
  7539  108F  0821               	movf	??___bmul,w
  7540  1090  07A2               	addwf	___bmul@product,f
  7541  1091                     l7477:	
  7542  1091  1003               	clrc
  7543  1092  0DA0               	rlf	___bmul@multiplicand,f
  7544  1093  1003               	clrc
  7545  1094  0CA3               	rrf	___bmul@multiplier,f
  7546  1095  08A3               	movf	___bmul@multiplier,f
  7547  1096  1D03               	skipz
  7548  1097  288B               	goto	l7473
  7549  1098  0822               	movf	___bmul@product,w
  7550  1099  0008               	return
  7551  109A                     __end_of___bmul:	
  7552                           
  7553                           	psect	text33
  7554  0801                     __ptext33:	
  7555 ;; *************** function _setRFSW_AdjControl *****************
  7556 ;; Defined at:
  7557 ;;		line 363 in file "../src/RF_Control_B1.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;  sw              1    wreg     unsigned char 
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;  sw              1   70[BANK0 ] unsigned char 
  7562 ;; Return value:  Size  Location     Type
  7563 ;;		None               void
  7564 ;; Registers used:
  7565 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7575 ;;Total ram usage:        3 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:   10
  7578 ;; This function calls:
  7579 ;;		_RfSWPointSelect
  7580 ;;		_setRF_DimmerValue
  7581 ;;		_setTxData
  7582 ;; This function is called by:
  7583 ;;		_setControl_Lights_Table
  7584 ;; This function uses a non-reentrant model
  7585 ;;
  7586                           
  7587                           
  7588                           ;psect for function _setRFSW_AdjControl
  7589  0801                     _setRFSW_AdjControl:	
  7590                           
  7591                           ;incstack = 0
  7592                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7593                           ;setRFSW_AdjControl@sw stored from wreg
  7594  0801  0020               	movlb	0	; select bank0
  7595  0802  00E6               	movwf	setRFSW_AdjControl@sw
  7596                           
  7597                           ;RF_Control_B1.c: 364: RfSWPointSelect(sw);
  7598  0803  0866               	movf	setRFSW_AdjControl@sw,w
  7599  0804  319E  26C1  3188   	fcall	_RfSWPointSelect
  7600                           
  7601                           ;RF_Control_B1.c: 365: if (RFSW->Status == 1) {
  7602  0807  0879               	movf	_RFSW,w
  7603  0808  0086               	movwf	6
  7604  0809  0187               	clrf	7
  7605  080A  1C01               	btfss	1,0
  7606  080B  2814               	goto	l7935
  7607                           
  7608                           ;RF_Control_B1.c: 366: Memory.Modify=1;
  7609  080C  0022               	movlb	2	; select bank2
  7610  080D  1461               	bsf	(_Memory^(0+256)+36),0
  7611                           
  7612                           ;RF_Control_B1.c: 367: setRF_DimmerValue(sw);
  7613  080E  0020               	movlb	0	; select bank0
  7614  080F  0866               	movf	setRFSW_AdjControl@sw,w
  7615  0810  3194  2462  3188   	fcall	_setRF_DimmerValue
  7616                           
  7617                           ;RF_Control_B1.c: 368: } else {
  7618  0813  2826               	goto	l1939
  7619  0814                     l7935:	
  7620                           
  7621                           ;RF_Control_B1.c: 369: product->Data[9]=product->Data[20 + sw];
  7622  0814  0020               	movlb	0	; select bank0
  7623  0815  0866               	movf	setRFSW_AdjControl@sw,w
  7624  0816  3E14               	addlw	20
  7625  0817  076E               	addwf	_product,w
  7626  0818  00E4               	movwf	??_setRFSW_AdjControl
  7627  0819  0864               	movf	??_setRFSW_AdjControl,w
  7628  081A  0086               	movwf	6
  7629  081B  3001               	movlw	1	; select bank2/3
  7630  081C  0087               	movwf	7
  7631  081D  0801               	movf	1,w
  7632  081E  00E5               	movwf	??_setRFSW_AdjControl+1
  7633  081F  086E               	movf	_product,w
  7634  0820  3E09               	addlw	9
  7635  0821  0086               	movwf	6
  7636  0822  3001               	movlw	1	; select bank2/3
  7637  0823  0087               	movwf	7
  7638  0824  0865               	movf	??_setRFSW_AdjControl+1,w
  7639  0825  0081               	movwf	1
  7640  0826                     l1939:	
  7641                           
  7642                           ;RF_Control_B1.c: 370: }
  7643                           ;RF_Control_B1.c: 371: product->Data[17]=product->Data[26 + sw];
  7644  0826  0020               	movlb	0	; select bank0
  7645  0827  0866               	movf	setRFSW_AdjControl@sw,w
  7646  0828  3E1A               	addlw	26
  7647  0829  076E               	addwf	_product,w
  7648  082A  00E4               	movwf	??_setRFSW_AdjControl
  7649  082B  0864               	movf	??_setRFSW_AdjControl,w
  7650  082C  0086               	movwf	6
  7651  082D  3001               	movlw	1	; select bank2/3
  7652  082E  0087               	movwf	7
  7653  082F  0801               	movf	1,w
  7654  0830  00E5               	movwf	??_setRFSW_AdjControl+1
  7655  0831  086E               	movf	_product,w
  7656  0832  3E11               	addlw	17
  7657  0833  0086               	movwf	6
  7658  0834  3001               	movlw	1	; select bank2/3
  7659  0835  0087               	movwf	7
  7660  0836  0865               	movf	??_setRFSW_AdjControl+1,w
  7661  0837  0081               	movwf	1
  7662                           
  7663                           ;RF_Control_B1.c: 372: setTxData();
  7664  0838  3184  24E9         	fcall	_setTxData
  7665  083A  0008               	return
  7666  083B                     __end_of_setRFSW_AdjControl:	
  7667                           
  7668                           	psect	text34
  7669  1462                     __ptext34:	
  7670 ;; *************** function _setRF_DimmerValue *****************
  7671 ;; Defined at:
  7672 ;;		line 383 in file "../src/RF_Control_B1.c"
  7673 ;; Parameters:    Size  Location     Type
  7674 ;;  lights          1    wreg     unsigned char 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  lights          1   67[BANK0 ] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;		None               void
  7679 ;; Registers used:
  7680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;Total ram usage:        3 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    9
  7693 ;; This function calls:
  7694 ;;		_setDimmerLights_AdjRF
  7695 ;; This function is called by:
  7696 ;;		_setRFSW_AdjControl
  7697 ;; This function uses a non-reentrant model
  7698 ;;
  7699                           
  7700                           
  7701                           ;psect for function _setRF_DimmerValue
  7702  1462                     _setRF_DimmerValue:	
  7703                           
  7704                           ;incstack = 0
  7705                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7706                           ;setRF_DimmerValue@lights stored from wreg
  7707  1462  0020               	movlb	0	; select bank0
  7708  1463  00E3               	movwf	setRF_DimmerValue@lights
  7709                           
  7710                           ;RF_Control_B1.c: 384: if (RF_Data[9] > 0x64) {
  7711  1464  3065               	movlw	101
  7712  1465  0022               	movlb	2	; select bank2
  7713  1466  0229               	subwf	(_RF_Data^(0+256)+9),w
  7714  1467  1C03               	skipc
  7715  1468  2C6F               	goto	l7779
  7716                           
  7717                           ;RF_Control_B1.c: 385: RF_Data[9] = 0x64;
  7718  1469  3064               	movlw	100
  7719  146A  0020               	movlb	0	; select bank0
  7720  146B  00E1               	movwf	??_setRF_DimmerValue
  7721  146C  0861               	movf	??_setRF_DimmerValue,w
  7722  146D  0022               	movlb	2	; select bank2
  7723  146E  00A9               	movwf	(_RF_Data^(0+256)+9)
  7724  146F                     l7779:	
  7725                           
  7726                           ;RF_Control_B1.c: 386: }
  7727                           ;RF_Control_B1.c: 387: product->Data[9]=RF_Data[9];
  7728  146F  0829               	movf	(_RF_Data^(0+256)+9),w
  7729  1470  0020               	movlb	0	; select bank0
  7730  1471  00E1               	movwf	??_setRF_DimmerValue
  7731  1472  086E               	movf	_product,w
  7732  1473  3E09               	addlw	9
  7733  1474  0086               	movwf	6
  7734  1475  3001               	movlw	1	; select bank2/3
  7735  1476  0087               	movwf	7
  7736  1477  0861               	movf	??_setRF_DimmerValue,w
  7737  1478  0081               	movwf	1
  7738                           
  7739                           ;RF_Control_B1.c: 388: product->Data[11]=lights;
  7740  1479  0863               	movf	setRF_DimmerValue@lights,w
  7741  147A  00E1               	movwf	??_setRF_DimmerValue
  7742  147B  086E               	movf	_product,w
  7743  147C  3E0B               	addlw	11
  7744  147D  0086               	movwf	6
  7745  147E  3001               	movlw	1	; select bank2/3
  7746  147F  0087               	movwf	7
  7747  1480  0861               	movf	??_setRF_DimmerValue,w
  7748  1481  0081               	movwf	1
  7749                           
  7750                           ;RF_Control_B1.c: 389: product->Data[(20 + lights)]=product->Data[9];
  7751  1482  086E               	movf	_product,w
  7752  1483  3E09               	addlw	9
  7753  1484  0086               	movwf	6
  7754  1485  3001               	movlw	1	; select bank2/3
  7755  1486  0087               	movwf	7
  7756  1487  0801               	movf	1,w
  7757  1488  00E1               	movwf	??_setRF_DimmerValue
  7758  1489  0863               	movf	setRF_DimmerValue@lights,w
  7759  148A  3E14               	addlw	20
  7760  148B  076E               	addwf	_product,w
  7761  148C  00E2               	movwf	??_setRF_DimmerValue+1
  7762  148D  0862               	movf	??_setRF_DimmerValue+1,w
  7763  148E  0086               	movwf	6
  7764  148F  3001               	movlw	1	; select bank2/3
  7765  1490  0087               	movwf	7
  7766  1491  0861               	movf	??_setRF_DimmerValue,w
  7767  1492  0081               	movwf	1
  7768                           
  7769                           ;RF_Control_B1.c: 390: setDimmerLights_AdjRF(lights);
  7770  1493  0863               	movf	setRF_DimmerValue@lights,w
  7771  1494  3192  2287         	fcall	_setDimmerLights_AdjRF
  7772  1496  0008               	return
  7773  1497                     __end_of_setRF_DimmerValue:	
  7774                           
  7775                           	psect	text35
  7776  1287                     __ptext35:	
  7777 ;; *************** function _setDimmerLights_AdjRF *****************
  7778 ;; Defined at:
  7779 ;;		line 690 in file "../src/Dimmer_B1.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  lights          1    wreg     unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  lights          1   64[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;		None               void
  7786 ;; Registers used:
  7787 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:        2 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    8
  7800 ;; This function calls:
  7801 ;;		_DimmerLightsPointSelect
  7802 ;;		_getPercentValue
  7803 ;; This function is called by:
  7804 ;;		_setRF_DimmerValue
  7805 ;; This function uses a non-reentrant model
  7806 ;;
  7807                           
  7808                           
  7809                           ;psect for function _setDimmerLights_AdjRF
  7810  1287                     _setDimmerLights_AdjRF:	
  7811                           
  7812                           ;incstack = 0
  7813                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7814                           ;setDimmerLights_AdjRF@lights stored from wreg
  7815  1287  0020               	movlb	0	; select bank0
  7816  1288  00E0               	movwf	setDimmerLights_AdjRF@lights
  7817                           
  7818                           ;Dimmer_B1.c: 692: DimmerLightsPointSelect(lights);
  7819  1289  0860               	movf	setDimmerLights_AdjRF@lights,w
  7820  128A  319E  26B6  3192   	fcall	_DimmerLightsPointSelect
  7821                           
  7822                           ;Dimmer_B1.c: 693: DimmerLights->AdjRF = 1;
  7823  128D  0020               	movlb	0	; select bank0
  7824  128E  086C               	movf	_DimmerLights,w
  7825  128F  0086               	movwf	6
  7826  1290  3001               	movlw	1	; select bank2/3
  7827  1291  0087               	movwf	7
  7828  1292  1501               	bsf	1,2
  7829                           
  7830                           ;Dimmer_B1.c: 694: DimmerLights->Signal = 1;
  7831  1293  086C               	movf	_DimmerLights,w
  7832  1294  0086               	movwf	6
  7833  1295  3001               	movlw	1	; select bank2/3
  7834  1296  0087               	movwf	7
  7835  1297  1481               	bsf	1,1
  7836                           
  7837                           ;Dimmer_B1.c: 695: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  7838  1298  086E               	movf	_product,w
  7839  1299  3E09               	addlw	9
  7840  129A  0086               	movwf	6
  7841  129B  3001               	movlw	1	; select bank2/3
  7842  129C  0087               	movwf	7
  7843  129D  0801               	movf	1,w
  7844  129E  3189  21EF         	fcall	_getPercentValue
  7845  12A0  0020               	movlb	0	; select bank0
  7846  12A1  00DF               	movwf	??_setDimmerLights_AdjRF
  7847  12A2  086C               	movf	_DimmerLights,w
  7848  12A3  3E05               	addlw	5
  7849  12A4  0086               	movwf	6
  7850  12A5  3001               	movlw	1	; select bank2/3
  7851  12A6  0087               	movwf	7
  7852  12A7  085F               	movf	??_setDimmerLights_AdjRF,w
  7853  12A8  0081               	movwf	1
  7854  12A9  0008               	return
  7855  12AA                     __end_of_setDimmerLights_AdjRF:	
  7856                           
  7857                           	psect	text36
  7858  09EF                     __ptext36:	
  7859 ;; *************** function _getPercentValue *****************
  7860 ;; Defined at:
  7861 ;;		line 763 in file "../src/Dimmer_B1.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  value           1    wreg     unsigned char 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  value           1   59[BANK0 ] unsigned char 
  7866 ;;  i               3   60[BANK0 ] float 
  7867 ;; Return value:  Size  Location     Type
  7868 ;;                  1    wreg      unsigned char 
  7869 ;; Registers used:
  7870 ;;		wreg, status,2, status,0, pclath, cstack
  7871 ;; Tracked objects:
  7872 ;;		On entry : 0/0
  7873 ;;		On exit  : 0/0
  7874 ;;		Unchanged: 0/0
  7875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7879 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7880 ;;Total ram usage:        6 bytes
  7881 ;; Hardware stack levels used:    1
  7882 ;; Hardware stack levels required when called:    7
  7883 ;; This function calls:
  7884 ;;		___awtoft
  7885 ;;		___ftadd
  7886 ;;		___ftdiv
  7887 ;;		___ftmul
  7888 ;;		___fttol
  7889 ;; This function is called by:
  7890 ;;		_setDimmerLights_AdjRF
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _getPercentValue
  7896  09EF                     _getPercentValue:	
  7897                           
  7898                           ;incstack = 0
  7899                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  7900                           ;getPercentValue@value stored from wreg
  7901  09EF  0020               	movlb	0	; select bank0
  7902  09F0  00DB               	movwf	getPercentValue@value
  7903                           
  7904                           ;Dimmer_B1.c: 765: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
  7905  09F1  3000               	movlw	0
  7906  09F2  00DC               	movwf	getPercentValue@i
  7907  09F3  30E0               	movlw	224
  7908  09F4  00DD               	movwf	getPercentValue@i+1
  7909  09F5  3041               	movlw	65
  7910  09F6  00DE               	movwf	getPercentValue@i+2
  7911                           
  7912                           ;Dimmer_B1.c: 766: i /= 100;
  7913  09F7  3000               	movlw	0
  7914  09F8  00AE               	movwf	___ftdiv@f2
  7915  09F9  30C8               	movlw	200
  7916  09FA  00AF               	movwf	___ftdiv@f2+1
  7917  09FB  3042               	movlw	66
  7918  09FC  00B0               	movwf	___ftdiv@f2+2
  7919  09FD  085C               	movf	getPercentValue@i,w
  7920  09FE  00B1               	movwf	___ftdiv@f1
  7921  09FF  085D               	movf	getPercentValue@i+1,w
  7922  0A00  00B2               	movwf	___ftdiv@f1+1
  7923  0A01  085E               	movf	getPercentValue@i+2,w
  7924  0A02  00B3               	movwf	___ftdiv@f1+2
  7925  0A03  3186  2656  3189   	fcall	___ftdiv
  7926  0A06  0020               	movlb	0	; select bank0
  7927  0A07  082E               	movf	?___ftdiv,w
  7928  0A08  00DC               	movwf	getPercentValue@i
  7929  0A09  082F               	movf	?___ftdiv+1,w
  7930  0A0A  00DD               	movwf	getPercentValue@i+1
  7931  0A0B  0830               	movf	?___ftdiv+2,w
  7932  0A0C  00DE               	movwf	getPercentValue@i+2
  7933                           
  7934                           ;Dimmer_B1.c: 767: return (char) (((100 - value) * i) + ((char)((100-60)*0.8)));
  7935  0A0D  085B               	movf	getPercentValue@value,w
  7936  0A0E  00D9               	movwf	??_getPercentValue
  7937  0A0F  01DA               	clrf	??_getPercentValue+1
  7938  0A10  09D9               	comf	??_getPercentValue,f
  7939  0A11  09DA               	comf	??_getPercentValue+1,f
  7940  0A12  0AD9               	incf	??_getPercentValue,f
  7941  0A13  1903               	skipnz
  7942  0A14  0ADA               	incf	??_getPercentValue+1,f
  7943  0A15  0859               	movf	??_getPercentValue,w
  7944  0A16  3E64               	addlw	100
  7945  0A17  00A8               	movwf	___awtoft@c
  7946  0A18  3000               	movlw	0
  7947  0A19  3D5A               	addwfc	??_getPercentValue+1,w
  7948  0A1A  00A9               	movwf	___awtoft@c+1
  7949  0A1B  3192  2220  3189   	fcall	___awtoft
  7950  0A1E  0020               	movlb	0	; select bank0
  7951  0A1F  0828               	movf	?___awtoft,w
  7952  0A20  00B1               	movwf	___ftmul@f2
  7953  0A21  0829               	movf	?___awtoft+1,w
  7954  0A22  00B2               	movwf	___ftmul@f2+1
  7955  0A23  082A               	movf	?___awtoft+2,w
  7956  0A24  00B3               	movwf	___ftmul@f2+2
  7957  0A25  085C               	movf	getPercentValue@i,w
  7958  0A26  00AE               	movwf	___ftmul@f1
  7959  0A27  085D               	movf	getPercentValue@i+1,w
  7960  0A28  00AF               	movwf	___ftmul@f1+1
  7961  0A29  085E               	movf	getPercentValue@i+2,w
  7962  0A2A  00B0               	movwf	___ftmul@f1+2
  7963  0A2B  3185  25A2  3189   	fcall	___ftmul
  7964  0A2E  0020               	movlb	0	; select bank0
  7965  0A2F  082E               	movf	?___ftmul,w
  7966  0A30  00C1               	movwf	___ftadd@f2
  7967  0A31  082F               	movf	?___ftmul+1,w
  7968  0A32  00C2               	movwf	___ftadd@f2+1
  7969  0A33  0830               	movf	?___ftmul+2,w
  7970  0A34  00C3               	movwf	___ftadd@f2+2
  7971  0A35  3000               	movlw	0
  7972  0A36  00BE               	movwf	___ftadd@f1
  7973  0A37  3000               	movlw	0
  7974  0A38  00BF               	movwf	___ftadd@f1+1
  7975  0A39  3042               	movlw	66
  7976  0A3A  00C0               	movwf	___ftadd@f1+2
  7977  0A3B  3183  232C  3189   	fcall	___ftadd
  7978  0A3E  0020               	movlb	0	; select bank0
  7979  0A3F  083E               	movf	?___ftadd,w
  7980  0A40  00CB               	movwf	___fttol@f1
  7981  0A41  083F               	movf	?___ftadd+1,w
  7982  0A42  00CC               	movwf	___fttol@f1+1
  7983  0A43  0840               	movf	?___ftadd+2,w
  7984  0A44  00CD               	movwf	___fttol@f1+2
  7985  0A45  318F  2779         	fcall	___fttol
  7986  0A47  0020               	movlb	0	; select bank0
  7987  0A48  084B               	movf	?___fttol,w
  7988  0A49  0008               	return
  7989  0A4A                     __end_of_getPercentValue:	
  7990                           
  7991                           	psect	text37
  7992  05A2                     __ptext37:	
  7993 ;; *************** function ___ftmul *****************
  7994 ;; Defined at:
  7995 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  f1              3   14[BANK0 ] float 
  7998 ;;  f2              3   17[BANK0 ] float 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8001 ;;  sign            1   29[BANK0 ] unsigned char 
  8002 ;;  cntr            1   28[BANK0 ] unsigned char 
  8003 ;;  exp             1   24[BANK0 ] unsigned char 
  8004 ;; Return value:  Size  Location     Type
  8005 ;;                  3   14[BANK0 ] float 
  8006 ;; Registers used:
  8007 ;;		wreg, status,2, status,0, pclath, cstack
  8008 ;; Tracked objects:
  8009 ;;		On entry : 0/0
  8010 ;;		On exit  : 0/0
  8011 ;;		Unchanged: 0/0
  8012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8013 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8014 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8016 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8017 ;;Total ram usage:       16 bytes
  8018 ;; Hardware stack levels used:    1
  8019 ;; Hardware stack levels required when called:    6
  8020 ;; This function calls:
  8021 ;;		___ftpack
  8022 ;; This function is called by:
  8023 ;;		_getPercentValue
  8024 ;; This function uses a non-reentrant model
  8025 ;;
  8026                           
  8027                           
  8028                           ;psect for function ___ftmul
  8029  05A2                     ___ftmul:	
  8030                           
  8031                           ;incstack = 0
  8032                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8033  05A2  0020               	movlb	0	; select bank0
  8034  05A3  082E               	movf	___ftmul@f1,w
  8035  05A4  00B4               	movwf	??___ftmul
  8036  05A5  082F               	movf	___ftmul@f1+1,w
  8037  05A6  00B5               	movwf	??___ftmul+1
  8038  05A7  0830               	movf	___ftmul@f1+2,w
  8039  05A8  00B6               	movwf	??___ftmul+2
  8040  05A9  1003               	clrc
  8041  05AA  0D35               	rlf	??___ftmul+1,w
  8042  05AB  0D36               	rlf	??___ftmul+2,w
  8043  05AC  00B7               	movwf	??___ftmul+3
  8044  05AD  0837               	movf	??___ftmul+3,w
  8045  05AE  00B8               	movwf	___ftmul@exp
  8046  05AF  08B8               	movf	___ftmul@exp,f
  8047  05B0  1D03               	skipz
  8048  05B1  2DB9               	goto	l5351
  8049  05B2  3000               	movlw	0
  8050  05B3  00AE               	movwf	?___ftmul
  8051  05B4  3000               	movlw	0
  8052  05B5  00AF               	movwf	?___ftmul+1
  8053  05B6  3000               	movlw	0
  8054  05B7  00B0               	movwf	?___ftmul+2
  8055  05B8  0008               	return
  8056  05B9                     l5351:	
  8057  05B9  0831               	movf	___ftmul@f2,w
  8058  05BA  00B4               	movwf	??___ftmul
  8059  05BB  0832               	movf	___ftmul@f2+1,w
  8060  05BC  00B5               	movwf	??___ftmul+1
  8061  05BD  0833               	movf	___ftmul@f2+2,w
  8062  05BE  00B6               	movwf	??___ftmul+2
  8063  05BF  1003               	clrc
  8064  05C0  0D35               	rlf	??___ftmul+1,w
  8065  05C1  0D36               	rlf	??___ftmul+2,w
  8066  05C2  00B7               	movwf	??___ftmul+3
  8067  05C3  0837               	movf	??___ftmul+3,w
  8068  05C4  00BD               	movwf	___ftmul@sign
  8069  05C5  08BD               	movf	___ftmul@sign,f
  8070  05C6  1D03               	skipz
  8071  05C7  2DCF               	goto	l5357
  8072  05C8  3000               	movlw	0
  8073  05C9  00AE               	movwf	?___ftmul
  8074  05CA  3000               	movlw	0
  8075  05CB  00AF               	movwf	?___ftmul+1
  8076  05CC  3000               	movlw	0
  8077  05CD  00B0               	movwf	?___ftmul+2
  8078  05CE  0008               	return
  8079  05CF                     l5357:	
  8080  05CF  083D               	movf	___ftmul@sign,w
  8081  05D0  3E7B               	addlw	123
  8082  05D1  00B4               	movwf	??___ftmul
  8083  05D2  0834               	movf	??___ftmul,w
  8084  05D3  07B8               	addwf	___ftmul@exp,f
  8085  05D4  082E               	movf	___ftmul@f1,w
  8086  05D5  00B4               	movwf	??___ftmul
  8087  05D6  082F               	movf	___ftmul@f1+1,w
  8088  05D7  00B5               	movwf	??___ftmul+1
  8089  05D8  0830               	movf	___ftmul@f1+2,w
  8090  05D9  00B6               	movwf	??___ftmul+2
  8091  05DA  3010               	movlw	16
  8092  05DB                     u3935:	
  8093  05DB  36B6               	lsrf	??___ftmul+2,f
  8094  05DC  0CB5               	rrf	??___ftmul+1,f
  8095  05DD  0CB4               	rrf	??___ftmul,f
  8096  05DE  0B89               	decfsz	9,f
  8097  05DF  2DDB               	goto	u3935
  8098  05E0  0834               	movf	??___ftmul,w
  8099  05E1  00B7               	movwf	??___ftmul+3
  8100  05E2  0837               	movf	??___ftmul+3,w
  8101  05E3  00BD               	movwf	___ftmul@sign
  8102  05E4  0831               	movf	___ftmul@f2,w
  8103  05E5  00B4               	movwf	??___ftmul
  8104  05E6  0832               	movf	___ftmul@f2+1,w
  8105  05E7  00B5               	movwf	??___ftmul+1
  8106  05E8  0833               	movf	___ftmul@f2+2,w
  8107  05E9  00B6               	movwf	??___ftmul+2
  8108  05EA  3010               	movlw	16
  8109  05EB                     u3945:	
  8110  05EB  36B6               	lsrf	??___ftmul+2,f
  8111  05EC  0CB5               	rrf	??___ftmul+1,f
  8112  05ED  0CB4               	rrf	??___ftmul,f
  8113  05EE  0B89               	decfsz	9,f
  8114  05EF  2DEB               	goto	u3945
  8115  05F0  0834               	movf	??___ftmul,w
  8116  05F1  00B7               	movwf	??___ftmul+3
  8117  05F2  0837               	movf	??___ftmul+3,w
  8118  05F3  06BD               	xorwf	___ftmul@sign,f
  8119  05F4  3080               	movlw	128
  8120  05F5  00B4               	movwf	??___ftmul
  8121  05F6  0834               	movf	??___ftmul,w
  8122  05F7  05BD               	andwf	___ftmul@sign,f
  8123  05F8  17AF               	bsf	___ftmul@f1+1,7
  8124  05F9  17B2               	bsf	___ftmul@f2+1,7
  8125  05FA  30FF               	movlw	255
  8126  05FB  05B1               	andwf	___ftmul@f2,f
  8127  05FC  30FF               	movlw	255
  8128  05FD  05B2               	andwf	___ftmul@f2+1,f
  8129  05FE  3000               	movlw	0
  8130  05FF  05B3               	andwf	___ftmul@f2+2,f
  8131  0600  3000               	movlw	0
  8132  0601  00B9               	movwf	___ftmul@f3_as_product
  8133  0602  3000               	movlw	0
  8134  0603  00BA               	movwf	___ftmul@f3_as_product+1
  8135  0604  3000               	movlw	0
  8136  0605  00BB               	movwf	___ftmul@f3_as_product+2
  8137  0606  3007               	movlw	7
  8138  0607  00B4               	movwf	??___ftmul
  8139  0608  0834               	movf	??___ftmul,w
  8140  0609  00BC               	movwf	___ftmul@cntr
  8141  060A                     l5369:	
  8142  060A  1C2E               	btfss	___ftmul@f1,0
  8143  060B  2E12               	goto	l5373
  8144  060C  0831               	movf	___ftmul@f2,w
  8145  060D  07B9               	addwf	___ftmul@f3_as_product,f
  8146  060E  0832               	movf	___ftmul@f2+1,w
  8147  060F  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8148  0610  0833               	movf	___ftmul@f2+2,w
  8149  0611  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8150  0612                     l5373:	
  8151  0612  3001               	movlw	1
  8152  0613                     u3965:	
  8153  0613  36B0               	lsrf	___ftmul@f1+2,f
  8154  0614  0CAF               	rrf	___ftmul@f1+1,f
  8155  0615  0CAE               	rrf	___ftmul@f1,f
  8156  0616  0B89               	decfsz	9,f
  8157  0617  2E13               	goto	u3965
  8158  0618  3001               	movlw	1
  8159  0619                     u3975:	
  8160  0619  35B1               	lslf	___ftmul@f2,f
  8161  061A  0DB2               	rlf	___ftmul@f2+1,f
  8162  061B  0DB3               	rlf	___ftmul@f2+2,f
  8163  061C  0B89               	decfsz	9,f
  8164  061D  2E19               	goto	u3975
  8165  061E  3001               	movlw	1
  8166  061F  02BC               	subwf	___ftmul@cntr,f
  8167  0620  1D03               	btfss	3,2
  8168  0621  2E0A               	goto	l5369
  8169  0622  3009               	movlw	9
  8170  0623  00B4               	movwf	??___ftmul
  8171  0624  0834               	movf	??___ftmul,w
  8172  0625  00BC               	movwf	___ftmul@cntr
  8173  0626                     l5381:	
  8174  0626  1C2E               	btfss	___ftmul@f1,0
  8175  0627  2E2E               	goto	l5385
  8176  0628  0831               	movf	___ftmul@f2,w
  8177  0629  07B9               	addwf	___ftmul@f3_as_product,f
  8178  062A  0832               	movf	___ftmul@f2+1,w
  8179  062B  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8180  062C  0833               	movf	___ftmul@f2+2,w
  8181  062D  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8182  062E                     l5385:	
  8183  062E  3001               	movlw	1
  8184  062F                     u4005:	
  8185  062F  36B0               	lsrf	___ftmul@f1+2,f
  8186  0630  0CAF               	rrf	___ftmul@f1+1,f
  8187  0631  0CAE               	rrf	___ftmul@f1,f
  8188  0632  0B89               	decfsz	9,f
  8189  0633  2E2F               	goto	u4005
  8190  0634  3001               	movlw	1
  8191  0635                     u4015:	
  8192  0635  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8193  0636  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8194  0637  0CB9               	rrf	___ftmul@f3_as_product,f
  8195  0638  0B89               	decfsz	9,f
  8196  0639  2E35               	goto	u4015
  8197  063A  3001               	movlw	1
  8198  063B  02BC               	subwf	___ftmul@cntr,f
  8199  063C  1D03               	btfss	3,2
  8200  063D  2E26               	goto	l5381
  8201  063E  0839               	movf	___ftmul@f3_as_product,w
  8202  063F  00A0               	movwf	___ftpack@arg
  8203  0640  083A               	movf	___ftmul@f3_as_product+1,w
  8204  0641  00A1               	movwf	___ftpack@arg+1
  8205  0642  083B               	movf	___ftmul@f3_as_product+2,w
  8206  0643  00A2               	movwf	___ftpack@arg+2
  8207  0644  0838               	movf	___ftmul@exp,w
  8208  0645  00B4               	movwf	??___ftmul
  8209  0646  0834               	movf	??___ftmul,w
  8210  0647  00A3               	movwf	___ftpack@exp
  8211  0648  083D               	movf	___ftmul@sign,w
  8212  0649  00B5               	movwf	??___ftmul+1
  8213  064A  0835               	movf	??___ftmul+1,w
  8214  064B  00A4               	movwf	___ftpack@sign
  8215  064C  318A  22A9         	fcall	___ftpack
  8216  064E  0020               	movlb	0	; select bank0
  8217  064F  0820               	movf	?___ftpack,w
  8218  0650  00AE               	movwf	?___ftmul
  8219  0651  0821               	movf	?___ftpack+1,w
  8220  0652  00AF               	movwf	?___ftmul+1
  8221  0653  0822               	movf	?___ftpack+2,w
  8222  0654  00B0               	movwf	?___ftmul+2
  8223  0655  0008               	return
  8224  0656                     __end_of___ftmul:	
  8225                           
  8226                           	psect	text38
  8227  032C                     __ptext38:	
  8228 ;; *************** function ___ftadd *****************
  8229 ;; Defined at:
  8230 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
  8231 ;; Parameters:    Size  Location     Type
  8232 ;;  f1              3   30[BANK0 ] float 
  8233 ;;  f2              3   33[BANK0 ] float 
  8234 ;; Auto vars:     Size  Location     Type
  8235 ;;  exp1            1   42[BANK0 ] unsigned char 
  8236 ;;  exp2            1   41[BANK0 ] unsigned char 
  8237 ;;  sign            1   40[BANK0 ] unsigned char 
  8238 ;; Return value:  Size  Location     Type
  8239 ;;                  3   30[BANK0 ] float 
  8240 ;; Registers used:
  8241 ;;		wreg, status,2, status,0, pclath, cstack
  8242 ;; Tracked objects:
  8243 ;;		On entry : 0/0
  8244 ;;		On exit  : 0/0
  8245 ;;		Unchanged: 0/0
  8246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8251 ;;Total ram usage:       13 bytes
  8252 ;; Hardware stack levels used:    1
  8253 ;; Hardware stack levels required when called:    6
  8254 ;; This function calls:
  8255 ;;		___ftpack
  8256 ;; This function is called by:
  8257 ;;		_getPercentValue
  8258 ;; This function uses a non-reentrant model
  8259 ;;
  8260                           
  8261                           
  8262                           ;psect for function ___ftadd
  8263  032C                     ___ftadd:	
  8264                           
  8265                           ;incstack = 0
  8266                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  8267  032C  0020               	movlb	0	; select bank0
  8268  032D  083E               	movf	___ftadd@f1,w
  8269  032E  00C4               	movwf	??___ftadd
  8270  032F  083F               	movf	___ftadd@f1+1,w
  8271  0330  00C5               	movwf	??___ftadd+1
  8272  0331  0840               	movf	___ftadd@f1+2,w
  8273  0332  00C6               	movwf	??___ftadd+2
  8274  0333  1003               	clrc
  8275  0334  0D45               	rlf	??___ftadd+1,w
  8276  0335  0D46               	rlf	??___ftadd+2,w
  8277  0336  00C7               	movwf	??___ftadd+3
  8278  0337  0847               	movf	??___ftadd+3,w
  8279  0338  00CA               	movwf	___ftadd@exp1
  8280  0339  0841               	movf	___ftadd@f2,w
  8281  033A  00C4               	movwf	??___ftadd
  8282  033B  0842               	movf	___ftadd@f2+1,w
  8283  033C  00C5               	movwf	??___ftadd+1
  8284  033D  0843               	movf	___ftadd@f2+2,w
  8285  033E  00C6               	movwf	??___ftadd+2
  8286  033F  1003               	clrc
  8287  0340  0D45               	rlf	??___ftadd+1,w
  8288  0341  0D46               	rlf	??___ftadd+2,w
  8289  0342  00C7               	movwf	??___ftadd+3
  8290  0343  0847               	movf	??___ftadd+3,w
  8291  0344  00C9               	movwf	___ftadd@exp2
  8292  0345  084A               	movf	___ftadd@exp1,w
  8293  0346  1903               	btfsc	3,2
  8294  0347  2B54               	goto	l5239
  8295  0348  0849               	movf	___ftadd@exp2,w
  8296  0349  024A               	subwf	___ftadd@exp1,w
  8297  034A  1803               	skipnc
  8298  034B  2B5B               	goto	l5243
  8299  034C  034A               	decf	___ftadd@exp1,w
  8300  034D  3AFF               	xorlw	255
  8301  034E  0749               	addwf	___ftadd@exp2,w
  8302  034F  00C4               	movwf	??___ftadd
  8303  0350  3019               	movlw	25
  8304  0351  0244               	subwf	??___ftadd,w
  8305  0352  1C03               	skipc
  8306  0353  2B5B               	goto	l5243
  8307  0354                     l5239:	
  8308  0354  0841               	movf	___ftadd@f2,w
  8309  0355  00BE               	movwf	?___ftadd
  8310  0356  0842               	movf	___ftadd@f2+1,w
  8311  0357  00BF               	movwf	?___ftadd+1
  8312  0358  0843               	movf	___ftadd@f2+2,w
  8313  0359  00C0               	movwf	?___ftadd+2
  8314  035A  0008               	return
  8315  035B                     l5243:	
  8316  035B  0849               	movf	___ftadd@exp2,w
  8317  035C  1903               	btfsc	3,2
  8318  035D  0008               	return
  8319  035E  084A               	movf	___ftadd@exp1,w
  8320  035F  0249               	subwf	___ftadd@exp2,w
  8321  0360  1803               	skipnc
  8322  0361  2B6A               	goto	l5249
  8323  0362  0349               	decf	___ftadd@exp2,w
  8324  0363  3AFF               	xorlw	255
  8325  0364  074A               	addwf	___ftadd@exp1,w
  8326  0365  00C4               	movwf	??___ftadd
  8327  0366  3019               	movlw	25
  8328  0367  0244               	subwf	??___ftadd,w
  8329  0368  1803               	btfsc	3,0
  8330  0369  0008               	return
  8331  036A                     l5249:	
  8332  036A  3006               	movlw	6
  8333  036B  00C4               	movwf	??___ftadd
  8334  036C  0844               	movf	??___ftadd,w
  8335  036D  00C8               	movwf	___ftadd@sign
  8336  036E  1BC0               	btfsc	___ftadd@f1+2,7
  8337  036F  17C8               	bsf	___ftadd@sign,7
  8338  0370  1BC3               	btfsc	___ftadd@f2+2,7
  8339  0371  1748               	bsf	___ftadd@sign,6
  8340  0372  17BF               	bsf	___ftadd@f1+1,7
  8341  0373  30FF               	movlw	255
  8342  0374  05BE               	andwf	___ftadd@f1,f
  8343  0375  30FF               	movlw	255
  8344  0376  05BF               	andwf	___ftadd@f1+1,f
  8345  0377  3000               	movlw	0
  8346  0378  05C0               	andwf	___ftadd@f1+2,f
  8347  0379  17C2               	bsf	___ftadd@f2+1,7
  8348  037A  30FF               	movlw	255
  8349  037B  05C1               	andwf	___ftadd@f2,f
  8350  037C  30FF               	movlw	255
  8351  037D  05C2               	andwf	___ftadd@f2+1,f
  8352  037E  3000               	movlw	0
  8353  037F  05C3               	andwf	___ftadd@f2+2,f
  8354  0380  0849               	movf	___ftadd@exp2,w
  8355  0381  024A               	subwf	___ftadd@exp1,w
  8356  0382  1803               	skipnc
  8357  0383  2BA6               	goto	l5271
  8358  0384                     l5261:	
  8359  0384  3001               	movlw	1
  8360  0385                     u3695:	
  8361  0385  35C1               	lslf	___ftadd@f2,f
  8362  0386  0DC2               	rlf	___ftadd@f2+1,f
  8363  0387  0DC3               	rlf	___ftadd@f2+2,f
  8364  0388  0B89               	decfsz	9,f
  8365  0389  2B85               	goto	u3695
  8366  038A  3001               	movlw	1
  8367  038B  02C9               	subwf	___ftadd@exp2,f
  8368  038C  0849               	movf	___ftadd@exp2,w
  8369  038D  064A               	xorwf	___ftadd@exp1,w
  8370  038E  1903               	skipnz
  8371  038F  2BA1               	goto	l5269
  8372  0390  3001               	movlw	1
  8373  0391  02C8               	subwf	___ftadd@sign,f
  8374  0392  0848               	movf	___ftadd@sign,w
  8375  0393  3907               	andlw	7
  8376  0394  1903               	btfsc	3,2
  8377  0395  2BA1               	goto	l5269
  8378  0396  2B84               	goto	l5261
  8379  0397                     l5267:	
  8380  0397  3001               	movlw	1
  8381  0398                     u3725:	
  8382  0398  36C0               	lsrf	___ftadd@f1+2,f
  8383  0399  0CBF               	rrf	___ftadd@f1+1,f
  8384  039A  0CBE               	rrf	___ftadd@f1,f
  8385  039B  0B89               	decfsz	9,f
  8386  039C  2B98               	goto	u3725
  8387  039D  3001               	movlw	1
  8388  039E  00C4               	movwf	??___ftadd
  8389  039F  0844               	movf	??___ftadd,w
  8390  03A0  07CA               	addwf	___ftadd@exp1,f
  8391  03A1                     l5269:	
  8392  03A1  084A               	movf	___ftadd@exp1,w
  8393  03A2  0649               	xorwf	___ftadd@exp2,w
  8394  03A3  1903               	btfsc	3,2
  8395  03A4  2BCB               	goto	l2744
  8396  03A5  2B97               	goto	l5267
  8397  03A6                     l5271:	
  8398  03A6  084A               	movf	___ftadd@exp1,w
  8399  03A7  0249               	subwf	___ftadd@exp2,w
  8400  03A8  1803               	skipnc
  8401  03A9  2BCB               	goto	l2744
  8402  03AA                     l5273:	
  8403  03AA  3001               	movlw	1
  8404  03AB                     u3755:	
  8405  03AB  35BE               	lslf	___ftadd@f1,f
  8406  03AC  0DBF               	rlf	___ftadd@f1+1,f
  8407  03AD  0DC0               	rlf	___ftadd@f1+2,f
  8408  03AE  0B89               	decfsz	9,f
  8409  03AF  2BAB               	goto	u3755
  8410  03B0  3001               	movlw	1
  8411  03B1  02CA               	subwf	___ftadd@exp1,f
  8412  03B2  0849               	movf	___ftadd@exp2,w
  8413  03B3  064A               	xorwf	___ftadd@exp1,w
  8414  03B4  1903               	skipnz
  8415  03B5  2BC7               	goto	l5281
  8416  03B6  3001               	movlw	1
  8417  03B7  02C8               	subwf	___ftadd@sign,f
  8418  03B8  0848               	movf	___ftadd@sign,w
  8419  03B9  3907               	andlw	7
  8420  03BA  1903               	btfsc	3,2
  8421  03BB  2BC7               	goto	l5281
  8422  03BC  2BAA               	goto	l5273
  8423  03BD                     l5279:	
  8424  03BD  3001               	movlw	1
  8425  03BE                     u3785:	
  8426  03BE  36C3               	lsrf	___ftadd@f2+2,f
  8427  03BF  0CC2               	rrf	___ftadd@f2+1,f
  8428  03C0  0CC1               	rrf	___ftadd@f2,f
  8429  03C1  0B89               	decfsz	9,f
  8430  03C2  2BBE               	goto	u3785
  8431  03C3  3001               	movlw	1
  8432  03C4  00C4               	movwf	??___ftadd
  8433  03C5  0844               	movf	??___ftadd,w
  8434  03C6  07C9               	addwf	___ftadd@exp2,f
  8435  03C7                     l5281:	
  8436  03C7  084A               	movf	___ftadd@exp1,w
  8437  03C8  0649               	xorwf	___ftadd@exp2,w
  8438  03C9  1D03               	skipz
  8439  03CA  2BBD               	goto	l5279
  8440  03CB                     l2744:	
  8441  03CB  1FC8               	btfss	___ftadd@sign,7
  8442  03CC  2BDD               	goto	l5285
  8443  03CD  30FF               	movlw	255
  8444  03CE  06BE               	xorwf	___ftadd@f1,f
  8445  03CF  30FF               	movlw	255
  8446  03D0  06BF               	xorwf	___ftadd@f1+1,f
  8447  03D1  30FF               	movlw	255
  8448  03D2  06C0               	xorwf	___ftadd@f1+2,f
  8449  03D3  3001               	movlw	1
  8450  03D4  07BE               	addwf	___ftadd@f1,f
  8451  03D5  3000               	movlw	0
  8452  03D6  1803               	skipnc
  8453  03D7  3001               	movlw	1
  8454  03D8  07BF               	addwf	___ftadd@f1+1,f
  8455  03D9  3000               	movlw	0
  8456  03DA  1803               	skipnc
  8457  03DB  3001               	movlw	1
  8458  03DC  07C0               	addwf	___ftadd@f1+2,f
  8459  03DD                     l5285:	
  8460  03DD  1F48               	btfss	___ftadd@sign,6
  8461  03DE  2BEF               	goto	l5289
  8462  03DF  30FF               	movlw	255
  8463  03E0  06C1               	xorwf	___ftadd@f2,f
  8464  03E1  30FF               	movlw	255
  8465  03E2  06C2               	xorwf	___ftadd@f2+1,f
  8466  03E3  30FF               	movlw	255
  8467  03E4  06C3               	xorwf	___ftadd@f2+2,f
  8468  03E5  3001               	movlw	1
  8469  03E6  07C1               	addwf	___ftadd@f2,f
  8470  03E7  3000               	movlw	0
  8471  03E8  1803               	skipnc
  8472  03E9  3001               	movlw	1
  8473  03EA  07C2               	addwf	___ftadd@f2+1,f
  8474  03EB  3000               	movlw	0
  8475  03EC  1803               	skipnc
  8476  03ED  3001               	movlw	1
  8477  03EE  07C3               	addwf	___ftadd@f2+2,f
  8478  03EF                     l5289:	
  8479  03EF  01C8               	clrf	___ftadd@sign
  8480  03F0  083E               	movf	___ftadd@f1,w
  8481  03F1  07C1               	addwf	___ftadd@f2,f
  8482  03F2  083F               	movf	___ftadd@f1+1,w
  8483  03F3  3DC2               	addwfc	___ftadd@f2+1,f
  8484  03F4  0840               	movf	___ftadd@f1+2,w
  8485  03F5  3DC3               	addwfc	___ftadd@f2+2,f
  8486  03F6  1FC3               	btfss	___ftadd@f2+2,7
  8487  03F7  2C0A               	goto	l5299
  8488  03F8  30FF               	movlw	255
  8489  03F9  06C1               	xorwf	___ftadd@f2,f
  8490  03FA  30FF               	movlw	255
  8491  03FB  06C2               	xorwf	___ftadd@f2+1,f
  8492  03FC  30FF               	movlw	255
  8493  03FD  06C3               	xorwf	___ftadd@f2+2,f
  8494  03FE  3001               	movlw	1
  8495  03FF  07C1               	addwf	___ftadd@f2,f
  8496  0400  3000               	movlw	0
  8497  0401  1803               	skipnc
  8498  0402  3001               	movlw	1
  8499  0403  07C2               	addwf	___ftadd@f2+1,f
  8500  0404  3000               	movlw	0
  8501  0405  1803               	skipnc
  8502  0406  3001               	movlw	1
  8503  0407  07C3               	addwf	___ftadd@f2+2,f
  8504  0408  01C8               	clrf	___ftadd@sign
  8505  0409  0AC8               	incf	___ftadd@sign,f
  8506  040A                     l5299:	
  8507  040A  0841               	movf	___ftadd@f2,w
  8508  040B  00A0               	movwf	___ftpack@arg
  8509  040C  0842               	movf	___ftadd@f2+1,w
  8510  040D  00A1               	movwf	___ftpack@arg+1
  8511  040E  0843               	movf	___ftadd@f2+2,w
  8512  040F  00A2               	movwf	___ftpack@arg+2
  8513  0410  084A               	movf	___ftadd@exp1,w
  8514  0411  00C4               	movwf	??___ftadd
  8515  0412  0844               	movf	??___ftadd,w
  8516  0413  00A3               	movwf	___ftpack@exp
  8517  0414  0848               	movf	___ftadd@sign,w
  8518  0415  00C5               	movwf	??___ftadd+1
  8519  0416  0845               	movf	??___ftadd+1,w
  8520  0417  00A4               	movwf	___ftpack@sign
  8521  0418  318A  22A9         	fcall	___ftpack
  8522  041A  0020               	movlb	0	; select bank0
  8523  041B  0820               	movf	?___ftpack,w
  8524  041C  00BE               	movwf	?___ftadd
  8525  041D  0821               	movf	?___ftpack+1,w
  8526  041E  00BF               	movwf	?___ftadd+1
  8527  041F  0822               	movf	?___ftpack+2,w
  8528  0420  00C0               	movwf	?___ftadd+2
  8529  0421  0008               	return
  8530  0422                     __end_of___ftadd:	
  8531                           
  8532                           	psect	text39
  8533  1077                     __ptext39:	
  8534 ;; *************** function _getBuz_GO *****************
  8535 ;; Defined at:
  8536 ;;		line 82 in file "../src/Buzzer_B1.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;		None
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;  i               2    4[BANK0 ] int 
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  2    0[BANK0 ] int 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2, status,0
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        6 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    5
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_setRF_Main
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _getBuz_GO
  8566  1077                     _getBuz_GO:	
  8567                           
  8568                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8572  1077  0021               	movlb	1	; select bank1
  8573  1078  0C32               	rrf	_Buz1^(0+128),w
  8574  1079  3901               	andlw	1
  8575  107A  0020               	movlb	0	; select bank0
  8576  107B  00A2               	movwf	??_getBuz_GO
  8577  107C  01A3               	clrf	??_getBuz_GO+1
  8578  107D  0822               	movf	??_getBuz_GO,w
  8579  107E  00A4               	movwf	getBuz_GO@i
  8580  107F  0823               	movf	??_getBuz_GO+1,w
  8581  1080  00A5               	movwf	getBuz_GO@i+1
  8582                           
  8583                           ;Buzzer_B1.c: 84: return i;
  8584  1081  0825               	movf	getBuz_GO@i+1,w
  8585  1082  01A1               	clrf	?_getBuz_GO+1
  8586  1083  07A1               	addwf	?_getBuz_GO+1,f
  8587  1084  0824               	movf	getBuz_GO@i,w
  8588  1085  01A0               	clrf	?_getBuz_GO
  8589  1086  07A0               	addwf	?_getBuz_GO,f
  8590  1087  0008               	return
  8591  1088                     __end_of_getBuz_GO:	
  8592                           
  8593                           	psect	text40
  8594  1F83                     __ptext40:	
  8595 ;; *************** function _RF_RxDisable *****************
  8596 ;; Defined at:
  8597 ;;		line 190 in file "../src/RF_Control_B1.c"
  8598 ;; Parameters:    Size  Location     Type
  8599 ;;		None
  8600 ;; Auto vars:     Size  Location     Type
  8601 ;;		None
  8602 ;; Return value:  Size  Location     Type
  8603 ;;		None               void
  8604 ;; Registers used:
  8605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8606 ;; Tracked objects:
  8607 ;;		On entry : 0/0
  8608 ;;		On exit  : 0/0
  8609 ;;		Unchanged: 0/0
  8610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8615 ;;Total ram usage:        0 bytes
  8616 ;; Hardware stack levels used:    1
  8617 ;; Hardware stack levels required when called:    7
  8618 ;; This function calls:
  8619 ;;		_CC2500_WriteCommand
  8620 ;; This function is called by:
  8621 ;;		_setRF_Main
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           
  8626                           ;psect for function _RF_RxDisable
  8627  1F83                     _RF_RxDisable:	
  8628                           
  8629                           ;RF_Control_B1.c: 191: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8630                           
  8631                           ;incstack = 0
  8632                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8633  1F83  0021               	movlb	1	; select bank1
  8634  1F84  18C6               	btfsc	_RF1^(0+128),1
  8635  1F85  2F88               	goto	l1894
  8636  1F86  1DC6               	btfss	_RF1^(0+128),3
  8637  1F87  0008               	return
  8638  1F88                     l1894:	
  8639                           
  8640                           ;RF_Control_B1.c: 192: RF1.RxStatus = 0;
  8641  1F88  11C6               	bcf	_RF1^(0+128),3
  8642                           
  8643                           ;RF_Control_B1.c: 193: RF1.ReceiveGO = 0;
  8644  1F89  10C6               	bcf	_RF1^(0+128),1
  8645                           
  8646                           ;RF_Control_B1.c: 194: CC2500_WriteCommand(0x36);
  8647  1F8A  3036               	movlw	54
  8648  1F8B  3191  2118  319F   	fcall	_CC2500_WriteCommand
  8649                           
  8650                           ;RF_Control_B1.c: 195: CC2500_WriteCommand(0x3A);
  8651  1F8E  303A               	movlw	58
  8652  1F8F  3191  2118         	fcall	_CC2500_WriteCommand
  8653  1F91  0008               	return
  8654  1F92                     __end_of_RF_RxDisable:	
  8655                           
  8656                           	psect	text41
  8657  0B0A                     __ptext41:	
  8658 ;; *************** function _CC2500_TxData *****************
  8659 ;; Defined at:
  8660 ;;		line 32 in file "../src/CC2500_B1.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;		None               void
  8667 ;; Registers used:
  8668 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;Total ram usage:        2 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    7
  8681 ;; This function calls:
  8682 ;;		_CC2500_WriteByte
  8683 ;;		_CC2500_WriteCommand
  8684 ;;		_Timeout_Counter
  8685 ;;		_set_TimeoutCleared
  8686 ;; This function is called by:
  8687 ;;		_setRF_Main
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           
  8692                           ;psect for function _CC2500_TxData
  8693  0B0A                     _CC2500_TxData:	
  8694                           
  8695                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8696                           ;CC2500_B1.c: 35: RC4 = 0;
  8697                           
  8698                           ;incstack = 0
  8699                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8700  0B0A  0020               	movlb	0	; select bank0
  8701  0B0B  120E               	bcf	14,4	;volatile
  8702                           
  8703                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  8704  0B0C  307F               	movlw	127
  8705  0B0D  00A4               	movwf	??_CC2500_TxData
  8706  0B0E  0824               	movf	??_CC2500_TxData,w
  8707  0B0F  00FA               	movwf	_SPI0Buffer
  8708                           
  8709                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  8710  0B10  2B14               	goto	l8083
  8711  0B11                     l8081:	
  8712                           
  8713                           ;CC2500_B1.c: 38: Timeout_Counter();
  8714  0B11  3190  20C1  318B   	fcall	_Timeout_Counter
  8715  0B14                     l8083:	
  8716  0B14  0020               	movlb	0	; select bank0
  8717  0B15  1D0E               	btfss	14,2	;volatile
  8718  0B16  2B1A               	goto	l8087
  8719  0B17  0021               	movlb	1	; select bank1
  8720  0B18  1D2F               	btfss	(_myMain^(0+128)+15),2
  8721  0B19  2B11               	goto	l8081
  8722  0B1A                     l8087:	
  8723                           
  8724                           ;CC2500_B1.c: 39: };
  8725                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  8726  0B1A  319E  2627  318B   	fcall	_set_TimeoutCleared
  8727                           
  8728                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  8729  0B1D  3190  20AD  318B   	fcall	_CC2500_WriteByte
  8730                           
  8731                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  8732  0B20  0021               	movlb	1	; select bank1
  8733  0B21  0851               	movf	_Tx_Length^(0+128),w
  8734  0B22  0020               	movlb	0	; select bank0
  8735  0B23  00A4               	movwf	??_CC2500_TxData
  8736  0B24  0824               	movf	??_CC2500_TxData,w
  8737  0B25  00FA               	movwf	_SPI0Buffer
  8738                           
  8739                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  8740  0B26  3190  20AD  318B   	fcall	_CC2500_WriteByte
  8741                           
  8742                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8743  0B29  0020               	movlb	0	; select bank0
  8744  0B2A  01A5               	clrf	CC2500_TxData@loop_e
  8745  0B2B                     l8101:	
  8746  0B2B  0021               	movlb	1	; select bank1
  8747  0B2C  0851               	movf	_Tx_Length^(0+128),w
  8748  0B2D  0020               	movlb	0	; select bank0
  8749  0B2E  0225               	subwf	CC2500_TxData@loop_e,w
  8750  0B2F  1803               	btfsc	3,0
  8751  0B30  2B43               	goto	l243
  8752                           
  8753                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  8754  0B31  0825               	movf	CC2500_TxData@loop_e,w
  8755  0B32  3E20               	addlw	_RF_Data& (0+255)
  8756  0B33  0086               	movwf	6
  8757  0B34  3001               	movlw	1	; select bank2/3
  8758  0B35  0087               	movwf	7
  8759  0B36  0801               	movf	1,w
  8760  0B37  00A4               	movwf	??_CC2500_TxData
  8761  0B38  0824               	movf	??_CC2500_TxData,w
  8762  0B39  00FA               	movwf	_SPI0Buffer
  8763                           
  8764                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8765  0B3A  3190  20AD  318B   	fcall	_CC2500_WriteByte
  8766  0B3D  3001               	movlw	1
  8767  0B3E  0020               	movlb	0	; select bank0
  8768  0B3F  00A4               	movwf	??_CC2500_TxData
  8769  0B40  0824               	movf	??_CC2500_TxData,w
  8770  0B41  07A5               	addwf	CC2500_TxData@loop_e,f
  8771  0B42  2B2B               	goto	l8101
  8772  0B43                     l243:	
  8773                           
  8774                           ;CC2500_B1.c: 48: }
  8775                           ;CC2500_B1.c: 49: RC4 = 1;
  8776  0B43  160E               	bsf	14,4	;volatile
  8777                           
  8778                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  8779  0B44  3035               	movlw	53
  8780  0B45  3191  2118  318B   	fcall	_CC2500_WriteCommand
  8781                           
  8782                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  8783  0B48  2B4C               	goto	l8107
  8784  0B49                     l8105:	
  8785                           
  8786                           ;CC2500_B1.c: 52: Timeout_Counter();
  8787  0B49  3190  20C1  318B   	fcall	_Timeout_Counter
  8788  0B4C                     l8107:	
  8789  0B4C  0020               	movlb	0	; select bank0
  8790  0B4D  180D               	btfsc	13,0	;volatile
  8791  0B4E  2B52               	goto	l8111
  8792  0B4F  0021               	movlb	1	; select bank1
  8793  0B50  1D2F               	btfss	(_myMain^(0+128)+15),2
  8794  0B51  2B49               	goto	l8105
  8795  0B52                     l8111:	
  8796                           
  8797                           ;CC2500_B1.c: 53: };
  8798                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  8799  0B52  319E  2627  318B   	fcall	_set_TimeoutCleared
  8800                           
  8801                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  8802  0B55  2B59               	goto	l8115
  8803  0B56                     l8113:	
  8804                           
  8805                           ;CC2500_B1.c: 57: Timeout_Counter();
  8806  0B56  3190  20C1  318B   	fcall	_Timeout_Counter
  8807  0B59                     l8115:	
  8808  0B59  0020               	movlb	0	; select bank0
  8809  0B5A  1C0D               	btfss	13,0	;volatile
  8810  0B5B  2B5F               	goto	l8119
  8811  0B5C  0021               	movlb	1	; select bank1
  8812  0B5D  1D2F               	btfss	(_myMain^(0+128)+15),2
  8813  0B5E  2B56               	goto	l8113
  8814  0B5F                     l8119:	
  8815                           
  8816                           ;CC2500_B1.c: 58: };
  8817                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  8818  0B5F  319E  2627  318B   	fcall	_set_TimeoutCleared
  8819                           
  8820                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  8821  0B62  3036               	movlw	54
  8822  0B63  3191  2118  318B   	fcall	_CC2500_WriteCommand
  8823                           
  8824                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  8825  0B66  303B               	movlw	59
  8826  0B67  3191  2118  318B   	fcall	_CC2500_WriteCommand
  8827                           
  8828                           ;CC2500_B1.c: 63: CC2500_WriteCommand(0x3A);
  8829  0B6A  303A               	movlw	58
  8830  0B6B  3191  2118         	fcall	_CC2500_WriteCommand
  8831                           
  8832                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  8833  0B6D  14FB               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8834  0B6E  0008               	return
  8835  0B6F                     __end_of_CC2500_TxData:	
  8836                           
  8837                           	psect	text42
  8838  0DF6                     __ptext42:	
  8839 ;; *************** function _CC2500_RxData *****************
  8840 ;; Defined at:
  8841 ;;		line 70 in file "../src/CC2500_B1.c"
  8842 ;; Parameters:    Size  Location     Type
  8843 ;;		None
  8844 ;; Auto vars:     Size  Location     Type
  8845 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;		None               void
  8848 ;; Registers used:
  8849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8857 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8859 ;;Total ram usage:        2 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    7
  8862 ;; This function calls:
  8863 ;;		_CC2500_ReadByte
  8864 ;;		_CC2500_ReadStatus
  8865 ;;		_CC2500_WriteByte
  8866 ;;		_CC2500_WriteCommand
  8867 ;;		_Timeout_Counter
  8868 ;;		_set_TimeoutCleared
  8869 ;; This function is called by:
  8870 ;;		_setRF_Main
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           
  8875                           ;psect for function _CC2500_RxData
  8876  0DF6                     _CC2500_RxData:	
  8877                           
  8878                           ;CC2500_B1.c: 71: unsigned char loop_f;
  8879                           ;CC2500_B1.c: 75: if (RB0 == 1)
  8880                           
  8881                           ;incstack = 0
  8882                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8883  0DF6  0020               	movlb	0	; select bank0
  8884  0DF7  180D               	btfsc	13,0	;volatile
  8885  0DF8  2DFD               	goto	l8135
  8886  0DF9  2E06               	goto	l8141
  8887  0DFA                     l8133:	
  8888                           ;CC2500_B1.c: 76: {
  8889                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  8890                           
  8891                           
  8892                           ;CC2500_B1.c: 78: Timeout_Counter();
  8893  0DFA  3190  20C1  318D   	fcall	_Timeout_Counter
  8894  0DFD                     l8135:	
  8895  0DFD  0020               	movlb	0	; select bank0
  8896  0DFE  1C0D               	btfss	13,0	;volatile
  8897  0DFF  2E03               	goto	l8139
  8898  0E00  0021               	movlb	1	; select bank1
  8899  0E01  1D2F               	btfss	(_myMain^(0+128)+15),2
  8900  0E02  2DFA               	goto	l8133
  8901  0E03                     l8139:	
  8902                           
  8903                           ;CC2500_B1.c: 79: };
  8904                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  8905  0E03  319E  2627  318D   	fcall	_set_TimeoutCleared
  8906  0E06                     l8141:	
  8907                           
  8908                           ;CC2500_B1.c: 81: }
  8909                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  8910  0E06  303B               	movlw	59
  8911  0E07  3192  2242  318D   	fcall	_CC2500_ReadStatus
  8912                           
  8913                           ;CC2500_B1.c: 84: if (s_data != 0) {
  8914  0E0A  0021               	movlb	1	; select bank1
  8915  0E0B  0854               	movf	_s_data^(0+128),w
  8916  0E0C  1903               	btfsc	3,2
  8917  0E0D  0008               	return
  8918                           
  8919                           ;CC2500_B1.c: 85: RC4 = 0;
  8920  0E0E  0020               	movlb	0	; select bank0
  8921  0E0F  120E               	bcf	14,4	;volatile
  8922                           
  8923                           ;CC2500_B1.c: 86: SPI0Buffer = 0x3F + 0xC0;
  8924  0E10  30FF               	movlw	255
  8925  0E11  00A4               	movwf	??_CC2500_RxData
  8926  0E12  0824               	movf	??_CC2500_RxData,w
  8927  0E13  00FA               	movwf	_SPI0Buffer
  8928                           
  8929                           ;CC2500_B1.c: 87: while (RC2 == 1 && myMain.Timeout == 0) {
  8930  0E14  2E1B               	goto	l8151
  8931  0E15                     l8153:	
  8932  0E15  0021               	movlb	1	; select bank1
  8933  0E16  192F               	btfsc	(_myMain^(0+128)+15),2
  8934  0E17  2E1E               	goto	l268
  8935                           
  8936                           ;CC2500_B1.c: 88: Timeout_Counter();
  8937  0E18  3190  20C1  318D   	fcall	_Timeout_Counter
  8938  0E1B                     l8151:	
  8939  0E1B  0020               	movlb	0	; select bank0
  8940  0E1C  190E               	btfsc	14,2	;volatile
  8941  0E1D  2E15               	goto	l8153
  8942  0E1E                     l268:	
  8943                           
  8944                           ;CC2500_B1.c: 89: };
  8945                           ;CC2500_B1.c: 90: if (myMain.Timeout == 0) {
  8946  0E1E  0021               	movlb	1	; select bank1
  8947  0E1F  192F               	btfsc	(_myMain^(0+128)+15),2
  8948  0E20  2E6E               	goto	l269
  8949                           
  8950                           ;CC2500_B1.c: 91: CC2500_WriteByte();
  8951  0E21  3190  20AD  318D   	fcall	_CC2500_WriteByte
  8952                           
  8953                           ;CC2500_B1.c: 93: CC2500_ReadByte();
  8954  0E24  3191  2101  318D   	fcall	_CC2500_ReadByte
  8955                           
  8956                           ;CC2500_B1.c: 94: Rx_Length = SPI0Buffer;
  8957  0E27  087A               	movf	_SPI0Buffer,w
  8958  0E28  0020               	movlb	0	; select bank0
  8959  0E29  00A4               	movwf	??_CC2500_RxData
  8960  0E2A  0824               	movf	??_CC2500_RxData,w
  8961  0E2B  0021               	movlb	1	; select bank1
  8962  0E2C  00D0               	movwf	_Rx_Length^(0+128)
  8963                           
  8964                           ;CC2500_B1.c: 95: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8965  0E2D  0020               	movlb	0	; select bank0
  8966  0E2E  01A5               	clrf	CC2500_RxData@loop_f
  8967  0E2F                     l8167:	
  8968  0E2F  0021               	movlb	1	; select bank1
  8969  0E30  0850               	movf	_Rx_Length^(0+128),w
  8970  0E31  0020               	movlb	0	; select bank0
  8971  0E32  0225               	subwf	CC2500_RxData@loop_f,w
  8972  0E33  1803               	btfsc	3,0
  8973  0E34  2E47               	goto	l8169
  8974                           
  8975                           ;CC2500_B1.c: 96: CC2500_ReadByte();
  8976  0E35  3191  2101  318D   	fcall	_CC2500_ReadByte
  8977                           
  8978                           ;CC2500_B1.c: 97: RF_Data[loop_f] = SPI0Buffer;
  8979  0E38  087A               	movf	_SPI0Buffer,w
  8980  0E39  0020               	movlb	0	; select bank0
  8981  0E3A  00A4               	movwf	??_CC2500_RxData
  8982  0E3B  0825               	movf	CC2500_RxData@loop_f,w
  8983  0E3C  3E20               	addlw	_RF_Data& (0+255)
  8984  0E3D  0086               	movwf	6
  8985  0E3E  3001               	movlw	1	; select bank2/3
  8986  0E3F  0087               	movwf	7
  8987  0E40  0824               	movf	??_CC2500_RxData,w
  8988  0E41  0081               	movwf	1
  8989  0E42  3001               	movlw	1
  8990  0E43  00A4               	movwf	??_CC2500_RxData
  8991  0E44  0824               	movf	??_CC2500_RxData,w
  8992  0E45  07A5               	addwf	CC2500_RxData@loop_f,f
  8993  0E46  2E2F               	goto	l8167
  8994  0E47                     l8169:	
  8995                           
  8996                           ;CC2500_B1.c: 98: }
  8997                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8998  0E47  3191  2101  318D   	fcall	_CC2500_ReadByte
  8999                           
  9000                           ;CC2500_B1.c: 100: RSSI = SPI0Buffer;
  9001  0E4A  087A               	movf	_SPI0Buffer,w
  9002  0E4B  0020               	movlb	0	; select bank0
  9003  0E4C  00A4               	movwf	??_CC2500_RxData
  9004  0E4D  0824               	movf	??_CC2500_RxData,w
  9005  0E4E  0021               	movlb	1	; select bank1
  9006  0E4F  00CF               	movwf	_RSSI^(0+128)
  9007                           
  9008                           ;CC2500_B1.c: 101: CC2500_ReadByte();
  9009  0E50  3191  2101  318D   	fcall	_CC2500_ReadByte
  9010                           
  9011                           ;CC2500_B1.c: 102: CRC = SPI0Buffer;
  9012  0E53  087A               	movf	_SPI0Buffer,w
  9013  0E54  0020               	movlb	0	; select bank0
  9014  0E55  00A4               	movwf	??_CC2500_RxData
  9015  0E56  0824               	movf	??_CC2500_RxData,w
  9016  0E57  0021               	movlb	1	; select bank1
  9017  0E58  00CD               	movwf	_CRC^(0+128)
  9018                           
  9019                           ;CC2500_B1.c: 103: RC4 = 1;
  9020  0E59  0020               	movlb	0	; select bank0
  9021  0E5A  160E               	bsf	14,4	;volatile
  9022                           
  9023                           ;CC2500_B1.c: 104: if (CRC & 0x80)
  9024  0E5B  0021               	movlb	1	; select bank1
  9025  0E5C  1BCD               	btfsc	_CRC^(0+128),7
  9026                           
  9027                           ;CC2500_B1.c: 105: Receive_OK = 1;
  9028  0E5D  147B               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9029                           
  9030                           ;CC2500_B1.c: 107: CC2500_WriteCommand(0x36);
  9031  0E5E  3036               	movlw	54
  9032  0E5F  3191  2118  318D   	fcall	_CC2500_WriteCommand
  9033                           
  9034                           ;CC2500_B1.c: 108: CC2500_WriteCommand(0x3A);
  9035  0E62  303A               	movlw	58
  9036  0E63  3191  2118  318D   	fcall	_CC2500_WriteCommand
  9037                           
  9038                           ;CC2500_B1.c: 109: CC2500_WriteCommand(0x3B);
  9039  0E66  303B               	movlw	59
  9040  0E67  3191  2118  318D   	fcall	_CC2500_WriteCommand
  9041                           
  9042                           ;CC2500_B1.c: 110: RF1.RxStatus = 0;
  9043  0E6A  0021               	movlb	1	; select bank1
  9044  0E6B  11C6               	bcf	_RF1^(0+128),3
  9045                           
  9046                           ;CC2500_B1.c: 111: RF1.ReceiveGO = 1;
  9047  0E6C  14C6               	bsf	_RF1^(0+128),1
  9048                           
  9049                           ;CC2500_B1.c: 112: } else {
  9050  0E6D  2E70               	goto	l8187
  9051  0E6E                     l269:	
  9052                           
  9053                           ;CC2500_B1.c: 113: RC4 = 1;
  9054  0E6E  0020               	movlb	0	; select bank0
  9055  0E6F  160E               	bsf	14,4	;volatile
  9056  0E70                     l8187:	
  9057                           
  9058                           ;CC2500_B1.c: 114: }
  9059                           ;CC2500_B1.c: 115: set_TimeoutCleared();
  9060  0E70  319E  2627         	fcall	_set_TimeoutCleared
  9061  0E72  0021               	movlb	1	; select bank1
  9062  0E73  0008               	return
  9063  0E74                     __end_of_CC2500_RxData:	
  9064                           
  9065                           	psect	text43
  9066  1242                     __ptext43:	
  9067 ;; *************** function _CC2500_ReadStatus *****************
  9068 ;; Defined at:
  9069 ;;		line 306 in file "../src/CC2500_B1.c"
  9070 ;; Parameters:    Size  Location     Type
  9071 ;;  status_addr     1    wreg     unsigned char 
  9072 ;; Auto vars:     Size  Location     Type
  9073 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9074 ;; Return value:  Size  Location     Type
  9075 ;;		None               void
  9076 ;; Registers used:
  9077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9078 ;; Tracked objects:
  9079 ;;		On entry : 0/0
  9080 ;;		On exit  : 0/0
  9081 ;;		Unchanged: 0/0
  9082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9087 ;;Total ram usage:        2 bytes
  9088 ;; Hardware stack levels used:    1
  9089 ;; Hardware stack levels required when called:    6
  9090 ;; This function calls:
  9091 ;;		_CC2500_ReadByte
  9092 ;;		_CC2500_WriteByte
  9093 ;;		_Timeout_Counter
  9094 ;;		_set_TimeoutCleared
  9095 ;; This function is called by:
  9096 ;;		_CC2500_RxData
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           
  9101                           ;psect for function _CC2500_ReadStatus
  9102  1242                     _CC2500_ReadStatus:	
  9103                           
  9104                           ;incstack = 0
  9105                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9106                           ;CC2500_ReadStatus@status_addr stored from wreg
  9107  1242  0020               	movlb	0	; select bank0
  9108  1243  00A3               	movwf	CC2500_ReadStatus@status_addr
  9109                           
  9110                           ;CC2500_B1.c: 307: RC4 = 0;
  9111  1244  120E               	bcf	14,4	;volatile
  9112                           
  9113                           ;CC2500_B1.c: 308: SPI0Buffer = status_addr + 0xC0;
  9114  1245  0823               	movf	CC2500_ReadStatus@status_addr,w
  9115  1246  3EC0               	addlw	192
  9116  1247  00A2               	movwf	??_CC2500_ReadStatus
  9117  1248  0822               	movf	??_CC2500_ReadStatus,w
  9118  1249  00FA               	movwf	_SPI0Buffer
  9119                           
  9120                           ;CC2500_B1.c: 310: while (RC2 == 1 && myMain.Timeout == 0) {
  9121  124A  2A4E               	goto	l7961
  9122  124B                     l7959:	
  9123                           
  9124                           ;CC2500_B1.c: 311: Timeout_Counter();
  9125  124B  3190  20C1  3192   	fcall	_Timeout_Counter
  9126  124E                     l7961:	
  9127  124E  0020               	movlb	0	; select bank0
  9128  124F  1D0E               	btfss	14,2	;volatile
  9129  1250  2A54               	goto	l7965
  9130  1251  0021               	movlb	1	; select bank1
  9131  1252  1D2F               	btfss	(_myMain^(0+128)+15),2
  9132  1253  2A4B               	goto	l7959
  9133  1254                     l7965:	
  9134                           
  9135                           ;CC2500_B1.c: 312: };
  9136                           ;CC2500_B1.c: 313: set_TimeoutCleared();
  9137  1254  319E  2627  3192   	fcall	_set_TimeoutCleared
  9138                           
  9139                           ;CC2500_B1.c: 315: CC2500_WriteByte();
  9140  1257  3190  20AD  3192   	fcall	_CC2500_WriteByte
  9141                           
  9142                           ;CC2500_B1.c: 316: CC2500_ReadByte();
  9143  125A  3191  2101         	fcall	_CC2500_ReadByte
  9144                           
  9145                           ;CC2500_B1.c: 317: RC4 = 1;
  9146  125C  0020               	movlb	0	; select bank0
  9147  125D  160E               	bsf	14,4	;volatile
  9148                           
  9149                           ;CC2500_B1.c: 319: s_data = SPI0Buffer;
  9150  125E  087A               	movf	_SPI0Buffer,w
  9151  125F  00A2               	movwf	??_CC2500_ReadStatus
  9152  1260  0822               	movf	??_CC2500_ReadStatus,w
  9153  1261  0021               	movlb	1	; select bank1
  9154  1262  00D4               	movwf	_s_data^(0+128)
  9155  1263  0008               	return
  9156  1264                     __end_of_CC2500_ReadStatus:	
  9157                           
  9158                           	psect	text44
  9159  1101                     __ptext44:	
  9160 ;; *************** function _CC2500_ReadByte *****************
  9161 ;; Defined at:
  9162 ;;		line 240 in file "../src/CC2500_B1.c"
  9163 ;; Parameters:    Size  Location     Type
  9164 ;;		None
  9165 ;; Auto vars:     Size  Location     Type
  9166 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9167 ;; Return value:  Size  Location     Type
  9168 ;;		None               void
  9169 ;; Registers used:
  9170 ;;		wreg, status,2, status,0
  9171 ;; Tracked objects:
  9172 ;;		On entry : 0/0
  9173 ;;		On exit  : 0/0
  9174 ;;		Unchanged: 0/0
  9175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9179 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9180 ;;Total ram usage:        2 bytes
  9181 ;; Hardware stack levels used:    1
  9182 ;; Hardware stack levels required when called:    5
  9183 ;; This function calls:
  9184 ;;		Nothing
  9185 ;; This function is called by:
  9186 ;;		_CC2500_RxData
  9187 ;;		_CC2500_ReadStatus
  9188 ;;		_CC2500_ReadREG
  9189 ;; This function uses a non-reentrant model
  9190 ;;
  9191                           
  9192                           
  9193                           ;psect for function _CC2500_ReadByte
  9194  1101                     _CC2500_ReadByte:	
  9195                           
  9196                           ;CC2500_B1.c: 241: unsigned char loop_b;
  9197                           ;CC2500_B1.c: 242: for (loop_b = 0; loop_b < 8; loop_b++) {
  9198                           
  9199                           ;incstack = 0
  9200                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9201  1101  0020               	movlb	0	; select bank0
  9202  1102  01A1               	clrf	CC2500_ReadByte@loop_b
  9203  1103                     L3:	
  9204  1103  3008               	movlw	8
  9205  1104  0221               	subwf	CC2500_ReadByte@loop_b,w
  9206  1105  1803               	btfsc	3,0
  9207  1106  0008               	return
  9208                           
  9209                           ;CC2500_B1.c: 243: RC1 = 1;
  9210  1107  148E               	bsf	14,1	;volatile
  9211                           
  9212                           ;CC2500_B1.c: 244: SPI0Buffer <<= 1;
  9213  1108  1003               	clrc
  9214  1109  0DFA               	rlf	_SPI0Buffer,f
  9215                           
  9216                           ;CC2500_B1.c: 245: if (RC2 == 1)
  9217  110A  1D0E               	btfss	14,2	;volatile
  9218  110B  290E               	goto	l7827
  9219                           
  9220                           ;CC2500_B1.c: 246: SPI0Buffer |= 0x01;
  9221  110C  147A               	bsf	_SPI0Buffer,0
  9222  110D  2912               	goto	l7829
  9223  110E                     l7827:	
  9224                           
  9225                           ;CC2500_B1.c: 247: else
  9226                           ;CC2500_B1.c: 248: SPI0Buffer &= 0xFE;
  9227  110E  30FE               	movlw	254
  9228  110F  00A0               	movwf	??_CC2500_ReadByte
  9229  1110  0820               	movf	??_CC2500_ReadByte,w
  9230  1111  05FA               	andwf	_SPI0Buffer,f
  9231  1112                     l7829:	
  9232                           
  9233                           ;CC2500_B1.c: 249: RC1 = 0;
  9234  1112  108E               	bcf	14,1	;volatile
  9235  1113  3001               	movlw	1
  9236  1114  00A0               	movwf	??_CC2500_ReadByte
  9237  1115  0820               	movf	??_CC2500_ReadByte,w
  9238  1116  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9239  1117  2903               	goto	L3
  9240  1118                     __end_of_CC2500_ReadByte:	
  9241                           
  9242                           	psect	text45
  9243  1DF4                     __ptext45:	
  9244 ;; *************** function _RF_Initialization *****************
  9245 ;; Defined at:
  9246 ;;		line 9 in file "../src/RF_Control_B1.c"
  9247 ;; Parameters:    Size  Location     Type
  9248 ;;		None
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;		None
  9251 ;; Return value:  Size  Location     Type
  9252 ;;		None               void
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0, pclath, cstack
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        0 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    6
  9267 ;; This function calls:
  9268 ;;		_setRF_Initialization
  9269 ;; This function is called by:
  9270 ;;		_main
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function _RF_Initialization
  9276  1DF4                     _RF_Initialization:	
  9277                           
  9278                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9279                           
  9280                           ;incstack = 0
  9281                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9282  1DF4  319E  264C         	fcall	_setRF_Initialization
  9283  1DF6  0008               	return
  9284  1DF7                     __end_of_RF_Initialization:	
  9285                           
  9286                           	psect	text46
  9287  1E4C                     __ptext46:	
  9288 ;; *************** function _setRF_Initialization *****************
  9289 ;; Defined at:
  9290 ;;		line 43 in file "../src/RF_Control_B1.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;		None               void
  9297 ;; Registers used:
  9298 ;;		wreg
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;Total ram usage:        1 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    5
  9311 ;; This function calls:
  9312 ;;		Nothing
  9313 ;; This function is called by:
  9314 ;;		_RF_Initialization
  9315 ;; This function uses a non-reentrant model
  9316 ;;
  9317                           
  9318                           
  9319                           ;psect for function _setRF_Initialization
  9320  1E4C                     _setRF_Initialization:	
  9321                           
  9322                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9323                           
  9324                           ;incstack = 0
  9325                           ; Regs used in _setRF_Initialization: [wreg]
  9326  1E4C  3015               	movlw	21
  9327  1E4D  0020               	movlb	0	; select bank0
  9328  1E4E  00A0               	movwf	??_setRF_Initialization
  9329  1E4F  0820               	movf	??_setRF_Initialization,w
  9330  1E50  0021               	movlb	1	; select bank1
  9331  1E51  00D1               	movwf	_Tx_Length^(0+128)
  9332  1E52  0008               	return
  9333  1E53                     __end_of_setRF_Initialization:	
  9334                           
  9335                           	psect	text47
  9336  1DF1                     __ptext47:	
  9337 ;; *************** function _PowerFault_Main *****************
  9338 ;; Defined at:
  9339 ;;		line 17 in file "../src/PowerFault_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;		None
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;		None
  9344 ;; Return value:  Size  Location     Type
  9345 ;;		None               void
  9346 ;; Registers used:
  9347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9348 ;; Tracked objects:
  9349 ;;		On entry : 0/0
  9350 ;;		On exit  : 0/0
  9351 ;;		Unchanged: 0/0
  9352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;Total ram usage:        0 bytes
  9358 ;; Hardware stack levels used:    1
  9359 ;; Hardware stack levels required when called:   11
  9360 ;; This function calls:
  9361 ;;		_setPowerFault_Main
  9362 ;; This function is called by:
  9363 ;;		_main
  9364 ;; This function uses a non-reentrant model
  9365 ;;
  9366                           
  9367                           
  9368                           ;psect for function _PowerFault_Main
  9369  1DF1                     _PowerFault_Main:	
  9370                           
  9371                           ;PowerFault_B1.c: 19: setPowerFault_Main();
  9372                           
  9373                           ;incstack = 0
  9374                           ; Regs used in _PowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9375  1DF1  3187  278A         	fcall	_setPowerFault_Main
  9376  1DF3  0008               	return
  9377  1DF4                     __end_of_PowerFault_Main:	
  9378                           
  9379                           	psect	text48
  9380  078A                     __ptext48:	
  9381 ;; *************** function _setPowerFault_Main *****************
  9382 ;; Defined at:
  9383 ;;		line 55 in file "../src/PowerFault_B1.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;		None
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;		None               void
  9390 ;; Registers used:
  9391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;Total ram usage:        1 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:   10
  9404 ;; This function calls:
  9405 ;;		_getTemp_Safe
  9406 ;;		_setPowerFault_Exceptions
  9407 ;; This function is called by:
  9408 ;;		_PowerFault_Main
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           
  9413                           ;psect for function _setPowerFault_Main
  9414  078A                     _setPowerFault_Main:	
  9415                           
  9416                           ;PowerFault_B1.c: 56: if (PF1.Enable == 1) {
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in _setPowerFault_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9420  078A  0021               	movlb	1	; select bank1
  9421  078B  1C3E               	btfss	_PF1^(0+128),0
  9422  078C  0008               	return
  9423                           
  9424                           ;PowerFault_B1.c: 57: if (PF1.ADtoGO == 0) {
  9425  078D  19BE               	btfsc	_PF1^(0+128),3
  9426  078E  2FAC               	goto	l8781
  9427                           
  9428                           ;PowerFault_B1.c: 58: PF1.Time++;
  9429  078F  3001               	movlw	1
  9430  0790  07C0               	addwf	(_PF1^(0+128)+2),f
  9431  0791  3000               	movlw	0
  9432  0792  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9433                           
  9434                           ;PowerFault_B1.c: 60: {
  9435                           ;PowerFault_B1.c: 61: if (1 == 1 && getTemp_Safe() == 1) {
  9436  0793  3002               	movlw	2
  9437  0794  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9438  0795  30BC               	movlw	188
  9439  0796  1903               	skipnz
  9440  0797  0240               	subwf	(_PF1^(0+128)+2),w
  9441  0798  1C03               	skipc
  9442  0799  0008               	return
  9443  079A  319E  265B  3187   	fcall	_getTemp_Safe
  9444  079D  3A01               	xorlw	1
  9445  079E  1D03               	skipz
  9446  079F  2FA6               	goto	l8779
  9447                           
  9448                           ;PowerFault_B1.c: 62: PF1.Time = 0;
  9449  07A0  0021               	movlb	1	; select bank1
  9450  07A1  01C0               	clrf	(_PF1^(0+128)+2)
  9451  07A2  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9452                           
  9453                           ;PowerFault_B1.c: 63: PF1.ADtoGO = 1;
  9454  07A3  15BE               	bsf	_PF1^(0+128),3
  9455                           
  9456                           ;PowerFault_B1.c: 64: PF1.Safe = 0;
  9457  07A4  113E               	bcf	_PF1^(0+128),2
  9458                           
  9459                           ;PowerFault_B1.c: 65: } else {
  9460  07A5  0008               	return
  9461  07A6                     l8779:	
  9462                           
  9463                           ;PowerFault_B1.c: 66: PF1.Time = 700;
  9464  07A6  30BC               	movlw	188
  9465  07A7  0021               	movlb	1	; select bank1
  9466  07A8  00C0               	movwf	(_PF1^(0+128)+2)
  9467  07A9  3002               	movlw	2
  9468  07AA  00C1               	movwf	(_PF1^(0+128)+3)
  9469                           
  9470                           ;PowerFault_B1.c: 67: }
  9471                           ;PowerFault_B1.c: 68: }
  9472                           ;PowerFault_B1.c: 69: } else {
  9473  07AB  0008               	return
  9474  07AC                     l8781:	
  9475                           
  9476                           ;PowerFault_B1.c: 70: PF1.Time++;
  9477  07AC  3001               	movlw	1
  9478  07AD  07C0               	addwf	(_PF1^(0+128)+2),f
  9479  07AE  3000               	movlw	0
  9480  07AF  3DC1               	addwfc	((_PF1+1)^(0+128)+2),f
  9481                           
  9482                           ;PowerFault_B1.c: 71: if (PF1.Time >= 2)
  9483  07B0  3000               	movlw	0
  9484  07B1  0241               	subwf	((_PF1+1)^(0+128)+2),w
  9485  07B2  3002               	movlw	2
  9486  07B3  1903               	skipnz
  9487  07B4  0240               	subwf	(_PF1^(0+128)+2),w
  9488  07B5  1C03               	skipc
  9489  07B6  0008               	return
  9490                           
  9491                           ;PowerFault_B1.c: 72: {
  9492                           ;PowerFault_B1.c: 73: PF1.Time = 0;
  9493  07B7  01C0               	clrf	(_PF1^(0+128)+2)
  9494  07B8  01C1               	clrf	((_PF1+1)^(0+128)+2)
  9495                           
  9496                           ;PowerFault_B1.c: 74: PF1.ADtoGO = 0;
  9497  07B9  11BE               	bcf	_PF1^(0+128),3
  9498                           
  9499                           ;PowerFault_B1.c: 76: if (PF1.ERROR == 1) {
  9500  07BA  1CBE               	btfss	_PF1^(0+128),1
  9501  07BB  2FDA               	goto	l8803
  9502                           
  9503                           ;PowerFault_B1.c: 77: if (PF1.AD <= (300 + 100) && PF1.AD >= (300 - 100)) {
  9504  07BC  3001               	movlw	1
  9505  07BD  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9506  07BE  3091               	movlw	145
  9507  07BF  1903               	skipnz
  9508  07C0  0242               	subwf	(_PF1^(0+128)+4),w
  9509  07C1  1803               	skipnc
  9510  07C2  2FF8               	goto	l8815
  9511  07C3  3000               	movlw	0
  9512  07C4  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9513  07C5  30C8               	movlw	200
  9514  07C6  1903               	skipnz
  9515  07C7  0242               	subwf	(_PF1^(0+128)+4),w
  9516  07C8  1C03               	skipc
  9517  07C9  2FF8               	goto	l8815
  9518                           
  9519                           ;PowerFault_B1.c: 78: PF1.Count++;
  9520  07CA  3001               	movlw	1
  9521  07CB  0020               	movlb	0	; select bank0
  9522  07CC  00B1               	movwf	??_setPowerFault_Main
  9523  07CD  0831               	movf	??_setPowerFault_Main,w
  9524  07CE  0021               	movlb	1	; select bank1
  9525  07CF  07BF               	addwf	(_PF1^(0+128)+1),f
  9526                           
  9527                           ;PowerFault_B1.c: 79: if (PF1.Count > 1) {
  9528  07D0  3002               	movlw	2
  9529  07D1  023F               	subwf	(_PF1^(0+128)+1),w
  9530  07D2  1C03               	skipc
  9531  07D3  2FFA               	goto	l8817
  9532                           
  9533                           ;PowerFault_B1.c: 80: PF1.Count = 0;
  9534  07D4  01BF               	clrf	(_PF1^(0+128)+1)
  9535                           
  9536                           ;PowerFault_B1.c: 81: setPowerFault_Exceptions(0);
  9537  07D5  3000               	movlw	0
  9538  07D6  3194  24CD  3187   	fcall	_setPowerFault_Exceptions
  9539                           
  9540                           ;PowerFault_B1.c: 82: }
  9541                           ;PowerFault_B1.c: 83: } else {
  9542  07D9  2FFA               	goto	l8817
  9543  07DA                     l8803:	
  9544                           ;PowerFault_B1.c: 85: }
  9545                           ;PowerFault_B1.c: 86: } else {
  9546                           
  9547                           ;PowerFault_B1.c: 84: PF1.Count = 0;
  9548                           
  9549                           
  9550                           ;PowerFault_B1.c: 87: if (PF1.AD >= (300 + 100) || PF1.AD <= (310 - 100)) {
  9551  07DA  3001               	movlw	1
  9552  07DB  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9553  07DC  3090               	movlw	144
  9554  07DD  1903               	skipnz
  9555  07DE  0242               	subwf	(_PF1^(0+128)+4),w
  9556  07DF  1803               	skipnc
  9557  07E0  2FE8               	goto	l8807
  9558  07E1  3000               	movlw	0
  9559  07E2  0243               	subwf	((_PF1+1)^(0+128)+4),w
  9560  07E3  30D3               	movlw	211
  9561  07E4  1903               	skipnz
  9562  07E5  0242               	subwf	(_PF1^(0+128)+4),w
  9563  07E6  1803               	skipnc
  9564  07E7  2FF8               	goto	l8815
  9565  07E8                     l8807:	
  9566                           
  9567                           ;PowerFault_B1.c: 88: PF1.Count++;
  9568  07E8  3001               	movlw	1
  9569  07E9  0020               	movlb	0	; select bank0
  9570  07EA  00B1               	movwf	??_setPowerFault_Main
  9571  07EB  0831               	movf	??_setPowerFault_Main,w
  9572  07EC  0021               	movlb	1	; select bank1
  9573  07ED  07BF               	addwf	(_PF1^(0+128)+1),f
  9574                           
  9575                           ;PowerFault_B1.c: 89: if (PF1.Count > 1) {
  9576  07EE  3002               	movlw	2
  9577  07EF  023F               	subwf	(_PF1^(0+128)+1),w
  9578  07F0  1C03               	skipc
  9579  07F1  2FFA               	goto	l8817
  9580                           
  9581                           ;PowerFault_B1.c: 90: PF1.Count = 0;
  9582  07F2  01BF               	clrf	(_PF1^(0+128)+1)
  9583                           
  9584                           ;PowerFault_B1.c: 91: setPowerFault_Exceptions(1);
  9585  07F3  3001               	movlw	1
  9586  07F4  3194  24CD  3187   	fcall	_setPowerFault_Exceptions
  9587                           
  9588                           ;PowerFault_B1.c: 92: }
  9589                           ;PowerFault_B1.c: 93: } else {
  9590  07F7  2FFA               	goto	l8817
  9591  07F8                     l8815:	
  9592                           
  9593                           ;PowerFault_B1.c: 94: PF1.Count = 0;
  9594  07F8  0021               	movlb	1	; select bank1
  9595  07F9  01BF               	clrf	(_PF1^(0+128)+1)
  9596  07FA                     l8817:	
  9597                           
  9598                           ;PowerFault_B1.c: 95: }
  9599                           ;PowerFault_B1.c: 97: }
  9600                           ;PowerFault_B1.c: 98: if (PF1.ERROR == 0) {
  9601  07FA  0021               	movlb	1	; select bank1
  9602  07FB  1CBE               	btfss	_PF1^(0+128),1
  9603                           
  9604                           ;PowerFault_B1.c: 99: PF1.Safe = 1;
  9605  07FC  153E               	bsf	_PF1^(0+128),2
  9606                           
  9607                           ;PowerFault_B1.c: 100: }
  9608                           ;PowerFault_B1.c: 101: PF1.AD = 0;
  9609  07FD  01C2               	clrf	(_PF1^(0+128)+4)
  9610  07FE  01C3               	clrf	((_PF1+1)^(0+128)+4)
  9611  07FF  0008               	return
  9612  0800                     __end_of_setPowerFault_Main:	
  9613                           
  9614                           	psect	text49
  9615  14CD                     __ptext49:	
  9616 ;; *************** function _setPowerFault_Exceptions *****************
  9617 ;; Defined at:
  9618 ;;		line 107 in file "../src/PowerFault_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;  command         1    wreg     unsigned char 
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;  command         1   16[BANK0 ] unsigned char 
  9623 ;;  i               1   15[BANK0 ] unsigned char 
  9624 ;; Return value:  Size  Location     Type
  9625 ;;		None               void
  9626 ;; Registers used:
  9627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9628 ;; Tracked objects:
  9629 ;;		On entry : 0/0
  9630 ;;		On exit  : 0/0
  9631 ;;		Unchanged: 0/0
  9632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9637 ;;Total ram usage:        3 bytes
  9638 ;; Hardware stack levels used:    1
  9639 ;; Hardware stack levels required when called:    9
  9640 ;; This function calls:
  9641 ;;		_DimmerLights_Exceptions
  9642 ;;		_setLED
  9643 ;;		_setRF_Enable
  9644 ;;		_setSw_Enable
  9645 ;; This function is called by:
  9646 ;;		_setPowerFault_Main
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           
  9651                           ;psect for function _setPowerFault_Exceptions
  9652  14CD                     _setPowerFault_Exceptions:	
  9653                           
  9654                           ;incstack = 0
  9655                           ; Regs used in _setPowerFault_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  9656                           ;setPowerFault_Exceptions@command stored from wreg
  9657  14CD  0020               	movlb	0	; select bank0
  9658  14CE  00B0               	movwf	setPowerFault_Exceptions@command
  9659                           
  9660                           ;PowerFault_B1.c: 108: char i = command == 1 ? 0 : 1;
  9661  14CF  0830               	movf	setPowerFault_Exceptions@command,w
  9662  14D0  3A01               	xorlw	1
  9663  14D1  3000               	movlw	0
  9664  14D2  1D03               	skipz
  9665  14D3  3001               	movlw	1
  9666  14D4  00AE               	movwf	??_setPowerFault_Exceptions
  9667  14D5  082E               	movf	??_setPowerFault_Exceptions,w
  9668  14D6  00AF               	movwf	setPowerFault_Exceptions@i
  9669                           
  9670                           ;PowerFault_B1.c: 109: PF1.ERROR = command;
  9671  14D7  0830               	movf	setPowerFault_Exceptions@command,w
  9672  14D8  0021               	movlb	1	; select bank1
  9673  14D9  10BE               	bcf	_PF1^(0+128),1
  9674  14DA  1D03               	skipz
  9675  14DB  14BE               	bsf	_PF1^(0+128),1
  9676                           
  9677                           ;PowerFault_B1.c: 110: PF1.Safe = i;
  9678  14DC  0020               	movlb	0	; select bank0
  9679  14DD  082F               	movf	setPowerFault_Exceptions@i,w
  9680  14DE  0021               	movlb	1	; select bank1
  9681  14DF  113E               	bcf	_PF1^(0+128),2
  9682  14E0  1D03               	skipz
  9683  14E1  153E               	bsf	_PF1^(0+128),2
  9684                           
  9685                           ;PowerFault_B1.c: 111: if (command == 1) {
  9686  14E2  0020               	movlb	0	; select bank0
  9687  14E3  0830               	movf	setPowerFault_Exceptions@command,w
  9688  14E4  3A01               	xorlw	1
  9689  14E5  1D03               	skipz
  9690  14E6  2CF2               	goto	l1708
  9691                           
  9692                           ;PowerFault_B1.c: 112: DimmerLights_Exceptions(3);
  9693  14E7  3003               	movlw	3
  9694  14E8  3195  2543  3194   	fcall	_DimmerLights_Exceptions
  9695                           
  9696                           ;PowerFault_B1.c: 114: setLED(2, 1);
  9697  14EB  0020               	movlb	0	; select bank0
  9698  14EC  01A1               	clrf	setLED@command
  9699  14ED  0AA1               	incf	setLED@command,f
  9700  14EE  3002               	movlw	2
  9701  14EF  318A  224A  3194   	fcall	_setLED
  9702  14F2                     l1708:	
  9703                           
  9704                           ;PowerFault_B1.c: 116: }
  9705                           ;PowerFault_B1.c: 117: setLED(99, command + 10);
  9706  14F2  0020               	movlb	0	; select bank0
  9707  14F3  0830               	movf	setPowerFault_Exceptions@command,w
  9708  14F4  3E0A               	addlw	10
  9709  14F5  00AE               	movwf	??_setPowerFault_Exceptions
  9710  14F6  082E               	movf	??_setPowerFault_Exceptions,w
  9711  14F7  00A1               	movwf	setLED@command
  9712  14F8  3063               	movlw	99
  9713  14F9  318A  224A  3194   	fcall	_setLED
  9714                           
  9715                           ;PowerFault_B1.c: 119: setSw_Enable(i);
  9716  14FC  0020               	movlb	0	; select bank0
  9717  14FD  082F               	movf	setPowerFault_Exceptions@i,w
  9718  14FE  319F  2774  3194   	fcall	_setSw_Enable
  9719                           
  9720                           ;PowerFault_B1.c: 121: setRF_Enable(i);
  9721  1501  0020               	movlb	0	; select bank0
  9722  1502  082F               	movf	setPowerFault_Exceptions@i,w
  9723  1503  319F  2748         	fcall	_setRF_Enable
  9724  1505  0008               	return
  9725  1506                     __end_of_setPowerFault_Exceptions:	
  9726                           
  9727                           	psect	text50
  9728  1F74                     __ptext50:	
  9729 ;; *************** function _setSw_Enable *****************
  9730 ;; Defined at:
  9731 ;;		line 91 in file "../src/Switch_B1.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;  command         1    wreg     unsigned char 
  9734 ;; Auto vars:     Size  Location     Type
  9735 ;;  command         1    2[BANK0 ] unsigned char 
  9736 ;; Return value:  Size  Location     Type
  9737 ;;		None               void
  9738 ;; Registers used:
  9739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9740 ;; Tracked objects:
  9741 ;;		On entry : 0/0
  9742 ;;		On exit  : 0/0
  9743 ;;		Unchanged: 0/0
  9744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;Total ram usage:        1 bytes
  9750 ;; Hardware stack levels used:    1
  9751 ;; Hardware stack levels required when called:    6
  9752 ;; This function calls:
  9753 ;;		_SwPointSelect
  9754 ;; This function is called by:
  9755 ;;		_setOverTemp_Exceptions
  9756 ;;		_setPowerFault_Exceptions
  9757 ;;		_my_MainTime
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function _setSw_Enable
  9763  1F74                     _setSw_Enable:	
  9764                           
  9765                           ;incstack = 0
  9766                           ; Regs used in _setSw_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9767                           ;setSw_Enable@command stored from wreg
  9768  1F74  0020               	movlb	0	; select bank0
  9769  1F75  00A2               	movwf	setSw_Enable@command
  9770                           
  9771                           ;Switch_B1.c: 94: SwPointSelect(1);
  9772  1F76  3001               	movlw	1
  9773  1F77  319E  26CC         	fcall	_SwPointSelect
  9774                           
  9775                           ;Switch_B1.c: 95: Sw->Enable = command;
  9776  1F79  0020               	movlb	0	; select bank0
  9777  1F7A  086D               	movf	_Sw,w
  9778  1F7B  0086               	movwf	6
  9779  1F7C  3001               	movlw	1	; select bank2/3
  9780  1F7D  0087               	movwf	7
  9781  1F7E  0822               	movf	setSw_Enable@command,w
  9782  1F7F  1001               	bcf	1,0
  9783  1F80  1D03               	skipz
  9784  1F81  1401               	bsf	1,0
  9785  1F82  0008               	return
  9786  1F83                     __end_of_setSw_Enable:	
  9787                           
  9788                           	psect	text51
  9789  1F48                     __ptext51:	
  9790 ;; *************** function _setRF_Enable *****************
  9791 ;; Defined at:
  9792 ;;		line 178 in file "../src/RF_Control_B1.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;  command         1    wreg     unsigned char 
  9795 ;; Auto vars:     Size  Location     Type
  9796 ;;  command         1    0[BANK0 ] unsigned char 
  9797 ;; Return value:  Size  Location     Type
  9798 ;;		None               void
  9799 ;; Registers used:
  9800 ;;		wreg, status,2
  9801 ;; Tracked objects:
  9802 ;;		On entry : 0/0
  9803 ;;		On exit  : 0/0
  9804 ;;		Unchanged: 0/0
  9805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9806 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;Total ram usage:        1 bytes
  9811 ;; Hardware stack levels used:    1
  9812 ;; Hardware stack levels required when called:    5
  9813 ;; This function calls:
  9814 ;;		Nothing
  9815 ;; This function is called by:
  9816 ;;		_setOverTemp_Exceptions
  9817 ;;		_setPowerFault_Exceptions
  9818 ;;		_my_MainTime
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           
  9823                           ;psect for function _setRF_Enable
  9824  1F48                     _setRF_Enable:	
  9825                           
  9826                           ;incstack = 0
  9827                           ; Regs used in _setRF_Enable: [wreg+status,2]
  9828                           ;setRF_Enable@command stored from wreg
  9829  1F48  0020               	movlb	0	; select bank0
  9830  1F49  00A0               	movwf	setRF_Enable@command
  9831                           
  9832                           ;RF_Control_B1.c: 179: RF1.Enable = command;
  9833  1F4A  0820               	movf	setRF_Enable@command,w
  9834  1F4B  0021               	movlb	1	; select bank1
  9835  1F4C  1046               	bcf	_RF1^(0+128),0
  9836  1F4D  1D03               	skipz
  9837  1F4E  1446               	bsf	_RF1^(0+128),0
  9838                           
  9839                           ;RF_Control_B1.c: 180: RF1.Learn = 0;
  9840  1F4F  1346               	bcf	_RF1^(0+128),6
  9841                           
  9842                           ;RF_Control_B1.c: 181: RF1.TransceiveGO = 0;
  9843  1F50  1146               	bcf	_RF1^(0+128),2
  9844                           
  9845                           ;RF_Control_B1.c: 182: RF1.RxStatus = 0;
  9846  1F51  11C6               	bcf	_RF1^(0+128),3
  9847                           
  9848                           ;RF_Control_B1.c: 183: RF1.ReceiveGO = 0;
  9849  1F52  10C6               	bcf	_RF1^(0+128),1
  9850                           
  9851                           ;RF_Control_B1.c: 184: RF1.DebounceTime = 0;
  9852  1F53  01CA               	clrf	(_RF1^(0+128)+4)
  9853                           
  9854                           ;RF_Control_B1.c: 185: RF1.Debounce = 0;
  9855  1F54  12C6               	bcf	_RF1^(0+128),5
  9856  1F55  0008               	return
  9857  1F56                     __end_of_setRF_Enable:	
  9858                           
  9859                           	psect	text52
  9860  1543                     __ptext52:	
  9861 ;; *************** function _DimmerLights_Exceptions *****************
  9862 ;; Defined at:
  9863 ;;		line 524 in file "../src/Dimmer_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  status          1    wreg     unsigned char 
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  status          1   13[BANK0 ] unsigned char 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;		None               void
  9870 ;; Registers used:
  9871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        1 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    8
  9884 ;; This function calls:
  9885 ;;		_getDimmerLights_StatusFlag
  9886 ;;		_setBuz
  9887 ;;		_setDimmerLights_ERROR
  9888 ;;		_setDimmerLights_TriggerERROR
  9889 ;; This function is called by:
  9890 ;;		_setOverTemp_Exceptions
  9891 ;;		_setPowerFault_Exceptions
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function _DimmerLights_Exceptions
  9897  1543                     _DimmerLights_Exceptions:	
  9898                           
  9899                           ;incstack = 0
  9900                           ; Regs used in _DimmerLights_Exceptions: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  9901                           ;DimmerLights_Exceptions@status stored from wreg
  9902  1543  0020               	movlb	0	; select bank0
  9903  1544  00AD               	movwf	DimmerLights_Exceptions@status
  9904                           
  9905                           ;Dimmer_B1.c: 525: if (status == 1) {
  9906  1545  082D               	movf	DimmerLights_Exceptions@status,w
  9907  1546  3A01               	xorlw	1
  9908  1547  1D03               	skipz
  9909  1548  2D59               	goto	l7983
  9910                           
  9911                           ;Dimmer_B1.c: 526: if (getDimmerLights_StatusFlag() == 1) {
  9912  1549  319E  26A1  3195   	fcall	_getDimmerLights_StatusFlag
  9913  154C  3A01               	xorlw	1
  9914  154D  1D03               	skipz
  9915  154E  2D70               	goto	l7991
  9916                           
  9917                           ;Dimmer_B1.c: 527: setBuz(10, 300);
  9918  154F  302C               	movlw	44
  9919  1550  0020               	movlb	0	; select bank0
  9920  1551  00A9               	movwf	setBuz@time
  9921  1552  3001               	movlw	1
  9922  1553  00AA               	movwf	setBuz@time+1
  9923  1554  300A               	movlw	10
  9924  1555  3189  213B  3195   	fcall	_setBuz
  9925  1558  2D70               	goto	l7991
  9926  1559                     l7983:	
  9927                           ;Dimmer_B1.c: 539: } else if (status == 2)
  9928                           
  9929                           ;Dimmer_B1.c: 528: }
  9930                           ;Dimmer_B1.c: 531: setDimmerLights_ERROR(1);
  9931                           
  9932  1559  0020               	movlb	0	; select bank0
  9933  155A  082D               	movf	DimmerLights_Exceptions@status,w
  9934  155B  3A02               	xorlw	2
  9935  155C  1D03               	skipz
  9936  155D  2D6B               	goto	l7989
  9937                           
  9938                           ;Dimmer_B1.c: 540: {
  9939                           ;Dimmer_B1.c: 541: setBuz(5, 300);
  9940  155E  302C               	movlw	44
  9941  155F  00A9               	movwf	setBuz@time
  9942  1560  3001               	movlw	1
  9943  1561  00AA               	movwf	setBuz@time+1
  9944  1562  3005               	movlw	5
  9945  1563  3189  213B  3195   	fcall	_setBuz
  9946                           
  9947                           ;Dimmer_B1.c: 542: setDimmerLights_ERROR(Dimmer->Load);
  9948  1566  0A76               	incf	_Dimmer,w
  9949  1567  0086               	movwf	6
  9950  1568  0187               	clrf	7
  9951  1569  0801               	movf	1,w
  9952  156A  2D71               	goto	L4
  9953  156B                     l7989:	
  9954                           ;Dimmer_B1.c: 543: } else if (status == 3)
  9955                           
  9956  156B  0020               	movlb	0	; select bank0
  9957  156C  082D               	movf	DimmerLights_Exceptions@status,w
  9958  156D  3A03               	xorlw	3
  9959  156E  1D03               	skipz
  9960  156F  2D74               	goto	l787
  9961  1570                     l7991:	
  9962                           
  9963                           ;Dimmer_B1.c: 544: {
  9964                           ;Dimmer_B1.c: 546: setDimmerLights_ERROR(1);
  9965  1570  3001               	movlw	1
  9966  1571                     L4:	
  9967  1571  3197  27B2  3195   	fcall	_setDimmerLights_ERROR
  9968  1574                     l787:	
  9969                           
  9970                           ;Dimmer_B1.c: 554: }
  9971                           ;Dimmer_B1.c: 557: setDimmerLights_TriggerERROR(1, 0);
  9972  1574  0020               	movlb	0	; select bank0
  9973  1575  01A2               	clrf	setDimmerLights_TriggerERROR@command
  9974  1576  3001               	movlw	1
  9975  1577  3193  234B  3195   	fcall	_setDimmerLights_TriggerERROR
  9976                           
  9977                           ;Dimmer_B1.c: 566: if (myMain.SelfTest == 0) {
  9978  157A  0021               	movlb	1	; select bank1
  9979  157B  1B20               	btfsc	_myMain^(0+128),6
  9980  157C  0008               	return
  9981                           
  9982                           ;Dimmer_B1.c: 567: myMain.i = 0;
  9983  157D  102E               	bcf	(_myMain^(0+128)+14),0
  9984                           
  9985                           ;Dimmer_B1.c: 568: myMain.j = 0;
  9986  157E  10AE               	bcf	(_myMain^(0+128)+14),1
  9987                           
  9988                           ;Dimmer_B1.c: 569: myMain.k = 1;
  9989  157F  152E               	bsf	(_myMain^(0+128)+14),2
  9990                           
  9991                           ;Dimmer_B1.c: 570: myMain.Count2 = 0;
  9992  1580  01A7               	clrf	(_myMain^(0+128)+7)
  9993  1581  01A8               	clrf	((_myMain+1)^(0+128)+7)
  9994  1582  0008               	return
  9995  1583                     __end_of_DimmerLights_Exceptions:	
  9996                           
  9997                           	psect	text53
  9998  134B                     __ptext53:	
  9999 ;; *************** function _setDimmerLights_TriggerERROR *****************
 10000 ;; Defined at:
 10001 ;;		line 593 in file "../src/Dimmer_B1.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;  lights          1    wreg     unsigned char 
 10004 ;;  command         1    2[BANK0 ] unsigned char 
 10005 ;; Auto vars:     Size  Location     Type
 10006 ;;  lights          1    3[BANK0 ] unsigned char 
 10007 ;; Return value:  Size  Location     Type
 10008 ;;		None               void
 10009 ;; Registers used:
 10010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10011 ;; Tracked objects:
 10012 ;;		On entry : 0/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10016 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10020 ;;Total ram usage:        2 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    6
 10023 ;; This function calls:
 10024 ;;		_DimmerLightsPointSelect
 10025 ;; This function is called by:
 10026 ;;		_DimmerLights_Exceptions
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           
 10031                           ;psect for function _setDimmerLights_TriggerERROR
 10032  134B                     _setDimmerLights_TriggerERROR:	
 10033                           
 10034                           ;incstack = 0
 10035                           ; Regs used in _setDimmerLights_TriggerERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 10036                           ;setDimmerLights_TriggerERROR@lights stored from wreg
 10037  134B  0020               	movlb	0	; select bank0
 10038  134C  00A3               	movwf	setDimmerLights_TriggerERROR@lights
 10039                           
 10040                           ;Dimmer_B1.c: 595: DimmerLightsPointSelect(lights);
 10041  134D  0823               	movf	setDimmerLights_TriggerERROR@lights,w
 10042  134E  319E  26B6         	fcall	_DimmerLightsPointSelect
 10043                           
 10044                           ;Dimmer_B1.c: 596: DimmerLights->Trigger = command;
 10045  1350  0020               	movlb	0	; select bank0
 10046  1351  086C               	movf	_DimmerLights,w
 10047  1352  3E08               	addlw	8
 10048  1353  0086               	movwf	6
 10049  1354  3001               	movlw	1	; select bank2/3
 10050  1355  0087               	movwf	7
 10051  1356  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10052  1357  1101               	bcf	1,2
 10053  1358  1D03               	skipz
 10054  1359  1501               	bsf	1,2
 10055                           
 10056                           ;Dimmer_B1.c: 597: DimmerLights->Switch = command;
 10057  135A  086C               	movf	_DimmerLights,w
 10058  135B  3E08               	addlw	8
 10059  135C  0086               	movwf	6
 10060  135D  3001               	movlw	1	; select bank2/3
 10061  135E  0087               	movwf	7
 10062  135F  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10063  1360  1081               	bcf	1,1
 10064  1361  1D03               	skipz
 10065  1362  1481               	bsf	1,1
 10066                           
 10067                           ;Dimmer_B1.c: 598: DimmerLights->TriggerAdj = command;
 10068  1363  086C               	movf	_DimmerLights,w
 10069  1364  3E08               	addlw	8
 10070  1365  0086               	movwf	6
 10071  1366  3001               	movlw	1	; select bank2/3
 10072  1367  0087               	movwf	7
 10073  1368  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10074  1369  1201               	bcf	1,4
 10075  136A  1D03               	skipz
 10076  136B  1601               	bsf	1,4
 10077                           
 10078                           ;Dimmer_B1.c: 599: DimmerLights->AdjGo = command;
 10079  136C  086C               	movf	_DimmerLights,w
 10080  136D  3E08               	addlw	8
 10081  136E  0086               	movwf	6
 10082  136F  3001               	movlw	1	; select bank2/3
 10083  1370  0087               	movwf	7
 10084  1371  0822               	movf	setDimmerLights_TriggerERROR@command,w
 10085  1372  1181               	bcf	1,3
 10086  1373  1D03               	skipz
 10087  1374  1581               	bsf	1,3
 10088  1375  0008               	return
 10089  1376                     __end_of_setDimmerLights_TriggerERROR:	
 10090                           
 10091                           	psect	text54
 10092  17B2                     __ptext54:	
 10093 ;; *************** function _setDimmerLights_ERROR *****************
 10094 ;; Defined at:
 10095 ;;		line 575 in file "../src/Dimmer_B1.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  lights          1    wreg     unsigned char 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  lights          1    5[BANK0 ] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;		None               void
 10102 ;; Registers used:
 10103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;Total ram usage:        2 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    7
 10116 ;; This function calls:
 10117 ;;		_DimmerLightsPointSelect
 10118 ;;		_setLED
 10119 ;;		_setRFSW_Status
 10120 ;;		_setSw_Status
 10121 ;; This function is called by:
 10122 ;;		_DimmerLights_Exceptions
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           
 10127                           ;psect for function _setDimmerLights_ERROR
 10128  17B2                     _setDimmerLights_ERROR:	
 10129                           
 10130                           ;incstack = 0
 10131                           ; Regs used in _setDimmerLights_ERROR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 10132                           ;setDimmerLights_ERROR@lights stored from wreg
 10133  17B2  0020               	movlb	0	; select bank0
 10134  17B3  00A5               	movwf	setDimmerLights_ERROR@lights
 10135                           
 10136                           ;Dimmer_B1.c: 576: DimmerLightsPointSelect(lights);
 10137  17B4  0825               	movf	setDimmerLights_ERROR@lights,w
 10138  17B5  319E  26B6  3197   	fcall	_DimmerLightsPointSelect
 10139                           
 10140                           ;Dimmer_B1.c: 577: if (DimmerLights->Status == 1) {
 10141  17B8  0020               	movlb	0	; select bank0
 10142  17B9  086C               	movf	_DimmerLights,w
 10143  17BA  0086               	movwf	6
 10144  17BB  3001               	movlw	1	; select bank2/3
 10145  17BC  0087               	movwf	7
 10146  17BD  1E81               	btfss	1,5
 10147  17BE  0008               	return
 10148                           
 10149                           ;Dimmer_B1.c: 579: DimmerLights->Signal = 0;
 10150  17BF  086C               	movf	_DimmerLights,w
 10151  17C0  0086               	movwf	6
 10152  17C1  3001               	movlw	1	; select bank2/3
 10153  17C2  0087               	movwf	7
 10154  17C3  1081               	bcf	1,1
 10155                           
 10156                           ;Dimmer_B1.c: 580: DimmerLights->AdjFlag = 0;
 10157  17C4  086C               	movf	_DimmerLights,w
 10158  17C5  0086               	movwf	6
 10159  17C6  3001               	movlw	1	; select bank2/3
 10160  17C7  0087               	movwf	7
 10161  17C8  1181               	bcf	1,3
 10162                           
 10163                           ;Dimmer_B1.c: 581: DimmerLights->AdjStatus = 0;
 10164  17C9  086C               	movf	_DimmerLights,w
 10165  17CA  0086               	movwf	6
 10166  17CB  3001               	movlw	1	; select bank2/3
 10167  17CC  0087               	movwf	7
 10168  17CD  1201               	bcf	1,4
 10169                           
 10170                           ;Dimmer_B1.c: 582: DimmerLights->StatusFlag = 0;
 10171  17CE  086C               	movf	_DimmerLights,w
 10172  17CF  0086               	movwf	6
 10173  17D0  3001               	movlw	1	; select bank2/3
 10174  17D1  0087               	movwf	7
 10175  17D2  1301               	bcf	1,6
 10176                           
 10177                           ;Dimmer_B1.c: 583: DimmerLights->DimmingTimeValue = 7;
 10178  17D3  3007               	movlw	7
 10179  17D4  00A4               	movwf	??_setDimmerLights_ERROR
 10180  17D5  086C               	movf	_DimmerLights,w
 10181  17D6  3E02               	addlw	2
 10182  17D7  0086               	movwf	6
 10183  17D8  3001               	movlw	1	; select bank2/3
 10184  17D9  0087               	movwf	7
 10185  17DA  0824               	movf	??_setDimmerLights_ERROR,w
 10186  17DB  0081               	movwf	1
 10187                           
 10188                           ;Dimmer_B1.c: 584: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 10189  17DC  086C               	movf	_DimmerLights,w
 10190  17DD  3E06               	addlw	6
 10191  17DE  0086               	movwf	6
 10192  17DF  3001               	movlw	1	; select bank2/3
 10193  17E0  0087               	movwf	7
 10194  17E1  0801               	movf	1,w
 10195  17E2  00A4               	movwf	??_setDimmerLights_ERROR
 10196  17E3  086C               	movf	_DimmerLights,w
 10197  17E4  3E04               	addlw	4
 10198  17E5  0086               	movwf	6
 10199  17E6  3001               	movlw	1	; select bank2/3
 10200  17E7  0087               	movwf	7
 10201  17E8  0824               	movf	??_setDimmerLights_ERROR,w
 10202  17E9  0081               	movwf	1
 10203                           
 10204                           ;Dimmer_B1.c: 585: Dimmer->Detect = 1;
 10205  17EA  0876               	movf	_Dimmer,w
 10206  17EB  0086               	movwf	6
 10207  17EC  0187               	clrf	7
 10208  17ED  1401               	bsf	1,0
 10209                           
 10210                           ;Dimmer_B1.c: 586: ;;
 10211                           ;Dimmer_B1.c: 587: setLED(lights, 1);
 10212  17EE  01A1               	clrf	setLED@command
 10213  17EF  0AA1               	incf	setLED@command,f
 10214  17F0  0825               	movf	setDimmerLights_ERROR@lights,w
 10215  17F1  318A  224A  3197   	fcall	_setLED
 10216                           
 10217                           ;Dimmer_B1.c: 588: setSw_Status(lights, 0);
 10218  17F4  0020               	movlb	0	; select bank0
 10219  17F5  01A2               	clrf	setSw_Status@command
 10220  17F6  0825               	movf	setDimmerLights_ERROR@lights,w
 10221  17F7  319F  2756  3197   	fcall	_setSw_Status
 10222                           
 10223                           ;Dimmer_B1.c: 589: setRFSW_Status(lights, 0);
 10224  17FA  0020               	movlb	0	; select bank0
 10225  17FB  01A2               	clrf	setRFSW_Status@command
 10226  17FC  0825               	movf	setDimmerLights_ERROR@lights,w
 10227  17FD  319F  273A         	fcall	_setRFSW_Status
 10228  17FF  0008               	return
 10229  1800                     __end_of_setDimmerLights_ERROR:	
 10230                           
 10231                           	psect	text55
 10232  1E5B                     __ptext55:	
 10233 ;; *************** function _getTemp_Safe *****************
 10234 ;; Defined at:
 10235 ;;		line 21 in file "../src/OverTemperature_B1.c"
 10236 ;; Parameters:    Size  Location     Type
 10237 ;;		None
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;  result          1    0[BANK0 ] unsigned char 
 10240 ;; Return value:  Size  Location     Type
 10241 ;;                  1    wreg      unsigned char 
 10242 ;; Registers used:
 10243 ;;		wreg, status,2
 10244 ;; Tracked objects:
 10245 ;;		On entry : 0/0
 10246 ;;		On exit  : 0/0
 10247 ;;		Unchanged: 0/0
 10248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;Total ram usage:        1 bytes
 10254 ;; Hardware stack levels used:    1
 10255 ;; Hardware stack levels required when called:    5
 10256 ;; This function calls:
 10257 ;;		Nothing
 10258 ;; This function is called by:
 10259 ;;		_setPowerFault_Main
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           
 10264                           ;psect for function _getTemp_Safe
 10265  1E5B                     _getTemp_Safe:	
 10266                           
 10267                           ;OverTemperature_B1.c: 22: char result = Temp1.Safe;
 10268                           
 10269                           ;incstack = 0
 10270                           ; Regs used in _getTemp_Safe: [wreg+status,2]
 10271  1E5B  3000               	movlw	0
 10272  1E5C  0021               	movlb	1	; select bank1
 10273  1E5D  1A55               	btfsc	_Temp1^(0+128),4
 10274  1E5E  3001               	movlw	1
 10275  1E5F  0020               	movlb	0	; select bank0
 10276  1E60  00A0               	movwf	getTemp_Safe@result
 10277                           
 10278                           ;OverTemperature_B1.c: 23: return result;
 10279  1E61  0820               	movf	getTemp_Safe@result,w
 10280  1E62  0008               	return
 10281  1E63                     __end_of_getTemp_Safe:	
 10282                           
 10283                           	psect	text56
 10284  1DEE                     __ptext56:	
 10285 ;; *************** function _PowerFault_Initialization *****************
 10286 ;; Defined at:
 10287 ;;		line 10 in file "../src/PowerFault_B1.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;		None
 10290 ;; Auto vars:     Size  Location     Type
 10291 ;;		None
 10292 ;; Return value:  Size  Location     Type
 10293 ;;		None               void
 10294 ;; Registers used:
 10295 ;;		status,2, status,0, pclath, cstack
 10296 ;; Tracked objects:
 10297 ;;		On entry : 0/0
 10298 ;;		On exit  : 0/0
 10299 ;;		Unchanged: 0/0
 10300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10305 ;;Total ram usage:        0 bytes
 10306 ;; Hardware stack levels used:    1
 10307 ;; Hardware stack levels required when called:    6
 10308 ;; This function calls:
 10309 ;;		_setPowerFault_Initialization
 10310 ;; This function is called by:
 10311 ;;		_main
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           
 10316                           ;psect for function _PowerFault_Initialization
 10317  1DEE                     _PowerFault_Initialization:	
 10318                           
 10319                           ;PowerFault_B1.c: 12: setPowerFault_Initialization();
 10320                           
 10321                           ;incstack = 0
 10322                           ; Regs used in _PowerFault_Initialization: [status,2+status,0+pclath+cstack]
 10323  1DEE  319E  261F         	fcall	_setPowerFault_Initialization
 10324  1DF0  0008               	return
 10325  1DF1                     __end_of_PowerFault_Initialization:	
 10326                           
 10327                           	psect	text57
 10328  1E1F                     __ptext57:	
 10329 ;; *************** function _setPowerFault_Initialization *****************
 10330 ;; Defined at:
 10331 ;;		line 24 in file "../src/PowerFault_B1.c"
 10332 ;; Parameters:    Size  Location     Type
 10333 ;;		None
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;		None
 10336 ;; Return value:  Size  Location     Type
 10337 ;;		None               void
 10338 ;; Registers used:
 10339 ;;		None
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;Total ram usage:        0 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; Hardware stack levels required when called:    5
 10352 ;; This function calls:
 10353 ;;		Nothing
 10354 ;; This function is called by:
 10355 ;;		_PowerFault_Initialization
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _setPowerFault_Initialization
 10361  1E1F                     _setPowerFault_Initialization:	
 10362                           
 10363                           ;PowerFault_B1.c: 25: PF1.Enable = 1;
 10364                           
 10365                           ;incstack = 0
 10366                           ; Regs used in _setPowerFault_Initialization: []
 10367  1E1F  0021               	movlb	1	; select bank1
 10368  1E20  143E               	bsf	_PF1^(0+128),0
 10369                           
 10370                           ;PowerFault_B1.c: 26: PF1.Safe = 1;
 10371  1E21  153E               	bsf	_PF1^(0+128),2
 10372  1E22  0008               	return
 10373  1E23                     __end_of_setPowerFault_Initialization:	
 10374                           
 10375                           	psect	text58
 10376  1F65                     __ptext58:	
 10377 ;; *************** function _Mcu_Initialization *****************
 10378 ;; Defined at:
 10379 ;;		line 30 in file "../src/MCU_B1.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;		None
 10382 ;; Auto vars:     Size  Location     Type
 10383 ;;		None
 10384 ;; Return value:  Size  Location     Type
 10385 ;;		None               void
 10386 ;; Registers used:
 10387 ;;		wreg, status,2, status,0, pclath, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 0/0
 10390 ;;		On exit  : 0/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10397 ;;Total ram usage:        0 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    6
 10400 ;; This function calls:
 10401 ;;		_ADC_Set
 10402 ;;		_Fosc_Set
 10403 ;;		_IOC_Set
 10404 ;;		_IO_Set
 10405 ;;		_TMR0_Set
 10406 ;; This function is called by:
 10407 ;;		_main
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           
 10412                           ;psect for function _Mcu_Initialization
 10413  1F65                     _Mcu_Initialization:	
 10414                           
 10415                           ;MCU_B1.c: 32: Fosc_Set();
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10419  1F65  319E  261B  319F   	fcall	_Fosc_Set
 10420                           
 10421                           ;MCU_B1.c: 34: IO_Set();
 10422  1F68  3191  2131  319F   	fcall	_IO_Set
 10423                           
 10424                           ;MCU_B1.c: 36: TMR0_Set();
 10425  1F6B  319E  2653  319F   	fcall	_TMR0_Set
 10426                           
 10427                           ;MCU_B1.c: 38: ;;
 10428                           ;MCU_B1.c: 40: ADC_Set();
 10429  1F6E  319E  2645  319F   	fcall	_ADC_Set
 10430                           
 10431                           ;MCU_B1.c: 44: ;;
 10432                           ;MCU_B1.c: 46: IOC_Set();
 10433  1F71  319F  272D         	fcall	_IOC_Set
 10434  1F73  0008               	return
 10435  1F74                     __end_of_Mcu_Initialization:	
 10436                           
 10437                           	psect	text59
 10438  1E53                     __ptext59:	
 10439 ;; *************** function _TMR0_Set *****************
 10440 ;; Defined at:
 10441 ;;		line 126 in file "../src/MCU_B1.c"
 10442 ;; Parameters:    Size  Location     Type
 10443 ;;		None
 10444 ;; Auto vars:     Size  Location     Type
 10445 ;;		None
 10446 ;; Return value:  Size  Location     Type
 10447 ;;		None               void
 10448 ;; Registers used:
 10449 ;;		wreg, status,2
 10450 ;; Tracked objects:
 10451 ;;		On entry : 0/0
 10452 ;;		On exit  : 0/0
 10453 ;;		Unchanged: 0/0
 10454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10459 ;;Total ram usage:        0 bytes
 10460 ;; Hardware stack levels used:    1
 10461 ;; Hardware stack levels required when called:    5
 10462 ;; This function calls:
 10463 ;;		Nothing
 10464 ;; This function is called by:
 10465 ;;		_Mcu_Initialization
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           
 10470                           ;psect for function _TMR0_Set
 10471  1E53                     _TMR0_Set:	
 10472                           
 10473                           ;MCU_B1.c: 128: OPTION_REG = 0x00;
 10474                           
 10475                           ;incstack = 0
 10476                           ; Regs used in _TMR0_Set: [wreg+status,2]
 10477  1E53  0021               	movlb	1	; select bank1
 10478  1E54  0195               	clrf	21	;volatile
 10479                           
 10480                           ;MCU_B1.c: 129: TMR0 = (256-190);
 10481  1E55  3042               	movlw	66
 10482  1E56  0020               	movlb	0	; select bank0
 10483  1E57  0095               	movwf	21	;volatile
 10484                           
 10485                           ;MCU_B1.c: 130: TMR0IE = 1;
 10486  1E58  168B               	bsf	11,5	;volatile
 10487                           
 10488                           ;MCU_B1.c: 131: GIE = 1;
 10489  1E59  178B               	bsf	11,7	;volatile
 10490  1E5A  0008               	return
 10491  1E5B                     __end_of_TMR0_Set:	
 10492                           
 10493                           	psect	text60
 10494  1131                     __ptext60:	
 10495 ;; *************** function _IO_Set *****************
 10496 ;; Defined at:
 10497 ;;		line 60 in file "../src/MCU_B1.c"
 10498 ;; Parameters:    Size  Location     Type
 10499 ;;		None
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;		None               void
 10504 ;; Registers used:
 10505 ;;		wreg, status,2
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;Total ram usage:        0 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    5
 10518 ;; This function calls:
 10519 ;;		Nothing
 10520 ;; This function is called by:
 10521 ;;		_Mcu_Initialization
 10522 ;; This function uses a non-reentrant model
 10523 ;;
 10524                           
 10525                           
 10526                           ;psect for function _IO_Set
 10527  1131                     _IO_Set:	
 10528                           
 10529                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10530                           
 10531                           ;incstack = 0
 10532                           ; Regs used in _IO_Set: [wreg+status,2]
 10533  1131  3077               	movlw	119
 10534  1132  0021               	movlb	1	; select bank1
 10535  1133  008C               	movwf	12	;volatile
 10536                           
 10537                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10538  1134  3007               	movlw	7
 10539  1135  008D               	movwf	13	;volatile
 10540                           
 10541                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10542  1136  300C               	movlw	12
 10543  1137  008E               	movwf	14	;volatile
 10544                           
 10545                           ;MCU_B1.c: 91: LATA = 0b00000000;;
 10546  1138  0022               	movlb	2	; select bank2
 10547  1139  018C               	clrf	12	;volatile
 10548                           
 10549                           ;MCU_B1.c: 92: LATB = 0b00000010;;
 10550  113A  3002               	movlw	2
 10551  113B  008D               	movwf	13	;volatile
 10552                           
 10553                           ;MCU_B1.c: 93: LATC = 0b00000000;;
 10554  113C  018E               	clrf	14	;volatile
 10555                           
 10556                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
 10557  113D  3022               	movlw	34
 10558  113E  0023               	movlb	3	; select bank3
 10559  113F  008C               	movwf	12	;volatile
 10560                           
 10561                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
 10562  1140  018D               	clrf	13	;volatile
 10563                           
 10564                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
 10565  1141  018E               	clrf	14	;volatile
 10566                           
 10567                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
 10568  1142  3077               	movlw	119
 10569  1143  0020               	movlb	0	; select bank0
 10570  1144  008C               	movwf	12	;volatile
 10571                           
 10572                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
 10573  1145  3007               	movlw	7
 10574  1146  008D               	movwf	13	;volatile
 10575                           
 10576                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
 10577  1147  300C               	movlw	12
 10578  1148  008E               	movwf	14	;volatile
 10579  1149  0008               	return
 10580  114A                     __end_of_IO_Set:	
 10581                           
 10582                           	psect	text61
 10583  1F2D                     __ptext61:	
 10584 ;; *************** function _IOC_Set *****************
 10585 ;; Defined at:
 10586 ;;		line 263 in file "../src/MCU_B1.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;		None               void
 10593 ;; Registers used:
 10594 ;;		wreg, status,2
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        0 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    5
 10607 ;; This function calls:
 10608 ;;		Nothing
 10609 ;; This function is called by:
 10610 ;;		_Mcu_Initialization
 10611 ;; This function uses a non-reentrant model
 10612 ;;
 10613                           
 10614                           
 10615                           ;psect for function _IOC_Set
 10616  1F2D                     _IOC_Set:	
 10617                           
 10618                           ;MCU_B1.c: 264: WPUB2 = 0;
 10619                           
 10620                           ;incstack = 0
 10621                           ; Regs used in _IOC_Set: [wreg+status,2]
 10622  1F2D  0024               	movlb	4	; select bank4
 10623  1F2E  110D               	bcf	13,2	;volatile
 10624                           
 10625                           ;MCU_B1.c: 266: IOCBP = 0b00000100;
 10626  1F2F  3004               	movlw	4
 10627  1F30  0027               	movlb	7	; select bank7
 10628  1F31  0094               	movwf	20	;volatile
 10629                           
 10630                           ;MCU_B1.c: 267: IOCBN = 0b00000100;
 10631  1F32  3004               	movlw	4
 10632  1F33  0095               	movwf	21	;volatile
 10633                           
 10634                           ;MCU_B1.c: 282: IOCBF = 0b00000000;
 10635  1F34  0196               	clrf	22	;volatile
 10636                           
 10637                           ;MCU_B1.c: 284: IOCIE = 1;
 10638  1F35  158B               	bsf	11,3	;volatile
 10639                           
 10640                           ;MCU_B1.c: 285: IOCIF = 0;
 10641  1F36  100B               	bcf	11,0	;volatile
 10642                           
 10643                           ;MCU_B1.c: 286: PEIE = 1;
 10644  1F37  170B               	bsf	11,6	;volatile
 10645                           
 10646                           ;MCU_B1.c: 287: GIE = 1;
 10647  1F38  178B               	bsf	11,7	;volatile
 10648  1F39  0008               	return
 10649  1F3A                     __end_of_IOC_Set:	
 10650                           
 10651                           	psect	text62
 10652  1E1B                     __ptext62:	
 10653 ;; *************** function _Fosc_Set *****************
 10654 ;; Defined at:
 10655 ;;		line 56 in file "../src/MCU_B1.c"
 10656 ;; Parameters:    Size  Location     Type
 10657 ;;		None
 10658 ;; Auto vars:     Size  Location     Type
 10659 ;;		None
 10660 ;; Return value:  Size  Location     Type
 10661 ;;		None               void
 10662 ;; Registers used:
 10663 ;;		wreg
 10664 ;; Tracked objects:
 10665 ;;		On entry : 0/0
 10666 ;;		On exit  : 0/0
 10667 ;;		Unchanged: 0/0
 10668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;Total ram usage:        0 bytes
 10674 ;; Hardware stack levels used:    1
 10675 ;; Hardware stack levels required when called:    5
 10676 ;; This function calls:
 10677 ;;		Nothing
 10678 ;; This function is called by:
 10679 ;;		_Mcu_Initialization
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _Fosc_Set
 10685  1E1B                     _Fosc_Set:	
 10686                           
 10687                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in _Fosc_Set: [wreg]
 10691  1E1B  3078               	movlw	120
 10692  1E1C  0021               	movlb	1	; select bank1
 10693  1E1D  0099               	movwf	25	;volatile
 10694  1E1E  0008               	return
 10695  1E1F                     __end_of_Fosc_Set:	
 10696                           
 10697                           	psect	text63
 10698  1E45                     __ptext63:	
 10699 ;; *************** function _ADC_Set *****************
 10700 ;; Defined at:
 10701 ;;		line 309 in file "../src/MCU_B1.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;		None               void
 10708 ;; Registers used:
 10709 ;;		wreg
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:        0 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    5
 10722 ;; This function calls:
 10723 ;;		Nothing
 10724 ;; This function is called by:
 10725 ;;		_Mcu_Initialization
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           
 10730                           ;psect for function _ADC_Set
 10731  1E45                     _ADC_Set:	
 10732                           
 10733                           ;MCU_B1.c: 310: ADCON1 = 0xf2;
 10734                           
 10735                           ;incstack = 0
 10736                           ; Regs used in _ADC_Set: [wreg]
 10737  1E45  30F2               	movlw	242
 10738  1E46  0021               	movlb	1	; select bank1
 10739  1E47  009E               	movwf	30	;volatile
 10740                           
 10741                           ;MCU_B1.c: 311: FVRCON = 0xc0;
 10742  1E48  30C0               	movlw	192
 10743  1E49  0022               	movlb	2	; select bank2
 10744  1E4A  0097               	movwf	23	;volatile
 10745  1E4B  0008               	return
 10746  1E4C                     __end_of_ADC_Set:	
 10747                           
 10748                           	psect	text64
 10749  1F07                     __ptext64:	
 10750 ;; *************** function _LED_Main *****************
 10751 ;; Defined at:
 10752 ;;		line 47 in file "../src/LED_B1.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;		None
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;		None
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;Total ram usage:        0 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    7
 10773 ;; This function calls:
 10774 ;;		_setLED_Main
 10775 ;; This function is called by:
 10776 ;;		_main
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           
 10781                           ;psect for function _LED_Main
 10782  1F07                     _LED_Main:	
 10783                           
 10784                           ;LED_B1.c: 49: setLED_Main(1);
 10785                           
 10786                           ;incstack = 0
 10787                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10788  1F07  3001               	movlw	1
 10789  1F08  3196  260A  319F   	fcall	_setLED_Main
 10790                           
 10791                           ;LED_B1.c: 52: setLED_Main(2);
 10792  1F0B  3002               	movlw	2
 10793  1F0C  3196  260A  319F   	fcall	_setLED_Main
 10794                           
 10795                           ;LED_B1.c: 58: setLED_Main(99);
 10796  1F0F  3063               	movlw	99
 10797  1F10  3196  260A         	fcall	_setLED_Main
 10798  1F12  0008               	return
 10799  1F13                     __end_of_LED_Main:	
 10800                           
 10801                           	psect	text65
 10802  160A                     __ptext65:	
 10803 ;; *************** function _setLED_Main *****************
 10804 ;; Defined at:
 10805 ;;		line 192 in file "../src/LED_B1.c"
 10806 ;; Parameters:    Size  Location     Type
 10807 ;;  led             1    wreg     unsigned char 
 10808 ;; Auto vars:     Size  Location     Type
 10809 ;;  led             1    3[BANK0 ] unsigned char 
 10810 ;; Return value:  Size  Location     Type
 10811 ;;		None               void
 10812 ;; Registers used:
 10813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10814 ;; Tracked objects:
 10815 ;;		On entry : 0/0
 10816 ;;		On exit  : 0/0
 10817 ;;		Unchanged: 0/0
 10818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10823 ;;Total ram usage:        3 bytes
 10824 ;; Hardware stack levels used:    1
 10825 ;; Hardware stack levels required when called:    6
 10826 ;; This function calls:
 10827 ;;		_LedPointSelect
 10828 ;; This function is called by:
 10829 ;;		_LED_Main
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           
 10834                           ;psect for function _setLED_Main
 10835  160A                     _setLED_Main:	
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10839                           ;setLED_Main@led stored from wreg
 10840  160A  0020               	movlb	0	; select bank0
 10841  160B  00A3               	movwf	setLED_Main@led
 10842                           
 10843                           ;LED_B1.c: 193: LedPointSelect(led);
 10844  160C  0823               	movf	setLED_Main@led,w
 10845  160D  3191  2164  3196   	fcall	_LedPointSelect
 10846                           
 10847                           ;LED_B1.c: 194: if (LED->GO == 1) {
 10848  1610  0020               	movlb	0	; select bank0
 10849  1611  0869               	movf	_LED,w
 10850  1612  0086               	movwf	6
 10851  1613  086A               	movf	_LED+1,w
 10852  1614  0087               	movwf	7
 10853  1615  1C81               	btfss	1,1
 10854  1616  0008               	return
 10855                           
 10856                           ;LED_B1.c: 195: LED->Time++;
 10857  1617  0869               	movf	_LED,w
 10858  1618  0086               	movwf	6
 10859  1619  086A               	movf	_LED+1,w
 10860  161A  0087               	movwf	7
 10861  161B  3141               	addfsr 1,1
 10862  161C  3001               	movlw	1
 10863  161D  0781               	addwf	1,f
 10864  161E  3141               	addfsr 1,1
 10865  161F  1803               	skipnc
 10866  1620  0A81               	incf	1,f
 10867                           
 10868                           ;LED_B1.c: 196: if (LED->Time >= 500 / 10) {
 10869  1621  0869               	movf	_LED,w
 10870  1622  0086               	movwf	6
 10871  1623  086A               	movf	_LED+1,w
 10872  1624  0087               	movwf	7
 10873  1625  3141               	addfsr 1,1
 10874  1626  3F40               	moviw [0]fsr1
 10875  1627  00A1               	movwf	??_setLED_Main
 10876  1628  3F41               	moviw [1]fsr1
 10877  1629  00A2               	movwf	??_setLED_Main+1
 10878  162A  3000               	movlw	0
 10879  162B  0222               	subwf	??_setLED_Main+1,w
 10880  162C  3032               	movlw	50
 10881  162D  1903               	skipnz
 10882  162E  0221               	subwf	??_setLED_Main,w
 10883  162F  1C03               	skipc
 10884  1630  0008               	return
 10885                           
 10886                           ;LED_B1.c: 197: LED->Time = 0;
 10887  1631  0869               	movf	_LED,w
 10888  1632  0086               	movwf	6
 10889  1633  086A               	movf	_LED+1,w
 10890  1634  0087               	movwf	7
 10891  1635  3141               	addfsr 1,1
 10892  1636  3000               	movlw	0
 10893  1637  3FC0               	movwi [0]fsr1
 10894  1638  3FC1               	movwi [1]fsr1
 10895                           
 10896                           ;LED_B1.c: 199: if (led == 1) {
 10897  1639  0823               	movf	setLED_Main@led,w
 10898  163A  3A01               	xorlw	1
 10899  163B  1D03               	skipz
 10900  163C  2E40               	goto	l8609
 10901                           
 10902                           ;LED_B1.c: 200: RA3 = RA3 == 1 ? 0 : 1;
 10903  163D  3008               	movlw	8
 10904  163E  068C               	xorwf	12,f
 10905                           
 10906                           ;LED_B1.c: 201: }
 10907  163F  0008               	return
 10908  1640                     l8609:	
 10909                           
 10910                           ;LED_B1.c: 204: else if (led == 2) {
 10911  1640  0823               	movf	setLED_Main@led,w
 10912  1641  3A02               	xorlw	2
 10913  1642  1D03               	skipz
 10914  1643  2E47               	goto	l8613
 10915                           
 10916                           ;LED_B1.c: 205: RC7 = RC7 == 1 ? 0 : 1;
 10917  1644  3080               	movlw	128
 10918  1645  068E               	xorwf	14,f
 10919                           
 10920                           ;LED_B1.c: 206: }
 10921  1646  0008               	return
 10922  1647                     l8613:	
 10923                           
 10924                           ;LED_B1.c: 214: else if (led == 99) {
 10925  1647  0823               	movf	setLED_Main@led,w
 10926  1648  3A63               	xorlw	99
 10927  1649  1D03               	skipz
 10928  164A  0008               	return
 10929                           
 10930                           ;LED_B1.c: 215: RB5 = RB5 == 1 ? 0 : 1;
 10931  164B  3020               	movlw	32
 10932  164C  068D               	xorwf	13,f
 10933  164D  0008               	return
 10934  164E                     __end_of_setLED_Main:	
 10935                           
 10936                           	psect	text66
 10937  1EFB                     __ptext66:	
 10938 ;; *************** function _LED_Initialization *****************
 10939 ;; Defined at:
 10940 ;;		line 31 in file "../src/LED_B1.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;		None
 10943 ;; Auto vars:     Size  Location     Type
 10944 ;;		None
 10945 ;; Return value:  Size  Location     Type
 10946 ;;		None               void
 10947 ;; Registers used:
 10948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10949 ;; Tracked objects:
 10950 ;;		On entry : 0/0
 10951 ;;		On exit  : 0/0
 10952 ;;		Unchanged: 0/0
 10953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;Total ram usage:        0 bytes
 10959 ;; Hardware stack levels used:    1
 10960 ;; Hardware stack levels required when called:    8
 10961 ;; This function calls:
 10962 ;;		_setLED_Initialization
 10963 ;; This function is called by:
 10964 ;;		_main
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           
 10969                           ;psect for function _LED_Initialization
 10970  1EFB                     _LED_Initialization:	
 10971                           
 10972                           ;LED_B1.c: 33: setLED_Initialization(1);
 10973                           
 10974                           ;incstack = 0
 10975                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10976  1EFB  3001               	movlw	1
 10977  1EFC  3190  2066  319E   	fcall	_setLED_Initialization
 10978                           
 10979                           ;LED_B1.c: 36: setLED_Initialization(2);
 10980  1EFF  3002               	movlw	2
 10981  1F00  3190  2066  319E   	fcall	_setLED_Initialization
 10982                           
 10983                           ;LED_B1.c: 42: setLED_Initialization(99);
 10984  1F03  3063               	movlw	99
 10985  1F04  3190  2066         	fcall	_setLED_Initialization
 10986  1F06  0008               	return
 10987  1F07                     __end_of_LED_Initialization:	
 10988                           
 10989                           	psect	text67
 10990  1066                     __ptext67:	
 10991 ;; *************** function _setLED_Initialization *****************
 10992 ;; Defined at:
 10993 ;;		line 63 in file "../src/LED_B1.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  led             1    wreg     unsigned char 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  led             1    3[BANK0 ] unsigned char 
 10998 ;; Return value:  Size  Location     Type
 10999 ;;		None               void
 11000 ;; Registers used:
 11001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11002 ;; Tracked objects:
 11003 ;;		On entry : 0/0
 11004 ;;		On exit  : 0/0
 11005 ;;		Unchanged: 0/0
 11006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11010 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11011 ;;Total ram usage:        1 bytes
 11012 ;; Hardware stack levels used:    1
 11013 ;; Hardware stack levels required when called:    7
 11014 ;; This function calls:
 11015 ;;		_LedPointSelect
 11016 ;;		_setLED
 11017 ;; This function is called by:
 11018 ;;		_LED_Initialization
 11019 ;; This function uses a non-reentrant model
 11020 ;;
 11021                           
 11022                           
 11023                           ;psect for function _setLED_Initialization
 11024  1066                     _setLED_Initialization:	
 11025                           
 11026                           ;incstack = 0
 11027                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11028                           ;setLED_Initialization@led stored from wreg
 11029  1066  0020               	movlb	0	; select bank0
 11030  1067  00A3               	movwf	setLED_Initialization@led
 11031                           
 11032                           ;LED_B1.c: 64: LedPointSelect(led);
 11033  1068  0823               	movf	setLED_Initialization@led,w
 11034  1069  3191  2164  3190   	fcall	_LedPointSelect
 11035                           
 11036                           ;LED_B1.c: 65: LED->Enable = 1;
 11037  106C  0020               	movlb	0	; select bank0
 11038  106D  0869               	movf	_LED,w
 11039  106E  0086               	movwf	6
 11040  106F  086A               	movf	_LED+1,w
 11041  1070  0087               	movwf	7
 11042  1071  1401               	bsf	1,0
 11043                           
 11044                           ;LED_B1.c: 66: setLED(led, 0);
 11045  1072  01A1               	clrf	setLED@command
 11046  1073  0823               	movf	setLED_Initialization@led,w
 11047  1074  318A  224A         	fcall	_setLED
 11048  1076  0008               	return
 11049  1077                     __end_of_setLED_Initialization:	
 11050                           
 11051                           	psect	text68
 11052  11A0                     __ptext68:	
 11053 ;; *************** function _Flash_Memory_Main *****************
 11054 ;; Defined at:
 11055 ;;		line 790 in file "../src/MCU_B1.c"
 11056 ;; Parameters:    Size  Location     Type
 11057 ;;		None
 11058 ;; Auto vars:     Size  Location     Type
 11059 ;;		None
 11060 ;; Return value:  Size  Location     Type
 11061 ;;		None               void
 11062 ;; Registers used:
 11063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11064 ;; Tracked objects:
 11065 ;;		On entry : 0/0
 11066 ;;		On exit  : 0/0
 11067 ;;		Unchanged: 0/0
 11068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11073 ;;Total ram usage:        0 bytes
 11074 ;; Hardware stack levels used:    1
 11075 ;; Hardware stack levels required when called:    8
 11076 ;; This function calls:
 11077 ;;		_Flash_Memory_Modify
 11078 ;; This function is called by:
 11079 ;;		_main
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           
 11084                           ;psect for function _Flash_Memory_Main
 11085  11A0                     _Flash_Memory_Main:	
 11086                           
 11087                           ;MCU_B1.c: 791: if (Memory.GO == 1) {
 11088                           
 11089                           ;incstack = 0
 11090                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11091  11A0  0022               	movlb	2	; select bank2
 11092  11A1  1CE1               	btfss	(_Memory^(0+256)+36),1
 11093  11A2  0008               	return
 11094                           
 11095                           ;MCU_B1.c: 792: if (Memory.Modify == 1) {
 11096  11A3  1C61               	btfss	(_Memory^(0+256)+36),0
 11097  11A4  29BD               	goto	l1234
 11098                           
 11099                           ;MCU_B1.c: 793: Memory.Time++;
 11100  11A5  3001               	movlw	1
 11101  11A6  07DF               	addwf	(_Memory^(0+256)+34),f
 11102  11A7  3000               	movlw	0
 11103  11A8  3DE0               	addwfc	((_Memory+1)^(0+256)+34),f
 11104                           
 11105                           ;MCU_B1.c: 794: if (Memory.Time == 25)
 11106  11A9  3022               	movlw	34
 11107  11AA  3E3D               	addlw	_Memory& (0+255)
 11108  11AB  0086               	movwf	6
 11109  11AC  3001               	movlw	1	; select bank2/3
 11110  11AD  0087               	movwf	7
 11111  11AE  3F40               	moviw [0]fsr1
 11112  11AF  3A19               	xorlw	25
 11113  11B0  1D03               	skipz
 11114  11B1  29B4               	goto	u9235
 11115  11B2  3F41               	moviw [1]fsr1
 11116  11B3  3A00               	xorlw	0
 11117  11B4                     u9235:	
 11118  11B4  1D03               	skipz
 11119  11B5  0008               	return
 11120                           
 11121                           ;MCU_B1.c: 795: {
 11122                           ;MCU_B1.c: 796: Memory.Time = 0;
 11123  11B6  01DF               	clrf	(_Memory^(0+256)+34)
 11124  11B7  01E0               	clrf	((_Memory+1)^(0+256)+34)
 11125                           
 11126                           ;MCU_B1.c: 797: Memory.Modify = 0;
 11127  11B8  1061               	bcf	(_Memory^(0+256)+36),0
 11128                           
 11129                           ;MCU_B1.c: 798: Memory.GO = 0;
 11130  11B9  10E1               	bcf	(_Memory^(0+256)+36),1
 11131                           
 11132                           ;MCU_B1.c: 799: Flash_Memory_Modify();
 11133  11BA  3195  25C6         	fcall	_Flash_Memory_Modify
 11134                           
 11135                           ;MCU_B1.c: 800: }
 11136                           ;MCU_B1.c: 801: } else {
 11137  11BC  0008               	return
 11138  11BD                     l1234:	
 11139                           
 11140                           ;MCU_B1.c: 802: Memory.GO = 0;
 11141  11BD  10E1               	bcf	(_Memory^(0+256)+36),1
 11142  11BE  0008               	return
 11143  11BF                     __end_of_Flash_Memory_Main:	
 11144                           
 11145                           	psect	text69
 11146  15C6                     __ptext69:	
 11147 ;; *************** function _Flash_Memory_Modify *****************
 11148 ;; Defined at:
 11149 ;;		line 859 in file "../src/MCU_B1.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;  i               1    5[BANK0 ] unsigned char 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;		None               void
 11156 ;; Registers used:
 11157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:        2 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    7
 11170 ;; This function calls:
 11171 ;;		_Flash_Memory_Erasing
 11172 ;;		_Flash_Memory_Read
 11173 ;;		_Flash_Memory_Write
 11174 ;; This function is called by:
 11175 ;;		_Flash_Memory_Main
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _Flash_Memory_Modify
 11181  15C6                     _Flash_Memory_Modify:	
 11182                           
 11183                           ;MCU_B1.c: 860: char i = 0;
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11187  15C6  0020               	movlb	0	; select bank0
 11188  15C7  01A5               	clrf	Flash_Memory_Modify@i
 11189                           
 11190                           ;MCU_B1.c: 861: for (i = 0; i < 32; i++) {
 11191  15C8  01A5               	clrf	Flash_Memory_Modify@i
 11192  15C9  3020               	movlw	32
 11193  15CA  0225               	subwf	Flash_Memory_Modify@i,w
 11194  15CB  1803               	btfsc	3,0
 11195  15CC  2DE2               	goto	l8689
 11196  15CD                     l8683:	
 11197                           
 11198                           ;MCU_B1.c: 862: Memory.Data[i] = Flash_Memory_Read(i);
 11199  15CD  0825               	movf	Flash_Memory_Modify@i,w
 11200  15CE  3191  214A  3195   	fcall	_Flash_Memory_Read
 11201  15D1  0020               	movlb	0	; select bank0
 11202  15D2  00A4               	movwf	??_Flash_Memory_Modify
 11203  15D3  0825               	movf	Flash_Memory_Modify@i,w
 11204  15D4  3E3D               	addlw	_Memory& (0+255)
 11205  15D5  0086               	movwf	6
 11206  15D6  3001               	movlw	1	; select bank2/3
 11207  15D7  0087               	movwf	7
 11208  15D8  0824               	movf	??_Flash_Memory_Modify,w
 11209  15D9  0081               	movwf	1
 11210  15DA  3001               	movlw	1
 11211  15DB  00A4               	movwf	??_Flash_Memory_Modify
 11212  15DC  0824               	movf	??_Flash_Memory_Modify,w
 11213  15DD  07A5               	addwf	Flash_Memory_Modify@i,f
 11214  15DE  3020               	movlw	32
 11215  15DF  0225               	subwf	Flash_Memory_Modify@i,w
 11216  15E0  1C03               	skipc
 11217  15E1  2DCD               	goto	l8683
 11218  15E2                     l8689:	
 11219                           
 11220                           ;MCU_B1.c: 863: }
 11221                           ;MCU_B1.c: 864: Memory.Data[0]=product->Data[12];
 11222  15E2  086E               	movf	_product,w
 11223  15E3  0086               	movwf	6
 11224  15E4  3001               	movlw	1	; select bank2/3
 11225  15E5  0087               	movwf	7
 11226  15E6  3001               	movlw	1	; select bank2/3
 11227  15E7  3F4C               	moviw [12]fsr1
 11228  15E8  0022               	movlb	2	; select bank2
 11229  15E9  00BD               	movwf	_Memory^(0+256)
 11230                           
 11231                           ;MCU_B1.c: 865: Memory.Data[1]=product->Data[13];
 11232  15EA  0020               	movlb	0	; select bank0
 11233  15EB  086E               	movf	_product,w
 11234  15EC  0086               	movwf	6
 11235  15ED  3001               	movlw	1	; select bank2/3
 11236  15EE  0087               	movwf	7
 11237  15EF  3001               	movlw	1	; select bank2/3
 11238  15F0  3F4D               	moviw [13]fsr1
 11239  15F1  0022               	movlb	2	; select bank2
 11240  15F2  00BE               	movwf	(_Memory^(0+256)+1)
 11241                           
 11242                           ;MCU_B1.c: 866: Memory.Data[2]=product->Data[14];
 11243  15F3  0020               	movlb	0	; select bank0
 11244  15F4  086E               	movf	_product,w
 11245  15F5  0086               	movwf	6
 11246  15F6  3001               	movlw	1	; select bank2/3
 11247  15F7  0087               	movwf	7
 11248  15F8  3001               	movlw	1	; select bank2/3
 11249  15F9  3F4E               	moviw [14]fsr1
 11250  15FA  0022               	movlb	2	; select bank2
 11251  15FB  00BF               	movwf	(_Memory^(0+256)+2)
 11252                           
 11253                           ;MCU_B1.c: 872: if (Memory.LoopSave == 1) {
 11254  15FC  1D61               	btfss	(_Memory^(0+256)+36),2
 11255  15FD  2E02               	goto	l1256
 11256                           
 11257                           ;MCU_B1.c: 873: Memory.LoopSave = 0;
 11258  15FE  1161               	bcf	(_Memory^(0+256)+36),2
 11259                           
 11260                           ;MCU_B1.c: 874: myMain.FirstOpen = 0;
 11261  15FF  0021               	movlb	1	; select bank1
 11262  1600  12A0               	bcf	_myMain^(0+128),5
 11263                           
 11264                           ;MCU_B1.c: 875: myMain.First = 0;
 11265  1601  13A0               	bcf	_myMain^(0+128),7
 11266  1602                     l1256:	
 11267                           
 11268                           ;MCU_B1.c: 877: }
 11269                           ;MCU_B1.c: 878: GIE = 0;
 11270  1602  138B               	bcf	11,7	;volatile
 11271                           
 11272                           ;MCU_B1.c: 879: Flash_Memory_Erasing();
 11273  1603  319E  26EF  3195   	fcall	_Flash_Memory_Erasing
 11274                           
 11275                           ;MCU_B1.c: 880: Flash_Memory_Write();
 11276  1606  3193  23D0         	fcall	_Flash_Memory_Write
 11277                           
 11278                           ;MCU_B1.c: 881: GIE = 1;
 11279  1608  178B               	bsf	11,7	;volatile
 11280  1609  0008               	return
 11281  160A                     __end_of_Flash_Memory_Modify:	
 11282                           
 11283                           	psect	text70
 11284  1EEF                     __ptext70:	
 11285 ;; *************** function _Flash_Memory_Erasing *****************
 11286 ;; Defined at:
 11287 ;;		line 848 in file "../src/MCU_B1.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;		None
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;		None               void
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0, pclath, cstack
 11296 ;; Tracked objects:
 11297 ;;		On entry : 0/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11304 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11305 ;;Total ram usage:        0 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    6
 11308 ;; This function calls:
 11309 ;;		_Flash_Memory_Unlock
 11310 ;; This function is called by:
 11311 ;;		_Flash_Memory_Modify
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _Flash_Memory_Erasing
 11317  1EEF                     _Flash_Memory_Erasing:	
 11318                           
 11319                           ;MCU_B1.c: 849: CFGS = 0;
 11320                           
 11321                           ;incstack = 0
 11322                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11323  1EEF  0023               	movlb	3	; select bank3
 11324  1EF0  1315               	bcf	21,6	;volatile
 11325                           
 11326                           ;MCU_B1.c: 850: PMADRH = 0x30;
 11327  1EF1  3030               	movlw	48
 11328  1EF2  0092               	movwf	18	;volatile
 11329                           
 11330                           ;MCU_B1.c: 851: PMADRL = 0x00;
 11331  1EF3  0191               	clrf	17	;volatile
 11332                           
 11333                           ;MCU_B1.c: 852: FREE = 1;
 11334  1EF4  1615               	bsf	21,4	;volatile
 11335                           
 11336                           ;MCU_B1.c: 853: WREN = 1;
 11337  1EF5  1515               	bsf	21,2	;volatile
 11338                           
 11339                           ;MCU_B1.c: 854: Flash_Memory_Unlock();
 11340  1EF6  319E  267B         	fcall	_Flash_Memory_Unlock
 11341                           
 11342                           ;MCU_B1.c: 855: WREN = 0;
 11343  1EF8  0023               	movlb	3	; select bank3
 11344  1EF9  1115               	bcf	21,2	;volatile
 11345  1EFA  0008               	return
 11346  1EFB                     __end_of_Flash_Memory_Erasing:	
 11347                           
 11348                           	psect	text71
 11349  0422                     __ptext71:	
 11350 ;; *************** function _Flash_Memory_Initialization *****************
 11351 ;; Defined at:
 11352 ;;		line 749 in file "../src/MCU_B1.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;		None
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  i               1   62[BANK0 ] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;		None               void
 11359 ;; Registers used:
 11360 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        2 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    8
 11373 ;; This function calls:
 11374 ;;		_Flash_Memory_Read
 11375 ;;		_Flash_Memory_Write
 11376 ;;		_setPercentValue
 11377 ;; This function is called by:
 11378 ;;		_main
 11379 ;; This function uses a non-reentrant model
 11380 ;;
 11381                           
 11382                           
 11383                           ;psect for function _Flash_Memory_Initialization
 11384  0422                     _Flash_Memory_Initialization:	
 11385                           
 11386                           ;MCU_B1.c: 750: char i = 0;
 11387                           
 11388                           ;incstack = 0
 11389                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11390  0422  0020               	movlb	0	; select bank0
 11391  0423  01DE               	clrf	Flash_Memory_Initialization@i
 11392                           
 11393                           ;MCU_B1.c: 751: if (Flash_Memory_Read(31) == 0xaa) {
 11394  0424  301F               	movlw	31
 11395  0425  3191  214A  3184   	fcall	_Flash_Memory_Read
 11396  0428  3AAA               	xorlw	170
 11397  0429  1D03               	skipz
 11398  042A  2C94               	goto	l9067
 11399                           
 11400                           ;MCU_B1.c: 752: product->Data[12] = Flash_Memory_Read(0);
 11401  042B  3000               	movlw	0
 11402  042C  3191  214A  3184   	fcall	_Flash_Memory_Read
 11403  042F  0020               	movlb	0	; select bank0
 11404  0430  00DD               	movwf	??_Flash_Memory_Initialization
 11405  0431  086E               	movf	_product,w
 11406  0432  3E0C               	addlw	12
 11407  0433  0086               	movwf	6
 11408  0434  3001               	movlw	1	; select bank2/3
 11409  0435  0087               	movwf	7
 11410  0436  085D               	movf	??_Flash_Memory_Initialization,w
 11411  0437  0081               	movwf	1
 11412                           
 11413                           ;MCU_B1.c: 753: product->Data[13] = Flash_Memory_Read(1);
 11414  0438  3001               	movlw	1
 11415  0439  3191  214A  3184   	fcall	_Flash_Memory_Read
 11416  043C  0020               	movlb	0	; select bank0
 11417  043D  00DD               	movwf	??_Flash_Memory_Initialization
 11418  043E  086E               	movf	_product,w
 11419  043F  3E0D               	addlw	13
 11420  0440  0086               	movwf	6
 11421  0441  3001               	movlw	1	; select bank2/3
 11422  0442  0087               	movwf	7
 11423  0443  085D               	movf	??_Flash_Memory_Initialization,w
 11424  0444  0081               	movwf	1
 11425                           
 11426                           ;MCU_B1.c: 754: product->Data[14] = Flash_Memory_Read(2);
 11427  0445  3002               	movlw	2
 11428  0446  3191  214A  3184   	fcall	_Flash_Memory_Read
 11429  0449  0020               	movlb	0	; select bank0
 11430  044A  00DD               	movwf	??_Flash_Memory_Initialization
 11431  044B  086E               	movf	_product,w
 11432  044C  3E0E               	addlw	14
 11433  044D  0086               	movwf	6
 11434  044E  3001               	movlw	1	; select bank2/3
 11435  044F  0087               	movwf	7
 11436  0450  085D               	movf	??_Flash_Memory_Initialization,w
 11437  0451  0081               	movwf	1
 11438                           
 11439                           ;MCU_B1.c: 760: i = setPercentValue(((char)((100-60)*0.8)));
 11440  0452  3020               	movlw	32
 11441  0453  3196  264E  3184   	fcall	_setPercentValue
 11442  0456  0020               	movlb	0	; select bank0
 11443  0457  00DD               	movwf	??_Flash_Memory_Initialization
 11444  0458  085D               	movf	??_Flash_Memory_Initialization,w
 11445  0459  00DE               	movwf	Flash_Memory_Initialization@i
 11446                           
 11447                           ;MCU_B1.c: 761: product->Data[21] = i;
 11448  045A  085E               	movf	Flash_Memory_Initialization@i,w
 11449  045B  00DD               	movwf	??_Flash_Memory_Initialization
 11450  045C  086E               	movf	_product,w
 11451  045D  3E15               	addlw	21
 11452  045E  0086               	movwf	6
 11453  045F  3001               	movlw	1	; select bank2/3
 11454  0460  0087               	movwf	7
 11455  0461  085D               	movf	??_Flash_Memory_Initialization,w
 11456  0462  0081               	movwf	1
 11457                           
 11458                           ;MCU_B1.c: 762: product->Data[22] = i;
 11459  0463  085E               	movf	Flash_Memory_Initialization@i,w
 11460  0464  00DD               	movwf	??_Flash_Memory_Initialization
 11461  0465  086E               	movf	_product,w
 11462  0466  3E16               	addlw	22
 11463  0467  0086               	movwf	6
 11464  0468  3001               	movlw	1	; select bank2/3
 11465  0469  0087               	movwf	7
 11466  046A  085D               	movf	??_Flash_Memory_Initialization,w
 11467  046B  0081               	movwf	1
 11468                           
 11469                           ;MCU_B1.c: 763: product->Data[23] = i;
 11470  046C  085E               	movf	Flash_Memory_Initialization@i,w
 11471  046D  00DD               	movwf	??_Flash_Memory_Initialization
 11472  046E  086E               	movf	_product,w
 11473  046F  3E17               	addlw	23
 11474  0470  0086               	movwf	6
 11475  0471  3001               	movlw	1	; select bank2/3
 11476  0472  0087               	movwf	7
 11477  0473  085D               	movf	??_Flash_Memory_Initialization,w
 11478  0474  0081               	movwf	1
 11479                           
 11480                           ;MCU_B1.c: 765: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11481  0475  086E               	movf	_product,w
 11482  0476  3E0C               	addlw	12
 11483  0477  0086               	movwf	6
 11484  0478  3001               	movlw	1	; select bank2/3
 11485  0479  0087               	movwf	7
 11486  047A  0801               	movf	1,w
 11487  047B  3AFF               	xorlw	255
 11488  047C  1D03               	skipz
 11489  047D  0008               	return
 11490  047E  086E               	movf	_product,w
 11491  047F  3E0D               	addlw	13
 11492  0480  0086               	movwf	6
 11493  0481  3001               	movlw	1	; select bank2/3
 11494  0482  0087               	movwf	7
 11495  0483  0801               	movf	1,w
 11496  0484  3AFF               	xorlw	255
 11497  0485  1D03               	skipz
 11498  0486  0008               	return
 11499  0487  086E               	movf	_product,w
 11500  0488  3E0E               	addlw	14
 11501  0489  0086               	movwf	6
 11502  048A  3001               	movlw	1	; select bank2/3
 11503  048B  0087               	movwf	7
 11504  048C  0801               	movf	1,w
 11505  048D  3AFF               	xorlw	255
 11506  048E  1D03               	skipz
 11507  048F  0008               	return
 11508                           
 11509                           ;MCU_B1.c: 766: myMain.FirstOpen = 1;
 11510  0490  0021               	movlb	1	; select bank1
 11511  0491  16A0               	bsf	_myMain^(0+128),5
 11512                           
 11513                           ;MCU_B1.c: 767: myMain.First = 1;
 11514  0492  17A0               	bsf	_myMain^(0+128),7
 11515                           
 11516                           ;MCU_B1.c: 768: }
 11517                           ;MCU_B1.c: 769: } else {
 11518  0493  0008               	return
 11519  0494                     l9067:	
 11520                           
 11521                           ;MCU_B1.c: 770: i = setPercentValue(((char)((100-60)*0.8)));
 11522  0494  3020               	movlw	32
 11523  0495  3196  264E  3184   	fcall	_setPercentValue
 11524  0498  0020               	movlb	0	; select bank0
 11525  0499  00DD               	movwf	??_Flash_Memory_Initialization
 11526  049A  085D               	movf	??_Flash_Memory_Initialization,w
 11527  049B  00DE               	movwf	Flash_Memory_Initialization@i
 11528                           
 11529                           ;MCU_B1.c: 771: Memory.Data[0]=0xff;
 11530  049C  30FF               	movlw	255
 11531  049D  00DD               	movwf	??_Flash_Memory_Initialization
 11532  049E  085D               	movf	??_Flash_Memory_Initialization,w
 11533  049F  0022               	movlb	2	; select bank2
 11534  04A0  00BD               	movwf	_Memory^(0+256)
 11535                           
 11536                           ;MCU_B1.c: 772: Memory.Data[1]=0xff;
 11537  04A1  30FF               	movlw	255
 11538  04A2  0020               	movlb	0	; select bank0
 11539  04A3  00DD               	movwf	??_Flash_Memory_Initialization
 11540  04A4  085D               	movf	??_Flash_Memory_Initialization,w
 11541  04A5  0022               	movlb	2	; select bank2
 11542  04A6  00BE               	movwf	(_Memory^(0+256)+1)
 11543                           
 11544                           ;MCU_B1.c: 773: Memory.Data[2]=0xff;
 11545  04A7  30FF               	movlw	255
 11546  04A8  0020               	movlb	0	; select bank0
 11547  04A9  00DD               	movwf	??_Flash_Memory_Initialization
 11548  04AA  085D               	movf	??_Flash_Memory_Initialization,w
 11549  04AB  0022               	movlb	2	; select bank2
 11550  04AC  00BF               	movwf	(_Memory^(0+256)+2)
 11551                           
 11552                           ;MCU_B1.c: 774: Memory.Data[3]=0xff;
 11553  04AD  30FF               	movlw	255
 11554  04AE  0020               	movlb	0	; select bank0
 11555  04AF  00DD               	movwf	??_Flash_Memory_Initialization
 11556  04B0  085D               	movf	??_Flash_Memory_Initialization,w
 11557  04B1  0022               	movlb	2	; select bank2
 11558  04B2  00C0               	movwf	(_Memory^(0+256)+3)
 11559                           
 11560                           ;MCU_B1.c: 775: Memory.Data[4]=0xff;
 11561  04B3  30FF               	movlw	255
 11562  04B4  0020               	movlb	0	; select bank0
 11563  04B5  00DD               	movwf	??_Flash_Memory_Initialization
 11564  04B6  085D               	movf	??_Flash_Memory_Initialization,w
 11565  04B7  0022               	movlb	2	; select bank2
 11566  04B8  00C1               	movwf	(_Memory^(0+256)+4)
 11567                           
 11568                           ;MCU_B1.c: 776: Memory.Data[5]=0xff;
 11569  04B9  30FF               	movlw	255
 11570  04BA  0020               	movlb	0	; select bank0
 11571  04BB  00DD               	movwf	??_Flash_Memory_Initialization
 11572  04BC  085D               	movf	??_Flash_Memory_Initialization,w
 11573  04BD  0022               	movlb	2	; select bank2
 11574  04BE  00C2               	movwf	(_Memory^(0+256)+5)
 11575                           
 11576                           ;MCU_B1.c: 777: Memory.Data[31]=0xaa;
 11577  04BF  30AA               	movlw	170
 11578  04C0  0020               	movlb	0	; select bank0
 11579  04C1  00DD               	movwf	??_Flash_Memory_Initialization
 11580  04C2  085D               	movf	??_Flash_Memory_Initialization,w
 11581  04C3  0022               	movlb	2	; select bank2
 11582  04C4  00DC               	movwf	(_Memory^(0+256)+31)
 11583                           
 11584                           ;MCU_B1.c: 778: product->Data[21] = i;
 11585  04C5  0020               	movlb	0	; select bank0
 11586  04C6  085E               	movf	Flash_Memory_Initialization@i,w
 11587  04C7  00DD               	movwf	??_Flash_Memory_Initialization
 11588  04C8  086E               	movf	_product,w
 11589  04C9  3E15               	addlw	21
 11590  04CA  0086               	movwf	6
 11591  04CB  3001               	movlw	1	; select bank2/3
 11592  04CC  0087               	movwf	7
 11593  04CD  085D               	movf	??_Flash_Memory_Initialization,w
 11594  04CE  0081               	movwf	1
 11595                           
 11596                           ;MCU_B1.c: 779: product->Data[22] = i;
 11597  04CF  085E               	movf	Flash_Memory_Initialization@i,w
 11598  04D0  00DD               	movwf	??_Flash_Memory_Initialization
 11599  04D1  086E               	movf	_product,w
 11600  04D2  3E16               	addlw	22
 11601  04D3  0086               	movwf	6
 11602  04D4  3001               	movlw	1	; select bank2/3
 11603  04D5  0087               	movwf	7
 11604  04D6  085D               	movf	??_Flash_Memory_Initialization,w
 11605  04D7  0081               	movwf	1
 11606                           
 11607                           ;MCU_B1.c: 780: product->Data[23] = i;
 11608  04D8  085E               	movf	Flash_Memory_Initialization@i,w
 11609  04D9  00DD               	movwf	??_Flash_Memory_Initialization
 11610  04DA  086E               	movf	_product,w
 11611  04DB  3E17               	addlw	23
 11612  04DC  0086               	movwf	6
 11613  04DD  3001               	movlw	1	; select bank2/3
 11614  04DE  0087               	movwf	7
 11615  04DF  085D               	movf	??_Flash_Memory_Initialization,w
 11616  04E0  0081               	movwf	1
 11617                           
 11618                           ;MCU_B1.c: 781: GIE = 0;
 11619  04E1  138B               	bcf	11,7	;volatile
 11620                           
 11621                           ;MCU_B1.c: 782: Flash_Memory_Write();
 11622  04E2  3193  23D0         	fcall	_Flash_Memory_Write
 11623                           
 11624                           ;MCU_B1.c: 783: GIE = 1;
 11625  04E4  178B               	bsf	11,7	;volatile
 11626                           
 11627                           ;MCU_B1.c: 784: myMain.FirstOpen = 1;
 11628  04E5  0021               	movlb	1	; select bank1
 11629  04E6  16A0               	bsf	_myMain^(0+128),5
 11630                           
 11631                           ;MCU_B1.c: 785: myMain.First = 1;
 11632  04E7  17A0               	bsf	_myMain^(0+128),7
 11633  04E8  0008               	return
 11634  04E9                     __end_of_Flash_Memory_Initialization:	
 11635                           
 11636                           	psect	text72
 11637  13D0                     __ptext72:	
 11638 ;; *************** function _Flash_Memory_Write *****************
 11639 ;; Defined at:
 11640 ;;		line 829 in file "../src/MCU_B1.c"
 11641 ;; Parameters:    Size  Location     Type
 11642 ;;		None
 11643 ;; Auto vars:     Size  Location     Type
 11644 ;;  i               1    1[BANK0 ] unsigned char 
 11645 ;; Return value:  Size  Location     Type
 11646 ;;		None               void
 11647 ;; Registers used:
 11648 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11649 ;; Tracked objects:
 11650 ;;		On entry : 0/0
 11651 ;;		On exit  : 0/0
 11652 ;;		Unchanged: 0/0
 11653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11656 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11658 ;;Total ram usage:        2 bytes
 11659 ;; Hardware stack levels used:    1
 11660 ;; Hardware stack levels required when called:    6
 11661 ;; This function calls:
 11662 ;;		_Flash_Memory_Unlock
 11663 ;; This function is called by:
 11664 ;;		_Flash_Memory_Initialization
 11665 ;;		_Flash_Memory_Modify
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           
 11670                           ;psect for function _Flash_Memory_Write
 11671  13D0                     _Flash_Memory_Write:	
 11672                           
 11673                           ;MCU_B1.c: 830: char i = 0;
 11674                           
 11675                           ;incstack = 0
 11676                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11677  13D0  0020               	movlb	0	; select bank0
 11678  13D1  01A1               	clrf	Flash_Memory_Write@i
 11679                           
 11680                           ;MCU_B1.c: 831: CFGS = 0;
 11681  13D2  0023               	movlb	3	; select bank3
 11682  13D3  1315               	bcf	21,6	;volatile
 11683                           
 11684                           ;MCU_B1.c: 832: PMADRH = 0x30;
 11685  13D4  3030               	movlw	48
 11686  13D5  0092               	movwf	18	;volatile
 11687                           
 11688                           ;MCU_B1.c: 833: PMDATH = 0;
 11689  13D6  0194               	clrf	20	;volatile
 11690                           
 11691                           ;MCU_B1.c: 834: FREE = 0;
 11692  13D7  1215               	bcf	21,4	;volatile
 11693                           
 11694                           ;MCU_B1.c: 835: LWLO = 1;
 11695  13D8  1695               	bsf	21,5	;volatile
 11696                           
 11697                           ;MCU_B1.c: 836: WREN = 1;
 11698  13D9  1515               	bsf	21,2	;volatile
 11699                           
 11700                           ;MCU_B1.c: 837: for (i = 0; i < 32; i++) {
 11701  13DA  0020               	movlb	0	; select bank0
 11702  13DB  01A1               	clrf	Flash_Memory_Write@i
 11703  13DC  3020               	movlw	32
 11704  13DD  0221               	subwf	Flash_Memory_Write@i,w
 11705  13DE  1803               	btfsc	3,0
 11706  13DF  2BF8               	goto	l1247
 11707  13E0                     l8271:	
 11708                           
 11709                           ;MCU_B1.c: 838: PMADRL = i;
 11710  13E0  0821               	movf	Flash_Memory_Write@i,w
 11711  13E1  0023               	movlb	3	; select bank3
 11712  13E2  0091               	movwf	17	;volatile
 11713                           
 11714                           ;MCU_B1.c: 839: PMDATL = Memory.Data[i];
 11715  13E3  0020               	movlb	0	; select bank0
 11716  13E4  0821               	movf	Flash_Memory_Write@i,w
 11717  13E5  3E3D               	addlw	_Memory& (0+255)
 11718  13E6  0086               	movwf	6
 11719  13E7  3001               	movlw	1	; select bank2/3
 11720  13E8  0087               	movwf	7
 11721  13E9  0801               	movf	1,w
 11722  13EA  0023               	movlb	3	; select bank3
 11723  13EB  0093               	movwf	19	;volatile
 11724                           
 11725                           ;MCU_B1.c: 840: Flash_Memory_Unlock();
 11726  13EC  319E  267B  3193   	fcall	_Flash_Memory_Unlock
 11727  13EF  3001               	movlw	1
 11728  13F0  0020               	movlb	0	; select bank0
 11729  13F1  00A0               	movwf	??_Flash_Memory_Write
 11730  13F2  0820               	movf	??_Flash_Memory_Write,w
 11731  13F3  07A1               	addwf	Flash_Memory_Write@i,f
 11732  13F4  3020               	movlw	32
 11733  13F5  0221               	subwf	Flash_Memory_Write@i,w
 11734  13F6  1C03               	skipc
 11735  13F7  2BE0               	goto	l8271
 11736  13F8                     l1247:	
 11737                           
 11738                           ;MCU_B1.c: 841: }
 11739                           ;MCU_B1.c: 842: LWLO = 0;
 11740  13F8  0023               	movlb	3	; select bank3
 11741  13F9  1295               	bcf	21,5	;volatile
 11742                           
 11743                           ;MCU_B1.c: 843: Flash_Memory_Unlock();
 11744  13FA  319E  267B         	fcall	_Flash_Memory_Unlock
 11745                           
 11746                           ;MCU_B1.c: 844: WREN = 0;
 11747  13FC  0023               	movlb	3	; select bank3
 11748  13FD  1115               	bcf	21,2	;volatile
 11749  13FE  0008               	return
 11750  13FF                     __end_of_Flash_Memory_Write:	
 11751                           
 11752                           	psect	text73
 11753  1E7B                     __ptext73:	
 11754 ;; *************** function _Flash_Memory_Unlock *****************
 11755 ;; Defined at:
 11756 ;;		line 808 in file "../src/MCU_B1.c"
 11757 ;; Parameters:    Size  Location     Type
 11758 ;;		None
 11759 ;; Auto vars:     Size  Location     Type
 11760 ;;		None
 11761 ;; Return value:  Size  Location     Type
 11762 ;;		None               void
 11763 ;; Registers used:
 11764 ;;		wreg
 11765 ;; Tracked objects:
 11766 ;;		On entry : 0/0
 11767 ;;		On exit  : 0/0
 11768 ;;		Unchanged: 0/0
 11769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;Total ram usage:        0 bytes
 11775 ;; Hardware stack levels used:    1
 11776 ;; Hardware stack levels required when called:    5
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		_Flash_Memory_Write
 11781 ;;		_Flash_Memory_Erasing
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _Flash_Memory_Unlock
 11787  1E7B                     _Flash_Memory_Unlock:	
 11788                           
 11789                           ;MCU_B1.c: 809: PMCON2 = 0x55;
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 11793  1E7B  3055               	movlw	85
 11794  1E7C  0023               	movlb	3	; select bank3
 11795  1E7D  0096               	movwf	22	;volatile
 11796                           
 11797                           ;MCU_B1.c: 810: PMCON2 = 0xaa;
 11798  1E7E  30AA               	movlw	170
 11799  1E7F  0096               	movwf	22	;volatile
 11800                           
 11801                           ;MCU_B1.c: 811: WR = 1;
 11802  1E80  1495               	bsf	21,1	;volatile
 11803                           
 11804                           ;MCU_B1.c: 812: __nop();
 11805  1E81  0000               	nop
 11806                           
 11807                           ;MCU_B1.c: 813: __nop();
 11808  1E82  0000               	nop
 11809  1E83  0008               	return
 11810  1E84                     __end_of_Flash_Memory_Unlock:	
 11811                           
 11812                           	psect	text74
 11813  114A                     __ptext74:	
 11814 ;; *************** function _Flash_Memory_Read *****************
 11815 ;; Defined at:
 11816 ;;		line 817 in file "../src/MCU_B1.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;  address         1    wreg     unsigned char 
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;  address         1    2[BANK0 ] unsigned char 
 11821 ;;  ret             1    3[BANK0 ] unsigned char 
 11822 ;;  i               1    1[BANK0 ] unsigned char 
 11823 ;; Return value:  Size  Location     Type
 11824 ;;                  1    wreg      unsigned char 
 11825 ;; Registers used:
 11826 ;;		wreg, status,2
 11827 ;; Tracked objects:
 11828 ;;		On entry : 0/0
 11829 ;;		On exit  : 0/0
 11830 ;;		Unchanged: 0/0
 11831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11836 ;;Total ram usage:        4 bytes
 11837 ;; Hardware stack levels used:    1
 11838 ;; Hardware stack levels required when called:    5
 11839 ;; This function calls:
 11840 ;;		Nothing
 11841 ;; This function is called by:
 11842 ;;		_Flash_Memory_Initialization
 11843 ;;		_Flash_Memory_Modify
 11844 ;; This function uses a non-reentrant model
 11845 ;;
 11846                           
 11847                           
 11848                           ;psect for function _Flash_Memory_Read
 11849  114A                     _Flash_Memory_Read:	
 11850                           
 11851                           ;incstack = 0
 11852                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 11853                           ;Flash_Memory_Read@address stored from wreg
 11854  114A  0020               	movlb	0	; select bank0
 11855  114B  00A2               	movwf	Flash_Memory_Read@address
 11856                           
 11857                           ;MCU_B1.c: 818: char i = 0, ret = 0;
 11858  114C  01A1               	clrf	Flash_Memory_Read@i
 11859  114D  01A3               	clrf	Flash_Memory_Read@ret
 11860                           
 11861                           ;MCU_B1.c: 819: PMADRH = 0x30;
 11862  114E  3030               	movlw	48
 11863  114F  0023               	movlb	3	; select bank3
 11864  1150  0092               	movwf	18	;volatile
 11865                           
 11866                           ;MCU_B1.c: 820: PMADRL = address;
 11867  1151  0020               	movlb	0	; select bank0
 11868  1152  0822               	movf	Flash_Memory_Read@address,w
 11869  1153  0023               	movlb	3	; select bank3
 11870  1154  0091               	movwf	17	;volatile
 11871                           
 11872                           ;MCU_B1.c: 821: CFGS = 0;
 11873  1155  1315               	bcf	21,6	;volatile
 11874                           
 11875                           ;MCU_B1.c: 822: RD = 1;
 11876  1156  1415               	bsf	21,0	;volatile
 11877                           
 11878                           ;MCU_B1.c: 823: i = PMDATH;
 11879  1157  0814               	movf	20,w	;volatile
 11880  1158  0020               	movlb	0	; select bank0
 11881  1159  00A0               	movwf	??_Flash_Memory_Read
 11882  115A  0820               	movf	??_Flash_Memory_Read,w
 11883  115B  00A1               	movwf	Flash_Memory_Read@i
 11884                           
 11885                           ;MCU_B1.c: 824: ret = PMDATL;
 11886  115C  0023               	movlb	3	; select bank3
 11887  115D  0813               	movf	19,w	;volatile
 11888  115E  0020               	movlb	0	; select bank0
 11889  115F  00A0               	movwf	??_Flash_Memory_Read
 11890  1160  0820               	movf	??_Flash_Memory_Read,w
 11891  1161  00A3               	movwf	Flash_Memory_Read@ret
 11892                           
 11893                           ;MCU_B1.c: 825: return ret;
 11894  1162  0823               	movf	Flash_Memory_Read@ret,w
 11895  1163  0008               	return
 11896  1164                     __end_of_Flash_Memory_Read:	
 11897                           
 11898                           	psect	text75
 11899  1E3E                     __ptext75:	
 11900 ;; *************** function _DimmerLights_Main *****************
 11901 ;; Defined at:
 11902 ;;		line 418 in file "../src/Dimmer_B1.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;		None               void
 11909 ;; Registers used:
 11910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:   11
 11923 ;; This function calls:
 11924 ;;		_DimmerLights_Close
 11925 ;;		_setDimmerLights_Main
 11926 ;; This function is called by:
 11927 ;;		_main
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _DimmerLights_Main
 11933  1E3E                     _DimmerLights_Main:	
 11934                           
 11935                           ;Dimmer_B1.c: 421: setDimmerLights_Main(1);
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11939  1E3E  3001               	movlw	1
 11940  1E3F  3189  2194  319E   	fcall	_setDimmerLights_Main
 11941                           
 11942                           ;Dimmer_B1.c: 432: DimmerLights_Close();
 11943  1E42  3190  209A         	fcall	_DimmerLights_Close
 11944  1E44  0008               	return
 11945  1E45                     __end_of_DimmerLights_Main:	
 11946                           
 11947                           	psect	text76
 11948  0994                     __ptext76:	
 11949 ;; *************** function _setDimmerLights_Main *****************
 11950 ;; Defined at:
 11951 ;;		line 436 in file "../src/Dimmer_B1.c"
 11952 ;; Parameters:    Size  Location     Type
 11953 ;;  lights          1    wreg     unsigned char 
 11954 ;; Auto vars:     Size  Location     Type
 11955 ;;  lights          1   70[BANK0 ] unsigned char 
 11956 ;;  clear           1   69[BANK0 ] unsigned char 
 11957 ;; Return value:  Size  Location     Type
 11958 ;;		None               void
 11959 ;; Registers used:
 11960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11961 ;; Tracked objects:
 11962 ;;		On entry : 0/0
 11963 ;;		On exit  : 0/0
 11964 ;;		Unchanged: 0/0
 11965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;Total ram usage:        2 bytes
 11971 ;; Hardware stack levels used:    1
 11972 ;; Hardware stack levels required when called:   10
 11973 ;; This function calls:
 11974 ;;		_DimmerLightsPointSelect
 11975 ;;		_setBuz
 11976 ;;		_setDimmerLights
 11977 ;;		_setDimmerLights_Adj
 11978 ;; This function is called by:
 11979 ;;		_DimmerLights_Main
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           
 11984                           ;psect for function _setDimmerLights_Main
 11985  0994                     _setDimmerLights_Main:	
 11986                           
 11987                           ;incstack = 0
 11988                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11989                           ;setDimmerLights_Main@lights stored from wreg
 11990  0994  0020               	movlb	0	; select bank0
 11991  0995  00E6               	movwf	setDimmerLights_Main@lights
 11992                           
 11993                           ;Dimmer_B1.c: 437: char clear = 1;
 11994  0996  01E5               	clrf	setDimmerLights_Main@clear
 11995  0997  0AE5               	incf	setDimmerLights_Main@clear,f
 11996                           
 11997                           ;Dimmer_B1.c: 438: DimmerLightsPointSelect(lights);
 11998  0998  0866               	movf	setDimmerLights_Main@lights,w
 11999  0999  319E  26B6  3189   	fcall	_DimmerLightsPointSelect
 12000                           
 12001                           ;Dimmer_B1.c: 458: if (DimmerLights->Trigger == 1) {
 12002  099C  0020               	movlb	0	; select bank0
 12003  099D  086C               	movf	_DimmerLights,w
 12004  099E  3E08               	addlw	8
 12005  099F  0086               	movwf	6
 12006  09A0  3001               	movlw	1	; select bank2/3
 12007  09A1  0087               	movwf	7
 12008  09A2  1D01               	btfss	1,2
 12009  09A3  29C1               	goto	l8577
 12010                           
 12011                           ;Dimmer_B1.c: 459: if (clear == 1) {
 12012  09A4  0865               	movf	setDimmerLights_Main@clear,w
 12013  09A5  3A01               	xorlw	1
 12014  09A6  1D03               	skipz
 12015  09A7  0008               	return
 12016                           
 12017                           ;Dimmer_B1.c: 460: DimmerLights->Trigger = 0;
 12018  09A8  086C               	movf	_DimmerLights,w
 12019  09A9  3E08               	addlw	8
 12020  09AA  0086               	movwf	6
 12021  09AB  3001               	movlw	1	; select bank2/3
 12022  09AC  0087               	movwf	7
 12023  09AD  1101               	bcf	1,2
 12024                           
 12025                           ;Dimmer_B1.c: 461: if (DimmerLights->Switch == 1) {
 12026  09AE  086C               	movf	_DimmerLights,w
 12027  09AF  3E08               	addlw	8
 12028  09B0  0086               	movwf	6
 12029  09B1  3001               	movlw	1	; select bank2/3
 12030  09B2  0087               	movwf	7
 12031  09B3  1C81               	btfss	1,1
 12032  09B4  29BB               	goto	l8575
 12033                           
 12034                           ;Dimmer_B1.c: 462: setDimmerLights(lights, 1);
 12035  09B5  01A3               	clrf	setDimmerLights@status
 12036  09B6  0AA3               	incf	setDimmerLights@status,f
 12037  09B7  0866               	movf	setDimmerLights_Main@lights,w
 12038  09B8  318E  2674         	fcall	_setDimmerLights
 12039                           
 12040                           ;Dimmer_B1.c: 463: } else {
 12041  09BA  0008               	return
 12042  09BB                     l8575:	
 12043                           
 12044                           ;Dimmer_B1.c: 464: setDimmerLights(lights, 0);
 12045  09BB  0020               	movlb	0	; select bank0
 12046  09BC  01A3               	clrf	setDimmerLights@status
 12047  09BD  0866               	movf	setDimmerLights_Main@lights,w
 12048  09BE  318E  2674         	fcall	_setDimmerLights
 12049                           
 12050                           ;Dimmer_B1.c: 465: }
 12051                           ;Dimmer_B1.c: 469: }
 12052                           ;Dimmer_B1.c: 470: } else {
 12053  09C0  0008               	return
 12054  09C1                     l8577:	
 12055                           
 12056                           ;Dimmer_B1.c: 471: if (DimmerLights->TriggerAdj == 1) {
 12057  09C1  0020               	movlb	0	; select bank0
 12058  09C2  086C               	movf	_DimmerLights,w
 12059  09C3  3E08               	addlw	8
 12060  09C4  0086               	movwf	6
 12061  09C5  3001               	movlw	1	; select bank2/3
 12062  09C6  0087               	movwf	7
 12063  09C7  1E01               	btfss	1,4
 12064  09C8  0008               	return
 12065                           
 12066                           ;Dimmer_B1.c: 472: if (clear == 1) {
 12067  09C9  0865               	movf	setDimmerLights_Main@clear,w
 12068  09CA  3A01               	xorlw	1
 12069  09CB  1D03               	skipz
 12070  09CC  0008               	return
 12071                           
 12072                           ;Dimmer_B1.c: 473: DimmerLights->TriggerAdj = 0;
 12073  09CD  086C               	movf	_DimmerLights,w
 12074  09CE  3E08               	addlw	8
 12075  09CF  0086               	movwf	6
 12076  09D0  3001               	movlw	1	; select bank2/3
 12077  09D1  0087               	movwf	7
 12078  09D2  1201               	bcf	1,4
 12079                           
 12080                           ;Dimmer_B1.c: 474: if (DimmerLights->AdjGo == 1) {
 12081  09D3  086C               	movf	_DimmerLights,w
 12082  09D4  3E08               	addlw	8
 12083  09D5  0086               	movwf	6
 12084  09D6  3001               	movlw	1	; select bank2/3
 12085  09D7  0087               	movwf	7
 12086  09D8  1D81               	btfss	1,3
 12087  09D9  29E9               	goto	l8587
 12088                           
 12089                           ;Dimmer_B1.c: 475: setDimmerLights_Adj(lights, 1);
 12090  09DA  01E2               	clrf	setDimmerLights_Adj@status
 12091  09DB  0AE2               	incf	setDimmerLights_Adj@status,f
 12092  09DC  0866               	movf	setDimmerLights_Main@lights,w
 12093  09DD  3195  2506  3189   	fcall	_setDimmerLights_Adj
 12094                           
 12095                           ;Dimmer_B1.c: 476: setBuz(1, 100);
 12096  09E0  3064               	movlw	100
 12097  09E1  0020               	movlb	0	; select bank0
 12098  09E2  00A9               	movwf	setBuz@time
 12099  09E3  3000               	movlw	0
 12100  09E4  00AA               	movwf	setBuz@time+1
 12101  09E5  3001               	movlw	1
 12102  09E6  3189  213B         	fcall	_setBuz
 12103                           
 12104                           ;Dimmer_B1.c: 477: } else {
 12105  09E8  0008               	return
 12106  09E9                     l8587:	
 12107                           
 12108                           ;Dimmer_B1.c: 478: setDimmerLights_Adj(lights, 0);
 12109  09E9  0020               	movlb	0	; select bank0
 12110  09EA  01E2               	clrf	setDimmerLights_Adj@status
 12111  09EB  0866               	movf	setDimmerLights_Main@lights,w
 12112  09EC  3195  2506         	fcall	_setDimmerLights_Adj
 12113  09EE  0008               	return
 12114  09EF                     __end_of_setDimmerLights_Main:	
 12115                           
 12116                           	psect	text77
 12117  1506                     __ptext77:	
 12118 ;; *************** function _setDimmerLights_Adj *****************
 12119 ;; Defined at:
 12120 ;;		line 657 in file "../src/Dimmer_B1.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;  lights          1    wreg     unsigned char 
 12123 ;;  status          1   66[BANK0 ] unsigned char 
 12124 ;; Auto vars:     Size  Location     Type
 12125 ;;  lights          1   68[BANK0 ] unsigned char 
 12126 ;; Return value:  Size  Location     Type
 12127 ;;		None               void
 12128 ;; Registers used:
 12129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12130 ;; Tracked objects:
 12131 ;;		On entry : 0/0
 12132 ;;		On exit  : 0/0
 12133 ;;		Unchanged: 0/0
 12134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;Total ram usage:        3 bytes
 12140 ;; Hardware stack levels used:    1
 12141 ;; Hardware stack levels required when called:    9
 12142 ;; This function calls:
 12143 ;;		_DimmerLightsPointSelect
 12144 ;;		_setRF_DimmerLights
 12145 ;;		_setTxData
 12146 ;; This function is called by:
 12147 ;;		_setDimmerLights_Main
 12148 ;; This function uses a non-reentrant model
 12149 ;;
 12150                           
 12151                           
 12152                           ;psect for function _setDimmerLights_Adj
 12153  1506                     _setDimmerLights_Adj:	
 12154                           
 12155                           ;incstack = 0
 12156                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12157                           ;setDimmerLights_Adj@lights stored from wreg
 12158  1506  0020               	movlb	0	; select bank0
 12159  1507  00E4               	movwf	setDimmerLights_Adj@lights
 12160                           
 12161                           ;Dimmer_B1.c: 658: DimmerLightsPointSelect(lights);
 12162  1508  0864               	movf	setDimmerLights_Adj@lights,w
 12163  1509  319E  26B6  3195   	fcall	_DimmerLightsPointSelect
 12164                           
 12165                           ;Dimmer_B1.c: 659: if (status == 1) {
 12166  150C  0020               	movlb	0	; select bank0
 12167  150D  0862               	movf	setDimmerLights_Adj@status,w
 12168  150E  3A01               	xorlw	1
 12169  150F  1D03               	skipz
 12170  1510  2D1C               	goto	l8225
 12171                           
 12172                           ;Dimmer_B1.c: 660: DimmerLights->AdjFlag = 1;
 12173  1511  086C               	movf	_DimmerLights,w
 12174  1512  0086               	movwf	6
 12175  1513  3001               	movlw	1	; select bank2/3
 12176  1514  0087               	movwf	7
 12177  1515  1581               	bsf	1,3
 12178                           
 12179                           ;Dimmer_B1.c: 661: DimmerLights->Signal = 1;
 12180  1516  086C               	movf	_DimmerLights,w
 12181  1517  0086               	movwf	6
 12182  1518  3001               	movlw	1	; select bank2/3
 12183  1519  0087               	movwf	7
 12184  151A  1481               	bsf	1,1
 12185                           
 12186                           ;Dimmer_B1.c: 662: } else {
 12187  151B  0008               	return
 12188  151C                     l8225:	
 12189                           
 12190                           ;Dimmer_B1.c: 663: if (DimmerLights->AdjFlag == 1) {
 12191  151C  086C               	movf	_DimmerLights,w
 12192  151D  0086               	movwf	6
 12193  151E  3001               	movlw	1	; select bank2/3
 12194  151F  0087               	movwf	7
 12195  1520  1D81               	btfss	1,3
 12196  1521  0008               	return
 12197                           
 12198                           ;Dimmer_B1.c: 665: DimmerLights->Signal = 0;
 12199  1522  086C               	movf	_DimmerLights,w
 12200  1523  0086               	movwf	6
 12201  1524  3001               	movlw	1	; select bank2/3
 12202  1525  0087               	movwf	7
 12203  1526  1081               	bcf	1,1
 12204                           
 12205                           ;Dimmer_B1.c: 666: DimmerLights->AdjFlag = 0;
 12206  1527  086C               	movf	_DimmerLights,w
 12207  1528  0086               	movwf	6
 12208  1529  3001               	movlw	1	; select bank2/3
 12209  152A  0087               	movwf	7
 12210  152B  1181               	bcf	1,3
 12211                           
 12212                           ;Dimmer_B1.c: 667: ;;
 12213                           ;Dimmer_B1.c: 668: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12214  152C  086C               	movf	_DimmerLights,w
 12215  152D  3E04               	addlw	4
 12216  152E  0086               	movwf	6
 12217  152F  3001               	movlw	1	; select bank2/3
 12218  1530  0087               	movwf	7
 12219  1531  0801               	movf	1,w
 12220  1532  00E3               	movwf	??_setDimmerLights_Adj
 12221  1533  086C               	movf	_DimmerLights,w
 12222  1534  3E05               	addlw	5
 12223  1535  0086               	movwf	6
 12224  1536  3001               	movlw	1	; select bank2/3
 12225  1537  0087               	movwf	7
 12226  1538  0863               	movf	??_setDimmerLights_Adj,w
 12227  1539  0081               	movwf	1
 12228                           
 12229                           ;Dimmer_B1.c: 676: setRF_DimmerLights(lights, 1);
 12230  153A  01DD               	clrf	setRF_DimmerLights@on
 12231  153B  0ADD               	incf	setRF_DimmerLights@on,f
 12232  153C  0864               	movf	setDimmerLights_Adj@lights,w
 12233  153D  318C  24A1  3195   	fcall	_setRF_DimmerLights
 12234                           
 12235                           ;Dimmer_B1.c: 677: setTxData();
 12236  1540  3184  24E9         	fcall	_setTxData
 12237  1542  0008               	return
 12238  1543                     __end_of_setDimmerLights_Adj:	
 12239                           
 12240                           	psect	text78
 12241  0E74                     __ptext78:	
 12242 ;; *************** function _setDimmerLights *****************
 12243 ;; Defined at:
 12244 ;;		line 604 in file "../src/Dimmer_B1.c"
 12245 ;; Parameters:    Size  Location     Type
 12246 ;;  lights          1    wreg     unsigned char 
 12247 ;;  status          1    3[BANK0 ] unsigned char 
 12248 ;; Auto vars:     Size  Location     Type
 12249 ;;  lights          1    5[BANK0 ] unsigned char 
 12250 ;; Return value:  Size  Location     Type
 12251 ;;		None               void
 12252 ;; Registers used:
 12253 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12254 ;; Tracked objects:
 12255 ;;		On entry : 0/0
 12256 ;;		On exit  : 0/0
 12257 ;;		Unchanged: 0/0
 12258 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12259 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;Total ram usage:        3 bytes
 12264 ;; Hardware stack levels used:    1
 12265 ;; Hardware stack levels required when called:    7
 12266 ;; This function calls:
 12267 ;;		_DimmerLightsPointSelect
 12268 ;;		_setLED
 12269 ;;		_setMemory_GO
 12270 ;; This function is called by:
 12271 ;;		_setDimmerLights_Main
 12272 ;;		_setControl_Lights_Table
 12273 ;; This function uses a non-reentrant model
 12274 ;;
 12275                           
 12276                           
 12277                           ;psect for function _setDimmerLights
 12278  0E74                     _setDimmerLights:	
 12279                           
 12280                           ;incstack = 0
 12281                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12282                           ;setDimmerLights@lights stored from wreg
 12283  0E74  0020               	movlb	0	; select bank0
 12284  0E75  00A5               	movwf	setDimmerLights@lights
 12285                           
 12286                           ;Dimmer_B1.c: 605: DimmerLightsPointSelect(lights);
 12287  0E76  0825               	movf	setDimmerLights@lights,w
 12288  0E77  319E  26B6  318E   	fcall	_DimmerLightsPointSelect
 12289                           
 12290                           ;Dimmer_B1.c: 606: Dimmer->Load = lights;
 12291  0E7A  0020               	movlb	0	; select bank0
 12292  0E7B  0825               	movf	setDimmerLights@lights,w
 12293  0E7C  00A4               	movwf	??_setDimmerLights
 12294  0E7D  0A76               	incf	_Dimmer,w
 12295  0E7E  0086               	movwf	6
 12296  0E7F  0187               	clrf	7
 12297  0E80  0824               	movf	??_setDimmerLights,w
 12298  0E81  0081               	movwf	1
 12299                           
 12300                           ;Dimmer_B1.c: 607: if (status == 1) {
 12301  0E82  0823               	movf	setDimmerLights@status,w
 12302  0E83  3A01               	xorlw	1
 12303  0E84  1D03               	skipz
 12304  0E85  2EC7               	goto	l7865
 12305                           
 12306                           ;Dimmer_B1.c: 608: DimmerLights->Status = 1;
 12307  0E86  086C               	movf	_DimmerLights,w
 12308  0E87  0086               	movwf	6
 12309  0E88  3001               	movlw	1	; select bank2/3
 12310  0E89  0087               	movwf	7
 12311  0E8A  1681               	bsf	1,5
 12312                           
 12313                           ;Dimmer_B1.c: 609: setLED(lights, 0);
 12314  0E8B  01A1               	clrf	setLED@command
 12315  0E8C  0825               	movf	setDimmerLights@lights,w
 12316  0E8D  318A  224A  318E   	fcall	_setLED
 12317                           
 12318                           ;Dimmer_B1.c: 610: RC7=!0;
 12319  0E90  0020               	movlb	0	; select bank0
 12320  0E91  178E               	bsf	14,7	;volatile
 12321                           
 12322                           ;Dimmer_B1.c: 611: ;;
 12323                           ;Dimmer_B1.c: 613: DimmerLights->Signal = 1;
 12324  0E92  086C               	movf	_DimmerLights,w
 12325  0E93  0086               	movwf	6
 12326  0E94  3001               	movlw	1	; select bank2/3
 12327  0E95  0087               	movwf	7
 12328  0E96  1481               	bsf	1,1
 12329                           
 12330                           ;Dimmer_B1.c: 614: DimmerLights->DimmingTimeValue = 7;
 12331  0E97  3007               	movlw	7
 12332  0E98  00A4               	movwf	??_setDimmerLights
 12333  0E99  086C               	movf	_DimmerLights,w
 12334  0E9A  3E02               	addlw	2
 12335  0E9B  0086               	movwf	6
 12336  0E9C  3001               	movlw	1	; select bank2/3
 12337  0E9D  0087               	movwf	7
 12338  0E9E  0824               	movf	??_setDimmerLights,w
 12339  0E9F  0081               	movwf	1
 12340                           
 12341                           ;Dimmer_B1.c: 616: if (DimmerLights->StatusFlag == 0) {
 12342  0EA0  086C               	movf	_DimmerLights,w
 12343  0EA1  0086               	movwf	6
 12344  0EA2  3001               	movlw	1	; select bank2/3
 12345  0EA3  0087               	movwf	7
 12346  0EA4  1B01               	btfsc	1,6
 12347  0EA5  0008               	return
 12348                           
 12349                           ;Dimmer_B1.c: 617: DimmerLights->StatusFlag = 1;
 12350  0EA6  086C               	movf	_DimmerLights,w
 12351  0EA7  0086               	movwf	6
 12352  0EA8  3001               	movlw	1	; select bank2/3
 12353  0EA9  0087               	movwf	7
 12354  0EAA  1701               	bsf	1,6
 12355                           
 12356                           ;Dimmer_B1.c: 618: ;;
 12357                           ;Dimmer_B1.c: 619: setMemory_GO(0);
 12358  0EAB  3000               	movlw	0
 12359  0EAC  3190  20EB         	fcall	_setMemory_GO
 12360                           
 12361                           ;Dimmer_B1.c: 622: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 12362  0EAE  0020               	movlb	0	; select bank0
 12363  0EAF  086C               	movf	_DimmerLights,w
 12364  0EB0  3E05               	addlw	5
 12365  0EB1  0086               	movwf	6
 12366  0EB2  3001               	movlw	1	; select bank2/3
 12367  0EB3  0087               	movwf	7
 12368  0EB4  0801               	movf	1,w
 12369  0EB5  00A4               	movwf	??_setDimmerLights
 12370  0EB6  086C               	movf	_DimmerLights,w
 12371  0EB7  3E04               	addlw	4
 12372  0EB8  0086               	movwf	6
 12373  0EB9  3001               	movlw	1	; select bank2/3
 12374  0EBA  0087               	movwf	7
 12375  0EBB  0824               	movf	??_setDimmerLights,w
 12376  0EBC  0081               	movwf	1
 12377                           
 12378                           ;Dimmer_B1.c: 626: DimmerLights->DimmingValue = ((char)((100-60)*0.8));
 12379  0EBD  3020               	movlw	32
 12380  0EBE  00A4               	movwf	??_setDimmerLights
 12381  0EBF  086C               	movf	_DimmerLights,w
 12382  0EC0  3E04               	addlw	4
 12383  0EC1  0086               	movwf	6
 12384  0EC2  3001               	movlw	1	; select bank2/3
 12385  0EC3  0087               	movwf	7
 12386  0EC4  0824               	movf	??_setDimmerLights,w
 12387  0EC5  0081               	movwf	1
 12388                           
 12389                           ;Dimmer_B1.c: 628: }
 12390                           ;Dimmer_B1.c: 629: } else {
 12391  0EC6  0008               	return
 12392  0EC7                     l7865:	
 12393                           
 12394                           ;Dimmer_B1.c: 630: DimmerLights->Status = 0;
 12395  0EC7  086C               	movf	_DimmerLights,w
 12396  0EC8  0086               	movwf	6
 12397  0EC9  3001               	movlw	1	; select bank2/3
 12398  0ECA  0087               	movwf	7
 12399  0ECB  1281               	bcf	1,5
 12400                           
 12401                           ;Dimmer_B1.c: 632: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 12402  0ECC  086C               	movf	_DimmerLights,w
 12403  0ECD  3E06               	addlw	6
 12404  0ECE  0086               	movwf	6
 12405  0ECF  3001               	movlw	1	; select bank2/3
 12406  0ED0  0087               	movwf	7
 12407  0ED1  0801               	movf	1,w
 12408  0ED2  00A4               	movwf	??_setDimmerLights
 12409  0ED3  086C               	movf	_DimmerLights,w
 12410  0ED4  3E04               	addlw	4
 12411  0ED5  0086               	movwf	6
 12412  0ED6  3001               	movlw	1	; select bank2/3
 12413  0ED7  0087               	movwf	7
 12414  0ED8  0824               	movf	??_setDimmerLights,w
 12415  0ED9  0081               	movwf	1
 12416                           
 12417                           ;Dimmer_B1.c: 639: DimmerLights->Signal = 1;
 12418  0EDA  086C               	movf	_DimmerLights,w
 12419  0EDB  0086               	movwf	6
 12420  0EDC  3001               	movlw	1	; select bank2/3
 12421  0EDD  0087               	movwf	7
 12422  0EDE  1481               	bsf	1,1
 12423                           
 12424                           ;Dimmer_B1.c: 640: DimmerLights->AdjFlag = 0;
 12425  0EDF  086C               	movf	_DimmerLights,w
 12426  0EE0  0086               	movwf	6
 12427  0EE1  3001               	movlw	1	; select bank2/3
 12428  0EE2  0087               	movwf	7
 12429  0EE3  1181               	bcf	1,3
 12430                           
 12431                           ;Dimmer_B1.c: 641: DimmerLights->AdjStatus = 0;
 12432  0EE4  086C               	movf	_DimmerLights,w
 12433  0EE5  0086               	movwf	6
 12434  0EE6  3001               	movlw	1	; select bank2/3
 12435  0EE7  0087               	movwf	7
 12436  0EE8  1201               	bcf	1,4
 12437                           
 12438                           ;Dimmer_B1.c: 642: DimmerLights->DimmingTimeValue = 7;
 12439  0EE9  3007               	movlw	7
 12440  0EEA  00A4               	movwf	??_setDimmerLights
 12441  0EEB  086C               	movf	_DimmerLights,w
 12442  0EEC  3E02               	addlw	2
 12443  0EED  0086               	movwf	6
 12444  0EEE  3001               	movlw	1	; select bank2/3
 12445  0EEF  0087               	movwf	7
 12446  0EF0  0824               	movf	??_setDimmerLights,w
 12447  0EF1  0081               	movwf	1
 12448  0EF2  0008               	return
 12449  0EF3                     __end_of_setDimmerLights:	
 12450                           
 12451                           	psect	text79
 12452  0A4A                     __ptext79:	
 12453 ;; *************** function _setLED *****************
 12454 ;; Defined at:
 12455 ;;		line 70 in file "../src/LED_B1.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;  led             1    wreg     unsigned char 
 12458 ;;  command         1    1[BANK0 ] unsigned char 
 12459 ;; Auto vars:     Size  Location     Type
 12460 ;;  led             1    2[BANK0 ] unsigned char 
 12461 ;; Return value:  Size  Location     Type
 12462 ;;		None               void
 12463 ;; Registers used:
 12464 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12465 ;; Tracked objects:
 12466 ;;		On entry : 0/0
 12467 ;;		On exit  : 0/0
 12468 ;;		Unchanged: 0/0
 12469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12470 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12473 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;Total ram usage:        2 bytes
 12475 ;; Hardware stack levels used:    1
 12476 ;; Hardware stack levels required when called:    6
 12477 ;; This function calls:
 12478 ;;		_LedPointSelect
 12479 ;; This function is called by:
 12480 ;;		_setDimmerLights_ERROR
 12481 ;;		_setDimmerLights
 12482 ;;		_setLED_Initialization
 12483 ;;		_setOverTemp_Exceptions
 12484 ;;		_setPowerFault_Exceptions
 12485 ;;		_setSw_Initialization
 12486 ;; This function uses a non-reentrant model
 12487 ;;
 12488                           
 12489                           
 12490                           ;psect for function _setLED
 12491  0A4A                     _setLED:	
 12492                           
 12493                           ;incstack = 0
 12494                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12495                           ;setLED@led stored from wreg
 12496  0A4A  0020               	movlb	0	; select bank0
 12497  0A4B  00A2               	movwf	setLED@led
 12498                           
 12499                           ;LED_B1.c: 71: LedPointSelect(led);
 12500  0A4C  0822               	movf	setLED@led,w
 12501  0A4D  3191  2164  318A   	fcall	_LedPointSelect
 12502                           
 12503                           ;LED_B1.c: 72: if (command == 0) {
 12504  0A50  0020               	movlb	0	; select bank0
 12505  0A51  08A1               	movf	setLED@command,f
 12506  0A52  1D03               	skipz
 12507  0A53  2A66               	goto	l7741
 12508                           
 12509                           ;LED_B1.c: 74: if (led == 1) {
 12510  0A54  0822               	movf	setLED@led,w
 12511  0A55  3A01               	xorlw	1
 12512  0A56  1D03               	skipz
 12513  0A57  2A5A               	goto	l7733
 12514                           
 12515                           ;LED_B1.c: 78: RA3 = 1;
 12516  0A58  158C               	bsf	12,3	;volatile
 12517                           
 12518                           ;LED_B1.c: 80: }
 12519  0A59  0008               	return
 12520  0A5A                     l7733:	
 12521                           
 12522                           ;LED_B1.c: 83: else if (led == 2) {
 12523  0A5A  0822               	movf	setLED@led,w
 12524  0A5B  3A02               	xorlw	2
 12525  0A5C  1D03               	skipz
 12526  0A5D  2A60               	goto	l7737
 12527                           
 12528                           ;LED_B1.c: 87: RC7 = 1;
 12529  0A5E  178E               	bsf	14,7	;volatile
 12530                           
 12531                           ;LED_B1.c: 89: }
 12532  0A5F  0008               	return
 12533  0A60                     l7737:	
 12534                           
 12535                           ;LED_B1.c: 101: else if (led == 99) {
 12536  0A60  0822               	movf	setLED@led,w
 12537  0A61  3A63               	xorlw	99
 12538  0A62  1D03               	skipz
 12539  0A63  0008               	return
 12540                           
 12541                           ;LED_B1.c: 105: RB5 = 1;
 12542  0A64  168D               	bsf	13,5	;volatile
 12543                           
 12544                           ;LED_B1.c: 107: }
 12545                           ;LED_B1.c: 109: } else if (command == 1) {
 12546  0A65  0008               	return
 12547  0A66                     l7741:	
 12548  0A66  0821               	movf	setLED@command,w
 12549  0A67  3A01               	xorlw	1
 12550  0A68  1D03               	skipz
 12551  0A69  2A7C               	goto	l7755
 12552                           
 12553                           ;LED_B1.c: 111: if (led == 1) {
 12554  0A6A  0822               	movf	setLED@led,w
 12555  0A6B  3A01               	xorlw	1
 12556  0A6C  1D03               	skipz
 12557  0A6D  2A70               	goto	l7747
 12558                           
 12559                           ;LED_B1.c: 115: RA3 = 0;
 12560  0A6E  118C               	bcf	12,3	;volatile
 12561                           
 12562                           ;LED_B1.c: 117: }
 12563  0A6F  0008               	return
 12564  0A70                     l7747:	
 12565                           
 12566                           ;LED_B1.c: 120: else if (led == 2) {
 12567  0A70  0822               	movf	setLED@led,w
 12568  0A71  3A02               	xorlw	2
 12569  0A72  1D03               	skipz
 12570  0A73  2A76               	goto	l7751
 12571                           
 12572                           ;LED_B1.c: 124: RC7 = 0;
 12573  0A74  138E               	bcf	14,7	;volatile
 12574                           
 12575                           ;LED_B1.c: 126: }
 12576  0A75  0008               	return
 12577  0A76                     l7751:	
 12578                           
 12579                           ;LED_B1.c: 138: else if (led == 99) {
 12580  0A76  0822               	movf	setLED@led,w
 12581  0A77  3A63               	xorlw	99
 12582  0A78  1D03               	skipz
 12583  0A79  0008               	return
 12584                           
 12585                           ;LED_B1.c: 142: RB5 = 0;
 12586  0A7A  128D               	bcf	13,5	;volatile
 12587                           
 12588                           ;LED_B1.c: 144: }
 12589                           ;LED_B1.c: 146: } else if (command == 10) {
 12590  0A7B  0008               	return
 12591  0A7C                     l7755:	
 12592  0A7C  0821               	movf	setLED@command,w
 12593  0A7D  3A0A               	xorlw	10
 12594  0A7E  1D03               	skipz
 12595  0A7F  2A9F               	goto	l7771
 12596                           
 12597                           ;LED_B1.c: 147: LED->GO = 0;
 12598  0A80  0869               	movf	_LED,w
 12599  0A81  0086               	movwf	6
 12600  0A82  086A               	movf	_LED+1,w
 12601  0A83  0087               	movwf	7
 12602  0A84  1081               	bcf	1,1
 12603                           
 12604                           ;LED_B1.c: 148: LED->Time = 0;
 12605  0A85  0869               	movf	_LED,w
 12606  0A86  0086               	movwf	6
 12607  0A87  086A               	movf	_LED+1,w
 12608  0A88  0087               	movwf	7
 12609  0A89  3141               	addfsr 1,1
 12610  0A8A  3000               	movlw	0
 12611  0A8B  3FC0               	movwi [0]fsr1
 12612  0A8C  3FC1               	movwi [1]fsr1
 12613                           
 12614                           ;LED_B1.c: 150: if (led == 1) {
 12615  0A8D  0822               	movf	setLED@led,w
 12616  0A8E  3A01               	xorlw	1
 12617  0A8F  1D03               	skipz
 12618  0A90  2A93               	goto	l7763
 12619                           
 12620                           ;LED_B1.c: 154: RA3 = 1;
 12621  0A91  158C               	bsf	12,3	;volatile
 12622                           
 12623                           ;LED_B1.c: 156: }
 12624  0A92  0008               	return
 12625  0A93                     l7763:	
 12626                           
 12627                           ;LED_B1.c: 159: else if (led == 2) {
 12628  0A93  0822               	movf	setLED@led,w
 12629  0A94  3A02               	xorlw	2
 12630  0A95  1D03               	skipz
 12631  0A96  2A99               	goto	l7767
 12632                           
 12633                           ;LED_B1.c: 163: RC7 = 1;
 12634  0A97  178E               	bsf	14,7	;volatile
 12635                           
 12636                           ;LED_B1.c: 165: }
 12637  0A98  0008               	return
 12638  0A99                     l7767:	
 12639                           
 12640                           ;LED_B1.c: 177: else if (led == 99) {
 12641  0A99  0822               	movf	setLED@led,w
 12642  0A9A  3A63               	xorlw	99
 12643  0A9B  1D03               	skipz
 12644  0A9C  0008               	return
 12645                           
 12646                           ;LED_B1.c: 181: RB5 = 1;
 12647  0A9D  168D               	bsf	13,5	;volatile
 12648                           
 12649                           ;LED_B1.c: 183: }
 12650                           ;LED_B1.c: 185: } else if (command == 11) {
 12651  0A9E  0008               	return
 12652  0A9F                     l7771:	
 12653  0A9F  0821               	movf	setLED@command,w
 12654  0AA0  3A0B               	xorlw	11
 12655  0AA1  1D03               	skipz
 12656  0AA2  0008               	return
 12657                           
 12658                           ;LED_B1.c: 186: LED->GO = 1;
 12659  0AA3  0869               	movf	_LED,w
 12660  0AA4  0086               	movwf	6
 12661  0AA5  086A               	movf	_LED+1,w
 12662  0AA6  0087               	movwf	7
 12663  0AA7  1481               	bsf	1,1
 12664  0AA8  0008               	return
 12665  0AA9                     __end_of_setLED:	
 12666                           
 12667                           	psect	text80
 12668  1164                     __ptext80:	
 12669 ;; *************** function _LedPointSelect *****************
 12670 ;; Defined at:
 12671 ;;		line 7 in file "../src/LED_B1.c"
 12672 ;; Parameters:    Size  Location     Type
 12673 ;;  led             1    wreg     unsigned char 
 12674 ;; Auto vars:     Size  Location     Type
 12675 ;;  led             1    0[BANK0 ] unsigned char 
 12676 ;; Return value:  Size  Location     Type
 12677 ;;		None               void
 12678 ;; Registers used:
 12679 ;;		wreg, status,2, status,0
 12680 ;; Tracked objects:
 12681 ;;		On entry : 0/0
 12682 ;;		On exit  : 0/0
 12683 ;;		Unchanged: 0/0
 12684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12688 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;Total ram usage:        1 bytes
 12690 ;; Hardware stack levels used:    1
 12691 ;; Hardware stack levels required when called:    5
 12692 ;; This function calls:
 12693 ;;		Nothing
 12694 ;; This function is called by:
 12695 ;;		_setLED_Initialization
 12696 ;;		_setLED
 12697 ;;		_setLED_Main
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           
 12702                           ;psect for function _LedPointSelect
 12703  1164                     _LedPointSelect:	
 12704                           
 12705                           ;incstack = 0
 12706                           ; Regs used in _LedPointSelect: [wreg+status,2+status,0]
 12707                           ;LedPointSelect@led stored from wreg
 12708  1164  0020               	movlb	0	; select bank0
 12709  1165  00A0               	movwf	LedPointSelect@led
 12710                           
 12711                           ;LED_B1.c: 9: if (led == 1) {
 12712  1166  0820               	movf	LedPointSelect@led,w
 12713  1167  3A01               	xorlw	1
 12714  1168  1D03               	skipz
 12715  1169  296F               	goto	l7527
 12716                           
 12717                           ;LED_B1.c: 10: LED = &VarLED1;
 12718  116A  30E7               	movlw	low _VarLED1
 12719  116B  00E9               	movwf	_LED
 12720  116C  3000               	movlw	high _VarLED1
 12721  116D  00EA               	movwf	_LED+1
 12722                           
 12723                           ;LED_B1.c: 11: }
 12724  116E  0008               	return
 12725  116F                     l7527:	
 12726                           
 12727                           ;LED_B1.c: 14: else if (led == 2) {
 12728  116F  0820               	movf	LedPointSelect@led,w
 12729  1170  3A02               	xorlw	2
 12730  1171  1D03               	skipz
 12731  1172  2978               	goto	l7531
 12732                           
 12733                           ;LED_B1.c: 15: LED = &VarLED2;
 12734  1173  3067               	movlw	low _VarLED2
 12735  1174  00E9               	movwf	_LED
 12736  1175  3001               	movlw	high _VarLED2
 12737  1176  00EA               	movwf	_LED+1
 12738                           
 12739                           ;LED_B1.c: 16: }
 12740  1177  0008               	return
 12741  1178                     l7531:	
 12742                           
 12743                           ;LED_B1.c: 24: else if (led == 99) {
 12744  1178  0820               	movf	LedPointSelect@led,w
 12745  1179  3A63               	xorlw	99
 12746  117A  1D03               	skipz
 12747  117B  0008               	return
 12748                           
 12749                           ;LED_B1.c: 25: LED = &VarErrLED;
 12750  117C  30E3               	movlw	low _VarErrLED
 12751  117D  00E9               	movwf	_LED
 12752  117E  3000               	movlw	high _VarErrLED
 12753  117F  00EA               	movwf	_LED+1
 12754  1180  0008               	return
 12755  1181                     __end_of_LedPointSelect:	
 12756                           
 12757                           	psect	text81
 12758  109A                     __ptext81:	
 12759 ;; *************** function _DimmerLights_Close *****************
 12760 ;; Defined at:
 12761 ;;		line 407 in file "../src/Dimmer_B1.c"
 12762 ;; Parameters:    Size  Location     Type
 12763 ;;		None
 12764 ;; Auto vars:     Size  Location     Type
 12765 ;;		None
 12766 ;; Return value:  Size  Location     Type
 12767 ;;		None               void
 12768 ;; Registers used:
 12769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12770 ;; Tracked objects:
 12771 ;;		On entry : 0/0
 12772 ;;		On exit  : 0/0
 12773 ;;		Unchanged: 0/0
 12774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;Total ram usage:        0 bytes
 12780 ;; Hardware stack levels used:    1
 12781 ;; Hardware stack levels required when called:    6
 12782 ;; This function calls:
 12783 ;;		_getDimmerLights_StatusFlag
 12784 ;;		_setMemory_GO
 12785 ;; This function is called by:
 12786 ;;		_DimmerLights_Main
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           
 12791                           ;psect for function _DimmerLights_Close
 12792  109A                     _DimmerLights_Close:	
 12793                           
 12794                           ;Dimmer_B1.c: 408: if (Dimmer->Detect == 1) {
 12795                           
 12796                           ;incstack = 0
 12797                           ; Regs used in _DimmerLights_Close: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12798  109A  0876               	movf	_Dimmer,w
 12799  109B  0086               	movwf	6
 12800  109C  0187               	clrf	7
 12801  109D  1C01               	btfss	1,0
 12802  109E  0008               	return
 12803                           
 12804                           ;Dimmer_B1.c: 409: Dimmer->Detect = 0;
 12805  109F  0876               	movf	_Dimmer,w
 12806  10A0  0086               	movwf	6
 12807  10A1  0187               	clrf	7
 12808  10A2  1001               	bcf	1,0
 12809                           
 12810                           ;Dimmer_B1.c: 410: if (getDimmerLights_StatusFlag() == 0) {
 12811  10A3  319E  26A1  3190   	fcall	_getDimmerLights_StatusFlag
 12812  10A6  3800               	iorlw	0
 12813  10A7  1D03               	skipz
 12814  10A8  0008               	return
 12815                           
 12816                           ;Dimmer_B1.c: 411: ;;
 12817                           ;Dimmer_B1.c: 412: setMemory_GO(1);
 12818  10A9  3001               	movlw	1
 12819  10AA  3190  20EB         	fcall	_setMemory_GO
 12820  10AC  0008               	return
 12821  10AD                     __end_of_DimmerLights_Close:	
 12822                           
 12823                           	psect	text82
 12824  10EB                     __ptext82:	
 12825 ;; *************** function _setMemory_GO *****************
 12826 ;; Defined at:
 12827 ;;		line 885 in file "../src/MCU_B1.c"
 12828 ;; Parameters:    Size  Location     Type
 12829 ;;  command         1    wreg     unsigned char 
 12830 ;; Auto vars:     Size  Location     Type
 12831 ;;  command         1    2[BANK0 ] unsigned char 
 12832 ;; Return value:  Size  Location     Type
 12833 ;;		None               void
 12834 ;; Registers used:
 12835 ;;		wreg, status,2, status,0
 12836 ;; Tracked objects:
 12837 ;;		On entry : 0/0
 12838 ;;		On exit  : 0/0
 12839 ;;		Unchanged: 0/0
 12840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12844 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12845 ;;Total ram usage:        3 bytes
 12846 ;; Hardware stack levels used:    1
 12847 ;; Hardware stack levels required when called:    5
 12848 ;; This function calls:
 12849 ;;		Nothing
 12850 ;; This function is called by:
 12851 ;;		_DimmerLights_Close
 12852 ;;		_setDimmerLights
 12853 ;; This function uses a non-reentrant model
 12854 ;;
 12855                           
 12856                           
 12857                           ;psect for function _setMemory_GO
 12858  10EB                     _setMemory_GO:	
 12859                           
 12860                           ;incstack = 0
 12861                           ; Regs used in _setMemory_GO: [wreg+status,2+status,0]
 12862                           ;setMemory_GO@command stored from wreg
 12863  10EB  0020               	movlb	0	; select bank0
 12864  10EC  00A2               	movwf	setMemory_GO@command
 12865                           
 12866                           ;MCU_B1.c: 886: Memory.GO = command;
 12867  10ED  0822               	movf	setMemory_GO@command,w
 12868  10EE  0022               	movlb	2	; select bank2
 12869  10EF  10E1               	bcf	(_Memory^(0+256)+36),1
 12870  10F0  1D03               	skipz
 12871  10F1  14E1               	bsf	(_Memory^(0+256)+36),1
 12872                           
 12873                           ;MCU_B1.c: 887: if (command == 0) {
 12874  10F2  0020               	movlb	0	; select bank0
 12875  10F3  08A2               	movf	setMemory_GO@command,f
 12876  10F4  1D03               	skipz
 12877  10F5  0008               	return
 12878                           
 12879                           ;MCU_B1.c: 888: Memory.Time = command;
 12880  10F6  0822               	movf	setMemory_GO@command,w
 12881  10F7  00A0               	movwf	??_setMemory_GO
 12882  10F8  01A1               	clrf	??_setMemory_GO+1
 12883  10F9  0820               	movf	??_setMemory_GO,w
 12884  10FA  0022               	movlb	2	; select bank2
 12885  10FB  00DF               	movwf	(_Memory^(0+256)+34)
 12886  10FC  0020               	movlb	0	; select bank0
 12887  10FD  0821               	movf	??_setMemory_GO+1,w
 12888  10FE  0022               	movlb	2	; select bank2
 12889  10FF  00E0               	movwf	((_Memory+1)^(0+256)+34)
 12890  1100  0008               	return
 12891  1101                     __end_of_setMemory_GO:	
 12892                           
 12893                           	psect	text83
 12894  1EA1                     __ptext83:	
 12895 ;; *************** function _getDimmerLights_StatusFlag *****************
 12896 ;; Defined at:
 12897 ;;		line 486 in file "../src/Dimmer_B1.c"
 12898 ;; Parameters:    Size  Location     Type
 12899 ;;		None
 12900 ;; Auto vars:     Size  Location     Type
 12901 ;;  Status          1    0[BANK0 ] unsigned char 
 12902 ;; Return value:  Size  Location     Type
 12903 ;;                  1    wreg      unsigned char 
 12904 ;; Registers used:
 12905 ;;		wreg, status,2
 12906 ;; Tracked objects:
 12907 ;;		On entry : 0/0
 12908 ;;		On exit  : 0/0
 12909 ;;		Unchanged: 0/0
 12910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;Total ram usage:        1 bytes
 12916 ;; Hardware stack levels used:    1
 12917 ;; Hardware stack levels required when called:    5
 12918 ;; This function calls:
 12919 ;;		Nothing
 12920 ;; This function is called by:
 12921 ;;		_DimmerLights_Close
 12922 ;;		_DimmerLights_Exceptions
 12923 ;; This function uses a non-reentrant model
 12924 ;;
 12925                           
 12926                           
 12927                           ;psect for function _getDimmerLights_StatusFlag
 12928  1EA1                     _getDimmerLights_StatusFlag:	
 12929                           
 12930                           ;Dimmer_B1.c: 487: char Status = 0;
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _getDimmerLights_StatusFlag: [wreg+status,2]
 12934  1EA1  0020               	movlb	0	; select bank0
 12935  1EA2  01A0               	clrf	getDimmerLights_StatusFlag@Status
 12936                           
 12937                           ;Dimmer_B1.c: 498: Status = (DimmerLights1.StatusFlag == 1) ? 1 : 0;
 12938  1EA3  3000               	movlw	0
 12939  1EA4  0023               	movlb	3	; select bank3
 12940  1EA5  1B40               	btfsc	_DimmerLights1^(0+384),6
 12941  1EA6  3001               	movlw	1
 12942  1EA7  0020               	movlb	0	; select bank0
 12943  1EA8  00A0               	movwf	getDimmerLights_StatusFlag@Status
 12944                           
 12945                           ;Dimmer_B1.c: 501: return Status;
 12946  1EA9  0820               	movf	getDimmerLights_StatusFlag@Status,w
 12947  1EAA  0008               	return
 12948  1EAB                     __end_of_getDimmerLights_StatusFlag:	
 12949                           
 12950                           	psect	text84
 12951  1F20                     __ptext84:	
 12952 ;; *************** function _DimmerLights_Initialization *****************
 12953 ;; Defined at:
 12954 ;;		line 345 in file "../src/Dimmer_B1.c"
 12955 ;; Parameters:    Size  Location     Type
 12956 ;;		None
 12957 ;; Auto vars:     Size  Location     Type
 12958 ;;		None
 12959 ;; Return value:  Size  Location     Type
 12960 ;;		None               void
 12961 ;; Registers used:
 12962 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12963 ;; Tracked objects:
 12964 ;;		On entry : 0/0
 12965 ;;		On exit  : 0/0
 12966 ;;		Unchanged: 0/0
 12967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12968 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12970 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;Total ram usage:        1 bytes
 12973 ;; Hardware stack levels used:    1
 12974 ;; Hardware stack levels required when called:    7
 12975 ;; This function calls:
 12976 ;;		_Dimmer_Initialization
 12977 ;;		_setDimmerLights_Initialization
 12978 ;; This function is called by:
 12979 ;;		_main
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _DimmerLights_Initialization
 12985  1F20                     _DimmerLights_Initialization:	
 12986                           
 12987                           ;Dimmer_B1.c: 348: DimmerLights11 = &DimmerLights1;
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12991  1F20  30C0               	movlw	_DimmerLights1& (0+255)
 12992  1F21  0020               	movlb	0	; select bank0
 12993  1F22  00A4               	movwf	??_DimmerLights_Initialization
 12994  1F23  0824               	movf	??_DimmerLights_Initialization,w
 12995  1F24  0021               	movlb	1	; select bank1
 12996  1F25  00CE               	movwf	_DimmerLights11^(0+128)
 12997                           
 12998                           ;Dimmer_B1.c: 349: setDimmerLights_Initialization(1);
 12999  1F26  3001               	movlw	1
 13000  1F27  3193  23A3  319F   	fcall	_setDimmerLights_Initialization
 13001                           
 13002                           ;Dimmer_B1.c: 363: Dimmer_Initialization();
 13003  1F2A  319E  262C         	fcall	_Dimmer_Initialization
 13004  1F2C  0008               	return
 13005  1F2D                     __end_of_DimmerLights_Initialization:	
 13006                           
 13007                           	psect	text85
 13008  13A3                     __ptext85:	
 13009 ;; *************** function _setDimmerLights_Initialization *****************
 13010 ;; Defined at:
 13011 ;;		line 368 in file "../src/Dimmer_B1.c"
 13012 ;; Parameters:    Size  Location     Type
 13013 ;;  lights          1    wreg     unsigned char 
 13014 ;; Auto vars:     Size  Location     Type
 13015 ;;  lights          1    3[BANK0 ] unsigned char 
 13016 ;; Return value:  Size  Location     Type
 13017 ;;		None               void
 13018 ;; Registers used:
 13019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13020 ;; Tracked objects:
 13021 ;;		On entry : 0/0
 13022 ;;		On exit  : 0/0
 13023 ;;		Unchanged: 0/0
 13024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13028 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;Total ram usage:        2 bytes
 13030 ;; Hardware stack levels used:    1
 13031 ;; Hardware stack levels required when called:    6
 13032 ;; This function calls:
 13033 ;;		_DimmerLightsPointSelect
 13034 ;; This function is called by:
 13035 ;;		_DimmerLights_Initialization
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           
 13040                           ;psect for function _setDimmerLights_Initialization
 13041  13A3                     _setDimmerLights_Initialization:	
 13042                           
 13043                           ;incstack = 0
 13044                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 13045                           ;setDimmerLights_Initialization@lights stored from wreg
 13046  13A3  0020               	movlb	0	; select bank0
 13047  13A4  00A3               	movwf	setDimmerLights_Initialization@lights
 13048                           
 13049                           ;Dimmer_B1.c: 370: DimmerLightsPointSelect(lights);
 13050  13A5  0823               	movf	setDimmerLights_Initialization@lights,w
 13051  13A6  319E  26B6         	fcall	_DimmerLightsPointSelect
 13052                           
 13053                           ;Dimmer_B1.c: 371: DimmerLights->Clear = 1;
 13054  13A8  0020               	movlb	0	; select bank0
 13055  13A9  086C               	movf	_DimmerLights,w
 13056  13AA  3E09               	addlw	9
 13057  13AB  0086               	movwf	6
 13058  13AC  3001               	movlw	1	; select bank2/3
 13059  13AD  0087               	movwf	7
 13060  13AE  1501               	bsf	1,2
 13061                           
 13062                           ;Dimmer_B1.c: 377: DimmerLights->MaxmumValue = ((char)((100-60)*0.8));
 13063  13AF  3020               	movlw	32
 13064  13B0  00A2               	movwf	??_setDimmerLights_Initialization
 13065  13B1  086C               	movf	_DimmerLights,w
 13066  13B2  3E05               	addlw	5
 13067  13B3  0086               	movwf	6
 13068  13B4  3001               	movlw	1	; select bank2/3
 13069  13B5  0087               	movwf	7
 13070  13B6  0822               	movf	??_setDimmerLights_Initialization,w
 13071  13B7  0081               	movwf	1
 13072                           
 13073                           ;Dimmer_B1.c: 378: DimmerLights->MinimumValue = ((char)((100-25)*0.8));
 13074  13B8  303C               	movlw	60
 13075  13B9  00A2               	movwf	??_setDimmerLights_Initialization
 13076  13BA  086C               	movf	_DimmerLights,w
 13077  13BB  3E06               	addlw	6
 13078  13BC  0086               	movwf	6
 13079  13BD  3001               	movlw	1	; select bank2/3
 13080  13BE  0087               	movwf	7
 13081  13BF  0822               	movf	??_setDimmerLights_Initialization,w
 13082  13C0  0081               	movwf	1
 13083                           
 13084                           ;Dimmer_B1.c: 388: DimmerLights->DimmingValue = DimmerLights->MinimumValue;
 13085  13C1  086C               	movf	_DimmerLights,w
 13086  13C2  3E06               	addlw	6
 13087  13C3  0086               	movwf	6
 13088  13C4  3001               	movlw	1	; select bank2/3
 13089  13C5  0087               	movwf	7
 13090  13C6  0801               	movf	1,w
 13091  13C7  00A2               	movwf	??_setDimmerLights_Initialization
 13092  13C8  086C               	movf	_DimmerLights,w
 13093  13C9  3E04               	addlw	4
 13094  13CA  0086               	movwf	6
 13095  13CB  3001               	movlw	1	; select bank2/3
 13096  13CC  0087               	movwf	7
 13097  13CD  0822               	movf	??_setDimmerLights_Initialization,w
 13098  13CE  0081               	movwf	1
 13099  13CF  0008               	return
 13100  13D0                     __end_of_setDimmerLights_Initialization:	
 13101                           
 13102                           	psect	text86
 13103  1E2C                     __ptext86:	
 13104 ;; *************** function _Dimmer_Initialization *****************
 13105 ;; Defined at:
 13106 ;;		line 797 in file "../src/Dimmer_B1.c"
 13107 ;; Parameters:    Size  Location     Type
 13108 ;;		None
 13109 ;; Auto vars:     Size  Location     Type
 13110 ;;		None
 13111 ;; Return value:  Size  Location     Type
 13112 ;;		None               void
 13113 ;; Registers used:
 13114 ;;		wreg
 13115 ;; Tracked objects:
 13116 ;;		On entry : 0/0
 13117 ;;		On exit  : 0/0
 13118 ;;		Unchanged: 0/0
 13119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13123 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13124 ;;Total ram usage:        1 bytes
 13125 ;; Hardware stack levels used:    1
 13126 ;; Hardware stack levels required when called:    5
 13127 ;; This function calls:
 13128 ;;		Nothing
 13129 ;; This function is called by:
 13130 ;;		_DimmerLights_Initialization
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           
 13135                           ;psect for function _Dimmer_Initialization
 13136  1E2C                     _Dimmer_Initialization:	
 13137                           
 13138                           ;Dimmer_B1.c: 799: Dimmer = &Dimmer1;
 13139                           
 13140                           ;incstack = 0
 13141                           ; Regs used in _Dimmer_Initialization: [wreg]
 13142  1E2C  30EB               	movlw	_Dimmer1& (0+255)
 13143  1E2D  0020               	movlb	0	; select bank0
 13144  1E2E  00A0               	movwf	??_Dimmer_Initialization
 13145  1E2F  0820               	movf	??_Dimmer_Initialization,w
 13146  1E30  00F6               	movwf	_Dimmer
 13147  1E31  0008               	return
 13148  1E32                     __end_of_Dimmer_Initialization:	
 13149                           
 13150                           	psect	text87
 13151  1E17                     __ptext87:	
 13152 ;; *************** function _DelayOff_Main *****************
 13153 ;; Defined at:
 13154 ;;		line 41 in file "../src/DelayOff_B1.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;		None
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;		None
 13159 ;; Return value:  Size  Location     Type
 13160 ;;		None               void
 13161 ;; Registers used:
 13162 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13163 ;; Tracked objects:
 13164 ;;		On entry : 0/0
 13165 ;;		On exit  : 0/0
 13166 ;;		Unchanged: 0/0
 13167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;Total ram usage:        0 bytes
 13173 ;; Hardware stack levels used:    1
 13174 ;; Hardware stack levels required when called:   10
 13175 ;; This function calls:
 13176 ;;		_DlyOff_Main
 13177 ;; This function is called by:
 13178 ;;		_main
 13179 ;; This function uses a non-reentrant model
 13180 ;;
 13181                           
 13182                           
 13183                           ;psect for function _DelayOff_Main
 13184  1E17                     _DelayOff_Main:	
 13185                           
 13186                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 13187                           
 13188                           ;incstack = 0
 13189                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13190  1E17  3001               	movlw	1
 13191  1E18  318D  257C         	fcall	_DlyOff_Main
 13192  1E1A  0008               	return
 13193  1E1B                     __end_of_DelayOff_Main:	
 13194                           
 13195                           	psect	text88
 13196  0D7C                     __ptext88:	
 13197 ;; *************** function _DlyOff_Main *****************
 13198 ;; Defined at:
 13199 ;;		line 62 in file "../src/DelayOff_B1.c"
 13200 ;; Parameters:    Size  Location     Type
 13201 ;;  sw              1    wreg     unsigned char 
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  sw              1   68[BANK0 ] unsigned char 
 13204 ;; Return value:  Size  Location     Type
 13205 ;;		None               void
 13206 ;; Registers used:
 13207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13208 ;; Tracked objects:
 13209 ;;		On entry : 0/0
 13210 ;;		On exit  : 0/0
 13211 ;;		Unchanged: 0/0
 13212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13215 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13217 ;;Total ram usage:        3 bytes
 13218 ;; Hardware stack levels used:    1
 13219 ;; Hardware stack levels required when called:    9
 13220 ;; This function calls:
 13221 ;;		_DelayOffPointSelect
 13222 ;;		_setBuz
 13223 ;;		_setDimmerLights_Switch
 13224 ;;		_setDimmerLights_Trigger
 13225 ;;		_setRFSW_Status
 13226 ;;		_setRF_DimmerLights
 13227 ;;		_setSw_Status
 13228 ;;		_setTxData
 13229 ;; This function is called by:
 13230 ;;		_DelayOff_Main
 13231 ;; This function uses a non-reentrant model
 13232 ;;
 13233                           
 13234                           
 13235                           ;psect for function _DlyOff_Main
 13236  0D7C                     _DlyOff_Main:	
 13237                           
 13238                           ;incstack = 0
 13239                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13240                           ;DlyOff_Main@sw stored from wreg
 13241  0D7C  0020               	movlb	0	; select bank0
 13242  0D7D  00E4               	movwf	DlyOff_Main@sw
 13243                           
 13244                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 13245  0D7E  0864               	movf	DlyOff_Main@sw,w
 13246  0D7F  319E  26AB  318D   	fcall	_DelayOffPointSelect
 13247                           
 13248                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 13249  0D82  0020               	movlb	0	; select bank0
 13250  0D83  086B               	movf	_DelayOff,w
 13251  0D84  0086               	movwf	6
 13252  0D85  3001               	movlw	1	; select bank2/3
 13253  0D86  0087               	movwf	7
 13254  0D87  1C81               	btfss	1,1
 13255  0D88  0008               	return
 13256                           
 13257                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 13258  0D89  086B               	movf	_DelayOff,w
 13259  0D8A  3E02               	addlw	2
 13260  0D8B  0086               	movwf	6
 13261  0D8C  3001               	movlw	1	; select bank2/3
 13262  0D8D  0087               	movwf	7
 13263  0D8E  3001               	movlw	1
 13264  0D8F  0781               	addwf	1,f
 13265  0D90  3141               	addfsr 1,1
 13266  0D91  1803               	skipnc
 13267  0D92  0A81               	incf	1,f
 13268                           
 13269                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 5600) {
 13270  0D93  086B               	movf	_DelayOff,w
 13271  0D94  3E02               	addlw	2
 13272  0D95  0086               	movwf	6
 13273  0D96  3001               	movlw	1	; select bank2/3
 13274  0D97  0087               	movwf	7
 13275  0D98  3F40               	moviw [0]fsr1
 13276  0D99  00E2               	movwf	??_DlyOff_Main
 13277  0D9A  3F41               	moviw [1]fsr1
 13278  0D9B  00E3               	movwf	??_DlyOff_Main+1
 13279  0D9C  3015               	movlw	21
 13280  0D9D  0263               	subwf	??_DlyOff_Main+1,w
 13281  0D9E  30E0               	movlw	224
 13282  0D9F  1903               	skipnz
 13283  0DA0  0262               	subwf	??_DlyOff_Main,w
 13284  0DA1  1C03               	skipc
 13285  0DA2  0008               	return
 13286                           
 13287                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 13288  0DA3  086B               	movf	_DelayOff,w
 13289  0DA4  3E02               	addlw	2
 13290  0DA5  0086               	movwf	6
 13291  0DA6  3001               	movlw	1	; select bank2/3
 13292  0DA7  0087               	movwf	7
 13293  0DA8  3000               	movlw	0
 13294  0DA9  3FC0               	movwi [0]fsr1
 13295  0DAA  3FC1               	movwi [1]fsr1
 13296                           
 13297                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 13298  0DAB  3001               	movlw	1
 13299  0DAC  00E2               	movwf	??_DlyOff_Main
 13300  0DAD  086B               	movf	_DelayOff,w
 13301  0DAE  3E04               	addlw	4
 13302  0DAF  0086               	movwf	6
 13303  0DB0  3001               	movlw	1	; select bank2/3
 13304  0DB1  0087               	movwf	7
 13305  0DB2  0862               	movf	??_DlyOff_Main,w
 13306  0DB3  0781               	addwf	1,f
 13307                           
 13308                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 13309  0DB4  086B               	movf	_DelayOff,w
 13310  0DB5  3E04               	addlw	4
 13311  0DB6  0086               	movwf	6
 13312  0DB7  3001               	movlw	1	; select bank2/3
 13313  0DB8  0087               	movwf	7
 13314  0DB9  0A6B               	incf	_DelayOff,w
 13315  0DBA  0084               	movwf	4
 13316  0DBB  3001               	movlw	1	; select bank2/3
 13317  0DBC  0085               	movwf	5
 13318  0DBD  0800               	movf	0,w
 13319  0DBE  0201               	subwf	1,w
 13320  0DBF  1C03               	skipc
 13321  0DC0  0008               	return
 13322                           
 13323                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 13324  0DC1  086B               	movf	_DelayOff,w
 13325  0DC2  3E04               	addlw	4
 13326  0DC3  0086               	movwf	6
 13327  0DC4  3001               	movlw	1	; select bank2/3
 13328  0DC5  0087               	movwf	7
 13329  0DC6  0181               	clrf	1
 13330                           
 13331                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 13332  0DC7  086B               	movf	_DelayOff,w
 13333  0DC8  0086               	movwf	6
 13334  0DC9  3001               	movlw	1	; select bank2/3
 13335  0DCA  0087               	movwf	7
 13336  0DCB  1081               	bcf	1,1
 13337                           
 13338                           ;DelayOff_B1.c: 73: setSw_Status(sw, 0);
 13339  0DCC  01A2               	clrf	setSw_Status@command
 13340  0DCD  0864               	movf	DlyOff_Main@sw,w
 13341  0DCE  319F  2756  318D   	fcall	_setSw_Status
 13342                           
 13343                           ;DelayOff_B1.c: 74: setRFSW_Status(sw, 0);
 13344  0DD1  0020               	movlb	0	; select bank0
 13345  0DD2  01A2               	clrf	setRFSW_Status@command
 13346  0DD3  0864               	movf	DlyOff_Main@sw,w
 13347  0DD4  319F  273A  318D   	fcall	_setRFSW_Status
 13348                           
 13349                           ;DelayOff_B1.c: 75: setRF_DimmerLights(sw, 0);
 13350  0DD7  0020               	movlb	0	; select bank0
 13351  0DD8  01DD               	clrf	setRF_DimmerLights@on
 13352  0DD9  0864               	movf	DlyOff_Main@sw,w
 13353  0DDA  318C  24A1  318D   	fcall	_setRF_DimmerLights
 13354                           
 13355                           ;DelayOff_B1.c: 76: setDimmerLights_Trigger(sw, 1);
 13356  0DDD  0020               	movlb	0	; select bank0
 13357  0DDE  01A2               	clrf	setDimmerLights_Trigger@command
 13358  0DDF  0AA2               	incf	setDimmerLights_Trigger@command,f
 13359  0DE0  0864               	movf	DlyOff_Main@sw,w
 13360  0DE1  319F  27C0  318D   	fcall	_setDimmerLights_Trigger
 13361                           
 13362                           ;DelayOff_B1.c: 77: setDimmerLights_Switch(sw, 0);
 13363  0DE4  0020               	movlb	0	; select bank0
 13364  0DE5  01A2               	clrf	setDimmerLights_Switch@command
 13365  0DE6  0864               	movf	DlyOff_Main@sw,w
 13366  0DE7  319F  27B0  318D   	fcall	_setDimmerLights_Switch
 13367                           
 13368                           ;DelayOff_B1.c: 78: setTxData();
 13369  0DEA  3184  24E9  318D   	fcall	_setTxData
 13370                           
 13371                           ;DelayOff_B1.c: 79: setBuz(1, 100);
 13372  0DED  3064               	movlw	100
 13373  0DEE  0020               	movlb	0	; select bank0
 13374  0DEF  00A9               	movwf	setBuz@time
 13375  0DF0  3000               	movlw	0
 13376  0DF1  00AA               	movwf	setBuz@time+1
 13377  0DF2  3001               	movlw	1
 13378  0DF3  3189  213B         	fcall	_setBuz
 13379  0DF5  0008               	return
 13380  0DF6                     __end_of_DlyOff_Main:	
 13381                           
 13382                           	psect	text89
 13383  04E9                     __ptext89:	
 13384 ;; *************** function _setTxData *****************
 13385 ;; Defined at:
 13386 ;;		line 138 in file "../src/RF_Control_B1.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;		None
 13389 ;; Auto vars:     Size  Location     Type
 13390 ;;  i               1    0        unsigned char 
 13391 ;; Return value:  Size  Location     Type
 13392 ;;		None               void
 13393 ;; Registers used:
 13394 ;;		wreg, fsr1l, fsr1h
 13395 ;; Tracked objects:
 13396 ;;		On entry : 0/0
 13397 ;;		On exit  : 0/0
 13398 ;;		Unchanged: 0/0
 13399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13402 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13403 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13404 ;;Total ram usage:        1 bytes
 13405 ;; Hardware stack levels used:    1
 13406 ;; Hardware stack levels required when called:    5
 13407 ;; This function calls:
 13408 ;;		Nothing
 13409 ;; This function is called by:
 13410 ;;		_DlyOff_Main
 13411 ;;		_setDimmerLights_Adj
 13412 ;;		_setControl_Lights_Table
 13413 ;;		_setRFSW_Control
 13414 ;;		_setRFSW_AdjControl
 13415 ;;		_Sw_DimmerOnFunc
 13416 ;;		_Sw_DimmerOffFunc
 13417 ;; This function uses a non-reentrant model
 13418 ;;
 13419                           
 13420                           
 13421                           ;psect for function _setTxData
 13422  04E9                     _setTxData:	
 13423                           
 13424                           ;RF_Control_B1.c: 139: char i;
 13425                           ;RF_Control_B1.c: 140: if (RF1.Enable == 1) {
 13426                           
 13427                           ;incstack = 0
 13428                           ; Regs used in _setTxData: [wregfsr1]
 13429  04E9  0021               	movlb	1	; select bank1
 13430  04EA  1C46               	btfss	_RF1^(0+128),0
 13431  04EB  0008               	return
 13432                           
 13433                           ;RF_Control_B1.c: 142: RF1.TransceiveGO = 1;
 13434  04EC  1546               	bsf	_RF1^(0+128),2
 13435                           
 13436                           ;RF_Control_B1.c: 152: RF_Data[0] = 0x63;
 13437  04ED  3063               	movlw	99
 13438  04EE  0020               	movlb	0	; select bank0
 13439  04EF  00A0               	movwf	??_setTxData
 13440  04F0  0820               	movf	??_setTxData,w
 13441  04F1  0022               	movlb	2	; select bank2
 13442  04F2  00A0               	movwf	_RF_Data^(0+256)
 13443                           
 13444                           ;RF_Control_B1.c: 153: RF_Data[1] = 0x02;
 13445  04F3  3002               	movlw	2
 13446  04F4  0020               	movlb	0	; select bank0
 13447  04F5  00A0               	movwf	??_setTxData
 13448  04F6  0820               	movf	??_setTxData,w
 13449  04F7  0022               	movlb	2	; select bank2
 13450  04F8  00A1               	movwf	(_RF_Data^(0+256)+1)
 13451                           
 13452                           ;RF_Control_B1.c: 154: RF_Data[2] = product->Data[2];
 13453  04F9  0020               	movlb	0	; select bank0
 13454  04FA  086E               	movf	_product,w
 13455  04FB  0086               	movwf	6
 13456  04FC  3001               	movlw	1	; select bank2/3
 13457  04FD  0087               	movwf	7
 13458  04FE  3001               	movlw	1	; select bank2/3
 13459  04FF  3F42               	moviw [2]fsr1
 13460  0500  0022               	movlb	2	; select bank2
 13461  0501  00A2               	movwf	(_RF_Data^(0+256)+2)
 13462                           
 13463                           ;RF_Control_B1.c: 155: RF_Data[3] = product->Data[3];
 13464  0502  0020               	movlb	0	; select bank0
 13465  0503  086E               	movf	_product,w
 13466  0504  0086               	movwf	6
 13467  0505  3001               	movlw	1	; select bank2/3
 13468  0506  0087               	movwf	7
 13469  0507  3001               	movlw	1	; select bank2/3
 13470  0508  3F43               	moviw [3]fsr1
 13471  0509  0022               	movlb	2	; select bank2
 13472  050A  00A3               	movwf	(_RF_Data^(0+256)+3)
 13473                           
 13474                           ;RF_Control_B1.c: 156: RF_Data[4] = product->Data[4];
 13475  050B  0020               	movlb	0	; select bank0
 13476  050C  086E               	movf	_product,w
 13477  050D  0086               	movwf	6
 13478  050E  3001               	movlw	1	; select bank2/3
 13479  050F  0087               	movwf	7
 13480  0510  3001               	movlw	1	; select bank2/3
 13481  0511  3F44               	moviw [4]fsr1
 13482  0512  0022               	movlb	2	; select bank2
 13483  0513  00A4               	movwf	(_RF_Data^(0+256)+4)
 13484                           
 13485                           ;RF_Control_B1.c: 157: RF_Data[5] = product->Data[5];
 13486  0514  0020               	movlb	0	; select bank0
 13487  0515  086E               	movf	_product,w
 13488  0516  0086               	movwf	6
 13489  0517  3001               	movlw	1	; select bank2/3
 13490  0518  0087               	movwf	7
 13491  0519  3001               	movlw	1	; select bank2/3
 13492  051A  3F45               	moviw [5]fsr1
 13493  051B  0022               	movlb	2	; select bank2
 13494  051C  00A5               	movwf	(_RF_Data^(0+256)+5)
 13495                           
 13496                           ;RF_Control_B1.c: 158: RF_Data[6] = product->Data[6];
 13497  051D  0020               	movlb	0	; select bank0
 13498  051E  086E               	movf	_product,w
 13499  051F  0086               	movwf	6
 13500  0520  3001               	movlw	1	; select bank2/3
 13501  0521  0087               	movwf	7
 13502  0522  3001               	movlw	1	; select bank2/3
 13503  0523  3F46               	moviw [6]fsr1
 13504  0524  0022               	movlb	2	; select bank2
 13505  0525  00A6               	movwf	(_RF_Data^(0+256)+6)
 13506                           
 13507                           ;RF_Control_B1.c: 159: RF_Data[7] = product->Data[7];
 13508  0526  0020               	movlb	0	; select bank0
 13509  0527  086E               	movf	_product,w
 13510  0528  0086               	movwf	6
 13511  0529  3001               	movlw	1	; select bank2/3
 13512  052A  0087               	movwf	7
 13513  052B  3001               	movlw	1	; select bank2/3
 13514  052C  3F47               	moviw [7]fsr1
 13515  052D  0022               	movlb	2	; select bank2
 13516  052E  00A7               	movwf	(_RF_Data^(0+256)+7)
 13517                           
 13518                           ;RF_Control_B1.c: 160: RF_Data[8] = product->Data[8];
 13519  052F  0020               	movlb	0	; select bank0
 13520  0530  086E               	movf	_product,w
 13521  0531  0086               	movwf	6
 13522  0532  3001               	movlw	1	; select bank2/3
 13523  0533  0087               	movwf	7
 13524  0534  3001               	movlw	1	; select bank2/3
 13525  0535  3F48               	moviw [8]fsr1
 13526  0536  0022               	movlb	2	; select bank2
 13527  0537  00A8               	movwf	(_RF_Data^(0+256)+8)
 13528                           
 13529                           ;RF_Control_B1.c: 161: RF_Data[9] = product->Data[9];
 13530  0538  0020               	movlb	0	; select bank0
 13531  0539  086E               	movf	_product,w
 13532  053A  0086               	movwf	6
 13533  053B  3001               	movlw	1	; select bank2/3
 13534  053C  0087               	movwf	7
 13535  053D  3001               	movlw	1	; select bank2/3
 13536  053E  3F49               	moviw [9]fsr1
 13537  053F  0022               	movlb	2	; select bank2
 13538  0540  00A9               	movwf	(_RF_Data^(0+256)+9)
 13539                           
 13540                           ;RF_Control_B1.c: 162: RF_Data[10] = product->Data[10];
 13541  0541  0020               	movlb	0	; select bank0
 13542  0542  086E               	movf	_product,w
 13543  0543  0086               	movwf	6
 13544  0544  3001               	movlw	1	; select bank2/3
 13545  0545  0087               	movwf	7
 13546  0546  3001               	movlw	1	; select bank2/3
 13547  0547  3F4A               	moviw [10]fsr1
 13548  0548  0022               	movlb	2	; select bank2
 13549  0549  00AA               	movwf	(_RF_Data^(0+256)+10)
 13550                           
 13551                           ;RF_Control_B1.c: 163: RF_Data[11] = product->Data[11];
 13552  054A  0020               	movlb	0	; select bank0
 13553  054B  086E               	movf	_product,w
 13554  054C  0086               	movwf	6
 13555  054D  3001               	movlw	1	; select bank2/3
 13556  054E  0087               	movwf	7
 13557  054F  3001               	movlw	1	; select bank2/3
 13558  0550  3F4B               	moviw [11]fsr1
 13559  0551  0022               	movlb	2	; select bank2
 13560  0552  00AB               	movwf	(_RF_Data^(0+256)+11)
 13561                           
 13562                           ;RF_Control_B1.c: 164: RF_Data[12] = product->Data[12];
 13563  0553  0020               	movlb	0	; select bank0
 13564  0554  086E               	movf	_product,w
 13565  0555  0086               	movwf	6
 13566  0556  3001               	movlw	1	; select bank2/3
 13567  0557  0087               	movwf	7
 13568  0558  3001               	movlw	1	; select bank2/3
 13569  0559  3F4C               	moviw [12]fsr1
 13570  055A  0022               	movlb	2	; select bank2
 13571  055B  00AC               	movwf	(_RF_Data^(0+256)+12)
 13572                           
 13573                           ;RF_Control_B1.c: 165: RF_Data[13] = product->Data[13];
 13574  055C  0020               	movlb	0	; select bank0
 13575  055D  086E               	movf	_product,w
 13576  055E  0086               	movwf	6
 13577  055F  3001               	movlw	1	; select bank2/3
 13578  0560  0087               	movwf	7
 13579  0561  3001               	movlw	1	; select bank2/3
 13580  0562  3F4D               	moviw [13]fsr1
 13581  0563  0022               	movlb	2	; select bank2
 13582  0564  00AD               	movwf	(_RF_Data^(0+256)+13)
 13583                           
 13584                           ;RF_Control_B1.c: 166: RF_Data[14] = product->Data[14];
 13585  0565  0020               	movlb	0	; select bank0
 13586  0566  086E               	movf	_product,w
 13587  0567  0086               	movwf	6
 13588  0568  3001               	movlw	1	; select bank2/3
 13589  0569  0087               	movwf	7
 13590  056A  3001               	movlw	1	; select bank2/3
 13591  056B  3F4E               	moviw [14]fsr1
 13592  056C  0022               	movlb	2	; select bank2
 13593  056D  00AE               	movwf	(_RF_Data^(0+256)+14)
 13594                           
 13595                           ;RF_Control_B1.c: 167: RF_Data[15] = product->Data[15];
 13596  056E  0020               	movlb	0	; select bank0
 13597  056F  086E               	movf	_product,w
 13598  0570  0086               	movwf	6
 13599  0571  3001               	movlw	1	; select bank2/3
 13600  0572  0087               	movwf	7
 13601  0573  3001               	movlw	1	; select bank2/3
 13602  0574  3F4F               	moviw [15]fsr1
 13603  0575  0022               	movlb	2	; select bank2
 13604  0576  00AF               	movwf	(_RF_Data^(0+256)+15)
 13605                           
 13606                           ;RF_Control_B1.c: 168: RF_Data[16] = product->Data[16];
 13607  0577  0020               	movlb	0	; select bank0
 13608  0578  086E               	movf	_product,w
 13609  0579  0086               	movwf	6
 13610  057A  3001               	movlw	1	; select bank2/3
 13611  057B  0087               	movwf	7
 13612  057C  3001               	movlw	1	; select bank2/3
 13613  057D  3F50               	moviw [16]fsr1
 13614  057E  0022               	movlb	2	; select bank2
 13615  057F  00B0               	movwf	(_RF_Data^(0+256)+16)
 13616                           
 13617                           ;RF_Control_B1.c: 169: RF_Data[17] = product->Data[17];
 13618  0580  0020               	movlb	0	; select bank0
 13619  0581  086E               	movf	_product,w
 13620  0582  0086               	movwf	6
 13621  0583  3001               	movlw	1	; select bank2/3
 13622  0584  0087               	movwf	7
 13623  0585  3001               	movlw	1	; select bank2/3
 13624  0586  3F51               	moviw [17]fsr1
 13625  0587  0022               	movlb	2	; select bank2
 13626  0588  00B1               	movwf	(_RF_Data^(0+256)+17)
 13627                           
 13628                           ;RF_Control_B1.c: 170: RF_Data[18] = product->Data[18];
 13629  0589  0020               	movlb	0	; select bank0
 13630  058A  086E               	movf	_product,w
 13631  058B  0086               	movwf	6
 13632  058C  3001               	movlw	1	; select bank2/3
 13633  058D  0087               	movwf	7
 13634  058E  3001               	movlw	1	; select bank2/3
 13635  058F  3F52               	moviw [18]fsr1
 13636  0590  0022               	movlb	2	; select bank2
 13637  0591  00B2               	movwf	(_RF_Data^(0+256)+18)
 13638                           
 13639                           ;RF_Control_B1.c: 171: RF_Data[19] = product->Data[19];
 13640  0592  0020               	movlb	0	; select bank0
 13641  0593  086E               	movf	_product,w
 13642  0594  0086               	movwf	6
 13643  0595  3001               	movlw	1	; select bank2/3
 13644  0596  0087               	movwf	7
 13645  0597  3001               	movlw	1	; select bank2/3
 13646  0598  3F53               	moviw [19]fsr1
 13647  0599  0022               	movlb	2	; select bank2
 13648  059A  00B3               	movwf	(_RF_Data^(0+256)+19)
 13649                           
 13650                           ;RF_Control_B1.c: 172: RF_Data[20] = 209;
 13651  059B  30D1               	movlw	209
 13652  059C  0020               	movlb	0	; select bank0
 13653  059D  00A0               	movwf	??_setTxData
 13654  059E  0820               	movf	??_setTxData,w
 13655  059F  0022               	movlb	2	; select bank2
 13656  05A0  00B4               	movwf	(_RF_Data^(0+256)+20)
 13657  05A1  0008               	return
 13658  05A2                     __end_of_setTxData:	
 13659                           
 13660                           	psect	text90
 13661  1F56                     __ptext90:	
 13662 ;; *************** function _setSw_Status *****************
 13663 ;; Defined at:
 13664 ;;		line 111 in file "../src/Switch_B1.c"
 13665 ;; Parameters:    Size  Location     Type
 13666 ;;  sw              1    wreg     unsigned char 
 13667 ;;  command         1    2[BANK0 ] unsigned char 
 13668 ;; Auto vars:     Size  Location     Type
 13669 ;;  sw              1    3[BANK0 ] unsigned char 
 13670 ;; Return value:  Size  Location     Type
 13671 ;;		None               void
 13672 ;; Registers used:
 13673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13674 ;; Tracked objects:
 13675 ;;		On entry : 0/0
 13676 ;;		On exit  : 0/0
 13677 ;;		Unchanged: 0/0
 13678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13683 ;;Total ram usage:        2 bytes
 13684 ;; Hardware stack levels used:    1
 13685 ;; Hardware stack levels required when called:    6
 13686 ;; This function calls:
 13687 ;;		_SwPointSelect
 13688 ;; This function is called by:
 13689 ;;		_DlyOff_Main
 13690 ;;		_setDimmerLights_ERROR
 13691 ;;		_setControl_Lights_Table
 13692 ;;		_setRFSW_Control
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           
 13697                           ;psect for function _setSw_Status
 13698  1F56                     _setSw_Status:	
 13699                           
 13700                           ;incstack = 0
 13701                           ; Regs used in _setSw_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13702                           ;setSw_Status@sw stored from wreg
 13703  1F56  0020               	movlb	0	; select bank0
 13704  1F57  00A3               	movwf	setSw_Status@sw
 13705                           
 13706                           ;Switch_B1.c: 112: SwPointSelect(sw);
 13707  1F58  0823               	movf	setSw_Status@sw,w
 13708  1F59  319E  26CC         	fcall	_SwPointSelect
 13709                           
 13710                           ;Switch_B1.c: 113: Sw->Status = command;
 13711  1F5B  0020               	movlb	0	; select bank0
 13712  1F5C  086D               	movf	_Sw,w
 13713  1F5D  0086               	movwf	6
 13714  1F5E  3001               	movlw	1	; select bank2/3
 13715  1F5F  0087               	movwf	7
 13716  1F60  0822               	movf	setSw_Status@command,w
 13717  1F61  1301               	bcf	1,6
 13718  1F62  1D03               	skipz
 13719  1F63  1701               	bsf	1,6
 13720  1F64  0008               	return
 13721  1F65                     __end_of_setSw_Status:	
 13722                           
 13723                           	psect	text91
 13724  1ECC                     __ptext91:	
 13725 ;; *************** function _SwPointSelect *****************
 13726 ;; Defined at:
 13727 ;;		line 21 in file "../src/Switch_B1.c"
 13728 ;; Parameters:    Size  Location     Type
 13729 ;;  sw              1    wreg     unsigned char 
 13730 ;; Auto vars:     Size  Location     Type
 13731 ;;  sw              1    1[BANK0 ] unsigned char 
 13732 ;; Return value:  Size  Location     Type
 13733 ;;		None               void
 13734 ;; Registers used:
 13735 ;;		wreg
 13736 ;; Tracked objects:
 13737 ;;		On entry : 0/0
 13738 ;;		On exit  : 0/0
 13739 ;;		Unchanged: 0/0
 13740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13743 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13744 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13745 ;;Total ram usage:        2 bytes
 13746 ;; Hardware stack levels used:    1
 13747 ;; Hardware stack levels required when called:    5
 13748 ;; This function calls:
 13749 ;;		Nothing
 13750 ;; This function is called by:
 13751 ;;		_setSw_Enable
 13752 ;;		_setSw_Status
 13753 ;;		_setSw_Main
 13754 ;;		_Sw_Detect
 13755 ;; This function uses a non-reentrant model
 13756 ;;
 13757                           
 13758                           
 13759                           ;psect for function _SwPointSelect
 13760  1ECC                     _SwPointSelect:	
 13761                           
 13762                           ;incstack = 0
 13763                           ; Regs used in _SwPointSelect: [wreg]
 13764                           ;SwPointSelect@sw stored from wreg
 13765  1ECC  0020               	movlb	0	; select bank0
 13766  1ECD  00A1               	movwf	SwPointSelect@sw
 13767                           
 13768                           ;Switch_B1.c: 24: if (sw == 1) {
 13769  1ECE  0821               	movf	SwPointSelect@sw,w
 13770  1ECF  3A01               	xorlw	1
 13771  1ED0  1D03               	skipz
 13772  1ED1  0008               	return
 13773                           
 13774                           ;Switch_B1.c: 25: Sw = &Sw1;
 13775  1ED2  30CF               	movlw	_Sw1& (0+255)
 13776  1ED3  00A0               	movwf	??_SwPointSelect
 13777  1ED4  0820               	movf	??_SwPointSelect,w
 13778  1ED5  00ED               	movwf	_Sw
 13779  1ED6  0008               	return
 13780  1ED7                     __end_of_SwPointSelect:	
 13781                           
 13782                           	psect	text92
 13783  0CA1                     __ptext92:	
 13784 ;; *************** function _setRF_DimmerLights *****************
 13785 ;; Defined at:
 13786 ;;		line 394 in file "../src/RF_Control_B1.c"
 13787 ;; Parameters:    Size  Location     Type
 13788 ;;  lights          1    wreg     unsigned char 
 13789 ;;  on              1   61[BANK0 ] unsigned char 
 13790 ;; Auto vars:     Size  Location     Type
 13791 ;;  lights          1   65[BANK0 ] unsigned char 
 13792 ;;  status          1   64[BANK0 ] unsigned char 
 13793 ;; Return value:  Size  Location     Type
 13794 ;;		None               void
 13795 ;; Registers used:
 13796 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13797 ;; Tracked objects:
 13798 ;;		On entry : 0/0
 13799 ;;		On exit  : 0/0
 13800 ;;		Unchanged: 0/0
 13801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13802 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;Total ram usage:        5 bytes
 13807 ;; Hardware stack levels used:    1
 13808 ;; Hardware stack levels required when called:    8
 13809 ;; This function calls:
 13810 ;;		_setPercentValue
 13811 ;; This function is called by:
 13812 ;;		_DlyOff_Main
 13813 ;;		_setDimmerLights_Adj
 13814 ;;		_setRFSW_Control
 13815 ;;		_Sw_DimmerOnFunc
 13816 ;;		_Sw_DimmerOffFunc
 13817 ;; This function uses a non-reentrant model
 13818 ;;
 13819                           
 13820                           
 13821                           ;psect for function _setRF_DimmerLights
 13822  0CA1                     _setRF_DimmerLights:	
 13823                           
 13824                           ;incstack = 0
 13825                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13826                           ;setRF_DimmerLights@lights stored from wreg
 13827  0CA1  0020               	movlb	0	; select bank0
 13828  0CA2  00E1               	movwf	setRF_DimmerLights@lights
 13829                           
 13830                           ;RF_Control_B1.c: 395: char status;
 13831                           ;RF_Control_B1.c: 396: status = 1;
 13832  0CA3  01E0               	clrf	setRF_DimmerLights@status
 13833  0CA4  0AE0               	incf	setRF_DimmerLights@status,f
 13834                           
 13835                           ;RF_Control_B1.c: 397: status <<= (lights - 1);
 13836  0CA5  0861               	movf	setRF_DimmerLights@lights,w
 13837  0CA6  3EFF               	addlw	-1
 13838  0CA7  0A89               	incf	9,f
 13839  0CA8  2CAB               	goto	u7210
 13840  0CA9                     u7215:	
 13841  0CA9  1003               	clrc
 13842  0CAA  0DE0               	rlf	setRF_DimmerLights@status,f
 13843  0CAB                     u7210:	
 13844  0CAB  3EFF               	addlw	-1
 13845  0CAC  1D03               	skipz
 13846  0CAD  2CA9               	goto	u7215
 13847                           
 13848                           ;RF_Control_B1.c: 398: product->Data[11]=lights;
 13849  0CAE  0861               	movf	setRF_DimmerLights@lights,w
 13850  0CAF  00DE               	movwf	??_setRF_DimmerLights
 13851  0CB0  086E               	movf	_product,w
 13852  0CB1  3E0B               	addlw	11
 13853  0CB2  0086               	movwf	6
 13854  0CB3  3001               	movlw	1	; select bank2/3
 13855  0CB4  0087               	movwf	7
 13856  0CB5  085E               	movf	??_setRF_DimmerLights,w
 13857  0CB6  0081               	movwf	1
 13858                           
 13859                           ;RF_Control_B1.c: 401: product->Data[(20 + lights)]=setPercentValue(((char)((100-60)*0.8
      +                          )));
 13860  0CB7  3020               	movlw	32
 13861  0CB8  3196  264E  318C   	fcall	_setPercentValue
 13862  0CBB  0020               	movlb	0	; select bank0
 13863  0CBC  00DE               	movwf	??_setRF_DimmerLights
 13864  0CBD  0861               	movf	setRF_DimmerLights@lights,w
 13865  0CBE  3E14               	addlw	20
 13866  0CBF  076E               	addwf	_product,w
 13867  0CC0  00DF               	movwf	??_setRF_DimmerLights+1
 13868  0CC1  085F               	movf	??_setRF_DimmerLights+1,w
 13869  0CC2  0086               	movwf	6
 13870  0CC3  3001               	movlw	1	; select bank2/3
 13871  0CC4  0087               	movwf	7
 13872  0CC5  085E               	movf	??_setRF_DimmerLights,w
 13873  0CC6  0081               	movwf	1
 13874                           
 13875                           ;RF_Control_B1.c: 404: product->Data[9]=product->Data[20 + lights];
 13876  0CC7  0861               	movf	setRF_DimmerLights@lights,w
 13877  0CC8  3E14               	addlw	20
 13878  0CC9  076E               	addwf	_product,w
 13879  0CCA  00DE               	movwf	??_setRF_DimmerLights
 13880  0CCB  085E               	movf	??_setRF_DimmerLights,w
 13881  0CCC  0086               	movwf	6
 13882  0CCD  3001               	movlw	1	; select bank2/3
 13883  0CCE  0087               	movwf	7
 13884  0CCF  0801               	movf	1,w
 13885  0CD0  00DF               	movwf	??_setRF_DimmerLights+1
 13886  0CD1  086E               	movf	_product,w
 13887  0CD2  3E09               	addlw	9
 13888  0CD3  0086               	movwf	6
 13889  0CD4  3001               	movlw	1	; select bank2/3
 13890  0CD5  0087               	movwf	7
 13891  0CD6  085F               	movf	??_setRF_DimmerLights+1,w
 13892  0CD7  0081               	movwf	1
 13893                           
 13894                           ;RF_Control_B1.c: 405: product->Data[17]=product->Data[26 + lights];
 13895  0CD8  0861               	movf	setRF_DimmerLights@lights,w
 13896  0CD9  3E1A               	addlw	26
 13897  0CDA  076E               	addwf	_product,w
 13898  0CDB  00DE               	movwf	??_setRF_DimmerLights
 13899  0CDC  085E               	movf	??_setRF_DimmerLights,w
 13900  0CDD  0086               	movwf	6
 13901  0CDE  3001               	movlw	1	; select bank2/3
 13902  0CDF  0087               	movwf	7
 13903  0CE0  0801               	movf	1,w
 13904  0CE1  00DF               	movwf	??_setRF_DimmerLights+1
 13905  0CE2  086E               	movf	_product,w
 13906  0CE3  3E11               	addlw	17
 13907  0CE4  0086               	movwf	6
 13908  0CE5  3001               	movlw	1	; select bank2/3
 13909  0CE6  0087               	movwf	7
 13910  0CE7  085F               	movf	??_setRF_DimmerLights+1,w
 13911  0CE8  0081               	movwf	1
 13912                           
 13913                           ;RF_Control_B1.c: 406: if (on == 1) {
 13914  0CE9  085D               	movf	setRF_DimmerLights@on,w
 13915  0CEA  3A01               	xorlw	1
 13916  0CEB  1D03               	skipz
 13917  0CEC  2CFD               	goto	l7639
 13918                           
 13919                           ;RF_Control_B1.c: 407: product->Data[15]=(product->Data[15] | status);
 13920  0CED  086E               	movf	_product,w
 13921  0CEE  3E0F               	addlw	15
 13922  0CEF  0086               	movwf	6
 13923  0CF0  3001               	movlw	1	; select bank2/3
 13924  0CF1  0087               	movwf	7
 13925  0CF2  0801               	movf	1,w
 13926  0CF3  0460               	iorwf	setRF_DimmerLights@status,w
 13927  0CF4  00DE               	movwf	??_setRF_DimmerLights
 13928  0CF5  086E               	movf	_product,w
 13929  0CF6  3E0F               	addlw	15
 13930  0CF7  0086               	movwf	6
 13931  0CF8  3001               	movlw	1	; select bank2/3
 13932  0CF9  0087               	movwf	7
 13933  0CFA  085E               	movf	??_setRF_DimmerLights,w
 13934  0CFB  0081               	movwf	1
 13935                           
 13936                           ;RF_Control_B1.c: 408: } else {
 13937  0CFC  0008               	return
 13938  0CFD                     l7639:	
 13939                           
 13940                           ;RF_Control_B1.c: 409: product->Data[15]=(product->Data[15]&(~status));
 13941  0CFD  086E               	movf	_product,w
 13942  0CFE  3E0F               	addlw	15
 13943  0CFF  0086               	movwf	6
 13944  0D00  3001               	movlw	1	; select bank2/3
 13945  0D01  0087               	movwf	7
 13946  0D02  0960               	comf	setRF_DimmerLights@status,w
 13947  0D03  0501               	andwf	1,w
 13948  0D04  00DE               	movwf	??_setRF_DimmerLights
 13949  0D05  086E               	movf	_product,w
 13950  0D06  3E0F               	addlw	15
 13951  0D07  0086               	movwf	6
 13952  0D08  3001               	movlw	1	; select bank2/3
 13953  0D09  0087               	movwf	7
 13954  0D0A  085E               	movf	??_setRF_DimmerLights,w
 13955  0D0B  0081               	movwf	1
 13956  0D0C  0008               	return
 13957  0D0D                     __end_of_setRF_DimmerLights:	
 13958                           
 13959                           	psect	text93
 13960  164E                     __ptext93:	
 13961 ;; *************** function _setPercentValue *****************
 13962 ;; Defined at:
 13963 ;;		line 779 in file "../src/Dimmer_B1.c"
 13964 ;; Parameters:    Size  Location     Type
 13965 ;;  value           1    wreg     unsigned char 
 13966 ;; Auto vars:     Size  Location     Type
 13967 ;;  value           1   57[BANK0 ] unsigned char 
 13968 ;;  i               3   58[BANK0 ] float 
 13969 ;; Return value:  Size  Location     Type
 13970 ;;                  1    wreg      unsigned char 
 13971 ;; Registers used:
 13972 ;;		wreg, status,2, status,0, pclath, cstack
 13973 ;; Tracked objects:
 13974 ;;		On entry : 0/0
 13975 ;;		On exit  : 0/0
 13976 ;;		Unchanged: 0/0
 13977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13979 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13981 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;Total ram usage:        4 bytes
 13983 ;; Hardware stack levels used:    1
 13984 ;; Hardware stack levels required when called:    7
 13985 ;; This function calls:
 13986 ;;		___awtoft
 13987 ;;		___ftdiv
 13988 ;;		___fttol
 13989 ;; This function is called by:
 13990 ;;		_Flash_Memory_Initialization
 13991 ;;		_setRF_DimmerLights
 13992 ;; This function uses a non-reentrant model
 13993 ;;
 13994                           
 13995                           
 13996                           ;psect for function _setPercentValue
 13997  164E                     _setPercentValue:	
 13998                           
 13999                           ;incstack = 0
 14000                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 14001                           ;setPercentValue@value stored from wreg
 14002  164E  0020               	movlb	0	; select bank0
 14003  164F  00D9               	movwf	setPercentValue@value
 14004                           
 14005                           ;Dimmer_B1.c: 781: float i = ((char)((100-25)*0.8)) - ((char)((100-60)*0.8));
 14006  1650  3000               	movlw	0
 14007  1651  00DA               	movwf	setPercentValue@i
 14008  1652  30E0               	movlw	224
 14009  1653  00DB               	movwf	setPercentValue@i+1
 14010  1654  3041               	movlw	65
 14011  1655  00DC               	movwf	setPercentValue@i+2
 14012                           
 14013                           ;Dimmer_B1.c: 782: i /= 100;
 14014  1656  3000               	movlw	0
 14015  1657  00AE               	movwf	___ftdiv@f2
 14016  1658  30C8               	movlw	200
 14017  1659  00AF               	movwf	___ftdiv@f2+1
 14018  165A  3042               	movlw	66
 14019  165B  00B0               	movwf	___ftdiv@f2+2
 14020  165C  085A               	movf	setPercentValue@i,w
 14021  165D  00B1               	movwf	___ftdiv@f1
 14022  165E  085B               	movf	setPercentValue@i+1,w
 14023  165F  00B2               	movwf	___ftdiv@f1+1
 14024  1660  085C               	movf	setPercentValue@i+2,w
 14025  1661  00B3               	movwf	___ftdiv@f1+2
 14026  1662  3186  2656  3196   	fcall	___ftdiv
 14027  1665  0020               	movlb	0	; select bank0
 14028  1666  082E               	movf	?___ftdiv,w
 14029  1667  00DA               	movwf	setPercentValue@i
 14030  1668  082F               	movf	?___ftdiv+1,w
 14031  1669  00DB               	movwf	setPercentValue@i+1
 14032  166A  0830               	movf	?___ftdiv+2,w
 14033  166B  00DC               	movwf	setPercentValue@i+2
 14034                           
 14035                           ;Dimmer_B1.c: 783: return (100 - (char) ((value - ((char)((100-60)*0.8))) / i));
 14036  166C  0859               	movf	setPercentValue@value,w
 14037  166D  3EE0               	addlw	224
 14038  166E  00A8               	movwf	___awtoft@c
 14039  166F  30FF               	movlw	255
 14040  1670  1803               	skipnc
 14041  1671  3000               	movlw	0
 14042  1672  00A9               	movwf	___awtoft@c+1
 14043  1673  3192  2220  3196   	fcall	___awtoft
 14044  1676  0020               	movlb	0	; select bank0
 14045  1677  0828               	movf	?___awtoft,w
 14046  1678  00B1               	movwf	___ftdiv@f1
 14047  1679  0829               	movf	?___awtoft+1,w
 14048  167A  00B2               	movwf	___ftdiv@f1+1
 14049  167B  082A               	movf	?___awtoft+2,w
 14050  167C  00B3               	movwf	___ftdiv@f1+2
 14051  167D  085A               	movf	setPercentValue@i,w
 14052  167E  00AE               	movwf	___ftdiv@f2
 14053  167F  085B               	movf	setPercentValue@i+1,w
 14054  1680  00AF               	movwf	___ftdiv@f2+1
 14055  1681  085C               	movf	setPercentValue@i+2,w
 14056  1682  00B0               	movwf	___ftdiv@f2+2
 14057  1683  3186  2656  3196   	fcall	___ftdiv
 14058  1686  0020               	movlb	0	; select bank0
 14059  1687  082E               	movf	?___ftdiv,w
 14060  1688  00CB               	movwf	___fttol@f1
 14061  1689  082F               	movf	?___ftdiv+1,w
 14062  168A  00CC               	movwf	___fttol@f1+1
 14063  168B  0830               	movf	?___ftdiv+2,w
 14064  168C  00CD               	movwf	___fttol@f1+2
 14065  168D  318F  2779         	fcall	___fttol
 14066  168F  0020               	movlb	0	; select bank0
 14067  1690  034B               	decf	?___fttol,w
 14068  1691  3AFF               	xorlw	255
 14069  1692  3E64               	addlw	100
 14070  1693  0008               	return
 14071  1694                     __end_of_setPercentValue:	
 14072                           
 14073                           	psect	text94
 14074  0F79                     __ptext94:	
 14075 ;; *************** function ___fttol *****************
 14076 ;; Defined at:
 14077 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 14078 ;; Parameters:    Size  Location     Type
 14079 ;;  f1              3   43[BANK0 ] float 
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;  lval            4   52[BANK0 ] unsigned long 
 14082 ;;  exp1            1   56[BANK0 ] unsigned char 
 14083 ;;  sign1           1   51[BANK0 ] unsigned char 
 14084 ;; Return value:  Size  Location     Type
 14085 ;;                  4   43[BANK0 ] long 
 14086 ;; Registers used:
 14087 ;;		wreg, status,2, status,0
 14088 ;; Tracked objects:
 14089 ;;		On entry : 0/0
 14090 ;;		On exit  : 0/0
 14091 ;;		Unchanged: 0/0
 14092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14093 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14094 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14095 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14096 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14097 ;;Total ram usage:       14 bytes
 14098 ;; Hardware stack levels used:    1
 14099 ;; Hardware stack levels required when called:    5
 14100 ;; This function calls:
 14101 ;;		Nothing
 14102 ;; This function is called by:
 14103 ;;		_getPercentValue
 14104 ;;		_setPercentValue
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           
 14109                           ;psect for function ___fttol
 14110  0F79                     ___fttol:	
 14111                           
 14112                           ;incstack = 0
 14113                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14114  0F79  0020               	movlb	0	; select bank0
 14115  0F7A  084B               	movf	___fttol@f1,w
 14116  0F7B  00CF               	movwf	??___fttol
 14117  0F7C  084C               	movf	___fttol@f1+1,w
 14118  0F7D  00D0               	movwf	??___fttol+1
 14119  0F7E  084D               	movf	___fttol@f1+2,w
 14120  0F7F  00D1               	movwf	??___fttol+2
 14121  0F80  1003               	clrc
 14122  0F81  0D50               	rlf	??___fttol+1,w
 14123  0F82  0D51               	rlf	??___fttol+2,w
 14124  0F83  00D2               	movwf	??___fttol+3
 14125  0F84  0852               	movf	??___fttol+3,w
 14126  0F85  00D8               	movwf	___fttol@exp1
 14127  0F86  08D8               	movf	___fttol@exp1,f
 14128  0F87  1D03               	skipz
 14129  0F88  2F92               	goto	l5401
 14130  0F89  3000               	movlw	0
 14131  0F8A  00CE               	movwf	?___fttol+3
 14132  0F8B  3000               	movlw	0
 14133  0F8C  00CD               	movwf	?___fttol+2
 14134  0F8D  3000               	movlw	0
 14135  0F8E  00CC               	movwf	?___fttol+1
 14136  0F8F  3000               	movlw	0
 14137  0F90  00CB               	movwf	?___fttol
 14138  0F91  0008               	return
 14139  0F92                     l5401:	
 14140  0F92  084B               	movf	___fttol@f1,w
 14141  0F93  00CF               	movwf	??___fttol
 14142  0F94  084C               	movf	___fttol@f1+1,w
 14143  0F95  00D0               	movwf	??___fttol+1
 14144  0F96  084D               	movf	___fttol@f1+2,w
 14145  0F97  00D1               	movwf	??___fttol+2
 14146  0F98  3017               	movlw	23
 14147  0F99                     u4045:	
 14148  0F99  36D1               	lsrf	??___fttol+2,f
 14149  0F9A  0CD0               	rrf	??___fttol+1,f
 14150  0F9B  0CCF               	rrf	??___fttol,f
 14151  0F9C  0B89               	decfsz	9,f
 14152  0F9D  2F99               	goto	u4045
 14153  0F9E  084F               	movf	??___fttol,w
 14154  0F9F  00D2               	movwf	??___fttol+3
 14155  0FA0  0852               	movf	??___fttol+3,w
 14156  0FA1  00D3               	movwf	___fttol@sign1
 14157  0FA2  17CC               	bsf	___fttol@f1+1,7
 14158  0FA3  30FF               	movlw	255
 14159  0FA4  05CB               	andwf	___fttol@f1,f
 14160  0FA5  30FF               	movlw	255
 14161  0FA6  05CC               	andwf	___fttol@f1+1,f
 14162  0FA7  3000               	movlw	0
 14163  0FA8  05CD               	andwf	___fttol@f1+2,f
 14164  0FA9  084B               	movf	___fttol@f1,w
 14165  0FAA  00D4               	movwf	___fttol@lval
 14166  0FAB  084C               	movf	___fttol@f1+1,w
 14167  0FAC  00D5               	movwf	___fttol@lval+1
 14168  0FAD  084D               	movf	___fttol@f1+2,w
 14169  0FAE  00D6               	movwf	___fttol@lval+2
 14170  0FAF  01D7               	clrf	___fttol@lval+3
 14171  0FB0  308E               	movlw	142
 14172  0FB1  02D8               	subwf	___fttol@exp1,f
 14173  0FB2  1FD8               	btfss	___fttol@exp1,7
 14174  0FB3  2FD0               	goto	l5421
 14175  0FB4  0858               	movf	___fttol@exp1,w
 14176  0FB5  3A80               	xorlw	128
 14177  0FB6  3E8F               	addlw	143
 14178  0FB7  1803               	skipnc
 14179  0FB8  2FC2               	goto	l5419
 14180  0FB9  3000               	movlw	0
 14181  0FBA  00CE               	movwf	?___fttol+3
 14182  0FBB  3000               	movlw	0
 14183  0FBC  00CD               	movwf	?___fttol+2
 14184  0FBD  3000               	movlw	0
 14185  0FBE  00CC               	movwf	?___fttol+1
 14186  0FBF  3000               	movlw	0
 14187  0FC0  00CB               	movwf	?___fttol
 14188  0FC1  0008               	return
 14189  0FC2                     l5419:	
 14190  0FC2  3001               	movlw	1
 14191  0FC3                     u4075:	
 14192  0FC3  36D7               	lsrf	___fttol@lval+3,f
 14193  0FC4  0CD6               	rrf	___fttol@lval+2,f
 14194  0FC5  0CD5               	rrf	___fttol@lval+1,f
 14195  0FC6  0CD4               	rrf	___fttol@lval,f
 14196  0FC7  0B89               	decfsz	9,f
 14197  0FC8  2FC3               	goto	u4075
 14198  0FC9  3001               	movlw	1
 14199  0FCA  00CF               	movwf	??___fttol
 14200  0FCB  084F               	movf	??___fttol,w
 14201  0FCC  07D8               	addwf	___fttol@exp1,f
 14202  0FCD  1903               	btfsc	3,2
 14203  0FCE  2FE9               	goto	l5431
 14204  0FCF  2FC2               	goto	l5419
 14205  0FD0                     l5421:	
 14206  0FD0  3018               	movlw	24
 14207  0FD1  0258               	subwf	___fttol@exp1,w
 14208  0FD2  1C03               	skipc
 14209  0FD3  2FE6               	goto	l5429
 14210  0FD4  3000               	movlw	0
 14211  0FD5  00CE               	movwf	?___fttol+3
 14212  0FD6  3000               	movlw	0
 14213  0FD7  00CD               	movwf	?___fttol+2
 14214  0FD8  3000               	movlw	0
 14215  0FD9  00CC               	movwf	?___fttol+1
 14216  0FDA  3000               	movlw	0
 14217  0FDB  00CB               	movwf	?___fttol
 14218  0FDC  0008               	return
 14219  0FDD                     l5427:	
 14220  0FDD  3001               	movlw	1
 14221  0FDE                     u4105:	
 14222  0FDE  35D4               	lslf	___fttol@lval,f
 14223  0FDF  0DD5               	rlf	___fttol@lval+1,f
 14224  0FE0  0DD6               	rlf	___fttol@lval+2,f
 14225  0FE1  0DD7               	rlf	___fttol@lval+3,f
 14226  0FE2  0B89               	decfsz	9,f
 14227  0FE3  2FDE               	goto	u4105
 14228  0FE4  3001               	movlw	1
 14229  0FE5  02D8               	subwf	___fttol@exp1,f
 14230  0FE6                     l5429:	
 14231  0FE6  08D8               	movf	___fttol@exp1,f
 14232  0FE7  1D03               	skipz
 14233  0FE8  2FDD               	goto	l5427
 14234  0FE9                     l5431:	
 14235  0FE9  0853               	movf	___fttol@sign1,w
 14236  0FEA  1903               	btfsc	3,2
 14237  0FEB  2FF7               	goto	l5435
 14238  0FEC  09D4               	comf	___fttol@lval,f
 14239  0FED  09D5               	comf	___fttol@lval+1,f
 14240  0FEE  09D6               	comf	___fttol@lval+2,f
 14241  0FEF  09D7               	comf	___fttol@lval+3,f
 14242  0FF0  0AD4               	incf	___fttol@lval,f
 14243  0FF1  1903               	skipnz
 14244  0FF2  0AD5               	incf	___fttol@lval+1,f
 14245  0FF3  1903               	skipnz
 14246  0FF4  0AD6               	incf	___fttol@lval+2,f
 14247  0FF5  1903               	skipnz
 14248  0FF6  0AD7               	incf	___fttol@lval+3,f
 14249  0FF7                     l5435:	
 14250  0FF7  0857               	movf	___fttol@lval+3,w
 14251  0FF8  00CE               	movwf	?___fttol+3
 14252  0FF9  0856               	movf	___fttol@lval+2,w
 14253  0FFA  00CD               	movwf	?___fttol+2
 14254  0FFB  0855               	movf	___fttol@lval+1,w
 14255  0FFC  00CC               	movwf	?___fttol+1
 14256  0FFD  0854               	movf	___fttol@lval,w
 14257  0FFE  00CB               	movwf	?___fttol
 14258  0FFF  0008               	return
 14259  1000                     __end_of___fttol:	
 14260                           
 14261                           	psect	text95
 14262  0656                     __ptext95:	
 14263 ;; *************** function ___ftdiv *****************
 14264 ;; Defined at:
 14265 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 14266 ;; Parameters:    Size  Location     Type
 14267 ;;  f2              3   14[BANK0 ] float 
 14268 ;;  f1              3   17[BANK0 ] float 
 14269 ;; Auto vars:     Size  Location     Type
 14270 ;;  f3              3   25[BANK0 ] float 
 14271 ;;  sign            1   29[BANK0 ] unsigned char 
 14272 ;;  exp             1   28[BANK0 ] unsigned char 
 14273 ;;  cntr            1   24[BANK0 ] unsigned char 
 14274 ;; Return value:  Size  Location     Type
 14275 ;;                  3   14[BANK0 ] float 
 14276 ;; Registers used:
 14277 ;;		wreg, status,2, status,0, pclath, cstack
 14278 ;; Tracked objects:
 14279 ;;		On entry : 0/0
 14280 ;;		On exit  : 0/0
 14281 ;;		Unchanged: 0/0
 14282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14283 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14284 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14285 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14286 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14287 ;;Total ram usage:       16 bytes
 14288 ;; Hardware stack levels used:    1
 14289 ;; Hardware stack levels required when called:    6
 14290 ;; This function calls:
 14291 ;;		___ftpack
 14292 ;; This function is called by:
 14293 ;;		_getPercentValue
 14294 ;;		_setPercentValue
 14295 ;; This function uses a non-reentrant model
 14296 ;;
 14297                           
 14298                           
 14299                           ;psect for function ___ftdiv
 14300  0656                     ___ftdiv:	
 14301                           
 14302                           ;incstack = 0
 14303                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 14304  0656  0020               	movlb	0	; select bank0
 14305  0657  0831               	movf	___ftdiv@f1,w
 14306  0658  00B4               	movwf	??___ftdiv
 14307  0659  0832               	movf	___ftdiv@f1+1,w
 14308  065A  00B5               	movwf	??___ftdiv+1
 14309  065B  0833               	movf	___ftdiv@f1+2,w
 14310  065C  00B6               	movwf	??___ftdiv+2
 14311  065D  1003               	clrc
 14312  065E  0D35               	rlf	??___ftdiv+1,w
 14313  065F  0D36               	rlf	??___ftdiv+2,w
 14314  0660  00B7               	movwf	??___ftdiv+3
 14315  0661  0837               	movf	??___ftdiv+3,w
 14316  0662  00BC               	movwf	___ftdiv@exp
 14317  0663  08BC               	movf	___ftdiv@exp,f
 14318  0664  1D03               	skipz
 14319  0665  2E6D               	goto	l5309
 14320  0666  3000               	movlw	0
 14321  0667  00AE               	movwf	?___ftdiv
 14322  0668  3000               	movlw	0
 14323  0669  00AF               	movwf	?___ftdiv+1
 14324  066A  3000               	movlw	0
 14325  066B  00B0               	movwf	?___ftdiv+2
 14326  066C  0008               	return
 14327  066D                     l5309:	
 14328  066D  082E               	movf	___ftdiv@f2,w
 14329  066E  00B4               	movwf	??___ftdiv
 14330  066F  082F               	movf	___ftdiv@f2+1,w
 14331  0670  00B5               	movwf	??___ftdiv+1
 14332  0671  0830               	movf	___ftdiv@f2+2,w
 14333  0672  00B6               	movwf	??___ftdiv+2
 14334  0673  1003               	clrc
 14335  0674  0D35               	rlf	??___ftdiv+1,w
 14336  0675  0D36               	rlf	??___ftdiv+2,w
 14337  0676  00B7               	movwf	??___ftdiv+3
 14338  0677  0837               	movf	??___ftdiv+3,w
 14339  0678  00BD               	movwf	___ftdiv@sign
 14340  0679  08BD               	movf	___ftdiv@sign,f
 14341  067A  1D03               	skipz
 14342  067B  2E83               	goto	l5315
 14343  067C  3000               	movlw	0
 14344  067D  00AE               	movwf	?___ftdiv
 14345  067E  3000               	movlw	0
 14346  067F  00AF               	movwf	?___ftdiv+1
 14347  0680  3000               	movlw	0
 14348  0681  00B0               	movwf	?___ftdiv+2
 14349  0682  0008               	return
 14350  0683                     l5315:	
 14351  0683  3000               	movlw	0
 14352  0684  00B9               	movwf	___ftdiv@f3
 14353  0685  3000               	movlw	0
 14354  0686  00BA               	movwf	___ftdiv@f3+1
 14355  0687  3000               	movlw	0
 14356  0688  00BB               	movwf	___ftdiv@f3+2
 14357  0689  3089               	movlw	137
 14358  068A  073D               	addwf	___ftdiv@sign,w
 14359  068B  00B4               	movwf	??___ftdiv
 14360  068C  0834               	movf	??___ftdiv,w
 14361  068D  02BC               	subwf	___ftdiv@exp,f
 14362  068E  0831               	movf	___ftdiv@f1,w
 14363  068F  00B4               	movwf	??___ftdiv
 14364  0690  0832               	movf	___ftdiv@f1+1,w
 14365  0691  00B5               	movwf	??___ftdiv+1
 14366  0692  0833               	movf	___ftdiv@f1+2,w
 14367  0693  00B6               	movwf	??___ftdiv+2
 14368  0694  3010               	movlw	16
 14369  0695                     u3855:	
 14370  0695  36B6               	lsrf	??___ftdiv+2,f
 14371  0696  0CB5               	rrf	??___ftdiv+1,f
 14372  0697  0CB4               	rrf	??___ftdiv,f
 14373  0698  0B89               	decfsz	9,f
 14374  0699  2E95               	goto	u3855
 14375  069A  0834               	movf	??___ftdiv,w
 14376  069B  00B7               	movwf	??___ftdiv+3
 14377  069C  0837               	movf	??___ftdiv+3,w
 14378  069D  00BD               	movwf	___ftdiv@sign
 14379  069E  082E               	movf	___ftdiv@f2,w
 14380  069F  00B4               	movwf	??___ftdiv
 14381  06A0  082F               	movf	___ftdiv@f2+1,w
 14382  06A1  00B5               	movwf	??___ftdiv+1
 14383  06A2  0830               	movf	___ftdiv@f2+2,w
 14384  06A3  00B6               	movwf	??___ftdiv+2
 14385  06A4  3010               	movlw	16
 14386  06A5                     u3865:	
 14387  06A5  36B6               	lsrf	??___ftdiv+2,f
 14388  06A6  0CB5               	rrf	??___ftdiv+1,f
 14389  06A7  0CB4               	rrf	??___ftdiv,f
 14390  06A8  0B89               	decfsz	9,f
 14391  06A9  2EA5               	goto	u3865
 14392  06AA  0834               	movf	??___ftdiv,w
 14393  06AB  00B7               	movwf	??___ftdiv+3
 14394  06AC  0837               	movf	??___ftdiv+3,w
 14395  06AD  06BD               	xorwf	___ftdiv@sign,f
 14396  06AE  3080               	movlw	128
 14397  06AF  00B4               	movwf	??___ftdiv
 14398  06B0  0834               	movf	??___ftdiv,w
 14399  06B1  05BD               	andwf	___ftdiv@sign,f
 14400  06B2  17B2               	bsf	___ftdiv@f1+1,7
 14401  06B3  30FF               	movlw	255
 14402  06B4  05B1               	andwf	___ftdiv@f1,f
 14403  06B5  30FF               	movlw	255
 14404  06B6  05B2               	andwf	___ftdiv@f1+1,f
 14405  06B7  3000               	movlw	0
 14406  06B8  05B3               	andwf	___ftdiv@f1+2,f
 14407  06B9  17AF               	bsf	___ftdiv@f2+1,7
 14408  06BA  30FF               	movlw	255
 14409  06BB  05AE               	andwf	___ftdiv@f2,f
 14410  06BC  30FF               	movlw	255
 14411  06BD  05AF               	andwf	___ftdiv@f2+1,f
 14412  06BE  3000               	movlw	0
 14413  06BF  05B0               	andwf	___ftdiv@f2+2,f
 14414  06C0  3018               	movlw	24
 14415  06C1  00B4               	movwf	??___ftdiv
 14416  06C2  0834               	movf	??___ftdiv,w
 14417  06C3  00B8               	movwf	___ftdiv@cntr
 14418  06C4                     l5329:	
 14419  06C4  3001               	movlw	1
 14420  06C5                     u3875:	
 14421  06C5  35B9               	lslf	___ftdiv@f3,f
 14422  06C6  0DBA               	rlf	___ftdiv@f3+1,f
 14423  06C7  0DBB               	rlf	___ftdiv@f3+2,f
 14424  06C8  0B89               	decfsz	9,f
 14425  06C9  2EC5               	goto	u3875
 14426  06CA  0830               	movf	___ftdiv@f2+2,w
 14427  06CB  0233               	subwf	___ftdiv@f1+2,w
 14428  06CC  1D03               	skipz
 14429  06CD  2ED4               	goto	u3885
 14430  06CE  082F               	movf	___ftdiv@f2+1,w
 14431  06CF  0232               	subwf	___ftdiv@f1+1,w
 14432  06D0  1D03               	skipz
 14433  06D1  2ED4               	goto	u3885
 14434  06D2  082E               	movf	___ftdiv@f2,w
 14435  06D3  0231               	subwf	___ftdiv@f1,w
 14436  06D4                     u3885:	
 14437  06D4  1C03               	skipc
 14438  06D5  2EDD               	goto	l5337
 14439  06D6  082E               	movf	___ftdiv@f2,w
 14440  06D7  02B1               	subwf	___ftdiv@f1,f
 14441  06D8  082F               	movf	___ftdiv@f2+1,w
 14442  06D9  3BB2               	subwfb	___ftdiv@f1+1,f
 14443  06DA  0830               	movf	___ftdiv@f2+2,w
 14444  06DB  3BB3               	subwfb	___ftdiv@f1+2,f
 14445  06DC  1439               	bsf	___ftdiv@f3,0
 14446  06DD                     l5337:	
 14447  06DD  3001               	movlw	1
 14448  06DE                     u3895:	
 14449  06DE  35B1               	lslf	___ftdiv@f1,f
 14450  06DF  0DB2               	rlf	___ftdiv@f1+1,f
 14451  06E0  0DB3               	rlf	___ftdiv@f1+2,f
 14452  06E1  0B89               	decfsz	9,f
 14453  06E2  2EDE               	goto	u3895
 14454  06E3  3001               	movlw	1
 14455  06E4  02B8               	subwf	___ftdiv@cntr,f
 14456  06E5  1D03               	btfss	3,2
 14457  06E6  2EC4               	goto	l5329
 14458  06E7  0839               	movf	___ftdiv@f3,w
 14459  06E8  00A0               	movwf	___ftpack@arg
 14460  06E9  083A               	movf	___ftdiv@f3+1,w
 14461  06EA  00A1               	movwf	___ftpack@arg+1
 14462  06EB  083B               	movf	___ftdiv@f3+2,w
 14463  06EC  00A2               	movwf	___ftpack@arg+2
 14464  06ED  083C               	movf	___ftdiv@exp,w
 14465  06EE  00B4               	movwf	??___ftdiv
 14466  06EF  0834               	movf	??___ftdiv,w
 14467  06F0  00A3               	movwf	___ftpack@exp
 14468  06F1  083D               	movf	___ftdiv@sign,w
 14469  06F2  00B5               	movwf	??___ftdiv+1
 14470  06F3  0835               	movf	??___ftdiv+1,w
 14471  06F4  00A4               	movwf	___ftpack@sign
 14472  06F5  318A  22A9         	fcall	___ftpack
 14473  06F7  0020               	movlb	0	; select bank0
 14474  06F8  0820               	movf	?___ftpack,w
 14475  06F9  00AE               	movwf	?___ftdiv
 14476  06FA  0821               	movf	?___ftpack+1,w
 14477  06FB  00AF               	movwf	?___ftdiv+1
 14478  06FC  0822               	movf	?___ftpack+2,w
 14479  06FD  00B0               	movwf	?___ftdiv+2
 14480  06FE  0008               	return
 14481  06FF                     __end_of___ftdiv:	
 14482                           
 14483                           	psect	text96
 14484  1220                     __ptext96:	
 14485 ;; *************** function ___awtoft *****************
 14486 ;; Defined at:
 14487 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14488 ;; Parameters:    Size  Location     Type
 14489 ;;  c               2    8[BANK0 ] int 
 14490 ;; Auto vars:     Size  Location     Type
 14491 ;;  sign            1   13[BANK0 ] unsigned char 
 14492 ;; Return value:  Size  Location     Type
 14493 ;;                  3    8[BANK0 ] float 
 14494 ;; Registers used:
 14495 ;;		wreg, status,2, status,0, pclath, cstack
 14496 ;; Tracked objects:
 14497 ;;		On entry : 0/0
 14498 ;;		On exit  : 0/0
 14499 ;;		Unchanged: 0/0
 14500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14501 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;Total ram usage:        6 bytes
 14506 ;; Hardware stack levels used:    1
 14507 ;; Hardware stack levels required when called:    6
 14508 ;; This function calls:
 14509 ;;		___ftpack
 14510 ;; This function is called by:
 14511 ;;		_getPercentValue
 14512 ;;		_setPercentValue
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           
 14517                           ;psect for function ___awtoft
 14518  1220                     ___awtoft:	
 14519                           
 14520                           ;incstack = 0
 14521                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14522  1220  0020               	movlb	0	; select bank0
 14523  1221  01AD               	clrf	___awtoft@sign
 14524  1222  1FA9               	btfss	___awtoft@c+1,7
 14525  1223  2A2B               	goto	l7455
 14526  1224  09A8               	comf	___awtoft@c,f
 14527  1225  09A9               	comf	___awtoft@c+1,f
 14528  1226  0AA8               	incf	___awtoft@c,f
 14529  1227  1903               	skipnz
 14530  1228  0AA9               	incf	___awtoft@c+1,f
 14531  1229  01AD               	clrf	___awtoft@sign
 14532  122A  0AAD               	incf	___awtoft@sign,f
 14533  122B                     l7455:	
 14534  122B  0828               	movf	___awtoft@c,w
 14535  122C  00A0               	movwf	___ftpack@arg
 14536  122D  0829               	movf	___awtoft@c+1,w
 14537  122E  00A1               	movwf	___ftpack@arg+1
 14538  122F  01A2               	clrf	___ftpack@arg+2
 14539  1230  308E               	movlw	142
 14540  1231  00AB               	movwf	??___awtoft
 14541  1232  082B               	movf	??___awtoft,w
 14542  1233  00A3               	movwf	___ftpack@exp
 14543  1234  082D               	movf	___awtoft@sign,w
 14544  1235  00AC               	movwf	??___awtoft+1
 14545  1236  082C               	movf	??___awtoft+1,w
 14546  1237  00A4               	movwf	___ftpack@sign
 14547  1238  318A  22A9         	fcall	___ftpack
 14548  123A  0020               	movlb	0	; select bank0
 14549  123B  0820               	movf	?___ftpack,w
 14550  123C  00A8               	movwf	?___awtoft
 14551  123D  0821               	movf	?___ftpack+1,w
 14552  123E  00A9               	movwf	?___awtoft+1
 14553  123F  0822               	movf	?___ftpack+2,w
 14554  1240  00AA               	movwf	?___awtoft+2
 14555  1241  0008               	return
 14556  1242                     __end_of___awtoft:	
 14557                           
 14558                           	psect	text97
 14559  0AA9                     __ptext97:	
 14560 ;; *************** function ___ftpack *****************
 14561 ;; Defined at:
 14562 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;  arg             3    0[BANK0 ] unsigned um
 14565 ;;  exp             1    3[BANK0 ] unsigned char 
 14566 ;;  sign            1    4[BANK0 ] unsigned char 
 14567 ;; Auto vars:     Size  Location     Type
 14568 ;;		None
 14569 ;; Return value:  Size  Location     Type
 14570 ;;                  3    0[BANK0 ] float 
 14571 ;; Registers used:
 14572 ;;		wreg, status,2, status,0
 14573 ;; Tracked objects:
 14574 ;;		On entry : 0/0
 14575 ;;		On exit  : 0/0
 14576 ;;		Unchanged: 0/0
 14577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14578 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14580 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;Total ram usage:        8 bytes
 14583 ;; Hardware stack levels used:    1
 14584 ;; Hardware stack levels required when called:    5
 14585 ;; This function calls:
 14586 ;;		Nothing
 14587 ;; This function is called by:
 14588 ;;		___awtoft
 14589 ;;		___ftadd
 14590 ;;		___ftdiv
 14591 ;;		___ftmul
 14592 ;; This function uses a non-reentrant model
 14593 ;;
 14594                           
 14595                           
 14596                           ;psect for function ___ftpack
 14597  0AA9                     ___ftpack:	
 14598                           
 14599                           ;incstack = 0
 14600                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14601  0AA9  0020               	movlb	0	; select bank0
 14602  0AAA  0823               	movf	___ftpack@exp,w
 14603  0AAB  1903               	btfsc	3,2
 14604  0AAC  2AB2               	goto	l5193
 14605  0AAD  0822               	movf	___ftpack@arg+2,w
 14606  0AAE  0421               	iorwf	___ftpack@arg+1,w
 14607  0AAF  0420               	iorwf	___ftpack@arg,w
 14608  0AB0  1D03               	skipz
 14609  0AB1  2AC3               	goto	l5199
 14610  0AB2                     l5193:	
 14611  0AB2  3000               	movlw	0
 14612  0AB3  00A0               	movwf	?___ftpack
 14613  0AB4  3000               	movlw	0
 14614  0AB5  00A1               	movwf	?___ftpack+1
 14615  0AB6  3000               	movlw	0
 14616  0AB7  00A2               	movwf	?___ftpack+2
 14617  0AB8  0008               	return
 14618  0AB9                     l5197:	
 14619  0AB9  3001               	movlw	1
 14620  0ABA  00A5               	movwf	??___ftpack
 14621  0ABB  0825               	movf	??___ftpack,w
 14622  0ABC  07A3               	addwf	___ftpack@exp,f
 14623  0ABD  3001               	movlw	1
 14624  0ABE                     u3505:	
 14625  0ABE  36A2               	lsrf	___ftpack@arg+2,f
 14626  0ABF  0CA1               	rrf	___ftpack@arg+1,f
 14627  0AC0  0CA0               	rrf	___ftpack@arg,f
 14628  0AC1  0B89               	decfsz	9,f
 14629  0AC2  2ABE               	goto	u3505
 14630  0AC3                     l5199:	
 14631  0AC3  30FE               	movlw	254
 14632  0AC4  0522               	andwf	___ftpack@arg+2,w
 14633  0AC5  1903               	btfsc	3,2
 14634  0AC6  2ADC               	goto	l2715
 14635  0AC7  2AB9               	goto	l5197
 14636  0AC8                     l5201:	
 14637  0AC8  3001               	movlw	1
 14638  0AC9  00A5               	movwf	??___ftpack
 14639  0ACA  0825               	movf	??___ftpack,w
 14640  0ACB  07A3               	addwf	___ftpack@exp,f
 14641  0ACC  3001               	movlw	1
 14642  0ACD  07A0               	addwf	___ftpack@arg,f
 14643  0ACE  3000               	movlw	0
 14644  0ACF  1803               	skipnc
 14645  0AD0  3001               	movlw	1
 14646  0AD1  07A1               	addwf	___ftpack@arg+1,f
 14647  0AD2  3000               	movlw	0
 14648  0AD3  1803               	skipnc
 14649  0AD4  3001               	movlw	1
 14650  0AD5  07A2               	addwf	___ftpack@arg+2,f
 14651  0AD6  3001               	movlw	1
 14652  0AD7                     u3525:	
 14653  0AD7  36A2               	lsrf	___ftpack@arg+2,f
 14654  0AD8  0CA1               	rrf	___ftpack@arg+1,f
 14655  0AD9  0CA0               	rrf	___ftpack@arg,f
 14656  0ADA  0B89               	decfsz	9,f
 14657  0ADB  2AD7               	goto	u3525
 14658  0ADC                     l2715:	
 14659  0ADC  30FF               	movlw	255
 14660  0ADD  0522               	andwf	___ftpack@arg+2,w
 14661  0ADE  1903               	btfsc	3,2
 14662  0ADF  2AE9               	goto	l5209
 14663  0AE0  2AC8               	goto	l5201
 14664  0AE1                     l5207:	
 14665  0AE1  3001               	movlw	1
 14666  0AE2  02A3               	subwf	___ftpack@exp,f
 14667  0AE3  3001               	movlw	1
 14668  0AE4                     u3545:	
 14669  0AE4  35A0               	lslf	___ftpack@arg,f
 14670  0AE5  0DA1               	rlf	___ftpack@arg+1,f
 14671  0AE6  0DA2               	rlf	___ftpack@arg+2,f
 14672  0AE7  0B89               	decfsz	9,f
 14673  0AE8  2AE4               	goto	u3545
 14674  0AE9                     l5209:	
 14675  0AE9  1FA1               	btfss	___ftpack@arg+1,7
 14676  0AEA  2AE1               	goto	l5207
 14677  0AEB  1823               	btfsc	___ftpack@exp,0
 14678  0AEC  2AF3               	goto	l2721
 14679  0AED  30FF               	movlw	255
 14680  0AEE  05A0               	andwf	___ftpack@arg,f
 14681  0AEF  307F               	movlw	127
 14682  0AF0  05A1               	andwf	___ftpack@arg+1,f
 14683  0AF1  30FF               	movlw	255
 14684  0AF2  05A2               	andwf	___ftpack@arg+2,f
 14685  0AF3                     l2721:	
 14686  0AF3  1003               	clrc
 14687  0AF4  0CA3               	rrf	___ftpack@exp,f
 14688  0AF5  0823               	movf	___ftpack@exp,w
 14689  0AF6  00A5               	movwf	??___ftpack
 14690  0AF7  01A6               	clrf	??___ftpack+1
 14691  0AF8  01A7               	clrf	??___ftpack+2
 14692  0AF9  3010               	movlw	16
 14693  0AFA                     u3575:	
 14694  0AFA  35A5               	lslf	??___ftpack,f
 14695  0AFB  0DA6               	rlf	??___ftpack+1,f
 14696  0AFC  0DA7               	rlf	??___ftpack+2,f
 14697  0AFD  0B89               	decfsz	9,f
 14698  0AFE  2AFA               	goto	u3575
 14699  0AFF  0825               	movf	??___ftpack,w
 14700  0B00  04A0               	iorwf	___ftpack@arg,f
 14701  0B01  0826               	movf	??___ftpack+1,w
 14702  0B02  04A1               	iorwf	___ftpack@arg+1,f
 14703  0B03  0827               	movf	??___ftpack+2,w
 14704  0B04  04A2               	iorwf	___ftpack@arg+2,f
 14705  0B05  0824               	movf	___ftpack@sign,w
 14706  0B06  1903               	btfsc	3,2
 14707  0B07  0008               	return
 14708  0B08  17A2               	bsf	___ftpack@arg+2,7
 14709  0B09  0008               	return
 14710  0B0A                     __end_of___ftpack:	
 14711                           
 14712                           	psect	text98
 14713  1F3A                     __ptext98:	
 14714 ;; *************** function _setRFSW_Status *****************
 14715 ;; Defined at:
 14716 ;;		line 376 in file "../src/RF_Control_B1.c"
 14717 ;; Parameters:    Size  Location     Type
 14718 ;;  sw              1    wreg     unsigned char 
 14719 ;;  command         1    2[BANK0 ] unsigned char 
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;  sw              1    3[BANK0 ] unsigned char 
 14722 ;; Return value:  Size  Location     Type
 14723 ;;		None               void
 14724 ;; Registers used:
 14725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14731 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;Total ram usage:        2 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; Hardware stack levels required when called:    6
 14738 ;; This function calls:
 14739 ;;		_RfSWPointSelect
 14740 ;; This function is called by:
 14741 ;;		_DlyOff_Main
 14742 ;;		_setDimmerLights_ERROR
 14743 ;;		_setControl_Lights_Table
 14744 ;;		_Sw_DimmerOnFunc
 14745 ;;		_Sw_DimmerAdjFunc
 14746 ;; This function uses a non-reentrant model
 14747 ;;
 14748                           
 14749                           
 14750                           ;psect for function _setRFSW_Status
 14751  1F3A                     _setRFSW_Status:	
 14752                           
 14753                           ;incstack = 0
 14754                           ; Regs used in _setRFSW_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14755                           ;setRFSW_Status@sw stored from wreg
 14756  1F3A  0020               	movlb	0	; select bank0
 14757  1F3B  00A3               	movwf	setRFSW_Status@sw
 14758                           
 14759                           ;RF_Control_B1.c: 377: RfSWPointSelect(sw);
 14760  1F3C  0823               	movf	setRFSW_Status@sw,w
 14761  1F3D  319E  26C1         	fcall	_RfSWPointSelect
 14762                           
 14763                           ;RF_Control_B1.c: 378: RFSW->Status = command;
 14764  1F3F  0879               	movf	_RFSW,w
 14765  1F40  0086               	movwf	6
 14766  1F41  0187               	clrf	7
 14767  1F42  0020               	movlb	0	; select bank0
 14768  1F43  0822               	movf	setRFSW_Status@command,w
 14769  1F44  1001               	bcf	1,0
 14770  1F45  1D03               	skipz
 14771  1F46  1401               	bsf	1,0
 14772  1F47  0008               	return
 14773  1F48                     __end_of_setRFSW_Status:	
 14774                           
 14775                           	psect	text99
 14776  1EC1                     __ptext99:	
 14777 ;; *************** function _RfSWPointSelect *****************
 14778 ;; Defined at:
 14779 ;;		line 311 in file "../src/RF_Control_B1.c"
 14780 ;; Parameters:    Size  Location     Type
 14781 ;;  sw              1    wreg     unsigned char 
 14782 ;; Auto vars:     Size  Location     Type
 14783 ;;  sw              1    1[BANK0 ] unsigned char 
 14784 ;; Return value:  Size  Location     Type
 14785 ;;		None               void
 14786 ;; Registers used:
 14787 ;;		wreg
 14788 ;; Tracked objects:
 14789 ;;		On entry : 0/0
 14790 ;;		On exit  : 0/0
 14791 ;;		Unchanged: 0/0
 14792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14797 ;;Total ram usage:        2 bytes
 14798 ;; Hardware stack levels used:    1
 14799 ;; Hardware stack levels required when called:    5
 14800 ;; This function calls:
 14801 ;;		Nothing
 14802 ;; This function is called by:
 14803 ;;		_setRFSW_Control
 14804 ;;		_setRFSW_AdjControl
 14805 ;;		_setRFSW_Status
 14806 ;; This function uses a non-reentrant model
 14807 ;;
 14808                           
 14809                           
 14810                           ;psect for function _RfSWPointSelect
 14811  1EC1                     _RfSWPointSelect:	
 14812                           
 14813                           ;incstack = 0
 14814                           ; Regs used in _RfSWPointSelect: [wreg]
 14815                           ;RfSWPointSelect@sw stored from wreg
 14816  1EC1  0020               	movlb	0	; select bank0
 14817  1EC2  00A1               	movwf	RfSWPointSelect@sw
 14818                           
 14819                           ;RF_Control_B1.c: 313: if (sw == 1) {
 14820  1EC3  0821               	movf	RfSWPointSelect@sw,w
 14821  1EC4  3A01               	xorlw	1
 14822  1EC5  1D03               	skipz
 14823  1EC6  0008               	return
 14824                           
 14825                           ;RF_Control_B1.c: 314: RFSW = &RFSW1;
 14826  1EC7  30EE               	movlw	_RFSW1& (0+255)
 14827  1EC8  00A0               	movwf	??_RfSWPointSelect
 14828  1EC9  0820               	movf	??_RfSWPointSelect,w
 14829  1ECA  00F9               	movwf	_RFSW
 14830  1ECB  0008               	return
 14831  1ECC                     __end_of_RfSWPointSelect:	
 14832                           
 14833                           	psect	text100
 14834  1FC0                     __ptext100:	
 14835 ;; *************** function _setDimmerLights_Trigger *****************
 14836 ;; Defined at:
 14837 ;;		line 716 in file "../src/Dimmer_B1.c"
 14838 ;; Parameters:    Size  Location     Type
 14839 ;;  lights          1    wreg     unsigned char 
 14840 ;;  command         1    2[BANK0 ] unsigned char 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  lights          1    3[BANK0 ] unsigned char 
 14843 ;; Return value:  Size  Location     Type
 14844 ;;		None               void
 14845 ;; Registers used:
 14846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14852 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;Total ram usage:        2 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    6
 14859 ;; This function calls:
 14860 ;;		_DimmerLightsPointSelect
 14861 ;; This function is called by:
 14862 ;;		_DlyOff_Main
 14863 ;;		_setRFSW_Control
 14864 ;;		_Sw_DimmerOnFunc
 14865 ;;		_Sw_DimmerOffFunc
 14866 ;; This function uses a non-reentrant model
 14867 ;;
 14868                           
 14869                           
 14870                           ;psect for function _setDimmerLights_Trigger
 14871  1FC0                     _setDimmerLights_Trigger:	
 14872                           
 14873                           ;incstack = 0
 14874                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 14875                           ;setDimmerLights_Trigger@lights stored from wreg
 14876  1FC0  0020               	movlb	0	; select bank0
 14877  1FC1  00A3               	movwf	setDimmerLights_Trigger@lights
 14878                           
 14879                           ;Dimmer_B1.c: 718: DimmerLightsPointSelect(lights);
 14880  1FC2  0823               	movf	setDimmerLights_Trigger@lights,w
 14881  1FC3  319E  26B6         	fcall	_DimmerLightsPointSelect
 14882                           
 14883                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = command;
 14884  1FC5  0020               	movlb	0	; select bank0
 14885  1FC6  086C               	movf	_DimmerLights,w
 14886  1FC7  3E08               	addlw	8
 14887  1FC8  0086               	movwf	6
 14888  1FC9  3001               	movlw	1	; select bank2/3
 14889  1FCA  0087               	movwf	7
 14890  1FCB  0822               	movf	setDimmerLights_Trigger@command,w
 14891  1FCC  1101               	bcf	1,2
 14892  1FCD  1D03               	skipz
 14893  1FCE  1501               	bsf	1,2
 14894  1FCF  0008               	return
 14895  1FD0                     __end_of_setDimmerLights_Trigger:	
 14896                           
 14897                           	psect	text101
 14898  1FB0                     __ptext101:	
 14899 ;; *************** function _setDimmerLights_Switch *****************
 14900 ;; Defined at:
 14901 ;;		line 704 in file "../src/Dimmer_B1.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;  lights          1    wreg     unsigned char 
 14904 ;;  command         1    2[BANK0 ] unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  lights          1    3[BANK0 ] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;		None               void
 14909 ;; Registers used:
 14910 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        2 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    6
 14923 ;; This function calls:
 14924 ;;		_DimmerLightsPointSelect
 14925 ;; This function is called by:
 14926 ;;		_DlyOff_Main
 14927 ;;		_setRFSW_Control
 14928 ;;		_Sw_DimmerOnFunc
 14929 ;;		_Sw_DimmerOffFunc
 14930 ;; This function uses a non-reentrant model
 14931 ;;
 14932                           
 14933                           
 14934                           ;psect for function _setDimmerLights_Switch
 14935  1FB0                     _setDimmerLights_Switch:	
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _setDimmerLights_Switch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 14939                           ;setDimmerLights_Switch@lights stored from wreg
 14940  1FB0  0020               	movlb	0	; select bank0
 14941  1FB1  00A3               	movwf	setDimmerLights_Switch@lights
 14942                           
 14943                           ;Dimmer_B1.c: 706: DimmerLightsPointSelect(lights);
 14944  1FB2  0823               	movf	setDimmerLights_Switch@lights,w
 14945  1FB3  319E  26B6         	fcall	_DimmerLightsPointSelect
 14946                           
 14947                           ;Dimmer_B1.c: 707: DimmerLights->Switch = command;
 14948  1FB5  0020               	movlb	0	; select bank0
 14949  1FB6  086C               	movf	_DimmerLights,w
 14950  1FB7  3E08               	addlw	8
 14951  1FB8  0086               	movwf	6
 14952  1FB9  3001               	movlw	1	; select bank2/3
 14953  1FBA  0087               	movwf	7
 14954  1FBB  0822               	movf	setDimmerLights_Switch@command,w
 14955  1FBC  1081               	bcf	1,1
 14956  1FBD  1D03               	skipz
 14957  1FBE  1481               	bsf	1,1
 14958  1FBF  0008               	return
 14959  1FC0                     __end_of_setDimmerLights_Switch:	
 14960                           
 14961                           	psect	text102
 14962  1EB6                     __ptext102:	
 14963 ;; *************** function _DimmerLightsPointSelect *****************
 14964 ;; Defined at:
 14965 ;;		line 326 in file "../src/Dimmer_B1.c"
 14966 ;; Parameters:    Size  Location     Type
 14967 ;;  lights          1    wreg     unsigned char 
 14968 ;; Auto vars:     Size  Location     Type
 14969 ;;  lights          1    1[BANK0 ] unsigned char 
 14970 ;; Return value:  Size  Location     Type
 14971 ;;		None               void
 14972 ;; Registers used:
 14973 ;;		wreg
 14974 ;; Tracked objects:
 14975 ;;		On entry : 0/0
 14976 ;;		On exit  : 0/0
 14977 ;;		Unchanged: 0/0
 14978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;Total ram usage:        2 bytes
 14984 ;; Hardware stack levels used:    1
 14985 ;; Hardware stack levels required when called:    5
 14986 ;; This function calls:
 14987 ;;		Nothing
 14988 ;; This function is called by:
 14989 ;;		_setDimmerLights_Initialization
 14990 ;;		_setDimmerLights_Main
 14991 ;;		_setDimmerLights_ERROR
 14992 ;;		_setDimmerLights_TriggerERROR
 14993 ;;		_setDimmerLights
 14994 ;;		_setDimmerLights_Adj
 14995 ;;		_setDimmerLights_AdjRF
 14996 ;;		_setDimmerLights_Switch
 14997 ;;		_setDimmerLights_AdjGo
 14998 ;;		_setDimmerLights_Trigger
 14999 ;;		_setDimmerLights_TriggerAdj
 15000 ;;		_setDimmerLights_GO
 15001 ;;		_setDimmerLights_MaxmumValue
 15002 ;;		_setDimmerLights_Clear
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006                           
 15007                           ;psect for function _DimmerLightsPointSelect
 15008  1EB6                     _DimmerLightsPointSelect:	
 15009                           
 15010                           ;incstack = 0
 15011                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 15012                           ;DimmerLightsPointSelect@lights stored from wreg
 15013  1EB6  0020               	movlb	0	; select bank0
 15014  1EB7  00A1               	movwf	DimmerLightsPointSelect@lights
 15015                           
 15016                           ;Dimmer_B1.c: 328: if (lights == 1) {
 15017  1EB8  0821               	movf	DimmerLightsPointSelect@lights,w
 15018  1EB9  3A01               	xorlw	1
 15019  1EBA  1D03               	skipz
 15020  1EBB  0008               	return
 15021                           
 15022                           ;Dimmer_B1.c: 329: DimmerLights = &DimmerLights1;
 15023  1EBC  30C0               	movlw	_DimmerLights1& (0+255)
 15024  1EBD  00A0               	movwf	??_DimmerLightsPointSelect
 15025  1EBE  0820               	movf	??_DimmerLightsPointSelect,w
 15026  1EBF  00EC               	movwf	_DimmerLights
 15027  1EC0  0008               	return
 15028  1EC1                     __end_of_DimmerLightsPointSelect:	
 15029                           
 15030                           	psect	text103
 15031  093B                     __ptext103:	
 15032 ;; *************** function _setBuz *****************
 15033 ;; Defined at:
 15034 ;;		line 22 in file "../src/Buzzer_B1.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;  count           1    wreg     unsigned char 
 15037 ;;  time            2    9[BANK0 ] int 
 15038 ;; Auto vars:     Size  Location     Type
 15039 ;;  count           1   12[BANK0 ] unsigned char 
 15040 ;; Return value:  Size  Location     Type
 15041 ;;		None               void
 15042 ;; Registers used:
 15043 ;;		wreg, status,2, status,0, pclath, cstack
 15044 ;; Tracked objects:
 15045 ;;		On entry : 0/0
 15046 ;;		On exit  : 0/0
 15047 ;;		Unchanged: 0/0
 15048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;Total ram usage:        4 bytes
 15054 ;; Hardware stack levels used:    1
 15055 ;; Hardware stack levels required when called:    6
 15056 ;; This function calls:
 15057 ;;		___awdiv
 15058 ;; This function is called by:
 15059 ;;		_DlyOff_Main
 15060 ;;		_setDimmerLights_Main
 15061 ;;		_DimmerLights_Exceptions
 15062 ;;		_setOverTemp_Exceptions
 15063 ;;		_setLog_Code
 15064 ;;		_setControl_Lights_Table
 15065 ;;		_setRFSW_Control
 15066 ;;		_setSw_Main
 15067 ;;		_Sw_DimmerOnFunc
 15068 ;;		_my_MainTime
 15069 ;; This function uses a non-reentrant model
 15070 ;;
 15071                           
 15072                           
 15073                           ;psect for function _setBuz
 15074  093B                     _setBuz:	
 15075                           
 15076                           ;incstack = 0
 15077                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 15078                           ;setBuz@count stored from wreg
 15079  093B  0020               	movlb	0	; select bank0
 15080  093C  00AC               	movwf	setBuz@count
 15081                           
 15082                           ;Buzzer_B1.c: 23: time /= 10;
 15083  093D  300A               	movlw	10
 15084  093E  00A0               	movwf	___awdiv@divisor
 15085  093F  3000               	movlw	0
 15086  0940  00A1               	movwf	___awdiv@divisor+1
 15087  0941  082A               	movf	setBuz@time+1,w
 15088  0942  01A3               	clrf	___awdiv@dividend+1
 15089  0943  07A3               	addwf	___awdiv@dividend+1,f
 15090  0944  0829               	movf	setBuz@time,w
 15091  0945  01A2               	clrf	___awdiv@dividend
 15092  0946  07A2               	addwf	___awdiv@dividend,f
 15093  0947  3188  203B  3189   	fcall	___awdiv
 15094  094A  0020               	movlb	0	; select bank0
 15095  094B  0821               	movf	?___awdiv+1,w
 15096  094C  01AA               	clrf	setBuz@time+1
 15097  094D  07AA               	addwf	setBuz@time+1,f
 15098  094E  0820               	movf	?___awdiv,w
 15099  094F  01A9               	clrf	setBuz@time
 15100  0950  07A9               	addwf	setBuz@time,f
 15101                           
 15102                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 15103  0951  0021               	movlb	1	; select bank1
 15104  0952  1C32               	btfss	_Buz1^(0+128),0
 15105  0953  0008               	return
 15106                           
 15107                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 15108  0954  18B2               	btfsc	_Buz1^(0+128),1
 15109  0955  296C               	goto	l90
 15110                           
 15111                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 15112  0956  14B2               	bsf	_Buz1^(0+128),1
 15113                           
 15114                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 15115  0957  01B3               	clrf	(_Buz1^(0+128)+1)
 15116  0958  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 15117                           
 15118                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 15119  0959  0020               	movlb	0	; select bank0
 15120  095A  082C               	movf	setBuz@count,w
 15121  095B  00AB               	movwf	??_setBuz
 15122  095C  082B               	movf	??_setBuz,w
 15123  095D  0021               	movlb	1	; select bank1
 15124  095E  00B5               	movwf	(_Buz1^(0+128)+3)
 15125                           
 15126                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 15127  095F  0020               	movlb	0	; select bank0
 15128  0960  082A               	movf	setBuz@time+1,w
 15129  0961  0021               	movlb	1	; select bank1
 15130  0962  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 15131  0963  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 15132  0964  0020               	movlb	0	; select bank0
 15133  0965  0829               	movf	setBuz@time,w
 15134  0966  0021               	movlb	1	; select bank1
 15135  0967  01B8               	clrf	(_Buz1^(0+128)+6)
 15136  0968  07B8               	addwf	(_Buz1^(0+128)+6),f
 15137                           
 15138                           ;Buzzer_B1.c: 30: RB3 = 1;
 15139  0969  0020               	movlb	0	; select bank0
 15140  096A  158D               	bsf	13,3	;volatile
 15141                           
 15142                           ;Buzzer_B1.c: 31: } else {
 15143  096B  0008               	return
 15144  096C                     l90:	
 15145                           
 15146                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 15147  096C  19B2               	btfsc	_Buz1^(0+128),3
 15148  096D  2980               	goto	l92
 15149                           
 15150                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 15151  096E  15B2               	bsf	_Buz1^(0+128),3
 15152                           
 15153                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 15154  096F  0020               	movlb	0	; select bank0
 15155  0970  082C               	movf	setBuz@count,w
 15156  0971  00AB               	movwf	??_setBuz
 15157  0972  082B               	movf	??_setBuz,w
 15158  0973  0021               	movlb	1	; select bank1
 15159  0974  00B6               	movwf	(_Buz1^(0+128)+4)
 15160                           
 15161                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 15162  0975  0020               	movlb	0	; select bank0
 15163  0976  082A               	movf	setBuz@time+1,w
 15164  0977  0021               	movlb	1	; select bank1
 15165  0978  01BB               	clrf	((_Buz1+1)^(0+128)+8)
 15166  0979  07BB               	addwf	((_Buz1+1)^(0+128)+8),f
 15167  097A  0020               	movlb	0	; select bank0
 15168  097B  0829               	movf	setBuz@time,w
 15169  097C  0021               	movlb	1	; select bank1
 15170  097D  01BA               	clrf	(_Buz1^(0+128)+8)
 15171  097E  07BA               	addwf	(_Buz1^(0+128)+8),f
 15172                           
 15173                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 15174  097F  0008               	return
 15175  0980                     l92:	
 15176  0980  1A32               	btfsc	_Buz1^(0+128),4
 15177  0981  0008               	return
 15178                           
 15179                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 15180  0982  1632               	bsf	_Buz1^(0+128),4
 15181                           
 15182                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 15183  0983  0020               	movlb	0	; select bank0
 15184  0984  082C               	movf	setBuz@count,w
 15185  0985  00AB               	movwf	??_setBuz
 15186  0986  082B               	movf	??_setBuz,w
 15187  0987  0021               	movlb	1	; select bank1
 15188  0988  00B7               	movwf	(_Buz1^(0+128)+5)
 15189                           
 15190                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 15191  0989  0020               	movlb	0	; select bank0
 15192  098A  082A               	movf	setBuz@time+1,w
 15193  098B  0021               	movlb	1	; select bank1
 15194  098C  01BD               	clrf	((_Buz1+1)^(0+128)+10)
 15195  098D  07BD               	addwf	((_Buz1+1)^(0+128)+10),f
 15196  098E  0020               	movlb	0	; select bank0
 15197  098F  0829               	movf	setBuz@time,w
 15198  0990  0021               	movlb	1	; select bank1
 15199  0991  01BC               	clrf	(_Buz1^(0+128)+10)
 15200  0992  07BC               	addwf	(_Buz1^(0+128)+10),f
 15201  0993  0008               	return
 15202  0994                     __end_of_setBuz:	
 15203                           
 15204                           	psect	text104
 15205  083B                     __ptext104:	
 15206 ;; *************** function ___awdiv *****************
 15207 ;; Defined at:
 15208 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;  divisor         2    0[BANK0 ] int 
 15211 ;;  dividend        2    2[BANK0 ] int 
 15212 ;; Auto vars:     Size  Location     Type
 15213 ;;  quotient        2    7[BANK0 ] int 
 15214 ;;  sign            1    6[BANK0 ] unsigned char 
 15215 ;;  counter         1    5[BANK0 ] unsigned char 
 15216 ;; Return value:  Size  Location     Type
 15217 ;;                  2    0[BANK0 ] int 
 15218 ;; Registers used:
 15219 ;;		wreg, status,2, status,0
 15220 ;; Tracked objects:
 15221 ;;		On entry : 0/0
 15222 ;;		On exit  : 0/0
 15223 ;;		Unchanged: 0/0
 15224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15225 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;Total ram usage:        9 bytes
 15230 ;; Hardware stack levels used:    1
 15231 ;; Hardware stack levels required when called:    5
 15232 ;; This function calls:
 15233 ;;		Nothing
 15234 ;; This function is called by:
 15235 ;;		_setBuz
 15236 ;; This function uses a non-reentrant model
 15237 ;;
 15238                           
 15239                           
 15240                           ;psect for function ___awdiv
 15241  083B                     ___awdiv:	
 15242                           
 15243                           ;incstack = 0
 15244                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 15245  083B  0020               	movlb	0	; select bank0
 15246  083C  01A6               	clrf	___awdiv@sign
 15247  083D  1FA1               	btfss	___awdiv@divisor+1,7
 15248  083E  2846               	goto	l7551
 15249  083F  09A0               	comf	___awdiv@divisor,f
 15250  0840  09A1               	comf	___awdiv@divisor+1,f
 15251  0841  0AA0               	incf	___awdiv@divisor,f
 15252  0842  1903               	skipnz
 15253  0843  0AA1               	incf	___awdiv@divisor+1,f
 15254  0844  01A6               	clrf	___awdiv@sign
 15255  0845  0AA6               	incf	___awdiv@sign,f
 15256  0846                     l7551:	
 15257  0846  1FA3               	btfss	___awdiv@dividend+1,7
 15258  0847  2851               	goto	l7557
 15259  0848  09A2               	comf	___awdiv@dividend,f
 15260  0849  09A3               	comf	___awdiv@dividend+1,f
 15261  084A  0AA2               	incf	___awdiv@dividend,f
 15262  084B  1903               	skipnz
 15263  084C  0AA3               	incf	___awdiv@dividend+1,f
 15264  084D  3001               	movlw	1
 15265  084E  00A4               	movwf	??___awdiv
 15266  084F  0824               	movf	??___awdiv,w
 15267  0850  06A6               	xorwf	___awdiv@sign,f
 15268  0851                     l7557:	
 15269  0851  01A7               	clrf	___awdiv@quotient
 15270  0852  01A8               	clrf	___awdiv@quotient+1
 15271  0853  0821               	movf	___awdiv@divisor+1,w
 15272  0854  0420               	iorwf	___awdiv@divisor,w
 15273  0855  1903               	skipnz
 15274  0856  2880               	goto	l7579
 15275  0857  01A5               	clrf	___awdiv@counter
 15276  0858  0AA5               	incf	___awdiv@counter,f
 15277  0859                     l7567:	
 15278  0859  1BA1               	btfsc	___awdiv@divisor+1,7
 15279  085A  2865               	goto	l7569
 15280  085B  3001               	movlw	1
 15281  085C                     u7105:	
 15282  085C  35A0               	lslf	___awdiv@divisor,f
 15283  085D  0DA1               	rlf	___awdiv@divisor+1,f
 15284  085E  0B89               	decfsz	9,f
 15285  085F  285C               	goto	u7105
 15286  0860  3001               	movlw	1
 15287  0861  00A4               	movwf	??___awdiv
 15288  0862  0824               	movf	??___awdiv,w
 15289  0863  07A5               	addwf	___awdiv@counter,f
 15290  0864  2859               	goto	l7567
 15291  0865                     l7569:	
 15292  0865  3001               	movlw	1
 15293  0866                     u7125:	
 15294  0866  35A7               	lslf	___awdiv@quotient,f
 15295  0867  0DA8               	rlf	___awdiv@quotient+1,f
 15296  0868  0B89               	decfsz	9,f
 15297  0869  2866               	goto	u7125
 15298  086A  0821               	movf	___awdiv@divisor+1,w
 15299  086B  0223               	subwf	___awdiv@dividend+1,w
 15300  086C  1D03               	skipz
 15301  086D  2870               	goto	u7135
 15302  086E  0820               	movf	___awdiv@divisor,w
 15303  086F  0222               	subwf	___awdiv@dividend,w
 15304  0870                     u7135:	
 15305  0870  1C03               	skipc
 15306  0871  2877               	goto	l7575
 15307  0872  0820               	movf	___awdiv@divisor,w
 15308  0873  02A2               	subwf	___awdiv@dividend,f
 15309  0874  0821               	movf	___awdiv@divisor+1,w
 15310  0875  3BA3               	subwfb	___awdiv@dividend+1,f
 15311  0876  1427               	bsf	___awdiv@quotient,0
 15312  0877                     l7575:	
 15313  0877  3001               	movlw	1
 15314  0878                     u7145:	
 15315  0878  36A1               	lsrf	___awdiv@divisor+1,f
 15316  0879  0CA0               	rrf	___awdiv@divisor,f
 15317  087A  0B89               	decfsz	9,f
 15318  087B  2878               	goto	u7145
 15319  087C  3001               	movlw	1
 15320  087D  02A5               	subwf	___awdiv@counter,f
 15321  087E  1D03               	btfss	3,2
 15322  087F  2865               	goto	l7569
 15323  0880                     l7579:	
 15324  0880  0826               	movf	___awdiv@sign,w
 15325  0881  1903               	btfsc	3,2
 15326  0882  2888               	goto	l7583
 15327  0883  09A7               	comf	___awdiv@quotient,f
 15328  0884  09A8               	comf	___awdiv@quotient+1,f
 15329  0885  0AA7               	incf	___awdiv@quotient,f
 15330  0886  1903               	skipnz
 15331  0887  0AA8               	incf	___awdiv@quotient+1,f
 15332  0888                     l7583:	
 15333  0888  0828               	movf	___awdiv@quotient+1,w
 15334  0889  01A1               	clrf	?___awdiv+1
 15335  088A  07A1               	addwf	?___awdiv+1,f
 15336  088B  0827               	movf	___awdiv@quotient,w
 15337  088C  01A0               	clrf	?___awdiv
 15338  088D  07A0               	addwf	?___awdiv,f
 15339  088E  0008               	return
 15340  088F                     __end_of___awdiv:	
 15341                           
 15342                           	psect	text105
 15343  1E13                     __ptext105:	
 15344 ;; *************** function _DelayOff_Initialization *****************
 15345 ;; Defined at:
 15346 ;;		line 26 in file "../src/DelayOff_B1.c"
 15347 ;; Parameters:    Size  Location     Type
 15348 ;;		None
 15349 ;; Auto vars:     Size  Location     Type
 15350 ;;		None
 15351 ;; Return value:  Size  Location     Type
 15352 ;;		None               void
 15353 ;; Registers used:
 15354 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15355 ;; Tracked objects:
 15356 ;;		On entry : 0/0
 15357 ;;		On exit  : 0/0
 15358 ;;		Unchanged: 0/0
 15359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15364 ;;Total ram usage:        0 bytes
 15365 ;; Hardware stack levels used:    1
 15366 ;; Hardware stack levels required when called:    7
 15367 ;; This function calls:
 15368 ;;		_DlyOff_Initialization
 15369 ;; This function is called by:
 15370 ;;		_main
 15371 ;; This function uses a non-reentrant model
 15372 ;;
 15373                           
 15374                           
 15375                           ;psect for function _DelayOff_Initialization
 15376  1E13                     _DelayOff_Initialization:	
 15377                           
 15378                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 15379                           
 15380                           ;incstack = 0
 15381                           ; Regs used in _DelayOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15382  1E13  3001               	movlw	1
 15383  1E14  319E  26E3         	fcall	_DlyOff_Initialization
 15384  1E16  0008               	return
 15385  1E17                     __end_of_DelayOff_Initialization:	
 15386                           
 15387                           	psect	text106
 15388  1EE3                     __ptext106:	
 15389 ;; *************** function _DlyOff_Initialization *****************
 15390 ;; Defined at:
 15391 ;;		line 56 in file "../src/DelayOff_B1.c"
 15392 ;; Parameters:    Size  Location     Type
 15393 ;;  sw              1    wreg     unsigned char 
 15394 ;; Auto vars:     Size  Location     Type
 15395 ;;  sw              1    2[BANK0 ] unsigned char 
 15396 ;; Return value:  Size  Location     Type
 15397 ;;		None               void
 15398 ;; Registers used:
 15399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15408 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15409 ;;Total ram usage:        1 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    6
 15412 ;; This function calls:
 15413 ;;		_DelayOffPointSelect
 15414 ;; This function is called by:
 15415 ;;		_DelayOff_Initialization
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           
 15420                           ;psect for function _DlyOff_Initialization
 15421  1EE3                     _DlyOff_Initialization:	
 15422                           
 15423                           ;incstack = 0
 15424                           ; Regs used in _DlyOff_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15425                           ;DlyOff_Initialization@sw stored from wreg
 15426  1EE3  0020               	movlb	0	; select bank0
 15427  1EE4  00A2               	movwf	DlyOff_Initialization@sw
 15428                           
 15429                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 15430  1EE5  0822               	movf	DlyOff_Initialization@sw,w
 15431  1EE6  319E  26AB         	fcall	_DelayOffPointSelect
 15432                           
 15433                           ;DelayOff_B1.c: 58: DelayOff->Enable = 1;
 15434  1EE8  0020               	movlb	0	; select bank0
 15435  1EE9  086B               	movf	_DelayOff,w
 15436  1EEA  0086               	movwf	6
 15437  1EEB  3001               	movlw	1	; select bank2/3
 15438  1EEC  0087               	movwf	7
 15439  1EED  1401               	bsf	1,0
 15440  1EEE  0008               	return
 15441  1EEF                     __end_of_DlyOff_Initialization:	
 15442                           
 15443                           	psect	text107
 15444  1EAB                     __ptext107:	
 15445 ;; *************** function _DelayOffPointSelect *****************
 15446 ;; Defined at:
 15447 ;;		line 7 in file "../src/DelayOff_B1.c"
 15448 ;; Parameters:    Size  Location     Type
 15449 ;;  sw              1    wreg     unsigned char 
 15450 ;; Auto vars:     Size  Location     Type
 15451 ;;  sw              1    1[BANK0 ] unsigned char 
 15452 ;; Return value:  Size  Location     Type
 15453 ;;		None               void
 15454 ;; Registers used:
 15455 ;;		wreg
 15456 ;; Tracked objects:
 15457 ;;		On entry : 0/0
 15458 ;;		On exit  : 0/0
 15459 ;;		Unchanged: 0/0
 15460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15463 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15464 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15465 ;;Total ram usage:        2 bytes
 15466 ;; Hardware stack levels used:    1
 15467 ;; Hardware stack levels required when called:    5
 15468 ;; This function calls:
 15469 ;;		Nothing
 15470 ;; This function is called by:
 15471 ;;		_DlyOff_Initialization
 15472 ;;		_DlyOff_Main
 15473 ;;		_setDelayOff_GO
 15474 ;; This function uses a non-reentrant model
 15475 ;;
 15476                           
 15477                           
 15478                           ;psect for function _DelayOffPointSelect
 15479  1EAB                     _DelayOffPointSelect:	
 15480                           
 15481                           ;incstack = 0
 15482                           ; Regs used in _DelayOffPointSelect: [wreg]
 15483                           ;DelayOffPointSelect@sw stored from wreg
 15484  1EAB  0020               	movlb	0	; select bank0
 15485  1EAC  00A1               	movwf	DelayOffPointSelect@sw
 15486                           
 15487                           ;DelayOff_B1.c: 9: if (sw == 1) {
 15488  1EAD  0821               	movf	DelayOffPointSelect@sw,w
 15489  1EAE  3A01               	xorlw	1
 15490  1EAF  1D03               	skipz
 15491  1EB0  0008               	return
 15492                           
 15493                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 15494  1EB1  3062               	movlw	_DlySw1& (0+255)
 15495  1EB2  00A0               	movwf	??_DelayOffPointSelect
 15496  1EB3  0820               	movf	??_DelayOffPointSelect,w
 15497  1EB4  00EB               	movwf	_DelayOff
 15498  1EB5  0008               	return
 15499  1EB6                     __end_of_DelayOffPointSelect:	
 15500                           
 15501                           	psect	text108
 15502  10D6                     __ptext108:	
 15503 ;; *************** function _CC2500_PowerOnInitial *****************
 15504 ;; Defined at:
 15505 ;;		line 124 in file "../src/CC2500_B1.c"
 15506 ;; Parameters:    Size  Location     Type
 15507 ;;		None
 15508 ;; Auto vars:     Size  Location     Type
 15509 ;;		None
 15510 ;; Return value:  Size  Location     Type
 15511 ;;		None               void
 15512 ;; Registers used:
 15513 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;Total ram usage:        0 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    8
 15526 ;; This function calls:
 15527 ;;		_CC2500_ClearRXFIFO
 15528 ;;		_CC2500_ClearTXFIFO
 15529 ;;		_CC2500_FrequencyCabr
 15530 ;;		_CC2500_InitPATable
 15531 ;;		_CC2500_InitSetREG
 15532 ;;		_CC2500_PowerRST
 15533 ;;		_CC2500_SIDLEMode
 15534 ;; This function is called by:
 15535 ;;		_main
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           
 15540                           ;psect for function _CC2500_PowerOnInitial
 15541  10D6                     _CC2500_PowerOnInitial:	
 15542                           
 15543                           ;CC2500_B1.c: 125: CC2500_PowerRST();
 15544                           
 15545                           ;incstack = 0
 15546                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15547  10D6  3195  2583  3190   	fcall	_CC2500_PowerRST
 15548                           
 15549                           ;CC2500_B1.c: 126: CC2500_InitSetREG();
 15550  10D9  3192  22F7  3190   	fcall	_CC2500_InitSetREG
 15551                           
 15552                           ;CC2500_B1.c: 127: CC2500_InitPATable();
 15553  10DC  3191  2181  3190   	fcall	_CC2500_InitPATable
 15554                           
 15555                           ;CC2500_B1.c: 128: CC2500_ClearTXFIFO();
 15556  10DF  319E  260B  3190   	fcall	_CC2500_ClearTXFIFO
 15557                           
 15558                           ;CC2500_B1.c: 129: CC2500_ClearRXFIFO();
 15559  10E2  319E  2607  3190   	fcall	_CC2500_ClearRXFIFO
 15560                           
 15561                           ;CC2500_B1.c: 130: CC2500_FrequencyCabr();
 15562  10E5  319E  26D7  3190   	fcall	_CC2500_FrequencyCabr
 15563                           
 15564                           ;CC2500_B1.c: 131: CC2500_SIDLEMode();
 15565  10E8  319E  260F         	fcall	_CC2500_SIDLEMode
 15566  10EA  0008               	return
 15567  10EB                     __end_of_CC2500_PowerOnInitial:	
 15568                           
 15569                           	psect	text109
 15570  1E0F                     __ptext109:	
 15571 ;; *************** function _CC2500_SIDLEMode *****************
 15572 ;; Defined at:
 15573 ;;		line 214 in file "../src/CC2500_B1.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;		None
 15576 ;; Auto vars:     Size  Location     Type
 15577 ;;		None
 15578 ;; Return value:  Size  Location     Type
 15579 ;;		None               void
 15580 ;; Registers used:
 15581 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15582 ;; Tracked objects:
 15583 ;;		On entry : 0/0
 15584 ;;		On exit  : 0/0
 15585 ;;		Unchanged: 0/0
 15586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;Total ram usage:        0 bytes
 15592 ;; Hardware stack levels used:    1
 15593 ;; Hardware stack levels required when called:    7
 15594 ;; This function calls:
 15595 ;;		_CC2500_WriteCommand
 15596 ;; This function is called by:
 15597 ;;		_CC2500_PowerOnInitial
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _CC2500_SIDLEMode
 15603  1E0F                     _CC2500_SIDLEMode:	
 15604                           
 15605                           ;CC2500_B1.c: 215: CC2500_WriteCommand(0x36);
 15606                           
 15607                           ;incstack = 0
 15608                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15609  1E0F  3036               	movlw	54
 15610  1E10  3191  2118         	fcall	_CC2500_WriteCommand
 15611  1E12  0008               	return
 15612  1E13                     __end_of_CC2500_SIDLEMode:	
 15613                           
 15614                           	psect	text110
 15615  1583                     __ptext110:	
 15616 ;; *************** function _CC2500_PowerRST *****************
 15617 ;; Defined at:
 15618 ;;		line 137 in file "../src/CC2500_B1.c"
 15619 ;; Parameters:    Size  Location     Type
 15620 ;;		None
 15621 ;; Auto vars:     Size  Location     Type
 15622 ;;		None
 15623 ;; Return value:  Size  Location     Type
 15624 ;;		None               void
 15625 ;; Registers used:
 15626 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15636 ;;Total ram usage:        1 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    6
 15639 ;; This function calls:
 15640 ;;		_CC2500_WriteByte
 15641 ;;		_DelayTime_1us
 15642 ;;		_Timeout_Counter
 15643 ;;		_set_TimeoutCleared
 15644 ;; This function is called by:
 15645 ;;		_CC2500_PowerOnInitial
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           
 15650                           ;psect for function _CC2500_PowerRST
 15651  1583                     _CC2500_PowerRST:	
 15652                           
 15653                           ;CC2500_B1.c: 138: RC1 = 0;
 15654                           
 15655                           ;incstack = 0
 15656                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15657  1583  0020               	movlb	0	; select bank0
 15658  1584  108E               	bcf	14,1	;volatile
 15659                           
 15660                           ;CC2500_B1.c: 139: RC0 = 0;
 15661  1585  100E               	bcf	14,0	;volatile
 15662                           
 15663                           ;CC2500_B1.c: 140: RC4 = 1;
 15664  1586  160E               	bsf	14,4	;volatile
 15665                           
 15666                           ;CC2500_B1.c: 141: DelayTime_1us(10);
 15667  1587  300A               	movlw	10
 15668  1588  00A0               	movwf	DelayTime_1us@count
 15669  1589  3000               	movlw	0
 15670  158A  00A1               	movwf	DelayTime_1us@count+1
 15671  158B  3192  22AA  3195   	fcall	_DelayTime_1us
 15672                           
 15673                           ;CC2500_B1.c: 142: RC4 = 0;
 15674  158E  0020               	movlb	0	; select bank0
 15675  158F  120E               	bcf	14,4	;volatile
 15676                           
 15677                           ;CC2500_B1.c: 143: DelayTime_1us(10);
 15678  1590  300A               	movlw	10
 15679  1591  00A0               	movwf	DelayTime_1us@count
 15680  1592  3000               	movlw	0
 15681  1593  00A1               	movwf	DelayTime_1us@count+1
 15682  1594  3192  22AA  3195   	fcall	_DelayTime_1us
 15683                           
 15684                           ;CC2500_B1.c: 144: RC4 = 1;
 15685  1597  0020               	movlb	0	; select bank0
 15686  1598  160E               	bsf	14,4	;volatile
 15687                           
 15688                           ;CC2500_B1.c: 145: DelayTime_1us(40);
 15689  1599  3028               	movlw	40
 15690  159A  00A0               	movwf	DelayTime_1us@count
 15691  159B  3000               	movlw	0
 15692  159C  00A1               	movwf	DelayTime_1us@count+1
 15693  159D  3192  22AA  3195   	fcall	_DelayTime_1us
 15694                           
 15695                           ;CC2500_B1.c: 146: RC4 = 0;
 15696  15A0  0020               	movlb	0	; select bank0
 15697  15A1  120E               	bcf	14,4	;volatile
 15698                           
 15699                           ;CC2500_B1.c: 147: SPI0Buffer = 0x30;
 15700  15A2  3030               	movlw	48
 15701  15A3  00A6               	movwf	??_CC2500_PowerRST
 15702  15A4  0826               	movf	??_CC2500_PowerRST,w
 15703  15A5  00FA               	movwf	_SPI0Buffer
 15704                           
 15705                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 15706  15A6  2DAA               	goto	l8449
 15707  15A7                     l8447:	
 15708                           
 15709                           ;CC2500_B1.c: 149: Timeout_Counter();
 15710  15A7  3190  20C1  3195   	fcall	_Timeout_Counter
 15711  15AA                     l8449:	
 15712  15AA  0020               	movlb	0	; select bank0
 15713  15AB  1D0E               	btfss	14,2	;volatile
 15714  15AC  2DB0               	goto	l8453
 15715  15AD  0021               	movlb	1	; select bank1
 15716  15AE  1D2F               	btfss	(_myMain^(0+128)+15),2
 15717  15AF  2DA7               	goto	l8447
 15718  15B0                     l8453:	
 15719                           
 15720                           ;CC2500_B1.c: 150: };
 15721                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 15722  15B0  319E  2627  3195   	fcall	_set_TimeoutCleared
 15723                           
 15724                           ;CC2500_B1.c: 152: CC2500_WriteByte();
 15725  15B3  3190  20AD  3195   	fcall	_CC2500_WriteByte
 15726                           
 15727                           ;CC2500_B1.c: 153: while (RC2 == 1 && myMain.Timeout == 0) {
 15728  15B6  2DBA               	goto	l8459
 15729  15B7                     l8457:	
 15730                           
 15731                           ;CC2500_B1.c: 154: Timeout_Counter();
 15732  15B7  3190  20C1  3195   	fcall	_Timeout_Counter
 15733  15BA                     l8459:	
 15734  15BA  0020               	movlb	0	; select bank0
 15735  15BB  1D0E               	btfss	14,2	;volatile
 15736  15BC  2DC0               	goto	l8463
 15737  15BD  0021               	movlb	1	; select bank1
 15738  15BE  1D2F               	btfss	(_myMain^(0+128)+15),2
 15739  15BF  2DB7               	goto	l8457
 15740  15C0                     l8463:	
 15741                           
 15742                           ;CC2500_B1.c: 155: };
 15743                           ;CC2500_B1.c: 156: set_TimeoutCleared();
 15744  15C0  319E  2627         	fcall	_set_TimeoutCleared
 15745                           
 15746                           ;CC2500_B1.c: 157: RC0 = 0;
 15747  15C2  0020               	movlb	0	; select bank0
 15748  15C3  100E               	bcf	14,0	;volatile
 15749                           
 15750                           ;CC2500_B1.c: 158: RC4 = 1;
 15751  15C4  160E               	bsf	14,4	;volatile
 15752  15C5  0008               	return
 15753  15C6                     __end_of_CC2500_PowerRST:	
 15754                           
 15755                           	psect	text111
 15756  12F7                     __ptext111:	
 15757 ;; *************** function _CC2500_InitSetREG *****************
 15758 ;; Defined at:
 15759 ;;		line 164 in file "../src/CC2500_B1.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;		None
 15762 ;; Auto vars:     Size  Location     Type
 15763 ;;  loop_c          1    8[BANK0 ] unsigned char 
 15764 ;;  temp2           1    7[BANK0 ] unsigned char 
 15765 ;;  temp1           1    6[BANK0 ] unsigned char 
 15766 ;; Return value:  Size  Location     Type
 15767 ;;		None               void
 15768 ;; Registers used:
 15769 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15770 ;; Tracked objects:
 15771 ;;		On entry : 0/0
 15772 ;;		On exit  : 0/0
 15773 ;;		Unchanged: 0/0
 15774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15776 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15777 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15778 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15779 ;;Total ram usage:        4 bytes
 15780 ;; Hardware stack levels used:    1
 15781 ;; Hardware stack levels required when called:    7
 15782 ;; This function calls:
 15783 ;;		_CC2500_WriteREG
 15784 ;; This function is called by:
 15785 ;;		_CC2500_PowerOnInitial
 15786 ;; This function uses a non-reentrant model
 15787 ;;
 15788                           
 15789                           
 15790                           ;psect for function _CC2500_InitSetREG
 15791  12F7                     _CC2500_InitSetREG:	
 15792                           
 15793                           ;CC2500_B1.c: 165: unsigned char loop_c;
 15794                           ;CC2500_B1.c: 166: unsigned char temp1, temp2;
 15795                           ;CC2500_B1.c: 168: for (loop_c = 0; loop_c < 47; loop_c++) {
 15796                           
 15797                           ;incstack = 0
 15798                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15799  12F7  0020               	movlb	0	; select bank0
 15800  12F8  01A8               	clrf	CC2500_InitSetREG@loop_c
 15801  12F9                     L5:	
 15802  12F9  302F               	movlw	47
 15803  12FA  0228               	subwf	CC2500_InitSetREG@loop_c,w
 15804  12FB  1803               	btfsc	3,0
 15805  12FC  0008               	return
 15806                           
 15807                           ;CC2500_B1.c: 169: temp1 = CC2500_registers_address[loop_c];
 15808  12FD  0828               	movf	CC2500_InitSetREG@loop_c,w
 15809  12FE  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 15810  12FF  0084               	movwf	4
 15811  1300  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 15812  1301  1803               	skipnc
 15813  1302  3E01               	addlw	1
 15814  1303  0085               	movwf	5
 15815  1304  0800               	movf	0,w	;code access
 15816  1305  00A5               	movwf	??_CC2500_InitSetREG
 15817  1306  0825               	movf	??_CC2500_InitSetREG,w
 15818  1307  00A6               	movwf	CC2500_InitSetREG@temp1
 15819                           
 15820                           ;CC2500_B1.c: 170: temp2 = CC2500_rfSettings[loop_c];
 15821  1308  0828               	movf	CC2500_InitSetREG@loop_c,w
 15822  1309  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 15823  130A  0084               	movwf	4
 15824  130B  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 15825  130C  1803               	skipnc
 15826  130D  3E01               	addlw	1
 15827  130E  0085               	movwf	5
 15828  130F  0800               	movf	0,w	;code access
 15829  1310  00A5               	movwf	??_CC2500_InitSetREG
 15830  1311  0825               	movf	??_CC2500_InitSetREG,w
 15831  1312  00A7               	movwf	CC2500_InitSetREG@temp2
 15832                           
 15833                           ;CC2500_B1.c: 172: CC2500_WriteREG(temp1, temp2);
 15834  1313  0827               	movf	CC2500_InitSetREG@temp2,w
 15835  1314  00A5               	movwf	??_CC2500_InitSetREG
 15836  1315  0825               	movf	??_CC2500_InitSetREG,w
 15837  1316  00A2               	movwf	CC2500_WriteREG@value
 15838  1317  0826               	movf	CC2500_InitSetREG@temp1,w
 15839  1318  3191  21FF  3192   	fcall	_CC2500_WriteREG
 15840  131B  3001               	movlw	1
 15841  131C  0020               	movlb	0	; select bank0
 15842  131D  00A5               	movwf	??_CC2500_InitSetREG
 15843  131E  0825               	movf	??_CC2500_InitSetREG,w
 15844  131F  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 15845  1320  2AF9               	goto	L5
 15846  1321                     __end_of_CC2500_InitSetREG:	
 15847                           
 15848                           	psect	text112
 15849  1181                     __ptext112:	
 15850 ;; *************** function _CC2500_InitPATable *****************
 15851 ;; Defined at:
 15852 ;;		line 179 in file "../src/CC2500_B1.c"
 15853 ;; Parameters:    Size  Location     Type
 15854 ;;		None
 15855 ;; Auto vars:     Size  Location     Type
 15856 ;;  loop_d          1    7[BANK0 ] unsigned char 
 15857 ;;  temp            1    6[BANK0 ] unsigned char 
 15858 ;; Return value:  Size  Location     Type
 15859 ;;		None               void
 15860 ;; Registers used:
 15861 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15862 ;; Tracked objects:
 15863 ;;		On entry : 0/0
 15864 ;;		On exit  : 0/0
 15865 ;;		Unchanged: 0/0
 15866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15870 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15871 ;;Total ram usage:        3 bytes
 15872 ;; Hardware stack levels used:    1
 15873 ;; Hardware stack levels required when called:    7
 15874 ;; This function calls:
 15875 ;;		_CC2500_WriteREG
 15876 ;; This function is called by:
 15877 ;;		_CC2500_PowerOnInitial
 15878 ;; This function uses a non-reentrant model
 15879 ;;
 15880                           
 15881                           
 15882                           ;psect for function _CC2500_InitPATable
 15883  1181                     _CC2500_InitPATable:	
 15884                           
 15885                           ;CC2500_B1.c: 180: unsigned char loop_d;
 15886                           ;CC2500_B1.c: 181: unsigned char temp;
 15887                           ;CC2500_B1.c: 183: for (loop_d = 0; loop_d < 8; loop_d++) {
 15888                           
 15889                           ;incstack = 0
 15890                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15891  1181  0020               	movlb	0	; select bank0
 15892  1182  01A7               	clrf	CC2500_InitPATable@loop_d
 15893  1183                     L6:	
 15894  1183  3008               	movlw	8
 15895  1184  0227               	subwf	CC2500_InitPATable@loop_d,w
 15896  1185  1803               	btfsc	3,0
 15897  1186  0008               	return
 15898                           
 15899                           ;CC2500_B1.c: 184: temp = CC2500_patable_vaule[loop_d];
 15900  1187  0827               	movf	CC2500_InitPATable@loop_d,w
 15901  1188  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 15902  1189  0084               	movwf	4
 15903  118A  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 15904  118B  1803               	skipnc
 15905  118C  3E01               	addlw	1
 15906  118D  0085               	movwf	5
 15907  118E  0800               	movf	0,w	;code access
 15908  118F  00A5               	movwf	??_CC2500_InitPATable
 15909  1190  0825               	movf	??_CC2500_InitPATable,w
 15910  1191  00A6               	movwf	CC2500_InitPATable@temp
 15911                           
 15912                           ;CC2500_B1.c: 185: CC2500_WriteREG(0x3E, temp);
 15913  1192  0826               	movf	CC2500_InitPATable@temp,w
 15914  1193  00A5               	movwf	??_CC2500_InitPATable
 15915  1194  0825               	movf	??_CC2500_InitPATable,w
 15916  1195  00A2               	movwf	CC2500_WriteREG@value
 15917  1196  303E               	movlw	62
 15918  1197  3191  21FF  3191   	fcall	_CC2500_WriteREG
 15919  119A  3001               	movlw	1
 15920  119B  0020               	movlb	0	; select bank0
 15921  119C  00A5               	movwf	??_CC2500_InitPATable
 15922  119D  0825               	movf	??_CC2500_InitPATable,w
 15923  119E  07A7               	addwf	CC2500_InitPATable@loop_d,f
 15924  119F  2983               	goto	L6
 15925  11A0                     __end_of_CC2500_InitPATable:	
 15926                           
 15927                           	psect	text113
 15928  11FF                     __ptext113:	
 15929 ;; *************** function _CC2500_WriteREG *****************
 15930 ;; Defined at:
 15931 ;;		line 256 in file "../src/CC2500_B1.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;  w_addr          1    wreg     unsigned char 
 15934 ;;  value           1    2[BANK0 ] unsigned char 
 15935 ;; Auto vars:     Size  Location     Type
 15936 ;;  w_addr          1    4[BANK0 ] unsigned char 
 15937 ;; Return value:  Size  Location     Type
 15938 ;;		None               void
 15939 ;; Registers used:
 15940 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15946 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;Total ram usage:        3 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; Hardware stack levels required when called:    6
 15953 ;; This function calls:
 15954 ;;		_CC2500_WriteByte
 15955 ;;		_Timeout_Counter
 15956 ;;		_set_TimeoutCleared
 15957 ;; This function is called by:
 15958 ;;		_CC2500_InitSetREG
 15959 ;;		_CC2500_InitPATable
 15960 ;; This function uses a non-reentrant model
 15961 ;;
 15962                           
 15963                           
 15964                           ;psect for function _CC2500_WriteREG
 15965  11FF                     _CC2500_WriteREG:	
 15966                           
 15967                           ;incstack = 0
 15968                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15969                           ;CC2500_WriteREG@w_addr stored from wreg
 15970  11FF  0020               	movlb	0	; select bank0
 15971  1200  00A4               	movwf	CC2500_WriteREG@w_addr
 15972                           
 15973                           ;CC2500_B1.c: 257: RC4 = 0;
 15974  1201  120E               	bcf	14,4	;volatile
 15975                           
 15976                           ;CC2500_B1.c: 258: SPI0Buffer = w_addr;
 15977  1202  0824               	movf	CC2500_WriteREG@w_addr,w
 15978  1203  00A3               	movwf	??_CC2500_WriteREG
 15979  1204  0823               	movf	??_CC2500_WriteREG,w
 15980  1205  00FA               	movwf	_SPI0Buffer
 15981                           
 15982                           ;CC2500_B1.c: 259: while (RC2 == 1 && myMain.Timeout == 0) {
 15983  1206  2A0A               	goto	l8207
 15984  1207                     l8205:	
 15985                           
 15986                           ;CC2500_B1.c: 260: Timeout_Counter();
 15987  1207  3190  20C1  3191   	fcall	_Timeout_Counter
 15988  120A                     l8207:	
 15989  120A  0020               	movlb	0	; select bank0
 15990  120B  1D0E               	btfss	14,2	;volatile
 15991  120C  2A10               	goto	l8211
 15992  120D  0021               	movlb	1	; select bank1
 15993  120E  1D2F               	btfss	(_myMain^(0+128)+15),2
 15994  120F  2A07               	goto	l8205
 15995  1210                     l8211:	
 15996                           
 15997                           ;CC2500_B1.c: 261: };
 15998                           ;CC2500_B1.c: 262: set_TimeoutCleared();
 15999  1210  319E  2627  3191   	fcall	_set_TimeoutCleared
 16000                           
 16001                           ;CC2500_B1.c: 264: CC2500_WriteByte();
 16002  1213  3190  20AD  3191   	fcall	_CC2500_WriteByte
 16003                           
 16004                           ;CC2500_B1.c: 265: SPI0Buffer = value;
 16005  1216  0020               	movlb	0	; select bank0
 16006  1217  0822               	movf	CC2500_WriteREG@value,w
 16007  1218  00A3               	movwf	??_CC2500_WriteREG
 16008  1219  0823               	movf	??_CC2500_WriteREG,w
 16009  121A  00FA               	movwf	_SPI0Buffer
 16010                           
 16011                           ;CC2500_B1.c: 266: CC2500_WriteByte();
 16012  121B  3190  20AD         	fcall	_CC2500_WriteByte
 16013                           
 16014                           ;CC2500_B1.c: 267: RC4 = 1;
 16015  121D  0020               	movlb	0	; select bank0
 16016  121E  160E               	bsf	14,4	;volatile
 16017  121F  0008               	return
 16018  1220                     __end_of_CC2500_WriteREG:	
 16019                           
 16020                           	psect	text114
 16021  1ED7                     __ptext114:	
 16022 ;; *************** function _CC2500_FrequencyCabr *****************
 16023 ;; Defined at:
 16024 ;;		line 206 in file "../src/CC2500_B1.c"
 16025 ;; Parameters:    Size  Location     Type
 16026 ;;		None
 16027 ;; Auto vars:     Size  Location     Type
 16028 ;;		None
 16029 ;; Return value:  Size  Location     Type
 16030 ;;		None               void
 16031 ;; Registers used:
 16032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16033 ;; Tracked objects:
 16034 ;;		On entry : 0/0
 16035 ;;		On exit  : 0/0
 16036 ;;		Unchanged: 0/0
 16037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16042 ;;Total ram usage:        0 bytes
 16043 ;; Hardware stack levels used:    1
 16044 ;; Hardware stack levels required when called:    7
 16045 ;; This function calls:
 16046 ;;		_CC2500_WriteCommand
 16047 ;;		_DelayTime_1us
 16048 ;; This function is called by:
 16049 ;;		_CC2500_PowerOnInitial
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           
 16054                           ;psect for function _CC2500_FrequencyCabr
 16055  1ED7                     _CC2500_FrequencyCabr:	
 16056                           
 16057                           ;CC2500_B1.c: 207: CC2500_WriteCommand(0x33);
 16058                           
 16059                           ;incstack = 0
 16060                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16061  1ED7  3033               	movlw	51
 16062  1ED8  3191  2118  319E   	fcall	_CC2500_WriteCommand
 16063                           
 16064                           ;CC2500_B1.c: 208: DelayTime_1us(1000);
 16065  1EDB  30E8               	movlw	232
 16066  1EDC  0020               	movlb	0	; select bank0
 16067  1EDD  00A0               	movwf	DelayTime_1us@count
 16068  1EDE  3003               	movlw	3
 16069  1EDF  00A1               	movwf	DelayTime_1us@count+1
 16070  1EE0  3192  22AA         	fcall	_DelayTime_1us
 16071  1EE2  0008               	return
 16072  1EE3                     __end_of_CC2500_FrequencyCabr:	
 16073                           
 16074                           	psect	text115
 16075  12AA                     __ptext115:	
 16076 ;; *************** function _DelayTime_1us *****************
 16077 ;; Defined at:
 16078 ;;		line 325 in file "../src/CC2500_B1.c"
 16079 ;; Parameters:    Size  Location     Type
 16080 ;;  count           2    0[BANK0 ] int 
 16081 ;; Auto vars:     Size  Location     Type
 16082 ;;  j               2    4[BANK0 ] unsigned int 
 16083 ;;  i               2    2[BANK0 ] unsigned int 
 16084 ;; Return value:  Size  Location     Type
 16085 ;;		None               void
 16086 ;; Registers used:
 16087 ;;		wreg, status,2
 16088 ;; Tracked objects:
 16089 ;;		On entry : 0/0
 16090 ;;		On exit  : 0/0
 16091 ;;		Unchanged: 0/0
 16092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16093 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;Total ram usage:        6 bytes
 16098 ;; Hardware stack levels used:    1
 16099 ;; Hardware stack levels required when called:    5
 16100 ;; This function calls:
 16101 ;;		Nothing
 16102 ;; This function is called by:
 16103 ;;		_CC2500_PowerRST
 16104 ;;		_CC2500_FrequencyCabr
 16105 ;; This function uses a non-reentrant model
 16106 ;;
 16107                           
 16108                           
 16109                           ;psect for function _DelayTime_1us
 16110  12AA                     _DelayTime_1us:	
 16111                           
 16112                           ;CC2500_B1.c: 326: unsigned int i, j;
 16113                           ;CC2500_B1.c: 327: for (i = 1; i < count; i++)
 16114                           
 16115                           ;incstack = 0
 16116                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 16117  12AA  3001               	movlw	1
 16118  12AB  0020               	movlb	0	; select bank0
 16119  12AC  00A2               	movwf	DelayTime_1us@i
 16120  12AD  3000               	movlw	0
 16121  12AE  00A3               	movwf	DelayTime_1us@i+1
 16122  12AF                     l362:	
 16123  12AF  0821               	movf	DelayTime_1us@count+1,w
 16124  12B0  0223               	subwf	DelayTime_1us@i+1,w
 16125  12B1  1D03               	skipz
 16126  12B2  2AB5               	goto	u7915
 16127  12B3  0820               	movf	DelayTime_1us@count,w
 16128  12B4  0222               	subwf	DelayTime_1us@i,w
 16129  12B5                     u7915:	
 16130  12B5  1803               	btfsc	3,0
 16131  12B6  0008               	return
 16132                           
 16133                           ;CC2500_B1.c: 328: for (j = 0; j <= 1; j++);
 16134  12B7  01A4               	clrf	DelayTime_1us@j
 16135  12B8  01A5               	clrf	DelayTime_1us@j+1
 16136  12B9  3000               	movlw	0
 16137  12BA  0225               	subwf	DelayTime_1us@j+1,w
 16138  12BB  3002               	movlw	2
 16139  12BC  1903               	skipnz
 16140  12BD  0224               	subwf	DelayTime_1us@j,w
 16141  12BE  1803               	btfsc	3,0
 16142  12BF  2ACB               	goto	l8199
 16143  12C0                     l8197:	
 16144  12C0  3001               	movlw	1
 16145  12C1  07A4               	addwf	DelayTime_1us@j,f
 16146  12C2  3000               	movlw	0
 16147  12C3  3DA5               	addwfc	DelayTime_1us@j+1,f
 16148  12C4  3000               	movlw	0
 16149  12C5  0225               	subwf	DelayTime_1us@j+1,w
 16150  12C6  3002               	movlw	2
 16151  12C7  1903               	skipnz
 16152  12C8  0224               	subwf	DelayTime_1us@j,w
 16153  12C9  1C03               	skipc
 16154  12CA  2AC0               	goto	l8197
 16155  12CB                     l8199:	
 16156  12CB  3001               	movlw	1
 16157  12CC  07A2               	addwf	DelayTime_1us@i,f
 16158  12CD  3000               	movlw	0
 16159  12CE  3DA3               	addwfc	DelayTime_1us@i+1,f
 16160  12CF  2AAF               	goto	l362
 16161  12D0                     __end_of_DelayTime_1us:	
 16162                           
 16163                           	psect	text116
 16164  1E0B                     __ptext116:	
 16165 ;; *************** function _CC2500_ClearTXFIFO *****************
 16166 ;; Defined at:
 16167 ;;		line 192 in file "../src/CC2500_B1.c"
 16168 ;; Parameters:    Size  Location     Type
 16169 ;;		None
 16170 ;; Auto vars:     Size  Location     Type
 16171 ;;		None
 16172 ;; Return value:  Size  Location     Type
 16173 ;;		None               void
 16174 ;; Registers used:
 16175 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16176 ;; Tracked objects:
 16177 ;;		On entry : 0/0
 16178 ;;		On exit  : 0/0
 16179 ;;		Unchanged: 0/0
 16180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;Total ram usage:        0 bytes
 16186 ;; Hardware stack levels used:    1
 16187 ;; Hardware stack levels required when called:    7
 16188 ;; This function calls:
 16189 ;;		_CC2500_WriteCommand
 16190 ;; This function is called by:
 16191 ;;		_CC2500_PowerOnInitial
 16192 ;; This function uses a non-reentrant model
 16193 ;;
 16194                           
 16195                           
 16196                           ;psect for function _CC2500_ClearTXFIFO
 16197  1E0B                     _CC2500_ClearTXFIFO:	
 16198                           
 16199                           ;CC2500_B1.c: 193: CC2500_WriteCommand(0x3B);
 16200                           
 16201                           ;incstack = 0
 16202                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16203  1E0B  303B               	movlw	59
 16204  1E0C  3191  2118         	fcall	_CC2500_WriteCommand
 16205  1E0E  0008               	return
 16206  1E0F                     __end_of_CC2500_ClearTXFIFO:	
 16207                           
 16208                           	psect	text117
 16209  1E07                     __ptext117:	
 16210 ;; *************** function _CC2500_ClearRXFIFO *****************
 16211 ;; Defined at:
 16212 ;;		line 199 in file "../src/CC2500_B1.c"
 16213 ;; Parameters:    Size  Location     Type
 16214 ;;		None
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;		None
 16217 ;; Return value:  Size  Location     Type
 16218 ;;		None               void
 16219 ;; Registers used:
 16220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16221 ;; Tracked objects:
 16222 ;;		On entry : 0/0
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16230 ;;Total ram usage:        0 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    7
 16233 ;; This function calls:
 16234 ;;		_CC2500_WriteCommand
 16235 ;; This function is called by:
 16236 ;;		_CC2500_PowerOnInitial
 16237 ;; This function uses a non-reentrant model
 16238 ;;
 16239                           
 16240                           
 16241                           ;psect for function _CC2500_ClearRXFIFO
 16242  1E07                     _CC2500_ClearRXFIFO:	
 16243                           
 16244                           ;CC2500_B1.c: 200: CC2500_WriteCommand(0x3A);
 16245                           
 16246                           ;incstack = 0
 16247                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16248  1E07  303A               	movlw	58
 16249  1E08  3191  2118         	fcall	_CC2500_WriteCommand
 16250  1E0A  0008               	return
 16251  1E0B                     __end_of_CC2500_ClearRXFIFO:	
 16252                           
 16253                           	psect	text118
 16254  1118                     __ptext118:	
 16255 ;; *************** function _CC2500_WriteCommand *****************
 16256 ;; Defined at:
 16257 ;;		line 290 in file "../src/CC2500_B1.c"
 16258 ;; Parameters:    Size  Location     Type
 16259 ;;  command         1    wreg     unsigned char 
 16260 ;; Auto vars:     Size  Location     Type
 16261 ;;  command         1    3[BANK0 ] unsigned char 
 16262 ;; Return value:  Size  Location     Type
 16263 ;;		None               void
 16264 ;; Registers used:
 16265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16266 ;; Tracked objects:
 16267 ;;		On entry : 0/0
 16268 ;;		On exit  : 0/0
 16269 ;;		Unchanged: 0/0
 16270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;Total ram usage:        2 bytes
 16276 ;; Hardware stack levels used:    1
 16277 ;; Hardware stack levels required when called:    6
 16278 ;; This function calls:
 16279 ;;		_CC2500_WriteByte
 16280 ;;		_Timeout_Counter
 16281 ;;		_set_TimeoutCleared
 16282 ;; This function is called by:
 16283 ;;		_CC2500_TxData
 16284 ;;		_CC2500_RxData
 16285 ;;		_CC2500_ClearTXFIFO
 16286 ;;		_CC2500_ClearRXFIFO
 16287 ;;		_CC2500_FrequencyCabr
 16288 ;;		_CC2500_SIDLEMode
 16289 ;;		_setRF_Main
 16290 ;;		_RF_RxDisable
 16291 ;; This function uses a non-reentrant model
 16292 ;;
 16293                           
 16294                           
 16295                           ;psect for function _CC2500_WriteCommand
 16296  1118                     _CC2500_WriteCommand:	
 16297                           
 16298                           ;incstack = 0
 16299                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16300                           ;CC2500_WriteCommand@command stored from wreg
 16301  1118  0020               	movlb	0	; select bank0
 16302  1119  00A3               	movwf	CC2500_WriteCommand@command
 16303                           
 16304                           ;CC2500_B1.c: 291: RC4 = 0;
 16305  111A  120E               	bcf	14,4	;volatile
 16306                           
 16307                           ;CC2500_B1.c: 292: SPI0Buffer = command;
 16308  111B  0823               	movf	CC2500_WriteCommand@command,w
 16309  111C  00A2               	movwf	??_CC2500_WriteCommand
 16310  111D  0822               	movf	??_CC2500_WriteCommand,w
 16311  111E  00FA               	movwf	_SPI0Buffer
 16312                           
 16313                           ;CC2500_B1.c: 294: while (RC2 == 1 && myMain.Timeout == 0) {
 16314  111F  2923               	goto	l7945
 16315  1120                     l7943:	
 16316                           
 16317                           ;CC2500_B1.c: 295: Timeout_Counter();
 16318  1120  3190  20C1  3191   	fcall	_Timeout_Counter
 16319  1123                     l7945:	
 16320  1123  0020               	movlb	0	; select bank0
 16321  1124  1D0E               	btfss	14,2	;volatile
 16322  1125  2929               	goto	l7949
 16323  1126  0021               	movlb	1	; select bank1
 16324  1127  1D2F               	btfss	(_myMain^(0+128)+15),2
 16325  1128  2920               	goto	l7943
 16326  1129                     l7949:	
 16327                           
 16328                           ;CC2500_B1.c: 296: };
 16329                           ;CC2500_B1.c: 297: set_TimeoutCleared();
 16330  1129  319E  2627  3191   	fcall	_set_TimeoutCleared
 16331                           
 16332                           ;CC2500_B1.c: 299: CC2500_WriteByte();
 16333  112C  3190  20AD         	fcall	_CC2500_WriteByte
 16334                           
 16335                           ;CC2500_B1.c: 300: RC4 = 1;
 16336  112E  0020               	movlb	0	; select bank0
 16337  112F  160E               	bsf	14,4	;volatile
 16338  1130  0008               	return
 16339  1131                     __end_of_CC2500_WriteCommand:	
 16340                           
 16341                           	psect	text119
 16342  1E27                     __ptext119:	
 16343 ;; *************** function _set_TimeoutCleared *****************
 16344 ;; Defined at:
 16345 ;;		line 217 in file "../src/main_B1.c"
 16346 ;; Parameters:    Size  Location     Type
 16347 ;;		None
 16348 ;; Auto vars:     Size  Location     Type
 16349 ;;		None
 16350 ;; Return value:  Size  Location     Type
 16351 ;;		None               void
 16352 ;; Registers used:
 16353 ;;		status,2
 16354 ;; Tracked objects:
 16355 ;;		On entry : 0/0
 16356 ;;		On exit  : 0/0
 16357 ;;		Unchanged: 0/0
 16358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16362 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16363 ;;Total ram usage:        0 bytes
 16364 ;; Hardware stack levels used:    1
 16365 ;; Hardware stack levels required when called:    5
 16366 ;; This function calls:
 16367 ;;		Nothing
 16368 ;; This function is called by:
 16369 ;;		_CC2500_TxData
 16370 ;;		_CC2500_RxData
 16371 ;;		_CC2500_PowerRST
 16372 ;;		_CC2500_WriteREG
 16373 ;;		_CC2500_WriteCommand
 16374 ;;		_CC2500_ReadStatus
 16375 ;;		_getAD
 16376 ;;		_TouchPower
 16377 ;;		_CC2500_ReadREG
 16378 ;; This function uses a non-reentrant model
 16379 ;;
 16380                           
 16381                           
 16382                           ;psect for function _set_TimeoutCleared
 16383  1E27                     _set_TimeoutCleared:	
 16384                           
 16385                           ;main_B1.c: 218: myMain.Timeout = 0;
 16386                           
 16387                           ;incstack = 0
 16388                           ; Regs used in _set_TimeoutCleared: [status,2]
 16389  1E27  0021               	movlb	1	; select bank1
 16390  1E28  112F               	bcf	(_myMain^(0+128)+15),2
 16391                           
 16392                           ;main_B1.c: 219: myMain.Timeout_Counter = 0;
 16393  1E29  01B0               	clrf	(_myMain^(0+128)+16)
 16394  1E2A  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16395  1E2B  0008               	return
 16396  1E2C                     __end_of_set_TimeoutCleared:	
 16397                           
 16398                           	psect	text120
 16399  10C1                     __ptext120:	
 16400 ;; *************** function _Timeout_Counter *****************
 16401 ;; Defined at:
 16402 ;;		line 208 in file "../src/main_B1.c"
 16403 ;; Parameters:    Size  Location     Type
 16404 ;;		None
 16405 ;; Auto vars:     Size  Location     Type
 16406 ;;		None
 16407 ;; Return value:  Size  Location     Type
 16408 ;;		None               void
 16409 ;; Registers used:
 16410 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16411 ;; Tracked objects:
 16412 ;;		On entry : 0/0
 16413 ;;		On exit  : 0/0
 16414 ;;		Unchanged: 0/0
 16415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;Total ram usage:        0 bytes
 16421 ;; Hardware stack levels used:    1
 16422 ;; Hardware stack levels required when called:    5
 16423 ;; This function calls:
 16424 ;;		Nothing
 16425 ;; This function is called by:
 16426 ;;		_CC2500_TxData
 16427 ;;		_CC2500_RxData
 16428 ;;		_CC2500_PowerRST
 16429 ;;		_CC2500_WriteREG
 16430 ;;		_CC2500_WriteCommand
 16431 ;;		_CC2500_ReadStatus
 16432 ;;		_getAD
 16433 ;;		_TouchPower
 16434 ;;		_CC2500_ReadREG
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           
 16439                           ;psect for function _Timeout_Counter
 16440  10C1                     _Timeout_Counter:	
 16441                           
 16442                           ;main_B1.c: 209: myMain.Timeout_Counter++;
 16443                           
 16444                           ;incstack = 0
 16445                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 16446  10C1  3001               	movlw	1
 16447  10C2  0021               	movlb	1	; select bank1
 16448  10C3  07B0               	addwf	(_myMain^(0+128)+16),f
 16449  10C4  3000               	movlw	0
 16450  10C5  3DB1               	addwfc	((_myMain+1)^(0+128)+16),f
 16451                           
 16452                           ;main_B1.c: 210: if (myMain.Timeout_Counter == 10000) {
 16453  10C6  3010               	movlw	16
 16454  10C7  3EA0               	addlw	_myMain& (0+255)
 16455  10C8  0086               	movwf	6
 16456  10C9  0187               	clrf	7
 16457  10CA  3F40               	moviw [0]fsr1
 16458  10CB  3A10               	xorlw	16
 16459  10CC  1D03               	skipz
 16460  10CD  28D0               	goto	u7455
 16461  10CE  3F41               	moviw [1]fsr1
 16462  10CF  3A27               	xorlw	39
 16463  10D0                     u7455:	
 16464  10D0  1D03               	skipz
 16465  10D1  0008               	return
 16466                           
 16467                           ;main_B1.c: 211: myMain.Timeout_Counter = 0;
 16468  10D2  01B0               	clrf	(_myMain^(0+128)+16)
 16469  10D3  01B1               	clrf	((_myMain+1)^(0+128)+16)
 16470                           
 16471                           ;main_B1.c: 212: myMain.Timeout = 1;
 16472  10D4  152F               	bsf	(_myMain^(0+128)+15),2
 16473  10D5  0008               	return
 16474  10D6                     __end_of_Timeout_Counter:	
 16475                           
 16476                           	psect	text121
 16477  10AD                     __ptext121:	
 16478 ;; *************** function _CC2500_WriteByte *****************
 16479 ;; Defined at:
 16480 ;;		line 224 in file "../src/CC2500_B1.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;		None
 16483 ;; Auto vars:     Size  Location     Type
 16484 ;;  loop_a          1    1[BANK0 ] unsigned char 
 16485 ;; Return value:  Size  Location     Type
 16486 ;;		None               void
 16487 ;; Registers used:
 16488 ;;		wreg, status,2, status,0
 16489 ;; Tracked objects:
 16490 ;;		On entry : 0/0
 16491 ;;		On exit  : 0/0
 16492 ;;		Unchanged: 0/0
 16493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16495 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16496 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16498 ;;Total ram usage:        2 bytes
 16499 ;; Hardware stack levels used:    1
 16500 ;; Hardware stack levels required when called:    5
 16501 ;; This function calls:
 16502 ;;		Nothing
 16503 ;; This function is called by:
 16504 ;;		_CC2500_TxData
 16505 ;;		_CC2500_RxData
 16506 ;;		_CC2500_PowerRST
 16507 ;;		_CC2500_WriteREG
 16508 ;;		_CC2500_WriteCommand
 16509 ;;		_CC2500_ReadStatus
 16510 ;;		_CC2500_ReadREG
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           
 16515                           ;psect for function _CC2500_WriteByte
 16516  10AD                     _CC2500_WriteByte:	
 16517                           
 16518                           ;CC2500_B1.c: 225: unsigned char loop_a;
 16519                           ;CC2500_B1.c: 226: for (loop_a = 0; loop_a < 8; loop_a++) {
 16520                           
 16521                           ;incstack = 0
 16522                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 16523  10AD  0020               	movlb	0	; select bank0
 16524  10AE  01A1               	clrf	CC2500_WriteByte@loop_a
 16525  10AF                     L7:	
 16526  10AF  3008               	movlw	8
 16527  10B0  0221               	subwf	CC2500_WriteByte@loop_a,w
 16528  10B1  1803               	btfsc	3,0
 16529  10B2  0008               	return
 16530                           
 16531                           ;CC2500_B1.c: 227: if (SPI0Buffer & 0x80)
 16532  10B3  1FFA               	btfss	_SPI0Buffer,7
 16533  10B4  28B7               	goto	l318
 16534                           
 16535                           ;CC2500_B1.c: 228: RC0 = 1;
 16536  10B5  140E               	bsf	14,0	;volatile
 16537  10B6  28B8               	goto	l319
 16538  10B7                     l318:	
 16539                           
 16540                           ;CC2500_B1.c: 229: else
 16541                           ;CC2500_B1.c: 230: RC0 = 0;
 16542  10B7  100E               	bcf	14,0	;volatile
 16543  10B8                     l319:	
 16544                           
 16545                           ;CC2500_B1.c: 231: RC1 = 1;
 16546  10B8  148E               	bsf	14,1	;volatile
 16547                           
 16548                           ;CC2500_B1.c: 232: SPI0Buffer <<= 1;
 16549  10B9  1003               	clrc
 16550  10BA  0DFA               	rlf	_SPI0Buffer,f
 16551                           
 16552                           ;CC2500_B1.c: 233: RC1 = 0;
 16553  10BB  108E               	bcf	14,1	;volatile
 16554  10BC  3001               	movlw	1
 16555  10BD  00A0               	movwf	??_CC2500_WriteByte
 16556  10BE  0820               	movf	??_CC2500_WriteByte,w
 16557  10BF  07A1               	addwf	CC2500_WriteByte@loop_a,f
 16558  10C0  28AF               	goto	L7
 16559  10C1                     __end_of_CC2500_WriteByte:	
 16560                           
 16561                           	psect	text122
 16562  1768                     __ptext122:	
 16563 ;; *************** function _Buzzer_Main *****************
 16564 ;; Defined at:
 16565 ;;		line 46 in file "../src/Buzzer_B1.c"
 16566 ;; Parameters:    Size  Location     Type
 16567 ;;		None
 16568 ;; Auto vars:     Size  Location     Type
 16569 ;;		None
 16570 ;; Return value:  Size  Location     Type
 16571 ;;		None               void
 16572 ;; Registers used:
 16573 ;;		wreg, status,2, status,0
 16574 ;; Tracked objects:
 16575 ;;		On entry : 0/0
 16576 ;;		On exit  : 0/0
 16577 ;;		Unchanged: 0/0
 16578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16581 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16582 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16583 ;;Total ram usage:        1 bytes
 16584 ;; Hardware stack levels used:    1
 16585 ;; Hardware stack levels required when called:    5
 16586 ;; This function calls:
 16587 ;;		Nothing
 16588 ;; This function is called by:
 16589 ;;		_main
 16590 ;; This function uses a non-reentrant model
 16591 ;;
 16592                           
 16593                           
 16594                           ;psect for function _Buzzer_Main
 16595  1768                     _Buzzer_Main:	
 16596                           
 16597                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 16598                           
 16599                           ;incstack = 0
 16600                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 16601  1768  0021               	movlb	1	; select bank1
 16602  1769  1CB2               	btfss	_Buz1^(0+128),1
 16603  176A  0008               	return
 16604                           
 16605                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 16606  176B  3001               	movlw	1
 16607  176C  07B3               	addwf	(_Buz1^(0+128)+1),f
 16608  176D  3000               	movlw	0
 16609  176E  3DB4               	addwfc	((_Buz1+1)^(0+128)+1),f
 16610                           
 16611                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 16612  176F  0839               	movf	((_Buz1+1)^(0+128)+6),w
 16613  1770  0234               	subwf	((_Buz1+1)^(0+128)+1),w
 16614  1771  1D03               	skipz
 16615  1772  2F75               	goto	u9115
 16616  1773  0838               	movf	(_Buz1^(0+128)+6),w
 16617  1774  0233               	subwf	(_Buz1^(0+128)+1),w
 16618  1775                     u9115:	
 16619  1775  1C03               	skipc
 16620  1776  0008               	return
 16621                           
 16622                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 16623  1777  01B3               	clrf	(_Buz1^(0+128)+1)
 16624  1778  01B4               	clrf	((_Buz1+1)^(0+128)+1)
 16625                           
 16626                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 16627  1779  12B2               	bcf	_Buz1^(0+128),5
 16628  177A  0020               	movlb	0	; select bank0
 16629  177B  1D8D               	btfss	13,3	;volatile
 16630  177C  2F7F               	goto	l9001
 16631  177D  0021               	movlb	1	; select bank1
 16632  177E  16B2               	bsf	_Buz1^(0+128),5
 16633  177F                     l9001:	
 16634                           
 16635                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 16636  177F  0021               	movlb	1	; select bank1
 16637  1780  1AB2               	btfsc	_Buz1^(0+128),5
 16638  1781  2FAB               	goto	l100
 16639                           
 16640                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 16641  1782  08B5               	movf	(_Buz1^(0+128)+3),f
 16642  1783  1D03               	skipz
 16643  1784  2FA7               	goto	l101
 16644                           
 16645                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 16646  1785  1DB2               	btfss	_Buz1^(0+128),3
 16647  1786  2F95               	goto	l102
 16648                           
 16649                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 16650  1787  11B2               	bcf	_Buz1^(0+128),3
 16651                           
 16652                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 16653  1788  0836               	movf	(_Buz1^(0+128)+4),w
 16654  1789  0020               	movlb	0	; select bank0
 16655  178A  00A0               	movwf	??_Buzzer_Main
 16656  178B  0820               	movf	??_Buzzer_Main,w
 16657  178C  0021               	movlb	1	; select bank1
 16658  178D  00B5               	movwf	(_Buz1^(0+128)+3)
 16659                           
 16660                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 16661  178E  083B               	movf	((_Buz1+1)^(0+128)+8),w
 16662  178F  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16663  1790  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16664  1791  083A               	movf	(_Buz1^(0+128)+8),w
 16665  1792  01B8               	clrf	(_Buz1^(0+128)+6)
 16666  1793  07B8               	addwf	(_Buz1^(0+128)+6),f
 16667                           
 16668                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 16669  1794  0008               	return
 16670  1795                     l102:	
 16671  1795  1E32               	btfss	_Buz1^(0+128),4
 16672  1796  2FA5               	goto	l104
 16673                           
 16674                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 16675  1797  1232               	bcf	_Buz1^(0+128),4
 16676                           
 16677                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 16678  1798  0837               	movf	(_Buz1^(0+128)+5),w
 16679  1799  0020               	movlb	0	; select bank0
 16680  179A  00A0               	movwf	??_Buzzer_Main
 16681  179B  0820               	movf	??_Buzzer_Main,w
 16682  179C  0021               	movlb	1	; select bank1
 16683  179D  00B5               	movwf	(_Buz1^(0+128)+3)
 16684                           
 16685                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 16686  179E  083D               	movf	((_Buz1+1)^(0+128)+10),w
 16687  179F  01B9               	clrf	((_Buz1+1)^(0+128)+6)
 16688  17A0  07B9               	addwf	((_Buz1+1)^(0+128)+6),f
 16689  17A1  083C               	movf	(_Buz1^(0+128)+10),w
 16690  17A2  01B8               	clrf	(_Buz1^(0+128)+6)
 16691  17A3  07B8               	addwf	(_Buz1^(0+128)+6),f
 16692                           
 16693                           ;Buzzer_B1.c: 62: } else {
 16694  17A4  0008               	return
 16695  17A5                     l104:	
 16696                           
 16697                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 16698  17A5  10B2               	bcf	_Buz1^(0+128),1
 16699                           
 16700                           ;Buzzer_B1.c: 64: }
 16701                           ;Buzzer_B1.c: 65: } else {
 16702  17A6  0008               	return
 16703  17A7                     l101:	
 16704                           
 16705                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 16706  17A7  16B2               	bsf	_Buz1^(0+128),5
 16707                           
 16708                           ;Buzzer_B1.c: 68: RB3 = 1;
 16709  17A8  0020               	movlb	0	; select bank0
 16710  17A9  158D               	bsf	13,3	;volatile
 16711                           
 16712                           ;Buzzer_B1.c: 69: }
 16713                           ;Buzzer_B1.c: 70: } else {
 16714  17AA  0008               	return
 16715  17AB                     l100:	
 16716                           
 16717                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 16718  17AB  12B2               	bcf	_Buz1^(0+128),5
 16719                           
 16720                           ;Buzzer_B1.c: 73: RB3 = 0;
 16721  17AC  0020               	movlb	0	; select bank0
 16722  17AD  118D               	bcf	13,3	;volatile
 16723                           
 16724                           ;Buzzer_B1.c: 75: Buz1.Count--;
 16725  17AE  3001               	movlw	1
 16726  17AF  0021               	movlb	1	; select bank1
 16727  17B0  02B5               	subwf	(_Buz1^(0+128)+3),f
 16728  17B1  0008               	return
 16729  17B2                     __end_of_Buzzer_Main:	
 16730                           
 16731                           	psect	text123
 16732  1DEB                     __ptext123:	
 16733 ;; *************** function _Buzzer_Initialization *****************
 16734 ;; Defined at:
 16735 ;;		line 11 in file "../src/Buzzer_B1.c"
 16736 ;; Parameters:    Size  Location     Type
 16737 ;;		None
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;		None
 16740 ;; Return value:  Size  Location     Type
 16741 ;;		None               void
 16742 ;; Registers used:
 16743 ;;		None
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16753 ;;Total ram usage:        0 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; Hardware stack levels required when called:    5
 16756 ;; This function calls:
 16757 ;;		Nothing
 16758 ;; This function is called by:
 16759 ;;		_main
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           
 16764                           ;psect for function _Buzzer_Initialization
 16765  1DEB                     _Buzzer_Initialization:	
 16766                           
 16767                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 16768                           
 16769                           ;incstack = 0
 16770                           ; Regs used in _Buzzer_Initialization: []
 16771  1DEB  0021               	movlb	1	; select bank1
 16772  1DEC  1432               	bsf	_Buz1^(0+128),0
 16773  1DED  0008               	return
 16774  1DEE                     __end_of_Buzzer_Initialization:	
 16775                           
 16776                           	psect	intentry
 16777  0004                     __pintentry:	
 16778 ;; *************** function _ISR *****************
 16779 ;; Defined at:
 16780 ;;		line 107 in file "../src/MCU_B1.c"
 16781 ;; Parameters:    Size  Location     Type
 16782 ;;		None
 16783 ;; Auto vars:     Size  Location     Type
 16784 ;;		None
 16785 ;; Return value:  Size  Location     Type
 16786 ;;		None               void
 16787 ;; Registers used:
 16788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16797 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16798 ;;Total ram usage:        1 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    4
 16801 ;; This function calls:
 16802 ;;		_IOC_ISR
 16803 ;;		_TMR0_ISR
 16804 ;; This function is called by:
 16805 ;;		Interrupt level 1
 16806 ;; This function uses a non-reentrant model
 16807 ;;
 16808                           
 16809  0004                     _ISR:	
 16810                           
 16811                           ;incstack = 0
 16812                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16813  0004  147E               	bsf	126,0	;set compiler interrupt flag
 16814  0005  3180               	pagesel	$
 16815  0006  0020               	movlb	0	; select bank0
 16816  0007  087F               	movf	127,w
 16817  0008  00F5               	movwf	??_ISR
 16818                           
 16819                           ;MCU_B1.c: 109: IOC_ISR();
 16820  0009  319F  2713  3180   	fcall	_IOC_ISR
 16821                           
 16822                           ;MCU_B1.c: 111: TMR0_ISR();
 16823  000C  3192  2264         	fcall	_TMR0_ISR
 16824  000E  0875               	movf	??_ISR,w
 16825  000F  0020               	movlb	0	; select bank0
 16826  0010  00FF               	movwf	127
 16827  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 16828  0012  0009               	retfie
 16829  0013                     __end_of_ISR:	
 16830                           
 16831                           	psect	text125
 16832  1264                     __ptext125:	
 16833 ;; *************** function _TMR0_ISR *****************
 16834 ;; Defined at:
 16835 ;;		line 135 in file "../src/MCU_B1.c"
 16836 ;; Parameters:    Size  Location     Type
 16837 ;;		None
 16838 ;; Auto vars:     Size  Location     Type
 16839 ;;		None
 16840 ;; Return value:  Size  Location     Type
 16841 ;;		None               void
 16842 ;; Registers used:
 16843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16844 ;; Tracked objects:
 16845 ;;		On entry : 0/0
 16846 ;;		On exit  : 0/0
 16847 ;;		Unchanged: 0/0
 16848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16853 ;;Total ram usage:        0 bytes
 16854 ;; Hardware stack levels used:    1
 16855 ;; Hardware stack levels required when called:    2
 16856 ;; This function calls:
 16857 ;;		_setDimmerLights_IntrControl
 16858 ;; This function is called by:
 16859 ;;		_ISR
 16860 ;; This function uses a non-reentrant model
 16861 ;;
 16862                           
 16863                           
 16864                           ;psect for function _TMR0_ISR
 16865  1264                     _TMR0_ISR:	
 16866                           
 16867                           ;MCU_B1.c: 136: if (TMR0IE == 1 && TMR0IF == 1) {
 16868                           
 16869                           ;incstack = 0
 16870                           ; Regs used in _TMR0_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16871  1264  1E8B               	btfss	11,5	;volatile
 16872  1265  0008               	return
 16873  1266  1D0B               	btfss	11,2	;volatile
 16874  1267  0008               	return
 16875                           
 16876                           ;MCU_B1.c: 138: TMR0 = (256-190);
 16877  1268  3042               	movlw	66
 16878  1269  0020               	movlb	0	; select bank0
 16879  126A  0095               	movwf	21	;volatile
 16880                           
 16881                           ;MCU_B1.c: 139: TMR0IF = 0;
 16882  126B  110B               	bcf	11,2	;volatile
 16883                           
 16884                           ;MCU_B1.c: 144: setDimmerLights_IntrControl(1);
 16885  126C  3001               	movlw	1
 16886  126D  3180  2047  3192   	fcall	_setDimmerLights_IntrControl
 16887                           
 16888                           ;MCU_B1.c: 160: Timer0.Count++;
 16889  1270  3001               	movlw	1
 16890  1271  0022               	movlb	2	; select bank2
 16891  1272  07B6               	addwf	(_Timer0^(0+256)+1),f
 16892  1273  3000               	movlw	0
 16893  1274  3DB7               	addwfc	((_Timer0+1)^(0+256)+1),f
 16894                           
 16895                           ;MCU_B1.c: 161: if (Timer0.Count == 100) {
 16896  1275  3001               	movlw	1
 16897  1276  3E35               	addlw	_Timer0& (0+255)
 16898  1277  0086               	movwf	6
 16899  1278  3001               	movlw	1	; select bank2/3
 16900  1279  0087               	movwf	7
 16901  127A  3F40               	moviw [0]fsr1
 16902  127B  3A64               	xorlw	100
 16903  127C  1D03               	skipz
 16904  127D  2A80               	goto	u668_25
 16905  127E  3F41               	moviw [1]fsr1
 16906  127F  3A00               	xorlw	0
 16907  1280                     u668_25:	
 16908  1280  1D03               	skipz
 16909  1281  0008               	return
 16910                           
 16911                           ;MCU_B1.c: 162: Timer0.Count = 0;
 16912  1282  01B6               	clrf	(_Timer0^(0+256)+1)
 16913  1283  01B7               	clrf	((_Timer0+1)^(0+256)+1)
 16914                           
 16915                           ;MCU_B1.c: 163: myMain.T0_Timerout = 1;
 16916  1284  0021               	movlb	1	; select bank1
 16917  1285  14A0               	bsf	_myMain^(0+128),1
 16918  1286  0008               	return
 16919  1287                     __end_of_TMR0_ISR:	
 16920                           
 16921                           	psect	text126
 16922  0047                     __ptext126:	
 16923 ;; *************** function _setDimmerLights_IntrControl *****************
 16924 ;; Defined at:
 16925 ;;		line 95 in file "../src/Dimmer_B1.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  lights          1    wreg     unsigned char 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  lights          1    4[COMMON] unsigned char 
 16930 ;; Return value:  Size  Location     Type
 16931 ;;		None               void
 16932 ;; Registers used:
 16933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16934 ;; Tracked objects:
 16935 ;;		On entry : 0/0
 16936 ;;		On exit  : 0/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        3 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; Hardware stack levels required when called:    1
 16946 ;; This function calls:
 16947 ;;		_DimmerIntrPointSelect
 16948 ;; This function is called by:
 16949 ;;		_TMR0_ISR
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _setDimmerLights_IntrControl
 16955  0047                     _setDimmerLights_IntrControl:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 16959                           ;setDimmerLights_IntrControl@lights stored from wreg
 16960  0047  00F4               	movwf	setDimmerLights_IntrControl@lights
 16961                           
 16962                           ;Dimmer_B1.c: 97: DimmerIntrPointSelect(lights);
 16963  0048  0874               	movf	setDimmerLights_IntrControl@lights,w
 16964  0049  319E  2697  3180   	fcall	_DimmerIntrPointSelect
 16965                           
 16966                           ;Dimmer_B1.c: 98: if (DimmerLightsIntr->GO == 1) {
 16967  004C  0877               	movf	_DimmerLightsIntr,w
 16968  004D  0086               	movwf	6
 16969  004E  3001               	movlw	1	; select bank2/3
 16970  004F  0087               	movwf	7
 16971  0050  1C01               	btfss	1,0
 16972  0051  289C               	goto	i1l6565
 16973                           
 16974                           ;Dimmer_B1.c: 99: DimmerLightsIntr->Count++;
 16975  0052  3001               	movlw	1
 16976  0053  00F2               	movwf	??_setDimmerLights_IntrControl
 16977  0054  0877               	movf	_DimmerLightsIntr,w
 16978  0055  3E03               	addlw	3
 16979  0056  0086               	movwf	6
 16980  0057  3001               	movlw	1	; select bank2/3
 16981  0058  0087               	movwf	7
 16982  0059  0872               	movf	??_setDimmerLights_IntrControl,w
 16983  005A  0781               	addwf	1,f
 16984                           
 16985                           ;Dimmer_B1.c: 100: if (DimmerLightsIntr->Count >= (DimmerLightsIntr->DimmingValue + Dimm
      +                          er->Correction)) {
 16986  005B  0876               	movf	_Dimmer,w
 16987  005C  3E02               	addlw	2
 16988  005D  0086               	movwf	6
 16989  005E  0187               	clrf	7
 16990  005F  0877               	movf	_DimmerLightsIntr,w
 16991  0060  3E04               	addlw	4
 16992  0061  0084               	movwf	4
 16993  0062  3001               	movlw	1	; select bank2/3
 16994  0063  0085               	movwf	5
 16995  0064  0800               	movf	0,w
 16996  0065  0701               	addwf	1,w
 16997  0066  00F2               	movwf	??_setDimmerLights_IntrControl
 16998  0067  01F3               	clrf	??_setDimmerLights_IntrControl+1
 16999  0068  0DF3               	rlf	??_setDimmerLights_IntrControl+1,f
 17000  0069  0877               	movf	_DimmerLightsIntr,w
 17001  006A  3E03               	addlw	3
 17002  006B  0086               	movwf	6
 17003  006C  3001               	movlw	1	; select bank2/3
 17004  006D  0087               	movwf	7
 17005  006E  0873               	movf	??_setDimmerLights_IntrControl+1,w
 17006  006F  3A80               	xorlw	128
 17007  0070  3C80               	sublw	128
 17008  0071  1D03               	skipz
 17009  0072  2875               	goto	u555_25
 17010  0073  0872               	movf	??_setDimmerLights_IntrControl,w
 17011  0074  0201               	subwf	1,w
 17012  0075                     u555_25:	
 17013  0075  1C03               	skipc
 17014  0076  299F               	goto	i1l6623
 17015                           
 17016                           ;Dimmer_B1.c: 101: DimmerLightsIntr->Count = 0;
 17017  0077  0877               	movf	_DimmerLightsIntr,w
 17018  0078  3E03               	addlw	3
 17019  0079  0086               	movwf	6
 17020  007A  3001               	movlw	1	; select bank2/3
 17021  007B  0087               	movwf	7
 17022  007C  0181               	clrf	1
 17023                           
 17024                           ;Dimmer_B1.c: 102: DimmerLightsIntr->GO = 0;
 17025  007D  0877               	movf	_DimmerLightsIntr,w
 17026  007E  0086               	movwf	6
 17027  007F  3001               	movlw	1	; select bank2/3
 17028  0080  0087               	movwf	7
 17029  0081  1001               	bcf	1,0
 17030                           
 17031                           ;Dimmer_B1.c: 104: if (DimmerLightsIntr->StatusFlag == 1) {
 17032  0082  0877               	movf	_DimmerLightsIntr,w
 17033  0083  0086               	movwf	6
 17034  0084  3001               	movlw	1	; select bank2/3
 17035  0085  0087               	movwf	7
 17036  0086  1F01               	btfss	1,6
 17037  0087  299F               	goto	i1l6623
 17038                           
 17039                           ;Dimmer_B1.c: 105: DimmerLightsIntr->Flag = 1;
 17040  0088  0877               	movf	_DimmerLightsIntr,w
 17041  0089  3E08               	addlw	8
 17042  008A  0086               	movwf	6
 17043  008B  3001               	movlw	1	; select bank2/3
 17044  008C  0087               	movwf	7
 17045  008D  1401               	bsf	1,0
 17046                           
 17047                           ;Dimmer_B1.c: 106: DimmerLightsIntr->Triac = 1;
 17048  008E  0877               	movf	_DimmerLightsIntr,w
 17049  008F  3E08               	addlw	8
 17050  0090  0086               	movwf	6
 17051  0091  3001               	movlw	1	; select bank2/3
 17052  0092  0087               	movwf	7
 17053  0093  1681               	bsf	1,5
 17054                           
 17055                           ;Dimmer_B1.c: 108: if (lights == 1) {
 17056  0094  0874               	movf	setDimmerLights_IntrControl@lights,w
 17057  0095  3A01               	xorlw	1
 17058  0096  1D03               	skipz
 17059  0097  299F               	goto	i1l6623
 17060                           
 17061                           ;Dimmer_B1.c: 109: RA7 = 1;
 17062  0098  0020               	movlb	0	; select bank0
 17063  0099  178C               	bsf	12,7	;volatile
 17064                           
 17065                           ;Dimmer_B1.c: 110: RB4=1;
 17066  009A  160D               	bsf	13,4	;volatile
 17067                           
 17068                           ;Dimmer_B1.c: 111: }
 17069                           ;Dimmer_B1.c: 123: }
 17070                           ;Dimmer_B1.c: 124: }
 17071                           ;Dimmer_B1.c: 125: } else {
 17072  009B  299F               	goto	i1l6623
 17073  009C                     i1l6565:	
 17074                           
 17075                           ;Dimmer_B1.c: 126: if (DimmerLightsIntr->Flag == 1) {
 17076  009C  0877               	movf	_DimmerLightsIntr,w
 17077  009D  3E08               	addlw	8
 17078  009E  0086               	movwf	6
 17079  009F  3001               	movlw	1	; select bank2/3
 17080  00A0  0087               	movwf	7
 17081  00A1  1C01               	btfss	1,0
 17082  00A2  299F               	goto	i1l6623
 17083                           
 17084                           ;Dimmer_B1.c: 127: DimmerLightsIntr->Flag = 0;
 17085  00A3  0877               	movf	_DimmerLightsIntr,w
 17086  00A4  3E08               	addlw	8
 17087  00A5  0086               	movwf	6
 17088  00A6  3001               	movlw	1	; select bank2/3
 17089  00A7  0087               	movwf	7
 17090  00A8  1001               	bcf	1,0
 17091                           
 17092                           ;Dimmer_B1.c: 128: if (DimmerLightsIntr->Signal == 1) {
 17093  00A9  0877               	movf	_DimmerLightsIntr,w
 17094  00AA  0086               	movwf	6
 17095  00AB  3001               	movlw	1	; select bank2/3
 17096  00AC  0087               	movwf	7
 17097  00AD  1C81               	btfss	1,1
 17098  00AE  299F               	goto	i1l6623
 17099                           
 17100                           ;Dimmer_B1.c: 129: DimmerLightsIntr->DimmingTime++;
 17101  00AF  3001               	movlw	1
 17102  00B0  00F2               	movwf	??_setDimmerLights_IntrControl
 17103  00B1  0A77               	incf	_DimmerLightsIntr,w
 17104  00B2  0086               	movwf	6
 17105  00B3  3001               	movlw	1	; select bank2/3
 17106  00B4  0087               	movwf	7
 17107  00B5  0872               	movf	??_setDimmerLights_IntrControl,w
 17108  00B6  0781               	addwf	1,f
 17109                           
 17110                           ;Dimmer_B1.c: 130: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 17111  00B7  0A77               	incf	_DimmerLightsIntr,w
 17112  00B8  0086               	movwf	6
 17113  00B9  3001               	movlw	1	; select bank2/3
 17114  00BA  0087               	movwf	7
 17115  00BB  0877               	movf	_DimmerLightsIntr,w
 17116  00BC  3E02               	addlw	2
 17117  00BD  0084               	movwf	4
 17118  00BE  3001               	movlw	1	; select bank2/3
 17119  00BF  0085               	movwf	5
 17120  00C0  0800               	movf	0,w
 17121  00C1  0201               	subwf	1,w
 17122  00C2  1C03               	skipc
 17123  00C3  299F               	goto	i1l6623
 17124                           
 17125                           ;Dimmer_B1.c: 131: DimmerLightsIntr->DimmingTime = 0;
 17126  00C4  0A77               	incf	_DimmerLightsIntr,w
 17127  00C5  0086               	movwf	6
 17128  00C6  3001               	movlw	1	; select bank2/3
 17129  00C7  0087               	movwf	7
 17130  00C8  0181               	clrf	1
 17131                           
 17132                           ;Dimmer_B1.c: 132: if (DimmerLightsIntr->AdjFlag == 1) {
 17133  00C9  0877               	movf	_DimmerLightsIntr,w
 17134  00CA  0086               	movwf	6
 17135  00CB  3001               	movlw	1	; select bank2/3
 17136  00CC  0087               	movwf	7
 17137  00CD  1D81               	btfss	1,3
 17138  00CE  2905               	goto	i1l6591
 17139                           
 17140                           ;Dimmer_B1.c: 133: if (DimmerLightsIntr->AdjStatus == 0) {
 17141  00CF  0877               	movf	_DimmerLightsIntr,w
 17142  00D0  0086               	movwf	6
 17143  00D1  3001               	movlw	1	; select bank2/3
 17144  00D2  0087               	movwf	7
 17145  00D3  1A01               	btfsc	1,4
 17146  00D4  28EC               	goto	i1l6585
 17147                           
 17148                           ;Dimmer_B1.c: 134: if (DimmerLightsIntr->DimmingValue > ((char)((100-60)*0.8))) {
 17149  00D5  0877               	movf	_DimmerLightsIntr,w
 17150  00D6  3E04               	addlw	4
 17151  00D7  0086               	movwf	6
 17152  00D8  3001               	movlw	1	; select bank2/3
 17153  00D9  0087               	movwf	7
 17154  00DA  3021               	movlw	33
 17155  00DB  0201               	subwf	1,w
 17156  00DC  1C03               	skipc
 17157  00DD  28E6               	goto	i1l6583
 17158                           
 17159                           ;Dimmer_B1.c: 135: DimmerLightsIntr->DimmingValue--;
 17160  00DE  0877               	movf	_DimmerLightsIntr,w
 17161  00DF  3E04               	addlw	4
 17162  00E0  0086               	movwf	6
 17163  00E1  3001               	movlw	1	; select bank2/3
 17164  00E2  0087               	movwf	7
 17165  00E3  3001               	movlw	1
 17166  00E4  0281               	subwf	1,f
 17167                           
 17168                           ;Dimmer_B1.c: 136: } else {
 17169  00E5  299F               	goto	i1l6623
 17170  00E6                     i1l6583:	
 17171                           
 17172                           ;Dimmer_B1.c: 137: DimmerLightsIntr->AdjStatus = 1;
 17173  00E6  0877               	movf	_DimmerLightsIntr,w
 17174  00E7  0086               	movwf	6
 17175  00E8  3001               	movlw	1	; select bank2/3
 17176  00E9  0087               	movwf	7
 17177  00EA  1601               	bsf	1,4
 17178                           
 17179                           ;Dimmer_B1.c: 138: }
 17180                           ;Dimmer_B1.c: 139: } else {
 17181  00EB  299F               	goto	i1l6623
 17182  00EC                     i1l6585:	
 17183                           
 17184                           ;Dimmer_B1.c: 140: if (DimmerLightsIntr->DimmingValue < ((char)((100-25)*0.8))) {
 17185  00EC  0877               	movf	_DimmerLightsIntr,w
 17186  00ED  3E04               	addlw	4
 17187  00EE  0086               	movwf	6
 17188  00EF  3001               	movlw	1	; select bank2/3
 17189  00F0  0087               	movwf	7
 17190  00F1  303C               	movlw	60
 17191  00F2  0201               	subwf	1,w
 17192  00F3  1803               	skipnc
 17193  00F4  28FF               	goto	i1l6589
 17194                           
 17195                           ;Dimmer_B1.c: 141: DimmerLightsIntr->DimmingValue++;
 17196  00F5  3001               	movlw	1
 17197  00F6  00F2               	movwf	??_setDimmerLights_IntrControl
 17198  00F7  0877               	movf	_DimmerLightsIntr,w
 17199  00F8  3E04               	addlw	4
 17200  00F9  0086               	movwf	6
 17201  00FA  3001               	movlw	1	; select bank2/3
 17202  00FB  0087               	movwf	7
 17203  00FC  0872               	movf	??_setDimmerLights_IntrControl,w
 17204  00FD  0781               	addwf	1,f
 17205                           
 17206                           ;Dimmer_B1.c: 142: } else {
 17207  00FE  299F               	goto	i1l6623
 17208  00FF                     i1l6589:	
 17209                           
 17210                           ;Dimmer_B1.c: 143: DimmerLightsIntr->AdjStatus = 0;
 17211  00FF  0877               	movf	_DimmerLightsIntr,w
 17212  0100  0086               	movwf	6
 17213  0101  3001               	movlw	1	; select bank2/3
 17214  0102  0087               	movwf	7
 17215  0103  1201               	bcf	1,4
 17216                           
 17217                           ;Dimmer_B1.c: 144: }
 17218                           ;Dimmer_B1.c: 145: }
 17219                           ;Dimmer_B1.c: 146: } else if (DimmerLightsIntr->AdjRF == 1) {
 17220  0104  299F               	goto	i1l6623
 17221  0105                     i1l6591:	
 17222  0105  0877               	movf	_DimmerLightsIntr,w
 17223  0106  0086               	movwf	6
 17224  0107  3001               	movlw	1	; select bank2/3
 17225  0108  0087               	movwf	7
 17226  0109  1D01               	btfss	1,2
 17227  010A  294C               	goto	i1l6605
 17228                           
 17229                           ;Dimmer_B1.c: 147: if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumValue) {
 17230  010B  0877               	movf	_DimmerLightsIntr,w
 17231  010C  3E05               	addlw	5
 17232  010D  0086               	movwf	6
 17233  010E  3001               	movlw	1	; select bank2/3
 17234  010F  0087               	movwf	7
 17235  0110  0877               	movf	_DimmerLightsIntr,w
 17236  0111  3E04               	addlw	4
 17237  0112  0084               	movwf	4
 17238  0113  3001               	movlw	1	; select bank2/3
 17239  0114  0085               	movwf	5
 17240  0115  0800               	movf	0,w
 17241  0116  0201               	subwf	1,w
 17242  0117  1803               	skipnc
 17243  0118  2921               	goto	i1l6597
 17244                           
 17245                           ;Dimmer_B1.c: 148: DimmerLightsIntr->DimmingValue--;
 17246  0119  0877               	movf	_DimmerLightsIntr,w
 17247  011A  3E04               	addlw	4
 17248  011B  0086               	movwf	6
 17249  011C  3001               	movlw	1	; select bank2/3
 17250  011D  0087               	movwf	7
 17251  011E  3001               	movlw	1
 17252  011F  0281               	subwf	1,f
 17253                           
 17254                           ;Dimmer_B1.c: 149: } else if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumV
      +                          alue) {
 17255  0120  2938               	goto	i1l6601
 17256  0121                     i1l6597:	
 17257  0121  0877               	movf	_DimmerLightsIntr,w
 17258  0122  3E04               	addlw	4
 17259  0123  0086               	movwf	6
 17260  0124  3001               	movlw	1	; select bank2/3
 17261  0125  0087               	movwf	7
 17262  0126  0877               	movf	_DimmerLightsIntr,w
 17263  0127  3E05               	addlw	5
 17264  0128  0084               	movwf	4
 17265  0129  3001               	movlw	1	; select bank2/3
 17266  012A  0085               	movwf	5
 17267  012B  0800               	movf	0,w
 17268  012C  0201               	subwf	1,w
 17269  012D  1803               	skipnc
 17270  012E  2938               	goto	i1l6601
 17271                           
 17272                           ;Dimmer_B1.c: 150: DimmerLightsIntr->DimmingValue++;
 17273  012F  3001               	movlw	1
 17274  0130  00F2               	movwf	??_setDimmerLights_IntrControl
 17275  0131  0877               	movf	_DimmerLightsIntr,w
 17276  0132  3E04               	addlw	4
 17277  0133  0086               	movwf	6
 17278  0134  3001               	movlw	1	; select bank2/3
 17279  0135  0087               	movwf	7
 17280  0136  0872               	movf	??_setDimmerLights_IntrControl,w
 17281  0137  0781               	addwf	1,f
 17282  0138                     i1l6601:	
 17283                           
 17284                           ;Dimmer_B1.c: 151: }
 17285                           ;Dimmer_B1.c: 152: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 17286  0138  0877               	movf	_DimmerLightsIntr,w
 17287  0139  3E05               	addlw	5
 17288  013A  0086               	movwf	6
 17289  013B  3001               	movlw	1	; select bank2/3
 17290  013C  0087               	movwf	7
 17291  013D  0877               	movf	_DimmerLightsIntr,w
 17292  013E  3E04               	addlw	4
 17293  013F  0084               	movwf	4
 17294  0140  3001               	movlw	1	; select bank2/3
 17295  0141  0085               	movwf	5
 17296  0142  0800               	movf	0,w
 17297  0143  0601               	xorwf	1,w
 17298  0144  1D03               	skipz
 17299  0145  299F               	goto	i1l6623
 17300                           
 17301                           ;Dimmer_B1.c: 153: DimmerLightsIntr->AdjRF = 0;
 17302  0146  0877               	movf	_DimmerLightsIntr,w
 17303  0147  0086               	movwf	6
 17304  0148  3001               	movlw	1	; select bank2/3
 17305  0149  0087               	movwf	7
 17306  014A  1101               	bcf	1,2
 17307  014B  2967               	goto	i1l6611
 17308  014C                     i1l6605:	
 17309                           ;Dimmer_B1.c: 155: }
 17310                           ;Dimmer_B1.c: 156: } else {
 17311                           
 17312                           ;Dimmer_B1.c: 154: DimmerLightsIntr->Signal = 0;
 17313                           
 17314                           
 17315                           ;Dimmer_B1.c: 157: if (DimmerLightsIntr->Status == 1) {
 17316  014C  0877               	movf	_DimmerLightsIntr,w
 17317  014D  0086               	movwf	6
 17318  014E  3001               	movlw	1	; select bank2/3
 17319  014F  0087               	movwf	7
 17320  0150  1E81               	btfss	1,5
 17321  0151  296D               	goto	i1l6613
 17322                           
 17323                           ;Dimmer_B1.c: 158: DimmerLightsIntr->DimmingValue--;
 17324  0152  0877               	movf	_DimmerLightsIntr,w
 17325  0153  3E04               	addlw	4
 17326  0154  0086               	movwf	6
 17327  0155  3001               	movlw	1	; select bank2/3
 17328  0156  0087               	movwf	7
 17329  0157  3001               	movlw	1
 17330  0158  0281               	subwf	1,f
 17331                           
 17332                           ;Dimmer_B1.c: 159: if (DimmerLightsIntr->DimmingValue <= DimmerLightsIntr->MaxmumValue) 
      +                          {
 17333  0159  0877               	movf	_DimmerLightsIntr,w
 17334  015A  3E05               	addlw	5
 17335  015B  0086               	movwf	6
 17336  015C  3001               	movlw	1	; select bank2/3
 17337  015D  0087               	movwf	7
 17338  015E  0877               	movf	_DimmerLightsIntr,w
 17339  015F  3E04               	addlw	4
 17340  0160  0084               	movwf	4
 17341  0161  3001               	movlw	1	; select bank2/3
 17342  0162  0085               	movwf	5
 17343  0163  0800               	movf	0,w
 17344  0164  0201               	subwf	1,w
 17345  0165  1C03               	skipc
 17346  0166  299F               	goto	i1l6623
 17347  0167                     i1l6611:	
 17348                           
 17349                           ;Dimmer_B1.c: 160: DimmerLightsIntr->Signal = 0;
 17350  0167  0877               	movf	_DimmerLightsIntr,w
 17351  0168  0086               	movwf	6
 17352  0169  3001               	movlw	1	; select bank2/3
 17353  016A  0087               	movwf	7
 17354  016B  1081               	bcf	1,1
 17355                           
 17356                           ;Dimmer_B1.c: 161: }
 17357                           ;Dimmer_B1.c: 162: } else {
 17358  016C  299F               	goto	i1l6623
 17359  016D                     i1l6613:	
 17360                           
 17361                           ;Dimmer_B1.c: 163: DimmerLightsIntr->DimmingValue++;
 17362  016D  3001               	movlw	1
 17363  016E  00F2               	movwf	??_setDimmerLights_IntrControl
 17364  016F  0877               	movf	_DimmerLightsIntr,w
 17365  0170  3E04               	addlw	4
 17366  0171  0086               	movwf	6
 17367  0172  3001               	movlw	1	; select bank2/3
 17368  0173  0087               	movwf	7
 17369  0174  0872               	movf	??_setDimmerLights_IntrControl,w
 17370  0175  0781               	addwf	1,f
 17371                           
 17372                           ;Dimmer_B1.c: 164: if (DimmerLightsIntr->DimmingValue >= DimmerLightsIntr->MinimumValue)
      +                           {
 17373  0176  0877               	movf	_DimmerLightsIntr,w
 17374  0177  3E04               	addlw	4
 17375  0178  0086               	movwf	6
 17376  0179  3001               	movlw	1	; select bank2/3
 17377  017A  0087               	movwf	7
 17378  017B  0877               	movf	_DimmerLightsIntr,w
 17379  017C  3E06               	addlw	6
 17380  017D  0084               	movwf	4
 17381  017E  3001               	movlw	1	; select bank2/3
 17382  017F  0085               	movwf	5
 17383  0180  0800               	movf	0,w
 17384  0181  0201               	subwf	1,w
 17385  0182  1C03               	skipc
 17386  0183  299F               	goto	i1l6623
 17387                           
 17388                           ;Dimmer_B1.c: 165: DimmerLightsIntr->Signal = 0;
 17389  0184  0877               	movf	_DimmerLightsIntr,w
 17390  0185  0086               	movwf	6
 17391  0186  3001               	movlw	1	; select bank2/3
 17392  0187  0087               	movwf	7
 17393  0188  1081               	bcf	1,1
 17394                           
 17395                           ;Dimmer_B1.c: 166: DimmerLightsIntr->StatusFlag = 0;
 17396  0189  0877               	movf	_DimmerLightsIntr,w
 17397  018A  0086               	movwf	6
 17398  018B  3001               	movlw	1	; select bank2/3
 17399  018C  0087               	movwf	7
 17400  018D  1301               	bcf	1,6
 17401                           
 17402                           ;Dimmer_B1.c: 167: DimmerLightsIntr->Clear = 1;
 17403  018E  0877               	movf	_DimmerLightsIntr,w
 17404  018F  3E09               	addlw	9
 17405  0190  0086               	movwf	6
 17406  0191  3001               	movlw	1	; select bank2/3
 17407  0192  0087               	movwf	7
 17408  0193  1501               	bsf	1,2
 17409                           
 17410                           ;Dimmer_B1.c: 168: Dimmer->Detect = 1;
 17411  0194  0876               	movf	_Dimmer,w
 17412  0195  0086               	movwf	6
 17413  0196  0187               	clrf	7
 17414  0197  1401               	bsf	1,0
 17415                           
 17416                           ;Dimmer_B1.c: 170: if (lights == 1) {
 17417  0198  0874               	movf	setDimmerLights_IntrControl@lights,w
 17418  0199  3A01               	xorlw	1
 17419  019A  1D03               	skipz
 17420  019B  299F               	goto	i1l6623
 17421                           
 17422                           ;Dimmer_B1.c: 171: RA3 = 0;
 17423  019C  0020               	movlb	0	; select bank0
 17424  019D  118C               	bcf	12,3	;volatile
 17425                           
 17426                           ;Dimmer_B1.c: 172: RC7=!1;
 17427  019E  138E               	bcf	14,7	;volatile
 17428  019F                     i1l6623:	
 17429                           ;Dimmer_B1.c: 173: }
 17430                           ;Dimmer_B1.c: 185: ;;
 17431                           
 17432                           
 17433                           ;Dimmer_B1.c: 186: }
 17434                           ;Dimmer_B1.c: 187: }
 17435                           ;Dimmer_B1.c: 188: }
 17436                           ;Dimmer_B1.c: 189: }
 17437                           ;Dimmer_B1.c: 190: }
 17438                           ;Dimmer_B1.c: 191: }
 17439                           ;Dimmer_B1.c: 192: }
 17440                           ;Dimmer_B1.c: 193: if (DimmerLightsIntr->Triac == 1) {
 17441  019F  0877               	movf	_DimmerLightsIntr,w
 17442  01A0  3E08               	addlw	8
 17443  01A1  0086               	movwf	6
 17444  01A2  3001               	movlw	1	; select bank2/3
 17445  01A3  0087               	movwf	7
 17446  01A4  1E81               	btfss	1,5
 17447  01A5  29CB               	goto	i1l6637
 17448                           
 17449                           ;Dimmer_B1.c: 194: DimmerLightsIntr->TriacTime++;
 17450  01A6  3001               	movlw	1
 17451  01A7  00F2               	movwf	??_setDimmerLights_IntrControl
 17452  01A8  0877               	movf	_DimmerLightsIntr,w
 17453  01A9  3E07               	addlw	7
 17454  01AA  0086               	movwf	6
 17455  01AB  3001               	movlw	1	; select bank2/3
 17456  01AC  0087               	movwf	7
 17457  01AD  0872               	movf	??_setDimmerLights_IntrControl,w
 17458  01AE  0781               	addwf	1,f
 17459                           
 17460                           ;Dimmer_B1.c: 195: if (DimmerLightsIntr->TriacTime >= 5) {
 17461  01AF  0877               	movf	_DimmerLightsIntr,w
 17462  01B0  3E07               	addlw	7
 17463  01B1  0086               	movwf	6
 17464  01B2  3001               	movlw	1	; select bank2/3
 17465  01B3  0087               	movwf	7
 17466  01B4  3005               	movlw	5
 17467  01B5  0201               	subwf	1,w
 17468  01B6  1C03               	skipc
 17469  01B7  29CB               	goto	i1l6637
 17470                           
 17471                           ;Dimmer_B1.c: 196: DimmerLightsIntr->TriacTime = 0;
 17472  01B8  0877               	movf	_DimmerLightsIntr,w
 17473  01B9  3E07               	addlw	7
 17474  01BA  0086               	movwf	6
 17475  01BB  3001               	movlw	1	; select bank2/3
 17476  01BC  0087               	movwf	7
 17477  01BD  0181               	clrf	1
 17478                           
 17479                           ;Dimmer_B1.c: 197: DimmerLightsIntr->Triac = 0;
 17480  01BE  0877               	movf	_DimmerLightsIntr,w
 17481  01BF  3E08               	addlw	8
 17482  01C0  0086               	movwf	6
 17483  01C1  3001               	movlw	1	; select bank2/3
 17484  01C2  0087               	movwf	7
 17485  01C3  1281               	bcf	1,5
 17486                           
 17487                           ;Dimmer_B1.c: 200: if (lights == 1) {
 17488  01C4  0874               	movf	setDimmerLights_IntrControl@lights,w
 17489  01C5  3A01               	xorlw	1
 17490  01C6  1D03               	skipz
 17491  01C7  29CB               	goto	i1l6637
 17492                           
 17493                           ;Dimmer_B1.c: 201: RA7 = 0;
 17494  01C8  0020               	movlb	0	; select bank0
 17495  01C9  138C               	bcf	12,7	;volatile
 17496                           
 17497                           ;Dimmer_B1.c: 202: RB4=0;
 17498  01CA  120D               	bcf	13,4	;volatile
 17499  01CB                     i1l6637:	
 17500                           
 17501                           ;Dimmer_B1.c: 203: }
 17502                           ;Dimmer_B1.c: 215: }
 17503                           ;Dimmer_B1.c: 216: }
 17504                           ;Dimmer_B1.c: 217: if (DimmerLightsIntr->TriacFlag == 1) {
 17505  01CB  0877               	movf	_DimmerLightsIntr,w
 17506  01CC  3E09               	addlw	9
 17507  01CD  0086               	movwf	6
 17508  01CE  3001               	movlw	1	; select bank2/3
 17509  01CF  0087               	movwf	7
 17510  01D0  1E81               	btfss	1,5
 17511  01D1  0008               	return
 17512                           
 17513                           ;Dimmer_B1.c: 218: DimmerLightsIntr->TriacCount++;
 17514  01D2  3001               	movlw	1
 17515  01D3  00F2               	movwf	??_setDimmerLights_IntrControl
 17516  01D4  0877               	movf	_DimmerLightsIntr,w
 17517  01D5  3E0A               	addlw	10
 17518  01D6  0086               	movwf	6
 17519  01D7  3001               	movlw	1	; select bank2/3
 17520  01D8  0087               	movwf	7
 17521  01D9  0872               	movf	??_setDimmerLights_IntrControl,w
 17522  01DA  0781               	addwf	1,f
 17523                           
 17524                           ;Dimmer_B1.c: 219: if (DimmerLightsIntr->TriacCount == 70) {
 17525  01DB  0877               	movf	_DimmerLightsIntr,w
 17526  01DC  3E0A               	addlw	10
 17527  01DD  0086               	movwf	6
 17528  01DE  3001               	movlw	1	; select bank2/3
 17529  01DF  0087               	movwf	7
 17530  01E0  0801               	movf	1,w
 17531  01E1  3A46               	xorlw	70
 17532  01E2  1D03               	skipz
 17533  01E3  0008               	return
 17534                           
 17535                           ;Dimmer_B1.c: 220: DimmerLightsIntr->TriacCount = 0;
 17536  01E4  0877               	movf	_DimmerLightsIntr,w
 17537  01E5  3E0A               	addlw	10
 17538  01E6  0086               	movwf	6
 17539  01E7  3001               	movlw	1	; select bank2/3
 17540  01E8  0087               	movwf	7
 17541  01E9  0181               	clrf	1
 17542                           
 17543                           ;Dimmer_B1.c: 221: DimmerLightsIntr->TriacFlag = 0;
 17544  01EA  0877               	movf	_DimmerLightsIntr,w
 17545  01EB  3E09               	addlw	9
 17546  01EC  0086               	movwf	6
 17547  01ED  3001               	movlw	1	; select bank2/3
 17548  01EE  0087               	movwf	7
 17549  01EF  1281               	bcf	1,5
 17550  01F0  0008               	return
 17551  01F1                     __end_of_setDimmerLights_IntrControl:	
 17552                           
 17553                           	psect	text127
 17554  1E97                     __ptext127:	
 17555 ;; *************** function _DimmerIntrPointSelect *****************
 17556 ;; Defined at:
 17557 ;;		line 73 in file "../src/Dimmer_B1.c"
 17558 ;; Parameters:    Size  Location     Type
 17559 ;;  lights          1    wreg     unsigned char 
 17560 ;; Auto vars:     Size  Location     Type
 17561 ;;  lights          1    1[COMMON] unsigned char 
 17562 ;; Return value:  Size  Location     Type
 17563 ;;		None               void
 17564 ;; Registers used:
 17565 ;;		wreg
 17566 ;; Tracked objects:
 17567 ;;		On entry : 0/0
 17568 ;;		On exit  : 0/0
 17569 ;;		Unchanged: 0/0
 17570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17575 ;;Total ram usage:        2 bytes
 17576 ;; Hardware stack levels used:    1
 17577 ;; This function calls:
 17578 ;;		Nothing
 17579 ;; This function is called by:
 17580 ;;		_setDimmerLights_IntrControl
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           
 17585                           ;psect for function _DimmerIntrPointSelect
 17586  1E97                     _DimmerIntrPointSelect:	
 17587                           
 17588                           ;incstack = 0
 17589                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 17590                           ;DimmerIntrPointSelect@lights stored from wreg
 17591  1E97  00F1               	movwf	DimmerIntrPointSelect@lights
 17592                           
 17593                           ;Dimmer_B1.c: 75: if (lights == 1) {
 17594  1E98  0871               	movf	DimmerIntrPointSelect@lights,w
 17595  1E99  3A01               	xorlw	1
 17596  1E9A  1D03               	skipz
 17597  1E9B  0008               	return
 17598                           
 17599                           ;Dimmer_B1.c: 76: DimmerLightsIntr = &DimmerLights1;
 17600  1E9C  30C0               	movlw	_DimmerLights1& (0+255)
 17601  1E9D  00F0               	movwf	??_DimmerIntrPointSelect
 17602  1E9E  0870               	movf	??_DimmerIntrPointSelect,w
 17603  1E9F  00F7               	movwf	_DimmerLightsIntr
 17604  1EA0  0008               	return
 17605  1EA1                     __end_of_DimmerIntrPointSelect:	
 17606                           
 17607                           	psect	text128
 17608  1F13                     __ptext128:	
 17609 ;; *************** function _IOC_ISR *****************
 17610 ;; Defined at:
 17611 ;;		line 291 in file "../src/MCU_B1.c"
 17612 ;; Parameters:    Size  Location     Type
 17613 ;;		None
 17614 ;; Auto vars:     Size  Location     Type
 17615 ;;		None
 17616 ;; Return value:  Size  Location     Type
 17617 ;;		None               void
 17618 ;; Registers used:
 17619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17620 ;; Tracked objects:
 17621 ;;		On entry : 0/0
 17622 ;;		On exit  : 0/0
 17623 ;;		Unchanged: 0/0
 17624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17629 ;;Total ram usage:        0 bytes
 17630 ;; Hardware stack levels used:    1
 17631 ;; Hardware stack levels required when called:    3
 17632 ;; This function calls:
 17633 ;;		_setDimmerReClock
 17634 ;; This function is called by:
 17635 ;;		_ISR
 17636 ;; This function uses a non-reentrant model
 17637 ;;
 17638                           
 17639                           
 17640                           ;psect for function _IOC_ISR
 17641  1F13                     _IOC_ISR:	
 17642                           
 17643                           ;MCU_B1.c: 292: if (IOCIE == 1 && IOCBF2 == 1) {
 17644                           
 17645                           ;incstack = 0
 17646                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17647  1F13  1D8B               	btfss	11,3	;volatile
 17648  1F14  0008               	return
 17649  1F15  0027               	movlb	7	; select bank7
 17650  1F16  1D16               	btfss	22,2	;volatile
 17651  1F17  0008               	return
 17652                           
 17653                           ;MCU_B1.c: 293: IOCBF2 = 0;
 17654  1F18  1116               	bcf	22,2	;volatile
 17655                           
 17656                           ;MCU_B1.c: 294: IOCIF = 0;
 17657  1F19  100B               	bcf	11,0	;volatile
 17658                           
 17659                           ;MCU_B1.c: 295: if (myMain.PowerON == 1) {
 17660  1F1A  0021               	movlb	1	; select bank1
 17661  1F1B  1C20               	btfss	_myMain^(0+128),0
 17662  1F1C  0008               	return
 17663                           
 17664                           ;MCU_B1.c: 297: setDimmerReClock();
 17665  1F1D  319E  2603         	fcall	_setDimmerReClock
 17666  1F1F  0008               	return
 17667  1F20                     __end_of_IOC_ISR:	
 17668                           
 17669                           	psect	text129
 17670  1E03                     __ptext129:	
 17671 ;; *************** function _setDimmerReClock *****************
 17672 ;; Defined at:
 17673 ;;		line 169 in file "../src/MCU_B1.c"
 17674 ;; Parameters:    Size  Location     Type
 17675 ;;		None
 17676 ;; Auto vars:     Size  Location     Type
 17677 ;;		None
 17678 ;; Return value:  Size  Location     Type
 17679 ;;		None               void
 17680 ;; Registers used:
 17681 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17682 ;; Tracked objects:
 17683 ;;		On entry : 0/0
 17684 ;;		On exit  : 0/0
 17685 ;;		Unchanged: 0/0
 17686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;Total ram usage:        0 bytes
 17692 ;; Hardware stack levels used:    1
 17693 ;; Hardware stack levels required when called:    2
 17694 ;; This function calls:
 17695 ;;		_setDimmerLights_IntrIOC_GO
 17696 ;; This function is called by:
 17697 ;;		_IOC_ISR
 17698 ;; This function uses a non-reentrant model
 17699 ;;
 17700                           
 17701                           
 17702                           ;psect for function _setDimmerReClock
 17703  1E03                     _setDimmerReClock:	
 17704                           
 17705                           ;MCU_B1.c: 174: setDimmerLights_IntrIOC_GO(1);
 17706                           
 17707                           ;incstack = 0
 17708                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17709  1E03  3001               	movlw	1
 17710  1E04  3193  2376         	fcall	_setDimmerLights_IntrIOC_GO
 17711  1E06  0008               	return
 17712  1E07                     __end_of_setDimmerReClock:	
 17713                           
 17714                           	psect	text130
 17715  1376                     __ptext130:	
 17716 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 17717 ;; Defined at:
 17718 ;;		line 28 in file "../src/Dimmer_B1.c"
 17719 ;; Parameters:    Size  Location     Type
 17720 ;;  lights          1    wreg     unsigned char 
 17721 ;; Auto vars:     Size  Location     Type
 17722 ;;  lights          1    2[COMMON] unsigned char 
 17723 ;; Return value:  Size  Location     Type
 17724 ;;		None               void
 17725 ;; Registers used:
 17726 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17727 ;; Tracked objects:
 17728 ;;		On entry : 0/0
 17729 ;;		On exit  : 0/0
 17730 ;;		Unchanged: 0/0
 17731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17733 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17735 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;Total ram usage:        1 bytes
 17737 ;; Hardware stack levels used:    1
 17738 ;; Hardware stack levels required when called:    1
 17739 ;; This function calls:
 17740 ;;		_DimmerIntrIOCPointSelect
 17741 ;; This function is called by:
 17742 ;;		_setDimmerReClock
 17743 ;; This function uses a non-reentrant model
 17744 ;;
 17745                           
 17746                           
 17747                           ;psect for function _setDimmerLights_IntrIOC_GO
 17748  1376                     _setDimmerLights_IntrIOC_GO:	
 17749                           
 17750                           ;incstack = 0
 17751                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17752                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 17753  1376  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 17754                           
 17755                           ;Dimmer_B1.c: 30: DimmerIntrIOCPointSelect(lights);
 17756  1377  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 17757  1378  319E  268D  3193   	fcall	_DimmerIntrIOCPointSelect
 17758                           
 17759                           ;Dimmer_B1.c: 32: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->TriacFlag == 
      +                          0) {
 17760  137B  0878               	movf	_DimmerLightsIntrIOC,w
 17761  137C  0086               	movwf	6
 17762  137D  3001               	movlw	1	; select bank2/3
 17763  137E  0087               	movwf	7
 17764  137F  1801               	btfsc	1,0
 17765  1380  0008               	return
 17766  1381  0878               	movf	_DimmerLightsIntrIOC,w
 17767  1382  3E09               	addlw	9
 17768  1383  0086               	movwf	6
 17769  1384  3001               	movlw	1	; select bank2/3
 17770  1385  0087               	movwf	7
 17771  1386  1A81               	btfsc	1,5
 17772  1387  0008               	return
 17773                           
 17774                           ;Dimmer_B1.c: 33: DimmerLightsIntrIOC->GO = 1;
 17775  1388  0878               	movf	_DimmerLightsIntrIOC,w
 17776  1389  0086               	movwf	6
 17777  138A  3001               	movlw	1	; select bank2/3
 17778  138B  0087               	movwf	7
 17779  138C  1401               	bsf	1,0
 17780                           
 17781                           ;Dimmer_B1.c: 34: DimmerLightsIntrIOC->TriacFlag = 1;
 17782  138D  0878               	movf	_DimmerLightsIntrIOC,w
 17783  138E  3E09               	addlw	9
 17784  138F  0086               	movwf	6
 17785  1390  3001               	movlw	1	; select bank2/3
 17786  1391  0087               	movwf	7
 17787  1392  1681               	bsf	1,5
 17788                           
 17789                           ;Dimmer_B1.c: 35: if (RB2 == 1) {
 17790  1393  0020               	movlb	0	; select bank0
 17791  1394  1D0D               	btfss	13,2	;volatile
 17792  1395  2B9D               	goto	i1l6215
 17793                           
 17794                           ;Dimmer_B1.c: 36: Dimmer->Correction = 1;
 17795  1396  0876               	movf	_Dimmer,w
 17796  1397  3E02               	addlw	2
 17797  1398  0086               	movwf	6
 17798  1399  0187               	clrf	7
 17799  139A  0181               	clrf	1
 17800  139B  0A81               	incf	1,f
 17801                           
 17802                           ;Dimmer_B1.c: 37: } else {
 17803  139C  0008               	return
 17804  139D                     i1l6215:	
 17805                           
 17806                           ;Dimmer_B1.c: 38: Dimmer->Correction = 0;
 17807  139D  0876               	movf	_Dimmer,w
 17808  139E  3E02               	addlw	2
 17809  139F  0086               	movwf	6
 17810  13A0  0187               	clrf	7
 17811  13A1  0181               	clrf	1
 17812  13A2  0008               	return
 17813  13A3                     __end_of_setDimmerLights_IntrIOC_GO:	
 17814                           
 17815                           	psect	text131
 17816  1E8D                     __ptext131:	
 17817 ;; *************** function _DimmerIntrIOCPointSelect *****************
 17818 ;; Defined at:
 17819 ;;		line 8 in file "../src/Dimmer_B1.c"
 17820 ;; Parameters:    Size  Location     Type
 17821 ;;  lights          1    wreg     unsigned char 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  lights          1    1[COMMON] unsigned char 
 17824 ;; Return value:  Size  Location     Type
 17825 ;;		None               void
 17826 ;; Registers used:
 17827 ;;		wreg
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17835 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17836 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17837 ;;Total ram usage:        2 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; This function calls:
 17840 ;;		Nothing
 17841 ;; This function is called by:
 17842 ;;		_setDimmerLights_IntrIOC_GO
 17843 ;; This function uses a non-reentrant model
 17844 ;;
 17845                           
 17846                           
 17847                           ;psect for function _DimmerIntrIOCPointSelect
 17848  1E8D                     _DimmerIntrIOCPointSelect:	
 17849                           
 17850                           ;incstack = 0
 17851                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 17852                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 17853  1E8D  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 17854                           
 17855                           ;Dimmer_B1.c: 10: if (lights == 1) {
 17856  1E8E  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 17857  1E8F  3A01               	xorlw	1
 17858  1E90  1D03               	skipz
 17859  1E91  0008               	return
 17860                           
 17861                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 17862  1E92  30C0               	movlw	_DimmerLights1& (0+255)
 17863  1E93  00F0               	movwf	??_DimmerIntrIOCPointSelect
 17864  1E94  0870               	movf	??_DimmerIntrIOCPointSelect,w
 17865  1E95  00F8               	movwf	_DimmerLightsIntrIOC
 17866  1E96  0008               	return
 17867  1E97                     __end_of_DimmerIntrIOCPointSelect:	
 17868  007E                     btemp	set	126	;btemp
 17869  007E                     pic14e$flags	set	126
 17870  007E                     wtemp	set	126
 17871  007E                     wtemp0	set	126
 17872  0080                     wtemp1	set	128
 17873  0082                     wtemp2	set	130
 17874  0084                     wtemp3	set	132
 17875  0086                     wtemp4	set	134
 17876  0088                     wtemp5	set	136
 17877  007F                     wtemp6	set	127
 17878  007E                     ttemp	set	126
 17879  007E                     ttemp0	set	126
 17880  0081                     ttemp1	set	129
 17881  0084                     ttemp2	set	132
 17882  0087                     ttemp3	set	135
 17883  007F                     ttemp4	set	127
 17884  007E                     ltemp	set	126
 17885  007E                     ltemp0	set	126
 17886  0082                     ltemp1	set	130
 17887  0086                     ltemp2	set	134
 17888  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         188
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     73      79
    BANK1            80      0      79
    BANK2            80      4      79
    BANK3            80      0      56
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw1(BANK3[9]), 

    RFSW	PTR struct RFSW size(1) Largest target is 1
		 -> NULL(NULL[0]), RFSW1(BANK1[1]), 

    LED	PTR struct LED size(2) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK1[4]), VarLED2(BANK2[4]), VarLED1(BANK1[4]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    Dimmer	PTR struct Dimmer size(1) Largest target is 3
		 -> NULL(NULL[0]), Dimmer1(BANK1[3]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK3[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR0_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTime->_setBuz
    _getTemp_AD->_getAD
    _getPowerFault_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setOverTemp_Exceptions
    _setOverTemp_Exceptions->_DimmerLights_Exceptions
    _Switch_Main->_setSw_Main
    _setSw_Main->_Sw_DimmerOffFunc
    _Sw_DimmerOnFunc->_setRF_DimmerLights
    _Sw_DimmerOffFunc->_setRF_DimmerLights
    _Sw_DimmerAdjFunc->_setDimmerLights_AdjGo
    _Sw_DimmerAdjFunc->_setDimmerLights_TriggerAdj
    _Sw_DimmerAdjFunc->_setRFSW_Status
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_AdjGo->_DimmerLightsPointSelect
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setRF_DimmerLights
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    ___ftadd->___ftmul
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _PowerFault_Main->_setPowerFault_Main
    _setPowerFault_Main->_setPowerFault_Exceptions
    _setPowerFault_Exceptions->_DimmerLights_Exceptions
    _setSw_Enable->_SwPointSelect
    _DimmerLights_Exceptions->_setBuz
    _setDimmerLights_TriggerERROR->_DimmerLightsPointSelect
    _setDimmerLights_ERROR->_setRFSW_Status
    _setDimmerLights_ERROR->_setSw_Status
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setRF_DimmerLights
    _setDimmerLights->_setLED
    _setDimmerLights->_setMemory_GO
    _setLED->_LedPointSelect
    _DimmerLights_Close->_setMemory_GO
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setRF_DimmerLights
    _setSw_Status->_SwPointSelect
    _setRF_DimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _setRFSW_Status->_RfSWPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDimmerLights_Switch->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  100471
                                              0 BANK2      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                 _Mcu_Initialization
          _PowerFault_Initialization
                    _PowerFault_Main
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                   _getPowerFault_AD
                         _getTemp_AD
              _myMain_Initialization
                        _my_MainTime
 ---------------------------------------------------------------------------------
 (1) _my_MainTime                                          0     0      0    1790
                             _setBuz
                       _setRF_Enable
                       _setSw_Enable
                     _setTemp_Enable
 ---------------------------------------------------------------------------------
 (2) _setTemp_Enable                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPowerFault_AD                                     2     2      0     247
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     216
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    7731
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    7731
                                             17 BANK0      1     1      0
                         _getPF_Safe
             _setOverTemp_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_Exceptions                               3     3      0    7697
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setBuz
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (3) _getPF_Safe                                           1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0   22357
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           4     4      0   22357
                                             69 BANK0      4     4      0
                      _SwPointSelect
                   _Sw_DimmerAdjFunc
                   _Sw_DimmerOffFunc
                    _Sw_DimmerOnFunc
                             _setBuz
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOnFunc                                      2     2      0    9762
                                             66 BANK0      2     2      0
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerOffFunc                                     3     3      0    9530
                                             66 BANK0      3     3      0
                     _setDelayOff_GO
              _setDimmerLights_AdjGo
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _Sw_DimmerAdjFunc                                     2     2      0    1176
                                              4 BANK0      2     2      0
              _setDimmerLights_AdjGo
         _setDimmerLights_TriggerAdj
                     _setRFSW_Status
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           2     1      1     247
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_AdjGo                                2     1      1     247
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1282
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1282
                                              3 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   29860
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   29860
                                             71 BANK0      2     2      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            0     0      0   28886
            _setControl_Lights_Table
                        _setLog_Code
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1666
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   27220
                             _setBuz
                    _setDimmerLights
                 _setRFSW_AdjControl
                    _setRFSW_Control
                     _setRFSW_Status
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      2     2      0   11366
                                             66 BANK0      2     2      0
                    _RfSWPointSelect
                             _setBuz
                     _setDelayOff_GO
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2    1436
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     417
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     213
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   3     3      0   11456
                                             68 BANK0      3     3      0
                    _RfSWPointSelect
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11301
                                             65 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11208
                                             63 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11146
                                             57 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3118
                                             30 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      34
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Main                                      0     0      0    6034
                 _setPowerFault_Main
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Main                                   1     1      0    6034
                                             17 BANK0      1     1      0
                       _getTemp_Safe
           _setPowerFault_Exceptions
 ---------------------------------------------------------------------------------
 (3) _setPowerFault_Exceptions                             3     3      0    6000
                                             14 BANK0      3     3      0
            _DimmerLights_Exceptions
                             _setLED
                       _setRF_Enable
                       _setSw_Enable
 ---------------------------------------------------------------------------------
 (2) _setSw_Enable                                         1     1      0      62
                                              2 BANK0      1     1      0
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (2) _setRF_Enable                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_Exceptions                              1     1      0    4467
                                             13 BANK0      1     1      0
         _getDimmerLights_StatusFlag
                             _setBuz
              _setDimmerLights_ERROR
       _setDimmerLights_TriggerERROR
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_TriggerERROR                         2     1      1     263
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights_ERROR                                2     2      0    2408
                                              4 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setLED
                     _setRFSW_Status
                       _setSw_Status
 ---------------------------------------------------------------------------------
 (3) _getTemp_Safe                                         1     1      0      34
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PowerFault_Initialization                            0     0      0       0
       _setPowerFault_Initialization
 ---------------------------------------------------------------------------------
 (2) _setPowerFault_Initialization                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR0_Set
 ---------------------------------------------------------------------------------
 (2) _TMR0_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              1 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1375
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1375
                                              3 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    0     0      0     340
                _Flash_Memory_Modify
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     340
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    5928
                                             61 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0     133
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      74
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   10420
                 _DimmerLights_Close
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 2     2      0   10290
                                             69 BANK0      2     2      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  3     2      1    6674
                                             66 BANK0      3     2      1
            _DimmerLightsPointSelect
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setDimmerLights                                      3     2      1    1699
                                              3 BANK0      3     2      1
            _DimmerLightsPointSelect
                             _setLED
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (4) _setLED                                               2     1      1    1220
                                              1 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (5) _LedPointSelect                                       1     1      0      93
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_Close                                   0     0      0     130
         _getDimmerLights_StatusFlag
                       _setMemory_GO
 ---------------------------------------------------------------------------------
 (6) _setMemory_GO                                         3     3      0      93
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _getDimmerLights_StatusFlag                           1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      62
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      62
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0   10268
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0   10268
                                             66 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
             _setDimmerLights_Switch
            _setDimmerLights_Trigger
                     _setRFSW_Status
                 _setRF_DimmerLights
                       _setSw_Status
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setSw_Status                                         2     1      1     478
                                              2 BANK0      2     1      1
                      _SwPointSelect
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setRF_DimmerLights                                   5     4      1    6396
                                             61 BANK0      5     4      1
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (5) _setPercentValue                                      4     4      0    5526
                                             57 BANK0      4     4      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             43 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             6     3      3    2335
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftpack                                             8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (6) _setRFSW_Status                                       2     1      1     555
                                              2 BANK0      2     1      1
                    _RfSWPointSelect
 ---------------------------------------------------------------------------------
 (7) _RfSWPointSelect                                      2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              2     1      1     478
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Switch                               2     1      1     478
                                              2 BANK0      2     1      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (6) _DimmerLightsPointSelect                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1666
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     599
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      62
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      62
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    2251
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     512
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     482
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     417
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     284
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     543
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     444
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     154
                                              5 COMMON     1     1      0
                            _IOC_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         3     3      0     110
                                              2 COMMON     3     3      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0      44
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0      44
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0      44
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_Switch
         _DimmerLightsPointSelect
       _setDimmerLights_Trigger
         _DimmerLightsPointSelect
       _setRFSW_Status
         _RfSWPointSelect
       _setRF_DimmerLights
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setSw_Status
         _SwPointSelect
       _setTxData
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _DimmerLights_Close
       _getDimmerLights_StatusFlag
       _setMemory_GO
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setMemory_GO
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR0_Set
   _PowerFault_Initialization
     _setPowerFault_Initialization
   _PowerFault_Main
     _setPowerFault_Main
       _getTemp_Safe
       _setPowerFault_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getRxData
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setMemory_GO
           _setRFSW_AdjControl
             _RfSWPointSelect
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _RfSWPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_Switch
               _DimmerLightsPointSelect
             _setDimmerLights_Trigger
               _DimmerLightsPointSelect
             _setRF_DimmerLights
               _setPercentValue
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _setSw_Status
               _SwPointSelect
             _setTxData
           _setRFSW_Status
             _RfSWPointSelect
           _setSw_Status
             _SwPointSelect
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _setSw_Main
       _SwPointSelect
       _Sw_DimmerAdjFunc
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
       _Sw_DimmerOffFunc
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_AdjGo
           _DimmerLightsPointSelect
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _Sw_DimmerOnFunc
         _setBuz
           ___awdiv
         _setDimmerLights_Switch
           _DimmerLightsPointSelect
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setRFSW_Status
           _RfSWPointSelect
         _setRF_DimmerLights
           _setPercentValue
             ___awtoft
               ___ftpack
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setTxData
       _setBuz
         ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getPF_Safe
       _setOverTemp_Exceptions
         _DimmerLights_Exceptions
           _getDimmerLights_StatusFlag
           _setBuz
             ___awdiv
           _setDimmerLights_ERROR
             _DimmerLightsPointSelect
             _setLED
               _LedPointSelect
             _setRFSW_Status
               _RfSWPointSelect
             _setSw_Status
               _SwPointSelect
           _setDimmerLights_TriggerERROR
             _DimmerLightsPointSelect
         _setBuz
           ___awdiv
         _setLED
           _LedPointSelect
         _setRF_Enable
         _setSw_Enable
           _SwPointSelect
   _getPowerFault_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTime
     _setBuz
       ___awdiv
     _setRF_Enable
     _setSw_Enable
       _SwPointSelect
     _setTemp_Enable

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR0_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      4      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      38      11       70.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     131      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     131      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Oct 22 11:16:38 2014

                   __size_of_Switch_Main 0004                    ?_Flash_Memory_Erasing 0070  
           ??_setDimmerLights_TriggerAdj 0023                           ___bmul@product 0022  
                                     l90 096C                                       l92 0980  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1220  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 006D       __end_of_getDimmerLights_StatusFlag 1EAB  
             _getDimmerLights_StatusFlag 1EA1                   __end_of_setDelayOff_GO 0C3A  
                           ___ftadd@exp1 004A                             ___ftadd@exp2 0049  
              setDimmerLights_Adj@lights 0064                     _setDimmerLights_Main 0994  
                           ___ftadd@sign 0048                                      l100 17AB  
                                    l101 17A7                                      l102 1795  
                                    l104 17A5                                      l243 0B43  
                                    l318 10B7                                      l319 10B8  
                                    l362 12AF                                      l268 0E1E  
                                    l269 0E6E                                      l787 1574  
                                    _GIE 005F                                      _CRC 00CD  
                                    _RA0 0060                                      _RB0 0068  
   __size_of_DimmerLights_Initialization 000D                                      _RB1 0069  
                                    _RA3 0063                                      _PF1 00BE  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 0069  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00C6                                      _ISR 0004  
        setPowerFault_Exceptions@command 0030                                      _Sw1 01CF  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 10C1  
         ??_setDimmerLights_TriggerERROR 0023                    _Buzzer_Initialization 1DEB  
                        __end_of_ADC_Set 1E4C                          ?_DelayTimejudge 0070  
                                    wreg 0009     setDimmerLights_Initialization@lights 0023  
                        _setDimmerLights 0E74                    _setDimmerLights_ERROR 17B2  
                  _setDimmerLights_AdjRF 1287                    _setDimmerLights_AdjGo 1FE0  
                __size_of_setTemp_Enable 0008                                     ?_ISR 0070  
                        _PowerFault_Main 1DF1                             ___ftdiv@cntr 0038  
                        __end_of_IOC_ISR 1F20                             ___ftdiv@sign 003D  
                                   l1234 11BD                                     l1247 13F8  
                                   l1256 1602                                     l2242 1F93  
               ?_DimmerLightsPointSelect 0070                                     l1708 14F2  
                        __end_of_IOC_Set 1F3A                                     l2541 171E  
                                   l1912 145F                                     l2721 0AF3  
                                   l5201 0AC8                                     l2715 0ADC  
                                   l5207 0AE1                                     l1871 0B8F  
                                   l2744 03CB                                     l5209 0AE9  
                                   l5401 0F92                                     l5315 0683  
                                   l5243 035B                                     l1939 0826  
                                   l1876 0BB2                                     l5309 066D  
                                   l5421 0FD0                                     l5261 0384  
                                   l1894 1F88                                     l1878 0BC3  
                                   l5431 0FE9                                     l5271 03A6  
                                   l5239 0354                                     l5351 05B9  
                                   l5193 0AB2                                     l5337 06DD  
                                   l5329 06C4                                     l5281 03C7  
                                   l5273 03AA                                     l5249 036A  
                                   l5435 0FF7                                     l5427 0FDD  
                                   l5419 0FC2                                     l5267 0397  
                                   l5197 0AB9                                     l5429 0FE6  
                                   l8101 0B2B                                     l5285 03DD  
                                   l5269 03A1                                     l5381 0626  
                                   l5373 0612                                     l5357 05CF  
                                   l5199 0AC3                                     l8111 0B52  
                                   l5279 03BD                                     l9001 177F  
                                   l8113 0B56                                     l8105 0B49  
                                   l5289 03EF                                     l5385 062E  
                                   l5369 060A                                     l8211 1210  
                                   l8115 0B59                                     l8107 0B4C  
                                   l5299 040A                                     l8205 1207  
                                   l8133 0DFA                                     l8141 0E06  
                                   l8207 120A                                     l8151 0E1B  
                                   l8135 0DFD                                     l8119 0B5F  
                                   l7503 1349                                     l8225 151C  
                                   l8153 0E15                                     l8081 0B11  
                                   l8065 0C8F                                     l7531 1178  
                                   l8139 0E03                                     l8083 0B14  
                                   l8059 0C74                                     l8315 16BA  
                                   l9123 14BE                                     l8069 0C98  
                                   l7551 0846                                     l7455 122B  
                                   l7527 116F                                     l8271 13E0  
                                   l8167 0E2F                                     l8087 0B1A  
                                   l7711 0C1F                                     l8319 16C6  
                                   l8169 0E47                                     l7473 108B  
                                   l7705 0C0C                                     l8345 172E  
                                   l8433 0D58                                     l9067 0494  
                                   l8187 0E70                                     l7715 0C2B  
                                   l8197 12C0                                     l8453 15B0  
                                   l7557 0851                                     l7733 0A5A  
                                   l7741 0A66                                     l8613 1647  
                                   l7477 1091                                     l7709 0C12  
                                   l8357 1744                                     l9253 08B3  
                                   l8199 12CB                                     l8463 15C0  
                                   l8447 15A7                                     l7583 0888  
                                   l7575 0877                                     l7567 0859  
                                   l7639 0CFD                                     l7751 0A76  
                                   l7911 0754                                     l9175 1707  
                                   l8457 15B7                                     l8449 15AA  
                                   l7569 0865                                     l7737 0A60  
                                   l8609 1640                                     l8721 0F15  
                                   l9257 08BE                                     l8459 15BA  
                                   l7579 0880                                     l7763 0A93  
                                   l7771 0A9F                                     l7747 0A70  
                                   l7755 0A7C                                     l8803 07DA  
                                   l7827 110E                                     l7907 073E  
                                   l7829 1112                                     l8397 0929  
                  _myMain_Initialization 1FA1                                     l7943 1120  
                                   l7767 0A99                                     l8575 09BB  
                                   l8815 07F8                                     l8807 07E8  
                                   l7935 0814                                     l8743 0F42  
                                   l8719 0F0F                                     l8671 11D2  
                                   l7945 1123                                     l7865 0EC7  
                                   l8577 09C1                                     l8817 07FA  
                                   l7961 124E                                     l8753 0F59  
                                   l8665 11CA                                     l8587 09E9  
                                   l8683 15CD                                     l7779 146F  
                                   l8931 023C                                     l8915 0207  
                                   l8755 0F5B                                     l8667 11CD  
                                   l7949 1129                                     l8781 07AC  
                                   l7965 1254                                     l8941 0269  
                                   l7991 1570                                     l7983 1559  
                                   l7959 124B                                     l8839 0B83  
                                   l8689 15E2                                     l7897 071C  
                                   _CFGS 0CAE                                     l8779 07A6  
                                   l8859 0B9F                                     l8955 02A7  
                                   l7989 156B                                     l8893 1F98  
                                   l8965 02D9                                     l8897 1F9E  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4005 062F                                     u4015 0635  
                                   u4105 0FDE                                     u4045 0F99  
                                   u3505 0ABE                                     u4075 0FC3  
                                   u3525 0AD7                                     u3545 0AE4  
                                   _PEIE 005E                                     u3725 0398  
                                   u3575 0AFA                                     u7015 1335  
                                   u7105 085C                                     u7210 0CAB  
                                   u3755 03AB                                     u7125 0866  
                                   u7135 0870                                     u3855 0695  
                                   u7215 0CA9                                     u3695 0385  
                                   u3935 05DB                                     u7145 0878  
                                   u3865 06A5                                     u3785 03BE  
                                   u3945 05EB                                     u3875 06C5  
                                   u3885 06D4                                     u3965 0613  
                                   u3895 06DE                                     u3975 0619  
                                   u9115 1775                                     u7455 10D0  
                                   u9305 16EB                                     u9235 11B4  
                                   u9315 1716                                     u9255 14B5  
                                   u9265 14C4                                     u7915 12B5  
                                   u9285 12EE                                     _LWLO 0CAD  
                                   _RFSW 0079                                     _TMR0 0015  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00B2                                     _main 088F  
                           ___ftpack@arg 0020        __end_of_PowerFault_Initialization 1DF1  
                    __end_of_DlyOff_Main 0DF6                          __end_of_RF_Main 1DFA  
                           ___ftpack@exp 0023                                     fsr0h 0005  
                                   fsr1h 0007                                     fsr0l 0004  
                                   indf0 0000                                     indf1 0001  
                                   fsr1l 0006      __size_of_setDimmerLights_TriggerAdj 0010  
                                   btemp 007E                                     ltemp 007E  
          __size_of_setRF_Initialization 0007                         _setDimmerReClock 1E03  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                 _setPowerFault_Exceptions 14CD  
                    DelayTimejudge@value 0029               __end_of_setRFSW_AdjControl 083B  
                      ___bmul@multiplier 0023                             ___ftmul@cntr 003C  
                           ___ftmul@sign 003D             __size_of_Temp_Initialization 0003  
            __size_of_setPowerFault_Main 0076                                    ??_ISR 0075  
                           ___fttol@exp1 0058                             ___fttol@lval 0054  
         __size_of_DimmerIntrPointSelect 000A                         __end_of_LED_Main 1F13  
          __end_of_DimmerIntrPointSelect 1EA1                    ?_setDimmerLights_Main 0070  
                        ?_setDelayOff_GO 002A                setPowerFault_Exceptions@i 002F  
                                  ?_main 016B                          __end_of___awdiv 088F  
                        __end_of___ftadd 0422                            __CFG_WDTE$OFF 0000  
                        __end_of___ftdiv 06FF                          __end_of___ftmul 0656  
                        ___awdiv@divisor 0020                          __end_of___fttol 1000  
           setDimmerLights_AdjGo@command 0022                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                 _setDimmerLights_Switch 1FB0                          ___awdiv@counter 0025  
          __size_of_CC2500_FrequencyCabr 000C                                    _RFSW1 00EE  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0020                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                __end_of_Timeout_Counter 10D6                            __CFG_WRT$HALF 0000  
                                  _Temp1 00D5       __end_of_setDimmerLights_IntrIOC_GO 13A3  
             _setDimmerLights_IntrIOC_GO 1376                         __end_of_TMR0_ISR 1287  
           __size_of_CC2500_WriteCommand 0019                         __end_of_TMR0_Set 1E5B  
                                  _getAD 11BF                            ___awtoft@sign 002D  
        __end_of_DimmerLights_Exceptions 1583            DimmerLights_Exceptions@status 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
            __size_of_CC2500_ClearTXFIFO 0004                      CC2500_RxData@loop_f 0025  
                         __pbitbssCOMMON 03D8                      setMemory_GO@command 0022  
                         __CFG_BOREN$OFF 0000                       Flash_Memory_Read@i 0021  
                       ?_CC2500_ReadByte 0070                                    ltemp0 007E  
                                  ltemp1 0082                                    ltemp2 0086  
                                  ltemp3 0080           __size_of_setLED_Initialization 0011  
          __end_of_setLED_Initialization 1077                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 0CA1  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003                           setSw_Status@sw 0023  
       __size_of_DelayOff_Initialization 0004                             ?_my_MainTime 0070  
              setDimmerLights_Main@clear 0065                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 09EF                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ??_Sw_DimmerOnFunc 0062                        ??_setPercentValue 0059  
                           __end_of_main 08E4                      ?_setRF_DimmerLights 005D  
                       __end_of_Fosc_Set 1E1F                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0EF3  
                   _setSw_Initialization 1FD0                  setOverTemp_Exceptions@i 002F  
                                 ??_main 0069                            ___fttol@sign1 0053  
                           ?_setLog_Code 0070                  _setControl_Lights_Table 0C3A  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 000A  
                ??_DlyOff_Initialization 0022                  __end_of_PowerFault_Main 1DF4  
                             _Receive_OK 03D8                ?_DimmerIntrIOCPointSelect 0070  
                              ??_IOC_ISR 0073                   ?_setDimmerLights_ERROR 0070  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1EC1  
                 ?_setDimmerLights_AdjRF 0070                   ?_setDimmerLights_AdjGo 0022  
               __size_of_setRFSW_Control 008B                         ??_setRFSW_Status 0023  
                ??_Switch_Initialization 0024                     __end_of_getTemp_Safe 1E63  
                   ??_setRF_DimmerLights 005E                                   ?_getAD 0020  
                            _DlyOff_Main 0D7C                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 0069                                   _ADRESH 009C  
                                 _ADRESL 009B                        ?_getPowerFault_AD 0070  
                       ___awdiv@dividend 0022                         __end_of___awtoft 1242  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 0B0A  
                                 _IOCBF2 1CB2                  _setDimmerLights_Trigger 1FC0  
                                 i1l6215 139D                                   i1l6601 0138  
                                 i1l6611 0167                                   i1l6613 016D  
                                 i1l6605 014C                                   i1l6623 019F  
                                 i1l6637 01CB                                   i1l6565 009C  
                                 i1l6583 00E6                                   i1l6591 0105  
                                 i1l6585 00EC                                   i1l6597 0121  
                                 i1l6589 00FF                                   _FVRCON 0117  
                                 _PMADRH 0192                                   _PMADRL 0191  
                                 _PMDATH 0194                                   _PMDATL 0193  
                                 _PMCON2 0196                       ??_getPowerFault_AD 0024  
                                 _OSCCON 0099                                   u555_25 0075  
                                 u668_25 1280                                   _TMR0IE 005D  
                                 _TMR0IF 005A                                   _IO_Set 1131  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1E2C  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 10EB  
                                 _Dimmer 0076                                   _DlySw1 0162  
             __end_of_Mcu_Initialization 1F74                      __end_of_Buzzer_Main 17B2  
                                 _Memory 013D                                   _Timer0 0135  
     __end_of_setDimmerLights_TriggerAdj 2000               _setDimmerLights_TriggerAdj 1FF0  
                                 ___bmul 1088            setDimmerLights_Switch@command 0022  
                              ??___awdiv 0024                                ??___ftadd 0044  
           __size_of_DelayOffPointSelect 000B                                ??___ftdiv 0034  
                  setDimmerLights@lights 0025                                ??___ftmul 0034  
                              ??___fttol 004F             ?_Flash_Memory_Initialization 0070  
            setDimmerLights_AdjRF@lights 0060                   ??_setDimmerLights_Main 0065  
                                 _r_data 00D3                                   _s_data 00D4  
                                 _setLED 0A4A                                   _myMain 00A0  
                       _DimmerLightsIntr 0077                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0023                         ___awdiv@quotient 0027  
                                 _setBuz 093B                       __size_of_Temp_Main 0003  
       ??_setDimmerLights_Initialization 0022          ?_setDimmerLights_Initialization 0070  
                  ___ftmul@f3_as_product 0039             ??_getDimmerLights_StatusFlag 0020  
    __end_of_setDimmerLights_IntrControl 01F1              _setDimmerLights_IntrControl 0047  
               Flash_Memory_Read@address 0022                        RfSWPointSelect@sw 0021  
                       ?_Timeout_Counter 0070                    __end_of_SwPointSelect 1ED7  
                getPowerFault_AD@channel 0025                            ?_setRF_Enable 0070  
                         _setTemp_Enable 1E73                          _RfSWPointSelect 1EC1  
           __size_of_Flash_Memory_Modify 0044        setDimmerLights_IntrControl@lights 0074  
            __size_of_DimmerLights_Close 0013                  __size_of_LedPointSelect 001D  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
                             _TouchPower 1F92                        ?_Sw_DimmerAdjFunc 0070  
            __size_of_CC2500_InitPATable 001F                      CC2500_TxData@loop_e 0025  
                __end_of_getPercentValue 0A4A         __end_of_CC2500_registers_address 102F  
   __end_of_setPowerFault_Initialization 1E23    __size_of_setPowerFault_Initialization 0004  
           _setPowerFault_Initialization 1E1F                  __end_of__initialization 0043  
            ??_PowerFault_Initialization 0020              setDimmerLights_AdjGo@lights 0023  
                              ?_LED_Main 0070                               ___ftadd@f1 003E  
                             ___ftadd@f2 0041                       ??_Sw_DimmerAdjFunc 0024  
                    setSw_Enable@command 0022                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                      ?_Sw_DimmerOffFunc 0070                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004B                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                       ??_Sw_DimmerOffFunc 0062  
                           __pidataBANK3 11DF                            __end_of_getAD 11DF  
                              ?_TMR0_ISR 0070                                ?_TMR0_Set 0070  
           __size_of_setDimmerLights_Adj 003D                       _LED_Initialization 1EFB  
              ??_setControl_Lights_Table 0067         __size_of_DimmerLights_Exceptions 0040  
                       ??_DelayTimejudge 0024              ?_getDimmerLights_StatusFlag 0070  
          ??_Flash_Memory_Initialization 005D                         ?_setDimmerLights 0023  
                     __size_of_getBuz_GO 0011               __end_of_set_TimeoutCleared 1E2C  
                       ?_PowerFault_Main 0070                 __end_of_setDimmerReClock 1E07  
                     __size_of_getRxData 0048                      ?_LED_Initialization 0070  
                 __end_of_setTemp_Enable 1E7B                        ?_CC2500_WriteByte 0070  
                         ??_setRF_Enable 0020                           _DimmerLights11 00CE  
                   __size_of_setLED_Main 0044                ??_setDimmerLights_Trigger 0023  
                                ??_getAD 0023                      _Temp_Initialization 1DFD  
                     ??_CC2500_WriteByte 0020               ??_setPowerFault_Exceptions 002E  
           setDimmerLights_Switch@lights 0023                               __pbssBANK0 0069  
                             __pbssBANK1 00A0                               __pbssBANK2 0120  
                             __pbssBANK3 01C0                                ?_Fosc_Set 0070  
                            _Buzzer_Main 1768                        ??_setRFSW_Control 0062  
                      __end_of_Temp_Main 1E03                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                               ??_LED_Main 0024  
                          ?_setMemory_GO 0070                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1E13            ?_setPowerFault_Initialization 0070  
                             _getPF_Safe 1E6B                            ??_Switch_Main 0069  
                         DelayTime_1us@i 0022                           DelayTime_1us@j 0024  
                   ??_LED_Initialization 0024                             _DimmerLights 006C  
                      LedPointSelect@led 0020                   __size_of_DelayOff_Main 0004  
                   __size_of_setRF_Learn 0008                       getTemp_Safe@result 0020  
                            setBuz@count 002C                               __pmaintext 088F  
                    _CC2500_WriteCommand 1118                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 000B  
                       ??_setDelayOff_GO 002C                     __size_of_my_MainTime 0046  
          ??_DimmerLights_Initialization 0024                               ??_TMR0_ISR 0075  
                          ?_setTemp_Main 0070                               ??_TMR0_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0023  
                          ?_setSw_Enable 0070                       __size_of_setTxData 00B9  
                ?_setDimmerLights_Switch 0022                     Sw_DimmerAdjFunc@Idle 0024  
                                ?_setLED 0021                   __size_of_DelayTime_1us 0026  
                                _ADC_Set 1E45                _PowerFault_Initialization 1DEE  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 1497  
           __end_of_setRF_Initialization 1E53                    __size_of_getTemp_Safe 0008  
                          ?_setSw_Status 0022                       _setRFSW_AdjControl 0801  
                __end_of_RfSWPointSelect 1ECC                        Sw_DimmerOnFunc@sw 0063  
                                _IOC_ISR 1F13                          ?_setTemp_Enable 0070  
                                _IOC_Set 1F2D                     __size_of_setLog_Code 0032  
                   ?_CC2500_WriteCommand 0070                        _Flash_Memory_Main 11A0  
                      _Flash_Memory_Read 114A              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 007E                   __size_of_CC2500_TxData 0065  
                    ?_setRFSW_AdjControl 0070      setDimmerLights_TriggerERROR@command 0022  
                                _RF_Data 0120                                  _RF_Main 1DF7  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
        __end_of_setControl_Lights_Table 0CA1                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _Sw_DimmerOnFunc 08E4  
                        _setPercentValue 164E                           ??_setMemory_GO 0020  
                       ?_getPercentValue 0070                                  _Dimmer1 00EB  
           __end_of_CC2500_FrequencyCabr 1EE3                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1088                      ??_Flash_Memory_Main 0026  
                    ??_Flash_Memory_Read 0020                                  _VarLED1 00E7  
                                _VarLED2 0167                        __end_of_getRxData 1768  
             __end_of_setPowerFault_Main 0800                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1E97                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 1FD0                     ??_setRFSW_AdjControl 0064  
                           _getTemp_Safe 1E5B                           ??_setTemp_Main 0031  
                        __size_of___bmul 0012           __end_of_setDimmerLights_Switch 1FC0  
                                ___awdiv 083B                                  ___ftadd 032C  
                         ??_setSw_Enable 0022                                  ___ftdiv 0656  
                                ___ftmul 05A2                                  ___fttol 0F79  
                    __end_of_Switch_Main 1E27                  ??_Buzzer_Initialization 0020  
               ??_setOverTemp_Exceptions 002E                               ??___awtoft 002B  
                             ??___ftpack 0025                          __size_of_setLED 005F  
                   setRFSW_AdjControl@sw 0066                  ??_setDimmerLights_ERROR 0024  
                        __size_of_setBuz 0059                           ??_setSw_Status 0023  
                                __ptext1 16DA                                  __ptext2 1E73  
                                __ptext3 1FA1                                  __ptext4 1497  
                                __ptext5 12D0                                  __ptext6 11BF  
                                __ptext7 1E00                                  __ptext8 0EF3  
                                __ptext9 1694                  ??_setDimmerLights_AdjRF 005F  
                ??_setDimmerLights_AdjGo 0023                __size_of_CC2500_SIDLEMode 0004  
                    Sw_DimmerOnFunc@Idle 0062                    _DimmerIntrPointSelect 1E97  
                           __size_of_ISR 000F                __end_of_Flash_Memory_Main 11BF  
              __end_of_Flash_Memory_Read 1164                               _setRF_Main 0B6F  
                ??_myMain_Initialization 0020                            _DelayOff_Main 1E17  
                      _DimmerLights_Main 1E3E           __size_of_DlyOff_Initialization 000C  
                  ??_CC2500_WriteCommand 0022            __end_of_DlyOff_Initialization 1EEF  
             __end_of_CC2500_ClearRXFIFO 1E0B                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1E0F            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1164  
                    _DelayOffPointSelect 1EAB                                  clrloop0 1E39  
         __size_of_Switch_Initialization 0009            __end_of_Switch_Initialization 1E8D  
                   end_of_initialization 0043                ??_DelayOff_Initialization 0023  
                      _CC2500_InitSetREG 12F7                            _DelayTime_1us 12AA  
                      __end_of_setTxData 05A2               __end_of_Flash_Memory_Write 13FF  
                                init_ram 1E32                       ?_CC2500_InitSetREG 0070  
                    ??_DimmerLights_Main 0067                     Flash_Memory_Read@ret 0023  
                                initloop 1E33                               _setSw_Main 01F1  
                  CC2500_ReadByte@loop_b 0021                        _CC2500_ReadStatus 1242  
                            ?_getPF_Safe 0070                     Flash_Memory_Modify@i 0025  
                  _setLED_Initialization 1066                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                         setRFSW_Status@sw 0023  
               __size_of_CC2500_ReadByte 0017                            _CC2500_RxData 0DF6  
                          _CC2500_TxData 0B0A                      ??_CC2500_InitSetREG 0025  
                   __end_of_setRF_Enable 1F56           ??_setPowerFault_Initialization 0020  
            ?_setDimmerLights_TriggerAdj 0022                __size_of_getPowerFault_AD 0027  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 15C6                  _DimmerLights_Exceptions 1543  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1E7B  
                    ??_CC2500_ReadStatus 0022         getDimmerLights_StatusFlag@Status 0020  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 000F                 setLED_Initialization@led 0023  
                 setSw_Initialization@sw 0023                __end_of_DimmerLights_Main 1E45  
                     _Mcu_Initialization 1F65                 __size_of_CC2500_PowerRST 0043  
                         ?_DelayOff_Main 0070                         ?_RfSWPointSelect 0070  
                        _setSw_Main$4947 0067                         __CFG_FOSC$INTOSC 0000  
                 __end_of_LedPointSelect 1181                  __end_of_Sw_DimmerOnFunc 093B  
                __end_of_setPercentValue 1694                 __size_of_CC2500_WriteREG 0021  
              __end_of_CC2500_InitSetREG 1321                      ?_Mcu_Initialization 0070  
       __end_of_setPowerFault_Exceptions 1506                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 006C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 1506                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1264                            ?_RF_RxDisable 0070  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 114A  
                   _setRF_Initialization 1E4C                              _Switch_Main 1E23  
                      __size_of_LED_Main 000C                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1EB6  
                            ___ftmul@exp 0038                    _CC2500_PowerOnInitial 10D6  
                   ??_Mcu_Initialization 0020                    ??_DelayOffPointSelect 0020  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 109A  
              __size_of_Sw_DimmerAdjFunc 0031                     setRF_DimmerLights@on 005D  
               _DimmerIntrIOCPointSelect 1E8D                        __size_of_TMR0_ISR 0023  
        __size_of_setOverTemp_Exceptions 0046                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR0_Set 0008                     __end_of_setMemory_GO 1101  
          __size_of_setDimmerLights_Main 005B                           __end_of_setLED 0AA9  
                         __end_of_setBuz 0994                     _CC2500_FrequencyCabr 1ED7  
              __size_of_Sw_DimmerOffFunc 006F               __size_of_Flash_Memory_Main 001F  
             __size_of_Flash_Memory_Read 001A                              ?_setRF_Main 0070  
                        _setRFSW_Control 06FF                      __size_of_getPF_Safe 0008  
                      ?_setDimmerReClock 0070                      start_initialization 0015  
                      _setRF_DimmerValue 1462                          ?_LedPointSelect 0070  
             __end_of_DimmerLights_Close 10AD                              __end_of_ISR 0013  
                  ??_Flash_Memory_Modify 0024       __size_of_PowerFault_Initialization 0003  
                     ??_setDimmerReClock 0073                       ?_setRF_DimmerValue 0070  
             __end_of_CC2500_InitPATable 11A0          __size_of_setTemp_Initialization 0003  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0F79                           ??_RF_RxDisable 0024  
                   __end_of_setSw_Enable 1F83                             ?_Buzzer_Main 0070  
                     _set_TimeoutCleared 1E27                                 ??_IO_Set 0020  
               __size_of_Timeout_Counter 0015                                _VarErrLED 00E3  
                            ?_setSw_Main 0070                      ??_setRF_DimmerValue 0061  
                    __size_of_getTemp_AD 0036                   ?_setLED_Initialization 0070  
                   __end_of_setSw_Status 1F65                       Sw_DimmerAdjFunc@sw 0025  
                  ?_setRF_Initialization 0070                        __size_of_Fosc_Set 0004  
                __size_of_setRFSW_Status 000E                __size_of_CC2500_WriteByte 0014  
                              _Temp_Main 1E00                ??_DimmerLights_Exceptions 002D  
          setOverTemp_Exceptions@command 0030                      ?_set_TimeoutCleared 0070  
                              _Rx_Length 00D0                  setRF_DimmerValue@lights 0063  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 000B                                _Tx_Length 00D1  
                            __pdataBANK3 01A0                                 ??_setLED 0022  
                       ??_setTemp_Enable 0020                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0065  
                      ??_CC2500_ReadByte 0020                         _CC2500_SIDLEMode 1E0F  
             __size_of_DimmerLights_Main 0007                __end_of_setRF_DimmerValue 1497  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0021  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070                          _setRF_Main$4077 0068  
                            __pbssCOMMON 0076                                 ?_IOC_Set 0070  
                              ___latbits 0003                    setTemp_Enable@command 0020  
                    setRF_Enable@command 0020                         ?_Sw_DimmerOnFunc 0070  
                          __pcstackBANK0 0020                            __pcstackBANK2 016B  
                   ??_set_TimeoutCleared 0020                         ?_setPercentValue 0070  
                        ??_DelayTime_1us 0022               __size_of_CC2500_InitSetREG 002A  
               __size_of_setDimmerLights 007F                            DlyOff_Main@sw 0064  
                      ??_CC2500_PowerRST 0026                                 ?_RF_Main 0070  
                           ??_TouchPower 0020                 __size_of_PowerFault_Main 0003  
                   __size_of_DlyOff_Main 007A               __size_of_CC2500_ReadStatus 0022  
                 _setOverTemp_Exceptions 1694                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01C0  
                  CC2500_WriteREG@w_addr 0024                    setDelayOff_GO@command 002A  
              ??_DimmerLightsPointSelect 0020                    __size_of_setRF_Enable 000E  
                        ??_CC2500_RxData 0024                          ??_CC2500_TxData 0024  
                              __pnvBANK0 006E                            ??_my_MainTime 002D  
            __size_of_LED_Initialization 000C                   ?_CC2500_PowerOnInitial 0070  
                             ?_Temp_Main 0070                      __size_of_setRF_Main 0065  
                  DelayOffPointSelect@sw 0021                               setBuz@time 0029  
                    setDelayOff_GO@value 002B                 ?_setControl_Lights_Table 0070  
                 _setTemp_Initialization 1DFA                                _getBuz_GO 1077  
                       _getPowerFault_AD 12D0        __size_of_setPowerFault_Exceptions 0039  
    __end_of_Flash_Memory_Initialization 04E9              _Flash_Memory_Initialization 0422  
                               ?___awdiv 0020                ?_setPowerFault_Exceptions 0070  
                              __ptext100 1FC0                                __ptext101 1FB0  
                              __ptext110 1583                                __ptext102 1EB6  
                              __ptext111 12F7                                __ptext103 093B  
                              __ptext120 10C1                                __ptext112 1181  
                              __ptext104 083B                                __ptext121 10AD  
                              __ptext113 11FF                                __ptext105 1E13  
                              __ptext130 1376                                __ptext122 1768  
                              __ptext114 1ED7                                __ptext106 1EE3  
                              __ptext131 1E8D                                __ptext123 1DEB  
                              __ptext115 12AA                                __ptext107 1EAB  
                              __ptext116 1E0B                                __ptext108 10D6  
                              __ptext125 1264                                __ptext117 1E07  
                              __ptext109 1E0F                                 ?___ftadd 003E  
                              __ptext126 0047                                __ptext118 1118  
                              __ptext127 1E97                                __ptext119 1E27  
                              __ptext128 1F13                                __ptext129 1E03  
                              _getRxData 1720                                 ?___ftdiv 002E  
                               ?___ftmul 002E                                 ?___fttol 004B  
                __end_of_setRFSW_Control 078A            __size_of_setSw_Initialization 0010  
         __size_of_Buzzer_Initialization 0003            __end_of_Buzzer_Initialization 1DEE  
                       getPercentValue@i 005C                         setPercentValue@i 005A  
                          ??_setLog_Code 002D                       __end_of_TouchPower 1FA1  
                     _setPowerFault_Main 078A       setDimmerLights_TriggerERROR@lights 0023  
         __size_of_setDimmerLights_ERROR 004E                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 013B  
          __end_of_setDimmerLights_ERROR 1800             CC2500_ReadStatus@status_addr 0023  
         __size_of_setDimmerLights_AdjRF 0023           __size_of_setDimmerLights_AdjGo 0010  
          __end_of_setDimmerLights_AdjRF 12AA            __end_of_setDimmerLights_AdjGo 1FF0  
                 CC2500_WriteByte@loop_a 0021                                _r_address 00D2  
         __size_of_myMain_Initialization 000F             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1FB0                      ?_setPowerFault_Main 0070  
                         __size_of_getAD 0020                             _setRF_Enable 1F48  
                __size_of_DelayTimejudge 002A                            _SwPointSelect 1ECC  
                     Sw_DimmerOffFunc@sw 0064                      __end_of_setLED_Main 164E  
                    _DimmerLightsIntrIOC 0078                   ??_setRF_Initialization 0020  
            __end_of_Temp_Initialization 1E00                        _CC2500_rfSettings 102F  
                               _LED_Main 1F07                             ??_getPF_Safe 0020  
                        SwPointSelect@sw 0021                                clear_ram0 1E38  
               CC2500_InitPATable@loop_d 0027                                _setTxData 04E9  
    __end_of_DimmerLights_Initialization 1F2D              _DimmerLights_Initialization 1F20  
                     _CC2500_ClearRXFIFO 1E07                       _CC2500_ClearTXFIFO 1E0B  
         setDimmerLights_Trigger@command 0022                 setRF_DimmerLights@lights 0061  
                               _GO_nDONE 04E9                      __end_of_setRF_Learn 1E6B  
                   ??_setPowerFault_Main 0031                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 005B  
               setRF_DimmerLights@status 0060              __size_of_setRFSW_AdjControl 003A  
                  __size_of_setMemory_GO 0016                       _Flash_Memory_Write 13D0  
                             ?_getRxData 0070                                 _TMR0_ISR 1264  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                               _TMR0_Set 1E53                         _Sw_DimmerAdjFunc 13FF  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
                    __end_of_my_MainTime 1720        setDimmerLights_TriggerAdj@command 0022  
                               _RF_Count 00CB                     __end_of_RF_RxDisable 1F92  
                           ??_getTemp_AD 0024              __end_of_CC2500_WriteCommand 1131  
                 ??_CC2500_FrequencyCabr 0026                  DlyOff_Initialization@sw 0022  
                       __size_of_ADC_Set 0007               __size_of_setRF_DimmerValue 0035  
                    ?_Flash_Memory_Write 0070                         _Sw_DimmerOffFunc 0D0D  
                  __size_of_setTemp_Main 0086                  __size_of_setDelayOff_GO 0066  
                  __size_of_setSw_Enable 000F                                 _DelayOff 006B  
                           setSw_Main@sw 0068         setDimmerLights_IntrIOC_GO@lights 0072  
                     __end_of_getPF_Safe 1E73                         __size_of_IOC_ISR 000D  
           ?_setDimmerLights_IntrControl 0070                         __size_of_IOC_Set 000D  
           __end_of_Flash_Memory_Erasing 1EFB                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0023                      __end_of_setLog_Code 1462  
                  _DlyOff_Initialization 1EE3                    __size_of_setSw_Status 000F  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1E1B                    _Switch_Initialization 1E84  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0024  
                         _setRFSW_Status 1F3A                             _setMemory_GO 10EB  
                   __size_of_Buzzer_Main 004A                       __end_of_getTemp_AD 14CD  
                             ?_setTxData 0070                             ?_Switch_Main 0070  
             ??_DimmerIntrIOCPointSelect 0070                         _CC2500_WriteByte 10AD  
           Flash_Memory_Initialization@i 005E                              ??_Temp_Main 0032  
                      ??_PowerFault_Main 0032                        setRFSW_Control@sw 0063  
                              setLED@led 0022     __end_of_setDimmerLights_TriggerERROR 1376  
  __size_of_setDimmerLights_TriggerERROR 002B             _setDimmerLights_TriggerERROR 134B  
                ??_DimmerIntrPointSelect 0070                             _setTemp_Main 0EF3  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                           _setSw_Enable 1F74                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                                 ___awtoft 1220  
                       ??_LedPointSelect 0020                                 ___ftpack 0AA9  
                           _setSw_Status 1F56                        getTemp_AD@channel 0025  
                           ??_setRF_Main 0067                     CC2500_WriteREG@value 0022  
                            _setLED_Main 160A                    setRFSW_Status@command 0022  
             __end_of_setRF_DimmerLights 0D0D                 ?_DelayOff_Initialization 0070  
                       setDelayOff_GO@sw 002E                                 __ptext10 1E6B  
                               __ptext11 1DFD                                 __ptext20 1FE0  
                               __ptext12 1DFA                                 __ptext21 1E84  
                               __ptext13 1E23                                 __ptext30 0BD4  
                               __ptext22 1FD0                                 __ptext14 01F1  
                               __ptext31 1321                                 __ptext23 1F92  
                               __ptext15 1E63                                 __ptext40 1F83  
                               __ptext32 1088                                 __ptext24 1DF7  
                               __ptext16 08E4                                 __ptext41 0B0A  
                               __ptext33 0801                                 __ptext25 0B6F  
                               __ptext17 0D0D                                 __ptext50 1F74  
                               __ptext42 0DF6                                 __ptext34 1462  
                               __ptext26 1720                                 __ptext18 13FF  
                               __ptext51 1F48                                 __ptext43 1242  
                               __ptext35 1287                                 __ptext27 1430  
                               __ptext19 1FF0                                 __ptext60 1131  
                               __ptext52 1543                                 __ptext44 1101  
                               __ptext36 09EF                                 __ptext28 0C3A  
                               __ptext61 1F2D                                 __ptext53 134B  
                               __ptext45 1DF4                                 __ptext37 05A2  
                               __ptext29 06FF                                 __ptext70 1EEF  
                               __ptext62 1E1B                                 __ptext54 17B2  
                               __ptext46 1E4C                                 __ptext38 032C  
                               __ptext71 0422                                 __ptext63 1E45  
                               __ptext55 1E5B                                 __ptext47 1DF1  
                               __ptext39 1077                                 __ptext80 1164  
                               __ptext72 13D0                                 __ptext64 1F07  
                               __ptext56 1DEE                                 __ptext48 078A  
                               __ptext81 109A                                 __ptext73 1E7B  
                               __ptext65 160A                                 __ptext57 1E1F  
                               __ptext49 14CD                                 __ptext90 1F56  
                               __ptext82 10EB                                 __ptext74 114A  
                               __ptext66 1EFB                                 __ptext58 1F65  
                               __ptext91 1ECC                                 __ptext83 1EA1  
                               __ptext75 1E3E                                 __ptext67 1066  
                               __ptext59 1E53                                 __ptext92 0CA1  
                               __ptext84 1F20                                 __ptext76 0994  
                               __ptext68 11A0                                 __ptext93 164E  
                               __ptext85 13A3                                 __ptext77 1506  
                               __ptext69 15C6                                 __ptext94 0F79  
                               __ptext86 1E2C                                 __ptext78 0E74  
                               __ptext95 0656                                 __ptext87 1E17  
                               __ptext79 0A4A                                 __ptext96 1220  
                               __ptext88 0D7C                                 __ptext97 0AA9  
                               __ptext89 04E9                                 __ptext98 1F3A  
                               __ptext99 1EC1                                 __product 01A0  
          ??_setDimmerLights_IntrControl 0072                  ??_setLED_Initialization 0023  
               __size_of_RfSWPointSelect 000B           __size_of_Dimmer_Initialization 0006  
                 __end_of_setRFSW_Status 1F48            __end_of_Dimmer_Initialization 1E32  
           __end_of_setDimmerLights_Main 09EF              setDimmerLights_ERROR@lights 0025  
                           ??_setSw_Main 0065                            setLED@command 0021  
                          __size_of_main 0055                              _setRF_Learn 1E63  
               __end_of_CC2500_SIDLEMode 1E13               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1EB6               CC2500_WriteCommand@command 0023  
                     _DimmerLights_Close 109A                 ??_setDimmerLights_Switch 0023  
              __size_of_setDimmerReClock 0004                              getPF_Safe@i 0020  
                        _CC2500_ReadByte 1101                              _my_MainTime 16DA  
                     _CC2500_InitPATable 1181      __size_of_getDimmerLights_StatusFlag 000A  
          setDimmerLights_Trigger@lights 0023                       __end_of_setRF_Main 0BD4  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 000F  
                   _CC2500_patable_vaule 105E                              ??_getRxData 0067  
                    ?_DimmerLights_Close 0070         setDimmerLights_TriggerAdj@lights 0023  
                               main@argc 016B            ?_setDimmerLights_TriggerERROR 0022  
                               main@argv 016D                      ?_CC2500_InitPATable 0070  
                        _CC2500_PowerRST 1583              __end_of_Flash_Memory_Modify 160A  
                      ??_getPercentValue 0059                              _setLog_Code 1430  
            __end_of_Flash_Memory_Unlock 1E84                          ??_SwPointSelect 0020  
                        _CC2500_WriteREG 11FF                       __end_of_setSw_Main 032C  
                          _Transceive_OK 03D9                   ?_DlyOff_Initialization 0070  
                ?_setOverTemp_Exceptions 0070                           _DelayTimejudge 1321  
                            pic14e$flags 007E                 __end_of_getPowerFault_AD 12F7  
                   ??_DimmerLights_Close 0023             ??_setDimmerLights_IntrIOC_GO 0072  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                          ?_setRFSW_Status 0022  
                ??_CC2500_PowerOnInitial 0029   __end_of_setDimmerLights_Initialization 13D0  
__size_of_setDimmerLights_Initialization 002D           _setDimmerLights_Initialization 13A3  
            __end_of_setDimmerLights_Adj 1543                  ?_setTemp_Initialization 0070  
                            ??_setTxData 0020                   CC2500_InitPATable@temp 0026  
                  __size_of_RF_RxDisable 000F                        _RF_Initialization 1DF4  
   __size_of_setDimmerLights_IntrControl 01AA                            ?_getTemp_Safe 0070  
                   _Flash_Memory_Erasing 1EEF                       ?_RF_Initialization 0070  
                             _SPI0Buffer 007A          __end_of_DelayOff_Initialization 1E17  
    __size_of_setDimmerLights_IntrIOC_GO 002D                               _OPTION_REG 0095  
                  __end_of_DelayOff_Main 1E1B                      ??_RF_Initialization 0021  
                         _setDelayOff_GO 0BD4         __size_of_setControl_Lights_Table 0067  
                 __end_of_DelayTimejudge 134B           __end_of_setOverTemp_Exceptions 16DA  
   __size_of_Flash_Memory_Initialization 00C7              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0062                    __end_of_DelayTime_1us 12D0  
               __end_of_Sw_DimmerAdjFunc 1430                  __end_of_CC2500_ReadByte 1118  
           __end_of_setSw_Initialization 1FE0                          _Timeout_Counter 10C1  
                   getPercentValue@value 005B                             _RF_RxDisable 1F83  
             ?_PowerFault_Initialization 0070               __end_of_LED_Initialization 1F07  
       __size_of_setDimmerLights_Trigger 0010           __end_of_setTemp_Initialization 1DFD  
               __size_of_Sw_DimmerOnFunc 0057                 ?_DimmerLights_Exceptions 0070  
               __size_of_setPercentValue 0046                     setPercentValue@value 0059  
              __end_of_RF_Initialization 1DF7                 __end_of_Sw_DimmerOffFunc 0D7C  
        __size_of_setDimmerLights_Switch 0010                        ??_RfSWPointSelect 0020  
                  __end_of_CC2500_RxData 0E74                    __end_of_CC2500_TxData 0B6F  
                         ??_getTemp_Safe 0020                      setSw_Status@command 0022  
                __end_of_CC2500_PowerRST 15C6  
